# id;timestamp;commentText;codeText;commentWords;codeWords
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough();1328020251;@Test_public void testPrototypeCreationWithConstructorArgumentsIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Constructor<TestBean> ctor = TestBean.class.getConstructor(String.class, int.class)__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = ctor.newInstance("juergen", 99)__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__assertEquals("juergen", tb.getName())__assertEquals(99, tb.getAge())___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 1500)_;@Test_	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough() {_		if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_			_			return__		}_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue(new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};test,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,constructor,test,bean,ctor,test,bean,class,get,constructor,string,class,int,class,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,ctor,new,instance,juergen,99,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,1500;test,public,void,test,prototype,creation,with,resolved,constructor,arguments,is,fast,enough,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough();1338132867;@Test_public void testPrototypeCreationWithConstructorArgumentsIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Constructor<TestBean> ctor = TestBean.class.getConstructor(String.class, int.class)__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = ctor.newInstance("juergen", 99)__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__assertEquals("juergen", tb.getName())__assertEquals(99, tb.getAge())___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 1500)_;@Test_	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough() {_		if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_			_			return__		}_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue(new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};test,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,constructor,test,bean,ctor,test,bean,class,get,constructor,string,class,int,class,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,ctor,new,instance,juergen,99,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,1500;test,public,void,test,prototype,creation,with,resolved,constructor,arguments,is,fast,enough,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough();1346790972;@Test_public void testPrototypeCreationWithConstructorArgumentsIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Constructor<TestBean> ctor = TestBean.class.getConstructor(String.class, int.class)__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = ctor.newInstance("juergen", 99)__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__assertEquals("juergen", tb.getName())__assertEquals(99, tb.getAge())___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 1500)_;@Test_	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough() {_		if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_			_			return__		}_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue(new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};test,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,constructor,test,bean,ctor,test,bean,class,get,constructor,string,class,int,class,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,ctor,new,instance,juergen,99,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,1500;test,public,void,test,prototype,creation,with,resolved,constructor,arguments,is,fast,enough,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough();1350077660;@Test_public void testPrototypeCreationWithConstructorArgumentsIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Constructor<TestBean> ctor = TestBean.class.getConstructor(String.class, int.class)__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = ctor.newInstance("juergen", 99)__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__assertEquals("juergen", tb.getName())__assertEquals(99, tb.getAge())___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 1500)_;@Test_	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough() {_		if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_			_			return__		}_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue(new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};test,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,constructor,test,bean,ctor,test,bean,class,get,constructor,string,class,int,class,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,ctor,new,instance,juergen,99,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,1500;test,public,void,test,prototype,creation,with,resolved,constructor,arguments,is,fast,enough,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough();1353966428;@Test_public void testPrototypeCreationWithConstructorArgumentsIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Constructor<TestBean> ctor = TestBean.class.getConstructor(String.class, int.class)__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = ctor.newInstance("juergen", 99)__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__assertEquals("juergen", tb.getName())__assertEquals(99, tb.getAge())___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 1500)_;@Test_	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough() {_		if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_			_			return__		}_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue(new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};test,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,constructor,test,bean,ctor,test,bean,class,get,constructor,string,class,int,class,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,ctor,new,instance,juergen,99,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,1500;test,public,void,test,prototype,creation,with,resolved,constructor,arguments,is,fast,enough,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough();1356735495;@Test_public void testPrototypeCreationWithConstructorArgumentsIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Constructor<TestBean> ctor = TestBean.class.getConstructor(String.class, int.class)__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = ctor.newInstance("juergen", 99)__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__assertEquals("juergen", tb.getName())__assertEquals(99, tb.getAge())___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 1500)_;@Test_	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue(new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};test,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,constructor,test,bean,ctor,test,bean,class,get,constructor,string,class,int,class,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,ctor,new,instance,juergen,99,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,1500;test,public,void,test,prototype,creation,with,resolved,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough();1357119417;@Test_public void testPrototypeCreationWithConstructorArgumentsIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Constructor<TestBean> ctor = TestBean.class.getConstructor(String.class, int.class)__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = ctor.newInstance("juergen", 99)__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__assertEquals("juergen", tb.getName())__assertEquals(99, tb.getAge())___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 1500)_;@Test_	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue(new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};test,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,constructor,test,bean,ctor,test,bean,class,get,constructor,string,class,int,class,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,ctor,new,instance,juergen,99,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,1500;test,public,void,test,prototype,creation,with,resolved,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough();1362408075;@Test_public void testPrototypeCreationWithConstructorArgumentsIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Constructor<TestBean> ctor = TestBean.class.getConstructor(String.class, int.class)__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = ctor.newInstance("juergen", 99)__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__assertEquals("juergen", tb.getName())__assertEquals(99, tb.getAge())___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 1500)_;@Test_	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue(new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};test,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,constructor,test,bean,ctor,test,bean,class,get,constructor,string,class,int,class,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,ctor,new,instance,juergen,99,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,1500;test,public,void,test,prototype,creation,with,resolved,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough();1363208506;@Test_public void testPrototypeCreationWithConstructorArgumentsIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Constructor<TestBean> ctor = TestBean.class.getConstructor(String.class, int.class)__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = ctor.newInstance("juergen", 99)__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__assertEquals("juergen", tb.getName())__assertEquals(99, tb.getAge())___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 1500)_;@Test_	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue(new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};test,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,constructor,test,bean,ctor,test,bean,class,get,constructor,string,class,int,class,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,ctor,new,instance,juergen,99,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,1500;test,public,void,test,prototype,creation,with,resolved,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough();1364503447;@Test_public void testPrototypeCreationWithConstructorArgumentsIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Constructor<TestBean> ctor = TestBean.class.getConstructor(String.class, int.class)__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = ctor.newInstance("juergen", 99)__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__assertEquals("juergen", tb.getName())__assertEquals(99, tb.getAge())___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 1500)_;@Test_	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue(new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};test,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,constructor,test,bean,ctor,test,bean,class,get,constructor,string,class,int,class,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,ctor,new,instance,juergen,99,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,1500;test,public,void,test,prototype,creation,with,resolved,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough();1368482696;@Test_public void testPrototypeCreationWithConstructorArgumentsIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Constructor<TestBean> ctor = TestBean.class.getConstructor(String.class, int.class)__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = ctor.newInstance("juergen", 99)__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__assertEquals("juergen", tb.getName())__assertEquals(99, tb.getAge())___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 1500)_;@Test_	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue(new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};test,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,constructor,test,bean,ctor,test,bean,class,get,constructor,string,class,int,class,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,ctor,new,instance,juergen,99,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,1500;test,public,void,test,prototype,creation,with,resolved,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough();1368628892;@Test_public void testPrototypeCreationWithConstructorArgumentsIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Constructor<TestBean> ctor = TestBean.class.getConstructor(String.class, int.class)__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = ctor.newInstance("juergen", 99)__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__assertEquals("juergen", tb.getName())__assertEquals(99, tb.getAge())___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 1500)_;@Test_	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue(new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};test,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,constructor,test,bean,ctor,test,bean,class,get,constructor,string,class,int,class,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,ctor,new,instance,juergen,99,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,1500;test,public,void,test,prototype,creation,with,resolved,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough();1384527851;@Test_public void testPrototypeCreationWithConstructorArgumentsIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Constructor<TestBean> ctor = TestBean.class.getConstructor(String.class, int.class)__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = ctor.newInstance("juergen", 99)__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__assertEquals("juergen", tb.getName())__assertEquals(99, tb.getAge())___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 1500)_;@Test_	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue(new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};test,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,constructor,test,bean,ctor,test,bean,class,get,constructor,string,class,int,class,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,ctor,new,instance,juergen,99,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,1500;test,public,void,test,prototype,creation,with,resolved,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough();1385984377;@Test_public void testPrototypeCreationWithConstructorArgumentsIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Constructor<TestBean> ctor = TestBean.class.getConstructor(String.class, int.class)__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = ctor.newInstance("juergen", 99)__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__assertEquals("juergen", tb.getName())__assertEquals(99, tb.getAge())___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 1500)_;@Test_	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue(new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};test,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,constructor,test,bean,ctor,test,bean,class,get,constructor,string,class,int,class,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,ctor,new,instance,juergen,99,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,1500;test,public,void,test,prototype,creation,with,resolved,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough();1396273075;@Test_public void testPrototypeCreationWithConstructorArgumentsIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Constructor<TestBean> ctor = TestBean.class.getConstructor(String.class, int.class)__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = ctor.newInstance("juergen", 99)__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__assertEquals("juergen", tb.getName())__assertEquals(99, tb.getAge())___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 1500)_;@Test_	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue(new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};test,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,constructor,test,bean,ctor,test,bean,class,get,constructor,string,class,int,class,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,ctor,new,instance,juergen,99,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,1500;test,public,void,test,prototype,creation,with,resolved,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough();1396273750;@Test_public void testPrototypeCreationWithConstructorArgumentsIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Constructor<TestBean> ctor = TestBean.class.getConstructor(String.class, int.class)__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = ctor.newInstance("juergen", 99)__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__assertEquals("juergen", tb.getName())__assertEquals(99, tb.getAge())___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 1500)_;@Test_	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue(new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};test,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,constructor,test,bean,ctor,test,bean,class,get,constructor,string,class,int,class,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,ctor,new,instance,juergen,99,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,1500;test,public,void,test,prototype,creation,with,resolved,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough();1404807963;@Test_public void testPrototypeCreationWithConstructorArgumentsIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Constructor<TestBean> ctor = TestBean.class.getConstructor(String.class, int.class)__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = ctor.newInstance("juergen", 99)__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__assertEquals("juergen", tb.getName())__assertEquals(99, tb.getAge())___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 1500)_;@Test_	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue(new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};test,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,constructor,test,bean,ctor,test,bean,class,get,constructor,string,class,int,class,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,ctor,new,instance,juergen,99,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,1500;test,public,void,test,prototype,creation,with,resolved,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough();1406134269;@Test_public void testPrototypeCreationWithConstructorArgumentsIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Constructor<TestBean> ctor = TestBean.class.getConstructor(String.class, int.class)__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = ctor.newInstance("juergen", 99)__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__assertEquals("juergen", tb.getName())__assertEquals(99, tb.getAge())___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 1500)_;@Test_	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue(new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};test,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,constructor,test,bean,ctor,test,bean,class,get,constructor,string,class,int,class,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,ctor,new,instance,juergen,99,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,1500;test,public,void,test,prototype,creation,with,resolved,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough();1407874032;@Test_public void testPrototypeCreationWithConstructorArgumentsIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Constructor<TestBean> ctor = TestBean.class.getConstructor(String.class, int.class)__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = ctor.newInstance("juergen", 99)__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__assertEquals("juergen", tb.getName())__assertEquals(99, tb.getAge())___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 1500)_;@Test_	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue(new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};test,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,constructor,test,bean,ctor,test,bean,class,get,constructor,string,class,int,class,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,ctor,new,instance,juergen,99,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,1500;test,public,void,test,prototype,creation,with,resolved,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough();1409784073;@Test_public void testPrototypeCreationWithConstructorArgumentsIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Constructor<TestBean> ctor = TestBean.class.getConstructor(String.class, int.class)__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = ctor.newInstance("juergen", 99)__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__assertEquals("juergen", tb.getName())__assertEquals(99, tb.getAge())___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 1500)_;@Test_	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue(new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};test,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,constructor,test,bean,ctor,test,bean,class,get,constructor,string,class,int,class,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,ctor,new,instance,juergen,99,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,1500;test,public,void,test,prototype,creation,with,resolved,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough();1414738527;@Test_public void testPrototypeCreationWithConstructorArgumentsIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Constructor<TestBean> ctor = TestBean.class.getConstructor(String.class, int.class)__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = ctor.newInstance("juergen", 99)__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__assertEquals("juergen", tb.getName())__assertEquals(99, tb.getAge())___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 1500)_;@Test_	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue(new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};test,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,constructor,test,bean,ctor,test,bean,class,get,constructor,string,class,int,class,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,ctor,new,instance,juergen,99,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,1500;test,public,void,test,prototype,creation,with,resolved,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough();1414833080;@Test_public void testPrototypeCreationWithConstructorArgumentsIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Constructor<TestBean> ctor = TestBean.class.getConstructor(String.class, int.class)__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = ctor.newInstance("juergen", 99)__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__assertEquals("juergen", tb.getName())__assertEquals(99, tb.getAge())___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 1500)_;@Test_	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue(new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};test,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,constructor,test,bean,ctor,test,bean,class,get,constructor,string,class,int,class,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,ctor,new,instance,juergen,99,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,1500;test,public,void,test,prototype,creation,with,resolved,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough();1417192618;@Test_public void testPrototypeCreationWithConstructorArgumentsIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Constructor<TestBean> ctor = TestBean.class.getConstructor(String.class, int.class)__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = ctor.newInstance("juergen", 99)__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__assertEquals("juergen", tb.getName())__assertEquals(99, tb.getAge())___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 1500)_;@Test_	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue(new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};test,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,constructor,test,bean,ctor,test,bean,class,get,constructor,string,class,int,class,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,ctor,new,instance,juergen,99,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,1500;test,public,void,test,prototype,creation,with,resolved,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough();1419352511;@Test_public void testPrototypeCreationWithConstructorArgumentsIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Constructor<TestBean> ctor = TestBean.class.getConstructor(String.class, int.class)__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = ctor.newInstance("juergen", 99)__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__assertEquals("juergen", tb.getName())__assertEquals(99, tb.getAge())___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 1500)_;@Test_	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue(new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};test,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,constructor,test,bean,ctor,test,bean,class,get,constructor,string,class,int,class,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,ctor,new,instance,juergen,99,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,1500;test,public,void,test,prototype,creation,with,resolved,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough();1425639147;@Test_public void testPrototypeCreationWithConstructorArgumentsIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Constructor<TestBean> ctor = TestBean.class.getConstructor(String.class, int.class)__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = ctor.newInstance("juergen", 99)__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__assertEquals("juergen", tb.getName())__assertEquals(99, tb.getAge())___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 1500)_;@Test_	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue(new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};test,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,constructor,test,bean,ctor,test,bean,class,get,constructor,string,class,int,class,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,ctor,new,instance,juergen,99,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,1500;test,public,void,test,prototype,creation,with,resolved,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough();1426716313;@Test_public void testPrototypeCreationWithConstructorArgumentsIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Constructor<TestBean> ctor = TestBean.class.getConstructor(String.class, int.class)__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = ctor.newInstance("juergen", 99)__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__assertEquals("juergen", tb.getName())__assertEquals(99, tb.getAge())___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 1500)_;@Test_	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue(new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};test,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,constructor,test,bean,ctor,test,bean,class,get,constructor,string,class,int,class,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,ctor,new,instance,juergen,99,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,1500;test,public,void,test,prototype,creation,with,resolved,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough();1427144223;@Test_public void testPrototypeCreationWithConstructorArgumentsIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Constructor<TestBean> ctor = TestBean.class.getConstructor(String.class, int.class)__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = ctor.newInstance("juergen", 99)__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__assertEquals("juergen", tb.getName())__assertEquals(99, tb.getAge())___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 1500)_;@Test_	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue(new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};test,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,constructor,test,bean,ctor,test,bean,class,get,constructor,string,class,int,class,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,ctor,new,instance,juergen,99,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,1500;test,public,void,test,prototype,creation,with,resolved,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough();1427221215;@Test_public void testPrototypeCreationWithConstructorArgumentsIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Constructor<TestBean> ctor = TestBean.class.getConstructor(String.class, int.class)__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = ctor.newInstance("juergen", 99)__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__assertEquals("juergen", tb.getName())__assertEquals(99, tb.getAge())___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 1500)_;@Test_	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue(new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};test,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,constructor,test,bean,ctor,test,bean,class,get,constructor,string,class,int,class,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,ctor,new,instance,juergen,99,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,1500;test,public,void,test,prototype,creation,with,resolved,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough();1440515183;@Test_public void testPrototypeCreationWithConstructorArgumentsIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Constructor<TestBean> ctor = TestBean.class.getConstructor(String.class, int.class)__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = ctor.newInstance("juergen", 99)__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__assertEquals("juergen", tb.getName())__assertEquals(99, tb.getAge())___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 1500)_;@Test_	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue(new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};test,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,constructor,test,bean,ctor,test,bean,class,get,constructor,string,class,int,class,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,ctor,new,instance,juergen,99,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,1500;test,public,void,test,prototype,creation,with,resolved,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough();1443187240;@Test_public void testPrototypeCreationWithConstructorArgumentsIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Constructor<TestBean> ctor = TestBean.class.getConstructor(String.class, int.class)__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = ctor.newInstance("juergen", 99)__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__assertEquals("juergen", tb.getName())__assertEquals(99, tb.getAge())___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 1500)_;@Test_	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue(new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};test,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,constructor,test,bean,ctor,test,bean,class,get,constructor,string,class,int,class,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,ctor,new,instance,juergen,99,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,1500;test,public,void,test,prototype,creation,with,resolved,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough();1448910626;@Test_public void testPrototypeCreationWithConstructorArgumentsIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Constructor<TestBean> ctor = TestBean.class.getConstructor(String.class, int.class)__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = ctor.newInstance("juergen", 99)__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__assertEquals("juergen", tb.getName())__assertEquals(99, tb.getAge())___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 1500)_;@Test_	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue(new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};test,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,constructor,test,bean,ctor,test,bean,class,get,constructor,string,class,int,class,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,ctor,new,instance,juergen,99,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,1500;test,public,void,test,prototype,creation,with,resolved,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough();1448917074;@Test_public void testPrototypeCreationWithConstructorArgumentsIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Constructor<TestBean> ctor = TestBean.class.getConstructor(String.class, int.class)__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = ctor.newInstance("juergen", 99)__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__assertEquals("juergen", tb.getName())__assertEquals(99, tb.getAge())___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 1500)_;@Test_	public void testPrototypeCreationWithResolvedConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue(new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};test,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,constructor,test,bean,ctor,test,bean,class,get,constructor,string,class,int,class,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,ctor,new,instance,juergen,99,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,1500;test,public,void,test,prototype,creation,with,resolved,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough();1328020251;public void testPrototypeCreationWithPropertiesIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__StopWatch sw = new StopWatch()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__Method setNameMethod = TestBean.class.getMethod("setName", String.class)__Method setAgeMethod = TestBean.class.getMethod("setAge", int.class)__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__setNameMethod.invoke(tb, "juergen")__setAgeMethod.invoke(tb, 99)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 750)_;@Test_	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough() {_		if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_			_			return__		}_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getPropertyValues().add("spouse", new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};public,void,test,prototype,creation,with,properties,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,stop,watch,sw,new,stop,watch,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,method,set,name,method,test,bean,class,get,method,set,name,string,class,method,set,age,method,test,bean,class,get,method,set,age,int,class,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,set,name,method,invoke,tb,juergen,set,age,method,invoke,tb,99,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,750;test,public,void,test,prototype,creation,with,resolved,properties,is,fast,enough,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,property,values,add,spouse,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough();1338132867;public void testPrototypeCreationWithPropertiesIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__StopWatch sw = new StopWatch()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__Method setNameMethod = TestBean.class.getMethod("setName", String.class)__Method setAgeMethod = TestBean.class.getMethod("setAge", int.class)__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__setNameMethod.invoke(tb, "juergen")__setAgeMethod.invoke(tb, 99)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 750)_;@Test_	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough() {_		if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_			_			return__		}_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getPropertyValues().add("spouse", new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};public,void,test,prototype,creation,with,properties,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,stop,watch,sw,new,stop,watch,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,method,set,name,method,test,bean,class,get,method,set,name,string,class,method,set,age,method,test,bean,class,get,method,set,age,int,class,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,set,name,method,invoke,tb,juergen,set,age,method,invoke,tb,99,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,750;test,public,void,test,prototype,creation,with,resolved,properties,is,fast,enough,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,property,values,add,spouse,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough();1346790972;public void testPrototypeCreationWithPropertiesIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__StopWatch sw = new StopWatch()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__Method setNameMethod = TestBean.class.getMethod("setName", String.class)__Method setAgeMethod = TestBean.class.getMethod("setAge", int.class)__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__setNameMethod.invoke(tb, "juergen")__setAgeMethod.invoke(tb, 99)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 750)_;@Test_	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough() {_		if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_			_			return__		}_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getPropertyValues().add("spouse", new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};public,void,test,prototype,creation,with,properties,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,stop,watch,sw,new,stop,watch,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,method,set,name,method,test,bean,class,get,method,set,name,string,class,method,set,age,method,test,bean,class,get,method,set,age,int,class,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,set,name,method,invoke,tb,juergen,set,age,method,invoke,tb,99,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,750;test,public,void,test,prototype,creation,with,resolved,properties,is,fast,enough,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,property,values,add,spouse,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough();1350077660;public void testPrototypeCreationWithPropertiesIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__StopWatch sw = new StopWatch()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__Method setNameMethod = TestBean.class.getMethod("setName", String.class)__Method setAgeMethod = TestBean.class.getMethod("setAge", int.class)__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__setNameMethod.invoke(tb, "juergen")__setAgeMethod.invoke(tb, 99)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 750)_;@Test_	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough() {_		if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_			_			return__		}_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getPropertyValues().add("spouse", new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};public,void,test,prototype,creation,with,properties,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,stop,watch,sw,new,stop,watch,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,method,set,name,method,test,bean,class,get,method,set,name,string,class,method,set,age,method,test,bean,class,get,method,set,age,int,class,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,set,name,method,invoke,tb,juergen,set,age,method,invoke,tb,99,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,750;test,public,void,test,prototype,creation,with,resolved,properties,is,fast,enough,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,property,values,add,spouse,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough();1353966428;public void testPrototypeCreationWithPropertiesIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__StopWatch sw = new StopWatch()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__Method setNameMethod = TestBean.class.getMethod("setName", String.class)__Method setAgeMethod = TestBean.class.getMethod("setAge", int.class)__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__setNameMethod.invoke(tb, "juergen")__setAgeMethod.invoke(tb, 99)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 750)_;@Test_	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough() {_		if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_			_			return__		}_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getPropertyValues().add("spouse", new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};public,void,test,prototype,creation,with,properties,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,stop,watch,sw,new,stop,watch,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,method,set,name,method,test,bean,class,get,method,set,name,string,class,method,set,age,method,test,bean,class,get,method,set,age,int,class,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,set,name,method,invoke,tb,juergen,set,age,method,invoke,tb,99,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,750;test,public,void,test,prototype,creation,with,resolved,properties,is,fast,enough,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,property,values,add,spouse,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough();1356735495;public void testPrototypeCreationWithPropertiesIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__StopWatch sw = new StopWatch()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__Method setNameMethod = TestBean.class.getMethod("setName", String.class)__Method setAgeMethod = TestBean.class.getMethod("setAge", int.class)__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__setNameMethod.invoke(tb, "juergen")__setAgeMethod.invoke(tb, 99)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 750)_;@Test_	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getPropertyValues().add("spouse", new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};public,void,test,prototype,creation,with,properties,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,stop,watch,sw,new,stop,watch,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,method,set,name,method,test,bean,class,get,method,set,name,string,class,method,set,age,method,test,bean,class,get,method,set,age,int,class,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,set,name,method,invoke,tb,juergen,set,age,method,invoke,tb,99,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,750;test,public,void,test,prototype,creation,with,resolved,properties,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,property,values,add,spouse,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough();1357119417;public void testPrototypeCreationWithPropertiesIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__StopWatch sw = new StopWatch()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__Method setNameMethod = TestBean.class.getMethod("setName", String.class)__Method setAgeMethod = TestBean.class.getMethod("setAge", int.class)__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__setNameMethod.invoke(tb, "juergen")__setAgeMethod.invoke(tb, 99)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 750)_;@Test_	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getPropertyValues().add("spouse", new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};public,void,test,prototype,creation,with,properties,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,stop,watch,sw,new,stop,watch,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,method,set,name,method,test,bean,class,get,method,set,name,string,class,method,set,age,method,test,bean,class,get,method,set,age,int,class,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,set,name,method,invoke,tb,juergen,set,age,method,invoke,tb,99,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,750;test,public,void,test,prototype,creation,with,resolved,properties,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,property,values,add,spouse,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough();1362408075;public void testPrototypeCreationWithPropertiesIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__StopWatch sw = new StopWatch()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__Method setNameMethod = TestBean.class.getMethod("setName", String.class)__Method setAgeMethod = TestBean.class.getMethod("setAge", int.class)__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__setNameMethod.invoke(tb, "juergen")__setAgeMethod.invoke(tb, 99)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 750)_;@Test_	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getPropertyValues().add("spouse", new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};public,void,test,prototype,creation,with,properties,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,stop,watch,sw,new,stop,watch,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,method,set,name,method,test,bean,class,get,method,set,name,string,class,method,set,age,method,test,bean,class,get,method,set,age,int,class,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,set,name,method,invoke,tb,juergen,set,age,method,invoke,tb,99,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,750;test,public,void,test,prototype,creation,with,resolved,properties,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,property,values,add,spouse,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough();1363208506;public void testPrototypeCreationWithPropertiesIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__StopWatch sw = new StopWatch()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__Method setNameMethod = TestBean.class.getMethod("setName", String.class)__Method setAgeMethod = TestBean.class.getMethod("setAge", int.class)__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__setNameMethod.invoke(tb, "juergen")__setAgeMethod.invoke(tb, 99)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 750)_;@Test_	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getPropertyValues().add("spouse", new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};public,void,test,prototype,creation,with,properties,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,stop,watch,sw,new,stop,watch,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,method,set,name,method,test,bean,class,get,method,set,name,string,class,method,set,age,method,test,bean,class,get,method,set,age,int,class,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,set,name,method,invoke,tb,juergen,set,age,method,invoke,tb,99,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,750;test,public,void,test,prototype,creation,with,resolved,properties,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,property,values,add,spouse,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough();1364503447;public void testPrototypeCreationWithPropertiesIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__StopWatch sw = new StopWatch()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__Method setNameMethod = TestBean.class.getMethod("setName", String.class)__Method setAgeMethod = TestBean.class.getMethod("setAge", int.class)__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__setNameMethod.invoke(tb, "juergen")__setAgeMethod.invoke(tb, 99)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 750)_;@Test_	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getPropertyValues().add("spouse", new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};public,void,test,prototype,creation,with,properties,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,stop,watch,sw,new,stop,watch,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,method,set,name,method,test,bean,class,get,method,set,name,string,class,method,set,age,method,test,bean,class,get,method,set,age,int,class,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,set,name,method,invoke,tb,juergen,set,age,method,invoke,tb,99,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,750;test,public,void,test,prototype,creation,with,resolved,properties,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,property,values,add,spouse,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough();1368482696;public void testPrototypeCreationWithPropertiesIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__StopWatch sw = new StopWatch()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__Method setNameMethod = TestBean.class.getMethod("setName", String.class)__Method setAgeMethod = TestBean.class.getMethod("setAge", int.class)__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__setNameMethod.invoke(tb, "juergen")__setAgeMethod.invoke(tb, 99)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 750)_;@Test_	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getPropertyValues().add("spouse", new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};public,void,test,prototype,creation,with,properties,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,stop,watch,sw,new,stop,watch,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,method,set,name,method,test,bean,class,get,method,set,name,string,class,method,set,age,method,test,bean,class,get,method,set,age,int,class,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,set,name,method,invoke,tb,juergen,set,age,method,invoke,tb,99,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,750;test,public,void,test,prototype,creation,with,resolved,properties,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,property,values,add,spouse,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough();1368628892;public void testPrototypeCreationWithPropertiesIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__StopWatch sw = new StopWatch()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__Method setNameMethod = TestBean.class.getMethod("setName", String.class)__Method setAgeMethod = TestBean.class.getMethod("setAge", int.class)__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__setNameMethod.invoke(tb, "juergen")__setAgeMethod.invoke(tb, 99)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 750)_;@Test_	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getPropertyValues().add("spouse", new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};public,void,test,prototype,creation,with,properties,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,stop,watch,sw,new,stop,watch,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,method,set,name,method,test,bean,class,get,method,set,name,string,class,method,set,age,method,test,bean,class,get,method,set,age,int,class,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,set,name,method,invoke,tb,juergen,set,age,method,invoke,tb,99,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,750;test,public,void,test,prototype,creation,with,resolved,properties,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,property,values,add,spouse,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough();1384527851;public void testPrototypeCreationWithPropertiesIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__StopWatch sw = new StopWatch()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__Method setNameMethod = TestBean.class.getMethod("setName", String.class)__Method setAgeMethod = TestBean.class.getMethod("setAge", int.class)__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__setNameMethod.invoke(tb, "juergen")__setAgeMethod.invoke(tb, 99)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 750)_;@Test_	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getPropertyValues().add("spouse", new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};public,void,test,prototype,creation,with,properties,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,stop,watch,sw,new,stop,watch,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,method,set,name,method,test,bean,class,get,method,set,name,string,class,method,set,age,method,test,bean,class,get,method,set,age,int,class,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,set,name,method,invoke,tb,juergen,set,age,method,invoke,tb,99,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,750;test,public,void,test,prototype,creation,with,resolved,properties,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,property,values,add,spouse,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough();1385984377;public void testPrototypeCreationWithPropertiesIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__StopWatch sw = new StopWatch()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__Method setNameMethod = TestBean.class.getMethod("setName", String.class)__Method setAgeMethod = TestBean.class.getMethod("setAge", int.class)__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__setNameMethod.invoke(tb, "juergen")__setAgeMethod.invoke(tb, 99)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 750)_;@Test_	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getPropertyValues().add("spouse", new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};public,void,test,prototype,creation,with,properties,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,stop,watch,sw,new,stop,watch,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,method,set,name,method,test,bean,class,get,method,set,name,string,class,method,set,age,method,test,bean,class,get,method,set,age,int,class,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,set,name,method,invoke,tb,juergen,set,age,method,invoke,tb,99,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,750;test,public,void,test,prototype,creation,with,resolved,properties,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,property,values,add,spouse,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough();1396273075;public void testPrototypeCreationWithPropertiesIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__StopWatch sw = new StopWatch()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__Method setNameMethod = TestBean.class.getMethod("setName", String.class)__Method setAgeMethod = TestBean.class.getMethod("setAge", int.class)__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__setNameMethod.invoke(tb, "juergen")__setAgeMethod.invoke(tb, 99)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 750)_;@Test_	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getPropertyValues().add("spouse", new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};public,void,test,prototype,creation,with,properties,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,stop,watch,sw,new,stop,watch,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,method,set,name,method,test,bean,class,get,method,set,name,string,class,method,set,age,method,test,bean,class,get,method,set,age,int,class,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,set,name,method,invoke,tb,juergen,set,age,method,invoke,tb,99,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,750;test,public,void,test,prototype,creation,with,resolved,properties,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,property,values,add,spouse,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough();1396273750;public void testPrototypeCreationWithPropertiesIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__StopWatch sw = new StopWatch()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__Method setNameMethod = TestBean.class.getMethod("setName", String.class)__Method setAgeMethod = TestBean.class.getMethod("setAge", int.class)__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__setNameMethod.invoke(tb, "juergen")__setAgeMethod.invoke(tb, 99)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 750)_;@Test_	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getPropertyValues().add("spouse", new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};public,void,test,prototype,creation,with,properties,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,stop,watch,sw,new,stop,watch,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,method,set,name,method,test,bean,class,get,method,set,name,string,class,method,set,age,method,test,bean,class,get,method,set,age,int,class,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,set,name,method,invoke,tb,juergen,set,age,method,invoke,tb,99,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,750;test,public,void,test,prototype,creation,with,resolved,properties,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,property,values,add,spouse,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough();1404807963;public void testPrototypeCreationWithPropertiesIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__StopWatch sw = new StopWatch()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__Method setNameMethod = TestBean.class.getMethod("setName", String.class)__Method setAgeMethod = TestBean.class.getMethod("setAge", int.class)__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__setNameMethod.invoke(tb, "juergen")__setAgeMethod.invoke(tb, 99)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 750)_;@Test_	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getPropertyValues().add("spouse", new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};public,void,test,prototype,creation,with,properties,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,stop,watch,sw,new,stop,watch,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,method,set,name,method,test,bean,class,get,method,set,name,string,class,method,set,age,method,test,bean,class,get,method,set,age,int,class,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,set,name,method,invoke,tb,juergen,set,age,method,invoke,tb,99,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,750;test,public,void,test,prototype,creation,with,resolved,properties,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,property,values,add,spouse,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough();1406134269;public void testPrototypeCreationWithPropertiesIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__StopWatch sw = new StopWatch()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__Method setNameMethod = TestBean.class.getMethod("setName", String.class)__Method setAgeMethod = TestBean.class.getMethod("setAge", int.class)__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__setNameMethod.invoke(tb, "juergen")__setAgeMethod.invoke(tb, 99)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 750)_;@Test_	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getPropertyValues().add("spouse", new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};public,void,test,prototype,creation,with,properties,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,stop,watch,sw,new,stop,watch,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,method,set,name,method,test,bean,class,get,method,set,name,string,class,method,set,age,method,test,bean,class,get,method,set,age,int,class,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,set,name,method,invoke,tb,juergen,set,age,method,invoke,tb,99,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,750;test,public,void,test,prototype,creation,with,resolved,properties,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,property,values,add,spouse,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough();1407874032;public void testPrototypeCreationWithPropertiesIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__StopWatch sw = new StopWatch()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__Method setNameMethod = TestBean.class.getMethod("setName", String.class)__Method setAgeMethod = TestBean.class.getMethod("setAge", int.class)__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__setNameMethod.invoke(tb, "juergen")__setAgeMethod.invoke(tb, 99)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 750)_;@Test_	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getPropertyValues().add("spouse", new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};public,void,test,prototype,creation,with,properties,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,stop,watch,sw,new,stop,watch,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,method,set,name,method,test,bean,class,get,method,set,name,string,class,method,set,age,method,test,bean,class,get,method,set,age,int,class,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,set,name,method,invoke,tb,juergen,set,age,method,invoke,tb,99,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,750;test,public,void,test,prototype,creation,with,resolved,properties,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,property,values,add,spouse,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough();1409784073;public void testPrototypeCreationWithPropertiesIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__StopWatch sw = new StopWatch()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__Method setNameMethod = TestBean.class.getMethod("setName", String.class)__Method setAgeMethod = TestBean.class.getMethod("setAge", int.class)__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__setNameMethod.invoke(tb, "juergen")__setAgeMethod.invoke(tb, 99)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 750)_;@Test_	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getPropertyValues().add("spouse", new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};public,void,test,prototype,creation,with,properties,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,stop,watch,sw,new,stop,watch,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,method,set,name,method,test,bean,class,get,method,set,name,string,class,method,set,age,method,test,bean,class,get,method,set,age,int,class,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,set,name,method,invoke,tb,juergen,set,age,method,invoke,tb,99,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,750;test,public,void,test,prototype,creation,with,resolved,properties,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,property,values,add,spouse,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough();1414738527;public void testPrototypeCreationWithPropertiesIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__StopWatch sw = new StopWatch()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__Method setNameMethod = TestBean.class.getMethod("setName", String.class)__Method setAgeMethod = TestBean.class.getMethod("setAge", int.class)__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__setNameMethod.invoke(tb, "juergen")__setAgeMethod.invoke(tb, 99)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 750)_;@Test_	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getPropertyValues().add("spouse", new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};public,void,test,prototype,creation,with,properties,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,stop,watch,sw,new,stop,watch,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,method,set,name,method,test,bean,class,get,method,set,name,string,class,method,set,age,method,test,bean,class,get,method,set,age,int,class,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,set,name,method,invoke,tb,juergen,set,age,method,invoke,tb,99,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,750;test,public,void,test,prototype,creation,with,resolved,properties,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,property,values,add,spouse,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough();1414833080;public void testPrototypeCreationWithPropertiesIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__StopWatch sw = new StopWatch()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__Method setNameMethod = TestBean.class.getMethod("setName", String.class)__Method setAgeMethod = TestBean.class.getMethod("setAge", int.class)__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__setNameMethod.invoke(tb, "juergen")__setAgeMethod.invoke(tb, 99)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 750)_;@Test_	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getPropertyValues().add("spouse", new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};public,void,test,prototype,creation,with,properties,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,stop,watch,sw,new,stop,watch,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,method,set,name,method,test,bean,class,get,method,set,name,string,class,method,set,age,method,test,bean,class,get,method,set,age,int,class,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,set,name,method,invoke,tb,juergen,set,age,method,invoke,tb,99,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,750;test,public,void,test,prototype,creation,with,resolved,properties,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,property,values,add,spouse,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough();1417192618;public void testPrototypeCreationWithPropertiesIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__StopWatch sw = new StopWatch()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__Method setNameMethod = TestBean.class.getMethod("setName", String.class)__Method setAgeMethod = TestBean.class.getMethod("setAge", int.class)__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__setNameMethod.invoke(tb, "juergen")__setAgeMethod.invoke(tb, 99)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 750)_;@Test_	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getPropertyValues().add("spouse", new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};public,void,test,prototype,creation,with,properties,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,stop,watch,sw,new,stop,watch,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,method,set,name,method,test,bean,class,get,method,set,name,string,class,method,set,age,method,test,bean,class,get,method,set,age,int,class,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,set,name,method,invoke,tb,juergen,set,age,method,invoke,tb,99,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,750;test,public,void,test,prototype,creation,with,resolved,properties,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,property,values,add,spouse,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough();1419352511;public void testPrototypeCreationWithPropertiesIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__StopWatch sw = new StopWatch()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__Method setNameMethod = TestBean.class.getMethod("setName", String.class)__Method setAgeMethod = TestBean.class.getMethod("setAge", int.class)__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__setNameMethod.invoke(tb, "juergen")__setAgeMethod.invoke(tb, 99)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 750)_;@Test_	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getPropertyValues().add("spouse", new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};public,void,test,prototype,creation,with,properties,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,stop,watch,sw,new,stop,watch,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,method,set,name,method,test,bean,class,get,method,set,name,string,class,method,set,age,method,test,bean,class,get,method,set,age,int,class,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,set,name,method,invoke,tb,juergen,set,age,method,invoke,tb,99,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,750;test,public,void,test,prototype,creation,with,resolved,properties,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,property,values,add,spouse,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough();1425639147;public void testPrototypeCreationWithPropertiesIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__StopWatch sw = new StopWatch()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__Method setNameMethod = TestBean.class.getMethod("setName", String.class)__Method setAgeMethod = TestBean.class.getMethod("setAge", int.class)__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__setNameMethod.invoke(tb, "juergen")__setAgeMethod.invoke(tb, 99)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 750)_;@Test_	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getPropertyValues().add("spouse", new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};public,void,test,prototype,creation,with,properties,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,stop,watch,sw,new,stop,watch,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,method,set,name,method,test,bean,class,get,method,set,name,string,class,method,set,age,method,test,bean,class,get,method,set,age,int,class,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,set,name,method,invoke,tb,juergen,set,age,method,invoke,tb,99,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,750;test,public,void,test,prototype,creation,with,resolved,properties,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,property,values,add,spouse,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough();1426716313;public void testPrototypeCreationWithPropertiesIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__StopWatch sw = new StopWatch()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__Method setNameMethod = TestBean.class.getMethod("setName", String.class)__Method setAgeMethod = TestBean.class.getMethod("setAge", int.class)__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__setNameMethod.invoke(tb, "juergen")__setAgeMethod.invoke(tb, 99)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 750)_;@Test_	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getPropertyValues().add("spouse", new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};public,void,test,prototype,creation,with,properties,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,stop,watch,sw,new,stop,watch,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,method,set,name,method,test,bean,class,get,method,set,name,string,class,method,set,age,method,test,bean,class,get,method,set,age,int,class,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,set,name,method,invoke,tb,juergen,set,age,method,invoke,tb,99,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,750;test,public,void,test,prototype,creation,with,resolved,properties,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,property,values,add,spouse,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough();1427144223;public void testPrototypeCreationWithPropertiesIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__StopWatch sw = new StopWatch()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__Method setNameMethod = TestBean.class.getMethod("setName", String.class)__Method setAgeMethod = TestBean.class.getMethod("setAge", int.class)__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__setNameMethod.invoke(tb, "juergen")__setAgeMethod.invoke(tb, 99)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 750)_;@Test_	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getPropertyValues().add("spouse", new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};public,void,test,prototype,creation,with,properties,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,stop,watch,sw,new,stop,watch,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,method,set,name,method,test,bean,class,get,method,set,name,string,class,method,set,age,method,test,bean,class,get,method,set,age,int,class,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,set,name,method,invoke,tb,juergen,set,age,method,invoke,tb,99,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,750;test,public,void,test,prototype,creation,with,resolved,properties,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,property,values,add,spouse,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough();1427221215;public void testPrototypeCreationWithPropertiesIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__StopWatch sw = new StopWatch()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__Method setNameMethod = TestBean.class.getMethod("setName", String.class)__Method setAgeMethod = TestBean.class.getMethod("setAge", int.class)__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__setNameMethod.invoke(tb, "juergen")__setAgeMethod.invoke(tb, 99)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 750)_;@Test_	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getPropertyValues().add("spouse", new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};public,void,test,prototype,creation,with,properties,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,stop,watch,sw,new,stop,watch,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,method,set,name,method,test,bean,class,get,method,set,name,string,class,method,set,age,method,test,bean,class,get,method,set,age,int,class,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,set,name,method,invoke,tb,juergen,set,age,method,invoke,tb,99,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,750;test,public,void,test,prototype,creation,with,resolved,properties,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,property,values,add,spouse,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough();1440515183;public void testPrototypeCreationWithPropertiesIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__StopWatch sw = new StopWatch()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__Method setNameMethod = TestBean.class.getMethod("setName", String.class)__Method setAgeMethod = TestBean.class.getMethod("setAge", int.class)__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__setNameMethod.invoke(tb, "juergen")__setAgeMethod.invoke(tb, 99)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 750)_;@Test_	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getPropertyValues().add("spouse", new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};public,void,test,prototype,creation,with,properties,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,stop,watch,sw,new,stop,watch,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,method,set,name,method,test,bean,class,get,method,set,name,string,class,method,set,age,method,test,bean,class,get,method,set,age,int,class,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,set,name,method,invoke,tb,juergen,set,age,method,invoke,tb,99,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,750;test,public,void,test,prototype,creation,with,resolved,properties,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,property,values,add,spouse,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough();1443187240;public void testPrototypeCreationWithPropertiesIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__StopWatch sw = new StopWatch()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__Method setNameMethod = TestBean.class.getMethod("setName", String.class)__Method setAgeMethod = TestBean.class.getMethod("setAge", int.class)__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__setNameMethod.invoke(tb, "juergen")__setAgeMethod.invoke(tb, 99)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 750)_;@Test_	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getPropertyValues().add("spouse", new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};public,void,test,prototype,creation,with,properties,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,stop,watch,sw,new,stop,watch,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,method,set,name,method,test,bean,class,get,method,set,name,string,class,method,set,age,method,test,bean,class,get,method,set,age,int,class,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,set,name,method,invoke,tb,juergen,set,age,method,invoke,tb,99,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,750;test,public,void,test,prototype,creation,with,resolved,properties,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,property,values,add,spouse,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough();1448910626;public void testPrototypeCreationWithPropertiesIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__StopWatch sw = new StopWatch()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__Method setNameMethod = TestBean.class.getMethod("setName", String.class)__Method setAgeMethod = TestBean.class.getMethod("setAge", int.class)__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__setNameMethod.invoke(tb, "juergen")__setAgeMethod.invoke(tb, 99)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 750)_;@Test_	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getPropertyValues().add("spouse", new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};public,void,test,prototype,creation,with,properties,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,stop,watch,sw,new,stop,watch,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,method,set,name,method,test,bean,class,get,method,set,name,string,class,method,set,age,method,test,bean,class,get,method,set,age,int,class,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,set,name,method,invoke,tb,juergen,set,age,method,invoke,tb,99,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,750;test,public,void,test,prototype,creation,with,resolved,properties,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,property,values,add,spouse,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough();1448917074;public void testPrototypeCreationWithPropertiesIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__StopWatch sw = new StopWatch()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__Method setNameMethod = TestBean.class.getMethod("setName", String.class)__Method setAgeMethod = TestBean.class.getMethod("setAge", int.class)__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)__setNameMethod.invoke(tb, "juergen")__setAgeMethod.invoke(tb, 99)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 750)_;@Test_	public void testPrototypeCreationWithResolvedPropertiesIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getPropertyValues().add("spouse", new RuntimeBeanReference("spouse"))__		lbf.registerBeanDefinition("test", rbd)__		lbf.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class))__		TestBean spouse = (TestBean) lbf.getBean("spouse")__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertSame(spouse, tb.getSpouse())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000)__	};public,void,test,prototype,creation,with,properties,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,stop,watch,sw,new,stop,watch,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,method,set,name,method,test,bean,class,get,method,set,name,string,class,method,set,age,method,test,bean,class,get,method,set,age,int,class,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,set,name,method,invoke,tb,juergen,set,age,method,invoke,tb,99,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,750;test,public,void,test,prototype,creation,with,resolved,properties,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,property,values,add,spouse,new,runtime,bean,reference,spouse,lbf,register,bean,definition,test,rbd,lbf,register,bean,definition,spouse,new,root,bean,definition,test,bean,class,test,bean,spouse,test,bean,lbf,get,bean,spouse,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,same,spouse,tb,get,spouse,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,4000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1328020251;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_			_			return__		}_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1338132867;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_			_			return__		}_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1346790972;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_			_			return__		}_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1350077660;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_			_			return__		}_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1353966428;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_			_			return__		}_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1356735495;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1357119417;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1362408075;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1363208506;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1364503447;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1368482696;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1368628892;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1384527851;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1385984377;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1396273075;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1396273750;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1404807963;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1406134269;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1407874032;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1409784073;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1414738527;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1414833080;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1417192618;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1419352511;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1425639147;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1426716313;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1427144223;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1427221215;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1440515183;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1443187240;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1448910626;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1448917074;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1448975446;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1454934048;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1460031510;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1467730834;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1472072207;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1478210015;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1478288393;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1480540075;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1496242568;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1515363587;@Test_public void testPrototypeCreationIsFastEnough2() throws Exception {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,throws,exception,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1518798462;@Test_public void testPrototypeCreationIsFastEnough2() {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1530732771;@Test_public void testPrototypeCreationIsFastEnough2() {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1532015514;@Test_public void testPrototypeCreationIsFastEnough2() {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1532385723;@Test_public void testPrototypeCreationIsFastEnough2() {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test 	@Ignore   	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough();1532387087;@Test_public void testPrototypeCreationIsFastEnough2() {_if (factoryLog.isTraceEnabled() || factoryLog.isDebugEnabled()) {_// Skip this test: Trace logging blows the time limit._return___DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__Method setBeanNameMethod = TestBean.class.getMethod("setBeanName", String.class)__Method setBeanFactoryMethod = TestBean.class.getMethod("setBeanFactory", BeanFactory.class)__StopWatch sw = new StopWatch()__sw.start("prototype")__for (int i = 0_ i < 100000_ i++) {_TestBean tb = TestBean.class.newInstance()__setBeanNameMethod.invoke(tb, "test")__setBeanFactoryMethod.invoke(tb, lbf)___sw.stop()__// System.out.println(sw.getTotalTimeMillis())__assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 500)_;@Test_	@Ignore  _	public void testPrototypeCreationWithConstructorArgumentsIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		Assume.notLogging(factoryLog)__		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class)__		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		rbd.getConstructorArgumentValues().addGenericArgumentValue("juergen")__		rbd.getConstructorArgumentValues().addGenericArgumentValue("99")__		lbf.registerBeanDefinition("test", rbd)__		StopWatch sw = new StopWatch()__		sw.start("prototype")__		for (int i = 0_ i < 100000_ i++) {_			TestBean tb = (TestBean) lbf.getBean("test")__			assertEquals("juergen", tb.getName())__			assertEquals(99, tb.getAge())__		}_		sw.stop()__		_		assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 3000)__	};test,public,void,test,prototype,creation,is,fast,enough2,if,factory,log,is,trace,enabled,factory,log,is,debug,enabled,skip,this,test,trace,logging,blows,the,time,limit,return,default,listable,bean,factory,lbf,new,default,listable,bean,factory,method,set,bean,name,method,test,bean,class,get,method,set,bean,name,string,class,method,set,bean,factory,method,test,bean,class,get,method,set,bean,factory,bean,factory,class,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,class,new,instance,set,bean,name,method,invoke,tb,test,set,bean,factory,method,invoke,tb,lbf,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,500;test,ignore,public,void,test,prototype,creation,with,constructor,arguments,is,fast,enough,assume,group,test,group,performance,assume,not,logging,factory,log,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,test,bean,class,rbd,set,scope,root,bean,definition,rbd,get,constructor,argument,values,add,generic,argument,value,juergen,rbd,get,constructor,argument,values,add,generic,argument,value,99,lbf,register,bean,definition,test,rbd,stop,watch,sw,new,stop,watch,sw,start,prototype,for,int,i,0,i,100000,i,test,bean,tb,test,bean,lbf,get,bean,test,assert,equals,juergen,tb,get,name,assert,equals,99,tb,get,age,sw,stop,assert,true,prototype,creation,took,too,long,sw,get,total,time,millis,sw,get,total,time,millis,3000
DefaultListableBeanFactoryTests -> @Test(timeout=1000) 	public void testByTypeLookupIsFastEnough();1338132867;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout=1000)_	public void testByTypeLookupIsFastEnough() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i=0_ i<1000_ i++) {_			bf.registerBeanDefinition("a"+i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		for (int i=0_ i<10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout=1000) 	public void testByTypeLookupIsFastEnough();1346790972;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout=1000)_	public void testByTypeLookupIsFastEnough() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i=0_ i<1000_ i++) {_			bf.registerBeanDefinition("a"+i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		for (int i=0_ i<10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout=1000) 	public void testByTypeLookupIsFastEnough();1350077660;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout=1000)_	public void testByTypeLookupIsFastEnough() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a"+i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i=0_ i<10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout=1000) 	public void testByTypeLookupIsFastEnough();1353966428;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout=1000)_	public void testByTypeLookupIsFastEnough() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a"+i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i=0_ i<10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout=1000) 	public void testByTypeLookupIsFastEnough();1356735495;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout=1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a"+i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i=0_ i<10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout=1000) 	public void testByTypeLookupIsFastEnough();1357119417;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout=1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a"+i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i=0_ i<10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout=1000) 	public void testByTypeLookupIsFastEnough();1362408075;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout=1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a"+i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i=0_ i<10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout=1000) 	public void testByTypeLookupIsFastEnough();1363208506;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout=1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a"+i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i=0_ i<10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout=1000) 	public void testByTypeLookupIsFastEnough();1364503447;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout=1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a"+i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i=0_ i<10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout=1000) 	public void testByTypeLookupIsFastEnough();1368482696;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout=1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a"+i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i=0_ i<10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout=1000) 	public void testByTypeLookupIsFastEnough();1368628892;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout=1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a"+i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i=0_ i<10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout=1000) 	public void testByTypeLookupIsFastEnough();1384527851;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout=1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a"+i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i=0_ i<10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout=1000) 	public void testByTypeLookupIsFastEnough();1385984377;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout=1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a"+i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i=0_ i<10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout=1000) 	public void testByTypeLookupIsFastEnough();1396273075;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout=1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a"+i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i=0_ i<10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout=1000) 	public void testByTypeLookupIsFastEnough();1396273750;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout=1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a"+i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i=0_ i<10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout=1000) 	public void testByTypeLookupIsFastEnough();1404807963;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout=1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a"+i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i=0_ i<10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout=1000) 	public void testByTypeLookupIsFastEnough();1406134269;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout=1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a"+i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i=0_ i<10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout=1000) 	public void testByTypeLookupIsFastEnough();1407874032;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout=1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a"+i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i=0_ i<10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout=1000) 	public void testByTypeLookupIsFastEnough();1409784073;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout=1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a"+i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i=0_ i<10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout=1000) 	public void testByTypeLookupIsFastEnough();1414738527;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout=1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a"+i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i=0_ i<10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout=1000) 	public void testByTypeLookupIsFastEnough();1414833080;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout=1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a"+i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i=0_ i<10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout=1000) 	public void testByTypeLookupIsFastEnough();1417192618;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout=1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a"+i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i=0_ i<10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout=1000) 	public void testByTypeLookupIsFastEnough();1419352511;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout=1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a"+i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i=0_ i<10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout=1000) 	public void testByTypeLookupIsFastEnough();1425639147;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout=1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a"+i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i=0_ i<10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout=1000) 	public void testByTypeLookupIsFastEnough();1426716313;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout=1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a"+i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i=0_ i<10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout=1000) 	public void testByTypeLookupIsFastEnough();1427144223;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout=1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a"+i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i=0_ i<10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout=1000) 	public void testByTypeLookupIsFastEnough();1427221215;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout=1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a"+i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i=0_ i<10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout=1000) 	public void testByTypeLookupIsFastEnough();1440515183;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout=1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a"+i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i=0_ i<10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(expected = TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1426716313;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected = TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected = TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1427144223;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected = TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected = TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1427221215;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected = TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected = TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1440515183;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected = TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected = TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1443187240;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected = TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected = TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1448910626;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected = TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected = TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1448917074;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected = TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected = TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1448975446;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected = TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected = TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1454934048;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected = TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected = TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1460031510;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected = TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected = TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1467730834;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected = TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected = TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1472072207;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected = TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected = TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1478210015;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected = TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected = TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1478288393;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected = TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected = TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1480540075;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected = TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected = TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1496242568;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected = TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected = TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1515363587;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected = TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected = TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1518798462;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected = TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected = TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1530732771;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected = TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected = TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1532015514;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected = TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected = TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1532385723;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected = TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected = TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1532387087;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected = TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected = TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1537277443;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected = TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected = TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1537283977;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected = TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(timeout = 1000) 	public void testByTypeLookupIsFastEnough();1443187240;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout = 1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a" + i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i = 0_ i < 10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout = 1000) 	public void testByTypeLookupIsFastEnough();1448910626;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout = 1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a" + i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i = 0_ i < 10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout = 1000) 	public void testByTypeLookupIsFastEnough();1448917074;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout = 1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a" + i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i = 0_ i < 10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout = 1000) 	public void testByTypeLookupIsFastEnough();1448975446;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout = 1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a" + i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i = 0_ i < 10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout = 1000) 	public void testByTypeLookupIsFastEnough();1454934048;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout = 1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a" + i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i = 0_ i < 10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout = 1000) 	public void testByTypeLookupIsFastEnough();1460031510;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout = 1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a" + i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i = 0_ i < 10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout = 1000) 	public void testByTypeLookupIsFastEnough();1467730834;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout = 1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a" + i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i = 0_ i < 10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout = 1000) 	public void testByTypeLookupIsFastEnough();1472072207;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout = 1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a" + i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i = 0_ i < 10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout = 1000) 	public void testByTypeLookupIsFastEnough();1478210015;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout = 1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a" + i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i = 0_ i < 10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout = 1000) 	public void testByTypeLookupIsFastEnough();1478288393;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout = 1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a" + i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i = 0_ i < 10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout = 1000) 	public void testByTypeLookupIsFastEnough();1480540075;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout = 1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a" + i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i = 0_ i < 10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout = 1000) 	public void testByTypeLookupIsFastEnough();1496242568;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout = 1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a" + i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i = 0_ i < 10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout = 1000) 	public void testByTypeLookupIsFastEnough();1515363587;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout = 1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a" + i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i = 0_ i < 10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout = 1000) 	public void testByTypeLookupIsFastEnough();1518798462;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout = 1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a" + i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i = 0_ i < 10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout = 1000) 	public void testByTypeLookupIsFastEnough();1530732771;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout = 1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a" + i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i = 0_ i < 10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout = 1000) 	public void testByTypeLookupIsFastEnough();1532015514;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout = 1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a" + i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i = 0_ i < 10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout = 1000) 	public void testByTypeLookupIsFastEnough();1532385723;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout = 1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a" + i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i = 0_ i < 10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout = 1000) 	public void testByTypeLookupIsFastEnough();1532387087;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout = 1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a" + i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i = 0_ i < 10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout = 1000) 	public void testByTypeLookupIsFastEnough();1537277443;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout = 1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a" + i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i = 0_ i < 10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test(timeout = 1000) 	public void testByTypeLookupIsFastEnough();1537283977;Test that by-type bean lookup caching is working effectively by searching for a_bean of type B 10K times within a container having 1K additional beans of type A._Prior to by-type caching, each bean lookup would traverse the entire container_(all 1001 beans), performing expensive assignability checks, etc. Now these_operations are necessary only once, providing a dramatic performance improvement._On load-free modern hardware (e.g. an 8-core MPB), this method should complete well_under the 1000 ms timeout, usually ~= 300ms. With caching removed and on the same_hardware the method will take ~13000 ms. See SPR-6870.;@Test(timeout = 1000)_	public void testByTypeLookupIsFastEnough() {_		Assume.group(TestGroup.PERFORMANCE)__		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		for (int i = 0_ i < 1000_ i++) {_			bf.registerBeanDefinition("a" + i, new RootBeanDefinition(A.class))__		}_		bf.registerBeanDefinition("b", new RootBeanDefinition(B.class))___		bf.freezeConfiguration()___		for (int i = 0_ i < 10000_ i++) {_			bf.getBean(B.class)__		}_	};test,that,by,type,bean,lookup,caching,is,working,effectively,by,searching,for,a,bean,of,type,b,10k,times,within,a,container,having,1k,additional,beans,of,type,a,prior,to,by,type,caching,each,bean,lookup,would,traverse,the,entire,container,all,1001,beans,performing,expensive,assignability,checks,etc,now,these,operations,are,necessary,only,once,providing,a,dramatic,performance,improvement,on,load,free,modern,hardware,e,g,an,8,core,mpb,this,method,should,complete,well,under,the,1000,ms,timeout,usually,300ms,with,caching,removed,and,on,the,same,hardware,the,method,will,take,13000,ms,see,spr,6870;test,timeout,1000,public,void,test,by,type,lookup,is,fast,enough,assume,group,test,group,performance,default,listable,bean,factory,bf,new,default,listable,bean,factory,for,int,i,0,i,1000,i,bf,register,bean,definition,a,i,new,root,bean,definition,a,class,bf,register,bean,definition,b,new,root,bean,definition,b,class,bf,freeze,configuration,for,int,i,0,i,10000,i,bf,get,bean,b,class
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1328020251;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1338132867;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1346790972;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1350077660;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1353966428;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1356735495;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1357119417;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1362408075;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1363208506;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1364503447;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1368482696;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1368628892;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1384527851;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1385984377;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1396273075;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1396273750;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1404807963;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1406134269;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1407874032;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1409784073;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1414738527;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1414833080;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1417192618;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1419352511;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1425639147;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1426716313;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1427144223;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1427221215;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1440515183;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1443187240;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1448910626;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1448917074;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1448975446;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1454934048;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1460031510;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1467730834;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1472072207;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1478210015;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1478288393;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1480540075;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1496242568;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1515363587;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1518798462;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1530732771;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1532015514;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1532385723;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1532387087;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1537277443;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test 	public void testAutowireBeanWithFactoryBeanByType();1537283977;Verifies that a dependency on a {@link FactoryBean} can be autowired_<em>by type</em>, specifically addressing the JIRA issue raised in <a_href="http://opensource.atlassian.com/projects/spring/browse/SPR-4040"_target="_blank">SPR-4040</a>.;@Test_	public void testAutowireBeanWithFactoryBeanByType() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		FactoryBeanDependentBean bean = (FactoryBeanDependentBean) lbf.autowire(FactoryBeanDependentBean.class,_				AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true)__		assertEquals("The FactoryBeanDependentBean should have been autowired 'by type' with the LazyInitFactory.",_				factoryBean, bean.getFactoryBean())__	};verifies,that,a,dependency,on,a,link,factory,bean,can,be,autowired,em,by,type,em,specifically,addressing,the,jira,issue,raised,in,a,href,http,opensource,atlassian,com,projects,spring,browse,spr,4040,target,spr,4040,a;test,public,void,test,autowire,bean,with,factory,bean,by,type,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,factory,bean,dependent,bean,bean,factory,bean,dependent,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true,assert,equals,the,factory,bean,dependent,bean,should,have,been,autowired,by,type,with,the,lazy,init,factory,factory,bean,bean,get,factory,bean
DefaultListableBeanFactoryTests -> @Test(expected=TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1328020251;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_<code>set&amp_FactoryBean(...)</code>.;@Test(expected=TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean,code;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected=TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1338132867;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_<code>set&amp_FactoryBean(...)</code>.;@Test(expected=TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean,code;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected=TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1346790972;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_<code>set&amp_FactoryBean(...)</code>.;@Test(expected=TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean,code;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected=TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1350077660;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_<code>set&amp_FactoryBean(...)</code>.;@Test(expected=TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean,code;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected=TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1353966428;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_<code>set&amp_FactoryBean(...)</code>.;@Test(expected=TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean,code;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected=TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1356735495;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected=TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected=TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1357119417;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected=TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected=TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1362408075;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected=TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected=TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1363208506;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected=TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected=TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1364503447;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected=TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected=TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1368482696;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected=TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected=TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1368628892;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected=TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected=TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1384527851;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected=TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected=TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1385984377;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected=TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected=TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1396273075;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected=TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected=TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1396273750;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected=TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected=TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1404807963;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected=TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected=TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1406134269;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected=TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected=TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1407874032;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected=TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected=TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1409784073;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected=TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected=TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1414738527;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected=TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected=TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1414833080;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected=TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected=TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1417192618;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected=TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected=TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1419352511;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected=TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> @Test(expected=TypeMismatchException.class) 	public void testAutowireBeanWithFactoryBeanByName();1425639147;Verifies that a dependency on a {@link FactoryBean} can <strong>not</strong>_be autowired <em>by name</em>, as &amp_ is an illegal character in_Java method names. In other words, you can't name a method_{@code set&amp_FactoryBean(...)}.;@Test(expected=TypeMismatchException.class)_	public void testAutowireBeanWithFactoryBeanByName() {_		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class)__		lbf.registerBeanDefinition("factoryBean", bd)__		LazyInitFactory factoryBean = (LazyInitFactory) lbf.getBean("&factoryBean")__		assertNotNull("The FactoryBean should have been registered.", factoryBean)__		lbf.autowire(FactoryBeanDependentBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true)__	};verifies,that,a,dependency,on,a,link,factory,bean,can,strong,not,strong,be,autowired,em,by,name,em,as,amp,is,an,illegal,character,in,java,method,names,in,other,words,you,can,t,name,a,method,code,set,amp,factory,bean;test,expected,type,mismatch,exception,class,public,void,test,autowire,bean,with,factory,bean,by,name,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,bd,new,root,bean,definition,lazy,init,factory,class,lbf,register,bean,definition,factory,bean,bd,lazy,init,factory,factory,bean,lazy,init,factory,lbf,get,bean,factory,bean,assert,not,null,the,factory,bean,should,have,been,registered,factory,bean,lbf,autowire,factory,bean,dependent,bean,class,autowire,capable,bean,factory,true
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1328020251;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1338132867;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1346790972;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1350077660;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1353966428;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1356735495;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1357119417;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1362408075;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1363208506;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1364503447;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1368482696;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1368628892;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1384527851;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1385984377;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1396273075;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1396273750;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1404807963;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1406134269;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1407874032;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1409784073;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1414738527;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1414833080;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1417192618;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1419352511;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1425639147;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1426716313;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1427144223;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1427221215;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1440515183;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1443187240;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1448910626;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1448917074;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1448975446;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1454934048;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1460031510;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1467730834;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1472072207;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1478210015;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1478288393;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1480540075;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1496242568;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1515363587;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1518798462;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1530732771;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1532015514;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1532385723;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1532387087;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1537277443;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
DefaultListableBeanFactoryTests -> private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton);1537283977;@param singleton whether the bean created from the factory method on_the bean instance should be a singleton or prototype. This flag is_used to allow checking of the new ability in 1.2.4 to determine the type_of a prototype created from invoking a factory method on a bean instance_in the factory.;private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) {_		String expectedNameFromProperties = "tony"__		String expectedNameFromArgs = "gordon"___		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__		RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)__		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("name", expectedNameFromProperties)__		instanceFactoryDefinition.setPropertyValues(pvs)__		lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)___		RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()__		factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithProperties.setFactoryMethodName("create")__		if (!singleton) {_			factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)___		RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()__		factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")__		if (!singleton) {_			factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)___		RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()__		factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")__		factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")__		ConstructorArgumentValues cvals = new ConstructorArgumentValues()__		cvals.addGenericArgumentValue(expectedNameFromArgs)__		factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)__		if (!singleton) {_			factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)__		}_		lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)___		assertEquals(4, lbf.getBeanDefinitionCount())__		List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))__		assertTrue(tbNames.contains("fmWithProperties"))__		assertTrue(tbNames.contains("fmWithArgs"))__		assertEquals(2, tbNames.size())___		TestBean tb = (TestBean) lbf.getBean("fmWithProperties")__		TestBean second = (TestBean) lbf.getBean("fmWithProperties")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		tb = (TestBean) lbf.getBean("fmGeneric")__		second = (TestBean) lbf.getBean("fmGeneric")__		if (singleton) {_			assertSame(tb, second)__		}_		else {_			assertNotSame(tb, second)__		}_		assertEquals(expectedNameFromProperties, tb.getName())___		TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")__		second = (TestBean) lbf.getBean("fmWithArgs")__		if (singleton) {_			assertSame(tb2, second)__		}_		else {_			assertNotSame(tb2, second)__		}_		assertEquals(expectedNameFromArgs, tb2.getName())__	};param,singleton,whether,the,bean,created,from,the,factory,method,on,the,bean,instance,should,be,a,singleton,or,prototype,this,flag,is,used,to,allow,checking,of,the,new,ability,in,1,2,4,to,determine,the,type,of,a,prototype,created,from,invoking,a,factory,method,on,a,bean,instance,in,the,factory;private,void,find,type,of,prototype,factory,method,on,bean,instance,boolean,singleton,string,expected,name,from,properties,tony,string,expected,name,from,args,gordon,default,listable,bean,factory,lbf,new,default,listable,bean,factory,root,bean,definition,instance,factory,definition,new,root,bean,definition,bean,with,factory,method,class,mutable,property,values,pvs,new,mutable,property,values,pvs,add,name,expected,name,from,properties,instance,factory,definition,set,property,values,pvs,lbf,register,bean,definition,factory,bean,instance,instance,factory,definition,root,bean,definition,factory,method,definition,with,properties,new,root,bean,definition,factory,method,definition,with,properties,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,properties,set,factory,method,name,create,if,singleton,factory,method,definition,with,properties,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,properties,factory,method,definition,with,properties,root,bean,definition,factory,method,definition,generic,new,root,bean,definition,factory,method,definition,generic,set,factory,bean,name,factory,bean,instance,factory,method,definition,generic,set,factory,method,name,create,generic,if,singleton,factory,method,definition,generic,set,scope,root,bean,definition,lbf,register,bean,definition,fm,generic,factory,method,definition,generic,root,bean,definition,factory,method,definition,with,args,new,root,bean,definition,factory,method,definition,with,args,set,factory,bean,name,factory,bean,instance,factory,method,definition,with,args,set,factory,method,name,create,with,args,constructor,argument,values,cvals,new,constructor,argument,values,cvals,add,generic,argument,value,expected,name,from,args,factory,method,definition,with,args,set,constructor,argument,values,cvals,if,singleton,factory,method,definition,with,args,set,scope,root,bean,definition,lbf,register,bean,definition,fm,with,args,factory,method,definition,with,args,assert,equals,4,lbf,get,bean,definition,count,list,string,tb,names,arrays,as,list,lbf,get,bean,names,for,type,test,bean,class,assert,true,tb,names,contains,fm,with,properties,assert,true,tb,names,contains,fm,with,args,assert,equals,2,tb,names,size,test,bean,tb,test,bean,lbf,get,bean,fm,with,properties,test,bean,second,test,bean,lbf,get,bean,fm,with,properties,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,tb,test,bean,lbf,get,bean,fm,generic,second,test,bean,lbf,get,bean,fm,generic,if,singleton,assert,same,tb,second,else,assert,not,same,tb,second,assert,equals,expected,name,from,properties,tb,get,name,test,bean,tb2,test,bean,lbf,get,bean,fm,with,args,second,test,bean,lbf,get,bean,fm,with,args,if,singleton,assert,same,tb2,second,else,assert,not,same,tb2,second,assert,equals,expected,name,from,args,tb2,get,name
