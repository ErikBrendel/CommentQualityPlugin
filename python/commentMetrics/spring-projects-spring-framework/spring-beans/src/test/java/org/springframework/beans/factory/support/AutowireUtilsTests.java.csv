commented;modifiers;parameterAmount;loc;comment;code
false;public;0;51;;@Test public void genericMethodReturnTypes() {     Method notParameterized = ReflectionUtils.findMethod(MyTypeWithMethods.class, "notParameterized").     assertEquals(String.class, AutowireUtils.resolveReturnTypeForFactoryMethod(notParameterized, new Object[] {}, getClass().getClassLoader())).     Method notParameterizedWithArguments = ReflectionUtils.findMethod(MyTypeWithMethods.class, "notParameterizedWithArguments", Integer.class, Boolean.class).     assertEquals(String.class, AutowireUtils.resolveReturnTypeForFactoryMethod(notParameterizedWithArguments, new Object[] { 99, true }, getClass().getClassLoader())).     Method createProxy = ReflectionUtils.findMethod(MyTypeWithMethods.class, "createProxy", Object.class).     assertEquals(String.class, AutowireUtils.resolveReturnTypeForFactoryMethod(createProxy, new Object[] { "foo" }, getClass().getClassLoader())).     Method createNamedProxyWithDifferentTypes = ReflectionUtils.findMethod(MyTypeWithMethods.class, "createNamedProxy", String.class, Object.class).     assertEquals(Long.class, AutowireUtils.resolveReturnTypeForFactoryMethod(createNamedProxyWithDifferentTypes, new Object[] { "enigma", 99L }, getClass().getClassLoader())).     Method createNamedProxyWithDuplicateTypes = ReflectionUtils.findMethod(MyTypeWithMethods.class, "createNamedProxy", String.class, Object.class).     assertEquals(String.class, AutowireUtils.resolveReturnTypeForFactoryMethod(createNamedProxyWithDuplicateTypes, new Object[] { "enigma", "foo" }, getClass().getClassLoader())).     Method createMock = ReflectionUtils.findMethod(MyTypeWithMethods.class, "createMock", Class.class).     assertEquals(Runnable.class, AutowireUtils.resolveReturnTypeForFactoryMethod(createMock, new Object[] { Runnable.class }, getClass().getClassLoader())).     assertEquals(Runnable.class, AutowireUtils.resolveReturnTypeForFactoryMethod(createMock, new Object[] { Runnable.class.getName() }, getClass().getClassLoader())).     Method createNamedMock = ReflectionUtils.findMethod(MyTypeWithMethods.class, "createNamedMock", String.class, Class.class).     assertEquals(Runnable.class, AutowireUtils.resolveReturnTypeForFactoryMethod(createNamedMock, new Object[] { "foo", Runnable.class }, getClass().getClassLoader())).     Method createVMock = ReflectionUtils.findMethod(MyTypeWithMethods.class, "createVMock", Object.class, Class.class).     assertEquals(Runnable.class, AutowireUtils.resolveReturnTypeForFactoryMethod(createVMock, new Object[] { "foo", Runnable.class }, getClass().getClassLoader())).     // Ideally we would expect String.class instead of Object.class, but     // resolveReturnTypeForFactoryMethod() does not currently support this form of     // look-up.     Method extractValueFrom = ReflectionUtils.findMethod(MyTypeWithMethods.class, "extractValueFrom", MyInterfaceType.class).     assertEquals(Object.class, AutowireUtils.resolveReturnTypeForFactoryMethod(extractValueFrom, new Object[] { new MySimpleInterfaceType() }, getClass().getClassLoader())).     // Ideally we would expect Boolean.class instead of Object.class, but this     // information is not available at run-time due to type erasure.     Map<Integer, Boolean> map = new HashMap<>().     map.put(0, false).     map.put(1, true).     Method extractMagicValue = ReflectionUtils.findMethod(MyTypeWithMethods.class, "extractMagicValue", Map.class).     assertEquals(Object.class, AutowireUtils.resolveReturnTypeForFactoryMethod(extractMagicValue, new Object[] { map }, getClass().getClassLoader())). }
false;public;0;6;;@Test public void isAutowirablePreconditions() {     exception.expect(IllegalArgumentException.class).     exception.expectMessage("Parameter must not be null").     AutowireUtils.isAutowirable(null, 0). }
false;public;0;5;;@Test public void annotatedParametersInMethodAreCandidatesForAutowiring() throws Exception {     Method method = getClass().getDeclaredMethod("autowirableMethod", String.class, String.class, String.class, String.class).     assertAutowirableParameters(method). }
false;public;0;5;;@Test public void annotatedParametersInTopLevelClassConstructorAreCandidatesForAutowiring() throws Exception {     Constructor<?> constructor = AutowirableClass.class.getConstructor(String.class, String.class, String.class, String.class).     assertAutowirableParameters(constructor). }
false;public;0;7;;@Test public void annotatedParametersInInnerClassConstructorAreCandidatesForAutowiring() throws Exception {     Class<?> innerClass = AutowirableClass.InnerAutowirableClass.class.     assertTrue(ClassUtils.isInnerClass(innerClass)).     Constructor<?> constructor = innerClass.getConstructor(AutowirableClass.class, String.class, String.class).     assertAutowirableParameters(constructor). }
false;private;1;9;;private void assertAutowirableParameters(Executable executable) {     int startIndex = (executable instanceof Constructor) && ClassUtils.isInnerClass(executable.getDeclaringClass()) ? 1 : 0.     Parameter[] parameters = executable.getParameters().     for (int parameterIndex = startIndex. parameterIndex < parameters.length. parameterIndex++) {         Parameter parameter = parameters[parameterIndex].         assertTrue("Parameter " + parameter + " must be autowirable", AutowireUtils.isAutowirable(parameter, parameterIndex)).     } }
false;public;0;10;;@Test public void nonAnnotatedParametersInTopLevelClassConstructorAreNotCandidatesForAutowiring() throws Exception {     Constructor<?> notAutowirableConstructor = AutowirableClass.class.getConstructor(String.class).     Parameter[] parameters = notAutowirableConstructor.getParameters().     for (int parameterIndex = 0. parameterIndex < parameters.length. parameterIndex++) {         Parameter parameter = parameters[parameterIndex].         assertFalse("Parameter " + parameter + " must not be autowirable", AutowireUtils.isAutowirable(parameter, parameterIndex)).     } }
false;public;0;6;;@Test public void resolveDependencyPreconditionsForParameter() {     exception.expect(IllegalArgumentException.class).     exception.expectMessage("Parameter must not be null").     AutowireUtils.resolveDependency(null, 0, null, mock(AutowireCapableBeanFactory.class)). }
false;public;0;6;;@Test public void resolveDependencyPreconditionsForContainingClass() throws Exception {     exception.expect(IllegalArgumentException.class).     exception.expectMessage("Containing class must not be null").     AutowireUtils.resolveDependency(getParameter(), 0, null, null). }
false;public;0;6;;@Test public void resolveDependencyPreconditionsForBeanFactory() throws Exception {     exception.expect(IllegalArgumentException.class).     exception.expectMessage("AutowireCapableBeanFactory must not be null").     AutowireUtils.resolveDependency(getParameter(), 0, getClass(), null). }
false;private;0;4;;private Parameter getParameter() throws NoSuchMethodException {     Method method = getClass().getDeclaredMethod("autowirableMethod", String.class, String.class, String.class, String.class).     return method.getParameters()[0]. }
false;public;0;18;;@Test public void resolveDependencyForAnnotatedParametersInTopLevelClassConstructor() throws Exception {     Constructor<?> constructor = AutowirableClass.class.getConstructor(String.class, String.class, String.class, String.class).     AutowireCapableBeanFactory beanFactory = mock(AutowireCapableBeanFactory.class).     // Configure the mocked BeanFactory to return the DependencyDescriptor for convenience and     // to avoid using an ArgumentCaptor.     when(beanFactory.resolveDependency(any(), isNull())).thenAnswer(invocation -> invocation.getArgument(0)).     Parameter[] parameters = constructor.getParameters().     for (int parameterIndex = 0. parameterIndex < parameters.length. parameterIndex++) {         Parameter parameter = parameters[parameterIndex].         DependencyDescriptor intermediateDependencyDescriptor = (DependencyDescriptor) AutowireUtils.resolveDependency(parameter, parameterIndex, AutowirableClass.class, beanFactory).         assertEquals(constructor, intermediateDependencyDescriptor.getAnnotatedElement()).         assertEquals(parameter, intermediateDependencyDescriptor.getMethodParameter().getParameter()).     } }
true;public,static;1;3;/**  * Simulates a factory method that wraps the supplied object in a proxy of the  * same type.  */ ;/**  * Simulates a factory method that wraps the supplied object in a proxy of the  * same type.  */ public static <T> T createProxy(T object) {     return null. }
true;public,static;2;3;/**  * Similar to {@link #createProxy(Object)} but adds an additional argument before  * the argument of type {@code T}. Note that they may potentially be of the same  * time when invoked!  */ ;/**  * Similar to {@link #createProxy(Object)} but adds an additional argument before  * the argument of type {@code T}. Note that they may potentially be of the same  * time when invoked!  */ public static <T> T createNamedProxy(String name, T object) {     return null. }
true;public,static;1;3;/**  * Simulates factory methods found in libraries such as Mockito and EasyMock.  */ ;/**  * Simulates factory methods found in libraries such as Mockito and EasyMock.  */ public static <MOCK> MOCK createMock(Class<MOCK> toMock) {     return null. }
true;public,static;2;3;/**  * Similar to {@link #createMock(Class)} but adds an additional method argument  * before the parameterized argument.  */ ;/**  * Similar to {@link #createMock(Class)} but adds an additional method argument  * before the parameterized argument.  */ public static <T> T createNamedMock(String name, Class<T> toMock) {     return null. }
true;public,static;2;3;/**  * Similar to {@link #createNamedMock(String, Class)} but adds an additional  * parameterized type.  */ ;/**  * Similar to {@link #createNamedMock(String, Class)} but adds an additional  * parameterized type.  */ public static <V extends Object, T> T createVMock(V name, Class<T> toMock) {     return null. }
true;public,static;1;3;/**  * Extract some value of the type supported by the interface (i.e., by a concrete,  * non-generic implementation of the interface).  */ ;/**  * Extract some value of the type supported by the interface (i.e., by a concrete,  * non-generic implementation of the interface).  */ public static <T> T extractValueFrom(MyInterfaceType<T> myInterfaceType) {     return null. }
true;public,static;1;3;/**  * Extract some magic value from the supplied map.  */ ;/**  * Extract some magic value from the supplied map.  */ public static <K, V> V extractMagicValue(Map<K, V> map) {     return null. }
false;public;0;3;;public MyInterfaceType<Integer> integer() {     return null. }
false;public;0;3;;public MySimpleInterfaceType string() {     return null. }
false;public;0;3;;public Object object() {     return null. }
false;public;0;4;;@SuppressWarnings("rawtypes") public MyInterfaceType raw() {     return null. }
false;public;0;3;;public String notParameterized() {     return null. }
false;public;2;3;;public String notParameterizedWithArguments(Integer x, Boolean b) {     return null. }
false;public;1;2;;public void readIntegerInputMessage(MyInterfaceType<Integer> message) { }
false;public;1;2;;public void readIntegerArrayInputMessage(MyInterfaceType<Integer>[] message) { }
false;public;1;2;;public void readGenericArrayInputMessage(T[] message) { }
false;;4;6;;void autowirableMethod(@Autowired String firstParameter, @Qualifier("someQualifier") String secondParameter, @Value("${someValue}") String thirdParameter, @Autowired(required = false) String fourthParameter) { }
