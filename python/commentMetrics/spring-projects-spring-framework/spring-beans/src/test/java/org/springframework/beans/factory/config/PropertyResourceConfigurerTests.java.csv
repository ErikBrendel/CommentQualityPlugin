commented;modifiers;parameterAmount;loc;comment;code
false;public;0;39;;@Test public void testPropertyOverrideConfigurer() {     BeanDefinition def1 = BeanDefinitionBuilder.genericBeanDefinition(TestBean.class).getBeanDefinition().     factory.registerBeanDefinition("tb1", def1).     BeanDefinition def2 = BeanDefinitionBuilder.genericBeanDefinition(TestBean.class).getBeanDefinition().     factory.registerBeanDefinition("tb2", def2).     PropertyOverrideConfigurer poc1.     PropertyOverrideConfigurer poc2.     {         poc1 = new PropertyOverrideConfigurer().         Properties props = new Properties().         props.setProperty("tb1.age", "99").         props.setProperty("tb2.name", "test").         poc1.setProperties(props).     }     {         poc2 = new PropertyOverrideConfigurer().         Properties props = new Properties().         props.setProperty("tb2.age", "99").         props.setProperty("tb2.name", "test2").         poc2.setProperties(props).     }     // emulate what happens when BFPPs are added to an application context: It's LIFO-based     poc2.postProcessBeanFactory(factory).     poc1.postProcessBeanFactory(factory).     TestBean tb1 = (TestBean) factory.getBean("tb1").     TestBean tb2 = (TestBean) factory.getBean("tb2").     assertEquals(99, tb1.getAge()).     assertEquals(99, tb2.getAge()).     assertEquals(null, tb1.getName()).     assertEquals("test", tb2.getName()). }
false;public;0;17;;@Test public void testPropertyOverrideConfigurerWithNestedProperty() {     BeanDefinition def = BeanDefinitionBuilder.genericBeanDefinition(IndexedTestBean.class).getBeanDefinition().     factory.registerBeanDefinition("tb", def).     PropertyOverrideConfigurer poc.     poc = new PropertyOverrideConfigurer().     Properties props = new Properties().     props.setProperty("tb.array[0].age", "99").     props.setProperty("tb.list[1].name", "test").     poc.setProperties(props).     poc.postProcessBeanFactory(factory).     IndexedTestBean tb = (IndexedTestBean) factory.getBean("tb").     assertEquals(99, tb.getArray()[0].getAge()).     assertEquals("test", ((TestBean) tb.getList().get(1)).getName()). }
false;public;0;18;;@Test public void testPropertyOverrideConfigurerWithNestedPropertyAndDotInBeanName() {     BeanDefinition def = BeanDefinitionBuilder.genericBeanDefinition(IndexedTestBean.class).getBeanDefinition().     factory.registerBeanDefinition("my.tb", def).     PropertyOverrideConfigurer poc.     poc = new PropertyOverrideConfigurer().     Properties props = new Properties().     props.setProperty("my.tb_array[0].age", "99").     props.setProperty("my.tb_list[1].name", "test").     poc.setProperties(props).     poc.setBeanNameSeparator("_").     poc.postProcessBeanFactory(factory).     IndexedTestBean tb = (IndexedTestBean) factory.getBean("my.tb").     assertEquals(99, tb.getArray()[0].getAge()).     assertEquals("test", ((TestBean) tb.getList().get(1)).getName()). }
false;public;0;17;;@Test public void testPropertyOverrideConfigurerWithNestedMapPropertyAndDotInMapKey() {     BeanDefinition def = BeanDefinitionBuilder.genericBeanDefinition(IndexedTestBean.class).getBeanDefinition().     factory.registerBeanDefinition("tb", def).     PropertyOverrideConfigurer poc.     poc = new PropertyOverrideConfigurer().     Properties props = new Properties().     props.setProperty("tb.map[key1]", "99").     props.setProperty("tb.map[key2.ext]", "test").     poc.setProperties(props).     poc.postProcessBeanFactory(factory).     IndexedTestBean tb = (IndexedTestBean) factory.getBean("tb").     assertEquals("99", tb.getMap().get("key1")).     assertEquals("test", tb.getMap().get("key2.ext")). }
false;public;0;15;;@Test public void testPropertyOverrideConfigurerWithHeldProperties() {     BeanDefinition def = BeanDefinitionBuilder.genericBeanDefinition(PropertiesHolder.class).getBeanDefinition().     factory.registerBeanDefinition("tb", def).     PropertyOverrideConfigurer poc.     poc = new PropertyOverrideConfigurer().     Properties props = new Properties().     props.setProperty("tb.heldProperties[mail.smtp.auth]", "true").     poc.setProperties(props).     poc.postProcessBeanFactory(factory).     PropertiesHolder tb = (PropertiesHolder) factory.getBean("tb").     assertEquals("true", tb.getHeldProperties().getProperty("mail.smtp.auth")). }
false;public;0;13;;@Test public void testPropertyOverrideConfigurerWithPropertiesFile() {     BeanDefinition def = BeanDefinitionBuilder.genericBeanDefinition(IndexedTestBean.class).getBeanDefinition().     factory.registerBeanDefinition("tb", def).     PropertyOverrideConfigurer poc = new PropertyOverrideConfigurer().     poc.setLocation(TEST_PROPS).     poc.postProcessBeanFactory(factory).     IndexedTestBean tb = (IndexedTestBean) factory.getBean("tb").     assertEquals(99, tb.getArray()[0].getAge()).     assertEquals("test", ((TestBean) tb.getList().get(1)).getName()). }
false;public;0;14;;@Test public void testPropertyOverrideConfigurerWithInvalidPropertiesFile() {     BeanDefinition def = BeanDefinitionBuilder.genericBeanDefinition(IndexedTestBean.class).getBeanDefinition().     factory.registerBeanDefinition("tb", def).     PropertyOverrideConfigurer poc = new PropertyOverrideConfigurer().     poc.setLocations(TEST_PROPS, XTEST_PROPS).     poc.setIgnoreResourceNotFound(true).     poc.postProcessBeanFactory(factory).     IndexedTestBean tb = (IndexedTestBean) factory.getBean("tb").     assertEquals(99, tb.getArray()[0].getAge()).     assertEquals("test", ((TestBean) tb.getList().get(1)).getName()). }
false;public;0;13;;@Test public void testPropertyOverrideConfigurerWithPropertiesXmlFile() {     BeanDefinition def = BeanDefinitionBuilder.genericBeanDefinition(IndexedTestBean.class).getBeanDefinition().     factory.registerBeanDefinition("tb", def).     PropertyOverrideConfigurer poc = new PropertyOverrideConfigurer().     poc.setLocation(TEST_PROPS_XML).     poc.postProcessBeanFactory(factory).     IndexedTestBean tb = (IndexedTestBean) factory.getBean("tb").     assertEquals(99, tb.getArray()[0].getAge()).     assertEquals("test", ((TestBean) tb.getList().get(1)).getName()). }
false;public;0;16;;@Test public void testPropertyOverrideConfigurerWithConvertProperties() {     BeanDefinition def = BeanDefinitionBuilder.genericBeanDefinition(IndexedTestBean.class).getBeanDefinition().     factory.registerBeanDefinition("tb", def).     ConvertingOverrideConfigurer bfpp = new ConvertingOverrideConfigurer().     Properties props = new Properties().     props.setProperty("tb.array[0].name", "99").     props.setProperty("tb.list[1].name", "test").     bfpp.setProperties(props).     bfpp.postProcessBeanFactory(factory).     IndexedTestBean tb = (IndexedTestBean) factory.getBean("tb").     assertEquals("X99", tb.getArray()[0].getName()).     assertEquals("Xtest", ((TestBean) tb.getList().get(1)).getName()). }
false;public;0;34;;@Test public void testPropertyOverrideConfigurerWithInvalidKey() {     factory.registerBeanDefinition("tb1", genericBeanDefinition(TestBean.class).getBeanDefinition()).     factory.registerBeanDefinition("tb2", genericBeanDefinition(TestBean.class).getBeanDefinition()).     {         PropertyOverrideConfigurer poc = new PropertyOverrideConfigurer().         poc.setIgnoreInvalidKeys(true).         Properties props = new Properties().         props.setProperty("argh", "hgra").         props.setProperty("tb2.name", "test").         props.setProperty("tb2.nam", "test").         props.setProperty("tb3.name", "test").         poc.setProperties(props).         poc.postProcessBeanFactory(factory).         assertEquals("test", factory.getBean("tb2", TestBean.class).getName()).     }     {         PropertyOverrideConfigurer poc = new PropertyOverrideConfigurer().         Properties props = new Properties().         props.setProperty("argh", "hgra").         props.setProperty("tb2.age", "99").         props.setProperty("tb2.name", "test2").         poc.setProperties(props).         // won't actually do anything since we're not processing through an app ctx         poc.setOrder(0).         try {             poc.postProcessBeanFactory(factory).         } catch (BeanInitializationException ex) {             // prove that the processor chokes on the invalid key             assertTrue(ex.getMessage().toLowerCase().contains("argh")).         }     } }
false;public;0;32;;@Test public void testPropertyOverrideConfigurerWithIgnoreInvalidKeys() {     factory.registerBeanDefinition("tb1", genericBeanDefinition(TestBean.class).getBeanDefinition()).     factory.registerBeanDefinition("tb2", genericBeanDefinition(TestBean.class).getBeanDefinition()).     {         PropertyOverrideConfigurer poc = new PropertyOverrideConfigurer().         Properties props = new Properties().         props.setProperty("tb2.age", "99").         props.setProperty("tb2.name", "test2").         poc.setProperties(props).         // won't actually do anything since we're not processing through an app ctx         poc.setOrder(0).         poc.postProcessBeanFactory(factory).     }     {         PropertyOverrideConfigurer poc = new PropertyOverrideConfigurer().         poc.setIgnoreInvalidKeys(true).         Properties props = new Properties().         props.setProperty("argh", "hgra").         props.setProperty("tb1.age", "99").         props.setProperty("tb2.name", "test").         poc.setProperties(props).         poc.postProcessBeanFactory(factory).     }     TestBean tb1 = (TestBean) factory.getBean("tb1").     TestBean tb2 = (TestBean) factory.getBean("tb2").     assertEquals(99, tb1.getAge()).     assertEquals(99, tb2.getAge()).     assertEquals(null, tb1.getName()).     assertEquals("test", tb2.getName()). }
false;public;0;4;;@Test public void testPropertyPlaceholderConfigurer() {     doTestPropertyPlaceholderConfigurer(false). }
false;public;0;4;;@Test public void testPropertyPlaceholderConfigurerWithParentChildSeparation() {     doTestPropertyPlaceholderConfigurer(true). }
false;private;1;105;;private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) {     Map singletonMap = Collections.singletonMap("myKey", "myValue").     if (parentChildSeparation) {         MutablePropertyValues pvs1 = new MutablePropertyValues().         pvs1.add("age", "${age}").         MutablePropertyValues pvs2 = new MutablePropertyValues().         pvs2.add("name", "name${var}${var}${").         pvs2.add("spouse", new RuntimeBeanReference("${ref}")).         pvs2.add("someMap", singletonMap).         RootBeanDefinition parent = new RootBeanDefinition(TestBean.class).         parent.setPropertyValues(pvs1).         ChildBeanDefinition bd = new ChildBeanDefinition("${parent}", pvs2).         factory.registerBeanDefinition("parent1", parent).         factory.registerBeanDefinition("tb1", bd).     } else {         MutablePropertyValues pvs = new MutablePropertyValues().         pvs.add("age", "${age}").         pvs.add("name", "name${var}${var}${").         pvs.add("spouse", new RuntimeBeanReference("${ref}")).         pvs.add("someMap", singletonMap).         RootBeanDefinition bd = new RootBeanDefinition(TestBean.class).         bd.setPropertyValues(pvs).         factory.registerBeanDefinition("tb1", bd).     }     ConstructorArgumentValues cas = new ConstructorArgumentValues().     cas.addIndexedArgumentValue(1, "${age}").     cas.addGenericArgumentValue("${var}name${age}").     MutablePropertyValues pvs = new MutablePropertyValues().     pvs.add("stringArray", new String[] { "${os.name}", "${age}" }).     List<Object> friends = new ManagedList<>().     friends.add("na${age}me").     friends.add(new RuntimeBeanReference("${ref}")).     pvs.add("friends", friends).     Set<Object> someSet = new ManagedSet<>().     someSet.add("na${age}me").     someSet.add(new RuntimeBeanReference("${ref}")).     someSet.add(new TypedStringValue("${age}", Integer.class)).     pvs.add("someSet", someSet).     Map<Object, Object> someMap = new ManagedMap<>().     someMap.put(new TypedStringValue("key${age}"), new TypedStringValue("${age}")).     someMap.put(new TypedStringValue("key${age}ref"), new RuntimeBeanReference("${ref}")).     someMap.put("key1", new RuntimeBeanReference("${ref}")).     someMap.put("key2", "${age}name").     MutablePropertyValues innerPvs = new MutablePropertyValues().     innerPvs.add("country", "${os.name}").     RootBeanDefinition innerBd = new RootBeanDefinition(TestBean.class).     innerBd.setPropertyValues(innerPvs).     someMap.put("key3", innerBd).     MutablePropertyValues innerPvs2 = new MutablePropertyValues(innerPvs).     someMap.put("${key4}", new BeanDefinitionHolder(new ChildBeanDefinition("tb1", innerPvs2), "child")).     pvs.add("someMap", someMap).     RootBeanDefinition bd = new RootBeanDefinition(TestBean.class, cas, pvs).     factory.registerBeanDefinition("tb2", bd).     PropertyPlaceholderConfigurer ppc = new PropertyPlaceholderConfigurer().     Properties props = new Properties().     props.setProperty("age", "98").     props.setProperty("var", "${m}var").     props.setProperty("ref", "tb2").     props.setProperty("m", "my").     props.setProperty("key4", "mykey4").     props.setProperty("parent", "parent1").     ppc.setProperties(props).     ppc.postProcessBeanFactory(factory).     TestBean tb1 = (TestBean) factory.getBean("tb1").     TestBean tb2 = (TestBean) factory.getBean("tb2").     assertEquals(98, tb1.getAge()).     assertEquals(98, tb2.getAge()).     assertEquals("namemyvarmyvar${", tb1.getName()).     assertEquals("myvarname98", tb2.getName()).     assertEquals(tb2, tb1.getSpouse()).     assertEquals(1, tb1.getSomeMap().size()).     assertEquals("myValue", tb1.getSomeMap().get("myKey")).     assertEquals(2, tb2.getStringArray().length).     assertEquals(System.getProperty("os.name"), tb2.getStringArray()[0]).     assertEquals("98", tb2.getStringArray()[1]).     assertEquals(2, tb2.getFriends().size()).     assertEquals("na98me", tb2.getFriends().iterator().next()).     assertEquals(tb2, tb2.getFriends().toArray()[1]).     assertEquals(3, tb2.getSomeSet().size()).     assertTrue(tb2.getSomeSet().contains("na98me")).     assertTrue(tb2.getSomeSet().contains(tb2)).     assertTrue(tb2.getSomeSet().contains(new Integer(98))).     assertEquals(6, tb2.getSomeMap().size()).     assertEquals("98", tb2.getSomeMap().get("key98")).     assertEquals(tb2, tb2.getSomeMap().get("key98ref")).     assertEquals(tb2, tb2.getSomeMap().get("key1")).     assertEquals("98name", tb2.getSomeMap().get("key2")).     TestBean inner1 = (TestBean) tb2.getSomeMap().get("key3").     TestBean inner2 = (TestBean) tb2.getSomeMap().get("mykey4").     assertEquals(0, inner1.getAge()).     assertEquals(null, inner1.getName()).     assertEquals(System.getProperty("os.name"), inner1.getCountry()).     assertEquals(98, inner2.getAge()).     assertEquals("namemyvarmyvar${", inner2.getName()).     assertEquals(System.getProperty("os.name"), inner2.getCountry()). }
false;public;0;11;;@Test public void testPropertyPlaceholderConfigurerWithSystemPropertyFallback() {     factory.registerBeanDefinition("tb", genericBeanDefinition(TestBean.class).addPropertyValue("country", "${os.name}").getBeanDefinition()).     PropertyPlaceholderConfigurer ppc = new PropertyPlaceholderConfigurer().     ppc.postProcessBeanFactory(factory).     TestBean tb = (TestBean) factory.getBean("tb").     assertEquals(System.getProperty("os.name"), tb.getCountry()). }
false;public;0;14;;@Test public void testPropertyPlaceholderConfigurerWithSystemPropertyNotUsed() {     factory.registerBeanDefinition("tb", genericBeanDefinition(TestBean.class).addPropertyValue("country", "${os.name}").getBeanDefinition()).     PropertyPlaceholderConfigurer ppc = new PropertyPlaceholderConfigurer().     Properties props = new Properties().     props.setProperty("os.name", "myos").     ppc.setProperties(props).     ppc.postProcessBeanFactory(factory).     TestBean tb = (TestBean) factory.getBean("tb").     assertEquals("myos", tb.getCountry()). }
false;public;0;15;;@Test public void testPropertyPlaceholderConfigurerWithOverridingSystemProperty() {     factory.registerBeanDefinition("tb", genericBeanDefinition(TestBean.class).addPropertyValue("country", "${os.name}").getBeanDefinition()).     PropertyPlaceholderConfigurer ppc = new PropertyPlaceholderConfigurer().     Properties props = new Properties().     props.put("os.name", "myos").     ppc.setProperties(props).     ppc.setSystemPropertiesMode(PropertyPlaceholderConfigurer.SYSTEM_PROPERTIES_MODE_OVERRIDE).     ppc.postProcessBeanFactory(factory).     TestBean tb = (TestBean) factory.getBean("tb").     assertEquals(System.getProperty("os.name"), tb.getCountry()). }
false;public;0;17;;@Test public void testPropertyPlaceholderConfigurerWithUnresolvableSystemProperty() {     factory.registerBeanDefinition("tb", genericBeanDefinition(TestBean.class).addPropertyValue("touchy", "${user.dir}").getBeanDefinition()).     PropertyPlaceholderConfigurer ppc = new PropertyPlaceholderConfigurer().     ppc.setSystemPropertiesMode(PropertyPlaceholderConfigurer.SYSTEM_PROPERTIES_MODE_NEVER).     try {         ppc.postProcessBeanFactory(factory).         fail("Should have thrown BeanDefinitionStoreException").     } catch (BeanDefinitionStoreException ex) {         // expected         assertTrue(ex.getMessage().contains("user.dir")).     } }
false;public;0;16;;@Test public void testPropertyPlaceholderConfigurerWithUnresolvablePlaceholder() {     factory.registerBeanDefinition("tb", genericBeanDefinition(TestBean.class).addPropertyValue("name", "${ref}").getBeanDefinition()).     PropertyPlaceholderConfigurer ppc = new PropertyPlaceholderConfigurer().     try {         ppc.postProcessBeanFactory(factory).         fail("Should have thrown BeanDefinitionStoreException").     } catch (BeanDefinitionStoreException ex) {         // expected         assertTrue(ex.getMessage().contains("ref")).     } }
false;public;0;12;;@Test public void testPropertyPlaceholderConfigurerWithIgnoreUnresolvablePlaceholder() {     factory.registerBeanDefinition("tb", genericBeanDefinition(TestBean.class).addPropertyValue("name", "${ref}").getBeanDefinition()).     PropertyPlaceholderConfigurer ppc = new PropertyPlaceholderConfigurer().     ppc.setIgnoreUnresolvablePlaceholders(true).     ppc.postProcessBeanFactory(factory).     TestBean tb = (TestBean) factory.getBean("tb").     assertEquals("${ref}", tb.getName()). }
false;public;0;12;;@Test public void testPropertyPlaceholderConfigurerWithEmptyStringAsNull() {     factory.registerBeanDefinition("tb", genericBeanDefinition(TestBean.class).addPropertyValue("name", "").getBeanDefinition()).     PropertyPlaceholderConfigurer ppc = new PropertyPlaceholderConfigurer().     ppc.setNullValue("").     ppc.postProcessBeanFactory(factory).     TestBean tb = (TestBean) factory.getBean("tb").     assertNull(tb.getName()). }
false;public;0;15;;@Test public void testPropertyPlaceholderConfigurerWithEmptyStringInPlaceholderAsNull() {     factory.registerBeanDefinition("tb", genericBeanDefinition(TestBean.class).addPropertyValue("name", "${ref}").getBeanDefinition()).     PropertyPlaceholderConfigurer ppc = new PropertyPlaceholderConfigurer().     ppc.setNullValue("").     Properties props = new Properties().     props.put("ref", "").     ppc.setProperties(props).     ppc.postProcessBeanFactory(factory).     TestBean tb = (TestBean) factory.getBean("tb").     assertNull(tb.getName()). }
false;public;0;15;;@Test public void testPropertyPlaceholderConfigurerWithNestedPlaceholderInKey() {     factory.registerBeanDefinition("tb", genericBeanDefinition(TestBean.class).addPropertyValue("name", "${my${key}key}").getBeanDefinition()).     PropertyPlaceholderConfigurer ppc = new PropertyPlaceholderConfigurer().     Properties props = new Properties().     props.put("key", "new").     props.put("mynewkey", "myname").     ppc.setProperties(props).     ppc.postProcessBeanFactory(factory).     TestBean tb = (TestBean) factory.getBean("tb").     assertEquals("myname", tb.getName()). }
false;public;0;15;;@Test public void testPropertyPlaceholderConfigurerWithPlaceholderInAlias() {     factory.registerBeanDefinition("tb", genericBeanDefinition(TestBean.class).getBeanDefinition()).     factory.registerAlias("tb", "${alias}").     PropertyPlaceholderConfigurer ppc = new PropertyPlaceholderConfigurer().     Properties props = new Properties().     props.put("alias", "tb2").     ppc.setProperties(props).     ppc.postProcessBeanFactory(factory).     TestBean tb = (TestBean) factory.getBean("tb").     TestBean tb2 = (TestBean) factory.getBean("tb2").     assertSame(tb, tb2). }
false;public;0;15;;@Test public void testPropertyPlaceholderConfigurerWithSelfReferencingPlaceholderInAlias() {     factory.registerBeanDefinition("tb", genericBeanDefinition(TestBean.class).getBeanDefinition()).     factory.registerAlias("tb", "${alias}").     PropertyPlaceholderConfigurer ppc = new PropertyPlaceholderConfigurer().     Properties props = new Properties().     props.put("alias", "tb").     ppc.setProperties(props).     ppc.postProcessBeanFactory(factory).     TestBean tb = (TestBean) factory.getBean("tb").     assertNotNull(tb).     assertEquals(0, factory.getAliases("tb").length). }
false;public;0;22;;@Test public void testPropertyPlaceholderConfigurerWithCircularReference() {     factory.registerBeanDefinition("tb", genericBeanDefinition(TestBean.class).addPropertyValue("age", "${age}").addPropertyValue("name", "name${var}").getBeanDefinition()).     PropertyPlaceholderConfigurer ppc = new PropertyPlaceholderConfigurer().     Properties props = new Properties().     props.setProperty("age", "99").     props.setProperty("var", "${m}").     props.setProperty("m", "${var}").     ppc.setProperties(props).     try {         ppc.postProcessBeanFactory(factory).         fail("Should have thrown BeanDefinitionStoreException").     } catch (BeanDefinitionStoreException ex) {     // expected     } }
false;public;0;14;;@Test public void testPropertyPlaceholderConfigurerWithDefaultProperties() {     factory.registerBeanDefinition("tb", genericBeanDefinition(TestBean.class).addPropertyValue("touchy", "${test}").getBeanDefinition()).     PropertyPlaceholderConfigurer ppc = new PropertyPlaceholderConfigurer().     Properties props = new Properties().     props.put("test", "mytest").     ppc.setProperties(props).     ppc.postProcessBeanFactory(factory).     TestBean tb = (TestBean) factory.getBean("tb").     assertEquals("mytest", tb.getTouchy()). }
false;public;0;11;;@Test public void testPropertyPlaceholderConfigurerWithInlineDefault() {     factory.registerBeanDefinition("tb", genericBeanDefinition(TestBean.class).addPropertyValue("touchy", "${test:mytest}").getBeanDefinition()).     PropertyPlaceholderConfigurer ppc = new PropertyPlaceholderConfigurer().     ppc.postProcessBeanFactory(factory).     TestBean tb = (TestBean) factory.getBean("tb").     assertEquals("mytest", tb.getTouchy()). }
false;public;0;23;;@Test public void testPropertyPlaceholderConfigurerWithAliases() {     factory.registerBeanDefinition("tb", genericBeanDefinition(TestBean.class).addPropertyValue("touchy", "${test}").getBeanDefinition()).     factory.registerAlias("tb", "${myAlias}").     factory.registerAlias("${myTarget}", "alias2").     PropertyPlaceholderConfigurer ppc = new PropertyPlaceholderConfigurer().     Properties props = new Properties().     props.put("test", "mytest").     props.put("myAlias", "alias").     props.put("myTarget", "tb").     ppc.setProperties(props).     ppc.postProcessBeanFactory(factory).     TestBean tb = (TestBean) factory.getBean("tb").     assertEquals("mytest", tb.getTouchy()).     tb = (TestBean) factory.getBean("alias").     assertEquals("mytest", tb.getTouchy()).     tb = (TestBean) factory.getBean("alias2").     assertEquals("mytest", tb.getTouchy()). }
false;public;0;26;;@Test public void testPreferencesPlaceholderConfigurer() {     factory.registerBeanDefinition("tb", genericBeanDefinition(TestBean.class).addPropertyValue("name", "${myName}").addPropertyValue("age", "${myAge}").addPropertyValue("touchy", "${myTouchy}").getBeanDefinition()).     PreferencesPlaceholderConfigurer ppc = new PreferencesPlaceholderConfigurer().     Properties props = new Properties().     props.put("myAge", "99").     ppc.setProperties(props).     Preferences.systemRoot().put("myName", "myNameValue").     Preferences.systemRoot().put("myTouchy", "myTouchyValue").     Preferences.userRoot().put("myTouchy", "myOtherTouchyValue").     ppc.afterPropertiesSet().     ppc.postProcessBeanFactory(factory).     TestBean tb = (TestBean) factory.getBean("tb").     assertEquals("myNameValue", tb.getName()).     assertEquals(99, tb.getAge()).     assertEquals("myOtherTouchyValue", tb.getTouchy()).     Preferences.userRoot().remove("myTouchy").     Preferences.systemRoot().remove("myTouchy").     Preferences.systemRoot().remove("myName"). }
false;public;0;28;;@Test public void testPreferencesPlaceholderConfigurerWithCustomTreePaths() {     factory.registerBeanDefinition("tb", genericBeanDefinition(TestBean.class).addPropertyValue("name", "${myName}").addPropertyValue("age", "${myAge}").addPropertyValue("touchy", "${myTouchy}").getBeanDefinition()).     PreferencesPlaceholderConfigurer ppc = new PreferencesPlaceholderConfigurer().     Properties props = new Properties().     props.put("myAge", "99").     ppc.setProperties(props).     ppc.setSystemTreePath("mySystemPath").     ppc.setUserTreePath("myUserPath").     Preferences.systemRoot().node("mySystemPath").put("myName", "myNameValue").     Preferences.systemRoot().node("mySystemPath").put("myTouchy", "myTouchyValue").     Preferences.userRoot().node("myUserPath").put("myTouchy", "myOtherTouchyValue").     ppc.afterPropertiesSet().     ppc.postProcessBeanFactory(factory).     TestBean tb = (TestBean) factory.getBean("tb").     assertEquals("myNameValue", tb.getName()).     assertEquals(99, tb.getAge()).     assertEquals("myOtherTouchyValue", tb.getTouchy()).     Preferences.userRoot().node("myUserPath").remove("myTouchy").     Preferences.systemRoot().node("mySystemPath").remove("myTouchy").     Preferences.systemRoot().node("mySystemPath").remove("myName"). }
false;public;0;28;;@Test public void testPreferencesPlaceholderConfigurerWithPathInPlaceholder() {     factory.registerBeanDefinition("tb", genericBeanDefinition(TestBean.class).addPropertyValue("name", "${mypath/myName}").addPropertyValue("age", "${myAge}").addPropertyValue("touchy", "${myotherpath/myTouchy}").getBeanDefinition()).     PreferencesPlaceholderConfigurer ppc = new PreferencesPlaceholderConfigurer().     Properties props = new Properties().     props.put("myAge", "99").     ppc.setProperties(props).     ppc.setSystemTreePath("mySystemPath").     ppc.setUserTreePath("myUserPath").     Preferences.systemRoot().node("mySystemPath").node("mypath").put("myName", "myNameValue").     Preferences.systemRoot().node("mySystemPath/myotherpath").put("myTouchy", "myTouchyValue").     Preferences.userRoot().node("myUserPath/myotherpath").put("myTouchy", "myOtherTouchyValue").     ppc.afterPropertiesSet().     ppc.postProcessBeanFactory(factory).     TestBean tb = (TestBean) factory.getBean("tb").     assertEquals("myNameValue", tb.getName()).     assertEquals(99, tb.getAge()).     assertEquals("myOtherTouchyValue", tb.getTouchy()).     Preferences.userRoot().node("myUserPath/myotherpath").remove("myTouchy").     Preferences.systemRoot().node("mySystemPath/myotherpath").remove("myTouchy").     Preferences.systemRoot().node("mySystemPath/mypath").remove("myName"). }
false;public;0;3;;public Properties getHeldProperties() {     return props. }
false;public;1;3;;public void setHeldProperties(Properties props) {     this.props = props. }
false;protected;1;4;;@Override protected String convertPropertyValue(String originalValue) {     return "X" + originalValue. }
false;public;0;4;;@Override public Preferences systemRoot() {     return this.systemRoot. }
false;public;0;4;;@Override public Preferences userRoot() {     return this.userRoot. }
false;protected;2;4;;@Override protected void putSpi(String key, String value) {     values.put(key, value). }
false;protected;1;4;;@Override protected String getSpi(String key) {     return values.get(key). }
false;protected;1;4;;@Override protected void removeSpi(String key) {     values.remove(key). }
false;protected;0;3;;@Override protected void removeNodeSpi() throws BackingStoreException { }
false;protected;0;4;;@Override protected String[] keysSpi() throws BackingStoreException {     return StringUtils.toStringArray(values.keySet()). }
false;protected;0;4;;@Override protected String[] childrenNamesSpi() throws BackingStoreException {     return StringUtils.toStringArray(children.keySet()). }
false;protected;1;9;;@Override protected AbstractPreferences childSpi(String name) {     AbstractPreferences child = children.get(name).     if (child == null) {         child = new MockPreferences(this, name).         children.put(name, child).     }     return child. }
false;protected;0;3;;@Override protected void syncSpi() throws BackingStoreException { }
false;protected;0;3;;@Override protected void flushSpi() throws BackingStoreException { }
