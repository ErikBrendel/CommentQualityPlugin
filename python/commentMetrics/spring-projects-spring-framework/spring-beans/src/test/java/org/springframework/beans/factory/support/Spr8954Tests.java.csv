commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setUp() {     bf = new DefaultListableBeanFactory().     bf.registerBeanDefinition("foo", new RootBeanDefinition(FooFactoryBean.class)).     bf.addBeanPostProcessor(new PredictingBPP()). }
false;public;0;15;;@Test public void repro() {     assertThat(bf.getBean("foo"), instanceOf(Foo.class)).     assertThat(bf.getBean("&foo"), instanceOf(FooFactoryBean.class)).     assertThat(bf.isTypeMatch("&foo", FactoryBean.class), is(true)).     @SuppressWarnings("rawtypes")     Map<String, FactoryBean> fbBeans = bf.getBeansOfType(FactoryBean.class).     assertThat(fbBeans.size(), is(1)).     assertThat(fbBeans.keySet(), hasItem("&foo")).     Map<String, AnInterface> aiBeans = bf.getBeansOfType(AnInterface.class).     assertThat(aiBeans.size(), is(1)).     assertThat(aiBeans.keySet(), hasItem("&foo")). }
false;public;0;13;;@Test public void findsBeansByTypeIfNotInstantiated() {     assertThat(bf.isTypeMatch("&foo", FactoryBean.class), is(true)).     @SuppressWarnings("rawtypes")     Map<String, FactoryBean> fbBeans = bf.getBeansOfType(FactoryBean.class).     assertThat(1, equalTo(fbBeans.size())).     assertThat("&foo", equalTo(fbBeans.keySet().iterator().next())).     Map<String, AnInterface> aiBeans = bf.getBeansOfType(AnInterface.class).     assertThat(aiBeans.size(), is(1)).     assertThat(aiBeans.keySet(), hasItem("&foo")). }
true;public;0;9;/**  * SPR-10517  */ ;/**  * SPR-10517  */ @Test public void findsFactoryBeanNameByTypeWithoutInstantiation() {     String[] names = bf.getBeanNamesForType(AnInterface.class, false, false).     assertThat(Arrays.asList(names), hasItem("&foo")).     Map<String, AnInterface> beans = bf.getBeansOfType(AnInterface.class, false, false).     assertThat(beans.size(), is(1)).     assertThat(beans.keySet(), hasItem("&foo")). }
false;public;0;4;;@Override public Foo getObject() throws Exception {     return new Foo(). }
false;public;0;4;;@Override public Class<?> getObjectType() {     return Foo.class. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;2;4;;@Override public Class<?> predictBeanType(Class<?> beanClass, String beanName) {     return FactoryBean.class.isAssignableFrom(beanClass) ? PredictedType.class : null. }
