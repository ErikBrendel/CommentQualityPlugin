commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testAutowireCandidateDefaultWithIrrelevantDescriptor() throws Exception {     DefaultListableBeanFactory lbf = new DefaultListableBeanFactory().     ConstructorArgumentValues cavs = new ConstructorArgumentValues().     cavs.addGenericArgumentValue(JUERGEN).     RootBeanDefinition rbd = new RootBeanDefinition(Person.class, cavs, null).     lbf.registerBeanDefinition(JUERGEN, rbd).     assertTrue(lbf.isAutowireCandidate(JUERGEN, null)).     assertTrue(lbf.isAutowireCandidate(JUERGEN, new DependencyDescriptor(Person.class.getDeclaredField("name"), false))).     assertTrue(lbf.isAutowireCandidate(JUERGEN, new DependencyDescriptor(Person.class.getDeclaredField("name"), true))). }
false;public;0;14;;@Test public void testAutowireCandidateExplicitlyFalseWithIrrelevantDescriptor() throws Exception {     DefaultListableBeanFactory lbf = new DefaultListableBeanFactory().     ConstructorArgumentValues cavs = new ConstructorArgumentValues().     cavs.addGenericArgumentValue(JUERGEN).     RootBeanDefinition rbd = new RootBeanDefinition(Person.class, cavs, null).     rbd.setAutowireCandidate(false).     lbf.registerBeanDefinition(JUERGEN, rbd).     assertFalse(lbf.isAutowireCandidate(JUERGEN, null)).     assertFalse(lbf.isAutowireCandidate(JUERGEN, new DependencyDescriptor(Person.class.getDeclaredField("name"), false))).     assertFalse(lbf.isAutowireCandidate(JUERGEN, new DependencyDescriptor(Person.class.getDeclaredField("name"), true))). }
false;public;0;24;;@Ignore @Test public void testAutowireCandidateWithFieldDescriptor() throws Exception {     DefaultListableBeanFactory lbf = new DefaultListableBeanFactory().     ConstructorArgumentValues cavs1 = new ConstructorArgumentValues().     cavs1.addGenericArgumentValue(JUERGEN).     RootBeanDefinition person1 = new RootBeanDefinition(Person.class, cavs1, null).     person1.addQualifier(new AutowireCandidateQualifier(TestQualifier.class)).     lbf.registerBeanDefinition(JUERGEN, person1).     ConstructorArgumentValues cavs2 = new ConstructorArgumentValues().     cavs2.addGenericArgumentValue(MARK).     RootBeanDefinition person2 = new RootBeanDefinition(Person.class, cavs2, null).     lbf.registerBeanDefinition(MARK, person2).     DependencyDescriptor qualifiedDescriptor = new DependencyDescriptor(QualifiedTestBean.class.getDeclaredField("qualified"), false).     DependencyDescriptor nonqualifiedDescriptor = new DependencyDescriptor(QualifiedTestBean.class.getDeclaredField("nonqualified"), false).     assertTrue(lbf.isAutowireCandidate(JUERGEN, null)).     assertTrue(lbf.isAutowireCandidate(JUERGEN, nonqualifiedDescriptor)).     assertTrue(lbf.isAutowireCandidate(JUERGEN, qualifiedDescriptor)).     assertTrue(lbf.isAutowireCandidate(MARK, null)).     assertTrue(lbf.isAutowireCandidate(MARK, nonqualifiedDescriptor)).     assertFalse(lbf.isAutowireCandidate(MARK, qualifiedDescriptor)). }
false;public;0;17;;@Test public void testAutowireCandidateExplicitlyFalseWithFieldDescriptor() throws Exception {     DefaultListableBeanFactory lbf = new DefaultListableBeanFactory().     ConstructorArgumentValues cavs = new ConstructorArgumentValues().     cavs.addGenericArgumentValue(JUERGEN).     RootBeanDefinition person = new RootBeanDefinition(Person.class, cavs, null).     person.setAutowireCandidate(false).     person.addQualifier(new AutowireCandidateQualifier(TestQualifier.class)).     lbf.registerBeanDefinition(JUERGEN, person).     DependencyDescriptor qualifiedDescriptor = new DependencyDescriptor(QualifiedTestBean.class.getDeclaredField("qualified"), false).     DependencyDescriptor nonqualifiedDescriptor = new DependencyDescriptor(QualifiedTestBean.class.getDeclaredField("nonqualified"), false).     assertFalse(lbf.isAutowireCandidate(JUERGEN, null)).     assertFalse(lbf.isAutowireCandidate(JUERGEN, nonqualifiedDescriptor)).     assertFalse(lbf.isAutowireCandidate(JUERGEN, qualifiedDescriptor)). }
false;public;0;16;;@Test public void testAutowireCandidateWithShortClassName() throws Exception {     DefaultListableBeanFactory lbf = new DefaultListableBeanFactory().     ConstructorArgumentValues cavs = new ConstructorArgumentValues().     cavs.addGenericArgumentValue(JUERGEN).     RootBeanDefinition person = new RootBeanDefinition(Person.class, cavs, null).     person.addQualifier(new AutowireCandidateQualifier(ClassUtils.getShortName(TestQualifier.class))).     lbf.registerBeanDefinition(JUERGEN, person).     DependencyDescriptor qualifiedDescriptor = new DependencyDescriptor(QualifiedTestBean.class.getDeclaredField("qualified"), false).     DependencyDescriptor nonqualifiedDescriptor = new DependencyDescriptor(QualifiedTestBean.class.getDeclaredField("nonqualified"), false).     assertTrue(lbf.isAutowireCandidate(JUERGEN, null)).     assertTrue(lbf.isAutowireCandidate(JUERGEN, nonqualifiedDescriptor)).     assertTrue(lbf.isAutowireCandidate(JUERGEN, qualifiedDescriptor)). }
false;public;0;21;;@Ignore @Test public void testAutowireCandidateWithConstructorDescriptor() throws Exception {     DefaultListableBeanFactory lbf = new DefaultListableBeanFactory().     ConstructorArgumentValues cavs1 = new ConstructorArgumentValues().     cavs1.addGenericArgumentValue(JUERGEN).     RootBeanDefinition person1 = new RootBeanDefinition(Person.class, cavs1, null).     person1.addQualifier(new AutowireCandidateQualifier(TestQualifier.class)).     lbf.registerBeanDefinition(JUERGEN, person1).     ConstructorArgumentValues cavs2 = new ConstructorArgumentValues().     cavs2.addGenericArgumentValue(MARK).     RootBeanDefinition person2 = new RootBeanDefinition(Person.class, cavs2, null).     lbf.registerBeanDefinition(MARK, person2).     MethodParameter param = new MethodParameter(QualifiedTestBean.class.getDeclaredConstructor(Person.class), 0).     DependencyDescriptor qualifiedDescriptor = new DependencyDescriptor(param, false).     param.initParameterNameDiscovery(new LocalVariableTableParameterNameDiscoverer()).     assertEquals("tpb", param.getParameterName()).     assertTrue(lbf.isAutowireCandidate(JUERGEN, null)).     assertTrue(lbf.isAutowireCandidate(JUERGEN, qualifiedDescriptor)).     assertFalse(lbf.isAutowireCandidate(MARK, qualifiedDescriptor)). }
false;public;0;30;;@Ignore @Test public void testAutowireCandidateWithMethodDescriptor() throws Exception {     DefaultListableBeanFactory lbf = new DefaultListableBeanFactory().     ConstructorArgumentValues cavs1 = new ConstructorArgumentValues().     cavs1.addGenericArgumentValue(JUERGEN).     RootBeanDefinition person1 = new RootBeanDefinition(Person.class, cavs1, null).     person1.addQualifier(new AutowireCandidateQualifier(TestQualifier.class)).     lbf.registerBeanDefinition(JUERGEN, person1).     ConstructorArgumentValues cavs2 = new ConstructorArgumentValues().     cavs2.addGenericArgumentValue(MARK).     RootBeanDefinition person2 = new RootBeanDefinition(Person.class, cavs2, null).     lbf.registerBeanDefinition(MARK, person2).     MethodParameter qualifiedParam = new MethodParameter(QualifiedTestBean.class.getDeclaredMethod("autowireQualified", Person.class), 0).     MethodParameter nonqualifiedParam = new MethodParameter(QualifiedTestBean.class.getDeclaredMethod("autowireNonqualified", Person.class), 0).     DependencyDescriptor qualifiedDescriptor = new DependencyDescriptor(qualifiedParam, false).     DependencyDescriptor nonqualifiedDescriptor = new DependencyDescriptor(nonqualifiedParam, false).     qualifiedParam.initParameterNameDiscovery(new LocalVariableTableParameterNameDiscoverer()).     assertEquals("tpb", qualifiedParam.getParameterName()).     nonqualifiedParam.initParameterNameDiscovery(new LocalVariableTableParameterNameDiscoverer()).     assertEquals("tpb", nonqualifiedParam.getParameterName()).     assertTrue(lbf.isAutowireCandidate(JUERGEN, null)).     assertTrue(lbf.isAutowireCandidate(JUERGEN, nonqualifiedDescriptor)).     assertTrue(lbf.isAutowireCandidate(JUERGEN, qualifiedDescriptor)).     assertTrue(lbf.isAutowireCandidate(MARK, null)).     assertTrue(lbf.isAutowireCandidate(MARK, nonqualifiedDescriptor)).     assertFalse(lbf.isAutowireCandidate(MARK, qualifiedDescriptor)). }
false;public;0;19;;@Test public void testAutowireCandidateWithMultipleCandidatesDescriptor() throws Exception {     DefaultListableBeanFactory lbf = new DefaultListableBeanFactory().     ConstructorArgumentValues cavs1 = new ConstructorArgumentValues().     cavs1.addGenericArgumentValue(JUERGEN).     RootBeanDefinition person1 = new RootBeanDefinition(Person.class, cavs1, null).     person1.addQualifier(new AutowireCandidateQualifier(TestQualifier.class)).     lbf.registerBeanDefinition(JUERGEN, person1).     ConstructorArgumentValues cavs2 = new ConstructorArgumentValues().     cavs2.addGenericArgumentValue(MARK).     RootBeanDefinition person2 = new RootBeanDefinition(Person.class, cavs2, null).     person2.addQualifier(new AutowireCandidateQualifier(TestQualifier.class)).     lbf.registerBeanDefinition(MARK, person2).     DependencyDescriptor qualifiedDescriptor = new DependencyDescriptor(new MethodParameter(QualifiedTestBean.class.getDeclaredConstructor(Person.class), 0), false).     assertTrue(lbf.isAutowireCandidate(JUERGEN, qualifiedDescriptor)).     assertTrue(lbf.isAutowireCandidate(MARK, qualifiedDescriptor)). }
false;public;1;2;;public void autowireQualified(@TestQualifier Person tpb) { }
false;public;1;2;;public void autowireNonqualified(Person tpb) { }
false;public;0;3;;public String getName() {     return this.name. }
