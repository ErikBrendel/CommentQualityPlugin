commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;3;/**  * Clear static state.  */ ;/**  * Clear static state.  */ public static void reset() {     prototypeCreated = false. }
true;public;0;4;/**  * Return if the bean managed by this factory is a singleton.  * @see FactoryBean#isSingleton()  */ ;/**  * Return if the bean managed by this factory is a singleton.  * @see FactoryBean#isSingleton()  */ @Override public boolean isSingleton() {     return this.singleton. }
true;public;1;3;/**  * Set if the bean managed by this factory is a singleton.  */ ;/**  * Set if the bean managed by this factory is a singleton.  */ public void setSingleton(boolean singleton) {     this.singleton = singleton. }
false;public;1;4;;@Override public void setBeanName(String beanName) {     this.beanName = beanName. }
false;public;0;3;;public String getBeanName() {     return beanName. }
false;public;1;5;;@Override public void setBeanFactory(BeanFactory beanFactory) {     this.beanFactory = (AutowireCapableBeanFactory) beanFactory.     this.beanFactory.applyBeanPostProcessorsBeforeInitialization(this.testBean, this.beanName). }
false;public;0;3;;public BeanFactory getBeanFactory() {     return beanFactory. }
false;public;1;3;;public void setPostProcessed(boolean postProcessed) {     this.postProcessed = postProcessed. }
false;public;0;3;;public boolean isPostProcessed() {     return postProcessed. }
false;public;1;4;;public void setOtherTestBean(TestBean otherTestBean) {     this.otherTestBean = otherTestBean.     this.testBean.setSpouse(otherTestBean). }
false;public;0;3;;public TestBean getOtherTestBean() {     return otherTestBean. }
false;public;0;7;;@Override public void afterPropertiesSet() {     if (initialized) {         throw new RuntimeException("Cannot call afterPropertiesSet twice on the one bean").     }     this.initialized = true. }
true;public;0;3;/**  * Was this initialized by invocation of the  * afterPropertiesSet() method from the InitializingBean interface?  */ ;/**  * Was this initialized by invocation of the  * afterPropertiesSet() method from the InitializingBean interface?  */ public boolean wasInitialized() {     return initialized. }
false;public,static;0;3;;public static boolean wasPrototypeCreated() {     return prototypeCreated. }
true;public;0;14;/**  * Return the managed object, supporting both singleton  * and prototype mode.  * @see FactoryBean#getObject()  */ ;/**  * Return the managed object, supporting both singleton  * and prototype mode.  * @see FactoryBean#getObject()  */ @Override public Object getObject() throws BeansException {     if (isSingleton()) {         return this.testBean.     } else {         TestBean prototype = new TestBean("prototype created at " + System.currentTimeMillis(), 11).         if (this.beanFactory != null) {             this.beanFactory.applyBeanPostProcessorsBeforeInitialization(prototype, this.beanName).         }         prototypeCreated = true.         return prototype.     } }
false;public;0;4;;@Override public Class<?> getObjectType() {     return TestBean.class. }
false;public;0;6;;@Override public void destroy() {     if (this.testBean != null) {         this.testBean.setName(null).     } }
