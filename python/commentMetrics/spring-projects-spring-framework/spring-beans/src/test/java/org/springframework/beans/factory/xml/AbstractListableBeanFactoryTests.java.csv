# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractListableBeanFactoryTests -> public void testGetCountForFactoryClass();1328020251;Check that count refers to factory class, not bean class. (We don't know_what type factories may return, and it may even change over time.);public void testGetCountForFactoryClass() {_		Assert.assertTrue("Should have 2 factories, not " +_				getListableBeanFactory().getBeanNamesForType(FactoryBean.class).length,_				getListableBeanFactory().getBeanNamesForType(FactoryBean.class).length == 2)___		Assert.assertTrue("Should have 2 factories, not " +_				getListableBeanFactory().getBeanNamesForType(FactoryBean.class).length,_				getListableBeanFactory().getBeanNamesForType(FactoryBean.class).length == 2)__	};check,that,count,refers,to,factory,class,not,bean,class,we,don,t,know,what,type,factories,may,return,and,it,may,even,change,over,time;public,void,test,get,count,for,factory,class,assert,assert,true,should,have,2,factories,not,get,listable,bean,factory,get,bean,names,for,type,factory,bean,class,length,get,listable,bean,factory,get,bean,names,for,type,factory,bean,class,length,2,assert,assert,true,should,have,2,factories,not,get,listable,bean,factory,get,bean,names,for,type,factory,bean,class,length,get,listable,bean,factory,get,bean,names,for,type,factory,bean,class,length,2
AbstractListableBeanFactoryTests -> public void testGetCountForFactoryClass();1357119417;Check that count refers to factory class, not bean class. (We don't know_what type factories may return, and it may even change over time.);public void testGetCountForFactoryClass() {_		assertTrue("Should have 2 factories, not " +_				getListableBeanFactory().getBeanNamesForType(FactoryBean.class).length,_				getListableBeanFactory().getBeanNamesForType(FactoryBean.class).length == 2)___		assertTrue("Should have 2 factories, not " +_				getListableBeanFactory().getBeanNamesForType(FactoryBean.class).length,_				getListableBeanFactory().getBeanNamesForType(FactoryBean.class).length == 2)__	};check,that,count,refers,to,factory,class,not,bean,class,we,don,t,know,what,type,factories,may,return,and,it,may,even,change,over,time;public,void,test,get,count,for,factory,class,assert,true,should,have,2,factories,not,get,listable,bean,factory,get,bean,names,for,type,factory,bean,class,length,get,listable,bean,factory,get,bean,names,for,type,factory,bean,class,length,2,assert,true,should,have,2,factories,not,get,listable,bean,factory,get,bean,names,for,type,factory,bean,class,length,get,listable,bean,factory,get,bean,names,for,type,factory,bean,class,length,2
AbstractListableBeanFactoryTests -> public void testGetCountForFactoryClass();1362408075;Check that count refers to factory class, not bean class. (We don't know_what type factories may return, and it may even change over time.);public void testGetCountForFactoryClass() {_		assertTrue("Should have 2 factories, not " +_				getListableBeanFactory().getBeanNamesForType(FactoryBean.class).length,_				getListableBeanFactory().getBeanNamesForType(FactoryBean.class).length == 2)___		assertTrue("Should have 2 factories, not " +_				getListableBeanFactory().getBeanNamesForType(FactoryBean.class).length,_				getListableBeanFactory().getBeanNamesForType(FactoryBean.class).length == 2)__	};check,that,count,refers,to,factory,class,not,bean,class,we,don,t,know,what,type,factories,may,return,and,it,may,even,change,over,time;public,void,test,get,count,for,factory,class,assert,true,should,have,2,factories,not,get,listable,bean,factory,get,bean,names,for,type,factory,bean,class,length,get,listable,bean,factory,get,bean,names,for,type,factory,bean,class,length,2,assert,true,should,have,2,factories,not,get,listable,bean,factory,get,bean,names,for,type,factory,bean,class,length,get,listable,bean,factory,get,bean,names,for,type,factory,bean,class,length,2
AbstractListableBeanFactoryTests -> public void testGetCountForFactoryClass();1385507683;Check that count refers to factory class, not bean class. (We don't know_what type factories may return, and it may even change over time.);public void testGetCountForFactoryClass() {_		assertTrue("Should have 2 factories, not " +_				getListableBeanFactory().getBeanNamesForType(FactoryBean.class).length,_				getListableBeanFactory().getBeanNamesForType(FactoryBean.class).length == 2)___		assertTrue("Should have 2 factories, not " +_				getListableBeanFactory().getBeanNamesForType(FactoryBean.class).length,_				getListableBeanFactory().getBeanNamesForType(FactoryBean.class).length == 2)__	};check,that,count,refers,to,factory,class,not,bean,class,we,don,t,know,what,type,factories,may,return,and,it,may,even,change,over,time;public,void,test,get,count,for,factory,class,assert,true,should,have,2,factories,not,get,listable,bean,factory,get,bean,names,for,type,factory,bean,class,length,get,listable,bean,factory,get,bean,names,for,type,factory,bean,class,length,2,assert,true,should,have,2,factories,not,get,listable,bean,factory,get,bean,names,for,type,factory,bean,class,length,get,listable,bean,factory,get,bean,names,for,type,factory,bean,class,length,2
AbstractListableBeanFactoryTests -> protected ListableBeanFactory getListableBeanFactory();1328020251;Subclasses must initialize this;protected ListableBeanFactory getListableBeanFactory() {_		BeanFactory bf = getBeanFactory()__		if (!(bf instanceof ListableBeanFactory)) {_			throw new IllegalStateException("ListableBeanFactory required")__		}_		return (ListableBeanFactory) bf__	};subclasses,must,initialize,this;protected,listable,bean,factory,get,listable,bean,factory,bean,factory,bf,get,bean,factory,if,bf,instanceof,listable,bean,factory,throw,new,illegal,state,exception,listable,bean,factory,required,return,listable,bean,factory,bf
AbstractListableBeanFactoryTests -> protected ListableBeanFactory getListableBeanFactory();1357119417;Subclasses must initialize this;protected ListableBeanFactory getListableBeanFactory() {_		BeanFactory bf = getBeanFactory()__		if (!(bf instanceof ListableBeanFactory)) {_			throw new IllegalStateException("ListableBeanFactory required")__		}_		return (ListableBeanFactory) bf__	};subclasses,must,initialize,this;protected,listable,bean,factory,get,listable,bean,factory,bean,factory,bf,get,bean,factory,if,bf,instanceof,listable,bean,factory,throw,new,illegal,state,exception,listable,bean,factory,required,return,listable,bean,factory,bf
AbstractListableBeanFactoryTests -> protected ListableBeanFactory getListableBeanFactory();1362408075;Subclasses must initialize this;protected ListableBeanFactory getListableBeanFactory() {_		BeanFactory bf = getBeanFactory()__		if (!(bf instanceof ListableBeanFactory)) {_			throw new IllegalStateException("ListableBeanFactory required")__		}_		return (ListableBeanFactory) bf__	};subclasses,must,initialize,this;protected,listable,bean,factory,get,listable,bean,factory,bean,factory,bf,get,bean,factory,if,bf,instanceof,listable,bean,factory,throw,new,illegal,state,exception,listable,bean,factory,required,return,listable,bean,factory,bf
AbstractListableBeanFactoryTests -> protected ListableBeanFactory getListableBeanFactory();1385507683;Subclasses must initialize this;protected ListableBeanFactory getListableBeanFactory() {_		BeanFactory bf = getBeanFactory()__		if (!(bf instanceof ListableBeanFactory)) {_			throw new IllegalStateException("ListableBeanFactory required")__		}_		return (ListableBeanFactory) bf__	};subclasses,must,initialize,this;protected,listable,bean,factory,get,listable,bean,factory,bean,factory,bf,get,bean,factory,if,bf,instanceof,listable,bean,factory,throw,new,illegal,state,exception,listable,bean,factory,required,return,listable,bean,factory,bf
AbstractListableBeanFactoryTests -> protected ListableBeanFactory getListableBeanFactory();1443381471;Subclasses must initialize this;protected ListableBeanFactory getListableBeanFactory() {_		BeanFactory bf = getBeanFactory()__		if (!(bf instanceof ListableBeanFactory)) {_			throw new IllegalStateException("ListableBeanFactory required")__		}_		return (ListableBeanFactory) bf__	};subclasses,must,initialize,this;protected,listable,bean,factory,get,listable,bean,factory,bean,factory,bf,get,bean,factory,if,bf,instanceof,listable,bean,factory,throw,new,illegal,state,exception,listable,bean,factory,required,return,listable,bean,factory,bf
AbstractListableBeanFactoryTests -> public void testCount();1328020251;Subclasses can override this.;public void testCount() {_		assertCount(13)__	};subclasses,can,override,this;public,void,test,count,assert,count,13
AbstractListableBeanFactoryTests -> public void testCount();1357119417;Subclasses can override this.;public void testCount() {_		assertCount(13)__	};subclasses,can,override,this;public,void,test,count,assert,count,13
AbstractListableBeanFactoryTests -> public void testCount();1362408075;Subclasses can override this.;public void testCount() {_		assertCount(13)__	};subclasses,can,override,this;public,void,test,count,assert,count,13
AbstractListableBeanFactoryTests -> public void testCount();1385507683;Subclasses can override this.;public void testCount() {_		assertCount(13)__	};subclasses,can,override,this;public,void,test,count,assert,count,13
