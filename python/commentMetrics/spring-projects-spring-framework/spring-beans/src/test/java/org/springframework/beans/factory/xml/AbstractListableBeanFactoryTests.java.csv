commented;modifiers;parameterAmount;loc;comment;code
true;protected;0;7;/**  * Subclasses must initialize this  */ ;/**  * Subclasses must initialize this  */ protected ListableBeanFactory getListableBeanFactory() {     BeanFactory bf = getBeanFactory().     if (!(bf instanceof ListableBeanFactory)) {         throw new IllegalStateException("ListableBeanFactory required").     }     return (ListableBeanFactory) bf. }
true;public;0;4;/**  * Subclasses can override this.  */ ;/**  * Subclasses can override this.  */ @Test public void count() {     assertCount(13). }
false;protected,final;1;4;;protected final void assertCount(int count) {     String[] defnames = getListableBeanFactory().getBeanDefinitionNames().     assertTrue("We should have " + count + " beans, not " + defnames.length, defnames.length == count). }
false;protected;1;11;;protected void assertTestBeanCount(int count) {     String[] defNames = getListableBeanFactory().getBeanNamesForType(TestBean.class, true, false).     assertTrue("We should have " + count + " beans for class org.springframework.tests.sample.beans.TestBean, not " + defNames.length, defNames.length == count).     int countIncludingFactoryBeans = count + 2.     String[] names = getListableBeanFactory().getBeanNamesForType(TestBean.class, true, true).     assertTrue("We should have " + countIncludingFactoryBeans + " beans for class org.springframework.tests.sample.beans.TestBean, not " + names.length, names.length == countIncludingFactoryBeans). }
false;public;0;5;;@Test public void getDefinitionsForNoSuchClass() {     String[] defnames = getListableBeanFactory().getBeanNamesForType(String.class).     assertTrue("No string definitions", defnames.length == 0). }
true;public;0;10;/**  * Check that count refers to factory class, not bean class. (We don't know  * what type factories may return, and it may even change over time.)  */ ;/**  * Check that count refers to factory class, not bean class. (We don't know  * what type factories may return, and it may even change over time.)  */ @Test public void getCountForFactoryClass() {     assertTrue("Should have 2 factories, not " + getListableBeanFactory().getBeanNamesForType(FactoryBean.class).length, getListableBeanFactory().getBeanNamesForType(FactoryBean.class).length == 2).     assertTrue("Should have 2 factories, not " + getListableBeanFactory().getBeanNamesForType(FactoryBean.class).length, getListableBeanFactory().getBeanNamesForType(FactoryBean.class).length == 2). }
false;public;0;5;;@Test public void containsBeanDefinition() {     assertTrue(getListableBeanFactory().containsBeanDefinition("rod")).     assertTrue(getListableBeanFactory().containsBeanDefinition("roderick")). }
