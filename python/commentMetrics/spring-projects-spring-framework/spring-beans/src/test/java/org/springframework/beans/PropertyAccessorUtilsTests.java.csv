commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testCanonicalPropertyName() {     assertEquals("map", PropertyAccessorUtils.canonicalPropertyName("map")).     assertEquals("map[key1]", PropertyAccessorUtils.canonicalPropertyName("map[key1]")).     assertEquals("map[key1]", PropertyAccessorUtils.canonicalPropertyName("map['key1']")).     assertEquals("map[key1]", PropertyAccessorUtils.canonicalPropertyName("map[\"key1\"]")).     assertEquals("map[key1][key2]", PropertyAccessorUtils.canonicalPropertyName("map[key1][key2]")).     assertEquals("map[key1][key2]", PropertyAccessorUtils.canonicalPropertyName("map['key1'][\"key2\"]")).     assertEquals("map[key1].name", PropertyAccessorUtils.canonicalPropertyName("map[key1].name")).     assertEquals("map[key1].name", PropertyAccessorUtils.canonicalPropertyName("map['key1'].name")).     assertEquals("map[key1].name", PropertyAccessorUtils.canonicalPropertyName("map[\"key1\"].name")). }
false;public;0;11;;@Test public void testCanonicalPropertyNames() {     String[] original = new String[] { "map", "map[key1]", "map['key1']", "map[\"key1\"]", "map[key1][key2]", "map['key1'][\"key2\"]", "map[key1].name", "map['key1'].name", "map[\"key1\"].name" }.     String[] canonical = new String[] { "map", "map[key1]", "map[key1]", "map[key1]", "map[key1][key2]", "map[key1][key2]", "map[key1].name", "map[key1].name", "map[key1].name" }.     assertTrue(Arrays.equals(canonical, PropertyAccessorUtils.canonicalPropertyNames(original))). }
