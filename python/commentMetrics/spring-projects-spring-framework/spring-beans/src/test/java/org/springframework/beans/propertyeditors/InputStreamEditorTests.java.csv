commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void testCtorWithNullResourceEditor() throws Exception {     new InputStreamEditor(null). }
false;public;0;20;;@Test public void testSunnyDay() throws Exception {     InputStream stream = null.     try {         String resource = "classpath:" + ClassUtils.classPackageAsResourcePath(getClass()) + "/" + ClassUtils.getShortName(getClass()) + ".class".         InputStreamEditor editor = new InputStreamEditor().         editor.setAsText(resource).         Object value = editor.getValue().         assertNotNull(value).         assertTrue(value instanceof InputStream).         stream = (InputStream) value.         assertTrue(stream.available() > 0).     } finally {         if (stream != null) {             stream.close().         }     } }
false;public;0;5;;@Test(expected = IllegalArgumentException.class) public void testWhenResourceDoesNotExist() throws Exception {     InputStreamEditor editor = new InputStreamEditor().     editor.setAsText("classpath:bingo!"). }
false;public;0;9;;@Test public void testGetAsTextReturnsNullByDefault() throws Exception {     assertNull(new InputStreamEditor().getAsText()).     String resource = "classpath:" + ClassUtils.classPackageAsResourcePath(getClass()) + "/" + ClassUtils.getShortName(getClass()) + ".class".     InputStreamEditor editor = new InputStreamEditor().     editor.setAsText(resource).     assertNull(editor.getAsText()). }
