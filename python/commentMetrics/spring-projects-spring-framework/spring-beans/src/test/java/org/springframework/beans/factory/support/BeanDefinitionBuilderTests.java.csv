commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void beanClassWithSimpleProperty() {     String[] dependsOn = new String[] { "A", "B", "C" }.     BeanDefinitionBuilder bdb = BeanDefinitionBuilder.rootBeanDefinition(TestBean.class).     bdb.setScope(BeanDefinition.SCOPE_PROTOTYPE).     bdb.addPropertyReference("age", "15").     for (int i = 0. i < dependsOn.length. i++) {         bdb.addDependsOn(dependsOn[i]).     }     RootBeanDefinition rbd = (RootBeanDefinition) bdb.getBeanDefinition().     assertFalse(rbd.isSingleton()).     assertEquals(TestBean.class, rbd.getBeanClass()).     assertTrue("Depends on was added", Arrays.equals(dependsOn, rbd.getDependsOn())).     assertTrue(rbd.getPropertyValues().contains("age")). }
false;public;0;8;;@Test public void beanClassWithFactoryMethod() {     BeanDefinitionBuilder bdb = BeanDefinitionBuilder.rootBeanDefinition(TestBean.class, "create").     RootBeanDefinition rbd = (RootBeanDefinition) bdb.getBeanDefinition().     assertTrue(rbd.hasBeanClass()).     assertEquals(TestBean.class, rbd.getBeanClass()).     assertEquals("create", rbd.getFactoryMethodName()). }
false;public;0;7;;@Test public void beanClassName() {     BeanDefinitionBuilder bdb = BeanDefinitionBuilder.rootBeanDefinition(TestBean.class.getName()).     RootBeanDefinition rbd = (RootBeanDefinition) bdb.getBeanDefinition().     assertFalse(rbd.hasBeanClass()).     assertEquals(TestBean.class.getName(), rbd.getBeanClassName()). }
false;public;0;8;;@Test public void beanClassNameWithFactoryMethod() {     BeanDefinitionBuilder bdb = BeanDefinitionBuilder.rootBeanDefinition(TestBean.class.getName(), "create").     RootBeanDefinition rbd = (RootBeanDefinition) bdb.getBeanDefinition().     assertFalse(rbd.hasBeanClass()).     assertEquals(TestBean.class.getName(), rbd.getBeanClassName()).     assertEquals("create", rbd.getFactoryMethodName()). }
