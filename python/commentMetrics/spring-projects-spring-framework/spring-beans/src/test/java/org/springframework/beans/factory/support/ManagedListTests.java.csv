commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void mergeSunnyDay() {     ManagedList parent = new ManagedList().     parent.add("one").     parent.add("two").     ManagedList child = new ManagedList().     child.add("three").     child.setMergeEnabled(true).     List mergedList = child.merge(parent).     assertEquals("merge() obviously did not work.", 3, mergedList.size()). }
false;public;0;7;;@Test public void mergeWithNullParent() {     ManagedList child = new ManagedList().     child.add("one").     child.setMergeEnabled(true).     assertSame(child, child.merge(null)). }
false;public;0;5;;@Test(expected = IllegalStateException.class) public void mergeNotAllowedWhenMergeNotEnabled() {     ManagedList child = new ManagedList().     child.merge(null). }
false;public;0;7;;@Test(expected = IllegalArgumentException.class) public void mergeWithNonCompatibleParentType() {     ManagedList child = new ManagedList().     child.add("one").     child.setMergeEnabled(true).     child.merge("hello"). }
false;public;0;10;;@Test public void mergeEmptyChild() {     ManagedList parent = new ManagedList().     parent.add("one").     parent.add("two").     ManagedList child = new ManagedList().     child.setMergeEnabled(true).     List mergedList = child.merge(parent).     assertEquals("merge() obviously did not work.", 2, mergedList.size()). }
false;public;0;12;;@Test public void mergeChildValuesOverrideTheParents() {     // doesn't make much sense in the context of a list...     ManagedList parent = new ManagedList().     parent.add("one").     parent.add("two").     ManagedList child = new ManagedList().     child.add("one").     child.setMergeEnabled(true).     List mergedList = child.merge(parent).     assertEquals("merge() obviously did not work.", 3, mergedList.size()). }
