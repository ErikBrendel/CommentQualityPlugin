# id;timestamp;commentText;codeText;commentWords;codeWords
BeanFactoryGenericsTests -> @Test 	public void parameterizedFactoryMethod();1340122048;Tests support for parameterized {@code factory-method} declarations such_as EasyMock's {@code createMock()} method which has the following signature.__<pre>{@code_public static <T> T createMock(Class<T> toMock)_}</pre>__@since 3.2_@see SPR-9493;@Test_	public void parameterizedFactoryMethod() {_		RootBeanDefinition rbd = new RootBeanDefinition(EasyMock.class)__		rbd.setFactoryMethodName("createMock")__		rbd.getConstructorArgumentValues().addGenericArgumentValue(Runnable.class)___		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		bf.registerBeanDefinition("easyMock", rbd)___		Map<String, Runnable> beans = bf.getBeansOfType(Runnable.class)__		assertEquals(1, beans.size())__	};tests,support,for,parameterized,code,factory,method,declarations,such,as,easy,mock,s,code,create,mock,method,which,has,the,following,signature,pre,code,public,static,t,t,create,mock,class,t,to,mock,pre,since,3,2,see,spr,9493;test,public,void,parameterized,factory,method,root,bean,definition,rbd,new,root,bean,definition,easy,mock,class,rbd,set,factory,method,name,create,mock,rbd,get,constructor,argument,values,add,generic,argument,value,runnable,class,default,listable,bean,factory,bf,new,default,listable,bean,factory,bf,register,bean,definition,easy,mock,rbd,map,string,runnable,beans,bf,get,beans,of,type,runnable,class,assert,equals,1,beans,size
BeanFactoryGenericsTests -> @Test 	public void parameterizedFactoryMethod();1356735495;Tests support for parameterized {@code factory-method} declarations such_as Mockito {@code mock()} method which has the following signature.__<pre>{@code_public static <T> T mock(Class<T> classToMock)_}</pre>__See SPR-9493_@since 3.2;@Test_	public void parameterizedFactoryMethod() {_		RootBeanDefinition rbd = new RootBeanDefinition(Mockito.class)__		rbd.setFactoryMethodName("mock")__		rbd.getConstructorArgumentValues().addGenericArgumentValue(Runnable.class)___		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		bf.registerBeanDefinition("mock", rbd)___		Map<String, Runnable> beans = bf.getBeansOfType(Runnable.class)__		assertEquals(1, beans.size())__	};tests,support,for,parameterized,code,factory,method,declarations,such,as,mockito,code,mock,method,which,has,the,following,signature,pre,code,public,static,t,t,mock,class,t,class,to,mock,pre,see,spr,9493,since,3,2;test,public,void,parameterized,factory,method,root,bean,definition,rbd,new,root,bean,definition,mockito,class,rbd,set,factory,method,name,mock,rbd,get,constructor,argument,values,add,generic,argument,value,runnable,class,default,listable,bean,factory,bf,new,default,listable,bean,factory,bf,register,bean,definition,mock,rbd,map,string,runnable,beans,bf,get,beans,of,type,runnable,class,assert,equals,1,beans,size
BeanFactoryGenericsTests -> @Test 	public void parameterizedFactoryMethod();1357119417;Tests support for parameterized {@code factory-method} declarations such_as Mockito {@code mock()} method which has the following signature.__<pre>{@code_public static <T> T mock(Class<T> classToMock)_}</pre>__See SPR-9493_@since 3.2;@Test_	public void parameterizedFactoryMethod() {_		RootBeanDefinition rbd = new RootBeanDefinition(Mockito.class)__		rbd.setFactoryMethodName("mock")__		rbd.getConstructorArgumentValues().addGenericArgumentValue(Runnable.class)___		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		bf.registerBeanDefinition("mock", rbd)___		Map<String, Runnable> beans = bf.getBeansOfType(Runnable.class)__		assertEquals(1, beans.size())__	};tests,support,for,parameterized,code,factory,method,declarations,such,as,mockito,code,mock,method,which,has,the,following,signature,pre,code,public,static,t,t,mock,class,t,class,to,mock,pre,see,spr,9493,since,3,2;test,public,void,parameterized,factory,method,root,bean,definition,rbd,new,root,bean,definition,mockito,class,rbd,set,factory,method,name,mock,rbd,get,constructor,argument,values,add,generic,argument,value,runnable,class,default,listable,bean,factory,bf,new,default,listable,bean,factory,bf,register,bean,definition,mock,rbd,map,string,runnable,beans,bf,get,beans,of,type,runnable,class,assert,equals,1,beans,size
BeanFactoryGenericsTests -> @Test 	public void parameterizedFactoryMethod();1357248712;Tests support for parameterized {@code factory-method} declarations such_as Mockito {@code mock()} method which has the following signature.__<pre>{@code_public static <T> T mock(Class<T> classToMock)_}</pre>__See SPR-9493_@since 3.2;@Test_	public void parameterizedFactoryMethod() {_		RootBeanDefinition rbd = new RootBeanDefinition(Mockito.class)__		rbd.setFactoryMethodName("mock")__		rbd.getConstructorArgumentValues().addGenericArgumentValue(Runnable.class)___		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		bf.registerBeanDefinition("mock", rbd)___		Map<String, Runnable> beans = bf.getBeansOfType(Runnable.class)__		assertEquals(1, beans.size())__	};tests,support,for,parameterized,code,factory,method,declarations,such,as,mockito,code,mock,method,which,has,the,following,signature,pre,code,public,static,t,t,mock,class,t,class,to,mock,pre,see,spr,9493,since,3,2;test,public,void,parameterized,factory,method,root,bean,definition,rbd,new,root,bean,definition,mockito,class,rbd,set,factory,method,name,mock,rbd,get,constructor,argument,values,add,generic,argument,value,runnable,class,default,listable,bean,factory,bf,new,default,listable,bean,factory,bf,register,bean,definition,mock,rbd,map,string,runnable,beans,bf,get,beans,of,type,runnable,class,assert,equals,1,beans,size
BeanFactoryGenericsTests -> @Test 	public void parameterizedFactoryMethod();1362408075;Tests support for parameterized {@code factory-method} declarations such_as Mockito {@code mock()} method which has the following signature.__<pre>{@code_public static <T> T mock(Class<T> classToMock)_}</pre>__See SPR-9493_@since 3.2;@Test_	public void parameterizedFactoryMethod() {_		RootBeanDefinition rbd = new RootBeanDefinition(Mockito.class)__		rbd.setFactoryMethodName("mock")__		rbd.getConstructorArgumentValues().addGenericArgumentValue(Runnable.class)___		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		bf.registerBeanDefinition("mock", rbd)___		Map<String, Runnable> beans = bf.getBeansOfType(Runnable.class)__		assertEquals(1, beans.size())__	};tests,support,for,parameterized,code,factory,method,declarations,such,as,mockito,code,mock,method,which,has,the,following,signature,pre,code,public,static,t,t,mock,class,t,class,to,mock,pre,see,spr,9493,since,3,2;test,public,void,parameterized,factory,method,root,bean,definition,rbd,new,root,bean,definition,mockito,class,rbd,set,factory,method,name,mock,rbd,get,constructor,argument,values,add,generic,argument,value,runnable,class,default,listable,bean,factory,bf,new,default,listable,bean,factory,bf,register,bean,definition,mock,rbd,map,string,runnable,beans,bf,get,beans,of,type,runnable,class,assert,equals,1,beans,size
BeanFactoryGenericsTests -> @Test 	public void parameterizedInstanceFactoryMethod();1372363092;Tests support for parameterized instance {@code factory-method} declarations such_as EasyMock's {@code IMocksControl.createMock()} method which has the following_signature.__<pre>_{@code_public <T> T createMock(Class<T> toMock)__</pre>__<p>_See SPR-10411__@since 4.0;@Test_	public void parameterizedInstanceFactoryMethod() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class)__		bf.registerBeanDefinition("mocksControl", rbd)___		rbd = new RootBeanDefinition()__		rbd.setFactoryBeanName("mocksControl")__		rbd.setFactoryMethodName("createMock")__		rbd.getConstructorArgumentValues().addGenericArgumentValue(Runnable.class)___		bf.registerBeanDefinition("mock", rbd)___		Map<String, Runnable> beans = bf.getBeansOfType(Runnable.class)__		assertEquals(1, beans.size())__	};tests,support,for,parameterized,instance,code,factory,method,declarations,such,as,easy,mock,s,code,imocks,control,create,mock,method,which,has,the,following,signature,pre,code,public,t,t,create,mock,class,t,to,mock,pre,p,see,spr,10411,since,4,0;test,public,void,parameterized,instance,factory,method,default,listable,bean,factory,bf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,mocks,control,class,bf,register,bean,definition,mocks,control,rbd,rbd,new,root,bean,definition,rbd,set,factory,bean,name,mocks,control,rbd,set,factory,method,name,create,mock,rbd,get,constructor,argument,values,add,generic,argument,value,runnable,class,bf,register,bean,definition,mock,rbd,map,string,runnable,beans,bf,get,beans,of,type,runnable,class,assert,equals,1,beans,size
BeanFactoryGenericsTests -> @Test 	public void parameterizedInstanceFactoryMethod();1382789137;Tests support for parameterized instance {@code factory-method} declarations such_as EasyMock's {@code IMocksControl.createMock()} method which has the following_signature._<pre>_{@code_public <T> T createMock(Class<T> toMock)__</pre>_<p>See SPR-10411;@Test_	public void parameterizedInstanceFactoryMethod() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class)__		bf.registerBeanDefinition("mocksControl", rbd)___		rbd = new RootBeanDefinition()__		rbd.setFactoryBeanName("mocksControl")__		rbd.setFactoryMethodName("createMock")__		rbd.getConstructorArgumentValues().addGenericArgumentValue(Runnable.class)___		bf.registerBeanDefinition("mock", rbd)___		Map<String, Runnable> beans = bf.getBeansOfType(Runnable.class)__		assertEquals(1, beans.size())__	};tests,support,for,parameterized,instance,code,factory,method,declarations,such,as,easy,mock,s,code,imocks,control,create,mock,method,which,has,the,following,signature,pre,code,public,t,t,create,mock,class,t,to,mock,pre,p,see,spr,10411;test,public,void,parameterized,instance,factory,method,default,listable,bean,factory,bf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,mocks,control,class,bf,register,bean,definition,mocks,control,rbd,rbd,new,root,bean,definition,rbd,set,factory,bean,name,mocks,control,rbd,set,factory,method,name,create,mock,rbd,get,constructor,argument,values,add,generic,argument,value,runnable,class,bf,register,bean,definition,mock,rbd,map,string,runnable,beans,bf,get,beans,of,type,runnable,class,assert,equals,1,beans,size
BeanFactoryGenericsTests -> @Test 	public void parameterizedInstanceFactoryMethod();1382826936;Tests support for parameterized instance {@code factory-method} declarations such_as EasyMock's {@code IMocksControl.createMock()} method which has the following_signature._<pre>_{@code_public <T> T createMock(Class<T> toMock)__</pre>_<p>See SPR-10411;@Test_	public void parameterizedInstanceFactoryMethod() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class)__		bf.registerBeanDefinition("mocksControl", rbd)___		rbd = new RootBeanDefinition()__		rbd.setFactoryBeanName("mocksControl")__		rbd.setFactoryMethodName("createMock")__		rbd.getConstructorArgumentValues().addGenericArgumentValue(Runnable.class)__		bf.registerBeanDefinition("mock", rbd)___		Map<String, Runnable> beans = bf.getBeansOfType(Runnable.class)__		assertEquals(1, beans.size())__	};tests,support,for,parameterized,instance,code,factory,method,declarations,such,as,easy,mock,s,code,imocks,control,create,mock,method,which,has,the,following,signature,pre,code,public,t,t,create,mock,class,t,to,mock,pre,p,see,spr,10411;test,public,void,parameterized,instance,factory,method,default,listable,bean,factory,bf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,mocks,control,class,bf,register,bean,definition,mocks,control,rbd,rbd,new,root,bean,definition,rbd,set,factory,bean,name,mocks,control,rbd,set,factory,method,name,create,mock,rbd,get,constructor,argument,values,add,generic,argument,value,runnable,class,bf,register,bean,definition,mock,rbd,map,string,runnable,beans,bf,get,beans,of,type,runnable,class,assert,equals,1,beans,size
BeanFactoryGenericsTests -> @Test 	public void parameterizedInstanceFactoryMethod();1382829715;Tests support for parameterized instance {@code factory-method} declarations such_as EasyMock's {@code IMocksControl.createMock()} method which has the following_signature._<pre>_{@code_public <T> T createMock(Class<T> toMock)__</pre>_<p>See SPR-10411;@Test_	public void parameterizedInstanceFactoryMethod() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class)__		bf.registerBeanDefinition("mocksControl", rbd)___		rbd = new RootBeanDefinition()__		rbd.setFactoryBeanName("mocksControl")__		rbd.setFactoryMethodName("createMock")__		rbd.getConstructorArgumentValues().addGenericArgumentValue(Runnable.class)__		bf.registerBeanDefinition("mock", rbd)___		Map<String, Runnable> beans = bf.getBeansOfType(Runnable.class)__		assertEquals(1, beans.size())__	};tests,support,for,parameterized,instance,code,factory,method,declarations,such,as,easy,mock,s,code,imocks,control,create,mock,method,which,has,the,following,signature,pre,code,public,t,t,create,mock,class,t,to,mock,pre,p,see,spr,10411;test,public,void,parameterized,instance,factory,method,default,listable,bean,factory,bf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,mocks,control,class,bf,register,bean,definition,mocks,control,rbd,rbd,new,root,bean,definition,rbd,set,factory,bean,name,mocks,control,rbd,set,factory,method,name,create,mock,rbd,get,constructor,argument,values,add,generic,argument,value,runnable,class,bf,register,bean,definition,mock,rbd,map,string,runnable,beans,bf,get,beans,of,type,runnable,class,assert,equals,1,beans,size
BeanFactoryGenericsTests -> @Test 	public void parameterizedInstanceFactoryMethod();1382905564;Tests support for parameterized instance {@code factory-method} declarations such_as EasyMock's {@code IMocksControl.createMock()} method which has the following_signature._<pre>_{@code_public <T> T createMock(Class<T> toMock)__</pre>_<p>See SPR-10411;@Test_	public void parameterizedInstanceFactoryMethod() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class)__		bf.registerBeanDefinition("mocksControl", rbd)___		rbd = new RootBeanDefinition()__		rbd.setFactoryBeanName("mocksControl")__		rbd.setFactoryMethodName("createMock")__		rbd.getConstructorArgumentValues().addGenericArgumentValue(Runnable.class)__		bf.registerBeanDefinition("mock", rbd)___		Map<String, Runnable> beans = bf.getBeansOfType(Runnable.class)__		assertEquals(1, beans.size())__	};tests,support,for,parameterized,instance,code,factory,method,declarations,such,as,easy,mock,s,code,imocks,control,create,mock,method,which,has,the,following,signature,pre,code,public,t,t,create,mock,class,t,to,mock,pre,p,see,spr,10411;test,public,void,parameterized,instance,factory,method,default,listable,bean,factory,bf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,mocks,control,class,bf,register,bean,definition,mocks,control,rbd,rbd,new,root,bean,definition,rbd,set,factory,bean,name,mocks,control,rbd,set,factory,method,name,create,mock,rbd,get,constructor,argument,values,add,generic,argument,value,runnable,class,bf,register,bean,definition,mock,rbd,map,string,runnable,beans,bf,get,beans,of,type,runnable,class,assert,equals,1,beans,size
BeanFactoryGenericsTests -> @Test 	public void parameterizedInstanceFactoryMethod();1382963145;Tests support for parameterized instance {@code factory-method} declarations such_as EasyMock's {@code IMocksControl.createMock()} method which has the following_signature._<pre>_{@code_public <T> T createMock(Class<T> toMock)__</pre>_<p>See SPR-10411;@Test_	public void parameterizedInstanceFactoryMethod() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class)__		bf.registerBeanDefinition("mocksControl", rbd)___		rbd = new RootBeanDefinition()__		rbd.setFactoryBeanName("mocksControl")__		rbd.setFactoryMethodName("createMock")__		rbd.getConstructorArgumentValues().addGenericArgumentValue(Runnable.class)__		bf.registerBeanDefinition("mock", rbd)___		Map<String, Runnable> beans = bf.getBeansOfType(Runnable.class)__		assertEquals(1, beans.size())__	};tests,support,for,parameterized,instance,code,factory,method,declarations,such,as,easy,mock,s,code,imocks,control,create,mock,method,which,has,the,following,signature,pre,code,public,t,t,create,mock,class,t,to,mock,pre,p,see,spr,10411;test,public,void,parameterized,instance,factory,method,default,listable,bean,factory,bf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,mocks,control,class,bf,register,bean,definition,mocks,control,rbd,rbd,new,root,bean,definition,rbd,set,factory,bean,name,mocks,control,rbd,set,factory,method,name,create,mock,rbd,get,constructor,argument,values,add,generic,argument,value,runnable,class,bf,register,bean,definition,mock,rbd,map,string,runnable,beans,bf,get,beans,of,type,runnable,class,assert,equals,1,beans,size
BeanFactoryGenericsTests -> @Test 	public void parameterizedInstanceFactoryMethod();1387554265;Tests support for parameterized instance {@code factory-method} declarations such_as EasyMock's {@code IMocksControl.createMock()} method which has the following_signature._<pre>_{@code_public <T> T createMock(Class<T> toMock)__</pre>_<p>See SPR-10411;@Test_	public void parameterizedInstanceFactoryMethod() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class)__		bf.registerBeanDefinition("mocksControl", rbd)___		rbd = new RootBeanDefinition()__		rbd.setFactoryBeanName("mocksControl")__		rbd.setFactoryMethodName("createMock")__		rbd.getConstructorArgumentValues().addGenericArgumentValue(Runnable.class)__		bf.registerBeanDefinition("mock", rbd)___		Map<String, Runnable> beans = bf.getBeansOfType(Runnable.class)__		assertEquals(1, beans.size())__	};tests,support,for,parameterized,instance,code,factory,method,declarations,such,as,easy,mock,s,code,imocks,control,create,mock,method,which,has,the,following,signature,pre,code,public,t,t,create,mock,class,t,to,mock,pre,p,see,spr,10411;test,public,void,parameterized,instance,factory,method,default,listable,bean,factory,bf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,mocks,control,class,bf,register,bean,definition,mocks,control,rbd,rbd,new,root,bean,definition,rbd,set,factory,bean,name,mocks,control,rbd,set,factory,method,name,create,mock,rbd,get,constructor,argument,values,add,generic,argument,value,runnable,class,bf,register,bean,definition,mock,rbd,map,string,runnable,beans,bf,get,beans,of,type,runnable,class,assert,equals,1,beans,size
BeanFactoryGenericsTests -> @Test 	public void parameterizedInstanceFactoryMethod();1426716313;Tests support for parameterized instance {@code factory-method} declarations such_as EasyMock's {@code IMocksControl.createMock()} method which has the following_signature._<pre>_{@code_public <T> T createMock(Class<T> toMock)__</pre>_<p>See SPR-10411;@Test_	public void parameterizedInstanceFactoryMethod() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class)__		bf.registerBeanDefinition("mocksControl", rbd)___		rbd = new RootBeanDefinition()__		rbd.setFactoryBeanName("mocksControl")__		rbd.setFactoryMethodName("createMock")__		rbd.getConstructorArgumentValues().addGenericArgumentValue(Runnable.class)__		bf.registerBeanDefinition("mock", rbd)___		Map<String, Runnable> beans = bf.getBeansOfType(Runnable.class)__		assertEquals(1, beans.size())__	};tests,support,for,parameterized,instance,code,factory,method,declarations,such,as,easy,mock,s,code,imocks,control,create,mock,method,which,has,the,following,signature,pre,code,public,t,t,create,mock,class,t,to,mock,pre,p,see,spr,10411;test,public,void,parameterized,instance,factory,method,default,listable,bean,factory,bf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,mocks,control,class,bf,register,bean,definition,mocks,control,rbd,rbd,new,root,bean,definition,rbd,set,factory,bean,name,mocks,control,rbd,set,factory,method,name,create,mock,rbd,get,constructor,argument,values,add,generic,argument,value,runnable,class,bf,register,bean,definition,mock,rbd,map,string,runnable,beans,bf,get,beans,of,type,runnable,class,assert,equals,1,beans,size
BeanFactoryGenericsTests -> @Test 	public void parameterizedInstanceFactoryMethod();1467730834;Tests support for parameterized instance {@code factory-method} declarations such_as EasyMock's {@code IMocksControl.createMock()} method which has the following_signature._<pre>_{@code_public <T> T createMock(Class<T> toMock)__</pre>_<p>See SPR-10411;@Test_	public void parameterizedInstanceFactoryMethod() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class)__		bf.registerBeanDefinition("mocksControl", rbd)___		rbd = new RootBeanDefinition()__		rbd.setFactoryBeanName("mocksControl")__		rbd.setFactoryMethodName("createMock")__		rbd.getConstructorArgumentValues().addGenericArgumentValue(Runnable.class)__		bf.registerBeanDefinition("mock", rbd)___		Map<String, Runnable> beans = bf.getBeansOfType(Runnable.class)__		assertEquals(1, beans.size())__	};tests,support,for,parameterized,instance,code,factory,method,declarations,such,as,easy,mock,s,code,imocks,control,create,mock,method,which,has,the,following,signature,pre,code,public,t,t,create,mock,class,t,to,mock,pre,p,see,spr,10411;test,public,void,parameterized,instance,factory,method,default,listable,bean,factory,bf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,mocks,control,class,bf,register,bean,definition,mocks,control,rbd,rbd,new,root,bean,definition,rbd,set,factory,bean,name,mocks,control,rbd,set,factory,method,name,create,mock,rbd,get,constructor,argument,values,add,generic,argument,value,runnable,class,bf,register,bean,definition,mock,rbd,map,string,runnable,beans,bf,get,beans,of,type,runnable,class,assert,equals,1,beans,size
BeanFactoryGenericsTests -> @Test 	public void parameterizedInstanceFactoryMethod();1523538881;Tests support for parameterized instance {@code factory-method} declarations such_as EasyMock's {@code IMocksControl.createMock()} method which has the following_signature._<pre>_{@code_public <T> T createMock(Class<T> toMock)__</pre>_<p>See SPR-10411;@Test_	public void parameterizedInstanceFactoryMethod() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class)__		bf.registerBeanDefinition("mocksControl", rbd)___		rbd = new RootBeanDefinition()__		rbd.setFactoryBeanName("mocksControl")__		rbd.setFactoryMethodName("createMock")__		rbd.getConstructorArgumentValues().addGenericArgumentValue(Runnable.class)__		bf.registerBeanDefinition("mock", rbd)___		assertTrue(bf.isTypeMatch("mock", Runnable.class))__		assertTrue(bf.isTypeMatch("mock", Runnable.class))__		assertEquals(Runnable.class, bf.getType("mock"))__		assertEquals(Runnable.class, bf.getType("mock"))__		Map<String, Runnable> beans = bf.getBeansOfType(Runnable.class)__		assertEquals(1, beans.size())__	};tests,support,for,parameterized,instance,code,factory,method,declarations,such,as,easy,mock,s,code,imocks,control,create,mock,method,which,has,the,following,signature,pre,code,public,t,t,create,mock,class,t,to,mock,pre,p,see,spr,10411;test,public,void,parameterized,instance,factory,method,default,listable,bean,factory,bf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,mocks,control,class,bf,register,bean,definition,mocks,control,rbd,rbd,new,root,bean,definition,rbd,set,factory,bean,name,mocks,control,rbd,set,factory,method,name,create,mock,rbd,get,constructor,argument,values,add,generic,argument,value,runnable,class,bf,register,bean,definition,mock,rbd,assert,true,bf,is,type,match,mock,runnable,class,assert,true,bf,is,type,match,mock,runnable,class,assert,equals,runnable,class,bf,get,type,mock,assert,equals,runnable,class,bf,get,type,mock,map,string,runnable,beans,bf,get,beans,of,type,runnable,class,assert,equals,1,beans,size
BeanFactoryGenericsTests -> @Test 	public void parameterizedInstanceFactoryMethod();1532385723;Tests support for parameterized instance {@code factory-method} declarations such_as EasyMock's {@code IMocksControl.createMock()} method which has the following_signature._<pre>_{@code_public <T> T createMock(Class<T> toMock)__</pre>_<p>See SPR-10411;@Test_	public void parameterizedInstanceFactoryMethod() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class)__		bf.registerBeanDefinition("mocksControl", rbd)___		rbd = new RootBeanDefinition()__		rbd.setFactoryBeanName("mocksControl")__		rbd.setFactoryMethodName("createMock")__		rbd.getConstructorArgumentValues().addGenericArgumentValue(Runnable.class)__		bf.registerBeanDefinition("mock", rbd)___		assertTrue(bf.isTypeMatch("mock", Runnable.class))__		assertTrue(bf.isTypeMatch("mock", Runnable.class))__		assertEquals(Runnable.class, bf.getType("mock"))__		assertEquals(Runnable.class, bf.getType("mock"))__		Map<String, Runnable> beans = bf.getBeansOfType(Runnable.class)__		assertEquals(1, beans.size())__	};tests,support,for,parameterized,instance,code,factory,method,declarations,such,as,easy,mock,s,code,imocks,control,create,mock,method,which,has,the,following,signature,pre,code,public,t,t,create,mock,class,t,to,mock,pre,p,see,spr,10411;test,public,void,parameterized,instance,factory,method,default,listable,bean,factory,bf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,mocks,control,class,bf,register,bean,definition,mocks,control,rbd,rbd,new,root,bean,definition,rbd,set,factory,bean,name,mocks,control,rbd,set,factory,method,name,create,mock,rbd,get,constructor,argument,values,add,generic,argument,value,runnable,class,bf,register,bean,definition,mock,rbd,assert,true,bf,is,type,match,mock,runnable,class,assert,true,bf,is,type,match,mock,runnable,class,assert,equals,runnable,class,bf,get,type,mock,assert,equals,runnable,class,bf,get,type,mock,map,string,runnable,beans,bf,get,beans,of,type,runnable,class,assert,equals,1,beans,size
BeanFactoryGenericsTests -> @Test 	public void parameterizedInstanceFactoryMethod();1536855799;Tests support for parameterized instance {@code factory-method} declarations such_as EasyMock's {@code IMocksControl.createMock()} method which has the following_signature._<pre>_{@code_public <T> T createMock(Class<T> toMock)__</pre>_<p>See SPR-10411;@Test_	public void parameterizedInstanceFactoryMethod() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class)__		bf.registerBeanDefinition("mocksControl", rbd)___		rbd = new RootBeanDefinition()__		rbd.setFactoryBeanName("mocksControl")__		rbd.setFactoryMethodName("createMock")__		rbd.getConstructorArgumentValues().addGenericArgumentValue(Runnable.class)__		bf.registerBeanDefinition("mock", rbd)___		assertTrue(bf.isTypeMatch("mock", Runnable.class))__		assertTrue(bf.isTypeMatch("mock", Runnable.class))__		assertEquals(Runnable.class, bf.getType("mock"))__		assertEquals(Runnable.class, bf.getType("mock"))__		Map<String, Runnable> beans = bf.getBeansOfType(Runnable.class)__		assertEquals(1, beans.size())__	};tests,support,for,parameterized,instance,code,factory,method,declarations,such,as,easy,mock,s,code,imocks,control,create,mock,method,which,has,the,following,signature,pre,code,public,t,t,create,mock,class,t,to,mock,pre,p,see,spr,10411;test,public,void,parameterized,instance,factory,method,default,listable,bean,factory,bf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,mocks,control,class,bf,register,bean,definition,mocks,control,rbd,rbd,new,root,bean,definition,rbd,set,factory,bean,name,mocks,control,rbd,set,factory,method,name,create,mock,rbd,get,constructor,argument,values,add,generic,argument,value,runnable,class,bf,register,bean,definition,mock,rbd,assert,true,bf,is,type,match,mock,runnable,class,assert,true,bf,is,type,match,mock,runnable,class,assert,equals,runnable,class,bf,get,type,mock,assert,equals,runnable,class,bf,get,type,mock,map,string,runnable,beans,bf,get,beans,of,type,runnable,class,assert,equals,1,beans,size
BeanFactoryGenericsTests -> @Test 	public void parameterizedInstanceFactoryMethod();1536962185;Tests support for parameterized instance {@code factory-method} declarations such_as EasyMock's {@code IMocksControl.createMock()} method which has the following_signature._<pre>_{@code_public <T> T createMock(Class<T> toMock)__</pre>_<p>See SPR-10411;@Test_	public void parameterizedInstanceFactoryMethod() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class)__		bf.registerBeanDefinition("mocksControl", rbd)___		rbd = new RootBeanDefinition()__		rbd.setFactoryBeanName("mocksControl")__		rbd.setFactoryMethodName("createMock")__		rbd.getConstructorArgumentValues().addGenericArgumentValue(Runnable.class)__		bf.registerBeanDefinition("mock", rbd)___		assertTrue(bf.isTypeMatch("mock", Runnable.class))__		assertTrue(bf.isTypeMatch("mock", Runnable.class))__		assertEquals(Runnable.class, bf.getType("mock"))__		assertEquals(Runnable.class, bf.getType("mock"))__		Map<String, Runnable> beans = bf.getBeansOfType(Runnable.class)__		assertEquals(1, beans.size())__	};tests,support,for,parameterized,instance,code,factory,method,declarations,such,as,easy,mock,s,code,imocks,control,create,mock,method,which,has,the,following,signature,pre,code,public,t,t,create,mock,class,t,to,mock,pre,p,see,spr,10411;test,public,void,parameterized,instance,factory,method,default,listable,bean,factory,bf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,mocks,control,class,bf,register,bean,definition,mocks,control,rbd,rbd,new,root,bean,definition,rbd,set,factory,bean,name,mocks,control,rbd,set,factory,method,name,create,mock,rbd,get,constructor,argument,values,add,generic,argument,value,runnable,class,bf,register,bean,definition,mock,rbd,assert,true,bf,is,type,match,mock,runnable,class,assert,true,bf,is,type,match,mock,runnable,class,assert,equals,runnable,class,bf,get,type,mock,assert,equals,runnable,class,bf,get,type,mock,map,string,runnable,beans,bf,get,beans,of,type,runnable,class,assert,equals,1,beans,size
BeanFactoryGenericsTests -> @Test 	public void parameterizedInstanceFactoryMethod();1537435902;Tests support for parameterized instance {@code factory-method} declarations such_as EasyMock's {@code IMocksControl.createMock()} method which has the following_signature._<pre>_{@code_public <T> T createMock(Class<T> toMock)__</pre>_<p>See SPR-10411;@Test_	public void parameterizedInstanceFactoryMethod() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()___		RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class)__		bf.registerBeanDefinition("mocksControl", rbd)___		rbd = new RootBeanDefinition()__		rbd.setFactoryBeanName("mocksControl")__		rbd.setFactoryMethodName("createMock")__		rbd.getConstructorArgumentValues().addGenericArgumentValue(Runnable.class)__		bf.registerBeanDefinition("mock", rbd)___		assertTrue(bf.isTypeMatch("mock", Runnable.class))__		assertTrue(bf.isTypeMatch("mock", Runnable.class))__		assertEquals(Runnable.class, bf.getType("mock"))__		assertEquals(Runnable.class, bf.getType("mock"))__		Map<String, Runnable> beans = bf.getBeansOfType(Runnable.class)__		assertEquals(1, beans.size())__	};tests,support,for,parameterized,instance,code,factory,method,declarations,such,as,easy,mock,s,code,imocks,control,create,mock,method,which,has,the,following,signature,pre,code,public,t,t,create,mock,class,t,to,mock,pre,p,see,spr,10411;test,public,void,parameterized,instance,factory,method,default,listable,bean,factory,bf,new,default,listable,bean,factory,root,bean,definition,rbd,new,root,bean,definition,mocks,control,class,bf,register,bean,definition,mocks,control,rbd,rbd,new,root,bean,definition,rbd,set,factory,bean,name,mocks,control,rbd,set,factory,method,name,create,mock,rbd,get,constructor,argument,values,add,generic,argument,value,runnable,class,bf,register,bean,definition,mock,rbd,assert,true,bf,is,type,match,mock,runnable,class,assert,true,bf,is,type,match,mock,runnable,class,assert,equals,runnable,class,bf,get,type,mock,assert,equals,runnable,class,bf,get,type,mock,map,string,runnable,beans,bf,get,beans,of,type,runnable,class,assert,equals,1,beans,size
BeanFactoryGenericsTests -> @Test 	public void parameterizedStaticFactoryMethod();1372363092;Tests support for parameterized static {@code factory-method} declarations such as_Mockito's {@code mock()} method which has the following signature.__<pre>_{@code_public static <T> T mock(Class<T> classToMock)__</pre>__<p>_See SPR-9493__@since 3.2;@Test_	public void parameterizedStaticFactoryMethod() {_		RootBeanDefinition rbd = new RootBeanDefinition(Mockito.class)__		rbd.setFactoryMethodName("mock")__		rbd.getConstructorArgumentValues().addGenericArgumentValue(Runnable.class)___		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		bf.registerBeanDefinition("mock", rbd)___		Map<String, Runnable> beans = bf.getBeansOfType(Runnable.class)__		assertEquals(1, beans.size())__	};tests,support,for,parameterized,static,code,factory,method,declarations,such,as,mockito,s,code,mock,method,which,has,the,following,signature,pre,code,public,static,t,t,mock,class,t,class,to,mock,pre,p,see,spr,9493,since,3,2;test,public,void,parameterized,static,factory,method,root,bean,definition,rbd,new,root,bean,definition,mockito,class,rbd,set,factory,method,name,mock,rbd,get,constructor,argument,values,add,generic,argument,value,runnable,class,default,listable,bean,factory,bf,new,default,listable,bean,factory,bf,register,bean,definition,mock,rbd,map,string,runnable,beans,bf,get,beans,of,type,runnable,class,assert,equals,1,beans,size
BeanFactoryGenericsTests -> @Test 	public void parameterizedStaticFactoryMethod();1382789137;Tests support for parameterized static {@code factory-method} declarations such as_Mockito's {@code mock()} method which has the following signature.__<pre>_{@code_public static <T> T mock(Class<T> classToMock)__</pre>__<p>_See SPR-9493__@since 3.2;@Test_	public void parameterizedStaticFactoryMethod() {_		RootBeanDefinition rbd = new RootBeanDefinition(Mockito.class)__		rbd.setFactoryMethodName("mock")__		rbd.getConstructorArgumentValues().addGenericArgumentValue(Runnable.class)___		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		bf.registerBeanDefinition("mock", rbd)___		Map<String, Runnable> beans = bf.getBeansOfType(Runnable.class)__		assertEquals(1, beans.size())__	};tests,support,for,parameterized,static,code,factory,method,declarations,such,as,mockito,s,code,mock,method,which,has,the,following,signature,pre,code,public,static,t,t,mock,class,t,class,to,mock,pre,p,see,spr,9493,since,3,2;test,public,void,parameterized,static,factory,method,root,bean,definition,rbd,new,root,bean,definition,mockito,class,rbd,set,factory,method,name,mock,rbd,get,constructor,argument,values,add,generic,argument,value,runnable,class,default,listable,bean,factory,bf,new,default,listable,bean,factory,bf,register,bean,definition,mock,rbd,map,string,runnable,beans,bf,get,beans,of,type,runnable,class,assert,equals,1,beans,size
BeanFactoryGenericsTests -> @Test 	public void parameterizedStaticFactoryMethod();1382826936;Tests support for parameterized static {@code factory-method} declarations such as_Mockito's {@code mock()} method which has the following signature.__<pre>_{@code_public static <T> T mock(Class<T> classToMock)__</pre>__<p>_See SPR-9493__@since 3.2;@Test_	public void parameterizedStaticFactoryMethod() {_		RootBeanDefinition rbd = new RootBeanDefinition(Mockito.class)__		rbd.setFactoryMethodName("mock")__		rbd.getConstructorArgumentValues().addGenericArgumentValue(Runnable.class)___		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		bf.registerBeanDefinition("mock", rbd)___		Map<String, Runnable> beans = bf.getBeansOfType(Runnable.class)__		assertEquals(1, beans.size())__	};tests,support,for,parameterized,static,code,factory,method,declarations,such,as,mockito,s,code,mock,method,which,has,the,following,signature,pre,code,public,static,t,t,mock,class,t,class,to,mock,pre,p,see,spr,9493,since,3,2;test,public,void,parameterized,static,factory,method,root,bean,definition,rbd,new,root,bean,definition,mockito,class,rbd,set,factory,method,name,mock,rbd,get,constructor,argument,values,add,generic,argument,value,runnable,class,default,listable,bean,factory,bf,new,default,listable,bean,factory,bf,register,bean,definition,mock,rbd,map,string,runnable,beans,bf,get,beans,of,type,runnable,class,assert,equals,1,beans,size
BeanFactoryGenericsTests -> @Test 	public void parameterizedStaticFactoryMethod();1382829715;Tests support for parameterized static {@code factory-method} declarations such as_Mockito's {@code mock()} method which has the following signature._<pre>_{@code_public static <T> T mock(Class<T> classToMock)__</pre>_<p>See SPR-9493;@Test_	public void parameterizedStaticFactoryMethod() {_		RootBeanDefinition rbd = new RootBeanDefinition(Mockito.class)__		rbd.setFactoryMethodName("mock")__		rbd.getConstructorArgumentValues().addGenericArgumentValue(Runnable.class)___		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		bf.registerBeanDefinition("mock", rbd)___		Map<String, Runnable> beans = bf.getBeansOfType(Runnable.class)__		assertEquals(1, beans.size())__	};tests,support,for,parameterized,static,code,factory,method,declarations,such,as,mockito,s,code,mock,method,which,has,the,following,signature,pre,code,public,static,t,t,mock,class,t,class,to,mock,pre,p,see,spr,9493;test,public,void,parameterized,static,factory,method,root,bean,definition,rbd,new,root,bean,definition,mockito,class,rbd,set,factory,method,name,mock,rbd,get,constructor,argument,values,add,generic,argument,value,runnable,class,default,listable,bean,factory,bf,new,default,listable,bean,factory,bf,register,bean,definition,mock,rbd,map,string,runnable,beans,bf,get,beans,of,type,runnable,class,assert,equals,1,beans,size
BeanFactoryGenericsTests -> @Test 	public void parameterizedStaticFactoryMethod();1382905564;Tests support for parameterized static {@code factory-method} declarations such as_Mockito's {@code mock()} method which has the following signature._<pre>_{@code_public static <T> T mock(Class<T> classToMock)__</pre>_<p>See SPR-9493;@Test_	public void parameterizedStaticFactoryMethod() {_		RootBeanDefinition rbd = new RootBeanDefinition(Mockito.class)__		rbd.setFactoryMethodName("mock")__		rbd.getConstructorArgumentValues().addGenericArgumentValue(Runnable.class)___		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		bf.registerBeanDefinition("mock", rbd)___		Map<String, Runnable> beans = bf.getBeansOfType(Runnable.class)__		assertEquals(1, beans.size())__	};tests,support,for,parameterized,static,code,factory,method,declarations,such,as,mockito,s,code,mock,method,which,has,the,following,signature,pre,code,public,static,t,t,mock,class,t,class,to,mock,pre,p,see,spr,9493;test,public,void,parameterized,static,factory,method,root,bean,definition,rbd,new,root,bean,definition,mockito,class,rbd,set,factory,method,name,mock,rbd,get,constructor,argument,values,add,generic,argument,value,runnable,class,default,listable,bean,factory,bf,new,default,listable,bean,factory,bf,register,bean,definition,mock,rbd,map,string,runnable,beans,bf,get,beans,of,type,runnable,class,assert,equals,1,beans,size
BeanFactoryGenericsTests -> @Test 	public void parameterizedStaticFactoryMethod();1382963145;Tests support for parameterized static {@code factory-method} declarations such as_Mockito's {@code mock()} method which has the following signature._<pre>_{@code_public static <T> T mock(Class<T> classToMock)__</pre>_<p>See SPR-9493;@Test_	public void parameterizedStaticFactoryMethod() {_		RootBeanDefinition rbd = new RootBeanDefinition(Mockito.class)__		rbd.setFactoryMethodName("mock")__		rbd.getConstructorArgumentValues().addGenericArgumentValue(Runnable.class)___		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		bf.registerBeanDefinition("mock", rbd)___		Map<String, Runnable> beans = bf.getBeansOfType(Runnable.class)__		assertEquals(1, beans.size())__	};tests,support,for,parameterized,static,code,factory,method,declarations,such,as,mockito,s,code,mock,method,which,has,the,following,signature,pre,code,public,static,t,t,mock,class,t,class,to,mock,pre,p,see,spr,9493;test,public,void,parameterized,static,factory,method,root,bean,definition,rbd,new,root,bean,definition,mockito,class,rbd,set,factory,method,name,mock,rbd,get,constructor,argument,values,add,generic,argument,value,runnable,class,default,listable,bean,factory,bf,new,default,listable,bean,factory,bf,register,bean,definition,mock,rbd,map,string,runnable,beans,bf,get,beans,of,type,runnable,class,assert,equals,1,beans,size
BeanFactoryGenericsTests -> @Test 	public void parameterizedStaticFactoryMethod();1387554265;Tests support for parameterized static {@code factory-method} declarations such as_Mockito's {@code mock()} method which has the following signature._<pre>_{@code_public static <T> T mock(Class<T> classToMock)__</pre>_<p>See SPR-9493;@Test_	public void parameterizedStaticFactoryMethod() {_		RootBeanDefinition rbd = new RootBeanDefinition(Mockito.class)__		rbd.setFactoryMethodName("mock")__		rbd.getConstructorArgumentValues().addGenericArgumentValue(Runnable.class)___		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		bf.registerBeanDefinition("mock", rbd)___		Map<String, Runnable> beans = bf.getBeansOfType(Runnable.class)__		assertEquals(1, beans.size())__	};tests,support,for,parameterized,static,code,factory,method,declarations,such,as,mockito,s,code,mock,method,which,has,the,following,signature,pre,code,public,static,t,t,mock,class,t,class,to,mock,pre,p,see,spr,9493;test,public,void,parameterized,static,factory,method,root,bean,definition,rbd,new,root,bean,definition,mockito,class,rbd,set,factory,method,name,mock,rbd,get,constructor,argument,values,add,generic,argument,value,runnable,class,default,listable,bean,factory,bf,new,default,listable,bean,factory,bf,register,bean,definition,mock,rbd,map,string,runnable,beans,bf,get,beans,of,type,runnable,class,assert,equals,1,beans,size
BeanFactoryGenericsTests -> @Test 	public void parameterizedStaticFactoryMethod();1426716313;Tests support for parameterized static {@code factory-method} declarations such as_Mockito's {@code mock()} method which has the following signature._<pre>_{@code_public static <T> T mock(Class<T> classToMock)__</pre>_<p>See SPR-9493;@Test_	public void parameterizedStaticFactoryMethod() {_		RootBeanDefinition rbd = new RootBeanDefinition(Mockito.class)__		rbd.setFactoryMethodName("mock")__		rbd.getConstructorArgumentValues().addGenericArgumentValue(Runnable.class)___		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		bf.registerBeanDefinition("mock", rbd)___		Map<String, Runnable> beans = bf.getBeansOfType(Runnable.class)__		assertEquals(1, beans.size())__	};tests,support,for,parameterized,static,code,factory,method,declarations,such,as,mockito,s,code,mock,method,which,has,the,following,signature,pre,code,public,static,t,t,mock,class,t,class,to,mock,pre,p,see,spr,9493;test,public,void,parameterized,static,factory,method,root,bean,definition,rbd,new,root,bean,definition,mockito,class,rbd,set,factory,method,name,mock,rbd,get,constructor,argument,values,add,generic,argument,value,runnable,class,default,listable,bean,factory,bf,new,default,listable,bean,factory,bf,register,bean,definition,mock,rbd,map,string,runnable,beans,bf,get,beans,of,type,runnable,class,assert,equals,1,beans,size
BeanFactoryGenericsTests -> @Test 	public void parameterizedStaticFactoryMethod();1467730834;Tests support for parameterized static {@code factory-method} declarations such as_Mockito's {@code mock()} method which has the following signature._<pre>_{@code_public static <T> T mock(Class<T> classToMock)__</pre>_<p>See SPR-9493;@Test_	public void parameterizedStaticFactoryMethod() {_		RootBeanDefinition rbd = new RootBeanDefinition(Mockito.class)__		rbd.setFactoryMethodName("mock")__		rbd.getConstructorArgumentValues().addGenericArgumentValue(Runnable.class)___		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		bf.registerBeanDefinition("mock", rbd)___		Map<String, Runnable> beans = bf.getBeansOfType(Runnable.class)__		assertEquals(1, beans.size())__	};tests,support,for,parameterized,static,code,factory,method,declarations,such,as,mockito,s,code,mock,method,which,has,the,following,signature,pre,code,public,static,t,t,mock,class,t,class,to,mock,pre,p,see,spr,9493;test,public,void,parameterized,static,factory,method,root,bean,definition,rbd,new,root,bean,definition,mockito,class,rbd,set,factory,method,name,mock,rbd,get,constructor,argument,values,add,generic,argument,value,runnable,class,default,listable,bean,factory,bf,new,default,listable,bean,factory,bf,register,bean,definition,mock,rbd,map,string,runnable,beans,bf,get,beans,of,type,runnable,class,assert,equals,1,beans,size
BeanFactoryGenericsTests -> @Test 	public void parameterizedStaticFactoryMethod();1523538881;Tests support for parameterized static {@code factory-method} declarations such as_Mockito's {@code mock()} method which has the following signature._<pre>_{@code_public static <T> T mock(Class<T> classToMock)__</pre>_<p>See SPR-9493;@Test_	public void parameterizedStaticFactoryMethod() {_		RootBeanDefinition rbd = new RootBeanDefinition(Mockito.class)__		rbd.setFactoryMethodName("mock")__		rbd.getConstructorArgumentValues().addGenericArgumentValue(Runnable.class)___		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		bf.registerBeanDefinition("mock", rbd)___		assertEquals(Runnable.class, bf.getType("mock"))__		assertEquals(Runnable.class, bf.getType("mock"))__		Map<String, Runnable> beans = bf.getBeansOfType(Runnable.class)__		assertEquals(1, beans.size())__	};tests,support,for,parameterized,static,code,factory,method,declarations,such,as,mockito,s,code,mock,method,which,has,the,following,signature,pre,code,public,static,t,t,mock,class,t,class,to,mock,pre,p,see,spr,9493;test,public,void,parameterized,static,factory,method,root,bean,definition,rbd,new,root,bean,definition,mockito,class,rbd,set,factory,method,name,mock,rbd,get,constructor,argument,values,add,generic,argument,value,runnable,class,default,listable,bean,factory,bf,new,default,listable,bean,factory,bf,register,bean,definition,mock,rbd,assert,equals,runnable,class,bf,get,type,mock,assert,equals,runnable,class,bf,get,type,mock,map,string,runnable,beans,bf,get,beans,of,type,runnable,class,assert,equals,1,beans,size
BeanFactoryGenericsTests -> @Test 	public void parameterizedStaticFactoryMethod();1532385723;Tests support for parameterized static {@code factory-method} declarations such as_Mockito's {@code mock()} method which has the following signature._<pre>_{@code_public static <T> T mock(Class<T> classToMock)__</pre>_<p>See SPR-9493;@Test_	public void parameterizedStaticFactoryMethod() {_		RootBeanDefinition rbd = new RootBeanDefinition(Mockito.class)__		rbd.setFactoryMethodName("mock")__		rbd.getConstructorArgumentValues().addGenericArgumentValue(Runnable.class)___		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		bf.registerBeanDefinition("mock", rbd)___		assertEquals(Runnable.class, bf.getType("mock"))__		assertEquals(Runnable.class, bf.getType("mock"))__		Map<String, Runnable> beans = bf.getBeansOfType(Runnable.class)__		assertEquals(1, beans.size())__	};tests,support,for,parameterized,static,code,factory,method,declarations,such,as,mockito,s,code,mock,method,which,has,the,following,signature,pre,code,public,static,t,t,mock,class,t,class,to,mock,pre,p,see,spr,9493;test,public,void,parameterized,static,factory,method,root,bean,definition,rbd,new,root,bean,definition,mockito,class,rbd,set,factory,method,name,mock,rbd,get,constructor,argument,values,add,generic,argument,value,runnable,class,default,listable,bean,factory,bf,new,default,listable,bean,factory,bf,register,bean,definition,mock,rbd,assert,equals,runnable,class,bf,get,type,mock,assert,equals,runnable,class,bf,get,type,mock,map,string,runnable,beans,bf,get,beans,of,type,runnable,class,assert,equals,1,beans,size
BeanFactoryGenericsTests -> @Test 	public void parameterizedStaticFactoryMethod();1536855799;Tests support for parameterized static {@code factory-method} declarations such as_Mockito's {@code mock()} method which has the following signature._<pre>_{@code_public static <T> T mock(Class<T> classToMock)__</pre>_<p>See SPR-9493;@Test_	public void parameterizedStaticFactoryMethod() {_		RootBeanDefinition rbd = new RootBeanDefinition(Mockito.class)__		rbd.setFactoryMethodName("mock")__		rbd.getConstructorArgumentValues().addGenericArgumentValue(Runnable.class)___		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		bf.registerBeanDefinition("mock", rbd)___		assertEquals(Runnable.class, bf.getType("mock"))__		assertEquals(Runnable.class, bf.getType("mock"))__		Map<String, Runnable> beans = bf.getBeansOfType(Runnable.class)__		assertEquals(1, beans.size())__	};tests,support,for,parameterized,static,code,factory,method,declarations,such,as,mockito,s,code,mock,method,which,has,the,following,signature,pre,code,public,static,t,t,mock,class,t,class,to,mock,pre,p,see,spr,9493;test,public,void,parameterized,static,factory,method,root,bean,definition,rbd,new,root,bean,definition,mockito,class,rbd,set,factory,method,name,mock,rbd,get,constructor,argument,values,add,generic,argument,value,runnable,class,default,listable,bean,factory,bf,new,default,listable,bean,factory,bf,register,bean,definition,mock,rbd,assert,equals,runnable,class,bf,get,type,mock,assert,equals,runnable,class,bf,get,type,mock,map,string,runnable,beans,bf,get,beans,of,type,runnable,class,assert,equals,1,beans,size
BeanFactoryGenericsTests -> @Test 	public void parameterizedStaticFactoryMethod();1536962185;Tests support for parameterized static {@code factory-method} declarations such as_Mockito's {@code mock()} method which has the following signature._<pre>_{@code_public static <T> T mock(Class<T> classToMock)__</pre>_<p>See SPR-9493;@Test_	public void parameterizedStaticFactoryMethod() {_		RootBeanDefinition rbd = new RootBeanDefinition(Mockito.class)__		rbd.setFactoryMethodName("mock")__		rbd.getConstructorArgumentValues().addGenericArgumentValue(Runnable.class)___		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		bf.registerBeanDefinition("mock", rbd)___		assertEquals(Runnable.class, bf.getType("mock"))__		assertEquals(Runnable.class, bf.getType("mock"))__		Map<String, Runnable> beans = bf.getBeansOfType(Runnable.class)__		assertEquals(1, beans.size())__	};tests,support,for,parameterized,static,code,factory,method,declarations,such,as,mockito,s,code,mock,method,which,has,the,following,signature,pre,code,public,static,t,t,mock,class,t,class,to,mock,pre,p,see,spr,9493;test,public,void,parameterized,static,factory,method,root,bean,definition,rbd,new,root,bean,definition,mockito,class,rbd,set,factory,method,name,mock,rbd,get,constructor,argument,values,add,generic,argument,value,runnable,class,default,listable,bean,factory,bf,new,default,listable,bean,factory,bf,register,bean,definition,mock,rbd,assert,equals,runnable,class,bf,get,type,mock,assert,equals,runnable,class,bf,get,type,mock,map,string,runnable,beans,bf,get,beans,of,type,runnable,class,assert,equals,1,beans,size
BeanFactoryGenericsTests -> @Test 	public void parameterizedStaticFactoryMethod();1537435902;Tests support for parameterized static {@code factory-method} declarations such as_Mockito's {@code mock()} method which has the following signature._<pre>_{@code_public static <T> T mock(Class<T> classToMock)__</pre>_<p>See SPR-9493;@Test_	public void parameterizedStaticFactoryMethod() {_		RootBeanDefinition rbd = new RootBeanDefinition(Mockito.class)__		rbd.setFactoryMethodName("mock")__		rbd.getConstructorArgumentValues().addGenericArgumentValue(Runnable.class)___		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		bf.registerBeanDefinition("mock", rbd)___		assertEquals(Runnable.class, bf.getType("mock"))__		assertEquals(Runnable.class, bf.getType("mock"))__		Map<String, Runnable> beans = bf.getBeansOfType(Runnable.class)__		assertEquals(1, beans.size())__	};tests,support,for,parameterized,static,code,factory,method,declarations,such,as,mockito,s,code,mock,method,which,has,the,following,signature,pre,code,public,static,t,t,mock,class,t,class,to,mock,pre,p,see,spr,9493;test,public,void,parameterized,static,factory,method,root,bean,definition,rbd,new,root,bean,definition,mockito,class,rbd,set,factory,method,name,mock,rbd,get,constructor,argument,values,add,generic,argument,value,runnable,class,default,listable,bean,factory,bf,new,default,listable,bean,factory,bf,register,bean,definition,mock,rbd,assert,equals,runnable,class,bf,get,type,mock,assert,equals,runnable,class,bf,get,type,mock,map,string,runnable,beans,bf,get,beans,of,type,runnable,class,assert,equals,1,beans,size
