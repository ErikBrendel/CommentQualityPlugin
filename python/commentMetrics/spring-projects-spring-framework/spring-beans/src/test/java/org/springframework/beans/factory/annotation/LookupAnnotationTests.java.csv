commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Before public void setUp() {     beanFactory = new DefaultListableBeanFactory().     AutowiredAnnotationBeanPostProcessor aabpp = new AutowiredAnnotationBeanPostProcessor().     aabpp.setBeanFactory(beanFactory).     beanFactory.addBeanPostProcessor(aabpp).     beanFactory.registerBeanDefinition("abstractBean", new RootBeanDefinition(AbstractBean.class)).     beanFactory.registerBeanDefinition("beanConsumer", new RootBeanDefinition(BeanConsumer.class)).     RootBeanDefinition tbd = new RootBeanDefinition(TestBean.class).     tbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     beanFactory.registerBeanDefinition("testBean", tbd). }
false;public;0;8;;@Test public void testWithoutConstructorArg() {     AbstractBean bean = (AbstractBean) beanFactory.getBean("abstractBean").     assertNotNull(bean).     Object expected = bean.get().     assertEquals(TestBean.class, expected.getClass()).     assertSame(bean, beanFactory.getBean(BeanConsumer.class).abstractBean). }
false;public;0;9;;@Test public void testWithOverloadedArg() {     AbstractBean bean = (AbstractBean) beanFactory.getBean("abstractBean").     assertNotNull(bean).     TestBean expected = bean.get("haha").     assertEquals(TestBean.class, expected.getClass()).     assertEquals("haha", expected.getName()).     assertSame(bean, beanFactory.getBean(BeanConsumer.class).abstractBean). }
false;public;0;9;;@Test public void testWithOneConstructorArg() {     AbstractBean bean = (AbstractBean) beanFactory.getBean("abstractBean").     assertNotNull(bean).     TestBean expected = bean.getOneArgument("haha").     assertEquals(TestBean.class, expected.getClass()).     assertEquals("haha", expected.getName()).     assertSame(bean, beanFactory.getBean(BeanConsumer.class).abstractBean). }
false;public;0;10;;@Test public void testWithTwoConstructorArg() {     AbstractBean bean = (AbstractBean) beanFactory.getBean("abstractBean").     assertNotNull(bean).     TestBean expected = bean.getTwoArguments("haha", 72).     assertEquals(TestBean.class, expected.getClass()).     assertEquals("haha", expected.getName()).     assertEquals(72, expected.getAge()).     assertSame(bean, beanFactory.getBean(BeanConsumer.class).abstractBean). }
false;public;0;12;;@Test public void testWithThreeArgsShouldFail() {     AbstractBean bean = (AbstractBean) beanFactory.getBean("abstractBean").     assertNotNull(bean).     try {         bean.getThreeArguments("name", 1, 2).         fail("TestBean does not have a three arg constructor so this should not have worked").     } catch (AbstractMethodError ex) {     }     assertSame(bean, beanFactory.getBean(BeanConsumer.class).abstractBean). }
false;public;0;8;;@Test public void testWithEarlyInjection() {     AbstractBean bean = beanFactory.getBean("beanConsumer", BeanConsumer.class).abstractBean.     assertNotNull(bean).     Object expected = bean.get().     assertEquals(TestBean.class, expected.getClass()).     assertSame(bean, beanFactory.getBean(BeanConsumer.class).abstractBean). }
false;public,abstract;0;2;;@Lookup public abstract TestBean get().
false;public,abstract;1;2;;@Lookup public abstract TestBean get(// overloaded String name).
false;public,abstract;1;2;;@Lookup public abstract TestBean getOneArgument(String name).
false;public,abstract;2;2;;@Lookup public abstract TestBean getTwoArguments(String name, int age).
false;public,abstract;3;1;;public abstract TestBean getThreeArguments(String name, int age, int anotherArg).
