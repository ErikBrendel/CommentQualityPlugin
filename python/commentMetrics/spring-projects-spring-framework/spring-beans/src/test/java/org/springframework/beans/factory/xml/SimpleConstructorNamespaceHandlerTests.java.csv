commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void simpleValue() throws Exception {     DefaultListableBeanFactory beanFactory = createFactory("simpleConstructorNamespaceHandlerTests.xml").     String name = "simple".     // beanFactory.getBean("simple1", DummyBean.class).     DummyBean nameValue = beanFactory.getBean(name, DummyBean.class).     assertEquals("simple", nameValue.getValue()). }
false;public;0;8;;@Test public void simpleRef() throws Exception {     DefaultListableBeanFactory beanFactory = createFactory("simpleConstructorNamespaceHandlerTests.xml").     String name = "simple-ref".     // beanFactory.getBean("name-value1", TestBean.class).     DummyBean nameValue = beanFactory.getBean(name, DummyBean.class).     assertEquals(beanFactory.getBean("name"), nameValue.getValue()). }
false;public;0;9;;@Test public void nameValue() throws Exception {     DefaultListableBeanFactory beanFactory = createFactory("simpleConstructorNamespaceHandlerTests.xml").     String name = "name-value".     // beanFactory.getBean("name-value1", TestBean.class).     TestBean nameValue = beanFactory.getBean(name, TestBean.class).     assertEquals(name, nameValue.getName()).     assertEquals(10, nameValue.getAge()). }
false;public;0;9;;@Test public void nameRef() throws Exception {     DefaultListableBeanFactory beanFactory = createFactory("simpleConstructorNamespaceHandlerTests.xml").     TestBean nameValue = beanFactory.getBean("name-value", TestBean.class).     DummyBean nameRef = beanFactory.getBean("name-ref", DummyBean.class).     assertEquals("some-name", nameRef.getName()).     assertEquals(nameValue, nameRef.getSpouse()). }
false;public;0;9;;@Test public void typeIndexedValue() throws Exception {     DefaultListableBeanFactory beanFactory = createFactory("simpleConstructorNamespaceHandlerTests.xml").     DummyBean typeRef = beanFactory.getBean("indexed-value", DummyBean.class).     assertEquals("at", typeRef.getName()).     assertEquals("austria", typeRef.getValue()).     assertEquals(10, typeRef.getAge()). }
false;public;0;8;;@Test public void typeIndexedRef() throws Exception {     DefaultListableBeanFactory beanFactory = createFactory("simpleConstructorNamespaceHandlerTests.xml").     DummyBean typeRef = beanFactory.getBean("indexed-ref", DummyBean.class).     assertEquals("some-name", typeRef.getName()).     assertEquals(beanFactory.getBean("name-value"), typeRef.getSpouse()). }
false;public;0;6;;@Test(expected = BeanDefinitionStoreException.class) public void ambiguousConstructor() throws Exception {     DefaultListableBeanFactory bf = new DefaultListableBeanFactory().     new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource("simpleConstructorNamespaceHandlerTestsWithErrors.xml", getClass())). }
false;public;0;7;;@Test public void constructorWithNameEndingInRef() throws Exception {     DefaultListableBeanFactory beanFactory = createFactory("simpleConstructorNamespaceHandlerTests.xml").     DummyBean derivedBean = beanFactory.getBean("beanWithRefConstructorArg", DummyBean.class).     assertEquals(10, derivedBean.getAge()).     assertEquals("silly name", derivedBean.getName()). }
false;private;1;6;;private DefaultListableBeanFactory createFactory(String resourceName) {     DefaultListableBeanFactory bf = new DefaultListableBeanFactory().     new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(resourceName, getClass())).     return bf. }
