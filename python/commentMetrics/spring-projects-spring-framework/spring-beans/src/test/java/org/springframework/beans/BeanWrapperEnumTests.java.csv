commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void testCustomEnum() {     GenericBean<?> gb = new GenericBean<>().     BeanWrapper bw = new BeanWrapperImpl(gb).     bw.setPropertyValue("customEnum", "VALUE_1").     assertEquals(CustomEnum.VALUE_1, gb.getCustomEnum()). }
false;public;0;7;;@Test public void testCustomEnumWithNull() {     GenericBean<?> gb = new GenericBean<>().     BeanWrapper bw = new BeanWrapperImpl(gb).     bw.setPropertyValue("customEnum", null).     assertEquals(null, gb.getCustomEnum()). }
false;public;0;7;;@Test public void testCustomEnumWithEmptyString() {     GenericBean<?> gb = new GenericBean<>().     BeanWrapper bw = new BeanWrapperImpl(gb).     bw.setPropertyValue("customEnum", "").     assertEquals(null, gb.getCustomEnum()). }
false;public;0;8;;@Test public void testCustomEnumArrayWithSingleValue() {     GenericBean<?> gb = new GenericBean<>().     BeanWrapper bw = new BeanWrapperImpl(gb).     bw.setPropertyValue("customEnumArray", "VALUE_1").     assertEquals(1, gb.getCustomEnumArray().length).     assertEquals(CustomEnum.VALUE_1, gb.getCustomEnumArray()[0]). }
false;public;0;9;;@Test public void testCustomEnumArrayWithMultipleValues() {     GenericBean<?> gb = new GenericBean<>().     BeanWrapper bw = new BeanWrapperImpl(gb).     bw.setPropertyValue("customEnumArray", new String[] { "VALUE_1", "VALUE_2" }).     assertEquals(2, gb.getCustomEnumArray().length).     assertEquals(CustomEnum.VALUE_1, gb.getCustomEnumArray()[0]).     assertEquals(CustomEnum.VALUE_2, gb.getCustomEnumArray()[1]). }
false;public;0;9;;@Test public void testCustomEnumArrayWithMultipleValuesAsCsv() {     GenericBean<?> gb = new GenericBean<>().     BeanWrapper bw = new BeanWrapperImpl(gb).     bw.setPropertyValue("customEnumArray", "VALUE_1,VALUE_2").     assertEquals(2, gb.getCustomEnumArray().length).     assertEquals(CustomEnum.VALUE_1, gb.getCustomEnumArray()[0]).     assertEquals(CustomEnum.VALUE_2, gb.getCustomEnumArray()[1]). }
false;public;0;8;;@Test public void testCustomEnumSetWithSingleValue() {     GenericBean<?> gb = new GenericBean<>().     BeanWrapper bw = new BeanWrapperImpl(gb).     bw.setPropertyValue("customEnumSet", "VALUE_1").     assertEquals(1, gb.getCustomEnumSet().size()).     assertTrue(gb.getCustomEnumSet().contains(CustomEnum.VALUE_1)). }
false;public;0;9;;@Test public void testCustomEnumSetWithMultipleValues() {     GenericBean<?> gb = new GenericBean<>().     BeanWrapper bw = new BeanWrapperImpl(gb).     bw.setPropertyValue("customEnumSet", new String[] { "VALUE_1", "VALUE_2" }).     assertEquals(2, gb.getCustomEnumSet().size()).     assertTrue(gb.getCustomEnumSet().contains(CustomEnum.VALUE_1)).     assertTrue(gb.getCustomEnumSet().contains(CustomEnum.VALUE_2)). }
false;public;0;9;;@Test public void testCustomEnumSetWithMultipleValuesAsCsv() {     GenericBean<?> gb = new GenericBean<>().     BeanWrapper bw = new BeanWrapperImpl(gb).     bw.setPropertyValue("customEnumSet", "VALUE_1,VALUE_2").     assertEquals(2, gb.getCustomEnumSet().size()).     assertTrue(gb.getCustomEnumSet().contains(CustomEnum.VALUE_1)).     assertTrue(gb.getCustomEnumSet().contains(CustomEnum.VALUE_2)). }
false;public;0;9;;@Test public void testCustomEnumSetWithGetterSetterMismatch() {     GenericBean<?> gb = new GenericBean<>().     BeanWrapper bw = new BeanWrapperImpl(gb).     bw.setPropertyValue("customEnumSetMismatch", new String[] { "VALUE_1", "VALUE_2" }).     assertEquals(2, gb.getCustomEnumSet().size()).     assertTrue(gb.getCustomEnumSet().contains(CustomEnum.VALUE_1)).     assertTrue(gb.getCustomEnumSet().contains(CustomEnum.VALUE_2)). }
false;public;0;11;;@Test public void testStandardEnumSetWithMultipleValues() {     GenericBean<?> gb = new GenericBean<>().     BeanWrapper bw = new BeanWrapperImpl(gb).     bw.setConversionService(new DefaultConversionService()).     assertNull(gb.getStandardEnumSet()).     bw.setPropertyValue("standardEnumSet", new String[] { "VALUE_1", "VALUE_2" }).     assertEquals(2, gb.getStandardEnumSet().size()).     assertTrue(gb.getStandardEnumSet().contains(CustomEnum.VALUE_1)).     assertTrue(gb.getStandardEnumSet().contains(CustomEnum.VALUE_2)). }
false;public;0;9;;@Test public void testStandardEnumSetWithAutoGrowing() {     GenericBean<?> gb = new GenericBean<>().     BeanWrapper bw = new BeanWrapperImpl(gb).     bw.setAutoGrowNestedPaths(true).     assertNull(gb.getStandardEnumSet()).     bw.getPropertyValue("standardEnumSet.class").     assertEquals(0, gb.getStandardEnumSet().size()). }
false;public;0;14;;@Test public void testStandardEnumMapWithMultipleValues() {     GenericBean<?> gb = new GenericBean<>().     BeanWrapper bw = new BeanWrapperImpl(gb).     bw.setConversionService(new DefaultConversionService()).     assertNull(gb.getStandardEnumMap()).     Map<String, Integer> map = new LinkedHashMap<>().     map.put("VALUE_1", 1).     map.put("VALUE_2", 2).     bw.setPropertyValue("standardEnumMap", map).     assertEquals(2, gb.getStandardEnumMap().size()).     assertEquals(new Integer(1), gb.getStandardEnumMap().get(CustomEnum.VALUE_1)).     assertEquals(new Integer(2), gb.getStandardEnumMap().get(CustomEnum.VALUE_2)). }
false;public;0;10;;@Test public void testStandardEnumMapWithAutoGrowing() {     GenericBean<?> gb = new GenericBean<>().     BeanWrapper bw = new BeanWrapperImpl(gb).     bw.setAutoGrowNestedPaths(true).     assertNull(gb.getStandardEnumMap()).     bw.setPropertyValue("standardEnumMap[VALUE_1]", 1).     assertEquals(1, gb.getStandardEnumMap().size()).     assertEquals(new Integer(1), gb.getStandardEnumMap().get(CustomEnum.VALUE_1)). }
false;public;0;7;;@Test public void testNonPublicEnum() {     NonPublicEnumHolder holder = new NonPublicEnumHolder().     BeanWrapper bw = new BeanWrapperImpl(holder).     bw.setPropertyValue("nonPublicEnum", "VALUE_1").     assertEquals(NonPublicEnum.VALUE_1, holder.getNonPublicEnum()). }
false;public;0;3;;public NonPublicEnum getNonPublicEnum() {     return nonPublicEnum. }
false;public;1;3;;public void setNonPublicEnum(NonPublicEnum nonPublicEnum) {     this.nonPublicEnum = nonPublicEnum. }
