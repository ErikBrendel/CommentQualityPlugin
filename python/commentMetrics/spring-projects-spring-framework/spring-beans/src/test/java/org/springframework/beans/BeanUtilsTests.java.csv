commented;modifiers;parameterAmount;loc;comment;code
false;public;0;23;;@Test public void testInstantiateClass() {     // give proper class     BeanUtils.instantiateClass(ArrayList.class).     try {         // give interface         BeanUtils.instantiateClass(List.class).         fail("Should have thrown FatalBeanException").     } catch (FatalBeanException ex) {     // expected     }     try {         // give class without default constructor         BeanUtils.instantiateClass(CustomDateEditor.class).         fail("Should have thrown FatalBeanException").     } catch (FatalBeanException ex) {     // expected     } }
false;public;0;7;;@Test public void testGetPropertyDescriptors() throws Exception {     PropertyDescriptor[] actual = Introspector.getBeanInfo(TestBean.class).getPropertyDescriptors().     PropertyDescriptor[] descriptors = BeanUtils.getPropertyDescriptors(TestBean.class).     assertNotNull("Descriptors should not be null", descriptors).     assertEquals("Invalid number of descriptors returned", actual.length, descriptors.length). }
false;public;0;10;;@Test public void testBeanPropertyIsArray() {     PropertyDescriptor[] descriptors = BeanUtils.getPropertyDescriptors(ContainerBean.class).     for (PropertyDescriptor descriptor : descriptors) {         if ("containedBeans".equals(descriptor.getName())) {             assertTrue("Property should be an array", descriptor.getPropertyType().isArray()).             assertEquals(descriptor.getPropertyType().getComponentType(), ContainedBean.class).         }     } }
false;public;0;4;;@Test public void testFindEditorByConvention() {     assertEquals(ResourceEditor.class, BeanUtils.findEditorByConvention(Resource.class).getClass()). }
false;public;0;15;;@Test public void testCopyProperties() throws Exception {     TestBean tb = new TestBean().     tb.setName("rod").     tb.setAge(32).     tb.setTouchy("touchy").     TestBean tb2 = new TestBean().     assertTrue("Name empty", tb2.getName() == null).     assertTrue("Age empty", tb2.getAge() == 0).     assertTrue("Touchy empty", tb2.getTouchy() == null).     BeanUtils.copyProperties(tb, tb2).     assertTrue("Name copied", tb2.getName().equals(tb.getName())).     assertTrue("Age copied", tb2.getAge() == tb.getAge()).     assertTrue("Touchy copied", tb2.getTouchy().equals(tb.getTouchy())). }
false;public;0;15;;@Test public void testCopyPropertiesWithDifferentTypes1() throws Exception {     DerivedTestBean tb = new DerivedTestBean().     tb.setName("rod").     tb.setAge(32).     tb.setTouchy("touchy").     TestBean tb2 = new TestBean().     assertTrue("Name empty", tb2.getName() == null).     assertTrue("Age empty", tb2.getAge() == 0).     assertTrue("Touchy empty", tb2.getTouchy() == null).     BeanUtils.copyProperties(tb, tb2).     assertTrue("Name copied", tb2.getName().equals(tb.getName())).     assertTrue("Age copied", tb2.getAge() == tb.getAge()).     assertTrue("Touchy copied", tb2.getTouchy().equals(tb.getTouchy())). }
false;public;0;15;;@Test public void testCopyPropertiesWithDifferentTypes2() throws Exception {     TestBean tb = new TestBean().     tb.setName("rod").     tb.setAge(32).     tb.setTouchy("touchy").     DerivedTestBean tb2 = new DerivedTestBean().     assertTrue("Name empty", tb2.getName() == null).     assertTrue("Age empty", tb2.getAge() == 0).     assertTrue("Touchy empty", tb2.getTouchy() == null).     BeanUtils.copyProperties(tb, tb2).     assertTrue("Name copied", tb2.getName().equals(tb.getName())).     assertTrue("Age copied", tb2.getAge() == tb.getAge()).     assertTrue("Touchy copied", tb2.getTouchy().equals(tb.getTouchy())). }
false;public;0;17;;@Test public void testCopyPropertiesWithEditable() throws Exception {     TestBean tb = new TestBean().     assertTrue("Name empty", tb.getName() == null).     tb.setAge(32).     tb.setTouchy("bla").     TestBean tb2 = new TestBean().     tb2.setName("rod").     assertTrue("Age empty", tb2.getAge() == 0).     assertTrue("Touchy empty", tb2.getTouchy() == null).     // "touchy" should not be copied: it's not defined in ITestBean     BeanUtils.copyProperties(tb, tb2, ITestBean.class).     assertTrue("Name copied", tb2.getName() == null).     assertTrue("Age copied", tb2.getAge() == 32).     assertTrue("Touchy still empty", tb2.getTouchy() == null). }
false;public;0;17;;@Test public void testCopyPropertiesWithIgnore() throws Exception {     TestBean tb = new TestBean().     assertTrue("Name empty", tb.getName() == null).     tb.setAge(32).     tb.setTouchy("bla").     TestBean tb2 = new TestBean().     tb2.setName("rod").     assertTrue("Age empty", tb2.getAge() == 0).     assertTrue("Touchy empty", tb2.getTouchy() == null).     // "spouse", "touchy", "age" should not be copied     BeanUtils.copyProperties(tb, tb2, "spouse", "touchy", "age").     assertTrue("Name copied", tb2.getName() == null).     assertTrue("Age still empty", tb2.getAge() == 0).     assertTrue("Touchy still empty", tb2.getTouchy() == null). }
false;public;0;8;;@Test public void testCopyPropertiesWithIgnoredNonExistingProperty() {     NameAndSpecialProperty source = new NameAndSpecialProperty().     source.setName("name").     TestBean target = new TestBean().     BeanUtils.copyProperties(source, target, "specialProperty").     assertEquals(target.getName(), "name"). }
false;public;0;12;;@Test public void testCopyPropertiesWithInvalidProperty() {     InvalidProperty source = new InvalidProperty().     source.setName("name").     source.setFlag1(true).     source.setFlag2(true).     InvalidProperty target = new InvalidProperty().     BeanUtils.copyProperties(source, target).     assertEquals("name", target.getName()).     assertTrue(target.getFlag1()).     assertTrue(target.getFlag2()). }
false;public;0;6;;@Test public void testResolveSimpleSignature() throws Exception {     Method desiredMethod = MethodSignatureBean.class.getMethod("doSomething").     assertSignatureEquals(desiredMethod, "doSomething").     assertSignatureEquals(desiredMethod, "doSomething()"). }
false;public;0;18;;@Test public void testResolveInvalidSignature() throws Exception {     try {         BeanUtils.resolveSignature("doSomething(", MethodSignatureBean.class).         fail("Should not be able to parse with opening but no closing paren.").     } catch (IllegalArgumentException ex) {     // success     }     try {         BeanUtils.resolveSignature("doSomething)", MethodSignatureBean.class).         fail("Should not be able to parse with closing but no opening paren.").     } catch (IllegalArgumentException ex) {     // success     } }
false;public;0;6;;@Test public void testResolveWithAndWithoutArgList() throws Exception {     Method desiredMethod = MethodSignatureBean.class.getMethod("doSomethingElse", String.class, int.class).     assertSignatureEquals(desiredMethod, "doSomethingElse").     assertNull(BeanUtils.resolveSignature("doSomethingElse()", MethodSignatureBean.class)). }
false;public;0;5;;@Test public void testResolveTypedSignature() throws Exception {     Method desiredMethod = MethodSignatureBean.class.getMethod("doSomethingElse", String.class, int.class).     assertSignatureEquals(desiredMethod, "doSomethingElse(java.lang.String, int)"). }
false;public;0;14;;@Test public void testResolveOverloadedSignature() throws Exception {     // test resolve with no args     Method desiredMethod = MethodSignatureBean.class.getMethod("overloaded").     assertSignatureEquals(desiredMethod, "overloaded()").     // resolve with single arg     desiredMethod = MethodSignatureBean.class.getMethod("overloaded", String.class).     assertSignatureEquals(desiredMethod, "overloaded(java.lang.String)").     // resolve with two args     desiredMethod = MethodSignatureBean.class.getMethod("overloaded", String.class, BeanFactory.class).     assertSignatureEquals(desiredMethod, "overloaded(java.lang.String, org.springframework.beans.factory.BeanFactory)"). }
false;public;0;8;;@Test public void testResolveSignatureWithArray() throws Exception {     Method desiredMethod = MethodSignatureBean.class.getMethod("doSomethingWithAnArray", String[].class).     assertSignatureEquals(desiredMethod, "doSomethingWithAnArray(java.lang.String[])").     desiredMethod = MethodSignatureBean.class.getMethod("doSomethingWithAMultiDimensionalArray", String[][].class).     assertSignatureEquals(desiredMethod, "doSomethingWithAMultiDimensionalArray(java.lang.String[][])"). }
false;public;0;13;;@Test public void testSPR6063() {     PropertyDescriptor[] descrs = BeanUtils.getPropertyDescriptors(Bean.class).     PropertyDescriptor keyDescr = BeanUtils.getPropertyDescriptor(Bean.class, "value").     assertEquals(String.class, keyDescr.getPropertyType()).     for (PropertyDescriptor propertyDescriptor : descrs) {         if (propertyDescriptor.getName().equals(keyDescr.getName())) {             assertEquals(propertyDescriptor.getName() + " has unexpected type", keyDescr.getPropertyType(), propertyDescriptor.getPropertyType()).         }     } }
false;private;2;3;;private void assertSignatureEquals(Method desiredMethod, String signature) {     assertEquals(desiredMethod, BeanUtils.resolveSignature(signature, MethodSignatureBean.class)). }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;0;3;;public String getName() {     return this.name. }
false;public;1;3;;public void setSpecialProperty(int specialProperty) {     this.specialProperty = specialProperty. }
false;public;0;3;;public int getSpecialProperty() {     return specialProperty. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;0;3;;public String getName() {     return this.name. }
false;public;1;3;;public void setValue(int value) {     this.value = Integer.toString(value). }
false;public;0;3;;public String getValue() {     return this.value. }
false;public;1;3;;public void setFlag1(boolean flag1) {     this.flag1 = flag1. }
false;public;0;3;;public Boolean getFlag1() {     return this.flag1. }
false;public;1;3;;public void setFlag2(Boolean flag2) {     this.flag2 = flag2. }
false;public;0;3;;public boolean getFlag2() {     return this.flag2. }
false;public;0;3;;public ContainedBean[] getContainedBeans() {     return containedBeans. }
false;public;1;3;;public void setContainedBeans(ContainedBean[] containedBeans) {     this.containedBeans = containedBeans. }
false;public;0;3;;public String getName() {     return name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;0;2;;public void doSomething() { }
false;public;2;2;;public void doSomethingElse(String s, int x) { }
false;public;0;2;;public void overloaded() { }
false;public;1;2;;public void overloaded(String s) { }
false;public;2;2;;public void overloaded(String s, BeanFactory beanFactory) { }
false;public;1;2;;public void doSomethingWithAnArray(String[] strings) { }
false;public;1;2;;public void doSomethingWithAMultiDimensionalArray(String[][] strings) { }
false;;0;1;;K getKey().
false;;1;1;;void setKey(V value).
false;;0;1;;V getValue().
false;;1;1;;void setValue(V value).
false;public;0;4;;@Override public String getKey() {     return key. }
false;public;1;4;;@Override public void setKey(String aKey) {     key = aKey. }
false;public;0;4;;@Override public String getValue() {     return value. }
false;public;1;4;;@Override public void setValue(String aValue) {     value = aValue. }
false;public;0;3;;public String getName() {     return name. }
