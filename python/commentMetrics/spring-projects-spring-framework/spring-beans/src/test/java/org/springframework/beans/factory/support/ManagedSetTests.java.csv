commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void mergeSunnyDay() {     ManagedSet parent = new ManagedSet().     parent.add("one").     parent.add("two").     ManagedSet child = new ManagedSet().     child.add("three").     child.setMergeEnabled(true).     Set mergedSet = child.merge(parent).     assertEquals("merge() obviously did not work.", 3, mergedSet.size()). }
false;public;0;7;;@Test public void mergeWithNullParent() {     ManagedSet child = new ManagedSet().     child.add("one").     child.setMergeEnabled(true).     assertSame(child, child.merge(null)). }
false;public;0;4;;@Test(expected = IllegalStateException.class) public void mergeNotAllowedWhenMergeNotEnabled() {     new ManagedSet().merge(null). }
false;public;0;7;;@Test(expected = IllegalArgumentException.class) public void mergeWithNonCompatibleParentType() {     ManagedSet child = new ManagedSet().     child.add("one").     child.setMergeEnabled(true).     child.merge("hello"). }
false;public;0;10;;@Test public void mergeEmptyChild() {     ManagedSet parent = new ManagedSet().     parent.add("one").     parent.add("two").     ManagedSet child = new ManagedSet().     child.setMergeEnabled(true).     Set mergedSet = child.merge(parent).     assertEquals("merge() obviously did not work.", 2, mergedSet.size()). }
false;public;0;12;;@Test public void mergeChildValuesOverrideTheParents() {     // asserts that the set contract is not violated during a merge() operation...     ManagedSet parent = new ManagedSet().     parent.add("one").     parent.add("two").     ManagedSet child = new ManagedSet().     child.add("one").     child.setMergeEnabled(true).     Set mergedSet = child.merge(parent).     assertEquals("merge() obviously did not work.", 2, mergedSet.size()). }
