commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setUp() {     bf = new DefaultListableBeanFactory(). }
false;public;0;12;;@Test public void testNoArgGetter() {     bf.registerBeanDefinition("testService", genericBeanDefinition(TestService.class).getBeanDefinition()).     bf.registerBeanDefinition("factory", genericBeanDefinition(ServiceLocatorFactoryBean.class).addPropertyValue("serviceLocatorInterface", TestServiceLocator.class).getBeanDefinition()).     TestServiceLocator factory = (TestServiceLocator) bf.getBean("factory").     TestService testService = factory.getTestService().     assertNotNull(testService). }
false;public;0;38;;@Test public void testErrorOnTooManyOrTooFew() throws Exception {     bf.registerBeanDefinition("testService", genericBeanDefinition(TestService.class).getBeanDefinition()).     bf.registerBeanDefinition("testServiceInstance2", genericBeanDefinition(TestService.class).getBeanDefinition()).     bf.registerBeanDefinition("factory", genericBeanDefinition(ServiceLocatorFactoryBean.class).addPropertyValue("serviceLocatorInterface", TestServiceLocator.class).getBeanDefinition()).     bf.registerBeanDefinition("factory2", genericBeanDefinition(ServiceLocatorFactoryBean.class).addPropertyValue("serviceLocatorInterface", TestServiceLocator2.class).getBeanDefinition()).     bf.registerBeanDefinition("factory3", genericBeanDefinition(ServiceLocatorFactoryBean.class).addPropertyValue("serviceLocatorInterface", TestService2Locator.class).getBeanDefinition()).     try {         TestServiceLocator factory = (TestServiceLocator) bf.getBean("factory").         factory.getTestService().         fail("Must fail on more than one matching type").     } catch (NoSuchBeanDefinitionException ex) {     /* expected */     }     try {         TestServiceLocator2 factory = (TestServiceLocator2) bf.getBean("factory2").         factory.getTestService(null).         fail("Must fail on more than one matching type").     } catch (NoSuchBeanDefinitionException ex) {     /* expected */     }     try {         TestService2Locator factory = (TestService2Locator) bf.getBean("factory3").         factory.getTestService().         fail("Must fail on no matching types").     } catch (NoSuchBeanDefinitionException ex) {     /* expected */     } }
false;public;0;45;;@Test public void testErrorOnTooManyOrTooFewWithCustomServiceLocatorException() {     bf.registerBeanDefinition("testService", genericBeanDefinition(TestService.class).getBeanDefinition()).     bf.registerBeanDefinition("testServiceInstance2", genericBeanDefinition(TestService.class).getBeanDefinition()).     bf.registerBeanDefinition("factory", genericBeanDefinition(ServiceLocatorFactoryBean.class).addPropertyValue("serviceLocatorInterface", TestServiceLocator.class).addPropertyValue("serviceLocatorExceptionClass", CustomServiceLocatorException1.class).getBeanDefinition()).     bf.registerBeanDefinition("factory2", genericBeanDefinition(ServiceLocatorFactoryBean.class).addPropertyValue("serviceLocatorInterface", TestServiceLocator2.class).addPropertyValue("serviceLocatorExceptionClass", CustomServiceLocatorException2.class).getBeanDefinition()).     bf.registerBeanDefinition("factory3", genericBeanDefinition(ServiceLocatorFactoryBean.class).addPropertyValue("serviceLocatorInterface", TestService2Locator.class).addPropertyValue("serviceLocatorExceptionClass", CustomServiceLocatorException3.class).getBeanDefinition()).     try {         TestServiceLocator factory = (TestServiceLocator) bf.getBean("factory").         factory.getTestService().         fail("Must fail on more than one matching type").     } catch (CustomServiceLocatorException1 expected) {         assertTrue(expected.getCause() instanceof NoSuchBeanDefinitionException).     }     try {         TestServiceLocator2 factory2 = (TestServiceLocator2) bf.getBean("factory2").         factory2.getTestService(null).         fail("Must fail on more than one matching type").     } catch (CustomServiceLocatorException2 expected) {         assertTrue(expected.getCause() instanceof NoSuchBeanDefinitionException).     }     try {         TestService2Locator factory3 = (TestService2Locator) bf.getBean("factory3").         factory3.getTestService().         fail("Must fail on no matching type").     } catch (CustomServiceLocatorException3 ex) {     /* expected */     } }
false;public;0;22;;@Test public void testStringArgGetter() throws Exception {     bf.registerBeanDefinition("testService", genericBeanDefinition(TestService.class).getBeanDefinition()).     bf.registerBeanDefinition("factory", genericBeanDefinition(ServiceLocatorFactoryBean.class).addPropertyValue("serviceLocatorInterface", TestServiceLocator2.class).getBeanDefinition()).     // test string-arg getter with null id     TestServiceLocator2 factory = (TestServiceLocator2) bf.getBean("factory").     @SuppressWarnings("unused")     TestService testBean = factory.getTestService(null).     // now test with explicit id     testBean = factory.getTestService("testService").     // now verify failure on bad id     try {         factory.getTestService("bogusTestService").         fail("Illegal operation allowed").     } catch (NoSuchBeanDefinitionException ex) {     /* expected */     } }
false;public;0;32;;// worked when using an ApplicationContext (see commented), fails when using BeanFactory @Ignore // worked when using an ApplicationContext (see commented), fails when using BeanFactory @Test public void testCombinedLocatorInterface() {     bf.registerBeanDefinition("testService", genericBeanDefinition(TestService.class).getBeanDefinition()).     bf.registerAlias("testService", "1").     bf.registerBeanDefinition("factory", genericBeanDefinition(ServiceLocatorFactoryBean.class).addPropertyValue("serviceLocatorInterface", TestServiceLocator3.class).getBeanDefinition()).     // StaticApplicationContext ctx = new StaticApplicationContext().     // ctx.registerPrototype("testService", TestService.class, new MutablePropertyValues()).     // ctx.registerAlias("testService", "1").     // MutablePropertyValues mpv = new MutablePropertyValues().     // mpv.addPropertyValue("serviceLocatorInterface", TestServiceLocator3.class).     // ctx.registerSingleton("factory", ServiceLocatorFactoryBean.class, mpv).     // ctx.refresh().     TestServiceLocator3 factory = (TestServiceLocator3) bf.getBean("factory").     TestService testBean1 = factory.getTestService().     TestService testBean2 = factory.getTestService("testService").     TestService testBean3 = factory.getTestService(1).     TestService testBean4 = factory.someFactoryMethod().     assertNotSame(testBean1, testBean2).     assertNotSame(testBean1, testBean3).     assertNotSame(testBean1, testBean4).     assertNotSame(testBean2, testBean3).     assertNotSame(testBean2, testBean4).     assertNotSame(testBean3, testBean4).     assertTrue(factory.toString().contains("TestServiceLocator3")). }
false;public;0;35;;// worked when using an ApplicationContext (see commented), fails when using BeanFactory @Ignore // worked when using an ApplicationContext (see commented), fails when using BeanFactory @Test public void testServiceMappings() {     bf.registerBeanDefinition("testService1", genericBeanDefinition(TestService.class).getBeanDefinition()).     bf.registerBeanDefinition("testService2", genericBeanDefinition(ExtendedTestService.class).getBeanDefinition()).     bf.registerBeanDefinition("factory", genericBeanDefinition(ServiceLocatorFactoryBean.class).addPropertyValue("serviceLocatorInterface", TestServiceLocator3.class).addPropertyValue("serviceMappings", "=testService1\n1=testService1\n2=testService2").getBeanDefinition()).     // StaticApplicationContext ctx = new StaticApplicationContext().     // ctx.registerPrototype("testService1", TestService.class, new MutablePropertyValues()).     // ctx.registerPrototype("testService2", ExtendedTestService.class, new MutablePropertyValues()).     // MutablePropertyValues mpv = new MutablePropertyValues().     // mpv.addPropertyValue("serviceLocatorInterface", TestServiceLocator3.class).     // mpv.addPropertyValue("serviceMappings", "=testService1\n1=testService1\n2=testService2").     // ctx.registerSingleton("factory", ServiceLocatorFactoryBean.class, mpv).     // ctx.refresh().     TestServiceLocator3 factory = (TestServiceLocator3) bf.getBean("factory").     TestService testBean1 = factory.getTestService().     TestService testBean2 = factory.getTestService("testService1").     TestService testBean3 = factory.getTestService(1).     TestService testBean4 = factory.getTestService(2).     assertNotSame(testBean1, testBean2).     assertNotSame(testBean1, testBean3).     assertNotSame(testBean1, testBean4).     assertNotSame(testBean2, testBean3).     assertNotSame(testBean2, testBean4).     assertNotSame(testBean3, testBean4).     assertFalse(testBean1 instanceof ExtendedTestService).     assertFalse(testBean2 instanceof ExtendedTestService).     assertFalse(testBean3 instanceof ExtendedTestService).     assertTrue(testBean4 instanceof ExtendedTestService). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void testNoServiceLocatorInterfaceSupplied() throws Exception {     new ServiceLocatorFactoryBean().afterPropertiesSet(). }
false;public;0;7;;@Test(expected = IllegalArgumentException.class) public void testWhenServiceLocatorInterfaceIsNotAnInterfaceType() throws Exception {     ServiceLocatorFactoryBean factory = new ServiceLocatorFactoryBean().     factory.setServiceLocatorInterface(getClass()).     factory.afterPropertiesSet(). // should throw, bad (non-interface-type) serviceLocator interface supplied }
false;public;0;6;;@Test(expected = IllegalArgumentException.class) public void testWhenServiceLocatorExceptionClassToExceptionTypeWithOnlyNoArgCtor() throws Exception {     ServiceLocatorFactoryBean factory = new ServiceLocatorFactoryBean().     factory.setServiceLocatorExceptionClass(ExceptionClassWithOnlyZeroArgCtor.class). // should throw, bad (invalid-Exception-type) serviceLocatorException class supplied }
false;public;0;7;;@Test(expected = IllegalArgumentException.class) @SuppressWarnings("unchecked") public void testWhenServiceLocatorExceptionClassIsNotAnExceptionSubclass() throws Exception {     ServiceLocatorFactoryBean factory = new ServiceLocatorFactoryBean().     factory.setServiceLocatorExceptionClass((Class) getClass()). // should throw, bad (non-Exception-type) serviceLocatorException class supplied }
false;public;0;8;;@Test(expected = UnsupportedOperationException.class) public void testWhenServiceLocatorMethodCalledWithTooManyParameters() throws Exception {     ServiceLocatorFactoryBean factory = new ServiceLocatorFactoryBean().     factory.setServiceLocatorInterface(ServiceLocatorInterfaceWithExtraNonCompliantMethod.class).     factory.afterPropertiesSet().     ServiceLocatorInterfaceWithExtraNonCompliantMethod locator = (ServiceLocatorInterfaceWithExtraNonCompliantMethod) factory.getObject().     // bad method (too many args, doesn't obey class contract)     locator.getTestService("not", "allowed"). }
false;public;0;11;;@Test public void testRequiresListableBeanFactoryAndChokesOnAnythingElse() throws Exception {     BeanFactory beanFactory = mock(BeanFactory.class).     try {         ServiceLocatorFactoryBean factory = new ServiceLocatorFactoryBean().         factory.setBeanFactory(beanFactory).     } catch (FatalBeanException ex) {     // expected     } }
false;;0;1;;TestService getTestService().
false;;1;1;;TestService getTestService(String id) throws CustomServiceLocatorException2.
false;;0;1;;TestService getTestService().
false;;1;1;;TestService getTestService(String id).
false;;1;1;;TestService getTestService(int id).
false;;0;1;;TestService someFactoryMethod().
false;;0;1;;TestService2 getTestService() throws CustomServiceLocatorException3.
false;;0;1;;TestService2 getTestService().
false;;2;1;;TestService2 getTestService(String serviceName, String defaultNotAllowedParameter).
