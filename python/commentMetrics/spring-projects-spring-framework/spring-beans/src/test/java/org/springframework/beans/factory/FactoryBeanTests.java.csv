commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void testFactoryBeanReturnsNull() throws Exception {     DefaultListableBeanFactory factory = new DefaultListableBeanFactory().     new XmlBeanDefinitionReader(factory).loadBeanDefinitions(RETURNS_NULL_CONTEXT).     assertEquals("null", factory.getBean("factoryBean").toString()). }
false;public;0;20;;@Test public void testFactoryBeansWithAutowiring() throws Exception {     DefaultListableBeanFactory factory = new DefaultListableBeanFactory().     new XmlBeanDefinitionReader(factory).loadBeanDefinitions(WITH_AUTOWIRING_CONTEXT).     BeanFactoryPostProcessor ppc = (BeanFactoryPostProcessor) factory.getBean("propertyPlaceholderConfigurer").     ppc.postProcessBeanFactory(factory).     assertNull(factory.getType("betaFactory")).     Alpha alpha = (Alpha) factory.getBean("alpha").     Beta beta = (Beta) factory.getBean("beta").     Gamma gamma = (Gamma) factory.getBean("gamma").     Gamma gamma2 = (Gamma) factory.getBean("gammaFactory").     assertSame(beta, alpha.getBeta()).     assertSame(gamma, beta.getGamma()).     assertSame(gamma2, beta.getGamma()).     assertEquals("yourName", beta.getName()). }
false;public;0;14;;@Test public void testFactoryBeansWithIntermediateFactoryBeanAutowiringFailure() throws Exception {     DefaultListableBeanFactory factory = new DefaultListableBeanFactory().     new XmlBeanDefinitionReader(factory).loadBeanDefinitions(WITH_AUTOWIRING_CONTEXT).     BeanFactoryPostProcessor ppc = (BeanFactoryPostProcessor) factory.getBean("propertyPlaceholderConfigurer").     ppc.postProcessBeanFactory(factory).     Beta beta = (Beta) factory.getBean("beta").     Alpha alpha = (Alpha) factory.getBean("alpha").     Gamma gamma = (Gamma) factory.getBean("gamma").     assertSame(beta, alpha.getBeta()).     assertSame(gamma, beta.getGamma()). }
false;public;0;6;;@Test public void testAbstractFactoryBeanViaAnnotation() throws Exception {     DefaultListableBeanFactory factory = new DefaultListableBeanFactory().     new XmlBeanDefinitionReader(factory).loadBeanDefinitions(ABSTRACT_CONTEXT).     factory.getBeansWithAnnotation(Component.class). }
false;public;0;6;;@Test public void testAbstractFactoryBeanViaType() throws Exception {     DefaultListableBeanFactory factory = new DefaultListableBeanFactory().     new XmlBeanDefinitionReader(factory).loadBeanDefinitions(ABSTRACT_CONTEXT).     factory.getBeansOfType(AbstractFactoryBean.class). }
false;public;0;16;;@Test public void testCircularReferenceWithPostProcessor() {     DefaultListableBeanFactory factory = new DefaultListableBeanFactory().     new XmlBeanDefinitionReader(factory).loadBeanDefinitions(CIRCULAR_CONTEXT).     CountingPostProcessor counter = new CountingPostProcessor().     factory.addBeanPostProcessor(counter).     BeanImpl1 impl1 = factory.getBean(BeanImpl1.class).     assertNotNull(impl1).     assertNotNull(impl1.getImpl2()).     assertNotNull(impl1.getImpl2()).     assertSame(impl1, impl1.getImpl2().getImpl1()).     assertEquals(1, counter.getCount("bean1")).     assertEquals(1, counter.getCount("bean2")). }
false;public;0;4;;@Override public Object getObject() {     return null. }
false;public;0;4;;@Override public Class<?> getObjectType() {     return null. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;1;3;;public void setBeta(Beta beta) {     this.beta = beta. }
false;public;0;3;;public Beta getBeta() {     return beta. }
false;public;0;4;;@Override public void afterPropertiesSet() {     Assert.notNull(beta, "'beta' property is required"). }
false;public;1;3;;public void setGamma(Gamma gamma) {     this.gamma = gamma. }
false;public;0;3;;public Gamma getGamma() {     return gamma. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;0;3;;public String getName() {     return name. }
false;public;0;4;;@Override public void afterPropertiesSet() {     Assert.notNull(gamma, "'gamma' property is required"). }
false;public;1;3;;public void setBeta(Beta beta) {     this.beta = beta. }
false;public;0;4;;@Override public Object getObject() {     return this.beta. }
false;public;0;4;;@Override public Class<?> getObjectType() {     return null. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;1;3;;public void setInstanceName(String instanceName) {     this.instanceName = instanceName. }
false;public;1;4;;@Override public void setBeanFactory(BeanFactory beanFactory) {     this.beanFactory = beanFactory. }
false;public;0;7;;@Override public T getObject() {     if (instance == null) {         instance = beanFactory.getBean(instanceName, type).     }     return instance. }
false;public;0;4;;@Override public Class<?> getObjectType() {     return type. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;2;4;;@Override public Object postProcessBeforeInitialization(Object bean, String beanName) {     return bean. }
false;public;2;13;;@Override public Object postProcessAfterInitialization(Object bean, String beanName) {     if (bean instanceof FactoryBean) {         return bean.     }     AtomicInteger c = count.get(beanName).     if (c == null) {         c = new AtomicInteger(0).         count.put(beanName, c).     }     c.incrementAndGet().     return bean. }
false;public;1;9;;public int getCount(String beanName) {     AtomicInteger c = count.get(beanName).     if (c != null) {         return c.intValue().     } else {         return 0.     } }
false;public;0;3;;public BeanImpl2 getImpl2() {     return impl2. }
false;public;1;3;;public void setImpl2(BeanImpl2 impl2) {     this.impl2 = impl2. }
false;public;0;3;;public BeanImpl1 getImpl1() {     return impl1. }
false;public;1;3;;public void setImpl1(BeanImpl1 impl1) {     this.impl1 = impl1. }
