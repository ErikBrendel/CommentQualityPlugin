commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setUp() {     wrapper.setAutoGrowNestedPaths(true). }
false;public;0;4;;@Test public void getPropertyValueNullValueInNestedPath() {     assertNull(wrapper.getPropertyValue("nested.prop")). }
false;public;0;5;;@Test public void setPropertyValueNullValueInNestedPath() {     wrapper.setPropertyValue("nested.prop", "test").     assertEquals("test", bean.getNested().getProp()). }
false;public;0;4;;@Test(expected = NullValueInNestedPathException.class) public void getPropertyValueNullValueInNestedPathNoDefaultConstructor() {     wrapper.getPropertyValue("nestedNoConstructor.prop"). }
false;public;0;6;;@Test public void getPropertyValueAutoGrowArray() {     assertNotNull(wrapper.getPropertyValue("array[0]")).     assertEquals(1, bean.getArray().length).     assertThat(bean.getArray()[0], instanceOf(Bean.class)). }
false;public;0;5;;@Test public void setPropertyValueAutoGrowArray() {     wrapper.setPropertyValue("array[0].prop", "test").     assertEquals("test", bean.getArray()[0].getProp()). }
false;public;0;14;;@Test public void getPropertyValueAutoGrowArrayBySeveralElements() {     assertNotNull(wrapper.getPropertyValue("array[4]")).     assertEquals(5, bean.getArray().length).     assertThat(bean.getArray()[0], instanceOf(Bean.class)).     assertThat(bean.getArray()[1], instanceOf(Bean.class)).     assertThat(bean.getArray()[2], instanceOf(Bean.class)).     assertThat(bean.getArray()[3], instanceOf(Bean.class)).     assertThat(bean.getArray()[4], instanceOf(Bean.class)).     assertNotNull(wrapper.getPropertyValue("array[0]")).     assertNotNull(wrapper.getPropertyValue("array[1]")).     assertNotNull(wrapper.getPropertyValue("array[2]")).     assertNotNull(wrapper.getPropertyValue("array[3]")). }
false;public;0;6;;@Test public void getPropertyValueAutoGrowMultiDimensionalArray() {     assertNotNull(wrapper.getPropertyValue("multiArray[0][0]")).     assertEquals(1, bean.getMultiArray()[0].length).     assertThat(bean.getMultiArray()[0][0], instanceOf(Bean.class)). }
false;public;0;6;;@Test public void getPropertyValueAutoGrowList() {     assertNotNull(wrapper.getPropertyValue("list[0]")).     assertEquals(1, bean.getList().size()).     assertThat(bean.getList().get(0), instanceOf(Bean.class)). }
false;public;0;5;;@Test public void setPropertyValueAutoGrowList() {     wrapper.setPropertyValue("list[0].prop", "test").     assertEquals("test", bean.getList().get(0).getProp()). }
false;public;0;14;;@Test public void getPropertyValueAutoGrowListBySeveralElements() {     assertNotNull(wrapper.getPropertyValue("list[4]")).     assertEquals(5, bean.getList().size()).     assertThat(bean.getList().get(0), instanceOf(Bean.class)).     assertThat(bean.getList().get(1), instanceOf(Bean.class)).     assertThat(bean.getList().get(2), instanceOf(Bean.class)).     assertThat(bean.getList().get(3), instanceOf(Bean.class)).     assertThat(bean.getList().get(4), instanceOf(Bean.class)).     assertNotNull(wrapper.getPropertyValue("list[0]")).     assertNotNull(wrapper.getPropertyValue("list[1]")).     assertNotNull(wrapper.getPropertyValue("list[2]")).     assertNotNull(wrapper.getPropertyValue("list[3]")). }
false;public;0;12;;@Test public void getPropertyValueAutoGrowListFailsAgainstLimit() {     wrapper.setAutoGrowCollectionLimit(2).     try {         assertNotNull(wrapper.getPropertyValue("list[4]")).         fail("Should have thrown InvalidPropertyException").     } catch (InvalidPropertyException ex) {         // expected         assertTrue(ex.getRootCause() instanceof IndexOutOfBoundsException).     } }
false;public;0;6;;@Test public void getPropertyValueAutoGrowMultiDimensionalList() {     assertNotNull(wrapper.getPropertyValue("multiList[0][0]")).     assertEquals(1, bean.getMultiList().get(0).size()).     assertThat(bean.getMultiList().get(0).get(0), instanceOf(Bean.class)). }
false;public;0;4;;@Test(expected = InvalidPropertyException.class) public void getPropertyValueAutoGrowListNotParameterized() {     wrapper.getPropertyValue("listNotParameterized[0]"). }
false;public;0;5;;@Test public void setPropertyValueAutoGrowMap() {     wrapper.setPropertyValue("map[A]", new Bean()).     assertThat(bean.getMap().get("A"), instanceOf(Bean.class)). }
false;public;0;5;;@Test public void setNestedPropertyValueAutoGrowMap() {     wrapper.setPropertyValue("map[A].nested", new Bean()).     assertThat(bean.getMap().get("A").getNested(), instanceOf(Bean.class)). }
false;public;0;3;;public String getProp() {     return prop. }
false;public;1;3;;public void setProp(String prop) {     this.prop = prop. }
false;public;0;3;;public Bean getNested() {     return nested. }
false;public;1;3;;public void setNested(Bean nested) {     this.nested = nested. }
false;public;0;3;;public Bean[] getArray() {     return array. }
false;public;1;3;;public void setArray(Bean[] array) {     this.array = array. }
false;public;0;3;;public Bean[][] getMultiArray() {     return multiArray. }
false;public;1;3;;public void setMultiArray(Bean[][] multiArray) {     this.multiArray = multiArray. }
false;public;0;3;;public List<Bean> getList() {     return list. }
false;public;1;3;;public void setList(List<Bean> list) {     this.list = list. }
false;public;0;3;;public List<List<Bean>> getMultiList() {     return multiList. }
false;public;1;3;;public void setMultiList(List<List<Bean>> multiList) {     this.multiList = multiList. }
false;public;0;3;;public NestedNoDefaultConstructor getNestedNoConstructor() {     return nestedNoConstructor. }
false;public;1;3;;public void setNestedNoConstructor(NestedNoDefaultConstructor nestedNoConstructor) {     this.nestedNoConstructor = nestedNoConstructor. }
false;public;0;3;;public List getListNotParameterized() {     return listNotParameterized. }
false;public;1;3;;public void setListNotParameterized(List listNotParameterized) {     this.listNotParameterized = listNotParameterized. }
false;public;0;3;;public Map<String, Bean> getMap() {     return map. }
false;public;1;3;;public void setMap(Map<String, Bean> map) {     this.map = map. }
