commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void supportedMediaTypes() throws Exception {     assertEquals(Arrays.asList(MediaType.parseMediaType("application/json.charset=UTF-8"), MediaType.parseMediaType("application/*+json.charset=UTF-8")), this.view.getSupportedMediaTypes()). }
false;public;0;9;;@Test public void singleMatch() throws Exception {     this.view.setModelKeys(Collections.singleton("foo2")).     this.model.addAttribute("foo1", Collections.singleton("bar1")).     this.model.addAttribute("foo2", Collections.singleton("bar2")).     this.model.addAttribute("foo3", Collections.singleton("bar3")).     assertEquals("[\"bar2\"]", doRender()). }
false;public;0;7;;@Test public void noMatch() throws Exception {     this.view.setModelKeys(Collections.singleton("foo2")).     this.model.addAttribute("foo1", "bar1").     assertEquals("", doRender()). }
false;public;0;8;;@Test public void noMatchBecauseNotSupported() throws Exception {     this.view = new HttpMessageWriterView(new Jaxb2XmlEncoder()).     this.view.setModelKeys(new HashSet<>(Collections.singletonList("foo1"))).     this.model.addAttribute("foo1", "bar1").     assertEquals("", doRender()). }
false;public;0;9;;@Test public void multipleMatches() throws Exception {     this.view.setModelKeys(new HashSet<>(Arrays.asList("foo1", "foo2"))).     this.model.addAttribute("foo1", Collections.singleton("bar1")).     this.model.addAttribute("foo2", Collections.singleton("bar2")).     this.model.addAttribute("foo3", Collections.singleton("bar3")).     assertEquals("{\"foo1\":[\"bar1\"],\"foo2\":[\"bar2\"]}", doRender()). }
false;public;0;16;;@Test public void multipleMatchesNotSupported() throws Exception {     this.view = new HttpMessageWriterView(CharSequenceEncoder.allMimeTypes()).     this.view.setModelKeys(new HashSet<>(Arrays.asList("foo1", "foo2"))).     this.model.addAttribute("foo1", "bar1").     this.model.addAttribute("foo2", "bar2").     try {         doRender().         fail().     } catch (IllegalStateException ex) {         String message = ex.getMessage().         assertTrue(message, message.contains("Map rendering is not supported")).     } }
false;public;0;15;;@Test public void render() throws Exception {     Map<String, String> pojoData = new LinkedHashMap<>().     pojoData.put("foo", "f").     pojoData.put("bar", "b").     this.model.addAttribute("pojoData", pojoData).     this.view.setModelKeys(Collections.singleton("pojoData")).     this.view.render(this.model, MediaType.APPLICATION_JSON, exchange).block(Duration.ZERO).     StepVerifier.create(this.exchange.getResponse().getBody()).consumeNextWith(buf -> assertEquals("{\"foo\":\"f\",\"bar\":\"b\"}", dumpString(buf))).expectComplete().verify(). }
false;private;1;3;;private String dumpString(DataBuffer buf) {     return DataBufferTestUtils.dumpString(buf, StandardCharsets.UTF_8). }
false;private;0;4;;private String doRender() {     this.view.render(this.model, MediaType.APPLICATION_JSON, this.exchange).block(Duration.ZERO).     return this.exchange.getResponse().getBodyAsString().block(Duration.ZERO). }
false;private;0;4;;@SuppressWarnings("unused") private String handle() {     return null. }
