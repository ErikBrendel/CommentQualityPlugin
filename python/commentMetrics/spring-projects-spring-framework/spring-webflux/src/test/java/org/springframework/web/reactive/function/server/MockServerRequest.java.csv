commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public HttpMethod method() {     return this.method. }
false;public;0;4;;@Override public String methodName() {     return this.method.name(). }
false;public;0;4;;@Override public URI uri() {     return this.uri. }
false;public;0;4;;@Override public UriBuilder uriBuilder() {     return UriComponentsBuilder.fromUri(this.uri). }
false;public;0;4;;@Override public PathContainer pathContainer() {     return this.pathContainer. }
false;public;0;4;;@Override public Headers headers() {     return this.headers. }
false;public;0;4;;@Override public MultiValueMap<String, HttpCookie> cookies() {     return this.cookies. }
false;public;0;4;;@Override public Optional<InetSocketAddress> remoteAddress() {     return Optional.ofNullable(this.remoteAddress). }
false;public;0;4;;@Override public List<HttpMessageReader<?>> messageReaders() {     return this.messageReaders. }
false;public;1;6;;@Override @SuppressWarnings("unchecked") public <S> S body(BodyExtractor<S, ? super ServerHttpRequest> extractor) {     Assert.state(this.body != null, "No body").     return (S) this.body. }
false;public;2;6;;@Override @SuppressWarnings("unchecked") public <S> S body(BodyExtractor<S, ? super ServerHttpRequest> extractor, Map<String, Object> hints) {     Assert.state(this.body != null, "No body").     return (S) this.body. }
false;public;1;6;;@Override @SuppressWarnings("unchecked") public <S> Mono<S> bodyToMono(Class<? extends S> elementClass) {     Assert.state(this.body != null, "No body").     return (Mono<S>) this.body. }
false;public;1;6;;@Override @SuppressWarnings("unchecked") public <S> Mono<S> bodyToMono(ParameterizedTypeReference<S> typeReference) {     Assert.state(this.body != null, "No body").     return (Mono<S>) this.body. }
false;public;1;6;;@Override @SuppressWarnings("unchecked") public <S> Flux<S> bodyToFlux(Class<? extends S> elementClass) {     Assert.state(this.body != null, "No body").     return (Flux<S>) this.body. }
false;public;1;6;;@Override @SuppressWarnings("unchecked") public <S> Flux<S> bodyToFlux(ParameterizedTypeReference<S> typeReference) {     Assert.state(this.body != null, "No body").     return (Flux<S>) this.body. }
false;public;0;4;;@Override public Map<String, Object> attributes() {     return this.attributes. }
false;public;0;4;;@Override public MultiValueMap<String, String> queryParams() {     return CollectionUtils.unmodifiableMultiValueMap(this.queryParams). }
false;public;0;4;;@Override public Map<String, String> pathVariables() {     return Collections.unmodifiableMap(this.pathVariables). }
false;public;0;4;;@Override public Mono<WebSession> session() {     return Mono.justOrEmpty(this.session). }
false;public;0;4;;@Override public Mono<? extends Principal> principal() {     return Mono.justOrEmpty(this.principal). }
false;public;0;6;;@Override @SuppressWarnings("unchecked") public Mono<MultiValueMap<String, String>> formData() {     Assert.state(this.body != null, "No body").     return (Mono<MultiValueMap<String, String>>) this.body. }
false;public;0;6;;@Override @SuppressWarnings("unchecked") public Mono<MultiValueMap<String, Part>> multipartData() {     Assert.state(this.body != null, "No body").     return (Mono<MultiValueMap<String, Part>>) this.body. }
false;public;0;5;;@Override public ServerWebExchange exchange() {     Assert.state(this.exchange != null, "No exchange").     return this.exchange. }
false;public,static;0;3;;public static Builder builder() {     return new BuilderImpl(). }
false;;1;1;;Builder method(HttpMethod method).
false;;1;1;;Builder uri(URI uri).
false;;1;1;;Builder contextPath(String contextPath).
false;;2;1;;Builder header(String key, String value).
false;;1;1;;Builder headers(HttpHeaders headers).
false;;1;1;;Builder cookie(HttpCookie... cookies).
false;;1;1;;Builder cookies(MultiValueMap<String, HttpCookie> cookies).
false;;2;1;;Builder attribute(String name, Object value).
false;;1;1;;Builder attributes(Map<String, Object> attributes).
false;;2;1;;Builder queryParam(String key, String value).
false;;1;1;;Builder queryParams(MultiValueMap<String, String> queryParams).
false;;2;1;;Builder pathVariable(String key, String value).
false;;1;1;;Builder pathVariables(Map<String, String> pathVariables).
false;;1;1;;Builder session(WebSession session).
true;;1;2;/**  * @deprecated in favor of {@link #principal(Principal)}  */ ;/**  * @deprecated in favor of {@link #principal(Principal)}  */ @Deprecated Builder session(Principal principal).
false;;1;1;;Builder principal(Principal principal).
false;;1;1;;Builder remoteAddress(InetSocketAddress remoteAddress).
false;;1;1;;Builder messageReaders(List<HttpMessageReader<?>> messageReaders).
false;;1;1;;Builder exchange(ServerWebExchange exchange).
false;;1;1;;MockServerRequest body(Object body).
false;;0;1;;MockServerRequest build().
false;public;1;6;;@Override public Builder method(HttpMethod method) {     Assert.notNull(method, "'method' must not be null").     this.method = method.     return this. }
false;public;1;6;;@Override public Builder uri(URI uri) {     Assert.notNull(uri, "'uri' must not be null").     this.uri = uri.     return this. }
false;public;1;7;;@Override public Builder contextPath(String contextPath) {     Assert.notNull(contextPath, "'contextPath' must not be null").     this.contextPath = contextPath.     return this. }
false;public;1;5;;@Override public Builder cookie(HttpCookie... cookies) {     Arrays.stream(cookies).forEach(cookie -> this.cookies.add(cookie.getName(), cookie)).     return this. }
false;public;1;6;;@Override public Builder cookies(MultiValueMap<String, HttpCookie> cookies) {     Assert.notNull(cookies, "'cookies' must not be null").     this.cookies = cookies.     return this. }
false;public;2;7;;@Override public Builder header(String key, String value) {     Assert.notNull(key, "'key' must not be null").     Assert.notNull(value, "'value' must not be null").     this.headers.header(key, value).     return this. }
false;public;1;6;;@Override public Builder headers(HttpHeaders headers) {     Assert.notNull(headers, "'headers' must not be null").     this.headers = new MockHeaders(headers).     return this. }
false;public;2;7;;@Override public Builder attribute(String name, Object value) {     Assert.notNull(name, "'name' must not be null").     Assert.notNull(value, "'value' must not be null").     this.attributes.put(name, value).     return this. }
false;public;1;6;;@Override public Builder attributes(Map<String, Object> attributes) {     Assert.notNull(attributes, "'attributes' must not be null").     this.attributes = attributes.     return this. }
false;public;2;7;;@Override public Builder queryParam(String key, String value) {     Assert.notNull(key, "'key' must not be null").     Assert.notNull(value, "'value' must not be null").     this.queryParams.add(key, value).     return this. }
false;public;1;6;;@Override public Builder queryParams(MultiValueMap<String, String> queryParams) {     Assert.notNull(queryParams, "'queryParams' must not be null").     this.queryParams = queryParams.     return this. }
false;public;2;7;;@Override public Builder pathVariable(String key, String value) {     Assert.notNull(key, "'key' must not be null").     Assert.notNull(value, "'value' must not be null").     this.pathVariables.put(key, value).     return this. }
false;public;1;6;;@Override public Builder pathVariables(Map<String, String> pathVariables) {     Assert.notNull(pathVariables, "'pathVariables' must not be null").     this.pathVariables = pathVariables.     return this. }
false;public;1;6;;@Override public Builder session(WebSession session) {     Assert.notNull(session, "'session' must not be null").     this.session = session.     return this. }
false;public;1;5;;@Override @Deprecated public Builder session(Principal principal) {     return principal(principal). }
false;public;1;6;;@Override public Builder principal(Principal principal) {     Assert.notNull(principal, "'principal' must not be null").     this.principal = principal.     return this. }
false;public;1;6;;@Override public Builder remoteAddress(InetSocketAddress remoteAddress) {     Assert.notNull(remoteAddress, "'remoteAddress' must not be null").     this.remoteAddress = remoteAddress.     return this. }
false;public;1;6;;@Override public Builder messageReaders(List<HttpMessageReader<?>> messageReaders) {     Assert.notNull(messageReaders, "'messageReaders' must not be null").     this.messageReaders = messageReaders.     return this. }
false;public;1;6;;@Override public Builder exchange(ServerWebExchange exchange) {     Assert.notNull(exchange, "'exchange' must not be null").     this.exchange = exchange.     return this. }
false;public;1;8;;@Override public MockServerRequest body(Object body) {     this.body = body.     return new MockServerRequest(this.method, this.uri, this.contextPath, this.headers, this.cookies, this.body, this.attributes, this.queryParams, this.pathVariables, this.session, this.principal, this.remoteAddress, this.messageReaders, this.exchange). }
false;public;0;7;;@Override public MockServerRequest build() {     return new MockServerRequest(this.method, this.uri, this.contextPath, this.headers, this.cookies, null, this.attributes, this.queryParams, this.pathVariables, this.session, this.principal, this.remoteAddress, this.messageReaders, this.exchange). }
false;private;0;3;;private HttpHeaders delegate() {     return this.headers. }
false;public;2;3;;public void header(String key, String value) {     this.headers.add(key, value). }
false;public;0;4;;@Override public List<MediaType> accept() {     return delegate().getAccept(). }
false;public;0;4;;@Override public List<Charset> acceptCharset() {     return delegate().getAcceptCharset(). }
false;public;0;4;;@Override public List<Locale.LanguageRange> acceptLanguage() {     return delegate().getAcceptLanguage(). }
false;public;0;4;;@Override public OptionalLong contentLength() {     return toOptionalLong(delegate().getContentLength()). }
false;public;0;4;;@Override public Optional<MediaType> contentType() {     return Optional.ofNullable(delegate().getContentType()). }
false;public;0;4;;@Override public InetSocketAddress host() {     return delegate().getHost(). }
false;public;0;4;;@Override public List<HttpRange> range() {     return delegate().getRange(). }
false;public;1;5;;@Override public List<String> header(String headerName) {     List<String> headerValues = delegate().get(headerName).     return headerValues != null ? headerValues : Collections.emptyList(). }
false;public;0;4;;@Override public HttpHeaders asHttpHeaders() {     return HttpHeaders.readOnlyHttpHeaders(delegate()). }
false;private;1;3;;private OptionalLong toOptionalLong(long value) {     return value != -1 ? OptionalLong.of(value) : OptionalLong.empty(). }
