commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;@Override protected ApplicationContext initApplicationContext() {     AnnotationConfigApplicationContext wac = new AnnotationConfigApplicationContext().     wac.register(WebConfig.class, TestRestController.class).     wac.refresh().     return wac. }
false;public;0;5;;@Test public void handleWithParam() throws Exception {     String expected = "Hello George!".     assertEquals(expected, performGet("/param?name=George", new HttpHeaders(), String.class).getBody()). }
false;public;0;5;;// SPR-15140 @Test public void handleWithEncodedParam() throws Exception {     String expected = "Hello  + \u00e0!".     assertEquals(expected, performGet("/param?name=%20%2B+%C3%A0", new HttpHeaders(), String.class).getBody()). }
false;public;0;6;;@Test public void matrixVariable() throws Exception {     String expected = "p=11, q2=22, q4=44".     String url = "/first.p=11/second.q=22/third-fourth.q=44".     assertEquals(expected, performGet(url, new HttpHeaders(), String.class).getBody()). }
false;public;1;4;;@GetMapping("/param") public Publisher<String> param(@RequestParam String name) {     return Flux.just("Hello ", name, "!"). }
false;public;3;8;;@GetMapping("/{one}/{two}/{three}-{four}") public String matrixVar(@MatrixVariable int p, @MatrixVariable(name = "q", pathVar = "two") int q2, @MatrixVariable(name = "q", pathVar = "four") int q4) {     return "p=" + p + ", q2=" + q2 + ", q4=" + q4. }
