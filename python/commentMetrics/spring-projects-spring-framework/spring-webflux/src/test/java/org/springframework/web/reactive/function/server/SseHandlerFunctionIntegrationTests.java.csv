commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setup() throws Exception {     super.setup().     this.webClient = WebClient.create("http://localhost:" + this.port). }
false;protected;0;7;;@Override protected RouterFunction<?> routerFunction() {     SseHandler sseHandler = new SseHandler().     return route(RequestPredicates.GET("/string"), sseHandler::string).and(route(RequestPredicates.GET("/person"), sseHandler::person)).and(route(RequestPredicates.GET("/event"), sseHandler::sse)). }
false;public;0;14;;@Test public void sseAsString() {     Flux<String> result = this.webClient.get().uri("/string").accept(TEXT_EVENT_STREAM).retrieve().bodyToFlux(String.class).     StepVerifier.create(result).expectNext("foo 0").expectNext("foo 1").expectComplete().verify(Duration.ofSeconds(5L)). }
false;public;0;14;;@Test public void sseAsPerson() {     Flux<Person> result = this.webClient.get().uri("/person").accept(TEXT_EVENT_STREAM).retrieve().bodyToFlux(Person.class).     StepVerifier.create(result).expectNext(new Person("foo 0")).expectNext(new Person("foo 1")).expectComplete().verify(Duration.ofSeconds(5L)). }
false;public;0;26;;@Test public void sseAsEvent() {     Flux<ServerSentEvent<String>> result = this.webClient.get().uri("/event").accept(TEXT_EVENT_STREAM).retrieve().bodyToFlux(new ParameterizedTypeReference<ServerSentEvent<String>>() {     }).     StepVerifier.create(result).consumeNextWith(event -> {         assertEquals("0", event.id()).         assertEquals("foo", event.data()).         assertEquals("bar", event.comment()).         assertNull(event.event()).         assertNull(event.retry()).     }).consumeNextWith(event -> {         assertEquals("1", event.id()).         assertEquals("foo", event.data()).         assertEquals("bar", event.comment()).         assertNull(event.event()).         assertNull(event.retry()).     }).expectComplete().verify(Duration.ofSeconds(5L)). }
false;;1;5;;Mono<ServerResponse> string(ServerRequest request) {     return ServerResponse.ok().contentType(MediaType.TEXT_EVENT_STREAM).body(INTERVAL.map(aLong -> "foo " + aLong), String.class). }
false;;1;5;;Mono<ServerResponse> person(ServerRequest request) {     return ServerResponse.ok().contentType(MediaType.TEXT_EVENT_STREAM).body(INTERVAL.map(aLong -> new Person("foo " + aLong)), Person.class). }
false;;1;5;;Mono<ServerResponse> sse(ServerRequest request) {     Flux<ServerSentEvent<String>> body = INTERVAL.map(aLong -> ServerSentEvent.builder("foo").id("" + aLong).comment("bar").build()).     return ServerResponse.ok().body(fromServerSentEvents(body)). }
false;public;0;3;;public String getName() {     return name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     Person person = (Person) o.     return !(this.name != null ? !this.name.equals(person.name) : person.name != null). }
false;public;0;4;;@Override public int hashCode() {     return this.name != null ? this.name.hashCode() : 0. }
false;public;0;4;;@Override public String toString() {     return "Person{" + "name='" + name + '\'' + '}'. }
