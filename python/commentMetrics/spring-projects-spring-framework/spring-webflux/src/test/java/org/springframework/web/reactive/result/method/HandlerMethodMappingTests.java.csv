commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setup() throws Exception {     this.mapping = new MyHandlerMethodMapping().     this.handler = new MyHandler().     this.method1 = handler.getClass().getMethod("handlerMethod1").     this.method2 = handler.getClass().getMethod("handlerMethod2"). }
false;public;0;5;;@Test(expected = IllegalStateException.class) public void registerDuplicates() {     this.mapping.registerMapping("foo", this.handler, this.method1).     this.mapping.registerMapping("foo", this.handler, this.method2). }
false;public;0;9;;@Test public void directMatch() throws Exception {     String key = "foo".     this.mapping.registerMapping(key, this.handler, this.method1).     MockServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get(key)).     Mono<Object> result = this.mapping.getHandler(exchange).     assertEquals(this.method1, ((HandlerMethod) result.block()).getMethod()). }
false;public;0;9;;@Test public void patternMatch() throws Exception {     this.mapping.registerMapping("/fo*", this.handler, this.method1).     this.mapping.registerMapping("/f*", this.handler, this.method2).     MockServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/foo")).     Mono<Object> result = this.mapping.getHandler(exchange).     assertEquals(this.method1, ((HandlerMethod) result.block()).getMethod()). }
false;public;0;9;;@Test public void ambiguousMatch() throws Exception {     this.mapping.registerMapping("/f?o", this.handler, this.method1).     this.mapping.registerMapping("/fo?", this.handler, this.method2).     MockServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/foo")).     Mono<Object> result = this.mapping.getHandler(exchange).     StepVerifier.create(result).expectError(IllegalStateException.class).verify(). }
false;public;0;10;;@Test public void registerMapping() throws Exception {     String key1 = "/foo".     String key2 = "/foo*".     this.mapping.registerMapping(key1, this.handler, this.method1).     this.mapping.registerMapping(key2, this.handler, this.method2).     assertThat(this.mapping.getMappingRegistry().getMappings().keySet(), Matchers.contains(key1, key2)). }
false;public;0;11;;@Test public void registerMappingWithSameMethodAndTwoHandlerInstances() throws Exception {     String key1 = "foo".     String key2 = "bar".     MyHandler handler1 = new MyHandler().     MyHandler handler2 = new MyHandler().     this.mapping.registerMapping(key1, handler1, this.method1).     this.mapping.registerMapping(key2, handler2, this.method1).     assertThat(this.mapping.getMappingRegistry().getMappings().keySet(), Matchers.contains(key1, key2)). }
false;public;0;14;;@Test public void unregisterMapping() throws Exception {     String key = "foo".     this.mapping.registerMapping(key, this.handler, this.method1).     Mono<Object> result = this.mapping.getHandler(MockServerWebExchange.from(MockServerHttpRequest.get(key))).     assertNotNull(result.block()).     this.mapping.unregisterMapping(key).     result = this.mapping.getHandler(MockServerWebExchange.from(MockServerHttpRequest.get(key))).     assertNull(result.block()).     assertThat(this.mapping.getMappingRegistry().getMappings().keySet(), Matchers.not(Matchers.contains(key))). }
false;protected;1;4;;@Override protected boolean isHandler(Class<?> beanType) {     return true. }
false;protected;2;5;;@Override protected String getMappingForMethod(Method method, Class<?> handlerType) {     String methodName = method.getName().     return methodName.startsWith("handler") ? methodName : null. }
false;protected;2;6;;@Override protected String getMatchingMapping(String pattern, ServerWebExchange exchange) {     PathContainer lookupPath = exchange.getRequest().getPath().pathWithinApplication().     PathPattern parsedPattern = this.parser.parse(pattern).     return (parsedPattern.matches(lookupPath) ? pattern : null). }
false;protected;1;4;;@Override protected Comparator<String> getMappingComparator(ServerWebExchange exchange) {     return (o1, o2) -> PathPattern.SPECIFICITY_COMPARATOR.compare(parser.parse(o1), parser.parse(o2)). }
false;public;0;4;;@RequestMapping @SuppressWarnings("unused") public void handlerMethod1() { }
false;public;0;4;;@RequestMapping @SuppressWarnings("unused") public void handlerMethod2() { }
