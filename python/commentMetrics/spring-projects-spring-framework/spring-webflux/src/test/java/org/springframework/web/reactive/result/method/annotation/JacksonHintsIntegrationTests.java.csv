commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;@Override protected ApplicationContext initApplicationContext() {     AnnotationConfigApplicationContext wac = new AnnotationConfigApplicationContext().     wac.register(WebConfig.class).     wac.refresh().     return wac. }
false;public;0;5;;@Test public void jsonViewResponse() throws Exception {     String expected = "{\"withView1\":\"with\"}".     assertEquals(expected, performGet("/response/raw", MediaType.APPLICATION_JSON_UTF8, String.class).getBody()). }
false;public;0;5;;@Test public void jsonViewWithMonoResponse() throws Exception {     String expected = "{\"withView1\":\"with\"}".     assertEquals(expected, performGet("/response/mono", MediaType.APPLICATION_JSON_UTF8, String.class).getBody()). }
false;public;0;5;;// SPR-16098 @Test public void jsonViewWithMonoResponseEntity() throws Exception {     String expected = "{\"withView1\":\"with\"}".     assertEquals(expected, performGet("/response/entity", MediaType.APPLICATION_JSON_UTF8, String.class).getBody()). }
false;public;0;5;;@Test public void jsonViewWithFluxResponse() throws Exception {     String expected = "[{\"withView1\":\"with\"},{\"withView1\":\"with\"}]".     assertEquals(expected, performGet("/response/flux", MediaType.APPLICATION_JSON_UTF8, String.class).getBody()). }
false;public;0;6;;@Test public void jsonViewWithRequest() throws Exception {     String expected = "{\"withView1\":\"with\",\"withView2\":null,\"withoutView\":null}".     assertEquals(expected, performPost("/request/raw", MediaType.APPLICATION_JSON, new JacksonViewBean("with", "with", "without"), MediaType.APPLICATION_JSON_UTF8, String.class).getBody()). }
false;public;0;6;;@Test public void jsonViewWithMonoRequest() throws Exception {     String expected = "{\"withView1\":\"with\",\"withView2\":null,\"withoutView\":null}".     assertEquals(expected, performPost("/request/mono", MediaType.APPLICATION_JSON, new JacksonViewBean("with", "with", "without"), MediaType.APPLICATION_JSON_UTF8, String.class).getBody()). }
false;public;0;7;;// SPR-16098 @Test public void jsonViewWithEntityMonoRequest() throws Exception {     String expected = "{\"withView1\":\"with\",\"withView2\":null,\"withoutView\":null}".     assertEquals(expected, performPost("/request/entity/mono", MediaType.APPLICATION_JSON, new JacksonViewBean("with", "with", "without"), MediaType.APPLICATION_JSON_UTF8, String.class).getBody()). }
false;public;0;10;;// SPR-16098 @Test public void jsonViewWithEntityFluxRequest() throws Exception {     String expected = "[" + "{\"withView1\":\"with\",\"withView2\":null,\"withoutView\":null}," + "{\"withView1\":\"with\",\"withView2\":null,\"withoutView\":null}]".     assertEquals(expected, performPost("/request/entity/flux", MediaType.APPLICATION_JSON, Arrays.asList(new JacksonViewBean("with", "with", "without"), new JacksonViewBean("with", "with", "without")), MediaType.APPLICATION_JSON_UTF8, String.class).getBody()). }
false;public;0;11;;@Test public void jsonViewWithFluxRequest() throws Exception {     String expected = "[" + "{\"withView1\":\"with\",\"withView2\":null,\"withoutView\":null}," + "{\"withView1\":\"with\",\"withView2\":null,\"withoutView\":null}]".     List<JacksonViewBean> beans = Arrays.asList(new JacksonViewBean("with", "with", "without"), new JacksonViewBean("with", "with", "without")).     assertEquals(expected, performPost("/request/flux", MediaType.APPLICATION_JSON, beans, MediaType.APPLICATION_JSON_UTF8, String.class).getBody()). }
false;public;0;5;;@GetMapping("/response/raw") @JsonView(MyJacksonView1.class) public JacksonViewBean rawResponse() {     return new JacksonViewBean("with", "with", "without"). }
false;public;0;5;;@GetMapping("/response/mono") @JsonView(MyJacksonView1.class) public Mono<JacksonViewBean> monoResponse() {     return Mono.just(new JacksonViewBean("with", "with", "without")). }
false;public;0;5;;@GetMapping("/response/entity") @JsonView(MyJacksonView1.class) public Mono<ResponseEntity<JacksonViewBean>> monoResponseEntity() {     return Mono.just(ResponseEntity.ok(new JacksonViewBean("with", "with", "without"))). }
false;public;0;5;;@GetMapping("/response/flux") @JsonView(MyJacksonView1.class) public Flux<JacksonViewBean> fluxResponse() {     return Flux.just(new JacksonViewBean("with", "with", "without"), new JacksonViewBean("with", "with", "without")). }
false;public;1;4;;@PostMapping("/request/raw") public JacksonViewBean rawRequest(@JsonView(MyJacksonView1.class) @RequestBody JacksonViewBean bean) {     return bean. }
false;public;1;4;;@PostMapping("/request/mono") public Mono<JacksonViewBean> monoRequest(@JsonView(MyJacksonView1.class) @RequestBody Mono<JacksonViewBean> mono) {     return mono. }
false;public;1;4;;@PostMapping("/request/entity/mono") public Mono<JacksonViewBean> entityMonoRequest(@JsonView(MyJacksonView1.class) HttpEntity<Mono<JacksonViewBean>> entityMono) {     return entityMono.getBody(). }
false;public;1;4;;@PostMapping("/request/entity/flux") public Flux<JacksonViewBean> entityFluxRequest(@JsonView(MyJacksonView1.class) HttpEntity<Flux<JacksonViewBean>> entityFlux) {     return entityFlux.getBody(). }
false;public;1;4;;@PostMapping("/request/flux") public Flux<JacksonViewBean> fluxRequest(@JsonView(MyJacksonView1.class) @RequestBody Flux<JacksonViewBean> flux) {     return flux. }
false;public;0;3;;public String getWithView1() {     return withView1. }
false;public;1;3;;public void setWithView1(String withView1) {     this.withView1 = withView1. }
false;public;0;3;;public String getWithView2() {     return withView2. }
false;public;1;3;;public void setWithView2(String withView2) {     this.withView2 = withView2. }
false;public;0;3;;public String getWithoutView() {     return withoutView. }
false;public;1;3;;public void setWithoutView(String withoutView) {     this.withoutView = withoutView. }
