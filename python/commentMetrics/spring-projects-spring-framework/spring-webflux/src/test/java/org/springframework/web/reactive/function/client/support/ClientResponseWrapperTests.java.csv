commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void createWrapper() {     this.mockResponse = mock(ClientResponse.class).     this.wrapper = new ClientResponseWrapper(mockResponse). }
false;public;0;4;;@Test public void response() {     assertSame(mockResponse, wrapper.response()). }
false;public;0;7;;@Test public void statusCode() {     HttpStatus status = HttpStatus.BAD_REQUEST.     when(mockResponse.statusCode()).thenReturn(status).     assertSame(status, wrapper.statusCode()). }
false;public;0;7;;@Test public void rawStatusCode() {     int status = 999.     when(mockResponse.rawStatusCode()).thenReturn(status).     assertEquals(status, wrapper.rawStatusCode()). }
false;public;0;7;;@Test public void headers() {     ClientResponse.Headers headers = mock(ClientResponse.Headers.class).     when(mockResponse.headers()).thenReturn(headers).     assertSame(headers, wrapper.headers()). }
false;public;0;8;;@Test @SuppressWarnings("unchecked") public void cookies() {     MultiValueMap<String, ResponseCookie> cookies = mock(MultiValueMap.class).     when(mockResponse.cookies()).thenReturn(cookies).     assertSame(cookies, wrapper.cookies()). }
false;public;0;8;;@Test public void bodyExtractor() {     Mono<String> result = Mono.just("foo").     BodyExtractor<Mono<String>, ReactiveHttpInputMessage> extractor = BodyExtractors.toMono(String.class).     when(mockResponse.body(extractor)).thenReturn(result).     assertSame(result, wrapper.body(extractor)). }
false;public;0;7;;@Test public void bodyToMonoClass() {     Mono<String> result = Mono.just("foo").     when(mockResponse.bodyToMono(String.class)).thenReturn(result).     assertSame(result, wrapper.bodyToMono(String.class)). }
false;public;0;8;;@Test public void bodyToMonoParameterizedTypeReference() {     Mono<String> result = Mono.just("foo").     ParameterizedTypeReference<String> reference = new ParameterizedTypeReference<String>() {     }.     when(mockResponse.bodyToMono(reference)).thenReturn(result).     assertSame(result, wrapper.bodyToMono(reference)). }
false;public;0;7;;@Test public void bodyToFluxClass() {     Flux<String> result = Flux.just("foo").     when(mockResponse.bodyToFlux(String.class)).thenReturn(result).     assertSame(result, wrapper.bodyToFlux(String.class)). }
false;public;0;8;;@Test public void bodyToFluxParameterizedTypeReference() {     Flux<String> result = Flux.just("foo").     ParameterizedTypeReference<String> reference = new ParameterizedTypeReference<String>() {     }.     when(mockResponse.bodyToFlux(reference)).thenReturn(result).     assertSame(result, wrapper.bodyToFlux(reference)). }
false;public;0;7;;@Test public void toEntityClass() {     Mono<ResponseEntity<String>> result = Mono.just(new ResponseEntity<>("foo", HttpStatus.OK)).     when(mockResponse.toEntity(String.class)).thenReturn(result).     assertSame(result, wrapper.toEntity(String.class)). }
false;public;0;8;;@Test public void toEntityParameterizedTypeReference() {     Mono<ResponseEntity<String>> result = Mono.just(new ResponseEntity<>("foo", HttpStatus.OK)).     ParameterizedTypeReference<String> reference = new ParameterizedTypeReference<String>() {     }.     when(mockResponse.toEntity(reference)).thenReturn(result).     assertSame(result, wrapper.toEntity(reference)). }
false;public;0;7;;@Test public void toEntityListClass() {     Mono<ResponseEntity<List<String>>> result = Mono.just(new ResponseEntity<>(singletonList("foo"), HttpStatus.OK)).     when(mockResponse.toEntityList(String.class)).thenReturn(result).     assertSame(result, wrapper.toEntityList(String.class)). }
false;public;0;8;;@Test public void toEntityListParameterizedTypeReference() {     Mono<ResponseEntity<List<String>>> result = Mono.just(new ResponseEntity<>(singletonList("foo"), HttpStatus.OK)).     ParameterizedTypeReference<String> reference = new ParameterizedTypeReference<String>() {     }.     when(mockResponse.toEntityList(reference)).thenReturn(result).     assertSame(result, wrapper.toEntityList(reference)). }
