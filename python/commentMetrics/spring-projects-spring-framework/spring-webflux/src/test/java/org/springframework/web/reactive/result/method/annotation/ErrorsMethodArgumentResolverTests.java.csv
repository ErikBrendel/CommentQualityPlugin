commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void supports() {     MethodParameter parameter = this.testMethod.arg(Errors.class).     assertTrue(this.resolver.supportsParameter(parameter)).     parameter = this.testMethod.arg(BindingResult.class).     assertTrue(this.resolver.supportsParameter(parameter)).     parameter = this.testMethod.arg(ResolvableType.forClassWithGenerics(Mono.class, Errors.class)).     assertTrue(this.resolver.supportsParameter(parameter)).     parameter = this.testMethod.arg(String.class).     assertFalse(this.resolver.supportsParameter(parameter)). }
false;public;0;11;;@Test public void resolve() {     BindingResult bindingResult = createBindingResult(new Foo(), "foo").     this.bindingContext.getModel().asMap().put(BindingResult.MODEL_KEY_PREFIX + "foo", bindingResult).     MethodParameter parameter = this.testMethod.arg(Errors.class).     Object actual = this.resolver.resolveArgument(parameter, this.bindingContext, this.exchange).block(Duration.ofMillis(5000)).     assertSame(bindingResult, actual). }
false;private;2;4;;private BindingResult createBindingResult(Foo target, String name) {     DataBinder binder = this.bindingContext.createDataBinder(this.exchange, target, name).     return binder.getBindingResult(). }
false;public;0;13;;@Test public void resolveWithMono() {     BindingResult bindingResult = createBindingResult(new Foo(), "foo").     MonoProcessor<BindingResult> monoProcessor = MonoProcessor.create().     monoProcessor.onNext(bindingResult).     this.bindingContext.getModel().asMap().put(BindingResult.MODEL_KEY_PREFIX + "foo", monoProcessor).     MethodParameter parameter = this.testMethod.arg(Errors.class).     Object actual = this.resolver.resolveArgument(parameter, this.bindingContext, this.exchange).block(Duration.ofMillis(5000)).     assertSame(bindingResult, actual). }
false;public;0;9;;@Test public void resolveWithMonoOnBindingResultAndModelAttribute() {     this.expectedException.expectMessage("An @ModelAttribute and an Errors/BindingResult argument " + "cannot both be declared with an async type wrapper.").     MethodParameter parameter = this.testMethod.arg(BindingResult.class).     this.resolver.resolveArgument(parameter, this.bindingContext, this.exchange).block(Duration.ofMillis(5000)). }
false;public;0;9;;// SPR-16187 @Test public void resolveWithBindingResultNotFound() {     this.expectedException.expectMessage("An Errors/BindingResult argument is expected " + "immediately after the @ModelAttribute argument").     MethodParameter parameter = this.testMethod.arg(Errors.class).     this.resolver.resolveArgument(parameter, this.bindingContext, this.exchange).block(Duration.ofMillis(5000)). }
false;public;0;3;;public String getName() {     return name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;;6;9;;@SuppressWarnings("unused") void handle(@ModelAttribute Foo foo, Errors errors, @ModelAttribute Mono<Foo> fooMono, BindingResult bindingResult, Mono<Errors> errorsMono, String string) { }
