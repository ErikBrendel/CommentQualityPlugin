commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected RouterFunction<?> routerFunction() {     return RouterFunctions.route(RequestPredicates.path("/"), this::render). }
false;public;1;3;;public Mono<RenderingResponse> render(ServerRequest request) {     return RenderingResponse.create("foo").build(). }
false;protected;0;7;;@Override protected HandlerStrategies handlerStrategies() {     return HandlerStrategies.builder().viewResolver(new DummyViewResolver()).localeContextResolver(new FixedLocaleContextResolver(Locale.GERMANY)).build(). }
false;public;0;15;;@Test public void fixedLocale() {     Mono<ClientResponse> result = webClient.get().uri("http://localhost:" + this.port + "/").exchange().     StepVerifier.create(result).consumeNextWith(response -> {         assertEquals(HttpStatus.OK, response.statusCode()).         assertEquals(Locale.GERMANY, response.headers().asHttpHeaders().getContentLanguage()).     }).verifyComplete(). }
false;public;2;4;;@Override public Mono<View> resolveViewName(String viewName, Locale locale) {     return Mono.just(new DummyView(locale)). }
false;public;0;4;;@Override public List<MediaType> getSupportedMediaTypes() {     return Collections.singletonList(MediaType.TEXT_HTML). }
false;public;3;6;;@Override public Mono<Void> render(@Nullable Map<String, ?> model, @Nullable MediaType contentType, ServerWebExchange exchange) {     exchange.getResponse().getHeaders().setContentLanguage(locale).     return Mono.empty(). }
