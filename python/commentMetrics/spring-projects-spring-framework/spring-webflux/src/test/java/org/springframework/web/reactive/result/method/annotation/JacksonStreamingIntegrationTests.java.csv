commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setup() throws Exception {     super.setup().     this.webClient = WebClient.create("http://localhost:" + this.port). }
false;protected;0;8;;@Override protected HttpHandler createHttpHandler() {     this.wac = new AnnotationConfigApplicationContext().     this.wac.register(TestConfiguration.class).     this.wac.refresh().     return WebHttpHandlerBuilder.webHandler(new DispatcherHandler(this.wac)).build(). }
false;public;0;14;;@Test public void jsonStreaming() {     Flux<Person> result = this.webClient.get().uri("/stream").accept(APPLICATION_STREAM_JSON).retrieve().bodyToFlux(Person.class).     StepVerifier.create(result).expectNext(new Person("foo 0")).expectNext(new Person("foo 1")).thenCancel().verify(). }
false;public;0;14;;@Test public void smileStreaming() {     Flux<Person> result = this.webClient.get().uri("/stream").accept(new MediaType("application", "stream+x-jackson-smile")).retrieve().bodyToFlux(Person.class).     StepVerifier.create(result).expectNext(new Person("foo 0")).expectNext(new Person("foo 1")).thenCancel().verify(). }
false;;0;5;;@GetMapping(value = "/stream", produces = { APPLICATION_STREAM_JSON_VALUE, "application/stream+x-jackson-smile" }) Flux<Person> person() {     return testInterval(Duration.ofMillis(100), 50).map(l -> new Person("foo " + l)). }
false;public;0;4;;@Bean public JacksonStreamingController jsonStreamingController() {     return new JacksonStreamingController(). }
false;public;0;3;;public String getName() {     return name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     Person person = (Person) o.     return !(this.name != null ? !this.name.equals(person.name) : person.name != null). }
false;public;0;4;;@Override public int hashCode() {     return this.name != null ? this.name.hashCode() : 0. }
false;public;0;6;;@Override public String toString() {     return "Person{" + "name='" + name + '\'' + '}'. }
