commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void paramEquals() {     assertEquals(new ParamsRequestCondition("foo"), new ParamsRequestCondition("foo")).     assertFalse(new ParamsRequestCondition("foo").equals(new ParamsRequestCondition("bar"))).     assertFalse(new ParamsRequestCondition("foo").equals(new ParamsRequestCondition("FOO"))).     assertEquals(new ParamsRequestCondition("foo=bar"), new ParamsRequestCondition("foo=bar")).     assertFalse(new ParamsRequestCondition("foo=bar").equals(new ParamsRequestCondition("FOO=bar"))). }
false;public;0;5;;@Test public void paramPresent() throws Exception {     ParamsRequestCondition condition = new ParamsRequestCondition("foo").     assertNotNull(condition.getMatchingCondition(MockServerWebExchange.from(get("/path?foo=")))). }
false;public;0;5;;// SPR-15831 @Test public void paramPresentNullValue() throws Exception {     ParamsRequestCondition condition = new ParamsRequestCondition("foo").     assertNotNull(condition.getMatchingCondition(MockServerWebExchange.from(get("/path?foo")))). }
false;public;0;5;;@Test public void paramPresentNoMatch() throws Exception {     ParamsRequestCondition condition = new ParamsRequestCondition("foo").     assertNull(condition.getMatchingCondition(MockServerWebExchange.from(get("/path?bar=")))). }
false;public;0;5;;@Test public void paramNotPresent() throws Exception {     MockServerWebExchange exchange = MockServerWebExchange.from(get("/")).     assertNotNull(new ParamsRequestCondition("!foo").getMatchingCondition(exchange)). }
false;public;0;5;;@Test public void paramValueMatch() throws Exception {     ParamsRequestCondition condition = new ParamsRequestCondition("foo=bar").     assertNotNull(condition.getMatchingCondition(MockServerWebExchange.from(get("/path?foo=bar")))). }
false;public;0;5;;@Test public void paramValueNoMatch() throws Exception {     ParamsRequestCondition condition = new ParamsRequestCondition("foo=bar").     assertNull(condition.getMatchingCondition(MockServerWebExchange.from(get("/path?foo=bazz")))). }
false;public;0;13;;@Test public void compareTo() throws Exception {     ServerWebExchange exchange = MockServerWebExchange.from(get("/")).     ParamsRequestCondition condition1 = new ParamsRequestCondition("foo", "bar", "baz").     ParamsRequestCondition condition2 = new ParamsRequestCondition("foo", "bar").     int result = condition1.compareTo(condition2, exchange).     assertTrue("Invalid comparison result: " + result, result < 0).     result = condition2.compareTo(condition1, exchange).     assertTrue("Invalid comparison result: " + result, result > 0). }
false;public;0;10;;// SPR-16674 @Test public void compareToWithMoreSpecificMatchByValue() {     ServerWebExchange exchange = MockServerWebExchange.from(get("/")).     ParamsRequestCondition condition1 = new ParamsRequestCondition("response_type=code").     ParamsRequestCondition condition2 = new ParamsRequestCondition("response_type").     int result = condition1.compareTo(condition2, exchange).     assertTrue("Invalid comparison result: " + result, result < 0). }
false;public;0;10;;@Test public void compareToWithNegatedMatch() {     ServerWebExchange exchange = MockServerWebExchange.from(get("/")).     ParamsRequestCondition condition1 = new ParamsRequestCondition("response_type!=code").     ParamsRequestCondition condition2 = new ParamsRequestCondition("response_type").     assertEquals("Negated match should not count as more specific", 0, condition1.compareTo(condition2, exchange)). }
false;public;0;9;;@Test public void combine() {     ParamsRequestCondition condition1 = new ParamsRequestCondition("foo=bar").     ParamsRequestCondition condition2 = new ParamsRequestCondition("foo=baz").     ParamsRequestCondition result = condition1.combine(condition2).     Collection<?> conditions = result.getContent().     assertEquals(2, conditions.size()). }
