commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Before public void setup() throws Exception {     ReactiveAdapterRegistry adapterRegistry = ReactiveAdapterRegistry.getSharedInstance().     this.resolver = new RequestParamMethodArgumentResolver(null, adapterRegistry, true).     ConfigurableWebBindingInitializer initializer = new ConfigurableWebBindingInitializer().     initializer.setConversionService(new DefaultFormattingConversionService()).     this.bindContext = new BindingContext(initializer). }
false;public;0;25;;@Test public void supportsParameter() {     MethodParameter param = this.testMethod.annot(requestParam().notRequired("bar")).arg(String.class).     assertTrue(this.resolver.supportsParameter(param)).     param = this.testMethod.annotPresent(RequestParam.class).arg(String[].class).     assertTrue(this.resolver.supportsParameter(param)).     param = this.testMethod.annot(requestParam().name("name")).arg(Map.class).     assertTrue(this.resolver.supportsParameter(param)).     param = this.testMethod.annot(requestParam().name("")).arg(Map.class).     assertFalse(this.resolver.supportsParameter(param)).     param = this.testMethod.annotNotPresent(RequestParam.class).arg(String.class).     assertTrue(this.resolver.supportsParameter(param)).     param = this.testMethod.annot(requestParam()).arg(String.class).     assertTrue(this.resolver.supportsParameter(param)).     param = this.testMethod.annot(requestParam().notRequired()).arg(String.class).     assertTrue(this.resolver.supportsParameter(param)). }
false;public;0;8;;@Test public void doesNotSupportParameterWithDefaultResolutionTurnedOff() {     ReactiveAdapterRegistry adapterRegistry = ReactiveAdapterRegistry.getSharedInstance().     this.resolver = new RequestParamMethodArgumentResolver(null, adapterRegistry, false).     MethodParameter param = this.testMethod.annotNotPresent(RequestParam.class).arg(String.class).     assertFalse(this.resolver.supportsParameter(param)). }
false;public;0;24;;@Test public void doesNotSupportReactiveWrapper() {     MethodParameter param.     try {         param = this.testMethod.annot(requestParam()).arg(Mono.class, String.class).         this.resolver.supportsParameter(param).         fail().     } catch (IllegalStateException ex) {         assertTrue("Unexpected error message:\n" + ex.getMessage(), ex.getMessage().startsWith("RequestParamMethodArgumentResolver doesn't support reactive type wrapper")).     }     try {         param = this.testMethod.annotNotPresent(RequestParam.class).arg(Mono.class, String.class).         this.resolver.supportsParameter(param).         fail().     } catch (IllegalStateException ex) {         assertTrue("Unexpected error message:\n" + ex.getMessage(), ex.getMessage().startsWith("RequestParamMethodArgumentResolver doesn't support reactive type wrapper")).     } }
false;public;0;6;;@Test public void resolveWithQueryString() {     MethodParameter param = this.testMethod.annot(requestParam().notRequired("bar")).arg(String.class).     MockServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/path?name=foo")).     assertEquals("foo", resolve(param, exchange)). }
false;public;0;8;;@Test public void resolveStringArray() {     MethodParameter param = this.testMethod.annotPresent(RequestParam.class).arg(String[].class).     MockServerHttpRequest request = MockServerHttpRequest.get("/path?name=foo&name=bar").build().     Object result = resolve(param, MockServerWebExchange.from(request)).     assertTrue(result instanceof String[]).     assertArrayEquals(new String[] { "foo", "bar" }, (String[]) result). }
false;public;0;5;;@Test public void resolveDefaultValue() {     MethodParameter param = this.testMethod.annot(requestParam().notRequired("bar")).arg(String.class).     assertEquals("bar", resolve(param, MockServerWebExchange.from(MockServerHttpRequest.get("/")))). }
false;public;0;7;;// SPR-17050 @Test public void resolveAndConvertNullValue() {     MethodParameter param = this.testMethod.annot(requestParam().notRequired()).arg(Integer.class).     assertNull(resolve(param, MockServerWebExchange.from(MockServerHttpRequest.get("/?nullParam=")))). }
false;public;0;12;;@Test public void missingRequestParam() {     MockServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/")).     MethodParameter param = this.testMethod.annotPresent(RequestParam.class).arg(String[].class).     Mono<Object> mono = this.resolver.resolveArgument(param, this.bindContext, exchange).     StepVerifier.create(mono).expectNextCount(0).expectError(ServerWebInputException.class).verify(). }
false;public;0;8;;@Test public void resolveSimpleTypeParam() {     MockServerHttpRequest request = MockServerHttpRequest.get("/path?stringNotAnnot=plainValue").build().     ServerWebExchange exchange = MockServerWebExchange.from(request).     MethodParameter param = this.testMethod.annotNotPresent(RequestParam.class).arg(String.class).     Object result = resolve(param, exchange).     assertEquals("plainValue", result). }
false;public;0;5;;// SPR-8561 @Test public void resolveSimpleTypeParamToNull() {     MethodParameter param = this.testMethod.annotNotPresent(RequestParam.class).arg(String.class).     assertNull(resolve(param, MockServerWebExchange.from(MockServerHttpRequest.get("/")))). }
false;public;0;7;;// SPR-10180 @Test public void resolveEmptyValueToDefault() {     ServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/path?name=")).     MethodParameter param = this.testMethod.annot(requestParam().notRequired("bar")).arg(String.class).     Object result = resolve(param, exchange).     assertEquals("bar", result). }
false;public;0;6;;@Test public void resolveEmptyValueWithoutDefault() {     MethodParameter param = this.testMethod.annotNotPresent(RequestParam.class).arg(String.class).     MockServerHttpRequest request = MockServerHttpRequest.get("/path?stringNotAnnot=").build().     assertEquals("", resolve(param, MockServerWebExchange.from(request))). }
false;public;0;6;;@Test public void resolveEmptyValueRequiredWithoutDefault() {     MethodParameter param = this.testMethod.annot(requestParam()).arg(String.class).     MockServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/path?name=")).     assertEquals("", resolve(param, exchange)). }
false;public;0;15;;@Test public void resolveOptionalParamValue() {     ServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/")).     MethodParameter param = this.testMethod.arg(forClassWithGenerics(Optional.class, Integer.class)).     Object result = resolve(param, exchange).     assertEquals(Optional.empty(), result).     exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/path?name=123")).     result = resolve(param, exchange).     assertEquals(Optional.class, result.getClass()).     Optional<?> value = (Optional<?>) result.     assertTrue(value.isPresent()).     assertEquals(123, value.get()). }
false;private;2;3;;private Object resolve(MethodParameter parameter, ServerWebExchange exchange) {     return this.resolver.resolveArgument(parameter, this.bindContext, exchange).block(Duration.ZERO). }
false;public;11;14;;@SuppressWarnings({ "unused", "OptionalUsedAsFieldOrParameterType" }) public void handle(@RequestParam(name = "name", defaultValue = "bar") String param1, @RequestParam("name") String[] param2, @RequestParam("name") Map<?, ?> param3, @RequestParam Map<?, ?> param4, String stringNotAnnot, Mono<String> monoStringNotAnnot, @RequestParam("name") String paramRequired, @RequestParam(name = "name", required = false) String paramNotRequired, @RequestParam("name") Optional<Integer> paramOptional, @RequestParam Mono<String> paramMono, @RequestParam(required = false) Integer nullParam) { }
