commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;11;;@Override protected HttpHandler createHttpHandler() {     this.wac = new AnnotationConfigApplicationContext().     this.wac.register(TestConfiguration.class).     this.wac.refresh().     DispatcherHandler webHandler = new DispatcherHandler().     webHandler.setApplicationContext(this.wac).     return WebHttpHandlerBuilder.webHandler(webHandler).build(). }
false;public;0;8;;@Test public void mono() {     ResponseEntity<Person> result = this.restTemplate.getForEntity("http://localhost:" + this.port + "/mono", Person.class).     assertEquals(HttpStatus.OK, result.getStatusCode()).     assertEquals("John", result.getBody().getName()). }
false;public;0;13;;@Test public void flux() {     ParameterizedTypeReference<List<Person>> reference = new ParameterizedTypeReference<List<Person>>() {     }.     ResponseEntity<List<Person>> result = this.restTemplate.exchange("http://localhost:" + this.port + "/flux", HttpMethod.GET, null, reference).     assertEquals(HttpStatus.OK, result.getStatusCode()).     List<Person> body = result.getBody().     assertEquals(2, body.size()).     assertEquals("John", body.get(0).getName()).     assertEquals("Jane", body.get(1).getName()). }
false;public;0;8;;@Test public void controller() {     ResponseEntity<Person> result = this.restTemplate.getForEntity("http://localhost:" + this.port + "/controller", Person.class).     assertEquals(HttpStatus.OK, result.getStatusCode()).     assertEquals("John", result.getBody().getName()). }
false;public;0;8;;@Test public void attributes() {     ResponseEntity<String> result = this.restTemplate.getForEntity("http://localhost:" + this.port + "/attributes/bar", String.class).     assertEquals(HttpStatus.OK, result.getStatusCode()). }
false;public;0;4;;@Bean public PersonHandler personHandler() {     return new PersonHandler(). }
false;public;0;4;;@Bean public PersonController personController() {     return new PersonController(). }
false;public;0;4;;@Bean public AttributesHandler attributesHandler() {     return new AttributesHandler(). }
false;public;1;4;;@Bean public RouterFunction<EntityResponse<Person>> monoRouterFunction(PersonHandler personHandler) {     return route(RequestPredicates.GET("/mono"), personHandler::mono). }
false;public;1;4;;@Bean public RouterFunction<ServerResponse> fluxRouterFunction(PersonHandler personHandler) {     return route(RequestPredicates.GET("/flux"), personHandler::flux). }
false;public;1;5;;@Bean public RouterFunction<ServerResponse> attributesRouterFunction(AttributesHandler attributesHandler) {     return nest(RequestPredicates.GET("/attributes"), route(RequestPredicates.GET("/{foo}"), attributesHandler::attributes)). }
false;public;1;4;;public Mono<EntityResponse<Person>> mono(ServerRequest request) {     Person person = new Person("John").     return EntityResponse.fromObject(person).build(). }
false;public;1;6;;public Mono<ServerResponse> flux(ServerRequest request) {     Person person1 = new Person("John").     Person person2 = new Person("Jane").     return ServerResponse.ok().body(fromPublisher(Flux.just(person1, person2), Person.class)). }
false;public;1;30;;@SuppressWarnings("unchecked") public Mono<ServerResponse> attributes(ServerRequest request) {     assertTrue(request.attributes().containsKey(RouterFunctions.REQUEST_ATTRIBUTE)).     assertTrue(request.attributes().containsKey(HandlerMapping.BEST_MATCHING_HANDLER_ATTRIBUTE)).     Map<String, String> pathVariables = (Map<String, String>) request.attributes().get(RouterFunctions.URI_TEMPLATE_VARIABLES_ATTRIBUTE).     assertNotNull(pathVariables).     assertEquals(1, pathVariables.size()).     assertEquals("bar", pathVariables.get("foo")).     pathVariables = (Map<String, String>) request.attributes().get(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE).     assertNotNull(pathVariables).     assertEquals(1, pathVariables.size()).     assertEquals("bar", pathVariables.get("foo")).     PathPattern pattern = (PathPattern) request.attributes().get(RouterFunctions.MATCHING_PATTERN_ATTRIBUTE).     assertNotNull(pattern).     assertEquals("/attributes/{foo}", pattern.getPatternString()).     pattern = (PathPattern) request.attributes().get(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE).     assertNotNull(pattern).     assertEquals("/attributes/{foo}", pattern.getPatternString()).     return ServerResponse.ok().build(). }
false;public;0;5;;@RequestMapping("/controller") @ResponseBody public Mono<Person> controller() {     return Mono.just(new Person("John")). }
false;public;0;3;;public String getName() {     return this.name. }
false;public;1;4;;@SuppressWarnings("unused") public void setName(String name) {     this.name = name. }
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     Person person = (Person) o.     return !(this.name != null ? !this.name.equals(person.name) : person.name != null). }
false;public;0;4;;@Override public int hashCode() {     return this.name != null ? this.name.hashCode() : 0. }
false;public;0;4;;@Override public String toString() {     return "Person{" + "name='" + this.name + '\'' + '}'. }
