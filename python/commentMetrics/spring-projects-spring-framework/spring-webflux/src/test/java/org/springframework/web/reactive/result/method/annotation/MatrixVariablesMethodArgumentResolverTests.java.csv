commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setUp() throws Exception {     this.exchange.getAttributes().put(HandlerMapping.MATRIX_VARIABLES_ATTRIBUTE, new LinkedHashMap<>()). }
false;public;0;11;;@Test public void supportsParameter() {     assertFalse(this.resolver.supportsParameter(this.testMethod.arg(String.class))).     assertTrue(this.resolver.supportsParameter(this.testMethod.annot(matrixAttribute().noName()).arg(List.class, String.class))).     assertTrue(this.resolver.supportsParameter(this.testMethod.annot(matrixAttribute().name("year")).arg(int.class))). }
false;public;0;11;;@Test public void resolveArgument() throws Exception {     MultiValueMap<String, String> params = getVariablesFor("cars").     params.add("colors", "red").     params.add("colors", "green").     params.add("colors", "blue").     MethodParameter param = this.testMethod.annot(matrixAttribute().noName()).arg(List.class, String.class).     assertEquals(Arrays.asList("red", "green", "blue"), this.resolver.resolveArgument(param, new BindingContext(), this.exchange).block(Duration.ZERO)). }
false;public;0;9;;@Test public void resolveArgumentPathVariable() throws Exception {     getVariablesFor("cars").add("year", "2006").     getVariablesFor("bikes").add("year", "2005").     MethodParameter param = this.testMethod.annot(matrixAttribute().name("year")).arg(int.class).     Object actual = this.resolver.resolveArgument(param, new BindingContext(), this.exchange).block(Duration.ZERO).     assertEquals(2006, actual). }
false;public;0;6;;@Test public void resolveArgumentDefaultValue() throws Exception {     MethodParameter param = this.testMethod.annot(matrixAttribute().name("year")).arg(int.class).     Object actual = this.resolver.resolveArgument(param, new BindingContext(), this.exchange).block(Duration.ZERO).     assertEquals(2013, actual). }
false;public;0;8;;@Test(expected = ServerErrorException.class) public void resolveArgumentMultipleMatches() throws Exception {     getVariablesFor("var1").add("colors", "red").     getVariablesFor("var2").add("colors", "green").     MethodParameter param = this.testMethod.annot(matrixAttribute().noName()).arg(List.class, String.class).     this.resolver.resolveArgument(param, new BindingContext(), this.exchange).block(Duration.ZERO). }
false;public;0;5;;@Test(expected = ServerWebInputException.class) public void resolveArgumentRequired() throws Exception {     MethodParameter param = this.testMethod.annot(matrixAttribute().noName()).arg(List.class, String.class).     this.resolver.resolveArgument(param, new BindingContext(), this.exchange).block(Duration.ZERO). }
false;public;0;9;;@Test public void resolveArgumentNoMatch() throws Exception {     MultiValueMap<String, String> params = getVariablesFor("cars").     params.add("anotherYear", "2012").     MethodParameter param = this.testMethod.annot(matrixAttribute().name("year")).arg(int.class).     Object actual = this.resolver.resolveArgument(param, new BindingContext(), this.exchange).block(Duration.ZERO).     assertEquals(2013, actual). }
false;private;1;9;;@SuppressWarnings("unchecked") private MultiValueMap<String, String> getVariablesFor(String pathVarName) {     Map<String, MultiValueMap<String, String>> matrixVariables = this.exchange.getAttribute(HandlerMapping.MATRIX_VARIABLES_ATTRIBUTE).     MultiValueMap<String, String> params = new LinkedMultiValueMap<>().     matrixVariables.put(pathVarName, params).     return params. }
false;;3;6;;@SuppressWarnings("unused") void handle(String stringArg, @MatrixVariable List<String> colors, @MatrixVariable(name = "year", pathVar = "cars", required = false, defaultValue = "2013") int preferredYear) { }
