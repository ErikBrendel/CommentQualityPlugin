commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Before public void setup() throws Exception {     List<HttpMessageWriter<?>> writerList = new ArrayList<>(5).     writerList.add(new EncoderHttpMessageWriter<>(new ByteBufferEncoder())).     writerList.add(new EncoderHttpMessageWriter<>(CharSequenceEncoder.allMimeTypes())).     writerList.add(new ResourceHttpMessageWriter()).     writerList.add(new EncoderHttpMessageWriter<>(new Jaxb2XmlEncoder())).     writerList.add(new EncoderHttpMessageWriter<>(new Jackson2JsonEncoder())).     RequestedContentTypeResolver resolver = new RequestedContentTypeResolverBuilder().build().     this.resultHandler = new ResponseBodyResultHandler(writerList, resolver). }
false;public;0;12;;@Test public void supports() throws NoSuchMethodException {     Object controller = new TestController().     Method method.     method = on(TestController.class).annotPresent(ResponseBody.class).resolveMethod().     testSupports(controller, method).     method = on(TestController.class).annotNotPresent(ResponseBody.class).resolveMethod("doWork").     HandlerResult handlerResult = getHandlerResult(controller, method).     assertFalse(this.resultHandler.supports(handlerResult)). }
false;public;0;17;;@Test public void supportsRestController() throws NoSuchMethodException {     Object controller = new TestRestController().     Method method.     method = on(TestRestController.class).returning(String.class).resolveMethod().     testSupports(controller, method).     method = on(TestRestController.class).returning(Mono.class, String.class).resolveMethod().     testSupports(controller, method).     method = on(TestRestController.class).returning(Single.class, String.class).resolveMethod().     testSupports(controller, method).     method = on(TestRestController.class).returning(Completable.class).resolveMethod().     testSupports(controller, method). }
false;private;2;4;;private void testSupports(Object controller, Method method) {     HandlerResult handlerResult = getHandlerResult(controller, method).     assertTrue(this.resultHandler.supports(handlerResult)). }
false;private;2;4;;private HandlerResult getHandlerResult(Object controller, Method method) {     HandlerMethod handlerMethod = new HandlerMethod(controller, method).     return new HandlerResult(handlerMethod, null, handlerMethod.getReturnType()). }
false;public;0;4;;@Test public void defaultOrder() throws Exception {     assertEquals(100, this.resultHandler.getOrder()). }
false;public;0;1;;public Mono<Void> handleToMonoVoid() {     return null. }
false;public;0;3;;public String handleToString() {     return null. }
false;public;0;3;;public Mono<String> handleToMonoString() {     return null. }
false;public;0;3;;public Single<String> handleToSingleString() {     return null. }
false;public;0;3;;public Completable handleToCompletable() {     return null. }
false;public;0;4;;@ResponseBody public String handleToString() {     return null. }
false;public;0;3;;public String doWork() {     return null. }
