commented;modifiers;parameterAmount;loc;comment;code
false;public;0;24;;@Test public void requestMappingHandlerMapping() throws Exception {     ApplicationContext context = loadConfig(WebFluxConfig.class).     final Field field = ReflectionUtils.findField(PathPatternParser.class, "matchOptionalTrailingSeparator").     ReflectionUtils.makeAccessible(field).     String name = "requestMappingHandlerMapping".     RequestMappingHandlerMapping mapping = context.getBean(name, RequestMappingHandlerMapping.class).     assertNotNull(mapping).     assertEquals(0, mapping.getOrder()).     PathPatternParser patternParser = mapping.getPathPatternParser().     assertNotNull(patternParser).     boolean matchOptionalTrailingSlash = (boolean) ReflectionUtils.getField(field, patternParser).     assertTrue(matchOptionalTrailingSlash).     name = "webFluxContentTypeResolver".     RequestedContentTypeResolver resolver = context.getBean(name, RequestedContentTypeResolver.class).     assertSame(resolver, mapping.getContentTypeResolver()).     ServerWebExchange exchange = MockServerWebExchange.from(get("/path").accept(MediaType.APPLICATION_JSON)).     assertEquals(Collections.singletonList(MediaType.APPLICATION_JSON), resolver.resolveMediaTypes(exchange)). }
false;public;0;20;;@Test public void customPathMatchConfig() {     ApplicationContext context = loadConfig(CustomPatchMatchConfig.class).     final Field field = ReflectionUtils.findField(PathPatternParser.class, "matchOptionalTrailingSeparator").     ReflectionUtils.makeAccessible(field).     String name = "requestMappingHandlerMapping".     RequestMappingHandlerMapping mapping = context.getBean(name, RequestMappingHandlerMapping.class).     assertNotNull(mapping).     PathPatternParser patternParser = mapping.getPathPatternParser().     assertNotNull(patternParser).     boolean matchOptionalTrailingSlash = (boolean) ReflectionUtils.getField(field, patternParser).     assertFalse(matchOptionalTrailingSlash).     Map<RequestMappingInfo, HandlerMethod> map = mapping.getHandlerMethods().     assertEquals(1, map.size()).     assertEquals(Collections.singleton(new PathPatternParser().parse("/api/user/{id}")), map.keySet().iterator().next().getPatternsCondition().getPatterns()). }
false;public;0;37;;@Test public void requestMappingHandlerAdapter() throws Exception {     ApplicationContext context = loadConfig(WebFluxConfig.class).     String name = "requestMappingHandlerAdapter".     RequestMappingHandlerAdapter adapter = context.getBean(name, RequestMappingHandlerAdapter.class).     assertNotNull(adapter).     List<HttpMessageReader<?>> readers = adapter.getMessageReaders().     assertEquals(13, readers.size()).     ResolvableType multiValueMapType = forClassWithGenerics(MultiValueMap.class, String.class, String.class).     assertHasMessageReader(readers, forClass(byte[].class), APPLICATION_OCTET_STREAM).     assertHasMessageReader(readers, forClass(ByteBuffer.class), APPLICATION_OCTET_STREAM).     assertHasMessageReader(readers, forClass(String.class), TEXT_PLAIN).     assertHasMessageReader(readers, forClass(Resource.class), IMAGE_PNG).     assertHasMessageReader(readers, forClass(Message.class), new MediaType("application", "x-protobuf")).     assertHasMessageReader(readers, multiValueMapType, APPLICATION_FORM_URLENCODED).     assertHasMessageReader(readers, forClass(TestBean.class), APPLICATION_XML).     assertHasMessageReader(readers, forClass(TestBean.class), APPLICATION_JSON).     assertHasMessageReader(readers, forClass(TestBean.class), new MediaType("application", "x-jackson-smile")).     assertHasMessageReader(readers, forClass(TestBean.class), null).     WebBindingInitializer bindingInitializer = adapter.getWebBindingInitializer().     assertNotNull(bindingInitializer).     WebExchangeDataBinder binder = new WebExchangeDataBinder(new Object()).     bindingInitializer.initBinder(binder).     name = "webFluxConversionService".     ConversionService service = context.getBean(name, ConversionService.class).     assertSame(service, binder.getConversionService()).     name = "webFluxValidator".     Validator validator = context.getBean(name, Validator.class).     assertSame(validator, binder.getValidator()). }
false;public;0;14;;@Test public void customMessageConverterConfig() throws Exception {     ApplicationContext context = loadConfig(CustomMessageConverterConfig.class).     String name = "requestMappingHandlerAdapter".     RequestMappingHandlerAdapter adapter = context.getBean(name, RequestMappingHandlerAdapter.class).     assertNotNull(adapter).     List<HttpMessageReader<?>> messageReaders = adapter.getMessageReaders().     assertEquals(2, messageReaders.size()).     assertHasMessageReader(messageReaders, forClass(String.class), TEXT_PLAIN).     assertHasMessageReader(messageReaders, forClass(TestBean.class), APPLICATION_XML). }
false;public;0;27;;@Test public void responseEntityResultHandler() throws Exception {     ApplicationContext context = loadConfig(WebFluxConfig.class).     String name = "responseEntityResultHandler".     ResponseEntityResultHandler handler = context.getBean(name, ResponseEntityResultHandler.class).     assertNotNull(handler).     assertEquals(0, handler.getOrder()).     List<HttpMessageWriter<?>> writers = handler.getMessageWriters().     assertEquals(11, writers.size()).     assertHasMessageWriter(writers, forClass(byte[].class), APPLICATION_OCTET_STREAM).     assertHasMessageWriter(writers, forClass(ByteBuffer.class), APPLICATION_OCTET_STREAM).     assertHasMessageWriter(writers, forClass(String.class), TEXT_PLAIN).     assertHasMessageWriter(writers, forClass(Resource.class), IMAGE_PNG).     assertHasMessageWriter(writers, forClass(Message.class), new MediaType("application", "x-protobuf")).     assertHasMessageWriter(writers, forClass(TestBean.class), APPLICATION_XML).     assertHasMessageWriter(writers, forClass(TestBean.class), APPLICATION_JSON).     assertHasMessageWriter(writers, forClass(TestBean.class), new MediaType("application", "x-jackson-smile")).     assertHasMessageWriter(writers, forClass(TestBean.class), MediaType.parseMediaType("text/event-stream")).     name = "webFluxContentTypeResolver".     RequestedContentTypeResolver resolver = context.getBean(name, RequestedContentTypeResolver.class).     assertSame(resolver, handler.getContentTypeResolver()). }
false;public;0;27;;@Test public void responseBodyResultHandler() throws Exception {     ApplicationContext context = loadConfig(WebFluxConfig.class).     String name = "responseBodyResultHandler".     ResponseBodyResultHandler handler = context.getBean(name, ResponseBodyResultHandler.class).     assertNotNull(handler).     assertEquals(100, handler.getOrder()).     List<HttpMessageWriter<?>> writers = handler.getMessageWriters().     assertEquals(11, writers.size()).     assertHasMessageWriter(writers, forClass(byte[].class), APPLICATION_OCTET_STREAM).     assertHasMessageWriter(writers, forClass(ByteBuffer.class), APPLICATION_OCTET_STREAM).     assertHasMessageWriter(writers, forClass(String.class), TEXT_PLAIN).     assertHasMessageWriter(writers, forClass(Resource.class), IMAGE_PNG).     assertHasMessageWriter(writers, forClass(Message.class), new MediaType("application", "x-protobuf")).     assertHasMessageWriter(writers, forClass(TestBean.class), APPLICATION_XML).     assertHasMessageWriter(writers, forClass(TestBean.class), APPLICATION_JSON).     assertHasMessageWriter(writers, forClass(TestBean.class), new MediaType("application", "x-jackson-smile")).     assertHasMessageWriter(writers, forClass(TestBean.class), null).     name = "webFluxContentTypeResolver".     RequestedContentTypeResolver resolver = context.getBean(name, RequestedContentTypeResolver.class).     assertSame(resolver, handler.getContentTypeResolver()). }
false;public;0;20;;@Test public void viewResolutionResultHandler() throws Exception {     ApplicationContext context = loadConfig(CustomViewResolverConfig.class).     String name = "viewResolutionResultHandler".     ViewResolutionResultHandler handler = context.getBean(name, ViewResolutionResultHandler.class).     assertNotNull(handler).     assertEquals(Ordered.LOWEST_PRECEDENCE, handler.getOrder()).     List<ViewResolver> resolvers = handler.getViewResolvers().     assertEquals(1, resolvers.size()).     assertEquals(FreeMarkerViewResolver.class, resolvers.get(0).getClass()).     List<View> views = handler.getDefaultViews().     assertEquals(1, views.size()).     MimeType type = MimeTypeUtils.parseMimeType("application/json.charset=UTF-8").     assertEquals(type, views.get(0).getSupportedMediaTypes().get(0)). }
false;public;0;14;;@Test public void resourceHandler() throws Exception {     ApplicationContext context = loadConfig(CustomResourceHandlingConfig.class).     String name = "resourceHandlerMapping".     AbstractUrlHandlerMapping handlerMapping = context.getBean(name, AbstractUrlHandlerMapping.class).     assertNotNull(handlerMapping).     assertEquals(Ordered.LOWEST_PRECEDENCE - 1, handlerMapping.getOrder()).     SimpleUrlHandlerMapping urlHandlerMapping = (SimpleUrlHandlerMapping) handlerMapping.     WebHandler webHandler = (WebHandler) urlHandlerMapping.getUrlMap().get("/images/**").     assertNotNull(webHandler). }
false;public;0;8;;@Test public void resourceUrlProvider() throws Exception {     ApplicationContext context = loadConfig(WebFluxConfig.class).     String name = "resourceUrlProvider".     ResourceUrlProvider resourceUrlProvider = context.getBean(name, ResourceUrlProvider.class).     assertNotNull(resourceUrlProvider). }
false;private;3;3;;private void assertHasMessageReader(List<HttpMessageReader<?>> readers, ResolvableType type, MediaType mediaType) {     assertTrue(readers.stream().anyMatch(c -> mediaType == null || c.canRead(type, mediaType))). }
false;private;3;3;;private void assertHasMessageWriter(List<HttpMessageWriter<?>> writers, ResolvableType type, MediaType mediaType) {     assertTrue(writers.stream().anyMatch(c -> mediaType == null || c.canWrite(type, mediaType))). }
false;private;1;6;;private ApplicationContext loadConfig(Class<?>... configurationClasses) {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     context.register(configurationClasses).     context.refresh().     return context. }
false;public;1;5;;@Override public void configurePathMatching(PathMatchConfigurer configurer) {     configurer.setUseTrailingSlashMatch(false).     configurer.addPathPrefix("/api", HandlerTypePredicate.forAnnotation(RestController.class)). }
false;;0;4;;@Bean UserController userController() {     return new UserController(). }
false;public;0;4;;@GetMapping("/{id}") public Principal getUser() {     return mock(Principal.class). }
false;protected;1;8;;@Override protected void configureHttpMessageCodecs(ServerCodecConfigurer configurer) {     configurer.registerDefaults(false).     configurer.customCodecs().decoder(StringDecoder.textPlainOnly()).     configurer.customCodecs().decoder(new Jaxb2XmlDecoder()).     configurer.customCodecs().encoder(CharSequenceEncoder.textPlainOnly()).     configurer.customCodecs().encoder(new Jaxb2XmlEncoder()). }
false;protected;1;5;;@Override protected void configureViewResolvers(ViewResolverRegistry registry) {     registry.freeMarker().     registry.defaultViews(new HttpMessageWriterView(new Jackson2JsonEncoder())). }
false;public;0;4;;@Bean public FreeMarkerConfigurer freeMarkerConfig() {     return new FreeMarkerConfigurer(). }
false;protected;1;4;;@Override protected void addResourceHandlers(ResourceHandlerRegistry registry) {     registry.addResourceHandler("/images/**").addResourceLocations("/images/"). }
