commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setup() throws Exception {     super.setup().     this.webClient = WebClient.create("http://localhost:" + this.port). }
false;protected;0;7;;@Override protected ApplicationContext initApplicationContext() {     AnnotationConfigApplicationContext wac = new AnnotationConfigApplicationContext().     wac.register(TestConfiguration.class).     wac.refresh().     return wac. }
false;public;0;16;;@Test public void value() {     Mono<Msg> result = this.webClient.get().uri("/message").exchange().doOnNext(response -> {         Assert.assertFalse(response.headers().contentType().get().getParameters().containsKey("delimited")).         Assert.assertEquals("sample.proto", response.headers().header("X-Protobuf-Schema").get(0)).         Assert.assertEquals("Msg", response.headers().header("X-Protobuf-Message").get(0)).     }).flatMap(response -> response.bodyToMono(Msg.class)).     StepVerifier.create(result).expectNext(TEST_MSG).verifyComplete(). }
false;public;0;18;;@Test public void values() {     Flux<Msg> result = this.webClient.get().uri("/messages").exchange().doOnNext(response -> {         Assert.assertEquals("true", response.headers().contentType().get().getParameters().get("delimited")).         Assert.assertEquals("sample.proto", response.headers().header("X-Protobuf-Schema").get(0)).         Assert.assertEquals("Msg", response.headers().header("X-Protobuf-Message").get(0)).     }).flatMapMany(response -> response.bodyToFlux(Msg.class)).     StepVerifier.create(result).expectNext(TEST_MSG).expectNext(TEST_MSG).expectNext(TEST_MSG).verifyComplete(). }
false;public;0;18;;@Test public void streaming() {     Flux<Msg> result = this.webClient.get().uri("/message-stream").exchange().doOnNext(response -> {         Assert.assertEquals("true", response.headers().contentType().get().getParameters().get("delimited")).         Assert.assertEquals("sample.proto", response.headers().header("X-Protobuf-Schema").get(0)).         Assert.assertEquals("Msg", response.headers().header("X-Protobuf-Message").get(0)).     }).flatMapMany(response -> response.bodyToFlux(Msg.class)).     StepVerifier.create(result).expectNext(Msg.newBuilder().setFoo("Foo").setBlah(SecondMsg.newBuilder().setBlah(0).build()).build()).expectNext(Msg.newBuilder().setFoo("Foo").setBlah(SecondMsg.newBuilder().setBlah(1).build()).build()).thenCancel().verify(). }
false;public;0;10;;@Test public void empty() {     Mono<Msg> result = this.webClient.get().uri("/empty").retrieve().bodyToMono(Msg.class).     StepVerifier.create(result).verifyComplete(). }
false;public;0;10;;@Test public void defaultInstance() {     Mono<Msg> result = this.webClient.get().uri("/default-instance").retrieve().bodyToMono(Msg.class).     StepVerifier.create(result).verifyComplete(). }
false;;0;4;;@GetMapping("/message") Mono<Msg> message() {     return Mono.just(TEST_MSG). }
false;;0;4;;@GetMapping("/messages") Flux<Msg> messages() {     return Flux.just(TEST_MSG, TEST_MSG, TEST_MSG). }
false;;0;5;;@GetMapping(value = "/message-stream", produces = "application/x-protobuf.delimited=true") Flux<Msg> messageStream() {     return testInterval(Duration.ofMillis(50), 5).map(l -> Msg.newBuilder().setFoo("Foo").setBlah(SecondMsg.newBuilder().setBlah(l.intValue()).build()).build()). }
false;;0;4;;@GetMapping("/empty") Mono<Msg> empty() {     return Mono.empty(). }
false;;0;4;;@GetMapping("default-instance") Mono<Msg> defaultInstance() {     return Mono.just(Msg.getDefaultInstance()). }
