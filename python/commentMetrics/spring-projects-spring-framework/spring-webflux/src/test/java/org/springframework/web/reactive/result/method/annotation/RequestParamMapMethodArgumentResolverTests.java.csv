commented;modifiers;parameterAmount;loc;comment;code
false;public;0;25;;@Test public void supportsParameter() {     MethodParameter param = this.testMethod.annot(requestParam().name("")).arg(Map.class).     assertTrue(this.resolver.supportsParameter(param)).     param = this.testMethod.annotPresent(RequestParam.class).arg(MultiValueMap.class).     assertTrue(this.resolver.supportsParameter(param)).     param = this.testMethod.annot(requestParam().name("name")).arg(Map.class).     assertFalse(this.resolver.supportsParameter(param)).     param = this.testMethod.annotNotPresent(RequestParam.class).arg(Map.class).     assertFalse(this.resolver.supportsParameter(param)).     try {         param = this.testMethod.annot(requestParam()).arg(Mono.class, Map.class).         this.resolver.supportsParameter(param).         fail().     } catch (IllegalStateException ex) {         assertTrue("Unexpected error message:\n" + ex.getMessage(), ex.getMessage().startsWith("RequestParamMapMethodArgumentResolver doesn't support reactive type wrapper")).     } }
false;public;0;7;;@Test public void resolveMapArgumentWithQueryString() throws Exception {     MethodParameter param = this.testMethod.annot(requestParam().name("")).arg(Map.class).     Object result = resolve(param, MockServerWebExchange.from(MockServerHttpRequest.get("/path?foo=bar"))).     assertTrue(result instanceof Map).     assertEquals(Collections.singletonMap("foo", "bar"), result). }
false;public;0;9;;@Test public void resolveMultiValueMapArgument() throws Exception {     MethodParameter param = this.testMethod.annotPresent(RequestParam.class).arg(MultiValueMap.class).     ServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/path?foo=bar&foo=baz")).     Object result = resolve(param, exchange).     assertTrue(result instanceof MultiValueMap).     assertEquals(Collections.singletonMap("foo", Arrays.asList("bar", "baz")), result). }
false;private;2;3;;private Object resolve(MethodParameter parameter, ServerWebExchange exchange) {     return this.resolver.resolveArgument(parameter, null, exchange).block(Duration.ofMillis(0)). }
false;public;5;7;;public void handle(@RequestParam Map<?, ?> param1, @RequestParam MultiValueMap<?, ?> param2, @RequestParam("name") Map<?, ?> param3, Map<?, ?> param4, @RequestParam Mono<Map<?, ?>> paramMono) { }
