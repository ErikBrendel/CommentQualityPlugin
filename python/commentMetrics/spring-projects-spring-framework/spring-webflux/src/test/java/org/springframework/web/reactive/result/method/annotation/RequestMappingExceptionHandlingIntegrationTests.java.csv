commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;@Override protected ApplicationContext initApplicationContext() {     AnnotationConfigApplicationContext wac = new AnnotationConfigApplicationContext().     wac.register(WebConfig.class).     wac.refresh().     return wac. }
false;public;0;4;;@Test public void thrownException() throws Exception {     doTest("/thrown-exception", "Recovered from error: State"). }
false;public;0;4;;@Test public void thrownExceptionWithCause() throws Exception {     doTest("/thrown-exception-with-cause", "Recovered from error: State"). }
false;public;0;4;;@Test public void thrownExceptionWithCauseToHandle() throws Exception {     doTest("/thrown-exception-with-cause-to-handle", "Recovered from error: IO"). }
false;public;0;4;;@Test public void errorBeforeFirstItem() throws Exception {     doTest("/mono-error", "Recovered from error: Argument"). }
false;public;0;12;;// SPR-16051 @Test public void exceptionAfterSeveralItems() {     try {         performGet("/SPR-16051", new HttpHeaders(), String.class).getBody().         fail().     } catch (Throwable ex) {         String message = ex.getMessage().         assertNotNull(message).         assertTrue("Actual: " + message, message.startsWith("Error while extracting response")).     } }
false;public;0;14;;// SPR-16318 @Test public void exceptionFromMethodWithProducesCondition() throws Exception {     try {         HttpHeaders headers = new HttpHeaders().         headers.add("Accept", "text/plain, application/problem+json").         performGet("/SPR-16318", headers, String.class).getBody().         fail().     } catch (HttpStatusCodeException ex) {         assertEquals(500, ex.getRawStatusCode()).         assertEquals("application/problem+json.charset=UTF-8", ex.getResponseHeaders().getContentType().toString()).         assertEquals("{\"reason\":\"error\"}", ex.getResponseBodyAsString()).     } }
false;private;2;3;;private void doTest(String url, String expected) throws Exception {     assertEquals(expected, performGet(url, new HttpHeaders(), String.class).getBody()). }
false;public;0;4;;@GetMapping("/thrown-exception") public Publisher<String> handleAndThrowException() {     throw new IllegalStateException("State"). }
false;public;0;4;;@GetMapping("/thrown-exception-with-cause") public Publisher<String> handleAndThrowExceptionWithCause() {     throw new IllegalStateException("State", new IOException("IO")). }
false;public;0;4;;@GetMapping("/thrown-exception-with-cause-to-handle") public Publisher<String> handleAndThrowExceptionWithCauseToHandle() {     throw new RuntimeException("State", new IOException("IO")). }
false;public;0;4;;@GetMapping(path = "/mono-error") public Publisher<String> handleWithError() {     return Mono.error(new IllegalArgumentException("Argument")). }
false;public;0;10;;@GetMapping("/SPR-16051") public Flux<String> errors() {     return Flux.range(1, 10000).map(i -> {         if (i == 1000) {             throw new RuntimeException("Random error").         }         return i + ". foo bar".     }). }
false;public;0;4;;@GetMapping(path = "/SPR-16318", produces = "text/plain") public Mono<String> handleTextPlain() throws Exception {     return Mono.error(new Spr16318Exception()). }
false;public;1;4;;@ExceptionHandler public Publisher<String> handleArgumentException(IOException ex) {     return Mono.just("Recovered from error: " + ex.getMessage()). }
false;public;1;4;;@ExceptionHandler public Publisher<String> handleArgumentException(IllegalArgumentException ex) {     return Mono.just("Recovered from error: " + ex.getMessage()). }
false;public;1;4;;@ExceptionHandler public ResponseEntity<Publisher<String>> handleStateException(IllegalStateException ex) {     return ResponseEntity.ok(Mono.just("Recovered from error: " + ex.getMessage())). }
false;public;1;4;;@ExceptionHandler public ResponseEntity<Map<String, String>> handle(Spr16318Exception ex) {     return ResponseEntity.status(500).body(Collections.singletonMap("reason", "error")). }
