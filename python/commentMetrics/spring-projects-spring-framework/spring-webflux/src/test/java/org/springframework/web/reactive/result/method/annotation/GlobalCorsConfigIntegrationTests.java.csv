commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() throws Exception {     super.setup().     this.headers = new HttpHeaders().     this.headers.setOrigin("http://localhost:9000"). }
false;protected;0;7;;@Override protected ApplicationContext initApplicationContext() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     context.register(WebConfig.class).     context.refresh().     return context. }
false;protected;0;5;;@Override protected RestTemplate initRestTemplate() {     // JDK default HTTP client blacklists headers like Origin     return new RestTemplate(new HttpComponentsClientHttpRequestFactory()). }
false;public;0;7;;@Test public void actualRequestWithCorsEnabled() throws Exception {     ResponseEntity<String> entity = performGet("/cors", this.headers, String.class).     assertEquals(HttpStatus.OK, entity.getStatusCode()).     assertEquals("*", entity.getHeaders().getAccessControlAllowOrigin()).     assertEquals("cors", entity.getBody()). }
false;public;0;10;;@Test public void actualRequestWithCorsRejected() throws Exception {     try {         performGet("/cors-restricted", this.headers, String.class).         fail().     } catch (HttpClientErrorException e) {         assertEquals(HttpStatus.FORBIDDEN, e.getStatusCode()).     } }
false;public;0;7;;@Test public void actualRequestWithoutCorsEnabled() throws Exception {     ResponseEntity<String> entity = performGet("/welcome", this.headers, String.class).     assertEquals(HttpStatus.OK, entity.getStatusCode()).     assertNull(entity.getHeaders().getAccessControlAllowOrigin()).     assertEquals("welcome", entity.getBody()). }
false;public;0;7;;@Test public void actualRequestWithAmbiguousMapping() throws Exception {     this.headers.add(HttpHeaders.ACCEPT, MediaType.TEXT_HTML_VALUE).     ResponseEntity<String> entity = performGet("/ambiguous", this.headers, String.class).     assertEquals(HttpStatus.OK, entity.getStatusCode()).     assertEquals("*", entity.getHeaders().getAccessControlAllowOrigin()). }
false;public;0;9;;@Test public void preFlightRequestWithCorsEnabled() throws Exception {     this.headers.add(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, "GET").     ResponseEntity<String> entity = performOptions("/cors", this.headers, String.class).     assertEquals(HttpStatus.OK, entity.getStatusCode()).     assertEquals("*", entity.getHeaders().getAccessControlAllowOrigin()).     assertThat(entity.getHeaders().getAccessControlAllowMethods(), contains(HttpMethod.GET, HttpMethod.HEAD, HttpMethod.POST)). }
false;public;0;11;;@Test public void preFlightRequestWithCorsRejected() throws Exception {     try {         this.headers.add(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, "GET").         performOptions("/cors-restricted", this.headers, String.class).         fail().     } catch (HttpClientErrorException e) {         assertEquals(HttpStatus.FORBIDDEN, e.getStatusCode()).     } }
false;public;0;11;;@Test public void preFlightRequestWithoutCorsEnabled() throws Exception {     try {         this.headers.add(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, "GET").         performOptions("/welcome", this.headers, String.class).         fail().     } catch (HttpClientErrorException e) {         assertEquals(HttpStatus.FORBIDDEN, e.getStatusCode()).     } }
false;public;0;9;;@Test public void preFlightRequestWithCorsRestricted() throws Exception {     this.headers.set(HttpHeaders.ORIGIN, "http://foo").     this.headers.add(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, "GET").     ResponseEntity<String> entity = performOptions("/cors-restricted", this.headers, String.class).     assertEquals(HttpStatus.OK, entity.getStatusCode()).     assertEquals("http://foo", entity.getHeaders().getAccessControlAllowOrigin()).     assertThat(entity.getHeaders().getAccessControlAllowMethods(), contains(HttpMethod.GET, HttpMethod.POST)). }
false;public;0;11;;@Test public void preFlightRequestWithAmbiguousMapping() throws Exception {     this.headers.add(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, "GET").     ResponseEntity<String> entity = performOptions("/ambiguous", this.headers, String.class).     assertEquals(HttpStatus.OK, entity.getStatusCode()).     assertEquals("http://localhost:9000", entity.getHeaders().getAccessControlAllowOrigin()).     assertThat(entity.getHeaders().getAccessControlAllowMethods(), contains(HttpMethod.GET)).     assertEquals(true, entity.getHeaders().getAccessControlAllowCredentials()).     assertThat(entity.getHeaders().get(HttpHeaders.VARY), contains(HttpHeaders.ORIGIN, HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, HttpHeaders.ACCESS_CONTROL_REQUEST_HEADERS)). }
false;protected;1;9;;@Override protected void addCorsMappings(CorsRegistry registry) {     registry.addMapping("/cors-restricted").allowedOrigins("http://foo").allowedMethods("GET", "POST").     registry.addMapping("/cors").     registry.addMapping("/ambiguous").allowedMethods("GET", "POST"). }
false;public;0;4;;@GetMapping("/welcome") public String welcome() {     return "welcome". }
false;public;0;4;;@GetMapping("/cors") public String cors() {     return "cors". }
false;public;0;4;;@GetMapping("/cors-restricted") public String corsRestricted() {     return "corsRestricted". }
false;public;0;4;;@GetMapping(value = "/ambiguous", produces = MediaType.TEXT_PLAIN_VALUE) public String ambiguous1() {     return "ambiguous". }
false;public;0;4;;@GetMapping(value = "/ambiguous", produces = MediaType.TEXT_HTML_VALUE) public String ambiguous2() {     return "<p>ambiguous</p>". }
