commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void supportsParameter() throws Exception {     assertTrue(this.resolver.supportsParameter(this.testMethod.arg(Model.class))).     assertTrue(this.resolver.supportsParameter(this.testMethod.arg(Map.class, String.class, Object.class))).     assertTrue(this.resolver.supportsParameter(this.testMethod.arg(ModelMap.class))).     assertFalse(this.resolver.supportsParameter(this.testMethod.arg(Object.class))). }
false;public;0;6;;@Test public void resolveArgument() throws Exception {     testResolveArgument(this.testMethod.arg(Model.class)).     testResolveArgument(this.testMethod.arg(Map.class, String.class, Object.class)).     testResolveArgument(this.testMethod.arg(ModelMap.class)). }
false;private;1;5;;private void testResolveArgument(MethodParameter parameter) {     BindingContext context = new BindingContext().     Object result = this.resolver.resolveArgument(parameter, context, this.exchange).block(Duration.ZERO).     assertSame(context.getModel(), result). }
false;;4;2;;@SuppressWarnings("unused") void handle(Model model, Map<String, Object> map, ModelMap modelMap, Object object) { }
