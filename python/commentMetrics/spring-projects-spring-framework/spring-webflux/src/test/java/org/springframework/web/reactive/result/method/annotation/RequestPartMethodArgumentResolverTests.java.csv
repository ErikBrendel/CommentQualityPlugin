commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Before public void setup() throws Exception {     List<HttpMessageReader<?>> readers = ServerCodecConfigurer.create().getReaders().     ReactiveAdapterRegistry registry = ReactiveAdapterRegistry.getSharedInstance().     this.resolver = new RequestPartMethodArgumentResolver(readers, registry).     List<HttpMessageWriter<?>> writers = ClientCodecConfigurer.create().getWriters().     this.writer = new MultipartHttpMessageWriter(writers). }
false;public;0;26;;@Test public void supportsParameter() {     MethodParameter param.     param = this.testMethod.annot(requestPart()).arg(Person.class).     assertTrue(this.resolver.supportsParameter(param)).     param = this.testMethod.annot(requestPart()).arg(Mono.class, Person.class).     assertTrue(this.resolver.supportsParameter(param)).     param = this.testMethod.annot(requestPart()).arg(Flux.class, Person.class).     assertTrue(this.resolver.supportsParameter(param)).     param = this.testMethod.annot(requestPart()).arg(Part.class).     assertTrue(this.resolver.supportsParameter(param)).     param = this.testMethod.annot(requestPart()).arg(Mono.class, Part.class).     assertTrue(this.resolver.supportsParameter(param)).     param = this.testMethod.annot(requestPart()).arg(Flux.class, Part.class).     assertTrue(this.resolver.supportsParameter(param)).     param = this.testMethod.annotNotPresent(RequestPart.class).arg(Person.class).     assertFalse(this.resolver.supportsParameter(param)). }
false;public;0;9;;@Test public void person() {     MethodParameter param = this.testMethod.annot(requestPart()).arg(Person.class).     MultipartBodyBuilder bodyBuilder = new MultipartBodyBuilder().     bodyBuilder.part("name", new Person("Jones")).     Person actual = resolveArgument(param, bodyBuilder).     assertEquals("Jones", actual.getName()). }
false;public;0;11;;@Test public void listPerson() {     MethodParameter param = this.testMethod.annot(requestPart()).arg(List.class, Person.class).     MultipartBodyBuilder bodyBuilder = new MultipartBodyBuilder().     bodyBuilder.part("name", new Person("Jones")).     bodyBuilder.part("name", new Person("James")).     List<Person> actual = resolveArgument(param, bodyBuilder).     assertEquals("Jones", actual.get(0).getName()).     assertEquals("James", actual.get(1).getName()). }
false;public;0;9;;@Test public void monoPerson() {     MethodParameter param = this.testMethod.annot(requestPart()).arg(Mono.class, Person.class).     MultipartBodyBuilder bodyBuilder = new MultipartBodyBuilder().     bodyBuilder.part("name", new Person("Jones")).     Mono<Person> actual = resolveArgument(param, bodyBuilder).     assertEquals("Jones", actual.block().getName()). }
false;public;0;12;;@Test public void fluxPerson() {     MethodParameter param = this.testMethod.annot(requestPart()).arg(Flux.class, Person.class).     MultipartBodyBuilder bodyBuilder = new MultipartBodyBuilder().     bodyBuilder.part("name", new Person("Jones")).     bodyBuilder.part("name", new Person("James")).     Flux<Person> actual = resolveArgument(param, bodyBuilder).     List<Person> persons = actual.collectList().block().     assertEquals("Jones", persons.get(0).getName()).     assertEquals("James", persons.get(1).getName()). }
false;public;0;10;;@Test public void part() {     MethodParameter param = this.testMethod.annot(requestPart()).arg(Part.class).     MultipartBodyBuilder bodyBuilder = new MultipartBodyBuilder().     bodyBuilder.part("name", new Person("Jones")).     Part actual = resolveArgument(param, bodyBuilder).     DataBuffer buffer = DataBufferUtils.join(actual.content()).block().     assertEquals("{\"name\":\"Jones\"}", DataBufferTestUtils.dumpString(buffer, StandardCharsets.UTF_8)). }
false;public;0;11;;@Test public void listPart() {     MethodParameter param = this.testMethod.annot(requestPart()).arg(List.class, Part.class).     MultipartBodyBuilder bodyBuilder = new MultipartBodyBuilder().     bodyBuilder.part("name", new Person("Jones")).     bodyBuilder.part("name", new Person("James")).     List<Part> actual = resolveArgument(param, bodyBuilder).     assertEquals("{\"name\":\"Jones\"}", partToUtf8String(actual.get(0))).     assertEquals("{\"name\":\"James\"}", partToUtf8String(actual.get(1))). }
false;public;0;10;;@Test public void monoPart() {     MethodParameter param = this.testMethod.annot(requestPart()).arg(Mono.class, Part.class).     MultipartBodyBuilder bodyBuilder = new MultipartBodyBuilder().     bodyBuilder.part("name", new Person("Jones")).     Mono<Part> actual = resolveArgument(param, bodyBuilder).     Part part = actual.block().     assertEquals("{\"name\":\"Jones\"}", partToUtf8String(part)). }
false;public;0;12;;@Test public void fluxPart() {     MethodParameter param = this.testMethod.annot(requestPart()).arg(Flux.class, Part.class).     MultipartBodyBuilder bodyBuilder = new MultipartBodyBuilder().     bodyBuilder.part("name", new Person("Jones")).     bodyBuilder.part("name", new Person("James")).     Flux<Part> actual = resolveArgument(param, bodyBuilder).     List<Part> parts = actual.collectList().block().     assertEquals("{\"name\":\"Jones\"}", partToUtf8String(parts.get(0))).     assertEquals("{\"name\":\"James\"}", partToUtf8String(parts.get(1))). }
false;public;0;8;;@Test public void personRequired() {     MethodParameter param = this.testMethod.annot(requestPart()).arg(Person.class).     ServerWebExchange exchange = createExchange(new MultipartBodyBuilder()).     Mono<Object> result = this.resolver.resolveArgument(param, new BindingContext(), exchange).     StepVerifier.create(result).expectError(ServerWebInputException.class).verify(). }
false;public;0;8;;@Test public void personNotRequired() {     MethodParameter param = this.testMethod.annot(requestPart().notRequired()).arg(Person.class).     ServerWebExchange exchange = createExchange(new MultipartBodyBuilder()).     Mono<Object> result = this.resolver.resolveArgument(param, new BindingContext(), exchange).     StepVerifier.create(result).verifyComplete(). }
false;public;0;8;;@Test public void partRequired() {     MethodParameter param = this.testMethod.annot(requestPart()).arg(Part.class).     ServerWebExchange exchange = createExchange(new MultipartBodyBuilder()).     Mono<Object> result = this.resolver.resolveArgument(param, new BindingContext(), exchange).     StepVerifier.create(result).expectError(ServerWebInputException.class).verify(). }
false;public;0;8;;@Test public void partNotRequired() {     MethodParameter param = this.testMethod.annot(requestPart().notRequired()).arg(Part.class).     ServerWebExchange exchange = createExchange(new MultipartBodyBuilder()).     Mono<Object> result = this.resolver.resolveArgument(param, new BindingContext(), exchange).     StepVerifier.create(result).verifyComplete(). }
false;private;2;10;;@SuppressWarnings("unchecked") private <T> T resolveArgument(MethodParameter param, MultipartBodyBuilder builder) {     ServerWebExchange exchange = createExchange(builder).     Mono<Object> result = this.resolver.resolveArgument(param, new BindingContext(), exchange).     Object value = result.block(Duration.ofSeconds(5)).     assertNotNull(value).     assertTrue(param.getParameterType().isAssignableFrom(value.getClass())).     return (T) value. }
false;private;1;11;;private ServerWebExchange createExchange(MultipartBodyBuilder builder) {     MockClientHttpRequest clientRequest = new MockClientHttpRequest(HttpMethod.POST, "/").     this.writer.write(Mono.just(builder.build()), forClass(MultiValueMap.class), MediaType.MULTIPART_FORM_DATA, clientRequest, Collections.emptyMap()).block().     MockServerHttpRequest serverRequest = MockServerHttpRequest.post("/").contentType(clientRequest.getHeaders().getContentType()).body(clientRequest.getBody()).     return MockServerWebExchange.from(serverRequest). }
false;private;1;4;;private String partToUtf8String(Part part) {     DataBuffer buffer = DataBufferUtils.join(part.content()).block().     return DataBufferTestUtils.dumpString(buffer, StandardCharsets.UTF_8). }
false;;11;13;;@SuppressWarnings("unused") void handle(@RequestPart("name") Person person, @RequestPart("name") Mono<Person> personMono, @RequestPart("name") Flux<Person> personFlux, @RequestPart("name") List<Person> personList, @RequestPart("name") Part part, @RequestPart("name") Mono<Part> partMono, @RequestPart("name") Flux<Part> partFlux, @RequestPart("name") List<Part> partList, @RequestPart(name = "anotherPart", required = false) Person anotherPerson, @RequestPart(name = "anotherPart", required = false) Part anotherPart, Person notAnnotated) { }
false;public;0;3;;public String getName() {     return name. }
