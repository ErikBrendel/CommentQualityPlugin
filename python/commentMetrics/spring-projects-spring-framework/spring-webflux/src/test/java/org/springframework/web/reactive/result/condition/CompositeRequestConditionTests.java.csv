commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Before public void setup() throws Exception {     this.param1 = new ParamsRequestCondition("param1").     this.param2 = new ParamsRequestCondition("param2").     this.param3 = this.param1.combine(this.param2).     this.header1 = new HeadersRequestCondition("header1").     this.header2 = new HeadersRequestCondition("header2").     this.header3 = this.header1.combine(this.header2). }
false;public;0;8;;@Test public void combine() {     CompositeRequestCondition cond1 = new CompositeRequestCondition(this.param1, this.header1).     CompositeRequestCondition cond2 = new CompositeRequestCondition(this.param2, this.header2).     CompositeRequestCondition cond3 = new CompositeRequestCondition(this.param3, this.header3).     assertEquals(cond3, cond1.combine(cond2)). }
false;public;0;9;;@Test public void combineEmpty() {     CompositeRequestCondition empty = new CompositeRequestCondition().     CompositeRequestCondition notEmpty = new CompositeRequestCondition(this.param1).     assertSame(empty, empty.combine(empty)).     assertSame(notEmpty, notEmpty.combine(empty)).     assertSame(notEmpty, empty.combine(notEmpty)). }
false;public;0;6;;@Test(expected = IllegalArgumentException.class) public void combineDifferentLength() {     CompositeRequestCondition cond1 = new CompositeRequestCondition(this.param1).     CompositeRequestCondition cond2 = new CompositeRequestCondition(this.param1, this.header1).     cond1.combine(cond2). }
false;public;0;13;;@Test public void match() {     MockServerHttpRequest request = MockServerHttpRequest.get("/path?param1=paramValue1").build().     MockServerWebExchange exchange = MockServerWebExchange.from(request).     RequestCondition<?> condition1 = new RequestMethodsRequestCondition(RequestMethod.GET, RequestMethod.POST).     RequestCondition<?> condition2 = new RequestMethodsRequestCondition(RequestMethod.GET).     CompositeRequestCondition composite1 = new CompositeRequestCondition(this.param1, condition1).     CompositeRequestCondition composite2 = new CompositeRequestCondition(this.param1, condition2).     assertEquals(composite2, composite1.getMatchingCondition(exchange)). }
false;public;0;5;;@Test public void noMatch() {     CompositeRequestCondition cond = new CompositeRequestCondition(this.param1).     assertNull(cond.getMatchingCondition(MockServerWebExchange.from(MockServerHttpRequest.get("/")))). }
false;public;0;5;;@Test public void matchEmpty() {     CompositeRequestCondition empty = new CompositeRequestCondition().     assertSame(empty, empty.getMatchingCondition(MockServerWebExchange.from(MockServerHttpRequest.get("/")))). }
false;public;0;9;;@Test public void compare() {     CompositeRequestCondition cond1 = new CompositeRequestCondition(this.param1).     CompositeRequestCondition cond3 = new CompositeRequestCondition(this.param3).     MockServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/")).     assertEquals(1, cond1.compareTo(cond3, exchange)).     assertEquals(-1, cond3.compareTo(cond1, exchange)). }
false;public;0;10;;@Test public void compareEmpty() {     CompositeRequestCondition empty = new CompositeRequestCondition().     CompositeRequestCondition notEmpty = new CompositeRequestCondition(this.param1).     MockServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/")).     assertEquals(0, empty.compareTo(empty, exchange)).     assertEquals(-1, notEmpty.compareTo(empty, exchange)).     assertEquals(1, empty.compareTo(notEmpty, exchange)). }
false;public;0;6;;@Test(expected = IllegalArgumentException.class) public void compareDifferentLength() {     CompositeRequestCondition cond1 = new CompositeRequestCondition(this.param1).     CompositeRequestCondition cond2 = new CompositeRequestCondition(this.param1, this.header1).     cond1.compareTo(cond2, MockServerWebExchange.from(MockServerHttpRequest.get("/"))). }
