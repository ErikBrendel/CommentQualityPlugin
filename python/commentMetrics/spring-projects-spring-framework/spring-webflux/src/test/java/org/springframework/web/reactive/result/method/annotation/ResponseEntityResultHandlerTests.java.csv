commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() throws Exception {     this.resultHandler = createHandler(). }
false;private;1;17;;private ResponseEntityResultHandler createHandler(HttpMessageWriter<?>... writers) {     List<HttpMessageWriter<?>> writerList.     if (ObjectUtils.isEmpty(writers)) {         writerList = new ArrayList<>().         writerList.add(new EncoderHttpMessageWriter<>(new ByteBufferEncoder())).         writerList.add(new EncoderHttpMessageWriter<>(CharSequenceEncoder.textPlainOnly())).         writerList.add(new ResourceHttpMessageWriter()).         writerList.add(new EncoderHttpMessageWriter<>(new Jaxb2XmlEncoder())).         writerList.add(new EncoderHttpMessageWriter<>(new Jackson2JsonEncoder())).         writerList.add(new EncoderHttpMessageWriter<>(CharSequenceEncoder.allMimeTypes())).     } else {         writerList = Arrays.asList(writers).     }     RequestedContentTypeResolver resolver = new RequestedContentTypeResolverBuilder().build().     return new ResponseEntityResultHandler(writerList, resolver). }
false;public;0;24;;@Test public void supports() throws Exception {     Object value = null.     MethodParameter returnType = on(TestController.class).resolveReturnType(entity(String.class)).     assertTrue(this.resultHandler.supports(handlerResult(value, returnType))).     returnType = on(TestController.class).resolveReturnType(Mono.class, entity(String.class)).     assertTrue(this.resultHandler.supports(handlerResult(value, returnType))).     returnType = on(TestController.class).resolveReturnType(Single.class, entity(String.class)).     assertTrue(this.resultHandler.supports(handlerResult(value, returnType))).     returnType = on(TestController.class).resolveReturnType(CompletableFuture.class, entity(String.class)).     assertTrue(this.resultHandler.supports(handlerResult(value, returnType))).     returnType = on(TestController.class).resolveReturnType(HttpHeaders.class).     assertTrue(this.resultHandler.supports(handlerResult(value, returnType))).     // SPR-15785     value = ResponseEntity.ok("testing").     returnType = on(TestController.class).resolveReturnType(Object.class).     assertTrue(this.resultHandler.supports(handlerResult(value, returnType))). }
false;public;0;14;;@Test public void doesNotSupport() throws Exception {     Object value = null.     MethodParameter returnType = on(TestController.class).resolveReturnType(String.class).     assertFalse(this.resultHandler.supports(handlerResult(value, returnType))).     returnType = on(TestController.class).resolveReturnType(Completable.class).     assertFalse(this.resultHandler.supports(handlerResult(value, returnType))).     // SPR-15464     returnType = on(TestController.class).resolveReturnType(Flux.class).     assertFalse(this.resultHandler.supports(handlerResult(value, returnType))). }
false;public;0;4;;@Test public void defaultOrder() throws Exception {     assertEquals(0, this.resultHandler.getOrder()). }
false;public;0;12;;@Test public void responseEntityStatusCode() throws Exception {     ResponseEntity<Void> value = ResponseEntity.noContent().build().     MethodParameter returnType = on(TestController.class).resolveReturnType(entity(Void.class)).     HandlerResult result = handlerResult(value, returnType).     MockServerWebExchange exchange = MockServerWebExchange.from(get("/path")).     this.resultHandler.handleResult(exchange, result).block(Duration.ofSeconds(5)).     assertEquals(HttpStatus.NO_CONTENT, exchange.getResponse().getStatusCode()).     assertEquals(0, exchange.getResponse().getHeaders().size()).     assertResponseBodyIsEmpty(exchange). }
false;public;0;14;;@Test public void httpHeaders() throws Exception {     HttpHeaders headers = new HttpHeaders().     headers.setAllow(new LinkedHashSet<>(Arrays.asList(HttpMethod.GET, HttpMethod.POST, HttpMethod.OPTIONS))).     MethodParameter returnType = on(TestController.class).resolveReturnType(entity(Void.class)).     HandlerResult result = handlerResult(headers, returnType).     MockServerWebExchange exchange = MockServerWebExchange.from(get("/path")).     this.resultHandler.handleResult(exchange, result).block(Duration.ofSeconds(5)).     assertEquals(HttpStatus.OK, exchange.getResponse().getStatusCode()).     assertEquals(1, exchange.getResponse().getHeaders().size()).     assertEquals("GET,POST,OPTIONS", exchange.getResponse().getHeaders().getFirst("Allow")).     assertResponseBodyIsEmpty(exchange). }
false;public;0;14;;@Test public void responseEntityHeaders() throws Exception {     URI location = new URI("/path").     ResponseEntity<Void> value = ResponseEntity.created(location).build().     MethodParameter returnType = on(TestController.class).resolveReturnType(entity(Void.class)).     HandlerResult result = handlerResult(value, returnType).     MockServerWebExchange exchange = MockServerWebExchange.from(get("/path")).     this.resultHandler.handleResult(exchange, result).block(Duration.ofSeconds(5)).     assertEquals(HttpStatus.CREATED, exchange.getResponse().getStatusCode()).     assertEquals(1, exchange.getResponse().getHeaders().size()).     assertEquals(location, exchange.getResponse().getHeaders().getLocation()).     assertResponseBodyIsEmpty(exchange). }
false;public;0;11;;@Test public void handleResponseEntityWithNullBody() throws Exception {     Object returnValue = Mono.just(notFound().build()).     MethodParameter type = on(TestController.class).resolveReturnType(Mono.class, entity(String.class)).     HandlerResult result = handlerResult(returnValue, type).     MockServerWebExchange exchange = MockServerWebExchange.from(get("/path")).     this.resultHandler.handleResult(exchange, result).block(Duration.ofSeconds(5)).     assertEquals(HttpStatus.NOT_FOUND, exchange.getResponse().getStatusCode()).     assertResponseBodyIsEmpty(exchange). }
false;public;0;21;;@Test public void handleReturnTypes() throws Exception {     Object returnValue = ok("abc").     MethodParameter returnType = on(TestController.class).resolveReturnType(entity(String.class)).     testHandle(returnValue, returnType).     returnType = on(TestController.class).resolveReturnType(Object.class).     testHandle(returnValue, returnType).     returnValue = Mono.just(ok("abc")).     returnType = on(TestController.class).resolveReturnType(Mono.class, entity(String.class)).     testHandle(returnValue, returnType).     returnValue = Mono.just(ok("abc")).     returnType = on(TestController.class).resolveReturnType(Single.class, entity(String.class)).     testHandle(returnValue, returnType).     returnValue = Mono.just(ok("abc")).     returnType = on(TestController.class).resolveReturnType(CompletableFuture.class, entity(String.class)).     testHandle(returnValue, returnType). }
false;public;0;14;;@Test public void handleReturnValueLastModified() throws Exception {     Instant currentTime = Instant.now().truncatedTo(ChronoUnit.SECONDS).     Instant oneMinAgo = currentTime.minusSeconds(60).     long timestamp = currentTime.toEpochMilli().     MockServerWebExchange exchange = MockServerWebExchange.from(get("/path").ifModifiedSince(timestamp)).     ResponseEntity<String> entity = ok().lastModified(oneMinAgo.toEpochMilli()).body("body").     MethodParameter returnType = on(TestController.class).resolveReturnType(entity(String.class)).     HandlerResult result = handlerResult(entity, returnType).     this.resultHandler.handleResult(exchange, result).block(Duration.ofSeconds(5)).     assertConditionalResponse(exchange, HttpStatus.NOT_MODIFIED, null, null, oneMinAgo). }
false;public;0;12;;@Test public void handleReturnValueEtag() throws Exception {     String etagValue = "\"deadb33f8badf00d\"".     MockServerWebExchange exchange = MockServerWebExchange.from(get("/path").ifNoneMatch(etagValue)).     ResponseEntity<String> entity = ok().eTag(etagValue).body("body").     MethodParameter returnType = on(TestController.class).resolveReturnType(entity(String.class)).     HandlerResult result = handlerResult(entity, returnType).     this.resultHandler.handleResult(exchange, result).block(Duration.ofSeconds(5)).     assertConditionalResponse(exchange, HttpStatus.NOT_MODIFIED, null, etagValue, Instant.MIN). }
false;public;0;12;;// SPR-14559 @Test public void handleReturnValueEtagInvalidIfNoneMatch() throws Exception {     MockServerWebExchange exchange = MockServerWebExchange.from(get("/path").ifNoneMatch("unquoted")).     ResponseEntity<String> entity = ok().eTag("\"deadb33f8badf00d\"").body("body").     MethodParameter returnType = on(TestController.class).resolveReturnType(entity(String.class)).     HandlerResult result = handlerResult(entity, returnType).     this.resultHandler.handleResult(exchange, result).block(Duration.ofSeconds(5)).     assertEquals(HttpStatus.OK, exchange.getResponse().getStatusCode()).     assertResponseBody(exchange, "body"). }
false;public;0;19;;@Test public void handleReturnValueETagAndLastModified() throws Exception {     String eTag = "\"deadb33f8badf00d\"".     Instant currentTime = Instant.now().truncatedTo(ChronoUnit.SECONDS).     Instant oneMinAgo = currentTime.minusSeconds(60).     MockServerWebExchange exchange = MockServerWebExchange.from(get("/path").ifNoneMatch(eTag).ifModifiedSince(currentTime.toEpochMilli())).     ResponseEntity<String> entity = ok().eTag(eTag).lastModified(oneMinAgo.toEpochMilli()).body("body").     MethodParameter returnType = on(TestController.class).resolveReturnType(entity(String.class)).     HandlerResult result = handlerResult(entity, returnType).     this.resultHandler.handleResult(exchange, result).block(Duration.ofSeconds(5)).     assertConditionalResponse(exchange, HttpStatus.NOT_MODIFIED, null, eTag, oneMinAgo). }
false;public;0;20;;@Test public void handleReturnValueChangedETagAndLastModified() throws Exception {     String etag = "\"deadb33f8badf00d\"".     String newEtag = "\"changed-etag-value\"".     Instant currentTime = Instant.now().truncatedTo(ChronoUnit.SECONDS).     Instant oneMinAgo = currentTime.minusSeconds(60).     MockServerWebExchange exchange = MockServerWebExchange.from(get("/path").ifNoneMatch(etag).ifModifiedSince(currentTime.toEpochMilli())).     ResponseEntity<String> entity = ok().eTag(newEtag).lastModified(oneMinAgo.toEpochMilli()).body("body").     MethodParameter returnType = on(TestController.class).resolveReturnType(entity(String.class)).     HandlerResult result = handlerResult(entity, returnType).     this.resultHandler.handleResult(exchange, result).block(Duration.ofSeconds(5)).     assertConditionalResponse(exchange, HttpStatus.OK, "body", newEtag, oneMinAgo). }
false;public;0;13;;// SPR-14877 @Test public void handleMonoWithWildcardBodyType() throws Exception {     MockServerWebExchange exchange = MockServerWebExchange.from(get("/path")).     exchange.getAttributes().put(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, Collections.singleton(APPLICATION_JSON)).     MethodParameter type = on(TestController.class).resolveReturnType(Mono.class, ResponseEntity.class).     HandlerResult result = new HandlerResult(new TestController(), Mono.just(ok().body("body")), type).     this.resultHandler.handleResult(exchange, result).block(Duration.ofSeconds(5)).     assertEquals(HttpStatus.OK, exchange.getResponse().getStatusCode()).     assertResponseBody(exchange, "body"). }
false;public;0;13;;// SPR-14877 @Test public void handleMonoWithWildcardBodyTypeAndNullBody() throws Exception {     MockServerWebExchange exchange = MockServerWebExchange.from(get("/path")).     exchange.getAttributes().put(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, Collections.singleton(APPLICATION_JSON)).     MethodParameter returnType = on(TestController.class).resolveReturnType(Mono.class, ResponseEntity.class).     HandlerResult result = new HandlerResult(new TestController(), Mono.just(notFound().build()), returnType).     this.resultHandler.handleResult(exchange, result).block(Duration.ofSeconds(5)).     assertEquals(HttpStatus.NOT_FOUND, exchange.getResponse().getStatusCode()).     assertResponseBodyIsEmpty(exchange). }
false;public;0;14;;// SPR-17082 @Test public void handleResponseEntityWithExistingResponseHeaders() throws Exception {     ResponseEntity<Void> value = ResponseEntity.ok().contentType(MediaType.APPLICATION_JSON).build().     MethodParameter returnType = on(TestController.class).resolveReturnType(entity(Void.class)).     HandlerResult result = handlerResult(value, returnType).     MockServerWebExchange exchange = MockServerWebExchange.from(get("/path")).     exchange.getResponse().getHeaders().setContentType(MediaType.TEXT_PLAIN).     this.resultHandler.handleResult(exchange, result).block(Duration.ofSeconds(5)).     assertEquals(HttpStatus.OK, exchange.getResponse().getStatusCode()).     assertEquals(1, exchange.getResponse().getHeaders().size()).     assertEquals(MediaType.APPLICATION_JSON, exchange.getResponse().getHeaders().getContentType()).     assertResponseBodyIsEmpty(exchange). }
false;private;2;9;;private void testHandle(Object returnValue, MethodParameter returnType) {     MockServerWebExchange exchange = MockServerWebExchange.from(get("/path")).     HandlerResult result = handlerResult(returnValue, returnType).     this.resultHandler.handleResult(exchange, result).block(Duration.ofSeconds(5)).     assertEquals(HttpStatus.OK, exchange.getResponse().getStatusCode()).     assertEquals("text/plain.charset=UTF-8", exchange.getResponse().getHeaders().getFirst("Content-Type")).     assertResponseBody(exchange, "abc"). }
false;private;1;3;;private ResolvableType entity(Class<?> bodyType) {     return forClassWithGenerics(ResponseEntity.class, bodyType). }
false;private;2;3;;private HandlerResult handlerResult(Object returnValue, MethodParameter returnType) {     return new HandlerResult(new TestController(), returnValue, returnType). }
false;private;2;7;;private void assertResponseBody(MockServerWebExchange exchange, String responseBody) {     StepVerifier.create(exchange.getResponse().getBody()).consumeNextWith(buf -> assertEquals(responseBody, DataBufferTestUtils.dumpString(buf, StandardCharsets.UTF_8))).expectComplete().verify(). }
false;private;1;3;;private void assertResponseBodyIsEmpty(MockServerWebExchange exchange) {     StepVerifier.create(exchange.getResponse().getBody()).expectComplete().verify(). }
false;private;5;19;;private void assertConditionalResponse(MockServerWebExchange exchange, HttpStatus status, String body, String etag, Instant lastModified) throws Exception {     assertEquals(status, exchange.getResponse().getStatusCode()).     if (body != null) {         assertResponseBody(exchange, body).     } else {         assertResponseBodyIsEmpty(exchange).     }     if (etag != null) {         assertEquals(1, exchange.getResponse().getHeaders().get(HttpHeaders.ETAG).size()).         assertEquals(etag, exchange.getResponse().getHeaders().getETag()).     }     if (lastModified.isAfter(Instant.EPOCH)) {         assertEquals(1, exchange.getResponse().getHeaders().get(HttpHeaders.LAST_MODIFIED).size()).         assertEquals(lastModified.toEpochMilli(), exchange.getResponse().getHeaders().getLastModified()).     } }
false;;0;1;;ResponseEntity<String> responseEntityString() {     return null. }
false;;0;1;;ResponseEntity<Void> responseEntityVoid() {     return null. }
false;;0;1;;HttpHeaders httpHeaders() {     return null. }
false;;0;1;;Mono<ResponseEntity<String>> mono() {     return null. }
false;;0;1;;Single<ResponseEntity<String>> single() {     return null. }
false;;0;1;;CompletableFuture<ResponseEntity<String>> completableFuture() {     return null. }
false;;0;1;;String string() {     return null. }
false;;0;1;;Completable completable() {     return null. }
false;;0;1;;Mono<ResponseEntity<?>> monoResponseEntityWildcard() {     return null. }
false;;0;1;;Flux<?> fluxWildcard() {     return null. }
false;;0;1;;Object object() {     return null. }
