commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() throws Exception {     super.setup().     this.headers = new HttpHeaders().     this.headers.setOrigin("http://site1.com"). }
false;protected;0;11;;@Override protected ApplicationContext initApplicationContext() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     context.register(WebConfig.class).     Properties props = new Properties().     props.setProperty("myOrigin", "http://site1.com").     context.getEnvironment().getPropertySources().addFirst(new PropertiesPropertySource("ps", props)).     context.register(PropertySourcesPlaceholderConfigurer.class).     context.refresh().     return context. }
false;protected;0;5;;@Override protected RestTemplate initRestTemplate() {     // JDK default HTTP client blacklist headers like Origin     return new RestTemplate(new HttpComponentsClientHttpRequestFactory()). }
false;public;0;7;;@Test public void actualGetRequestWithoutAnnotation() throws Exception {     ResponseEntity<String> entity = performGet("/no", this.headers, String.class).     assertEquals(HttpStatus.OK, entity.getStatusCode()).     assertNull(entity.getHeaders().getAccessControlAllowOrigin()).     assertEquals("no", entity.getBody()). }
false;public;0;7;;@Test public void actualPostRequestWithoutAnnotation() throws Exception {     ResponseEntity<String> entity = performPost("/no", this.headers, null, String.class).     assertEquals(HttpStatus.OK, entity.getStatusCode()).     assertNull(entity.getHeaders().getAccessControlAllowOrigin()).     assertEquals("no-post", entity.getBody()). }
false;public;0;8;;@Test public void actualRequestWithDefaultAnnotation() throws Exception {     ResponseEntity<String> entity = performGet("/default", this.headers, String.class).     assertEquals(HttpStatus.OK, entity.getStatusCode()).     assertEquals("*", entity.getHeaders().getAccessControlAllowOrigin()).     assertFalse(entity.getHeaders().getAccessControlAllowCredentials()).     assertEquals("default", entity.getBody()). }
false;public;0;9;;@Test public void preflightRequestWithDefaultAnnotation() throws Exception {     this.headers.add(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, "GET").     ResponseEntity<Void> entity = performOptions("/default", this.headers, Void.class).     assertEquals(HttpStatus.OK, entity.getStatusCode()).     assertEquals("*", entity.getHeaders().getAccessControlAllowOrigin()).     assertEquals(1800, entity.getHeaders().getAccessControlMaxAge()).     assertFalse(entity.getHeaders().getAccessControlAllowCredentials()). }
false;public;0;8;;@Test public void actualRequestWithDefaultAnnotationAndNoOrigin() throws Exception {     HttpHeaders headers = new HttpHeaders().     ResponseEntity<String> entity = performGet("/default", headers, String.class).     assertEquals(HttpStatus.OK, entity.getStatusCode()).     assertNull(entity.getHeaders().getAccessControlAllowOrigin()).     assertEquals("default", entity.getBody()). }
false;public;0;9;;@Test public void actualRequestWithCustomizedAnnotation() throws Exception {     ResponseEntity<String> entity = performGet("/customized", this.headers, String.class).     assertEquals(HttpStatus.OK, entity.getStatusCode()).     assertEquals("http://site1.com", entity.getHeaders().getAccessControlAllowOrigin()).     assertFalse(entity.getHeaders().getAccessControlAllowCredentials()).     assertEquals(-1, entity.getHeaders().getAccessControlMaxAge()).     assertEquals("customized", entity.getBody()). }
false;public;0;17;;@Test public void preflightRequestWithCustomizedAnnotation() throws Exception {     this.headers.add(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, "GET").     this.headers.add(HttpHeaders.ACCESS_CONTROL_REQUEST_HEADERS, "header1, header2").     ResponseEntity<String> entity = performOptions("/customized", this.headers, String.class).     assertEquals(HttpStatus.OK, entity.getStatusCode()).     assertEquals("http://site1.com", entity.getHeaders().getAccessControlAllowOrigin()).     assertArrayEquals(new HttpMethod[] { HttpMethod.GET }, entity.getHeaders().getAccessControlAllowMethods().toArray()).     assertArrayEquals(new String[] { "header1", "header2" }, entity.getHeaders().getAccessControlAllowHeaders().toArray()).     assertArrayEquals(new String[] { "header3", "header4" }, entity.getHeaders().getAccessControlExposeHeaders().toArray()).     assertFalse(entity.getHeaders().getAccessControlAllowCredentials()).     assertEquals(123, entity.getHeaders().getAccessControlMaxAge()). }
false;public;0;7;;@Test public void customOriginDefinedViaValueAttribute() throws Exception {     ResponseEntity<String> entity = performGet("/origin-value-attribute", this.headers, String.class).     assertEquals(HttpStatus.OK, entity.getStatusCode()).     assertEquals("http://site1.com", entity.getHeaders().getAccessControlAllowOrigin()).     assertEquals("value-attribute", entity.getBody()). }
false;public;0;7;;@Test public void customOriginDefinedViaPlaceholder() throws Exception {     ResponseEntity<String> entity = performGet("/origin-placeholder", this.headers, String.class).     assertEquals(HttpStatus.OK, entity.getStatusCode()).     assertEquals("http://site1.com", entity.getHeaders().getAccessControlAllowOrigin()).     assertEquals("placeholder", entity.getBody()). }
false;public;0;20;;@Test public void classLevel() throws Exception {     ResponseEntity<String> entity = performGet("/foo", this.headers, String.class).     assertEquals(HttpStatus.OK, entity.getStatusCode()).     assertEquals("*", entity.getHeaders().getAccessControlAllowOrigin()).     assertFalse(entity.getHeaders().getAccessControlAllowCredentials()).     assertEquals("foo", entity.getBody()).     entity = performGet("/bar", this.headers, String.class).     assertEquals(HttpStatus.OK, entity.getStatusCode()).     assertEquals("*", entity.getHeaders().getAccessControlAllowOrigin()).     assertFalse(entity.getHeaders().getAccessControlAllowCredentials()).     assertEquals("bar", entity.getBody()).     entity = performGet("/baz", this.headers, String.class).     assertEquals(HttpStatus.OK, entity.getStatusCode()).     assertEquals("http://site1.com", entity.getHeaders().getAccessControlAllowOrigin()).     assertTrue(entity.getHeaders().getAccessControlAllowCredentials()).     assertEquals("baz", entity.getBody()). }
false;public;0;14;;@Test public void ambiguousHeaderPreflightRequest() throws Exception {     this.headers.add(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, "GET").     this.headers.add(HttpHeaders.ACCESS_CONTROL_REQUEST_HEADERS, "header1").     ResponseEntity<String> entity = performOptions("/ambiguous-header", this.headers, String.class).     assertEquals(HttpStatus.OK, entity.getStatusCode()).     assertEquals("http://site1.com", entity.getHeaders().getAccessControlAllowOrigin()).     assertArrayEquals(new HttpMethod[] { HttpMethod.GET }, entity.getHeaders().getAccessControlAllowMethods().toArray()).     assertArrayEquals(new String[] { "header1" }, entity.getHeaders().getAccessControlAllowHeaders().toArray()).     assertTrue(entity.getHeaders().getAccessControlAllowCredentials()). }
false;public;0;11;;@Test public void ambiguousProducesPreflightRequest() throws Exception {     this.headers.add(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, "GET").     ResponseEntity<String> entity = performOptions("/ambiguous-produces", this.headers, String.class).     assertEquals(HttpStatus.OK, entity.getStatusCode()).     assertEquals("http://site1.com", entity.getHeaders().getAccessControlAllowOrigin()).     assertArrayEquals(new HttpMethod[] { HttpMethod.GET }, entity.getHeaders().getAccessControlAllowMethods().toArray()).     assertTrue(entity.getHeaders().getAccessControlAllowCredentials()). }
false;public;0;4;;@GetMapping("/no") public String noAnnotation() {     return "no". }
false;public;0;4;;@PostMapping("/no") public String noAnnotationPost() {     return "no-post". }
false;public;0;5;;@CrossOrigin @GetMapping("/default") public String defaultAnnotation() {     return "default". }
false;public;0;4;;@CrossOrigin @GetMapping(path = "/default", params = "q") public void defaultAnnotationWithParams() { }
false;public;0;4;;@CrossOrigin @GetMapping(path = "/ambiguous-header", headers = "header1=a") public void ambiguousHeader1a() { }
false;public;0;4;;@CrossOrigin @GetMapping(path = "/ambiguous-header", headers = "header1=b") public void ambiguousHeader1b() { }
false;public;0;5;;@CrossOrigin @GetMapping(path = "/ambiguous-produces", produces = "application/xml") public String ambiguousProducesXml() {     return "<a></a>". }
false;public;0;5;;@CrossOrigin @GetMapping(path = "/ambiguous-produces", produces = "application/json") public String ambiguousProducesJson() {     return "{}". }
false;public;0;11;;@CrossOrigin(origins = { "http://site1.com", "http://site2.com" }, allowedHeaders = { "header1", "header2" }, exposedHeaders = { "header3", "header4" }, methods = RequestMethod.GET, maxAge = 123, allowCredentials = "false") @RequestMapping(path = "/customized", method = { RequestMethod.GET, RequestMethod.POST }) public String customized() {     return "customized". }
false;public;0;5;;@CrossOrigin("http://site1.com") @GetMapping("/origin-value-attribute") public String customOriginDefinedViaValueAttribute() {     return "value-attribute". }
false;public;0;5;;@CrossOrigin("${myOrigin}") @GetMapping("/origin-placeholder") public String customOriginDefinedViaPlaceholder() {     return "placeholder". }
false;public;0;4;;@GetMapping("/foo") public String foo() {     return "foo". }
false;public;0;5;;@CrossOrigin @GetMapping("/bar") public String bar() {     return "bar". }
false;public;0;5;;@CrossOrigin(allowCredentials = "true") @GetMapping("/baz") public String baz() {     return "baz". }
