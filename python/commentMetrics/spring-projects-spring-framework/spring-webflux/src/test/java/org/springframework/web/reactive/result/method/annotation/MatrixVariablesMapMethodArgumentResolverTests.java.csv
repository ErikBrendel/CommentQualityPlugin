commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setUp() throws Exception {     this.exchange.getAttributes().put(HandlerMapping.MATRIX_VARIABLES_ATTRIBUTE, new LinkedHashMap<>()). }
false;public;0;17;;@Test public void supportsParameter() {     assertFalse(this.resolver.supportsParameter(this.testMethod.arg(String.class))).     assertTrue(this.resolver.supportsParameter(this.testMethod.annot(matrixAttribute().noName()).arg(Map.class, String.class, String.class))).     assertTrue(this.resolver.supportsParameter(this.testMethod.annot(matrixAttribute().noPathVar()).arg(MultiValueMap.class, String.class, String.class))).     assertTrue(this.resolver.supportsParameter(this.testMethod.annot(matrixAttribute().pathVar("cars")).arg(MultiValueMap.class, String.class, String.class))).     assertFalse(this.resolver.supportsParameter(this.testMethod.annot(matrixAttribute().name("name")).arg(Map.class, String.class, String.class))). }
false;public;0;30;;@Test public void resolveArgument() throws Exception {     MultiValueMap<String, String> params = getMatrixVariables("cars").     params.add("colors", "red").     params.add("colors", "green").     params.add("colors", "blue").     params.add("year", "2012").     MethodParameter param = this.testMethod.annot(matrixAttribute().noName()).arg(Map.class, String.class, String.class).     @SuppressWarnings("unchecked")     Map<String, String> map = (Map<String, String>) this.resolver.resolveArgument(param, new BindingContext(), this.exchange).block(Duration.ZERO).     assertNotNull(map).     assertEquals("red", map.get("colors")).     param = this.testMethod.annot(matrixAttribute().noPathVar()).arg(MultiValueMap.class, String.class, String.class).     @SuppressWarnings("unchecked")     MultiValueMap<String, String> multivalueMap = (MultiValueMap<String, String>) this.resolver.resolveArgument(param, new BindingContext(), this.exchange).block(Duration.ZERO).     assertEquals(Arrays.asList("red", "green", "blue"), multivalueMap.get("colors")). }
false;public;0;29;;@Test public void resolveArgumentPathVariable() throws Exception {     MultiValueMap<String, String> params1 = getMatrixVariables("cars").     params1.add("colors", "red").     params1.add("colors", "purple").     MultiValueMap<String, String> params2 = getMatrixVariables("planes").     params2.add("colors", "yellow").     params2.add("colors", "orange").     MethodParameter param = this.testMethod.annot(matrixAttribute().pathVar("cars")).arg(MultiValueMap.class, String.class, String.class).     @SuppressWarnings("unchecked")     Map<String, String> mapForPathVar = (Map<String, String>) this.resolver.resolveArgument(param, new BindingContext(), this.exchange).block(Duration.ZERO).     assertNotNull(mapForPathVar).     assertEquals(Arrays.asList("red", "purple"), mapForPathVar.get("colors")).     param = this.testMethod.annot(matrixAttribute().noName()).arg(Map.class, String.class, String.class).     @SuppressWarnings("unchecked")     Map<String, String> mapAll = (Map<String, String>) this.resolver.resolveArgument(param, new BindingContext(), this.exchange).block(Duration.ZERO).     assertNotNull(mapAll).     assertEquals("red", mapAll.get("colors")). }
false;public;0;12;;@Test public void resolveArgumentNoParams() throws Exception {     MethodParameter param = this.testMethod.annot(matrixAttribute().noName()).arg(Map.class, String.class, String.class).     @SuppressWarnings("unchecked")     Map<String, String> map = (Map<String, String>) this.resolver.resolveArgument(param, new BindingContext(), this.exchange).block(Duration.ZERO).     assertEquals(Collections.emptyMap(), map). }
false;public;0;15;;@Test public void resolveArgumentNoMatch() throws Exception {     MultiValueMap<String, String> params2 = getMatrixVariables("planes").     params2.add("colors", "yellow").     params2.add("colors", "orange").     MethodParameter param = this.testMethod.annot(matrixAttribute().pathVar("cars")).arg(MultiValueMap.class, String.class, String.class).     @SuppressWarnings("unchecked")     Map<String, String> map = (Map<String, String>) this.resolver.resolveArgument(param, new BindingContext(), this.exchange).block(Duration.ZERO).     assertEquals(Collections.emptyMap(), map). }
false;private;1;10;;@SuppressWarnings("unchecked") private MultiValueMap<String, String> getMatrixVariables(String pathVarName) {     Map<String, MultiValueMap<String, String>> matrixVariables = this.exchange.getAttribute(HandlerMapping.MATRIX_VARIABLES_ATTRIBUTE).     MultiValueMap<String, String> params = new LinkedMultiValueMap<>().     matrixVariables.put(pathVarName, params).     return params. }
false;;5;8;;@SuppressWarnings("unused") void handle(String stringArg, @MatrixVariable Map<String, String> map, @MatrixVariable MultiValueMap<String, String> multivalueMap, @MatrixVariable(pathVar = "cars") MultiValueMap<String, String> mapForPathVar, @MatrixVariable("name") Map<String, String> mapWithName) { }
