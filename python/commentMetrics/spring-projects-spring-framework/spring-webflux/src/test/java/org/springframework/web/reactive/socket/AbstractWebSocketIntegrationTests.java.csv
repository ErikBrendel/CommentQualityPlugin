commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;23;;@Parameters(name = "client[{0}] - server [{1}]") public static Object[][] arguments() throws IOException {     WebSocketClient[] clients = new WebSocketClient[] { new TomcatWebSocketClient(), new JettyWebSocketClient(), new ReactorNettyWebSocketClient(), new UndertowWebSocketClient(Xnio.getInstance().createWorker(OptionMap.EMPTY)) }.     Map<HttpServer, Class<?>> servers = new LinkedHashMap<>().     servers.put(new TomcatHttpServer(TMP_DIR.getAbsolutePath(), WsContextListener.class), TomcatConfig.class).     servers.put(new JettyHttpServer(), JettyConfig.class).     servers.put(new ReactorHttpServer(), ReactorNettyConfig.class).     servers.put(new UndertowHttpServer(), UndertowConfig.class).     Flux<WebSocketClient> f1 = Flux.fromArray(clients).concatMap(c -> Flux.just(c).repeat(servers.size())).     Flux<HttpServer> f2 = Flux.fromIterable(servers.keySet()).repeat(clients.length).     Flux<Class<?>> f3 = Flux.fromIterable(servers.values()).repeat(clients.length).     return Flux.zip(f1, f2, f3).map(Tuple3::toArray).collectList().block().toArray(new Object[clients.length * servers.size()][2]). }
false;public;0;13;;@Before public void setup() throws Exception {     this.server.setHandler(createHttpHandler()).     this.server.afterPropertiesSet().     this.server.start().     // Set dynamically chosen port     this.port = this.server.getPort().     if (this.client instanceof Lifecycle) {         ((Lifecycle) this.client).start().     } }
false;public;0;7;;@After public void stop() {     if (this.client instanceof Lifecycle) {         ((Lifecycle) this.client).stop().     }     this.server.stop(). }
false;private;0;7;;private HttpHandler createHttpHandler() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     context.register(DispatcherConfig.class, this.serverConfigClass).     context.register(getWebConfigClass()).     context.refresh().     return WebHttpHandlerBuilder.applicationContext(context).build(). }
false;protected;1;3;;protected URI getUrl(String path) throws URISyntaxException {     return new URI("ws://localhost:" + this.port + path). }
false;protected,abstract;0;1;;protected abstract Class<?> getWebConfigClass().
false;public;0;4;;@Bean public DispatcherHandler webHandler() {     return new DispatcherHandler(). }
false;public;0;4;;@Bean public WebSocketHandlerAdapter handlerAdapter() {     return new WebSocketHandlerAdapter(webSocketService()). }
false;public;0;4;;@Bean public WebSocketService webSocketService() {     return new HandshakeWebSocketService(getUpgradeStrategy()). }
false;protected,abstract;0;1;;protected abstract RequestUpgradeStrategy getUpgradeStrategy().
false;protected;0;4;;@Override protected RequestUpgradeStrategy getUpgradeStrategy() {     return new ReactorNettyRequestUpgradeStrategy(). }
false;protected;0;4;;@Override protected RequestUpgradeStrategy getUpgradeStrategy() {     return new TomcatRequestUpgradeStrategy(). }
false;protected;0;4;;@Override protected RequestUpgradeStrategy getUpgradeStrategy() {     return new UndertowRequestUpgradeStrategy(). }
false;protected;0;4;;@Override protected RequestUpgradeStrategy getUpgradeStrategy() {     return new JettyRequestUpgradeStrategy(). }
