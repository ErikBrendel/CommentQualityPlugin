commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void resolveExceptionGlobalHandler() throws Exception {     testException(new IllegalAccessException(), "SecondControllerAdvice: IllegalAccessException"). }
false;public;0;4;;@Test public void resolveExceptionGlobalHandlerOrdered() throws Exception {     testException(new IllegalStateException(), "OneControllerAdvice: IllegalStateException"). }
false;public;0;4;;// SPR-12605 @Test public void resolveExceptionWithHandlerMethodArg() throws Exception {     testException(new ArrayIndexOutOfBoundsException(), "HandlerMethod: handle"). }
false;public;0;5;;@Test public void resolveExceptionWithAssertionError() throws Exception {     AssertionError error = new AssertionError("argh").     testException(error, error.toString()). }
false;public;0;6;;@Test public void resolveExceptionWithAssertionErrorAsRootCause() throws Exception {     AssertionError cause = new AssertionError("argh").     FatalBeanException exception = new FatalBeanException("wrapped", cause).     testException(exception, cause.toString()). }
false;private;2;10;;private void testException(Throwable exception, String expected) throws Exception {     ApplicationContext context = new AnnotationConfigApplicationContext(TestConfig.class).     RequestMappingHandlerAdapter adapter = createAdapter(context).     TestController controller = context.getBean(TestController.class).     controller.setException(exception).     Object actual = handle(adapter, controller, "handle").getReturnValue().     assertEquals(expected, actual). }
false;public;0;12;;@Test public void modelAttributeAdvice() throws Exception {     ApplicationContext context = new AnnotationConfigApplicationContext(TestConfig.class).     RequestMappingHandlerAdapter adapter = createAdapter(context).     TestController controller = context.getBean(TestController.class).     Model model = handle(adapter, controller, "handle").getModel().     assertEquals(2, model.asMap().size()).     assertEquals("lAttr1", model.asMap().get("attr1")).     assertEquals("gAttr2", model.asMap().get("attr2")). }
false;public;0;14;;@Test public void initBinderAdvice() throws Exception {     ApplicationContext context = new AnnotationConfigApplicationContext(TestConfig.class).     RequestMappingHandlerAdapter adapter = createAdapter(context).     TestController controller = context.getBean(TestController.class).     Validator validator = mock(Validator.class).     controller.setValidator(validator).     BindingContext bindingContext = handle(adapter, controller, "handle").getBindingContext().     WebExchangeDataBinder binder = bindingContext.createDataBinder(this.exchange, "name").     assertEquals(Collections.singletonList(validator), binder.getValidators()). }
false;private;1;6;;private RequestMappingHandlerAdapter createAdapter(ApplicationContext context) throws Exception {     RequestMappingHandlerAdapter adapter = new RequestMappingHandlerAdapter().     adapter.setApplicationContext(context).     adapter.afterPropertiesSet().     return adapter. }
false;private;3;7;;private HandlerResult handle(RequestMappingHandlerAdapter adapter, Object controller, String methodName) throws Exception {     Method method = controller.getClass().getMethod(methodName).     HandlerMethod handlerMethod = new HandlerMethod(controller, method).     return adapter.handle(this.exchange, handlerMethod).block(Duration.ZERO). }
false;public;0;4;;@Bean public TestController testController() {     return new TestController(). }
false;public;0;4;;@Bean public OneControllerAdvice testExceptionResolver() {     return new OneControllerAdvice(). }
false;public;0;4;;@Bean public SecondControllerAdvice anotherTestExceptionResolver() {     return new SecondControllerAdvice(). }
false;;1;3;;void setValidator(Validator validator) {     this.validator = validator. }
false;;1;3;;void setException(Throwable exception) {     this.exception = exception. }
false;public;1;6;;@InitBinder public void initDataBinder(WebDataBinder dataBinder) {     if (this.validator != null) {         dataBinder.addValidators(this.validator).     } }
false;public;1;4;;@ModelAttribute public void addAttributes(Model model) {     model.addAttribute("attr1", "lAttr1"). }
false;public;0;6;;@GetMapping public void handle() throws Throwable {     if (this.exception != null) {         throw this.exception.     } }
false;public;1;5;;@ModelAttribute public void addAttributes(Model model) {     model.addAttribute("attr1", "gAttr1").     model.addAttribute("attr2", "gAttr2"). }
false;public;1;4;;@ExceptionHandler public String handleException(IllegalStateException ex) {     return "OneControllerAdvice: " + ClassUtils.getShortName(ex.getClass()). }
false;public;1;4;;@ExceptionHandler(ArrayIndexOutOfBoundsException.class) public String handleWithHandlerMethod(HandlerMethod handlerMethod) {     return "HandlerMethod: " + handlerMethod.getMethod().getName(). }
false;public;1;4;;@ExceptionHandler(AssertionError.class) public String handleAssertionError(Error err) {     return err.toString(). }
false;public;1;4;;@ExceptionHandler({ IllegalStateException.class, IllegalAccessException.class }) public String handleException(Exception ex) {     return "SecondControllerAdvice: " + ClassUtils.getShortName(ex.getClass()). }
