commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     this.handlerMapping.setApplicationContext(wac). }
false;public;0;9;;@Test public void resolveEmbeddedValuesInPatterns() {     this.handlerMapping.setEmbeddedValueResolver(value -> "/${pattern}/bar".equals(value) ? "/foo/bar" : value).     String[] patterns = new String[] { "/foo", "/${pattern}/bar" }.     String[] result = this.handlerMapping.resolveEmbeddedValuesInPatterns(patterns).     assertArrayEquals(new String[] { "/foo", "/foo/bar" }, result). }
false;public;0;13;;@Test public void pathPrefix() throws NoSuchMethodException {     this.handlerMapping.setEmbeddedValueResolver(value -> "/${prefix}".equals(value) ? "/api" : value).     this.handlerMapping.setPathPrefixes(Collections.singletonMap("/${prefix}", HandlerTypePredicate.forAnnotation(RestController.class))).     Method method = UserController.class.getMethod("getUser").     RequestMappingInfo info = this.handlerMapping.getMappingForMethod(method, UserController.class).     assertNotNull(info).     assertEquals(Collections.singleton(new PathPatternParser().parse("/api/user/{id}")), info.getPatternsCondition().getPatterns()). }
false;public;0;9;;@Test public void resolveRequestMappingViaComposedAnnotation() throws Exception {     RequestMappingInfo info = assertComposedAnnotationMapping("postJson", "/postJson", RequestMethod.POST).     assertEquals(MediaType.APPLICATION_JSON_VALUE, info.getConsumesCondition().getConsumableMediaTypes().iterator().next().toString()).     assertEquals(MediaType.APPLICATION_JSON_VALUE, info.getProducesCondition().getProducibleMediaTypes().iterator().next().toString()). }
false;public;0;7;;// SPR-14988 @Test public void getMappingOverridesConsumesFromTypeLevelAnnotation() throws Exception {     RequestMappingInfo requestMappingInfo = assertComposedAnnotationMapping(RequestMethod.GET).     assertArrayEquals(new MediaType[] { MediaType.ALL }, new ArrayList<>(requestMappingInfo.getConsumesCondition().getConsumableMediaTypes()).toArray()). }
false;public;0;4;;@Test public void getMapping() throws Exception {     assertComposedAnnotationMapping(RequestMethod.GET). }
false;public;0;4;;@Test public void postMapping() throws Exception {     assertComposedAnnotationMapping(RequestMethod.POST). }
false;public;0;4;;@Test public void putMapping() throws Exception {     assertComposedAnnotationMapping(RequestMethod.PUT). }
false;public;0;4;;@Test public void deleteMapping() throws Exception {     assertComposedAnnotationMapping(RequestMethod.DELETE). }
false;public;0;4;;@Test public void patchMapping() throws Exception {     assertComposedAnnotationMapping(RequestMethod.PATCH). }
false;private;1;6;;private RequestMappingInfo assertComposedAnnotationMapping(RequestMethod requestMethod) throws Exception {     String methodName = requestMethod.name().toLowerCase().     String path = "/" + methodName.     return assertComposedAnnotationMapping(methodName, path, requestMethod). }
false;private;3;19;;private RequestMappingInfo assertComposedAnnotationMapping(String methodName, String path, RequestMethod requestMethod) throws Exception {     Class<?> clazz = ComposedAnnotationController.class.     Method method = clazz.getMethod(methodName).     RequestMappingInfo info = this.handlerMapping.getMappingForMethod(method, clazz).     assertNotNull(info).     Set<PathPattern> paths = info.getPatternsCondition().getPatterns().     assertEquals(1, paths.size()).     assertEquals(path, paths.iterator().next().getPatternString()).     Set<RequestMethod> methods = info.getMethodsCondition().getMethods().     assertEquals(1, methods.size()).     assertEquals(requestMethod, methods.iterator().next()).     return info. }
false;public;0;3;;@RequestMapping public void handle() { }
false;public;0;3;;@PostJson("/postJson") public void postJson() { }
false;public;0;3;;@GetMapping(value = "/get", consumes = MediaType.ALL_VALUE) public void get() { }
false;public;0;3;;@PostMapping("/post") public void post() { }
false;public;0;3;;@PutMapping("/put") public void put() { }
false;public;0;3;;@DeleteMapping("/delete") public void delete() { }
false;public;0;3;;@PatchMapping("/patch") public void patch() { }
false;public;0;4;;@GetMapping("/{id}") public Principal getUser() {     return mock(Principal.class). }
