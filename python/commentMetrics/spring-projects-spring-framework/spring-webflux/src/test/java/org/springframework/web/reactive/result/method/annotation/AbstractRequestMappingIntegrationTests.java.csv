commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected HttpHandler createHttpHandler() {     this.restTemplate = initRestTemplate().     this.applicationContext = initApplicationContext().     return WebHttpHandlerBuilder.applicationContext(this.applicationContext).build(). }
false;protected,abstract;0;1;;protected abstract ApplicationContext initApplicationContext().
false;protected;0;3;;protected RestTemplate initRestTemplate() {     return new RestTemplate(). }
false;protected;0;3;;protected ApplicationContext getApplicationContext() {     return this.applicationContext. }
false;protected;0;3;;protected RestTemplate getRestTemplate() {     return this.restTemplate. }
false;;3;5;;<T> ResponseEntity<T> performGet(String url, MediaType out, Class<T> type) throws Exception {     HttpHeaders headers = new HttpHeaders().     headers.setAccept(Collections.singletonList(out)).     return getRestTemplate().exchange(prepareGet(url, headers), type). }
false;;3;3;;<T> ResponseEntity<T> performGet(String url, HttpHeaders headers, Class<T> type) throws Exception {     return getRestTemplate().exchange(prepareGet(url, headers), type). }
false;;3;7;;<T> ResponseEntity<T> performGet(String url, MediaType out, ParameterizedTypeReference<T> type) throws Exception {     HttpHeaders headers = new HttpHeaders().     headers.setAccept(Collections.singletonList(out)).     return this.restTemplate.exchange(prepareGet(url, headers), type). }
false;;3;5;;<T> ResponseEntity<T> performOptions(String url, HttpHeaders headers, Class<T> type) throws Exception {     return getRestTemplate().exchange(prepareOptions(url, headers), type). }
false;;5;10;;<T> ResponseEntity<T> performPost(String url, MediaType in, Object body, MediaType out, Class<T> type) throws Exception {     HttpHeaders headers = new HttpHeaders().     headers.setContentType(in).     if (out != null) {         headers.setAccept(Collections.singletonList(out)).     }     return getRestTemplate().exchange(preparePost(url, headers, body), type). }
false;;4;5;;<T> ResponseEntity<T> performPost(String url, HttpHeaders headers, Object body, Class<T> type) throws Exception {     return getRestTemplate().exchange(preparePost(url, headers, body), type). }
false;;5;10;;<T> ResponseEntity<T> performPost(String url, MediaType in, Object body, MediaType out, ParameterizedTypeReference<T> type) throws Exception {     HttpHeaders headers = new HttpHeaders().     headers.setContentType(in).     if (out != null) {         headers.setAccept(Collections.singletonList(out)).     }     return getRestTemplate().exchange(preparePost(url, headers, body), type). }
false;private;2;6;;private RequestEntity<Void> prepareGet(String url, HttpHeaders headers) throws Exception {     URI uri = new URI("http://localhost:" + this.port + url).     RequestEntity.HeadersBuilder<?> builder = get(uri).     addHeaders(builder, headers).     return builder.build(). }
false;private;2;6;;private RequestEntity<Void> prepareOptions(String url, HttpHeaders headers) throws Exception {     URI uri = new URI("http://localhost:" + this.port + url).     RequestEntity.HeadersBuilder<?> builder = options(uri).     addHeaders(builder, headers).     return builder.build(). }
false;private;2;7;;private void addHeaders(RequestEntity.HeadersBuilder<?> builder, HttpHeaders headers) {     for (Map.Entry<String, List<String>> entry : headers.entrySet()) {         for (String value : entry.getValue()) {             builder.header(entry.getKey(), value).         }     } }
false;private;3;6;;private RequestEntity<?> preparePost(String url, HttpHeaders headers, Object body) throws Exception {     URI uri = new URI("http://localhost:" + this.port + url).     RequestEntity.BodyBuilder builder = post(uri).     addHeaders(builder, headers).     return builder.body(body). }
