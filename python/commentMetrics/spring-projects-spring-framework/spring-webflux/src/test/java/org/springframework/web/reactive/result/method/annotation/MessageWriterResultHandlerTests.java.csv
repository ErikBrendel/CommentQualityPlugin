commented;modifiers;parameterAmount;loc;comment;code
false;private;1;16;;private AbstractMessageWriterResultHandler initResultHandler(HttpMessageWriter<?>... writers) {     List<HttpMessageWriter<?>> writerList.     if (ObjectUtils.isEmpty(writers)) {         writerList = new ArrayList<>().         writerList.add(new EncoderHttpMessageWriter<>(new ByteBufferEncoder())).         writerList.add(new EncoderHttpMessageWriter<>(CharSequenceEncoder.allMimeTypes())).         writerList.add(new ResourceHttpMessageWriter()).         writerList.add(new EncoderHttpMessageWriter<>(new Jaxb2XmlEncoder())).         writerList.add(new EncoderHttpMessageWriter<>(new Jackson2JsonEncoder())).     } else {         writerList = Arrays.asList(writers).     }     RequestedContentTypeResolver resolver = new RequestedContentTypeResolverBuilder().build().     return new AbstractMessageWriterResultHandler(writerList, resolver) {     }. }
false;public;0;8;;// SPR-12894 @Test public void useDefaultContentType() throws Exception {     Resource body = new ClassPathResource("logo.png", getClass()).     MethodParameter type = on(TestController.class).resolveReturnType(Resource.class).     this.resultHandler.writeBody(body, type, this.exchange).block(Duration.ofSeconds(5)).     assertEquals("image/png", this.exchange.getResponse().getHeaders().getFirst("Content-Type")). }
false;public;0;11;;// SPR-13631 @Test public void useDefaultCharset() throws Exception {     this.exchange.getAttributes().put(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, Collections.singleton(APPLICATION_JSON)).     String body = "foo".     MethodParameter type = on(TestController.class).resolveReturnType(String.class).     this.resultHandler.writeBody(body, type, this.exchange).block(Duration.ofSeconds(5)).     assertEquals(APPLICATION_JSON_UTF8, this.exchange.getResponse().getHeaders().getContentType()). }
false;public;0;17;;@Test public void voidReturnType() throws Exception {     testVoid(null, on(TestController.class).resolveReturnType(void.class)).     testVoid(Mono.empty(), on(TestController.class).resolveReturnType(Mono.class, Void.class)).     testVoid(Flux.empty(), on(TestController.class).resolveReturnType(Flux.class, Void.class)).     testVoid(Completable.complete(), on(TestController.class).resolveReturnType(Completable.class)).     testVoid(Observable.empty(), on(TestController.class).resolveReturnType(Observable.class, Void.class)).     MethodParameter type = on(TestController.class).resolveReturnType(io.reactivex.Completable.class).     testVoid(io.reactivex.Completable.complete(), type).     type = on(TestController.class).resolveReturnType(io.reactivex.Observable.class, Void.class).     testVoid(io.reactivex.Observable.empty(), type).     type = on(TestController.class).resolveReturnType(Flowable.class, Void.class).     testVoid(Flowable.empty(), type). }
false;private;2;7;;private void testVoid(Object body, MethodParameter returnType) {     this.resultHandler.writeBody(body, returnType, this.exchange).block(Duration.ofSeconds(5)).     assertNull(this.exchange.getResponse().getHeaders().get("Content-Type")).     StepVerifier.create(this.exchange.getResponse().getBody()).expectErrorMatches(ex -> ex.getMessage().startsWith("No content was written")).verify(). }
false;public;0;10;;// SPR-13135 @Test public void unsupportedReturnType() throws Exception {     ByteArrayOutputStream body = new ByteArrayOutputStream().     MethodParameter type = on(TestController.class).resolveReturnType(OutputStream.class).     HttpMessageWriter<?> writer = new EncoderHttpMessageWriter<>(new ByteBufferEncoder()).     Mono<Void> mono = initResultHandler(writer).writeBody(body, type, this.exchange).     StepVerifier.create(mono).expectError(IllegalStateException.class).verify(). }
false;public;0;11;;// SPR-12811 @Test public void jacksonTypeOfListElement() throws Exception {     MethodParameter returnType = on(TestController.class).resolveReturnType(List.class, ParentClass.class).     List<ParentClass> body = Arrays.asList(new Foo("foo"), new Bar("bar")).     this.resultHandler.writeBody(body, returnType, this.exchange).block(Duration.ofSeconds(5)).     assertEquals(APPLICATION_JSON_UTF8, this.exchange.getResponse().getHeaders().getContentType()).     assertResponseBody("[{\"type\":\"foo\",\"parentProperty\":\"foo\"}," + "{\"type\":\"bar\",\"parentProperty\":\"bar\"}]"). }
false;public;0;9;;// SPR-13318 @Test public void jacksonTypeWithSubType() throws Exception {     SimpleBean body = new SimpleBean(123L, "foo").     MethodParameter type = on(TestController.class).resolveReturnType(Identifiable.class).     this.resultHandler.writeBody(body, type, this.exchange).block(Duration.ofSeconds(5)).     assertEquals(APPLICATION_JSON_UTF8, this.exchange.getResponse().getHeaders().getContentType()).     assertResponseBody("{\"id\":123,\"name\":\"foo\"}"). }
false;public;0;11;;// SPR-13318 @Test public void jacksonTypeWithSubTypeOfListElement() throws Exception {     MethodParameter returnType = on(TestController.class).resolveReturnType(List.class, Identifiable.class).     List<SimpleBean> body = Arrays.asList(new SimpleBean(123L, "foo"), new SimpleBean(456L, "bar")).     this.resultHandler.writeBody(body, returnType, this.exchange).block(Duration.ofSeconds(5)).     assertEquals(APPLICATION_JSON_UTF8, this.exchange.getResponse().getHeaders().getContentType()).     assertResponseBody("[{\"id\":123,\"name\":\"foo\"},{\"id\":456,\"name\":\"bar\"}]"). }
false;private;1;6;;private void assertResponseBody(String responseBody) {     StepVerifier.create(this.exchange.getResponse().getBody()).consumeNextWith(buf -> assertEquals(responseBody, dumpString(buf, StandardCharsets.UTF_8))).expectComplete().verify(). }
false;public;0;3;;public String getParentProperty() {     return parentProperty. }
false;public;1;3;;public void setParentProperty(String parentProperty) {     this.parentProperty = parentProperty. }
false;;0;2;;@SuppressWarnings("unused") Long getId().
false;public;0;4;;@Override public Long getId() {     return id. }
false;public;0;4;;@SuppressWarnings("unused") public String getName() {     return name. }
false;;0;1;;Resource resource() {     return null. }
false;;0;1;;String string() {     return null. }
false;;0;1;;void voidReturn() { }
false;;0;1;;Mono<Void> monoVoid() {     return null. }
false;;0;1;;Completable completable() {     return null. }
false;;0;1;;io.reactivex.Completable rxJava2Completable() {     return null. }
false;;0;1;;Flux<Void> fluxVoid() {     return null. }
false;;0;1;;Observable<Void> observableVoid() {     return null. }
false;;0;1;;io.reactivex.Observable<Void> rxJava2ObservableVoid() {     return null. }
false;;0;1;;Flowable<Void> flowableVoid() {     return null. }
false;;0;1;;OutputStream outputStream() {     return null. }
false;;0;1;;List<ParentClass> listParentClass() {     return null. }
false;;0;1;;Identifiable identifiable() {     return null. }
false;;0;1;;List<Identifiable> listIdentifiable() {     return null. }
