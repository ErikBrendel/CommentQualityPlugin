commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void createBinder() throws Exception {     MockServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/")).     BindingContext context = createBindingContext("initBinder", WebDataBinder.class).     WebDataBinder dataBinder = context.createDataBinder(exchange, null, null).     assertNotNull(dataBinder.getDisallowedFields()).     assertEquals("id", dataBinder.getDisallowedFields()[0]). }
false;public;0;11;;@Test public void createBinderWithGlobalInitialization() throws Exception {     ConversionService conversionService = new DefaultFormattingConversionService().     bindingInitializer.setConversionService(conversionService).     MockServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/")).     BindingContext context = createBindingContext("initBinder", WebDataBinder.class).     WebDataBinder dataBinder = context.createDataBinder(exchange, null, null).     assertSame(conversionService, dataBinder.getConversionService()). }
false;public;0;9;;@Test public void createBinderWithAttrName() throws Exception {     MockServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/")).     BindingContext context = createBindingContext("initBinderWithAttributeName", WebDataBinder.class).     WebDataBinder dataBinder = context.createDataBinder(exchange, null, "foo").     assertNotNull(dataBinder.getDisallowedFields()).     assertEquals("id", dataBinder.getDisallowedFields()[0]). }
false;public;0;8;;@Test public void createBinderWithAttrNameNoMatch() throws Exception {     MockServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/")).     BindingContext context = createBindingContext("initBinderWithAttributeName", WebDataBinder.class).     WebDataBinder dataBinder = context.createDataBinder(exchange, null, "invalidName").     assertNull(dataBinder.getDisallowedFields()). }
false;public;0;8;;@Test public void createBinderNullAttrName() throws Exception {     MockServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/")).     BindingContext context = createBindingContext("initBinderWithAttributeName", WebDataBinder.class).     WebDataBinder dataBinder = context.createDataBinder(exchange, null, null).     assertNull(dataBinder.getDisallowedFields()). }
false;public;0;6;;@Test(expected = IllegalStateException.class) public void returnValueNotExpected() throws Exception {     MockServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/")).     BindingContext context = createBindingContext("initBinderReturnValue", WebDataBinder.class).     context.createDataBinder(exchange, null, "invalidName"). }
false;public;0;13;;@Test public void createBinderTypeConversion() throws Exception {     MockServerHttpRequest request = MockServerHttpRequest.get("/path?requestParam=22").build().     MockServerWebExchange exchange = MockServerWebExchange.from(request).     ReactiveAdapterRegistry adapterRegistry = ReactiveAdapterRegistry.getSharedInstance().     this.argumentResolvers.add(new RequestParamMethodArgumentResolver(null, adapterRegistry, false)).     BindingContext context = createBindingContext("initBinderTypeConversion", WebDataBinder.class, int.class).     WebDataBinder dataBinder = context.createDataBinder(exchange, null, "foo").     assertNotNull(dataBinder.getDisallowedFields()).     assertEquals("requestParam-22", dataBinder.getDisallowedFields()[0]). }
false;private;2;10;;private BindingContext createBindingContext(String methodName, Class<?>... parameterTypes) throws Exception {     Object handler = new InitBinderHandler().     Method method = handler.getClass().getMethod(methodName, parameterTypes).     SyncInvocableHandlerMethod handlerMethod = new SyncInvocableHandlerMethod(handler, method).     handlerMethod.setArgumentResolvers(new ArrayList<>(this.argumentResolvers)).     handlerMethod.setParameterNameDiscoverer(new LocalVariableTableParameterNameDiscoverer()).     return new InitBinderBindingContext(this.bindingInitializer, Collections.singletonList(handlerMethod)). }
false;public;1;4;;@InitBinder public void initBinder(WebDataBinder dataBinder) {     dataBinder.setDisallowedFields("id"). }
false;public;1;4;;@InitBinder(value = "foo") public void initBinderWithAttributeName(WebDataBinder dataBinder) {     dataBinder.setDisallowedFields("id"). }
false;public;1;4;;@InitBinder public String initBinderReturnValue(WebDataBinder dataBinder) {     return "invalid". }
false;public;2;4;;@InitBinder public void initBinderTypeConversion(WebDataBinder dataBinder, @RequestParam int requestParam) {     dataBinder.setDisallowedFields("requestParam-" + requestParam). }
