commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void request() {     assertSame(mockRequest, wrapper.request()). }
false;public;0;7;;@Test public void method() {     HttpMethod method = HttpMethod.POST.     when(mockRequest.method()).thenReturn(method).     assertSame(method, wrapper.method()). }
false;public;0;7;;@Test public void uri() {     URI uri = URI.create("https://example.com").     when(mockRequest.uri()).thenReturn(uri).     assertSame(uri, wrapper.uri()). }
false;public;0;7;;@Test public void path() {     String path = "/foo/bar".     when(mockRequest.path()).thenReturn(path).     assertSame(path, wrapper.path()). }
false;public;0;7;;@Test public void headers() {     ServerRequest.Headers headers = mock(ServerRequest.Headers.class).     when(mockRequest.headers()).thenReturn(headers).     assertSame(headers, wrapper.headers()). }
false;public;0;8;;@Test public void attribute() {     String name = "foo".     String value = "bar".     when(mockRequest.attribute(name)).thenReturn(Optional.of(value)).     assertEquals(Optional.of(value), wrapper.attribute(name)). }
false;public;0;8;;@Test public void queryParam() {     String name = "foo".     String value = "bar".     when(mockRequest.queryParam(name)).thenReturn(Optional.of(value)).     assertEquals(Optional.of(value), wrapper.queryParam(name)). }
false;public;0;8;;@Test public void queryParams() {     MultiValueMap<String, String> value = new LinkedMultiValueMap<>().     value.add("foo", "bar").     when(mockRequest.queryParams()).thenReturn(value).     assertSame(value, wrapper.queryParams()). }
false;public;0;8;;@Test public void pathVariable() {     String name = "foo".     String value = "bar".     when(mockRequest.pathVariable(name)).thenReturn(value).     assertEquals(value, wrapper.pathVariable(name)). }
false;public;0;7;;@Test public void pathVariables() {     Map<String, String> pathVariables = Collections.singletonMap("foo", "bar").     when(mockRequest.pathVariables()).thenReturn(pathVariables).     assertSame(pathVariables, wrapper.pathVariables()). }
false;public;0;8;;@Test @SuppressWarnings("unchecked") public void cookies() {     MultiValueMap<String, HttpCookie> cookies = mock(MultiValueMap.class).     when(mockRequest.cookies()).thenReturn(cookies).     assertSame(cookies, wrapper.cookies()). }
false;public;0;8;;@Test public void bodyExtractor() {     Mono<String> result = Mono.just("foo").     BodyExtractor<Mono<String>, ReactiveHttpInputMessage> extractor = BodyExtractors.toMono(String.class).     when(mockRequest.body(extractor)).thenReturn(result).     assertSame(result, wrapper.body(extractor)). }
false;public;0;7;;@Test public void bodyToMonoClass() {     Mono<String> result = Mono.just("foo").     when(mockRequest.bodyToMono(String.class)).thenReturn(result).     assertSame(result, wrapper.bodyToMono(String.class)). }
false;public;0;8;;@Test public void bodyToMonoParameterizedTypeReference() {     Mono<String> result = Mono.just("foo").     ParameterizedTypeReference<String> reference = new ParameterizedTypeReference<String>() {     }.     when(mockRequest.bodyToMono(reference)).thenReturn(result).     assertSame(result, wrapper.bodyToMono(reference)). }
false;public;0;7;;@Test public void bodyToFluxClass() {     Flux<String> result = Flux.just("foo").     when(mockRequest.bodyToFlux(String.class)).thenReturn(result).     assertSame(result, wrapper.bodyToFlux(String.class)). }
false;public;0;8;;@Test public void bodyToFluxParameterizedTypeReference() {     Flux<String> result = Flux.just("foo").     ParameterizedTypeReference<String> reference = new ParameterizedTypeReference<String>() {     }.     when(mockRequest.bodyToFlux(reference)).thenReturn(result).     assertSame(result, wrapper.bodyToFlux(reference)). }
