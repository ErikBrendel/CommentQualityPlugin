commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void resolveFromClasspath() throws IOException {     Resource location = new ClassPathResource("test/", PathResourceResolver.class).     String path = "bar.css".     List<Resource> locations = singletonList(location).     Resource actual = this.resolver.resolveResource(null, path, locations, null).block(TIMEOUT).     assertEquals(location.createRelative(path), actual). }
false;public;0;9;;@Test public void resolveFromClasspathRoot() {     Resource location = new ClassPathResource("/").     String path = "org/springframework/web/reactive/resource/test/bar.css".     List<Resource> locations = singletonList(location).     Resource actual = this.resolver.resolveResource(null, path, locations, null).block(TIMEOUT).     assertNotNull(actual). }
false;public;0;18;;@Test public void checkResource() throws IOException {     Resource location = new ClassPathResource("test/", PathResourceResolver.class).     testCheckResource(location, "../testsecret/secret.txt").     testCheckResource(location, "test/../../testsecret/secret.txt").     location = new UrlResource(getClass().getResource("./test/")).     String secretPath = new UrlResource(getClass().getResource("testsecret/secret.txt")).getURL().getPath().     testCheckResource(location, "file:" + secretPath).     testCheckResource(location, "/file:" + secretPath).     testCheckResource(location, "/" + secretPath).     testCheckResource(location, "////../.." + secretPath).     testCheckResource(location, "/%2E%2E/testsecret/secret.txt").     testCheckResource(location, "/%2e%2e/testsecret/secret.txt").     testCheckResource(location, " " + secretPath).     testCheckResource(location, "/  " + secretPath).     testCheckResource(location, "url:" + secretPath). }
false;private;2;8;;private void testCheckResource(Resource location, String requestPath) throws IOException {     List<Resource> locations = singletonList(location).     Resource actual = this.resolver.resolveResource(null, requestPath, locations, null).block(TIMEOUT).     if (!location.createRelative(requestPath).exists() && !requestPath.contains(":")) {         fail(requestPath + " doesn't actually exist as a relative path").     }     assertNull(actual). }
false;public;0;13;;@Test public void checkResourceWithAllowedLocations() {     this.resolver.setAllowedLocations(new ClassPathResource("test/", PathResourceResolver.class), new ClassPathResource("testalternatepath/", PathResourceResolver.class)).     Resource location = getResource("main.css").     String actual = this.resolver.resolveUrlPath("../testalternatepath/bar.css", singletonList(location), null).block(TIMEOUT).     assertEquals("../testalternatepath/bar.css", actual). }
false;public;0;7;;// SPR-12624 @Test public void checkRelativeLocation() throws Exception {     String locationUrl = new UrlResource(getClass().getResource("./test/")).getURL().toExternalForm().     Resource location = new UrlResource(locationUrl.replace("/springframework", "/../org/springframework")).     List<Resource> locations = singletonList(location).     assertNotNull(this.resolver.resolveResource(null, "main.css", locations, null).block(TIMEOUT)). }
false;public;0;5;;// SPR-12747 @Test public void checkFileLocation() throws Exception {     Resource resource = getResource("main.css").     assertTrue(this.resolver.checkResource(resource, resource)). }
false;public;0;8;;// SPR-13241 @Test public void resolvePathRootResource() {     Resource webjarsLocation = new ClassPathResource("/META-INF/resources/webjars/", PathResourceResolver.class).     String path = this.resolver.resolveUrlPathInternal("", singletonList(webjarsLocation), null).block(TIMEOUT).     assertNull(path). }
false;private;1;3;;private Resource getResource(String filePath) {     return new ClassPathResource("test/" + filePath, getClass()). }
