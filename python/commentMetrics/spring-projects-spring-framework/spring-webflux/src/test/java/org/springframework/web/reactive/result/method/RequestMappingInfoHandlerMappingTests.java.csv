commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setup() {     this.handlerMapping = new TestRequestMappingInfoHandlerMapping().     this.handlerMapping.registerHandler(new TestController()). }
false;public;0;8;;@Test public void getHandlerDirectMatch() {     Method expected = on(TestController.class).annot(getMapping("/foo").params()).resolveMethod().     ServerWebExchange exchange = MockServerWebExchange.from(get("/foo")).     HandlerMethod hm = (HandlerMethod) this.handlerMapping.getHandler(exchange).block().     assertEquals(expected, hm.getMethod()). }
false;public;0;8;;@Test public void getHandlerGlobMatch() {     Method expected = on(TestController.class).annot(requestMapping("/ba*").method(GET, HEAD)).resolveMethod().     ServerWebExchange exchange = MockServerWebExchange.from(get("/bar")).     HandlerMethod hm = (HandlerMethod) this.handlerMapping.getHandler(exchange).block().     assertEquals(expected, hm.getMethod()). }
false;public;0;11;;@Test public void getHandlerEmptyPathMatch() {     Method expected = on(TestController.class).annot(requestMapping("")).resolveMethod().     ServerWebExchange exchange = MockServerWebExchange.from(get("")).     HandlerMethod hm = (HandlerMethod) this.handlerMapping.getHandler(exchange).block().     assertEquals(expected, hm.getMethod()).     exchange = MockServerWebExchange.from(get("/")).     hm = (HandlerMethod) this.handlerMapping.getHandler(exchange).block().     assertEquals(expected, hm.getMethod()). }
false;public;0;8;;@Test public void getHandlerBestMatch() {     Method expected = on(TestController.class).annot(getMapping("/foo").params("p")).resolveMethod().     ServerWebExchange exchange = MockServerWebExchange.from(get("/foo?p=anything")).     HandlerMethod hm = (HandlerMethod) this.handlerMapping.getHandler(exchange).block().     assertEquals(expected, hm.getMethod()). }
false;public;0;8;;@Test public void getHandlerRequestMethodNotAllowed() {     ServerWebExchange exchange = MockServerWebExchange.from(post("/bar")).     Mono<Object> mono = this.handlerMapping.getHandler(exchange).     assertError(mono, MethodNotAllowedException.class, ex -> assertEquals(EnumSet.of(HttpMethod.GET, HttpMethod.HEAD), ex.getSupportedMethods())). }
false;public;0;10;;// SPR-9603 @Test public void getHandlerRequestMethodMatchFalsePositive() {     ServerWebExchange exchange = MockServerWebExchange.from(get("/users").accept(MediaType.APPLICATION_XML)).     this.handlerMapping.registerHandler(new UserController()).     Mono<Object> mono = this.handlerMapping.getHandler(exchange).     StepVerifier.create(mono).expectError(NotAcceptableStatusException.class).verify(). }
false;public;0;6;;// SPR-8462 @Test public void getHandlerMediaTypeNotSupported() {     testHttpMediaTypeNotSupportedException("/person/1").     testHttpMediaTypeNotSupportedException("/person/1/").     testHttpMediaTypeNotSupportedException("/person/1.json"). }
false;public;0;10;;@Test public void getHandlerTestInvalidContentType() {     MockServerHttpRequest request = put("/person/1").header("content-type", "bogus").build().     ServerWebExchange exchange = MockServerWebExchange.from(request).     Mono<Object> mono = this.handlerMapping.getHandler(exchange).     assertError(mono, UnsupportedMediaTypeStatusException.class, ex -> assertEquals("415 UNSUPPORTED_MEDIA_TYPE " + "\"Invalid mime type \"bogus\": does not contain '/'\"", ex.getMessage())). }
false;public;0;5;;// SPR-8462 @Test public void getHandlerTestMediaTypeNotAcceptable() {     testMediaTypeNotAcceptable("/persons").     testMediaTypeNotAcceptable("/persons/"). }
false;public;0;9;;// SPR-12854 @Test public void getHandlerTestRequestParamMismatch() {     ServerWebExchange exchange = MockServerWebExchange.from(get("/params")).     Mono<Object> mono = this.handlerMapping.getHandler(exchange).     assertError(mono, ServerWebInputException.class, ex -> {         assertThat(ex.getReason(), containsString("[foo=bar]")).         assertThat(ex.getReason(), containsString("[bar=baz]")).     }). }
false;public;0;10;;@Test public void getHandlerHttpOptions() {     List<HttpMethod> allMethodExceptTrace = new ArrayList<>(Arrays.asList(HttpMethod.values())).     allMethodExceptTrace.remove(HttpMethod.TRACE).     testHttpOptions("/foo", EnumSet.of(HttpMethod.GET, HttpMethod.HEAD, HttpMethod.OPTIONS)).     testHttpOptions("/person/1", EnumSet.of(HttpMethod.PUT, HttpMethod.OPTIONS)).     testHttpOptions("/persons", EnumSet.copyOf(allMethodExceptTrace)).     testHttpOptions("/something", EnumSet.of(HttpMethod.PUT, HttpMethod.POST)). }
false;public;0;14;;@Test public void getHandlerProducibleMediaTypesAttribute() {     ServerWebExchange exchange = MockServerWebExchange.from(get("/content").accept(MediaType.APPLICATION_XML)).     this.handlerMapping.getHandler(exchange).block().     String name = HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE.     assertEquals(Collections.singleton(MediaType.APPLICATION_XML), exchange.getAttributes().get(name)).     exchange = MockServerWebExchange.from(get("/content").accept(MediaType.APPLICATION_JSON)).     this.handlerMapping.getHandler(exchange).block().     assertNull("Negated expression shouldn't be listed as producible type", exchange.getAttributes().get(name)). }
false;public;0;15;;@Test @SuppressWarnings("unchecked") public void handleMatchUriTemplateVariables() {     ServerWebExchange exchange = MockServerWebExchange.from(get("/1/2")).     RequestMappingInfo key = paths("/{path1}/{path2}").build().     this.handlerMapping.handleMatch(key, handlerMethod, exchange).     String name = HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE.     Map<String, String> uriVariables = (Map<String, String>) exchange.getAttributes().get(name).     assertNotNull(uriVariables).     assertEquals("1", uriVariables.get("path1")).     assertEquals("2", uriVariables.get("path2")). }
false;public;0;16;;// SPR-9098 @Test public void handleMatchUriTemplateVariablesDecode() {     RequestMappingInfo key = paths("/{group}/{identifier}").build().     URI url = URI.create("/group/a%2Fb").     ServerWebExchange exchange = MockServerWebExchange.from(method(HttpMethod.GET, url)).     this.handlerMapping.handleMatch(key, handlerMethod, exchange).     String name = HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE.     @SuppressWarnings("unchecked")     Map<String, String> uriVariables = (Map<String, String>) exchange.getAttributes().get(name).     assertNotNull(uriVariables).     assertEquals("group", uriVariables.get("group")).     assertEquals("a/b", uriVariables.get("identifier")). }
false;public;0;12;;@Test public void handleMatchBestMatchingPatternAttribute() {     RequestMappingInfo key = paths("/{path1}/2", "/**").build().     ServerWebExchange exchange = MockServerWebExchange.from(get("/1/2")).     this.handlerMapping.handleMatch(key, handlerMethod, exchange).     PathPattern bestMatch = (PathPattern) exchange.getAttributes().get(BEST_MATCHING_PATTERN_ATTRIBUTE).     assertEquals("/{path1}/2", bestMatch.getPatternString()).     HandlerMethod mapped = (HandlerMethod) exchange.getAttributes().get(BEST_MATCHING_HANDLER_ATTRIBUTE).     assertSame(handlerMethod, mapped). }
false;public;0;9;;@Test public void handleMatchBestMatchingPatternAttributeNoPatternsDefined() {     RequestMappingInfo key = paths().build().     ServerWebExchange exchange = MockServerWebExchange.from(get("/1/2")).     this.handlerMapping.handleMatch(key, handlerMethod, exchange).     PathPattern bestMatch = (PathPattern) exchange.getAttributes().get(BEST_MATCHING_PATTERN_ATTRIBUTE).     assertEquals("/1/2", bestMatch.getPatternString()). }
false;public;0;32;;@Test public void handleMatchMatrixVariables() {     MultiValueMap<String, String> matrixVariables.     Map<String, String> uriVariables.     ServerWebExchange exchange = MockServerWebExchange.from(get("/cars.colors=red,blue,green.year=2012")).     handleMatch(exchange, "/{cars}").     matrixVariables = getMatrixVariables(exchange, "cars").     uriVariables = getUriTemplateVariables(exchange).     assertNotNull(matrixVariables).     assertEquals(Arrays.asList("red", "blue", "green"), matrixVariables.get("colors")).     assertEquals("2012", matrixVariables.getFirst("year")).     assertEquals("cars", uriVariables.get("cars")).     // SPR-11897     exchange = MockServerWebExchange.from(get("/a=42.b=c")).     handleMatch(exchange, "/{foo}").     matrixVariables = getMatrixVariables(exchange, "foo").     uriVariables = getUriTemplateVariables(exchange).     // Unlike Spring MVC, WebFlux currently does not support APIs like     // "/foo/{ids}" and URL "/foo/id=1.id=2.id=3" where the whole path     // segment is a sequence of name-value pairs.     assertNotNull(matrixVariables).     assertEquals(1, matrixVariables.size()).     assertEquals("c", matrixVariables.getFirst("b")).     assertEquals("a=42", uriVariables.get("foo")). }
false;public;0;13;;@Test public void handleMatchMatrixVariablesDecoding() {     MockServerHttpRequest request = method(HttpMethod.GET, URI.create("/cars.mvar=a%2Fb")).build().     ServerWebExchange exchange = MockServerWebExchange.from(request).     handleMatch(exchange, "/{cars}").     MultiValueMap<String, String> matrixVariables = getMatrixVariables(exchange, "cars").     Map<String, String> uriVariables = getUriTemplateVariables(exchange).     assertNotNull(matrixVariables).     assertEquals(Collections.singletonList("a/b"), matrixVariables.get("mvar")).     assertEquals("cars", uriVariables.get("cars")). }
false;private;3;9;;@SuppressWarnings("unchecked") private <T> void assertError(Mono<Object> mono, final Class<T> exceptionClass, final Consumer<T> consumer) {     StepVerifier.create(mono).consumeErrorWith(error -> {         assertEquals(exceptionClass, error.getClass()).         consumer.accept((T) error).     }).verify(). }
false;private;1;10;;private void testHttpMediaTypeNotSupportedException(String url) {     MockServerHttpRequest request = put(url).contentType(MediaType.APPLICATION_JSON).build().     ServerWebExchange exchange = MockServerWebExchange.from(request).     Mono<Object> mono = this.handlerMapping.getHandler(exchange).     assertError(mono, UnsupportedMediaTypeStatusException.class, ex -> assertEquals("Invalid supported consumable media types", Collections.singletonList(new MediaType("application", "xml")), ex.getSupportedMediaTypes())). }
false;private;2;16;;private void testHttpOptions(String requestURI, Set<HttpMethod> allowedMethods) {     ServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.options(requestURI)).     HandlerMethod handlerMethod = (HandlerMethod) this.handlerMapping.getHandler(exchange).block().     BindingContext bindingContext = new BindingContext().     InvocableHandlerMethod invocable = new InvocableHandlerMethod(handlerMethod).     Mono<HandlerResult> mono = invocable.invoke(exchange, bindingContext).     HandlerResult result = mono.block().     assertNotNull(result).     Object value = result.getReturnValue().     assertNotNull(value).     assertEquals(HttpHeaders.class, value.getClass()).     assertEquals(allowedMethods, ((HttpHeaders) value).getAllow()). }
false;private;1;9;;private void testMediaTypeNotAcceptable(String url) {     ServerWebExchange exchange = MockServerWebExchange.from(get(url).accept(MediaType.APPLICATION_JSON)).     Mono<Object> mono = this.handlerMapping.getHandler(exchange).     assertError(mono, NotAcceptableStatusException.class, ex -> assertEquals("Invalid supported producible media types", Collections.singletonList(new MediaType("application", "xml")), ex.getSupportedMediaTypes())). }
false;private;2;4;;private void handleMatch(ServerWebExchange exchange, String pattern) {     RequestMappingInfo info = paths(pattern).build().     this.handlerMapping.handleMatch(info, handlerMethod, exchange). }
false;private;2;5;;@SuppressWarnings("unchecked") private MultiValueMap<String, String> getMatrixVariables(ServerWebExchange exchange, String uriVarName) {     return ((Map<String, MultiValueMap<String, String>>) exchange.getAttributes().get(HandlerMapping.MATRIX_VARIABLES_ATTRIBUTE)).get(uriVarName). }
false;private;1;5;;@SuppressWarnings("unchecked") private Map<String, String> getUriTemplateVariables(ServerWebExchange exchange) {     return (Map<String, String>) exchange.getAttributes().get(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE). }
false;public;0;3;;@GetMapping("/foo") public void foo() { }
false;public;0;3;;@GetMapping(path = "/foo", params = "p") public void fooParam() { }
false;public;0;3;;@RequestMapping(path = "/ba*", method = { GET, HEAD }) public void bar() { }
false;public;0;3;;@RequestMapping(path = "") public void empty() { }
false;public;1;3;;@PutMapping(path = "/person/{id}", consumes = "application/xml") public void consumes(@RequestBody String text) { }
false;public;0;4;;@RequestMapping(path = "/persons", produces = "application/xml") public String produces() {     return "". }
false;public;0;4;;@RequestMapping(path = "/params", params = "foo=bar") public String param() {     return "". }
false;public;0;4;;@RequestMapping(path = "/params", params = "bar=baz") public String param2() {     return "". }
false;public;0;4;;@RequestMapping(path = "/content", produces = "application/xml") public String xmlContent() {     return "". }
false;public;0;4;;@RequestMapping(path = "/content", produces = "!application/xml") public String nonXmlContent() {     return "". }
false;public;0;6;;@RequestMapping(path = "/something", method = OPTIONS) public HttpHeaders fooOptions() {     HttpHeaders headers = new HttpHeaders().     headers.add("Allow", "PUT,POST").     return headers. }
false;public;0;1;;public void dummy() { }
false;public;0;3;;@GetMapping(path = "/users", produces = "application/json") public void getUser() { }
false;public;0;3;;@PutMapping(path = "/users") public void saveUser() { }
false;;1;3;;void registerHandler(Object handler) {     super.detectHandlerMethods(handler). }
false;protected;1;4;;@Override protected boolean isHandler(Class<?> beanType) {     return AnnotationUtils.findAnnotation(beanType, RequestMapping.class) != null. }
false;protected;2;15;;@Override protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {     RequestMapping annot = AnnotatedElementUtils.findMergedAnnotation(method, RequestMapping.class).     if (annot != null) {         BuilderConfiguration options = new BuilderConfiguration().         options.setPatternParser(getPathPatternParser()).         return paths(annot.value()).methods(annot.method()).params(annot.params()).headers(annot.headers()).consumes(annot.consumes()).produces(annot.produces()).options(options).build().     } else {         return null.     } }
