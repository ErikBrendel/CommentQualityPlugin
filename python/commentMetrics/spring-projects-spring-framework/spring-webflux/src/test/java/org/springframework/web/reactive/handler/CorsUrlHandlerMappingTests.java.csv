commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() {     this.handlerMapping = new AbstractUrlHandlerMapping() {     }.     this.handlerMapping.registerHandler("/welcome.html", this.welcomeController).     this.handlerMapping.registerHandler("/cors.html", this.corsController). }
false;public;0;9;;@Test public void actualRequestWithoutCorsConfigurationProvider() throws Exception {     String origin = "http://domain2.com".     ServerWebExchange exchange = createExchange(HttpMethod.GET, "/welcome.html", origin).     Object actual = this.handlerMapping.getHandler(exchange).block().     assertNotNull(actual).     assertSame(this.welcomeController, actual). }
false;public;0;10;;@Test public void preflightRequestWithoutCorsConfigurationProvider() throws Exception {     String origin = "http://domain2.com".     ServerWebExchange exchange = createExchange(HttpMethod.OPTIONS, "/welcome.html", origin).     Object actual = this.handlerMapping.getHandler(exchange).block().     assertNotNull(actual).     assertNotSame(this.welcomeController, actual).     assertNull(exchange.getResponse().getHeaders().getFirst(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN)). }
false;public;0;10;;@Test public void actualRequestWithCorsAwareHandler() throws Exception {     String origin = "http://domain2.com".     ServerWebExchange exchange = createExchange(HttpMethod.GET, "/cors.html", origin).     Object actual = this.handlerMapping.getHandler(exchange).block().     assertNotNull(actual).     assertSame(this.corsController, actual).     assertEquals("*", exchange.getResponse().getHeaders().getFirst(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN)). }
false;public;0;10;;@Test public void preFlightWithCorsAwareHandler() throws Exception {     String origin = "http://domain2.com".     ServerWebExchange exchange = createExchange(HttpMethod.OPTIONS, "/cors.html", origin).     Object actual = this.handlerMapping.getHandler(exchange).block().     assertNotNull(actual).     assertNotSame(this.corsController, actual).     assertEquals("*", exchange.getResponse().getHeaders().getFirst(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN)). }
false;public;0;14;;@Test public void actualRequestWithGlobalCorsConfig() throws Exception {     CorsConfiguration mappedConfig = new CorsConfiguration().     mappedConfig.addAllowedOrigin("*").     this.handlerMapping.setCorsConfigurations(Collections.singletonMap("/welcome.html", mappedConfig)).     String origin = "http://domain2.com".     ServerWebExchange exchange = createExchange(HttpMethod.GET, "/welcome.html", origin).     Object actual = this.handlerMapping.getHandler(exchange).block().     assertNotNull(actual).     assertSame(this.welcomeController, actual).     assertEquals("*", exchange.getResponse().getHeaders().getFirst(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN)). }
false;public;0;14;;@Test public void preFlightRequestWithGlobalCorsConfig() throws Exception {     CorsConfiguration mappedConfig = new CorsConfiguration().     mappedConfig.addAllowedOrigin("*").     this.handlerMapping.setCorsConfigurations(Collections.singletonMap("/welcome.html", mappedConfig)).     String origin = "http://domain2.com".     ServerWebExchange exchange = createExchange(HttpMethod.OPTIONS, "/welcome.html", origin).     Object actual = this.handlerMapping.getHandler(exchange).block().     assertNotNull(actual).     assertNotSame(this.welcomeController, actual).     assertEquals("*", exchange.getResponse().getHeaders().getFirst(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN)). }
false;public;0;15;;@Test public void actualRequestWithCorsConfigurationSource() throws Exception {     this.handlerMapping.setCorsConfigurationSource(new CustomCorsConfigurationSource()).     String origin = "http://domain2.com".     ServerWebExchange exchange = createExchange(HttpMethod.GET, "/welcome.html", origin).     Object actual = this.handlerMapping.getHandler(exchange).block().     assertNotNull(actual).     assertSame(this.welcomeController, actual).     assertEquals("http://domain2.com", exchange.getResponse().getHeaders().getFirst(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN)).     assertEquals("true", exchange.getResponse().getHeaders().getFirst(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS)). }
false;public;0;15;;@Test public void preFlightRequestWithCorsConfigurationSource() throws Exception {     this.handlerMapping.setCorsConfigurationSource(new CustomCorsConfigurationSource()).     String origin = "http://domain2.com".     ServerWebExchange exchange = createExchange(HttpMethod.OPTIONS, "/welcome.html", origin).     Object actual = this.handlerMapping.getHandler(exchange).block().     assertNotNull(actual).     assertNotSame(this.welcomeController, actual).     assertEquals("http://domain2.com", exchange.getResponse().getHeaders().getFirst(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN)).     assertEquals("true", exchange.getResponse().getHeaders().getFirst(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS)). }
false;private;3;7;;private ServerWebExchange createExchange(HttpMethod method, String path, String origin) {     return MockServerWebExchange.from(MockServerHttpRequest.method(method, "http://localhost" + path).header("Origin", origin).header(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, "GET")). }
false;public;1;6;;@Override public CorsConfiguration getCorsConfiguration(ServerWebExchange exchange) {     CorsConfiguration config = new CorsConfiguration().     config.addAllowedOrigin("*").     return config. }
false;public;1;7;;@Override public CorsConfiguration getCorsConfiguration(ServerWebExchange exchange) {     CorsConfiguration config = new CorsConfiguration().     config.addAllowedOrigin("*").     config.setAllowCredentials(true).     return config. }
