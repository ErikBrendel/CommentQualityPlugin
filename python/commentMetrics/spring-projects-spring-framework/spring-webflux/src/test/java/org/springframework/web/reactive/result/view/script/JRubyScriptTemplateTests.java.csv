commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void renderTemplate() throws Exception {     Map<String, Object> model = new HashMap<>().     model.put("title", "Layout example").     model.put("body", "This is the body").     String url = "org/springframework/web/reactive/result/view/script/jruby/template.erb".     MockServerHttpResponse response = renderViewWithModel(url, model).     assertEquals("<html><head><title>Layout example</title></head><body><p>This is the body</p></body></html>", response.getBodyAsString().block()). }
false;private;2;6;;private MockServerHttpResponse renderViewWithModel(String viewUrl, Map<String, Object> model) throws Exception {     ScriptTemplateView view = createViewWithUrl(viewUrl).     MockServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/")).     view.renderInternal(model, MediaType.TEXT_HTML, exchange).block().     return exchange.getResponse(). }
false;private;1;11;;private ScriptTemplateView createViewWithUrl(String viewUrl) throws Exception {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ScriptTemplatingConfiguration.class).     ctx.refresh().     ScriptTemplateView view = new ScriptTemplateView().     view.setApplicationContext(ctx).     view.setUrl(viewUrl).     view.afterPropertiesSet().     return view. }
false;public;0;8;;@Bean public ScriptTemplateConfigurer jRubyConfigurer() {     ScriptTemplateConfigurer configurer = new ScriptTemplateConfigurer().     configurer.setScripts("org/springframework/web/reactive/result/view/script/jruby/render.rb").     configurer.setEngineName("jruby").     configurer.setRenderFunction("render").     return configurer. }
