commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void resolveArg() {     this.resolvers.add(stubResolver("value1")).     Method method = ResolvableMethod.on(TestController.class).mockCall(o -> o.singleArg(null)).method().     Mono<HandlerResult> mono = invoke(new TestController(), method).     assertHandlerResultValue(mono, "success:value1"). }
false;public;0;8;;@Test public void resolveNoArgValue() {     this.resolvers.add(stubResolver(Mono.empty())).     Method method = ResolvableMethod.on(TestController.class).mockCall(o -> o.singleArg(null)).method().     Mono<HandlerResult> mono = invoke(new TestController(), method).     assertHandlerResultValue(mono, "success:null"). }
false;public;0;6;;@Test public void resolveNoArgs() {     Method method = ResolvableMethod.on(TestController.class).mockCall(TestController::noArgs).method().     Mono<HandlerResult> mono = invoke(new TestController(), method).     assertHandlerResultValue(mono, "success"). }
false;public;0;14;;@Test public void cannotResolveArg() {     Method method = ResolvableMethod.on(TestController.class).mockCall(o -> o.singleArg(null)).method().     Mono<HandlerResult> mono = invoke(new TestController(), method).     try {         mono.block().         fail("Expected IllegalStateException").     } catch (IllegalStateException ex) {         assertThat(ex.getMessage(), is("Could not resolve parameter [0] in " + method.toGenericString() + ": No suitable resolver")).     } }
false;public;0;7;;@Test public void resolveProvidedArg() {     Method method = ResolvableMethod.on(TestController.class).mockCall(o -> o.singleArg(null)).method().     Mono<HandlerResult> mono = invoke(new TestController(), method, "value1").     assertHandlerResultValue(mono, "success:value1"). }
false;public;0;8;;@Test public void resolveProvidedArgFirst() {     this.resolvers.add(stubResolver("value1")).     Method method = ResolvableMethod.on(TestController.class).mockCall(o -> o.singleArg(null)).method().     Mono<HandlerResult> mono = invoke(new TestController(), method, "value2").     assertHandlerResultValue(mono, "success:value2"). }
false;public;0;14;;@Test public void exceptionInResolvingArg() {     this.resolvers.add(stubResolver(Mono.error(new UnsupportedMediaTypeStatusException("boo")))).     Method method = ResolvableMethod.on(TestController.class).mockCall(o -> o.singleArg(null)).method().     Mono<HandlerResult> mono = invoke(new TestController(), method).     try {         mono.block().         fail("Expected UnsupportedMediaTypeStatusException").     } catch (UnsupportedMediaTypeStatusException ex) {         assertThat(ex.getMessage(), is("415 UNSUPPORTED_MEDIA_TYPE \"boo\"")).     } }
false;public;0;19;;@Test public void illegalArgumentException() {     this.resolvers.add(stubResolver(1)).     Method method = ResolvableMethod.on(TestController.class).mockCall(o -> o.singleArg(null)).method().     Mono<HandlerResult> mono = invoke(new TestController(), method).     try {         mono.block().         fail("Expected IllegalStateException").     } catch (IllegalStateException ex) {         assertNotNull("Exception not wrapped", ex.getCause()).         assertTrue(ex.getCause() instanceof IllegalArgumentException).         assertTrue(ex.getMessage().contains("Controller [")).         assertTrue(ex.getMessage().contains("Method [")).         assertTrue(ex.getMessage().contains("with argument values:")).         assertTrue(ex.getMessage().contains("[0] [type=java.lang.Integer] [value=1]")).     } }
false;public;0;13;;@Test public void invocationTargetException() {     Method method = ResolvableMethod.on(TestController.class).mockCall(TestController::exceptionMethod).method().     Mono<HandlerResult> mono = invoke(new TestController(), method).     try {         mono.block().         fail("Expected IllegalStateException").     } catch (IllegalStateException ex) {         assertThat(ex.getMessage(), is("boo")).     } }
false;public;0;8;;@Test public void responseStatusAnnotation() {     Method method = ResolvableMethod.on(TestController.class).mockCall(TestController::created).method().     Mono<HandlerResult> mono = invoke(new TestController(), method).     assertHandlerResultValue(mono, "created").     assertThat(this.exchange.getResponse().getStatusCode(), is(HttpStatus.CREATED)). }
false;public;0;10;;@Test public void voidMethodWithResponseArg() {     ServerHttpResponse response = this.exchange.getResponse().     this.resolvers.add(stubResolver(response)).     Method method = ResolvableMethod.on(TestController.class).mockCall(c -> c.response(response)).method().     HandlerResult result = invokeForResult(new TestController(), method).     assertNull("Expected no result (i.e. fully handled)", result).     assertEquals("bar", this.exchange.getResponse().getHeaders().getFirst("foo")). }
false;public;0;10;;@Test public void voidMonoMethodWithResponseArg() {     ServerHttpResponse response = this.exchange.getResponse().     this.resolvers.add(stubResolver(response)).     Method method = ResolvableMethod.on(TestController.class).mockCall(c -> c.responseMonoVoid(response)).method().     HandlerResult result = invokeForResult(new TestController(), method).     assertNull("Expected no result (i.e. fully handled)", result).     assertEquals("body", this.exchange.getResponse().getBodyAsString().block(Duration.ZERO)). }
false;public;0;9;;@Test public void voidMethodWithExchangeArg() {     this.resolvers.add(stubResolver(this.exchange)).     Method method = ResolvableMethod.on(TestController.class).mockCall(c -> c.exchange(exchange)).method().     HandlerResult result = invokeForResult(new TestController(), method).     assertNull("Expected no result (i.e. fully handled)", result).     assertEquals("bar", this.exchange.getResponse().getHeaders().getFirst("foo")). }
false;public;0;9;;@Test public void voidMonoMethodWithExchangeArg() {     this.resolvers.add(stubResolver(this.exchange)).     Method method = ResolvableMethod.on(TestController.class).mockCall(c -> c.exchangeMonoVoid(exchange)).method().     HandlerResult result = invokeForResult(new TestController(), method).     assertNull("Expected no result (i.e. fully handled)", result).     assertEquals("body", this.exchange.getResponse().getBodyAsString().block(Duration.ZERO)). }
false;public;0;10;;@Test public void checkNotModified() {     MockServerHttpRequest request = MockServerHttpRequest.get("/").ifModifiedSince(10 * 1000 * 1000).build().     ServerWebExchange exchange = MockServerWebExchange.from(request).     this.resolvers.add(stubResolver(exchange)).     Method method = ResolvableMethod.on(TestController.class).mockCall(c -> c.notModified(exchange)).method().     HandlerResult result = invokeForResult(new TestController(), method).     assertNull("Expected no result (i.e. fully handled)", result). }
false;private;3;4;;@Nullable private HandlerResult invokeForResult(Object handler, Method method, Object... providedArgs) {     return invoke(handler, method, providedArgs).block(Duration.ofSeconds(5)). }
false;private;3;5;;private Mono<HandlerResult> invoke(Object handler, Method method, Object... providedArgs) {     InvocableHandlerMethod invocable = new InvocableHandlerMethod(handler, method).     invocable.setArgumentResolvers(this.resolvers).     return invocable.invoke(this.exchange, new BindingContext(), providedArgs). }
false;private;1;3;;private <T> HandlerMethodArgumentResolver stubResolver(Object stubValue) {     return stubResolver(Mono.just(stubValue)). }
false;private;1;6;;private <T> HandlerMethodArgumentResolver stubResolver(Mono<Object> stubValue) {     HandlerMethodArgumentResolver resolver = mock(HandlerMethodArgumentResolver.class).     when(resolver.supportsParameter(any())).thenReturn(true).     when(resolver.resolveArgument(any(), any(), any())).thenReturn(stubValue).     return resolver. }
false;private;2;6;;private void assertHandlerResultValue(Mono<HandlerResult> mono, String expected) {     StepVerifier.create(mono).consumeNextWith(result -> assertEquals(expected, result.getReturnValue())).expectComplete().verify(). }
false;;1;3;;String singleArg(String q) {     return "success:" + q. }
false;;0;3;;String noArgs() {     return "success". }
false;;0;3;;void exceptionMethod() {     throw new IllegalStateException("boo"). }
false;;0;4;;@ResponseStatus(HttpStatus.CREATED) String created() {     return "created". }
false;;1;3;;void response(ServerHttpResponse response) {     response.getHeaders().add("foo", "bar"). }
false;;1;4;;Mono<Void> responseMonoVoid(ServerHttpResponse response) {     return Mono.delay(Duration.ofMillis(100)).thenEmpty(Mono.defer(() -> response.writeWith(getBody("body")))). }
false;;1;3;;void exchange(ServerWebExchange exchange) {     exchange.getResponse().getHeaders().add("foo", "bar"). }
false;;1;4;;Mono<Void> exchangeMonoVoid(ServerWebExchange exchange) {     return Mono.delay(Duration.ofMillis(100)).thenEmpty(Mono.defer(() -> exchange.getResponse().writeWith(getBody("body")))). }
false;;1;7;;@Nullable String notModified(ServerWebExchange exchange) {     if (exchange.checkNotModified(Instant.ofEpochMilli(1000 * 1000))) {         return null.     }     return "body". }
false;private;1;3;;private Flux<DataBuffer> getBody(String body) {     return Flux.just(new DefaultDataBufferFactory().wrap(body.getBytes(StandardCharsets.UTF_8))). }
