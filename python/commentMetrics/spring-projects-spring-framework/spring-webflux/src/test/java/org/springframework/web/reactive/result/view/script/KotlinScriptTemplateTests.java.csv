commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void renderTemplateWithFrenchLocale() throws Exception {     Map<String, Object> model = new HashMap<>().     model.put("foo", "Foo").     String url = "org/springframework/web/reactive/result/view/script/kotlin/template.kts".     MockServerHttpResponse response = render(url, model, Locale.FRENCH, ScriptTemplatingConfiguration.class).     assertEquals("<html><body>\n<p>Bonjour Foo</p>\n</body></html>", response.getBodyAsString().block()). }
false;public;0;8;;@Test public void renderTemplateWithEnglishLocale() throws Exception {     Map<String, Object> model = new HashMap<>().     model.put("foo", "Foo").     String url = "org/springframework/web/reactive/result/view/script/kotlin/template.kts".     MockServerHttpResponse response = render(url, model, Locale.ENGLISH, ScriptTemplatingConfiguration.class).     assertEquals("<html><body>\n<p>Hello Foo</p>\n</body></html>", response.getBodyAsString().block()). }
false;public;0;13;;@Test public void renderTemplateWithoutRenderFunction() throws Exception {     Map<String, Object> model = new HashMap<>().     model.put("header", "<html><body>").     model.put("hello", "Hello").     model.put("foo", "Foo").     model.put("footer", "</body></html>").     String url = "org/springframework/web/reactive/result/view/script/kotlin/eval.kts".     Class<?> configClass = ScriptTemplatingConfigurationWithoutRenderFunction.class.     MockServerHttpResponse response = render(url, model, Locale.ENGLISH, configClass).     assertEquals("<html><body>\n<p>Hello Foo</p>\n</body></html>", response.getBodyAsString().block()). }
false;private;4;9;;private MockServerHttpResponse render(String viewUrl, Map<String, Object> model, Locale locale, Class<?> configuration) throws Exception {     ScriptTemplateView view = createViewWithUrl(viewUrl, configuration).     MockServerHttpRequest request = MockServerHttpRequest.get("/").acceptLanguageAsLocales(locale).build().     MockServerWebExchange exchange = MockServerWebExchange.from(request).     view.renderInternal(model, MediaType.TEXT_HTML, exchange).block().     return exchange.getResponse(). }
false;private;2;11;;private ScriptTemplateView createViewWithUrl(String viewUrl, Class<?> configuration) throws Exception {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(configuration).     ctx.refresh().     ScriptTemplateView view = new ScriptTemplateView().     view.setApplicationContext(ctx).     view.setUrl(viewUrl).     view.afterPropertiesSet().     return view. }
false;public;0;8;;@Bean public ScriptTemplateConfigurer kotlinScriptConfigurer() {     ScriptTemplateConfigurer configurer = new ScriptTemplateConfigurer().     configurer.setEngineName("kotlin").     configurer.setScripts("org/springframework/web/reactive/result/view/script/kotlin/render.kts").     configurer.setRenderFunction("render").     return configurer. }
false;public;0;6;;@Bean public ResourceBundleMessageSource messageSource() {     ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource().     messageSource.setBasename("org/springframework/web/reactive/result/view/script/messages").     return messageSource. }
false;public;0;4;;@Bean public ScriptTemplateConfigurer kotlinScriptConfigurer() {     return new ScriptTemplateConfigurer("kotlin"). }
