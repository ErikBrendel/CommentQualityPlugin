commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void noKey() {     ParameterContentTypeResolver resolver = new ParameterContentTypeResolver(Collections.emptyMap()).     ServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/")).     List<MediaType> mediaTypes = resolver.resolveMediaTypes(exchange).     assertEquals(RequestedContentTypeResolver.MEDIA_TYPE_ALL_LIST, mediaTypes). }
false;public;0;7;;@Test(expected = NotAcceptableStatusException.class) public void noMatchForKey() {     ParameterContentTypeResolver resolver = new ParameterContentTypeResolver(Collections.emptyMap()).     List<MediaType> mediaTypes = resolver.resolveMediaTypes(createExchange("blah")).     assertEquals(0, mediaTypes.size()). }
false;public;0;14;;@Test public void resolveKeyFromRegistrations() {     ServerWebExchange exchange = createExchange("html").     Map<String, MediaType> mapping = Collections.emptyMap().     RequestedContentTypeResolver resolver = new ParameterContentTypeResolver(mapping).     List<MediaType> mediaTypes = resolver.resolveMediaTypes(exchange).     assertEquals(Collections.singletonList(new MediaType("text", "html")), mediaTypes).     mapping = Collections.singletonMap("HTML", MediaType.APPLICATION_XHTML_XML).     resolver = new ParameterContentTypeResolver(mapping).     mediaTypes = resolver.resolveMediaTypes(exchange).     assertEquals(Collections.singletonList(new MediaType("application", "xhtml+xml")), mediaTypes). }
false;public;0;8;;@Test public void resolveKeyThroughMediaTypeFactory() {     ServerWebExchange exchange = createExchange("xls").     RequestedContentTypeResolver resolver = new ParameterContentTypeResolver(Collections.emptyMap()).     List<MediaType> mediaTypes = resolver.resolveMediaTypes(exchange).     assertEquals(Collections.singletonList(new MediaType("application", "vnd.ms-excel")), mediaTypes). }
false;public;0;9;;// SPR-13747 @Test public void resolveKeyIsCaseInsensitive() {     ServerWebExchange exchange = createExchange("JSoN").     Map<String, MediaType> mapping = Collections.singletonMap("json", MediaType.APPLICATION_JSON).     ParameterContentTypeResolver resolver = new ParameterContentTypeResolver(mapping).     List<MediaType> mediaTypes = resolver.resolveMediaTypes(exchange).     assertEquals(Collections.singletonList(MediaType.APPLICATION_JSON), mediaTypes). }
false;private;1;3;;private MockServerWebExchange createExchange(String format) {     return MockServerWebExchange.from(MockServerHttpRequest.get("/path?format=" + format)). }
