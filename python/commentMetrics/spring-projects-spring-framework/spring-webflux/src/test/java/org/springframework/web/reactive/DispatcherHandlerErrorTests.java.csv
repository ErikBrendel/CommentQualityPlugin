commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setup() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(TestConfig.class).     ctx.refresh().     this.dispatcherHandler = new DispatcherHandler(ctx). }
false;public;0;17;;@Test public void noHandler() {     MockServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/does-not-exist")).     Mono<Void> mono = this.dispatcherHandler.handle(exchange).     StepVerifier.create(mono).consumeErrorWith(ex -> {         assertThat(ex, instanceOf(ResponseStatusException.class)).         assertThat(ex.getMessage(), is("404 NOT_FOUND \"No matching handler\"")).     }).verify().     // SPR-17475     AtomicReference<Throwable> exceptionRef = new AtomicReference<>().     StepVerifier.create(mono).consumeErrorWith(exceptionRef::set).verify().     StepVerifier.create(mono).consumeErrorWith(ex -> assertNotSame(exceptionRef.get(), ex)).verify(). }
false;public;0;9;;@Test public void controllerReturnsMonoError() {     MockServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/error-signal")).     Mono<Void> publisher = this.dispatcherHandler.handle(exchange).     StepVerifier.create(publisher).consumeErrorWith(error -> assertSame(EXCEPTION, error)).verify(). }
false;public;0;9;;@Test public void controllerThrowsException() {     MockServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/raise-exception")).     Mono<Void> publisher = this.dispatcherHandler.handle(exchange).     StepVerifier.create(publisher).consumeErrorWith(error -> assertSame(EXCEPTION, error)).verify(). }
false;public;0;12;;@Test public void unknownReturnType() {     MockServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/unknown-return-type")).     Mono<Void> publisher = this.dispatcherHandler.handle(exchange).     StepVerifier.create(publisher).consumeErrorWith(error -> {         assertThat(error, instanceOf(IllegalStateException.class)).         assertThat(error.getMessage(), startsWith("No HandlerResultHandler")).     }).verify(). }
false;public;0;11;;@Test public void responseBodyMessageConversionError() {     ServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.post("/request-body").accept(APPLICATION_JSON).body("body")).     Mono<Void> publisher = this.dispatcherHandler.handle(exchange).     StepVerifier.create(publisher).consumeErrorWith(error -> assertThat(error, instanceOf(NotAcceptableStatusException.class))).verify(). }
false;public;0;11;;@Test public void requestBodyError() {     ServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.post("/request-body").body(Mono.error(EXCEPTION))).     Mono<Void> publisher = this.dispatcherHandler.handle(exchange).     StepVerifier.create(publisher).consumeErrorWith(error -> assertSame(EXCEPTION, error)).verify(). }
false;public;0;10;;@Test public void webExceptionHandler() {     ServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/unknown-argument-type")).     List<WebExceptionHandler> handlers = Collections.singletonList(new ServerError500ExceptionHandler()).     WebHandler webHandler = new ExceptionHandlingWebHandler(this.dispatcherHandler, handlers).     webHandler.handle(exchange).block(Duration.ofSeconds(5)).     assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, exchange.getResponse().getStatusCode()). }
false;public;0;4;;@Bean public RequestMappingHandlerMapping handlerMapping() {     return new RequestMappingHandlerMapping(). }
false;public;0;4;;@Bean public RequestMappingHandlerAdapter handlerAdapter() {     return new RequestMappingHandlerAdapter(). }
false;public;0;6;;@Bean public ResponseBodyResultHandler resultHandler() {     return new ResponseBodyResultHandler(Collections.singletonList(new EncoderHttpMessageWriter<>(CharSequenceEncoder.textPlainOnly())), new HeaderContentTypeResolver()). }
false;public;0;4;;@Bean public TestController testController() {     return new TestController(). }
false;public;0;5;;@RequestMapping("/error-signal") @ResponseBody public Publisher<String> errorSignal() {     return Mono.error(EXCEPTION). }
false;public;0;4;;@RequestMapping("/raise-exception") public void raiseException() {     throw EXCEPTION. }
false;public;0;4;;@RequestMapping("/unknown-return-type") public Foo unknownReturnType() {     return new Foo(). }
false;public;1;5;;@RequestMapping("/request-body") @ResponseBody public Publisher<String> requestBody(@RequestBody Publisher<String> body) {     return Mono.from(body).map(s -> "hello " + s). }
false;public;2;5;;@Override public Mono<Void> handle(ServerWebExchange exchange, Throwable ex) {     exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR).     return Mono.empty(). }
