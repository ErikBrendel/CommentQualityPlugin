commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public List<HttpMessageWriter<?>> messageWriters() {     return messageWriters. }
false;public;0;4;;@Override public Optional<ServerHttpRequest> serverRequest() {     return Optional.empty(). }
false;public;0;4;;@Override public Map<String, Object> hints() {     return hints. }
false;public;0;30;;@Before public void createContext() {     final List<HttpMessageWriter<?>> messageWriters = new ArrayList<>().     messageWriters.add(new EncoderHttpMessageWriter<>(new ByteBufferEncoder())).     messageWriters.add(new EncoderHttpMessageWriter<>(CharSequenceEncoder.textPlainOnly())).     messageWriters.add(new ResourceHttpMessageWriter()).     messageWriters.add(new EncoderHttpMessageWriter<>(new Jaxb2XmlEncoder())).     Jackson2JsonEncoder jsonEncoder = new Jackson2JsonEncoder().     messageWriters.add(new EncoderHttpMessageWriter<>(jsonEncoder)).     messageWriters.add(new ServerSentEventHttpMessageWriter(jsonEncoder)).     messageWriters.add(new FormHttpMessageWriter()).     messageWriters.add(new EncoderHttpMessageWriter<>(CharSequenceEncoder.allMimeTypes())).     messageWriters.add(new MultipartHttpMessageWriter(messageWriters)).     this.context = new BodyInserter.Context() {          @Override         public List<HttpMessageWriter<?>> messageWriters() {             return messageWriters.         }          @Override         public Optional<ServerHttpRequest> serverRequest() {             return Optional.empty().         }          @Override         public Map<String, Object> hints() {             return hints.         }     }.     this.hints = new HashMap<>(). }
false;public;0;16;;@Test public void ofString() {     String body = "foo".     BodyInserter<String, ReactiveHttpOutputMessage> inserter = BodyInserters.fromObject(body).     MockServerHttpResponse response = new MockServerHttpResponse().     Mono<Void> result = inserter.insert(response, this.context).     StepVerifier.create(result).expectComplete().verify().     StepVerifier.create(response.getBody()).consumeNextWith(buf -> {         String actual = DataBufferTestUtils.dumpString(buf, UTF_8).         Assert.assertEquals("foo", actual).     }).expectComplete().verify(). }
false;public;0;13;;@Test public void ofObject() {     User body = new User("foo", "bar").     BodyInserter<User, ReactiveHttpOutputMessage> inserter = BodyInserters.fromObject(body).     MockServerHttpResponse response = new MockServerHttpResponse().     Mono<Void> result = inserter.insert(response, this.context).     StepVerifier.create(result).expectComplete().verify().     StepVerifier.create(response.getBodyAsString()).expectNext("{\"username\":\"foo\",\"password\":\"bar\"}").expectComplete().verify(). }
false;public;0;14;;@Test public void ofObjectWithHints() {     User body = new User("foo", "bar").     BodyInserter<User, ReactiveHttpOutputMessage> inserter = BodyInserters.fromObject(body).     this.hints.put(JSON_VIEW_HINT, SafeToSerialize.class).     MockServerHttpResponse response = new MockServerHttpResponse().     Mono<Void> result = inserter.insert(response, this.context).     StepVerifier.create(result).expectComplete().verify().     StepVerifier.create(response.getBodyAsString()).expectNext("{\"username\":\"foo\"}").expectComplete().verify(). }
false;public;0;16;;@Test public void ofPublisher() {     Flux<String> body = Flux.just("foo").     BodyInserter<Flux<String>, ReactiveHttpOutputMessage> inserter = BodyInserters.fromPublisher(body, String.class).     MockServerHttpResponse response = new MockServerHttpResponse().     Mono<Void> result = inserter.insert(response, this.context).     StepVerifier.create(result).expectComplete().verify().     StepVerifier.create(response.getBody()).consumeNextWith(buf -> {         String actual = DataBufferTestUtils.dumpString(buf, UTF_8).         Assert.assertEquals("foo", actual).     }).expectComplete().verify(). }
false;public;0;21;;@Test public void ofResource() throws IOException {     Resource body = new ClassPathResource("response.txt", getClass()).     BodyInserter<Resource, ReactiveHttpOutputMessage> inserter = BodyInserters.fromResource(body).     MockServerHttpResponse response = new MockServerHttpResponse().     Mono<Void> result = inserter.insert(response, this.context).     StepVerifier.create(result).expectComplete().verify().     byte[] expectedBytes = Files.readAllBytes(body.getFile().toPath()).     StepVerifier.create(response.getBody()).consumeNextWith(dataBuffer -> {         byte[] resultBytes = new byte[dataBuffer.readableByteCount()].         dataBuffer.read(resultBytes).         DataBufferUtils.release(dataBuffer).         assertArrayEquals(expectedBytes, resultBytes).     }).expectComplete().verify(). }
false;public;0;4;;@Override public List<HttpMessageWriter<?>> messageWriters() {     return Collections.singletonList(new ResourceHttpMessageWriter()). }
false;public;0;4;;@Override public Optional<ServerHttpRequest> serverRequest() {     return Optional.of(request). }
false;public;0;4;;@Override public Map<String, Object> hints() {     return hints. }
false;public;0;42;;@Test public void ofResourceRange() throws IOException {     final int rangeStart = 10.     Resource body = new ClassPathResource("response.txt", getClass()).     BodyInserter<Resource, ReactiveHttpOutputMessage> inserter = BodyInserters.fromResource(body).     MockServerHttpRequest request = MockServerHttpRequest.get("/foo").range(HttpRange.createByteRange(rangeStart)).build().     MockServerHttpResponse response = new MockServerHttpResponse().     Mono<Void> result = inserter.insert(response, new BodyInserter.Context() {          @Override         public List<HttpMessageWriter<?>> messageWriters() {             return Collections.singletonList(new ResourceHttpMessageWriter()).         }          @Override         public Optional<ServerHttpRequest> serverRequest() {             return Optional.of(request).         }          @Override         public Map<String, Object> hints() {             return hints.         }     }).     StepVerifier.create(result).expectComplete().verify().     byte[] allBytes = Files.readAllBytes(body.getFile().toPath()).     byte[] expectedBytes = new byte[allBytes.length - rangeStart].     System.arraycopy(allBytes, rangeStart, expectedBytes, 0, expectedBytes.length).     StepVerifier.create(response.getBody()).consumeNextWith(dataBuffer -> {         byte[] resultBytes = new byte[dataBuffer.readableByteCount()].         dataBuffer.read(resultBytes).         DataBufferUtils.release(dataBuffer).         assertArrayEquals(expectedBytes, resultBytes).     }).expectComplete().verify(). }
false;public;0;11;;@Test public void ofServerSentEventFlux() {     ServerSentEvent<String> event = ServerSentEvent.builder("foo").build().     Flux<ServerSentEvent<String>> body = Flux.just(event).     BodyInserter<Flux<ServerSentEvent<String>>, ServerHttpResponse> inserter = BodyInserters.fromServerSentEvents(body).     MockServerHttpResponse response = new MockServerHttpResponse().     Mono<Void> result = inserter.insert(response, this.context).     StepVerifier.create(result).expectNextCount(0).expectComplete().verify(). }
false;public;0;27;;@Test public void fromFormDataMap() {     MultiValueMap<String, String> body = new LinkedMultiValueMap<>().     body.set("name 1", "value 1").     body.add("name 2", "value 2+1").     body.add("name 2", "value 2+2").     body.add("name 3", null).     BodyInserter<MultiValueMap<String, String>, ClientHttpRequest> inserter = BodyInserters.fromFormData(body).     MockClientHttpRequest request = new MockClientHttpRequest(HttpMethod.GET, URI.create("http://example.com")).     Mono<Void> result = inserter.insert(request, this.context).     StepVerifier.create(result).expectComplete().verify().     StepVerifier.create(request.getBody()).consumeNextWith(dataBuffer -> {         byte[] resultBytes = new byte[dataBuffer.readableByteCount()].         dataBuffer.read(resultBytes).         DataBufferUtils.release(dataBuffer).         assertArrayEquals("name+1=value+1&name+2=value+2%2B1&name+2=value+2%2B2&name+3".getBytes(StandardCharsets.UTF_8), resultBytes).     }).expectComplete().verify(). }
false;public;0;24;;@Test public void fromFormDataWith() {     BodyInserter<MultiValueMap<String, String>, ClientHttpRequest> inserter = BodyInserters.fromFormData("name 1", "value 1").with("name 2", "value 2+1").with("name 2", "value 2+2").with("name 3", null).     MockClientHttpRequest request = new MockClientHttpRequest(HttpMethod.GET, URI.create("http://example.com")).     Mono<Void> result = inserter.insert(request, this.context).     StepVerifier.create(result).expectComplete().verify().     StepVerifier.create(request.getBody()).consumeNextWith(dataBuffer -> {         byte[] resultBytes = new byte[dataBuffer.readableByteCount()].         dataBuffer.read(resultBytes).         DataBufferUtils.release(dataBuffer).         assertArrayEquals("name+1=value+1&name+2=value+2%2B1&name+2=value+2%2B2&name+3".getBytes(StandardCharsets.UTF_8), resultBytes).     }).expectComplete().verify(). }
false;public;0;15;;@Test public void fromMultipartData() {     MultiValueMap<String, Object> map = new LinkedMultiValueMap<>().     map.set("name 3", "value 3").     BodyInserters.FormInserter<Object> inserter = BodyInserters.fromMultipartData("name 1", "value 1").withPublisher("name 2", Flux.just("foo", "bar", "baz"), String.class).with(map).     MockClientHttpRequest request = new MockClientHttpRequest(HttpMethod.GET, URI.create("http://example.com")).     Mono<Void> result = inserter.insert(request, this.context).     StepVerifier.create(result).expectComplete().verify(). }
false;public;0;30;;// SPR-16350 @Test public void fromMultipartDataWithMultipleValues() {     MultiValueMap<String, Object> map = new LinkedMultiValueMap<>().     map.put("name", Arrays.asList("value1", "value2")).     BodyInserters.FormInserter<Object> inserter = BodyInserters.fromMultipartData(map).     MockClientHttpRequest request = new MockClientHttpRequest(HttpMethod.GET, URI.create("http://example.com")).     Mono<Void> result = inserter.insert(request, this.context).     StepVerifier.create(result).expectComplete().verify().     StepVerifier.create(DataBufferUtils.join(request.getBody())).consumeNextWith(dataBuffer -> {         byte[] resultBytes = new byte[dataBuffer.readableByteCount()].         dataBuffer.read(resultBytes).         DataBufferUtils.release(dataBuffer).         String content = new String(resultBytes, StandardCharsets.UTF_8).         assertThat(content, containsString("Content-Disposition: form-data. name=\"name\"\r\n" + "Content-Type: text/plain.charset=UTF-8\r\n" + "Content-Length: 6\r\n" + "\r\n" + "value1")).         assertThat(content, containsString("Content-Disposition: form-data. name=\"name\"\r\n" + "Content-Type: text/plain.charset=UTF-8\r\n" + "Content-Length: 6\r\n" + "\r\n" + "value2")).     }).expectComplete().verify(). }
false;public;0;18;;@Test public void ofDataBuffers() {     DefaultDataBufferFactory factory = new DefaultDataBufferFactory().     DefaultDataBuffer dataBuffer = factory.wrap(ByteBuffer.wrap("foo".getBytes(StandardCharsets.UTF_8))).     Flux<DataBuffer> body = Flux.just(dataBuffer).     BodyInserter<Flux<DataBuffer>, ReactiveHttpOutputMessage> inserter = BodyInserters.fromDataBuffers(body).     MockServerHttpResponse response = new MockServerHttpResponse().     Mono<Void> result = inserter.insert(response, this.context).     StepVerifier.create(result).expectComplete().verify().     StepVerifier.create(response.getBody()).expectNext(dataBuffer).expectComplete().verify(). }
false;public;0;3;;public String getUsername() {     return username. }
false;public;1;3;;public void setUsername(String username) {     this.username = username. }
false;public;0;3;;public String getPassword() {     return password. }
false;public;1;3;;public void setPassword(String password) {     this.password = password. }
