commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setup() {     StaticApplicationContext context = new StaticApplicationContext().     context.refresh().     this.resolver = new UrlBasedViewResolver().     this.resolver.setApplicationContext(context). }
false;public;0;11;;@Test public void viewNames() throws Exception {     this.resolver.setViewClass(TestView.class).     this.resolver.setViewNames("my*").     Mono<View> mono = this.resolver.resolveViewName("my-view", Locale.US).     assertNotNull(mono.block()).     mono = this.resolver.resolveViewName("not-my-view", Locale.US).     assertNull(mono.block()). }
false;public;0;14;;@Test public void redirectView() throws Exception {     Mono<View> mono = this.resolver.resolveViewName("redirect:foo", Locale.US).     StepVerifier.create(mono).consumeNextWith(view -> {         assertEquals(RedirectView.class, view.getClass()).         RedirectView redirectView = (RedirectView) view.         assertEquals("foo", redirectView.getUrl()).         assertEquals(HttpStatus.SEE_OTHER, redirectView.getStatusCode()).     }).expectComplete().verify(Duration.ZERO). }
false;public;0;15;;@Test public void customizedRedirectView() throws Exception {     this.resolver.setRedirectViewProvider(url -> new RedirectView(url, HttpStatus.FOUND)).     Mono<View> mono = this.resolver.resolveViewName("redirect:foo", Locale.US).     StepVerifier.create(mono).consumeNextWith(view -> {         assertEquals(RedirectView.class, view.getClass()).         RedirectView redirectView = (RedirectView) view.         assertEquals("foo", redirectView.getUrl()).         assertEquals(HttpStatus.FOUND, redirectView.getStatusCode()).     }).expectComplete().verify(Duration.ZERO). }
false;public;1;4;;@Override public boolean checkResourceExists(Locale locale) throws Exception {     return true. }
false;protected;3;6;;@Override protected Mono<Void> renderInternal(Map<String, Object> attributes, MediaType contentType, ServerWebExchange exchange) {     return Mono.empty(). }
