commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void consumesMatch() throws Exception {     MockServerWebExchange exchange = postExchange("text/plain").     ConsumesRequestCondition condition = new ConsumesRequestCondition("text/plain").     assertNotNull(condition.getMatchingCondition(exchange)). }
false;public;0;7;;@Test public void negatedConsumesMatch() throws Exception {     MockServerWebExchange exchange = postExchange("text/plain").     ConsumesRequestCondition condition = new ConsumesRequestCondition("!text/plain").     assertNull(condition.getMatchingCondition(exchange)). }
false;public;0;5;;@Test public void getConsumableMediaTypesNegatedExpression() throws Exception {     ConsumesRequestCondition condition = new ConsumesRequestCondition("!application/xml").     assertEquals(Collections.emptySet(), condition.getConsumableMediaTypes()). }
false;public;0;7;;@Test public void consumesWildcardMatch() throws Exception {     MockServerWebExchange exchange = postExchange("text/plain").     ConsumesRequestCondition condition = new ConsumesRequestCondition("text/*").     assertNotNull(condition.getMatchingCondition(exchange)). }
false;public;0;7;;@Test public void consumesMultipleMatch() throws Exception {     MockServerWebExchange exchange = postExchange("text/plain").     ConsumesRequestCondition condition = new ConsumesRequestCondition("text/plain", "application/xml").     assertNotNull(condition.getMatchingCondition(exchange)). }
false;public;0;7;;@Test public void consumesSingleNoMatch() throws Exception {     MockServerWebExchange exchange = postExchange("application/xml").     ConsumesRequestCondition condition = new ConsumesRequestCondition("text/plain").     assertNull(condition.getMatchingCondition(exchange)). }
false;public;0;7;;@Test public void consumesParseError() throws Exception {     MockServerWebExchange exchange = postExchange("01").     ConsumesRequestCondition condition = new ConsumesRequestCondition("text/plain").     assertNull(condition.getMatchingCondition(exchange)). }
false;public;0;7;;@Test public void consumesParseErrorWithNegation() throws Exception {     MockServerWebExchange exchange = postExchange("01").     ConsumesRequestCondition condition = new ConsumesRequestCondition("!text/plain").     assertNull(condition.getMatchingCondition(exchange)). }
false;public;0;13;;@Test public void compareToSingle() throws Exception {     MockServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/")).     ConsumesRequestCondition condition1 = new ConsumesRequestCondition("text/plain").     ConsumesRequestCondition condition2 = new ConsumesRequestCondition("text/*").     int result = condition1.compareTo(condition2, exchange).     assertTrue("Invalid comparison result: " + result, result < 0).     result = condition2.compareTo(condition1, exchange).     assertTrue("Invalid comparison result: " + result, result > 0). }
false;public;0;13;;@Test public void compareToMultiple() throws Exception {     MockServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/")).     ConsumesRequestCondition condition1 = new ConsumesRequestCondition("*/*", "text/plain").     ConsumesRequestCondition condition2 = new ConsumesRequestCondition("text/*", "text/plain.q=0.7").     int result = condition1.compareTo(condition2, exchange).     assertTrue("Invalid comparison result: " + result, result < 0).     result = condition2.compareTo(condition1, exchange).     assertTrue("Invalid comparison result: " + result, result > 0). }
false;public;0;8;;@Test public void combine() throws Exception {     ConsumesRequestCondition condition1 = new ConsumesRequestCondition("text/plain").     ConsumesRequestCondition condition2 = new ConsumesRequestCondition("application/xml").     ConsumesRequestCondition result = condition1.combine(condition2).     assertEquals(condition2, result). }
false;public;0;8;;@Test public void combineWithDefault() throws Exception {     ConsumesRequestCondition condition1 = new ConsumesRequestCondition("text/plain").     ConsumesRequestCondition condition2 = new ConsumesRequestCondition().     ConsumesRequestCondition result = condition1.combine(condition2).     assertEquals(condition1, result). }
false;public;0;8;;@Test public void parseConsumesAndHeaders() throws Exception {     String[] consumes = new String[] { "text/plain" }.     String[] headers = new String[] { "foo=bar", "content-type=application/xml,application/pdf" }.     ConsumesRequestCondition condition = new ConsumesRequestCondition(consumes, headers).     assertConditions(condition, "text/plain", "application/xml", "application/pdf"). }
false;public;0;12;;@Test public void getMatchingCondition() throws Exception {     MockServerWebExchange exchange = postExchange("text/plain").     ConsumesRequestCondition condition = new ConsumesRequestCondition("text/plain", "application/xml").     ConsumesRequestCondition result = condition.getMatchingCondition(exchange).     assertConditions(result, "text/plain").     condition = new ConsumesRequestCondition("application/xml").     result = condition.getMatchingCondition(exchange).     assertNull(result). }
false;private;2;18;;private void assertConditions(ConsumesRequestCondition condition, String... expected) {     Collection<ConsumeMediaTypeExpression> expressions = condition.getContent().     assertEquals("Invalid amount of conditions", expressions.size(), expected.length).     for (String s : expected) {         boolean found = false.         for (ConsumeMediaTypeExpression expr : expressions) {             String conditionMediaType = expr.getMediaType().toString().             if (conditionMediaType.equals(s)) {                 found = true.                 break.             }         }         if (!found) {             fail("Condition [" + s + "] not found").         }     } }
false;private;1;4;;private MockServerWebExchange postExchange(String contentType) {     return MockServerWebExchange.from(MockServerHttpRequest.post("/").header(HttpHeaders.CONTENT_TYPE, contentType)). }
