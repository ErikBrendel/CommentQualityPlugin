commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void and() {     HandlerFunction<ServerResponse> handlerFunction = request -> ServerResponse.ok().build().     RouterFunction<ServerResponse> routerFunction1 = request -> Mono.empty().     RouterFunction<ServerResponse> routerFunction2 = request -> Mono.just(handlerFunction).     RouterFunction<ServerResponse> result = routerFunction1.and(routerFunction2).     assertNotNull(result).     MockServerRequest request = MockServerRequest.builder().build().     Mono<HandlerFunction<ServerResponse>> resultHandlerFunction = result.route(request).     StepVerifier.create(resultHandlerFunction).expectNext(handlerFunction).expectComplete().verify(). }
false;public;0;19;;@Test public void andOther() {     HandlerFunction<ServerResponse> handlerFunction = request -> ServerResponse.ok().body(fromObject("42")).     RouterFunction<?> routerFunction1 = request -> Mono.empty().     RouterFunction<ServerResponse> routerFunction2 = request -> Mono.just(handlerFunction).     RouterFunction<?> result = routerFunction1.andOther(routerFunction2).     assertNotNull(result).     MockServerRequest request = MockServerRequest.builder().build().     Mono<? extends HandlerFunction<?>> resultHandlerFunction = result.route(request).     StepVerifier.create(resultHandlerFunction).expectNextMatches(o -> o.equals(handlerFunction)).expectComplete().verify(). }
false;public;0;16;;@Test public void andRoute() {     RouterFunction<ServerResponse> routerFunction1 = request -> Mono.empty().     RequestPredicate requestPredicate = request -> true.     RouterFunction<ServerResponse> result = routerFunction1.andRoute(requestPredicate, this::handlerMethod).     assertNotNull(result).     MockServerRequest request = MockServerRequest.builder().build().     Mono<? extends HandlerFunction<?>> resultHandlerFunction = result.route(request).     StepVerifier.create(resultHandlerFunction).expectNextCount(1).expectComplete().verify(). }
false;public;0;34;;@Test public void filter() {     Mono<String> stringMono = Mono.just("42").     HandlerFunction<EntityResponse<Mono<String>>> handlerFunction = request -> EntityResponse.fromPublisher(stringMono, String.class).build().     RouterFunction<EntityResponse<Mono<String>>> routerFunction = request -> Mono.just(handlerFunction).     HandlerFilterFunction<EntityResponse<Mono<String>>, EntityResponse<Mono<Integer>>> filterFunction = (request, next) -> next.handle(request).flatMap(response -> {         Mono<Integer> intMono = response.entity().map(Integer::parseInt).         return EntityResponse.fromPublisher(intMono, Integer.class).build().     }).     RouterFunction<EntityResponse<Mono<Integer>>> result = routerFunction.filter(filterFunction).     assertNotNull(result).     MockServerRequest request = MockServerRequest.builder().build().     Mono<EntityResponse<Mono<Integer>>> responseMono = result.route(request).flatMap(hf -> hf.handle(request)).     StepVerifier.create(responseMono).consumeNextWith(serverResponse -> {         StepVerifier.create(serverResponse.entity()).expectNext(42).expectComplete().verify().     }).expectComplete().verify(). }
false;private;1;3;;private Mono<ServerResponse> handlerMethod(ServerRequest request) {     return ServerResponse.ok().body(fromObject("42")). }
