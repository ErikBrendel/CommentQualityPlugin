commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Before public void setup() throws Exception {     this.resolver = new PathVariableMapMethodArgumentResolver(ReactiveAdapterRegistry.getSharedInstance()).     Method method = ReflectionUtils.findMethod(getClass(), "handle", (Class<?>[]) null).     this.paramMap = new MethodParameter(method, 0).     this.paramNamedMap = new MethodParameter(method, 1).     this.paramMapNoAnnot = new MethodParameter(method, 2).     this.paramMonoMap = new MethodParameter(method, 3). }
false;public;0;15;;@Test public void supportsParameter() {     assertTrue(resolver.supportsParameter(paramMap)).     assertFalse(resolver.supportsParameter(paramNamedMap)).     assertFalse(resolver.supportsParameter(paramMapNoAnnot)).     try {         this.resolver.supportsParameter(this.paramMonoMap).         fail().     } catch (IllegalStateException ex) {         assertTrue("Unexpected error message:\n" + ex.getMessage(), ex.getMessage().startsWith("PathVariableMapMethodArgumentResolver doesn't support reactive type wrapper")).     } }
false;public;0;12;;@Test public void resolveArgument() throws Exception {     Map<String, String> uriTemplateVars = new HashMap<>().     uriTemplateVars.put("name1", "value1").     uriTemplateVars.put("name2", "value2").     this.exchange.getAttributes().put(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVars).     Mono<Object> mono = this.resolver.resolveArgument(this.paramMap, new BindingContext(), this.exchange).     Object result = mono.block().     assertEquals(uriTemplateVars, result). }
false;public;0;7;;@Test public void resolveArgumentNoUriVars() throws Exception {     Mono<Object> mono = this.resolver.resolveArgument(this.paramMap, new BindingContext(), this.exchange).     Object result = mono.block().     assertEquals(Collections.emptyMap(), result). }
false;public;4;7;;@SuppressWarnings("unused") public void handle(@PathVariable Map<String, String> map, @PathVariable(value = "name") Map<String, String> namedMap, Map<String, String> mapWithoutAnnotat, @PathVariable Mono<Map<?, ?>> monoMap) { }
