commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;13;;@Override protected RouterFunction<?> routerFunction() {     NestedHandler nestedHandler = new NestedHandler().     return nest(path("/foo/"), route(GET("/bar"), nestedHandler::pattern).andRoute(GET("/baz"), nestedHandler::pattern)).andNest(GET("/{foo}"), route(GET("/bar"), nestedHandler::variables).and(nest(GET("/{bar}"), route(GET("/{baz}"), nestedHandler::variables)))).andRoute(path("/{qux}/quux").and(method(HttpMethod.GET)), nestedHandler::variables).andRoute(all(), nestedHandler::variables). }
false;public;0;8;;@Test public void bar() {     ResponseEntity<String> result = restTemplate.getForEntity("http://localhost:" + port + "/foo/bar", String.class).     assertEquals(HttpStatus.OK, result.getStatusCode()).     assertEquals("/foo/bar", result.getBody()). }
false;public;0;8;;@Test public void baz() {     ResponseEntity<String> result = restTemplate.getForEntity("http://localhost:" + port + "/foo/baz", String.class).     assertEquals(HttpStatus.OK, result.getStatusCode()).     assertEquals("/foo/baz", result.getBody()). }
false;public;0;8;;@Test public void variables() {     ResponseEntity<String> result = restTemplate.getForEntity("http://localhost:" + port + "/1/2/3", String.class).     assertEquals(HttpStatus.OK, result.getStatusCode()).     assertEquals("/{foo}/{bar}/{baz}\n{foo=1, bar=2, baz=3}", result.getBody()). }
true;public;0;9;// SPR-16868 ;// SPR-16868 @Test public void parentVariables() {     ResponseEntity<String> result = restTemplate.getForEntity("http://localhost:" + port + "/1/bar", String.class).     assertEquals(HttpStatus.OK, result.getStatusCode()).     assertEquals("/{foo}/bar\n{foo=1}", result.getBody()). }
true;public;0;9;// SPR 16692 ;// SPR 16692 @Test public void removeFailedNestedPathVariables() {     ResponseEntity<String> result = restTemplate.getForEntity("http://localhost:" + port + "/qux/quux", String.class).     assertEquals(HttpStatus.OK, result.getStatusCode()).     assertEquals("/{qux}/quux\n{qux=qux}", result.getBody()). }
true;public;0;9;// SPR 17210 ;// SPR 17210 @Test public void removeFailedPathVariablesAnd() {     ResponseEntity<String> result = restTemplate.postForEntity("http://localhost:" + port + "/qux/quux", "", String.class).     assertEquals(HttpStatus.OK, result.getStatusCode()).     assertEquals("{}", result.getBody()). }
false;public;1;4;;public Mono<ServerResponse> pattern(ServerRequest request) {     String pattern = matchingPattern(request).getPatternString().     return ServerResponse.ok().syncBody(pattern). }
false;public;1;18;;@SuppressWarnings("unchecked") public Mono<ServerResponse> variables(ServerRequest request) {     Map<String, String> pathVariables = request.pathVariables().     Map<String, String> attributePathVariables = (Map<String, String>) request.attributes().get(RouterFunctions.URI_TEMPLATE_VARIABLES_ATTRIBUTE).     assertTrue((pathVariables.equals(attributePathVariables)) || (pathVariables.isEmpty() && (attributePathVariables == null))).     PathPattern pathPattern = matchingPattern(request).     String pattern = pathPattern != null ? pathPattern.getPatternString() : "".     Flux<String> responseBody.     if (!pattern.isEmpty()) {         responseBody = Flux.just(pattern, "\n", pathVariables.toString()).     } else {         responseBody = Flux.just(pathVariables.toString()).     }     return ServerResponse.ok().body(responseBody, String.class). }
false;private;1;4;;@Nullable private PathPattern matchingPattern(ServerRequest request) {     return (PathPattern) request.attributes().get(RouterFunctions.MATCHING_PATTERN_ATTRIBUTE). }
