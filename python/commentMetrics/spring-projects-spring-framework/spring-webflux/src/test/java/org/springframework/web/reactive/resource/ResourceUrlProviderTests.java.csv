commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Before public void setup() throws Exception {     this.locations.add(new ClassPathResource("test/", getClass())).     this.locations.add(new ClassPathResource("testalternatepath/", getClass())).     this.handler.setLocations(this.locations).     this.handler.afterPropertiesSet().     this.handlerMap.put("/resources/**", this.handler).     this.urlProvider.registerHandlers(this.handlerMap). }
false;public;0;7;;@Test public void getStaticResourceUrl() {     String expected = "/resources/foo.css".     String actual = this.urlProvider.getForUriString(expected, this.exchange).block(TIMEOUT).     assertEquals(expected, actual). }
false;public;0;11;;// SPR-13374 @Test public void getStaticResourceUrlRequestWithQueryOrHash() {     String url = "/resources/foo.css?foo=bar&url=http://example.org".     String resolvedUrl = this.urlProvider.getForUriString(url, this.exchange).block(TIMEOUT).     assertEquals(url, resolvedUrl).     url = "/resources/foo.css#hash".     resolvedUrl = this.urlProvider.getForUriString(url, this.exchange).block(TIMEOUT).     assertEquals(url, resolvedUrl). }
false;public;0;14;;@Test public void getVersionedResourceUrl() {     VersionResourceResolver versionResolver = new VersionResourceResolver().     versionResolver.setStrategyMap(Collections.singletonMap("/**", new ContentVersionStrategy())).     List<ResourceResolver> resolvers = new ArrayList<>().     resolvers.add(versionResolver).     resolvers.add(new PathResourceResolver()).     this.handler.setResourceResolvers(resolvers).     String path = "/resources/foo.css".     String url = this.urlProvider.getForUriString(path, this.exchange).block(TIMEOUT).     assertEquals("/resources/foo-e36d2e05253c6c7085a91522ce43a0b4.css", url). }
false;public;0;19;;// SPR-12647 @Test public void bestPatternMatch() {     ResourceWebHandler otherHandler = new ResourceWebHandler().     otherHandler.setLocations(this.locations).     VersionResourceResolver versionResolver = new VersionResourceResolver().     versionResolver.setStrategyMap(Collections.singletonMap("/**", new ContentVersionStrategy())).     List<ResourceResolver> resolvers = new ArrayList<>().     resolvers.add(versionResolver).     resolvers.add(new PathResourceResolver()).     otherHandler.setResourceResolvers(resolvers).     this.handlerMap.put("/resources/*.css", otherHandler).     this.urlProvider.registerHandlers(this.handlerMap).     String path = "/resources/foo.css".     String url = this.urlProvider.getForUriString(path, this.exchange).block(TIMEOUT).     assertEquals("/resources/foo-e36d2e05253c6c7085a91522ce43a0b4.css", url). }
false;public;0;11;;// SPR-12592 @Test @SuppressWarnings("resource") public void initializeOnce() {     AnnotationConfigWebApplicationContext context = new AnnotationConfigWebApplicationContext().     context.setServletContext(new MockServletContext()).     context.register(HandlerMappingConfiguration.class).     context.refresh().     assertThat(context.getBean(ResourceUrlProvider.class).getHandlerMap(), Matchers.hasKey(pattern("/resources/**"))). }
false;public;0;9;;@Bean public SimpleUrlHandlerMapping simpleUrlHandlerMapping() {     ResourceWebHandler handler = new ResourceWebHandler().     HashMap<String, ResourceWebHandler> handlerMap = new HashMap<>().     handlerMap.put("/resources/**", handler).     SimpleUrlHandlerMapping hm = new SimpleUrlHandlerMapping().     hm.setUrlMap(handlerMap).     return hm. }
false;public;0;4;;@Bean public ResourceUrlProvider resourceUrlProvider() {     return new ResourceUrlProvider(). }
false;private,static;1;3;;private static PathPatternMatcher pattern(String pattern) {     return new PathPatternMatcher(pattern). }
false;public;1;7;;@Override public boolean matches(Object item) {     if (item != null && item instanceof PathPattern) {         return ((PathPattern) item).getPatternString().equals(pattern).     }     return false. }
false;public;1;4;;@Override public void describeTo(Description description) { }
