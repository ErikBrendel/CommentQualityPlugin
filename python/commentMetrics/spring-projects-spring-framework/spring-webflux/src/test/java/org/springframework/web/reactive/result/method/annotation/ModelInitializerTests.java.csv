commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Before public void setUp() throws Exception {     ReactiveAdapterRegistry adapterRegistry = ReactiveAdapterRegistry.getSharedInstance().     ArgumentResolverConfigurer resolverConfigurer = new ArgumentResolverConfigurer().     resolverConfigurer.addCustomResolver(new ModelArgumentResolver(adapterRegistry)).     ControllerMethodResolver methodResolver = new ControllerMethodResolver(resolverConfigurer, adapterRegistry, new StaticApplicationContext(), Collections.emptyList()).     this.modelInitializer = new ModelInitializer(methodResolver, adapterRegistry). }
false;public;0;17;;@SuppressWarnings("unchecked") @Test public void initBinderMethod() throws Exception {     Validator validator = mock(Validator.class).     TestController controller = new TestController().     controller.setValidator(validator).     InitBinderBindingContext context = getBindingContext(controller).     Method method = ResolvableMethod.on(TestController.class).annotPresent(GetMapping.class).resolveMethod().     HandlerMethod handlerMethod = new HandlerMethod(controller, method).     this.modelInitializer.initModel(handlerMethod, context, this.exchange).block(Duration.ofMillis(5000)).     WebExchangeDataBinder binder = context.createDataBinder(this.exchange, "name").     assertEquals(Collections.singletonList(validator), binder.getValidators()). }
false;public;0;28;;@SuppressWarnings("unchecked") @Test public void modelAttributeMethods() throws Exception {     TestController controller = new TestController().     InitBinderBindingContext context = getBindingContext(controller).     Method method = ResolvableMethod.on(TestController.class).annotPresent(GetMapping.class).resolveMethod().     HandlerMethod handlerMethod = new HandlerMethod(controller, method).     this.modelInitializer.initModel(handlerMethod, context, this.exchange).block(Duration.ofMillis(5000)).     Map<String, Object> model = context.getModel().asMap().     assertEquals(5, model.size()).     Object value = model.get("bean").     assertEquals("Bean", ((TestBean) value).getName()).     value = model.get("monoBean").     assertEquals("Mono Bean", ((Mono<TestBean>) value).block(Duration.ofMillis(5000)).getName()).     value = model.get("singleBean").     assertEquals("Single Bean", ((Single<TestBean>) value).toBlocking().value().getName()).     value = model.get("voidMethodBean").     assertEquals("Void Method Bean", ((TestBean) value).getName()).     value = model.get("voidMonoMethodBean").     assertEquals("Void Mono Method Bean", ((TestBean) value).getName()). }
false;public;0;17;;@Test public void saveModelAttributeToSession() throws Exception {     TestController controller = new TestController().     InitBinderBindingContext context = getBindingContext(controller).     Method method = ResolvableMethod.on(TestController.class).annotPresent(GetMapping.class).resolveMethod().     HandlerMethod handlerMethod = new HandlerMethod(controller, method).     this.modelInitializer.initModel(handlerMethod, context, this.exchange).block(Duration.ofMillis(5000)).     WebSession session = this.exchange.getSession().block(Duration.ZERO).     assertNotNull(session).     assertEquals(0, session.getAttributes().size()).     context.saveModel().     assertEquals(1, session.getAttributes().size()).     assertEquals("Bean", ((TestBean) session.getRequiredAttribute("bean")).getName()). }
false;public;0;19;;@Test public void retrieveModelAttributeFromSession() throws Exception {     WebSession session = this.exchange.getSession().block(Duration.ZERO).     assertNotNull(session).     TestBean testBean = new TestBean("Session Bean").     session.getAttributes().put("bean", testBean).     TestController controller = new TestController().     InitBinderBindingContext context = getBindingContext(controller).     Method method = ResolvableMethod.on(TestController.class).annotPresent(GetMapping.class).resolveMethod().     HandlerMethod handlerMethod = new HandlerMethod(controller, method).     this.modelInitializer.initModel(handlerMethod, context, this.exchange).block(Duration.ofMillis(5000)).     context.saveModel().     assertEquals(1, session.getAttributes().size()).     assertEquals("Session Bean", ((TestBean) session.getRequiredAttribute("bean")).getName()). }
false;public;0;15;;@Test public void requiredSessionAttributeMissing() throws Exception {     TestController controller = new TestController().     InitBinderBindingContext context = getBindingContext(controller).     Method method = ResolvableMethod.on(TestController.class).annotPresent(PostMapping.class).resolveMethod().     HandlerMethod handlerMethod = new HandlerMethod(controller, method).     try {         this.modelInitializer.initModel(handlerMethod, context, this.exchange).block(Duration.ofMillis(5000)).         fail().     } catch (IllegalArgumentException ex) {         assertEquals("Required attribute 'missing-bean' is missing.", ex.getMessage()).     } }
false;public;0;20;;@Test public void clearModelAttributeFromSession() throws Exception {     WebSession session = this.exchange.getSession().block(Duration.ZERO).     assertNotNull(session).     TestBean testBean = new TestBean("Session Bean").     session.getAttributes().put("bean", testBean).     TestController controller = new TestController().     InitBinderBindingContext context = getBindingContext(controller).     Method method = ResolvableMethod.on(TestController.class).annotPresent(GetMapping.class).resolveMethod().     HandlerMethod handlerMethod = new HandlerMethod(controller, method).     this.modelInitializer.initModel(handlerMethod, context, this.exchange).block(Duration.ofMillis(5000)).     context.getSessionStatus().setComplete().     context.saveModel().     assertEquals(0, session.getAttributes().size()). }
false;private;1;11;;private InitBinderBindingContext getBindingContext(Object controller) {     List<SyncInvocableHandlerMethod> binderMethods = MethodIntrospector.selectMethods(controller.getClass(), BINDER_METHODS).stream().map(method -> new SyncInvocableHandlerMethod(controller, method)).collect(Collectors.toList()).     WebBindingInitializer bindingInitializer = new ConfigurableWebBindingInitializer().     return new InitBinderBindingContext(bindingInitializer, binderMethods). }
false;;1;3;;void setValidator(Validator validator) {     this.validator = validator. }
false;public;1;6;;@InitBinder public void initDataBinder(WebDataBinder dataBinder) {     if (this.validator != null) {         dataBinder.addValidators(this.validator).     } }
false;public;0;4;;@ModelAttribute("bean") public TestBean returnValue() {     return new TestBean("Bean"). }
false;public;0;4;;@ModelAttribute("monoBean") public Mono<TestBean> returnValueMono() {     return Mono.just(new TestBean("Mono Bean")). }
false;public;0;4;;@ModelAttribute("singleBean") public Single<TestBean> returnValueSingle() {     return Single.just(new TestBean("Single Bean")). }
false;public;1;4;;@ModelAttribute public void voidMethodBean(Model model) {     model.addAttribute("voidMethodBean", new TestBean("Void Method Bean")). }
false;public;1;6;;@ModelAttribute public Mono<Void> voidMonoMethodBean(Model model) {     return Mono.just("Void Mono Method Bean").doOnNext(name -> model.addAttribute("voidMonoMethodBean", new TestBean(name))).then(). }
false;public;0;2;;@GetMapping public void handleGet() { }
false;public;1;2;;@PostMapping public void handlePost(@ModelAttribute("missing-bean") TestBean testBean) { }
false;public;0;3;;public String getName() {     return this.name. }
false;public;0;4;;@Override public String toString() {     return "TestBean[name=" + this.name + "]". }
