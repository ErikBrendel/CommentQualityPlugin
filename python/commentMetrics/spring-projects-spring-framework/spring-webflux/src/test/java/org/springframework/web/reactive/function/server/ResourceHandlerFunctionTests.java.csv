commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public List<HttpMessageWriter<?>> messageWriters() {     return strategies.messageWriters(). }
false;public;0;4;;@Override public List<ViewResolver> viewResolvers() {     return strategies.viewResolvers(). }
false;public;0;14;;@Before public void createContext() {     HandlerStrategies strategies = HandlerStrategies.withDefaults().     context = new ServerResponse.Context() {          @Override         public List<HttpMessageWriter<?>> messageWriters() {             return strategies.messageWriters().         }          @Override         public List<ViewResolver> viewResolvers() {             return strategies.viewResolvers().         }     }. }
false;public;0;35;;@Test public void get() throws IOException {     MockServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get("http://localhost")).     MockServerHttpResponse mockResponse = exchange.getResponse().     ServerRequest request = new DefaultServerRequest(exchange, HandlerStrategies.withDefaults().messageReaders()).     Mono<ServerResponse> responseMono = this.handlerFunction.handle(request).     Mono<Void> result = responseMono.flatMap(response -> {         assertEquals(HttpStatus.OK, response.statusCode()).         assertTrue(response instanceof EntityResponse).         @SuppressWarnings("unchecked")         EntityResponse<Resource> entityResponse = (EntityResponse<Resource>) response.         assertEquals(this.resource, entityResponse.entity()).         return response.writeTo(exchange, context).     }).     StepVerifier.create(result).expectComplete().verify().     byte[] expectedBytes = Files.readAllBytes(this.resource.getFile().toPath()).     StepVerifier.create(mockResponse.getBody()).consumeNextWith(dataBuffer -> {         byte[] resultBytes = new byte[dataBuffer.readableByteCount()].         dataBuffer.read(resultBytes).         assertArrayEquals(expectedBytes, resultBytes).     }).expectComplete().verify().     assertEquals(MediaType.TEXT_PLAIN, mockResponse.getHeaders().getContentType()).     assertEquals(this.resource.contentLength(), mockResponse.getHeaders().getContentLength()). }
false;public;0;24;;@Test public void head() throws IOException {     MockServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.head("http://localhost")).     MockServerHttpResponse mockResponse = exchange.getResponse().     ServerRequest request = new DefaultServerRequest(exchange, HandlerStrategies.withDefaults().messageReaders()).     Mono<ServerResponse> responseMono = this.handlerFunction.handle(request).     Mono<Void> result = responseMono.flatMap(response -> {         assertEquals(HttpStatus.OK, response.statusCode()).         assertTrue(response instanceof EntityResponse).         @SuppressWarnings("unchecked")         EntityResponse<Resource> entityResponse = (EntityResponse<Resource>) response.         assertEquals(this.resource.getFilename(), entityResponse.entity().getFilename()).         return response.writeTo(exchange, context).     }).     StepVerifier.create(result).expectComplete().verify().     StepVerifier.create(mockResponse.getBody()).expectComplete().verify().     assertEquals(MediaType.TEXT_PLAIN, mockResponse.getHeaders().getContentType()).     assertEquals(this.resource.contentLength(), mockResponse.getHeaders().getContentLength()). }
false;public;0;25;;@Test public void options() {     MockServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.options("http://localhost")).     MockServerHttpResponse mockResponse = exchange.getResponse().     ServerRequest request = new DefaultServerRequest(exchange, HandlerStrategies.withDefaults().messageReaders()).     Mono<ServerResponse> responseMono = this.handlerFunction.handle(request).     Mono<Void> result = responseMono.flatMap(response -> {         assertEquals(HttpStatus.OK, response.statusCode()).         assertEquals(EnumSet.of(HttpMethod.GET, HttpMethod.HEAD, HttpMethod.OPTIONS), response.headers().getAllow()).         return response.writeTo(exchange, context).     }).     StepVerifier.create(result).expectComplete().verify().     assertEquals(HttpStatus.OK, mockResponse.getStatusCode()).     assertEquals(EnumSet.of(HttpMethod.GET, HttpMethod.HEAD, HttpMethod.OPTIONS), mockResponse.getHeaders().getAllow()).     StepVerifier.create(mockResponse.getBody()).expectComplete().verify(). }
