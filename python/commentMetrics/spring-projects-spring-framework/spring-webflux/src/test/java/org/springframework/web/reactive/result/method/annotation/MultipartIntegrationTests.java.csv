commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setup() throws Exception {     super.setup().     this.webClient = WebClient.create("http://localhost:" + this.port). }
false;protected;0;7;;@Override protected HttpHandler createHttpHandler() {     AnnotationConfigApplicationContext wac = new AnnotationConfigApplicationContext().     wac.register(TestConfiguration.class).     wac.refresh().     return WebHttpHandlerBuilder.webHandler(new DispatcherHandler(wac)).build(). }
false;public;0;13;;@Test public void requestPart() {     Mono<ClientResponse> result = webClient.post().uri("/requestPart").syncBody(generateBody()).exchange().     StepVerifier.create(result).consumeNextWith(response -> assertEquals(HttpStatus.OK, response.statusCode())).verifyComplete(). }
false;public;0;14;;@Test public void requestBodyMap() {     Mono<String> result = webClient.post().uri("/requestBodyMap").syncBody(generateBody()).retrieve().bodyToMono(String.class).     StepVerifier.create(result).consumeNextWith(body -> assertEquals("Map[[fieldPart],[fileParts:foo.txt,fileParts:logo.png],[jsonPart]]", body)).verifyComplete(). }
false;public;0;14;;@Test public void requestBodyFlux() {     Mono<String> result = webClient.post().uri("/requestBodyFlux").syncBody(generateBody()).retrieve().bodyToMono(String.class).     StepVerifier.create(result).consumeNextWith(body -> assertEquals("[fieldPart,fileParts:foo.txt,fileParts:logo.png,jsonPart]", body)).verifyComplete(). }
false;public;0;14;;@Test public void modelAttribute() {     Mono<String> result = webClient.post().uri("/modelAttribute").syncBody(generateBody()).retrieve().bodyToMono(String.class).     StepVerifier.create(result).consumeNextWith(body -> assertEquals("FormBean[fieldValue,[fileParts:foo.txt,fileParts:logo.png]]", body)).verifyComplete(). }
false;private;0;8;;private MultiValueMap<String, HttpEntity<?>> generateBody() {     MultipartBodyBuilder builder = new MultipartBodyBuilder().     builder.part("fieldPart", "fieldValue").     builder.part("fileParts", new ClassPathResource("foo.txt", MultipartHttpMessageReader.class)).     builder.part("fileParts", new ClassPathResource("logo.png", getClass())).     builder.part("jsonPart", new Person("Jason")).     return builder.build(). }
false;public;0;4;;@Bean public MultipartController testController() {     return new MultipartController(). }
false;;6;25;;@PostMapping("/requestPart") void requestPart(@RequestPart FormFieldPart fieldPart, @RequestPart("fileParts") FilePart fileParts, @RequestPart("fileParts") Mono<FilePart> filePartsMono, @RequestPart("fileParts") Flux<FilePart> filePartsFlux, @RequestPart("jsonPart") Person person, @RequestPart("jsonPart") Mono<Person> personMono) {     assertEquals("fieldValue", fieldPart.value()).     assertEquals("fileParts:foo.txt", partDescription(fileParts)).     assertEquals("Jason", person.getName()).     StepVerifier.create(partFluxDescription(filePartsFlux)).consumeNextWith(content -> assertEquals("[fileParts:foo.txt,fileParts:logo.png]", content)).verifyComplete().     StepVerifier.create(filePartsMono).consumeNextWith(filePart -> assertEquals("fileParts:foo.txt", partDescription(filePart))).verifyComplete().     StepVerifier.create(personMono).consumeNextWith(p -> assertEquals("Jason", p.getName())).verifyComplete(). }
false;;1;4;;@PostMapping("/requestBodyMap") Mono<String> requestBodyMap(@RequestBody Mono<MultiValueMap<String, Part>> partsMono) {     return partsMono.map(MultipartIntegrationTests::partMapDescription). }
false;;1;4;;@PostMapping("/requestBodyFlux") Mono<String> requestBodyFlux(@RequestBody Flux<Part> parts) {     return partFluxDescription(parts). }
false;;1;4;;@PostMapping("/modelAttribute") String modelAttribute(@ModelAttribute FormBean formBean) {     return formBean.toString(). }
false;private,static;1;5;;private static String partMapDescription(MultiValueMap<String, Part> partsMap) {     return partsMap.keySet().stream().sorted().map(key -> partListDescription(partsMap.get(key))).collect(Collectors.joining(",", "Map[", "]")). }
false;private,static;1;3;;private static Mono<String> partFluxDescription(Flux<? extends Part> partsFlux) {     return partsFlux.collectList().map(MultipartIntegrationTests::partListDescription). }
false;private,static;1;4;;private static String partListDescription(List<? extends Part> parts) {     return parts.stream().map(MultipartIntegrationTests::partDescription).collect(Collectors.joining(",", "[", "]")). }
false;private,static;1;3;;private static String partDescription(Part part) {     return part instanceof FilePart ? part.name() + ":" + ((FilePart) part).filename() : part.name(). }
false;public;0;3;;public String getFieldPart() {     return this.fieldPart. }
false;public;1;3;;public void setFieldPart(String fieldPart) {     this.fieldPart = fieldPart. }
false;public;0;3;;public List<FilePart> getFileParts() {     return this.fileParts. }
false;public;1;3;;public void setFileParts(List<FilePart> fileParts) {     this.fileParts = fileParts. }
false;public;0;4;;@Override public String toString() {     return "FormBean[" + getFieldPart() + "," + partListDescription(getFileParts()) + "]". }
false;public;0;3;;public String getName() {     return name. }
