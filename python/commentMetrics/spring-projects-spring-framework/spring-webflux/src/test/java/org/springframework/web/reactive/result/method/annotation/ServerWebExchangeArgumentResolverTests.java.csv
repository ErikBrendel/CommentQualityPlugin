commented;modifiers;parameterAmount;loc;comment;code
false;public;0;24;;@Test public void supportsParameter() {     assertTrue(this.resolver.supportsParameter(this.testMethod.arg(ServerWebExchange.class))).     assertTrue(this.resolver.supportsParameter(this.testMethod.arg(ServerHttpRequest.class))).     assertTrue(this.resolver.supportsParameter(this.testMethod.arg(ServerHttpResponse.class))).     assertTrue(this.resolver.supportsParameter(this.testMethod.arg(HttpMethod.class))).     assertTrue(this.resolver.supportsParameter(this.testMethod.arg(Locale.class))).     assertTrue(this.resolver.supportsParameter(this.testMethod.arg(TimeZone.class))).     assertTrue(this.resolver.supportsParameter(this.testMethod.arg(ZoneId.class))).     assertTrue(this.resolver.supportsParameter(this.testMethod.arg(UriComponentsBuilder.class))).     assertTrue(this.resolver.supportsParameter(this.testMethod.arg(UriBuilder.class))).     assertFalse(this.resolver.supportsParameter(this.testMethod.arg(WebSession.class))).     assertFalse(this.resolver.supportsParameter(this.testMethod.arg(String.class))).     try {         this.resolver.supportsParameter(this.testMethod.arg(Mono.class, ServerWebExchange.class)).         fail().     } catch (IllegalStateException ex) {         assertTrue("Unexpected error message:\n" + ex.getMessage(), ex.getMessage().startsWith("ServerWebExchangeArgumentResolver doesn't support reactive type wrapper")).     } }
false;public;0;9;;@Test public void resolveArgument() {     testResolveArgument(this.testMethod.arg(ServerWebExchange.class), this.exchange).     testResolveArgument(this.testMethod.arg(ServerHttpRequest.class), this.exchange.getRequest()).     testResolveArgument(this.testMethod.arg(ServerHttpResponse.class), this.exchange.getResponse()).     testResolveArgument(this.testMethod.arg(HttpMethod.class), HttpMethod.GET).     testResolveArgument(this.testMethod.arg(TimeZone.class), TimeZone.getDefault()).     testResolveArgument(this.testMethod.arg(ZoneId.class), ZoneId.systemDefault()). }
false;private;2;4;;private void testResolveArgument(MethodParameter parameter, Object expected) {     Mono<Object> mono = this.resolver.resolveArgument(parameter, new BindingContext(), this.exchange).     assertEquals(expected, mono.block()). }
false;public;0;9;;@Test public void resolveUriComponentsBuilder() {     MethodParameter param = this.testMethod.arg(UriComponentsBuilder.class).     Object value = this.resolver.resolveArgument(param, new BindingContext(), this.exchange).block().     assertNotNull(value).     assertEquals(UriComponentsBuilder.class, value.getClass()).     assertEquals("http://example.org:9999/next", ((UriComponentsBuilder) value).path("/next").toUriString()). }
false;public;12;15;;@SuppressWarnings("unused") public void handle(ServerWebExchange exchange, ServerHttpRequest request, ServerHttpResponse response, WebSession session, HttpMethod httpMethod, Locale locale, TimeZone timeZone, ZoneId zoneId, UriComponentsBuilder uriComponentsBuilder, UriBuilder uriBuilder, String s, Mono<ServerWebExchange> monoExchange) { }
