commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() throws Exception {     ConfigurableWebBindingInitializer initializer = new ConfigurableWebBindingInitializer().     initializer.setValidator(new TestBeanValidator()).     this.bindingContext = new BindingContext(initializer). }
false;public;0;12;;@SuppressWarnings("unchecked") @Test public void missingContentType() throws Exception {     MockServerHttpRequest request = post("/path").body("{\"bar\":\"BARBAR\",\"foo\":\"FOOFOO\"}").     ServerWebExchange exchange = MockServerWebExchange.from(request).     ResolvableType type = forClassWithGenerics(Mono.class, TestBean.class).     MethodParameter param = this.testMethod.arg(type).     Mono<Object> result = this.resolver.readBody(param, true, this.bindingContext, exchange).     Mono<TestBean> value = (Mono<TestBean>) result.block(Duration.ofSeconds(1)).     StepVerifier.create(value).expectError(UnsupportedMediaTypeStatusException.class).verify(). }
false;public;0;11;;// More extensive "empty body" tests in RequestBody- and HttpEntityArgumentResolverTests // SPR-9942 @Test // SPR-9942 @SuppressWarnings("unchecked") public void emptyBody() throws Exception {     MockServerHttpRequest request = post("/path").contentType(MediaType.APPLICATION_JSON).build().     ServerWebExchange exchange = MockServerWebExchange.from(request).     ResolvableType type = forClassWithGenerics(Mono.class, TestBean.class).     MethodParameter param = this.testMethod.arg(type).     Mono<TestBean> result = (Mono<TestBean>) this.resolver.readBody(param, true, this.bindingContext, exchange).block().     StepVerifier.create(result).expectError(ServerWebInputException.class).verify(). }
false;public;0;9;;@Test public void monoTestBean() throws Exception {     String body = "{\"bar\":\"BARBAR\",\"foo\":\"FOOFOO\"}".     ResolvableType type = forClassWithGenerics(Mono.class, TestBean.class).     MethodParameter param = this.testMethod.arg(type).     Mono<Object> mono = resolveValue(param, body).     assertEquals(new TestBean("FOOFOO", "BARBAR"), mono.block()). }
false;public;0;10;;@Test public void fluxTestBean() throws Exception {     String body = "[{\"bar\":\"b1\",\"foo\":\"f1\"},{\"bar\":\"b2\",\"foo\":\"f2\"}]".     ResolvableType type = forClassWithGenerics(Flux.class, TestBean.class).     MethodParameter param = this.testMethod.arg(type).     Flux<TestBean> flux = resolveValue(param, body).     assertEquals(Arrays.asList(new TestBean("f1", "b1"), new TestBean("f2", "b2")), flux.collectList().block()). }
false;public;0;9;;@Test public void singleTestBean() throws Exception {     String body = "{\"bar\":\"b1\",\"foo\":\"f1\"}".     ResolvableType type = forClassWithGenerics(Single.class, TestBean.class).     MethodParameter param = this.testMethod.arg(type).     Single<TestBean> single = resolveValue(param, body).     assertEquals(new TestBean("f1", "b1"), single.toBlocking().value()). }
false;public;0;9;;@Test public void rxJava2SingleTestBean() throws Exception {     String body = "{\"bar\":\"b1\",\"foo\":\"f1\"}".     ResolvableType type = forClassWithGenerics(io.reactivex.Single.class, TestBean.class).     MethodParameter param = this.testMethod.arg(type).     io.reactivex.Single<TestBean> single = resolveValue(param, body).     assertEquals(new TestBean("f1", "b1"), single.blockingGet()). }
false;public;0;9;;@Test public void rxJava2MaybeTestBean() throws Exception {     String body = "{\"bar\":\"b1\",\"foo\":\"f1\"}".     ResolvableType type = forClassWithGenerics(Maybe.class, TestBean.class).     MethodParameter param = this.testMethod.arg(type).     Maybe<TestBean> maybe = resolveValue(param, body).     assertEquals(new TestBean("f1", "b1"), maybe.blockingGet()). }
false;public;0;10;;@Test public void observableTestBean() throws Exception {     String body = "[{\"bar\":\"b1\",\"foo\":\"f1\"},{\"bar\":\"b2\",\"foo\":\"f2\"}]".     ResolvableType type = forClassWithGenerics(Observable.class, TestBean.class).     MethodParameter param = this.testMethod.arg(type).     Observable<?> observable = resolveValue(param, body).     assertEquals(Arrays.asList(new TestBean("f1", "b1"), new TestBean("f2", "b2")), observable.toList().toBlocking().first()). }
false;public;0;10;;@Test public void rxJava2ObservableTestBean() throws Exception {     String body = "[{\"bar\":\"b1\",\"foo\":\"f1\"},{\"bar\":\"b2\",\"foo\":\"f2\"}]".     ResolvableType type = forClassWithGenerics(io.reactivex.Observable.class, TestBean.class).     MethodParameter param = this.testMethod.arg(type).     io.reactivex.Observable<?> observable = resolveValue(param, body).     assertEquals(Arrays.asList(new TestBean("f1", "b1"), new TestBean("f2", "b2")), observable.toList().blockingGet()). }
false;public;0;10;;@Test public void flowableTestBean() throws Exception {     String body = "[{\"bar\":\"b1\",\"foo\":\"f1\"},{\"bar\":\"b2\",\"foo\":\"f2\"}]".     ResolvableType type = forClassWithGenerics(Flowable.class, TestBean.class).     MethodParameter param = this.testMethod.arg(type).     Flowable<?> flowable = resolveValue(param, body).     assertEquals(Arrays.asList(new TestBean("f1", "b1"), new TestBean("f2", "b2")), flowable.toList().blockingGet()). }
false;public;0;9;;@Test public void futureTestBean() throws Exception {     String body = "{\"bar\":\"b1\",\"foo\":\"f1\"}".     ResolvableType type = forClassWithGenerics(CompletableFuture.class, TestBean.class).     MethodParameter param = this.testMethod.arg(type).     CompletableFuture<?> future = resolveValue(param, body).     assertEquals(new TestBean("f1", "b1"), future.get()). }
false;public;0;8;;@Test public void testBean() throws Exception {     String body = "{\"bar\":\"b1\",\"foo\":\"f1\"}".     MethodParameter param = this.testMethod.arg(TestBean.class).     TestBean value = resolveValue(param, body).     assertEquals(new TestBean("f1", "b1"), value). }
false;public;0;12;;@Test public void map() throws Exception {     String body = "{\"bar\":\"b1\",\"foo\":\"f1\"}".     Map<String, String> map = new HashMap<>().     map.put("foo", "f1").     map.put("bar", "b1").     ResolvableType type = forClassWithGenerics(Map.class, String.class, String.class).     MethodParameter param = this.testMethod.arg(type).     Map<String, String> actual = resolveValue(param, body).     assertEquals(map, actual). }
false;public;0;9;;@Test public void list() throws Exception {     String body = "[{\"bar\":\"b1\",\"foo\":\"f1\"},{\"bar\":\"b2\",\"foo\":\"f2\"}]".     ResolvableType type = forClassWithGenerics(List.class, TestBean.class).     MethodParameter param = this.testMethod.arg(type).     List<?> list = resolveValue(param, body).     assertEquals(Arrays.asList(new TestBean("f1", "b1"), new TestBean("f2", "b2")), list). }
false;public;0;10;;@Test public void monoList() throws Exception {     String body = "[{\"bar\":\"b1\",\"foo\":\"f1\"},{\"bar\":\"b2\",\"foo\":\"f2\"}]".     ResolvableType type = forClassWithGenerics(Mono.class, forClassWithGenerics(List.class, TestBean.class)).     MethodParameter param = this.testMethod.arg(type).     Mono<?> mono = resolveValue(param, body).     List<?> list = (List<?>) mono.block(Duration.ofSeconds(5)).     assertEquals(Arrays.asList(new TestBean("f1", "b1"), new TestBean("f2", "b2")), list). }
false;public;0;8;;@Test public void array() throws Exception {     String body = "[{\"bar\":\"b1\",\"foo\":\"f1\"},{\"bar\":\"b2\",\"foo\":\"f2\"}]".     MethodParameter param = this.testMethod.arg(TestBean[].class).     TestBean[] value = resolveValue(param, body).     assertArrayEquals(new TestBean[] { new TestBean("f1", "b1"), new TestBean("f2", "b2") }, value). }
false;public;0;10;;@Test @SuppressWarnings("unchecked") public void validateMonoTestBean() throws Exception {     String body = "{\"bar\":\"b1\"}".     ResolvableType type = forClassWithGenerics(Mono.class, TestBean.class).     MethodParameter param = this.testMethod.arg(type).     Mono<TestBean> mono = resolveValue(param, body).     StepVerifier.create(mono).expectNextCount(0).expectError(ServerWebInputException.class).verify(). }
false;public;0;13;;@Test @SuppressWarnings("unchecked") public void validateFluxTestBean() throws Exception {     String body = "[{\"bar\":\"b1\",\"foo\":\"f1\"},{\"bar\":\"b2\"}]".     ResolvableType type = forClassWithGenerics(Flux.class, TestBean.class).     MethodParameter param = this.testMethod.arg(type).     Flux<TestBean> flux = resolveValue(param, body).     StepVerifier.create(flux).expectNext(new TestBean("f1", "b1")).expectError(ServerWebInputException.class).verify(). }
false;public;0;9;;// SPR-9964 @Test public void parameterizedMethodArgument() throws Exception {     Method method = AbstractParameterizedController.class.getMethod("handleDto", Identifiable.class).     HandlerMethod handlerMethod = new HandlerMethod(new ConcreteParameterizedController(), method).     MethodParameter methodParam = handlerMethod.getMethodParameters()[0].     SimpleBean simpleBean = resolveValue(methodParam, "{\"name\" : \"Jad\"}").     assertEquals("Jad", simpleBean.getName()). }
false;private;2;13;;@SuppressWarnings("unchecked") private <T> T resolveValue(MethodParameter param, String body) {     MockServerHttpRequest request = post("/path").contentType(MediaType.APPLICATION_JSON).body(body).     ServerWebExchange exchange = MockServerWebExchange.from(request).     Mono<Object> result = this.resolver.readBody(param, true, this.bindingContext, exchange).     Object value = result.block(Duration.ofSeconds(5)).     assertNotNull(value).     assertTrue("Unexpected return value type: " + value, param.getParameterType().isAssignableFrom(value.getClass())).     return (T) value. }
false;public;1;4;;@Override public boolean supportsParameter(MethodParameter parameter) {     return false. }
false;public;3;4;;@Override public Mono<Object> resolveArgument(MethodParameter p, BindingContext bc, ServerWebExchange e) {     return null. }
false;private;1;15;;@SuppressWarnings("Convert2MethodRef") private AbstractMessageReaderArgumentResolver resolver(Decoder<?>... decoders) {     List<HttpMessageReader<?>> readers = new ArrayList<>().     Arrays.asList(decoders).forEach(decoder -> readers.add(new DecoderHttpMessageReader<>(decoder))).     return new AbstractMessageReaderArgumentResolver(readers) {          @Override         public boolean supportsParameter(MethodParameter parameter) {             return false.         }          @Override         public Mono<Object> resolveArgument(MethodParameter p, BindingContext bc, ServerWebExchange e) {             return null.         }     }. }
false;private;15;18;;@SuppressWarnings("unused") private void handle(@Validated Mono<TestBean> monoTestBean, @Validated Flux<TestBean> fluxTestBean, Single<TestBean> singleTestBean, io.reactivex.Single<TestBean> rxJava2SingleTestBean, Maybe<TestBean> rxJava2MaybeTestBean, Observable<TestBean> observableTestBean, io.reactivex.Observable<TestBean> rxJava2ObservableTestBean, Flowable<TestBean> flowableTestBean, CompletableFuture<TestBean> futureTestBean, TestBean testBean, Map<String, String> map, List<TestBean> list, Mono<List<TestBean>> monoList, Set<TestBean> set, TestBean[] array) { }
false;public;0;3;;public String getFoo() {     return this.foo. }
false;public;1;3;;public void setFoo(String foo) {     this.foo = foo. }
false;public;0;3;;public String getBar() {     return this.bar. }
false;public;1;3;;public void setBar(String bar) {     this.bar = bar. }
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o instanceof TestBean) {         TestBean other = (TestBean) o.         return this.foo.equals(other.foo) && this.bar.equals(other.bar).     }     return false. }
false;public;0;4;;@Override public int hashCode() {     return 31 * foo.hashCode() + bar.hashCode(). }
false;public;0;4;;@Override public String toString() {     return "TestBean[foo='" + this.foo + "\'" + ", bar='" + this.bar + "\']". }
false;public;1;4;;@Override public boolean supports(Class<?> clazz) {     return clazz.equals(TestBean.class). }
false;public;2;7;;@Override public void validate(@Nullable Object target, Errors errors) {     TestBean testBean = (TestBean) target.     if (testBean.getFoo() == null) {         errors.rejectValue("foo", "nullValue").     } }
false;public;1;2;;@SuppressWarnings("unused") public void handleDto(DTO dto) { }
false;;0;1;;Long getId().
false;;1;1;;void setId(Long id).
false;public;0;4;;@Override public Long getId() {     return id. }
false;public;1;4;;@Override public void setId(Long id) {     this.id = id. }
false;public;0;3;;public String getName() {     return name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
