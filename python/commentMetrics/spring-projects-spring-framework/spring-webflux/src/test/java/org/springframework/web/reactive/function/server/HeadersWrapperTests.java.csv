commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void createWrapper() {     mockHeaders = mock(ServerRequest.Headers.class).     wrapper = new ServerRequestWrapper.HeadersWrapper(mockHeaders). }
false;public;0;7;;@Test public void accept() {     List<MediaType> accept = Collections.singletonList(MediaType.APPLICATION_JSON).     when(mockHeaders.accept()).thenReturn(accept).     assertSame(accept, wrapper.accept()). }
false;public;0;7;;@Test public void acceptCharset() {     List<Charset> acceptCharset = Collections.singletonList(StandardCharsets.UTF_8).     when(mockHeaders.acceptCharset()).thenReturn(acceptCharset).     assertSame(acceptCharset, wrapper.acceptCharset()). }
false;public;0;7;;@Test public void contentLength() {     OptionalLong contentLength = OptionalLong.of(42L).     when(mockHeaders.contentLength()).thenReturn(contentLength).     assertSame(contentLength, wrapper.contentLength()). }
false;public;0;7;;@Test public void contentType() {     Optional<MediaType> contentType = Optional.of(MediaType.APPLICATION_JSON).     when(mockHeaders.contentType()).thenReturn(contentType).     assertSame(contentType, wrapper.contentType()). }
false;public;0;7;;@Test public void host() {     InetSocketAddress host = InetSocketAddress.createUnresolved("example.com", 42).     when(mockHeaders.host()).thenReturn(host).     assertSame(host, wrapper.host()). }
false;public;0;7;;@Test public void range() {     List<HttpRange> range = Collections.singletonList(HttpRange.createByteRange(42)).     when(mockHeaders.range()).thenReturn(range).     assertSame(range, wrapper.range()). }
false;public;0;8;;@Test public void header() {     String name = "foo".     List<String> value = Collections.singletonList("bar").     when(mockHeaders.header(name)).thenReturn(value).     assertSame(value, wrapper.header(name)). }
false;public;0;7;;@Test public void asHttpHeaders() {     HttpHeaders httpHeaders = new HttpHeaders().     when(mockHeaders.asHttpHeaders()).thenReturn(httpHeaders).     assertSame(httpHeaders, wrapper.asHttpHeaders()). }
