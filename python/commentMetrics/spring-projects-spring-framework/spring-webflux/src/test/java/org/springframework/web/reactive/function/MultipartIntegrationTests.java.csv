commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void multipartData() {     Mono<ClientResponse> result = webClient.post().uri("http://localhost:" + this.port + "/multipartData").syncBody(generateBody()).exchange().     StepVerifier.create(result).consumeNextWith(response -> assertEquals(HttpStatus.OK, response.statusCode())).verifyComplete(). }
false;public;0;13;;@Test public void parts() {     Mono<ClientResponse> result = webClient.post().uri("http://localhost:" + this.port + "/parts").syncBody(generateBody()).exchange().     StepVerifier.create(result).consumeNextWith(response -> assertEquals(HttpStatus.OK, response.statusCode())).verifyComplete(). }
false;private;0;6;;private MultiValueMap<String, HttpEntity<?>> generateBody() {     MultipartBodyBuilder builder = new MultipartBodyBuilder().     builder.part("fooPart", new ClassPathResource("org/springframework/http/codec/multipart/foo.txt")).     builder.part("barPart", "bar").     return builder.build(). }
false;protected;0;6;;@Override protected RouterFunction<ServerResponse> routerFunction() {     MultipartHandler multipartHandler = new MultipartHandler().     return route(POST("/multipartData"), multipartHandler::multipartData).andRoute(POST("/parts"), multipartHandler::parts). }
false;public;1;16;;public Mono<ServerResponse> multipartData(ServerRequest request) {     return request.body(BodyExtractors.toMultipartData()).flatMap(map -> {         Map<String, Part> parts = map.toSingleValueMap().         try {             assertEquals(2, parts.size()).             assertEquals("foo.txt", ((FilePart) parts.get("fooPart")).filename()).             assertEquals("bar", ((FormFieldPart) parts.get("barPart")).value()).         } catch (Exception e) {             return Mono.error(e).         }         return ServerResponse.ok().build().     }). }
false;public;1;14;;public Mono<ServerResponse> parts(ServerRequest request) {     return request.body(BodyExtractors.toParts()).collectList().flatMap(parts -> {         try {             assertEquals(2, parts.size()).             assertEquals("foo.txt", ((FilePart) parts.get(0)).filename()).             assertEquals("bar", ((FormFieldPart) parts.get(1)).value()).         } catch (Exception e) {             return Mono.error(e).         }         return ServerResponse.ok().build().     }). }
