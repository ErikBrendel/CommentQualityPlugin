commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Before public void setup() throws Exception {     this.context = new GenericApplicationContext().     this.context.refresh().     FreeMarkerConfigurer configurer = new FreeMarkerConfigurer().     configurer.setPreferFileSystemAccess(false).     configurer.setTemplateLoaderPath(TEMPLATE_PATH).     configurer.setResourceLoader(this.context).     this.freeMarkerConfig = configurer.createConfiguration(). }
false;public;0;10;;@Test public void noFreeMarkerConfig() throws Exception {     this.exception.expect(ApplicationContextException.class).     this.exception.expectMessage("Must define a single FreeMarkerConfig bean").     FreeMarkerView view = new FreeMarkerView().     view.setApplicationContext(this.context).     view.setUrl("anythingButNull").     view.afterPropertiesSet(). }
false;public;0;8;;@Test public void noTemplateName() throws Exception {     this.exception.expect(IllegalArgumentException.class).     this.exception.expectMessage("Property 'url' is required").     FreeMarkerView freeMarkerView = new FreeMarkerView().     freeMarkerView.afterPropertiesSet(). }
false;public;0;8;;@Test public void checkResourceExists() throws Exception {     FreeMarkerView view = new FreeMarkerView().     view.setConfiguration(this.freeMarkerConfig).     view.setUrl("test.ftl").     assertTrue(view.checkResourceExists(Locale.US)). }
false;public;0;15;;@Test public void render() throws Exception {     FreeMarkerView view = new FreeMarkerView().     view.setConfiguration(this.freeMarkerConfig).     view.setUrl("test.ftl").     ModelMap model = new ExtendedModelMap().     model.addAttribute("hello", "hi FreeMarker").     view.render(model, null, this.exchange).block(Duration.ofMillis(5000)).     StepVerifier.create(this.exchange.getResponse().getBody()).consumeNextWith(buf -> assertEquals("<html><body>hi FreeMarker</body></html>", asString(buf))).expectComplete().verify(). }
false;private,static;1;6;;private static String asString(DataBuffer dataBuffer) {     ByteBuffer byteBuffer = dataBuffer.asByteBuffer().     final byte[] bytes = new byte[byteBuffer.remaining()].     byteBuffer.get(bytes).     return new String(bytes, StandardCharsets.UTF_8). }
false;private;0;4;;@SuppressWarnings("unused") private String handle() {     return null. }
