commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setup() {     StaticWebApplicationContext context = new StaticWebApplicationContext().     context.registerSingleton("freeMarkerConfigurer", FreeMarkerConfigurer.class).     context.registerSingleton("scriptTemplateConfigurer", ScriptTemplateConfigurer.class).     this.registry = new ViewResolverRegistry(context). }
false;public;0;4;;@Test public void order() {     assertEquals(Ordered.LOWEST_PRECEDENCE, this.registry.getOrder()). }
false;public;0;7;;@Test public void hasRegistrations() {     assertFalse(this.registry.hasRegistrations()).     this.registry.freeMarker().     assertTrue(this.registry.hasRegistrations()). }
false;public;0;6;;@Test public void noResolvers() {     assertNotNull(this.registry.getViewResolvers()).     assertEquals(0, this.registry.getViewResolvers().size()).     assertFalse(this.registry.hasRegistrations()). }
false;public;0;8;;@Test public void customViewResolver() {     UrlBasedViewResolver viewResolver = new UrlBasedViewResolver().     this.registry.viewResolver(viewResolver).     assertSame(viewResolver, this.registry.getViewResolvers().get(0)).     assertEquals(1, this.registry.getViewResolvers().size()). }
false;public;0;8;;@Test public void defaultViews() throws Exception {     View view = new HttpMessageWriterView(new Jackson2JsonEncoder()).     this.registry.defaultViews(view).     assertEquals(1, this.registry.getDefaultViews().size()).     assertSame(view, this.registry.getDefaultViews().get(0)). }
false;public;0;11;;// SPR-16431 @Test public void scriptTemplate() {     this.registry.scriptTemplate().prefix("/").suffix(".html").     List<ViewResolver> viewResolvers = this.registry.getViewResolvers().     assertEquals(1, viewResolvers.size()).     assertEquals(ScriptTemplateViewResolver.class, viewResolvers.get(0).getClass()).     DirectFieldAccessor accessor = new DirectFieldAccessor(viewResolvers.get(0)).     assertEquals("/", accessor.getPropertyValue("prefix")).     assertEquals(".html", accessor.getPropertyValue("suffix")). }
