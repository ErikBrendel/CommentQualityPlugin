commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Before public void setup() {     this.cache = new ConcurrentMapCache("resourceCache").     List<ResourceResolver> resolvers = new ArrayList<>().     resolvers.add(new CachingResourceResolver(this.cache)).     resolvers.add(new PathResourceResolver()).     this.chain = new DefaultResourceResolverChain(resolvers).     this.locations = new ArrayList<>().     this.locations.add(new ClassPathResource("test/", getClass())). }
false;public;0;9;;@Test public void resolveResourceInternal() {     Resource expected = new ClassPathResource("test/bar.css", getClass()).     MockServerWebExchange exchange = MockServerWebExchange.from(get("")).     Resource actual = this.chain.resolveResource(exchange, "bar.css", this.locations).block(TIMEOUT).     assertNotSame(expected, actual).     assertEquals(expected, actual). }
false;public;0;10;;@Test public void resolveResourceInternalFromCache() {     Resource expected = Mockito.mock(Resource.class).     this.cache.put(resourceKey("bar.css"), expected).     MockServerWebExchange exchange = MockServerWebExchange.from(get("")).     Resource actual = this.chain.resolveResource(exchange, "bar.css", this.locations).block(TIMEOUT).     assertSame(expected, actual). }
false;public;0;5;;@Test public void resolveResourceInternalNoMatch() {     MockServerWebExchange exchange = MockServerWebExchange.from(get("")).     assertNull(this.chain.resolveResource(exchange, "invalid.css", this.locations).block(TIMEOUT)). }
false;public;0;7;;@Test public void resolverUrlPath() {     String expected = "/foo.css".     String actual = this.chain.resolveUrlPath(expected, this.locations).block(TIMEOUT).     assertEquals(expected, actual). }
false;public;0;8;;@Test public void resolverUrlPathFromCache() {     String expected = "cached-imaginary.css".     this.cache.put(CachingResourceResolver.RESOLVED_URL_PATH_CACHE_KEY_PREFIX + "imaginary.css", expected).     String actual = this.chain.resolveUrlPath("imaginary.css", this.locations).block(TIMEOUT).     assertEquals(expected, actual). }
false;public;0;4;;@Test public void resolverUrlPathNoMatch() {     assertNull(this.chain.resolveUrlPath("invalid.css", this.locations).block(TIMEOUT)). }
false;public;0;32;;@Test public void resolveResourceAcceptEncodingInCacheKey() throws IOException {     String file = "bar.css".     EncodedResourceResolverTests.createGzippedFile(file).     // 1. Resolve plain resource     MockServerWebExchange exchange = MockServerWebExchange.from(get(file)).     Resource expected = this.chain.resolveResource(exchange, file, this.locations).block(TIMEOUT).     String cacheKey = resourceKey(file).     assertSame(expected, this.cache.get(cacheKey).get()).     // 2. Resolve with Accept-Encoding     exchange = MockServerWebExchange.from(get(file).header("Accept-Encoding", "gzip . a=b  , deflate ,  br  . c=d ")).     expected = this.chain.resolveResource(exchange, file, this.locations).block(TIMEOUT).     cacheKey = resourceKey(file + "+encoding=br,gzip").     assertSame(expected, this.cache.get(cacheKey).get()).     // 3. Resolve with Accept-Encoding but no matching codings     exchange = MockServerWebExchange.from(get(file).header("Accept-Encoding", "deflate")).     expected = this.chain.resolveResource(exchange, file, this.locations).block(TIMEOUT).     cacheKey = resourceKey(file).     assertSame(expected, this.cache.get(cacheKey).get()). }
false;public;0;11;;@Test public void resolveResourceNoAcceptEncoding() {     String file = "bar.css".     MockServerWebExchange exchange = MockServerWebExchange.from(get(file)).     Resource expected = this.chain.resolveResource(exchange, file, this.locations).block(TIMEOUT).     String cacheKey = resourceKey(file).     Object actual = this.cache.get(cacheKey).get().     assertEquals(expected, actual). }
false;public;0;14;;@Test public void resolveResourceMatchingEncoding() {     Resource resource = Mockito.mock(Resource.class).     Resource gzipped = Mockito.mock(Resource.class).     this.cache.put(resourceKey("bar.css"), resource).     this.cache.put(resourceKey("bar.css+encoding=gzip"), gzipped).     String file = "bar.css".     MockServerWebExchange exchange = MockServerWebExchange.from(get(file)).     assertSame(resource, this.chain.resolveResource(exchange, file, this.locations).block(TIMEOUT)).     exchange = MockServerWebExchange.from(get(file).header("Accept-Encoding", "gzip")).     assertSame(gzipped, this.chain.resolveResource(exchange, file, this.locations).block(TIMEOUT)). }
false;private,static;1;3;;private static String resourceKey(String key) {     return CachingResourceResolver.RESOLVED_RESOURCE_CACHE_KEY_PREFIX + key. }
