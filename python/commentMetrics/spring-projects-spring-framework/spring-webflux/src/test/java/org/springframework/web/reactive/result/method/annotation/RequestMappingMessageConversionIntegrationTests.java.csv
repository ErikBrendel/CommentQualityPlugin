commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;@Override protected ApplicationContext initApplicationContext() {     AnnotationConfigApplicationContext wac = new AnnotationConfigApplicationContext().     wac.register(WebConfig.class).     wac.refresh().     return wac. }
false;public;0;5;;@Test public void byteBufferResponseBodyWithPublisher() throws Exception {     Person expected = new Person("Robert").     assertEquals(expected, performGet("/raw-response/publisher", JSON, Person.class).getBody()). }
false;public;0;5;;@Test public void byteBufferResponseBodyWithFlux() throws Exception {     String expected = "Hello!".     assertEquals(expected, performGet("/raw-response/flux", new HttpHeaders(), String.class).getBody()). }
false;public;0;7;;@Test public void byteBufferResponseBodyWithMono() throws Exception {     String expected = "Hello!".     ResponseEntity<String> responseEntity = performGet("/raw-response/mono", new HttpHeaders(), String.class).     assertEquals(6, responseEntity.getHeaders().getContentLength()).     assertEquals(expected, responseEntity.getBody()). }
false;public;0;5;;@Test public void byteBufferResponseBodyWithObservable() throws Exception {     String expected = "Hello!".     assertEquals(expected, performGet("/raw-response/observable", new HttpHeaders(), String.class).getBody()). }
false;public;0;6;;@Test public void byteBufferResponseBodyWithRxJava2Observable() throws Exception {     String expected = "Hello!".     assertEquals(expected, performGet("/raw-response/rxjava2-observable", new HttpHeaders(), String.class).getBody()). }
false;public;0;5;;@Test public void byteBufferResponseBodyWithFlowable() throws Exception {     String expected = "Hello!".     assertEquals(expected, performGet("/raw-response/flowable", new HttpHeaders(), String.class).getBody()). }
false;public;0;7;;@Test public void personResponseBody() throws Exception {     Person expected = new Person("Robert").     ResponseEntity<Person> responseEntity = performGet("/person-response/person", JSON, Person.class).     assertEquals(17, responseEntity.getHeaders().getContentLength()).     assertEquals(expected, responseEntity.getBody()). }
false;public;0;7;;@Test public void personResponseBodyWithCompletableFuture() throws Exception {     Person expected = new Person("Robert").     ResponseEntity<Person> responseEntity = performGet("/person-response/completable-future", JSON, Person.class).     assertEquals(17, responseEntity.getHeaders().getContentLength()).     assertEquals(expected, responseEntity.getBody()). }
false;public;0;7;;@Test public void personResponseBodyWithMono() throws Exception {     Person expected = new Person("Robert").     ResponseEntity<Person> responseEntity = performGet("/person-response/mono", JSON, Person.class).     assertEquals(17, responseEntity.getHeaders().getContentLength()).     assertEquals(expected, responseEntity.getBody()). }
false;public;0;12;;// SPR-17506 @Test public void personResponseBodyWithEmptyMono() throws Exception {     ResponseEntity<Person> responseEntity = performGet("/person-response/mono-empty", JSON, Person.class).     assertEquals(0, responseEntity.getHeaders().getContentLength()).     assertNull(responseEntity.getBody()).     // As we're on the same connection, the 2nd request proves server response handling     // did complete after the 1st request..     responseEntity = performGet("/person-response/mono-empty", JSON, Person.class).     assertEquals(0, responseEntity.getHeaders().getContentLength()).     assertNull(responseEntity.getBody()). }
false;public;0;7;;@Test public void personResponseBodyWithMonoDeclaredAsObject() throws Exception {     Person expected = new Person("Robert").     ResponseEntity<Person> entity = performGet("/person-response/mono-declared-as-object", JSON, Person.class).     assertEquals(17, entity.getHeaders().getContentLength()).     assertEquals(expected, entity.getBody()). }
false;public;0;7;;@Test public void personResponseBodyWithSingle() throws Exception {     Person expected = new Person("Robert").     ResponseEntity<Person> entity = performGet("/person-response/single", JSON, Person.class).     assertEquals(17, entity.getHeaders().getContentLength()).     assertEquals(expected, entity.getBody()). }
false;public;0;7;;@Test public void personResponseBodyWithMonoResponseEntity() throws Exception {     Person expected = new Person("Robert").     ResponseEntity<Person> entity = performGet("/person-response/mono-response-entity", JSON, Person.class).     assertEquals(17, entity.getHeaders().getContentLength()).     assertEquals(expected, entity.getBody()). }
false;public;0;11;;// SPR-16172 @Test public void personResponseBodyWithMonoResponseEntityXml() throws Exception {     String url = "/person-response/mono-response-entity-xml".     ResponseEntity<String> entity = performGet(url, new HttpHeaders(), String.class).     String actual = entity.getBody().     assertEquals(91, entity.getHeaders().getContentLength()).     assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>" + "<person><name>Robert</name></person>", actual). }
false;public;0;7;;@Test public void personResponseBodyWithList() throws Exception {     List<?> expected = asList(new Person("Robert"), new Person("Marie")).     ResponseEntity<List<Person>> entity = performGet("/person-response/list", JSON, PERSON_LIST).     assertEquals(36, entity.getHeaders().getContentLength()).     assertEquals(expected, entity.getBody()). }
false;public;0;7;;@Test public void personResponseBodyWithPublisher() throws Exception {     List<?> expected = asList(new Person("Robert"), new Person("Marie")).     ResponseEntity<List<Person>> entity = performGet("/person-response/publisher", JSON, PERSON_LIST).     assertEquals(-1, entity.getHeaders().getContentLength()).     assertEquals(expected, entity.getBody()). }
false;public;0;5;;@Test public void personResponseBodyWithFlux() throws Exception {     List<?> expected = asList(new Person("Robert"), new Person("Marie")).     assertEquals(expected, performGet("/person-response/flux", JSON, PERSON_LIST).getBody()). }
false;public;0;5;;@Test public void personResponseBodyWithObservable() throws Exception {     List<?> expected = asList(new Person("Robert"), new Person("Marie")).     assertEquals(expected, performGet("/person-response/observable", JSON, PERSON_LIST).getBody()). }
false;public;0;10;;@Test public void resource() throws Exception {     ResponseEntity<byte[]> response = performGet("/resource", new HttpHeaders(), byte[].class).     assertEquals(HttpStatus.OK, response.getStatusCode()).     assertTrue(response.hasBody()).     assertEquals(951, response.getHeaders().getContentLength()).     assertEquals(951, response.getBody().length).     assertEquals(new MediaType("image", "png"), response.getHeaders().getContentType()). }
false;public;0;6;;@Test public void personTransform() throws Exception {     assertEquals(new Person("ROBERT"), performPost("/person-transform/person", JSON, new Person("Robert"), JSON, Person.class).getBody()). }
false;public;0;6;;@Test public void personTransformWithCompletableFuture() throws Exception {     assertEquals(new Person("ROBERT"), performPost("/person-transform/completable-future", JSON, new Person("Robert"), JSON, Person.class).getBody()). }
false;public;0;6;;@Test public void personTransformWithMono() throws Exception {     assertEquals(new Person("ROBERT"), performPost("/person-transform/mono", JSON, new Person("Robert"), JSON, Person.class).getBody()). }
false;public;0;6;;// SPR-16759 @Test public void personTransformWithMonoAndXml() throws Exception {     assertEquals(new Person("ROBERT"), performPost("/person-transform/mono", MediaType.APPLICATION_XML, new Person("Robert"), MediaType.APPLICATION_XML, Person.class).getBody()). }
false;public;0;6;;@Test public void personTransformWithSingle() throws Exception {     assertEquals(new Person("ROBERT"), performPost("/person-transform/single", JSON, new Person("Robert"), JSON, Person.class).getBody()). }
false;public;0;6;;@Test public void personTransformWithRxJava2Single() throws Exception {     assertEquals(new Person("ROBERT"), performPost("/person-transform/rxjava2-single", JSON, new Person("Robert"), JSON, Person.class).getBody()). }
false;public;0;6;;@Test public void personTransformWithRxJava2Maybe() throws Exception {     assertEquals(new Person("ROBERT"), performPost("/person-transform/rxjava2-maybe", JSON, new Person("Robert"), JSON, Person.class).getBody()). }
false;public;0;6;;@Test public void personTransformWithPublisher() throws Exception {     List<?> req = asList(new Person("Robert"), new Person("Marie")).     List<?> res = asList(new Person("ROBERT"), new Person("MARIE")).     assertEquals(res, performPost("/person-transform/publisher", JSON, req, JSON, PERSON_LIST).getBody()). }
false;public;0;6;;@Test public void personTransformWithFlux() throws Exception {     List<?> req = asList(new Person("Robert"), new Person("Marie")).     List<?> res = asList(new Person("ROBERT"), new Person("MARIE")).     assertEquals(res, performPost("/person-transform/flux", JSON, req, JSON, PERSON_LIST).getBody()). }
false;public;0;6;;@Test public void personTransformWithObservable() throws Exception {     List<?> req = asList(new Person("Robert"), new Person("Marie")).     List<?> res = asList(new Person("ROBERT"), new Person("MARIE")).     assertEquals(res, performPost("/person-transform/observable", JSON, req, JSON, PERSON_LIST).getBody()). }
false;public;0;6;;@Test public void personTransformWithRxJava2Observable() throws Exception {     List<?> req = asList(new Person("Robert"), new Person("Marie")).     List<?> res = asList(new Person("ROBERT"), new Person("MARIE")).     assertEquals(res, performPost("/person-transform/rxjava2-observable", JSON, req, JSON, PERSON_LIST).getBody()). }
false;public;0;6;;@Test public void personTransformWithFlowable() throws Exception {     List<?> req = asList(new Person("Robert"), new Person("Marie")).     List<?> res = asList(new Person("ROBERT"), new Person("MARIE")).     assertEquals(res, performPost("/person-transform/flowable", JSON, req, JSON, PERSON_LIST).getBody()). }
false;public;0;8;;@Test public void personCreateWithPublisherJson() throws Exception {     ResponseEntity<Void> entity = performPost("/person-create/publisher", JSON, asList(new Person("Robert"), new Person("Marie")), null, Void.class).     assertEquals(HttpStatus.OK, entity.getStatusCode()).     assertEquals(2, getApplicationContext().getBean(PersonCreateController.class).persons.size()). }
false;public;0;8;;@Test public void personCreateWithPublisherXml() throws Exception {     People people = new People(new Person("Robert"), new Person("Marie")).     ResponseEntity<Void> response = performPost("/person-create/publisher", APPLICATION_XML, people, null, Void.class).     assertEquals(HttpStatus.OK, response.getStatusCode()).     assertEquals(2, getApplicationContext().getBean(PersonCreateController.class).persons.size()). }
false;public;0;8;;@Test public void personCreateWithMono() throws Exception {     ResponseEntity<Void> entity = performPost("/person-create/mono", JSON, new Person("Robert"), null, Void.class).     assertEquals(HttpStatus.OK, entity.getStatusCode()).     assertEquals(1, getApplicationContext().getBean(PersonCreateController.class).persons.size()). }
false;public;0;8;;@Test public void personCreateWithSingle() throws Exception {     ResponseEntity<Void> entity = performPost("/person-create/single", JSON, new Person("Robert"), null, Void.class).     assertEquals(HttpStatus.OK, entity.getStatusCode()).     assertEquals(1, getApplicationContext().getBean(PersonCreateController.class).persons.size()). }
false;public;0;8;;@Test public void personCreateWithRxJava2Single() throws Exception {     ResponseEntity<Void> entity = performPost("/person-create/rxjava2-single", JSON, new Person("Robert"), null, Void.class).     assertEquals(HttpStatus.OK, entity.getStatusCode()).     assertEquals(1, getApplicationContext().getBean(PersonCreateController.class).persons.size()). }
false;public;0;8;;@Test public void personCreateWithFluxJson() throws Exception {     ResponseEntity<Void> entity = performPost("/person-create/flux", JSON, asList(new Person("Robert"), new Person("Marie")), null, Void.class).     assertEquals(HttpStatus.OK, entity.getStatusCode()).     assertEquals(2, getApplicationContext().getBean(PersonCreateController.class).persons.size()). }
false;public;0;8;;@Test public void personCreateWithFluxXml() throws Exception {     People people = new People(new Person("Robert"), new Person("Marie")).     ResponseEntity<Void> response = performPost("/person-create/flux", APPLICATION_XML, people, null, Void.class).     assertEquals(HttpStatus.OK, response.getStatusCode()).     assertEquals(2, getApplicationContext().getBean(PersonCreateController.class).persons.size()). }
false;public;0;8;;@Test public void personCreateWithObservableJson() throws Exception {     ResponseEntity<Void> entity = performPost("/person-create/observable", JSON, asList(new Person("Robert"), new Person("Marie")), null, Void.class).     assertEquals(HttpStatus.OK, entity.getStatusCode()).     assertEquals(2, getApplicationContext().getBean(PersonCreateController.class).persons.size()). }
false;public;0;8;;@Test public void personCreateWithRxJava2ObservableJson() throws Exception {     ResponseEntity<Void> entity = performPost("/person-create/rxjava2-observable", JSON, asList(new Person("Robert"), new Person("Marie")), null, Void.class).     assertEquals(HttpStatus.OK, entity.getStatusCode()).     assertEquals(2, getApplicationContext().getBean(PersonCreateController.class).persons.size()). }
false;public;0;8;;@Test public void personCreateWithObservableXml() throws Exception {     People people = new People(new Person("Robert"), new Person("Marie")).     ResponseEntity<Void> response = performPost("/person-create/observable", APPLICATION_XML, people, null, Void.class).     assertEquals(HttpStatus.OK, response.getStatusCode()).     assertEquals(2, getApplicationContext().getBean(PersonCreateController.class).persons.size()). }
false;public;0;9;;@Test public void personCreateWithRxJava2ObservableXml() throws Exception {     People people = new People(new Person("Robert"), new Person("Marie")).     String url = "/person-create/rxjava2-observable".     ResponseEntity<Void> response = performPost(url, APPLICATION_XML, people, null, Void.class).     assertEquals(HttpStatus.OK, response.getStatusCode()).     assertEquals(2, getApplicationContext().getBean(PersonCreateController.class).persons.size()). }
false;public;0;8;;@Test public void personCreateWithFlowableJson() throws Exception {     ResponseEntity<Void> entity = performPost("/person-create/flowable", JSON, asList(new Person("Robert"), new Person("Marie")), null, Void.class).     assertEquals(HttpStatus.OK, entity.getStatusCode()).     assertEquals(2, getApplicationContext().getBean(PersonCreateController.class).persons.size()). }
false;public;0;8;;@Test public void personCreateWithFlowableXml() throws Exception {     People people = new People(new Person("Robert"), new Person("Marie")).     ResponseEntity<Void> response = performPost("/person-create/flowable", APPLICATION_XML, people, null, Void.class).     assertEquals(HttpStatus.OK, response.getStatusCode()).     assertEquals(2, getApplicationContext().getBean(PersonCreateController.class).persons.size()). }
false;public;0;7;;@GetMapping("/publisher") public Publisher<ByteBuffer> getPublisher() {     DataBufferFactory dataBufferFactory = new DefaultDataBufferFactory().     Jackson2JsonEncoder encoder = new Jackson2JsonEncoder().     return encoder.encode(Mono.just(new Person("Robert")), dataBufferFactory, ResolvableType.forClass(Person.class), JSON, Collections.emptyMap()).map(DataBuffer::asByteBuffer). }
false;public;0;4;;@GetMapping("/flux") public Flux<ByteBuffer> getFlux() {     return Flux.just(ByteBuffer.wrap("Hello!".getBytes())). }
false;public;0;4;;@GetMapping("/mono") public Mono<ByteBuffer> getMonoString() {     return Mono.just(ByteBuffer.wrap("Hello!".getBytes())). }
false;public;0;4;;@GetMapping("/observable") public Observable<ByteBuffer> getObservable() {     return Observable.just(ByteBuffer.wrap("Hello!".getBytes())). }
false;public;0;4;;@GetMapping("/rxjava2-observable") public io.reactivex.Observable<ByteBuffer> getRxJava2Observable() {     return io.reactivex.Observable.just(ByteBuffer.wrap("Hello!".getBytes())). }
false;public;0;4;;@GetMapping("/flowable") public Flowable<ByteBuffer> getFlowable() {     return Flowable.just(ByteBuffer.wrap("Hello!".getBytes())). }
false;public;0;4;;@GetMapping("/person") public Person getPerson() {     return new Person("Robert"). }
false;public;0;4;;@GetMapping("/completable-future") public CompletableFuture<Person> getCompletableFuture() {     return CompletableFuture.completedFuture(new Person("Robert")). }
false;public;0;4;;@GetMapping("/mono") public Mono<Person> getMono() {     return Mono.just(new Person("Robert")). }
false;public;0;4;;@GetMapping("/mono-empty") public Mono<Person> getMonoEmpty() {     return Mono.empty(). }
false;public;0;4;;@GetMapping("/mono-declared-as-object") public Object getMonoDeclaredAsObject() {     return Mono.just(new Person("Robert")). }
false;public;0;4;;@GetMapping("/single") public Single<Person> getSingle() {     return Single.just(new Person("Robert")). }
false;public;0;5;;@GetMapping("/mono-response-entity") public ResponseEntity<Mono<Person>> getMonoResponseEntity() {     Mono<Person> body = Mono.just(new Person("Robert")).     return ResponseEntity.ok(body). }
false;public;0;5;;@GetMapping("/mono-response-entity-xml") public ResponseEntity<Mono<Person>> getMonoResponseEntityXml() {     Mono<Person> body = Mono.just(new Person("Robert")).     return ResponseEntity.ok().contentType(MediaType.APPLICATION_XML).body(body). }
false;public;0;4;;@GetMapping("/list") public List<Person> getList() {     return asList(new Person("Robert"), new Person("Marie")). }
false;public;0;4;;@GetMapping("/publisher") public Publisher<Person> getPublisher() {     return Flux.just(new Person("Robert"), new Person("Marie")). }
false;public;0;4;;@GetMapping("/flux") public Flux<Person> getFlux() {     return Flux.just(new Person("Robert"), new Person("Marie")). }
false;public;0;4;;@GetMapping("/observable") public Observable<Person> getObservable() {     return Observable.just(new Person("Robert"), new Person("Marie")). }
false;public;0;4;;@GetMapping("/resource") public Resource resource() {     return new ClassPathResource("spring.png", ZeroCopyIntegrationTests.class). }
false;public;1;4;;@PostMapping("/person") public Person transformPerson(@RequestBody Person person) {     return new Person(person.getName().toUpperCase()). }
false;public;1;5;;@PostMapping("/completable-future") public CompletableFuture<Person> transformCompletableFuture(@RequestBody CompletableFuture<Person> personFuture) {     return personFuture.thenApply(person -> new Person(person.getName().toUpperCase())). }
false;public;1;4;;@PostMapping("/mono") public Mono<Person> transformMono(@RequestBody Mono<Person> personFuture) {     return personFuture.map(person -> new Person(person.getName().toUpperCase())). }
false;public;1;4;;@PostMapping("/single") public Single<Person> transformSingle(@RequestBody Single<Person> personFuture) {     return personFuture.map(person -> new Person(person.getName().toUpperCase())). }
false;public;1;4;;@PostMapping("/rxjava2-single") public io.reactivex.Single<Person> transformRxJava2Single(@RequestBody io.reactivex.Single<Person> personFuture) {     return personFuture.map(person -> new Person(person.getName().toUpperCase())). }
false;public;1;4;;@PostMapping("/rxjava2-maybe") public Maybe<Person> transformRxJava2Maybe(@RequestBody Maybe<Person> personFuture) {     return personFuture.map(person -> new Person(person.getName().toUpperCase())). }
false;public;1;6;;@PostMapping("/publisher") public Publisher<Person> transformPublisher(@RequestBody Publisher<Person> persons) {     return Flux.from(persons).map(person -> new Person(person.getName().toUpperCase())). }
false;public;1;4;;@PostMapping("/flux") public Flux<Person> transformFlux(@RequestBody Flux<Person> persons) {     return persons.map(person -> new Person(person.getName().toUpperCase())). }
false;public;1;4;;@PostMapping("/observable") public Observable<Person> transformObservable(@RequestBody Observable<Person> persons) {     return persons.map(person -> new Person(person.getName().toUpperCase())). }
false;public;1;4;;@PostMapping("/rxjava2-observable") public io.reactivex.Observable<Person> transformObservable(@RequestBody io.reactivex.Observable<Person> persons) {     return persons.map(person -> new Person(person.getName().toUpperCase())). }
false;public;1;4;;@PostMapping("/flowable") public Flowable<Person> transformFlowable(@RequestBody Flowable<Person> persons) {     return persons.map(person -> new Person(person.getName().toUpperCase())). }
false;public;1;4;;@PostMapping("/publisher") public Publisher<Void> createWithPublisher(@RequestBody Publisher<Person> publisher) {     return Flux.from(publisher).doOnNext(persons::add).then(). }
false;public;1;4;;@PostMapping("/mono") public Mono<Void> createWithMono(@RequestBody Mono<Person> mono) {     return mono.doOnNext(persons::add).then(). }
false;public;1;4;;@PostMapping("/single") public Completable createWithSingle(@RequestBody Single<Person> single) {     return single.map(persons::add).toCompletable(). }
false;public;1;5;;@PostMapping("/rxjava2-single") @SuppressWarnings("deprecation") public io.reactivex.Completable createWithRxJava2Single(@RequestBody io.reactivex.Single<Person> single) {     return single.map(persons::add).toCompletable(). }
false;public;1;4;;@PostMapping("/flux") public Mono<Void> createWithFlux(@RequestBody Flux<Person> flux) {     return flux.doOnNext(persons::add).then(). }
false;public;1;4;;@PostMapping("/observable") public Observable<Void> createWithObservable(@RequestBody Observable<Person> observable) {     return observable.toList().doOnNext(persons::addAll).flatMap(document -> Observable.empty()). }
false;public;1;7;;@PostMapping("/rxjava2-observable") @SuppressWarnings("deprecation") public io.reactivex.Completable createWithRxJava2Observable(@RequestBody io.reactivex.Observable<Person> observable) {     return observable.toList().doOnSuccess(persons::addAll).toCompletable(). }
false;public;1;5;;@PostMapping("/flowable") @SuppressWarnings("deprecation") public io.reactivex.Completable createWithFlowable(@RequestBody Flowable<Person> flowable) {     return flowable.toList().doOnSuccess(persons::addAll).toCompletable(). }
false;public;0;3;;public String getName() {     return name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     Person person = (Person) o.     return !(this.name != null ? !this.name.equals(person.name) : person.name != null). }
false;public;0;4;;@Override public int hashCode() {     return this.name != null ? this.name.hashCode() : 0. }
false;public;0;6;;@Override public String toString() {     return "Person{" + "name='" + name + '\'' + '}'. }
false;public;0;4;;@XmlElement public List<Person> getPerson() {     return this.persons. }
