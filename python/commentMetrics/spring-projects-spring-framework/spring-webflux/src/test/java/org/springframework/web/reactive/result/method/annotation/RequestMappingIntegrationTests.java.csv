commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;@Override protected ApplicationContext initApplicationContext() {     AnnotationConfigApplicationContext wac = new AnnotationConfigApplicationContext().     wac.register(WebConfig.class, TestRestController.class, LocalConfig.class).     wac.refresh().     return wac. }
false;public;0;9;;@Test public void httpHead() {     String url = "http://localhost:" + this.port + "/text".     HttpHeaders headers = getRestTemplate().headForHeaders(url).     String contentType = headers.getFirst("Content-Type").     assertNotNull(contentType).     assertEquals("text/html.charset=utf-8", contentType.toLowerCase()).     assertEquals(3, headers.getContentLength()). }
false;public;0;13;;@Test public void forwardedHeaders() {     // One integration test to verify triggering of Forwarded header support.     // More fine-grained tests in ForwardedHeaderTransformerTests.     RequestEntity<Void> request = RequestEntity.get(URI.create("http://localhost:" + this.port + "/uri")).header("Forwarded", "host=84.198.58.199.proto=https").build().     ResponseEntity<String> entity = getRestTemplate().exchange(request, String.class).     assertEquals("https://84.198.58.199/uri", entity.getBody()). }
false;public;0;5;;@Test public void stream() throws Exception {     String[] expected = { "0", "1", "2", "3", "4" }.     assertArrayEquals(expected, performGet("/stream", new HttpHeaders(), String[].class).getBody()). }
false;public;0;4;;@GetMapping("/text") public String textGet() {     return "Foo". }
true;public;0;4;// SPR-17593: explicit HEAD should not clash with implicit mapping via GET ;// SPR-17593: explicit HEAD should not clash with implicit mapping via GET @RequestMapping(path = "/text", method = RequestMethod.HEAD) public String textHead() {     return textGet(). }
false;public;1;4;;@GetMapping("/uri") public String uri(ServerHttpRequest request) {     return request.getURI().toString(). }
false;public;0;4;;@GetMapping("/stream") public Publisher<Long> stream() {     return testInterval(Duration.ofMillis(50), 5). }
false;public;0;4;;@Bean public ForwardedHeaderTransformer forwardedHeaderTransformer() {     return new ForwardedHeaderTransformer(). }
