commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Before @SuppressWarnings("resource") public void setup() throws Exception {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     context.refresh().     ReactiveAdapterRegistry adapterRegistry = ReactiveAdapterRegistry.getSharedInstance().     this.resolver = new ExpressionValueMethodArgumentResolver(context.getBeanFactory(), adapterRegistry).     Method method = ReflectionUtils.findMethod(getClass(), "params", (Class<?>[]) null).     this.paramSystemProperty = new MethodParameter(method, 0).     this.paramNotSupported = new MethodParameter(method, 1).     this.paramAlsoNotSupported = new MethodParameter(method, 2). }
false;public;0;4;;@Test public void supportsParameter() throws Exception {     assertTrue(this.resolver.supportsParameter(this.paramSystemProperty)). }
false;public;0;13;;@Test public void doesNotSupport() throws Exception {     assertFalse(this.resolver.supportsParameter(this.paramNotSupported)).     try {         this.resolver.supportsParameter(this.paramAlsoNotSupported).         fail().     } catch (IllegalStateException ex) {         assertTrue("Unexpected error message:\n" + ex.getMessage(), ex.getMessage().startsWith("ExpressionValueMethodArgumentResolver doesn't support reactive type wrapper")).     } }
false;public;0;15;;@Test public void resolveSystemProperty() throws Exception {     System.setProperty("systemProperty", "22").     try {         Mono<Object> mono = this.resolver.resolveArgument(this.paramSystemProperty, new BindingContext(), this.exchange).         Object value = mono.block().         assertEquals(22, value).     } finally {         System.clearProperty("systemProperty").     } }
false;public;3;6;;// TODO: test with expression for ServerWebExchange @SuppressWarnings("unused") public void params(@Value("#{systemProperties.systemProperty}") int param1, String notSupported, @Value("#{systemProperties.foo}") Mono<String> alsoNotSupported) { }
