commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;12;;@Override protected RouterFunction<?> routerFunction() {     RenderingResponseHandler handler = new RenderingResponseHandler().     RouterFunction<RenderingResponse> normalRoute = route(GET("/normal"), handler::render).     RouterFunction<RenderingResponse> filteredRoute = route(GET("/filter"), handler::render).filter(ofResponseProcessor(response -> RenderingResponse.from(response).modelAttribute("qux", "quux").build())).     return normalRoute.and(filteredRoute). }
false;protected;0;6;;@Override protected HandlerStrategies handlerStrategies() {     return HandlerStrategies.builder().viewResolver(new DummyViewResolver()).build(). }
false;public;0;11;;@Test public void normal() {     ResponseEntity<String> result = restTemplate.getForEntity("http://localhost:" + port + "/normal", String.class).     assertEquals(HttpStatus.OK, result.getStatusCode()).     Map<String, String> body = parseBody(result.getBody()).     assertEquals(2, body.size()).     assertEquals("foo", body.get("name")).     assertEquals("baz", body.get("bar")). }
false;public;0;12;;@Test public void filter() {     ResponseEntity<String> result = restTemplate.getForEntity("http://localhost:" + port + "/filter", String.class).     assertEquals(HttpStatus.OK, result.getStatusCode()).     Map<String, String> body = parseBody(result.getBody()).     assertEquals(3, body.size()).     assertEquals("foo", body.get("name")).     assertEquals("baz", body.get("bar")).     assertEquals("quux", body.get("qux")). }
false;private;1;11;;private Map<String, String> parseBody(String body) {     String[] lines = body.split("\\n").     Map<String, String> result = new LinkedHashMap<>(lines.length).     for (String line : lines) {         int idx = line.indexOf('=').         String key = line.substring(0, idx).         String value = line.substring(idx + 1).         result.put(key, value).     }     return result. }
false;public;1;5;;public Mono<RenderingResponse> render(ServerRequest request) {     return RenderingResponse.create("foo").modelAttribute("bar", "baz").build(). }
false;public;2;4;;@Override public Mono<View> resolveViewName(String viewName, Locale locale) {     return Mono.just(new DummyView(viewName)). }
false;public;0;4;;@Override public List<MediaType> getSupportedMediaTypes() {     return Collections.singletonList(MediaType.TEXT_PLAIN). }
false;public;3;16;;@Override public Mono<Void> render(@Nullable Map<String, ?> model, @Nullable MediaType contentType, ServerWebExchange exchange) {     StringBuilder builder = new StringBuilder().     builder.append("name=").append(this.name).append('\n').     for (Map.Entry<String, ?> entry : model.entrySet()) {         builder.append(entry.getKey()).append('=').append(entry.getValue()).append('\n').     }     builder.setLength(builder.length() - 1).     byte[] bytes = builder.toString().getBytes(StandardCharsets.UTF_8).     ServerHttpResponse response = exchange.getResponse().     DataBuffer buffer = response.bufferFactory().wrap(bytes).     response.getHeaders().setContentType(MediaType.TEXT_PLAIN).     return response.writeWith(Mono.just(buffer)). }
