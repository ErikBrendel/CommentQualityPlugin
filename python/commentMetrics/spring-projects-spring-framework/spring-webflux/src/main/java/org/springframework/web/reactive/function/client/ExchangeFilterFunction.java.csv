# id;timestamp;commentText;codeText;commentWords;codeWords
ExchangeFilterFunction -> static ExchangeFilterFunction ofResponseProcessor(Function<ClientResponse, 			Mono<ClientResponse>> responseProcessor);1485986572;Adapt the given response processor function to a filter function that only operates on the_{@code ClientResponse}._@param responseProcessor the response processor_@return the filter adaptation of the request processor;static ExchangeFilterFunction ofResponseProcessor(Function<ClientResponse,_			Mono<ClientResponse>> responseProcessor) {__		Assert.notNull(responseProcessor, "'responseProcessor' must not be null")__		return (request, next) -> next.exchange(request).then(responseProcessor)__	};adapt,the,given,response,processor,function,to,a,filter,function,that,only,operates,on,the,code,client,response,param,response,processor,the,response,processor,return,the,filter,adaptation,of,the,request,processor;static,exchange,filter,function,of,response,processor,function,client,response,mono,client,response,response,processor,assert,not,null,response,processor,response,processor,must,not,be,null,return,request,next,next,exchange,request,then,response,processor
ExchangeFilterFunction -> static ExchangeFilterFunction ofResponseProcessor(Function<ClientResponse, 			Mono<ClientResponse>> responseProcessor);1486990463;Adapt the given response processor function to a filter function that only operates on the_{@code ClientResponse}._@param responseProcessor the response processor_@return the filter adaptation of the request processor;static ExchangeFilterFunction ofResponseProcessor(Function<ClientResponse,_			Mono<ClientResponse>> responseProcessor) {__		Assert.notNull(responseProcessor, "'responseProcessor' must not be null")__		return (request, next) -> next.exchange(request).then(responseProcessor)__	};adapt,the,given,response,processor,function,to,a,filter,function,that,only,operates,on,the,code,client,response,param,response,processor,the,response,processor,return,the,filter,adaptation,of,the,request,processor;static,exchange,filter,function,of,response,processor,function,client,response,mono,client,response,response,processor,assert,not,null,response,processor,response,processor,must,not,be,null,return,request,next,next,exchange,request,then,response,processor
ExchangeFilterFunction -> static ExchangeFilterFunction ofResponseProcessor(Function<ClientResponse, 			Mono<ClientResponse>> responseProcessor);1487687241;Adapt the given response processor function to a filter function that only operates on the_{@code ClientResponse}._@param responseProcessor the response processor_@return the filter adaptation of the request processor;static ExchangeFilterFunction ofResponseProcessor(Function<ClientResponse,_			Mono<ClientResponse>> responseProcessor) {__		Assert.notNull(responseProcessor, "'responseProcessor' must not be null")__		return (request, next) -> next.exchange(request).then(responseProcessor)__	};adapt,the,given,response,processor,function,to,a,filter,function,that,only,operates,on,the,code,client,response,param,response,processor,the,response,processor,return,the,filter,adaptation,of,the,request,processor;static,exchange,filter,function,of,response,processor,function,client,response,mono,client,response,response,processor,assert,not,null,response,processor,response,processor,must,not,be,null,return,request,next,next,exchange,request,then,response,processor
ExchangeFilterFunction -> static ExchangeFilterFunction ofResponseProcessor(Function<ClientResponse, 			Mono<ClientResponse>> responseProcessor);1491927184;Adapt the given response processor function to a filter function that only operates on the_{@code ClientResponse}._@param responseProcessor the response processor_@return the filter adaptation of the request processor;static ExchangeFilterFunction ofResponseProcessor(Function<ClientResponse,_			Mono<ClientResponse>> responseProcessor) {__		Assert.notNull(responseProcessor, "'responseProcessor' must not be null")__		return (request, next) -> next.exchange(request).flatMap(responseProcessor)__	};adapt,the,given,response,processor,function,to,a,filter,function,that,only,operates,on,the,code,client,response,param,response,processor,the,response,processor,return,the,filter,adaptation,of,the,request,processor;static,exchange,filter,function,of,response,processor,function,client,response,mono,client,response,response,processor,assert,not,null,response,processor,response,processor,must,not,be,null,return,request,next,next,exchange,request,flat,map,response,processor
ExchangeFilterFunction -> default ExchangeFunction apply(ExchangeFunction exchange);1485986572;Apply this filter to the given exchange function, resulting in a filtered exchange function._@param exchange the exchange function to filter_@return the filtered exchange function;default ExchangeFunction apply(ExchangeFunction exchange) {_		Assert.notNull(exchange, "'exchange' must not be null")__		return request -> this.filter(request, exchange)__	};apply,this,filter,to,the,given,exchange,function,resulting,in,a,filtered,exchange,function,param,exchange,the,exchange,function,to,filter,return,the,filtered,exchange,function;default,exchange,function,apply,exchange,function,exchange,assert,not,null,exchange,exchange,must,not,be,null,return,request,this,filter,request,exchange
ExchangeFilterFunction -> default ExchangeFunction apply(ExchangeFunction exchange);1486990463;Apply this filter to the given exchange function, resulting in a filtered exchange function._@param exchange the exchange function to filter_@return the filtered exchange function;default ExchangeFunction apply(ExchangeFunction exchange) {_		Assert.notNull(exchange, "'exchange' must not be null")__		return request -> this.filter(request, exchange)__	};apply,this,filter,to,the,given,exchange,function,resulting,in,a,filtered,exchange,function,param,exchange,the,exchange,function,to,filter,return,the,filtered,exchange,function;default,exchange,function,apply,exchange,function,exchange,assert,not,null,exchange,exchange,must,not,be,null,return,request,this,filter,request,exchange
ExchangeFilterFunction -> default ExchangeFunction apply(ExchangeFunction exchange);1487687241;Apply this filter to the given exchange function, resulting in a filtered exchange function._@param exchange the exchange function to filter_@return the filtered exchange function;default ExchangeFunction apply(ExchangeFunction exchange) {_		Assert.notNull(exchange, "'exchange' must not be null")__		return request -> this.filter(request, exchange)__	};apply,this,filter,to,the,given,exchange,function,resulting,in,a,filtered,exchange,function,param,exchange,the,exchange,function,to,filter,return,the,filtered,exchange,function;default,exchange,function,apply,exchange,function,exchange,assert,not,null,exchange,exchange,must,not,be,null,return,request,this,filter,request,exchange
ExchangeFilterFunction -> default ExchangeFunction apply(ExchangeFunction exchange);1491927184;Apply this filter to the given exchange function, resulting in a filtered exchange function._@param exchange the exchange function to filter_@return the filtered exchange function;default ExchangeFunction apply(ExchangeFunction exchange) {_		Assert.notNull(exchange, "'exchange' must not be null")__		return request -> this.filter(request, exchange)__	};apply,this,filter,to,the,given,exchange,function,resulting,in,a,filtered,exchange,function,param,exchange,the,exchange,function,to,filter,return,the,filtered,exchange,function;default,exchange,function,apply,exchange,function,exchange,assert,not,null,exchange,exchange,must,not,be,null,return,request,this,filter,request,exchange
ExchangeFilterFunction -> default ExchangeFunction apply(ExchangeFunction exchange);1524865018;Apply this filter to the given exchange function, resulting in a filtered exchange function._@param exchange the exchange function to filter_@return the filtered exchange function;default ExchangeFunction apply(ExchangeFunction exchange) {_		Assert.notNull(exchange, "ExchangeFunction must not be null")__		return request -> this.filter(request, exchange)__	};apply,this,filter,to,the,given,exchange,function,resulting,in,a,filtered,exchange,function,param,exchange,the,exchange,function,to,filter,return,the,filtered,exchange,function;default,exchange,function,apply,exchange,function,exchange,assert,not,null,exchange,exchange,function,must,not,be,null,return,request,this,filter,request,exchange
ExchangeFilterFunction -> default ExchangeFunction apply(ExchangeFunction exchange);1528924489;Apply this filter to the given {@linkplain ExchangeFunction}, resulting_in a filtered exchange function._@param exchange the exchange function to filter_@return the filtered exchange function;default ExchangeFunction apply(ExchangeFunction exchange) {_		Assert.notNull(exchange, "ExchangeFunction must not be null")__		return request -> this.filter(request, exchange)__	};apply,this,filter,to,the,given,linkplain,exchange,function,resulting,in,a,filtered,exchange,function,param,exchange,the,exchange,function,to,filter,return,the,filtered,exchange,function;default,exchange,function,apply,exchange,function,exchange,assert,not,null,exchange,exchange,function,must,not,be,null,return,request,this,filter,request,exchange
ExchangeFilterFunction -> default ExchangeFunction apply(ExchangeFunction exchange);1549965169;Apply this filter to the given {@linkplain ExchangeFunction}, resulting_in a filtered exchange function._@param exchange the exchange function to filter_@return the filtered exchange function;default ExchangeFunction apply(ExchangeFunction exchange) {_		Assert.notNull(exchange, "ExchangeFunction must not be null")__		return request -> this.filter(request, exchange)__	};apply,this,filter,to,the,given,linkplain,exchange,function,resulting,in,a,filtered,exchange,function,param,exchange,the,exchange,function,to,filter,return,the,filtered,exchange,function;default,exchange,function,apply,exchange,function,exchange,assert,not,null,exchange,exchange,function,must,not,be,null,return,request,this,filter,request,exchange
ExchangeFilterFunction -> static ExchangeFilterFunction ofRequestProcessor(Function<ClientRequest, Mono<ClientRequest>> processor);1528924489;Adapt the given request processor function to a filter function that only_operates on the {@code ClientRequest}._@param processor the request processor_@return the resulting filter adapter;static ExchangeFilterFunction ofRequestProcessor(Function<ClientRequest, Mono<ClientRequest>> processor) {_		Assert.notNull(processor, "ClientRequest Function must not be null")__		return (request, next) -> processor.apply(request).flatMap(next::exchange)__	};adapt,the,given,request,processor,function,to,a,filter,function,that,only,operates,on,the,code,client,request,param,processor,the,request,processor,return,the,resulting,filter,adapter;static,exchange,filter,function,of,request,processor,function,client,request,mono,client,request,processor,assert,not,null,processor,client,request,function,must,not,be,null,return,request,next,processor,apply,request,flat,map,next,exchange
ExchangeFilterFunction -> static ExchangeFilterFunction ofRequestProcessor(Function<ClientRequest, Mono<ClientRequest>> processor);1549965169;Adapt the given request processor function to a filter function that only_operates on the {@code ClientRequest}._@param processor the request processor_@return the resulting filter adapter;static ExchangeFilterFunction ofRequestProcessor(Function<ClientRequest, Mono<ClientRequest>> processor) {_		Assert.notNull(processor, "ClientRequest Function must not be null")__		return (request, next) -> processor.apply(request).flatMap(next::exchange)__	};adapt,the,given,request,processor,function,to,a,filter,function,that,only,operates,on,the,code,client,request,param,processor,the,request,processor,return,the,resulting,filter,adapter;static,exchange,filter,function,of,request,processor,function,client,request,mono,client,request,processor,assert,not,null,processor,client,request,function,must,not,be,null,return,request,next,processor,apply,request,flat,map,next,exchange
ExchangeFilterFunction -> static ExchangeFilterFunction ofResponseProcessor(Function<ClientResponse, Mono<ClientResponse>> processor);1528924489;Adapt the given response processor function to a filter function that_only operates on the {@code ClientResponse}._@param processor the response processor_@return the resulting filter adapter;static ExchangeFilterFunction ofResponseProcessor(Function<ClientResponse, Mono<ClientResponse>> processor) {_		Assert.notNull(processor, "ClientResponse Function must not be null")__		return (request, next) -> next.exchange(request).flatMap(processor)__	};adapt,the,given,response,processor,function,to,a,filter,function,that,only,operates,on,the,code,client,response,param,processor,the,response,processor,return,the,resulting,filter,adapter;static,exchange,filter,function,of,response,processor,function,client,response,mono,client,response,processor,assert,not,null,processor,client,response,function,must,not,be,null,return,request,next,next,exchange,request,flat,map,processor
ExchangeFilterFunction -> static ExchangeFilterFunction ofResponseProcessor(Function<ClientResponse, Mono<ClientResponse>> processor);1549965169;Adapt the given response processor function to a filter function that_only operates on the {@code ClientResponse}._@param processor the response processor_@return the resulting filter adapter;static ExchangeFilterFunction ofResponseProcessor(Function<ClientResponse, Mono<ClientResponse>> processor) {_		Assert.notNull(processor, "ClientResponse Function must not be null")__		return (request, next) -> next.exchange(request).flatMap(processor)__	};adapt,the,given,response,processor,function,to,a,filter,function,that,only,operates,on,the,code,client,response,param,processor,the,response,processor,return,the,resulting,filter,adapter;static,exchange,filter,function,of,response,processor,function,client,response,mono,client,response,processor,assert,not,null,processor,client,response,function,must,not,be,null,return,request,next,next,exchange,request,flat,map,processor
ExchangeFilterFunction -> static ExchangeFilterFunction ofRequestProcessor(Function<ClientRequest, 			Mono<ClientRequest>> requestProcessor);1486990463;Adapt the given request processor function to a filter function that only operates on the_{@code ClientRequest}._@param requestProcessor the request processor_@return the filter adaptation of the request processor;static ExchangeFilterFunction ofRequestProcessor(Function<ClientRequest,_			Mono<ClientRequest>> requestProcessor) {__		Assert.notNull(requestProcessor, "'requestProcessor' must not be null")__		return (request, next) -> requestProcessor.apply(request).then(next::exchange)__	};adapt,the,given,request,processor,function,to,a,filter,function,that,only,operates,on,the,code,client,request,param,request,processor,the,request,processor,return,the,filter,adaptation,of,the,request,processor;static,exchange,filter,function,of,request,processor,function,client,request,mono,client,request,request,processor,assert,not,null,request,processor,request,processor,must,not,be,null,return,request,next,request,processor,apply,request,then,next,exchange
ExchangeFilterFunction -> static ExchangeFilterFunction ofRequestProcessor(Function<ClientRequest, 			Mono<ClientRequest>> requestProcessor);1487687241;Adapt the given request processor function to a filter function that only operates on the_{@code ClientRequest}._@param requestProcessor the request processor_@return the filter adaptation of the request processor;static ExchangeFilterFunction ofRequestProcessor(Function<ClientRequest,_			Mono<ClientRequest>> requestProcessor) {__		Assert.notNull(requestProcessor, "'requestProcessor' must not be null")__		return (request, next) -> requestProcessor.apply(request).then(next::exchange)__	};adapt,the,given,request,processor,function,to,a,filter,function,that,only,operates,on,the,code,client,request,param,request,processor,the,request,processor,return,the,filter,adaptation,of,the,request,processor;static,exchange,filter,function,of,request,processor,function,client,request,mono,client,request,request,processor,assert,not,null,request,processor,request,processor,must,not,be,null,return,request,next,request,processor,apply,request,then,next,exchange
ExchangeFilterFunction -> static ExchangeFilterFunction ofRequestProcessor(Function<ClientRequest, 			Mono<ClientRequest>> requestProcessor);1491927184;Adapt the given request processor function to a filter function that only operates on the_{@code ClientRequest}._@param requestProcessor the request processor_@return the filter adaptation of the request processor;static ExchangeFilterFunction ofRequestProcessor(Function<ClientRequest,_			Mono<ClientRequest>> requestProcessor) {__		Assert.notNull(requestProcessor, "'requestProcessor' must not be null")__		return (request, next) -> requestProcessor.apply(request).flatMap(next::exchange)__	};adapt,the,given,request,processor,function,to,a,filter,function,that,only,operates,on,the,code,client,request,param,request,processor,the,request,processor,return,the,filter,adaptation,of,the,request,processor;static,exchange,filter,function,of,request,processor,function,client,request,mono,client,request,request,processor,assert,not,null,request,processor,request,processor,must,not,be,null,return,request,next,request,processor,apply,request,flat,map,next,exchange
ExchangeFilterFunction -> default ExchangeFilterFunction andThen(ExchangeFilterFunction after);1485986572;Return a composed filter function that first applies this filter, and then applies the_{@code after} filter._@param after the filter to apply after this filter is applied_@return a composed filter that first applies this function and then applies the_{@code after} function;default ExchangeFilterFunction andThen(ExchangeFilterFunction after) {_		Assert.notNull(after, "'after' must not be null")__		return (request, next) -> {_			ExchangeFunction nextExchange = exchangeRequest -> after.filter(exchangeRequest, next)__			return filter(request, nextExchange)__		}__	};return,a,composed,filter,function,that,first,applies,this,filter,and,then,applies,the,code,after,filter,param,after,the,filter,to,apply,after,this,filter,is,applied,return,a,composed,filter,that,first,applies,this,function,and,then,applies,the,code,after,function;default,exchange,filter,function,and,then,exchange,filter,function,after,assert,not,null,after,after,must,not,be,null,return,request,next,exchange,function,next,exchange,exchange,request,after,filter,exchange,request,next,return,filter,request,next,exchange
ExchangeFilterFunction -> default ExchangeFilterFunction andThen(ExchangeFilterFunction after);1486990463;Return a composed filter function that first applies this filter, and then applies the_{@code after} filter._@param after the filter to apply after this filter is applied_@return a composed filter that first applies this function and then applies the_{@code after} function;default ExchangeFilterFunction andThen(ExchangeFilterFunction after) {_		Assert.notNull(after, "'after' must not be null")__		return (request, next) -> {_			ExchangeFunction nextExchange = exchangeRequest -> after.filter(exchangeRequest, next)__			return filter(request, nextExchange)__		}__	};return,a,composed,filter,function,that,first,applies,this,filter,and,then,applies,the,code,after,filter,param,after,the,filter,to,apply,after,this,filter,is,applied,return,a,composed,filter,that,first,applies,this,function,and,then,applies,the,code,after,function;default,exchange,filter,function,and,then,exchange,filter,function,after,assert,not,null,after,after,must,not,be,null,return,request,next,exchange,function,next,exchange,exchange,request,after,filter,exchange,request,next,return,filter,request,next,exchange
ExchangeFilterFunction -> default ExchangeFilterFunction andThen(ExchangeFilterFunction after);1487687241;Return a composed filter function that first applies this filter, and then applies the_{@code after} filter._@param after the filter to apply after this filter is applied_@return a composed filter that first applies this function and then applies the_{@code after} function;default ExchangeFilterFunction andThen(ExchangeFilterFunction after) {_		Assert.notNull(after, "'after' must not be null")__		return (request, next) -> {_			ExchangeFunction nextExchange = exchangeRequest -> after.filter(exchangeRequest, next)__			return filter(request, nextExchange)__		}__	};return,a,composed,filter,function,that,first,applies,this,filter,and,then,applies,the,code,after,filter,param,after,the,filter,to,apply,after,this,filter,is,applied,return,a,composed,filter,that,first,applies,this,function,and,then,applies,the,code,after,function;default,exchange,filter,function,and,then,exchange,filter,function,after,assert,not,null,after,after,must,not,be,null,return,request,next,exchange,function,next,exchange,exchange,request,after,filter,exchange,request,next,return,filter,request,next,exchange
ExchangeFilterFunction -> default ExchangeFilterFunction andThen(ExchangeFilterFunction after);1491927184;Return a composed filter function that first applies this filter, and then applies the_{@code after} filter._@param after the filter to apply after this filter is applied_@return a composed filter that first applies this function and then applies the_{@code after} function;default ExchangeFilterFunction andThen(ExchangeFilterFunction after) {_		Assert.notNull(after, "'after' must not be null")__		return (request, next) -> {_			ExchangeFunction nextExchange = exchangeRequest -> after.filter(exchangeRequest, next)__			return filter(request, nextExchange)__		}__	};return,a,composed,filter,function,that,first,applies,this,filter,and,then,applies,the,code,after,filter,param,after,the,filter,to,apply,after,this,filter,is,applied,return,a,composed,filter,that,first,applies,this,function,and,then,applies,the,code,after,function;default,exchange,filter,function,and,then,exchange,filter,function,after,assert,not,null,after,after,must,not,be,null,return,request,next,exchange,function,next,exchange,exchange,request,after,filter,exchange,request,next,return,filter,request,next,exchange
ExchangeFilterFunction -> default ExchangeFilterFunction andThen(ExchangeFilterFunction after);1524865018;Return a composed filter function that first applies this filter, and then applies the_{@code after} filter._@param after the filter to apply after this filter is applied_@return a composed filter that first applies this function and then applies the_{@code after} function;default ExchangeFilterFunction andThen(ExchangeFilterFunction after) {_		Assert.notNull(after, "ExchangeFilterFunction must not be null")__		return (request, next) -> {_			ExchangeFunction nextExchange = exchangeRequest -> after.filter(exchangeRequest, next)__			return filter(request, nextExchange)__		}__	};return,a,composed,filter,function,that,first,applies,this,filter,and,then,applies,the,code,after,filter,param,after,the,filter,to,apply,after,this,filter,is,applied,return,a,composed,filter,that,first,applies,this,function,and,then,applies,the,code,after,function;default,exchange,filter,function,and,then,exchange,filter,function,after,assert,not,null,after,exchange,filter,function,must,not,be,null,return,request,next,exchange,function,next,exchange,exchange,request,after,filter,exchange,request,next,return,filter,request,next,exchange
ExchangeFilterFunction -> Mono<ClientResponse> filter(ClientRequest request, ExchangeFunction next)_;1486990463;Apply this filter to the given request and exchange function. The given_{@linkplain ExchangeFunction exchange function} represents the next entity in the_chain, and can be {@linkplain ExchangeFunction#exchange(ClientRequest) invoked} in order_to proceed to the exchange, or not invoked to block the chain.__@param request the request_@param next the next exchange function in the chain_@return the filtered response;Mono<ClientResponse> filter(ClientRequest request, ExchangeFunction next)_;apply,this,filter,to,the,given,request,and,exchange,function,the,given,linkplain,exchange,function,exchange,function,represents,the,next,entity,in,the,chain,and,can,be,linkplain,exchange,function,exchange,client,request,invoked,in,order,to,proceed,to,the,exchange,or,not,invoked,to,block,the,chain,param,request,the,request,param,next,the,next,exchange,function,in,the,chain,return,the,filtered,response;mono,client,response,filter,client,request,request,exchange,function,next
ExchangeFilterFunction -> Mono<ClientResponse> filter(ClientRequest request, ExchangeFunction next)_;1487687241;Apply this filter to the given request and exchange function._<p>The given {@linkplain ExchangeFunction exchange function} represents the next entity_in the chain, and can be {@linkplain ExchangeFunction#exchange(ClientRequest) invoked}_in order to proceed to the exchange, or not invoked to block the chain._@param request the request_@param next the next exchange function in the chain_@return the filtered response;Mono<ClientResponse> filter(ClientRequest request, ExchangeFunction next)_;apply,this,filter,to,the,given,request,and,exchange,function,p,the,given,linkplain,exchange,function,exchange,function,represents,the,next,entity,in,the,chain,and,can,be,linkplain,exchange,function,exchange,client,request,invoked,in,order,to,proceed,to,the,exchange,or,not,invoked,to,block,the,chain,param,request,the,request,param,next,the,next,exchange,function,in,the,chain,return,the,filtered,response;mono,client,response,filter,client,request,request,exchange,function,next
ExchangeFilterFunction -> Mono<ClientResponse> filter(ClientRequest request, ExchangeFunction next)_;1491927184;Apply this filter to the given request and exchange function._<p>The given {@linkplain ExchangeFunction exchange function} represents the next entity_in the chain, and can be {@linkplain ExchangeFunction#exchange(ClientRequest) invoked}_in order to proceed to the exchange, or not invoked to block the chain._@param request the request_@param next the next exchange function in the chain_@return the filtered response;Mono<ClientResponse> filter(ClientRequest request, ExchangeFunction next)_;apply,this,filter,to,the,given,request,and,exchange,function,p,the,given,linkplain,exchange,function,exchange,function,represents,the,next,entity,in,the,chain,and,can,be,linkplain,exchange,function,exchange,client,request,invoked,in,order,to,proceed,to,the,exchange,or,not,invoked,to,block,the,chain,param,request,the,request,param,next,the,next,exchange,function,in,the,chain,return,the,filtered,response;mono,client,response,filter,client,request,request,exchange,function,next
ExchangeFilterFunction -> Mono<ClientResponse> filter(ClientRequest request, ExchangeFunction next)_;1524865018;Apply this filter to the given request and exchange function._<p>The given {@linkplain ExchangeFunction exchange function} represents the next entity_in the chain, and can be {@linkplain ExchangeFunction#exchange(ClientRequest) invoked}_in order to proceed to the exchange, or not invoked to block the chain._@param request the request_@param next the next exchange function in the chain_@return the filtered response;Mono<ClientResponse> filter(ClientRequest request, ExchangeFunction next)_;apply,this,filter,to,the,given,request,and,exchange,function,p,the,given,linkplain,exchange,function,exchange,function,represents,the,next,entity,in,the,chain,and,can,be,linkplain,exchange,function,exchange,client,request,invoked,in,order,to,proceed,to,the,exchange,or,not,invoked,to,block,the,chain,param,request,the,request,param,next,the,next,exchange,function,in,the,chain,return,the,filtered,response;mono,client,response,filter,client,request,request,exchange,function,next
ExchangeFilterFunction -> Mono<ClientResponse> filter(ClientRequest request, ExchangeFunction next)_;1528924489;Apply this filter to the given request and exchange function._<p>The given {@linkplain ExchangeFunction} represents the next entity_in the chain, to be invoked via_{@linkplain ExchangeFunction#exchange(ClientRequest) invoked} in order to_proceed with the exchange, or not invoked to shortcut the chain._@param request the current request_@param next the next exchange function in the chain_@return the filtered response;Mono<ClientResponse> filter(ClientRequest request, ExchangeFunction next)_;apply,this,filter,to,the,given,request,and,exchange,function,p,the,given,linkplain,exchange,function,represents,the,next,entity,in,the,chain,to,be,invoked,via,linkplain,exchange,function,exchange,client,request,invoked,in,order,to,proceed,with,the,exchange,or,not,invoked,to,shortcut,the,chain,param,request,the,current,request,param,next,the,next,exchange,function,in,the,chain,return,the,filtered,response;mono,client,response,filter,client,request,request,exchange,function,next
ExchangeFilterFunction -> Mono<ClientResponse> filter(ClientRequest request, ExchangeFunction next)_;1549965169;Apply this filter to the given request and exchange function._<p>The given {@linkplain ExchangeFunction} represents the next entity_in the chain, to be invoked via_{@linkplain ExchangeFunction#exchange(ClientRequest) invoked} in order to_proceed with the exchange, or not invoked to shortcut the chain._@param request the current request_@param next the next exchange function in the chain_@return the filtered response;Mono<ClientResponse> filter(ClientRequest request, ExchangeFunction next)_;apply,this,filter,to,the,given,request,and,exchange,function,p,the,given,linkplain,exchange,function,represents,the,next,entity,in,the,chain,to,be,invoked,via,linkplain,exchange,function,exchange,client,request,invoked,in,order,to,proceed,with,the,exchange,or,not,invoked,to,shortcut,the,chain,param,request,the,current,request,param,next,the,next,exchange,function,in,the,chain,return,the,filtered,response;mono,client,response,filter,client,request,request,exchange,function,next
ExchangeFilterFunction -> default ExchangeFilterFunction andThen(ExchangeFilterFunction afterFilter);1528924489;Return a composed filter function that first applies this filter, and_then applies the given {@code "after"} filter._@param afterFilter the filter to apply after this filter_@return the composed filter;default ExchangeFilterFunction andThen(ExchangeFilterFunction afterFilter) {_		Assert.notNull(afterFilter, "ExchangeFilterFunction must not be null")__		return (request, next) ->_				filter(request, afterRequest -> afterFilter.filter(afterRequest, next))__	};return,a,composed,filter,function,that,first,applies,this,filter,and,then,applies,the,given,code,after,filter,param,after,filter,the,filter,to,apply,after,this,filter,return,the,composed,filter;default,exchange,filter,function,and,then,exchange,filter,function,after,filter,assert,not,null,after,filter,exchange,filter,function,must,not,be,null,return,request,next,filter,request,after,request,after,filter,filter,after,request,next
ExchangeFilterFunction -> default ExchangeFilterFunction andThen(ExchangeFilterFunction afterFilter);1549965169;Return a composed filter function that first applies this filter, and_then applies the given {@code "after"} filter._@param afterFilter the filter to apply after this filter_@return the composed filter;default ExchangeFilterFunction andThen(ExchangeFilterFunction afterFilter) {_		Assert.notNull(afterFilter, "ExchangeFilterFunction must not be null")__		return (request, next) ->_				filter(request, afterRequest -> afterFilter.filter(afterRequest, next))__	};return,a,composed,filter,function,that,first,applies,this,filter,and,then,applies,the,given,code,after,filter,param,after,filter,the,filter,to,apply,after,this,filter,return,the,composed,filter;default,exchange,filter,function,and,then,exchange,filter,function,after,filter,assert,not,null,after,filter,exchange,filter,function,must,not,be,null,return,request,next,filter,request,after,request,after,filter,filter,after,request,next
