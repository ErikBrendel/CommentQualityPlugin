commented;modifiers;parameterAmount;loc;comment;code
false;private,static;2;3;;private static String initLogPrefix(HandshakeInfo info, String id) {     return info.getLogPrefix() != null ? info.getLogPrefix() : "[" + id + "] ". }
false;protected;0;3;;protected T getDelegate() {     return this.delegate. }
false;public;0;4;;@Override public String getId() {     return this.id. }
false;public;0;4;;@Override public HandshakeInfo getHandshakeInfo() {     return this.handshakeInfo. }
false;public;0;4;;@Override public DataBufferFactory bufferFactory() {     return this.bufferFactory. }
false;public;0;4;;@Override public Map<String, Object> getAttributes() {     return this.attributes. }
false;protected;0;3;;protected String getLogPrefix() {     return this.logPrefix. }
false;public,abstract;0;2;;@Override public abstract Flux<WebSocketMessage> receive().
false;public,abstract;1;2;;@Override public abstract Mono<Void> send(Publisher<WebSocketMessage> messages).
false;public;1;6;;// WebSocketMessage factory methods @Override public WebSocketMessage textMessage(String payload) {     byte[] bytes = payload.getBytes(StandardCharsets.UTF_8).     DataBuffer buffer = bufferFactory().wrap(bytes).     return new WebSocketMessage(WebSocketMessage.Type.TEXT, buffer). }
false;public;1;5;;@Override public WebSocketMessage binaryMessage(Function<DataBufferFactory, DataBuffer> payloadFactory) {     DataBuffer payload = payloadFactory.apply(bufferFactory()).     return new WebSocketMessage(WebSocketMessage.Type.BINARY, payload). }
false;public;1;5;;@Override public WebSocketMessage pingMessage(Function<DataBufferFactory, DataBuffer> payloadFactory) {     DataBuffer payload = payloadFactory.apply(bufferFactory()).     return new WebSocketMessage(WebSocketMessage.Type.PING, payload). }
false;public;1;5;;@Override public WebSocketMessage pongMessage(Function<DataBufferFactory, DataBuffer> payloadFactory) {     DataBuffer payload = payloadFactory.apply(bufferFactory()).     return new WebSocketMessage(WebSocketMessage.Type.PONG, payload). }
false;public;0;4;;@Override public String toString() {     return getClass().getSimpleName() + "[id=" + getId() + ", uri=" + getHandshakeInfo().getUri() + "]". }
