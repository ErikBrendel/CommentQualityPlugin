commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Configure a {@link WebSocketPolicy} to use to initialize  * {@link WebSocketServerFactory}.  * @param webSocketPolicy the WebSocket settings  */ ;/**  * Configure a {@link WebSocketPolicy} to use to initialize  * {@link WebSocketServerFactory}.  * @param webSocketPolicy the WebSocket settings  */ public void setWebSocketPolicy(WebSocketPolicy webSocketPolicy) {     this.webSocketPolicy = webSocketPolicy. }
true;public;0;4;/**  * Return the configured {@link WebSocketPolicy}, if any.  */ ;/**  * Return the configured {@link WebSocketPolicy}, if any.  */ @Nullable public WebSocketPolicy getWebSocketPolicy() {     return this.webSocketPolicy. }
false;public;0;26;;@Override public void start() {     synchronized (this.lifecycleMonitor) {         ServletContext servletContext = this.servletContext.         if (!isRunning() && servletContext != null) {             this.running = true.             try {                 this.factory = (this.webSocketPolicy != null ? new WebSocketServerFactory(servletContext, this.webSocketPolicy) : new WebSocketServerFactory(servletContext)).                 this.factory.setCreator((request, response) -> {                     WebSocketHandlerContainer container = adapterHolder.get().                     String protocol = container.getProtocol().                     if (protocol != null) {                         response.setAcceptedSubProtocol(protocol).                     }                     return container.getAdapter().                 }).                 this.factory.start().             } catch (Throwable ex) {                 throw new IllegalStateException("Unable to start WebSocketServerFactory", ex).             }         }     } }
false;public;0;16;;@Override public void stop() {     synchronized (this.lifecycleMonitor) {         if (isRunning()) {             this.running = false.             if (this.factory != null) {                 try {                     this.factory.stop().                 } catch (Throwable ex) {                     throw new IllegalStateException("Failed to stop WebSocketServerFactory", ex).                 }             }         }     } }
false;public;0;4;;@Override public boolean isRunning() {     return this.running. }
false;public;4;35;;@Override public Mono<Void> upgrade(ServerWebExchange exchange, WebSocketHandler handler, @Nullable String subProtocol, Supplier<HandshakeInfo> handshakeInfoFactory) {     ServerHttpRequest request = exchange.getRequest().     ServerHttpResponse response = exchange.getResponse().     HttpServletRequest servletRequest = getHttpServletRequest(request).     HttpServletResponse servletResponse = getHttpServletResponse(response).     HandshakeInfo handshakeInfo = handshakeInfoFactory.get().     DataBufferFactory factory = response.bufferFactory().     JettyWebSocketHandlerAdapter adapter = new JettyWebSocketHandlerAdapter(handler, session -> new JettyWebSocketSession(session, handshakeInfo, factory)).     startLazily(servletRequest).     Assert.state(this.factory != null, "No WebSocketServerFactory available").     boolean isUpgrade = this.factory.isUpgradeRequest(servletRequest, servletResponse).     Assert.isTrue(isUpgrade, "Not a WebSocket handshake").     try {         adapterHolder.set(new WebSocketHandlerContainer(adapter, subProtocol)).         this.factory.acceptWebSocket(servletRequest, servletResponse).     } catch (IOException ex) {         return Mono.error(ex).     } finally {         adapterHolder.remove().     }     return Mono.empty(). }
false;private;1;4;;private HttpServletRequest getHttpServletRequest(ServerHttpRequest request) {     Assert.isInstanceOf(AbstractServerHttpRequest.class, request).     return ((AbstractServerHttpRequest) request).getNativeRequest(). }
false;private;1;4;;private HttpServletResponse getHttpServletResponse(ServerHttpResponse response) {     Assert.isInstanceOf(AbstractServerHttpResponse.class, response).     return ((AbstractServerHttpResponse) response).getNativeResponse(). }
false;private;1;11;;private void startLazily(HttpServletRequest request) {     if (this.servletContext != null) {         return.     }     synchronized (this.lifecycleMonitor) {         if (this.servletContext == null) {             this.servletContext = request.getServletContext().             start().         }     } }
false;public;0;3;;public JettyWebSocketHandlerAdapter getAdapter() {     return this.adapter. }
false;public;0;4;;@Nullable public String getProtocol() {     return this.protocol. }
