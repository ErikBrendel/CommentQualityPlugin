# id;timestamp;commentText;codeText;commentWords;codeWords
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction);1501161935;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._@param routerFunction the router function to convert_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction) {_		return toWebHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,param,router,function,the,router,function,to,convert,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,return,to,web,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction);1506081789;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._@param routerFunction the router function to convert_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction) {_		return toWebHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,param,router,function,the,router,function,to,convert,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,return,to,web,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction);1520528267;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._@param routerFunction the router function to convert_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction) {_		return toWebHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,param,router,function,the,router,function,to,convert,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,return,to,web,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction);1524865018;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._@param routerFunction the router function to convert_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction) {_		return toWebHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,param,router,function,the,router,function,to,convert,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,return,to,web,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction);1525433784;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._@param routerFunction the router function to convert_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction) {_		return toWebHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,param,router,function,the,router,function,to,convert,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,return,to,web,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction);1526553177;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._@param routerFunction the router function to convert_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction) {_		return toWebHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,param,router,function,the,router,function,to,convert,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,return,to,web,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction);1527601711;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._@param routerFunction the router function to convert_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction) {_		return toWebHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,param,router,function,the,router,function,to,convert,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,return,to,web,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction);1529721864;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._@param routerFunction the router function to convert_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction) {_		return toWebHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,param,router,function,the,router,function,to,convert,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,return,to,web,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction);1530174524;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._@param routerFunction the router function to convert_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction) {_		return toWebHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,param,router,function,the,router,function,to,convert,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,return,to,web,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction);1530174524;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._@param routerFunction the router function to convert_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction) {_		return toWebHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,param,router,function,the,router,function,to,convert,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,return,to,web,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction);1530177818;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._@param routerFunction the router function to convert_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction) {_		return toWebHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,param,router,function,the,router,function,to,convert,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,return,to,web,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction);1530187774;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._@param routerFunction the router function to convert_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction) {_		return toWebHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,param,router,function,the,router,function,to,convert,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,return,to,web,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction);1530793633;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._@param routerFunction the router function to convert_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction) {_		return toWebHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,param,router,function,the,router,function,to,convert,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,return,to,web,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction);1530871268;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._@param routerFunction the router function to convert_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction) {_		return toWebHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,param,router,function,the,router,function,to,convert,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,return,to,web,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction);1530877097;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._@param routerFunction the router function to convert_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction) {_		return toWebHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,param,router,function,the,router,function,to,convert,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,return,to,web,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction);1530880709;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._@param routerFunction the router function to convert_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction) {_		return toWebHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,param,router,function,the,router,function,to,convert,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,return,to,web,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction);1537188605;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._@param routerFunction the router function to convert_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction) {_		return toWebHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,param,router,function,the,router,function,to,convert,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,return,to,web,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction);1538664611;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._@param routerFunction the router function to convert_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction) {_		return toWebHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,param,router,function,the,router,function,to,convert,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,return,to,web,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction);1539866925;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._@param routerFunction the router function to convert_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction) {_		return toWebHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,param,router,function,the,router,function,to,convert,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,return,to,web,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> Builder -> Builder onError(Predicate<? super Throwable> predicate, 				BiFunction<? super  Throwable, ServerRequest, Mono<ServerResponse>> responseProvider)_;1530871268;Filters all exceptions that match the predicate by applying the given response provider_function._<p>For instance, the following example creates a filter that returns a 500 response_status when an {@code IllegalStateException} occurs._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.route()_.GET("/user", this::listUsers)_.onError(e -> e instanceof IllegalStateException,_(e, request) -> ServerResponse.status(HttpStatus.INTERNAL_SERVER_ERROR).build())_.build()__</pre>_@param predicate the type of exception to filter_@param responseProvider a function that creates a response_@return this builder;Builder onError(Predicate<? super Throwable> predicate,_				BiFunction<? super  Throwable, ServerRequest, Mono<ServerResponse>> responseProvider)_;filters,all,exceptions,that,match,the,predicate,by,applying,the,given,response,provider,function,p,for,instance,the,following,example,creates,a,filter,that,returns,a,500,response,status,when,an,code,illegal,state,exception,occurs,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,route,get,user,this,list,users,on,error,e,e,instanceof,illegal,state,exception,e,request,server,response,status,http,status,build,build,pre,param,predicate,the,type,of,exception,to,filter,param,response,provider,a,function,that,creates,a,response,return,this,builder;builder,on,error,predicate,super,throwable,predicate,bi,function,super,throwable,server,request,mono,server,response,response,provider
RouterFunctions -> Builder -> Builder onError(Predicate<? super Throwable> predicate, 				BiFunction<? super  Throwable, ServerRequest, Mono<ServerResponse>> responseProvider)_;1530877097;Filters all exceptions that match the predicate by applying the given response provider_function._<p>For instance, the following example creates a filter that returns a 500 response_status when an {@code IllegalStateException} occurs._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.route()_.GET("/user", this::listUsers)_.onError(e -> e instanceof IllegalStateException,_(e, request) -> ServerResponse.status(HttpStatus.INTERNAL_SERVER_ERROR).build())_.build()__</pre>_@param predicate the type of exception to filter_@param responseProvider a function that creates a response_@return this builder;Builder onError(Predicate<? super Throwable> predicate,_				BiFunction<? super  Throwable, ServerRequest, Mono<ServerResponse>> responseProvider)_;filters,all,exceptions,that,match,the,predicate,by,applying,the,given,response,provider,function,p,for,instance,the,following,example,creates,a,filter,that,returns,a,500,response,status,when,an,code,illegal,state,exception,occurs,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,route,get,user,this,list,users,on,error,e,e,instanceof,illegal,state,exception,e,request,server,response,status,http,status,build,build,pre,param,predicate,the,type,of,exception,to,filter,param,response,provider,a,function,that,creates,a,response,return,this,builder;builder,on,error,predicate,super,throwable,predicate,bi,function,super,throwable,server,request,mono,server,response,response,provider
RouterFunctions -> Builder -> Builder onError(Predicate<? super Throwable> predicate, 				BiFunction<? super  Throwable, ServerRequest, Mono<ServerResponse>> responseProvider)_;1530880709;Filters all exceptions that match the predicate by applying the given response provider_function._<p>For instance, the following example creates a filter that returns a 500 response_status when an {@code IllegalStateException} occurs._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.route()_.GET("/user", this::listUsers)_.onError(e -> e instanceof IllegalStateException,_(e, request) -> ServerResponse.status(HttpStatus.INTERNAL_SERVER_ERROR).build())_.build()__</pre>_@param predicate the type of exception to filter_@param responseProvider a function that creates a response_@return this builder;Builder onError(Predicate<? super Throwable> predicate,_				BiFunction<? super  Throwable, ServerRequest, Mono<ServerResponse>> responseProvider)_;filters,all,exceptions,that,match,the,predicate,by,applying,the,given,response,provider,function,p,for,instance,the,following,example,creates,a,filter,that,returns,a,500,response,status,when,an,code,illegal,state,exception,occurs,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,route,get,user,this,list,users,on,error,e,e,instanceof,illegal,state,exception,e,request,server,response,status,http,status,build,build,pre,param,predicate,the,type,of,exception,to,filter,param,response,provider,a,function,that,creates,a,response,return,this,builder;builder,on,error,predicate,super,throwable,predicate,bi,function,super,throwable,server,request,mono,server,response,response,provider
RouterFunctions -> Builder -> Builder onError(Predicate<? super Throwable> predicate, 				BiFunction<? super  Throwable, ServerRequest, Mono<ServerResponse>> responseProvider)_;1537188605;Filters all exceptions that match the predicate by applying the given response provider_function._<p>For instance, the following example creates a filter that returns a 500 response_status when an {@code IllegalStateException} occurs._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.route()_.GET("/user", this::listUsers)_.onError(e -> e instanceof IllegalStateException,_(e, request) -> ServerResponse.status(HttpStatus.INTERNAL_SERVER_ERROR).build())_.build()__</pre>_@param predicate the type of exception to filter_@param responseProvider a function that creates a response_@return this builder;Builder onError(Predicate<? super Throwable> predicate,_				BiFunction<? super  Throwable, ServerRequest, Mono<ServerResponse>> responseProvider)_;filters,all,exceptions,that,match,the,predicate,by,applying,the,given,response,provider,function,p,for,instance,the,following,example,creates,a,filter,that,returns,a,500,response,status,when,an,code,illegal,state,exception,occurs,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,route,get,user,this,list,users,on,error,e,e,instanceof,illegal,state,exception,e,request,server,response,status,http,status,build,build,pre,param,predicate,the,type,of,exception,to,filter,param,response,provider,a,function,that,creates,a,response,return,this,builder;builder,on,error,predicate,super,throwable,predicate,bi,function,super,throwable,server,request,mono,server,response,response,provider
RouterFunctions -> Builder -> Builder onError(Predicate<? super Throwable> predicate, 				BiFunction<? super  Throwable, ServerRequest, Mono<ServerResponse>> responseProvider)_;1538664611;Filters all exceptions that match the predicate by applying the given response provider_function._<p>For instance, the following example creates a filter that returns a 500 response_status when an {@code IllegalStateException} occurs._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.route()_.GET("/user", this::listUsers)_.onError(e -> e instanceof IllegalStateException,_(e, request) -> ServerResponse.status(HttpStatus.INTERNAL_SERVER_ERROR).build())_.build()__</pre>_@param predicate the type of exception to filter_@param responseProvider a function that creates a response_@return this builder;Builder onError(Predicate<? super Throwable> predicate,_				BiFunction<? super  Throwable, ServerRequest, Mono<ServerResponse>> responseProvider)_;filters,all,exceptions,that,match,the,predicate,by,applying,the,given,response,provider,function,p,for,instance,the,following,example,creates,a,filter,that,returns,a,500,response,status,when,an,code,illegal,state,exception,occurs,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,route,get,user,this,list,users,on,error,e,e,instanceof,illegal,state,exception,e,request,server,response,status,http,status,build,build,pre,param,predicate,the,type,of,exception,to,filter,param,response,provider,a,function,that,creates,a,response,return,this,builder;builder,on,error,predicate,super,throwable,predicate,bi,function,super,throwable,server,request,mono,server,response,response,provider
RouterFunctions -> Builder -> Builder onError(Predicate<? super Throwable> predicate, 				BiFunction<? super  Throwable, ServerRequest, Mono<ServerResponse>> responseProvider)_;1539866925;Filters all exceptions that match the predicate by applying the given response provider_function._<p>For instance, the following example creates a filter that returns a 500 response_status when an {@code IllegalStateException} occurs._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.route()_.GET("/user", this::listUsers)_.onError(e -> e instanceof IllegalStateException,_(e, request) -> ServerResponse.status(HttpStatus.INTERNAL_SERVER_ERROR).build())_.build()__</pre>_@param predicate the type of exception to filter_@param responseProvider a function that creates a response_@return this builder;Builder onError(Predicate<? super Throwable> predicate,_				BiFunction<? super  Throwable, ServerRequest, Mono<ServerResponse>> responseProvider)_;filters,all,exceptions,that,match,the,predicate,by,applying,the,given,response,provider,function,p,for,instance,the,following,example,creates,a,filter,that,returns,a,500,response,status,when,an,code,illegal,state,exception,occurs,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,route,get,user,this,list,users,on,error,e,e,instanceof,illegal,state,exception,e,request,server,response,status,http,status,build,build,pre,param,predicate,the,type,of,exception,to,filter,param,response,provider,a,function,that,creates,a,response,return,this,builder;builder,on,error,predicate,super,throwable,predicate,bi,function,super,throwable,server,request,mono,server,response,response,provider
RouterFunctions -> public static RouterFunction<ServerResponse> resources(String pattern, Resource location);1485986572;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RoutingFunction&lt_Resource&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(String pattern, Resource location) {_		Assert.hasLength(pattern, "'pattern' must not be empty")__		Assert.notNull(location, "'location' must not be null")___		return resources(new PathResourceLookupFunction(pattern, location))__	};route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,routing,function,lt,resource,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,string,pattern,resource,location,assert,has,length,pattern,pattern,must,not,be,empty,assert,not,null,location,location,must,not,be,null,return,resources,new,path,resource,lookup,function,pattern,location
RouterFunctions -> public static RouterFunction<ServerResponse> resources(String pattern, Resource location);1487250745;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RoutingFunction&lt_Resource&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(String pattern, Resource location) {_		Assert.hasLength(pattern, "'pattern' must not be empty")__		Assert.notNull(location, "'location' must not be null")___		return resources(new PathResourceLookupFunction(pattern, location))__	};route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,routing,function,lt,resource,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,string,pattern,resource,location,assert,has,length,pattern,pattern,must,not,be,empty,assert,not,null,location,location,must,not,be,null,return,resources,new,path,resource,lookup,function,pattern,location
RouterFunctions -> public static RouterFunction<ServerResponse> resources(String pattern, Resource location);1487584763;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RoutingFunction&lt_Resource&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(String pattern, Resource location) {_		Assert.hasLength(pattern, "'pattern' must not be empty")__		Assert.notNull(location, "'location' must not be null")___		return resources(new PathResourceLookupFunction(pattern, location))__	};route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,routing,function,lt,resource,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,string,pattern,resource,location,assert,has,length,pattern,pattern,must,not,be,empty,assert,not,null,location,location,must,not,be,null,return,resources,new,path,resource,lookup,function,pattern,location
RouterFunctions -> public static RouterFunction<ServerResponse> resources(String pattern, Resource location);1487687241;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RoutingFunction&lt_Resource&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(String pattern, Resource location) {_		Assert.hasLength(pattern, "'pattern' must not be empty")__		Assert.notNull(location, "'location' must not be null")__		return resources(new PathResourceLookupFunction(pattern, location))__	};route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,routing,function,lt,resource,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,string,pattern,resource,location,assert,has,length,pattern,pattern,must,not,be,empty,assert,not,null,location,location,must,not,be,null,return,resources,new,path,resource,lookup,function,pattern,location
RouterFunctions -> public static RouterFunction<ServerResponse> resources(String pattern, Resource location);1489653648;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RoutingFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(String pattern, Resource location) {_		Assert.hasLength(pattern, "'pattern' must not be empty")__		Assert.notNull(location, "'location' must not be null")__		return resources(new PathResourceLookupFunction(pattern, location))__	};route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,routing,function,lt,server,response,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,string,pattern,resource,location,assert,has,length,pattern,pattern,must,not,be,empty,assert,not,null,location,location,must,not,be,null,return,resources,new,path,resource,lookup,function,pattern,location
RouterFunctions -> public static RouterFunction<ServerResponse> resources(String pattern, Resource location);1489751412;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RoutingFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(String pattern, Resource location) {_		Assert.hasLength(pattern, "'pattern' must not be empty")__		Assert.notNull(location, "'location' must not be null")__		return resources(new PathResourceLookupFunction(pattern, location))__	};route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,routing,function,lt,server,response,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,string,pattern,resource,location,assert,has,length,pattern,pattern,must,not,be,empty,assert,not,null,location,location,must,not,be,null,return,resources,new,path,resource,lookup,function,pattern,location
RouterFunctions -> public static RouterFunction<ServerResponse> resources(String pattern, Resource location);1491557115;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RoutingFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(String pattern, Resource location) {_		Assert.hasLength(pattern, "'pattern' must not be empty")__		Assert.notNull(location, "'location' must not be null")__		return resources(new PathResourceLookupFunction(pattern, location))__	};route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,routing,function,lt,server,response,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,string,pattern,resource,location,assert,has,length,pattern,pattern,must,not,be,empty,assert,not,null,location,location,must,not,be,null,return,resources,new,path,resource,lookup,function,pattern,location
RouterFunctions -> public static RouterFunction<ServerResponse> resources(String pattern, Resource location);1491833276;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RoutingFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(String pattern, Resource location) {_		Assert.hasLength(pattern, "'pattern' must not be empty")__		Assert.notNull(location, "'location' must not be null")__		return resources(new PathResourceLookupFunction(pattern, location))__	};route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,routing,function,lt,server,response,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,string,pattern,resource,location,assert,has,length,pattern,pattern,must,not,be,empty,assert,not,null,location,location,must,not,be,null,return,resources,new,path,resource,lookup,function,pattern,location
RouterFunctions -> public static RouterFunction<ServerResponse> resources(String pattern, Resource location);1491927184;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RoutingFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(String pattern, Resource location) {_		Assert.hasLength(pattern, "'pattern' must not be empty")__		Assert.notNull(location, "'location' must not be null")__		return resources(new PathResourceLookupFunction(pattern, location))__	};route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,routing,function,lt,server,response,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,string,pattern,resource,location,assert,has,length,pattern,pattern,must,not,be,empty,assert,not,null,location,location,must,not,be,null,return,resources,new,path,resource,lookup,function,pattern,location
RouterFunctions -> public static RouterFunction<ServerResponse> resources(String pattern, Resource location);1492090594;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RoutingFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(String pattern, Resource location) {_		Assert.hasLength(pattern, "'pattern' must not be empty")__		Assert.notNull(location, "'location' must not be null")__		return resources(new PathResourceLookupFunction(pattern, location))__	};route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,routing,function,lt,server,response,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,string,pattern,resource,location,assert,has,length,pattern,pattern,must,not,be,empty,assert,not,null,location,location,must,not,be,null,return,resources,new,path,resource,lookup,function,pattern,location
RouterFunctions -> public static RouterFunction<ServerResponse> resources(String pattern, Resource location);1492168700;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RoutingFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(String pattern, Resource location) {_		Assert.hasLength(pattern, "'pattern' must not be empty")__		Assert.notNull(location, "'location' must not be null")__		return resources(new PathResourceLookupFunction(pattern, location))__	};route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,routing,function,lt,server,response,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,string,pattern,resource,location,assert,has,length,pattern,pattern,must,not,be,empty,assert,not,null,location,location,must,not,be,null,return,resources,new,path,resource,lookup,function,pattern,location
RouterFunctions -> public static RouterFunction<ServerResponse> resources(String pattern, Resource location);1492190322;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RoutingFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(String pattern, Resource location) {_		Assert.hasLength(pattern, "'pattern' must not be empty")__		Assert.notNull(location, "'location' must not be null")__		return resources(new PathResourceLookupFunction(pattern, location))__	};route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,routing,function,lt,server,response,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,string,pattern,resource,location,assert,has,length,pattern,pattern,must,not,be,empty,assert,not,null,location,location,must,not,be,null,return,resources,new,path,resource,lookup,function,pattern,location
RouterFunctions -> public static RouterFunction<ServerResponse> resources(String pattern, Resource location);1494495900;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RoutingFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(String pattern, Resource location) {_		Assert.hasLength(pattern, "'pattern' must not be empty")__		Assert.notNull(location, "'location' must not be null")__		return resources(new PathResourceLookupFunction(pattern, location))__	};route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,routing,function,lt,server,response,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,string,pattern,resource,location,assert,has,length,pattern,pattern,must,not,be,empty,assert,not,null,location,location,must,not,be,null,return,resources,new,path,resource,lookup,function,pattern,location
RouterFunctions -> public static RouterFunction<ServerResponse> resources(String pattern, Resource location);1495618935;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RoutingFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(String pattern, Resource location) {_		Assert.hasLength(pattern, "'pattern' must not be empty")__		Assert.notNull(location, "'location' must not be null")__		return resources(new PathResourceLookupFunction(pattern, location))__	};route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,routing,function,lt,server,response,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,string,pattern,resource,location,assert,has,length,pattern,pattern,must,not,be,empty,assert,not,null,location,location,must,not,be,null,return,resources,new,path,resource,lookup,function,pattern,location
RouterFunctions -> public static RouterFunction<ServerResponse> resources(String pattern, Resource location);1495626483;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RoutingFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(String pattern, Resource location) {_		Assert.hasLength(pattern, "'pattern' must not be empty")__		Assert.notNull(location, "'location' must not be null")__		return resources(new PathResourceLookupFunction(pattern, location))__	};route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,routing,function,lt,server,response,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,string,pattern,resource,location,assert,has,length,pattern,pattern,must,not,be,empty,assert,not,null,location,location,must,not,be,null,return,resources,new,path,resource,lookup,function,pattern,location
RouterFunctions -> public static RouterFunction<ServerResponse> resources(String pattern, Resource location);1497359418;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RoutingFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(String pattern, Resource location) {_		Assert.hasLength(pattern, "'pattern' must not be empty")__		Assert.notNull(location, "'location' must not be null")__		return resources(new PathResourceLookupFunction(pattern, location))__	};route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,routing,function,lt,server,response,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,string,pattern,resource,location,assert,has,length,pattern,pattern,must,not,be,empty,assert,not,null,location,location,must,not,be,null,return,resources,new,path,resource,lookup,function,pattern,location
RouterFunctions -> public static RouterFunction<ServerResponse> resources(String pattern, Resource location);1498216330;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RoutingFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(String pattern, Resource location) {_		Assert.hasLength(pattern, "'pattern' must not be empty")__		Assert.notNull(location, "'location' must not be null")__		return resources(new PathResourceLookupFunction(pattern, location))__	};route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,routing,function,lt,server,response,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,string,pattern,resource,location,assert,has,length,pattern,pattern,must,not,be,empty,assert,not,null,location,location,must,not,be,null,return,resources,new,path,resource,lookup,function,pattern,location
RouterFunctions -> public static RouterFunction<ServerResponse> resources(String pattern, Resource location);1501161935;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RoutingFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(String pattern, Resource location) {_		Assert.hasLength(pattern, "'pattern' must not be empty")__		Assert.notNull(location, "'location' must not be null")__		return resources(new PathResourceLookupFunction(pattern, location))__	};route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,routing,function,lt,server,response,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,string,pattern,resource,location,assert,has,length,pattern,pattern,must,not,be,empty,assert,not,null,location,location,must,not,be,null,return,resources,new,path,resource,lookup,function,pattern,location
RouterFunctions -> public static RouterFunction<ServerResponse> resources(String pattern, Resource location);1506081789;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RoutingFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(String pattern, Resource location) {_		Assert.hasLength(pattern, "'pattern' must not be empty")__		Assert.notNull(location, "'location' must not be null")__		return resources(new PathResourceLookupFunction(pattern, location))__	};route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,routing,function,lt,server,response,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,string,pattern,resource,location,assert,has,length,pattern,pattern,must,not,be,empty,assert,not,null,location,location,must,not,be,null,return,resources,new,path,resource,lookup,function,pattern,location
RouterFunctions -> public static RouterFunction<ServerResponse> resources(String pattern, Resource location);1520528267;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RoutingFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(String pattern, Resource location) {_		Assert.hasLength(pattern, "'pattern' must not be empty")__		Assert.notNull(location, "'location' must not be null")__		return resources(new PathResourceLookupFunction(pattern, location))__	};route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,routing,function,lt,server,response,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,string,pattern,resource,location,assert,has,length,pattern,pattern,must,not,be,empty,assert,not,null,location,location,must,not,be,null,return,resources,new,path,resource,lookup,function,pattern,location
RouterFunctions -> public static RouterFunction<ServerResponse> resources(String pattern, Resource location);1524865018;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RoutingFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(String pattern, Resource location) {_		return resources(new PathResourceLookupFunction(pattern, location))__	};route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,routing,function,lt,server,response,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,string,pattern,resource,location,return,resources,new,path,resource,lookup,function,pattern,location
RouterFunctions -> public static RouterFunction<ServerResponse> resources(String pattern, Resource location);1525433784;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RouterFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return a router function that routes to resources_@see #resourceLookupFunction(String, Resource);public static RouterFunction<ServerResponse> resources(String pattern, Resource location) {_		return resources(resourceLookupFunction(pattern, location))__	};route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,router,function,lt,server,response,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,a,router,function,that,routes,to,resources,see,resource,lookup,function,string,resource;public,static,router,function,server,response,resources,string,pattern,resource,location,return,resources,resource,lookup,function,pattern,location
RouterFunctions -> public static RouterFunction<ServerResponse> resources(String pattern, Resource location);1526553177;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RouterFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return a router function that routes to resources_@see #resourceLookupFunction(String, Resource);public static RouterFunction<ServerResponse> resources(String pattern, Resource location) {_		return resources(resourceLookupFunction(pattern, location))__	};route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,router,function,lt,server,response,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,a,router,function,that,routes,to,resources,see,resource,lookup,function,string,resource;public,static,router,function,server,response,resources,string,pattern,resource,location,return,resources,resource,lookup,function,pattern,location
RouterFunctions -> public static RouterFunction<ServerResponse> resources(String pattern, Resource location);1527601711;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RouterFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return a router function that routes to resources_@see #resourceLookupFunction(String, Resource);public static RouterFunction<ServerResponse> resources(String pattern, Resource location) {_		return resources(resourceLookupFunction(pattern, location))__	};route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,router,function,lt,server,response,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,a,router,function,that,routes,to,resources,see,resource,lookup,function,string,resource;public,static,router,function,server,response,resources,string,pattern,resource,location,return,resources,resource,lookup,function,pattern,location
RouterFunctions -> public static RouterFunction<ServerResponse> resources(String pattern, Resource location);1529721864;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RouterFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return a router function that routes to resources_@see #resourceLookupFunction(String, Resource);public static RouterFunction<ServerResponse> resources(String pattern, Resource location) {_		return resources(resourceLookupFunction(pattern, location))__	};route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,router,function,lt,server,response,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,a,router,function,that,routes,to,resources,see,resource,lookup,function,string,resource;public,static,router,function,server,response,resources,string,pattern,resource,location,return,resources,resource,lookup,function,pattern,location
RouterFunctions -> public static RouterFunction<ServerResponse> resources(String pattern, Resource location);1530174524;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RouterFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return a router function that routes to resources_@see #resourceLookupFunction(String, Resource);public static RouterFunction<ServerResponse> resources(String pattern, Resource location) {_		return resources(resourceLookupFunction(pattern, location))__	};route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,router,function,lt,server,response,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,a,router,function,that,routes,to,resources,see,resource,lookup,function,string,resource;public,static,router,function,server,response,resources,string,pattern,resource,location,return,resources,resource,lookup,function,pattern,location
RouterFunctions -> public static RouterFunction<ServerResponse> resources(String pattern, Resource location);1530174524;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RouterFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return a router function that routes to resources_@see #resourceLookupFunction(String, Resource);public static RouterFunction<ServerResponse> resources(String pattern, Resource location) {_		return resources(resourceLookupFunction(pattern, location))__	};route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,router,function,lt,server,response,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,a,router,function,that,routes,to,resources,see,resource,lookup,function,string,resource;public,static,router,function,server,response,resources,string,pattern,resource,location,return,resources,resource,lookup,function,pattern,location
RouterFunctions -> public static RouterFunction<ServerResponse> resources(String pattern, Resource location);1530177818;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RouterFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return a router function that routes to resources_@see #resourceLookupFunction(String, Resource);public static RouterFunction<ServerResponse> resources(String pattern, Resource location) {_		return resources(resourceLookupFunction(pattern, location))__	};route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,router,function,lt,server,response,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,a,router,function,that,routes,to,resources,see,resource,lookup,function,string,resource;public,static,router,function,server,response,resources,string,pattern,resource,location,return,resources,resource,lookup,function,pattern,location
RouterFunctions -> public static RouterFunction<ServerResponse> resources(String pattern, Resource location);1530187774;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RouterFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return a router function that routes to resources_@see #resourceLookupFunction(String, Resource);public static RouterFunction<ServerResponse> resources(String pattern, Resource location) {_		return resources(resourceLookupFunction(pattern, location))__	};route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,router,function,lt,server,response,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,a,router,function,that,routes,to,resources,see,resource,lookup,function,string,resource;public,static,router,function,server,response,resources,string,pattern,resource,location,return,resources,resource,lookup,function,pattern,location
RouterFunctions -> public static RouterFunction<ServerResponse> resources(String pattern, Resource location);1530793633;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RouterFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return a router function that routes to resources_@see #resourceLookupFunction(String, Resource);public static RouterFunction<ServerResponse> resources(String pattern, Resource location) {_		return resources(resourceLookupFunction(pattern, location))__	};route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,router,function,lt,server,response,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,a,router,function,that,routes,to,resources,see,resource,lookup,function,string,resource;public,static,router,function,server,response,resources,string,pattern,resource,location,return,resources,resource,lookup,function,pattern,location
RouterFunctions -> public static RouterFunction<ServerResponse> resources(String pattern, Resource location);1530871268;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RouterFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return a router function that routes to resources_@see #resourceLookupFunction(String, Resource);public static RouterFunction<ServerResponse> resources(String pattern, Resource location) {_		return resources(resourceLookupFunction(pattern, location))__	};route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,router,function,lt,server,response,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,a,router,function,that,routes,to,resources,see,resource,lookup,function,string,resource;public,static,router,function,server,response,resources,string,pattern,resource,location,return,resources,resource,lookup,function,pattern,location
RouterFunctions -> public static RouterFunction<ServerResponse> resources(String pattern, Resource location);1530877097;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RouterFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return a router function that routes to resources_@see #resourceLookupFunction(String, Resource);public static RouterFunction<ServerResponse> resources(String pattern, Resource location) {_		return resources(resourceLookupFunction(pattern, location))__	};route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,router,function,lt,server,response,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,a,router,function,that,routes,to,resources,see,resource,lookup,function,string,resource;public,static,router,function,server,response,resources,string,pattern,resource,location,return,resources,resource,lookup,function,pattern,location
RouterFunctions -> public static RouterFunction<ServerResponse> resources(String pattern, Resource location);1530880709;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RouterFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return a router function that routes to resources_@see #resourceLookupFunction(String, Resource);public static RouterFunction<ServerResponse> resources(String pattern, Resource location) {_		return resources(resourceLookupFunction(pattern, location))__	};route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,router,function,lt,server,response,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,a,router,function,that,routes,to,resources,see,resource,lookup,function,string,resource;public,static,router,function,server,response,resources,string,pattern,resource,location,return,resources,resource,lookup,function,pattern,location
RouterFunctions -> public static RouterFunction<ServerResponse> resources(String pattern, Resource location);1537188605;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RouterFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return a router function that routes to resources_@see #resourceLookupFunction(String, Resource);public static RouterFunction<ServerResponse> resources(String pattern, Resource location) {_		return resources(resourceLookupFunction(pattern, location))__	};route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,router,function,lt,server,response,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,a,router,function,that,routes,to,resources,see,resource,lookup,function,string,resource;public,static,router,function,server,response,resources,string,pattern,resource,location,return,resources,resource,lookup,function,pattern,location
RouterFunctions -> public static RouterFunction<ServerResponse> resources(String pattern, Resource location);1538664611;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RouterFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return a router function that routes to resources_@see #resourceLookupFunction(String, Resource);public static RouterFunction<ServerResponse> resources(String pattern, Resource location) {_		return resources(resourceLookupFunction(pattern, location))__	};route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,router,function,lt,server,response,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,a,router,function,that,routes,to,resources,see,resource,lookup,function,string,resource;public,static,router,function,server,response,resources,string,pattern,resource,location,return,resources,resource,lookup,function,pattern,location
RouterFunctions -> public static RouterFunction<ServerResponse> resources(String pattern, Resource location);1539866925;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RouterFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return a router function that routes to resources_@see #resourceLookupFunction(String, Resource);public static RouterFunction<ServerResponse> resources(String pattern, Resource location) {_		return resources(resourceLookupFunction(pattern, location))__	};route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,router,function,lt,server,response,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,a,router,function,that,routes,to,resources,see,resource,lookup,function,string,resource;public,static,router,function,server,response,resources,string,pattern,resource,location,return,resources,resource,lookup,function,pattern,location
RouterFunctions -> public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction);1485986572;Convert the given {@code RouterFunction} into a {@code HandlerMapping}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned {@code HandlerMapping} can be run in a_{@link org.springframework.web.reactive.DispatcherHandler}._@param routerFunction the router function to convert_@return an handler mapping that maps HTTP request to a handler using the given router function_@see HandlerFunctionAdapter_@see ServerResponseResultHandler;public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction) {_		return toHandlerMapping(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,code,router,function,into,a,code,handler,mapping,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,code,handler,mapping,can,be,run,in,a,link,org,springframework,web,reactive,dispatcher,handler,param,router,function,the,router,function,to,convert,return,an,handler,mapping,that,maps,http,request,to,a,handler,using,the,given,router,function,see,handler,function,adapter,see,server,response,result,handler;public,static,handler,mapping,to,handler,mapping,router,function,router,function,return,to,handler,mapping,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction);1487250745;Convert the given {@code RouterFunction} into a {@code HandlerMapping}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned {@code HandlerMapping} can be run in a_{@link org.springframework.web.reactive.DispatcherHandler}._@param routerFunction the router function to convert_@return an handler mapping that maps HTTP request to a handler using the given router function_@see HandlerFunctionAdapter_@see ServerResponseResultHandler;public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction) {_		return toHandlerMapping(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,code,router,function,into,a,code,handler,mapping,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,code,handler,mapping,can,be,run,in,a,link,org,springframework,web,reactive,dispatcher,handler,param,router,function,the,router,function,to,convert,return,an,handler,mapping,that,maps,http,request,to,a,handler,using,the,given,router,function,see,handler,function,adapter,see,server,response,result,handler;public,static,handler,mapping,to,handler,mapping,router,function,router,function,return,to,handler,mapping,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction);1487584763;Convert the given {@code RouterFunction} into a {@code HandlerMapping}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned {@code HandlerMapping} can be run in a_{@link org.springframework.web.reactive.DispatcherHandler}._@param routerFunction the router function to convert_@return an handler mapping that maps HTTP request to a handler using the given router function_@see HandlerFunctionAdapter_@see ServerResponseResultHandler;public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction) {_		return toHandlerMapping(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,code,router,function,into,a,code,handler,mapping,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,code,handler,mapping,can,be,run,in,a,link,org,springframework,web,reactive,dispatcher,handler,param,router,function,the,router,function,to,convert,return,an,handler,mapping,that,maps,http,request,to,a,handler,using,the,given,router,function,see,handler,function,adapter,see,server,response,result,handler;public,static,handler,mapping,to,handler,mapping,router,function,router,function,return,to,handler,mapping,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction);1487687241;Convert the given {@code RouterFunction} into a {@code HandlerMapping}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned {@code HandlerMapping} can be run in a_{@link org.springframework.web.reactive.DispatcherHandler}._@param routerFunction the router function to convert_@return an handler mapping that maps HTTP request to a handler using the given router function_@see HandlerFunctionAdapter_@see ServerResponseResultHandler;public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction) {_		return toHandlerMapping(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,code,router,function,into,a,code,handler,mapping,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,code,handler,mapping,can,be,run,in,a,link,org,springframework,web,reactive,dispatcher,handler,param,router,function,the,router,function,to,convert,return,an,handler,mapping,that,maps,http,request,to,a,handler,using,the,given,router,function,see,handler,function,adapter,see,server,response,result,handler;public,static,handler,mapping,to,handler,mapping,router,function,router,function,return,to,handler,mapping,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction);1489653648;Convert the given {@code RouterFunction} into a {@code HandlerMapping}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned {@code HandlerMapping} can be run in a_{@link org.springframework.web.reactive.DispatcherHandler}._@param routerFunction the router function to convert_@return an handler mapping that maps HTTP request to a handler using the given router function_@see HandlerFunctionAdapter_@see ServerResponseResultHandler;public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction) {_		return toHandlerMapping(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,code,router,function,into,a,code,handler,mapping,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,code,handler,mapping,can,be,run,in,a,link,org,springframework,web,reactive,dispatcher,handler,param,router,function,the,router,function,to,convert,return,an,handler,mapping,that,maps,http,request,to,a,handler,using,the,given,router,function,see,handler,function,adapter,see,server,response,result,handler;public,static,handler,mapping,to,handler,mapping,router,function,router,function,return,to,handler,mapping,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction);1489751412;Convert the given {@code RouterFunction} into a {@code HandlerMapping}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned {@code HandlerMapping} can be run in a_{@link org.springframework.web.reactive.DispatcherHandler}._@param routerFunction the router function to convert_@return an handler mapping that maps HTTP request to a handler using the given router function_@see HandlerFunctionAdapter_@see ServerResponseResultHandler;public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction) {_		return toHandlerMapping(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,code,router,function,into,a,code,handler,mapping,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,code,handler,mapping,can,be,run,in,a,link,org,springframework,web,reactive,dispatcher,handler,param,router,function,the,router,function,to,convert,return,an,handler,mapping,that,maps,http,request,to,a,handler,using,the,given,router,function,see,handler,function,adapter,see,server,response,result,handler;public,static,handler,mapping,to,handler,mapping,router,function,router,function,return,to,handler,mapping,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction);1491557115;Convert the given {@code RouterFunction} into a {@code HandlerMapping}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned {@code HandlerMapping} can be run in a_{@link org.springframework.web.reactive.DispatcherHandler}._@param routerFunction the router function to convert_@return an handler mapping that maps HTTP request to a handler using the given router function_@see HandlerFunctionAdapter_@see ServerResponseResultHandler;public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction) {_		return toHandlerMapping(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,code,router,function,into,a,code,handler,mapping,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,code,handler,mapping,can,be,run,in,a,link,org,springframework,web,reactive,dispatcher,handler,param,router,function,the,router,function,to,convert,return,an,handler,mapping,that,maps,http,request,to,a,handler,using,the,given,router,function,see,handler,function,adapter,see,server,response,result,handler;public,static,handler,mapping,to,handler,mapping,router,function,router,function,return,to,handler,mapping,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction);1491833276;Convert the given {@code RouterFunction} into a {@code HandlerMapping}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned {@code HandlerMapping} can be run in a_{@link org.springframework.web.reactive.DispatcherHandler}._@param routerFunction the router function to convert_@return an handler mapping that maps HTTP request to a handler using the given router function_@see HandlerFunctionAdapter_@see ServerResponseResultHandler;public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction) {_		return toHandlerMapping(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,code,router,function,into,a,code,handler,mapping,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,code,handler,mapping,can,be,run,in,a,link,org,springframework,web,reactive,dispatcher,handler,param,router,function,the,router,function,to,convert,return,an,handler,mapping,that,maps,http,request,to,a,handler,using,the,given,router,function,see,handler,function,adapter,see,server,response,result,handler;public,static,handler,mapping,to,handler,mapping,router,function,router,function,return,to,handler,mapping,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction);1491927184;Convert the given {@code RouterFunction} into a {@code HandlerMapping}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned {@code HandlerMapping} can be run in a_{@link org.springframework.web.reactive.DispatcherHandler}._@param routerFunction the router function to convert_@return an handler mapping that maps HTTP request to a handler using the given router function_@see HandlerFunctionAdapter_@see ServerResponseResultHandler;public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction) {_		return toHandlerMapping(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,code,router,function,into,a,code,handler,mapping,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,code,handler,mapping,can,be,run,in,a,link,org,springframework,web,reactive,dispatcher,handler,param,router,function,the,router,function,to,convert,return,an,handler,mapping,that,maps,http,request,to,a,handler,using,the,given,router,function,see,handler,function,adapter,see,server,response,result,handler;public,static,handler,mapping,to,handler,mapping,router,function,router,function,return,to,handler,mapping,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction);1492090594;Convert the given {@code RouterFunction} into a {@code HandlerMapping}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned {@code HandlerMapping} can be run in a_{@link org.springframework.web.reactive.DispatcherHandler}._@param routerFunction the router function to convert_@return an handler mapping that maps HTTP request to a handler using the given router function_@see HandlerFunctionAdapter_@see ServerResponseResultHandler;public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction) {_		return toHandlerMapping(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,code,router,function,into,a,code,handler,mapping,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,code,handler,mapping,can,be,run,in,a,link,org,springframework,web,reactive,dispatcher,handler,param,router,function,the,router,function,to,convert,return,an,handler,mapping,that,maps,http,request,to,a,handler,using,the,given,router,function,see,handler,function,adapter,see,server,response,result,handler;public,static,handler,mapping,to,handler,mapping,router,function,router,function,return,to,handler,mapping,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction);1492168700;Convert the given {@code RouterFunction} into a {@code HandlerMapping}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned {@code HandlerMapping} can be run in a_{@link org.springframework.web.reactive.DispatcherHandler}._@param routerFunction the router function to convert_@return an handler mapping that maps HTTP request to a handler using the given router function_@see HandlerFunctionAdapter_@see ServerResponseResultHandler;public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction) {_		return toHandlerMapping(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,code,router,function,into,a,code,handler,mapping,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,code,handler,mapping,can,be,run,in,a,link,org,springframework,web,reactive,dispatcher,handler,param,router,function,the,router,function,to,convert,return,an,handler,mapping,that,maps,http,request,to,a,handler,using,the,given,router,function,see,handler,function,adapter,see,server,response,result,handler;public,static,handler,mapping,to,handler,mapping,router,function,router,function,return,to,handler,mapping,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction);1492190322;Convert the given {@code RouterFunction} into a {@code HandlerMapping}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned {@code HandlerMapping} can be run in a_{@link org.springframework.web.reactive.DispatcherHandler}._@param routerFunction the router function to convert_@return an handler mapping that maps HTTP request to a handler using the given router function_@see HandlerFunctionAdapter_@see ServerResponseResultHandler;public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction) {_		return toHandlerMapping(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,code,router,function,into,a,code,handler,mapping,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,code,handler,mapping,can,be,run,in,a,link,org,springframework,web,reactive,dispatcher,handler,param,router,function,the,router,function,to,convert,return,an,handler,mapping,that,maps,http,request,to,a,handler,using,the,given,router,function,see,handler,function,adapter,see,server,response,result,handler;public,static,handler,mapping,to,handler,mapping,router,function,router,function,return,to,handler,mapping,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction);1494495900;Convert the given {@code RouterFunction} into a {@code HandlerMapping}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned {@code HandlerMapping} can be run in a_{@link org.springframework.web.reactive.DispatcherHandler}._@param routerFunction the router function to convert_@return an handler mapping that maps HTTP request to a handler using the given router function_@see HandlerFunctionAdapter_@see ServerResponseResultHandler;public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction) {_		return toHandlerMapping(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,code,router,function,into,a,code,handler,mapping,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,code,handler,mapping,can,be,run,in,a,link,org,springframework,web,reactive,dispatcher,handler,param,router,function,the,router,function,to,convert,return,an,handler,mapping,that,maps,http,request,to,a,handler,using,the,given,router,function,see,handler,function,adapter,see,server,response,result,handler;public,static,handler,mapping,to,handler,mapping,router,function,router,function,return,to,handler,mapping,router,function,handler,strategies,with,defaults
RouterFunctions -> Builder -> Builder nestPath(String pattern, Supplier<RouterFunction<ServerResponse>> routerFunctionSupplier)_;1530177818;Route to the supplied router function if the given path prefix pattern applies. This method_can be used to create <strong>nested routes</strong>, where a group of routes share a_common path (prefix)._<p>For instance, the following example creates a nested route with a "/user" path_predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.builder()_.nestPath("/user", () ->_RouterFunctions.builder()_.routeGet(this::listUsers)_.routePost(this::createUser)__.build()___.build()__</pre>_@param pattern the pattern to match to_@param routerFunctionSupplier supplier for the nested router function to delegate to if_the pattern matches_@return this builder;Builder nestPath(String pattern, Supplier<RouterFunction<ServerResponse>> routerFunctionSupplier)_;route,to,the,supplied,router,function,if,the,given,path,prefix,pattern,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,p,for,instance,the,following,example,creates,a,nested,route,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,nested,route,router,functions,builder,nest,path,user,router,functions,builder,route,get,this,list,users,route,post,this,create,user,build,build,pre,param,pattern,the,pattern,to,match,to,param,router,function,supplier,supplier,for,the,nested,router,function,to,delegate,to,if,the,pattern,matches,return,this,builder;builder,nest,path,string,pattern,supplier,router,function,server,response,router,function,supplier
RouterFunctions -> Builder -> Builder nestPath(String pattern, Supplier<RouterFunction<ServerResponse>> routerFunctionSupplier)_;1530187774;Route to the supplied router function if the given path prefix pattern applies. This method_can be used to create <strong>nested routes</strong>, where a group of routes share a_common path (prefix)._<p>For instance, the following example creates a nested route with a "/user" path_predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.builder()_.nestPath("/user", () ->_RouterFunctions.builder()_.routeGet(this::listUsers)_.routePost(this::createUser)__.build()___.build()__</pre>_@param pattern the pattern to match to_@param routerFunctionSupplier supplier for the nested router function to delegate to if_the pattern matches_@return this builder;Builder nestPath(String pattern, Supplier<RouterFunction<ServerResponse>> routerFunctionSupplier)_;route,to,the,supplied,router,function,if,the,given,path,prefix,pattern,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,p,for,instance,the,following,example,creates,a,nested,route,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,nested,route,router,functions,builder,nest,path,user,router,functions,builder,route,get,this,list,users,route,post,this,create,user,build,build,pre,param,pattern,the,pattern,to,match,to,param,router,function,supplier,supplier,for,the,nested,router,function,to,delegate,to,if,the,pattern,matches,return,this,builder;builder,nest,path,string,pattern,supplier,router,function,server,response,router,function,supplier
RouterFunctions -> Builder -> Builder nestPath(String pattern, Supplier<RouterFunction<ServerResponse>> routerFunctionSupplier)_;1530793633;Route to the supplied router function if the given path prefix pattern applies. This method_can be used to create <strong>nested routes</strong>, where a group of routes share a_common path (prefix)._<p>For instance, the following example creates a nested route with a "/user" path_predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.builder()_.nestPath("/user", () ->_RouterFunctions.builder()_.routeGet(this::listUsers)_.routePost(this::createUser)__.build()___.build()__</pre>_@param pattern the pattern to match to_@param routerFunctionSupplier supplier for the nested router function to delegate to if_the pattern matches_@return this builder;Builder nestPath(String pattern, Supplier<RouterFunction<ServerResponse>> routerFunctionSupplier)_;route,to,the,supplied,router,function,if,the,given,path,prefix,pattern,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,p,for,instance,the,following,example,creates,a,nested,route,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,nested,route,router,functions,builder,nest,path,user,router,functions,builder,route,get,this,list,users,route,post,this,create,user,build,build,pre,param,pattern,the,pattern,to,match,to,param,router,function,supplier,supplier,for,the,nested,router,function,to,delegate,to,if,the,pattern,matches,return,this,builder;builder,nest,path,string,pattern,supplier,router,function,server,response,router,function,supplier
RouterFunctions -> Builder -> Builder after(BiFunction<ServerRequest, ServerResponse, ServerResponse> responseProcessor)_;1530871268;Filter the response object for all routes created by this builder with the given response_processing function. Filters are typically used to address cross-cutting concerns, such_as logging, security, etc._<p>For instance, the following example creates a filter that logs the response after_the handler function executes._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.route()_.GET("/user", this::listUsers)_.after((request, response) -> {_log(response)__return response___.build()__</pre>_@param responseProcessor a function that transforms the response_@return this builder;Builder after(BiFunction<ServerRequest, ServerResponse, ServerResponse> responseProcessor)_;filter,the,response,object,for,all,routes,created,by,this,builder,with,the,given,response,processing,function,filters,are,typically,used,to,address,cross,cutting,concerns,such,as,logging,security,etc,p,for,instance,the,following,example,creates,a,filter,that,logs,the,response,after,the,handler,function,executes,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,route,get,user,this,list,users,after,request,response,log,response,return,response,build,pre,param,response,processor,a,function,that,transforms,the,response,return,this,builder;builder,after,bi,function,server,request,server,response,server,response,response,processor
RouterFunctions -> Builder -> Builder after(BiFunction<ServerRequest, ServerResponse, ServerResponse> responseProcessor)_;1530877097;Filter the response object for all routes created by this builder with the given response_processing function. Filters are typically used to address cross-cutting concerns, such_as logging, security, etc._<p>For instance, the following example creates a filter that logs the response after_the handler function executes._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.route()_.GET("/user", this::listUsers)_.after((request, response) -> {_log(response)__return response___.build()__</pre>_@param responseProcessor a function that transforms the response_@return this builder;Builder after(BiFunction<ServerRequest, ServerResponse, ServerResponse> responseProcessor)_;filter,the,response,object,for,all,routes,created,by,this,builder,with,the,given,response,processing,function,filters,are,typically,used,to,address,cross,cutting,concerns,such,as,logging,security,etc,p,for,instance,the,following,example,creates,a,filter,that,logs,the,response,after,the,handler,function,executes,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,route,get,user,this,list,users,after,request,response,log,response,return,response,build,pre,param,response,processor,a,function,that,transforms,the,response,return,this,builder;builder,after,bi,function,server,request,server,response,server,response,response,processor
RouterFunctions -> Builder -> Builder after(BiFunction<ServerRequest, ServerResponse, ServerResponse> responseProcessor)_;1530880709;Filter the response object for all routes created by this builder with the given response_processing function. Filters are typically used to address cross-cutting concerns, such_as logging, security, etc._<p>For instance, the following example creates a filter that logs the response after_the handler function executes._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.route()_.GET("/user", this::listUsers)_.after((request, response) -> {_log(response)__return response___.build()__</pre>_@param responseProcessor a function that transforms the response_@return this builder;Builder after(BiFunction<ServerRequest, ServerResponse, ServerResponse> responseProcessor)_;filter,the,response,object,for,all,routes,created,by,this,builder,with,the,given,response,processing,function,filters,are,typically,used,to,address,cross,cutting,concerns,such,as,logging,security,etc,p,for,instance,the,following,example,creates,a,filter,that,logs,the,response,after,the,handler,function,executes,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,route,get,user,this,list,users,after,request,response,log,response,return,response,build,pre,param,response,processor,a,function,that,transforms,the,response,return,this,builder;builder,after,bi,function,server,request,server,response,server,response,response,processor
RouterFunctions -> Builder -> Builder after(BiFunction<ServerRequest, ServerResponse, ServerResponse> responseProcessor)_;1537188605;Filter the response object for all routes created by this builder with the given response_processing function. Filters are typically used to address cross-cutting concerns, such_as logging, security, etc._<p>For instance, the following example creates a filter that logs the response after_the handler function executes._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.route()_.GET("/user", this::listUsers)_.after((request, response) -> {_log(response)__return response___.build()__</pre>_@param responseProcessor a function that transforms the response_@return this builder;Builder after(BiFunction<ServerRequest, ServerResponse, ServerResponse> responseProcessor)_;filter,the,response,object,for,all,routes,created,by,this,builder,with,the,given,response,processing,function,filters,are,typically,used,to,address,cross,cutting,concerns,such,as,logging,security,etc,p,for,instance,the,following,example,creates,a,filter,that,logs,the,response,after,the,handler,function,executes,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,route,get,user,this,list,users,after,request,response,log,response,return,response,build,pre,param,response,processor,a,function,that,transforms,the,response,return,this,builder;builder,after,bi,function,server,request,server,response,server,response,response,processor
RouterFunctions -> Builder -> Builder after(BiFunction<ServerRequest, ServerResponse, ServerResponse> responseProcessor)_;1538664611;Filter the response object for all routes created by this builder with the given response_processing function. Filters are typically used to address cross-cutting concerns, such_as logging, security, etc._<p>For instance, the following example creates a filter that logs the response after_the handler function executes._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.route()_.GET("/user", this::listUsers)_.after((request, response) -> {_log(response)__return response___.build()__</pre>_@param responseProcessor a function that transforms the response_@return this builder;Builder after(BiFunction<ServerRequest, ServerResponse, ServerResponse> responseProcessor)_;filter,the,response,object,for,all,routes,created,by,this,builder,with,the,given,response,processing,function,filters,are,typically,used,to,address,cross,cutting,concerns,such,as,logging,security,etc,p,for,instance,the,following,example,creates,a,filter,that,logs,the,response,after,the,handler,function,executes,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,route,get,user,this,list,users,after,request,response,log,response,return,response,build,pre,param,response,processor,a,function,that,transforms,the,response,return,this,builder;builder,after,bi,function,server,request,server,response,server,response,response,processor
RouterFunctions -> Builder -> Builder after(BiFunction<ServerRequest, ServerResponse, ServerResponse> responseProcessor)_;1539866925;Filter the response object for all routes created by this builder with the given response_processing function. Filters are typically used to address cross-cutting concerns, such_as logging, security, etc._<p>For instance, the following example creates a filter that logs the response after_the handler function executes._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.route()_.GET("/user", this::listUsers)_.after((request, response) -> {_log(response)__return response___.build()__</pre>_@param responseProcessor a function that transforms the response_@return this builder;Builder after(BiFunction<ServerRequest, ServerResponse, ServerResponse> responseProcessor)_;filter,the,response,object,for,all,routes,created,by,this,builder,with,the,given,response,processing,function,filters,are,typically,used,to,address,cross,cutting,concerns,such,as,logging,security,etc,p,for,instance,the,following,example,creates,a,filter,that,logs,the,response,after,the,handler,function,executes,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,route,get,user,this,list,users,after,request,response,log,response,return,response,build,pre,param,response,processor,a,function,that,transforms,the,response,return,this,builder;builder,after,bi,function,server,request,server,response,server,response,response,processor
RouterFunctions -> Builder -> Builder nest(RequestPredicate predicate, Consumer<Builder> builderConsumer)_;1530177818;Route to a built router function if the given request predicate applies._This method can be used to create <strong>nested routes</strong>, where a group of routes_share a common path (prefix), header, or other request predicate._<p>For instance, the following example creates a nested route with a "/user" path_predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.builder()_.nest(RequestPredicates.path("/user"), builder ->_builder.routeGet(this::listUsers)_.routePost(this::createUser)___.build()__</pre>_@param predicate the predicate to test_@param builderConsumer consumer for a {@code Builder} that provides the nested router_function_@return this builder_@see RequestPredicates;Builder nest(RequestPredicate predicate, Consumer<Builder> builderConsumer)_;route,to,a,built,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,creates,a,nested,route,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,nested,route,router,functions,builder,nest,request,predicates,path,user,builder,builder,route,get,this,list,users,route,post,this,create,user,build,pre,param,predicate,the,predicate,to,test,param,builder,consumer,consumer,for,a,code,builder,that,provides,the,nested,router,function,return,this,builder,see,request,predicates;builder,nest,request,predicate,predicate,consumer,builder,builder,consumer
RouterFunctions -> Builder -> Builder nest(RequestPredicate predicate, Consumer<Builder> builderConsumer)_;1530187774;Route to a built router function if the given request predicate applies._This method can be used to create <strong>nested routes</strong>, where a group of routes_share a common path (prefix), header, or other request predicate._<p>For instance, the following example creates a nested route with a "/user" path_predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.builder()_.nest(RequestPredicates.path("/user"), builder ->_builder.routeGet(this::listUsers)_.routePost(this::createUser)___.build()__</pre>_@param predicate the predicate to test_@param builderConsumer consumer for a {@code Builder} that provides the nested router_function_@return this builder_@see RequestPredicates;Builder nest(RequestPredicate predicate, Consumer<Builder> builderConsumer)_;route,to,a,built,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,creates,a,nested,route,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,nested,route,router,functions,builder,nest,request,predicates,path,user,builder,builder,route,get,this,list,users,route,post,this,create,user,build,pre,param,predicate,the,predicate,to,test,param,builder,consumer,consumer,for,a,code,builder,that,provides,the,nested,router,function,return,this,builder,see,request,predicates;builder,nest,request,predicate,predicate,consumer,builder,builder,consumer
RouterFunctions -> Builder -> Builder nest(RequestPredicate predicate, Consumer<Builder> builderConsumer)_;1530793633;Route to a built router function if the given request predicate applies._This method can be used to create <strong>nested routes</strong>, where a group of routes_share a common path (prefix), header, or other request predicate._<p>For instance, the following example creates a nested route with a "/user" path_predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.builder()_.nest(RequestPredicates.path("/user"), builder ->_builder.routeGet(this::listUsers)_.routePost(this::createUser)___.build()__</pre>_@param predicate the predicate to test_@param builderConsumer consumer for a {@code Builder} that provides the nested router_function_@return this builder_@see RequestPredicates;Builder nest(RequestPredicate predicate, Consumer<Builder> builderConsumer)_;route,to,a,built,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,creates,a,nested,route,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,nested,route,router,functions,builder,nest,request,predicates,path,user,builder,builder,route,get,this,list,users,route,post,this,create,user,build,pre,param,predicate,the,predicate,to,test,param,builder,consumer,consumer,for,a,code,builder,that,provides,the,nested,router,function,return,this,builder,see,request,predicates;builder,nest,request,predicate,predicate,consumer,builder,builder,consumer
RouterFunctions -> Builder -> Builder nest(RequestPredicate predicate, Consumer<Builder> builderConsumer)_;1530871268;Route to a built router function if the given request predicate applies._This method can be used to create <strong>nested routes</strong>, where a group of routes_share a common path (prefix), header, or other request predicate._<p>For instance, the following example creates a nested route with a "/user" path_predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.route()_.nest(RequestPredicates.path("/user"), builder ->_builder.GET(this::listUsers)_.POST(this::createUser)___.build()__</pre>_@param predicate the predicate to test_@param builderConsumer consumer for a {@code Builder} that provides the nested router_function_@return this builder_@see RequestPredicates;Builder nest(RequestPredicate predicate, Consumer<Builder> builderConsumer)_;route,to,a,built,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,creates,a,nested,route,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,nested,route,router,functions,route,nest,request,predicates,path,user,builder,builder,get,this,list,users,post,this,create,user,build,pre,param,predicate,the,predicate,to,test,param,builder,consumer,consumer,for,a,code,builder,that,provides,the,nested,router,function,return,this,builder,see,request,predicates;builder,nest,request,predicate,predicate,consumer,builder,builder,consumer
RouterFunctions -> Builder -> Builder nest(RequestPredicate predicate, Consumer<Builder> builderConsumer)_;1530877097;Route to a built router function if the given request predicate applies._This method can be used to create <strong>nested routes</strong>, where a group of routes_share a common path (prefix), header, or other request predicate._<p>For instance, the following example creates a nested route with a "/user" path_predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.route()_.nest(RequestPredicates.path("/user"), builder ->_builder.GET(this::listUsers)_.POST(this::createUser)___.build()__</pre>_@param predicate the predicate to test_@param builderConsumer consumer for a {@code Builder} that provides the nested router_function_@return this builder_@see RequestPredicates;Builder nest(RequestPredicate predicate, Consumer<Builder> builderConsumer)_;route,to,a,built,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,creates,a,nested,route,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,nested,route,router,functions,route,nest,request,predicates,path,user,builder,builder,get,this,list,users,post,this,create,user,build,pre,param,predicate,the,predicate,to,test,param,builder,consumer,consumer,for,a,code,builder,that,provides,the,nested,router,function,return,this,builder,see,request,predicates;builder,nest,request,predicate,predicate,consumer,builder,builder,consumer
RouterFunctions -> Builder -> Builder nest(RequestPredicate predicate, Consumer<Builder> builderConsumer)_;1530880709;Route to a built router function if the given request predicate applies._This method can be used to create <strong>nested routes</strong>, where a group of routes_share a common path (prefix), header, or other request predicate._<p>For instance, the following example creates a nested route with a "/user" path_predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.route()_.nest(RequestPredicates.path("/user"), builder ->_builder.GET(this::listUsers)_.POST(this::createUser))_.build()__</pre>_@param predicate the predicate to test_@param builderConsumer consumer for a {@code Builder} that provides the nested router_function_@return this builder_@see RequestPredicates;Builder nest(RequestPredicate predicate, Consumer<Builder> builderConsumer)_;route,to,a,built,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,creates,a,nested,route,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,nested,route,router,functions,route,nest,request,predicates,path,user,builder,builder,get,this,list,users,post,this,create,user,build,pre,param,predicate,the,predicate,to,test,param,builder,consumer,consumer,for,a,code,builder,that,provides,the,nested,router,function,return,this,builder,see,request,predicates;builder,nest,request,predicate,predicate,consumer,builder,builder,consumer
RouterFunctions -> Builder -> Builder nest(RequestPredicate predicate, Consumer<Builder> builderConsumer)_;1537188605;Route to a built router function if the given request predicate applies._This method can be used to create <strong>nested routes</strong>, where a group of routes_share a common path (prefix), header, or other request predicate._<p>For instance, the following example creates a nested route with a "/user" path_predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.route()_.nest(RequestPredicates.path("/user"), builder ->_builder.GET(this::listUsers)_.POST(this::createUser))_.build()__</pre>_@param predicate the predicate to test_@param builderConsumer consumer for a {@code Builder} that provides the nested router_function_@return this builder_@see RequestPredicates;Builder nest(RequestPredicate predicate, Consumer<Builder> builderConsumer)_;route,to,a,built,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,creates,a,nested,route,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,nested,route,router,functions,route,nest,request,predicates,path,user,builder,builder,get,this,list,users,post,this,create,user,build,pre,param,predicate,the,predicate,to,test,param,builder,consumer,consumer,for,a,code,builder,that,provides,the,nested,router,function,return,this,builder,see,request,predicates;builder,nest,request,predicate,predicate,consumer,builder,builder,consumer
RouterFunctions -> Builder -> Builder nest(RequestPredicate predicate, Consumer<Builder> builderConsumer)_;1538664611;Route to a built router function if the given request predicate applies._This method can be used to create <strong>nested routes</strong>, where a group of routes_share a common path (prefix), header, or other request predicate._<p>For instance, the following example creates a nested route with a "/user" path_predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.route()_.nest(RequestPredicates.path("/user"), builder ->_builder.GET(this::listUsers)_.POST(this::createUser))_.build()__</pre>_@param predicate the predicate to test_@param builderConsumer consumer for a {@code Builder} that provides the nested router_function_@return this builder_@see RequestPredicates;Builder nest(RequestPredicate predicate, Consumer<Builder> builderConsumer)_;route,to,a,built,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,creates,a,nested,route,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,nested,route,router,functions,route,nest,request,predicates,path,user,builder,builder,get,this,list,users,post,this,create,user,build,pre,param,predicate,the,predicate,to,test,param,builder,consumer,consumer,for,a,code,builder,that,provides,the,nested,router,function,return,this,builder,see,request,predicates;builder,nest,request,predicate,predicate,consumer,builder,builder,consumer
RouterFunctions -> Builder -> Builder nest(RequestPredicate predicate, Consumer<Builder> builderConsumer)_;1539866925;Route to a built router function if the given request predicate applies._This method can be used to create <strong>nested routes</strong>, where a group of routes_share a common path (prefix), header, or other request predicate._<p>For instance, the following example creates a nested route with a "/user" path_predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.route()_.nest(RequestPredicates.path("/user"), builder ->_builder.GET(this::listUsers)_.POST(this::createUser))_.build()__</pre>_@param predicate the predicate to test_@param builderConsumer consumer for a {@code Builder} that provides the nested router_function_@return this builder_@see RequestPredicates;Builder nest(RequestPredicate predicate, Consumer<Builder> builderConsumer)_;route,to,a,built,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,creates,a,nested,route,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,nested,route,router,functions,route,nest,request,predicates,path,user,builder,builder,get,this,list,users,post,this,create,user,build,pre,param,predicate,the,predicate,to,test,param,builder,consumer,consumer,for,a,code,builder,that,provides,the,nested,router,function,return,this,builder,see,request,predicates;builder,nest,request,predicate,predicate,consumer,builder,builder,consumer
RouterFunctions -> Builder -> Builder HEAD(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530871268;Adds a route to the given handler function that handles all HTTP {@code HEAD} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code HEAD} requests that_match {@code pattern}_@return this builder;Builder HEAD(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,head,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,head,requests,that,match,code,pattern,return,this,builder;builder,head,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder HEAD(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530877097;Adds a route to the given handler function that handles all HTTP {@code HEAD} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code HEAD} requests that_match {@code pattern}_@return this builder;Builder HEAD(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,head,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,head,requests,that,match,code,pattern,return,this,builder;builder,head,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder HEAD(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530880709;Adds a route to the given handler function that handles all HTTP {@code HEAD} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code HEAD} requests that_match {@code pattern}_@return this builder;Builder HEAD(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,head,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,head,requests,that,match,code,pattern,return,this,builder;builder,head,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder HEAD(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1537188605;Adds a route to the given handler function that handles all HTTP {@code HEAD} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code HEAD} requests that_match {@code pattern}_@return this builder;Builder HEAD(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,head,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,head,requests,that,match,code,pattern,return,this,builder;builder,head,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder HEAD(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1538664611;Adds a route to the given handler function that handles all HTTP {@code HEAD} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code HEAD} requests that_match {@code pattern}_@return this builder;Builder HEAD(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,head,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,head,requests,that,match,code,pattern,return,this,builder;builder,head,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder HEAD(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1539866925;Adds a route to the given handler function that handles all HTTP {@code HEAD} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code HEAD} requests that_match {@code pattern}_@return this builder;Builder HEAD(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,head,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,head,requests,that,match,code,pattern,return,this,builder;builder,head,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate, 			RouterFunction<T> routerFunction);1487250745;Route to the given router function if the given request predicate applies. This method can be_used to create <strong>nested routes</strong>, where a group of routes share a common path_(prefix), header, or other request predicate._<p>For instance, the following example first creates a composed route that resolves to_{@code listUsers} for a GET, and {@code createUser} for a POST. This composed route then gets_nested with a "/user" path predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ userRoutes =_RouterFunctions.route(RequestPredicates.method(HttpMethod.GET), this::listUsers)_.andRoute(RequestPredicates.method(HttpMethod.POST), this::createUser)___RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.nest(RequestPredicates.path("/user"),userRoutes)__</pre>_@param predicate the predicate to test_@param routerFunction the nested router function to delegate to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code routerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate,_			RouterFunction<T> routerFunction) {__		Assert.notNull(predicate, "'predicate' must not be null")__		Assert.notNull(routerFunction, "'routerFunction' must not be null")___		return request -> {_			if (predicate.test(request)) {_				ServerRequest subRequest = predicate.subRequest(request)__				return routerFunction.route(subRequest)__			}_			else {_				return Mono.empty()__			}_		}__	};route,to,the,given,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,first,creates,a,composed,route,that,resolves,to,code,list,users,for,a,get,and,code,create,user,for,a,post,this,composed,route,then,gets,nested,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,user,routes,router,functions,route,request,predicates,method,http,method,get,this,list,users,and,route,request,predicates,method,http,method,post,this,create,user,router,function,lt,server,response,gt,nested,route,router,functions,nest,request,predicates,path,user,user,routes,pre,param,predicate,the,predicate,to,test,param,router,function,the,nested,router,function,to,delegate,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,router,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,nest,request,predicate,predicate,router,function,t,router,function,assert,not,null,predicate,predicate,must,not,be,null,assert,not,null,router,function,router,function,must,not,be,null,return,request,if,predicate,test,request,server,request,sub,request,predicate,sub,request,request,return,router,function,route,sub,request,else,return,mono,empty
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate, 			RouterFunction<T> routerFunction);1487584763;Route to the given router function if the given request predicate applies. This method can be_used to create <strong>nested routes</strong>, where a group of routes share a common path_(prefix), header, or other request predicate._<p>For instance, the following example first creates a composed route that resolves to_{@code listUsers} for a GET, and {@code createUser} for a POST. This composed route then gets_nested with a "/user" path predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ userRoutes =_RouterFunctions.route(RequestPredicates.method(HttpMethod.GET), this::listUsers)_.andRoute(RequestPredicates.method(HttpMethod.POST), this::createUser)___RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.nest(RequestPredicates.path("/user"),userRoutes)__</pre>_@param predicate the predicate to test_@param routerFunction the nested router function to delegate to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code routerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate,_			RouterFunction<T> routerFunction) {__		Assert.notNull(predicate, "'predicate' must not be null")__		Assert.notNull(routerFunction, "'routerFunction' must not be null")___		return request -> {_			if (predicate.test(request)) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format("Nested predicate \"%s\" matches against \"%s\"",_							predicate, request))__				}_				ServerRequest subRequest = predicate.nestRequest(request)__				return routerFunction.route(subRequest)__			}_			else {_				return Mono.empty()__			}_		}__	};route,to,the,given,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,first,creates,a,composed,route,that,resolves,to,code,list,users,for,a,get,and,code,create,user,for,a,post,this,composed,route,then,gets,nested,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,user,routes,router,functions,route,request,predicates,method,http,method,get,this,list,users,and,route,request,predicates,method,http,method,post,this,create,user,router,function,lt,server,response,gt,nested,route,router,functions,nest,request,predicates,path,user,user,routes,pre,param,predicate,the,predicate,to,test,param,router,function,the,nested,router,function,to,delegate,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,router,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,nest,request,predicate,predicate,router,function,t,router,function,assert,not,null,predicate,predicate,must,not,be,null,assert,not,null,router,function,router,function,must,not,be,null,return,request,if,predicate,test,request,if,logger,is,debug,enabled,logger,debug,string,format,nested,predicate,s,matches,against,s,predicate,request,server,request,sub,request,predicate,nest,request,request,return,router,function,route,sub,request,else,return,mono,empty
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate, 			RouterFunction<T> routerFunction);1487687241;Route to the given router function if the given request predicate applies. This method can be_used to create <strong>nested routes</strong>, where a group of routes share a common path_(prefix), header, or other request predicate._<p>For instance, the following example first creates a composed route that resolves to_{@code listUsers} for a GET, and {@code createUser} for a POST. This composed route then gets_nested with a "/user" path predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ userRoutes =_RouterFunctions.route(RequestPredicates.method(HttpMethod.GET), this::listUsers)_.andRoute(RequestPredicates.method(HttpMethod.POST), this::createUser)___RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.nest(RequestPredicates.path("/user"),userRoutes)__</pre>_@param predicate the predicate to test_@param routerFunction the nested router function to delegate to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code routerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate,_			RouterFunction<T> routerFunction) {__		Assert.notNull(predicate, "'predicate' must not be null")__		Assert.notNull(routerFunction, "'routerFunction' must not be null")___		return request -> {_			if (predicate.test(request)) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format("Nested predicate \"%s\" matches against \"%s\"",_							predicate, request))__				}_				ServerRequest subRequest = predicate.nestRequest(request)__				return routerFunction.route(subRequest)__			}_			else {_				return Mono.empty()__			}_		}__	};route,to,the,given,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,first,creates,a,composed,route,that,resolves,to,code,list,users,for,a,get,and,code,create,user,for,a,post,this,composed,route,then,gets,nested,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,user,routes,router,functions,route,request,predicates,method,http,method,get,this,list,users,and,route,request,predicates,method,http,method,post,this,create,user,router,function,lt,server,response,gt,nested,route,router,functions,nest,request,predicates,path,user,user,routes,pre,param,predicate,the,predicate,to,test,param,router,function,the,nested,router,function,to,delegate,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,router,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,nest,request,predicate,predicate,router,function,t,router,function,assert,not,null,predicate,predicate,must,not,be,null,assert,not,null,router,function,router,function,must,not,be,null,return,request,if,predicate,test,request,if,logger,is,debug,enabled,logger,debug,string,format,nested,predicate,s,matches,against,s,predicate,request,server,request,sub,request,predicate,nest,request,request,return,router,function,route,sub,request,else,return,mono,empty
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate, 			RouterFunction<T> routerFunction);1489653648;Route to the given router function if the given request predicate applies. This method can be_used to create <strong>nested routes</strong>, where a group of routes share a common path_(prefix), header, or other request predicate._<p>For instance, the following example first creates a composed route that resolves to_{@code listUsers} for a GET, and {@code createUser} for a POST. This composed route then gets_nested with a "/user" path predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ userRoutes =_RouterFunctions.route(RequestPredicates.method(HttpMethod.GET), this::listUsers)_.andRoute(RequestPredicates.method(HttpMethod.POST), this::createUser)___RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.nest(RequestPredicates.path("/user"),userRoutes)__</pre>_@param predicate the predicate to test_@param routerFunction the nested router function to delegate to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code routerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate,_			RouterFunction<T> routerFunction) {__		Assert.notNull(predicate, "'predicate' must not be null")__		Assert.notNull(routerFunction, "'routerFunction' must not be null")___		return request -> {_			if (predicate.test(request)) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format("Nested predicate \"%s\" matches against \"%s\"",_							predicate, request))__				}_				ServerRequest subRequest = predicate.nestRequest(request)__				return routerFunction.route(subRequest)__			}_			else {_				return Mono.empty()__			}_		}__	};route,to,the,given,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,first,creates,a,composed,route,that,resolves,to,code,list,users,for,a,get,and,code,create,user,for,a,post,this,composed,route,then,gets,nested,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,user,routes,router,functions,route,request,predicates,method,http,method,get,this,list,users,and,route,request,predicates,method,http,method,post,this,create,user,router,function,lt,server,response,gt,nested,route,router,functions,nest,request,predicates,path,user,user,routes,pre,param,predicate,the,predicate,to,test,param,router,function,the,nested,router,function,to,delegate,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,router,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,nest,request,predicate,predicate,router,function,t,router,function,assert,not,null,predicate,predicate,must,not,be,null,assert,not,null,router,function,router,function,must,not,be,null,return,request,if,predicate,test,request,if,logger,is,debug,enabled,logger,debug,string,format,nested,predicate,s,matches,against,s,predicate,request,server,request,sub,request,predicate,nest,request,request,return,router,function,route,sub,request,else,return,mono,empty
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate, 			RouterFunction<T> routerFunction);1489751412;Route to the given router function if the given request predicate applies. This method can be_used to create <strong>nested routes</strong>, where a group of routes share a common path_(prefix), header, or other request predicate._<p>For instance, the following example first creates a composed route that resolves to_{@code listUsers} for a GET, and {@code createUser} for a POST. This composed route then gets_nested with a "/user" path predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ userRoutes =_RouterFunctions.route(RequestPredicates.method(HttpMethod.GET), this::listUsers)_.andRoute(RequestPredicates.method(HttpMethod.POST), this::createUser)___RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.nest(RequestPredicates.path("/user"),userRoutes)__</pre>_@param predicate the predicate to test_@param routerFunction the nested router function to delegate to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code routerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate,_			RouterFunction<T> routerFunction) {__		Assert.notNull(predicate, "'predicate' must not be null")__		Assert.notNull(routerFunction, "'routerFunction' must not be null")___		return request -> {_			if (predicate.test(request)) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format("Nested predicate \"%s\" matches against \"%s\"",_							predicate, request))__				}_				ServerRequest subRequest = predicate.nestRequest(request)__				return routerFunction.route(subRequest)__			}_			else {_				return Mono.empty()__			}_		}__	};route,to,the,given,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,first,creates,a,composed,route,that,resolves,to,code,list,users,for,a,get,and,code,create,user,for,a,post,this,composed,route,then,gets,nested,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,user,routes,router,functions,route,request,predicates,method,http,method,get,this,list,users,and,route,request,predicates,method,http,method,post,this,create,user,router,function,lt,server,response,gt,nested,route,router,functions,nest,request,predicates,path,user,user,routes,pre,param,predicate,the,predicate,to,test,param,router,function,the,nested,router,function,to,delegate,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,router,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,nest,request,predicate,predicate,router,function,t,router,function,assert,not,null,predicate,predicate,must,not,be,null,assert,not,null,router,function,router,function,must,not,be,null,return,request,if,predicate,test,request,if,logger,is,debug,enabled,logger,debug,string,format,nested,predicate,s,matches,against,s,predicate,request,server,request,sub,request,predicate,nest,request,request,return,router,function,route,sub,request,else,return,mono,empty
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate, 			RouterFunction<T> routerFunction);1491557115;Route to the given router function if the given request predicate applies. This method can be_used to create <strong>nested routes</strong>, where a group of routes share a common path_(prefix), header, or other request predicate._<p>For instance, the following example first creates a composed route that resolves to_{@code listUsers} for a GET, and {@code createUser} for a POST. This composed route then gets_nested with a "/user" path predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ userRoutes =_RouterFunctions.route(RequestPredicates.method(HttpMethod.GET), this::listUsers)_.andRoute(RequestPredicates.method(HttpMethod.POST), this::createUser)___RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.nest(RequestPredicates.path("/user"),userRoutes)__</pre>_@param predicate the predicate to test_@param routerFunction the nested router function to delegate to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code routerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate,_			RouterFunction<T> routerFunction) {__		Assert.notNull(predicate, "'predicate' must not be null")__		Assert.notNull(routerFunction, "'routerFunction' must not be null")___		return request -> predicate.nest(request)_				.map(nestedRequest -> {_							if (logger.isDebugEnabled()) {_								logger.debug(_										String.format("Nested predicate \"%s\" matches against \"%s\"",_												predicate, request))__							}_							return routerFunction.route(nestedRequest)__						}_				)_				.orElseGet(Mono::empty)__	};route,to,the,given,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,first,creates,a,composed,route,that,resolves,to,code,list,users,for,a,get,and,code,create,user,for,a,post,this,composed,route,then,gets,nested,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,user,routes,router,functions,route,request,predicates,method,http,method,get,this,list,users,and,route,request,predicates,method,http,method,post,this,create,user,router,function,lt,server,response,gt,nested,route,router,functions,nest,request,predicates,path,user,user,routes,pre,param,predicate,the,predicate,to,test,param,router,function,the,nested,router,function,to,delegate,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,router,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,nest,request,predicate,predicate,router,function,t,router,function,assert,not,null,predicate,predicate,must,not,be,null,assert,not,null,router,function,router,function,must,not,be,null,return,request,predicate,nest,request,map,nested,request,if,logger,is,debug,enabled,logger,debug,string,format,nested,predicate,s,matches,against,s,predicate,request,return,router,function,route,nested,request,or,else,get,mono,empty
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate, 			RouterFunction<T> routerFunction);1491833276;Route to the given router function if the given request predicate applies. This method can be_used to create <strong>nested routes</strong>, where a group of routes share a common path_(prefix), header, or other request predicate._<p>For instance, the following example first creates a composed route that resolves to_{@code listUsers} for a GET, and {@code createUser} for a POST. This composed route then gets_nested with a "/user" path predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ userRoutes =_RouterFunctions.route(RequestPredicates.method(HttpMethod.GET), this::listUsers)_.andRoute(RequestPredicates.method(HttpMethod.POST), this::createUser)___RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.nest(RequestPredicates.path("/user"),userRoutes)__</pre>_@param predicate the predicate to test_@param routerFunction the nested router function to delegate to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code routerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate,_			RouterFunction<T> routerFunction) {__		Assert.notNull(predicate, "'predicate' must not be null")__		Assert.notNull(routerFunction, "'routerFunction' must not be null")___		return request -> predicate.nest(request)_				.map(nestedRequest -> {_							if (logger.isDebugEnabled()) {_								logger.debug(_										String.format("Nested predicate \"%s\" matches against \"%s\"",_												predicate, request))__							}_							return routerFunction.route(nestedRequest)__						}_				)_				.orElseGet(Mono::empty)__	};route,to,the,given,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,first,creates,a,composed,route,that,resolves,to,code,list,users,for,a,get,and,code,create,user,for,a,post,this,composed,route,then,gets,nested,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,user,routes,router,functions,route,request,predicates,method,http,method,get,this,list,users,and,route,request,predicates,method,http,method,post,this,create,user,router,function,lt,server,response,gt,nested,route,router,functions,nest,request,predicates,path,user,user,routes,pre,param,predicate,the,predicate,to,test,param,router,function,the,nested,router,function,to,delegate,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,router,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,nest,request,predicate,predicate,router,function,t,router,function,assert,not,null,predicate,predicate,must,not,be,null,assert,not,null,router,function,router,function,must,not,be,null,return,request,predicate,nest,request,map,nested,request,if,logger,is,debug,enabled,logger,debug,string,format,nested,predicate,s,matches,against,s,predicate,request,return,router,function,route,nested,request,or,else,get,mono,empty
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate, 			RouterFunction<T> routerFunction);1491927184;Route to the given router function if the given request predicate applies. This method can be_used to create <strong>nested routes</strong>, where a group of routes share a common path_(prefix), header, or other request predicate._<p>For instance, the following example first creates a composed route that resolves to_{@code listUsers} for a GET, and {@code createUser} for a POST. This composed route then gets_nested with a "/user" path predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ userRoutes =_RouterFunctions.route(RequestPredicates.method(HttpMethod.GET), this::listUsers)_.andRoute(RequestPredicates.method(HttpMethod.POST), this::createUser)___RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.nest(RequestPredicates.path("/user"),userRoutes)__</pre>_@param predicate the predicate to test_@param routerFunction the nested router function to delegate to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code routerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate,_			RouterFunction<T> routerFunction) {__		Assert.notNull(predicate, "'predicate' must not be null")__		Assert.notNull(routerFunction, "'routerFunction' must not be null")___		return request -> predicate.nest(request)_				.map(nestedRequest -> {_							if (logger.isDebugEnabled()) {_								logger.debug(_										String.format("Nested predicate \"%s\" matches against \"%s\"",_												predicate, request))__							}_							return routerFunction.route(nestedRequest)__						}_				)_				.orElseGet(Mono::empty)__	};route,to,the,given,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,first,creates,a,composed,route,that,resolves,to,code,list,users,for,a,get,and,code,create,user,for,a,post,this,composed,route,then,gets,nested,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,user,routes,router,functions,route,request,predicates,method,http,method,get,this,list,users,and,route,request,predicates,method,http,method,post,this,create,user,router,function,lt,server,response,gt,nested,route,router,functions,nest,request,predicates,path,user,user,routes,pre,param,predicate,the,predicate,to,test,param,router,function,the,nested,router,function,to,delegate,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,router,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,nest,request,predicate,predicate,router,function,t,router,function,assert,not,null,predicate,predicate,must,not,be,null,assert,not,null,router,function,router,function,must,not,be,null,return,request,predicate,nest,request,map,nested,request,if,logger,is,debug,enabled,logger,debug,string,format,nested,predicate,s,matches,against,s,predicate,request,return,router,function,route,nested,request,or,else,get,mono,empty
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate, 			RouterFunction<T> routerFunction);1492090594;Route to the given router function if the given request predicate applies. This method can be_used to create <strong>nested routes</strong>, where a group of routes share a common path_(prefix), header, or other request predicate._<p>For instance, the following example first creates a composed route that resolves to_{@code listUsers} for a GET, and {@code createUser} for a POST. This composed route then gets_nested with a "/user" path predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ userRoutes =_RouterFunctions.route(RequestPredicates.method(HttpMethod.GET), this::listUsers)_.andRoute(RequestPredicates.method(HttpMethod.POST), this::createUser)___RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.nest(RequestPredicates.path("/user"),userRoutes)__</pre>_@param predicate the predicate to test_@param routerFunction the nested router function to delegate to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code routerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate,_			RouterFunction<T> routerFunction) {__		Assert.notNull(predicate, "'predicate' must not be null")__		Assert.notNull(routerFunction, "'routerFunction' must not be null")___		return request -> predicate.nest(request)_				.map(nestedRequest -> {_							if (logger.isDebugEnabled()) {_								logger.debug(_										String.format("Nested predicate \"%s\" matches against \"%s\"",_												predicate, request))__							}_							return routerFunction.route(nestedRequest)__						}_				)_				.orElseGet(Mono::empty)__	};route,to,the,given,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,first,creates,a,composed,route,that,resolves,to,code,list,users,for,a,get,and,code,create,user,for,a,post,this,composed,route,then,gets,nested,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,user,routes,router,functions,route,request,predicates,method,http,method,get,this,list,users,and,route,request,predicates,method,http,method,post,this,create,user,router,function,lt,server,response,gt,nested,route,router,functions,nest,request,predicates,path,user,user,routes,pre,param,predicate,the,predicate,to,test,param,router,function,the,nested,router,function,to,delegate,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,router,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,nest,request,predicate,predicate,router,function,t,router,function,assert,not,null,predicate,predicate,must,not,be,null,assert,not,null,router,function,router,function,must,not,be,null,return,request,predicate,nest,request,map,nested,request,if,logger,is,debug,enabled,logger,debug,string,format,nested,predicate,s,matches,against,s,predicate,request,return,router,function,route,nested,request,or,else,get,mono,empty
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate, 			RouterFunction<T> routerFunction);1492168700;Route to the given router function if the given request predicate applies. This method can be_used to create <strong>nested routes</strong>, where a group of routes share a common path_(prefix), header, or other request predicate._<p>For instance, the following example first creates a composed route that resolves to_{@code listUsers} for a GET, and {@code createUser} for a POST. This composed route then gets_nested with a "/user" path predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ userRoutes =_RouterFunctions.route(RequestPredicates.method(HttpMethod.GET), this::listUsers)_.andRoute(RequestPredicates.method(HttpMethod.POST), this::createUser)___RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.nest(RequestPredicates.path("/user"),userRoutes)__</pre>_@param predicate the predicate to test_@param routerFunction the nested router function to delegate to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code routerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate,_			RouterFunction<T> routerFunction) {__		Assert.notNull(predicate, "'predicate' must not be null")__		Assert.notNull(routerFunction, "'routerFunction' must not be null")___		return request -> predicate.nest(request)_				.map(nestedRequest -> {_							if (logger.isDebugEnabled()) {_								logger.debug(_										String.format("Nested predicate \"%s\" matches against \"%s\"",_												predicate, request))__							}_							return routerFunction.route(nestedRequest)__						}_				)_				.orElseGet(Mono::empty)__	};route,to,the,given,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,first,creates,a,composed,route,that,resolves,to,code,list,users,for,a,get,and,code,create,user,for,a,post,this,composed,route,then,gets,nested,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,user,routes,router,functions,route,request,predicates,method,http,method,get,this,list,users,and,route,request,predicates,method,http,method,post,this,create,user,router,function,lt,server,response,gt,nested,route,router,functions,nest,request,predicates,path,user,user,routes,pre,param,predicate,the,predicate,to,test,param,router,function,the,nested,router,function,to,delegate,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,router,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,nest,request,predicate,predicate,router,function,t,router,function,assert,not,null,predicate,predicate,must,not,be,null,assert,not,null,router,function,router,function,must,not,be,null,return,request,predicate,nest,request,map,nested,request,if,logger,is,debug,enabled,logger,debug,string,format,nested,predicate,s,matches,against,s,predicate,request,return,router,function,route,nested,request,or,else,get,mono,empty
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate, 			RouterFunction<T> routerFunction);1492190322;Route to the given router function if the given request predicate applies. This method can be_used to create <strong>nested routes</strong>, where a group of routes share a common path_(prefix), header, or other request predicate._<p>For instance, the following example first creates a composed route that resolves to_{@code listUsers} for a GET, and {@code createUser} for a POST. This composed route then gets_nested with a "/user" path predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ userRoutes =_RouterFunctions.route(RequestPredicates.method(HttpMethod.GET), this::listUsers)_.andRoute(RequestPredicates.method(HttpMethod.POST), this::createUser)___RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.nest(RequestPredicates.path("/user"),userRoutes)__</pre>_@param predicate the predicate to test_@param routerFunction the nested router function to delegate to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code routerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate,_			RouterFunction<T> routerFunction) {__		Assert.notNull(predicate, "'predicate' must not be null")__		Assert.notNull(routerFunction, "'routerFunction' must not be null")___		return request -> predicate.nest(request)_				.map(nestedRequest -> {_							if (logger.isDebugEnabled()) {_								logger.debug(_										String.format("Nested predicate \"%s\" matches against \"%s\"",_												predicate, request))__							}_							return routerFunction.route(nestedRequest)__						}_				)_				.orElseGet(Mono::empty)__	};route,to,the,given,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,first,creates,a,composed,route,that,resolves,to,code,list,users,for,a,get,and,code,create,user,for,a,post,this,composed,route,then,gets,nested,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,user,routes,router,functions,route,request,predicates,method,http,method,get,this,list,users,and,route,request,predicates,method,http,method,post,this,create,user,router,function,lt,server,response,gt,nested,route,router,functions,nest,request,predicates,path,user,user,routes,pre,param,predicate,the,predicate,to,test,param,router,function,the,nested,router,function,to,delegate,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,router,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,nest,request,predicate,predicate,router,function,t,router,function,assert,not,null,predicate,predicate,must,not,be,null,assert,not,null,router,function,router,function,must,not,be,null,return,request,predicate,nest,request,map,nested,request,if,logger,is,debug,enabled,logger,debug,string,format,nested,predicate,s,matches,against,s,predicate,request,return,router,function,route,nested,request,or,else,get,mono,empty
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate, 			RouterFunction<T> routerFunction);1494495900;Route to the given router function if the given request predicate applies. This method can be_used to create <strong>nested routes</strong>, where a group of routes share a common path_(prefix), header, or other request predicate._<p>For instance, the following example first creates a composed route that resolves to_{@code listUsers} for a GET, and {@code createUser} for a POST. This composed route then gets_nested with a "/user" path predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ userRoutes =_RouterFunctions.route(RequestPredicates.method(HttpMethod.GET), this::listUsers)_.andRoute(RequestPredicates.method(HttpMethod.POST), this::createUser)___RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.nest(RequestPredicates.path("/user"),userRoutes)__</pre>_@param predicate the predicate to test_@param routerFunction the nested router function to delegate to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code routerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate,_			RouterFunction<T> routerFunction) {__		Assert.notNull(predicate, "'predicate' must not be null")__		Assert.notNull(routerFunction, "'routerFunction' must not be null")___		return request -> predicate.nest(request)_				.map(nestedRequest -> {_							if (logger.isDebugEnabled()) {_								logger.debug(_										String.format("Nested predicate \"%s\" matches against \"%s\"",_												predicate, request))__							}_							return routerFunction.route(nestedRequest)__						}_				)_				.orElseGet(Mono::empty)__	};route,to,the,given,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,first,creates,a,composed,route,that,resolves,to,code,list,users,for,a,get,and,code,create,user,for,a,post,this,composed,route,then,gets,nested,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,user,routes,router,functions,route,request,predicates,method,http,method,get,this,list,users,and,route,request,predicates,method,http,method,post,this,create,user,router,function,lt,server,response,gt,nested,route,router,functions,nest,request,predicates,path,user,user,routes,pre,param,predicate,the,predicate,to,test,param,router,function,the,nested,router,function,to,delegate,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,router,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,nest,request,predicate,predicate,router,function,t,router,function,assert,not,null,predicate,predicate,must,not,be,null,assert,not,null,router,function,router,function,must,not,be,null,return,request,predicate,nest,request,map,nested,request,if,logger,is,debug,enabled,logger,debug,string,format,nested,predicate,s,matches,against,s,predicate,request,return,router,function,route,nested,request,or,else,get,mono,empty
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate, 			RouterFunction<T> routerFunction);1495618935;Route to the given router function if the given request predicate applies. This method can be_used to create <strong>nested routes</strong>, where a group of routes share a common path_(prefix), header, or other request predicate._<p>For instance, the following example first creates a composed route that resolves to_{@code listUsers} for a GET, and {@code createUser} for a POST. This composed route then gets_nested with a "/user" path predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ userRoutes =_RouterFunctions.route(RequestPredicates.method(HttpMethod.GET), this::listUsers)_.andRoute(RequestPredicates.method(HttpMethod.POST), this::createUser)___RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.nest(RequestPredicates.path("/user"),userRoutes)__</pre>_@param predicate the predicate to test_@param routerFunction the nested router function to delegate to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code routerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate,_			RouterFunction<T> routerFunction) {__		Assert.notNull(predicate, "'predicate' must not be null")__		Assert.notNull(routerFunction, "'routerFunction' must not be null")___		return new DefaultNestedRouterFunction<>(predicate, routerFunction)__	};route,to,the,given,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,first,creates,a,composed,route,that,resolves,to,code,list,users,for,a,get,and,code,create,user,for,a,post,this,composed,route,then,gets,nested,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,user,routes,router,functions,route,request,predicates,method,http,method,get,this,list,users,and,route,request,predicates,method,http,method,post,this,create,user,router,function,lt,server,response,gt,nested,route,router,functions,nest,request,predicates,path,user,user,routes,pre,param,predicate,the,predicate,to,test,param,router,function,the,nested,router,function,to,delegate,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,router,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,nest,request,predicate,predicate,router,function,t,router,function,assert,not,null,predicate,predicate,must,not,be,null,assert,not,null,router,function,router,function,must,not,be,null,return,new,default,nested,router,function,predicate,router,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate, 			RouterFunction<T> routerFunction);1495626483;Route to the given router function if the given request predicate applies. This method can be_used to create <strong>nested routes</strong>, where a group of routes share a common path_(prefix), header, or other request predicate._<p>For instance, the following example first creates a composed route that resolves to_{@code listUsers} for a GET, and {@code createUser} for a POST. This composed route then gets_nested with a "/user" path predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ userRoutes =_RouterFunctions.route(RequestPredicates.method(HttpMethod.GET), this::listUsers)_.andRoute(RequestPredicates.method(HttpMethod.POST), this::createUser)___RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.nest(RequestPredicates.path("/user"),userRoutes)__</pre>_@param predicate the predicate to test_@param routerFunction the nested router function to delegate to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code routerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate,_			RouterFunction<T> routerFunction) {__		Assert.notNull(predicate, "'predicate' must not be null")__		Assert.notNull(routerFunction, "'routerFunction' must not be null")___		return new DefaultNestedRouterFunction<>(predicate, routerFunction)__	};route,to,the,given,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,first,creates,a,composed,route,that,resolves,to,code,list,users,for,a,get,and,code,create,user,for,a,post,this,composed,route,then,gets,nested,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,user,routes,router,functions,route,request,predicates,method,http,method,get,this,list,users,and,route,request,predicates,method,http,method,post,this,create,user,router,function,lt,server,response,gt,nested,route,router,functions,nest,request,predicates,path,user,user,routes,pre,param,predicate,the,predicate,to,test,param,router,function,the,nested,router,function,to,delegate,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,router,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,nest,request,predicate,predicate,router,function,t,router,function,assert,not,null,predicate,predicate,must,not,be,null,assert,not,null,router,function,router,function,must,not,be,null,return,new,default,nested,router,function,predicate,router,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate, 			RouterFunction<T> routerFunction);1497359418;Route to the given router function if the given request predicate applies. This method can be_used to create <strong>nested routes</strong>, where a group of routes share a common path_(prefix), header, or other request predicate._<p>For instance, the following example first creates a composed route that resolves to_{@code listUsers} for a GET, and {@code createUser} for a POST. This composed route then gets_nested with a "/user" path predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ userRoutes =_RouterFunctions.route(RequestPredicates.method(HttpMethod.GET), this::listUsers)_.andRoute(RequestPredicates.method(HttpMethod.POST), this::createUser)___RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.nest(RequestPredicates.path("/user"),userRoutes)__</pre>_@param predicate the predicate to test_@param routerFunction the nested router function to delegate to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code routerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate,_			RouterFunction<T> routerFunction) {__		Assert.notNull(predicate, "'predicate' must not be null")__		Assert.notNull(routerFunction, "'routerFunction' must not be null")___		return new DefaultNestedRouterFunction<>(predicate, routerFunction)__	};route,to,the,given,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,first,creates,a,composed,route,that,resolves,to,code,list,users,for,a,get,and,code,create,user,for,a,post,this,composed,route,then,gets,nested,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,user,routes,router,functions,route,request,predicates,method,http,method,get,this,list,users,and,route,request,predicates,method,http,method,post,this,create,user,router,function,lt,server,response,gt,nested,route,router,functions,nest,request,predicates,path,user,user,routes,pre,param,predicate,the,predicate,to,test,param,router,function,the,nested,router,function,to,delegate,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,router,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,nest,request,predicate,predicate,router,function,t,router,function,assert,not,null,predicate,predicate,must,not,be,null,assert,not,null,router,function,router,function,must,not,be,null,return,new,default,nested,router,function,predicate,router,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate, 			RouterFunction<T> routerFunction);1498216330;Route to the given router function if the given request predicate applies. This method can be_used to create <strong>nested routes</strong>, where a group of routes share a common path_(prefix), header, or other request predicate._<p>For instance, the following example first creates a composed route that resolves to_{@code listUsers} for a GET, and {@code createUser} for a POST. This composed route then gets_nested with a "/user" path predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ userRoutes =_RouterFunctions.route(RequestPredicates.method(HttpMethod.GET), this::listUsers)_.andRoute(RequestPredicates.method(HttpMethod.POST), this::createUser)___RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.nest(RequestPredicates.path("/user"),userRoutes)__</pre>_@param predicate the predicate to test_@param routerFunction the nested router function to delegate to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code routerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate,_			RouterFunction<T> routerFunction) {__		Assert.notNull(predicate, "'predicate' must not be null")__		Assert.notNull(routerFunction, "'routerFunction' must not be null")___		return new DefaultNestedRouterFunction<>(predicate, routerFunction)__	};route,to,the,given,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,first,creates,a,composed,route,that,resolves,to,code,list,users,for,a,get,and,code,create,user,for,a,post,this,composed,route,then,gets,nested,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,user,routes,router,functions,route,request,predicates,method,http,method,get,this,list,users,and,route,request,predicates,method,http,method,post,this,create,user,router,function,lt,server,response,gt,nested,route,router,functions,nest,request,predicates,path,user,user,routes,pre,param,predicate,the,predicate,to,test,param,router,function,the,nested,router,function,to,delegate,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,router,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,nest,request,predicate,predicate,router,function,t,router,function,assert,not,null,predicate,predicate,must,not,be,null,assert,not,null,router,function,router,function,must,not,be,null,return,new,default,nested,router,function,predicate,router,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate, 			RouterFunction<T> routerFunction);1501161935;Route to the given router function if the given request predicate applies. This method can be_used to create <strong>nested routes</strong>, where a group of routes share a common path_(prefix), header, or other request predicate._<p>For instance, the following example first creates a composed route that resolves to_{@code listUsers} for a GET, and {@code createUser} for a POST. This composed route then gets_nested with a "/user" path predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ userRoutes =_RouterFunctions.route(RequestPredicates.method(HttpMethod.GET), this::listUsers)_.andRoute(RequestPredicates.method(HttpMethod.POST), this::createUser)___RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.nest(RequestPredicates.path("/user"),userRoutes)__</pre>_@param predicate the predicate to test_@param routerFunction the nested router function to delegate to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code routerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate,_			RouterFunction<T> routerFunction) {__		Assert.notNull(predicate, "'predicate' must not be null")__		Assert.notNull(routerFunction, "'routerFunction' must not be null")___		return new DefaultNestedRouterFunction<>(predicate, routerFunction)__	};route,to,the,given,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,first,creates,a,composed,route,that,resolves,to,code,list,users,for,a,get,and,code,create,user,for,a,post,this,composed,route,then,gets,nested,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,user,routes,router,functions,route,request,predicates,method,http,method,get,this,list,users,and,route,request,predicates,method,http,method,post,this,create,user,router,function,lt,server,response,gt,nested,route,router,functions,nest,request,predicates,path,user,user,routes,pre,param,predicate,the,predicate,to,test,param,router,function,the,nested,router,function,to,delegate,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,router,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,nest,request,predicate,predicate,router,function,t,router,function,assert,not,null,predicate,predicate,must,not,be,null,assert,not,null,router,function,router,function,must,not,be,null,return,new,default,nested,router,function,predicate,router,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate, 			RouterFunction<T> routerFunction);1506081789;Route to the given router function if the given request predicate applies. This method can be_used to create <strong>nested routes</strong>, where a group of routes share a common path_(prefix), header, or other request predicate._<p>For instance, the following example first creates a composed route that resolves to_{@code listUsers} for a GET, and {@code createUser} for a POST. This composed route then gets_nested with a "/user" path predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ userRoutes =_RouterFunctions.route(RequestPredicates.method(HttpMethod.GET), this::listUsers)_.andRoute(RequestPredicates.method(HttpMethod.POST), this::createUser)___RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.nest(RequestPredicates.path("/user"),userRoutes)__</pre>_@param predicate the predicate to test_@param routerFunction the nested router function to delegate to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code routerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate,_			RouterFunction<T> routerFunction) {__		Assert.notNull(predicate, "'predicate' must not be null")__		Assert.notNull(routerFunction, "'routerFunction' must not be null")___		return new DefaultNestedRouterFunction<>(predicate, routerFunction)__	};route,to,the,given,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,first,creates,a,composed,route,that,resolves,to,code,list,users,for,a,get,and,code,create,user,for,a,post,this,composed,route,then,gets,nested,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,user,routes,router,functions,route,request,predicates,method,http,method,get,this,list,users,and,route,request,predicates,method,http,method,post,this,create,user,router,function,lt,server,response,gt,nested,route,router,functions,nest,request,predicates,path,user,user,routes,pre,param,predicate,the,predicate,to,test,param,router,function,the,nested,router,function,to,delegate,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,router,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,nest,request,predicate,predicate,router,function,t,router,function,assert,not,null,predicate,predicate,must,not,be,null,assert,not,null,router,function,router,function,must,not,be,null,return,new,default,nested,router,function,predicate,router,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate, 			RouterFunction<T> routerFunction);1520528267;Route to the given router function if the given request predicate applies. This method can be_used to create <strong>nested routes</strong>, where a group of routes share a common path_(prefix), header, or other request predicate._<p>For instance, the following example first creates a composed route that resolves to_{@code listUsers} for a GET, and {@code createUser} for a POST. This composed route then gets_nested with a "/user" path predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ userRoutes =_RouterFunctions.route(RequestPredicates.method(HttpMethod.GET), this::listUsers)_.andRoute(RequestPredicates.method(HttpMethod.POST), this::createUser)___RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.nest(RequestPredicates.path("/user"),userRoutes)__</pre>_@param predicate the predicate to test_@param routerFunction the nested router function to delegate to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code routerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate,_			RouterFunction<T> routerFunction) {__		Assert.notNull(predicate, "'predicate' must not be null")__		Assert.notNull(routerFunction, "'routerFunction' must not be null")___		return new DefaultNestedRouterFunction<>(predicate, routerFunction)__	};route,to,the,given,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,first,creates,a,composed,route,that,resolves,to,code,list,users,for,a,get,and,code,create,user,for,a,post,this,composed,route,then,gets,nested,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,user,routes,router,functions,route,request,predicates,method,http,method,get,this,list,users,and,route,request,predicates,method,http,method,post,this,create,user,router,function,lt,server,response,gt,nested,route,router,functions,nest,request,predicates,path,user,user,routes,pre,param,predicate,the,predicate,to,test,param,router,function,the,nested,router,function,to,delegate,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,router,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,nest,request,predicate,predicate,router,function,t,router,function,assert,not,null,predicate,predicate,must,not,be,null,assert,not,null,router,function,router,function,must,not,be,null,return,new,default,nested,router,function,predicate,router,function
RouterFunctions -> Visitor -> void endNested(RequestPredicate predicate)_;1506081789;Receive notification of the end of a nested router function._@param predicate the predicate that applies to the nested router functions_@see RouterFunctions#nest(RequestPredicate, RouterFunction);void endNested(RequestPredicate predicate)_;receive,notification,of,the,end,of,a,nested,router,function,param,predicate,the,predicate,that,applies,to,the,nested,router,functions,see,router,functions,nest,request,predicate,router,function;void,end,nested,request,predicate,predicate
RouterFunctions -> Visitor -> void endNested(RequestPredicate predicate)_;1520528267;Receive notification of the end of a nested router function._@param predicate the predicate that applies to the nested router functions_@see RouterFunctions#nest(RequestPredicate, RouterFunction);void endNested(RequestPredicate predicate)_;receive,notification,of,the,end,of,a,nested,router,function,param,predicate,the,predicate,that,applies,to,the,nested,router,functions,see,router,functions,nest,request,predicate,router,function;void,end,nested,request,predicate,predicate
RouterFunctions -> Visitor -> void endNested(RequestPredicate predicate)_;1524865018;Receive notification of the end of a nested router function._@param predicate the predicate that applies to the nested router functions_@see RouterFunctions#nest(RequestPredicate, RouterFunction);void endNested(RequestPredicate predicate)_;receive,notification,of,the,end,of,a,nested,router,function,param,predicate,the,predicate,that,applies,to,the,nested,router,functions,see,router,functions,nest,request,predicate,router,function;void,end,nested,request,predicate,predicate
RouterFunctions -> Visitor -> void endNested(RequestPredicate predicate)_;1525433784;Receive notification of the end of a nested router function._@param predicate the predicate that applies to the nested router functions_@see RouterFunctions#nest(RequestPredicate, RouterFunction);void endNested(RequestPredicate predicate)_;receive,notification,of,the,end,of,a,nested,router,function,param,predicate,the,predicate,that,applies,to,the,nested,router,functions,see,router,functions,nest,request,predicate,router,function;void,end,nested,request,predicate,predicate
RouterFunctions -> Visitor -> void endNested(RequestPredicate predicate)_;1526553177;Receive notification of the end of a nested router function._@param predicate the predicate that applies to the nested router functions_@see RouterFunctions#nest(RequestPredicate, RouterFunction);void endNested(RequestPredicate predicate)_;receive,notification,of,the,end,of,a,nested,router,function,param,predicate,the,predicate,that,applies,to,the,nested,router,functions,see,router,functions,nest,request,predicate,router,function;void,end,nested,request,predicate,predicate
RouterFunctions -> Visitor -> void endNested(RequestPredicate predicate)_;1527601711;Receive notification of the end of a nested router function._@param predicate the predicate that applies to the nested router functions_@see RouterFunctions#nest(RequestPredicate, RouterFunction);void endNested(RequestPredicate predicate)_;receive,notification,of,the,end,of,a,nested,router,function,param,predicate,the,predicate,that,applies,to,the,nested,router,functions,see,router,functions,nest,request,predicate,router,function;void,end,nested,request,predicate,predicate
RouterFunctions -> Visitor -> void endNested(RequestPredicate predicate)_;1529721864;Receive notification of the end of a nested router function._@param predicate the predicate that applies to the nested router functions_@see RouterFunctions#nest(RequestPredicate, RouterFunction);void endNested(RequestPredicate predicate)_;receive,notification,of,the,end,of,a,nested,router,function,param,predicate,the,predicate,that,applies,to,the,nested,router,functions,see,router,functions,nest,request,predicate,router,function;void,end,nested,request,predicate,predicate
RouterFunctions -> Visitor -> void endNested(RequestPredicate predicate)_;1530174524;Receive notification of the end of a nested router function._@param predicate the predicate that applies to the nested router functions_@see RouterFunctions#nest(RequestPredicate, RouterFunction);void endNested(RequestPredicate predicate)_;receive,notification,of,the,end,of,a,nested,router,function,param,predicate,the,predicate,that,applies,to,the,nested,router,functions,see,router,functions,nest,request,predicate,router,function;void,end,nested,request,predicate,predicate
RouterFunctions -> Visitor -> void endNested(RequestPredicate predicate)_;1530174524;Receive notification of the end of a nested router function._@param predicate the predicate that applies to the nested router functions_@see RouterFunctions#nest(RequestPredicate, RouterFunction);void endNested(RequestPredicate predicate)_;receive,notification,of,the,end,of,a,nested,router,function,param,predicate,the,predicate,that,applies,to,the,nested,router,functions,see,router,functions,nest,request,predicate,router,function;void,end,nested,request,predicate,predicate
RouterFunctions -> Visitor -> void endNested(RequestPredicate predicate)_;1530177818;Receive notification of the end of a nested router function._@param predicate the predicate that applies to the nested router functions_@see RouterFunctions#nest(RequestPredicate, RouterFunction);void endNested(RequestPredicate predicate)_;receive,notification,of,the,end,of,a,nested,router,function,param,predicate,the,predicate,that,applies,to,the,nested,router,functions,see,router,functions,nest,request,predicate,router,function;void,end,nested,request,predicate,predicate
RouterFunctions -> Visitor -> void endNested(RequestPredicate predicate)_;1530187774;Receive notification of the end of a nested router function._@param predicate the predicate that applies to the nested router functions_@see RouterFunctions#nest(RequestPredicate, RouterFunction);void endNested(RequestPredicate predicate)_;receive,notification,of,the,end,of,a,nested,router,function,param,predicate,the,predicate,that,applies,to,the,nested,router,functions,see,router,functions,nest,request,predicate,router,function;void,end,nested,request,predicate,predicate
RouterFunctions -> Visitor -> void endNested(RequestPredicate predicate)_;1530793633;Receive notification of the end of a nested router function._@param predicate the predicate that applies to the nested router functions_@see RouterFunctions#nest(RequestPredicate, RouterFunction);void endNested(RequestPredicate predicate)_;receive,notification,of,the,end,of,a,nested,router,function,param,predicate,the,predicate,that,applies,to,the,nested,router,functions,see,router,functions,nest,request,predicate,router,function;void,end,nested,request,predicate,predicate
RouterFunctions -> Visitor -> void endNested(RequestPredicate predicate)_;1530871268;Receive notification of the end of a nested router function._@param predicate the predicate that applies to the nested router functions_@see RouterFunctions#nest(RequestPredicate, RouterFunction);void endNested(RequestPredicate predicate)_;receive,notification,of,the,end,of,a,nested,router,function,param,predicate,the,predicate,that,applies,to,the,nested,router,functions,see,router,functions,nest,request,predicate,router,function;void,end,nested,request,predicate,predicate
RouterFunctions -> Visitor -> void endNested(RequestPredicate predicate)_;1530877097;Receive notification of the end of a nested router function._@param predicate the predicate that applies to the nested router functions_@see RouterFunctions#nest(RequestPredicate, RouterFunction);void endNested(RequestPredicate predicate)_;receive,notification,of,the,end,of,a,nested,router,function,param,predicate,the,predicate,that,applies,to,the,nested,router,functions,see,router,functions,nest,request,predicate,router,function;void,end,nested,request,predicate,predicate
RouterFunctions -> Visitor -> void endNested(RequestPredicate predicate)_;1530880709;Receive notification of the end of a nested router function._@param predicate the predicate that applies to the nested router functions_@see RouterFunctions#nest(RequestPredicate, RouterFunction);void endNested(RequestPredicate predicate)_;receive,notification,of,the,end,of,a,nested,router,function,param,predicate,the,predicate,that,applies,to,the,nested,router,functions,see,router,functions,nest,request,predicate,router,function;void,end,nested,request,predicate,predicate
RouterFunctions -> Visitor -> void endNested(RequestPredicate predicate)_;1537188605;Receive notification of the end of a nested router function._@param predicate the predicate that applies to the nested router functions_@see RouterFunctions#nest(RequestPredicate, RouterFunction);void endNested(RequestPredicate predicate)_;receive,notification,of,the,end,of,a,nested,router,function,param,predicate,the,predicate,that,applies,to,the,nested,router,functions,see,router,functions,nest,request,predicate,router,function;void,end,nested,request,predicate,predicate
RouterFunctions -> Visitor -> void endNested(RequestPredicate predicate)_;1538664611;Receive notification of the end of a nested router function._@param predicate the predicate that applies to the nested router functions_@see RouterFunctions#nest(RequestPredicate, RouterFunction);void endNested(RequestPredicate predicate)_;receive,notification,of,the,end,of,a,nested,router,function,param,predicate,the,predicate,that,applies,to,the,nested,router,functions,see,router,functions,nest,request,predicate,router,function;void,end,nested,request,predicate,predicate
RouterFunctions -> Visitor -> void endNested(RequestPredicate predicate)_;1539866925;Receive notification of the end of a nested router function._@param predicate the predicate that applies to the nested router functions_@see RouterFunctions#nest(RequestPredicate, RouterFunction);void endNested(RequestPredicate predicate)_;receive,notification,of,the,end,of,a,nested,router,function,param,predicate,the,predicate,that,applies,to,the,nested,router,functions,see,router,functions,nest,request,predicate,router,function;void,end,nested,request,predicate,predicate
RouterFunctions -> Builder -> Builder routeGet(HandlerFunction<ServerResponse> handlerFunction)_;1530177818;Adds a route to the given handler function that handles all HTTP {@code GET} requests._@param handlerFunction the handler function to handle all {@code GET} requests_@return this builder;Builder routeGet(HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,get,requests,param,handler,function,the,handler,function,to,handle,all,code,get,requests,return,this,builder;builder,route,get,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder routeGet(HandlerFunction<ServerResponse> handlerFunction)_;1530187774;Adds a route to the given handler function that handles all HTTP {@code GET} requests._@param handlerFunction the handler function to handle all {@code GET} requests_@return this builder;Builder routeGet(HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,get,requests,param,handler,function,the,handler,function,to,handle,all,code,get,requests,return,this,builder;builder,route,get,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder routeGet(HandlerFunction<ServerResponse> handlerFunction)_;1530793633;Adds a route to the given handler function that handles all HTTP {@code GET} requests._@param handlerFunction the handler function to handle all {@code GET} requests_@return this builder;Builder routeGet(HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,get,requests,param,handler,function,the,handler,function,to,handle,all,code,get,requests,return,this,builder;builder,route,get,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder GET(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530871268;Adds a route to the given handler function that handles all HTTP {@code GET} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code GET} requests that_match {@code pattern}_@return this builder;Builder GET(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,get,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,get,requests,that,match,code,pattern,return,this,builder;builder,get,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder GET(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530877097;Adds a route to the given handler function that handles all HTTP {@code GET} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code GET} requests that_match {@code pattern}_@return this builder;Builder GET(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,get,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,get,requests,that,match,code,pattern,return,this,builder;builder,get,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder GET(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530880709;Adds a route to the given handler function that handles all HTTP {@code GET} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code GET} requests that_match {@code pattern}_@return this builder;Builder GET(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,get,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,get,requests,that,match,code,pattern,return,this,builder;builder,get,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder GET(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1537188605;Adds a route to the given handler function that handles all HTTP {@code GET} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code GET} requests that_match {@code pattern}_@return this builder;Builder GET(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,get,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,get,requests,that,match,code,pattern,return,this,builder;builder,get,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder GET(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1538664611;Adds a route to the given handler function that handles all HTTP {@code GET} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code GET} requests that_match {@code pattern}_@return this builder;Builder GET(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,get,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,get,requests,that,match,code,pattern,return,this,builder;builder,get,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder GET(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1539866925;Adds a route to the given handler function that handles all HTTP {@code GET} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code GET} requests that_match {@code pattern}_@return this builder;Builder GET(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,get,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,get,requests,that,match,code,pattern,return,this,builder;builder,get,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> public static Builder builder();1530177818;Return a {@linkplain Builder builder} that offers a discoverable way to create router_functions._@return a router function builder;public static Builder builder() {_		return new RouterFunctionBuilder()__	};return,a,linkplain,builder,builder,that,offers,a,discoverable,way,to,create,router,functions,return,a,router,function,builder;public,static,builder,builder,return,new,router,function,builder
RouterFunctions -> public static Builder builder();1530187774;Return a {@linkplain Builder builder} that offers a discoverable way to create router_functions._@return a router function builder;public static Builder builder() {_		return new RouterFunctionBuilder()__	};return,a,linkplain,builder,builder,that,offers,a,discoverable,way,to,create,router,functions,return,a,router,function,builder;public,static,builder,builder,return,new,router,function,builder
RouterFunctions -> public static Builder builder();1530793633;Return a {@linkplain Builder builder} that offers a discoverable way to create router_functions._@return a router function builder;public static Builder builder() {_		return new RouterFunctionBuilder()__	};return,a,linkplain,builder,builder,that,offers,a,discoverable,way,to,create,router,functions,return,a,router,function,builder;public,static,builder,builder,return,new,router,function,builder
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1494495900;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler},_using the given strategies._<p>The returned {@code HttpHandler} can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_@param routerFunction the router function to convert_@param strategies the strategies to use_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		WebHandler webHandler = exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies.messageReaders())__			addAttributes(exchange, request)__			return routerFunction.route(request)_					.defaultIfEmpty(notFound())_					.flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request)))_					.flatMap(response -> wrapException(() -> response.writeTo(exchange, strategies)))__		}___		WebHttpHandlerBuilder handlerBuilder = WebHttpHandlerBuilder.webHandler(webHandler)__		strategies.webFilters().get().forEach(handlerBuilder::filter)__		strategies.exceptionHandlers().get().forEach(handlerBuilder::exceptionHandler)__		return handlerBuilder.build()__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,using,the,given,strategies,p,the,returned,code,http,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,web,handler,web,handler,exchange,server,request,request,new,default,server,request,exchange,strategies,message,readers,add,attributes,exchange,request,return,router,function,route,request,default,if,empty,not,found,flat,map,handler,function,wrap,exception,handler,function,handle,request,flat,map,response,wrap,exception,response,write,to,exchange,strategies,web,http,handler,builder,handler,builder,web,http,handler,builder,web,handler,web,handler,strategies,web,filters,get,for,each,handler,builder,filter,strategies,exception,handlers,get,for,each,handler,builder,exception,handler,return,handler,builder,build
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1495618935;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler},_using the given strategies._<p>The returned {@code HttpHandler} can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_@param routerFunction the router function to convert_@param strategies the strategies to use_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		WebHandler webHandler = toWebHandler(routerFunction, strategies)__		WebHttpHandlerBuilder handlerBuilder = WebHttpHandlerBuilder.webHandler(webHandler)__		strategies.webFilters().get().forEach(handlerBuilder::filter)__		strategies.exceptionHandlers().get().forEach(handlerBuilder::exceptionHandler)__		return handlerBuilder.build()__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,using,the,given,strategies,p,the,returned,code,http,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,web,handler,web,handler,to,web,handler,router,function,strategies,web,http,handler,builder,handler,builder,web,http,handler,builder,web,handler,web,handler,strategies,web,filters,get,for,each,handler,builder,filter,strategies,exception,handlers,get,for,each,handler,builder,exception,handler,return,handler,builder,build
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1495626483;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler},_using the given strategies._<p>The returned {@code HttpHandler} can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_@param routerFunction the router function to convert_@param strategies the strategies to use_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		WebHandler webHandler = toWebHandler(routerFunction, strategies)__		return WebHttpHandlerBuilder.webHandler(webHandler)_				.filters(strategies.webFilters())_				.exceptionHandlers(strategies.exceptionHandlers())_				.build()__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,using,the,given,strategies,p,the,returned,code,http,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,web,handler,web,handler,to,web,handler,router,function,strategies,return,web,http,handler,builder,web,handler,web,handler,filters,strategies,web,filters,exception,handlers,strategies,exception,handlers,build
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1497359418;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler},_using the given strategies._<p>The returned {@code HttpHandler} can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_@param routerFunction the router function to convert_@param strategies the strategies to use_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		WebHandler webHandler = toWebHandler(routerFunction, strategies)__		return WebHttpHandlerBuilder.webHandler(webHandler)_				.filters(strategies.webFilters())_				.exceptionHandlers(strategies.exceptionHandlers())_				.localeContextResolver(strategies.localeContextResolver())_				.build()__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,using,the,given,strategies,p,the,returned,code,http,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,web,handler,web,handler,to,web,handler,router,function,strategies,return,web,http,handler,builder,web,handler,web,handler,filters,strategies,web,filters,exception,handlers,strategies,exception,handlers,locale,context,resolver,strategies,locale,context,resolver,build
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1498216330;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler},_using the given strategies._<p>The returned {@code HttpHandler} can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_@param routerFunction the router function to convert_@param strategies the strategies to use_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		WebHandler webHandler = toWebHandler(routerFunction, strategies)__		return WebHttpHandlerBuilder.webHandler(webHandler)_				.filters(filters -> filters.addAll(strategies.webFilters()))_				.exceptionHandlers(handlers -> handlers.addAll(strategies.exceptionHandlers()))_				.localeContextResolver(strategies.localeContextResolver())_				.build()__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,using,the,given,strategies,p,the,returned,code,http,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,web,handler,web,handler,to,web,handler,router,function,strategies,return,web,http,handler,builder,web,handler,web,handler,filters,filters,filters,add,all,strategies,web,filters,exception,handlers,handlers,handlers,add,all,strategies,exception,handlers,locale,context,resolver,strategies,locale,context,resolver,build
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1501161935;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler},_using the given strategies._<p>The returned {@code HttpHandler} can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_@param routerFunction the router function to convert_@param strategies the strategies to use_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		WebHandler webHandler = toWebHandler(routerFunction, strategies)__		return WebHttpHandlerBuilder.webHandler(webHandler)_				.filters(filters -> filters.addAll(strategies.webFilters()))_				.exceptionHandlers(handlers -> handlers.addAll(strategies.exceptionHandlers()))_				.localeContextResolver(strategies.localeContextResolver())_				.build()__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,using,the,given,strategies,p,the,returned,code,http,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,web,handler,web,handler,to,web,handler,router,function,strategies,return,web,http,handler,builder,web,handler,web,handler,filters,filters,filters,add,all,strategies,web,filters,exception,handlers,handlers,handlers,add,all,strategies,exception,handlers,locale,context,resolver,strategies,locale,context,resolver,build
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1506081789;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler},_using the given strategies._<p>The returned {@code HttpHandler} can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_@param routerFunction the router function to convert_@param strategies the strategies to use_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		WebHandler webHandler = toWebHandler(routerFunction, strategies)__		return WebHttpHandlerBuilder.webHandler(webHandler)_				.filters(filters -> filters.addAll(strategies.webFilters()))_				.exceptionHandlers(handlers -> handlers.addAll(strategies.exceptionHandlers()))_				.localeContextResolver(strategies.localeContextResolver())_				.build()__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,using,the,given,strategies,p,the,returned,code,http,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,web,handler,web,handler,to,web,handler,router,function,strategies,return,web,http,handler,builder,web,handler,web,handler,filters,filters,filters,add,all,strategies,web,filters,exception,handlers,handlers,handlers,add,all,strategies,exception,handlers,locale,context,resolver,strategies,locale,context,resolver,build
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1520528267;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler},_using the given strategies._<p>The returned {@code HttpHandler} can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_@param routerFunction the router function to convert_@param strategies the strategies to use_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		WebHandler webHandler = toWebHandler(routerFunction, strategies)__		return WebHttpHandlerBuilder.webHandler(webHandler)_				.filters(filters -> filters.addAll(strategies.webFilters()))_				.exceptionHandlers(handlers -> handlers.addAll(strategies.exceptionHandlers()))_				.localeContextResolver(strategies.localeContextResolver())_				.build()__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,using,the,given,strategies,p,the,returned,code,http,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,web,handler,web,handler,to,web,handler,router,function,strategies,return,web,http,handler,builder,web,handler,web,handler,filters,filters,filters,add,all,strategies,web,filters,exception,handlers,handlers,handlers,add,all,strategies,exception,handlers,locale,context,resolver,strategies,locale,context,resolver,build
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1524865018;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler},_using the given strategies._<p>The returned {@code HttpHandler} can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_@param routerFunction the router function to convert_@param strategies the strategies to use_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		WebHandler webHandler = toWebHandler(routerFunction, strategies)__		return WebHttpHandlerBuilder.webHandler(webHandler)_				.filters(filters -> filters.addAll(strategies.webFilters()))_				.exceptionHandlers(handlers -> handlers.addAll(strategies.exceptionHandlers()))_				.localeContextResolver(strategies.localeContextResolver())_				.build()__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,using,the,given,strategies,p,the,returned,code,http,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,handler,strategies,strategies,web,handler,web,handler,to,web,handler,router,function,strategies,return,web,http,handler,builder,web,handler,web,handler,filters,filters,filters,add,all,strategies,web,filters,exception,handlers,handlers,handlers,add,all,strategies,exception,handlers,locale,context,resolver,strategies,locale,context,resolver,build
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1525433784;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler},_using the given strategies._<p>The returned {@code HttpHandler} can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_@param routerFunction the router function to convert_@param strategies the strategies to use_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		WebHandler webHandler = toWebHandler(routerFunction, strategies)__		return WebHttpHandlerBuilder.webHandler(webHandler)_				.filters(filters -> filters.addAll(strategies.webFilters()))_				.exceptionHandlers(handlers -> handlers.addAll(strategies.exceptionHandlers()))_				.localeContextResolver(strategies.localeContextResolver())_				.build()__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,using,the,given,strategies,p,the,returned,code,http,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,handler,strategies,strategies,web,handler,web,handler,to,web,handler,router,function,strategies,return,web,http,handler,builder,web,handler,web,handler,filters,filters,filters,add,all,strategies,web,filters,exception,handlers,handlers,handlers,add,all,strategies,exception,handlers,locale,context,resolver,strategies,locale,context,resolver,build
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1526553177;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler},_using the given strategies._<p>The returned {@code HttpHandler} can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_@param routerFunction the router function to convert_@param strategies the strategies to use_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		WebHandler webHandler = toWebHandler(routerFunction, strategies)__		return WebHttpHandlerBuilder.webHandler(webHandler)_				.filters(filters -> filters.addAll(strategies.webFilters()))_				.exceptionHandlers(handlers -> handlers.addAll(strategies.exceptionHandlers()))_				.localeContextResolver(strategies.localeContextResolver())_				.build()__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,using,the,given,strategies,p,the,returned,code,http,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,handler,strategies,strategies,web,handler,web,handler,to,web,handler,router,function,strategies,return,web,http,handler,builder,web,handler,web,handler,filters,filters,filters,add,all,strategies,web,filters,exception,handlers,handlers,handlers,add,all,strategies,exception,handlers,locale,context,resolver,strategies,locale,context,resolver,build
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1527601711;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler},_using the given strategies._<p>The returned {@code HttpHandler} can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_@param routerFunction the router function to convert_@param strategies the strategies to use_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		WebHandler webHandler = toWebHandler(routerFunction, strategies)__		return WebHttpHandlerBuilder.webHandler(webHandler)_				.filters(filters -> filters.addAll(strategies.webFilters()))_				.exceptionHandlers(handlers -> handlers.addAll(strategies.exceptionHandlers()))_				.localeContextResolver(strategies.localeContextResolver())_				.build()__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,using,the,given,strategies,p,the,returned,code,http,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,handler,strategies,strategies,web,handler,web,handler,to,web,handler,router,function,strategies,return,web,http,handler,builder,web,handler,web,handler,filters,filters,filters,add,all,strategies,web,filters,exception,handlers,handlers,handlers,add,all,strategies,exception,handlers,locale,context,resolver,strategies,locale,context,resolver,build
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1529721864;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler},_using the given strategies._<p>The returned {@code HttpHandler} can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_@param routerFunction the router function to convert_@param strategies the strategies to use_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		WebHandler webHandler = toWebHandler(routerFunction, strategies)__		return WebHttpHandlerBuilder.webHandler(webHandler)_				.filters(filters -> filters.addAll(strategies.webFilters()))_				.exceptionHandlers(handlers -> handlers.addAll(strategies.exceptionHandlers()))_				.localeContextResolver(strategies.localeContextResolver())_				.build()__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,using,the,given,strategies,p,the,returned,code,http,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,handler,strategies,strategies,web,handler,web,handler,to,web,handler,router,function,strategies,return,web,http,handler,builder,web,handler,web,handler,filters,filters,filters,add,all,strategies,web,filters,exception,handlers,handlers,handlers,add,all,strategies,exception,handlers,locale,context,resolver,strategies,locale,context,resolver,build
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1530174524;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler},_using the given strategies._<p>The returned {@code HttpHandler} can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_@param routerFunction the router function to convert_@param strategies the strategies to use_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		WebHandler webHandler = toWebHandler(routerFunction, strategies)__		return WebHttpHandlerBuilder.webHandler(webHandler)_				.filters(filters -> filters.addAll(strategies.webFilters()))_				.exceptionHandlers(handlers -> handlers.addAll(strategies.exceptionHandlers()))_				.localeContextResolver(strategies.localeContextResolver())_				.build()__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,using,the,given,strategies,p,the,returned,code,http,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,handler,strategies,strategies,web,handler,web,handler,to,web,handler,router,function,strategies,return,web,http,handler,builder,web,handler,web,handler,filters,filters,filters,add,all,strategies,web,filters,exception,handlers,handlers,handlers,add,all,strategies,exception,handlers,locale,context,resolver,strategies,locale,context,resolver,build
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1530174524;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler},_using the given strategies._<p>The returned {@code HttpHandler} can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_@param routerFunction the router function to convert_@param strategies the strategies to use_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		WebHandler webHandler = toWebHandler(routerFunction, strategies)__		return WebHttpHandlerBuilder.webHandler(webHandler)_				.filters(filters -> filters.addAll(strategies.webFilters()))_				.exceptionHandlers(handlers -> handlers.addAll(strategies.exceptionHandlers()))_				.localeContextResolver(strategies.localeContextResolver())_				.build()__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,using,the,given,strategies,p,the,returned,code,http,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,handler,strategies,strategies,web,handler,web,handler,to,web,handler,router,function,strategies,return,web,http,handler,builder,web,handler,web,handler,filters,filters,filters,add,all,strategies,web,filters,exception,handlers,handlers,handlers,add,all,strategies,exception,handlers,locale,context,resolver,strategies,locale,context,resolver,build
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1530177818;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler},_using the given strategies._<p>The returned {@code HttpHandler} can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_@param routerFunction the router function to convert_@param strategies the strategies to use_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		WebHandler webHandler = toWebHandler(routerFunction, strategies)__		return WebHttpHandlerBuilder.webHandler(webHandler)_				.filters(filters -> filters.addAll(strategies.webFilters()))_				.exceptionHandlers(handlers -> handlers.addAll(strategies.exceptionHandlers()))_				.localeContextResolver(strategies.localeContextResolver())_				.build()__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,using,the,given,strategies,p,the,returned,code,http,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,handler,strategies,strategies,web,handler,web,handler,to,web,handler,router,function,strategies,return,web,http,handler,builder,web,handler,web,handler,filters,filters,filters,add,all,strategies,web,filters,exception,handlers,handlers,handlers,add,all,strategies,exception,handlers,locale,context,resolver,strategies,locale,context,resolver,build
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1530187774;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler},_using the given strategies._<p>The returned {@code HttpHandler} can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_@param routerFunction the router function to convert_@param strategies the strategies to use_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		WebHandler webHandler = toWebHandler(routerFunction, strategies)__		return WebHttpHandlerBuilder.webHandler(webHandler)_				.filters(filters -> filters.addAll(strategies.webFilters()))_				.exceptionHandlers(handlers -> handlers.addAll(strategies.exceptionHandlers()))_				.localeContextResolver(strategies.localeContextResolver())_				.build()__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,using,the,given,strategies,p,the,returned,code,http,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,handler,strategies,strategies,web,handler,web,handler,to,web,handler,router,function,strategies,return,web,http,handler,builder,web,handler,web,handler,filters,filters,filters,add,all,strategies,web,filters,exception,handlers,handlers,handlers,add,all,strategies,exception,handlers,locale,context,resolver,strategies,locale,context,resolver,build
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1530793633;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler},_using the given strategies._<p>The returned {@code HttpHandler} can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_@param routerFunction the router function to convert_@param strategies the strategies to use_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		WebHandler webHandler = toWebHandler(routerFunction, strategies)__		return WebHttpHandlerBuilder.webHandler(webHandler)_				.filters(filters -> filters.addAll(strategies.webFilters()))_				.exceptionHandlers(handlers -> handlers.addAll(strategies.exceptionHandlers()))_				.localeContextResolver(strategies.localeContextResolver())_				.build()__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,using,the,given,strategies,p,the,returned,code,http,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,handler,strategies,strategies,web,handler,web,handler,to,web,handler,router,function,strategies,return,web,http,handler,builder,web,handler,web,handler,filters,filters,filters,add,all,strategies,web,filters,exception,handlers,handlers,handlers,add,all,strategies,exception,handlers,locale,context,resolver,strategies,locale,context,resolver,build
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1530871268;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler},_using the given strategies._<p>The returned {@code HttpHandler} can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_@param routerFunction the router function to convert_@param strategies the strategies to use_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		WebHandler webHandler = toWebHandler(routerFunction, strategies)__		return WebHttpHandlerBuilder.webHandler(webHandler)_				.filters(filters -> filters.addAll(strategies.webFilters()))_				.exceptionHandlers(handlers -> handlers.addAll(strategies.exceptionHandlers()))_				.localeContextResolver(strategies.localeContextResolver())_				.build()__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,using,the,given,strategies,p,the,returned,code,http,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,handler,strategies,strategies,web,handler,web,handler,to,web,handler,router,function,strategies,return,web,http,handler,builder,web,handler,web,handler,filters,filters,filters,add,all,strategies,web,filters,exception,handlers,handlers,handlers,add,all,strategies,exception,handlers,locale,context,resolver,strategies,locale,context,resolver,build
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1530877097;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler},_using the given strategies._<p>The returned {@code HttpHandler} can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_@param routerFunction the router function to convert_@param strategies the strategies to use_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		WebHandler webHandler = toWebHandler(routerFunction, strategies)__		return WebHttpHandlerBuilder.webHandler(webHandler)_				.filters(filters -> filters.addAll(strategies.webFilters()))_				.exceptionHandlers(handlers -> handlers.addAll(strategies.exceptionHandlers()))_				.localeContextResolver(strategies.localeContextResolver())_				.build()__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,using,the,given,strategies,p,the,returned,code,http,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,handler,strategies,strategies,web,handler,web,handler,to,web,handler,router,function,strategies,return,web,http,handler,builder,web,handler,web,handler,filters,filters,filters,add,all,strategies,web,filters,exception,handlers,handlers,handlers,add,all,strategies,exception,handlers,locale,context,resolver,strategies,locale,context,resolver,build
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1530880709;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler},_using the given strategies._<p>The returned {@code HttpHandler} can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_@param routerFunction the router function to convert_@param strategies the strategies to use_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		WebHandler webHandler = toWebHandler(routerFunction, strategies)__		return WebHttpHandlerBuilder.webHandler(webHandler)_				.filters(filters -> filters.addAll(strategies.webFilters()))_				.exceptionHandlers(handlers -> handlers.addAll(strategies.exceptionHandlers()))_				.localeContextResolver(strategies.localeContextResolver())_				.build()__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,using,the,given,strategies,p,the,returned,code,http,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,handler,strategies,strategies,web,handler,web,handler,to,web,handler,router,function,strategies,return,web,http,handler,builder,web,handler,web,handler,filters,filters,filters,add,all,strategies,web,filters,exception,handlers,handlers,handlers,add,all,strategies,exception,handlers,locale,context,resolver,strategies,locale,context,resolver,build
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1537188605;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler},_using the given strategies._<p>The returned {@code HttpHandler} can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_@param routerFunction the router function to convert_@param strategies the strategies to use_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		WebHandler webHandler = toWebHandler(routerFunction, strategies)__		return WebHttpHandlerBuilder.webHandler(webHandler)_				.filters(filters -> filters.addAll(strategies.webFilters()))_				.exceptionHandlers(handlers -> handlers.addAll(strategies.exceptionHandlers()))_				.localeContextResolver(strategies.localeContextResolver())_				.build()__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,using,the,given,strategies,p,the,returned,code,http,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,handler,strategies,strategies,web,handler,web,handler,to,web,handler,router,function,strategies,return,web,http,handler,builder,web,handler,web,handler,filters,filters,filters,add,all,strategies,web,filters,exception,handlers,handlers,handlers,add,all,strategies,exception,handlers,locale,context,resolver,strategies,locale,context,resolver,build
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1538664611;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler},_using the given strategies._<p>The returned {@code HttpHandler} can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_@param routerFunction the router function to convert_@param strategies the strategies to use_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		WebHandler webHandler = toWebHandler(routerFunction, strategies)__		return WebHttpHandlerBuilder.webHandler(webHandler)_				.filters(filters -> filters.addAll(strategies.webFilters()))_				.exceptionHandlers(handlers -> handlers.addAll(strategies.exceptionHandlers()))_				.localeContextResolver(strategies.localeContextResolver())_				.build()__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,using,the,given,strategies,p,the,returned,code,http,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,handler,strategies,strategies,web,handler,web,handler,to,web,handler,router,function,strategies,return,web,http,handler,builder,web,handler,web,handler,filters,filters,filters,add,all,strategies,web,filters,exception,handlers,handlers,handlers,add,all,strategies,exception,handlers,locale,context,resolver,strategies,locale,context,resolver,build
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1539866925;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler},_using the given strategies._<p>The returned {@code HttpHandler} can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_@param routerFunction the router function to convert_@param strategies the strategies to use_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		WebHandler webHandler = toWebHandler(routerFunction, strategies)__		return WebHttpHandlerBuilder.webHandler(webHandler)_				.filters(filters -> filters.addAll(strategies.webFilters()))_				.exceptionHandlers(handlers -> handlers.addAll(strategies.exceptionHandlers()))_				.localeContextResolver(strategies.localeContextResolver())_				.build()__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,using,the,given,strategies,p,the,returned,code,http,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,handler,strategies,strategies,web,handler,web,handler,to,web,handler,router,function,strategies,return,web,http,handler,builder,web,handler,web,handler,filters,filters,filters,add,all,strategies,web,filters,exception,handlers,handlers,handlers,add,all,strategies,exception,handlers,locale,context,resolver,strategies,locale,context,resolver,build
RouterFunctions -> Builder -> Builder routePut(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530177818;Adds a route to the given handler function that handles all HTTP {@code PUT} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code PUT} requests that_match {@code pattern}_@return this builder;Builder routePut(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,put,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,put,requests,that,match,code,pattern,return,this,builder;builder,route,put,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder routePut(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530187774;Adds a route to the given handler function that handles all HTTP {@code PUT} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code PUT} requests that_match {@code pattern}_@return this builder;Builder routePut(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,put,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,put,requests,that,match,code,pattern,return,this,builder;builder,route,put,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder routePut(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530793633;Adds a route to the given handler function that handles all HTTP {@code PUT} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code PUT} requests that_match {@code pattern}_@return this builder;Builder routePut(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,put,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,put,requests,that,match,code,pattern,return,this,builder;builder,route,put,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction);1485986572;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction) {_		Assert.notNull(lookupFunction, "'lookupFunction' must not be null")___		return request -> lookupFunction.apply(request).map(ResourceHandlerFunction::new)__	};route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,function,server,request,mono,resource,lookup,function,assert,not,null,lookup,function,lookup,function,must,not,be,null,return,request,lookup,function,apply,request,map,resource,handler,function,new
RouterFunctions -> public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction);1487250745;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction) {_		Assert.notNull(lookupFunction, "'lookupFunction' must not be null")___		return request -> lookupFunction.apply(request).map(ResourceHandlerFunction::new)__	};route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,function,server,request,mono,resource,lookup,function,assert,not,null,lookup,function,lookup,function,must,not,be,null,return,request,lookup,function,apply,request,map,resource,handler,function,new
RouterFunctions -> public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction);1487584763;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction) {_		Assert.notNull(lookupFunction, "'lookupFunction' must not be null")___		return request -> lookupFunction.apply(request).map(ResourceHandlerFunction::new)__	};route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,function,server,request,mono,resource,lookup,function,assert,not,null,lookup,function,lookup,function,must,not,be,null,return,request,lookup,function,apply,request,map,resource,handler,function,new
RouterFunctions -> public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction);1487687241;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction) {_		Assert.notNull(lookupFunction, "'lookupFunction' must not be null")__		return request -> lookupFunction.apply(request).map(ResourceHandlerFunction::new)__	};route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,function,server,request,mono,resource,lookup,function,assert,not,null,lookup,function,lookup,function,must,not,be,null,return,request,lookup,function,apply,request,map,resource,handler,function,new
RouterFunctions -> public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction);1489653648;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction) {_		Assert.notNull(lookupFunction, "'lookupFunction' must not be null")__		return request -> lookupFunction.apply(request).map(ResourceHandlerFunction::new)__	};route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,function,server,request,mono,resource,lookup,function,assert,not,null,lookup,function,lookup,function,must,not,be,null,return,request,lookup,function,apply,request,map,resource,handler,function,new
RouterFunctions -> public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction);1489751412;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction) {_		Assert.notNull(lookupFunction, "'lookupFunction' must not be null")__		return request -> lookupFunction.apply(request).map(ResourceHandlerFunction::new)__	};route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,function,server,request,mono,resource,lookup,function,assert,not,null,lookup,function,lookup,function,must,not,be,null,return,request,lookup,function,apply,request,map,resource,handler,function,new
RouterFunctions -> public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction);1491557115;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction) {_		Assert.notNull(lookupFunction, "'lookupFunction' must not be null")__		return request -> lookupFunction.apply(request).map(ResourceHandlerFunction::new)__	};route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,function,server,request,mono,resource,lookup,function,assert,not,null,lookup,function,lookup,function,must,not,be,null,return,request,lookup,function,apply,request,map,resource,handler,function,new
RouterFunctions -> public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction);1491833276;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction) {_		Assert.notNull(lookupFunction, "'lookupFunction' must not be null")__		return request -> lookupFunction.apply(request).map(ResourceHandlerFunction::new)__	};route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,function,server,request,mono,resource,lookup,function,assert,not,null,lookup,function,lookup,function,must,not,be,null,return,request,lookup,function,apply,request,map,resource,handler,function,new
RouterFunctions -> public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction);1491927184;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction) {_		Assert.notNull(lookupFunction, "'lookupFunction' must not be null")__		return request -> lookupFunction.apply(request).map(ResourceHandlerFunction::new)__	};route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,function,server,request,mono,resource,lookup,function,assert,not,null,lookup,function,lookup,function,must,not,be,null,return,request,lookup,function,apply,request,map,resource,handler,function,new
RouterFunctions -> public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction);1492090594;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction) {_		Assert.notNull(lookupFunction, "'lookupFunction' must not be null")__		return request -> lookupFunction.apply(request).map(ResourceHandlerFunction::new)__	};route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,function,server,request,mono,resource,lookup,function,assert,not,null,lookup,function,lookup,function,must,not,be,null,return,request,lookup,function,apply,request,map,resource,handler,function,new
RouterFunctions -> public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction);1492168700;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction) {_		Assert.notNull(lookupFunction, "'lookupFunction' must not be null")__		return request -> lookupFunction.apply(request).map(ResourceHandlerFunction::new)__	};route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,function,server,request,mono,resource,lookup,function,assert,not,null,lookup,function,lookup,function,must,not,be,null,return,request,lookup,function,apply,request,map,resource,handler,function,new
RouterFunctions -> public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction);1492190322;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction) {_		Assert.notNull(lookupFunction, "'lookupFunction' must not be null")__		return request -> lookupFunction.apply(request).map(ResourceHandlerFunction::new)__	};route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,function,server,request,mono,resource,lookup,function,assert,not,null,lookup,function,lookup,function,must,not,be,null,return,request,lookup,function,apply,request,map,resource,handler,function,new
RouterFunctions -> public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction);1494495900;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction) {_		Assert.notNull(lookupFunction, "'lookupFunction' must not be null")__		return request -> lookupFunction.apply(request).map(ResourceHandlerFunction::new)__	};route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,function,server,request,mono,resource,lookup,function,assert,not,null,lookup,function,lookup,function,must,not,be,null,return,request,lookup,function,apply,request,map,resource,handler,function,new
RouterFunctions -> public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction);1495618935;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction) {_		Assert.notNull(lookupFunction, "'lookupFunction' must not be null")__		return request -> lookupFunction.apply(request).map(ResourceHandlerFunction::new)__	};route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,function,server,request,mono,resource,lookup,function,assert,not,null,lookup,function,lookup,function,must,not,be,null,return,request,lookup,function,apply,request,map,resource,handler,function,new
RouterFunctions -> public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction);1495626483;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction) {_		Assert.notNull(lookupFunction, "'lookupFunction' must not be null")__		return request -> lookupFunction.apply(request).map(ResourceHandlerFunction::new)__	};route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,function,server,request,mono,resource,lookup,function,assert,not,null,lookup,function,lookup,function,must,not,be,null,return,request,lookup,function,apply,request,map,resource,handler,function,new
RouterFunctions -> public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction);1497359418;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction) {_		Assert.notNull(lookupFunction, "'lookupFunction' must not be null")__		return request -> lookupFunction.apply(request).map(ResourceHandlerFunction::new)__	};route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,function,server,request,mono,resource,lookup,function,assert,not,null,lookup,function,lookup,function,must,not,be,null,return,request,lookup,function,apply,request,map,resource,handler,function,new
RouterFunctions -> public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction);1498216330;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction) {_		Assert.notNull(lookupFunction, "'lookupFunction' must not be null")__		return request -> lookupFunction.apply(request).map(ResourceHandlerFunction::new)__	};route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,function,server,request,mono,resource,lookup,function,assert,not,null,lookup,function,lookup,function,must,not,be,null,return,request,lookup,function,apply,request,map,resource,handler,function,new
RouterFunctions -> public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction);1501161935;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction) {_		Assert.notNull(lookupFunction, "'lookupFunction' must not be null")__		return request -> lookupFunction.apply(request).map(ResourceHandlerFunction::new)__	};route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,function,server,request,mono,resource,lookup,function,assert,not,null,lookup,function,lookup,function,must,not,be,null,return,request,lookup,function,apply,request,map,resource,handler,function,new
RouterFunctions -> public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction);1506081789;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction) {_		Assert.notNull(lookupFunction, "'lookupFunction' must not be null")__		return new ResourcesRouterFunction(lookupFunction)__	};route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,function,server,request,mono,resource,lookup,function,assert,not,null,lookup,function,lookup,function,must,not,be,null,return,new,resources,router,function,lookup,function
RouterFunctions -> public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction);1520528267;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction) {_		Assert.notNull(lookupFunction, "'lookupFunction' must not be null")__		return new ResourcesRouterFunction(lookupFunction)__	};route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,function,server,request,mono,resource,lookup,function,assert,not,null,lookup,function,lookup,function,must,not,be,null,return,new,resources,router,function,lookup,function
RouterFunctions -> public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction);1524865018;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction) {_		return new ResourcesRouterFunction(lookupFunction)__	};route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,function,server,request,mono,resource,lookup,function,return,new,resources,router,function,lookup,function
RouterFunctions -> public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction);1525433784;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction) {_		return new ResourcesRouterFunction(lookupFunction)__	};route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,function,server,request,mono,resource,lookup,function,return,new,resources,router,function,lookup,function
RouterFunctions -> public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction);1526553177;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction) {_		return new ResourcesRouterFunction(lookupFunction)__	};route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,function,server,request,mono,resource,lookup,function,return,new,resources,router,function,lookup,function
RouterFunctions -> public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction);1527601711;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction) {_		return new ResourcesRouterFunction(lookupFunction)__	};route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,function,server,request,mono,resource,lookup,function,return,new,resources,router,function,lookup,function
RouterFunctions -> public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction);1529721864;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction) {_		return new ResourcesRouterFunction(lookupFunction)__	};route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,function,server,request,mono,resource,lookup,function,return,new,resources,router,function,lookup,function
RouterFunctions -> public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction);1530174524;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction) {_		return new ResourcesRouterFunction(lookupFunction)__	};route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,function,server,request,mono,resource,lookup,function,return,new,resources,router,function,lookup,function
RouterFunctions -> public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction);1530174524;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction) {_		return new ResourcesRouterFunction(lookupFunction)__	};route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,function,server,request,mono,resource,lookup,function,return,new,resources,router,function,lookup,function
RouterFunctions -> public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction);1530177818;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction) {_		return new ResourcesRouterFunction(lookupFunction)__	};route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,function,server,request,mono,resource,lookup,function,return,new,resources,router,function,lookup,function
RouterFunctions -> public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction);1530187774;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction) {_		return new ResourcesRouterFunction(lookupFunction)__	};route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,function,server,request,mono,resource,lookup,function,return,new,resources,router,function,lookup,function
RouterFunctions -> public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction);1530793633;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction) {_		return new ResourcesRouterFunction(lookupFunction)__	};route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,function,server,request,mono,resource,lookup,function,return,new,resources,router,function,lookup,function
RouterFunctions -> public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction);1530871268;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction) {_		return new ResourcesRouterFunction(lookupFunction)__	};route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,function,server,request,mono,resource,lookup,function,return,new,resources,router,function,lookup,function
RouterFunctions -> public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction);1530877097;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction) {_		return new ResourcesRouterFunction(lookupFunction)__	};route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,function,server,request,mono,resource,lookup,function,return,new,resources,router,function,lookup,function
RouterFunctions -> public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction);1530880709;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction) {_		return new ResourcesRouterFunction(lookupFunction)__	};route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,function,server,request,mono,resource,lookup,function,return,new,resources,router,function,lookup,function
RouterFunctions -> public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction);1537188605;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction) {_		return new ResourcesRouterFunction(lookupFunction)__	};route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,function,server,request,mono,resource,lookup,function,return,new,resources,router,function,lookup,function
RouterFunctions -> public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction);1538664611;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction) {_		return new ResourcesRouterFunction(lookupFunction)__	};route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,function,server,request,mono,resource,lookup,function,return,new,resources,router,function,lookup,function
RouterFunctions -> public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction);1539866925;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return a router function that routes to resources;public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Mono<Resource>> lookupFunction) {_		return new ResourcesRouterFunction(lookupFunction)__	};route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,a,router,function,that,routes,to,resources;public,static,router,function,server,response,resources,function,server,request,mono,resource,lookup,function,return,new,resources,router,function,lookup,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> nest( 			RequestPredicate predicate, RouterFunction<T> routerFunction);1524865018;Route to the given router function if the given request predicate applies. This method can be_used to create <strong>nested routes</strong>, where a group of routes share a common path_(prefix), header, or other request predicate._<p>For instance, the following example first creates a composed route that resolves to_{@code listUsers} for a GET, and {@code createUser} for a POST. This composed route then gets_nested with a "/user" path predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ userRoutes =_RouterFunctions.route(RequestPredicates.method(HttpMethod.GET), this::listUsers)_.andRoute(RequestPredicates.method(HttpMethod.POST), this::createUser)___RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.nest(RequestPredicates.path("/user"),userRoutes)__</pre>_@param predicate the predicate to test_@param routerFunction the nested router function to delegate to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code routerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> nest(_			RequestPredicate predicate, RouterFunction<T> routerFunction) {__		return new DefaultNestedRouterFunction<>(predicate, routerFunction)__	};route,to,the,given,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,first,creates,a,composed,route,that,resolves,to,code,list,users,for,a,get,and,code,create,user,for,a,post,this,composed,route,then,gets,nested,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,user,routes,router,functions,route,request,predicates,method,http,method,get,this,list,users,and,route,request,predicates,method,http,method,post,this,create,user,router,function,lt,server,response,gt,nested,route,router,functions,nest,request,predicates,path,user,user,routes,pre,param,predicate,the,predicate,to,test,param,router,function,the,nested,router,function,to,delegate,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,router,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,nest,request,predicate,predicate,router,function,t,router,function,return,new,default,nested,router,function,predicate,router,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> nest( 			RequestPredicate predicate, RouterFunction<T> routerFunction);1525433784;Route to the given router function if the given request predicate applies. This method can be_used to create <strong>nested routes</strong>, where a group of routes share a common path_(prefix), header, or other request predicate._<p>For instance, the following example first creates a composed route that resolves to_{@code listUsers} for a GET, and {@code createUser} for a POST. This composed route then gets_nested with a "/user" path predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ userRoutes =_RouterFunctions.route(RequestPredicates.method(HttpMethod.GET), this::listUsers)_.andRoute(RequestPredicates.method(HttpMethod.POST), this::createUser)___RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.nest(RequestPredicates.path("/user"),userRoutes)__</pre>_@param predicate the predicate to test_@param routerFunction the nested router function to delegate to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code routerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> nest(_			RequestPredicate predicate, RouterFunction<T> routerFunction) {__		return new DefaultNestedRouterFunction<>(predicate, routerFunction)__	};route,to,the,given,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,first,creates,a,composed,route,that,resolves,to,code,list,users,for,a,get,and,code,create,user,for,a,post,this,composed,route,then,gets,nested,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,user,routes,router,functions,route,request,predicates,method,http,method,get,this,list,users,and,route,request,predicates,method,http,method,post,this,create,user,router,function,lt,server,response,gt,nested,route,router,functions,nest,request,predicates,path,user,user,routes,pre,param,predicate,the,predicate,to,test,param,router,function,the,nested,router,function,to,delegate,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,router,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,nest,request,predicate,predicate,router,function,t,router,function,return,new,default,nested,router,function,predicate,router,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> nest( 			RequestPredicate predicate, RouterFunction<T> routerFunction);1526553177;Route to the given router function if the given request predicate applies. This method can be_used to create <strong>nested routes</strong>, where a group of routes share a common path_(prefix), header, or other request predicate._<p>For instance, the following example first creates a composed route that resolves to_{@code listUsers} for a GET, and {@code createUser} for a POST. This composed route then gets_nested with a "/user" path predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ userRoutes =_RouterFunctions.route(RequestPredicates.method(HttpMethod.GET), this::listUsers)_.andRoute(RequestPredicates.method(HttpMethod.POST), this::createUser)___RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.nest(RequestPredicates.path("/user"),userRoutes)__</pre>_@param predicate the predicate to test_@param routerFunction the nested router function to delegate to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code routerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> nest(_			RequestPredicate predicate, RouterFunction<T> routerFunction) {__		return new DefaultNestedRouterFunction<>(predicate, routerFunction)__	};route,to,the,given,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,first,creates,a,composed,route,that,resolves,to,code,list,users,for,a,get,and,code,create,user,for,a,post,this,composed,route,then,gets,nested,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,user,routes,router,functions,route,request,predicates,method,http,method,get,this,list,users,and,route,request,predicates,method,http,method,post,this,create,user,router,function,lt,server,response,gt,nested,route,router,functions,nest,request,predicates,path,user,user,routes,pre,param,predicate,the,predicate,to,test,param,router,function,the,nested,router,function,to,delegate,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,router,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,nest,request,predicate,predicate,router,function,t,router,function,return,new,default,nested,router,function,predicate,router,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> nest( 			RequestPredicate predicate, RouterFunction<T> routerFunction);1527601711;Route to the given router function if the given request predicate applies. This method can be_used to create <strong>nested routes</strong>, where a group of routes share a common path_(prefix), header, or other request predicate._<p>For instance, the following example first creates a composed route that resolves to_{@code listUsers} for a GET, and {@code createUser} for a POST. This composed route then gets_nested with a "/user" path predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ userRoutes =_RouterFunctions.route(RequestPredicates.method(HttpMethod.GET), this::listUsers)_.andRoute(RequestPredicates.method(HttpMethod.POST), this::createUser)___RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.nest(RequestPredicates.path("/user"),userRoutes)__</pre>_@param predicate the predicate to test_@param routerFunction the nested router function to delegate to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code routerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> nest(_			RequestPredicate predicate, RouterFunction<T> routerFunction) {__		return new DefaultNestedRouterFunction<>(predicate, routerFunction)__	};route,to,the,given,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,first,creates,a,composed,route,that,resolves,to,code,list,users,for,a,get,and,code,create,user,for,a,post,this,composed,route,then,gets,nested,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,user,routes,router,functions,route,request,predicates,method,http,method,get,this,list,users,and,route,request,predicates,method,http,method,post,this,create,user,router,function,lt,server,response,gt,nested,route,router,functions,nest,request,predicates,path,user,user,routes,pre,param,predicate,the,predicate,to,test,param,router,function,the,nested,router,function,to,delegate,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,router,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,nest,request,predicate,predicate,router,function,t,router,function,return,new,default,nested,router,function,predicate,router,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> nest( 			RequestPredicate predicate, RouterFunction<T> routerFunction);1529721864;Route to the given router function if the given request predicate applies. This method can be_used to create <strong>nested routes</strong>, where a group of routes share a common path_(prefix), header, or other request predicate._<p>For instance, the following example first creates a composed route that resolves to_{@code listUsers} for a GET, and {@code createUser} for a POST. This composed route then gets_nested with a "/user" path predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ userRoutes =_RouterFunctions.route(RequestPredicates.method(HttpMethod.GET), this::listUsers)_.andRoute(RequestPredicates.method(HttpMethod.POST), this::createUser)___RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.nest(RequestPredicates.path("/user"),userRoutes)__</pre>_@param predicate the predicate to test_@param routerFunction the nested router function to delegate to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code routerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> nest(_			RequestPredicate predicate, RouterFunction<T> routerFunction) {__		return new DefaultNestedRouterFunction<>(predicate, routerFunction)__	};route,to,the,given,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,first,creates,a,composed,route,that,resolves,to,code,list,users,for,a,get,and,code,create,user,for,a,post,this,composed,route,then,gets,nested,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,user,routes,router,functions,route,request,predicates,method,http,method,get,this,list,users,and,route,request,predicates,method,http,method,post,this,create,user,router,function,lt,server,response,gt,nested,route,router,functions,nest,request,predicates,path,user,user,routes,pre,param,predicate,the,predicate,to,test,param,router,function,the,nested,router,function,to,delegate,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,router,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,nest,request,predicate,predicate,router,function,t,router,function,return,new,default,nested,router,function,predicate,router,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> nest( 			RequestPredicate predicate, RouterFunction<T> routerFunction);1530174524;Route to the given router function if the given request predicate applies. This method can be_used to create <strong>nested routes</strong>, where a group of routes share a common path_(prefix), header, or other request predicate._<p>For instance, the following example first creates a composed route that resolves to_{@code listUsers} for a GET, and {@code createUser} for a POST. This composed route then gets_nested with a "/user" path predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ userRoutes =_RouterFunctions.route(RequestPredicates.method(HttpMethod.GET), this::listUsers)_.andRoute(RequestPredicates.method(HttpMethod.POST), this::createUser)___RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.nest(RequestPredicates.path("/user"),userRoutes)__</pre>_@param predicate the predicate to test_@param routerFunction the nested router function to delegate to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code routerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> nest(_			RequestPredicate predicate, RouterFunction<T> routerFunction) {__		return new DefaultNestedRouterFunction<>(predicate, routerFunction)__	};route,to,the,given,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,first,creates,a,composed,route,that,resolves,to,code,list,users,for,a,get,and,code,create,user,for,a,post,this,composed,route,then,gets,nested,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,user,routes,router,functions,route,request,predicates,method,http,method,get,this,list,users,and,route,request,predicates,method,http,method,post,this,create,user,router,function,lt,server,response,gt,nested,route,router,functions,nest,request,predicates,path,user,user,routes,pre,param,predicate,the,predicate,to,test,param,router,function,the,nested,router,function,to,delegate,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,router,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,nest,request,predicate,predicate,router,function,t,router,function,return,new,default,nested,router,function,predicate,router,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> nest( 			RequestPredicate predicate, RouterFunction<T> routerFunction);1530174524;Route to the given router function if the given request predicate applies. This method can be_used to create <strong>nested routes</strong>, where a group of routes share a common path_(prefix), header, or other request predicate._<p>For instance, the following example first creates a composed route that resolves to_{@code listUsers} for a GET, and {@code createUser} for a POST. This composed route then gets_nested with a "/user" path predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ userRoutes =_RouterFunctions.route(RequestPredicates.method(HttpMethod.GET), this::listUsers)_.andRoute(RequestPredicates.method(HttpMethod.POST), this::createUser)___RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.nest(RequestPredicates.path("/user"),userRoutes)__</pre>_@param predicate the predicate to test_@param routerFunction the nested router function to delegate to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code routerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> nest(_			RequestPredicate predicate, RouterFunction<T> routerFunction) {__		return new DefaultNestedRouterFunction<>(predicate, routerFunction)__	};route,to,the,given,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,first,creates,a,composed,route,that,resolves,to,code,list,users,for,a,get,and,code,create,user,for,a,post,this,composed,route,then,gets,nested,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,user,routes,router,functions,route,request,predicates,method,http,method,get,this,list,users,and,route,request,predicates,method,http,method,post,this,create,user,router,function,lt,server,response,gt,nested,route,router,functions,nest,request,predicates,path,user,user,routes,pre,param,predicate,the,predicate,to,test,param,router,function,the,nested,router,function,to,delegate,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,router,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,nest,request,predicate,predicate,router,function,t,router,function,return,new,default,nested,router,function,predicate,router,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> nest( 			RequestPredicate predicate, RouterFunction<T> routerFunction);1530177818;Route to the given router function if the given request predicate applies. This method can be_used to create <strong>nested routes</strong>, where a group of routes share a common path_(prefix), header, or other request predicate._<p>For instance, the following example first creates a composed route that resolves to_{@code listUsers} for a GET, and {@code createUser} for a POST. This composed route then gets_nested with a "/user" path predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ userRoutes =_RouterFunctions.route(RequestPredicates.method(HttpMethod.GET), this::listUsers)_.andRoute(RequestPredicates.method(HttpMethod.POST), this::createUser)___RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.nest(RequestPredicates.path("/user"),userRoutes)__</pre>_@param predicate the predicate to test_@param routerFunction the nested router function to delegate to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code routerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> nest(_			RequestPredicate predicate, RouterFunction<T> routerFunction) {__		return new DefaultNestedRouterFunction<>(predicate, routerFunction)__	};route,to,the,given,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,first,creates,a,composed,route,that,resolves,to,code,list,users,for,a,get,and,code,create,user,for,a,post,this,composed,route,then,gets,nested,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,user,routes,router,functions,route,request,predicates,method,http,method,get,this,list,users,and,route,request,predicates,method,http,method,post,this,create,user,router,function,lt,server,response,gt,nested,route,router,functions,nest,request,predicates,path,user,user,routes,pre,param,predicate,the,predicate,to,test,param,router,function,the,nested,router,function,to,delegate,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,router,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,nest,request,predicate,predicate,router,function,t,router,function,return,new,default,nested,router,function,predicate,router,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> nest( 			RequestPredicate predicate, RouterFunction<T> routerFunction);1530187774;Route to the given router function if the given request predicate applies. This method can be_used to create <strong>nested routes</strong>, where a group of routes share a common path_(prefix), header, or other request predicate._<p>For instance, the following example first creates a composed route that resolves to_{@code listUsers} for a GET, and {@code createUser} for a POST. This composed route then gets_nested with a "/user" path predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ userRoutes =_RouterFunctions.route(RequestPredicates.method(HttpMethod.GET), this::listUsers)_.andRoute(RequestPredicates.method(HttpMethod.POST), this::createUser)___RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.nest(RequestPredicates.path("/user"),userRoutes)__</pre>_@param predicate the predicate to test_@param routerFunction the nested router function to delegate to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code routerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> nest(_			RequestPredicate predicate, RouterFunction<T> routerFunction) {__		return new DefaultNestedRouterFunction<>(predicate, routerFunction)__	};route,to,the,given,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,first,creates,a,composed,route,that,resolves,to,code,list,users,for,a,get,and,code,create,user,for,a,post,this,composed,route,then,gets,nested,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,user,routes,router,functions,route,request,predicates,method,http,method,get,this,list,users,and,route,request,predicates,method,http,method,post,this,create,user,router,function,lt,server,response,gt,nested,route,router,functions,nest,request,predicates,path,user,user,routes,pre,param,predicate,the,predicate,to,test,param,router,function,the,nested,router,function,to,delegate,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,router,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,nest,request,predicate,predicate,router,function,t,router,function,return,new,default,nested,router,function,predicate,router,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> nest( 			RequestPredicate predicate, RouterFunction<T> routerFunction);1530793633;Route to the given router function if the given request predicate applies. This method can be_used to create <strong>nested routes</strong>, where a group of routes share a common path_(prefix), header, or other request predicate._<p>For instance, the following example first creates a composed route that resolves to_{@code listUsers} for a GET, and {@code createUser} for a POST. This composed route then gets_nested with a "/user" path predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ userRoutes =_RouterFunctions.route(RequestPredicates.method(HttpMethod.GET), this::listUsers)_.andRoute(RequestPredicates.method(HttpMethod.POST), this::createUser)___RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.nest(RequestPredicates.path("/user"),userRoutes)__</pre>_@param predicate the predicate to test_@param routerFunction the nested router function to delegate to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code routerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> nest(_			RequestPredicate predicate, RouterFunction<T> routerFunction) {__		return new DefaultNestedRouterFunction<>(predicate, routerFunction)__	};route,to,the,given,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,first,creates,a,composed,route,that,resolves,to,code,list,users,for,a,get,and,code,create,user,for,a,post,this,composed,route,then,gets,nested,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,user,routes,router,functions,route,request,predicates,method,http,method,get,this,list,users,and,route,request,predicates,method,http,method,post,this,create,user,router,function,lt,server,response,gt,nested,route,router,functions,nest,request,predicates,path,user,user,routes,pre,param,predicate,the,predicate,to,test,param,router,function,the,nested,router,function,to,delegate,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,router,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,nest,request,predicate,predicate,router,function,t,router,function,return,new,default,nested,router,function,predicate,router,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> nest( 			RequestPredicate predicate, RouterFunction<T> routerFunction);1530871268;Route to the given router function if the given request predicate applies. This method can be_used to create <strong>nested routes</strong>, where a group of routes share a common path_(prefix), header, or other request predicate._<p>For instance, the following example first creates a composed route that resolves to_{@code listUsers} for a GET, and {@code createUser} for a POST. This composed route then gets_nested with a "/user" path predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ userRoutes =_RouterFunctions.route(RequestPredicates.method(HttpMethod.GET), this::listUsers)_.andRoute(RequestPredicates.method(HttpMethod.POST), this::createUser)___RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.nest(RequestPredicates.path("/user"),userRoutes)__</pre>_@param predicate the predicate to test_@param routerFunction the nested router function to delegate to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code routerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> nest(_			RequestPredicate predicate, RouterFunction<T> routerFunction) {__		return new DefaultNestedRouterFunction<>(predicate, routerFunction)__	};route,to,the,given,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,first,creates,a,composed,route,that,resolves,to,code,list,users,for,a,get,and,code,create,user,for,a,post,this,composed,route,then,gets,nested,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,user,routes,router,functions,route,request,predicates,method,http,method,get,this,list,users,and,route,request,predicates,method,http,method,post,this,create,user,router,function,lt,server,response,gt,nested,route,router,functions,nest,request,predicates,path,user,user,routes,pre,param,predicate,the,predicate,to,test,param,router,function,the,nested,router,function,to,delegate,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,router,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,nest,request,predicate,predicate,router,function,t,router,function,return,new,default,nested,router,function,predicate,router,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> nest( 			RequestPredicate predicate, RouterFunction<T> routerFunction);1530877097;Route to the given router function if the given request predicate applies. This method can be_used to create <strong>nested routes</strong>, where a group of routes share a common path_(prefix), header, or other request predicate._<p>For instance, the following example first creates a composed route that resolves to_{@code listUsers} for a GET, and {@code createUser} for a POST. This composed route then gets_nested with a "/user" path predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ userRoutes =_RouterFunctions.route(RequestPredicates.method(HttpMethod.GET), this::listUsers)_.andRoute(RequestPredicates.method(HttpMethod.POST), this::createUser)___RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.nest(RequestPredicates.path("/user"),userRoutes)__</pre>_@param predicate the predicate to test_@param routerFunction the nested router function to delegate to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code routerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> nest(_			RequestPredicate predicate, RouterFunction<T> routerFunction) {__		return new DefaultNestedRouterFunction<>(predicate, routerFunction)__	};route,to,the,given,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,first,creates,a,composed,route,that,resolves,to,code,list,users,for,a,get,and,code,create,user,for,a,post,this,composed,route,then,gets,nested,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,user,routes,router,functions,route,request,predicates,method,http,method,get,this,list,users,and,route,request,predicates,method,http,method,post,this,create,user,router,function,lt,server,response,gt,nested,route,router,functions,nest,request,predicates,path,user,user,routes,pre,param,predicate,the,predicate,to,test,param,router,function,the,nested,router,function,to,delegate,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,router,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,nest,request,predicate,predicate,router,function,t,router,function,return,new,default,nested,router,function,predicate,router,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> nest( 			RequestPredicate predicate, RouterFunction<T> routerFunction);1530880709;Route to the given router function if the given request predicate applies. This method can be_used to create <strong>nested routes</strong>, where a group of routes share a common path_(prefix), header, or other request predicate._<p>For instance, the following example first creates a composed route that resolves to_{@code listUsers} for a GET, and {@code createUser} for a POST. This composed route then gets_nested with a "/user" path predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ userRoutes =_RouterFunctions.route(RequestPredicates.method(HttpMethod.GET), this::listUsers)_.andRoute(RequestPredicates.method(HttpMethod.POST), this::createUser)__RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.nest(RequestPredicates.path("/user"), userRoutes)__</pre>_@param predicate the predicate to test_@param routerFunction the nested router function to delegate to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code routerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> nest(_			RequestPredicate predicate, RouterFunction<T> routerFunction) {__		return new DefaultNestedRouterFunction<>(predicate, routerFunction)__	};route,to,the,given,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,first,creates,a,composed,route,that,resolves,to,code,list,users,for,a,get,and,code,create,user,for,a,post,this,composed,route,then,gets,nested,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,user,routes,router,functions,route,request,predicates,method,http,method,get,this,list,users,and,route,request,predicates,method,http,method,post,this,create,user,router,function,lt,server,response,gt,nested,route,router,functions,nest,request,predicates,path,user,user,routes,pre,param,predicate,the,predicate,to,test,param,router,function,the,nested,router,function,to,delegate,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,router,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,nest,request,predicate,predicate,router,function,t,router,function,return,new,default,nested,router,function,predicate,router,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> nest( 			RequestPredicate predicate, RouterFunction<T> routerFunction);1537188605;Route to the given router function if the given request predicate applies. This method can be_used to create <strong>nested routes</strong>, where a group of routes share a common path_(prefix), header, or other request predicate._<p>For instance, the following example first creates a composed route that resolves to_{@code listUsers} for a GET, and {@code createUser} for a POST. This composed route then gets_nested with a "/user" path predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ userRoutes =_RouterFunctions.route(RequestPredicates.method(HttpMethod.GET), this::listUsers)_.andRoute(RequestPredicates.method(HttpMethod.POST), this::createUser)__RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.nest(RequestPredicates.path("/user"), userRoutes)__</pre>_@param predicate the predicate to test_@param routerFunction the nested router function to delegate to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code routerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> nest(_			RequestPredicate predicate, RouterFunction<T> routerFunction) {__		return new DefaultNestedRouterFunction<>(predicate, routerFunction)__	};route,to,the,given,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,first,creates,a,composed,route,that,resolves,to,code,list,users,for,a,get,and,code,create,user,for,a,post,this,composed,route,then,gets,nested,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,user,routes,router,functions,route,request,predicates,method,http,method,get,this,list,users,and,route,request,predicates,method,http,method,post,this,create,user,router,function,lt,server,response,gt,nested,route,router,functions,nest,request,predicates,path,user,user,routes,pre,param,predicate,the,predicate,to,test,param,router,function,the,nested,router,function,to,delegate,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,router,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,nest,request,predicate,predicate,router,function,t,router,function,return,new,default,nested,router,function,predicate,router,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> nest( 			RequestPredicate predicate, RouterFunction<T> routerFunction);1538664611;Route to the given router function if the given request predicate applies. This method can be_used to create <strong>nested routes</strong>, where a group of routes share a common path_(prefix), header, or other request predicate._<p>For instance, the following example first creates a composed route that resolves to_{@code listUsers} for a GET, and {@code createUser} for a POST. This composed route then gets_nested with a "/user" path predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ userRoutes =_RouterFunctions.route(RequestPredicates.method(HttpMethod.GET), this::listUsers)_.andRoute(RequestPredicates.method(HttpMethod.POST), this::createUser)__RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.nest(RequestPredicates.path("/user"), userRoutes)__</pre>_@param predicate the predicate to test_@param routerFunction the nested router function to delegate to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code routerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> nest(_			RequestPredicate predicate, RouterFunction<T> routerFunction) {__		return new DefaultNestedRouterFunction<>(predicate, routerFunction)__	};route,to,the,given,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,first,creates,a,composed,route,that,resolves,to,code,list,users,for,a,get,and,code,create,user,for,a,post,this,composed,route,then,gets,nested,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,user,routes,router,functions,route,request,predicates,method,http,method,get,this,list,users,and,route,request,predicates,method,http,method,post,this,create,user,router,function,lt,server,response,gt,nested,route,router,functions,nest,request,predicates,path,user,user,routes,pre,param,predicate,the,predicate,to,test,param,router,function,the,nested,router,function,to,delegate,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,router,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,nest,request,predicate,predicate,router,function,t,router,function,return,new,default,nested,router,function,predicate,router,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> nest( 			RequestPredicate predicate, RouterFunction<T> routerFunction);1539866925;Route to the given router function if the given request predicate applies. This method can be_used to create <strong>nested routes</strong>, where a group of routes share a common path_(prefix), header, or other request predicate._<p>For instance, the following example first creates a composed route that resolves to_{@code listUsers} for a GET, and {@code createUser} for a POST. This composed route then gets_nested with a "/user" path predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ userRoutes =_RouterFunctions.route(RequestPredicates.method(HttpMethod.GET), this::listUsers)_.andRoute(RequestPredicates.method(HttpMethod.POST), this::createUser)__RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.nest(RequestPredicates.path("/user"), userRoutes)__</pre>_@param predicate the predicate to test_@param routerFunction the nested router function to delegate to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code routerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> nest(_			RequestPredicate predicate, RouterFunction<T> routerFunction) {__		return new DefaultNestedRouterFunction<>(predicate, routerFunction)__	};route,to,the,given,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,first,creates,a,composed,route,that,resolves,to,code,list,users,for,a,get,and,code,create,user,for,a,post,this,composed,route,then,gets,nested,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,user,routes,router,functions,route,request,predicates,method,http,method,get,this,list,users,and,route,request,predicates,method,http,method,post,this,create,user,router,function,lt,server,response,gt,nested,route,router,functions,nest,request,predicates,path,user,user,routes,pre,param,predicate,the,predicate,to,test,param,router,function,the,nested,router,function,to,delegate,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,router,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,nest,request,predicate,predicate,router,function,t,router,function,return,new,default,nested,router,function,predicate,router,function
RouterFunctions -> public static Function<ServerRequest, Mono<Resource>> resourceLookupFunction(String pattern, Resource location);1525433784;Returns the resource lookup function used by {@link #resources(String, Resource)}._The returned function can be {@linkplain Function#andThen(Function) composed} on, for_instance to return a default resource when the lookup function does not match:_<pre class="code">_Mono&lt_Resource&gt_ defaultResource = Mono.just(new ClassPathResource("index.html"))__Function&lt_ServerRequest, Mono&lt_Resource&gt_&gt_ lookupFunction =_RouterFunctions.resourceLookupFunction("/resources/**", new FileSystemResource("public-resources/"))_.andThen(resourceMono -&gt_ resourceMono.switchIfEmpty(defaultResource))___RouterFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources(lookupFunction)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return the default resource lookup function for the given parameters.;public static Function<ServerRequest, Mono<Resource>> resourceLookupFunction(String pattern, Resource location) {_		return new PathResourceLookupFunction(pattern, location)__	};returns,the,resource,lookup,function,used,by,link,resources,string,resource,the,returned,function,can,be,linkplain,function,and,then,function,composed,on,for,instance,to,return,a,default,resource,when,the,lookup,function,does,not,match,pre,class,code,mono,lt,resource,gt,default,resource,mono,just,new,class,path,resource,index,html,function,lt,server,request,mono,lt,resource,gt,gt,lookup,function,router,functions,resource,lookup,function,resources,new,file,system,resource,public,resources,and,then,resource,mono,gt,resource,mono,switch,if,empty,default,resource,router,function,lt,server,response,gt,resources,router,functions,resources,lookup,function,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,the,default,resource,lookup,function,for,the,given,parameters;public,static,function,server,request,mono,resource,resource,lookup,function,string,pattern,resource,location,return,new,path,resource,lookup,function,pattern,location
RouterFunctions -> public static Function<ServerRequest, Mono<Resource>> resourceLookupFunction(String pattern, Resource location);1526553177;Returns the resource lookup function used by {@link #resources(String, Resource)}._The returned function can be {@linkplain Function#andThen(Function) composed} on, for_instance to return a default resource when the lookup function does not match:_<pre class="code">_Mono&lt_Resource&gt_ defaultResource = Mono.just(new ClassPathResource("index.html"))__Function&lt_ServerRequest, Mono&lt_Resource&gt_&gt_ lookupFunction =_RouterFunctions.resourceLookupFunction("/resources/**", new FileSystemResource("public-resources/"))_.andThen(resourceMono -&gt_ resourceMono.switchIfEmpty(defaultResource))___RouterFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources(lookupFunction)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return the default resource lookup function for the given parameters.;public static Function<ServerRequest, Mono<Resource>> resourceLookupFunction(String pattern, Resource location) {_		return new PathResourceLookupFunction(pattern, location)__	};returns,the,resource,lookup,function,used,by,link,resources,string,resource,the,returned,function,can,be,linkplain,function,and,then,function,composed,on,for,instance,to,return,a,default,resource,when,the,lookup,function,does,not,match,pre,class,code,mono,lt,resource,gt,default,resource,mono,just,new,class,path,resource,index,html,function,lt,server,request,mono,lt,resource,gt,gt,lookup,function,router,functions,resource,lookup,function,resources,new,file,system,resource,public,resources,and,then,resource,mono,gt,resource,mono,switch,if,empty,default,resource,router,function,lt,server,response,gt,resources,router,functions,resources,lookup,function,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,the,default,resource,lookup,function,for,the,given,parameters;public,static,function,server,request,mono,resource,resource,lookup,function,string,pattern,resource,location,return,new,path,resource,lookup,function,pattern,location
RouterFunctions -> public static Function<ServerRequest, Mono<Resource>> resourceLookupFunction(String pattern, Resource location);1527601711;Returns the resource lookup function used by {@link #resources(String, Resource)}._The returned function can be {@linkplain Function#andThen(Function) composed} on, for_instance to return a default resource when the lookup function does not match:_<pre class="code">_Mono&lt_Resource&gt_ defaultResource = Mono.just(new ClassPathResource("index.html"))__Function&lt_ServerRequest, Mono&lt_Resource&gt_&gt_ lookupFunction =_RouterFunctions.resourceLookupFunction("/resources/**", new FileSystemResource("public-resources/"))_.andThen(resourceMono -&gt_ resourceMono.switchIfEmpty(defaultResource))___RouterFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources(lookupFunction)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return the default resource lookup function for the given parameters.;public static Function<ServerRequest, Mono<Resource>> resourceLookupFunction(String pattern, Resource location) {_		return new PathResourceLookupFunction(pattern, location)__	};returns,the,resource,lookup,function,used,by,link,resources,string,resource,the,returned,function,can,be,linkplain,function,and,then,function,composed,on,for,instance,to,return,a,default,resource,when,the,lookup,function,does,not,match,pre,class,code,mono,lt,resource,gt,default,resource,mono,just,new,class,path,resource,index,html,function,lt,server,request,mono,lt,resource,gt,gt,lookup,function,router,functions,resource,lookup,function,resources,new,file,system,resource,public,resources,and,then,resource,mono,gt,resource,mono,switch,if,empty,default,resource,router,function,lt,server,response,gt,resources,router,functions,resources,lookup,function,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,the,default,resource,lookup,function,for,the,given,parameters;public,static,function,server,request,mono,resource,resource,lookup,function,string,pattern,resource,location,return,new,path,resource,lookup,function,pattern,location
RouterFunctions -> public static Function<ServerRequest, Mono<Resource>> resourceLookupFunction(String pattern, Resource location);1529721864;Returns the resource lookup function used by {@link #resources(String, Resource)}._The returned function can be {@linkplain Function#andThen(Function) composed} on, for_instance to return a default resource when the lookup function does not match:_<pre class="code">_Mono&lt_Resource&gt_ defaultResource = Mono.just(new ClassPathResource("index.html"))__Function&lt_ServerRequest, Mono&lt_Resource&gt_&gt_ lookupFunction =_RouterFunctions.resourceLookupFunction("/resources/**", new FileSystemResource("public-resources/"))_.andThen(resourceMono -&gt_ resourceMono.switchIfEmpty(defaultResource))___RouterFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources(lookupFunction)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return the default resource lookup function for the given parameters.;public static Function<ServerRequest, Mono<Resource>> resourceLookupFunction(String pattern, Resource location) {_		return new PathResourceLookupFunction(pattern, location)__	};returns,the,resource,lookup,function,used,by,link,resources,string,resource,the,returned,function,can,be,linkplain,function,and,then,function,composed,on,for,instance,to,return,a,default,resource,when,the,lookup,function,does,not,match,pre,class,code,mono,lt,resource,gt,default,resource,mono,just,new,class,path,resource,index,html,function,lt,server,request,mono,lt,resource,gt,gt,lookup,function,router,functions,resource,lookup,function,resources,new,file,system,resource,public,resources,and,then,resource,mono,gt,resource,mono,switch,if,empty,default,resource,router,function,lt,server,response,gt,resources,router,functions,resources,lookup,function,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,the,default,resource,lookup,function,for,the,given,parameters;public,static,function,server,request,mono,resource,resource,lookup,function,string,pattern,resource,location,return,new,path,resource,lookup,function,pattern,location
RouterFunctions -> public static Function<ServerRequest, Mono<Resource>> resourceLookupFunction(String pattern, Resource location);1530174524;Returns the resource lookup function used by {@link #resources(String, Resource)}._The returned function can be {@linkplain Function#andThen(Function) composed} on, for_instance to return a default resource when the lookup function does not match:_<pre class="code">_Mono&lt_Resource&gt_ defaultResource = Mono.just(new ClassPathResource("index.html"))__Function&lt_ServerRequest, Mono&lt_Resource&gt_&gt_ lookupFunction =_RouterFunctions.resourceLookupFunction("/resources/**", new FileSystemResource("public-resources/"))_.andThen(resourceMono -&gt_ resourceMono.switchIfEmpty(defaultResource))___RouterFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources(lookupFunction)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return the default resource lookup function for the given parameters.;public static Function<ServerRequest, Mono<Resource>> resourceLookupFunction(String pattern, Resource location) {_		return new PathResourceLookupFunction(pattern, location)__	};returns,the,resource,lookup,function,used,by,link,resources,string,resource,the,returned,function,can,be,linkplain,function,and,then,function,composed,on,for,instance,to,return,a,default,resource,when,the,lookup,function,does,not,match,pre,class,code,mono,lt,resource,gt,default,resource,mono,just,new,class,path,resource,index,html,function,lt,server,request,mono,lt,resource,gt,gt,lookup,function,router,functions,resource,lookup,function,resources,new,file,system,resource,public,resources,and,then,resource,mono,gt,resource,mono,switch,if,empty,default,resource,router,function,lt,server,response,gt,resources,router,functions,resources,lookup,function,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,the,default,resource,lookup,function,for,the,given,parameters;public,static,function,server,request,mono,resource,resource,lookup,function,string,pattern,resource,location,return,new,path,resource,lookup,function,pattern,location
RouterFunctions -> public static Function<ServerRequest, Mono<Resource>> resourceLookupFunction(String pattern, Resource location);1530174524;Returns the resource lookup function used by {@link #resources(String, Resource)}._The returned function can be {@linkplain Function#andThen(Function) composed} on, for_instance to return a default resource when the lookup function does not match:_<pre class="code">_Mono&lt_Resource&gt_ defaultResource = Mono.just(new ClassPathResource("index.html"))__Function&lt_ServerRequest, Mono&lt_Resource&gt_&gt_ lookupFunction =_RouterFunctions.resourceLookupFunction("/resources/**", new FileSystemResource("public-resources/"))_.andThen(resourceMono -&gt_ resourceMono.switchIfEmpty(defaultResource))___RouterFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources(lookupFunction)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return the default resource lookup function for the given parameters.;public static Function<ServerRequest, Mono<Resource>> resourceLookupFunction(String pattern, Resource location) {_		return new PathResourceLookupFunction(pattern, location)__	};returns,the,resource,lookup,function,used,by,link,resources,string,resource,the,returned,function,can,be,linkplain,function,and,then,function,composed,on,for,instance,to,return,a,default,resource,when,the,lookup,function,does,not,match,pre,class,code,mono,lt,resource,gt,default,resource,mono,just,new,class,path,resource,index,html,function,lt,server,request,mono,lt,resource,gt,gt,lookup,function,router,functions,resource,lookup,function,resources,new,file,system,resource,public,resources,and,then,resource,mono,gt,resource,mono,switch,if,empty,default,resource,router,function,lt,server,response,gt,resources,router,functions,resources,lookup,function,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,the,default,resource,lookup,function,for,the,given,parameters;public,static,function,server,request,mono,resource,resource,lookup,function,string,pattern,resource,location,return,new,path,resource,lookup,function,pattern,location
RouterFunctions -> public static Function<ServerRequest, Mono<Resource>> resourceLookupFunction(String pattern, Resource location);1530177818;Returns the resource lookup function used by {@link #resources(String, Resource)}._The returned function can be {@linkplain Function#andThen(Function) composed} on, for_instance to return a default resource when the lookup function does not match:_<pre class="code">_Mono&lt_Resource&gt_ defaultResource = Mono.just(new ClassPathResource("index.html"))__Function&lt_ServerRequest, Mono&lt_Resource&gt_&gt_ lookupFunction =_RouterFunctions.resourceLookupFunction("/resources/**", new FileSystemResource("public-resources/"))_.andThen(resourceMono -&gt_ resourceMono.switchIfEmpty(defaultResource))___RouterFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources(lookupFunction)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return the default resource lookup function for the given parameters.;public static Function<ServerRequest, Mono<Resource>> resourceLookupFunction(String pattern, Resource location) {_		return new PathResourceLookupFunction(pattern, location)__	};returns,the,resource,lookup,function,used,by,link,resources,string,resource,the,returned,function,can,be,linkplain,function,and,then,function,composed,on,for,instance,to,return,a,default,resource,when,the,lookup,function,does,not,match,pre,class,code,mono,lt,resource,gt,default,resource,mono,just,new,class,path,resource,index,html,function,lt,server,request,mono,lt,resource,gt,gt,lookup,function,router,functions,resource,lookup,function,resources,new,file,system,resource,public,resources,and,then,resource,mono,gt,resource,mono,switch,if,empty,default,resource,router,function,lt,server,response,gt,resources,router,functions,resources,lookup,function,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,the,default,resource,lookup,function,for,the,given,parameters;public,static,function,server,request,mono,resource,resource,lookup,function,string,pattern,resource,location,return,new,path,resource,lookup,function,pattern,location
RouterFunctions -> public static Function<ServerRequest, Mono<Resource>> resourceLookupFunction(String pattern, Resource location);1530187774;Returns the resource lookup function used by {@link #resources(String, Resource)}._The returned function can be {@linkplain Function#andThen(Function) composed} on, for_instance to return a default resource when the lookup function does not match:_<pre class="code">_Mono&lt_Resource&gt_ defaultResource = Mono.just(new ClassPathResource("index.html"))__Function&lt_ServerRequest, Mono&lt_Resource&gt_&gt_ lookupFunction =_RouterFunctions.resourceLookupFunction("/resources/**", new FileSystemResource("public-resources/"))_.andThen(resourceMono -&gt_ resourceMono.switchIfEmpty(defaultResource))___RouterFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources(lookupFunction)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return the default resource lookup function for the given parameters.;public static Function<ServerRequest, Mono<Resource>> resourceLookupFunction(String pattern, Resource location) {_		return new PathResourceLookupFunction(pattern, location)__	};returns,the,resource,lookup,function,used,by,link,resources,string,resource,the,returned,function,can,be,linkplain,function,and,then,function,composed,on,for,instance,to,return,a,default,resource,when,the,lookup,function,does,not,match,pre,class,code,mono,lt,resource,gt,default,resource,mono,just,new,class,path,resource,index,html,function,lt,server,request,mono,lt,resource,gt,gt,lookup,function,router,functions,resource,lookup,function,resources,new,file,system,resource,public,resources,and,then,resource,mono,gt,resource,mono,switch,if,empty,default,resource,router,function,lt,server,response,gt,resources,router,functions,resources,lookup,function,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,the,default,resource,lookup,function,for,the,given,parameters;public,static,function,server,request,mono,resource,resource,lookup,function,string,pattern,resource,location,return,new,path,resource,lookup,function,pattern,location
RouterFunctions -> public static Function<ServerRequest, Mono<Resource>> resourceLookupFunction(String pattern, Resource location);1530793633;Returns the resource lookup function used by {@link #resources(String, Resource)}._The returned function can be {@linkplain Function#andThen(Function) composed} on, for_instance to return a default resource when the lookup function does not match:_<pre class="code">_Mono&lt_Resource&gt_ defaultResource = Mono.just(new ClassPathResource("index.html"))__Function&lt_ServerRequest, Mono&lt_Resource&gt_&gt_ lookupFunction =_RouterFunctions.resourceLookupFunction("/resources/**", new FileSystemResource("public-resources/"))_.andThen(resourceMono -&gt_ resourceMono.switchIfEmpty(defaultResource))___RouterFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources(lookupFunction)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return the default resource lookup function for the given parameters.;public static Function<ServerRequest, Mono<Resource>> resourceLookupFunction(String pattern, Resource location) {_		return new PathResourceLookupFunction(pattern, location)__	};returns,the,resource,lookup,function,used,by,link,resources,string,resource,the,returned,function,can,be,linkplain,function,and,then,function,composed,on,for,instance,to,return,a,default,resource,when,the,lookup,function,does,not,match,pre,class,code,mono,lt,resource,gt,default,resource,mono,just,new,class,path,resource,index,html,function,lt,server,request,mono,lt,resource,gt,gt,lookup,function,router,functions,resource,lookup,function,resources,new,file,system,resource,public,resources,and,then,resource,mono,gt,resource,mono,switch,if,empty,default,resource,router,function,lt,server,response,gt,resources,router,functions,resources,lookup,function,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,the,default,resource,lookup,function,for,the,given,parameters;public,static,function,server,request,mono,resource,resource,lookup,function,string,pattern,resource,location,return,new,path,resource,lookup,function,pattern,location
RouterFunctions -> public static Function<ServerRequest, Mono<Resource>> resourceLookupFunction(String pattern, Resource location);1530871268;Returns the resource lookup function used by {@link #resources(String, Resource)}._The returned function can be {@linkplain Function#andThen(Function) composed} on, for_instance to return a default resource when the lookup function does not match:_<pre class="code">_Mono&lt_Resource&gt_ defaultResource = Mono.just(new ClassPathResource("index.html"))__Function&lt_ServerRequest, Mono&lt_Resource&gt_&gt_ lookupFunction =_RouterFunctions.resourceLookupFunction("/resources/**", new FileSystemResource("public-resources/"))_.andThen(resourceMono -&gt_ resourceMono.switchIfEmpty(defaultResource))___RouterFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources(lookupFunction)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return the default resource lookup function for the given parameters.;public static Function<ServerRequest, Mono<Resource>> resourceLookupFunction(String pattern, Resource location) {_		return new PathResourceLookupFunction(pattern, location)__	};returns,the,resource,lookup,function,used,by,link,resources,string,resource,the,returned,function,can,be,linkplain,function,and,then,function,composed,on,for,instance,to,return,a,default,resource,when,the,lookup,function,does,not,match,pre,class,code,mono,lt,resource,gt,default,resource,mono,just,new,class,path,resource,index,html,function,lt,server,request,mono,lt,resource,gt,gt,lookup,function,router,functions,resource,lookup,function,resources,new,file,system,resource,public,resources,and,then,resource,mono,gt,resource,mono,switch,if,empty,default,resource,router,function,lt,server,response,gt,resources,router,functions,resources,lookup,function,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,the,default,resource,lookup,function,for,the,given,parameters;public,static,function,server,request,mono,resource,resource,lookup,function,string,pattern,resource,location,return,new,path,resource,lookup,function,pattern,location
RouterFunctions -> public static Function<ServerRequest, Mono<Resource>> resourceLookupFunction(String pattern, Resource location);1530877097;Returns the resource lookup function used by {@link #resources(String, Resource)}._The returned function can be {@linkplain Function#andThen(Function) composed} on, for_instance to return a default resource when the lookup function does not match:_<pre class="code">_Mono&lt_Resource&gt_ defaultResource = Mono.just(new ClassPathResource("index.html"))__Function&lt_ServerRequest, Mono&lt_Resource&gt_&gt_ lookupFunction =_RouterFunctions.resourceLookupFunction("/resources/**", new FileSystemResource("public-resources/"))_.andThen(resourceMono -&gt_ resourceMono.switchIfEmpty(defaultResource))___RouterFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources(lookupFunction)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return the default resource lookup function for the given parameters.;public static Function<ServerRequest, Mono<Resource>> resourceLookupFunction(String pattern, Resource location) {_		return new PathResourceLookupFunction(pattern, location)__	};returns,the,resource,lookup,function,used,by,link,resources,string,resource,the,returned,function,can,be,linkplain,function,and,then,function,composed,on,for,instance,to,return,a,default,resource,when,the,lookup,function,does,not,match,pre,class,code,mono,lt,resource,gt,default,resource,mono,just,new,class,path,resource,index,html,function,lt,server,request,mono,lt,resource,gt,gt,lookup,function,router,functions,resource,lookup,function,resources,new,file,system,resource,public,resources,and,then,resource,mono,gt,resource,mono,switch,if,empty,default,resource,router,function,lt,server,response,gt,resources,router,functions,resources,lookup,function,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,the,default,resource,lookup,function,for,the,given,parameters;public,static,function,server,request,mono,resource,resource,lookup,function,string,pattern,resource,location,return,new,path,resource,lookup,function,pattern,location
RouterFunctions -> public static Function<ServerRequest, Mono<Resource>> resourceLookupFunction(String pattern, Resource location);1530880709;Returns the resource lookup function used by {@link #resources(String, Resource)}._The returned function can be {@linkplain Function#andThen(Function) composed} on, for_instance to return a default resource when the lookup function does not match:_<pre class="code">_Mono&lt_Resource&gt_ defaultResource = Mono.just(new ClassPathResource("index.html"))__Function&lt_ServerRequest, Mono&lt_Resource&gt_&gt_ lookupFunction =_RouterFunctions.resourceLookupFunction("/resources/**", new FileSystemResource("public-resources/"))_.andThen(resourceMono -&gt_ resourceMono.switchIfEmpty(defaultResource))__RouterFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources(lookupFunction)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return the default resource lookup function for the given parameters.;public static Function<ServerRequest, Mono<Resource>> resourceLookupFunction(String pattern, Resource location) {_		return new PathResourceLookupFunction(pattern, location)__	};returns,the,resource,lookup,function,used,by,link,resources,string,resource,the,returned,function,can,be,linkplain,function,and,then,function,composed,on,for,instance,to,return,a,default,resource,when,the,lookup,function,does,not,match,pre,class,code,mono,lt,resource,gt,default,resource,mono,just,new,class,path,resource,index,html,function,lt,server,request,mono,lt,resource,gt,gt,lookup,function,router,functions,resource,lookup,function,resources,new,file,system,resource,public,resources,and,then,resource,mono,gt,resource,mono,switch,if,empty,default,resource,router,function,lt,server,response,gt,resources,router,functions,resources,lookup,function,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,the,default,resource,lookup,function,for,the,given,parameters;public,static,function,server,request,mono,resource,resource,lookup,function,string,pattern,resource,location,return,new,path,resource,lookup,function,pattern,location
RouterFunctions -> public static Function<ServerRequest, Mono<Resource>> resourceLookupFunction(String pattern, Resource location);1537188605;Returns the resource lookup function used by {@link #resources(String, Resource)}._The returned function can be {@linkplain Function#andThen(Function) composed} on, for_instance to return a default resource when the lookup function does not match:_<pre class="code">_Mono&lt_Resource&gt_ defaultResource = Mono.just(new ClassPathResource("index.html"))__Function&lt_ServerRequest, Mono&lt_Resource&gt_&gt_ lookupFunction =_RouterFunctions.resourceLookupFunction("/resources/**", new FileSystemResource("public-resources/"))_.andThen(resourceMono -&gt_ resourceMono.switchIfEmpty(defaultResource))__RouterFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources(lookupFunction)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return the default resource lookup function for the given parameters.;public static Function<ServerRequest, Mono<Resource>> resourceLookupFunction(String pattern, Resource location) {_		return new PathResourceLookupFunction(pattern, location)__	};returns,the,resource,lookup,function,used,by,link,resources,string,resource,the,returned,function,can,be,linkplain,function,and,then,function,composed,on,for,instance,to,return,a,default,resource,when,the,lookup,function,does,not,match,pre,class,code,mono,lt,resource,gt,default,resource,mono,just,new,class,path,resource,index,html,function,lt,server,request,mono,lt,resource,gt,gt,lookup,function,router,functions,resource,lookup,function,resources,new,file,system,resource,public,resources,and,then,resource,mono,gt,resource,mono,switch,if,empty,default,resource,router,function,lt,server,response,gt,resources,router,functions,resources,lookup,function,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,the,default,resource,lookup,function,for,the,given,parameters;public,static,function,server,request,mono,resource,resource,lookup,function,string,pattern,resource,location,return,new,path,resource,lookup,function,pattern,location
RouterFunctions -> public static Function<ServerRequest, Mono<Resource>> resourceLookupFunction(String pattern, Resource location);1538664611;Returns the resource lookup function used by {@link #resources(String, Resource)}._The returned function can be {@linkplain Function#andThen(Function) composed} on, for_instance to return a default resource when the lookup function does not match:_<pre class="code">_Mono&lt_Resource&gt_ defaultResource = Mono.just(new ClassPathResource("index.html"))__Function&lt_ServerRequest, Mono&lt_Resource&gt_&gt_ lookupFunction =_RouterFunctions.resourceLookupFunction("/resources/**", new FileSystemResource("public-resources/"))_.andThen(resourceMono -&gt_ resourceMono.switchIfEmpty(defaultResource))__RouterFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources(lookupFunction)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return the default resource lookup function for the given parameters.;public static Function<ServerRequest, Mono<Resource>> resourceLookupFunction(String pattern, Resource location) {_		return new PathResourceLookupFunction(pattern, location)__	};returns,the,resource,lookup,function,used,by,link,resources,string,resource,the,returned,function,can,be,linkplain,function,and,then,function,composed,on,for,instance,to,return,a,default,resource,when,the,lookup,function,does,not,match,pre,class,code,mono,lt,resource,gt,default,resource,mono,just,new,class,path,resource,index,html,function,lt,server,request,mono,lt,resource,gt,gt,lookup,function,router,functions,resource,lookup,function,resources,new,file,system,resource,public,resources,and,then,resource,mono,gt,resource,mono,switch,if,empty,default,resource,router,function,lt,server,response,gt,resources,router,functions,resources,lookup,function,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,the,default,resource,lookup,function,for,the,given,parameters;public,static,function,server,request,mono,resource,resource,lookup,function,string,pattern,resource,location,return,new,path,resource,lookup,function,pattern,location
RouterFunctions -> public static Function<ServerRequest, Mono<Resource>> resourceLookupFunction(String pattern, Resource location);1539866925;Returns the resource lookup function used by {@link #resources(String, Resource)}._The returned function can be {@linkplain Function#andThen(Function) composed} on, for_instance to return a default resource when the lookup function does not match:_<pre class="code">_Mono&lt_Resource&gt_ defaultResource = Mono.just(new ClassPathResource("index.html"))__Function&lt_ServerRequest, Mono&lt_Resource&gt_&gt_ lookupFunction =_RouterFunctions.resourceLookupFunction("/resources/**", new FileSystemResource("public-resources/"))_.andThen(resourceMono -&gt_ resourceMono.switchIfEmpty(defaultResource))__RouterFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources(lookupFunction)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return the default resource lookup function for the given parameters.;public static Function<ServerRequest, Mono<Resource>> resourceLookupFunction(String pattern, Resource location) {_		return new PathResourceLookupFunction(pattern, location)__	};returns,the,resource,lookup,function,used,by,link,resources,string,resource,the,returned,function,can,be,linkplain,function,and,then,function,composed,on,for,instance,to,return,a,default,resource,when,the,lookup,function,does,not,match,pre,class,code,mono,lt,resource,gt,default,resource,mono,just,new,class,path,resource,index,html,function,lt,server,request,mono,lt,resource,gt,gt,lookup,function,router,functions,resource,lookup,function,resources,new,file,system,resource,public,resources,and,then,resource,mono,gt,resource,mono,switch,if,empty,default,resource,router,function,lt,server,response,gt,resources,router,functions,resources,lookup,function,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,the,default,resource,lookup,function,for,the,given,parameters;public,static,function,server,request,mono,resource,resource,lookup,function,string,pattern,resource,location,return,new,path,resource,lookup,function,pattern,location
RouterFunctions -> Builder -> Builder routeHead(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530177818;Adds a route to the given handler function that handles all HTTP {@code HEAD} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code HEAD} requests that_match {@code pattern}_@return this builder;Builder routeHead(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,head,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,head,requests,that,match,code,pattern,return,this,builder;builder,route,head,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder routeHead(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530187774;Adds a route to the given handler function that handles all HTTP {@code HEAD} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code HEAD} requests that_match {@code pattern}_@return this builder;Builder routeHead(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,head,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,head,requests,that,match,code,pattern,return,this,builder;builder,route,head,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder routeHead(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530793633;Adds a route to the given handler function that handles all HTTP {@code HEAD} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code HEAD} requests that_match {@code pattern}_@return this builder;Builder routeHead(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,head,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,head,requests,that,match,code,pattern,return,this,builder;builder,route,head,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder before(Function<ServerRequest, ServerRequest> requestProcessor)_;1530871268;Filter the request object for all routes created by this builder with the given request_processing function. Filters are typically used to address cross-cutting concerns, such_as logging, security, etc._<p>For instance, the following example creates a filter that logs the request before_the handler function executes._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.route()_.GET("/user", this::listUsers)_.before(request -> {_log(request)__return request___.build()__</pre>_@param requestProcessor a function that transforms the request_@return this builder;Builder before(Function<ServerRequest, ServerRequest> requestProcessor)_;filter,the,request,object,for,all,routes,created,by,this,builder,with,the,given,request,processing,function,filters,are,typically,used,to,address,cross,cutting,concerns,such,as,logging,security,etc,p,for,instance,the,following,example,creates,a,filter,that,logs,the,request,before,the,handler,function,executes,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,route,get,user,this,list,users,before,request,log,request,return,request,build,pre,param,request,processor,a,function,that,transforms,the,request,return,this,builder;builder,before,function,server,request,server,request,request,processor
RouterFunctions -> Builder -> Builder before(Function<ServerRequest, ServerRequest> requestProcessor)_;1530877097;Filter the request object for all routes created by this builder with the given request_processing function. Filters are typically used to address cross-cutting concerns, such_as logging, security, etc._<p>For instance, the following example creates a filter that logs the request before_the handler function executes._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.route()_.GET("/user", this::listUsers)_.before(request -> {_log(request)__return request___.build()__</pre>_@param requestProcessor a function that transforms the request_@return this builder;Builder before(Function<ServerRequest, ServerRequest> requestProcessor)_;filter,the,request,object,for,all,routes,created,by,this,builder,with,the,given,request,processing,function,filters,are,typically,used,to,address,cross,cutting,concerns,such,as,logging,security,etc,p,for,instance,the,following,example,creates,a,filter,that,logs,the,request,before,the,handler,function,executes,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,route,get,user,this,list,users,before,request,log,request,return,request,build,pre,param,request,processor,a,function,that,transforms,the,request,return,this,builder;builder,before,function,server,request,server,request,request,processor
RouterFunctions -> Builder -> Builder before(Function<ServerRequest, ServerRequest> requestProcessor)_;1530880709;Filter the request object for all routes created by this builder with the given request_processing function. Filters are typically used to address cross-cutting concerns, such_as logging, security, etc._<p>For instance, the following example creates a filter that logs the request before_the handler function executes._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.route()_.GET("/user", this::listUsers)_.before(request -> {_log(request)__return request___.build()__</pre>_@param requestProcessor a function that transforms the request_@return this builder;Builder before(Function<ServerRequest, ServerRequest> requestProcessor)_;filter,the,request,object,for,all,routes,created,by,this,builder,with,the,given,request,processing,function,filters,are,typically,used,to,address,cross,cutting,concerns,such,as,logging,security,etc,p,for,instance,the,following,example,creates,a,filter,that,logs,the,request,before,the,handler,function,executes,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,route,get,user,this,list,users,before,request,log,request,return,request,build,pre,param,request,processor,a,function,that,transforms,the,request,return,this,builder;builder,before,function,server,request,server,request,request,processor
RouterFunctions -> Builder -> Builder before(Function<ServerRequest, ServerRequest> requestProcessor)_;1537188605;Filter the request object for all routes created by this builder with the given request_processing function. Filters are typically used to address cross-cutting concerns, such_as logging, security, etc._<p>For instance, the following example creates a filter that logs the request before_the handler function executes._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.route()_.GET("/user", this::listUsers)_.before(request -> {_log(request)__return request___.build()__</pre>_@param requestProcessor a function that transforms the request_@return this builder;Builder before(Function<ServerRequest, ServerRequest> requestProcessor)_;filter,the,request,object,for,all,routes,created,by,this,builder,with,the,given,request,processing,function,filters,are,typically,used,to,address,cross,cutting,concerns,such,as,logging,security,etc,p,for,instance,the,following,example,creates,a,filter,that,logs,the,request,before,the,handler,function,executes,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,route,get,user,this,list,users,before,request,log,request,return,request,build,pre,param,request,processor,a,function,that,transforms,the,request,return,this,builder;builder,before,function,server,request,server,request,request,processor
RouterFunctions -> Builder -> Builder before(Function<ServerRequest, ServerRequest> requestProcessor)_;1538664611;Filter the request object for all routes created by this builder with the given request_processing function. Filters are typically used to address cross-cutting concerns, such_as logging, security, etc._<p>For instance, the following example creates a filter that logs the request before_the handler function executes._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.route()_.GET("/user", this::listUsers)_.before(request -> {_log(request)__return request___.build()__</pre>_@param requestProcessor a function that transforms the request_@return this builder;Builder before(Function<ServerRequest, ServerRequest> requestProcessor)_;filter,the,request,object,for,all,routes,created,by,this,builder,with,the,given,request,processing,function,filters,are,typically,used,to,address,cross,cutting,concerns,such,as,logging,security,etc,p,for,instance,the,following,example,creates,a,filter,that,logs,the,request,before,the,handler,function,executes,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,route,get,user,this,list,users,before,request,log,request,return,request,build,pre,param,request,processor,a,function,that,transforms,the,request,return,this,builder;builder,before,function,server,request,server,request,request,processor
RouterFunctions -> Builder -> Builder before(Function<ServerRequest, ServerRequest> requestProcessor)_;1539866925;Filter the request object for all routes created by this builder with the given request_processing function. Filters are typically used to address cross-cutting concerns, such_as logging, security, etc._<p>For instance, the following example creates a filter that logs the request before_the handler function executes._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.route()_.GET("/user", this::listUsers)_.before(request -> {_log(request)__return request___.build()__</pre>_@param requestProcessor a function that transforms the request_@return this builder;Builder before(Function<ServerRequest, ServerRequest> requestProcessor)_;filter,the,request,object,for,all,routes,created,by,this,builder,with,the,given,request,processing,function,filters,are,typically,used,to,address,cross,cutting,concerns,such,as,logging,security,etc,p,for,instance,the,following,example,creates,a,filter,that,logs,the,request,before,the,handler,function,executes,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,route,get,user,this,list,users,before,request,log,request,return,request,build,pre,param,request,processor,a,function,that,transforms,the,request,return,this,builder;builder,before,function,server,request,server,request,request,processor
RouterFunctions -> Builder -> Builder filterException(Predicate<? super Throwable> predicate, 				BiFunction<? super  Throwable, ServerRequest, Mono<ServerResponse>> responseProvider)_;1530187774;Filters all exceptions that match the predicate by applying the given response provider_function._<p>For instance, the following example creates a filter that returns a 500 response_status when an {@code IllegalStateException} occurs._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.builder()_.routeGet("/user", this::listUsers)_.filterException(e -> e instanceof IllegalStateException,_(e, request) -> ServerResponse.status(HttpStatus.INTERNAL_SERVER_ERROR).build())_.build()__</pre>_@param predicate the type of exception to filter_@param responseProvider a function that creates a response_@return this builder;Builder filterException(Predicate<? super Throwable> predicate,_				BiFunction<? super  Throwable, ServerRequest, Mono<ServerResponse>> responseProvider)_;filters,all,exceptions,that,match,the,predicate,by,applying,the,given,response,provider,function,p,for,instance,the,following,example,creates,a,filter,that,returns,a,500,response,status,when,an,code,illegal,state,exception,occurs,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,builder,route,get,user,this,list,users,filter,exception,e,e,instanceof,illegal,state,exception,e,request,server,response,status,http,status,build,build,pre,param,predicate,the,type,of,exception,to,filter,param,response,provider,a,function,that,creates,a,response,return,this,builder;builder,filter,exception,predicate,super,throwable,predicate,bi,function,super,throwable,server,request,mono,server,response,response,provider
RouterFunctions -> Builder -> Builder filterException(Predicate<? super Throwable> predicate, 				BiFunction<? super  Throwable, ServerRequest, Mono<ServerResponse>> responseProvider)_;1530793633;Filters all exceptions that match the predicate by applying the given response provider_function._<p>For instance, the following example creates a filter that returns a 500 response_status when an {@code IllegalStateException} occurs._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.builder()_.routeGet("/user", this::listUsers)_.filterException(e -> e instanceof IllegalStateException,_(e, request) -> ServerResponse.status(HttpStatus.INTERNAL_SERVER_ERROR).build())_.build()__</pre>_@param predicate the type of exception to filter_@param responseProvider a function that creates a response_@return this builder;Builder filterException(Predicate<? super Throwable> predicate,_				BiFunction<? super  Throwable, ServerRequest, Mono<ServerResponse>> responseProvider)_;filters,all,exceptions,that,match,the,predicate,by,applying,the,given,response,provider,function,p,for,instance,the,following,example,creates,a,filter,that,returns,a,500,response,status,when,an,code,illegal,state,exception,occurs,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,builder,route,get,user,this,list,users,filter,exception,e,e,instanceof,illegal,state,exception,e,request,server,response,status,http,status,build,build,pre,param,predicate,the,type,of,exception,to,filter,param,response,provider,a,function,that,creates,a,response,return,this,builder;builder,filter,exception,predicate,super,throwable,predicate,bi,function,super,throwable,server,request,mono,server,response,response,provider
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1495618935;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler},_using the given strategies._@param routerFunction the router function to convert_@param strategies the strategies to use_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies.messageReaders())__			addAttributes(exchange, request)__			return routerFunction.route(request)_					.defaultIfEmpty(notFound())_					.flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request)))_					.flatMap(response -> wrapException(() -> response.writeTo(exchange, toContext(strategies))))__		}__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,using,the,given,strategies,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,exchange,server,request,request,new,default,server,request,exchange,strategies,message,readers,add,attributes,exchange,request,return,router,function,route,request,default,if,empty,not,found,flat,map,handler,function,wrap,exception,handler,function,handle,request,flat,map,response,wrap,exception,response,write,to,exchange,to,context,strategies
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1495626483;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler},_using the given strategies._@param routerFunction the router function to convert_@param strategies the strategies to use_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies.messageReaders())__			addAttributes(exchange, request)__			return routerFunction.route(request)_					.defaultIfEmpty(notFound())_					.flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request)))_					.flatMap(response -> wrapException(() -> response.writeTo(exchange,_							new HandlerStrategiesResponseContext(strategies))))__		}__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,using,the,given,strategies,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,exchange,server,request,request,new,default,server,request,exchange,strategies,message,readers,add,attributes,exchange,request,return,router,function,route,request,default,if,empty,not,found,flat,map,handler,function,wrap,exception,handler,function,handle,request,flat,map,response,wrap,exception,response,write,to,exchange,new,handler,strategies,response,context,strategies
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1497359418;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler},_using the given strategies._@param routerFunction the router function to convert_@param strategies the strategies to use_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies.messageReaders())__			addAttributes(exchange, request)__			return routerFunction.route(request)_					.defaultIfEmpty(notFound())_					.flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request)))_					.flatMap(response -> wrapException(() -> response.writeTo(exchange,_							new HandlerStrategiesResponseContext(strategies))))__		}__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,using,the,given,strategies,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,exchange,server,request,request,new,default,server,request,exchange,strategies,message,readers,add,attributes,exchange,request,return,router,function,route,request,default,if,empty,not,found,flat,map,handler,function,wrap,exception,handler,function,handle,request,flat,map,response,wrap,exception,response,write,to,exchange,new,handler,strategies,response,context,strategies
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1498216330;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler},_using the given strategies._@param routerFunction the router function to convert_@param strategies the strategies to use_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies.messageReaders())__			addAttributes(exchange, request)__			return routerFunction.route(request)_					.defaultIfEmpty(notFound())_					.flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request)))_					.flatMap(response -> wrapException(() -> response.writeTo(exchange,_							new HandlerStrategiesResponseContext(strategies))))__		}__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,using,the,given,strategies,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,exchange,server,request,request,new,default,server,request,exchange,strategies,message,readers,add,attributes,exchange,request,return,router,function,route,request,default,if,empty,not,found,flat,map,handler,function,wrap,exception,handler,function,handle,request,flat,map,response,wrap,exception,response,write,to,exchange,new,handler,strategies,response,context,strategies
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1501161935;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler},_using the given strategies._@param routerFunction the router function to convert_@param strategies the strategies to use_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies.messageReaders())__			addAttributes(exchange, request)__			return routerFunction.route(request)_					.defaultIfEmpty(notFound())_					.flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request)))_					.flatMap(response -> wrapException(() -> response.writeTo(exchange,_							new HandlerStrategiesResponseContext(strategies))))__		}__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,using,the,given,strategies,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,exchange,server,request,request,new,default,server,request,exchange,strategies,message,readers,add,attributes,exchange,request,return,router,function,route,request,default,if,empty,not,found,flat,map,handler,function,wrap,exception,handler,function,handle,request,flat,map,response,wrap,exception,response,write,to,exchange,new,handler,strategies,response,context,strategies
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1506081789;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler},_using the given strategies._@param routerFunction the router function to convert_@param strategies the strategies to use_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies.messageReaders())__			addAttributes(exchange, request)__			return routerFunction.route(request)_					.defaultIfEmpty(notFound())_					.flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request)))_					.flatMap(response -> wrapException(() -> response.writeTo(exchange,_							new HandlerStrategiesResponseContext(strategies))))__		}__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,using,the,given,strategies,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,exchange,server,request,request,new,default,server,request,exchange,strategies,message,readers,add,attributes,exchange,request,return,router,function,route,request,default,if,empty,not,found,flat,map,handler,function,wrap,exception,handler,function,handle,request,flat,map,response,wrap,exception,response,write,to,exchange,new,handler,strategies,response,context,strategies
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1520528267;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler},_using the given strategies._@param routerFunction the router function to convert_@param strategies the strategies to use_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies.messageReaders())__			addAttributes(exchange, request)__			return routerFunction.route(request)_					.defaultIfEmpty(notFound())_					.flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request)))_					.flatMap(response -> wrapException(() -> response.writeTo(exchange,_							new HandlerStrategiesResponseContext(strategies))))__		}__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,using,the,given,strategies,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,exchange,server,request,request,new,default,server,request,exchange,strategies,message,readers,add,attributes,exchange,request,return,router,function,route,request,default,if,empty,not,found,flat,map,handler,function,wrap,exception,handler,function,handle,request,flat,map,response,wrap,exception,response,write,to,exchange,new,handler,strategies,response,context,strategies
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1524865018;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler},_using the given strategies._@param routerFunction the router function to convert_@param strategies the strategies to use_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies.messageReaders())__			addAttributes(exchange, request)__			return routerFunction.route(request)_					.defaultIfEmpty(notFound())_					.flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request)))_					.flatMap(response -> wrapException(() -> response.writeTo(exchange,_							new HandlerStrategiesResponseContext(strategies))))__		}__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,using,the,given,strategies,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,exchange,server,request,request,new,default,server,request,exchange,strategies,message,readers,add,attributes,exchange,request,return,router,function,route,request,default,if,empty,not,found,flat,map,handler,function,wrap,exception,handler,function,handle,request,flat,map,response,wrap,exception,response,write,to,exchange,new,handler,strategies,response,context,strategies
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1525433784;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler},_using the given strategies._@param routerFunction the router function to convert_@param strategies the strategies to use_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies.messageReaders())__			addAttributes(exchange, request)__			return routerFunction.route(request)_					.defaultIfEmpty(notFound())_					.flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request)))_					.flatMap(response -> wrapException(() -> response.writeTo(exchange,_							new HandlerStrategiesResponseContext(strategies))))__		}__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,using,the,given,strategies,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,exchange,server,request,request,new,default,server,request,exchange,strategies,message,readers,add,attributes,exchange,request,return,router,function,route,request,default,if,empty,not,found,flat,map,handler,function,wrap,exception,handler,function,handle,request,flat,map,response,wrap,exception,response,write,to,exchange,new,handler,strategies,response,context,strategies
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1526553177;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler},_using the given strategies._@param routerFunction the router function to convert_@param strategies the strategies to use_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies.messageReaders())__			addAttributes(exchange, request)__			return routerFunction.route(request)_					.defaultIfEmpty(notFound())_					.flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request)))_					.flatMap(response -> wrapException(() -> response.writeTo(exchange,_							new HandlerStrategiesResponseContext(strategies))))__		}__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,using,the,given,strategies,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,exchange,server,request,request,new,default,server,request,exchange,strategies,message,readers,add,attributes,exchange,request,return,router,function,route,request,default,if,empty,not,found,flat,map,handler,function,wrap,exception,handler,function,handle,request,flat,map,response,wrap,exception,response,write,to,exchange,new,handler,strategies,response,context,strategies
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1527601711;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler},_using the given strategies._@param routerFunction the router function to convert_@param strategies the strategies to use_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies.messageReaders())__			addAttributes(exchange, request)__			return routerFunction.route(request)_					.defaultIfEmpty(notFound())_					.flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request)))_					.flatMap(response -> wrapException(() -> response.writeTo(exchange,_							new HandlerStrategiesResponseContext(strategies))))__		}__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,using,the,given,strategies,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,exchange,server,request,request,new,default,server,request,exchange,strategies,message,readers,add,attributes,exchange,request,return,router,function,route,request,default,if,empty,not,found,flat,map,handler,function,wrap,exception,handler,function,handle,request,flat,map,response,wrap,exception,response,write,to,exchange,new,handler,strategies,response,context,strategies
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1529721864;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler},_using the given strategies._@param routerFunction the router function to convert_@param strategies the strategies to use_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies.messageReaders())__			addAttributes(exchange, request)__			return routerFunction.route(request)_					.defaultIfEmpty(notFound())_					.flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request)))_					.flatMap(response -> wrapException(() -> response.writeTo(exchange,_							new HandlerStrategiesResponseContext(strategies))))__		}__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,using,the,given,strategies,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,exchange,server,request,request,new,default,server,request,exchange,strategies,message,readers,add,attributes,exchange,request,return,router,function,route,request,default,if,empty,not,found,flat,map,handler,function,wrap,exception,handler,function,handle,request,flat,map,response,wrap,exception,response,write,to,exchange,new,handler,strategies,response,context,strategies
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1530174524;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler},_using the given strategies._@param routerFunction the router function to convert_@param strategies the strategies to use_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies.messageReaders())__			addAttributes(exchange, request)__			return routerFunction.route(request)_					.defaultIfEmpty(notFound())_					.flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request)))_					.flatMap(response -> wrapException(() -> response.writeTo(exchange,_							new HandlerStrategiesResponseContext(strategies))))__		}__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,using,the,given,strategies,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,exchange,server,request,request,new,default,server,request,exchange,strategies,message,readers,add,attributes,exchange,request,return,router,function,route,request,default,if,empty,not,found,flat,map,handler,function,wrap,exception,handler,function,handle,request,flat,map,response,wrap,exception,response,write,to,exchange,new,handler,strategies,response,context,strategies
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1530174524;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler},_using the given strategies._@param routerFunction the router function to convert_@param strategies the strategies to use_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies.messageReaders())__			addAttributes(exchange, request)__			return routerFunction.route(request)_					.defaultIfEmpty(notFound())_					.flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request)))_					.flatMap(response -> wrapException(() -> response.writeTo(exchange,_							new HandlerStrategiesResponseContext(strategies))))__		}__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,using,the,given,strategies,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,exchange,server,request,request,new,default,server,request,exchange,strategies,message,readers,add,attributes,exchange,request,return,router,function,route,request,default,if,empty,not,found,flat,map,handler,function,wrap,exception,handler,function,handle,request,flat,map,response,wrap,exception,response,write,to,exchange,new,handler,strategies,response,context,strategies
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1530177818;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler},_using the given strategies._@param routerFunction the router function to convert_@param strategies the strategies to use_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies.messageReaders())__			addAttributes(exchange, request)__			return routerFunction.route(request)_					.defaultIfEmpty(notFound())_					.flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request)))_					.flatMap(response -> wrapException(() -> response.writeTo(exchange,_							new HandlerStrategiesResponseContext(strategies))))__		}__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,using,the,given,strategies,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,exchange,server,request,request,new,default,server,request,exchange,strategies,message,readers,add,attributes,exchange,request,return,router,function,route,request,default,if,empty,not,found,flat,map,handler,function,wrap,exception,handler,function,handle,request,flat,map,response,wrap,exception,response,write,to,exchange,new,handler,strategies,response,context,strategies
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1530187774;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler},_using the given strategies._@param routerFunction the router function to convert_@param strategies the strategies to use_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies.messageReaders())__			addAttributes(exchange, request)__			return routerFunction.route(request)_					.defaultIfEmpty(notFound())_					.flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request)))_					.flatMap(response -> wrapException(() -> response.writeTo(exchange,_							new HandlerStrategiesResponseContext(strategies))))__		}__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,using,the,given,strategies,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,exchange,server,request,request,new,default,server,request,exchange,strategies,message,readers,add,attributes,exchange,request,return,router,function,route,request,default,if,empty,not,found,flat,map,handler,function,wrap,exception,handler,function,handle,request,flat,map,response,wrap,exception,response,write,to,exchange,new,handler,strategies,response,context,strategies
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1530793633;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler},_using the given strategies._@param routerFunction the router function to convert_@param strategies the strategies to use_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies.messageReaders())__			addAttributes(exchange, request)__			return routerFunction.route(request)_					.defaultIfEmpty(notFound())_					.flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request)))_					.flatMap(response -> wrapException(() -> response.writeTo(exchange,_							new HandlerStrategiesResponseContext(strategies))))__		}__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,using,the,given,strategies,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,exchange,server,request,request,new,default,server,request,exchange,strategies,message,readers,add,attributes,exchange,request,return,router,function,route,request,default,if,empty,not,found,flat,map,handler,function,wrap,exception,handler,function,handle,request,flat,map,response,wrap,exception,response,write,to,exchange,new,handler,strategies,response,context,strategies
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1530871268;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler},_using the given strategies._@param routerFunction the router function to convert_@param strategies the strategies to use_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies.messageReaders())__			addAttributes(exchange, request)__			return routerFunction.route(request)_					.defaultIfEmpty(notFound())_					.flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request)))_					.flatMap(response -> wrapException(() -> response.writeTo(exchange,_							new HandlerStrategiesResponseContext(strategies))))__		}__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,using,the,given,strategies,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,exchange,server,request,request,new,default,server,request,exchange,strategies,message,readers,add,attributes,exchange,request,return,router,function,route,request,default,if,empty,not,found,flat,map,handler,function,wrap,exception,handler,function,handle,request,flat,map,response,wrap,exception,response,write,to,exchange,new,handler,strategies,response,context,strategies
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1530877097;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler},_using the given strategies._@param routerFunction the router function to convert_@param strategies the strategies to use_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies.messageReaders())__			addAttributes(exchange, request)__			return routerFunction.route(request)_					.defaultIfEmpty(notFound())_					.flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request)))_					.flatMap(response -> wrapException(() -> response.writeTo(exchange,_							new HandlerStrategiesResponseContext(strategies))))__		}__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,using,the,given,strategies,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,exchange,server,request,request,new,default,server,request,exchange,strategies,message,readers,add,attributes,exchange,request,return,router,function,route,request,default,if,empty,not,found,flat,map,handler,function,wrap,exception,handler,function,handle,request,flat,map,response,wrap,exception,response,write,to,exchange,new,handler,strategies,response,context,strategies
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1530880709;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler},_using the given strategies._@param routerFunction the router function to convert_@param strategies the strategies to use_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies.messageReaders())__			addAttributes(exchange, request)__			return routerFunction.route(request)_					.defaultIfEmpty(notFound())_					.flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request)))_					.flatMap(response -> wrapException(() -> response.writeTo(exchange,_							new HandlerStrategiesResponseContext(strategies))))__		}__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,using,the,given,strategies,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,exchange,server,request,request,new,default,server,request,exchange,strategies,message,readers,add,attributes,exchange,request,return,router,function,route,request,default,if,empty,not,found,flat,map,handler,function,wrap,exception,handler,function,handle,request,flat,map,response,wrap,exception,response,write,to,exchange,new,handler,strategies,response,context,strategies
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1537188605;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler},_using the given strategies._@param routerFunction the router function to convert_@param strategies the strategies to use_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies.messageReaders())__			addAttributes(exchange, request)__			return routerFunction.route(request)_					.defaultIfEmpty(notFound())_					.flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request)))_					.flatMap(response -> wrapException(() -> response.writeTo(exchange,_							new HandlerStrategiesResponseContext(strategies))))__		}__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,using,the,given,strategies,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,exchange,server,request,request,new,default,server,request,exchange,strategies,message,readers,add,attributes,exchange,request,return,router,function,route,request,default,if,empty,not,found,flat,map,handler,function,wrap,exception,handler,function,handle,request,flat,map,response,wrap,exception,response,write,to,exchange,new,handler,strategies,response,context,strategies
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1538664611;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler},_using the given strategies._@param routerFunction the router function to convert_@param strategies the strategies to use_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies.messageReaders())__			addAttributes(exchange, request)__			return routerFunction.route(request)_					.defaultIfEmpty(notFound())_					.flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request)))_					.flatMap(response -> wrapException(() -> response.writeTo(exchange,_							new HandlerStrategiesResponseContext(strategies))))__		}__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,using,the,given,strategies,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,exchange,server,request,request,new,default,server,request,exchange,strategies,message,readers,add,attributes,exchange,request,return,router,function,route,request,default,if,empty,not,found,flat,map,handler,function,wrap,exception,handler,function,handle,request,flat,map,response,wrap,exception,response,write,to,exchange,new,handler,strategies,response,context,strategies
RouterFunctions -> public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1539866925;Convert the given {@linkplain RouterFunction router function} into a {@link WebHandler},_using the given strategies._@param routerFunction the router function to convert_@param strategies the strategies to use_@return a web handler that handles web request using the given router function;public static WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies.messageReaders())__			addAttributes(exchange, request)__			return routerFunction.route(request)_					.defaultIfEmpty(notFound())_					.flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request)))_					.flatMap(response -> wrapException(() -> response.writeTo(exchange,_							new HandlerStrategiesResponseContext(strategies))))__		}__	};convert,the,given,linkplain,router,function,router,function,into,a,link,web,handler,using,the,given,strategies,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,a,web,handler,that,handles,web,request,using,the,given,router,function;public,static,web,handler,to,web,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,exchange,server,request,request,new,default,server,request,exchange,strategies,message,readers,add,attributes,exchange,request,return,router,function,route,request,default,if,empty,not,found,flat,map,handler,function,wrap,exception,handler,function,handle,request,flat,map,response,wrap,exception,response,write,to,exchange,new,handler,strategies,response,context,strategies
RouterFunctions -> Builder -> Builder routePatch(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530177818;Adds a route to the given handler function that handles all HTTP {@code PATCH} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code PATCH} requests that_match {@code pattern}_@return this builder;Builder routePatch(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,patch,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,patch,requests,that,match,code,pattern,return,this,builder;builder,route,patch,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder routePatch(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530187774;Adds a route to the given handler function that handles all HTTP {@code PATCH} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code PATCH} requests that_match {@code pattern}_@return this builder;Builder routePatch(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,patch,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,patch,requests,that,match,code,pattern,return,this,builder;builder,route,patch,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder routePatch(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530793633;Adds a route to the given handler function that handles all HTTP {@code PATCH} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code PATCH} requests that_match {@code pattern}_@return this builder;Builder routePatch(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,patch,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,patch,requests,that,match,code,pattern,return,this,builder;builder,route,patch,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder filterAfter(BiFunction<ServerRequest, ServerResponse, Mono<ServerResponse>> responseProcessor)_;1530187774;Filters the response for all routes created by this builder with the given response_processing function. Filters are typically used to address cross-cutting concerns, such_as logging, security, etc._<p>For instance, the following example creates a filter that logs the response after_the handler function executes._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.builder()_.routeGet("/user", this::listUsers)_.filterAfter((request, response) -> {_log(response)__return Mono.just(response)___.build()__</pre>_@param responseProcessor a function that transforms the response_@return this builder;Builder filterAfter(BiFunction<ServerRequest, ServerResponse, Mono<ServerResponse>> responseProcessor)_;filters,the,response,for,all,routes,created,by,this,builder,with,the,given,response,processing,function,filters,are,typically,used,to,address,cross,cutting,concerns,such,as,logging,security,etc,p,for,instance,the,following,example,creates,a,filter,that,logs,the,response,after,the,handler,function,executes,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,builder,route,get,user,this,list,users,filter,after,request,response,log,response,return,mono,just,response,build,pre,param,response,processor,a,function,that,transforms,the,response,return,this,builder;builder,filter,after,bi,function,server,request,server,response,mono,server,response,response,processor
RouterFunctions -> Builder -> Builder filterAfter(BiFunction<ServerRequest, ServerResponse, Mono<ServerResponse>> responseProcessor)_;1530793633;Filters the response for all routes created by this builder with the given response_processing function. Filters are typically used to address cross-cutting concerns, such_as logging, security, etc._<p>For instance, the following example creates a filter that logs the response after_the handler function executes._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.builder()_.routeGet("/user", this::listUsers)_.filterAfter((request, response) -> {_log(response)__return Mono.just(response)___.build()__</pre>_@param responseProcessor a function that transforms the response_@return this builder;Builder filterAfter(BiFunction<ServerRequest, ServerResponse, Mono<ServerResponse>> responseProcessor)_;filters,the,response,for,all,routes,created,by,this,builder,with,the,given,response,processing,function,filters,are,typically,used,to,address,cross,cutting,concerns,such,as,logging,security,etc,p,for,instance,the,following,example,creates,a,filter,that,logs,the,response,after,the,handler,function,executes,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,builder,route,get,user,this,list,users,filter,after,request,response,log,response,return,mono,just,response,build,pre,param,response,processor,a,function,that,transforms,the,response,return,this,builder;builder,filter,after,bi,function,server,request,server,response,mono,server,response,response,processor
RouterFunctions -> Builder -> Builder routeDelete(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530177818;Adds a route to the given handler function that handles all HTTP {@code DELETE} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code DELETE} requests that_match {@code pattern}_@return this builder;Builder routeDelete(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,delete,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,delete,requests,that,match,code,pattern,return,this,builder;builder,route,delete,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder routeDelete(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530187774;Adds a route to the given handler function that handles all HTTP {@code DELETE} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code DELETE} requests that_match {@code pattern}_@return this builder;Builder routeDelete(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,delete,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,delete,requests,that,match,code,pattern,return,this,builder;builder,route,delete,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder routeDelete(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530793633;Adds a route to the given handler function that handles all HTTP {@code DELETE} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code DELETE} requests that_match {@code pattern}_@return this builder;Builder routeDelete(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,delete,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,delete,requests,that,match,code,pattern,return,this,builder;builder,route,delete,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> route( 			RequestPredicate predicate, HandlerFunction<T> handlerFunction);1524865018;Route to the given handler function if the given request predicate applies._<p>For instance, the following example routes GET requests for "/user" to the_{@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route(RequestPredicates.GET("/user"), userController::listUsers)__</pre>_@param predicate the predicate to test_@param handlerFunction the handler function to route to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code handlerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> route(_			RequestPredicate predicate, HandlerFunction<T> handlerFunction) {__		return new DefaultRouterFunction<>(predicate, handlerFunction)__	};route,to,the,given,handler,function,if,the,given,request,predicate,applies,p,for,instance,the,following,example,routes,get,requests,for,user,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,request,predicates,get,user,user,controller,list,users,pre,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,handler,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,route,request,predicate,predicate,handler,function,t,handler,function,return,new,default,router,function,predicate,handler,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> route( 			RequestPredicate predicate, HandlerFunction<T> handlerFunction);1525433784;Route to the given handler function if the given request predicate applies._<p>For instance, the following example routes GET requests for "/user" to the_{@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route(RequestPredicates.GET("/user"), userController::listUsers)__</pre>_@param predicate the predicate to test_@param handlerFunction the handler function to route to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code handlerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> route(_			RequestPredicate predicate, HandlerFunction<T> handlerFunction) {__		return new DefaultRouterFunction<>(predicate, handlerFunction)__	};route,to,the,given,handler,function,if,the,given,request,predicate,applies,p,for,instance,the,following,example,routes,get,requests,for,user,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,request,predicates,get,user,user,controller,list,users,pre,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,handler,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,route,request,predicate,predicate,handler,function,t,handler,function,return,new,default,router,function,predicate,handler,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> route( 			RequestPredicate predicate, HandlerFunction<T> handlerFunction);1526553177;Route to the given handler function if the given request predicate applies._<p>For instance, the following example routes GET requests for "/user" to the_{@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route(RequestPredicates.GET("/user"), userController::listUsers)__</pre>_@param predicate the predicate to test_@param handlerFunction the handler function to route to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code handlerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> route(_			RequestPredicate predicate, HandlerFunction<T> handlerFunction) {__		return new DefaultRouterFunction<>(predicate, handlerFunction)__	};route,to,the,given,handler,function,if,the,given,request,predicate,applies,p,for,instance,the,following,example,routes,get,requests,for,user,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,request,predicates,get,user,user,controller,list,users,pre,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,handler,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,route,request,predicate,predicate,handler,function,t,handler,function,return,new,default,router,function,predicate,handler,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> route( 			RequestPredicate predicate, HandlerFunction<T> handlerFunction);1527601711;Route to the given handler function if the given request predicate applies._<p>For instance, the following example routes GET requests for "/user" to the_{@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route(RequestPredicates.GET("/user"), userController::listUsers)__</pre>_@param predicate the predicate to test_@param handlerFunction the handler function to route to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code handlerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> route(_			RequestPredicate predicate, HandlerFunction<T> handlerFunction) {__		return new DefaultRouterFunction<>(predicate, handlerFunction)__	};route,to,the,given,handler,function,if,the,given,request,predicate,applies,p,for,instance,the,following,example,routes,get,requests,for,user,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,request,predicates,get,user,user,controller,list,users,pre,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,handler,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,route,request,predicate,predicate,handler,function,t,handler,function,return,new,default,router,function,predicate,handler,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> route( 			RequestPredicate predicate, HandlerFunction<T> handlerFunction);1529721864;Route to the given handler function if the given request predicate applies._<p>For instance, the following example routes GET requests for "/user" to the_{@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route(RequestPredicates.GET("/user"), userController::listUsers)__</pre>_@param predicate the predicate to test_@param handlerFunction the handler function to route to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code handlerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> route(_			RequestPredicate predicate, HandlerFunction<T> handlerFunction) {__		return new DefaultRouterFunction<>(predicate, handlerFunction)__	};route,to,the,given,handler,function,if,the,given,request,predicate,applies,p,for,instance,the,following,example,routes,get,requests,for,user,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,request,predicates,get,user,user,controller,list,users,pre,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,handler,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,route,request,predicate,predicate,handler,function,t,handler,function,return,new,default,router,function,predicate,handler,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> route( 			RequestPredicate predicate, HandlerFunction<T> handlerFunction);1530174524;Route to the given handler function if the given request predicate applies._<p>For instance, the following example routes GET requests for "/user" to the_{@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route(RequestPredicates.GET("/user"), userController::listUsers)__</pre>_@param predicate the predicate to test_@param handlerFunction the handler function to route to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code handlerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> route(_			RequestPredicate predicate, HandlerFunction<T> handlerFunction) {__		return new DefaultRouterFunction<>(predicate, handlerFunction)__	};route,to,the,given,handler,function,if,the,given,request,predicate,applies,p,for,instance,the,following,example,routes,get,requests,for,user,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,request,predicates,get,user,user,controller,list,users,pre,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,handler,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,route,request,predicate,predicate,handler,function,t,handler,function,return,new,default,router,function,predicate,handler,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> route( 			RequestPredicate predicate, HandlerFunction<T> handlerFunction);1530174524;Route to the given handler function if the given request predicate applies._<p>For instance, the following example routes GET requests for "/user" to the_{@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route(RequestPredicates.GET("/user"), userController::listUsers)__</pre>_@param predicate the predicate to test_@param handlerFunction the handler function to route to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code handlerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> route(_			RequestPredicate predicate, HandlerFunction<T> handlerFunction) {__		return new DefaultRouterFunction<>(predicate, handlerFunction)__	};route,to,the,given,handler,function,if,the,given,request,predicate,applies,p,for,instance,the,following,example,routes,get,requests,for,user,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,request,predicates,get,user,user,controller,list,users,pre,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,handler,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,route,request,predicate,predicate,handler,function,t,handler,function,return,new,default,router,function,predicate,handler,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> route( 			RequestPredicate predicate, HandlerFunction<T> handlerFunction);1530177818;Route to the given handler function if the given request predicate applies._<p>For instance, the following example routes GET requests for "/user" to the_{@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route(RequestPredicates.GET("/user"), userController::listUsers)__</pre>_@param predicate the predicate to test_@param handlerFunction the handler function to route to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code handlerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> route(_			RequestPredicate predicate, HandlerFunction<T> handlerFunction) {__		return new DefaultRouterFunction<>(predicate, handlerFunction)__	};route,to,the,given,handler,function,if,the,given,request,predicate,applies,p,for,instance,the,following,example,routes,get,requests,for,user,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,request,predicates,get,user,user,controller,list,users,pre,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,handler,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,route,request,predicate,predicate,handler,function,t,handler,function,return,new,default,router,function,predicate,handler,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> route( 			RequestPredicate predicate, HandlerFunction<T> handlerFunction);1530187774;Route to the given handler function if the given request predicate applies._<p>For instance, the following example routes GET requests for "/user" to the_{@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route(RequestPredicates.GET("/user"), userController::listUsers)__</pre>_@param predicate the predicate to test_@param handlerFunction the handler function to route to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code handlerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> route(_			RequestPredicate predicate, HandlerFunction<T> handlerFunction) {__		return new DefaultRouterFunction<>(predicate, handlerFunction)__	};route,to,the,given,handler,function,if,the,given,request,predicate,applies,p,for,instance,the,following,example,routes,get,requests,for,user,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,request,predicates,get,user,user,controller,list,users,pre,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,handler,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,route,request,predicate,predicate,handler,function,t,handler,function,return,new,default,router,function,predicate,handler,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> route( 			RequestPredicate predicate, HandlerFunction<T> handlerFunction);1530793633;Route to the given handler function if the given request predicate applies._<p>For instance, the following example routes GET requests for "/user" to the_{@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route(RequestPredicates.GET("/user"), userController::listUsers)__</pre>_@param predicate the predicate to test_@param handlerFunction the handler function to route to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code handlerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> route(_			RequestPredicate predicate, HandlerFunction<T> handlerFunction) {__		return new DefaultRouterFunction<>(predicate, handlerFunction)__	};route,to,the,given,handler,function,if,the,given,request,predicate,applies,p,for,instance,the,following,example,routes,get,requests,for,user,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,request,predicates,get,user,user,controller,list,users,pre,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,handler,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,route,request,predicate,predicate,handler,function,t,handler,function,return,new,default,router,function,predicate,handler,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> route( 			RequestPredicate predicate, HandlerFunction<T> handlerFunction);1530871268;Route to the given handler function if the given request predicate applies._<p>For instance, the following example routes GET requests for "/user" to the_{@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route(RequestPredicates.GET("/user"), userController::listUsers)__</pre>_@param predicate the predicate to test_@param handlerFunction the handler function to route to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code handlerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> route(_			RequestPredicate predicate, HandlerFunction<T> handlerFunction) {__		return new DefaultRouterFunction<>(predicate, handlerFunction)__	};route,to,the,given,handler,function,if,the,given,request,predicate,applies,p,for,instance,the,following,example,routes,get,requests,for,user,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,request,predicates,get,user,user,controller,list,users,pre,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,handler,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,route,request,predicate,predicate,handler,function,t,handler,function,return,new,default,router,function,predicate,handler,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> route( 			RequestPredicate predicate, HandlerFunction<T> handlerFunction);1530877097;Route to the given handler function if the given request predicate applies._<p>For instance, the following example routes GET requests for "/user" to the_{@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route(RequestPredicates.GET("/user"), userController::listUsers)__</pre>_@param predicate the predicate to test_@param handlerFunction the handler function to route to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code handlerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> route(_			RequestPredicate predicate, HandlerFunction<T> handlerFunction) {__		return new DefaultRouterFunction<>(predicate, handlerFunction)__	};route,to,the,given,handler,function,if,the,given,request,predicate,applies,p,for,instance,the,following,example,routes,get,requests,for,user,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,request,predicates,get,user,user,controller,list,users,pre,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,handler,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,route,request,predicate,predicate,handler,function,t,handler,function,return,new,default,router,function,predicate,handler,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> route( 			RequestPredicate predicate, HandlerFunction<T> handlerFunction);1530880709;Route to the given handler function if the given request predicate applies._<p>For instance, the following example routes GET requests for "/user" to the_{@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route(RequestPredicates.GET("/user"), userController::listUsers)__</pre>_@param predicate the predicate to test_@param handlerFunction the handler function to route to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code handlerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> route(_			RequestPredicate predicate, HandlerFunction<T> handlerFunction) {__		return new DefaultRouterFunction<>(predicate, handlerFunction)__	};route,to,the,given,handler,function,if,the,given,request,predicate,applies,p,for,instance,the,following,example,routes,get,requests,for,user,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,request,predicates,get,user,user,controller,list,users,pre,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,handler,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,route,request,predicate,predicate,handler,function,t,handler,function,return,new,default,router,function,predicate,handler,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> route( 			RequestPredicate predicate, HandlerFunction<T> handlerFunction);1537188605;Route to the given handler function if the given request predicate applies._<p>For instance, the following example routes GET requests for "/user" to the_{@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route(RequestPredicates.GET("/user"), userController::listUsers)__</pre>_@param predicate the predicate to test_@param handlerFunction the handler function to route to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code handlerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> route(_			RequestPredicate predicate, HandlerFunction<T> handlerFunction) {__		return new DefaultRouterFunction<>(predicate, handlerFunction)__	};route,to,the,given,handler,function,if,the,given,request,predicate,applies,p,for,instance,the,following,example,routes,get,requests,for,user,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,request,predicates,get,user,user,controller,list,users,pre,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,handler,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,route,request,predicate,predicate,handler,function,t,handler,function,return,new,default,router,function,predicate,handler,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> route( 			RequestPredicate predicate, HandlerFunction<T> handlerFunction);1538664611;Route to the given handler function if the given request predicate applies._<p>For instance, the following example routes GET requests for "/user" to the_{@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route(RequestPredicates.GET("/user"), userController::listUsers)__</pre>_@param predicate the predicate to test_@param handlerFunction the handler function to route to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code handlerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> route(_			RequestPredicate predicate, HandlerFunction<T> handlerFunction) {__		return new DefaultRouterFunction<>(predicate, handlerFunction)__	};route,to,the,given,handler,function,if,the,given,request,predicate,applies,p,for,instance,the,following,example,routes,get,requests,for,user,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,request,predicates,get,user,user,controller,list,users,pre,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,handler,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,route,request,predicate,predicate,handler,function,t,handler,function,return,new,default,router,function,predicate,handler,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> route( 			RequestPredicate predicate, HandlerFunction<T> handlerFunction);1539866925;Route to the given handler function if the given request predicate applies._<p>For instance, the following example routes GET requests for "/user" to the_{@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route(RequestPredicates.GET("/user"), userController::listUsers)__</pre>_@param predicate the predicate to test_@param handlerFunction the handler function to route to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code handlerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> route(_			RequestPredicate predicate, HandlerFunction<T> handlerFunction) {__		return new DefaultRouterFunction<>(predicate, handlerFunction)__	};route,to,the,given,handler,function,if,the,given,request,predicate,applies,p,for,instance,the,following,example,routes,get,requests,for,user,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,request,predicates,get,user,user,controller,list,users,pre,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,handler,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,route,request,predicate,predicate,handler,function,t,handler,function,return,new,default,router,function,predicate,handler,function
RouterFunctions -> Builder -> Builder OPTIONS(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530871268;Adds a route to the given handler function that handles all HTTP {@code OPTIONS} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code OPTIONS} requests that_match {@code pattern}_@return this builder;Builder OPTIONS(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,options,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,options,requests,that,match,code,pattern,return,this,builder;builder,options,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder OPTIONS(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530877097;Adds a route to the given handler function that handles all HTTP {@code OPTIONS} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code OPTIONS} requests that_match {@code pattern}_@return this builder;Builder OPTIONS(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,options,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,options,requests,that,match,code,pattern,return,this,builder;builder,options,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder OPTIONS(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530880709;Adds a route to the given handler function that handles all HTTP {@code OPTIONS} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code OPTIONS} requests that_match {@code pattern}_@return this builder;Builder OPTIONS(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,options,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,options,requests,that,match,code,pattern,return,this,builder;builder,options,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder OPTIONS(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1537188605;Adds a route to the given handler function that handles all HTTP {@code OPTIONS} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code OPTIONS} requests that_match {@code pattern}_@return this builder;Builder OPTIONS(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,options,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,options,requests,that,match,code,pattern,return,this,builder;builder,options,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder OPTIONS(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1538664611;Adds a route to the given handler function that handles all HTTP {@code OPTIONS} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code OPTIONS} requests that_match {@code pattern}_@return this builder;Builder OPTIONS(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,options,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,options,requests,that,match,code,pattern,return,this,builder;builder,options,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder OPTIONS(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1539866925;Adds a route to the given handler function that handles all HTTP {@code OPTIONS} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code OPTIONS} requests that_match {@code pattern}_@return this builder;Builder OPTIONS(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,options,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,options,requests,that,match,code,pattern,return,this,builder;builder,options,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder routePut(HandlerFunction<ServerResponse> handlerFunction)_;1530177818;Adds a route to the given handler function that handles all HTTP {@code PUT} requests._@param handlerFunction the handler function to handle all {@code PUT} requests_@return this builder;Builder routePut(HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,put,requests,param,handler,function,the,handler,function,to,handle,all,code,put,requests,return,this,builder;builder,route,put,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder routePut(HandlerFunction<ServerResponse> handlerFunction)_;1530187774;Adds a route to the given handler function that handles all HTTP {@code PUT} requests._@param handlerFunction the handler function to handle all {@code PUT} requests_@return this builder;Builder routePut(HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,put,requests,param,handler,function,the,handler,function,to,handle,all,code,put,requests,return,this,builder;builder,route,put,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder routePut(HandlerFunction<ServerResponse> handlerFunction)_;1530793633;Adds a route to the given handler function that handles all HTTP {@code PUT} requests._@param handlerFunction the handler function to handle all {@code PUT} requests_@return this builder;Builder routePut(HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,put,requests,param,handler,function,the,handler,function,to,handle,all,code,put,requests,return,this,builder;builder,route,put,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder HEAD(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1530871268;Adds a route to the given handler function that handles all HTTP {@code HEAD} requests_that match the given pattern and predicate._@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code HEAD} requests that_match {@code pattern}_@return this builder;Builder HEAD(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,head,requests,that,match,the,given,pattern,and,predicate,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,head,requests,that,match,code,pattern,return,this,builder;builder,head,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder HEAD(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1530877097;Adds a route to the given handler function that handles all HTTP {@code HEAD} requests_that match the given pattern and predicate._@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code HEAD} requests that_match {@code pattern}_@return this builder;Builder HEAD(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,head,requests,that,match,the,given,pattern,and,predicate,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,head,requests,that,match,code,pattern,return,this,builder;builder,head,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder HEAD(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1530880709;Adds a route to the given handler function that handles all HTTP {@code HEAD} requests_that match the given pattern and predicate._@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code HEAD} requests that_match {@code pattern}_@return this builder;Builder HEAD(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,head,requests,that,match,the,given,pattern,and,predicate,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,head,requests,that,match,code,pattern,return,this,builder;builder,head,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder HEAD(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1537188605;Adds a route to the given handler function that handles all HTTP {@code HEAD} requests_that match the given pattern and predicate._@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code HEAD} requests that_match {@code pattern}_@return this builder;Builder HEAD(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,head,requests,that,match,the,given,pattern,and,predicate,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,head,requests,that,match,code,pattern,return,this,builder;builder,head,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder HEAD(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1538664611;Adds a route to the given handler function that handles all HTTP {@code HEAD} requests_that match the given pattern and predicate._@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code HEAD} requests that_match {@code pattern}_@return this builder;Builder HEAD(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,head,requests,that,match,the,given,pattern,and,predicate,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,head,requests,that,match,code,pattern,return,this,builder;builder,head,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder HEAD(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1539866925;Adds a route to the given handler function that handles all HTTP {@code HEAD} requests_that match the given pattern and predicate._@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code HEAD} requests that_match {@code pattern}_@return this builder;Builder HEAD(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,head,requests,that,match,the,given,pattern,and,predicate,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,head,requests,that,match,code,pattern,return,this,builder;builder,head,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder DELETE(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530871268;Adds a route to the given handler function that handles all HTTP {@code DELETE} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code DELETE} requests that_match {@code pattern}_@return this builder;Builder DELETE(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,delete,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,delete,requests,that,match,code,pattern,return,this,builder;builder,delete,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder DELETE(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530877097;Adds a route to the given handler function that handles all HTTP {@code DELETE} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code DELETE} requests that_match {@code pattern}_@return this builder;Builder DELETE(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,delete,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,delete,requests,that,match,code,pattern,return,this,builder;builder,delete,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder DELETE(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530880709;Adds a route to the given handler function that handles all HTTP {@code DELETE} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code DELETE} requests that_match {@code pattern}_@return this builder;Builder DELETE(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,delete,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,delete,requests,that,match,code,pattern,return,this,builder;builder,delete,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder DELETE(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1537188605;Adds a route to the given handler function that handles all HTTP {@code DELETE} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code DELETE} requests that_match {@code pattern}_@return this builder;Builder DELETE(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,delete,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,delete,requests,that,match,code,pattern,return,this,builder;builder,delete,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder DELETE(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1538664611;Adds a route to the given handler function that handles all HTTP {@code DELETE} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code DELETE} requests that_match {@code pattern}_@return this builder;Builder DELETE(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,delete,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,delete,requests,that,match,code,pattern,return,this,builder;builder,delete,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder DELETE(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1539866925;Adds a route to the given handler function that handles all HTTP {@code DELETE} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code DELETE} requests that_match {@code pattern}_@return this builder;Builder DELETE(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,delete,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,delete,requests,that,match,code,pattern,return,this,builder;builder,delete,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder add(RouterFunction<ServerResponse> routerFunction)_;1530871268;Adds the given route to this builder. Can be used to merge externally defined router_functions into this builder, or can be combined with_{@link RouterFunctions#route(RequestPredicate, HandlerFunction)}_to allow for more flexible predicate matching._<p>For instance, the following example adds the router function returned from_{@code OrderController.routerFunction()}._to the {@code changeUser} method in {@code userController}:_<pre class="code">_RouterFunction<ServerResponse> route =_RouterFunctions.route()_.GET("/users", userController::listUsers)_.add(orderController.routerFunction())__.build()__</pre>_@param routerFunction the router function to be added_@return this builder_@see RequestPredicates;Builder add(RouterFunction<ServerResponse> routerFunction)_;adds,the,given,route,to,this,builder,can,be,used,to,merge,externally,defined,router,functions,into,this,builder,or,can,be,combined,with,link,router,functions,route,request,predicate,handler,function,to,allow,for,more,flexible,predicate,matching,p,for,instance,the,following,example,adds,the,router,function,returned,from,code,order,controller,router,function,to,the,code,change,user,method,in,code,user,controller,pre,class,code,router,function,server,response,route,router,functions,route,get,users,user,controller,list,users,add,order,controller,router,function,build,pre,param,router,function,the,router,function,to,be,added,return,this,builder,see,request,predicates;builder,add,router,function,server,response,router,function
RouterFunctions -> Builder -> Builder add(RouterFunction<ServerResponse> routerFunction)_;1530877097;Adds the given route to this builder. Can be used to merge externally defined router_functions into this builder, or can be combined with_{@link RouterFunctions#route(RequestPredicate, HandlerFunction)}_to allow for more flexible predicate matching._<p>For instance, the following example adds the router function returned from_{@code OrderController.routerFunction()}._to the {@code changeUser} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route()_.GET("/users", userController::listUsers)_.add(orderController.routerFunction())__.build()__</pre>_@param routerFunction the router function to be added_@return this builder_@see RequestPredicates;Builder add(RouterFunction<ServerResponse> routerFunction)_;adds,the,given,route,to,this,builder,can,be,used,to,merge,externally,defined,router,functions,into,this,builder,or,can,be,combined,with,link,router,functions,route,request,predicate,handler,function,to,allow,for,more,flexible,predicate,matching,p,for,instance,the,following,example,adds,the,router,function,returned,from,code,order,controller,router,function,to,the,code,change,user,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,get,users,user,controller,list,users,add,order,controller,router,function,build,pre,param,router,function,the,router,function,to,be,added,return,this,builder,see,request,predicates;builder,add,router,function,server,response,router,function
RouterFunctions -> Builder -> Builder add(RouterFunction<ServerResponse> routerFunction)_;1530880709;Adds the given route to this builder. Can be used to merge externally defined router_functions into this builder, or can be combined with_{@link RouterFunctions#route(RequestPredicate, HandlerFunction)}_to allow for more flexible predicate matching._<p>For instance, the following example adds the router function returned from_{@code OrderController.routerFunction()}._to the {@code changeUser} method in {@code userController}:_<pre class="code">_RouterFunctionlt_ServerResponsegt_ route =_RouterFunctions.route()_.GET("/users", userController::listUsers)_.add(orderController.routerFunction())__.build()__</pre>_@param routerFunction the router function to be added_@return this builder_@see RequestPredicates;Builder add(RouterFunction<ServerResponse> routerFunction)_;adds,the,given,route,to,this,builder,can,be,used,to,merge,externally,defined,router,functions,into,this,builder,or,can,be,combined,with,link,router,functions,route,request,predicate,handler,function,to,allow,for,more,flexible,predicate,matching,p,for,instance,the,following,example,adds,the,router,function,returned,from,code,order,controller,router,function,to,the,code,change,user,method,in,code,user,controller,pre,class,code,router,functionlt,server,responsegt,route,router,functions,route,get,users,user,controller,list,users,add,order,controller,router,function,build,pre,param,router,function,the,router,function,to,be,added,return,this,builder,see,request,predicates;builder,add,router,function,server,response,router,function
RouterFunctions -> Builder -> Builder add(RouterFunction<ServerResponse> routerFunction)_;1537188605;Adds the given route to this builder. Can be used to merge externally defined router_functions into this builder, or can be combined with_{@link RouterFunctions#route(RequestPredicate, HandlerFunction)}_to allow for more flexible predicate matching._<p>For instance, the following example adds the router function returned from_{@code OrderController.routerFunction()}._to the {@code changeUser} method in {@code userController}:_<pre class="code">_RouterFunctionlt_ServerResponsegt_ route =_RouterFunctions.route()_.GET("/users", userController::listUsers)_.add(orderController.routerFunction())__.build()__</pre>_@param routerFunction the router function to be added_@return this builder_@see RequestPredicates;Builder add(RouterFunction<ServerResponse> routerFunction)_;adds,the,given,route,to,this,builder,can,be,used,to,merge,externally,defined,router,functions,into,this,builder,or,can,be,combined,with,link,router,functions,route,request,predicate,handler,function,to,allow,for,more,flexible,predicate,matching,p,for,instance,the,following,example,adds,the,router,function,returned,from,code,order,controller,router,function,to,the,code,change,user,method,in,code,user,controller,pre,class,code,router,functionlt,server,responsegt,route,router,functions,route,get,users,user,controller,list,users,add,order,controller,router,function,build,pre,param,router,function,the,router,function,to,be,added,return,this,builder,see,request,predicates;builder,add,router,function,server,response,router,function
RouterFunctions -> Builder -> Builder add(RouterFunction<ServerResponse> routerFunction)_;1538664611;Adds the given route to this builder. Can be used to merge externally defined router_functions into this builder, or can be combined with_{@link RouterFunctions#route(RequestPredicate, HandlerFunction)}_to allow for more flexible predicate matching._<p>For instance, the following example adds the router function returned from_{@code OrderController.routerFunction()}._to the {@code changeUser} method in {@code userController}:_<pre class="code">_RouterFunctionlt_ServerResponsegt_ route =_RouterFunctions.route()_.GET("/users", userController::listUsers)_.add(orderController.routerFunction())__.build()__</pre>_@param routerFunction the router function to be added_@return this builder_@see RequestPredicates;Builder add(RouterFunction<ServerResponse> routerFunction)_;adds,the,given,route,to,this,builder,can,be,used,to,merge,externally,defined,router,functions,into,this,builder,or,can,be,combined,with,link,router,functions,route,request,predicate,handler,function,to,allow,for,more,flexible,predicate,matching,p,for,instance,the,following,example,adds,the,router,function,returned,from,code,order,controller,router,function,to,the,code,change,user,method,in,code,user,controller,pre,class,code,router,functionlt,server,responsegt,route,router,functions,route,get,users,user,controller,list,users,add,order,controller,router,function,build,pre,param,router,function,the,router,function,to,be,added,return,this,builder,see,request,predicates;builder,add,router,function,server,response,router,function
RouterFunctions -> Builder -> Builder add(RouterFunction<ServerResponse> routerFunction)_;1539866925;Adds the given route to this builder. Can be used to merge externally defined router_functions into this builder, or can be combined with_{@link RouterFunctions#route(RequestPredicate, HandlerFunction)}_to allow for more flexible predicate matching._<p>For instance, the following example adds the router function returned from_{@code OrderController.routerFunction()}._to the {@code changeUser} method in {@code userController}:_<pre class="code">_RouterFunctionlt_ServerResponsegt_ route =_RouterFunctions.route()_.GET("/users", userController::listUsers)_.add(orderController.routerFunction())__.build()__</pre>_@param routerFunction the router function to be added_@return this builder_@see RequestPredicates;Builder add(RouterFunction<ServerResponse> routerFunction)_;adds,the,given,route,to,this,builder,can,be,used,to,merge,externally,defined,router,functions,into,this,builder,or,can,be,combined,with,link,router,functions,route,request,predicate,handler,function,to,allow,for,more,flexible,predicate,matching,p,for,instance,the,following,example,adds,the,router,function,returned,from,code,order,controller,router,function,to,the,code,change,user,method,in,code,user,controller,pre,class,code,router,functionlt,server,responsegt,route,router,functions,route,get,users,user,controller,list,users,add,order,controller,router,function,build,pre,param,router,function,the,router,function,to,be,added,return,this,builder,see,request,predicates;builder,add,router,function,server,response,router,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> route(RequestPredicate predicate, 			HandlerFunction<T> handlerFunction);1485986572;Route to the given handler function if the given request predicate applies._@param predicate the predicate to test_@param handlerFunction the handler function to route to_@param <T> the type of the handler function_@return a router function that routes to {@code handlerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> route(RequestPredicate predicate,_			HandlerFunction<T> handlerFunction) {__		Assert.notNull(predicate, "'predicate' must not be null")__		Assert.notNull(handlerFunction, "'handlerFunction' must not be null")___		return request -> predicate.test(request) ? Mono.just(handlerFunction) : Mono.empty()__	};route,to,the,given,handler,function,if,the,given,request,predicate,applies,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,param,t,the,type,of,the,handler,function,return,a,router,function,that,routes,to,code,handler,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,route,request,predicate,predicate,handler,function,t,handler,function,assert,not,null,predicate,predicate,must,not,be,null,assert,not,null,handler,function,handler,function,must,not,be,null,return,request,predicate,test,request,mono,just,handler,function,mono,empty
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> route(RequestPredicate predicate, 			HandlerFunction<T> handlerFunction);1487250745;Route to the given handler function if the given request predicate applies._<p>For instance, the following example routes GET requests for "/user" to the_{@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route(RequestPredicates.GET("/user"),_userController::listUsers)__</pre>__@param predicate the predicate to test_@param handlerFunction the handler function to route to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code handlerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> route(RequestPredicate predicate,_			HandlerFunction<T> handlerFunction) {__		Assert.notNull(predicate, "'predicate' must not be null")__		Assert.notNull(handlerFunction, "'handlerFunction' must not be null")___		return request -> predicate.test(request) ? Mono.just(handlerFunction) : Mono.empty()__	};route,to,the,given,handler,function,if,the,given,request,predicate,applies,p,for,instance,the,following,example,routes,get,requests,for,user,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,request,predicates,get,user,user,controller,list,users,pre,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,handler,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,route,request,predicate,predicate,handler,function,t,handler,function,assert,not,null,predicate,predicate,must,not,be,null,assert,not,null,handler,function,handler,function,must,not,be,null,return,request,predicate,test,request,mono,just,handler,function,mono,empty
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> route(RequestPredicate predicate, 			HandlerFunction<T> handlerFunction);1487584763;Route to the given handler function if the given request predicate applies._<p>For instance, the following example routes GET requests for "/user" to the_{@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route(RequestPredicates.GET("/user"),_userController::listUsers)__</pre>__@param predicate the predicate to test_@param handlerFunction the handler function to route to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code handlerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> route(RequestPredicate predicate,_			HandlerFunction<T> handlerFunction) {__		Assert.notNull(predicate, "'predicate' must not be null")__		Assert.notNull(handlerFunction, "'handlerFunction' must not be null")___		return request -> {_			if (predicate.test(request)) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format("Predicate \"%s\" matches against \"%s\"",_							predicate, request))__				}_				return Mono.just(handlerFunction)__			}_			else {_				return Mono.empty()__			}_		}__	};route,to,the,given,handler,function,if,the,given,request,predicate,applies,p,for,instance,the,following,example,routes,get,requests,for,user,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,request,predicates,get,user,user,controller,list,users,pre,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,handler,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,route,request,predicate,predicate,handler,function,t,handler,function,assert,not,null,predicate,predicate,must,not,be,null,assert,not,null,handler,function,handler,function,must,not,be,null,return,request,if,predicate,test,request,if,logger,is,debug,enabled,logger,debug,string,format,predicate,s,matches,against,s,predicate,request,return,mono,just,handler,function,else,return,mono,empty
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> route(RequestPredicate predicate, 			HandlerFunction<T> handlerFunction);1487687241;Route to the given handler function if the given request predicate applies._<p>For instance, the following example routes GET requests for "/user" to the_{@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route(RequestPredicates.GET("/user"), userController::listUsers)__</pre>_@param predicate the predicate to test_@param handlerFunction the handler function to route to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code handlerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> route(RequestPredicate predicate,_			HandlerFunction<T> handlerFunction) {__		Assert.notNull(predicate, "'predicate' must not be null")__		Assert.notNull(handlerFunction, "'handlerFunction' must not be null")___		return request -> {_			if (predicate.test(request)) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format("Predicate \"%s\" matches against \"%s\"",_							predicate, request))__				}_				return Mono.just(handlerFunction)__			}_			else {_				return Mono.empty()__			}_		}__	};route,to,the,given,handler,function,if,the,given,request,predicate,applies,p,for,instance,the,following,example,routes,get,requests,for,user,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,request,predicates,get,user,user,controller,list,users,pre,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,handler,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,route,request,predicate,predicate,handler,function,t,handler,function,assert,not,null,predicate,predicate,must,not,be,null,assert,not,null,handler,function,handler,function,must,not,be,null,return,request,if,predicate,test,request,if,logger,is,debug,enabled,logger,debug,string,format,predicate,s,matches,against,s,predicate,request,return,mono,just,handler,function,else,return,mono,empty
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> route(RequestPredicate predicate, 			HandlerFunction<T> handlerFunction);1489653648;Route to the given handler function if the given request predicate applies._<p>For instance, the following example routes GET requests for "/user" to the_{@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route(RequestPredicates.GET("/user"), userController::listUsers)__</pre>_@param predicate the predicate to test_@param handlerFunction the handler function to route to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code handlerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> route(RequestPredicate predicate,_			HandlerFunction<T> handlerFunction) {__		Assert.notNull(predicate, "'predicate' must not be null")__		Assert.notNull(handlerFunction, "'handlerFunction' must not be null")___		return request -> {_			if (predicate.test(request)) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format("Predicate \"%s\" matches against \"%s\"",_							predicate, request))__				}_				return Mono.just(handlerFunction)__			}_			else {_				return Mono.empty()__			}_		}__	};route,to,the,given,handler,function,if,the,given,request,predicate,applies,p,for,instance,the,following,example,routes,get,requests,for,user,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,request,predicates,get,user,user,controller,list,users,pre,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,handler,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,route,request,predicate,predicate,handler,function,t,handler,function,assert,not,null,predicate,predicate,must,not,be,null,assert,not,null,handler,function,handler,function,must,not,be,null,return,request,if,predicate,test,request,if,logger,is,debug,enabled,logger,debug,string,format,predicate,s,matches,against,s,predicate,request,return,mono,just,handler,function,else,return,mono,empty
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> route(RequestPredicate predicate, 			HandlerFunction<T> handlerFunction);1489751412;Route to the given handler function if the given request predicate applies._<p>For instance, the following example routes GET requests for "/user" to the_{@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route(RequestPredicates.GET("/user"), userController::listUsers)__</pre>_@param predicate the predicate to test_@param handlerFunction the handler function to route to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code handlerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> route(RequestPredicate predicate,_			HandlerFunction<T> handlerFunction) {__		Assert.notNull(predicate, "'predicate' must not be null")__		Assert.notNull(handlerFunction, "'handlerFunction' must not be null")___		return request -> {_			if (predicate.test(request)) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format("Predicate \"%s\" matches against \"%s\"",_							predicate, request))__				}_				return Mono.just(handlerFunction)__			}_			else {_				return Mono.empty()__			}_		}__	};route,to,the,given,handler,function,if,the,given,request,predicate,applies,p,for,instance,the,following,example,routes,get,requests,for,user,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,request,predicates,get,user,user,controller,list,users,pre,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,handler,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,route,request,predicate,predicate,handler,function,t,handler,function,assert,not,null,predicate,predicate,must,not,be,null,assert,not,null,handler,function,handler,function,must,not,be,null,return,request,if,predicate,test,request,if,logger,is,debug,enabled,logger,debug,string,format,predicate,s,matches,against,s,predicate,request,return,mono,just,handler,function,else,return,mono,empty
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> route(RequestPredicate predicate, 			HandlerFunction<T> handlerFunction);1491557115;Route to the given handler function if the given request predicate applies._<p>For instance, the following example routes GET requests for "/user" to the_{@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route(RequestPredicates.GET("/user"), userController::listUsers)__</pre>_@param predicate the predicate to test_@param handlerFunction the handler function to route to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code handlerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> route(RequestPredicate predicate,_			HandlerFunction<T> handlerFunction) {__		Assert.notNull(predicate, "'predicate' must not be null")__		Assert.notNull(handlerFunction, "'handlerFunction' must not be null")___		return request -> {_			if (predicate.test(request)) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format("Predicate \"%s\" matches against \"%s\"",_							predicate, request))__				}_				return Mono.just(handlerFunction)__			}_			else {_				return Mono.empty()__			}_		}__	};route,to,the,given,handler,function,if,the,given,request,predicate,applies,p,for,instance,the,following,example,routes,get,requests,for,user,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,request,predicates,get,user,user,controller,list,users,pre,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,handler,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,route,request,predicate,predicate,handler,function,t,handler,function,assert,not,null,predicate,predicate,must,not,be,null,assert,not,null,handler,function,handler,function,must,not,be,null,return,request,if,predicate,test,request,if,logger,is,debug,enabled,logger,debug,string,format,predicate,s,matches,against,s,predicate,request,return,mono,just,handler,function,else,return,mono,empty
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> route(RequestPredicate predicate, 			HandlerFunction<T> handlerFunction);1491833276;Route to the given handler function if the given request predicate applies._<p>For instance, the following example routes GET requests for "/user" to the_{@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route(RequestPredicates.GET("/user"), userController::listUsers)__</pre>_@param predicate the predicate to test_@param handlerFunction the handler function to route to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code handlerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> route(RequestPredicate predicate,_			HandlerFunction<T> handlerFunction) {__		Assert.notNull(predicate, "'predicate' must not be null")__		Assert.notNull(handlerFunction, "'handlerFunction' must not be null")___		return request -> {_			if (predicate.test(request)) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format("Predicate \"%s\" matches against \"%s\"",_							predicate, request))__				}_				return Mono.just(handlerFunction)__			}_			else {_				return Mono.empty()__			}_		}__	};route,to,the,given,handler,function,if,the,given,request,predicate,applies,p,for,instance,the,following,example,routes,get,requests,for,user,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,request,predicates,get,user,user,controller,list,users,pre,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,handler,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,route,request,predicate,predicate,handler,function,t,handler,function,assert,not,null,predicate,predicate,must,not,be,null,assert,not,null,handler,function,handler,function,must,not,be,null,return,request,if,predicate,test,request,if,logger,is,debug,enabled,logger,debug,string,format,predicate,s,matches,against,s,predicate,request,return,mono,just,handler,function,else,return,mono,empty
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> route(RequestPredicate predicate, 			HandlerFunction<T> handlerFunction);1491927184;Route to the given handler function if the given request predicate applies._<p>For instance, the following example routes GET requests for "/user" to the_{@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route(RequestPredicates.GET("/user"), userController::listUsers)__</pre>_@param predicate the predicate to test_@param handlerFunction the handler function to route to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code handlerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> route(RequestPredicate predicate,_			HandlerFunction<T> handlerFunction) {__		Assert.notNull(predicate, "'predicate' must not be null")__		Assert.notNull(handlerFunction, "'handlerFunction' must not be null")___		return request -> {_			if (predicate.test(request)) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format("Predicate \"%s\" matches against \"%s\"",_							predicate, request))__				}_				return Mono.just(handlerFunction)__			}_			else {_				return Mono.empty()__			}_		}__	};route,to,the,given,handler,function,if,the,given,request,predicate,applies,p,for,instance,the,following,example,routes,get,requests,for,user,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,request,predicates,get,user,user,controller,list,users,pre,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,handler,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,route,request,predicate,predicate,handler,function,t,handler,function,assert,not,null,predicate,predicate,must,not,be,null,assert,not,null,handler,function,handler,function,must,not,be,null,return,request,if,predicate,test,request,if,logger,is,debug,enabled,logger,debug,string,format,predicate,s,matches,against,s,predicate,request,return,mono,just,handler,function,else,return,mono,empty
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> route(RequestPredicate predicate, 			HandlerFunction<T> handlerFunction);1492090594;Route to the given handler function if the given request predicate applies._<p>For instance, the following example routes GET requests for "/user" to the_{@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route(RequestPredicates.GET("/user"), userController::listUsers)__</pre>_@param predicate the predicate to test_@param handlerFunction the handler function to route to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code handlerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> route(RequestPredicate predicate,_			HandlerFunction<T> handlerFunction) {__		Assert.notNull(predicate, "'predicate' must not be null")__		Assert.notNull(handlerFunction, "'handlerFunction' must not be null")___		return request -> {_			if (predicate.test(request)) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format("Predicate \"%s\" matches against \"%s\"",_							predicate, request))__				}_				return Mono.just(handlerFunction)__			}_			else {_				return Mono.empty()__			}_		}__	};route,to,the,given,handler,function,if,the,given,request,predicate,applies,p,for,instance,the,following,example,routes,get,requests,for,user,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,request,predicates,get,user,user,controller,list,users,pre,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,handler,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,route,request,predicate,predicate,handler,function,t,handler,function,assert,not,null,predicate,predicate,must,not,be,null,assert,not,null,handler,function,handler,function,must,not,be,null,return,request,if,predicate,test,request,if,logger,is,debug,enabled,logger,debug,string,format,predicate,s,matches,against,s,predicate,request,return,mono,just,handler,function,else,return,mono,empty
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> route(RequestPredicate predicate, 			HandlerFunction<T> handlerFunction);1492168700;Route to the given handler function if the given request predicate applies._<p>For instance, the following example routes GET requests for "/user" to the_{@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route(RequestPredicates.GET("/user"), userController::listUsers)__</pre>_@param predicate the predicate to test_@param handlerFunction the handler function to route to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code handlerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> route(RequestPredicate predicate,_			HandlerFunction<T> handlerFunction) {__		Assert.notNull(predicate, "'predicate' must not be null")__		Assert.notNull(handlerFunction, "'handlerFunction' must not be null")___		return request -> {_			if (predicate.test(request)) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format("Predicate \"%s\" matches against \"%s\"",_							predicate, request))__				}_				return Mono.just(handlerFunction)__			}_			else {_				return Mono.empty()__			}_		}__	};route,to,the,given,handler,function,if,the,given,request,predicate,applies,p,for,instance,the,following,example,routes,get,requests,for,user,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,request,predicates,get,user,user,controller,list,users,pre,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,handler,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,route,request,predicate,predicate,handler,function,t,handler,function,assert,not,null,predicate,predicate,must,not,be,null,assert,not,null,handler,function,handler,function,must,not,be,null,return,request,if,predicate,test,request,if,logger,is,debug,enabled,logger,debug,string,format,predicate,s,matches,against,s,predicate,request,return,mono,just,handler,function,else,return,mono,empty
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> route(RequestPredicate predicate, 			HandlerFunction<T> handlerFunction);1492190322;Route to the given handler function if the given request predicate applies._<p>For instance, the following example routes GET requests for "/user" to the_{@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route(RequestPredicates.GET("/user"), userController::listUsers)__</pre>_@param predicate the predicate to test_@param handlerFunction the handler function to route to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code handlerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> route(RequestPredicate predicate,_			HandlerFunction<T> handlerFunction) {__		Assert.notNull(predicate, "'predicate' must not be null")__		Assert.notNull(handlerFunction, "'handlerFunction' must not be null")___		return request -> {_			if (predicate.test(request)) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format("Predicate \"%s\" matches against \"%s\"",_							predicate, request))__				}_				return Mono.just(handlerFunction)__			}_			else {_				return Mono.empty()__			}_		}__	};route,to,the,given,handler,function,if,the,given,request,predicate,applies,p,for,instance,the,following,example,routes,get,requests,for,user,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,request,predicates,get,user,user,controller,list,users,pre,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,handler,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,route,request,predicate,predicate,handler,function,t,handler,function,assert,not,null,predicate,predicate,must,not,be,null,assert,not,null,handler,function,handler,function,must,not,be,null,return,request,if,predicate,test,request,if,logger,is,debug,enabled,logger,debug,string,format,predicate,s,matches,against,s,predicate,request,return,mono,just,handler,function,else,return,mono,empty
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> route(RequestPredicate predicate, 			HandlerFunction<T> handlerFunction);1494495900;Route to the given handler function if the given request predicate applies._<p>For instance, the following example routes GET requests for "/user" to the_{@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route(RequestPredicates.GET("/user"), userController::listUsers)__</pre>_@param predicate the predicate to test_@param handlerFunction the handler function to route to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code handlerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> route(RequestPredicate predicate,_			HandlerFunction<T> handlerFunction) {__		Assert.notNull(predicate, "'predicate' must not be null")__		Assert.notNull(handlerFunction, "'handlerFunction' must not be null")___		return request -> {_			if (predicate.test(request)) {_				if (logger.isDebugEnabled()) {_					logger.debug(String.format("Predicate \"%s\" matches against \"%s\"",_							predicate, request))__				}_				return Mono.just(handlerFunction)__			}_			else {_				return Mono.empty()__			}_		}__	};route,to,the,given,handler,function,if,the,given,request,predicate,applies,p,for,instance,the,following,example,routes,get,requests,for,user,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,request,predicates,get,user,user,controller,list,users,pre,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,handler,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,route,request,predicate,predicate,handler,function,t,handler,function,assert,not,null,predicate,predicate,must,not,be,null,assert,not,null,handler,function,handler,function,must,not,be,null,return,request,if,predicate,test,request,if,logger,is,debug,enabled,logger,debug,string,format,predicate,s,matches,against,s,predicate,request,return,mono,just,handler,function,else,return,mono,empty
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> route(RequestPredicate predicate, 			HandlerFunction<T> handlerFunction);1495618935;Route to the given handler function if the given request predicate applies._<p>For instance, the following example routes GET requests for "/user" to the_{@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route(RequestPredicates.GET("/user"), userController::listUsers)__</pre>_@param predicate the predicate to test_@param handlerFunction the handler function to route to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code handlerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> route(RequestPredicate predicate,_			HandlerFunction<T> handlerFunction) {__		Assert.notNull(predicate, "'predicate' must not be null")__		Assert.notNull(handlerFunction, "'handlerFunction' must not be null")___		return new DefaultRouterFunction<>(predicate, handlerFunction)__	};route,to,the,given,handler,function,if,the,given,request,predicate,applies,p,for,instance,the,following,example,routes,get,requests,for,user,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,request,predicates,get,user,user,controller,list,users,pre,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,handler,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,route,request,predicate,predicate,handler,function,t,handler,function,assert,not,null,predicate,predicate,must,not,be,null,assert,not,null,handler,function,handler,function,must,not,be,null,return,new,default,router,function,predicate,handler,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> route(RequestPredicate predicate, 			HandlerFunction<T> handlerFunction);1495626483;Route to the given handler function if the given request predicate applies._<p>For instance, the following example routes GET requests for "/user" to the_{@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route(RequestPredicates.GET("/user"), userController::listUsers)__</pre>_@param predicate the predicate to test_@param handlerFunction the handler function to route to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code handlerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> route(RequestPredicate predicate,_			HandlerFunction<T> handlerFunction) {__		Assert.notNull(predicate, "'predicate' must not be null")__		Assert.notNull(handlerFunction, "'handlerFunction' must not be null")___		return new DefaultRouterFunction<>(predicate, handlerFunction)__	};route,to,the,given,handler,function,if,the,given,request,predicate,applies,p,for,instance,the,following,example,routes,get,requests,for,user,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,request,predicates,get,user,user,controller,list,users,pre,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,handler,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,route,request,predicate,predicate,handler,function,t,handler,function,assert,not,null,predicate,predicate,must,not,be,null,assert,not,null,handler,function,handler,function,must,not,be,null,return,new,default,router,function,predicate,handler,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> route(RequestPredicate predicate, 			HandlerFunction<T> handlerFunction);1497359418;Route to the given handler function if the given request predicate applies._<p>For instance, the following example routes GET requests for "/user" to the_{@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route(RequestPredicates.GET("/user"), userController::listUsers)__</pre>_@param predicate the predicate to test_@param handlerFunction the handler function to route to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code handlerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> route(RequestPredicate predicate,_			HandlerFunction<T> handlerFunction) {__		Assert.notNull(predicate, "'predicate' must not be null")__		Assert.notNull(handlerFunction, "'handlerFunction' must not be null")___		return new DefaultRouterFunction<>(predicate, handlerFunction)__	};route,to,the,given,handler,function,if,the,given,request,predicate,applies,p,for,instance,the,following,example,routes,get,requests,for,user,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,request,predicates,get,user,user,controller,list,users,pre,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,handler,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,route,request,predicate,predicate,handler,function,t,handler,function,assert,not,null,predicate,predicate,must,not,be,null,assert,not,null,handler,function,handler,function,must,not,be,null,return,new,default,router,function,predicate,handler,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> route(RequestPredicate predicate, 			HandlerFunction<T> handlerFunction);1498216330;Route to the given handler function if the given request predicate applies._<p>For instance, the following example routes GET requests for "/user" to the_{@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route(RequestPredicates.GET("/user"), userController::listUsers)__</pre>_@param predicate the predicate to test_@param handlerFunction the handler function to route to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code handlerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> route(RequestPredicate predicate,_			HandlerFunction<T> handlerFunction) {__		Assert.notNull(predicate, "'predicate' must not be null")__		Assert.notNull(handlerFunction, "'handlerFunction' must not be null")___		return new DefaultRouterFunction<>(predicate, handlerFunction)__	};route,to,the,given,handler,function,if,the,given,request,predicate,applies,p,for,instance,the,following,example,routes,get,requests,for,user,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,request,predicates,get,user,user,controller,list,users,pre,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,handler,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,route,request,predicate,predicate,handler,function,t,handler,function,assert,not,null,predicate,predicate,must,not,be,null,assert,not,null,handler,function,handler,function,must,not,be,null,return,new,default,router,function,predicate,handler,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> route(RequestPredicate predicate, 			HandlerFunction<T> handlerFunction);1501161935;Route to the given handler function if the given request predicate applies._<p>For instance, the following example routes GET requests for "/user" to the_{@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route(RequestPredicates.GET("/user"), userController::listUsers)__</pre>_@param predicate the predicate to test_@param handlerFunction the handler function to route to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code handlerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> route(RequestPredicate predicate,_			HandlerFunction<T> handlerFunction) {__		Assert.notNull(predicate, "'predicate' must not be null")__		Assert.notNull(handlerFunction, "'handlerFunction' must not be null")___		return new DefaultRouterFunction<>(predicate, handlerFunction)__	};route,to,the,given,handler,function,if,the,given,request,predicate,applies,p,for,instance,the,following,example,routes,get,requests,for,user,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,request,predicates,get,user,user,controller,list,users,pre,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,handler,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,route,request,predicate,predicate,handler,function,t,handler,function,assert,not,null,predicate,predicate,must,not,be,null,assert,not,null,handler,function,handler,function,must,not,be,null,return,new,default,router,function,predicate,handler,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> route(RequestPredicate predicate, 			HandlerFunction<T> handlerFunction);1506081789;Route to the given handler function if the given request predicate applies._<p>For instance, the following example routes GET requests for "/user" to the_{@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route(RequestPredicates.GET("/user"), userController::listUsers)__</pre>_@param predicate the predicate to test_@param handlerFunction the handler function to route to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code handlerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> route(RequestPredicate predicate,_			HandlerFunction<T> handlerFunction) {__		Assert.notNull(predicate, "'predicate' must not be null")__		Assert.notNull(handlerFunction, "'handlerFunction' must not be null")___		return new DefaultRouterFunction<>(predicate, handlerFunction)__	};route,to,the,given,handler,function,if,the,given,request,predicate,applies,p,for,instance,the,following,example,routes,get,requests,for,user,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,request,predicates,get,user,user,controller,list,users,pre,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,handler,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,route,request,predicate,predicate,handler,function,t,handler,function,assert,not,null,predicate,predicate,must,not,be,null,assert,not,null,handler,function,handler,function,must,not,be,null,return,new,default,router,function,predicate,handler,function
RouterFunctions -> public static <T extends ServerResponse> RouterFunction<T> route(RequestPredicate predicate, 			HandlerFunction<T> handlerFunction);1520528267;Route to the given handler function if the given request predicate applies._<p>For instance, the following example routes GET requests for "/user" to the_{@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route(RequestPredicates.GET("/user"), userController::listUsers)__</pre>_@param predicate the predicate to test_@param handlerFunction the handler function to route to if the predicate applies_@param <T> the type of response returned by the handler function_@return a router function that routes to {@code handlerFunction} if_{@code predicate} evaluates to {@code true}_@see RequestPredicates;public static <T extends ServerResponse> RouterFunction<T> route(RequestPredicate predicate,_			HandlerFunction<T> handlerFunction) {__		Assert.notNull(predicate, "'predicate' must not be null")__		Assert.notNull(handlerFunction, "'handlerFunction' must not be null")___		return new DefaultRouterFunction<>(predicate, handlerFunction)__	};route,to,the,given,handler,function,if,the,given,request,predicate,applies,p,for,instance,the,following,example,routes,get,requests,for,user,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,request,predicates,get,user,user,controller,list,users,pre,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,if,the,predicate,applies,param,t,the,type,of,response,returned,by,the,handler,function,return,a,router,function,that,routes,to,code,handler,function,if,code,predicate,evaluates,to,code,true,see,request,predicates;public,static,t,extends,server,response,router,function,t,route,request,predicate,predicate,handler,function,t,handler,function,assert,not,null,predicate,predicate,must,not,be,null,assert,not,null,handler,function,handler,function,must,not,be,null,return,new,default,router,function,predicate,handler,function
RouterFunctions -> Builder -> <T extends Throwable> Builder onError(Class<T> exceptionType, 				BiFunction<? super T, ServerRequest, Mono<ServerResponse>> responseProvider)_;1530871268;Filters all exceptions of the given type by applying the given response provider_function._<p>For instance, the following example creates a filter that returns a 500 response_status when an {@code IllegalStateException} occurs._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.route()_.GET("/user", this::listUsers)_.onError(IllegalStateException.class,_(e, request) -> ServerResponse.status(HttpStatus.INTERNAL_SERVER_ERROR).build())_.build()__</pre>_@param exceptionType the type of exception to filter_@param responseProvider a function that creates a response_@return this builder;<T extends Throwable> Builder onError(Class<T> exceptionType,_				BiFunction<? super T, ServerRequest, Mono<ServerResponse>> responseProvider)_;filters,all,exceptions,of,the,given,type,by,applying,the,given,response,provider,function,p,for,instance,the,following,example,creates,a,filter,that,returns,a,500,response,status,when,an,code,illegal,state,exception,occurs,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,route,get,user,this,list,users,on,error,illegal,state,exception,class,e,request,server,response,status,http,status,build,build,pre,param,exception,type,the,type,of,exception,to,filter,param,response,provider,a,function,that,creates,a,response,return,this,builder;t,extends,throwable,builder,on,error,class,t,exception,type,bi,function,super,t,server,request,mono,server,response,response,provider
RouterFunctions -> Builder -> <T extends Throwable> Builder onError(Class<T> exceptionType, 				BiFunction<? super T, ServerRequest, Mono<ServerResponse>> responseProvider)_;1530877097;Filters all exceptions of the given type by applying the given response provider_function._<p>For instance, the following example creates a filter that returns a 500 response_status when an {@code IllegalStateException} occurs._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.route()_.GET("/user", this::listUsers)_.onError(IllegalStateException.class,_(e, request) -> ServerResponse.status(HttpStatus.INTERNAL_SERVER_ERROR).build())_.build()__</pre>_@param exceptionType the type of exception to filter_@param responseProvider a function that creates a response_@return this builder;<T extends Throwable> Builder onError(Class<T> exceptionType,_				BiFunction<? super T, ServerRequest, Mono<ServerResponse>> responseProvider)_;filters,all,exceptions,of,the,given,type,by,applying,the,given,response,provider,function,p,for,instance,the,following,example,creates,a,filter,that,returns,a,500,response,status,when,an,code,illegal,state,exception,occurs,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,route,get,user,this,list,users,on,error,illegal,state,exception,class,e,request,server,response,status,http,status,build,build,pre,param,exception,type,the,type,of,exception,to,filter,param,response,provider,a,function,that,creates,a,response,return,this,builder;t,extends,throwable,builder,on,error,class,t,exception,type,bi,function,super,t,server,request,mono,server,response,response,provider
RouterFunctions -> Builder -> <T extends Throwable> Builder onError(Class<T> exceptionType, 				BiFunction<? super T, ServerRequest, Mono<ServerResponse>> responseProvider)_;1530880709;Filters all exceptions of the given type by applying the given response provider_function._<p>For instance, the following example creates a filter that returns a 500 response_status when an {@code IllegalStateException} occurs._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.route()_.GET("/user", this::listUsers)_.onError(IllegalStateException.class,_(e, request) -> ServerResponse.status(HttpStatus.INTERNAL_SERVER_ERROR).build())_.build()__</pre>_@param exceptionType the type of exception to filter_@param responseProvider a function that creates a response_@return this builder;<T extends Throwable> Builder onError(Class<T> exceptionType,_				BiFunction<? super T, ServerRequest, Mono<ServerResponse>> responseProvider)_;filters,all,exceptions,of,the,given,type,by,applying,the,given,response,provider,function,p,for,instance,the,following,example,creates,a,filter,that,returns,a,500,response,status,when,an,code,illegal,state,exception,occurs,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,route,get,user,this,list,users,on,error,illegal,state,exception,class,e,request,server,response,status,http,status,build,build,pre,param,exception,type,the,type,of,exception,to,filter,param,response,provider,a,function,that,creates,a,response,return,this,builder;t,extends,throwable,builder,on,error,class,t,exception,type,bi,function,super,t,server,request,mono,server,response,response,provider
RouterFunctions -> Builder -> <T extends Throwable> Builder onError(Class<T> exceptionType, 				BiFunction<? super T, ServerRequest, Mono<ServerResponse>> responseProvider)_;1537188605;Filters all exceptions of the given type by applying the given response provider_function._<p>For instance, the following example creates a filter that returns a 500 response_status when an {@code IllegalStateException} occurs._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.route()_.GET("/user", this::listUsers)_.onError(IllegalStateException.class,_(e, request) -> ServerResponse.status(HttpStatus.INTERNAL_SERVER_ERROR).build())_.build()__</pre>_@param exceptionType the type of exception to filter_@param responseProvider a function that creates a response_@return this builder;<T extends Throwable> Builder onError(Class<T> exceptionType,_				BiFunction<? super T, ServerRequest, Mono<ServerResponse>> responseProvider)_;filters,all,exceptions,of,the,given,type,by,applying,the,given,response,provider,function,p,for,instance,the,following,example,creates,a,filter,that,returns,a,500,response,status,when,an,code,illegal,state,exception,occurs,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,route,get,user,this,list,users,on,error,illegal,state,exception,class,e,request,server,response,status,http,status,build,build,pre,param,exception,type,the,type,of,exception,to,filter,param,response,provider,a,function,that,creates,a,response,return,this,builder;t,extends,throwable,builder,on,error,class,t,exception,type,bi,function,super,t,server,request,mono,server,response,response,provider
RouterFunctions -> Builder -> <T extends Throwable> Builder onError(Class<T> exceptionType, 				BiFunction<? super T, ServerRequest, Mono<ServerResponse>> responseProvider)_;1538664611;Filters all exceptions of the given type by applying the given response provider_function._<p>For instance, the following example creates a filter that returns a 500 response_status when an {@code IllegalStateException} occurs._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.route()_.GET("/user", this::listUsers)_.onError(IllegalStateException.class,_(e, request) -> ServerResponse.status(HttpStatus.INTERNAL_SERVER_ERROR).build())_.build()__</pre>_@param exceptionType the type of exception to filter_@param responseProvider a function that creates a response_@return this builder;<T extends Throwable> Builder onError(Class<T> exceptionType,_				BiFunction<? super T, ServerRequest, Mono<ServerResponse>> responseProvider)_;filters,all,exceptions,of,the,given,type,by,applying,the,given,response,provider,function,p,for,instance,the,following,example,creates,a,filter,that,returns,a,500,response,status,when,an,code,illegal,state,exception,occurs,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,route,get,user,this,list,users,on,error,illegal,state,exception,class,e,request,server,response,status,http,status,build,build,pre,param,exception,type,the,type,of,exception,to,filter,param,response,provider,a,function,that,creates,a,response,return,this,builder;t,extends,throwable,builder,on,error,class,t,exception,type,bi,function,super,t,server,request,mono,server,response,response,provider
RouterFunctions -> Builder -> <T extends Throwable> Builder onError(Class<T> exceptionType, 				BiFunction<? super T, ServerRequest, Mono<ServerResponse>> responseProvider)_;1539866925;Filters all exceptions of the given type by applying the given response provider_function._<p>For instance, the following example creates a filter that returns a 500 response_status when an {@code IllegalStateException} occurs._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.route()_.GET("/user", this::listUsers)_.onError(IllegalStateException.class,_(e, request) -> ServerResponse.status(HttpStatus.INTERNAL_SERVER_ERROR).build())_.build()__</pre>_@param exceptionType the type of exception to filter_@param responseProvider a function that creates a response_@return this builder;<T extends Throwable> Builder onError(Class<T> exceptionType,_				BiFunction<? super T, ServerRequest, Mono<ServerResponse>> responseProvider)_;filters,all,exceptions,of,the,given,type,by,applying,the,given,response,provider,function,p,for,instance,the,following,example,creates,a,filter,that,returns,a,500,response,status,when,an,code,illegal,state,exception,occurs,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,route,get,user,this,list,users,on,error,illegal,state,exception,class,e,request,server,response,status,http,status,build,build,pre,param,exception,type,the,type,of,exception,to,filter,param,response,provider,a,function,that,creates,a,response,return,this,builder;t,extends,throwable,builder,on,error,class,t,exception,type,bi,function,super,t,server,request,mono,server,response,response,provider
RouterFunctions -> Builder -> Builder resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;1530871268;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return this builder;Builder resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,this,builder;builder,resources,function,server,request,mono,resource,lookup,function
RouterFunctions -> Builder -> Builder resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;1530877097;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return this builder;Builder resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,this,builder;builder,resources,function,server,request,mono,resource,lookup,function
RouterFunctions -> Builder -> Builder resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;1530880709;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return this builder;Builder resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,this,builder;builder,resources,function,server,request,mono,resource,lookup,function
RouterFunctions -> Builder -> Builder resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;1537188605;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return this builder;Builder resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,this,builder;builder,resources,function,server,request,mono,resource,lookup,function
RouterFunctions -> Builder -> Builder resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;1538664611;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return this builder;Builder resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,this,builder;builder,resources,function,server,request,mono,resource,lookup,function
RouterFunctions -> Builder -> Builder resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;1539866925;Route to resources using the provided lookup function. If the lookup function provides a_{@link Resource} for the given request, it will be it will be exposed using a_{@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests._@param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}_@return this builder;Builder resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;route,to,resources,using,the,provided,lookup,function,if,the,lookup,function,provides,a,link,resource,for,the,given,request,it,will,be,it,will,be,exposed,using,a,link,handler,function,that,handles,get,head,and,options,requests,param,lookup,function,the,function,to,provide,a,link,resource,given,the,link,server,request,return,this,builder;builder,resources,function,server,request,mono,resource,lookup,function
RouterFunctions -> public static Builder route();1530871268;Offers a discoverable way to create router functions through a builder-style interface._@return a router function builder_@since 5.1;public static Builder route() {_		return new RouterFunctionBuilder()__	};offers,a,discoverable,way,to,create,router,functions,through,a,builder,style,interface,return,a,router,function,builder,since,5,1;public,static,builder,route,return,new,router,function,builder
RouterFunctions -> public static Builder route();1530877097;Offers a discoverable way to create router functions through a builder-style interface._@return a router function builder_@since 5.1;public static Builder route() {_		return new RouterFunctionBuilder()__	};offers,a,discoverable,way,to,create,router,functions,through,a,builder,style,interface,return,a,router,function,builder,since,5,1;public,static,builder,route,return,new,router,function,builder
RouterFunctions -> public static Builder route();1530880709;Offers a discoverable way to create router functions through a builder-style interface._@return a router function builder_@since 5.1;public static Builder route() {_		return new RouterFunctionBuilder()__	};offers,a,discoverable,way,to,create,router,functions,through,a,builder,style,interface,return,a,router,function,builder,since,5,1;public,static,builder,route,return,new,router,function,builder
RouterFunctions -> public static Builder route();1537188605;Offers a discoverable way to create router functions through a builder-style interface._@return a router function builder_@since 5.1;public static Builder route() {_		return new RouterFunctionBuilder()__	};offers,a,discoverable,way,to,create,router,functions,through,a,builder,style,interface,return,a,router,function,builder,since,5,1;public,static,builder,route,return,new,router,function,builder
RouterFunctions -> public static Builder route();1538664611;Offers a discoverable way to create router functions through a builder-style interface._@return a router function builder_@since 5.1;public static Builder route() {_		return new RouterFunctionBuilder()__	};offers,a,discoverable,way,to,create,router,functions,through,a,builder,style,interface,return,a,router,function,builder,since,5,1;public,static,builder,route,return,new,router,function,builder
RouterFunctions -> public static Builder route();1539866925;Offers a discoverable way to create router functions through a builder-style interface._@return a router function builder_@since 5.1;public static Builder route() {_		return new RouterFunctionBuilder()__	};offers,a,discoverable,way,to,create,router,functions,through,a,builder,style,interface,return,a,router,function,builder,since,5,1;public,static,builder,route,return,new,router,function,builder
RouterFunctions -> Builder -> Builder OPTIONS(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1530871268;Adds a route to the given handler function that handles all HTTP {@code OPTIONS} requests_that match the given pattern and predicate._@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code OPTIONS} requests that_match {@code pattern}_@return this builder;Builder OPTIONS(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,options,requests,that,match,the,given,pattern,and,predicate,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,options,requests,that,match,code,pattern,return,this,builder;builder,options,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder OPTIONS(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1530877097;Adds a route to the given handler function that handles all HTTP {@code OPTIONS} requests_that match the given pattern and predicate._@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code OPTIONS} requests that_match {@code pattern}_@return this builder;Builder OPTIONS(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,options,requests,that,match,the,given,pattern,and,predicate,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,options,requests,that,match,code,pattern,return,this,builder;builder,options,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder OPTIONS(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1530880709;Adds a route to the given handler function that handles all HTTP {@code OPTIONS} requests_that match the given pattern and predicate._@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code OPTIONS} requests that_match {@code pattern}_@return this builder;Builder OPTIONS(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,options,requests,that,match,the,given,pattern,and,predicate,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,options,requests,that,match,code,pattern,return,this,builder;builder,options,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder OPTIONS(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1537188605;Adds a route to the given handler function that handles all HTTP {@code OPTIONS} requests_that match the given pattern and predicate._@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code OPTIONS} requests that_match {@code pattern}_@return this builder;Builder OPTIONS(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,options,requests,that,match,the,given,pattern,and,predicate,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,options,requests,that,match,code,pattern,return,this,builder;builder,options,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder OPTIONS(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1538664611;Adds a route to the given handler function that handles all HTTP {@code OPTIONS} requests_that match the given pattern and predicate._@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code OPTIONS} requests that_match {@code pattern}_@return this builder;Builder OPTIONS(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,options,requests,that,match,the,given,pattern,and,predicate,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,options,requests,that,match,code,pattern,return,this,builder;builder,options,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder OPTIONS(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1539866925;Adds a route to the given handler function that handles all HTTP {@code OPTIONS} requests_that match the given pattern and predicate._@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code OPTIONS} requests that_match {@code pattern}_@return this builder;Builder OPTIONS(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,options,requests,that,match,the,given,pattern,and,predicate,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,options,requests,that,match,code,pattern,return,this,builder;builder,options,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder routeHead(HandlerFunction<ServerResponse> handlerFunction)_;1530177818;Adds a route to the given handler function that handles all HTTP {@code HEAD} requests._@param handlerFunction the handler function to handle all {@code HEAD} requests_@return this builder;Builder routeHead(HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,head,requests,param,handler,function,the,handler,function,to,handle,all,code,head,requests,return,this,builder;builder,route,head,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder routeHead(HandlerFunction<ServerResponse> handlerFunction)_;1530187774;Adds a route to the given handler function that handles all HTTP {@code HEAD} requests._@param handlerFunction the handler function to handle all {@code HEAD} requests_@return this builder;Builder routeHead(HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,head,requests,param,handler,function,the,handler,function,to,handle,all,code,head,requests,return,this,builder;builder,route,head,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder routeHead(HandlerFunction<ServerResponse> handlerFunction)_;1530793633;Adds a route to the given handler function that handles all HTTP {@code HEAD} requests._@param handlerFunction the handler function to handle all {@code HEAD} requests_@return this builder;Builder routeHead(HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,head,requests,param,handler,function,the,handler,function,to,handle,all,code,head,requests,return,this,builder;builder,route,head,handler,function,server,response,handler,function
RouterFunctions -> Visitor -> void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction)_;1506081789;Receive notification of a standard predicated route to a handler function._@param predicate the predicate that applies to the handler function_@param handlerFunction the handler function._@see RouterFunctions#route(RequestPredicate, HandlerFunction);void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction)_;receive,notification,of,a,standard,predicated,route,to,a,handler,function,param,predicate,the,predicate,that,applies,to,the,handler,function,param,handler,function,the,handler,function,see,router,functions,route,request,predicate,handler,function;void,route,request,predicate,predicate,handler,function,handler,function
RouterFunctions -> Visitor -> void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction)_;1520528267;Receive notification of a standard predicated route to a handler function._@param predicate the predicate that applies to the handler function_@param handlerFunction the handler function._@see RouterFunctions#route(RequestPredicate, HandlerFunction);void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction)_;receive,notification,of,a,standard,predicated,route,to,a,handler,function,param,predicate,the,predicate,that,applies,to,the,handler,function,param,handler,function,the,handler,function,see,router,functions,route,request,predicate,handler,function;void,route,request,predicate,predicate,handler,function,handler,function
RouterFunctions -> Visitor -> void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction)_;1524865018;Receive notification of a standard predicated route to a handler function._@param predicate the predicate that applies to the handler function_@param handlerFunction the handler function._@see RouterFunctions#route(RequestPredicate, HandlerFunction);void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction)_;receive,notification,of,a,standard,predicated,route,to,a,handler,function,param,predicate,the,predicate,that,applies,to,the,handler,function,param,handler,function,the,handler,function,see,router,functions,route,request,predicate,handler,function;void,route,request,predicate,predicate,handler,function,handler,function
RouterFunctions -> Visitor -> void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction)_;1525433784;Receive notification of a standard predicated route to a handler function._@param predicate the predicate that applies to the handler function_@param handlerFunction the handler function._@see RouterFunctions#route(RequestPredicate, HandlerFunction);void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction)_;receive,notification,of,a,standard,predicated,route,to,a,handler,function,param,predicate,the,predicate,that,applies,to,the,handler,function,param,handler,function,the,handler,function,see,router,functions,route,request,predicate,handler,function;void,route,request,predicate,predicate,handler,function,handler,function
RouterFunctions -> Visitor -> void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction)_;1526553177;Receive notification of a standard predicated route to a handler function._@param predicate the predicate that applies to the handler function_@param handlerFunction the handler function._@see RouterFunctions#route(RequestPredicate, HandlerFunction);void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction)_;receive,notification,of,a,standard,predicated,route,to,a,handler,function,param,predicate,the,predicate,that,applies,to,the,handler,function,param,handler,function,the,handler,function,see,router,functions,route,request,predicate,handler,function;void,route,request,predicate,predicate,handler,function,handler,function
RouterFunctions -> Visitor -> void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction)_;1527601711;Receive notification of a standard predicated route to a handler function._@param predicate the predicate that applies to the handler function_@param handlerFunction the handler function._@see RouterFunctions#route(RequestPredicate, HandlerFunction);void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction)_;receive,notification,of,a,standard,predicated,route,to,a,handler,function,param,predicate,the,predicate,that,applies,to,the,handler,function,param,handler,function,the,handler,function,see,router,functions,route,request,predicate,handler,function;void,route,request,predicate,predicate,handler,function,handler,function
RouterFunctions -> Visitor -> void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction)_;1529721864;Receive notification of a standard predicated route to a handler function._@param predicate the predicate that applies to the handler function_@param handlerFunction the handler function._@see RouterFunctions#route(RequestPredicate, HandlerFunction);void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction)_;receive,notification,of,a,standard,predicated,route,to,a,handler,function,param,predicate,the,predicate,that,applies,to,the,handler,function,param,handler,function,the,handler,function,see,router,functions,route,request,predicate,handler,function;void,route,request,predicate,predicate,handler,function,handler,function
RouterFunctions -> Visitor -> void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction)_;1530174524;Receive notification of a standard predicated route to a handler function._@param predicate the predicate that applies to the handler function_@param handlerFunction the handler function._@see RouterFunctions#route(RequestPredicate, HandlerFunction);void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction)_;receive,notification,of,a,standard,predicated,route,to,a,handler,function,param,predicate,the,predicate,that,applies,to,the,handler,function,param,handler,function,the,handler,function,see,router,functions,route,request,predicate,handler,function;void,route,request,predicate,predicate,handler,function,handler,function
RouterFunctions -> Visitor -> void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction)_;1530174524;Receive notification of a standard predicated route to a handler function._@param predicate the predicate that applies to the handler function_@param handlerFunction the handler function._@see RouterFunctions#route(RequestPredicate, HandlerFunction);void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction)_;receive,notification,of,a,standard,predicated,route,to,a,handler,function,param,predicate,the,predicate,that,applies,to,the,handler,function,param,handler,function,the,handler,function,see,router,functions,route,request,predicate,handler,function;void,route,request,predicate,predicate,handler,function,handler,function
RouterFunctions -> Visitor -> void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction)_;1530177818;Receive notification of a standard predicated route to a handler function._@param predicate the predicate that applies to the handler function_@param handlerFunction the handler function._@see RouterFunctions#route(RequestPredicate, HandlerFunction);void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction)_;receive,notification,of,a,standard,predicated,route,to,a,handler,function,param,predicate,the,predicate,that,applies,to,the,handler,function,param,handler,function,the,handler,function,see,router,functions,route,request,predicate,handler,function;void,route,request,predicate,predicate,handler,function,handler,function
RouterFunctions -> Visitor -> void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction)_;1530187774;Receive notification of a standard predicated route to a handler function._@param predicate the predicate that applies to the handler function_@param handlerFunction the handler function._@see RouterFunctions#route(RequestPredicate, HandlerFunction);void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction)_;receive,notification,of,a,standard,predicated,route,to,a,handler,function,param,predicate,the,predicate,that,applies,to,the,handler,function,param,handler,function,the,handler,function,see,router,functions,route,request,predicate,handler,function;void,route,request,predicate,predicate,handler,function,handler,function
RouterFunctions -> Visitor -> void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction)_;1530793633;Receive notification of a standard predicated route to a handler function._@param predicate the predicate that applies to the handler function_@param handlerFunction the handler function._@see RouterFunctions#route(RequestPredicate, HandlerFunction);void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction)_;receive,notification,of,a,standard,predicated,route,to,a,handler,function,param,predicate,the,predicate,that,applies,to,the,handler,function,param,handler,function,the,handler,function,see,router,functions,route,request,predicate,handler,function;void,route,request,predicate,predicate,handler,function,handler,function
RouterFunctions -> Visitor -> void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction)_;1530871268;Receive notification of a standard predicated route to a handler function._@param predicate the predicate that applies to the handler function_@param handlerFunction the handler function._@see RouterFunctions#route(RequestPredicate, HandlerFunction);void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction)_;receive,notification,of,a,standard,predicated,route,to,a,handler,function,param,predicate,the,predicate,that,applies,to,the,handler,function,param,handler,function,the,handler,function,see,router,functions,route,request,predicate,handler,function;void,route,request,predicate,predicate,handler,function,handler,function
RouterFunctions -> Visitor -> void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction)_;1530877097;Receive notification of a standard predicated route to a handler function._@param predicate the predicate that applies to the handler function_@param handlerFunction the handler function._@see RouterFunctions#route(RequestPredicate, HandlerFunction);void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction)_;receive,notification,of,a,standard,predicated,route,to,a,handler,function,param,predicate,the,predicate,that,applies,to,the,handler,function,param,handler,function,the,handler,function,see,router,functions,route,request,predicate,handler,function;void,route,request,predicate,predicate,handler,function,handler,function
RouterFunctions -> Visitor -> void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction)_;1530880709;Receive notification of a standard predicated route to a handler function._@param predicate the predicate that applies to the handler function_@param handlerFunction the handler function._@see RouterFunctions#route(RequestPredicate, HandlerFunction);void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction)_;receive,notification,of,a,standard,predicated,route,to,a,handler,function,param,predicate,the,predicate,that,applies,to,the,handler,function,param,handler,function,the,handler,function,see,router,functions,route,request,predicate,handler,function;void,route,request,predicate,predicate,handler,function,handler,function
RouterFunctions -> Visitor -> void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction)_;1537188605;Receive notification of a standard predicated route to a handler function._@param predicate the predicate that applies to the handler function_@param handlerFunction the handler function._@see RouterFunctions#route(RequestPredicate, HandlerFunction);void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction)_;receive,notification,of,a,standard,predicated,route,to,a,handler,function,param,predicate,the,predicate,that,applies,to,the,handler,function,param,handler,function,the,handler,function,see,router,functions,route,request,predicate,handler,function;void,route,request,predicate,predicate,handler,function,handler,function
RouterFunctions -> Visitor -> void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction)_;1538664611;Receive notification of a standard predicated route to a handler function._@param predicate the predicate that applies to the handler function_@param handlerFunction the handler function._@see RouterFunctions#route(RequestPredicate, HandlerFunction);void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction)_;receive,notification,of,a,standard,predicated,route,to,a,handler,function,param,predicate,the,predicate,that,applies,to,the,handler,function,param,handler,function,the,handler,function,see,router,functions,route,request,predicate,handler,function;void,route,request,predicate,predicate,handler,function,handler,function
RouterFunctions -> Visitor -> void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction)_;1539866925;Receive notification of a standard predicated route to a handler function._@param predicate the predicate that applies to the handler function_@param handlerFunction the handler function._@see RouterFunctions#route(RequestPredicate, HandlerFunction);void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction)_;receive,notification,of,a,standard,predicated,route,to,a,handler,function,param,predicate,the,predicate,that,applies,to,the,handler,function,param,handler,function,the,handler,function,see,router,functions,route,request,predicate,handler,function;void,route,request,predicate,predicate,handler,function,handler,function
RouterFunctions -> Builder -> Builder resources(String pattern, Resource location)_;1530871268;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RouterFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return this builder;Builder resources(String pattern, Resource location)_;route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,router,function,lt,server,response,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,this,builder;builder,resources,string,pattern,resource,location
RouterFunctions -> Builder -> Builder resources(String pattern, Resource location)_;1530877097;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RouterFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return this builder;Builder resources(String pattern, Resource location)_;route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,router,function,lt,server,response,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,this,builder;builder,resources,string,pattern,resource,location
RouterFunctions -> Builder -> Builder resources(String pattern, Resource location)_;1530880709;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RouterFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return this builder;Builder resources(String pattern, Resource location)_;route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,router,function,lt,server,response,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,this,builder;builder,resources,string,pattern,resource,location
RouterFunctions -> Builder -> Builder resources(String pattern, Resource location)_;1537188605;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RouterFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return this builder;Builder resources(String pattern, Resource location)_;route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,router,function,lt,server,response,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,this,builder;builder,resources,string,pattern,resource,location
RouterFunctions -> Builder -> Builder resources(String pattern, Resource location)_;1538664611;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RouterFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return this builder;Builder resources(String pattern, Resource location)_;route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,router,function,lt,server,response,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,this,builder;builder,resources,string,pattern,resource,location
RouterFunctions -> Builder -> Builder resources(String pattern, Resource location)_;1539866925;Route requests that match the given pattern to resources relative to the given root location._For instance_<pre class="code">_Resource location = new FileSystemResource("public-resources/")__RouterFunction&lt_ServerResponse&gt_ resources = RouterFunctions.resources("/resources/**", location)__</pre>_@param pattern the pattern to match_@param location the location directory relative to which resources should be resolved_@return this builder;Builder resources(String pattern, Resource location)_;route,requests,that,match,the,given,pattern,to,resources,relative,to,the,given,root,location,for,instance,pre,class,code,resource,location,new,file,system,resource,public,resources,router,function,lt,server,response,gt,resources,router,functions,resources,resources,location,pre,param,pattern,the,pattern,to,match,param,location,the,location,directory,relative,to,which,resources,should,be,resolved,return,this,builder;builder,resources,string,pattern,resource,location
RouterFunctions -> Visitor -> void startNested(RequestPredicate predicate)_;1506081789;Receive notification of the beginning of a nested router function._@param predicate the predicate that applies to the nested router functions_@see RouterFunctions#nest(RequestPredicate, RouterFunction);void startNested(RequestPredicate predicate)_;receive,notification,of,the,beginning,of,a,nested,router,function,param,predicate,the,predicate,that,applies,to,the,nested,router,functions,see,router,functions,nest,request,predicate,router,function;void,start,nested,request,predicate,predicate
RouterFunctions -> Visitor -> void startNested(RequestPredicate predicate)_;1520528267;Receive notification of the beginning of a nested router function._@param predicate the predicate that applies to the nested router functions_@see RouterFunctions#nest(RequestPredicate, RouterFunction);void startNested(RequestPredicate predicate)_;receive,notification,of,the,beginning,of,a,nested,router,function,param,predicate,the,predicate,that,applies,to,the,nested,router,functions,see,router,functions,nest,request,predicate,router,function;void,start,nested,request,predicate,predicate
RouterFunctions -> Visitor -> void startNested(RequestPredicate predicate)_;1524865018;Receive notification of the beginning of a nested router function._@param predicate the predicate that applies to the nested router functions_@see RouterFunctions#nest(RequestPredicate, RouterFunction);void startNested(RequestPredicate predicate)_;receive,notification,of,the,beginning,of,a,nested,router,function,param,predicate,the,predicate,that,applies,to,the,nested,router,functions,see,router,functions,nest,request,predicate,router,function;void,start,nested,request,predicate,predicate
RouterFunctions -> Visitor -> void startNested(RequestPredicate predicate)_;1525433784;Receive notification of the beginning of a nested router function._@param predicate the predicate that applies to the nested router functions_@see RouterFunctions#nest(RequestPredicate, RouterFunction);void startNested(RequestPredicate predicate)_;receive,notification,of,the,beginning,of,a,nested,router,function,param,predicate,the,predicate,that,applies,to,the,nested,router,functions,see,router,functions,nest,request,predicate,router,function;void,start,nested,request,predicate,predicate
RouterFunctions -> Visitor -> void startNested(RequestPredicate predicate)_;1526553177;Receive notification of the beginning of a nested router function._@param predicate the predicate that applies to the nested router functions_@see RouterFunctions#nest(RequestPredicate, RouterFunction);void startNested(RequestPredicate predicate)_;receive,notification,of,the,beginning,of,a,nested,router,function,param,predicate,the,predicate,that,applies,to,the,nested,router,functions,see,router,functions,nest,request,predicate,router,function;void,start,nested,request,predicate,predicate
RouterFunctions -> Visitor -> void startNested(RequestPredicate predicate)_;1527601711;Receive notification of the beginning of a nested router function._@param predicate the predicate that applies to the nested router functions_@see RouterFunctions#nest(RequestPredicate, RouterFunction);void startNested(RequestPredicate predicate)_;receive,notification,of,the,beginning,of,a,nested,router,function,param,predicate,the,predicate,that,applies,to,the,nested,router,functions,see,router,functions,nest,request,predicate,router,function;void,start,nested,request,predicate,predicate
RouterFunctions -> Visitor -> void startNested(RequestPredicate predicate)_;1529721864;Receive notification of the beginning of a nested router function._@param predicate the predicate that applies to the nested router functions_@see RouterFunctions#nest(RequestPredicate, RouterFunction);void startNested(RequestPredicate predicate)_;receive,notification,of,the,beginning,of,a,nested,router,function,param,predicate,the,predicate,that,applies,to,the,nested,router,functions,see,router,functions,nest,request,predicate,router,function;void,start,nested,request,predicate,predicate
RouterFunctions -> Visitor -> void startNested(RequestPredicate predicate)_;1530174524;Receive notification of the beginning of a nested router function._@param predicate the predicate that applies to the nested router functions_@see RouterFunctions#nest(RequestPredicate, RouterFunction);void startNested(RequestPredicate predicate)_;receive,notification,of,the,beginning,of,a,nested,router,function,param,predicate,the,predicate,that,applies,to,the,nested,router,functions,see,router,functions,nest,request,predicate,router,function;void,start,nested,request,predicate,predicate
RouterFunctions -> Visitor -> void startNested(RequestPredicate predicate)_;1530174524;Receive notification of the beginning of a nested router function._@param predicate the predicate that applies to the nested router functions_@see RouterFunctions#nest(RequestPredicate, RouterFunction);void startNested(RequestPredicate predicate)_;receive,notification,of,the,beginning,of,a,nested,router,function,param,predicate,the,predicate,that,applies,to,the,nested,router,functions,see,router,functions,nest,request,predicate,router,function;void,start,nested,request,predicate,predicate
RouterFunctions -> Visitor -> void startNested(RequestPredicate predicate)_;1530177818;Receive notification of the beginning of a nested router function._@param predicate the predicate that applies to the nested router functions_@see RouterFunctions#nest(RequestPredicate, RouterFunction);void startNested(RequestPredicate predicate)_;receive,notification,of,the,beginning,of,a,nested,router,function,param,predicate,the,predicate,that,applies,to,the,nested,router,functions,see,router,functions,nest,request,predicate,router,function;void,start,nested,request,predicate,predicate
RouterFunctions -> Visitor -> void startNested(RequestPredicate predicate)_;1530187774;Receive notification of the beginning of a nested router function._@param predicate the predicate that applies to the nested router functions_@see RouterFunctions#nest(RequestPredicate, RouterFunction);void startNested(RequestPredicate predicate)_;receive,notification,of,the,beginning,of,a,nested,router,function,param,predicate,the,predicate,that,applies,to,the,nested,router,functions,see,router,functions,nest,request,predicate,router,function;void,start,nested,request,predicate,predicate
RouterFunctions -> Visitor -> void startNested(RequestPredicate predicate)_;1530793633;Receive notification of the beginning of a nested router function._@param predicate the predicate that applies to the nested router functions_@see RouterFunctions#nest(RequestPredicate, RouterFunction);void startNested(RequestPredicate predicate)_;receive,notification,of,the,beginning,of,a,nested,router,function,param,predicate,the,predicate,that,applies,to,the,nested,router,functions,see,router,functions,nest,request,predicate,router,function;void,start,nested,request,predicate,predicate
RouterFunctions -> Visitor -> void startNested(RequestPredicate predicate)_;1530871268;Receive notification of the beginning of a nested router function._@param predicate the predicate that applies to the nested router functions_@see RouterFunctions#nest(RequestPredicate, RouterFunction);void startNested(RequestPredicate predicate)_;receive,notification,of,the,beginning,of,a,nested,router,function,param,predicate,the,predicate,that,applies,to,the,nested,router,functions,see,router,functions,nest,request,predicate,router,function;void,start,nested,request,predicate,predicate
RouterFunctions -> Visitor -> void startNested(RequestPredicate predicate)_;1530877097;Receive notification of the beginning of a nested router function._@param predicate the predicate that applies to the nested router functions_@see RouterFunctions#nest(RequestPredicate, RouterFunction);void startNested(RequestPredicate predicate)_;receive,notification,of,the,beginning,of,a,nested,router,function,param,predicate,the,predicate,that,applies,to,the,nested,router,functions,see,router,functions,nest,request,predicate,router,function;void,start,nested,request,predicate,predicate
RouterFunctions -> Visitor -> void startNested(RequestPredicate predicate)_;1530880709;Receive notification of the beginning of a nested router function._@param predicate the predicate that applies to the nested router functions_@see RouterFunctions#nest(RequestPredicate, RouterFunction);void startNested(RequestPredicate predicate)_;receive,notification,of,the,beginning,of,a,nested,router,function,param,predicate,the,predicate,that,applies,to,the,nested,router,functions,see,router,functions,nest,request,predicate,router,function;void,start,nested,request,predicate,predicate
RouterFunctions -> Visitor -> void startNested(RequestPredicate predicate)_;1537188605;Receive notification of the beginning of a nested router function._@param predicate the predicate that applies to the nested router functions_@see RouterFunctions#nest(RequestPredicate, RouterFunction);void startNested(RequestPredicate predicate)_;receive,notification,of,the,beginning,of,a,nested,router,function,param,predicate,the,predicate,that,applies,to,the,nested,router,functions,see,router,functions,nest,request,predicate,router,function;void,start,nested,request,predicate,predicate
RouterFunctions -> Visitor -> void startNested(RequestPredicate predicate)_;1538664611;Receive notification of the beginning of a nested router function._@param predicate the predicate that applies to the nested router functions_@see RouterFunctions#nest(RequestPredicate, RouterFunction);void startNested(RequestPredicate predicate)_;receive,notification,of,the,beginning,of,a,nested,router,function,param,predicate,the,predicate,that,applies,to,the,nested,router,functions,see,router,functions,nest,request,predicate,router,function;void,start,nested,request,predicate,predicate
RouterFunctions -> Visitor -> void startNested(RequestPredicate predicate)_;1539866925;Receive notification of the beginning of a nested router function._@param predicate the predicate that applies to the nested router functions_@see RouterFunctions#nest(RequestPredicate, RouterFunction);void startNested(RequestPredicate predicate)_;receive,notification,of,the,beginning,of,a,nested,router,function,param,predicate,the,predicate,that,applies,to,the,nested,router,functions,see,router,functions,nest,request,predicate,router,function;void,start,nested,request,predicate,predicate
RouterFunctions -> Builder -> Builder path(String pattern, Supplier<RouterFunction<ServerResponse>> routerFunctionSupplier)_;1530871268;Route to the supplied router function if the given path prefix pattern applies. This method_can be used to create <strong>nested routes</strong>, where a group of routes share a_common path prefix. Specifically, this method can be used to merge externally defined_router functions under a path prefix._<p>For instance, the following example creates a nested route with a "/user" path_predicate that delegates to the router function defined in {@code userController},_and with a "/order" path that delegates to {@code orderController}._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.route()_.path("/user", userController::routerFunction)_.path("/order", orderController::routerFunction)_.build()__</pre>_@param pattern the pattern to match to_@param routerFunctionSupplier supplier for the nested router function to delegate to if_the pattern matches_@return this builder;Builder path(String pattern, Supplier<RouterFunction<ServerResponse>> routerFunctionSupplier)_;route,to,the,supplied,router,function,if,the,given,path,prefix,pattern,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,specifically,this,method,can,be,used,to,merge,externally,defined,router,functions,under,a,path,prefix,p,for,instance,the,following,example,creates,a,nested,route,with,a,user,path,predicate,that,delegates,to,the,router,function,defined,in,code,user,controller,and,with,a,order,path,that,delegates,to,code,order,controller,pre,class,code,router,function,lt,server,response,gt,nested,route,router,functions,route,path,user,user,controller,router,function,path,order,order,controller,router,function,build,pre,param,pattern,the,pattern,to,match,to,param,router,function,supplier,supplier,for,the,nested,router,function,to,delegate,to,if,the,pattern,matches,return,this,builder;builder,path,string,pattern,supplier,router,function,server,response,router,function,supplier
RouterFunctions -> Builder -> Builder path(String pattern, Supplier<RouterFunction<ServerResponse>> routerFunctionSupplier)_;1530877097;Route to the supplied router function if the given path prefix pattern applies. This method_can be used to create <strong>nested routes</strong>, where a group of routes share a_common path prefix. Specifically, this method can be used to merge externally defined_router functions under a path prefix._<p>For instance, the following example creates a nested route with a "/user" path_predicate that delegates to the router function defined in {@code userController},_and with a "/order" path that delegates to {@code orderController}._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.route()_.path("/user", userController::routerFunction)_.path("/order", orderController::routerFunction)_.build()__</pre>_@param pattern the pattern to match to_@param routerFunctionSupplier supplier for the nested router function to delegate to if_the pattern matches_@return this builder;Builder path(String pattern, Supplier<RouterFunction<ServerResponse>> routerFunctionSupplier)_;route,to,the,supplied,router,function,if,the,given,path,prefix,pattern,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,specifically,this,method,can,be,used,to,merge,externally,defined,router,functions,under,a,path,prefix,p,for,instance,the,following,example,creates,a,nested,route,with,a,user,path,predicate,that,delegates,to,the,router,function,defined,in,code,user,controller,and,with,a,order,path,that,delegates,to,code,order,controller,pre,class,code,router,function,lt,server,response,gt,nested,route,router,functions,route,path,user,user,controller,router,function,path,order,order,controller,router,function,build,pre,param,pattern,the,pattern,to,match,to,param,router,function,supplier,supplier,for,the,nested,router,function,to,delegate,to,if,the,pattern,matches,return,this,builder;builder,path,string,pattern,supplier,router,function,server,response,router,function,supplier
RouterFunctions -> Builder -> Builder path(String pattern, Supplier<RouterFunction<ServerResponse>> routerFunctionSupplier)_;1530880709;Route to the supplied router function if the given path prefix pattern applies. This method_can be used to create <strong>nested routes</strong>, where a group of routes share a_common path prefix. Specifically, this method can be used to merge externally defined_router functions under a path prefix._<p>For instance, the following example creates a nested route with a "/user" path_predicate that delegates to the router function defined in {@code userController},_and with a "/order" path that delegates to {@code orderController}._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.route()_.path("/user", userController::routerFunction)_.path("/order", orderController::routerFunction)_.build()__</pre>_@param pattern the pattern to match to_@param routerFunctionSupplier supplier for the nested router function to delegate to if_the pattern matches_@return this builder;Builder path(String pattern, Supplier<RouterFunction<ServerResponse>> routerFunctionSupplier)_;route,to,the,supplied,router,function,if,the,given,path,prefix,pattern,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,specifically,this,method,can,be,used,to,merge,externally,defined,router,functions,under,a,path,prefix,p,for,instance,the,following,example,creates,a,nested,route,with,a,user,path,predicate,that,delegates,to,the,router,function,defined,in,code,user,controller,and,with,a,order,path,that,delegates,to,code,order,controller,pre,class,code,router,function,lt,server,response,gt,nested,route,router,functions,route,path,user,user,controller,router,function,path,order,order,controller,router,function,build,pre,param,pattern,the,pattern,to,match,to,param,router,function,supplier,supplier,for,the,nested,router,function,to,delegate,to,if,the,pattern,matches,return,this,builder;builder,path,string,pattern,supplier,router,function,server,response,router,function,supplier
RouterFunctions -> Builder -> Builder path(String pattern, Supplier<RouterFunction<ServerResponse>> routerFunctionSupplier)_;1537188605;Route to the supplied router function if the given path prefix pattern applies. This method_can be used to create <strong>nested routes</strong>, where a group of routes share a_common path prefix. Specifically, this method can be used to merge externally defined_router functions under a path prefix._<p>For instance, the following example creates a nested route with a "/user" path_predicate that delegates to the router function defined in {@code userController},_and with a "/order" path that delegates to {@code orderController}._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.route()_.path("/user", userController::routerFunction)_.path("/order", orderController::routerFunction)_.build()__</pre>_@param pattern the pattern to match to_@param routerFunctionSupplier supplier for the nested router function to delegate to if_the pattern matches_@return this builder;Builder path(String pattern, Supplier<RouterFunction<ServerResponse>> routerFunctionSupplier)_;route,to,the,supplied,router,function,if,the,given,path,prefix,pattern,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,specifically,this,method,can,be,used,to,merge,externally,defined,router,functions,under,a,path,prefix,p,for,instance,the,following,example,creates,a,nested,route,with,a,user,path,predicate,that,delegates,to,the,router,function,defined,in,code,user,controller,and,with,a,order,path,that,delegates,to,code,order,controller,pre,class,code,router,function,lt,server,response,gt,nested,route,router,functions,route,path,user,user,controller,router,function,path,order,order,controller,router,function,build,pre,param,pattern,the,pattern,to,match,to,param,router,function,supplier,supplier,for,the,nested,router,function,to,delegate,to,if,the,pattern,matches,return,this,builder;builder,path,string,pattern,supplier,router,function,server,response,router,function,supplier
RouterFunctions -> Builder -> Builder path(String pattern, Supplier<RouterFunction<ServerResponse>> routerFunctionSupplier)_;1538664611;Route to the supplied router function if the given path prefix pattern applies. This method_can be used to create <strong>nested routes</strong>, where a group of routes share a_common path prefix. Specifically, this method can be used to merge externally defined_router functions under a path prefix._<p>For instance, the following example creates a nested route with a "/user" path_predicate that delegates to the router function defined in {@code userController},_and with a "/order" path that delegates to {@code orderController}._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.route()_.path("/user", userController::routerFunction)_.path("/order", orderController::routerFunction)_.build()__</pre>_@param pattern the pattern to match to_@param routerFunctionSupplier supplier for the nested router function to delegate to if_the pattern matches_@return this builder;Builder path(String pattern, Supplier<RouterFunction<ServerResponse>> routerFunctionSupplier)_;route,to,the,supplied,router,function,if,the,given,path,prefix,pattern,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,specifically,this,method,can,be,used,to,merge,externally,defined,router,functions,under,a,path,prefix,p,for,instance,the,following,example,creates,a,nested,route,with,a,user,path,predicate,that,delegates,to,the,router,function,defined,in,code,user,controller,and,with,a,order,path,that,delegates,to,code,order,controller,pre,class,code,router,function,lt,server,response,gt,nested,route,router,functions,route,path,user,user,controller,router,function,path,order,order,controller,router,function,build,pre,param,pattern,the,pattern,to,match,to,param,router,function,supplier,supplier,for,the,nested,router,function,to,delegate,to,if,the,pattern,matches,return,this,builder;builder,path,string,pattern,supplier,router,function,server,response,router,function,supplier
RouterFunctions -> Builder -> Builder path(String pattern, Supplier<RouterFunction<ServerResponse>> routerFunctionSupplier)_;1539866925;Route to the supplied router function if the given path prefix pattern applies. This method_can be used to create <strong>nested routes</strong>, where a group of routes share a_common path prefix. Specifically, this method can be used to merge externally defined_router functions under a path prefix._<p>For instance, the following example creates a nested route with a "/user" path_predicate that delegates to the router function defined in {@code userController},_and with a "/order" path that delegates to {@code orderController}._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.route()_.path("/user", userController::routerFunction)_.path("/order", orderController::routerFunction)_.build()__</pre>_@param pattern the pattern to match to_@param routerFunctionSupplier supplier for the nested router function to delegate to if_the pattern matches_@return this builder;Builder path(String pattern, Supplier<RouterFunction<ServerResponse>> routerFunctionSupplier)_;route,to,the,supplied,router,function,if,the,given,path,prefix,pattern,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,specifically,this,method,can,be,used,to,merge,externally,defined,router,functions,under,a,path,prefix,p,for,instance,the,following,example,creates,a,nested,route,with,a,user,path,predicate,that,delegates,to,the,router,function,defined,in,code,user,controller,and,with,a,order,path,that,delegates,to,code,order,controller,pre,class,code,router,function,lt,server,response,gt,nested,route,router,functions,route,path,user,user,controller,router,function,path,order,order,controller,router,function,build,pre,param,pattern,the,pattern,to,match,to,param,router,function,supplier,supplier,for,the,nested,router,function,to,delegate,to,if,the,pattern,matches,return,this,builder;builder,path,string,pattern,supplier,router,function,server,response,router,function,supplier
RouterFunctions -> Builder -> Builder route(RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1530177818;Adds a route to the given handler function that matches if the given request predicate_applies._<p>For instance, the following example routes GET requests for "/user" to the_{@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.builder()_.route(RequestPredicates.GET("/user"), userController::listUsers)_.build()__</pre>_@param predicate the predicate to test_@param handlerFunction the handler function to route to if the predicate applies_@return this builder_@see RequestPredicates;Builder route(RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,matches,if,the,given,request,predicate,applies,p,for,instance,the,following,example,routes,get,requests,for,user,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,builder,route,request,predicates,get,user,user,controller,list,users,build,pre,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,if,the,predicate,applies,return,this,builder,see,request,predicates;builder,route,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder route(RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1530187774;Adds a route to the given handler function that matches if the given request predicate_applies._<p>For instance, the following example routes GET requests for "/user" to the_{@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.builder()_.route(RequestPredicates.GET("/user"), userController::listUsers)_.build()__</pre>_@param predicate the predicate to test_@param handlerFunction the handler function to route to if the predicate applies_@return this builder_@see RequestPredicates;Builder route(RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,matches,if,the,given,request,predicate,applies,p,for,instance,the,following,example,routes,get,requests,for,user,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,builder,route,request,predicates,get,user,user,controller,list,users,build,pre,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,if,the,predicate,applies,return,this,builder,see,request,predicates;builder,route,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder route(RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1530793633;Adds a route to the given handler function that matches if the given request predicate_applies._<p>For instance, the following example routes GET requests for "/user" to the_{@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.builder()_.route(RequestPredicates.GET("/user"), userController::listUsers)_.build()__</pre>_@param predicate the predicate to test_@param handlerFunction the handler function to route to if the predicate applies_@return this builder_@see RequestPredicates;Builder route(RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,matches,if,the,given,request,predicate,applies,p,for,instance,the,following,example,routes,get,requests,for,user,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,builder,route,request,predicates,get,user,user,controller,list,users,build,pre,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,if,the,predicate,applies,return,this,builder,see,request,predicates;builder,route,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder filterBefore(Function<ServerRequest, Mono<ServerRequest>> requestProcessor)_;1530187774;Filters the request for all routes created by this builder with the given request_processing function. Filters are typically used to address cross-cutting concerns, such_as logging, security, etc._<p>For instance, the following example creates a filter that logs the request before_the handler function executes._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.builder()_.routeGet("/user", this::listUsers)_.filterBefore(request -> {_log(request)__return Mono.just(request)___.build()__</pre>_@param requestProcessor a function that transforms the request_@return this builder;Builder filterBefore(Function<ServerRequest, Mono<ServerRequest>> requestProcessor)_;filters,the,request,for,all,routes,created,by,this,builder,with,the,given,request,processing,function,filters,are,typically,used,to,address,cross,cutting,concerns,such,as,logging,security,etc,p,for,instance,the,following,example,creates,a,filter,that,logs,the,request,before,the,handler,function,executes,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,builder,route,get,user,this,list,users,filter,before,request,log,request,return,mono,just,request,build,pre,param,request,processor,a,function,that,transforms,the,request,return,this,builder;builder,filter,before,function,server,request,mono,server,request,request,processor
RouterFunctions -> Builder -> Builder filterBefore(Function<ServerRequest, Mono<ServerRequest>> requestProcessor)_;1530793633;Filters the request for all routes created by this builder with the given request_processing function. Filters are typically used to address cross-cutting concerns, such_as logging, security, etc._<p>For instance, the following example creates a filter that logs the request before_the handler function executes._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.builder()_.routeGet("/user", this::listUsers)_.filterBefore(request -> {_log(request)__return Mono.just(request)___.build()__</pre>_@param requestProcessor a function that transforms the request_@return this builder;Builder filterBefore(Function<ServerRequest, Mono<ServerRequest>> requestProcessor)_;filters,the,request,for,all,routes,created,by,this,builder,with,the,given,request,processing,function,filters,are,typically,used,to,address,cross,cutting,concerns,such,as,logging,security,etc,p,for,instance,the,following,example,creates,a,filter,that,logs,the,request,before,the,handler,function,executes,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,builder,route,get,user,this,list,users,filter,before,request,log,request,return,mono,just,request,build,pre,param,request,processor,a,function,that,transforms,the,request,return,this,builder;builder,filter,before,function,server,request,mono,server,request,request,processor
RouterFunctions -> Builder -> Builder routeGet(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530177818;Adds a route to the given handler function that handles all HTTP {@code GET} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code GET} requests that_match {@code pattern}_@return this builder;Builder routeGet(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,get,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,get,requests,that,match,code,pattern,return,this,builder;builder,route,get,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder routeGet(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530187774;Adds a route to the given handler function that handles all HTTP {@code GET} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code GET} requests that_match {@code pattern}_@return this builder;Builder routeGet(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,get,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,get,requests,that,match,code,pattern,return,this,builder;builder,route,get,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder routeGet(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530793633;Adds a route to the given handler function that handles all HTTP {@code GET} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code GET} requests that_match {@code pattern}_@return this builder;Builder routeGet(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,get,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,get,requests,that,match,code,pattern,return,this,builder;builder,route,get,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder routeDelete(HandlerFunction<ServerResponse> handlerFunction)_;1530177818;Adds a route to the given handler function that handles all HTTP {@code DELETE} requests._@param handlerFunction the handler function to handle all {@code DELETE} requests_@return this builder;Builder routeDelete(HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,delete,requests,param,handler,function,the,handler,function,to,handle,all,code,delete,requests,return,this,builder;builder,route,delete,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder routeDelete(HandlerFunction<ServerResponse> handlerFunction)_;1530187774;Adds a route to the given handler function that handles all HTTP {@code DELETE} requests._@param handlerFunction the handler function to handle all {@code DELETE} requests_@return this builder;Builder routeDelete(HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,delete,requests,param,handler,function,the,handler,function,to,handle,all,code,delete,requests,return,this,builder;builder,route,delete,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder routeDelete(HandlerFunction<ServerResponse> handlerFunction)_;1530793633;Adds a route to the given handler function that handles all HTTP {@code DELETE} requests._@param handlerFunction the handler function to handle all {@code DELETE} requests_@return this builder;Builder routeDelete(HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,delete,requests,param,handler,function,the,handler,function,to,handle,all,code,delete,requests,return,this,builder;builder,route,delete,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder POST(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1530871268;Adds a route to the given handler function that handles all HTTP {@code POST} requests_that match the given pattern and predicate._<p>For instance, the following example routes POST requests for "/user" that contain JSON_to the {@code addUser} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route()_.POST("/user", RequestPredicates.contentType(MediaType.APPLICATION_JSON),_userController::addUser)_.build()__</pre>_@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code POST} requests that_match {@code pattern}_@return this builder;Builder POST(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,post,requests,that,match,the,given,pattern,and,predicate,p,for,instance,the,following,example,routes,post,requests,for,user,that,contain,json,to,the,code,add,user,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,post,user,request,predicates,content,type,media,type,user,controller,add,user,build,pre,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,post,requests,that,match,code,pattern,return,this,builder;builder,post,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder POST(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1530877097;Adds a route to the given handler function that handles all HTTP {@code POST} requests_that match the given pattern and predicate._<p>For instance, the following example routes POST requests for "/user" that contain JSON_to the {@code addUser} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route()_.POST("/user", RequestPredicates.contentType(MediaType.APPLICATION_JSON),_userController::addUser)_.build()__</pre>_@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code POST} requests that_match {@code pattern}_@return this builder;Builder POST(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,post,requests,that,match,the,given,pattern,and,predicate,p,for,instance,the,following,example,routes,post,requests,for,user,that,contain,json,to,the,code,add,user,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,post,user,request,predicates,content,type,media,type,user,controller,add,user,build,pre,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,post,requests,that,match,code,pattern,return,this,builder;builder,post,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder POST(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1530880709;Adds a route to the given handler function that handles all HTTP {@code POST} requests_that match the given pattern and predicate._<p>For instance, the following example routes POST requests for "/user" that contain JSON_to the {@code addUser} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route()_.POST("/user", RequestPredicates.contentType(MediaType.APPLICATION_JSON), userController::addUser)_.build()__</pre>_@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code POST} requests that_match {@code pattern}_@return this builder;Builder POST(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,post,requests,that,match,the,given,pattern,and,predicate,p,for,instance,the,following,example,routes,post,requests,for,user,that,contain,json,to,the,code,add,user,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,post,user,request,predicates,content,type,media,type,user,controller,add,user,build,pre,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,post,requests,that,match,code,pattern,return,this,builder;builder,post,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder POST(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1537188605;Adds a route to the given handler function that handles all HTTP {@code POST} requests_that match the given pattern and predicate._<p>For instance, the following example routes POST requests for "/user" that contain JSON_to the {@code addUser} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route()_.POST("/user", RequestPredicates.contentType(MediaType.APPLICATION_JSON), userController::addUser)_.build()__</pre>_@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code POST} requests that_match {@code pattern}_@return this builder;Builder POST(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,post,requests,that,match,the,given,pattern,and,predicate,p,for,instance,the,following,example,routes,post,requests,for,user,that,contain,json,to,the,code,add,user,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,post,user,request,predicates,content,type,media,type,user,controller,add,user,build,pre,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,post,requests,that,match,code,pattern,return,this,builder;builder,post,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder POST(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1538664611;Adds a route to the given handler function that handles all HTTP {@code POST} requests_that match the given pattern and predicate._<p>For instance, the following example routes POST requests for "/user" that contain JSON_to the {@code addUser} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route()_.POST("/user", RequestPredicates.contentType(MediaType.APPLICATION_JSON), userController::addUser)_.build()__</pre>_@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code POST} requests that_match {@code pattern}_@return this builder;Builder POST(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,post,requests,that,match,the,given,pattern,and,predicate,p,for,instance,the,following,example,routes,post,requests,for,user,that,contain,json,to,the,code,add,user,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,post,user,request,predicates,content,type,media,type,user,controller,add,user,build,pre,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,post,requests,that,match,code,pattern,return,this,builder;builder,post,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder POST(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1539866925;Adds a route to the given handler function that handles all HTTP {@code POST} requests_that match the given pattern and predicate._<p>For instance, the following example routes POST requests for "/user" that contain JSON_to the {@code addUser} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route()_.POST("/user", RequestPredicates.contentType(MediaType.APPLICATION_JSON), userController::addUser)_.build()__</pre>_@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code POST} requests that_match {@code pattern}_@return this builder;Builder POST(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,post,requests,that,match,the,given,pattern,and,predicate,p,for,instance,the,following,example,routes,post,requests,for,user,that,contain,json,to,the,code,add,user,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,post,user,request,predicates,content,type,media,type,user,controller,add,user,build,pre,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,post,requests,that,match,code,pattern,return,this,builder;builder,post,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder PATCH(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1530871268;Adds a route to the given handler function that handles all HTTP {@code PATCH} requests_that match the given pattern and predicate._<p>For instance, the following example routes PATCH requests for "/user" that contain JSON_to the {@code editUser} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route()_.PATCH("/user", RequestPredicates.contentType(MediaType.APPLICATION_JSON),_userController::editUser)_.build()__</pre>_@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code PATCH} requests that_match {@code pattern}_@return this builder;Builder PATCH(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,patch,requests,that,match,the,given,pattern,and,predicate,p,for,instance,the,following,example,routes,patch,requests,for,user,that,contain,json,to,the,code,edit,user,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,patch,user,request,predicates,content,type,media,type,user,controller,edit,user,build,pre,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,patch,requests,that,match,code,pattern,return,this,builder;builder,patch,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder PATCH(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1530877097;Adds a route to the given handler function that handles all HTTP {@code PATCH} requests_that match the given pattern and predicate._<p>For instance, the following example routes PATCH requests for "/user" that contain JSON_to the {@code editUser} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route()_.PATCH("/user", RequestPredicates.contentType(MediaType.APPLICATION_JSON),_userController::editUser)_.build()__</pre>_@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code PATCH} requests that_match {@code pattern}_@return this builder;Builder PATCH(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,patch,requests,that,match,the,given,pattern,and,predicate,p,for,instance,the,following,example,routes,patch,requests,for,user,that,contain,json,to,the,code,edit,user,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,patch,user,request,predicates,content,type,media,type,user,controller,edit,user,build,pre,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,patch,requests,that,match,code,pattern,return,this,builder;builder,patch,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder PATCH(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1530880709;Adds a route to the given handler function that handles all HTTP {@code PATCH} requests_that match the given pattern and predicate._<p>For instance, the following example routes PATCH requests for "/user" that contain JSON_to the {@code editUser} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route()_.PATCH("/user", RequestPredicates.contentType(MediaType.APPLICATION_JSON), userController::editUser)_.build()__</pre>_@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code PATCH} requests that_match {@code pattern}_@return this builder;Builder PATCH(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,patch,requests,that,match,the,given,pattern,and,predicate,p,for,instance,the,following,example,routes,patch,requests,for,user,that,contain,json,to,the,code,edit,user,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,patch,user,request,predicates,content,type,media,type,user,controller,edit,user,build,pre,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,patch,requests,that,match,code,pattern,return,this,builder;builder,patch,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder PATCH(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1537188605;Adds a route to the given handler function that handles all HTTP {@code PATCH} requests_that match the given pattern and predicate._<p>For instance, the following example routes PATCH requests for "/user" that contain JSON_to the {@code editUser} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route()_.PATCH("/user", RequestPredicates.contentType(MediaType.APPLICATION_JSON), userController::editUser)_.build()__</pre>_@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code PATCH} requests that_match {@code pattern}_@return this builder;Builder PATCH(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,patch,requests,that,match,the,given,pattern,and,predicate,p,for,instance,the,following,example,routes,patch,requests,for,user,that,contain,json,to,the,code,edit,user,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,patch,user,request,predicates,content,type,media,type,user,controller,edit,user,build,pre,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,patch,requests,that,match,code,pattern,return,this,builder;builder,patch,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder PATCH(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1538664611;Adds a route to the given handler function that handles all HTTP {@code PATCH} requests_that match the given pattern and predicate._<p>For instance, the following example routes PATCH requests for "/user" that contain JSON_to the {@code editUser} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route()_.PATCH("/user", RequestPredicates.contentType(MediaType.APPLICATION_JSON), userController::editUser)_.build()__</pre>_@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code PATCH} requests that_match {@code pattern}_@return this builder;Builder PATCH(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,patch,requests,that,match,the,given,pattern,and,predicate,p,for,instance,the,following,example,routes,patch,requests,for,user,that,contain,json,to,the,code,edit,user,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,patch,user,request,predicates,content,type,media,type,user,controller,edit,user,build,pre,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,patch,requests,that,match,code,pattern,return,this,builder;builder,patch,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder PATCH(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1539866925;Adds a route to the given handler function that handles all HTTP {@code PATCH} requests_that match the given pattern and predicate._<p>For instance, the following example routes PATCH requests for "/user" that contain JSON_to the {@code editUser} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route()_.PATCH("/user", RequestPredicates.contentType(MediaType.APPLICATION_JSON), userController::editUser)_.build()__</pre>_@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code PATCH} requests that_match {@code pattern}_@return this builder;Builder PATCH(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,patch,requests,that,match,the,given,pattern,and,predicate,p,for,instance,the,following,example,routes,patch,requests,for,user,that,contain,json,to,the,code,edit,user,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,patch,user,request,predicates,content,type,media,type,user,controller,edit,user,build,pre,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,patch,requests,that,match,code,pattern,return,this,builder;builder,patch,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction);1494495900;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned handler can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_{@link WebHttpHandlerBuilder}._@param routerFunction the router function to convert_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction) {_		return toHttpHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,link,web,http,handler,builder,param,router,function,the,router,function,to,convert,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,return,to,http,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction);1495618935;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned handler can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_{@link WebHttpHandlerBuilder}._@param routerFunction the router function to convert_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction) {_		return toHttpHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,link,web,http,handler,builder,param,router,function,the,router,function,to,convert,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,return,to,http,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction);1495626483;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned handler can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_{@link WebHttpHandlerBuilder}._@param routerFunction the router function to convert_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction) {_		return toHttpHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,link,web,http,handler,builder,param,router,function,the,router,function,to,convert,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,return,to,http,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction);1497359418;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned handler can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_{@link WebHttpHandlerBuilder}._@param routerFunction the router function to convert_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction) {_		return toHttpHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,link,web,http,handler,builder,param,router,function,the,router,function,to,convert,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,return,to,http,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction);1498216330;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned handler can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_{@link WebHttpHandlerBuilder}._@param routerFunction the router function to convert_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction) {_		return toHttpHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,link,web,http,handler,builder,param,router,function,the,router,function,to,convert,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,return,to,http,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction);1501161935;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned handler can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_{@link WebHttpHandlerBuilder}._@param routerFunction the router function to convert_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction) {_		return toHttpHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,link,web,http,handler,builder,param,router,function,the,router,function,to,convert,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,return,to,http,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction);1506081789;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned handler can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_{@link WebHttpHandlerBuilder}._@param routerFunction the router function to convert_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction) {_		return toHttpHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,link,web,http,handler,builder,param,router,function,the,router,function,to,convert,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,return,to,http,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction);1520528267;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned handler can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_{@link WebHttpHandlerBuilder}._@param routerFunction the router function to convert_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction) {_		return toHttpHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,link,web,http,handler,builder,param,router,function,the,router,function,to,convert,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,return,to,http,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction);1524865018;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned handler can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_{@link WebHttpHandlerBuilder}._@param routerFunction the router function to convert_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction) {_		return toHttpHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,link,web,http,handler,builder,param,router,function,the,router,function,to,convert,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,return,to,http,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction);1525433784;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned handler can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_{@link WebHttpHandlerBuilder}._@param routerFunction the router function to convert_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction) {_		return toHttpHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,link,web,http,handler,builder,param,router,function,the,router,function,to,convert,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,return,to,http,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction);1526553177;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned handler can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_{@link WebHttpHandlerBuilder}._@param routerFunction the router function to convert_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction) {_		return toHttpHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,link,web,http,handler,builder,param,router,function,the,router,function,to,convert,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,return,to,http,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction);1527601711;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned handler can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_{@link WebHttpHandlerBuilder}._@param routerFunction the router function to convert_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction) {_		return toHttpHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,link,web,http,handler,builder,param,router,function,the,router,function,to,convert,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,return,to,http,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction);1529721864;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned handler can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_{@link WebHttpHandlerBuilder}._@param routerFunction the router function to convert_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction) {_		return toHttpHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,link,web,http,handler,builder,param,router,function,the,router,function,to,convert,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,return,to,http,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction);1530174524;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned handler can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_{@link WebHttpHandlerBuilder}._@param routerFunction the router function to convert_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction) {_		return toHttpHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,link,web,http,handler,builder,param,router,function,the,router,function,to,convert,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,return,to,http,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction);1530174524;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned handler can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_{@link WebHttpHandlerBuilder}._@param routerFunction the router function to convert_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction) {_		return toHttpHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,link,web,http,handler,builder,param,router,function,the,router,function,to,convert,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,return,to,http,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction);1530177818;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned handler can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_{@link WebHttpHandlerBuilder}._@param routerFunction the router function to convert_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction) {_		return toHttpHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,link,web,http,handler,builder,param,router,function,the,router,function,to,convert,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,return,to,http,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction);1530187774;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned handler can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_{@link WebHttpHandlerBuilder}._@param routerFunction the router function to convert_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction) {_		return toHttpHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,link,web,http,handler,builder,param,router,function,the,router,function,to,convert,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,return,to,http,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction);1530793633;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned handler can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_{@link WebHttpHandlerBuilder}._@param routerFunction the router function to convert_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction) {_		return toHttpHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,link,web,http,handler,builder,param,router,function,the,router,function,to,convert,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,return,to,http,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction);1530871268;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned handler can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_{@link WebHttpHandlerBuilder}._@param routerFunction the router function to convert_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction) {_		return toHttpHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,link,web,http,handler,builder,param,router,function,the,router,function,to,convert,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,return,to,http,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction);1530877097;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned handler can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_{@link WebHttpHandlerBuilder}._@param routerFunction the router function to convert_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction) {_		return toHttpHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,link,web,http,handler,builder,param,router,function,the,router,function,to,convert,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,return,to,http,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction);1530880709;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned handler can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_{@link WebHttpHandlerBuilder}._@param routerFunction the router function to convert_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction) {_		return toHttpHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,link,web,http,handler,builder,param,router,function,the,router,function,to,convert,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,return,to,http,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction);1537188605;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned handler can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_{@link WebHttpHandlerBuilder}._@param routerFunction the router function to convert_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction) {_		return toHttpHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,link,web,http,handler,builder,param,router,function,the,router,function,to,convert,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,return,to,http,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction);1538664611;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned handler can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_{@link WebHttpHandlerBuilder}._@param routerFunction the router function to convert_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction) {_		return toHttpHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,link,web,http,handler,builder,param,router,function,the,router,function,to,convert,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,return,to,http,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction);1539866925;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned handler can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_{@link WebHttpHandlerBuilder}._@param routerFunction the router function to convert_@return an http handler that handles HTTP request using the given router function;public static HttpHandler toHttpHandler(RouterFunction<?> routerFunction) {_		return toHttpHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,link,web,http,handler,builder,param,router,function,the,router,function,to,convert,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,handler,to,http,handler,router,function,router,function,return,to,http,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> Builder -> <T extends Throwable> Builder filterException(Class<T> exceptionType, 				BiFunction<? super T, ServerRequest, Mono<ServerResponse>> responseProvider)_;1530187774;Filters all exceptions of the given type by applying the given response provider_function._<p>For instance, the following example creates a filter that returns a 500 response_status when an {@code IllegalStateException} occurs._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.builder()_.routeGet("/user", this::listUsers)_.filterException(IllegalStateException.class,_(e, request) -> ServerResponse.status(HttpStatus.INTERNAL_SERVER_ERROR).build())_.build()__</pre>_@param exceptionType the type of exception to filter_@param responseProvider a function that creates a response_@return this builder;<T extends Throwable> Builder filterException(Class<T> exceptionType,_				BiFunction<? super T, ServerRequest, Mono<ServerResponse>> responseProvider)_;filters,all,exceptions,of,the,given,type,by,applying,the,given,response,provider,function,p,for,instance,the,following,example,creates,a,filter,that,returns,a,500,response,status,when,an,code,illegal,state,exception,occurs,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,builder,route,get,user,this,list,users,filter,exception,illegal,state,exception,class,e,request,server,response,status,http,status,build,build,pre,param,exception,type,the,type,of,exception,to,filter,param,response,provider,a,function,that,creates,a,response,return,this,builder;t,extends,throwable,builder,filter,exception,class,t,exception,type,bi,function,super,t,server,request,mono,server,response,response,provider
RouterFunctions -> Builder -> <T extends Throwable> Builder filterException(Class<T> exceptionType, 				BiFunction<? super T, ServerRequest, Mono<ServerResponse>> responseProvider)_;1530793633;Filters all exceptions of the given type by applying the given response provider_function._<p>For instance, the following example creates a filter that returns a 500 response_status when an {@code IllegalStateException} occurs._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.builder()_.routeGet("/user", this::listUsers)_.filterException(IllegalStateException.class,_(e, request) -> ServerResponse.status(HttpStatus.INTERNAL_SERVER_ERROR).build())_.build()__</pre>_@param exceptionType the type of exception to filter_@param responseProvider a function that creates a response_@return this builder;<T extends Throwable> Builder filterException(Class<T> exceptionType,_				BiFunction<? super T, ServerRequest, Mono<ServerResponse>> responseProvider)_;filters,all,exceptions,of,the,given,type,by,applying,the,given,response,provider,function,p,for,instance,the,following,example,creates,a,filter,that,returns,a,500,response,status,when,an,code,illegal,state,exception,occurs,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,builder,route,get,user,this,list,users,filter,exception,illegal,state,exception,class,e,request,server,response,status,http,status,build,build,pre,param,exception,type,the,type,of,exception,to,filter,param,response,provider,a,function,that,creates,a,response,return,this,builder;t,extends,throwable,builder,filter,exception,class,t,exception,type,bi,function,super,t,server,request,mono,server,response,response,provider
RouterFunctions -> Builder -> RouterFunction<ServerResponse> build()_;1530177818;Builds the {@code RouterFunction}. All created routes are_{@linkplain RouterFunction#and(RouterFunction) composed} with one another, and filters_(f any) are applied to the result._@return the built router function;RouterFunction<ServerResponse> build()_;builds,the,code,router,function,all,created,routes,are,linkplain,router,function,and,router,function,composed,with,one,another,and,filters,f,any,are,applied,to,the,result,return,the,built,router,function;router,function,server,response,build
RouterFunctions -> Builder -> RouterFunction<ServerResponse> build()_;1530187774;Builds the {@code RouterFunction}. All created routes are_{@linkplain RouterFunction#and(RouterFunction) composed} with one another, and filters_(f any) are applied to the result._@return the built router function;RouterFunction<ServerResponse> build()_;builds,the,code,router,function,all,created,routes,are,linkplain,router,function,and,router,function,composed,with,one,another,and,filters,f,any,are,applied,to,the,result,return,the,built,router,function;router,function,server,response,build
RouterFunctions -> Builder -> RouterFunction<ServerResponse> build()_;1530793633;Builds the {@code RouterFunction}. All created routes are_{@linkplain RouterFunction#and(RouterFunction) composed} with one another, and filters_(f any) are applied to the result._@return the built router function;RouterFunction<ServerResponse> build()_;builds,the,code,router,function,all,created,routes,are,linkplain,router,function,and,router,function,composed,with,one,another,and,filters,f,any,are,applied,to,the,result,return,the,built,router,function;router,function,server,response,build
RouterFunctions -> Builder -> RouterFunction<ServerResponse> build()_;1530871268;Builds the {@code RouterFunction}. All created routes are_{@linkplain RouterFunction#and(RouterFunction) composed} with one another, and filters_(if any) are applied to the result._@return the built router function;RouterFunction<ServerResponse> build()_;builds,the,code,router,function,all,created,routes,are,linkplain,router,function,and,router,function,composed,with,one,another,and,filters,if,any,are,applied,to,the,result,return,the,built,router,function;router,function,server,response,build
RouterFunctions -> Builder -> RouterFunction<ServerResponse> build()_;1530877097;Builds the {@code RouterFunction}. All created routes are_{@linkplain RouterFunction#and(RouterFunction) composed} with one another, and filters_(if any) are applied to the result._@return the built router function;RouterFunction<ServerResponse> build()_;builds,the,code,router,function,all,created,routes,are,linkplain,router,function,and,router,function,composed,with,one,another,and,filters,if,any,are,applied,to,the,result,return,the,built,router,function;router,function,server,response,build
RouterFunctions -> Builder -> RouterFunction<ServerResponse> build()_;1530880709;Builds the {@code RouterFunction}. All created routes are_{@linkplain RouterFunction#and(RouterFunction) composed} with one another, and filters_(if any) are applied to the result._@return the built router function;RouterFunction<ServerResponse> build()_;builds,the,code,router,function,all,created,routes,are,linkplain,router,function,and,router,function,composed,with,one,another,and,filters,if,any,are,applied,to,the,result,return,the,built,router,function;router,function,server,response,build
RouterFunctions -> Builder -> RouterFunction<ServerResponse> build()_;1537188605;Builds the {@code RouterFunction}. All created routes are_{@linkplain RouterFunction#and(RouterFunction) composed} with one another, and filters_(if any) are applied to the result._@return the built router function;RouterFunction<ServerResponse> build()_;builds,the,code,router,function,all,created,routes,are,linkplain,router,function,and,router,function,composed,with,one,another,and,filters,if,any,are,applied,to,the,result,return,the,built,router,function;router,function,server,response,build
RouterFunctions -> Builder -> RouterFunction<ServerResponse> build()_;1538664611;Builds the {@code RouterFunction}. All created routes are_{@linkplain RouterFunction#and(RouterFunction) composed} with one another, and filters_(if any) are applied to the result._@return the built router function;RouterFunction<ServerResponse> build()_;builds,the,code,router,function,all,created,routes,are,linkplain,router,function,and,router,function,composed,with,one,another,and,filters,if,any,are,applied,to,the,result,return,the,built,router,function;router,function,server,response,build
RouterFunctions -> Builder -> RouterFunction<ServerResponse> build()_;1539866925;Builds the {@code RouterFunction}. All created routes are_{@linkplain RouterFunction#and(RouterFunction) composed} with one another, and filters_(if any) are applied to the result._@return the built router function;RouterFunction<ServerResponse> build()_;builds,the,code,router,function,all,created,routes,are,linkplain,router,function,and,router,function,composed,with,one,another,and,filters,if,any,are,applied,to,the,result,return,the,built,router,function;router,function,server,response,build
RouterFunctions -> Builder -> Builder POST(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530871268;Adds a route to the given handler function that handles all HTTP {@code POST} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code POST} requests that_match {@code pattern}_@return this builder;Builder POST(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,post,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,post,requests,that,match,code,pattern,return,this,builder;builder,post,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder POST(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530877097;Adds a route to the given handler function that handles all HTTP {@code POST} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code POST} requests that_match {@code pattern}_@return this builder;Builder POST(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,post,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,post,requests,that,match,code,pattern,return,this,builder;builder,post,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder POST(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530880709;Adds a route to the given handler function that handles all HTTP {@code POST} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code POST} requests that_match {@code pattern}_@return this builder;Builder POST(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,post,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,post,requests,that,match,code,pattern,return,this,builder;builder,post,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder POST(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1537188605;Adds a route to the given handler function that handles all HTTP {@code POST} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code POST} requests that_match {@code pattern}_@return this builder;Builder POST(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,post,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,post,requests,that,match,code,pattern,return,this,builder;builder,post,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder POST(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1538664611;Adds a route to the given handler function that handles all HTTP {@code POST} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code POST} requests that_match {@code pattern}_@return this builder;Builder POST(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,post,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,post,requests,that,match,code,pattern,return,this,builder;builder,post,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder POST(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1539866925;Adds a route to the given handler function that handles all HTTP {@code POST} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code POST} requests that_match {@code pattern}_@return this builder;Builder POST(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,post,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,post,requests,that,match,code,pattern,return,this,builder;builder,post,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder routePost(HandlerFunction<ServerResponse> handlerFunction)_;1530177818;Adds a route to the given handler function that handles all HTTP {@code POST} requests._@param handlerFunction the handler function to handle all {@code POST} requests_@return this builder;Builder routePost(HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,post,requests,param,handler,function,the,handler,function,to,handle,all,code,post,requests,return,this,builder;builder,route,post,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder routePost(HandlerFunction<ServerResponse> handlerFunction)_;1530187774;Adds a route to the given handler function that handles all HTTP {@code POST} requests._@param handlerFunction the handler function to handle all {@code POST} requests_@return this builder;Builder routePost(HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,post,requests,param,handler,function,the,handler,function,to,handle,all,code,post,requests,return,this,builder;builder,route,post,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder routePost(HandlerFunction<ServerResponse> handlerFunction)_;1530793633;Adds a route to the given handler function that handles all HTTP {@code POST} requests._@param handlerFunction the handler function to handle all {@code POST} requests_@return this builder;Builder routePost(HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,post,requests,param,handler,function,the,handler,function,to,handle,all,code,post,requests,return,this,builder;builder,route,post,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder routePatch(HandlerFunction<ServerResponse> handlerFunction)_;1530177818;Adds a route to the given handler function that handles all HTTP {@code PATCH} requests._@param handlerFunction the handler function to handle all {@code PATCH} requests_@return this builder;Builder routePatch(HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,patch,requests,param,handler,function,the,handler,function,to,handle,all,code,patch,requests,return,this,builder;builder,route,patch,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder routePatch(HandlerFunction<ServerResponse> handlerFunction)_;1530187774;Adds a route to the given handler function that handles all HTTP {@code PATCH} requests._@param handlerFunction the handler function to handle all {@code PATCH} requests_@return this builder;Builder routePatch(HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,patch,requests,param,handler,function,the,handler,function,to,handle,all,code,patch,requests,return,this,builder;builder,route,patch,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder routePatch(HandlerFunction<ServerResponse> handlerFunction)_;1530793633;Adds a route to the given handler function that handles all HTTP {@code PATCH} requests._@param handlerFunction the handler function to handle all {@code PATCH} requests_@return this builder;Builder routePatch(HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,patch,requests,param,handler,function,the,handler,function,to,handle,all,code,patch,requests,return,this,builder;builder,route,patch,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder DELETE(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1530871268;Adds a route to the given handler function that handles all HTTP {@code DELETE} requests_that match the given pattern and predicate._@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code DELETE} requests that_match {@code pattern}_@return this builder;Builder DELETE(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,delete,requests,that,match,the,given,pattern,and,predicate,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,delete,requests,that,match,code,pattern,return,this,builder;builder,delete,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder DELETE(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1530877097;Adds a route to the given handler function that handles all HTTP {@code DELETE} requests_that match the given pattern and predicate._@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code DELETE} requests that_match {@code pattern}_@return this builder;Builder DELETE(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,delete,requests,that,match,the,given,pattern,and,predicate,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,delete,requests,that,match,code,pattern,return,this,builder;builder,delete,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder DELETE(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1530880709;Adds a route to the given handler function that handles all HTTP {@code DELETE} requests_that match the given pattern and predicate._@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code DELETE} requests that_match {@code pattern}_@return this builder;Builder DELETE(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,delete,requests,that,match,the,given,pattern,and,predicate,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,delete,requests,that,match,code,pattern,return,this,builder;builder,delete,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder DELETE(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1537188605;Adds a route to the given handler function that handles all HTTP {@code DELETE} requests_that match the given pattern and predicate._@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code DELETE} requests that_match {@code pattern}_@return this builder;Builder DELETE(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,delete,requests,that,match,the,given,pattern,and,predicate,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,delete,requests,that,match,code,pattern,return,this,builder;builder,delete,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder DELETE(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1538664611;Adds a route to the given handler function that handles all HTTP {@code DELETE} requests_that match the given pattern and predicate._@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code DELETE} requests that_match {@code pattern}_@return this builder;Builder DELETE(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,delete,requests,that,match,the,given,pattern,and,predicate,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,delete,requests,that,match,code,pattern,return,this,builder;builder,delete,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder DELETE(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1539866925;Adds a route to the given handler function that handles all HTTP {@code DELETE} requests_that match the given pattern and predicate._@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code DELETE} requests that_match {@code pattern}_@return this builder;Builder DELETE(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,delete,requests,that,match,the,given,pattern,and,predicate,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,delete,requests,that,match,code,pattern,return,this,builder;builder,delete,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder PUT(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530871268;Adds a route to the given handler function that handles all HTTP {@code PUT} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code PUT} requests that_match {@code pattern}_@return this builder;Builder PUT(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,put,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,put,requests,that,match,code,pattern,return,this,builder;builder,put,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder PUT(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530877097;Adds a route to the given handler function that handles all HTTP {@code PUT} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code PUT} requests that_match {@code pattern}_@return this builder;Builder PUT(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,put,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,put,requests,that,match,code,pattern,return,this,builder;builder,put,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder PUT(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530880709;Adds a route to the given handler function that handles all HTTP {@code PUT} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code PUT} requests that_match {@code pattern}_@return this builder;Builder PUT(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,put,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,put,requests,that,match,code,pattern,return,this,builder;builder,put,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder PUT(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1537188605;Adds a route to the given handler function that handles all HTTP {@code PUT} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code PUT} requests that_match {@code pattern}_@return this builder;Builder PUT(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,put,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,put,requests,that,match,code,pattern,return,this,builder;builder,put,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder PUT(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1538664611;Adds a route to the given handler function that handles all HTTP {@code PUT} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code PUT} requests that_match {@code pattern}_@return this builder;Builder PUT(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,put,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,put,requests,that,match,code,pattern,return,this,builder;builder,put,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder PUT(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1539866925;Adds a route to the given handler function that handles all HTTP {@code PUT} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code PUT} requests that_match {@code pattern}_@return this builder;Builder PUT(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,put,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,put,requests,that,match,code,pattern,return,this,builder;builder,put,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder nest(RequestPredicate predicate, Supplier<RouterFunction<ServerResponse>> routerFunctionSupplier)_;1530177818;Route to the supplied router function if the given request predicate applies. This method_can be used to create <strong>nested routes</strong>, where a group of routes share a_common path (prefix), header, or other request predicate._<p>For instance, the following example creates a nested route with a "/user" path_predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.builder()_.nest(RequestPredicates.path("/user"), () ->_RouterFunctions.builder()_.routeGet(this::listUsers)_.routePost(this::createUser)__.build()___.build()__</pre>_@param predicate the predicate to test_@param routerFunctionSupplier supplier for the nested router function to delegate to if_the predicate applies_@return this builder_@see RequestPredicates;Builder nest(RequestPredicate predicate, Supplier<RouterFunction<ServerResponse>> routerFunctionSupplier)_;route,to,the,supplied,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,creates,a,nested,route,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,nested,route,router,functions,builder,nest,request,predicates,path,user,router,functions,builder,route,get,this,list,users,route,post,this,create,user,build,build,pre,param,predicate,the,predicate,to,test,param,router,function,supplier,supplier,for,the,nested,router,function,to,delegate,to,if,the,predicate,applies,return,this,builder,see,request,predicates;builder,nest,request,predicate,predicate,supplier,router,function,server,response,router,function,supplier
RouterFunctions -> Builder -> Builder nest(RequestPredicate predicate, Supplier<RouterFunction<ServerResponse>> routerFunctionSupplier)_;1530187774;Route to the supplied router function if the given request predicate applies. This method_can be used to create <strong>nested routes</strong>, where a group of routes share a_common path (prefix), header, or other request predicate._<p>For instance, the following example creates a nested route with a "/user" path_predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.builder()_.nest(RequestPredicates.path("/user"), () ->_RouterFunctions.builder()_.routeGet(this::listUsers)_.routePost(this::createUser)__.build()___.build()__</pre>_@param predicate the predicate to test_@param routerFunctionSupplier supplier for the nested router function to delegate to if_the predicate applies_@return this builder_@see RequestPredicates;Builder nest(RequestPredicate predicate, Supplier<RouterFunction<ServerResponse>> routerFunctionSupplier)_;route,to,the,supplied,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,creates,a,nested,route,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,nested,route,router,functions,builder,nest,request,predicates,path,user,router,functions,builder,route,get,this,list,users,route,post,this,create,user,build,build,pre,param,predicate,the,predicate,to,test,param,router,function,supplier,supplier,for,the,nested,router,function,to,delegate,to,if,the,predicate,applies,return,this,builder,see,request,predicates;builder,nest,request,predicate,predicate,supplier,router,function,server,response,router,function,supplier
RouterFunctions -> Builder -> Builder nest(RequestPredicate predicate, Supplier<RouterFunction<ServerResponse>> routerFunctionSupplier)_;1530793633;Route to the supplied router function if the given request predicate applies. This method_can be used to create <strong>nested routes</strong>, where a group of routes share a_common path (prefix), header, or other request predicate._<p>For instance, the following example creates a nested route with a "/user" path_predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.builder()_.nest(RequestPredicates.path("/user"), () ->_RouterFunctions.builder()_.routeGet(this::listUsers)_.routePost(this::createUser)__.build()___.build()__</pre>_@param predicate the predicate to test_@param routerFunctionSupplier supplier for the nested router function to delegate to if_the predicate applies_@return this builder_@see RequestPredicates;Builder nest(RequestPredicate predicate, Supplier<RouterFunction<ServerResponse>> routerFunctionSupplier)_;route,to,the,supplied,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,creates,a,nested,route,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,nested,route,router,functions,builder,nest,request,predicates,path,user,router,functions,builder,route,get,this,list,users,route,post,this,create,user,build,build,pre,param,predicate,the,predicate,to,test,param,router,function,supplier,supplier,for,the,nested,router,function,to,delegate,to,if,the,predicate,applies,return,this,builder,see,request,predicates;builder,nest,request,predicate,predicate,supplier,router,function,server,response,router,function,supplier
RouterFunctions -> Builder -> Builder nest(RequestPredicate predicate, Supplier<RouterFunction<ServerResponse>> routerFunctionSupplier)_;1530871268;Route to the supplied router function if the given request predicate applies. This method_can be used to create <strong>nested routes</strong>, where a group of routes share a_common path (prefix), header, or other request predicate._<p>For instance, the following example creates a nested route with a "/user" path_predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.route()_.nest(RequestPredicates.path("/user"), () ->_RouterFunctions.route()_.GET(this::listUsers)_.POST(this::createUser)__.build()___.build()__</pre>_@param predicate the predicate to test_@param routerFunctionSupplier supplier for the nested router function to delegate to if_the predicate applies_@return this builder_@see RequestPredicates;Builder nest(RequestPredicate predicate, Supplier<RouterFunction<ServerResponse>> routerFunctionSupplier)_;route,to,the,supplied,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,creates,a,nested,route,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,nested,route,router,functions,route,nest,request,predicates,path,user,router,functions,route,get,this,list,users,post,this,create,user,build,build,pre,param,predicate,the,predicate,to,test,param,router,function,supplier,supplier,for,the,nested,router,function,to,delegate,to,if,the,predicate,applies,return,this,builder,see,request,predicates;builder,nest,request,predicate,predicate,supplier,router,function,server,response,router,function,supplier
RouterFunctions -> Builder -> Builder nest(RequestPredicate predicate, Supplier<RouterFunction<ServerResponse>> routerFunctionSupplier)_;1530877097;Route to the supplied router function if the given request predicate applies. This method_can be used to create <strong>nested routes</strong>, where a group of routes share a_common path (prefix), header, or other request predicate._<p>For instance, the following example creates a nested route with a "/user" path_predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.route()_.nest(RequestPredicates.path("/user"), () ->_RouterFunctions.route()_.GET(this::listUsers)_.POST(this::createUser)__.build()___.build()__</pre>_@param predicate the predicate to test_@param routerFunctionSupplier supplier for the nested router function to delegate to if_the predicate applies_@return this builder_@see RequestPredicates;Builder nest(RequestPredicate predicate, Supplier<RouterFunction<ServerResponse>> routerFunctionSupplier)_;route,to,the,supplied,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,creates,a,nested,route,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,nested,route,router,functions,route,nest,request,predicates,path,user,router,functions,route,get,this,list,users,post,this,create,user,build,build,pre,param,predicate,the,predicate,to,test,param,router,function,supplier,supplier,for,the,nested,router,function,to,delegate,to,if,the,predicate,applies,return,this,builder,see,request,predicates;builder,nest,request,predicate,predicate,supplier,router,function,server,response,router,function,supplier
RouterFunctions -> Builder -> Builder nest(RequestPredicate predicate, Supplier<RouterFunction<ServerResponse>> routerFunctionSupplier)_;1530880709;Route to the supplied router function if the given request predicate applies. This method_can be used to create <strong>nested routes</strong>, where a group of routes share a_common path (prefix), header, or other request predicate._<p>For instance, the following example creates a nested route with a "/user" path_predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.route()_.nest(RequestPredicates.path("/user"), () ->_RouterFunctions.route()_.GET(this::listUsers)_.POST(this::createUser)_.build())_.build()__</pre>_@param predicate the predicate to test_@param routerFunctionSupplier supplier for the nested router function to delegate to if_the predicate applies_@return this builder_@see RequestPredicates;Builder nest(RequestPredicate predicate, Supplier<RouterFunction<ServerResponse>> routerFunctionSupplier)_;route,to,the,supplied,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,creates,a,nested,route,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,nested,route,router,functions,route,nest,request,predicates,path,user,router,functions,route,get,this,list,users,post,this,create,user,build,build,pre,param,predicate,the,predicate,to,test,param,router,function,supplier,supplier,for,the,nested,router,function,to,delegate,to,if,the,predicate,applies,return,this,builder,see,request,predicates;builder,nest,request,predicate,predicate,supplier,router,function,server,response,router,function,supplier
RouterFunctions -> Builder -> Builder nest(RequestPredicate predicate, Supplier<RouterFunction<ServerResponse>> routerFunctionSupplier)_;1537188605;Route to the supplied router function if the given request predicate applies. This method_can be used to create <strong>nested routes</strong>, where a group of routes share a_common path (prefix), header, or other request predicate._<p>For instance, the following example creates a nested route with a "/user" path_predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.route()_.nest(RequestPredicates.path("/user"), () ->_RouterFunctions.route()_.GET(this::listUsers)_.POST(this::createUser)_.build())_.build()__</pre>_@param predicate the predicate to test_@param routerFunctionSupplier supplier for the nested router function to delegate to if_the predicate applies_@return this builder_@see RequestPredicates;Builder nest(RequestPredicate predicate, Supplier<RouterFunction<ServerResponse>> routerFunctionSupplier)_;route,to,the,supplied,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,creates,a,nested,route,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,nested,route,router,functions,route,nest,request,predicates,path,user,router,functions,route,get,this,list,users,post,this,create,user,build,build,pre,param,predicate,the,predicate,to,test,param,router,function,supplier,supplier,for,the,nested,router,function,to,delegate,to,if,the,predicate,applies,return,this,builder,see,request,predicates;builder,nest,request,predicate,predicate,supplier,router,function,server,response,router,function,supplier
RouterFunctions -> Builder -> Builder nest(RequestPredicate predicate, Supplier<RouterFunction<ServerResponse>> routerFunctionSupplier)_;1538664611;Route to the supplied router function if the given request predicate applies. This method_can be used to create <strong>nested routes</strong>, where a group of routes share a_common path (prefix), header, or other request predicate._<p>For instance, the following example creates a nested route with a "/user" path_predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.route()_.nest(RequestPredicates.path("/user"), () ->_RouterFunctions.route()_.GET(this::listUsers)_.POST(this::createUser)_.build())_.build()__</pre>_@param predicate the predicate to test_@param routerFunctionSupplier supplier for the nested router function to delegate to if_the predicate applies_@return this builder_@see RequestPredicates;Builder nest(RequestPredicate predicate, Supplier<RouterFunction<ServerResponse>> routerFunctionSupplier)_;route,to,the,supplied,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,creates,a,nested,route,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,nested,route,router,functions,route,nest,request,predicates,path,user,router,functions,route,get,this,list,users,post,this,create,user,build,build,pre,param,predicate,the,predicate,to,test,param,router,function,supplier,supplier,for,the,nested,router,function,to,delegate,to,if,the,predicate,applies,return,this,builder,see,request,predicates;builder,nest,request,predicate,predicate,supplier,router,function,server,response,router,function,supplier
RouterFunctions -> Builder -> Builder nest(RequestPredicate predicate, Supplier<RouterFunction<ServerResponse>> routerFunctionSupplier)_;1539866925;Route to the supplied router function if the given request predicate applies. This method_can be used to create <strong>nested routes</strong>, where a group of routes share a_common path (prefix), header, or other request predicate._<p>For instance, the following example creates a nested route with a "/user" path_predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.route()_.nest(RequestPredicates.path("/user"), () ->_RouterFunctions.route()_.GET(this::listUsers)_.POST(this::createUser)_.build())_.build()__</pre>_@param predicate the predicate to test_@param routerFunctionSupplier supplier for the nested router function to delegate to if_the predicate applies_@return this builder_@see RequestPredicates;Builder nest(RequestPredicate predicate, Supplier<RouterFunction<ServerResponse>> routerFunctionSupplier)_;route,to,the,supplied,router,function,if,the,given,request,predicate,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,creates,a,nested,route,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,nested,route,router,functions,route,nest,request,predicates,path,user,router,functions,route,get,this,list,users,post,this,create,user,build,build,pre,param,predicate,the,predicate,to,test,param,router,function,supplier,supplier,for,the,nested,router,function,to,delegate,to,if,the,predicate,applies,return,this,builder,see,request,predicates;builder,nest,request,predicate,predicate,supplier,router,function,server,response,router,function,supplier
RouterFunctions -> Builder -> Builder routeOptions(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530177818;Adds a route to the given handler function that handles all HTTP {@code OPTIONS} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code OPTIONS} requests that_match {@code pattern}_@return this builder;Builder routeOptions(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,options,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,options,requests,that,match,code,pattern,return,this,builder;builder,route,options,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder routeOptions(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530187774;Adds a route to the given handler function that handles all HTTP {@code OPTIONS} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code OPTIONS} requests that_match {@code pattern}_@return this builder;Builder routeOptions(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,options,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,options,requests,that,match,code,pattern,return,this,builder;builder,route,options,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder routeOptions(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530793633;Adds a route to the given handler function that handles all HTTP {@code OPTIONS} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code OPTIONS} requests that_match {@code pattern}_@return this builder;Builder routeOptions(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,options,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,options,requests,that,match,code,pattern,return,this,builder;builder,route,options,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction, HandlerStrategies strategies);1485986572;Convert the given {@linkplain RouterFunction router function} into a {@link HandlerMapping},_using the given strategies._<p>The returned {@code HandlerMapping} can be run in a_{@link org.springframework.web.reactive.DispatcherHandler}._@param routerFunction the router function to convert_@param strategies the strategies to use_@return an handler mapping that maps HTTP request to a handler using the given router function_@see HandlerFunctionAdapter_@see ServerResponseResultHandler;public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return new HandlerMapping() {_			@Override_			public Mono<Object> getHandler(ServerWebExchange exchange) {_				ServerRequest request = new DefaultServerRequest(exchange, strategies)__				addAttributes(exchange, request)__				return routerFunction.route(request).map(handlerFunction -> (Object)handlerFunction)__			}_		}__	};convert,the,given,linkplain,router,function,router,function,into,a,link,handler,mapping,using,the,given,strategies,p,the,returned,code,handler,mapping,can,be,run,in,a,link,org,springframework,web,reactive,dispatcher,handler,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,handler,mapping,that,maps,http,request,to,a,handler,using,the,given,router,function,see,handler,function,adapter,see,server,response,result,handler;public,static,handler,mapping,to,handler,mapping,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,new,handler,mapping,override,public,mono,object,get,handler,server,web,exchange,exchange,server,request,request,new,default,server,request,exchange,strategies,add,attributes,exchange,request,return,router,function,route,request,map,handler,function,object,handler,function
RouterFunctions -> public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction, HandlerStrategies strategies);1487250745;Convert the given {@linkplain RouterFunction router function} into a {@link HandlerMapping},_using the given strategies._<p>The returned {@code HandlerMapping} can be run in a_{@link org.springframework.web.reactive.DispatcherHandler}._@param routerFunction the router function to convert_@param strategies the strategies to use_@return an handler mapping that maps HTTP request to a handler using the given router function_@see HandlerFunctionAdapter_@see ServerResponseResultHandler;public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return new HandlerMapping() {_			@Override_			public Mono<Object> getHandler(ServerWebExchange exchange) {_				ServerRequest request = new DefaultServerRequest(exchange, strategies)__				addAttributes(exchange, request)__				return routerFunction.route(request).map(handlerFunction -> (Object)handlerFunction)__			}_		}__	};convert,the,given,linkplain,router,function,router,function,into,a,link,handler,mapping,using,the,given,strategies,p,the,returned,code,handler,mapping,can,be,run,in,a,link,org,springframework,web,reactive,dispatcher,handler,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,handler,mapping,that,maps,http,request,to,a,handler,using,the,given,router,function,see,handler,function,adapter,see,server,response,result,handler;public,static,handler,mapping,to,handler,mapping,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,new,handler,mapping,override,public,mono,object,get,handler,server,web,exchange,exchange,server,request,request,new,default,server,request,exchange,strategies,add,attributes,exchange,request,return,router,function,route,request,map,handler,function,object,handler,function
RouterFunctions -> public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction, HandlerStrategies strategies);1487584763;Convert the given {@linkplain RouterFunction router function} into a {@link HandlerMapping},_using the given strategies._<p>The returned {@code HandlerMapping} can be run in a_{@link org.springframework.web.reactive.DispatcherHandler}._@param routerFunction the router function to convert_@param strategies the strategies to use_@return an handler mapping that maps HTTP request to a handler using the given router function_@see HandlerFunctionAdapter_@see ServerResponseResultHandler;public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return new HandlerMapping() {_			@Override_			public Mono<Object> getHandler(ServerWebExchange exchange) {_				ServerRequest request = new DefaultServerRequest(exchange, strategies)__				addAttributes(exchange, request)__				return routerFunction.route(request).map(handlerFunction -> (Object)handlerFunction)__			}_		}__	};convert,the,given,linkplain,router,function,router,function,into,a,link,handler,mapping,using,the,given,strategies,p,the,returned,code,handler,mapping,can,be,run,in,a,link,org,springframework,web,reactive,dispatcher,handler,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,handler,mapping,that,maps,http,request,to,a,handler,using,the,given,router,function,see,handler,function,adapter,see,server,response,result,handler;public,static,handler,mapping,to,handler,mapping,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,new,handler,mapping,override,public,mono,object,get,handler,server,web,exchange,exchange,server,request,request,new,default,server,request,exchange,strategies,add,attributes,exchange,request,return,router,function,route,request,map,handler,function,object,handler,function
RouterFunctions -> public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction, HandlerStrategies strategies);1487687241;Convert the given {@linkplain RouterFunction router function} into a {@link HandlerMapping},_using the given strategies._<p>The returned {@code HandlerMapping} can be run in a_{@link org.springframework.web.reactive.DispatcherHandler}._@param routerFunction the router function to convert_@param strategies the strategies to use_@return an handler mapping that maps HTTP request to a handler using the given router function_@see HandlerFunctionAdapter_@see ServerResponseResultHandler;public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies)__			addAttributes(exchange, request)__			return routerFunction.route(request).map(handlerFunction -> (Object)handlerFunction)__		}__	};convert,the,given,linkplain,router,function,router,function,into,a,link,handler,mapping,using,the,given,strategies,p,the,returned,code,handler,mapping,can,be,run,in,a,link,org,springframework,web,reactive,dispatcher,handler,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,handler,mapping,that,maps,http,request,to,a,handler,using,the,given,router,function,see,handler,function,adapter,see,server,response,result,handler;public,static,handler,mapping,to,handler,mapping,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,exchange,server,request,request,new,default,server,request,exchange,strategies,add,attributes,exchange,request,return,router,function,route,request,map,handler,function,object,handler,function
RouterFunctions -> public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction, HandlerStrategies strategies);1489653648;Convert the given {@linkplain RouterFunction router function} into a {@link HandlerMapping},_using the given strategies._<p>The returned {@code HandlerMapping} can be run in a_{@link org.springframework.web.reactive.DispatcherHandler}._@param routerFunction the router function to convert_@param strategies the strategies to use_@return an handler mapping that maps HTTP request to a handler using the given router function_@see HandlerFunctionAdapter_@see ServerResponseResultHandler;public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies)__			addAttributes(exchange, request)__			return routerFunction.route(request).map(handlerFunction -> (Object)handlerFunction)__		}__	};convert,the,given,linkplain,router,function,router,function,into,a,link,handler,mapping,using,the,given,strategies,p,the,returned,code,handler,mapping,can,be,run,in,a,link,org,springframework,web,reactive,dispatcher,handler,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,handler,mapping,that,maps,http,request,to,a,handler,using,the,given,router,function,see,handler,function,adapter,see,server,response,result,handler;public,static,handler,mapping,to,handler,mapping,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,exchange,server,request,request,new,default,server,request,exchange,strategies,add,attributes,exchange,request,return,router,function,route,request,map,handler,function,object,handler,function
RouterFunctions -> public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction, HandlerStrategies strategies);1489751412;Convert the given {@linkplain RouterFunction router function} into a {@link HandlerMapping},_using the given strategies._<p>The returned {@code HandlerMapping} can be run in a_{@link org.springframework.web.reactive.DispatcherHandler}._@param routerFunction the router function to convert_@param strategies the strategies to use_@return an handler mapping that maps HTTP request to a handler using the given router function_@see HandlerFunctionAdapter_@see ServerResponseResultHandler;public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies)__			addAttributes(exchange, request)__			return routerFunction.route(request).map(handlerFunction -> (Object)handlerFunction)__		}__	};convert,the,given,linkplain,router,function,router,function,into,a,link,handler,mapping,using,the,given,strategies,p,the,returned,code,handler,mapping,can,be,run,in,a,link,org,springframework,web,reactive,dispatcher,handler,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,handler,mapping,that,maps,http,request,to,a,handler,using,the,given,router,function,see,handler,function,adapter,see,server,response,result,handler;public,static,handler,mapping,to,handler,mapping,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,exchange,server,request,request,new,default,server,request,exchange,strategies,add,attributes,exchange,request,return,router,function,route,request,map,handler,function,object,handler,function
RouterFunctions -> public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction, HandlerStrategies strategies);1491557115;Convert the given {@linkplain RouterFunction router function} into a {@link HandlerMapping},_using the given strategies._<p>The returned {@code HandlerMapping} can be run in a_{@link org.springframework.web.reactive.DispatcherHandler}._@param routerFunction the router function to convert_@param strategies the strategies to use_@return an handler mapping that maps HTTP request to a handler using the given router function_@see HandlerFunctionAdapter_@see ServerResponseResultHandler;public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies)__			addAttributes(exchange, request)__			return routerFunction.route(request).map(handlerFunction -> (Object)handlerFunction)__		}__	};convert,the,given,linkplain,router,function,router,function,into,a,link,handler,mapping,using,the,given,strategies,p,the,returned,code,handler,mapping,can,be,run,in,a,link,org,springframework,web,reactive,dispatcher,handler,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,handler,mapping,that,maps,http,request,to,a,handler,using,the,given,router,function,see,handler,function,adapter,see,server,response,result,handler;public,static,handler,mapping,to,handler,mapping,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,exchange,server,request,request,new,default,server,request,exchange,strategies,add,attributes,exchange,request,return,router,function,route,request,map,handler,function,object,handler,function
RouterFunctions -> public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction, HandlerStrategies strategies);1491833276;Convert the given {@linkplain RouterFunction router function} into a {@link HandlerMapping},_using the given strategies._<p>The returned {@code HandlerMapping} can be run in a_{@link org.springframework.web.reactive.DispatcherHandler}._@param routerFunction the router function to convert_@param strategies the strategies to use_@return an handler mapping that maps HTTP request to a handler using the given router function_@see HandlerFunctionAdapter_@see ServerResponseResultHandler;public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies)__			addAttributes(exchange, request)__			return routerFunction.route(request).map(handlerFunction -> (Object)handlerFunction)__		}__	};convert,the,given,linkplain,router,function,router,function,into,a,link,handler,mapping,using,the,given,strategies,p,the,returned,code,handler,mapping,can,be,run,in,a,link,org,springframework,web,reactive,dispatcher,handler,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,handler,mapping,that,maps,http,request,to,a,handler,using,the,given,router,function,see,handler,function,adapter,see,server,response,result,handler;public,static,handler,mapping,to,handler,mapping,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,exchange,server,request,request,new,default,server,request,exchange,strategies,add,attributes,exchange,request,return,router,function,route,request,map,handler,function,object,handler,function
RouterFunctions -> public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction, HandlerStrategies strategies);1491927184;Convert the given {@linkplain RouterFunction router function} into a {@link HandlerMapping},_using the given strategies._<p>The returned {@code HandlerMapping} can be run in a_{@link org.springframework.web.reactive.DispatcherHandler}._@param routerFunction the router function to convert_@param strategies the strategies to use_@return an handler mapping that maps HTTP request to a handler using the given router function_@see HandlerFunctionAdapter_@see ServerResponseResultHandler;public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies)__			addAttributes(exchange, request)__			return routerFunction.route(request).map(handlerFunction -> (Object)handlerFunction)__		}__	};convert,the,given,linkplain,router,function,router,function,into,a,link,handler,mapping,using,the,given,strategies,p,the,returned,code,handler,mapping,can,be,run,in,a,link,org,springframework,web,reactive,dispatcher,handler,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,handler,mapping,that,maps,http,request,to,a,handler,using,the,given,router,function,see,handler,function,adapter,see,server,response,result,handler;public,static,handler,mapping,to,handler,mapping,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,exchange,server,request,request,new,default,server,request,exchange,strategies,add,attributes,exchange,request,return,router,function,route,request,map,handler,function,object,handler,function
RouterFunctions -> public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction, HandlerStrategies strategies);1492090594;Convert the given {@linkplain RouterFunction router function} into a {@link HandlerMapping},_using the given strategies._<p>The returned {@code HandlerMapping} can be run in a_{@link org.springframework.web.reactive.DispatcherHandler}._@param routerFunction the router function to convert_@param strategies the strategies to use_@return an handler mapping that maps HTTP request to a handler using the given router function_@see HandlerFunctionAdapter_@see ServerResponseResultHandler;public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies)__			addAttributes(exchange, request)__			return routerFunction.route(request).map(handlerFunction -> (Object)handlerFunction)__		}__	};convert,the,given,linkplain,router,function,router,function,into,a,link,handler,mapping,using,the,given,strategies,p,the,returned,code,handler,mapping,can,be,run,in,a,link,org,springframework,web,reactive,dispatcher,handler,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,handler,mapping,that,maps,http,request,to,a,handler,using,the,given,router,function,see,handler,function,adapter,see,server,response,result,handler;public,static,handler,mapping,to,handler,mapping,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,exchange,server,request,request,new,default,server,request,exchange,strategies,add,attributes,exchange,request,return,router,function,route,request,map,handler,function,object,handler,function
RouterFunctions -> public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction, HandlerStrategies strategies);1492168700;Convert the given {@linkplain RouterFunction router function} into a {@link HandlerMapping},_using the given strategies._<p>The returned {@code HandlerMapping} can be run in a_{@link org.springframework.web.reactive.DispatcherHandler}._@param routerFunction the router function to convert_@param strategies the strategies to use_@return an handler mapping that maps HTTP request to a handler using the given router function_@see HandlerFunctionAdapter_@see ServerResponseResultHandler;public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies)__			addAttributes(exchange, request)__			return routerFunction.route(request).map(handlerFunction -> (Object)handlerFunction)__		}__	};convert,the,given,linkplain,router,function,router,function,into,a,link,handler,mapping,using,the,given,strategies,p,the,returned,code,handler,mapping,can,be,run,in,a,link,org,springframework,web,reactive,dispatcher,handler,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,handler,mapping,that,maps,http,request,to,a,handler,using,the,given,router,function,see,handler,function,adapter,see,server,response,result,handler;public,static,handler,mapping,to,handler,mapping,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,exchange,server,request,request,new,default,server,request,exchange,strategies,add,attributes,exchange,request,return,router,function,route,request,map,handler,function,object,handler,function
RouterFunctions -> public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction, HandlerStrategies strategies);1492190322;Convert the given {@linkplain RouterFunction router function} into a {@link HandlerMapping},_using the given strategies._<p>The returned {@code HandlerMapping} can be run in a_{@link org.springframework.web.reactive.DispatcherHandler}._@param routerFunction the router function to convert_@param strategies the strategies to use_@return an handler mapping that maps HTTP request to a handler using the given router function_@see HandlerFunctionAdapter_@see ServerResponseResultHandler;public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies)__			addAttributes(exchange, request)__			return routerFunction.route(request).map(handlerFunction -> (Object)handlerFunction)__		}__	};convert,the,given,linkplain,router,function,router,function,into,a,link,handler,mapping,using,the,given,strategies,p,the,returned,code,handler,mapping,can,be,run,in,a,link,org,springframework,web,reactive,dispatcher,handler,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,handler,mapping,that,maps,http,request,to,a,handler,using,the,given,router,function,see,handler,function,adapter,see,server,response,result,handler;public,static,handler,mapping,to,handler,mapping,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,exchange,server,request,request,new,default,server,request,exchange,strategies,add,attributes,exchange,request,return,router,function,route,request,map,handler,function,object,handler,function
RouterFunctions -> public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction, HandlerStrategies strategies);1494495900;Convert the given {@linkplain RouterFunction router function} into a {@link HandlerMapping},_using the given strategies._<p>The returned {@code HandlerMapping} can be run in a_{@link org.springframework.web.reactive.DispatcherHandler}._@param routerFunction the router function to convert_@param strategies the strategies to use_@return an handler mapping that maps HTTP request to a handler using the given router function_@see HandlerFunctionAdapter_@see ServerResponseResultHandler;public static HandlerMapping toHandlerMapping(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies.messageReaders())__			addAttributes(exchange, request)__			return routerFunction.route(request).map(handlerFunction -> (Object)handlerFunction)__		}__	};convert,the,given,linkplain,router,function,router,function,into,a,link,handler,mapping,using,the,given,strategies,p,the,returned,code,handler,mapping,can,be,run,in,a,link,org,springframework,web,reactive,dispatcher,handler,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,handler,mapping,that,maps,http,request,to,a,handler,using,the,given,router,function,see,handler,function,adapter,see,server,response,result,handler;public,static,handler,mapping,to,handler,mapping,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,exchange,server,request,request,new,default,server,request,exchange,strategies,message,readers,add,attributes,exchange,request,return,router,function,route,request,map,handler,function,object,handler,function
RouterFunctions -> Builder -> Builder GET(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1530871268;Adds a route to the given handler function that handles all HTTP {@code GET} requests_that match the given pattern and predicate._<p>For instance, the following example routes GET requests for "/user" that accept JSON_to the {@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route()_.GET("/user", RequestPredicates.accept(MediaType.APPLICATION_JSON),_userController::listUsers)_.build()__</pre>_@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code GET} requests that_match {@code pattern}_@return this builder_@see RequestPredicates;Builder GET(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,get,requests,that,match,the,given,pattern,and,predicate,p,for,instance,the,following,example,routes,get,requests,for,user,that,accept,json,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,get,user,request,predicates,accept,media,type,user,controller,list,users,build,pre,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,get,requests,that,match,code,pattern,return,this,builder,see,request,predicates;builder,get,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder GET(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1530877097;Adds a route to the given handler function that handles all HTTP {@code GET} requests_that match the given pattern and predicate._<p>For instance, the following example routes GET requests for "/user" that accept JSON_to the {@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route()_.GET("/user", RequestPredicates.accept(MediaType.APPLICATION_JSON),_userController::listUsers)_.build()__</pre>_@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code GET} requests that_match {@code pattern}_@return this builder_@see RequestPredicates;Builder GET(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,get,requests,that,match,the,given,pattern,and,predicate,p,for,instance,the,following,example,routes,get,requests,for,user,that,accept,json,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,get,user,request,predicates,accept,media,type,user,controller,list,users,build,pre,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,get,requests,that,match,code,pattern,return,this,builder,see,request,predicates;builder,get,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder GET(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1530880709;Adds a route to the given handler function that handles all HTTP {@code GET} requests_that match the given pattern and predicate._<p>For instance, the following example routes GET requests for "/user" that accept JSON_to the {@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route()_.GET("/user", RequestPredicates.accept(MediaType.APPLICATION_JSON), userController::listUsers)_.build()__</pre>_@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code GET} requests that_match {@code pattern}_@return this builder_@see RequestPredicates;Builder GET(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,get,requests,that,match,the,given,pattern,and,predicate,p,for,instance,the,following,example,routes,get,requests,for,user,that,accept,json,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,get,user,request,predicates,accept,media,type,user,controller,list,users,build,pre,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,get,requests,that,match,code,pattern,return,this,builder,see,request,predicates;builder,get,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder GET(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1537188605;Adds a route to the given handler function that handles all HTTP {@code GET} requests_that match the given pattern and predicate._<p>For instance, the following example routes GET requests for "/user" that accept JSON_to the {@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route()_.GET("/user", RequestPredicates.accept(MediaType.APPLICATION_JSON), userController::listUsers)_.build()__</pre>_@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code GET} requests that_match {@code pattern}_@return this builder_@see RequestPredicates;Builder GET(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,get,requests,that,match,the,given,pattern,and,predicate,p,for,instance,the,following,example,routes,get,requests,for,user,that,accept,json,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,get,user,request,predicates,accept,media,type,user,controller,list,users,build,pre,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,get,requests,that,match,code,pattern,return,this,builder,see,request,predicates;builder,get,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder GET(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1538664611;Adds a route to the given handler function that handles all HTTP {@code GET} requests_that match the given pattern and predicate._<p>For instance, the following example routes GET requests for "/user" that accept JSON_to the {@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route()_.GET("/user", RequestPredicates.accept(MediaType.APPLICATION_JSON), userController::listUsers)_.build()__</pre>_@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code GET} requests that_match {@code pattern}_@return this builder_@see RequestPredicates;Builder GET(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,get,requests,that,match,the,given,pattern,and,predicate,p,for,instance,the,following,example,routes,get,requests,for,user,that,accept,json,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,get,user,request,predicates,accept,media,type,user,controller,list,users,build,pre,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,get,requests,that,match,code,pattern,return,this,builder,see,request,predicates;builder,get,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder GET(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1539866925;Adds a route to the given handler function that handles all HTTP {@code GET} requests_that match the given pattern and predicate._<p>For instance, the following example routes GET requests for "/user" that accept JSON_to the {@code listUsers} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route()_.GET("/user", RequestPredicates.accept(MediaType.APPLICATION_JSON), userController::listUsers)_.build()__</pre>_@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code GET} requests that_match {@code pattern}_@return this builder_@see RequestPredicates;Builder GET(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,get,requests,that,match,the,given,pattern,and,predicate,p,for,instance,the,following,example,routes,get,requests,for,user,that,accept,json,to,the,code,list,users,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,get,user,request,predicates,accept,media,type,user,controller,list,users,build,pre,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,get,requests,that,match,code,pattern,return,this,builder,see,request,predicates;builder,get,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction);1485986572;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned handler can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>RxNetty using the_{@link org.springframework.http.server.reactive.RxNettyHttpHandlerAdapter}, or </li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_{@link WebHttpHandlerBuilder}._@param routerFunction the router function to convert_@return an http handler that handles HTTP request using the given router function;public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction) {_		return toHttpHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,rx,netty,using,the,link,org,springframework,http,server,reactive,rx,netty,http,handler,adapter,or,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,link,web,http,handler,builder,param,router,function,the,router,function,to,convert,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,web,handler,adapter,to,http,handler,router,function,router,function,return,to,http,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction);1487250745;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned handler can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>RxNetty using the_{@link org.springframework.http.server.reactive.RxNettyHttpHandlerAdapter}, or </li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_{@link WebHttpHandlerBuilder}._@param routerFunction the router function to convert_@return an http handler that handles HTTP request using the given router function;public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction) {_		return toHttpHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,rx,netty,using,the,link,org,springframework,http,server,reactive,rx,netty,http,handler,adapter,or,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,link,web,http,handler,builder,param,router,function,the,router,function,to,convert,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,web,handler,adapter,to,http,handler,router,function,router,function,return,to,http,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction);1487584763;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned handler can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>RxNetty using the_{@link org.springframework.http.server.reactive.RxNettyHttpHandlerAdapter}, or </li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_{@link WebHttpHandlerBuilder}._@param routerFunction the router function to convert_@return an http handler that handles HTTP request using the given router function;public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction) {_		return toHttpHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,rx,netty,using,the,link,org,springframework,http,server,reactive,rx,netty,http,handler,adapter,or,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,link,web,http,handler,builder,param,router,function,the,router,function,to,convert,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,web,handler,adapter,to,http,handler,router,function,router,function,return,to,http,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction);1487687241;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned handler can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>RxNetty using the_{@link org.springframework.http.server.reactive.RxNettyHttpHandlerAdapter}, or </li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_{@link WebHttpHandlerBuilder}._@param routerFunction the router function to convert_@return an http handler that handles HTTP request using the given router function;public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction) {_		return toHttpHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,rx,netty,using,the,link,org,springframework,http,server,reactive,rx,netty,http,handler,adapter,or,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,link,web,http,handler,builder,param,router,function,the,router,function,to,convert,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,web,handler,adapter,to,http,handler,router,function,router,function,return,to,http,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction);1489653648;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned handler can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>RxNetty using the_{@link org.springframework.http.server.reactive.RxNettyHttpHandlerAdapter}, or </li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_{@link WebHttpHandlerBuilder}._@param routerFunction the router function to convert_@return an http handler that handles HTTP request using the given router function;public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction) {_		return toHttpHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,rx,netty,using,the,link,org,springframework,http,server,reactive,rx,netty,http,handler,adapter,or,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,link,web,http,handler,builder,param,router,function,the,router,function,to,convert,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,web,handler,adapter,to,http,handler,router,function,router,function,return,to,http,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction);1489751412;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned handler can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>RxNetty using the_{@link org.springframework.http.server.reactive.RxNettyHttpHandlerAdapter}, or </li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_{@link WebHttpHandlerBuilder}._@param routerFunction the router function to convert_@return an http handler that handles HTTP request using the given router function;public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction) {_		return toHttpHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,rx,netty,using,the,link,org,springframework,http,server,reactive,rx,netty,http,handler,adapter,or,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,link,web,http,handler,builder,param,router,function,the,router,function,to,convert,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,web,handler,adapter,to,http,handler,router,function,router,function,return,to,http,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction);1491557115;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned handler can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>RxNetty using the_{@link org.springframework.http.server.reactive.RxNettyHttpHandlerAdapter}, or </li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_{@link WebHttpHandlerBuilder}._@param routerFunction the router function to convert_@return an http handler that handles HTTP request using the given router function;public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction) {_		return toHttpHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,rx,netty,using,the,link,org,springframework,http,server,reactive,rx,netty,http,handler,adapter,or,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,link,web,http,handler,builder,param,router,function,the,router,function,to,convert,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,web,handler,adapter,to,http,handler,router,function,router,function,return,to,http,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction);1491833276;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned handler can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>RxNetty using the_{@link org.springframework.http.server.reactive.RxNettyHttpHandlerAdapter}, or </li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_{@link WebHttpHandlerBuilder}._@param routerFunction the router function to convert_@return an http handler that handles HTTP request using the given router function;public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction) {_		return toHttpHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,rx,netty,using,the,link,org,springframework,http,server,reactive,rx,netty,http,handler,adapter,or,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,link,web,http,handler,builder,param,router,function,the,router,function,to,convert,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,web,handler,adapter,to,http,handler,router,function,router,function,return,to,http,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction);1491927184;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned handler can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>RxNetty using the_{@link org.springframework.http.server.reactive.RxNettyHttpHandlerAdapter}, or </li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_{@link WebHttpHandlerBuilder}._@param routerFunction the router function to convert_@return an http handler that handles HTTP request using the given router function;public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction) {_		return toHttpHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,rx,netty,using,the,link,org,springframework,http,server,reactive,rx,netty,http,handler,adapter,or,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,link,web,http,handler,builder,param,router,function,the,router,function,to,convert,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,web,handler,adapter,to,http,handler,router,function,router,function,return,to,http,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction);1492090594;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned handler can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>RxNetty using the_{@link org.springframework.http.server.reactive.RxNettyHttpHandlerAdapter}, or </li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_{@link WebHttpHandlerBuilder}._@param routerFunction the router function to convert_@return an http handler that handles HTTP request using the given router function;public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction) {_		return toHttpHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,rx,netty,using,the,link,org,springframework,http,server,reactive,rx,netty,http,handler,adapter,or,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,link,web,http,handler,builder,param,router,function,the,router,function,to,convert,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,web,handler,adapter,to,http,handler,router,function,router,function,return,to,http,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction);1492168700;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned handler can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>RxNetty using the_{@link org.springframework.http.server.reactive.RxNettyHttpHandlerAdapter}, or </li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_{@link WebHttpHandlerBuilder}._@param routerFunction the router function to convert_@return an http handler that handles HTTP request using the given router function;public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction) {_		return toHttpHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,rx,netty,using,the,link,org,springframework,http,server,reactive,rx,netty,http,handler,adapter,or,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,link,web,http,handler,builder,param,router,function,the,router,function,to,convert,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,web,handler,adapter,to,http,handler,router,function,router,function,return,to,http,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction);1492190322;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler}._This conversion uses {@linkplain HandlerStrategies#builder() default strategies}._<p>The returned handler can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_{@link WebHttpHandlerBuilder}._@param routerFunction the router function to convert_@return an http handler that handles HTTP request using the given router function;public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction) {_		return toHttpHandler(routerFunction, HandlerStrategies.withDefaults())__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,this,conversion,uses,linkplain,handler,strategies,builder,default,strategies,p,the,returned,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,link,web,http,handler,builder,param,router,function,the,router,function,to,convert,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,web,handler,adapter,to,http,handler,router,function,router,function,return,to,http,handler,router,function,handler,strategies,with,defaults
RouterFunctions -> Builder -> Builder routePost(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530177818;Adds a route to the given handler function that handles all HTTP {@code POST} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code POST} requests that_match {@code pattern}_@return this builder;Builder routePost(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,post,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,post,requests,that,match,code,pattern,return,this,builder;builder,route,post,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder routePost(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530187774;Adds a route to the given handler function that handles all HTTP {@code POST} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code POST} requests that_match {@code pattern}_@return this builder;Builder routePost(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,post,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,post,requests,that,match,code,pattern,return,this,builder;builder,route,post,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder routePost(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530793633;Adds a route to the given handler function that handles all HTTP {@code POST} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code POST} requests that_match {@code pattern}_@return this builder;Builder routePost(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,post,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,post,requests,that,match,code,pattern,return,this,builder;builder,route,post,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Visitor -> void unknown(RouterFunction<?> routerFunction)_;1506081789;Receive notification of an unknown router function. This method is called for router_functions that were not created via the various {@link RouterFunctions} methods._@param routerFunction the router function;void unknown(RouterFunction<?> routerFunction)_;receive,notification,of,an,unknown,router,function,this,method,is,called,for,router,functions,that,were,not,created,via,the,various,link,router,functions,methods,param,router,function,the,router,function;void,unknown,router,function,router,function
RouterFunctions -> Visitor -> void unknown(RouterFunction<?> routerFunction)_;1520528267;Receive notification of an unknown router function. This method is called for router_functions that were not created via the various {@link RouterFunctions} methods._@param routerFunction the router function;void unknown(RouterFunction<?> routerFunction)_;receive,notification,of,an,unknown,router,function,this,method,is,called,for,router,functions,that,were,not,created,via,the,various,link,router,functions,methods,param,router,function,the,router,function;void,unknown,router,function,router,function
RouterFunctions -> Visitor -> void unknown(RouterFunction<?> routerFunction)_;1524865018;Receive notification of an unknown router function. This method is called for router_functions that were not created via the various {@link RouterFunctions} methods._@param routerFunction the router function;void unknown(RouterFunction<?> routerFunction)_;receive,notification,of,an,unknown,router,function,this,method,is,called,for,router,functions,that,were,not,created,via,the,various,link,router,functions,methods,param,router,function,the,router,function;void,unknown,router,function,router,function
RouterFunctions -> Visitor -> void unknown(RouterFunction<?> routerFunction)_;1525433784;Receive notification of an unknown router function. This method is called for router_functions that were not created via the various {@link RouterFunctions} methods._@param routerFunction the router function;void unknown(RouterFunction<?> routerFunction)_;receive,notification,of,an,unknown,router,function,this,method,is,called,for,router,functions,that,were,not,created,via,the,various,link,router,functions,methods,param,router,function,the,router,function;void,unknown,router,function,router,function
RouterFunctions -> Visitor -> void unknown(RouterFunction<?> routerFunction)_;1526553177;Receive notification of an unknown router function. This method is called for router_functions that were not created via the various {@link RouterFunctions} methods._@param routerFunction the router function;void unknown(RouterFunction<?> routerFunction)_;receive,notification,of,an,unknown,router,function,this,method,is,called,for,router,functions,that,were,not,created,via,the,various,link,router,functions,methods,param,router,function,the,router,function;void,unknown,router,function,router,function
RouterFunctions -> Visitor -> void unknown(RouterFunction<?> routerFunction)_;1527601711;Receive notification of an unknown router function. This method is called for router_functions that were not created via the various {@link RouterFunctions} methods._@param routerFunction the router function;void unknown(RouterFunction<?> routerFunction)_;receive,notification,of,an,unknown,router,function,this,method,is,called,for,router,functions,that,were,not,created,via,the,various,link,router,functions,methods,param,router,function,the,router,function;void,unknown,router,function,router,function
RouterFunctions -> Visitor -> void unknown(RouterFunction<?> routerFunction)_;1529721864;Receive notification of an unknown router function. This method is called for router_functions that were not created via the various {@link RouterFunctions} methods._@param routerFunction the router function;void unknown(RouterFunction<?> routerFunction)_;receive,notification,of,an,unknown,router,function,this,method,is,called,for,router,functions,that,were,not,created,via,the,various,link,router,functions,methods,param,router,function,the,router,function;void,unknown,router,function,router,function
RouterFunctions -> Visitor -> void unknown(RouterFunction<?> routerFunction)_;1530174524;Receive notification of an unknown router function. This method is called for router_functions that were not created via the various {@link RouterFunctions} methods._@param routerFunction the router function;void unknown(RouterFunction<?> routerFunction)_;receive,notification,of,an,unknown,router,function,this,method,is,called,for,router,functions,that,were,not,created,via,the,various,link,router,functions,methods,param,router,function,the,router,function;void,unknown,router,function,router,function
RouterFunctions -> Visitor -> void unknown(RouterFunction<?> routerFunction)_;1530174524;Receive notification of an unknown router function. This method is called for router_functions that were not created via the various {@link RouterFunctions} methods._@param routerFunction the router function;void unknown(RouterFunction<?> routerFunction)_;receive,notification,of,an,unknown,router,function,this,method,is,called,for,router,functions,that,were,not,created,via,the,various,link,router,functions,methods,param,router,function,the,router,function;void,unknown,router,function,router,function
RouterFunctions -> Visitor -> void unknown(RouterFunction<?> routerFunction)_;1530177818;Receive notification of an unknown router function. This method is called for router_functions that were not created via the various {@link RouterFunctions} methods._@param routerFunction the router function;void unknown(RouterFunction<?> routerFunction)_;receive,notification,of,an,unknown,router,function,this,method,is,called,for,router,functions,that,were,not,created,via,the,various,link,router,functions,methods,param,router,function,the,router,function;void,unknown,router,function,router,function
RouterFunctions -> Visitor -> void unknown(RouterFunction<?> routerFunction)_;1530187774;Receive notification of an unknown router function. This method is called for router_functions that were not created via the various {@link RouterFunctions} methods._@param routerFunction the router function;void unknown(RouterFunction<?> routerFunction)_;receive,notification,of,an,unknown,router,function,this,method,is,called,for,router,functions,that,were,not,created,via,the,various,link,router,functions,methods,param,router,function,the,router,function;void,unknown,router,function,router,function
RouterFunctions -> Visitor -> void unknown(RouterFunction<?> routerFunction)_;1530793633;Receive notification of an unknown router function. This method is called for router_functions that were not created via the various {@link RouterFunctions} methods._@param routerFunction the router function;void unknown(RouterFunction<?> routerFunction)_;receive,notification,of,an,unknown,router,function,this,method,is,called,for,router,functions,that,were,not,created,via,the,various,link,router,functions,methods,param,router,function,the,router,function;void,unknown,router,function,router,function
RouterFunctions -> Visitor -> void unknown(RouterFunction<?> routerFunction)_;1530871268;Receive notification of an unknown router function. This method is called for router_functions that were not created via the various {@link RouterFunctions} methods._@param routerFunction the router function;void unknown(RouterFunction<?> routerFunction)_;receive,notification,of,an,unknown,router,function,this,method,is,called,for,router,functions,that,were,not,created,via,the,various,link,router,functions,methods,param,router,function,the,router,function;void,unknown,router,function,router,function
RouterFunctions -> Visitor -> void unknown(RouterFunction<?> routerFunction)_;1530877097;Receive notification of an unknown router function. This method is called for router_functions that were not created via the various {@link RouterFunctions} methods._@param routerFunction the router function;void unknown(RouterFunction<?> routerFunction)_;receive,notification,of,an,unknown,router,function,this,method,is,called,for,router,functions,that,were,not,created,via,the,various,link,router,functions,methods,param,router,function,the,router,function;void,unknown,router,function,router,function
RouterFunctions -> Visitor -> void unknown(RouterFunction<?> routerFunction)_;1530880709;Receive notification of an unknown router function. This method is called for router_functions that were not created via the various {@link RouterFunctions} methods._@param routerFunction the router function;void unknown(RouterFunction<?> routerFunction)_;receive,notification,of,an,unknown,router,function,this,method,is,called,for,router,functions,that,were,not,created,via,the,various,link,router,functions,methods,param,router,function,the,router,function;void,unknown,router,function,router,function
RouterFunctions -> Visitor -> void unknown(RouterFunction<?> routerFunction)_;1537188605;Receive notification of an unknown router function. This method is called for router_functions that were not created via the various {@link RouterFunctions} methods._@param routerFunction the router function;void unknown(RouterFunction<?> routerFunction)_;receive,notification,of,an,unknown,router,function,this,method,is,called,for,router,functions,that,were,not,created,via,the,various,link,router,functions,methods,param,router,function,the,router,function;void,unknown,router,function,router,function
RouterFunctions -> Visitor -> void unknown(RouterFunction<?> routerFunction)_;1538664611;Receive notification of an unknown router function. This method is called for router_functions that were not created via the various {@link RouterFunctions} methods._@param routerFunction the router function;void unknown(RouterFunction<?> routerFunction)_;receive,notification,of,an,unknown,router,function,this,method,is,called,for,router,functions,that,were,not,created,via,the,various,link,router,functions,methods,param,router,function,the,router,function;void,unknown,router,function,router,function
RouterFunctions -> Visitor -> void unknown(RouterFunction<?> routerFunction)_;1539866925;Receive notification of an unknown router function. This method is called for router_functions that were not created via the various {@link RouterFunctions} methods._@param routerFunction the router function;void unknown(RouterFunction<?> routerFunction)_;receive,notification,of,an,unknown,router,function,this,method,is,called,for,router,functions,that,were,not,created,via,the,various,link,router,functions,methods,param,router,function,the,router,function;void,unknown,router,function,router,function
RouterFunctions -> Builder -> Builder nestPath(String pattern, Consumer<Builder> builderConsumer)_;1530177818;Route to a built router function if the given path prefix pattern applies._This method can be used to create <strong>nested routes</strong>, where a group of routes_share a common path (prefix), header, or other request predicate._<p>For instance, the following example creates a nested route with a "/user" path_predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.builder()_.nestPath("/user", builder ->_builder.routeGet(this::listUsers)_.routePost(this::createUser)___.build()__</pre>_@param pattern the pattern to match to_@param builderConsumer consumer for a {@code Builder} that provides the nested router_function_@return this builder;Builder nestPath(String pattern, Consumer<Builder> builderConsumer)_;route,to,a,built,router,function,if,the,given,path,prefix,pattern,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,creates,a,nested,route,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,nested,route,router,functions,builder,nest,path,user,builder,builder,route,get,this,list,users,route,post,this,create,user,build,pre,param,pattern,the,pattern,to,match,to,param,builder,consumer,consumer,for,a,code,builder,that,provides,the,nested,router,function,return,this,builder;builder,nest,path,string,pattern,consumer,builder,builder,consumer
RouterFunctions -> Builder -> Builder nestPath(String pattern, Consumer<Builder> builderConsumer)_;1530187774;Route to a built router function if the given path prefix pattern applies._This method can be used to create <strong>nested routes</strong>, where a group of routes_share a common path (prefix), header, or other request predicate._<p>For instance, the following example creates a nested route with a "/user" path_predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.builder()_.nestPath("/user", builder ->_builder.routeGet(this::listUsers)_.routePost(this::createUser)___.build()__</pre>_@param pattern the pattern to match to_@param builderConsumer consumer for a {@code Builder} that provides the nested router_function_@return this builder;Builder nestPath(String pattern, Consumer<Builder> builderConsumer)_;route,to,a,built,router,function,if,the,given,path,prefix,pattern,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,creates,a,nested,route,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,nested,route,router,functions,builder,nest,path,user,builder,builder,route,get,this,list,users,route,post,this,create,user,build,pre,param,pattern,the,pattern,to,match,to,param,builder,consumer,consumer,for,a,code,builder,that,provides,the,nested,router,function,return,this,builder;builder,nest,path,string,pattern,consumer,builder,builder,consumer
RouterFunctions -> Builder -> Builder nestPath(String pattern, Consumer<Builder> builderConsumer)_;1530793633;Route to a built router function if the given path prefix pattern applies._This method can be used to create <strong>nested routes</strong>, where a group of routes_share a common path (prefix), header, or other request predicate._<p>For instance, the following example creates a nested route with a "/user" path_predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.builder()_.nestPath("/user", builder ->_builder.routeGet(this::listUsers)_.routePost(this::createUser)___.build()__</pre>_@param pattern the pattern to match to_@param builderConsumer consumer for a {@code Builder} that provides the nested router_function_@return this builder;Builder nestPath(String pattern, Consumer<Builder> builderConsumer)_;route,to,a,built,router,function,if,the,given,path,prefix,pattern,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,header,or,other,request,predicate,p,for,instance,the,following,example,creates,a,nested,route,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,nested,route,router,functions,builder,nest,path,user,builder,builder,route,get,this,list,users,route,post,this,create,user,build,pre,param,pattern,the,pattern,to,match,to,param,builder,consumer,consumer,for,a,code,builder,that,provides,the,nested,router,function,return,this,builder;builder,nest,path,string,pattern,consumer,builder,builder,consumer
RouterFunctions -> Builder -> Builder filter(HandlerFilterFunction<ServerResponse, ServerResponse> filterFunction)_;1530177818;Filters all routes created by this builder with the given filter function. Filter_functions are typically used to address cross-cutting concerns, such as logging,_security, etc._<p>For instance, the following example creates a filter that logs the request before_the handler function executes, and logs the response after._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.builder()_.routeGet("/user", this::listUsers)_.filter((request, next) -> {_log(request)__Mono&lt_ServerResponse&gt_ responseMono = next.handle(request)__return responseMono.doOnNext(response -> log(response)___.build()__</pre>_@param filterFunction the function to filter all routes built by this builder_@return this builder;Builder filter(HandlerFilterFunction<ServerResponse, ServerResponse> filterFunction)_;filters,all,routes,created,by,this,builder,with,the,given,filter,function,filter,functions,are,typically,used,to,address,cross,cutting,concerns,such,as,logging,security,etc,p,for,instance,the,following,example,creates,a,filter,that,logs,the,request,before,the,handler,function,executes,and,logs,the,response,after,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,builder,route,get,user,this,list,users,filter,request,next,log,request,mono,lt,server,response,gt,response,mono,next,handle,request,return,response,mono,do,on,next,response,log,response,build,pre,param,filter,function,the,function,to,filter,all,routes,built,by,this,builder,return,this,builder;builder,filter,handler,filter,function,server,response,server,response,filter,function
RouterFunctions -> Builder -> Builder filter(HandlerFilterFunction<ServerResponse, ServerResponse> filterFunction)_;1530187774;Filters all routes created by this builder with the given filter function. Filter_functions are typically used to address cross-cutting concerns, such as logging,_security, etc._<p>For instance, the following example creates a filter that logs the request before_the handler function executes, and logs the response after._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.builder()_.routeGet("/user", this::listUsers)_.filter((request, next) -> {_log(request)__Mono&lt_ServerResponse&gt_ responseMono = next.handle(request)__return responseMono.doOnNext(response -> log(response)___.build()__</pre>_@param filterFunction the function to filter all routes built by this builder_@return this builder;Builder filter(HandlerFilterFunction<ServerResponse, ServerResponse> filterFunction)_;filters,all,routes,created,by,this,builder,with,the,given,filter,function,filter,functions,are,typically,used,to,address,cross,cutting,concerns,such,as,logging,security,etc,p,for,instance,the,following,example,creates,a,filter,that,logs,the,request,before,the,handler,function,executes,and,logs,the,response,after,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,builder,route,get,user,this,list,users,filter,request,next,log,request,mono,lt,server,response,gt,response,mono,next,handle,request,return,response,mono,do,on,next,response,log,response,build,pre,param,filter,function,the,function,to,filter,all,routes,built,by,this,builder,return,this,builder;builder,filter,handler,filter,function,server,response,server,response,filter,function
RouterFunctions -> Builder -> Builder filter(HandlerFilterFunction<ServerResponse, ServerResponse> filterFunction)_;1530793633;Filters all routes created by this builder with the given filter function. Filter_functions are typically used to address cross-cutting concerns, such as logging,_security, etc._<p>For instance, the following example creates a filter that logs the request before_the handler function executes, and logs the response after._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.builder()_.routeGet("/user", this::listUsers)_.filter((request, next) -> {_log(request)__Mono&lt_ServerResponse&gt_ responseMono = next.handle(request)__return responseMono.doOnNext(response -> log(response)___.build()__</pre>_@param filterFunction the function to filter all routes built by this builder_@return this builder;Builder filter(HandlerFilterFunction<ServerResponse, ServerResponse> filterFunction)_;filters,all,routes,created,by,this,builder,with,the,given,filter,function,filter,functions,are,typically,used,to,address,cross,cutting,concerns,such,as,logging,security,etc,p,for,instance,the,following,example,creates,a,filter,that,logs,the,request,before,the,handler,function,executes,and,logs,the,response,after,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,builder,route,get,user,this,list,users,filter,request,next,log,request,mono,lt,server,response,gt,response,mono,next,handle,request,return,response,mono,do,on,next,response,log,response,build,pre,param,filter,function,the,function,to,filter,all,routes,built,by,this,builder,return,this,builder;builder,filter,handler,filter,function,server,response,server,response,filter,function
RouterFunctions -> Builder -> Builder filter(HandlerFilterFunction<ServerResponse, ServerResponse> filterFunction)_;1530871268;Filters all routes created by this builder with the given filter function. Filter_functions are typically used to address cross-cutting concerns, such as logging,_security, etc._<p>For instance, the following example creates a filter that returns a 401 Unauthorized_response if the request does not contain the necessary authentication headers._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.route()_.GET("/user", this::listUsers)_.filter((request, next) -> {_// check for authentication headers_if (isAuthenticated(request)) {_return next.handle(request)___else {_return ServerResponse.status(HttpStatus.UNAUTHORIZED).build()____.build()__</pre>_@param filterFunction the function to filter all routes built by this builder_@return this builder;Builder filter(HandlerFilterFunction<ServerResponse, ServerResponse> filterFunction)_;filters,all,routes,created,by,this,builder,with,the,given,filter,function,filter,functions,are,typically,used,to,address,cross,cutting,concerns,such,as,logging,security,etc,p,for,instance,the,following,example,creates,a,filter,that,returns,a,401,unauthorized,response,if,the,request,does,not,contain,the,necessary,authentication,headers,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,route,get,user,this,list,users,filter,request,next,check,for,authentication,headers,if,is,authenticated,request,return,next,handle,request,else,return,server,response,status,http,status,unauthorized,build,build,pre,param,filter,function,the,function,to,filter,all,routes,built,by,this,builder,return,this,builder;builder,filter,handler,filter,function,server,response,server,response,filter,function
RouterFunctions -> Builder -> Builder filter(HandlerFilterFunction<ServerResponse, ServerResponse> filterFunction)_;1530877097;Filters all routes created by this builder with the given filter function. Filter_functions are typically used to address cross-cutting concerns, such as logging,_security, etc._<p>For instance, the following example creates a filter that returns a 401 Unauthorized_response if the request does not contain the necessary authentication headers._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.route()_.GET("/user", this::listUsers)_.filter((request, next) -> {_// check for authentication headers_if (isAuthenticated(request)) {_return next.handle(request)___else {_return ServerResponse.status(HttpStatus.UNAUTHORIZED).build()____.build()__</pre>_@param filterFunction the function to filter all routes built by this builder_@return this builder;Builder filter(HandlerFilterFunction<ServerResponse, ServerResponse> filterFunction)_;filters,all,routes,created,by,this,builder,with,the,given,filter,function,filter,functions,are,typically,used,to,address,cross,cutting,concerns,such,as,logging,security,etc,p,for,instance,the,following,example,creates,a,filter,that,returns,a,401,unauthorized,response,if,the,request,does,not,contain,the,necessary,authentication,headers,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,route,get,user,this,list,users,filter,request,next,check,for,authentication,headers,if,is,authenticated,request,return,next,handle,request,else,return,server,response,status,http,status,unauthorized,build,build,pre,param,filter,function,the,function,to,filter,all,routes,built,by,this,builder,return,this,builder;builder,filter,handler,filter,function,server,response,server,response,filter,function
RouterFunctions -> Builder -> Builder filter(HandlerFilterFunction<ServerResponse, ServerResponse> filterFunction)_;1530880709;Filters all routes created by this builder with the given filter function. Filter_functions are typically used to address cross-cutting concerns, such as logging,_security, etc._<p>For instance, the following example creates a filter that returns a 401 Unauthorized_response if the request does not contain the necessary authentication headers._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.route()_.GET("/user", this::listUsers)_.filter((request, next) -> {_// check for authentication headers_if (isAuthenticated(request)) {_return next.handle(request)___else {_return ServerResponse.status(HttpStatus.UNAUTHORIZED).build()____.build()__</pre>_@param filterFunction the function to filter all routes built by this builder_@return this builder;Builder filter(HandlerFilterFunction<ServerResponse, ServerResponse> filterFunction)_;filters,all,routes,created,by,this,builder,with,the,given,filter,function,filter,functions,are,typically,used,to,address,cross,cutting,concerns,such,as,logging,security,etc,p,for,instance,the,following,example,creates,a,filter,that,returns,a,401,unauthorized,response,if,the,request,does,not,contain,the,necessary,authentication,headers,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,route,get,user,this,list,users,filter,request,next,check,for,authentication,headers,if,is,authenticated,request,return,next,handle,request,else,return,server,response,status,http,status,unauthorized,build,build,pre,param,filter,function,the,function,to,filter,all,routes,built,by,this,builder,return,this,builder;builder,filter,handler,filter,function,server,response,server,response,filter,function
RouterFunctions -> Builder -> Builder filter(HandlerFilterFunction<ServerResponse, ServerResponse> filterFunction)_;1537188605;Filters all routes created by this builder with the given filter function. Filter_functions are typically used to address cross-cutting concerns, such as logging,_security, etc._<p>For instance, the following example creates a filter that returns a 401 Unauthorized_response if the request does not contain the necessary authentication headers._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.route()_.GET("/user", this::listUsers)_.filter((request, next) -> {_// check for authentication headers_if (isAuthenticated(request)) {_return next.handle(request)___else {_return ServerResponse.status(HttpStatus.UNAUTHORIZED).build()____.build()__</pre>_@param filterFunction the function to filter all routes built by this builder_@return this builder;Builder filter(HandlerFilterFunction<ServerResponse, ServerResponse> filterFunction)_;filters,all,routes,created,by,this,builder,with,the,given,filter,function,filter,functions,are,typically,used,to,address,cross,cutting,concerns,such,as,logging,security,etc,p,for,instance,the,following,example,creates,a,filter,that,returns,a,401,unauthorized,response,if,the,request,does,not,contain,the,necessary,authentication,headers,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,route,get,user,this,list,users,filter,request,next,check,for,authentication,headers,if,is,authenticated,request,return,next,handle,request,else,return,server,response,status,http,status,unauthorized,build,build,pre,param,filter,function,the,function,to,filter,all,routes,built,by,this,builder,return,this,builder;builder,filter,handler,filter,function,server,response,server,response,filter,function
RouterFunctions -> Builder -> Builder filter(HandlerFilterFunction<ServerResponse, ServerResponse> filterFunction)_;1538664611;Filters all routes created by this builder with the given filter function. Filter_functions are typically used to address cross-cutting concerns, such as logging,_security, etc._<p>For instance, the following example creates a filter that returns a 401 Unauthorized_response if the request does not contain the necessary authentication headers._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.route()_.GET("/user", this::listUsers)_.filter((request, next) -> {_// check for authentication headers_if (isAuthenticated(request)) {_return next.handle(request)___else {_return ServerResponse.status(HttpStatus.UNAUTHORIZED).build()____.build()__</pre>_@param filterFunction the function to filter all routes built by this builder_@return this builder;Builder filter(HandlerFilterFunction<ServerResponse, ServerResponse> filterFunction)_;filters,all,routes,created,by,this,builder,with,the,given,filter,function,filter,functions,are,typically,used,to,address,cross,cutting,concerns,such,as,logging,security,etc,p,for,instance,the,following,example,creates,a,filter,that,returns,a,401,unauthorized,response,if,the,request,does,not,contain,the,necessary,authentication,headers,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,route,get,user,this,list,users,filter,request,next,check,for,authentication,headers,if,is,authenticated,request,return,next,handle,request,else,return,server,response,status,http,status,unauthorized,build,build,pre,param,filter,function,the,function,to,filter,all,routes,built,by,this,builder,return,this,builder;builder,filter,handler,filter,function,server,response,server,response,filter,function
RouterFunctions -> Builder -> Builder filter(HandlerFilterFunction<ServerResponse, ServerResponse> filterFunction)_;1539866925;Filters all routes created by this builder with the given filter function. Filter_functions are typically used to address cross-cutting concerns, such as logging,_security, etc._<p>For instance, the following example creates a filter that returns a 401 Unauthorized_response if the request does not contain the necessary authentication headers._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ filteredRoute =_RouterFunctions.route()_.GET("/user", this::listUsers)_.filter((request, next) -> {_// check for authentication headers_if (isAuthenticated(request)) {_return next.handle(request)___else {_return ServerResponse.status(HttpStatus.UNAUTHORIZED).build()____.build()__</pre>_@param filterFunction the function to filter all routes built by this builder_@return this builder;Builder filter(HandlerFilterFunction<ServerResponse, ServerResponse> filterFunction)_;filters,all,routes,created,by,this,builder,with,the,given,filter,function,filter,functions,are,typically,used,to,address,cross,cutting,concerns,such,as,logging,security,etc,p,for,instance,the,following,example,creates,a,filter,that,returns,a,401,unauthorized,response,if,the,request,does,not,contain,the,necessary,authentication,headers,pre,class,code,router,function,lt,server,response,gt,filtered,route,router,functions,route,get,user,this,list,users,filter,request,next,check,for,authentication,headers,if,is,authenticated,request,return,next,handle,request,else,return,server,response,status,http,status,unauthorized,build,build,pre,param,filter,function,the,function,to,filter,all,routes,built,by,this,builder,return,this,builder;builder,filter,handler,filter,function,server,response,server,response,filter,function
RouterFunctions -> Builder -> Builder PUT(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1530871268;Adds a route to the given handler function that handles all HTTP {@code PUT} requests_that match the given pattern and predicate._<p>For instance, the following example routes PUT requests for "/user" that contain JSON_to the {@code editUser} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route()_.PUT("/user", RequestPredicates.contentType(MediaType.APPLICATION_JSON),_userController::editUser)_.build()__</pre>_@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code PUT} requests that_match {@code pattern}_@return this builder;Builder PUT(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,put,requests,that,match,the,given,pattern,and,predicate,p,for,instance,the,following,example,routes,put,requests,for,user,that,contain,json,to,the,code,edit,user,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,put,user,request,predicates,content,type,media,type,user,controller,edit,user,build,pre,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,put,requests,that,match,code,pattern,return,this,builder;builder,put,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder PUT(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1530877097;Adds a route to the given handler function that handles all HTTP {@code PUT} requests_that match the given pattern and predicate._<p>For instance, the following example routes PUT requests for "/user" that contain JSON_to the {@code editUser} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route()_.PUT("/user", RequestPredicates.contentType(MediaType.APPLICATION_JSON),_userController::editUser)_.build()__</pre>_@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code PUT} requests that_match {@code pattern}_@return this builder;Builder PUT(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,put,requests,that,match,the,given,pattern,and,predicate,p,for,instance,the,following,example,routes,put,requests,for,user,that,contain,json,to,the,code,edit,user,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,put,user,request,predicates,content,type,media,type,user,controller,edit,user,build,pre,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,put,requests,that,match,code,pattern,return,this,builder;builder,put,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder PUT(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1530880709;Adds a route to the given handler function that handles all HTTP {@code PUT} requests_that match the given pattern and predicate._<p>For instance, the following example routes PUT requests for "/user" that contain JSON_to the {@code editUser} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route()_.PUT("/user", RequestPredicates.contentType(MediaType.APPLICATION_JSON), userController::editUser)_.build()__</pre>_@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code PUT} requests that_match {@code pattern}_@return this builder;Builder PUT(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,put,requests,that,match,the,given,pattern,and,predicate,p,for,instance,the,following,example,routes,put,requests,for,user,that,contain,json,to,the,code,edit,user,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,put,user,request,predicates,content,type,media,type,user,controller,edit,user,build,pre,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,put,requests,that,match,code,pattern,return,this,builder;builder,put,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder PUT(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1537188605;Adds a route to the given handler function that handles all HTTP {@code PUT} requests_that match the given pattern and predicate._<p>For instance, the following example routes PUT requests for "/user" that contain JSON_to the {@code editUser} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route()_.PUT("/user", RequestPredicates.contentType(MediaType.APPLICATION_JSON), userController::editUser)_.build()__</pre>_@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code PUT} requests that_match {@code pattern}_@return this builder;Builder PUT(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,put,requests,that,match,the,given,pattern,and,predicate,p,for,instance,the,following,example,routes,put,requests,for,user,that,contain,json,to,the,code,edit,user,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,put,user,request,predicates,content,type,media,type,user,controller,edit,user,build,pre,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,put,requests,that,match,code,pattern,return,this,builder;builder,put,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder PUT(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1538664611;Adds a route to the given handler function that handles all HTTP {@code PUT} requests_that match the given pattern and predicate._<p>For instance, the following example routes PUT requests for "/user" that contain JSON_to the {@code editUser} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route()_.PUT("/user", RequestPredicates.contentType(MediaType.APPLICATION_JSON), userController::editUser)_.build()__</pre>_@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code PUT} requests that_match {@code pattern}_@return this builder;Builder PUT(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,put,requests,that,match,the,given,pattern,and,predicate,p,for,instance,the,following,example,routes,put,requests,for,user,that,contain,json,to,the,code,edit,user,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,put,user,request,predicates,content,type,media,type,user,controller,edit,user,build,pre,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,put,requests,that,match,code,pattern,return,this,builder;builder,put,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder PUT(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;1539866925;Adds a route to the given handler function that handles all HTTP {@code PUT} requests_that match the given pattern and predicate._<p>For instance, the following example routes PUT requests for "/user" that contain JSON_to the {@code editUser} method in {@code userController}:_<pre class="code">_RouterFunction&lt_ServerResponse&gt_ route =_RouterFunctions.route()_.PUT("/user", RequestPredicates.contentType(MediaType.APPLICATION_JSON), userController::editUser)_.build()__</pre>_@param pattern the pattern to match to_@param predicate additional predicate to match_@param handlerFunction the handler function to handle all {@code PUT} requests that_match {@code pattern}_@return this builder;Builder PUT(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,put,requests,that,match,the,given,pattern,and,predicate,p,for,instance,the,following,example,routes,put,requests,for,user,that,contain,json,to,the,code,edit,user,method,in,code,user,controller,pre,class,code,router,function,lt,server,response,gt,route,router,functions,route,put,user,request,predicates,content,type,media,type,user,controller,edit,user,build,pre,param,pattern,the,pattern,to,match,to,param,predicate,additional,predicate,to,match,param,handler,function,the,handler,function,to,handle,all,code,put,requests,that,match,code,pattern,return,this,builder;builder,put,string,pattern,request,predicate,predicate,handler,function,server,response,handler,function
RouterFunctions -> Visitor -> void resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;1506081789;Receive notification of a resource router function._@param lookupFunction the lookup function for the resources_@see RouterFunctions#resources(Function);void resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;receive,notification,of,a,resource,router,function,param,lookup,function,the,lookup,function,for,the,resources,see,router,functions,resources,function;void,resources,function,server,request,mono,resource,lookup,function
RouterFunctions -> Visitor -> void resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;1520528267;Receive notification of a resource router function._@param lookupFunction the lookup function for the resources_@see RouterFunctions#resources(Function);void resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;receive,notification,of,a,resource,router,function,param,lookup,function,the,lookup,function,for,the,resources,see,router,functions,resources,function;void,resources,function,server,request,mono,resource,lookup,function
RouterFunctions -> Visitor -> void resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;1524865018;Receive notification of a resource router function._@param lookupFunction the lookup function for the resources_@see RouterFunctions#resources(Function);void resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;receive,notification,of,a,resource,router,function,param,lookup,function,the,lookup,function,for,the,resources,see,router,functions,resources,function;void,resources,function,server,request,mono,resource,lookup,function
RouterFunctions -> Visitor -> void resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;1525433784;Receive notification of a resource router function._@param lookupFunction the lookup function for the resources_@see RouterFunctions#resources(Function);void resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;receive,notification,of,a,resource,router,function,param,lookup,function,the,lookup,function,for,the,resources,see,router,functions,resources,function;void,resources,function,server,request,mono,resource,lookup,function
RouterFunctions -> Visitor -> void resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;1526553177;Receive notification of a resource router function._@param lookupFunction the lookup function for the resources_@see RouterFunctions#resources(Function);void resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;receive,notification,of,a,resource,router,function,param,lookup,function,the,lookup,function,for,the,resources,see,router,functions,resources,function;void,resources,function,server,request,mono,resource,lookup,function
RouterFunctions -> Visitor -> void resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;1527601711;Receive notification of a resource router function._@param lookupFunction the lookup function for the resources_@see RouterFunctions#resources(Function);void resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;receive,notification,of,a,resource,router,function,param,lookup,function,the,lookup,function,for,the,resources,see,router,functions,resources,function;void,resources,function,server,request,mono,resource,lookup,function
RouterFunctions -> Visitor -> void resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;1529721864;Receive notification of a resource router function._@param lookupFunction the lookup function for the resources_@see RouterFunctions#resources(Function);void resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;receive,notification,of,a,resource,router,function,param,lookup,function,the,lookup,function,for,the,resources,see,router,functions,resources,function;void,resources,function,server,request,mono,resource,lookup,function
RouterFunctions -> Visitor -> void resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;1530174524;Receive notification of a resource router function._@param lookupFunction the lookup function for the resources_@see RouterFunctions#resources(Function);void resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;receive,notification,of,a,resource,router,function,param,lookup,function,the,lookup,function,for,the,resources,see,router,functions,resources,function;void,resources,function,server,request,mono,resource,lookup,function
RouterFunctions -> Visitor -> void resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;1530174524;Receive notification of a resource router function._@param lookupFunction the lookup function for the resources_@see RouterFunctions#resources(Function);void resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;receive,notification,of,a,resource,router,function,param,lookup,function,the,lookup,function,for,the,resources,see,router,functions,resources,function;void,resources,function,server,request,mono,resource,lookup,function
RouterFunctions -> Visitor -> void resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;1530177818;Receive notification of a resource router function._@param lookupFunction the lookup function for the resources_@see RouterFunctions#resources(Function);void resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;receive,notification,of,a,resource,router,function,param,lookup,function,the,lookup,function,for,the,resources,see,router,functions,resources,function;void,resources,function,server,request,mono,resource,lookup,function
RouterFunctions -> Visitor -> void resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;1530187774;Receive notification of a resource router function._@param lookupFunction the lookup function for the resources_@see RouterFunctions#resources(Function);void resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;receive,notification,of,a,resource,router,function,param,lookup,function,the,lookup,function,for,the,resources,see,router,functions,resources,function;void,resources,function,server,request,mono,resource,lookup,function
RouterFunctions -> Visitor -> void resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;1530793633;Receive notification of a resource router function._@param lookupFunction the lookup function for the resources_@see RouterFunctions#resources(Function);void resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;receive,notification,of,a,resource,router,function,param,lookup,function,the,lookup,function,for,the,resources,see,router,functions,resources,function;void,resources,function,server,request,mono,resource,lookup,function
RouterFunctions -> Visitor -> void resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;1530871268;Receive notification of a resource router function._@param lookupFunction the lookup function for the resources_@see RouterFunctions#resources(Function);void resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;receive,notification,of,a,resource,router,function,param,lookup,function,the,lookup,function,for,the,resources,see,router,functions,resources,function;void,resources,function,server,request,mono,resource,lookup,function
RouterFunctions -> Visitor -> void resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;1530877097;Receive notification of a resource router function._@param lookupFunction the lookup function for the resources_@see RouterFunctions#resources(Function);void resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;receive,notification,of,a,resource,router,function,param,lookup,function,the,lookup,function,for,the,resources,see,router,functions,resources,function;void,resources,function,server,request,mono,resource,lookup,function
RouterFunctions -> Visitor -> void resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;1530880709;Receive notification of a resource router function._@param lookupFunction the lookup function for the resources_@see RouterFunctions#resources(Function);void resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;receive,notification,of,a,resource,router,function,param,lookup,function,the,lookup,function,for,the,resources,see,router,functions,resources,function;void,resources,function,server,request,mono,resource,lookup,function
RouterFunctions -> Visitor -> void resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;1537188605;Receive notification of a resource router function._@param lookupFunction the lookup function for the resources_@see RouterFunctions#resources(Function);void resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;receive,notification,of,a,resource,router,function,param,lookup,function,the,lookup,function,for,the,resources,see,router,functions,resources,function;void,resources,function,server,request,mono,resource,lookup,function
RouterFunctions -> Visitor -> void resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;1538664611;Receive notification of a resource router function._@param lookupFunction the lookup function for the resources_@see RouterFunctions#resources(Function);void resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;receive,notification,of,a,resource,router,function,param,lookup,function,the,lookup,function,for,the,resources,see,router,functions,resources,function;void,resources,function,server,request,mono,resource,lookup,function
RouterFunctions -> Visitor -> void resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;1539866925;Receive notification of a resource router function._@param lookupFunction the lookup function for the resources_@see RouterFunctions#resources(Function);void resources(Function<ServerRequest, Mono<Resource>> lookupFunction)_;receive,notification,of,a,resource,router,function,param,lookup,function,the,lookup,function,for,the,resources,see,router,functions,resources,function;void,resources,function,server,request,mono,resource,lookup,function
RouterFunctions -> Builder -> Builder PATCH(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530871268;Adds a route to the given handler function that handles all HTTP {@code PATCH} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code PATCH} requests that_match {@code pattern}_@return this builder;Builder PATCH(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,patch,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,patch,requests,that,match,code,pattern,return,this,builder;builder,patch,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder PATCH(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530877097;Adds a route to the given handler function that handles all HTTP {@code PATCH} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code PATCH} requests that_match {@code pattern}_@return this builder;Builder PATCH(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,patch,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,patch,requests,that,match,code,pattern,return,this,builder;builder,patch,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder PATCH(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1530880709;Adds a route to the given handler function that handles all HTTP {@code PATCH} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code PATCH} requests that_match {@code pattern}_@return this builder;Builder PATCH(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,patch,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,patch,requests,that,match,code,pattern,return,this,builder;builder,patch,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder PATCH(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1537188605;Adds a route to the given handler function that handles all HTTP {@code PATCH} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code PATCH} requests that_match {@code pattern}_@return this builder;Builder PATCH(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,patch,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,patch,requests,that,match,code,pattern,return,this,builder;builder,patch,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder PATCH(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1538664611;Adds a route to the given handler function that handles all HTTP {@code PATCH} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code PATCH} requests that_match {@code pattern}_@return this builder;Builder PATCH(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,patch,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,patch,requests,that,match,code,pattern,return,this,builder;builder,patch,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder PATCH(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;1539866925;Adds a route to the given handler function that handles all HTTP {@code PATCH} requests_that match the given pattern._@param pattern the pattern to match to_@param handlerFunction the handler function to handle all {@code PATCH} requests that_match {@code pattern}_@return this builder;Builder PATCH(String pattern, HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,patch,requests,that,match,the,given,pattern,param,pattern,the,pattern,to,match,to,param,handler,function,the,handler,function,to,handle,all,code,patch,requests,that,match,code,pattern,return,this,builder;builder,patch,string,pattern,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder routeOptions(HandlerFunction<ServerResponse> handlerFunction)_;1530177818;Adds a route to the given handler function that handles all HTTP {@code OPTIONS} requests._@param handlerFunction the handler function to handle all {@code OPTIONS} requests_@return this builder;Builder routeOptions(HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,options,requests,param,handler,function,the,handler,function,to,handle,all,code,options,requests,return,this,builder;builder,route,options,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder routeOptions(HandlerFunction<ServerResponse> handlerFunction)_;1530187774;Adds a route to the given handler function that handles all HTTP {@code OPTIONS} requests._@param handlerFunction the handler function to handle all {@code OPTIONS} requests_@return this builder;Builder routeOptions(HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,options,requests,param,handler,function,the,handler,function,to,handle,all,code,options,requests,return,this,builder;builder,route,options,handler,function,server,response,handler,function
RouterFunctions -> Builder -> Builder routeOptions(HandlerFunction<ServerResponse> handlerFunction)_;1530793633;Adds a route to the given handler function that handles all HTTP {@code OPTIONS} requests._@param handlerFunction the handler function to handle all {@code OPTIONS} requests_@return this builder;Builder routeOptions(HandlerFunction<ServerResponse> handlerFunction)_;adds,a,route,to,the,given,handler,function,that,handles,all,http,code,options,requests,param,handler,function,the,handler,function,to,handle,all,code,options,requests,return,this,builder;builder,route,options,handler,function,server,response,handler,function
RouterFunctions -> public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1485986572;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler},_using the given strategies._<p>The returned {@code HttpHandler} can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>RxNetty using the_{@link org.springframework.http.server.reactive.RxNettyHttpHandlerAdapter}, or </li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_@param routerFunction the router function to convert_@param strategies the strategies to use_@return an http handler that handles HTTP request using the given router function;public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return new HttpWebHandlerAdapter(exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies)__			addAttributes(exchange, request)__			return routerFunction.route(request)_					.defaultIfEmpty(notFound())_					.then(handlerFunction -> handlerFunction.handle(request))_					.then(response -> response.writeTo(exchange, strategies))__		})__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,using,the,given,strategies,p,the,returned,code,http,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,rx,netty,using,the,link,org,springframework,http,server,reactive,rx,netty,http,handler,adapter,or,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,web,handler,adapter,to,http,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,new,http,web,handler,adapter,exchange,server,request,request,new,default,server,request,exchange,strategies,add,attributes,exchange,request,return,router,function,route,request,default,if,empty,not,found,then,handler,function,handler,function,handle,request,then,response,response,write,to,exchange,strategies
RouterFunctions -> public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1487250745;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler},_using the given strategies._<p>The returned {@code HttpHandler} can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>RxNetty using the_{@link org.springframework.http.server.reactive.RxNettyHttpHandlerAdapter}, or </li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_@param routerFunction the router function to convert_@param strategies the strategies to use_@return an http handler that handles HTTP request using the given router function;public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return new HttpWebHandlerAdapter(exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies)__			addAttributes(exchange, request)__			return routerFunction.route(request)_					.defaultIfEmpty(notFound())_					.then(handlerFunction -> handlerFunction.handle(request))_					.then(response -> response.writeTo(exchange, strategies))__		})__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,using,the,given,strategies,p,the,returned,code,http,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,rx,netty,using,the,link,org,springframework,http,server,reactive,rx,netty,http,handler,adapter,or,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,web,handler,adapter,to,http,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,new,http,web,handler,adapter,exchange,server,request,request,new,default,server,request,exchange,strategies,add,attributes,exchange,request,return,router,function,route,request,default,if,empty,not,found,then,handler,function,handler,function,handle,request,then,response,response,write,to,exchange,strategies
RouterFunctions -> public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1487584763;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler},_using the given strategies._<p>The returned {@code HttpHandler} can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>RxNetty using the_{@link org.springframework.http.server.reactive.RxNettyHttpHandlerAdapter}, or </li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_@param routerFunction the router function to convert_@param strategies the strategies to use_@return an http handler that handles HTTP request using the given router function;public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return new HttpWebHandlerAdapter(exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies)__			addAttributes(exchange, request)__			return routerFunction.route(request)_					.defaultIfEmpty(notFound())_					.then(handlerFunction -> handlerFunction.handle(request))_					.then(response -> response.writeTo(exchange, strategies))__		})__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,using,the,given,strategies,p,the,returned,code,http,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,rx,netty,using,the,link,org,springframework,http,server,reactive,rx,netty,http,handler,adapter,or,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,web,handler,adapter,to,http,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,new,http,web,handler,adapter,exchange,server,request,request,new,default,server,request,exchange,strategies,add,attributes,exchange,request,return,router,function,route,request,default,if,empty,not,found,then,handler,function,handler,function,handle,request,then,response,response,write,to,exchange,strategies
RouterFunctions -> public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1487687241;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler},_using the given strategies._<p>The returned {@code HttpHandler} can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>RxNetty using the_{@link org.springframework.http.server.reactive.RxNettyHttpHandlerAdapter}, or </li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_@param routerFunction the router function to convert_@param strategies the strategies to use_@return an http handler that handles HTTP request using the given router function;public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return new HttpWebHandlerAdapter(exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies)__			addAttributes(exchange, request)__			return routerFunction.route(request)_					.defaultIfEmpty(notFound())_					.then(handlerFunction -> handlerFunction.handle(request))_					.then(response -> response.writeTo(exchange, strategies))__		})__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,using,the,given,strategies,p,the,returned,code,http,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,rx,netty,using,the,link,org,springframework,http,server,reactive,rx,netty,http,handler,adapter,or,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,web,handler,adapter,to,http,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,new,http,web,handler,adapter,exchange,server,request,request,new,default,server,request,exchange,strategies,add,attributes,exchange,request,return,router,function,route,request,default,if,empty,not,found,then,handler,function,handler,function,handle,request,then,response,response,write,to,exchange,strategies
RouterFunctions -> public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1489653648;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler},_using the given strategies._<p>The returned {@code HttpHandler} can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>RxNetty using the_{@link org.springframework.http.server.reactive.RxNettyHttpHandlerAdapter}, or </li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_@param routerFunction the router function to convert_@param strategies the strategies to use_@return an http handler that handles HTTP request using the given router function;public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return new HttpWebHandlerAdapter(exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies)__			addAttributes(exchange, request)__			return routerFunction.route(request)_					.defaultIfEmpty(notFound())_					.then(handlerFunction -> invokeHandler(handlerFunction, request))_					.otherwise(ResponseStatusException.class, RouterFunctions::responseStatusFallback)_					.then(response -> response.writeTo(exchange, strategies))__		})__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,using,the,given,strategies,p,the,returned,code,http,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,rx,netty,using,the,link,org,springframework,http,server,reactive,rx,netty,http,handler,adapter,or,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,web,handler,adapter,to,http,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,new,http,web,handler,adapter,exchange,server,request,request,new,default,server,request,exchange,strategies,add,attributes,exchange,request,return,router,function,route,request,default,if,empty,not,found,then,handler,function,invoke,handler,handler,function,request,otherwise,response,status,exception,class,router,functions,response,status,fallback,then,response,response,write,to,exchange,strategies
RouterFunctions -> public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1489751412;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler},_using the given strategies._<p>The returned {@code HttpHandler} can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>RxNetty using the_{@link org.springframework.http.server.reactive.RxNettyHttpHandlerAdapter}, or </li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_@param routerFunction the router function to convert_@param strategies the strategies to use_@return an http handler that handles HTTP request using the given router function;public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return new HttpWebHandlerAdapter(exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies)__			addAttributes(exchange, request)__			return routerFunction.route(request)_					.defaultIfEmpty(notFound())_					.then(handlerFunction -> wrapException(() -> handlerFunction.handle(request)))_					.then(response -> wrapException(() -> response.writeTo(exchange, strategies)))_					.otherwise(ResponseStatusException.class,_							ex -> {_								exchange.getResponse().setStatusCode(ex.getStatus())__								return Mono.empty()__							})__		})__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,using,the,given,strategies,p,the,returned,code,http,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,rx,netty,using,the,link,org,springframework,http,server,reactive,rx,netty,http,handler,adapter,or,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,web,handler,adapter,to,http,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,new,http,web,handler,adapter,exchange,server,request,request,new,default,server,request,exchange,strategies,add,attributes,exchange,request,return,router,function,route,request,default,if,empty,not,found,then,handler,function,wrap,exception,handler,function,handle,request,then,response,wrap,exception,response,write,to,exchange,strategies,otherwise,response,status,exception,class,ex,exchange,get,response,set,status,code,ex,get,status,return,mono,empty
RouterFunctions -> public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1491557115;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler},_using the given strategies._<p>The returned {@code HttpHandler} can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>RxNetty using the_{@link org.springframework.http.server.reactive.RxNettyHttpHandlerAdapter}, or </li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_@param routerFunction the router function to convert_@param strategies the strategies to use_@return an http handler that handles HTTP request using the given router function;public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return new HttpWebHandlerAdapter(exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies)__			addAttributes(exchange, request)__			return routerFunction.route(request)_					.defaultIfEmpty(notFound())_					.then(handlerFunction -> wrapException(() -> handlerFunction.handle(request)))_					.then(response -> wrapException(() -> response.writeTo(exchange, strategies)))_					.otherwise(ResponseStatusException.class,_							ex -> {_								exchange.getResponse().setStatusCode(ex.getStatus())__								return Mono.empty()__							})__		})__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,using,the,given,strategies,p,the,returned,code,http,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,rx,netty,using,the,link,org,springframework,http,server,reactive,rx,netty,http,handler,adapter,or,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,web,handler,adapter,to,http,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,new,http,web,handler,adapter,exchange,server,request,request,new,default,server,request,exchange,strategies,add,attributes,exchange,request,return,router,function,route,request,default,if,empty,not,found,then,handler,function,wrap,exception,handler,function,handle,request,then,response,wrap,exception,response,write,to,exchange,strategies,otherwise,response,status,exception,class,ex,exchange,get,response,set,status,code,ex,get,status,return,mono,empty
RouterFunctions -> public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1491833276;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler},_using the given strategies._<p>The returned {@code HttpHandler} can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>RxNetty using the_{@link org.springframework.http.server.reactive.RxNettyHttpHandlerAdapter}, or </li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_@param routerFunction the router function to convert_@param strategies the strategies to use_@return an http handler that handles HTTP request using the given router function;public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return new HttpWebHandlerAdapter(exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies)__			addAttributes(exchange, request)__			return routerFunction.route(request)_					.defaultIfEmpty(notFound())_					.then(handlerFunction -> wrapException(() -> handlerFunction.handle(request)))_					.then(response -> wrapException(() -> response.writeTo(exchange, strategies)))_					.otherwise(ResponseStatusException.class,_							ex -> {_								exchange.getResponse().setStatusCode(ex.getStatus())__								if (ex.getMessage() != null) {_									logger.error(ex.getMessage())__								}_								return Mono.empty()__							})__		})__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,using,the,given,strategies,p,the,returned,code,http,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,rx,netty,using,the,link,org,springframework,http,server,reactive,rx,netty,http,handler,adapter,or,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,web,handler,adapter,to,http,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,new,http,web,handler,adapter,exchange,server,request,request,new,default,server,request,exchange,strategies,add,attributes,exchange,request,return,router,function,route,request,default,if,empty,not,found,then,handler,function,wrap,exception,handler,function,handle,request,then,response,wrap,exception,response,write,to,exchange,strategies,otherwise,response,status,exception,class,ex,exchange,get,response,set,status,code,ex,get,status,if,ex,get,message,null,logger,error,ex,get,message,return,mono,empty
RouterFunctions -> public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1491927184;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler},_using the given strategies._<p>The returned {@code HttpHandler} can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>RxNetty using the_{@link org.springframework.http.server.reactive.RxNettyHttpHandlerAdapter}, or </li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_@param routerFunction the router function to convert_@param strategies the strategies to use_@return an http handler that handles HTTP request using the given router function;public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return new HttpWebHandlerAdapter(exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies)__			addAttributes(exchange, request)__			return routerFunction.route(request)_					.defaultIfEmpty(notFound())_					.flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request)))_					.flatMap(response -> wrapException(() -> response.writeTo(exchange, strategies)))_					.otherwise(ResponseStatusException.class,_							ex -> {_								exchange.getResponse().setStatusCode(ex.getStatus())__								if (ex.getMessage() != null) {_									logger.error(ex.getMessage())__								}_								return Mono.empty()__							})__		})__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,using,the,given,strategies,p,the,returned,code,http,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,rx,netty,using,the,link,org,springframework,http,server,reactive,rx,netty,http,handler,adapter,or,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,web,handler,adapter,to,http,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,new,http,web,handler,adapter,exchange,server,request,request,new,default,server,request,exchange,strategies,add,attributes,exchange,request,return,router,function,route,request,default,if,empty,not,found,flat,map,handler,function,wrap,exception,handler,function,handle,request,flat,map,response,wrap,exception,response,write,to,exchange,strategies,otherwise,response,status,exception,class,ex,exchange,get,response,set,status,code,ex,get,status,if,ex,get,message,null,logger,error,ex,get,message,return,mono,empty
RouterFunctions -> public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1492090594;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler},_using the given strategies._<p>The returned {@code HttpHandler} can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>RxNetty using the_{@link org.springframework.http.server.reactive.RxNettyHttpHandlerAdapter}, or </li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_@param routerFunction the router function to convert_@param strategies the strategies to use_@return an http handler that handles HTTP request using the given router function;public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return new HttpWebHandlerAdapter(exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies)__			addAttributes(exchange, request)__			return routerFunction.route(request)_					.defaultIfEmpty(notFound())_					.flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request)))_					.flatMap(response -> wrapException(() -> response.writeTo(exchange, strategies)))_					.switchOnError(ResponseStatusException.class,_							ex -> {_								exchange.getResponse().setStatusCode(ex.getStatus())__								if (ex.getMessage() != null) {_									logger.error(ex.getMessage())__								}_								return Mono.empty()__							})__		})__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,using,the,given,strategies,p,the,returned,code,http,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,rx,netty,using,the,link,org,springframework,http,server,reactive,rx,netty,http,handler,adapter,or,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,web,handler,adapter,to,http,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,new,http,web,handler,adapter,exchange,server,request,request,new,default,server,request,exchange,strategies,add,attributes,exchange,request,return,router,function,route,request,default,if,empty,not,found,flat,map,handler,function,wrap,exception,handler,function,handle,request,flat,map,response,wrap,exception,response,write,to,exchange,strategies,switch,on,error,response,status,exception,class,ex,exchange,get,response,set,status,code,ex,get,status,if,ex,get,message,null,logger,error,ex,get,message,return,mono,empty
RouterFunctions -> public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1492168700;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler},_using the given strategies._<p>The returned {@code HttpHandler} can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>RxNetty using the_{@link org.springframework.http.server.reactive.RxNettyHttpHandlerAdapter}, or </li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_@param routerFunction the router function to convert_@param strategies the strategies to use_@return an http handler that handles HTTP request using the given router function;public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return new HttpWebHandlerAdapter(exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies)__			addAttributes(exchange, request)__			return routerFunction.route(request)_					.defaultIfEmpty(notFound())_					.flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request)))_					.flatMap(response -> wrapException(() -> response.writeTo(exchange, strategies)))_					.onErrorResume(ResponseStatusException.class,_							ex -> {_								exchange.getResponse().setStatusCode(ex.getStatus())__								if (ex.getMessage() != null) {_									logger.error(ex.getMessage())__								}_								return Mono.empty()__							})__		})__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,using,the,given,strategies,p,the,returned,code,http,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,rx,netty,using,the,link,org,springframework,http,server,reactive,rx,netty,http,handler,adapter,or,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,web,handler,adapter,to,http,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,new,http,web,handler,adapter,exchange,server,request,request,new,default,server,request,exchange,strategies,add,attributes,exchange,request,return,router,function,route,request,default,if,empty,not,found,flat,map,handler,function,wrap,exception,handler,function,handle,request,flat,map,response,wrap,exception,response,write,to,exchange,strategies,on,error,resume,response,status,exception,class,ex,exchange,get,response,set,status,code,ex,get,status,if,ex,get,message,null,logger,error,ex,get,message,return,mono,empty
RouterFunctions -> public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies);1492190322;Convert the given {@linkplain RouterFunction router function} into a {@link HttpHandler},_using the given strategies._<p>The returned {@code HttpHandler} can be adapted to run in_<ul>_<li>Servlet 3.1+ using the_{@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter},</li>_<li>Reactor using the_{@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter},</li>_<li>Undertow using the_{@link org.springframework.http.server.reactive.UndertowHttpHandlerAdapter}.</li>_</ul>_<p>Note that {@code HttpWebHandlerAdapter} also implements {@link WebHandler}, allowing_for additional filter and exception handler registration through_@param routerFunction the router function to convert_@param strategies the strategies to use_@return an http handler that handles HTTP request using the given router function;public static HttpWebHandlerAdapter toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies) {_		Assert.notNull(routerFunction, "RouterFunction must not be null")__		Assert.notNull(strategies, "HandlerStrategies must not be null")___		return new HttpWebHandlerAdapter(exchange -> {_			ServerRequest request = new DefaultServerRequest(exchange, strategies)__			addAttributes(exchange, request)__			return routerFunction.route(request)_					.defaultIfEmpty(notFound())_					.flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request)))_					.flatMap(response -> wrapException(() -> response.writeTo(exchange, strategies)))_					.onErrorResume(ResponseStatusException.class,_							ex -> {_								exchange.getResponse().setStatusCode(ex.getStatus())__								if (ex.getMessage() != null) {_									logger.error(ex.getMessage())__								}_								return Mono.empty()__							})__		})__	};convert,the,given,linkplain,router,function,router,function,into,a,link,http,handler,using,the,given,strategies,p,the,returned,code,http,handler,can,be,adapted,to,run,in,ul,li,servlet,3,1,using,the,link,org,springframework,http,server,reactive,servlet,http,handler,adapter,li,li,reactor,using,the,link,org,springframework,http,server,reactive,reactor,http,handler,adapter,li,li,undertow,using,the,link,org,springframework,http,server,reactive,undertow,http,handler,adapter,li,ul,p,note,that,code,http,web,handler,adapter,also,implements,link,web,handler,allowing,for,additional,filter,and,exception,handler,registration,through,param,router,function,the,router,function,to,convert,param,strategies,the,strategies,to,use,return,an,http,handler,that,handles,http,request,using,the,given,router,function;public,static,http,web,handler,adapter,to,http,handler,router,function,router,function,handler,strategies,strategies,assert,not,null,router,function,router,function,must,not,be,null,assert,not,null,strategies,handler,strategies,must,not,be,null,return,new,http,web,handler,adapter,exchange,server,request,request,new,default,server,request,exchange,strategies,add,attributes,exchange,request,return,router,function,route,request,default,if,empty,not,found,flat,map,handler,function,wrap,exception,handler,function,handle,request,flat,map,response,wrap,exception,response,write,to,exchange,strategies,on,error,resume,response,status,exception,class,ex,exchange,get,response,set,status,code,ex,get,status,if,ex,get,message,null,logger,error,ex,get,message,return,mono,empty
RouterFunctions -> Builder -> Builder path(String pattern, Consumer<Builder> builderConsumer)_;1530871268;Route to a built router function if the given path prefix pattern applies._This method can be used to create <strong>nested routes</strong>, where a group of routes_share a common path prefix._<p>For instance, the following example creates a nested route with a "/user" path_predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.route()_.path("/user", builder ->_builder.GET(this::listUsers)_.POST(this::createUser)___.build()__</pre>_@param pattern the pattern to match to_@param builderConsumer consumer for a {@code Builder} that provides the nested router_function_@return this builder;Builder path(String pattern, Consumer<Builder> builderConsumer)_;route,to,a,built,router,function,if,the,given,path,prefix,pattern,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,p,for,instance,the,following,example,creates,a,nested,route,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,nested,route,router,functions,route,path,user,builder,builder,get,this,list,users,post,this,create,user,build,pre,param,pattern,the,pattern,to,match,to,param,builder,consumer,consumer,for,a,code,builder,that,provides,the,nested,router,function,return,this,builder;builder,path,string,pattern,consumer,builder,builder,consumer
RouterFunctions -> Builder -> Builder path(String pattern, Consumer<Builder> builderConsumer)_;1530877097;Route to a built router function if the given path prefix pattern applies._This method can be used to create <strong>nested routes</strong>, where a group of routes_share a common path prefix._<p>For instance, the following example creates a nested route with a "/user" path_predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.route()_.path("/user", builder ->_builder.GET(this::listUsers)_.POST(this::createUser)___.build()__</pre>_@param pattern the pattern to match to_@param builderConsumer consumer for a {@code Builder} that provides the nested router_function_@return this builder;Builder path(String pattern, Consumer<Builder> builderConsumer)_;route,to,a,built,router,function,if,the,given,path,prefix,pattern,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,p,for,instance,the,following,example,creates,a,nested,route,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,nested,route,router,functions,route,path,user,builder,builder,get,this,list,users,post,this,create,user,build,pre,param,pattern,the,pattern,to,match,to,param,builder,consumer,consumer,for,a,code,builder,that,provides,the,nested,router,function,return,this,builder;builder,path,string,pattern,consumer,builder,builder,consumer
RouterFunctions -> Builder -> Builder path(String pattern, Consumer<Builder> builderConsumer)_;1530880709;Route to a built router function if the given path prefix pattern applies._This method can be used to create <strong>nested routes</strong>, where a group of routes_share a common path prefix._<p>For instance, the following example creates a nested route with a "/user" path_predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.route()_.path("/user", builder ->_builder.GET(this::listUsers)_.POST(this::createUser))_.build()__</pre>_@param pattern the pattern to match to_@param builderConsumer consumer for a {@code Builder} that provides the nested router_function_@return this builder;Builder path(String pattern, Consumer<Builder> builderConsumer)_;route,to,a,built,router,function,if,the,given,path,prefix,pattern,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,p,for,instance,the,following,example,creates,a,nested,route,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,nested,route,router,functions,route,path,user,builder,builder,get,this,list,users,post,this,create,user,build,pre,param,pattern,the,pattern,to,match,to,param,builder,consumer,consumer,for,a,code,builder,that,provides,the,nested,router,function,return,this,builder;builder,path,string,pattern,consumer,builder,builder,consumer
RouterFunctions -> Builder -> Builder path(String pattern, Consumer<Builder> builderConsumer)_;1537188605;Route to a built router function if the given path prefix pattern applies._This method can be used to create <strong>nested routes</strong>, where a group of routes_share a common path prefix._<p>For instance, the following example creates a nested route with a "/user" path_predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.route()_.path("/user", builder ->_builder.GET(this::listUsers)_.POST(this::createUser))_.build()__</pre>_@param pattern the pattern to match to_@param builderConsumer consumer for a {@code Builder} that provides the nested router_function_@return this builder;Builder path(String pattern, Consumer<Builder> builderConsumer)_;route,to,a,built,router,function,if,the,given,path,prefix,pattern,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,p,for,instance,the,following,example,creates,a,nested,route,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,nested,route,router,functions,route,path,user,builder,builder,get,this,list,users,post,this,create,user,build,pre,param,pattern,the,pattern,to,match,to,param,builder,consumer,consumer,for,a,code,builder,that,provides,the,nested,router,function,return,this,builder;builder,path,string,pattern,consumer,builder,builder,consumer
RouterFunctions -> Builder -> Builder path(String pattern, Consumer<Builder> builderConsumer)_;1538664611;Route to a built router function if the given path prefix pattern applies._This method can be used to create <strong>nested routes</strong>, where a group of routes_share a common path prefix._<p>For instance, the following example creates a nested route with a "/user" path_predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.route()_.path("/user", builder ->_builder.GET(this::listUsers)_.POST(this::createUser))_.build()__</pre>_@param pattern the pattern to match to_@param builderConsumer consumer for a {@code Builder} that provides the nested router_function_@return this builder;Builder path(String pattern, Consumer<Builder> builderConsumer)_;route,to,a,built,router,function,if,the,given,path,prefix,pattern,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,p,for,instance,the,following,example,creates,a,nested,route,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,nested,route,router,functions,route,path,user,builder,builder,get,this,list,users,post,this,create,user,build,pre,param,pattern,the,pattern,to,match,to,param,builder,consumer,consumer,for,a,code,builder,that,provides,the,nested,router,function,return,this,builder;builder,path,string,pattern,consumer,builder,builder,consumer
RouterFunctions -> Builder -> Builder path(String pattern, Consumer<Builder> builderConsumer)_;1539866925;Route to a built router function if the given path prefix pattern applies._This method can be used to create <strong>nested routes</strong>, where a group of routes_share a common path prefix._<p>For instance, the following example creates a nested route with a "/user" path_predicate, so that GET requests for "/user" will list users,_and POST request for "/user" will create a new user._<pre class="code">_RouterFunction&lt_ServerResponse&gt_ nestedRoute =_RouterFunctions.route()_.path("/user", builder ->_builder.GET(this::listUsers)_.POST(this::createUser))_.build()__</pre>_@param pattern the pattern to match to_@param builderConsumer consumer for a {@code Builder} that provides the nested router_function_@return this builder;Builder path(String pattern, Consumer<Builder> builderConsumer)_;route,to,a,built,router,function,if,the,given,path,prefix,pattern,applies,this,method,can,be,used,to,create,strong,nested,routes,strong,where,a,group,of,routes,share,a,common,path,prefix,p,for,instance,the,following,example,creates,a,nested,route,with,a,user,path,predicate,so,that,get,requests,for,user,will,list,users,and,post,request,for,user,will,create,a,new,user,pre,class,code,router,function,lt,server,response,gt,nested,route,router,functions,route,path,user,builder,builder,get,this,list,users,post,this,create,user,build,pre,param,pattern,the,pattern,to,match,to,param,builder,consumer,consumer,for,a,code,builder,that,provides,the,nested,router,function,return,this,builder;builder,path,string,pattern,consumer,builder,builder,consumer
