commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Return the {@link HttpMessageReader HttpMessageReaders} to be used for request body conversion.  * @return the message readers  */ ;/**  * Return the {@link HttpMessageReader HttpMessageReaders} to be used for request body conversion.  * @return the message readers  */ List<HttpMessageReader<?>> messageReaders().
true;;0;1;/**  * Return the {@link HttpMessageWriter HttpMessageWriters} to be used for response body conversion.  * @return the message writers  */ ;/**  * Return the {@link HttpMessageWriter HttpMessageWriters} to be used for response body conversion.  * @return the message writers  */ List<HttpMessageWriter<?>> messageWriters().
true;;0;1;/**  * Return the {@link ViewResolver ViewResolvers} to be used for view name resolution.  * @return the view resolvers  */ ;/**  * Return the {@link ViewResolver ViewResolvers} to be used for view name resolution.  * @return the view resolvers  */ List<ViewResolver> viewResolvers().
true;;0;1;/**  * Return the {@link WebFilter WebFilters} to be used for filtering the request and response.  * @return the web filters  */ ;/**  * Return the {@link WebFilter WebFilters} to be used for filtering the request and response.  * @return the web filters  */ List<WebFilter> webFilters().
true;;0;1;/**  * Return the {@link WebExceptionHandler WebExceptionHandlers} to be used for handling exceptions.  * @return the exception handlers  */ ;/**  * Return the {@link WebExceptionHandler WebExceptionHandlers} to be used for handling exceptions.  * @return the exception handlers  */ List<WebExceptionHandler> exceptionHandlers().
true;;0;1;/**  * Return the {@link LocaleContextResolver} to be used for resolving locale context.  * @return the locale context resolver  */ ;/**  * Return the {@link LocaleContextResolver} to be used for resolving locale context.  * @return the locale context resolver  */ LocaleContextResolver localeContextResolver().
true;static;0;3;/**  * Return a new {@code HandlerStrategies} with default initialization.  * @return the new {@code HandlerStrategies}  */ ;// Static methods /**  * Return a new {@code HandlerStrategies} with default initialization.  * @return the new {@code HandlerStrategies}  */ static HandlerStrategies withDefaults() {     return builder().build(). }
true;static;0;5;/**  * Return a mutable builder for a {@code HandlerStrategies} with default initialization.  * @return the builder  */ ;/**  * Return a mutable builder for a {@code HandlerStrategies} with default initialization.  * @return the builder  */ static Builder builder() {     DefaultHandlerStrategiesBuilder builder = new DefaultHandlerStrategiesBuilder().     builder.defaultConfiguration().     return builder. }
true;static;0;3;/**  * Return a mutable, empty builder for a {@code HandlerStrategies}.  * @return the builder  */ ;/**  * Return a mutable, empty builder for a {@code HandlerStrategies}.  * @return the builder  */ static Builder empty() {     return new DefaultHandlerStrategiesBuilder(). }
true;;1;1;/**  * Customize the list of server-side HTTP message readers and writers.  * @param consumer the consumer to customize the codecs  * @return this builder  */ ;/**  * Customize the list of server-side HTTP message readers and writers.  * @param consumer the consumer to customize the codecs  * @return this builder  */ Builder codecs(Consumer<ServerCodecConfigurer> consumer).
true;;1;1;/**  * Add the given view resolver to this builder.  * @param viewResolver the view resolver to add  * @return this builder  */ ;/**  * Add the given view resolver to this builder.  * @param viewResolver the view resolver to add  * @return this builder  */ Builder viewResolver(ViewResolver viewResolver).
true;;1;1;/**  * Add the given web filter to this builder.  * @param filter the filter to add  * @return this builder  */ ;/**  * Add the given web filter to this builder.  * @param filter the filter to add  * @return this builder  */ Builder webFilter(WebFilter filter).
true;;1;1;/**  * Add the given exception handler to this builder.  * @param exceptionHandler the exception handler to add  * @return this builder  */ ;/**  * Add the given exception handler to this builder.  * @param exceptionHandler the exception handler to add  * @return this builder  */ Builder exceptionHandler(WebExceptionHandler exceptionHandler).
true;;1;1;/**  * Add the given locale context resolver to this builder.  * @param localeContextResolver the locale context resolver to add  * @return this builder  */ ;/**  * Add the given locale context resolver to this builder.  * @param localeContextResolver the locale context resolver to add  * @return this builder  */ Builder localeContextResolver(LocaleContextResolver localeContextResolver).
true;;0;1;/**  * Builds the {@link HandlerStrategies}.  * @return the built strategies  */ ;/**  * Builds the {@link HandlerStrategies}.  * @return the built strategies  */ HandlerStrategies build().
