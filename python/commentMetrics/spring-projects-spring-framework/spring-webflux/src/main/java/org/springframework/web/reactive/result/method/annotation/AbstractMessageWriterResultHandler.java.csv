# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractMessageWriterResultHandler -> @SuppressWarnings({"unchecked", "rawtypes"}) 	protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter, 			@Nullable MethodParameter actualParam, ServerWebExchange exchange);1542050977;Write a given body to the response with {@link HttpMessageWriter}._@param body the object to write_@param bodyParameter the {@link MethodParameter} of the body to write_@param actualParam the actual return type of the method that returned the value__could be different from {@code bodyParameter} when processing {@code HttpEntity}_for example_@param exchange the current exchange_@return indicates completion or error_@since 5.0.2;@SuppressWarnings({"unchecked", "rawtypes"})_	protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter,_			@Nullable MethodParameter actualParam, ServerWebExchange exchange) {__		ResolvableType bodyType = ResolvableType.forMethodParameter(bodyParameter)__		ResolvableType actualType = (actualParam != null ? ResolvableType.forMethodParameter(actualParam) : bodyType)__		ReactiveAdapter adapter = getAdapterRegistry().getAdapter(bodyType.resolve(), body)___		Publisher<?> publisher__		ResolvableType elementType__		if (adapter != null) {_			publisher = adapter.toPublisher(body)__			ResolvableType genericType = bodyType.getGeneric()__			elementType = getElementType(adapter, genericType)__		}_		else {_			publisher = Mono.justOrEmpty(body)__			elementType = (bodyType.toClass() == Object.class && body != null ?_					ResolvableType.forInstance(body) : bodyType)__		}__		if (elementType.resolve() == void.class || elementType.resolve() == Void.class) {_			return Mono.from((Publisher<Void>) publisher)__		}__		ServerHttpRequest request = exchange.getRequest()__		ServerHttpResponse response = exchange.getResponse()__		MediaType bestMediaType = selectMediaType(exchange, () -> getMediaTypesFor(elementType))__		if (bestMediaType != null) {_			String logPrefix = exchange.getLogPrefix()__			if (logger.isDebugEnabled()) {_				logger.debug(logPrefix +_						(publisher instanceof Mono ? "0..1" : "0..N") + " [" + elementType + "]")__			}_			for (HttpMessageWriter<?> writer : getMessageWriters()) {_				if (writer.canWrite(elementType, bestMediaType)) {_					return writer.write((Publisher) publisher, actualType, elementType, bestMediaType,_							request, response, Hints.from(Hints.LOG_PREFIX_HINT, logPrefix))__				}_			}_		}_		else {_			if (getMediaTypesFor(elementType).isEmpty()) {_				return Mono.error(new IllegalStateException("No writer for : " + elementType))__			}_		}__		return Mono.error(new NotAcceptableStatusException(getMediaTypesFor(elementType)))__	};write,a,given,body,to,the,response,with,link,http,message,writer,param,body,the,object,to,write,param,body,parameter,the,link,method,parameter,of,the,body,to,write,param,actual,param,the,actual,return,type,of,the,method,that,returned,the,value,could,be,different,from,code,body,parameter,when,processing,code,http,entity,for,example,param,exchange,the,current,exchange,return,indicates,completion,or,error,since,5,0,2;suppress,warnings,unchecked,rawtypes,protected,mono,void,write,body,nullable,object,body,method,parameter,body,parameter,nullable,method,parameter,actual,param,server,web,exchange,exchange,resolvable,type,body,type,resolvable,type,for,method,parameter,body,parameter,resolvable,type,actual,type,actual,param,null,resolvable,type,for,method,parameter,actual,param,body,type,reactive,adapter,adapter,get,adapter,registry,get,adapter,body,type,resolve,body,publisher,publisher,resolvable,type,element,type,if,adapter,null,publisher,adapter,to,publisher,body,resolvable,type,generic,type,body,type,get,generic,element,type,get,element,type,adapter,generic,type,else,publisher,mono,just,or,empty,body,element,type,body,type,to,class,object,class,body,null,resolvable,type,for,instance,body,body,type,if,element,type,resolve,void,class,element,type,resolve,void,class,return,mono,from,publisher,void,publisher,server,http,request,request,exchange,get,request,server,http,response,response,exchange,get,response,media,type,best,media,type,select,media,type,exchange,get,media,types,for,element,type,if,best,media,type,null,string,log,prefix,exchange,get,log,prefix,if,logger,is,debug,enabled,logger,debug,log,prefix,publisher,instanceof,mono,0,1,0,n,element,type,for,http,message,writer,writer,get,message,writers,if,writer,can,write,element,type,best,media,type,return,writer,write,publisher,publisher,actual,type,element,type,best,media,type,request,response,hints,from,hints,log,prefix,else,if,get,media,types,for,element,type,is,empty,return,mono,error,new,illegal,state,exception,no,writer,for,element,type,return,mono,error,new,not,acceptable,status,exception,get,media,types,for,element,type
AbstractMessageWriterResultHandler -> @SuppressWarnings({"unchecked", "rawtypes"}) 	protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter, 			@Nullable MethodParameter actualParam, ServerWebExchange exchange);1549365291;Write a given body to the response with {@link HttpMessageWriter}._@param body the object to write_@param bodyParameter the {@link MethodParameter} of the body to write_@param actualParam the actual return type of the method that returned the value__could be different from {@code bodyParameter} when processing {@code HttpEntity}_for example_@param exchange the current exchange_@return indicates completion or error_@since 5.0.2;@SuppressWarnings({"unchecked", "rawtypes"})_	protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter,_			@Nullable MethodParameter actualParam, ServerWebExchange exchange) {__		ResolvableType bodyType = ResolvableType.forMethodParameter(bodyParameter)__		ResolvableType actualType = (actualParam != null ? ResolvableType.forMethodParameter(actualParam) : bodyType)__		ReactiveAdapter adapter = getAdapterRegistry().getAdapter(bodyType.resolve(), body)___		Publisher<?> publisher__		ResolvableType elementType__		if (adapter != null) {_			publisher = adapter.toPublisher(body)__			ResolvableType genericType = bodyType.getGeneric()__			elementType = getElementType(adapter, genericType)__		}_		else {_			publisher = Mono.justOrEmpty(body)__			elementType = (bodyType.toClass() == Object.class && body != null ?_					ResolvableType.forInstance(body) : bodyType)__		}__		if (elementType.resolve() == void.class || elementType.resolve() == Void.class) {_			return Mono.from((Publisher<Void>) publisher)__		}__		ServerHttpRequest request = exchange.getRequest()__		ServerHttpResponse response = exchange.getResponse()__		List<MediaType> writableMediaTypes = getMediaTypesFor(elementType)__		MediaType bestMediaType = selectMediaType(exchange, () -> writableMediaTypes)__		if (bestMediaType != null) {_			String logPrefix = exchange.getLogPrefix()__			if (logger.isDebugEnabled()) {_				logger.debug(logPrefix +_						(publisher instanceof Mono ? "0..1" : "0..N") + " [" + elementType + "]")__			}_			for (HttpMessageWriter<?> writer : getMessageWriters()) {_				if (writer.canWrite(elementType, bestMediaType)) {_					return writer.write((Publisher) publisher, actualType, elementType, bestMediaType,_							request, response, Hints.from(Hints.LOG_PREFIX_HINT, logPrefix))__				}_			}_		}_		else {_			if (writableMediaTypes.isEmpty()) {_				return Mono.error(new IllegalStateException("No writer for : " + elementType))__			}_		}__		return Mono.error(new NotAcceptableStatusException(writableMediaTypes))__	};write,a,given,body,to,the,response,with,link,http,message,writer,param,body,the,object,to,write,param,body,parameter,the,link,method,parameter,of,the,body,to,write,param,actual,param,the,actual,return,type,of,the,method,that,returned,the,value,could,be,different,from,code,body,parameter,when,processing,code,http,entity,for,example,param,exchange,the,current,exchange,return,indicates,completion,or,error,since,5,0,2;suppress,warnings,unchecked,rawtypes,protected,mono,void,write,body,nullable,object,body,method,parameter,body,parameter,nullable,method,parameter,actual,param,server,web,exchange,exchange,resolvable,type,body,type,resolvable,type,for,method,parameter,body,parameter,resolvable,type,actual,type,actual,param,null,resolvable,type,for,method,parameter,actual,param,body,type,reactive,adapter,adapter,get,adapter,registry,get,adapter,body,type,resolve,body,publisher,publisher,resolvable,type,element,type,if,adapter,null,publisher,adapter,to,publisher,body,resolvable,type,generic,type,body,type,get,generic,element,type,get,element,type,adapter,generic,type,else,publisher,mono,just,or,empty,body,element,type,body,type,to,class,object,class,body,null,resolvable,type,for,instance,body,body,type,if,element,type,resolve,void,class,element,type,resolve,void,class,return,mono,from,publisher,void,publisher,server,http,request,request,exchange,get,request,server,http,response,response,exchange,get,response,list,media,type,writable,media,types,get,media,types,for,element,type,media,type,best,media,type,select,media,type,exchange,writable,media,types,if,best,media,type,null,string,log,prefix,exchange,get,log,prefix,if,logger,is,debug,enabled,logger,debug,log,prefix,publisher,instanceof,mono,0,1,0,n,element,type,for,http,message,writer,writer,get,message,writers,if,writer,can,write,element,type,best,media,type,return,writer,write,publisher,publisher,actual,type,element,type,best,media,type,request,response,hints,from,hints,log,prefix,else,if,writable,media,types,is,empty,return,mono,error,new,illegal,state,exception,no,writer,for,element,type,return,mono,error,new,not,acceptable,status,exception,writable,media,types
AbstractMessageWriterResultHandler -> protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter, ServerWebExchange exchange);1510841578;Write a given body to the response with {@link HttpMessageWriter}._@param body the object to write_@param bodyParameter the {@link MethodParameter} of the body to write_@param exchange the current exchange_@return indicates completion or error_@see #writeBody(Object, MethodParameter, MethodParameter, ServerWebExchange);protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter, ServerWebExchange exchange) {_		return this.writeBody(body, bodyParameter, null, exchange)__	};write,a,given,body,to,the,response,with,link,http,message,writer,param,body,the,object,to,write,param,body,parameter,the,link,method,parameter,of,the,body,to,write,param,exchange,the,current,exchange,return,indicates,completion,or,error,see,write,body,object,method,parameter,method,parameter,server,web,exchange;protected,mono,void,write,body,nullable,object,body,method,parameter,body,parameter,server,web,exchange,exchange,return,this,write,body,body,body,parameter,null,exchange
AbstractMessageWriterResultHandler -> protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter, ServerWebExchange exchange);1511215342;Write a given body to the response with {@link HttpMessageWriter}._@param body the object to write_@param bodyParameter the {@link MethodParameter} of the body to write_@param exchange the current exchange_@return indicates completion or error_@see #writeBody(Object, MethodParameter, MethodParameter, ServerWebExchange);protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter, ServerWebExchange exchange) {_		return this.writeBody(body, bodyParameter, null, exchange)__	};write,a,given,body,to,the,response,with,link,http,message,writer,param,body,the,object,to,write,param,body,parameter,the,link,method,parameter,of,the,body,to,write,param,exchange,the,current,exchange,return,indicates,completion,or,error,see,write,body,object,method,parameter,method,parameter,server,web,exchange;protected,mono,void,write,body,nullable,object,body,method,parameter,body,parameter,server,web,exchange,exchange,return,this,write,body,body,body,parameter,null,exchange
AbstractMessageWriterResultHandler -> protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter, ServerWebExchange exchange);1520772267;Write a given body to the response with {@link HttpMessageWriter}._@param body the object to write_@param bodyParameter the {@link MethodParameter} of the body to write_@param exchange the current exchange_@return indicates completion or error_@see #writeBody(Object, MethodParameter, MethodParameter, ServerWebExchange);protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter, ServerWebExchange exchange) {_		return this.writeBody(body, bodyParameter, null, exchange)__	};write,a,given,body,to,the,response,with,link,http,message,writer,param,body,the,object,to,write,param,body,parameter,the,link,method,parameter,of,the,body,to,write,param,exchange,the,current,exchange,return,indicates,completion,or,error,see,write,body,object,method,parameter,method,parameter,server,web,exchange;protected,mono,void,write,body,nullable,object,body,method,parameter,body,parameter,server,web,exchange,exchange,return,this,write,body,body,body,parameter,null,exchange
AbstractMessageWriterResultHandler -> protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter, ServerWebExchange exchange);1529721864;Write a given body to the response with {@link HttpMessageWriter}._@param body the object to write_@param bodyParameter the {@link MethodParameter} of the body to write_@param exchange the current exchange_@return indicates completion or error_@see #writeBody(Object, MethodParameter, MethodParameter, ServerWebExchange);protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter, ServerWebExchange exchange) {_		return this.writeBody(body, bodyParameter, null, exchange)__	};write,a,given,body,to,the,response,with,link,http,message,writer,param,body,the,object,to,write,param,body,parameter,the,link,method,parameter,of,the,body,to,write,param,exchange,the,current,exchange,return,indicates,completion,or,error,see,write,body,object,method,parameter,method,parameter,server,web,exchange;protected,mono,void,write,body,nullable,object,body,method,parameter,body,parameter,server,web,exchange,exchange,return,this,write,body,body,body,parameter,null,exchange
AbstractMessageWriterResultHandler -> protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter, ServerWebExchange exchange);1530174524;Write a given body to the response with {@link HttpMessageWriter}._@param body the object to write_@param bodyParameter the {@link MethodParameter} of the body to write_@param exchange the current exchange_@return indicates completion or error_@see #writeBody(Object, MethodParameter, MethodParameter, ServerWebExchange);protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter, ServerWebExchange exchange) {_		return this.writeBody(body, bodyParameter, null, exchange)__	};write,a,given,body,to,the,response,with,link,http,message,writer,param,body,the,object,to,write,param,body,parameter,the,link,method,parameter,of,the,body,to,write,param,exchange,the,current,exchange,return,indicates,completion,or,error,see,write,body,object,method,parameter,method,parameter,server,web,exchange;protected,mono,void,write,body,nullable,object,body,method,parameter,body,parameter,server,web,exchange,exchange,return,this,write,body,body,body,parameter,null,exchange
AbstractMessageWriterResultHandler -> protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter, ServerWebExchange exchange);1530190293;Write a given body to the response with {@link HttpMessageWriter}._@param body the object to write_@param bodyParameter the {@link MethodParameter} of the body to write_@param exchange the current exchange_@return indicates completion or error_@see #writeBody(Object, MethodParameter, MethodParameter, ServerWebExchange);protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter, ServerWebExchange exchange) {_		return this.writeBody(body, bodyParameter, null, exchange)__	};write,a,given,body,to,the,response,with,link,http,message,writer,param,body,the,object,to,write,param,body,parameter,the,link,method,parameter,of,the,body,to,write,param,exchange,the,current,exchange,return,indicates,completion,or,error,see,write,body,object,method,parameter,method,parameter,server,web,exchange;protected,mono,void,write,body,nullable,object,body,method,parameter,body,parameter,server,web,exchange,exchange,return,this,write,body,body,body,parameter,null,exchange
AbstractMessageWriterResultHandler -> protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter, ServerWebExchange exchange);1530294255;Write a given body to the response with {@link HttpMessageWriter}._@param body the object to write_@param bodyParameter the {@link MethodParameter} of the body to write_@param exchange the current exchange_@return indicates completion or error_@see #writeBody(Object, MethodParameter, MethodParameter, ServerWebExchange);protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter, ServerWebExchange exchange) {_		return this.writeBody(body, bodyParameter, null, exchange)__	};write,a,given,body,to,the,response,with,link,http,message,writer,param,body,the,object,to,write,param,body,parameter,the,link,method,parameter,of,the,body,to,write,param,exchange,the,current,exchange,return,indicates,completion,or,error,see,write,body,object,method,parameter,method,parameter,server,web,exchange;protected,mono,void,write,body,nullable,object,body,method,parameter,body,parameter,server,web,exchange,exchange,return,this,write,body,body,body,parameter,null,exchange
AbstractMessageWriterResultHandler -> protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter, ServerWebExchange exchange);1530793633;Write a given body to the response with {@link HttpMessageWriter}._@param body the object to write_@param bodyParameter the {@link MethodParameter} of the body to write_@param exchange the current exchange_@return indicates completion or error_@see #writeBody(Object, MethodParameter, MethodParameter, ServerWebExchange);protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter, ServerWebExchange exchange) {_		return this.writeBody(body, bodyParameter, null, exchange)__	};write,a,given,body,to,the,response,with,link,http,message,writer,param,body,the,object,to,write,param,body,parameter,the,link,method,parameter,of,the,body,to,write,param,exchange,the,current,exchange,return,indicates,completion,or,error,see,write,body,object,method,parameter,method,parameter,server,web,exchange;protected,mono,void,write,body,nullable,object,body,method,parameter,body,parameter,server,web,exchange,exchange,return,this,write,body,body,body,parameter,null,exchange
AbstractMessageWriterResultHandler -> protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter, ServerWebExchange exchange);1530793695;Write a given body to the response with {@link HttpMessageWriter}._@param body the object to write_@param bodyParameter the {@link MethodParameter} of the body to write_@param exchange the current exchange_@return indicates completion or error_@see #writeBody(Object, MethodParameter, MethodParameter, ServerWebExchange);protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter, ServerWebExchange exchange) {_		return this.writeBody(body, bodyParameter, null, exchange)__	};write,a,given,body,to,the,response,with,link,http,message,writer,param,body,the,object,to,write,param,body,parameter,the,link,method,parameter,of,the,body,to,write,param,exchange,the,current,exchange,return,indicates,completion,or,error,see,write,body,object,method,parameter,method,parameter,server,web,exchange;protected,mono,void,write,body,nullable,object,body,method,parameter,body,parameter,server,web,exchange,exchange,return,this,write,body,body,body,parameter,null,exchange
AbstractMessageWriterResultHandler -> protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter, ServerWebExchange exchange);1542050977;Write a given body to the response with {@link HttpMessageWriter}._@param body the object to write_@param bodyParameter the {@link MethodParameter} of the body to write_@param exchange the current exchange_@return indicates completion or error_@see #writeBody(Object, MethodParameter, MethodParameter, ServerWebExchange);protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter, ServerWebExchange exchange) {_		return this.writeBody(body, bodyParameter, null, exchange)__	};write,a,given,body,to,the,response,with,link,http,message,writer,param,body,the,object,to,write,param,body,parameter,the,link,method,parameter,of,the,body,to,write,param,exchange,the,current,exchange,return,indicates,completion,or,error,see,write,body,object,method,parameter,method,parameter,server,web,exchange;protected,mono,void,write,body,nullable,object,body,method,parameter,body,parameter,server,web,exchange,exchange,return,this,write,body,body,body,parameter,null,exchange
AbstractMessageWriterResultHandler -> protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter, ServerWebExchange exchange);1549365291;Write a given body to the response with {@link HttpMessageWriter}._@param body the object to write_@param bodyParameter the {@link MethodParameter} of the body to write_@param exchange the current exchange_@return indicates completion or error_@see #writeBody(Object, MethodParameter, MethodParameter, ServerWebExchange);protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter, ServerWebExchange exchange) {_		return this.writeBody(body, bodyParameter, null, exchange)__	};write,a,given,body,to,the,response,with,link,http,message,writer,param,body,the,object,to,write,param,body,parameter,the,link,method,parameter,of,the,body,to,write,param,exchange,the,current,exchange,return,indicates,completion,or,error,see,write,body,object,method,parameter,method,parameter,server,web,exchange;protected,mono,void,write,body,nullable,object,body,method,parameter,body,parameter,server,web,exchange,exchange,return,this,write,body,body,body,parameter,null,exchange
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry adapterRegistry);1494019148;Constructor with an additional {@link ReactiveAdapterRegistry}._@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type_@param adapterRegistry for adapting other reactive types (e.g. rx.Observable,_rx.Single, etc.) to Flux or Mono;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry adapterRegistry) {__		super(contentTypeResolver, adapterRegistry)__		Assert.notEmpty(messageWriters, "At least one message writer is required")__		this.messageWriters = messageWriters__	};constructor,with,an,additional,link,reactive,adapter,registry,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type,param,adapter,registry,for,adapting,other,reactive,types,e,g,rx,observable,rx,single,etc,to,flux,or,mono;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,adapter,registry,super,content,type,resolver,adapter,registry,assert,not,empty,message,writers,at,least,one,message,writer,is,required,this,message,writers,message,writers
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry adapterRegistry);1496837955;Constructor with an additional {@link ReactiveAdapterRegistry}._@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type_@param adapterRegistry for adapting other reactive types (e.g. rx.Observable,_rx.Single, etc.) to Flux or Mono;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry adapterRegistry) {__		super(contentTypeResolver, adapterRegistry)__		Assert.notEmpty(messageWriters, "At least one message writer is required")__		this.messageWriters = messageWriters__	};constructor,with,an,additional,link,reactive,adapter,registry,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type,param,adapter,registry,for,adapting,other,reactive,types,e,g,rx,observable,rx,single,etc,to,flux,or,mono;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,adapter,registry,super,content,type,resolver,adapter,registry,assert,not,empty,message,writers,at,least,one,message,writer,is,required,this,message,writers,message,writers
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry adapterRegistry);1499170790;Constructor with an additional {@link ReactiveAdapterRegistry}._@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type_@param adapterRegistry for adapting other reactive types (e.g. rx.Observable,_rx.Single, etc.) to Flux or Mono;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry adapterRegistry) {__		super(contentTypeResolver, adapterRegistry)__		Assert.notEmpty(messageWriters, "At least one message writer is required")__		this.messageWriters = messageWriters__	};constructor,with,an,additional,link,reactive,adapter,registry,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type,param,adapter,registry,for,adapting,other,reactive,types,e,g,rx,observable,rx,single,etc,to,flux,or,mono;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,adapter,registry,super,content,type,resolver,adapter,registry,assert,not,empty,message,writers,at,least,one,message,writer,is,required,this,message,writers,message,writers
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry adapterRegistry);1504642295;Constructor with an additional {@link ReactiveAdapterRegistry}._@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type_@param adapterRegistry for adapting other reactive types (e.g. rx.Observable,_rx.Single, etc.) to Flux or Mono;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry adapterRegistry) {__		super(contentTypeResolver, adapterRegistry)__		Assert.notEmpty(messageWriters, "At least one message writer is required")__		this.messageWriters = messageWriters__	};constructor,with,an,additional,link,reactive,adapter,registry,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type,param,adapter,registry,for,adapting,other,reactive,types,e,g,rx,observable,rx,single,etc,to,flux,or,mono;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,adapter,registry,super,content,type,resolver,adapter,registry,assert,not,empty,message,writers,at,least,one,message,writer,is,required,this,message,writers,message,writers
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry adapterRegistry);1510344303;Constructor with an additional {@link ReactiveAdapterRegistry}._@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type_@param adapterRegistry for adapting other reactive types (e.g. rx.Observable,_rx.Single, etc.) to Flux or Mono;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry adapterRegistry) {__		super(contentTypeResolver, adapterRegistry)__		Assert.notEmpty(messageWriters, "At least one message writer is required")__		this.messageWriters = messageWriters__	};constructor,with,an,additional,link,reactive,adapter,registry,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type,param,adapter,registry,for,adapting,other,reactive,types,e,g,rx,observable,rx,single,etc,to,flux,or,mono;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,adapter,registry,super,content,type,resolver,adapter,registry,assert,not,empty,message,writers,at,least,one,message,writer,is,required,this,message,writers,message,writers
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry adapterRegistry);1510841578;Constructor with an additional {@link ReactiveAdapterRegistry}._@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type_@param adapterRegistry for adapting other reactive types (e.g. rx.Observable,_rx.Single, etc.) to Flux or Mono;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry adapterRegistry) {__		super(contentTypeResolver, adapterRegistry)__		Assert.notEmpty(messageWriters, "At least one message writer is required")__		this.messageWriters = messageWriters__	};constructor,with,an,additional,link,reactive,adapter,registry,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type,param,adapter,registry,for,adapting,other,reactive,types,e,g,rx,observable,rx,single,etc,to,flux,or,mono;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,adapter,registry,super,content,type,resolver,adapter,registry,assert,not,empty,message,writers,at,least,one,message,writer,is,required,this,message,writers,message,writers
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry adapterRegistry);1511215342;Constructor with an additional {@link ReactiveAdapterRegistry}._@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type_@param adapterRegistry for adapting other reactive types (e.g. rx.Observable,_rx.Single, etc.) to Flux or Mono;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry adapterRegistry) {__		super(contentTypeResolver, adapterRegistry)__		Assert.notEmpty(messageWriters, "At least one message writer is required")__		this.messageWriters = messageWriters__	};constructor,with,an,additional,link,reactive,adapter,registry,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type,param,adapter,registry,for,adapting,other,reactive,types,e,g,rx,observable,rx,single,etc,to,flux,or,mono;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,adapter,registry,super,content,type,resolver,adapter,registry,assert,not,empty,message,writers,at,least,one,message,writer,is,required,this,message,writers,message,writers
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry adapterRegistry);1520772267;Constructor with an additional {@link ReactiveAdapterRegistry}._@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type_@param adapterRegistry for adapting other reactive types (e.g. rx.Observable,_rx.Single, etc.) to Flux or Mono;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry adapterRegistry) {__		super(contentTypeResolver, adapterRegistry)__		Assert.notEmpty(messageWriters, "At least one message writer is required")__		this.messageWriters = messageWriters__	};constructor,with,an,additional,link,reactive,adapter,registry,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type,param,adapter,registry,for,adapting,other,reactive,types,e,g,rx,observable,rx,single,etc,to,flux,or,mono;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,adapter,registry,super,content,type,resolver,adapter,registry,assert,not,empty,message,writers,at,least,one,message,writer,is,required,this,message,writers,message,writers
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry adapterRegistry);1529721864;Constructor with an additional {@link ReactiveAdapterRegistry}._@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type_@param adapterRegistry for adapting other reactive types (e.g. rx.Observable,_rx.Single, etc.) to Flux or Mono;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry adapterRegistry) {__		super(contentTypeResolver, adapterRegistry)__		Assert.notEmpty(messageWriters, "At least one message writer is required")__		this.messageWriters = messageWriters__	};constructor,with,an,additional,link,reactive,adapter,registry,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type,param,adapter,registry,for,adapting,other,reactive,types,e,g,rx,observable,rx,single,etc,to,flux,or,mono;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,adapter,registry,super,content,type,resolver,adapter,registry,assert,not,empty,message,writers,at,least,one,message,writer,is,required,this,message,writers,message,writers
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry adapterRegistry);1530174524;Constructor with an additional {@link ReactiveAdapterRegistry}._@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type_@param adapterRegistry for adapting other reactive types (e.g. rx.Observable,_rx.Single, etc.) to Flux or Mono;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry adapterRegistry) {__		super(contentTypeResolver, adapterRegistry)__		Assert.notEmpty(messageWriters, "At least one message writer is required")__		this.messageWriters = messageWriters__	};constructor,with,an,additional,link,reactive,adapter,registry,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type,param,adapter,registry,for,adapting,other,reactive,types,e,g,rx,observable,rx,single,etc,to,flux,or,mono;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,adapter,registry,super,content,type,resolver,adapter,registry,assert,not,empty,message,writers,at,least,one,message,writer,is,required,this,message,writers,message,writers
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry adapterRegistry);1530190293;Constructor with an additional {@link ReactiveAdapterRegistry}._@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type_@param adapterRegistry for adapting other reactive types (e.g. rx.Observable,_rx.Single, etc.) to Flux or Mono;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry adapterRegistry) {__		super(contentTypeResolver, adapterRegistry)__		Assert.notEmpty(messageWriters, "At least one message writer is required")__		this.messageWriters = messageWriters__	};constructor,with,an,additional,link,reactive,adapter,registry,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type,param,adapter,registry,for,adapting,other,reactive,types,e,g,rx,observable,rx,single,etc,to,flux,or,mono;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,adapter,registry,super,content,type,resolver,adapter,registry,assert,not,empty,message,writers,at,least,one,message,writer,is,required,this,message,writers,message,writers
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry adapterRegistry);1530294255;Constructor with an additional {@link ReactiveAdapterRegistry}._@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type_@param adapterRegistry for adapting other reactive types (e.g. rx.Observable,_rx.Single, etc.) to Flux or Mono;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry adapterRegistry) {__		super(contentTypeResolver, adapterRegistry)__		Assert.notEmpty(messageWriters, "At least one message writer is required")__		this.messageWriters = messageWriters__	};constructor,with,an,additional,link,reactive,adapter,registry,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type,param,adapter,registry,for,adapting,other,reactive,types,e,g,rx,observable,rx,single,etc,to,flux,or,mono;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,adapter,registry,super,content,type,resolver,adapter,registry,assert,not,empty,message,writers,at,least,one,message,writer,is,required,this,message,writers,message,writers
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry adapterRegistry);1530793633;Constructor with an additional {@link ReactiveAdapterRegistry}._@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type_@param adapterRegistry for adapting other reactive types (e.g. rx.Observable,_rx.Single, etc.) to Flux or Mono;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry adapterRegistry) {__		super(contentTypeResolver, adapterRegistry)__		Assert.notEmpty(messageWriters, "At least one message writer is required")__		this.messageWriters = messageWriters__	};constructor,with,an,additional,link,reactive,adapter,registry,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type,param,adapter,registry,for,adapting,other,reactive,types,e,g,rx,observable,rx,single,etc,to,flux,or,mono;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,adapter,registry,super,content,type,resolver,adapter,registry,assert,not,empty,message,writers,at,least,one,message,writer,is,required,this,message,writers,message,writers
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry adapterRegistry);1530793695;Constructor with an additional {@link ReactiveAdapterRegistry}._@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type_@param adapterRegistry for adapting other reactive types (e.g. rx.Observable,_rx.Single, etc.) to Flux or Mono;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry adapterRegistry) {__		super(contentTypeResolver, adapterRegistry)__		Assert.notEmpty(messageWriters, "At least one message writer is required")__		this.messageWriters = messageWriters__	};constructor,with,an,additional,link,reactive,adapter,registry,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type,param,adapter,registry,for,adapting,other,reactive,types,e,g,rx,observable,rx,single,etc,to,flux,or,mono;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,adapter,registry,super,content,type,resolver,adapter,registry,assert,not,empty,message,writers,at,least,one,message,writer,is,required,this,message,writers,message,writers
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry adapterRegistry);1542050977;Constructor with an additional {@link ReactiveAdapterRegistry}._@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type_@param adapterRegistry for adapting other reactive types (e.g. rx.Observable,_rx.Single, etc.) to Flux or Mono;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry adapterRegistry) {__		super(contentTypeResolver, adapterRegistry)__		Assert.notEmpty(messageWriters, "At least one message writer is required")__		this.messageWriters = messageWriters__	};constructor,with,an,additional,link,reactive,adapter,registry,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type,param,adapter,registry,for,adapting,other,reactive,types,e,g,rx,observable,rx,single,etc,to,flux,or,mono;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,adapter,registry,super,content,type,resolver,adapter,registry,assert,not,empty,message,writers,at,least,one,message,writer,is,required,this,message,writers,message,writers
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry adapterRegistry);1549365291;Constructor with an additional {@link ReactiveAdapterRegistry}._@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type_@param adapterRegistry for adapting other reactive types (e.g. rx.Observable,_rx.Single, etc.) to Flux or Mono;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry adapterRegistry) {__		super(contentTypeResolver, adapterRegistry)__		Assert.notEmpty(messageWriters, "At least one message writer is required")__		this.messageWriters = messageWriters__	};constructor,with,an,additional,link,reactive,adapter,registry,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type,param,adapter,registry,for,adapting,other,reactive,types,e,g,rx,observable,rx,single,etc,to,flux,or,mono;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,adapter,registry,super,content,type,resolver,adapter,registry,assert,not,empty,message,writers,at,least,one,message,writer,is,required,this,message,writers,message,writers
AbstractMessageWriterResultHandler -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter, 			@Nullable MethodParameter actualParam, ServerWebExchange exchange);1530190293;Write a given body to the response with {@link HttpMessageWriter}._@param body the object to write_@param bodyParameter the {@link MethodParameter} of the body to write_@param actualParam the actual return type of the method that returned the value__could be different from {@code bodyParameter} when processing {@code HttpEntity}_for example_@param exchange the current exchange_@return indicates completion or error_@since 5.0.2;@SuppressWarnings({ "unchecked", "rawtypes" })_	protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter,_			@Nullable MethodParameter actualParam, ServerWebExchange exchange) {__		ResolvableType bodyType = ResolvableType.forMethodParameter(bodyParameter)__		ResolvableType actualType = (actualParam != null ? ResolvableType.forMethodParameter(actualParam) : bodyType)__		Class<?> bodyClass = bodyType.resolve()__		ReactiveAdapter adapter = getAdapterRegistry().getAdapter(bodyClass, body)___		Publisher<?> publisher__		ResolvableType elementType__		if (adapter != null) {_			publisher = adapter.toPublisher(body)__			ResolvableType genericType = bodyType.getGeneric(0)__			elementType = getElementType(adapter, genericType)__		}_		else {_			publisher = Mono.justOrEmpty(body)__			elementType = ((bodyClass == null || bodyClass.equals(Object.class)) && body != null ?_					ResolvableType.forInstance(body) : bodyType)__		}__		if (void.class == elementType.getRawClass() || Void.class == elementType.getRawClass()) {_			return Mono.from((Publisher<Void>) publisher)__		}__		ServerHttpRequest request = exchange.getRequest()__		ServerHttpResponse response = exchange.getResponse()__		MediaType bestMediaType = selectMediaType(exchange, () -> getMediaTypesFor(elementType))__		if (bestMediaType != null) {_			if (logger.isDebugEnabled()) {_				logger.debug((publisher instanceof Mono ? "0..1" : "0..N") + " [" + elementType + "]")__			}_			for (HttpMessageWriter<?> writer : getMessageWriters()) {_				if (writer.canWrite(elementType, bestMediaType)) {_					return writer.write((Publisher) publisher, actualType, elementType,_							bestMediaType, request, response, Collections.emptyMap())__				}_			}_		}_		else {_			if (getMediaTypesFor(elementType).isEmpty()) {_				return Mono.error(new IllegalStateException("No writer for : " + elementType))__			}_		}__		return Mono.error(new NotAcceptableStatusException(getMediaTypesFor(elementType)))__	};write,a,given,body,to,the,response,with,link,http,message,writer,param,body,the,object,to,write,param,body,parameter,the,link,method,parameter,of,the,body,to,write,param,actual,param,the,actual,return,type,of,the,method,that,returned,the,value,could,be,different,from,code,body,parameter,when,processing,code,http,entity,for,example,param,exchange,the,current,exchange,return,indicates,completion,or,error,since,5,0,2;suppress,warnings,unchecked,rawtypes,protected,mono,void,write,body,nullable,object,body,method,parameter,body,parameter,nullable,method,parameter,actual,param,server,web,exchange,exchange,resolvable,type,body,type,resolvable,type,for,method,parameter,body,parameter,resolvable,type,actual,type,actual,param,null,resolvable,type,for,method,parameter,actual,param,body,type,class,body,class,body,type,resolve,reactive,adapter,adapter,get,adapter,registry,get,adapter,body,class,body,publisher,publisher,resolvable,type,element,type,if,adapter,null,publisher,adapter,to,publisher,body,resolvable,type,generic,type,body,type,get,generic,0,element,type,get,element,type,adapter,generic,type,else,publisher,mono,just,or,empty,body,element,type,body,class,null,body,class,equals,object,class,body,null,resolvable,type,for,instance,body,body,type,if,void,class,element,type,get,raw,class,void,class,element,type,get,raw,class,return,mono,from,publisher,void,publisher,server,http,request,request,exchange,get,request,server,http,response,response,exchange,get,response,media,type,best,media,type,select,media,type,exchange,get,media,types,for,element,type,if,best,media,type,null,if,logger,is,debug,enabled,logger,debug,publisher,instanceof,mono,0,1,0,n,element,type,for,http,message,writer,writer,get,message,writers,if,writer,can,write,element,type,best,media,type,return,writer,write,publisher,publisher,actual,type,element,type,best,media,type,request,response,collections,empty,map,else,if,get,media,types,for,element,type,is,empty,return,mono,error,new,illegal,state,exception,no,writer,for,element,type,return,mono,error,new,not,acceptable,status,exception,get,media,types,for,element,type
AbstractMessageWriterResultHandler -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter, 			@Nullable MethodParameter actualParam, ServerWebExchange exchange);1530294255;Write a given body to the response with {@link HttpMessageWriter}._@param body the object to write_@param bodyParameter the {@link MethodParameter} of the body to write_@param actualParam the actual return type of the method that returned the value__could be different from {@code bodyParameter} when processing {@code HttpEntity}_for example_@param exchange the current exchange_@return indicates completion or error_@since 5.0.2;@SuppressWarnings({ "unchecked", "rawtypes" })_	protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter,_			@Nullable MethodParameter actualParam, ServerWebExchange exchange) {__		ResolvableType bodyType = ResolvableType.forMethodParameter(bodyParameter)__		ResolvableType actualType = (actualParam != null ? ResolvableType.forMethodParameter(actualParam) : bodyType)__		Class<?> bodyClass = bodyType.resolve()__		ReactiveAdapter adapter = getAdapterRegistry().getAdapter(bodyClass, body)___		Publisher<?> publisher__		ResolvableType elementType__		if (adapter != null) {_			publisher = adapter.toPublisher(body)__			ResolvableType genericType = bodyType.getGeneric()__			elementType = getElementType(adapter, genericType)__		}_		else {_			publisher = Mono.justOrEmpty(body)__			elementType = ((bodyClass == null || bodyClass.equals(Object.class)) && body != null ?_					ResolvableType.forInstance(body) : bodyType)__		}__		if (void.class == elementType.getRawClass() || Void.class == elementType.getRawClass()) {_			return Mono.from((Publisher<Void>) publisher)__		}__		ServerHttpRequest request = exchange.getRequest()__		ServerHttpResponse response = exchange.getResponse()__		MediaType bestMediaType = selectMediaType(exchange, () -> getMediaTypesFor(elementType))__		if (bestMediaType != null) {_			if (logger.isDebugEnabled()) {_				logger.debug((publisher instanceof Mono ? "0..1" : "0..N") + " [" + elementType + "]")__			}_			for (HttpMessageWriter<?> writer : getMessageWriters()) {_				if (writer.canWrite(elementType, bestMediaType)) {_					return writer.write((Publisher) publisher, actualType, elementType,_							bestMediaType, request, response, Collections.emptyMap())__				}_			}_		}_		else {_			if (getMediaTypesFor(elementType).isEmpty()) {_				return Mono.error(new IllegalStateException("No writer for : " + elementType))__			}_		}__		return Mono.error(new NotAcceptableStatusException(getMediaTypesFor(elementType)))__	};write,a,given,body,to,the,response,with,link,http,message,writer,param,body,the,object,to,write,param,body,parameter,the,link,method,parameter,of,the,body,to,write,param,actual,param,the,actual,return,type,of,the,method,that,returned,the,value,could,be,different,from,code,body,parameter,when,processing,code,http,entity,for,example,param,exchange,the,current,exchange,return,indicates,completion,or,error,since,5,0,2;suppress,warnings,unchecked,rawtypes,protected,mono,void,write,body,nullable,object,body,method,parameter,body,parameter,nullable,method,parameter,actual,param,server,web,exchange,exchange,resolvable,type,body,type,resolvable,type,for,method,parameter,body,parameter,resolvable,type,actual,type,actual,param,null,resolvable,type,for,method,parameter,actual,param,body,type,class,body,class,body,type,resolve,reactive,adapter,adapter,get,adapter,registry,get,adapter,body,class,body,publisher,publisher,resolvable,type,element,type,if,adapter,null,publisher,adapter,to,publisher,body,resolvable,type,generic,type,body,type,get,generic,element,type,get,element,type,adapter,generic,type,else,publisher,mono,just,or,empty,body,element,type,body,class,null,body,class,equals,object,class,body,null,resolvable,type,for,instance,body,body,type,if,void,class,element,type,get,raw,class,void,class,element,type,get,raw,class,return,mono,from,publisher,void,publisher,server,http,request,request,exchange,get,request,server,http,response,response,exchange,get,response,media,type,best,media,type,select,media,type,exchange,get,media,types,for,element,type,if,best,media,type,null,if,logger,is,debug,enabled,logger,debug,publisher,instanceof,mono,0,1,0,n,element,type,for,http,message,writer,writer,get,message,writers,if,writer,can,write,element,type,best,media,type,return,writer,write,publisher,publisher,actual,type,element,type,best,media,type,request,response,collections,empty,map,else,if,get,media,types,for,element,type,is,empty,return,mono,error,new,illegal,state,exception,no,writer,for,element,type,return,mono,error,new,not,acceptable,status,exception,get,media,types,for,element,type
AbstractMessageWriterResultHandler -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter, 			@Nullable MethodParameter actualParam, ServerWebExchange exchange);1530793633;Write a given body to the response with {@link HttpMessageWriter}._@param body the object to write_@param bodyParameter the {@link MethodParameter} of the body to write_@param actualParam the actual return type of the method that returned the value__could be different from {@code bodyParameter} when processing {@code HttpEntity}_for example_@param exchange the current exchange_@return indicates completion or error_@since 5.0.2;@SuppressWarnings({ "unchecked", "rawtypes" })_	protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter,_			@Nullable MethodParameter actualParam, ServerWebExchange exchange) {__		ResolvableType bodyType = ResolvableType.forMethodParameter(bodyParameter)__		ResolvableType actualType = (actualParam != null ? ResolvableType.forMethodParameter(actualParam) : bodyType)__		Class<?> bodyClass = bodyType.resolve()__		ReactiveAdapter adapter = getAdapterRegistry().getAdapter(bodyClass, body)___		Publisher<?> publisher__		ResolvableType elementType__		if (adapter != null) {_			publisher = adapter.toPublisher(body)__			ResolvableType genericType = bodyType.getGeneric()__			elementType = getElementType(adapter, genericType)__		}_		else {_			publisher = Mono.justOrEmpty(body)__			elementType = ((bodyClass == null || bodyClass.equals(Object.class)) && body != null ?_					ResolvableType.forInstance(body) : bodyType)__		}__		if (void.class == elementType.getRawClass() || Void.class == elementType.getRawClass()) {_			return Mono.from((Publisher<Void>) publisher)__		}__		ServerHttpRequest request = exchange.getRequest()__		ServerHttpResponse response = exchange.getResponse()__		MediaType bestMediaType = selectMediaType(exchange, () -> getMediaTypesFor(elementType))__		if (bestMediaType != null) {_			String logPrefix = exchange.getLogPrefix()__			if (logger.isDebugEnabled()) {_				logger.debug(logPrefix +_						(publisher instanceof Mono ? "0..1" : "0..N") + " [" + elementType + "]")__			}_			for (HttpMessageWriter<?> writer : getMessageWriters()) {_				if (writer.canWrite(elementType, bestMediaType)) {_					return writer.write((Publisher) publisher, actualType, elementType,_							bestMediaType, request, response, Collections.emptyMap())__				}_			}_		}_		else {_			if (getMediaTypesFor(elementType).isEmpty()) {_				return Mono.error(new IllegalStateException("No writer for : " + elementType))__			}_		}__		return Mono.error(new NotAcceptableStatusException(getMediaTypesFor(elementType)))__	};write,a,given,body,to,the,response,with,link,http,message,writer,param,body,the,object,to,write,param,body,parameter,the,link,method,parameter,of,the,body,to,write,param,actual,param,the,actual,return,type,of,the,method,that,returned,the,value,could,be,different,from,code,body,parameter,when,processing,code,http,entity,for,example,param,exchange,the,current,exchange,return,indicates,completion,or,error,since,5,0,2;suppress,warnings,unchecked,rawtypes,protected,mono,void,write,body,nullable,object,body,method,parameter,body,parameter,nullable,method,parameter,actual,param,server,web,exchange,exchange,resolvable,type,body,type,resolvable,type,for,method,parameter,body,parameter,resolvable,type,actual,type,actual,param,null,resolvable,type,for,method,parameter,actual,param,body,type,class,body,class,body,type,resolve,reactive,adapter,adapter,get,adapter,registry,get,adapter,body,class,body,publisher,publisher,resolvable,type,element,type,if,adapter,null,publisher,adapter,to,publisher,body,resolvable,type,generic,type,body,type,get,generic,element,type,get,element,type,adapter,generic,type,else,publisher,mono,just,or,empty,body,element,type,body,class,null,body,class,equals,object,class,body,null,resolvable,type,for,instance,body,body,type,if,void,class,element,type,get,raw,class,void,class,element,type,get,raw,class,return,mono,from,publisher,void,publisher,server,http,request,request,exchange,get,request,server,http,response,response,exchange,get,response,media,type,best,media,type,select,media,type,exchange,get,media,types,for,element,type,if,best,media,type,null,string,log,prefix,exchange,get,log,prefix,if,logger,is,debug,enabled,logger,debug,log,prefix,publisher,instanceof,mono,0,1,0,n,element,type,for,http,message,writer,writer,get,message,writers,if,writer,can,write,element,type,best,media,type,return,writer,write,publisher,publisher,actual,type,element,type,best,media,type,request,response,collections,empty,map,else,if,get,media,types,for,element,type,is,empty,return,mono,error,new,illegal,state,exception,no,writer,for,element,type,return,mono,error,new,not,acceptable,status,exception,get,media,types,for,element,type
AbstractMessageWriterResultHandler -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter, 			@Nullable MethodParameter actualParam, ServerWebExchange exchange);1530793695;Write a given body to the response with {@link HttpMessageWriter}._@param body the object to write_@param bodyParameter the {@link MethodParameter} of the body to write_@param actualParam the actual return type of the method that returned the value__could be different from {@code bodyParameter} when processing {@code HttpEntity}_for example_@param exchange the current exchange_@return indicates completion or error_@since 5.0.2;@SuppressWarnings({ "unchecked", "rawtypes" })_	protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter,_			@Nullable MethodParameter actualParam, ServerWebExchange exchange) {__		ResolvableType bodyType = ResolvableType.forMethodParameter(bodyParameter)__		ResolvableType actualType = (actualParam != null ? ResolvableType.forMethodParameter(actualParam) : bodyType)__		Class<?> bodyClass = bodyType.resolve()__		ReactiveAdapter adapter = getAdapterRegistry().getAdapter(bodyClass, body)___		Publisher<?> publisher__		ResolvableType elementType__		if (adapter != null) {_			publisher = adapter.toPublisher(body)__			ResolvableType genericType = bodyType.getGeneric()__			elementType = getElementType(adapter, genericType)__		}_		else {_			publisher = Mono.justOrEmpty(body)__			elementType = ((bodyClass == null || bodyClass.equals(Object.class)) && body != null ?_					ResolvableType.forInstance(body) : bodyType)__		}__		if (void.class == elementType.getRawClass() || Void.class == elementType.getRawClass()) {_			return Mono.from((Publisher<Void>) publisher)__		}__		ServerHttpRequest request = exchange.getRequest()__		ServerHttpResponse response = exchange.getResponse()__		MediaType bestMediaType = selectMediaType(exchange, () -> getMediaTypesFor(elementType))__		if (bestMediaType != null) {_			String logPrefix = exchange.getLogPrefix()__			if (logger.isDebugEnabled()) {_				logger.debug(logPrefix +_						(publisher instanceof Mono ? "0..1" : "0..N") + " [" + elementType + "]")__			}_			for (HttpMessageWriter<?> writer : getMessageWriters()) {_				if (writer.canWrite(elementType, bestMediaType)) {_					return writer.write((Publisher) publisher, actualType, elementType, bestMediaType,_							request, response, Hints.from(Hints.LOG_PREFIX_HINT, logPrefix))__				}_			}_		}_		else {_			if (getMediaTypesFor(elementType).isEmpty()) {_				return Mono.error(new IllegalStateException("No writer for : " + elementType))__			}_		}__		return Mono.error(new NotAcceptableStatusException(getMediaTypesFor(elementType)))__	};write,a,given,body,to,the,response,with,link,http,message,writer,param,body,the,object,to,write,param,body,parameter,the,link,method,parameter,of,the,body,to,write,param,actual,param,the,actual,return,type,of,the,method,that,returned,the,value,could,be,different,from,code,body,parameter,when,processing,code,http,entity,for,example,param,exchange,the,current,exchange,return,indicates,completion,or,error,since,5,0,2;suppress,warnings,unchecked,rawtypes,protected,mono,void,write,body,nullable,object,body,method,parameter,body,parameter,nullable,method,parameter,actual,param,server,web,exchange,exchange,resolvable,type,body,type,resolvable,type,for,method,parameter,body,parameter,resolvable,type,actual,type,actual,param,null,resolvable,type,for,method,parameter,actual,param,body,type,class,body,class,body,type,resolve,reactive,adapter,adapter,get,adapter,registry,get,adapter,body,class,body,publisher,publisher,resolvable,type,element,type,if,adapter,null,publisher,adapter,to,publisher,body,resolvable,type,generic,type,body,type,get,generic,element,type,get,element,type,adapter,generic,type,else,publisher,mono,just,or,empty,body,element,type,body,class,null,body,class,equals,object,class,body,null,resolvable,type,for,instance,body,body,type,if,void,class,element,type,get,raw,class,void,class,element,type,get,raw,class,return,mono,from,publisher,void,publisher,server,http,request,request,exchange,get,request,server,http,response,response,exchange,get,response,media,type,best,media,type,select,media,type,exchange,get,media,types,for,element,type,if,best,media,type,null,string,log,prefix,exchange,get,log,prefix,if,logger,is,debug,enabled,logger,debug,log,prefix,publisher,instanceof,mono,0,1,0,n,element,type,for,http,message,writer,writer,get,message,writers,if,writer,can,write,element,type,best,media,type,return,writer,write,publisher,publisher,actual,type,element,type,best,media,type,request,response,hints,from,hints,log,prefix,else,if,get,media,types,for,element,type,is,empty,return,mono,error,new,illegal,state,exception,no,writer,for,element,type,return,mono,error,new,not,acceptable,status,exception,get,media,types,for,element,type
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver, 			ReactiveAdapterRegistry adapterRegistry);1485986572;Constructor with an additional {@link ReactiveAdapterRegistry}.__@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type_@param adapterRegistry for adapting other reactive types (e.g. rx.Observable,_rx.Single, etc.) to Flux or Mono;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver,_			ReactiveAdapterRegistry adapterRegistry) {__		super(contentTypeResolver, adapterRegistry)__		Assert.notEmpty(messageWriters, "At least one message writer is required.")__		this.messageWriters = messageWriters__	};constructor,with,an,additional,link,reactive,adapter,registry,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type,param,adapter,registry,for,adapting,other,reactive,types,e,g,rx,observable,rx,single,etc,to,flux,or,mono;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,adapter,registry,super,content,type,resolver,adapter,registry,assert,not,empty,message,writers,at,least,one,message,writer,is,required,this,message,writers,message,writers
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver, 			ReactiveAdapterRegistry adapterRegistry);1486632602;Constructor with an additional {@link ReactiveAdapterRegistry}.__@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type_@param adapterRegistry for adapting other reactive types (e.g. rx.Observable,_rx.Single, etc.) to Flux or Mono;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver,_			ReactiveAdapterRegistry adapterRegistry) {__		super(contentTypeResolver, adapterRegistry)__		Assert.notEmpty(messageWriters, "At least one message writer is required.")__		this.messageWriters = messageWriters__	};constructor,with,an,additional,link,reactive,adapter,registry,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type,param,adapter,registry,for,adapting,other,reactive,types,e,g,rx,observable,rx,single,etc,to,flux,or,mono;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,adapter,registry,super,content,type,resolver,adapter,registry,assert,not,empty,message,writers,at,least,one,message,writer,is,required,this,message,writers,message,writers
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver, 			ReactiveAdapterRegistry adapterRegistry);1489433888;Constructor with an additional {@link ReactiveAdapterRegistry}.__@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type_@param adapterRegistry for adapting other reactive types (e.g. rx.Observable,_rx.Single, etc.) to Flux or Mono;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver,_			ReactiveAdapterRegistry adapterRegistry) {__		super(contentTypeResolver, adapterRegistry)__		Assert.notEmpty(messageWriters, "At least one message writer is required.")__		this.messageWriters = messageWriters__	};constructor,with,an,additional,link,reactive,adapter,registry,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type,param,adapter,registry,for,adapting,other,reactive,types,e,g,rx,observable,rx,single,etc,to,flux,or,mono;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,adapter,registry,super,content,type,resolver,adapter,registry,assert,not,empty,message,writers,at,least,one,message,writer,is,required,this,message,writers,message,writers
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver, 			ReactiveAdapterRegistry adapterRegistry);1489535791;Constructor with an additional {@link ReactiveAdapterRegistry}.__@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type_@param adapterRegistry for adapting other reactive types (e.g. rx.Observable,_rx.Single, etc.) to Flux or Mono;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver,_			ReactiveAdapterRegistry adapterRegistry) {__		super(contentTypeResolver, adapterRegistry)__		Assert.notEmpty(messageWriters, "At least one message writer is required.")__		this.messageWriters = messageWriters__	};constructor,with,an,additional,link,reactive,adapter,registry,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type,param,adapter,registry,for,adapting,other,reactive,types,e,g,rx,observable,rx,single,etc,to,flux,or,mono;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,adapter,registry,super,content,type,resolver,adapter,registry,assert,not,empty,message,writers,at,least,one,message,writer,is,required,this,message,writers,message,writers
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver, 			ReactiveAdapterRegistry adapterRegistry);1490392946;Constructor with an additional {@link ReactiveAdapterRegistry}.__@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type_@param adapterRegistry for adapting other reactive types (e.g. rx.Observable,_rx.Single, etc.) to Flux or Mono;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver,_			ReactiveAdapterRegistry adapterRegistry) {__		super(contentTypeResolver, adapterRegistry)__		Assert.notEmpty(messageWriters, "At least one message writer is required.")__		this.messageWriters = messageWriters__	};constructor,with,an,additional,link,reactive,adapter,registry,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type,param,adapter,registry,for,adapting,other,reactive,types,e,g,rx,observable,rx,single,etc,to,flux,or,mono;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,adapter,registry,super,content,type,resolver,adapter,registry,assert,not,empty,message,writers,at,least,one,message,writer,is,required,this,message,writers,message,writers
AbstractMessageWriterResultHandler -> public List<HttpMessageWriter<?>> getMessageWriters();1485986572;Return the configured message converters.;public List<HttpMessageWriter<?>> getMessageWriters() {_		return this.messageWriters__	};return,the,configured,message,converters;public,list,http,message,writer,get,message,writers,return,this,message,writers
AbstractMessageWriterResultHandler -> public List<HttpMessageWriter<?>> getMessageWriters();1486632602;Return the configured message converters.;public List<HttpMessageWriter<?>> getMessageWriters() {_		return this.messageWriters__	};return,the,configured,message,converters;public,list,http,message,writer,get,message,writers,return,this,message,writers
AbstractMessageWriterResultHandler -> public List<HttpMessageWriter<?>> getMessageWriters();1489433888;Return the configured message converters.;public List<HttpMessageWriter<?>> getMessageWriters() {_		return this.messageWriters__	};return,the,configured,message,converters;public,list,http,message,writer,get,message,writers,return,this,message,writers
AbstractMessageWriterResultHandler -> public List<HttpMessageWriter<?>> getMessageWriters();1489535791;Return the configured message converters.;public List<HttpMessageWriter<?>> getMessageWriters() {_		return this.messageWriters__	};return,the,configured,message,converters;public,list,http,message,writer,get,message,writers,return,this,message,writers
AbstractMessageWriterResultHandler -> public List<HttpMessageWriter<?>> getMessageWriters();1490392946;Return the configured message converters.;public List<HttpMessageWriter<?>> getMessageWriters() {_		return this.messageWriters__	};return,the,configured,message,converters;public,list,http,message,writer,get,message,writers,return,this,message,writers
AbstractMessageWriterResultHandler -> public List<HttpMessageWriter<?>> getMessageWriters();1494019148;Return the configured message converters.;public List<HttpMessageWriter<?>> getMessageWriters() {_		return this.messageWriters__	};return,the,configured,message,converters;public,list,http,message,writer,get,message,writers,return,this,message,writers
AbstractMessageWriterResultHandler -> public List<HttpMessageWriter<?>> getMessageWriters();1496837955;Return the configured message converters.;public List<HttpMessageWriter<?>> getMessageWriters() {_		return this.messageWriters__	};return,the,configured,message,converters;public,list,http,message,writer,get,message,writers,return,this,message,writers
AbstractMessageWriterResultHandler -> public List<HttpMessageWriter<?>> getMessageWriters();1499170790;Return the configured message converters.;public List<HttpMessageWriter<?>> getMessageWriters() {_		return this.messageWriters__	};return,the,configured,message,converters;public,list,http,message,writer,get,message,writers,return,this,message,writers
AbstractMessageWriterResultHandler -> public List<HttpMessageWriter<?>> getMessageWriters();1504642295;Return the configured message converters.;public List<HttpMessageWriter<?>> getMessageWriters() {_		return this.messageWriters__	};return,the,configured,message,converters;public,list,http,message,writer,get,message,writers,return,this,message,writers
AbstractMessageWriterResultHandler -> public List<HttpMessageWriter<?>> getMessageWriters();1510344303;Return the configured message converters.;public List<HttpMessageWriter<?>> getMessageWriters() {_		return this.messageWriters__	};return,the,configured,message,converters;public,list,http,message,writer,get,message,writers,return,this,message,writers
AbstractMessageWriterResultHandler -> public List<HttpMessageWriter<?>> getMessageWriters();1510841578;Return the configured message converters.;public List<HttpMessageWriter<?>> getMessageWriters() {_		return this.messageWriters__	};return,the,configured,message,converters;public,list,http,message,writer,get,message,writers,return,this,message,writers
AbstractMessageWriterResultHandler -> public List<HttpMessageWriter<?>> getMessageWriters();1511215342;Return the configured message converters.;public List<HttpMessageWriter<?>> getMessageWriters() {_		return this.messageWriters__	};return,the,configured,message,converters;public,list,http,message,writer,get,message,writers,return,this,message,writers
AbstractMessageWriterResultHandler -> public List<HttpMessageWriter<?>> getMessageWriters();1520772267;Return the configured message converters.;public List<HttpMessageWriter<?>> getMessageWriters() {_		return this.messageWriters__	};return,the,configured,message,converters;public,list,http,message,writer,get,message,writers,return,this,message,writers
AbstractMessageWriterResultHandler -> public List<HttpMessageWriter<?>> getMessageWriters();1529721864;Return the configured message converters.;public List<HttpMessageWriter<?>> getMessageWriters() {_		return this.messageWriters__	};return,the,configured,message,converters;public,list,http,message,writer,get,message,writers,return,this,message,writers
AbstractMessageWriterResultHandler -> public List<HttpMessageWriter<?>> getMessageWriters();1530174524;Return the configured message converters.;public List<HttpMessageWriter<?>> getMessageWriters() {_		return this.messageWriters__	};return,the,configured,message,converters;public,list,http,message,writer,get,message,writers,return,this,message,writers
AbstractMessageWriterResultHandler -> public List<HttpMessageWriter<?>> getMessageWriters();1530190293;Return the configured message converters.;public List<HttpMessageWriter<?>> getMessageWriters() {_		return this.messageWriters__	};return,the,configured,message,converters;public,list,http,message,writer,get,message,writers,return,this,message,writers
AbstractMessageWriterResultHandler -> public List<HttpMessageWriter<?>> getMessageWriters();1530294255;Return the configured message converters.;public List<HttpMessageWriter<?>> getMessageWriters() {_		return this.messageWriters__	};return,the,configured,message,converters;public,list,http,message,writer,get,message,writers,return,this,message,writers
AbstractMessageWriterResultHandler -> public List<HttpMessageWriter<?>> getMessageWriters();1530793633;Return the configured message converters.;public List<HttpMessageWriter<?>> getMessageWriters() {_		return this.messageWriters__	};return,the,configured,message,converters;public,list,http,message,writer,get,message,writers,return,this,message,writers
AbstractMessageWriterResultHandler -> public List<HttpMessageWriter<?>> getMessageWriters();1530793695;Return the configured message converters.;public List<HttpMessageWriter<?>> getMessageWriters() {_		return this.messageWriters__	};return,the,configured,message,converters;public,list,http,message,writer,get,message,writers,return,this,message,writers
AbstractMessageWriterResultHandler -> public List<HttpMessageWriter<?>> getMessageWriters();1542050977;Return the configured message converters.;public List<HttpMessageWriter<?>> getMessageWriters() {_		return this.messageWriters__	};return,the,configured,message,converters;public,list,http,message,writer,get,message,writers,return,this,message,writers
AbstractMessageWriterResultHandler -> public List<HttpMessageWriter<?>> getMessageWriters();1549365291;Return the configured message converters.;public List<HttpMessageWriter<?>> getMessageWriters() {_		return this.messageWriters__	};return,the,configured,message,converters;public,list,http,message,writer,get,message,writers,return,this,message,writers
AbstractMessageWriterResultHandler -> @SuppressWarnings("unchecked") 	protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter, 			@Nullable MethodParameter actualParameter, ServerWebExchange exchange);1510841578;Write a given body to the response with {@link HttpMessageWriter}._@param body the object to write_@param bodyParameter the {@link MethodParameter} of the body to write_@param actualParameter the actual return type of the method that returned the_value_ could be different from {@code bodyParameter} when processing {@code HttpEntity}_for example_@param exchange the current exchange_@return indicates completion or error_@since 5.0.2;@SuppressWarnings("unchecked")_	protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter,_			@Nullable MethodParameter actualParameter, ServerWebExchange exchange) {__		ResolvableType bodyType = ResolvableType.forMethodParameter(bodyParameter)__		ResolvableType actualType = (actualParameter == null ?_				bodyType : ResolvableType.forMethodParameter(actualParameter))__		Class<?> bodyClass = bodyType.resolve()__		ReactiveAdapter adapter = getAdapterRegistry().getAdapter(bodyClass, body)___		Publisher<?> publisher__		ResolvableType elementType__		if (adapter != null) {_			publisher = adapter.toPublisher(body)__			ResolvableType genericType = bodyType.getGeneric(0)__			elementType = getElementType(adapter, genericType)__		}_		else {_			publisher = Mono.justOrEmpty(body)__			elementType = ((bodyClass == null || bodyClass.equals(Object.class)) && body != null ?_					ResolvableType.forInstance(body) : bodyType)__		}__		if (void.class == elementType.getRawClass() || Void.class == elementType.getRawClass()) {_			return Mono.from((Publisher<Void>) publisher)__		}__		ServerHttpRequest request = exchange.getRequest()__		ServerHttpResponse response = exchange.getResponse()__		MediaType bestMediaType = selectMediaType(exchange, () -> getMediaTypesFor(elementType))__		if (bestMediaType != null) {_			for (HttpMessageWriter<?> writer : getMessageWriters()) {_				if (writer.canWrite(elementType, bestMediaType)) {_					return writer.write((Publisher) publisher, actualType, elementType,_							bestMediaType, request, response, Collections.emptyMap())__				}_			}_		}_		else {_			if (getMediaTypesFor(elementType).isEmpty()) {_				return Mono.error(new IllegalStateException("No writer for : " + elementType))__			}_		}__		return Mono.error(new NotAcceptableStatusException(getMediaTypesFor(elementType)))__	};write,a,given,body,to,the,response,with,link,http,message,writer,param,body,the,object,to,write,param,body,parameter,the,link,method,parameter,of,the,body,to,write,param,actual,parameter,the,actual,return,type,of,the,method,that,returned,the,value,could,be,different,from,code,body,parameter,when,processing,code,http,entity,for,example,param,exchange,the,current,exchange,return,indicates,completion,or,error,since,5,0,2;suppress,warnings,unchecked,protected,mono,void,write,body,nullable,object,body,method,parameter,body,parameter,nullable,method,parameter,actual,parameter,server,web,exchange,exchange,resolvable,type,body,type,resolvable,type,for,method,parameter,body,parameter,resolvable,type,actual,type,actual,parameter,null,body,type,resolvable,type,for,method,parameter,actual,parameter,class,body,class,body,type,resolve,reactive,adapter,adapter,get,adapter,registry,get,adapter,body,class,body,publisher,publisher,resolvable,type,element,type,if,adapter,null,publisher,adapter,to,publisher,body,resolvable,type,generic,type,body,type,get,generic,0,element,type,get,element,type,adapter,generic,type,else,publisher,mono,just,or,empty,body,element,type,body,class,null,body,class,equals,object,class,body,null,resolvable,type,for,instance,body,body,type,if,void,class,element,type,get,raw,class,void,class,element,type,get,raw,class,return,mono,from,publisher,void,publisher,server,http,request,request,exchange,get,request,server,http,response,response,exchange,get,response,media,type,best,media,type,select,media,type,exchange,get,media,types,for,element,type,if,best,media,type,null,for,http,message,writer,writer,get,message,writers,if,writer,can,write,element,type,best,media,type,return,writer,write,publisher,publisher,actual,type,element,type,best,media,type,request,response,collections,empty,map,else,if,get,media,types,for,element,type,is,empty,return,mono,error,new,illegal,state,exception,no,writer,for,element,type,return,mono,error,new,not,acceptable,status,exception,get,media,types,for,element,type
AbstractMessageWriterResultHandler -> @SuppressWarnings("unchecked") 	protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter, 			@Nullable MethodParameter actualParameter, ServerWebExchange exchange);1511215342;Write a given body to the response with {@link HttpMessageWriter}._@param body the object to write_@param bodyParameter the {@link MethodParameter} of the body to write_@param actualParameter the actual return type of the method that returned the_value_ could be different from {@code bodyParameter} when processing {@code HttpEntity}_for example_@param exchange the current exchange_@return indicates completion or error_@since 5.0.2;@SuppressWarnings("unchecked")_	protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter,_			@Nullable MethodParameter actualParameter, ServerWebExchange exchange) {__		ResolvableType bodyType = ResolvableType.forMethodParameter(bodyParameter)__		ResolvableType actualType = (actualParameter == null ?_				bodyType : ResolvableType.forMethodParameter(actualParameter))__		Class<?> bodyClass = bodyType.resolve()__		ReactiveAdapter adapter = getAdapterRegistry().getAdapter(bodyClass, body)___		Publisher<?> publisher__		ResolvableType elementType__		if (adapter != null) {_			publisher = adapter.toPublisher(body)__			ResolvableType genericType = bodyType.getGeneric(0)__			elementType = getElementType(adapter, genericType)__		}_		else {_			publisher = Mono.justOrEmpty(body)__			elementType = ((bodyClass == null || bodyClass.equals(Object.class)) && body != null ?_					ResolvableType.forInstance(body) : bodyType)__		}__		if (void.class == elementType.getRawClass() || Void.class == elementType.getRawClass()) {_			return Mono.from((Publisher<Void>) publisher)__		}__		ServerHttpRequest request = exchange.getRequest()__		ServerHttpResponse response = exchange.getResponse()__		MediaType bestMediaType = selectMediaType(exchange, () -> getMediaTypesFor(elementType))__		if (bestMediaType != null) {_			for (HttpMessageWriter<?> writer : getMessageWriters()) {_				if (writer.canWrite(elementType, bestMediaType)) {_					return writer.write((Publisher) publisher, actualType, elementType,_							bestMediaType, request, response, Collections.emptyMap())__				}_			}_		}_		else {_			if (getMediaTypesFor(elementType).isEmpty()) {_				return Mono.error(new IllegalStateException("No writer for : " + elementType))__			}_		}__		return Mono.error(new NotAcceptableStatusException(getMediaTypesFor(elementType)))__	};write,a,given,body,to,the,response,with,link,http,message,writer,param,body,the,object,to,write,param,body,parameter,the,link,method,parameter,of,the,body,to,write,param,actual,parameter,the,actual,return,type,of,the,method,that,returned,the,value,could,be,different,from,code,body,parameter,when,processing,code,http,entity,for,example,param,exchange,the,current,exchange,return,indicates,completion,or,error,since,5,0,2;suppress,warnings,unchecked,protected,mono,void,write,body,nullable,object,body,method,parameter,body,parameter,nullable,method,parameter,actual,parameter,server,web,exchange,exchange,resolvable,type,body,type,resolvable,type,for,method,parameter,body,parameter,resolvable,type,actual,type,actual,parameter,null,body,type,resolvable,type,for,method,parameter,actual,parameter,class,body,class,body,type,resolve,reactive,adapter,adapter,get,adapter,registry,get,adapter,body,class,body,publisher,publisher,resolvable,type,element,type,if,adapter,null,publisher,adapter,to,publisher,body,resolvable,type,generic,type,body,type,get,generic,0,element,type,get,element,type,adapter,generic,type,else,publisher,mono,just,or,empty,body,element,type,body,class,null,body,class,equals,object,class,body,null,resolvable,type,for,instance,body,body,type,if,void,class,element,type,get,raw,class,void,class,element,type,get,raw,class,return,mono,from,publisher,void,publisher,server,http,request,request,exchange,get,request,server,http,response,response,exchange,get,response,media,type,best,media,type,select,media,type,exchange,get,media,types,for,element,type,if,best,media,type,null,for,http,message,writer,writer,get,message,writers,if,writer,can,write,element,type,best,media,type,return,writer,write,publisher,publisher,actual,type,element,type,best,media,type,request,response,collections,empty,map,else,if,get,media,types,for,element,type,is,empty,return,mono,error,new,illegal,state,exception,no,writer,for,element,type,return,mono,error,new,not,acceptable,status,exception,get,media,types,for,element,type
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver);1485986572;Constructor with {@link HttpMessageWriter}s and a_{@code RequestedContentTypeResolver}.__@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver) {__		super(contentTypeResolver)__		Assert.notEmpty(messageWriters, "At least one message writer is required.")__		this.messageWriters = messageWriters__	};constructor,with,link,http,message,writer,s,and,a,code,requested,content,type,resolver,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,super,content,type,resolver,assert,not,empty,message,writers,at,least,one,message,writer,is,required,this,message,writers,message,writers
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver);1486632602;Constructor with {@link HttpMessageWriter}s and a_{@code RequestedContentTypeResolver}.__@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver) {__		super(contentTypeResolver)__		Assert.notEmpty(messageWriters, "At least one message writer is required.")__		this.messageWriters = messageWriters__	};constructor,with,link,http,message,writer,s,and,a,code,requested,content,type,resolver,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,super,content,type,resolver,assert,not,empty,message,writers,at,least,one,message,writer,is,required,this,message,writers,message,writers
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver);1489433888;Constructor with {@link HttpMessageWriter}s and a_{@code RequestedContentTypeResolver}.__@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver) {__		super(contentTypeResolver)__		Assert.notEmpty(messageWriters, "At least one message writer is required.")__		this.messageWriters = messageWriters__	};constructor,with,link,http,message,writer,s,and,a,code,requested,content,type,resolver,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,super,content,type,resolver,assert,not,empty,message,writers,at,least,one,message,writer,is,required,this,message,writers,message,writers
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver);1489535791;Constructor with {@link HttpMessageWriter}s and a_{@code RequestedContentTypeResolver}.__@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver) {__		super(contentTypeResolver)__		Assert.notEmpty(messageWriters, "At least one message writer is required.")__		this.messageWriters = messageWriters__	};constructor,with,link,http,message,writer,s,and,a,code,requested,content,type,resolver,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,super,content,type,resolver,assert,not,empty,message,writers,at,least,one,message,writer,is,required,this,message,writers,message,writers
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver);1490392946;Constructor with {@link HttpMessageWriter}s and a_{@code RequestedContentTypeResolver}.__@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver) {__		super(contentTypeResolver)__		Assert.notEmpty(messageWriters, "At least one message writer is required.")__		this.messageWriters = messageWriters__	};constructor,with,link,http,message,writer,s,and,a,code,requested,content,type,resolver,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,super,content,type,resolver,assert,not,empty,message,writers,at,least,one,message,writer,is,required,this,message,writers,message,writers
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver);1494019148;Constructor with {@link HttpMessageWriter}s and a_{@code RequestedContentTypeResolver}._@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver) {__		this(messageWriters, contentTypeResolver, new ReactiveAdapterRegistry())__	};constructor,with,link,http,message,writer,s,and,a,code,requested,content,type,resolver,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,this,message,writers,content,type,resolver,new,reactive,adapter,registry
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver);1496837955;Constructor with {@link HttpMessageWriter}s and a_{@code RequestedContentTypeResolver}._@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver) {__		this(messageWriters, contentTypeResolver, new ReactiveAdapterRegistry())__	};constructor,with,link,http,message,writer,s,and,a,code,requested,content,type,resolver,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,this,message,writers,content,type,resolver,new,reactive,adapter,registry
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver);1499170790;Constructor with {@link HttpMessageWriter}s and a_{@code RequestedContentTypeResolver}._@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver) {__		this(messageWriters, contentTypeResolver, new ReactiveAdapterRegistry())__	};constructor,with,link,http,message,writer,s,and,a,code,requested,content,type,resolver,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,this,message,writers,content,type,resolver,new,reactive,adapter,registry
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver);1504642295;Constructor with {@link HttpMessageWriter}s and a_{@code RequestedContentTypeResolver}._@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver) {__		this(messageWriters, contentTypeResolver, new ReactiveAdapterRegistry())__	};constructor,with,link,http,message,writer,s,and,a,code,requested,content,type,resolver,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,this,message,writers,content,type,resolver,new,reactive,adapter,registry
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver);1510344303;Constructor with {@link HttpMessageWriter}s and a_{@code RequestedContentTypeResolver}._@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver) {__		this(messageWriters, contentTypeResolver, new ReactiveAdapterRegistry())__	};constructor,with,link,http,message,writer,s,and,a,code,requested,content,type,resolver,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,this,message,writers,content,type,resolver,new,reactive,adapter,registry
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver);1510841578;Constructor with {@link HttpMessageWriter}s and a_{@code RequestedContentTypeResolver}._@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver) {__		this(messageWriters, contentTypeResolver, new ReactiveAdapterRegistry())__	};constructor,with,link,http,message,writer,s,and,a,code,requested,content,type,resolver,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,this,message,writers,content,type,resolver,new,reactive,adapter,registry
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver);1511215342;Constructor with {@link HttpMessageWriter}s and a_{@code RequestedContentTypeResolver}._@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver) {__		this(messageWriters, contentTypeResolver, ReactiveAdapterRegistry.getSharedInstance())__	};constructor,with,link,http,message,writer,s,and,a,code,requested,content,type,resolver,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,this,message,writers,content,type,resolver,reactive,adapter,registry,get,shared,instance
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver);1520772267;Constructor with {@link HttpMessageWriter}s and a_{@code RequestedContentTypeResolver}._@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver) {__		this(messageWriters, contentTypeResolver, ReactiveAdapterRegistry.getSharedInstance())__	};constructor,with,link,http,message,writer,s,and,a,code,requested,content,type,resolver,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,this,message,writers,content,type,resolver,reactive,adapter,registry,get,shared,instance
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver);1529721864;Constructor with {@link HttpMessageWriter}s and a_{@code RequestedContentTypeResolver}._@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver) {__		this(messageWriters, contentTypeResolver, ReactiveAdapterRegistry.getSharedInstance())__	};constructor,with,link,http,message,writer,s,and,a,code,requested,content,type,resolver,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,this,message,writers,content,type,resolver,reactive,adapter,registry,get,shared,instance
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver);1530174524;Constructor with {@link HttpMessageWriter HttpMessageWriters} and a_{@code RequestedContentTypeResolver}._@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver) {__		this(messageWriters, contentTypeResolver, ReactiveAdapterRegistry.getSharedInstance())__	};constructor,with,link,http,message,writer,http,message,writers,and,a,code,requested,content,type,resolver,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,this,message,writers,content,type,resolver,reactive,adapter,registry,get,shared,instance
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver);1530190293;Constructor with {@link HttpMessageWriter HttpMessageWriters} and a_{@code RequestedContentTypeResolver}._@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver) {__		this(messageWriters, contentTypeResolver, ReactiveAdapterRegistry.getSharedInstance())__	};constructor,with,link,http,message,writer,http,message,writers,and,a,code,requested,content,type,resolver,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,this,message,writers,content,type,resolver,reactive,adapter,registry,get,shared,instance
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver);1530294255;Constructor with {@link HttpMessageWriter HttpMessageWriters} and a_{@code RequestedContentTypeResolver}._@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver) {__		this(messageWriters, contentTypeResolver, ReactiveAdapterRegistry.getSharedInstance())__	};constructor,with,link,http,message,writer,http,message,writers,and,a,code,requested,content,type,resolver,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,this,message,writers,content,type,resolver,reactive,adapter,registry,get,shared,instance
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver);1530793633;Constructor with {@link HttpMessageWriter HttpMessageWriters} and a_{@code RequestedContentTypeResolver}._@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver) {__		this(messageWriters, contentTypeResolver, ReactiveAdapterRegistry.getSharedInstance())__	};constructor,with,link,http,message,writer,http,message,writers,and,a,code,requested,content,type,resolver,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,this,message,writers,content,type,resolver,reactive,adapter,registry,get,shared,instance
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver);1530793695;Constructor with {@link HttpMessageWriter HttpMessageWriters} and a_{@code RequestedContentTypeResolver}._@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver) {__		this(messageWriters, contentTypeResolver, ReactiveAdapterRegistry.getSharedInstance())__	};constructor,with,link,http,message,writer,http,message,writers,and,a,code,requested,content,type,resolver,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,this,message,writers,content,type,resolver,reactive,adapter,registry,get,shared,instance
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver);1542050977;Constructor with {@link HttpMessageWriter HttpMessageWriters} and a_{@code RequestedContentTypeResolver}._@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver) {__		this(messageWriters, contentTypeResolver, ReactiveAdapterRegistry.getSharedInstance())__	};constructor,with,link,http,message,writer,http,message,writers,and,a,code,requested,content,type,resolver,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,this,message,writers,content,type,resolver,reactive,adapter,registry,get,shared,instance
AbstractMessageWriterResultHandler -> protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters, 			RequestedContentTypeResolver contentTypeResolver);1549365291;Constructor with {@link HttpMessageWriter HttpMessageWriters} and a_{@code RequestedContentTypeResolver}._@param messageWriters for serializing Objects to the response body stream_@param contentTypeResolver for resolving the requested content type;protected AbstractMessageWriterResultHandler(List<HttpMessageWriter<?>> messageWriters,_			RequestedContentTypeResolver contentTypeResolver) {__		this(messageWriters, contentTypeResolver, ReactiveAdapterRegistry.getSharedInstance())__	};constructor,with,link,http,message,writer,http,message,writers,and,a,code,requested,content,type,resolver,param,message,writers,for,serializing,objects,to,the,response,body,stream,param,content,type,resolver,for,resolving,the,requested,content,type;protected,abstract,message,writer,result,handler,list,http,message,writer,message,writers,requested,content,type,resolver,content,type,resolver,this,message,writers,content,type,resolver,reactive,adapter,registry,get,shared,instance
AbstractMessageWriterResultHandler -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter, 			@Nullable MethodParameter actualParameter, ServerWebExchange exchange);1520772267;Write a given body to the response with {@link HttpMessageWriter}._@param body the object to write_@param bodyParameter the {@link MethodParameter} of the body to write_@param actualParameter the actual return type of the method that returned the_value_ could be different from {@code bodyParameter} when processing {@code HttpEntity}_for example_@param exchange the current exchange_@return indicates completion or error_@since 5.0.2;@SuppressWarnings({ "unchecked", "rawtypes" })_	protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter,_			@Nullable MethodParameter actualParameter, ServerWebExchange exchange) {__		ResolvableType bodyType = ResolvableType.forMethodParameter(bodyParameter)__		ResolvableType actualType = (actualParameter == null ?_				bodyType : ResolvableType.forMethodParameter(actualParameter))__		Class<?> bodyClass = bodyType.resolve()__		ReactiveAdapter adapter = getAdapterRegistry().getAdapter(bodyClass, body)___		Publisher<?> publisher__		ResolvableType elementType__		if (adapter != null) {_			publisher = adapter.toPublisher(body)__			ResolvableType genericType = bodyType.getGeneric(0)__			elementType = getElementType(adapter, genericType)__		}_		else {_			publisher = Mono.justOrEmpty(body)__			elementType = ((bodyClass == null || bodyClass.equals(Object.class)) && body != null ?_					ResolvableType.forInstance(body) : bodyType)__		}__		if (void.class == elementType.getRawClass() || Void.class == elementType.getRawClass()) {_			return Mono.from((Publisher<Void>) publisher)__		}__		ServerHttpRequest request = exchange.getRequest()__		ServerHttpResponse response = exchange.getResponse()__		MediaType bestMediaType = selectMediaType(exchange, () -> getMediaTypesFor(elementType))__		if (bestMediaType != null) {_			for (HttpMessageWriter<?> writer : getMessageWriters()) {_				if (writer.canWrite(elementType, bestMediaType)) {_					return writer.write((Publisher) publisher, actualType, elementType,_							bestMediaType, request, response, Collections.emptyMap())__				}_			}_		}_		else {_			if (getMediaTypesFor(elementType).isEmpty()) {_				return Mono.error(new IllegalStateException("No writer for : " + elementType))__			}_		}__		return Mono.error(new NotAcceptableStatusException(getMediaTypesFor(elementType)))__	};write,a,given,body,to,the,response,with,link,http,message,writer,param,body,the,object,to,write,param,body,parameter,the,link,method,parameter,of,the,body,to,write,param,actual,parameter,the,actual,return,type,of,the,method,that,returned,the,value,could,be,different,from,code,body,parameter,when,processing,code,http,entity,for,example,param,exchange,the,current,exchange,return,indicates,completion,or,error,since,5,0,2;suppress,warnings,unchecked,rawtypes,protected,mono,void,write,body,nullable,object,body,method,parameter,body,parameter,nullable,method,parameter,actual,parameter,server,web,exchange,exchange,resolvable,type,body,type,resolvable,type,for,method,parameter,body,parameter,resolvable,type,actual,type,actual,parameter,null,body,type,resolvable,type,for,method,parameter,actual,parameter,class,body,class,body,type,resolve,reactive,adapter,adapter,get,adapter,registry,get,adapter,body,class,body,publisher,publisher,resolvable,type,element,type,if,adapter,null,publisher,adapter,to,publisher,body,resolvable,type,generic,type,body,type,get,generic,0,element,type,get,element,type,adapter,generic,type,else,publisher,mono,just,or,empty,body,element,type,body,class,null,body,class,equals,object,class,body,null,resolvable,type,for,instance,body,body,type,if,void,class,element,type,get,raw,class,void,class,element,type,get,raw,class,return,mono,from,publisher,void,publisher,server,http,request,request,exchange,get,request,server,http,response,response,exchange,get,response,media,type,best,media,type,select,media,type,exchange,get,media,types,for,element,type,if,best,media,type,null,for,http,message,writer,writer,get,message,writers,if,writer,can,write,element,type,best,media,type,return,writer,write,publisher,publisher,actual,type,element,type,best,media,type,request,response,collections,empty,map,else,if,get,media,types,for,element,type,is,empty,return,mono,error,new,illegal,state,exception,no,writer,for,element,type,return,mono,error,new,not,acceptable,status,exception,get,media,types,for,element,type
AbstractMessageWriterResultHandler -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter, 			@Nullable MethodParameter actualParameter, ServerWebExchange exchange);1529721864;Write a given body to the response with {@link HttpMessageWriter}._@param body the object to write_@param bodyParameter the {@link MethodParameter} of the body to write_@param actualParameter the actual return type of the method that returned the_value_ could be different from {@code bodyParameter} when processing {@code HttpEntity}_for example_@param exchange the current exchange_@return indicates completion or error_@since 5.0.2;@SuppressWarnings({ "unchecked", "rawtypes" })_	protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter,_			@Nullable MethodParameter actualParameter, ServerWebExchange exchange) {__		ResolvableType bodyType = ResolvableType.forMethodParameter(bodyParameter)__		ResolvableType actualType = (actualParameter == null ?_				bodyType : ResolvableType.forMethodParameter(actualParameter))__		Class<?> bodyClass = bodyType.resolve()__		ReactiveAdapter adapter = getAdapterRegistry().getAdapter(bodyClass, body)___		Publisher<?> publisher__		ResolvableType elementType__		if (adapter != null) {_			publisher = adapter.toPublisher(body)__			ResolvableType genericType = bodyType.getGeneric(0)__			elementType = getElementType(adapter, genericType)__		}_		else {_			publisher = Mono.justOrEmpty(body)__			elementType = ((bodyClass == null || bodyClass.equals(Object.class)) && body != null ?_					ResolvableType.forInstance(body) : bodyType)__		}__		if (void.class == elementType.getRawClass() || Void.class == elementType.getRawClass()) {_			return Mono.from((Publisher<Void>) publisher)__		}__		ServerHttpRequest request = exchange.getRequest()__		ServerHttpResponse response = exchange.getResponse()__		MediaType bestMediaType = selectMediaType(exchange, () -> getMediaTypesFor(elementType))__		if (bestMediaType != null) {_			if (logger.isDebugEnabled()) {_				logger.debug((publisher instanceof Mono ? "0..1" : "0..N") + " [" + elementType + "]")__			}_			for (HttpMessageWriter<?> writer : getMessageWriters()) {_				if (writer.canWrite(elementType, bestMediaType)) {_					return writer.write((Publisher) publisher, actualType, elementType,_							bestMediaType, request, response, Collections.emptyMap())__				}_			}_		}_		else {_			if (getMediaTypesFor(elementType).isEmpty()) {_				return Mono.error(new IllegalStateException("No writer for : " + elementType))__			}_		}__		return Mono.error(new NotAcceptableStatusException(getMediaTypesFor(elementType)))__	};write,a,given,body,to,the,response,with,link,http,message,writer,param,body,the,object,to,write,param,body,parameter,the,link,method,parameter,of,the,body,to,write,param,actual,parameter,the,actual,return,type,of,the,method,that,returned,the,value,could,be,different,from,code,body,parameter,when,processing,code,http,entity,for,example,param,exchange,the,current,exchange,return,indicates,completion,or,error,since,5,0,2;suppress,warnings,unchecked,rawtypes,protected,mono,void,write,body,nullable,object,body,method,parameter,body,parameter,nullable,method,parameter,actual,parameter,server,web,exchange,exchange,resolvable,type,body,type,resolvable,type,for,method,parameter,body,parameter,resolvable,type,actual,type,actual,parameter,null,body,type,resolvable,type,for,method,parameter,actual,parameter,class,body,class,body,type,resolve,reactive,adapter,adapter,get,adapter,registry,get,adapter,body,class,body,publisher,publisher,resolvable,type,element,type,if,adapter,null,publisher,adapter,to,publisher,body,resolvable,type,generic,type,body,type,get,generic,0,element,type,get,element,type,adapter,generic,type,else,publisher,mono,just,or,empty,body,element,type,body,class,null,body,class,equals,object,class,body,null,resolvable,type,for,instance,body,body,type,if,void,class,element,type,get,raw,class,void,class,element,type,get,raw,class,return,mono,from,publisher,void,publisher,server,http,request,request,exchange,get,request,server,http,response,response,exchange,get,response,media,type,best,media,type,select,media,type,exchange,get,media,types,for,element,type,if,best,media,type,null,if,logger,is,debug,enabled,logger,debug,publisher,instanceof,mono,0,1,0,n,element,type,for,http,message,writer,writer,get,message,writers,if,writer,can,write,element,type,best,media,type,return,writer,write,publisher,publisher,actual,type,element,type,best,media,type,request,response,collections,empty,map,else,if,get,media,types,for,element,type,is,empty,return,mono,error,new,illegal,state,exception,no,writer,for,element,type,return,mono,error,new,not,acceptable,status,exception,get,media,types,for,element,type
AbstractMessageWriterResultHandler -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter, 			@Nullable MethodParameter actualParameter, ServerWebExchange exchange);1530174524;Write a given body to the response with {@link HttpMessageWriter}._@param body the object to write_@param bodyParameter the {@link MethodParameter} of the body to write_@param actualParameter the actual return type of the method that returned the_value_ could be different from {@code bodyParameter} when processing {@code HttpEntity}_for example_@param exchange the current exchange_@return indicates completion or error_@since 5.0.2;@SuppressWarnings({ "unchecked", "rawtypes" })_	protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter,_			@Nullable MethodParameter actualParameter, ServerWebExchange exchange) {__		ResolvableType bodyType = ResolvableType.forMethodParameter(bodyParameter)__		ResolvableType actualType = (actualParameter == null ?_				bodyType : ResolvableType.forMethodParameter(actualParameter))__		Class<?> bodyClass = bodyType.resolve()__		ReactiveAdapter adapter = getAdapterRegistry().getAdapter(bodyClass, body)___		Publisher<?> publisher__		ResolvableType elementType__		if (adapter != null) {_			publisher = adapter.toPublisher(body)__			ResolvableType genericType = bodyType.getGeneric(0)__			elementType = getElementType(adapter, genericType)__		}_		else {_			publisher = Mono.justOrEmpty(body)__			elementType = ((bodyClass == null || bodyClass.equals(Object.class)) && body != null ?_					ResolvableType.forInstance(body) : bodyType)__		}__		if (void.class == elementType.getRawClass() || Void.class == elementType.getRawClass()) {_			return Mono.from((Publisher<Void>) publisher)__		}__		ServerHttpRequest request = exchange.getRequest()__		ServerHttpResponse response = exchange.getResponse()__		MediaType bestMediaType = selectMediaType(exchange, () -> getMediaTypesFor(elementType))__		if (bestMediaType != null) {_			if (logger.isDebugEnabled()) {_				logger.debug((publisher instanceof Mono ? "0..1" : "0..N") + " [" + elementType + "]")__			}_			for (HttpMessageWriter<?> writer : getMessageWriters()) {_				if (writer.canWrite(elementType, bestMediaType)) {_					return writer.write((Publisher) publisher, actualType, elementType,_							bestMediaType, request, response, Collections.emptyMap())__				}_			}_		}_		else {_			if (getMediaTypesFor(elementType).isEmpty()) {_				return Mono.error(new IllegalStateException("No writer for : " + elementType))__			}_		}__		return Mono.error(new NotAcceptableStatusException(getMediaTypesFor(elementType)))__	};write,a,given,body,to,the,response,with,link,http,message,writer,param,body,the,object,to,write,param,body,parameter,the,link,method,parameter,of,the,body,to,write,param,actual,parameter,the,actual,return,type,of,the,method,that,returned,the,value,could,be,different,from,code,body,parameter,when,processing,code,http,entity,for,example,param,exchange,the,current,exchange,return,indicates,completion,or,error,since,5,0,2;suppress,warnings,unchecked,rawtypes,protected,mono,void,write,body,nullable,object,body,method,parameter,body,parameter,nullable,method,parameter,actual,parameter,server,web,exchange,exchange,resolvable,type,body,type,resolvable,type,for,method,parameter,body,parameter,resolvable,type,actual,type,actual,parameter,null,body,type,resolvable,type,for,method,parameter,actual,parameter,class,body,class,body,type,resolve,reactive,adapter,adapter,get,adapter,registry,get,adapter,body,class,body,publisher,publisher,resolvable,type,element,type,if,adapter,null,publisher,adapter,to,publisher,body,resolvable,type,generic,type,body,type,get,generic,0,element,type,get,element,type,adapter,generic,type,else,publisher,mono,just,or,empty,body,element,type,body,class,null,body,class,equals,object,class,body,null,resolvable,type,for,instance,body,body,type,if,void,class,element,type,get,raw,class,void,class,element,type,get,raw,class,return,mono,from,publisher,void,publisher,server,http,request,request,exchange,get,request,server,http,response,response,exchange,get,response,media,type,best,media,type,select,media,type,exchange,get,media,types,for,element,type,if,best,media,type,null,if,logger,is,debug,enabled,logger,debug,publisher,instanceof,mono,0,1,0,n,element,type,for,http,message,writer,writer,get,message,writers,if,writer,can,write,element,type,best,media,type,return,writer,write,publisher,publisher,actual,type,element,type,best,media,type,request,response,collections,empty,map,else,if,get,media,types,for,element,type,is,empty,return,mono,error,new,illegal,state,exception,no,writer,for,element,type,return,mono,error,new,not,acceptable,status,exception,get,media,types,for,element,type
