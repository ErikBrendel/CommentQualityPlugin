commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the configured message converters.  */ ;/**  * Return the configured message converters.  */ public List<HttpMessageWriter<?>> getMessageWriters() {     return this.messageWriters. }
true;protected;3;3;/**  * Write a given body to the response with {@link HttpMessageWriter}.  * @param body the object to write  * @param bodyParameter the {@link MethodParameter} of the body to write  * @param exchange the current exchange  * @return indicates completion or error  * @see #writeBody(Object, MethodParameter, MethodParameter, ServerWebExchange)  */ ;/**  * Write a given body to the response with {@link HttpMessageWriter}.  * @param body the object to write  * @param bodyParameter the {@link MethodParameter} of the body to write  * @param exchange the current exchange  * @return indicates completion or error  * @see #writeBody(Object, MethodParameter, MethodParameter, ServerWebExchange)  */ protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter, ServerWebExchange exchange) {     return this.writeBody(body, bodyParameter, null, exchange). }
true;protected;4;50;/**  * Write a given body to the response with {@link HttpMessageWriter}.  * @param body the object to write  * @param bodyParameter the {@link MethodParameter} of the body to write  * @param actualParam the actual return type of the method that returned the value.  * could be different from {@code bodyParameter} when processing {@code HttpEntity}  * for example  * @param exchange the current exchange  * @return indicates completion or error  * @since 5.0.2  */ ;/**  * Write a given body to the response with {@link HttpMessageWriter}.  * @param body the object to write  * @param bodyParameter the {@link MethodParameter} of the body to write  * @param actualParam the actual return type of the method that returned the value.  * could be different from {@code bodyParameter} when processing {@code HttpEntity}  * for example  * @param exchange the current exchange  * @return indicates completion or error  * @since 5.0.2  */ @SuppressWarnings({ "unchecked", "rawtypes" }) protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter, @Nullable MethodParameter actualParam, ServerWebExchange exchange) {     ResolvableType bodyType = ResolvableType.forMethodParameter(bodyParameter).     ResolvableType actualType = (actualParam != null ? ResolvableType.forMethodParameter(actualParam) : bodyType).     ReactiveAdapter adapter = getAdapterRegistry().getAdapter(bodyType.resolve(), body).     Publisher<?> publisher.     ResolvableType elementType.     if (adapter != null) {         publisher = adapter.toPublisher(body).         ResolvableType genericType = bodyType.getGeneric().         elementType = getElementType(adapter, genericType).     } else {         publisher = Mono.justOrEmpty(body).         elementType = (bodyType.toClass() == Object.class && body != null ? ResolvableType.forInstance(body) : bodyType).     }     if (elementType.resolve() == void.class || elementType.resolve() == Void.class) {         return Mono.from((Publisher<Void>) publisher).     }     ServerHttpRequest request = exchange.getRequest().     ServerHttpResponse response = exchange.getResponse().     List<MediaType> writableMediaTypes = getMediaTypesFor(elementType).     MediaType bestMediaType = selectMediaType(exchange, () -> writableMediaTypes).     if (bestMediaType != null) {         String logPrefix = exchange.getLogPrefix().         if (logger.isDebugEnabled()) {             logger.debug(logPrefix + (publisher instanceof Mono ? "0..1" : "0..N") + " [" + elementType + "]").         }         for (HttpMessageWriter<?> writer : getMessageWriters()) {             if (writer.canWrite(elementType, bestMediaType)) {                 return writer.write((Publisher) publisher, actualType, elementType, bestMediaType, request, response, Hints.from(Hints.LOG_PREFIX_HINT, logPrefix)).             }         }     } else {         if (writableMediaTypes.isEmpty()) {             return Mono.error(new IllegalStateException("No writer for : " + elementType)).         }     }     return Mono.error(new NotAcceptableStatusException(writableMediaTypes)). }
false;private;2;11;;private ResolvableType getElementType(ReactiveAdapter adapter, ResolvableType genericType) {     if (adapter.isNoValue()) {         return ResolvableType.forClass(Void.class).     } else if (genericType != ResolvableType.NONE) {         return genericType.     } else {         return ResolvableType.forClass(Object.class).     } }
false;private;1;9;;private List<MediaType> getMediaTypesFor(ResolvableType elementType) {     List<MediaType> writableMediaTypes = new ArrayList<>().     for (HttpMessageWriter<?> converter : getMessageWriters()) {         if (converter.canWrite(elementType, null)) {             writableMediaTypes.addAll(converter.getWritableMediaTypes()).         }     }     return writableMediaTypes. }
