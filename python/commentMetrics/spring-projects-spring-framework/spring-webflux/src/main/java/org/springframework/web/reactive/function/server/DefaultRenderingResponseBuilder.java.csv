commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;@Override public RenderingResponse.Builder status(HttpStatus status) {     Assert.notNull(status, "HttpStatus must not be null").     this.status = status.value().     return this. }
false;public;1;5;;@Override public RenderingResponse.Builder status(int status) {     this.status = status.     return this. }
false;public;1;6;;@Override public RenderingResponse.Builder cookie(ResponseCookie cookie) {     Assert.notNull(cookie, "ResponseCookie must not be null").     this.cookies.add(cookie.getName(), cookie).     return this. }
false;public;1;5;;@Override public RenderingResponse.Builder cookies(Consumer<MultiValueMap<String, ResponseCookie>> cookiesConsumer) {     cookiesConsumer.accept(this.cookies).     return this. }
false;public;1;8;;@Override public RenderingResponse.Builder modelAttribute(Object attribute) {     Assert.notNull(attribute, "Attribute must not be null").     if (attribute instanceof Collection && ((Collection<?>) attribute).isEmpty()) {         return this.     }     return modelAttribute(Conventions.getVariableName(attribute), attribute). }
false;public;2;6;;@Override public RenderingResponse.Builder modelAttribute(String name, @Nullable Object value) {     Assert.notNull(name, "Name must not be null").     this.model.put(name, value).     return this. }
false;public;1;5;;@Override public RenderingResponse.Builder modelAttributes(Object... attributes) {     modelAttributes(Arrays.asList(attributes)).     return this. }
false;public;1;5;;@Override public RenderingResponse.Builder modelAttributes(Collection<?> attributes) {     attributes.forEach(this::modelAttribute).     return this. }
false;public;1;5;;@Override public RenderingResponse.Builder modelAttributes(Map<String, ?> attributes) {     this.model.putAll(attributes).     return this. }
false;public;2;7;;@Override public RenderingResponse.Builder header(String headerName, String... headerValues) {     for (String headerValue : headerValues) {         this.headers.add(headerName, headerValue).     }     return this. }
false;public;1;5;;@Override public RenderingResponse.Builder headers(HttpHeaders headers) {     this.headers.putAll(headers).     return this. }
false;public;0;5;;@Override public Mono<RenderingResponse> build() {     return Mono.just(new DefaultRenderingResponse(this.status, this.headers, this.cookies, this.name, this.model)). }
false;public;0;4;;@Override public String name() {     return this.name. }
false;public;0;4;;@Override public Map<String, Object> model() {     return this.model. }
false;protected;2;18;;@Override protected Mono<Void> writeToInternal(ServerWebExchange exchange, Context context) {     MediaType contentType = exchange.getResponse().getHeaders().getContentType().     Locale locale = LocaleContextHolder.getLocale(exchange.getLocaleContext()).     Stream<ViewResolver> viewResolverStream = context.viewResolvers().stream().     return Flux.fromStream(viewResolverStream).concatMap(viewResolver -> viewResolver.resolveViewName(name(), locale)).next().switchIfEmpty(Mono.error(() -> new IllegalArgumentException("Could not resolve view with name '" + name() + "'"))).flatMap(view -> {         List<MediaType> mediaTypes = view.getSupportedMediaTypes().         return view.render(model(), contentType == null && !mediaTypes.isEmpty() ? mediaTypes.get(0) : contentType, exchange).     }). }
