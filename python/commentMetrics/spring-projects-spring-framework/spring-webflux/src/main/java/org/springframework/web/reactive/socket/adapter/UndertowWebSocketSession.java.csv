commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean canSuspendReceiving() {     return true. }
false;protected;0;4;;@Override protected void suspendReceiving() {     getDelegate().suspendReceives(). }
false;protected;0;4;;@Override protected void resumeReceiving() {     getDelegate().resumeReceives(). }
false;protected;1;25;;@Override protected boolean sendMessage(WebSocketMessage message) throws IOException {     ByteBuffer buffer = message.getPayload().asByteBuffer().     if (WebSocketMessage.Type.TEXT.equals(message.getType())) {         getSendProcessor().setReadyToSend(false).         String text = new String(buffer.array(), StandardCharsets.UTF_8).         WebSockets.sendText(text, getDelegate(), new SendProcessorCallback(message.getPayload())).     } else if (WebSocketMessage.Type.BINARY.equals(message.getType())) {         getSendProcessor().setReadyToSend(false).         WebSockets.sendBinary(buffer, getDelegate(), new SendProcessorCallback(message.getPayload())).     } else if (WebSocketMessage.Type.PING.equals(message.getType())) {         getSendProcessor().setReadyToSend(false).         WebSockets.sendPing(buffer, getDelegate(), new SendProcessorCallback(message.getPayload())).     } else if (WebSocketMessage.Type.PONG.equals(message.getType())) {         getSendProcessor().setReadyToSend(false).         WebSockets.sendPong(buffer, getDelegate(), new SendProcessorCallback(message.getPayload())).     } else {         throw new IllegalArgumentException("Unexpected message type: " + message.getType()).     }     return true. }
false;public;1;8;;@Override public Mono<Void> close(CloseStatus status) {     CloseMessage cm = new CloseMessage(status.getCode(), status.getReason()).     if (!getDelegate().isCloseFrameSent()) {         WebSockets.sendClose(cm, getDelegate(), null).     }     return Mono.empty(). }
false;public;2;6;;@Override public void complete(WebSocketChannel channel, Void context) {     DataBufferUtils.release(this.payload).     getSendProcessor().setReadyToSend(true).     getSendProcessor().onWritePossible(). }
false;public;3;6;;@Override public void onError(WebSocketChannel channel, Void context, Throwable throwable) {     DataBufferUtils.release(this.payload).     getSendProcessor().cancel().     getSendProcessor().onError(throwable). }
