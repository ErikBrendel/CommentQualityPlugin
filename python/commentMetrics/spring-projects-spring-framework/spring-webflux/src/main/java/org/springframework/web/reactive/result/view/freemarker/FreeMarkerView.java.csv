commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the FreeMarker Configuration to be used by this view.  * <p>Typically this property is not set directly. Instead a single  * {@link FreeMarkerConfig} is expected in the Spring application context  * which is used to obtain the FreeMarker configuration.  */ ;/**  * Set the FreeMarker Configuration to be used by this view.  * <p>Typically this property is not set directly. Instead a single  * {@link FreeMarkerConfig} is expected in the Spring application context  * which is used to obtain the FreeMarker configuration.  */ public void setConfiguration(@Nullable Configuration configuration) {     this.configuration = configuration. }
true;protected;0;4;/**  * Return the FreeMarker configuration used by this view.  */ ;/**  * Return the FreeMarker configuration used by this view.  */ @Nullable protected Configuration getConfiguration() {     return this.configuration. }
true;protected;0;5;/**  * Obtain the FreeMarker configuration for actual use.  * @return the FreeMarker configuration (never {@code null})  * @throws IllegalStateException in case of no Configuration object set  * @since 5.0  */ ;/**  * Obtain the FreeMarker configuration for actual use.  * @return the FreeMarker configuration (never {@code null})  * @throws IllegalStateException in case of no Configuration object set  * @since 5.0  */ protected Configuration obtainConfiguration() {     Configuration configuration = getConfiguration().     Assert.state(configuration != null, "No Configuration set").     return configuration. }
true;public;1;3;/**  * Set the encoding of the FreeMarker template file.  * <p>By default {@link FreeMarkerConfigurer} sets the default encoding in  * the FreeMarker configuration to "UTF-8". It's recommended to specify the  * encoding in the FreeMarker Configuration rather than per template if all  * your templates share a common encoding.  */ ;/**  * Set the encoding of the FreeMarker template file.  * <p>By default {@link FreeMarkerConfigurer} sets the default encoding in  * the FreeMarker configuration to "UTF-8". It's recommended to specify the  * encoding in the FreeMarker Configuration rather than per template if all  * your templates share a common encoding.  */ public void setEncoding(@Nullable String encoding) {     this.encoding = encoding. }
true;protected;0;4;/**  * Return the encoding for the FreeMarker template.  */ ;/**  * Return the encoding for the FreeMarker template.  */ @Nullable protected String getEncoding() {     return this.encoding. }
false;public;0;8;;@Override public void afterPropertiesSet() throws Exception {     super.afterPropertiesSet().     if (getConfiguration() == null) {         FreeMarkerConfig config = autodetectConfiguration().         setConfiguration(config.getConfiguration()).     } }
true;protected;0;12;/**  * Autodetect a {@link FreeMarkerConfig} object via the ApplicationContext.  * @return the Configuration instance to use for FreeMarkerViews  * @throws BeansException if no Configuration instance could be found  * @see #setConfiguration  */ ;/**  * Autodetect a {@link FreeMarkerConfig} object via the ApplicationContext.  * @return the Configuration instance to use for FreeMarkerViews  * @throws BeansException if no Configuration instance could be found  * @see #setConfiguration  */ protected FreeMarkerConfig autodetectConfiguration() throws BeansException {     try {         return BeanFactoryUtils.beanOfTypeIncludingAncestors(obtainApplicationContext(), FreeMarkerConfig.class, true, false).     } catch (NoSuchBeanDefinitionException ex) {         throw new ApplicationContextException("Must define a single FreeMarkerConfig bean in this web application context " + "(may be inherited): FreeMarkerConfigurer is the usual implementation. " + "This bean may be given any name.", ex).     } }
true;public;1;20;/**  * Check that the FreeMarker template used for this view exists and is valid.  * <p>Can be overridden to customize the behavior, for example in case of  * multiple templates to be rendered into a single view.  */ ;/**  * Check that the FreeMarker template used for this view exists and is valid.  * <p>Can be overridden to customize the behavior, for example in case of  * multiple templates to be rendered into a single view.  */ @Override public boolean checkResourceExists(Locale locale) throws Exception {     try {         // Check that we can get the template, even if we might subsequently get it again.         getTemplate(locale).         return true.     } catch (FileNotFoundException ex) {         // Allow for ViewResolver chaining...         return false.     } catch (ParseException ex) {         throw new ApplicationContextException("Failed to parse FreeMarker template for URL [" + getUrl() + "]", ex).     } catch (IOException ex) {         throw new ApplicationContextException("Could not load FreeMarker template for URL [" + getUrl() + "]", ex).     } }
false;protected;3;29;;@Override protected Mono<Void> renderInternal(Map<String, Object> renderAttributes, @Nullable MediaType contentType, ServerWebExchange exchange) {     // Expose all standard FreeMarker hash models.     SimpleHash freeMarkerModel = getTemplateModel(renderAttributes, exchange).     if (logger.isDebugEnabled()) {         logger.debug(exchange.getLogPrefix() + "Rendering [" + getUrl() + "]").     }     Locale locale = LocaleContextHolder.getLocale(exchange.getLocaleContext()).     DataBuffer dataBuffer = exchange.getResponse().bufferFactory().allocateBuffer().     try {         Charset charset = getCharset(contentType).         Writer writer = new OutputStreamWriter(dataBuffer.asOutputStream(), charset).         getTemplate(locale).process(freeMarkerModel, writer).     } catch (IOException ex) {         DataBufferUtils.release(dataBuffer).         String message = "Could not load FreeMarker template for URL [" + getUrl() + "]".         return Mono.error(new IllegalStateException(message, ex)).     } catch (Throwable ex) {         DataBufferUtils.release(dataBuffer).         return Mono.error(ex).     }     return exchange.getResponse().writeWith(Flux.just(dataBuffer)). }
false;private;1;3;;private Charset getCharset(@Nullable MediaType mediaType) {     return Optional.ofNullable(mediaType).map(MimeType::getCharset).orElse(getDefaultCharset()). }
true;protected;2;5;/**  * Build a FreeMarker template model for the given model Map.  * <p>The default implementation builds a {@link SimpleHash}.  * @param model the model to use for rendering  * @param exchange current exchange  * @return the FreeMarker template model, as a {@link SimpleHash} or subclass thereof  */ ;/**  * Build a FreeMarker template model for the given model Map.  * <p>The default implementation builds a {@link SimpleHash}.  * @param model the model to use for rendering  * @param exchange current exchange  * @return the FreeMarker template model, as a {@link SimpleHash} or subclass thereof  */ protected SimpleHash getTemplateModel(Map<String, Object> model, ServerWebExchange exchange) {     SimpleHash fmModel = new SimpleHash(getObjectWrapper()).     fmModel.putAll(model).     return fmModel. }
true;protected;0;5;/**  * Return the configured FreeMarker {@link ObjectWrapper}, or the  * {@link ObjectWrapper#DEFAULT_WRAPPER default wrapper} if none specified.  * @see freemarker.template.Configuration#getObjectWrapper()  */ ;/**  * Return the configured FreeMarker {@link ObjectWrapper}, or the  * {@link ObjectWrapper#DEFAULT_WRAPPER default wrapper} if none specified.  * @see freemarker.template.Configuration#getObjectWrapper()  */ protected ObjectWrapper getObjectWrapper() {     ObjectWrapper ow = obtainConfiguration().getObjectWrapper().     Version version = Configuration.DEFAULT_INCOMPATIBLE_IMPROVEMENTS.     return (ow != null ? ow : new DefaultObjectWrapperBuilder(version).build()). }
true;protected;1;5;/**  * Retrieve the FreeMarker template for the given locale,  * to be rendering by this view.  * <p>By default, the template specified by the "url" bean property  * will be retrieved.  * @param locale the current locale  * @return the FreeMarker template to render  */ ;/**  * Retrieve the FreeMarker template for the given locale,  * to be rendering by this view.  * <p>By default, the template specified by the "url" bean property  * will be retrieved.  * @param locale the current locale  * @return the FreeMarker template to render  */ protected Template getTemplate(Locale locale) throws IOException {     return (getEncoding() != null ? obtainConfiguration().getTemplate(getUrl(), locale, getEncoding()) : obtainConfiguration().getTemplate(getUrl(), locale)). }
