commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Return the status code of this response.  * @return the status as an HttpStatus enum value  * @throws IllegalArgumentException in case of an unknown HTTP status code  * @see HttpStatus#valueOf(int)  */ ;/**  * Return the status code of this response.  * @return the status as an HttpStatus enum value  * @throws IllegalArgumentException in case of an unknown HTTP status code  * @see HttpStatus#valueOf(int)  */ HttpStatus statusCode().
true;;0;1;/**  * Return the (potentially non-standard) status code of this response.  * @return the status as an integer  * @since 5.1  * @see #statusCode()  * @see HttpStatus#resolve(int)  */ ;/**  * Return the (potentially non-standard) status code of this response.  * @return the status as an integer  * @since 5.1  * @see #statusCode()  * @see HttpStatus#resolve(int)  */ int rawStatusCode().
true;;0;1;/**  * Return the headers of this response.  */ ;/**  * Return the headers of this response.  */ Headers headers().
true;;0;1;/**  * Return cookies of this response.  */ ;/**  * Return cookies of this response.  */ MultiValueMap<String, ResponseCookie> cookies().
true;;0;1;/**  * Return the strategies used to convert the body of this response.  */ ;/**  * Return the strategies used to convert the body of this response.  */ ExchangeStrategies strategies().
true;;1;1;/**  * Extract the body with the given {@code BodyExtractor}.  * @param extractor the {@code BodyExtractor} that reads from the response  * @param <T> the type of the body returned  * @return the extracted body  */ ;/**  * Extract the body with the given {@code BodyExtractor}.  * @param extractor the {@code BodyExtractor} that reads from the response  * @param <T> the type of the body returned  * @return the extracted body  */ <T> T body(BodyExtractor<T, ? super ClientHttpResponse> extractor).
true;;1;1;/**  * Extract the body to a {@code Mono}.  * @param elementClass the class of element in the {@code Mono}  * @param <T> the element type  * @return a mono containing the body of the given type {@code T}  */ ;/**  * Extract the body to a {@code Mono}.  * @param elementClass the class of element in the {@code Mono}  * @param <T> the element type  * @return a mono containing the body of the given type {@code T}  */ <T> Mono<T> bodyToMono(Class<? extends T> elementClass).
true;;1;1;/**  * Extract the body to a {@code Mono}.  * @param typeReference a type reference describing the expected response body type  * @param <T> the element type  * @return a mono containing the body of the given type {@code T}  */ ;/**  * Extract the body to a {@code Mono}.  * @param typeReference a type reference describing the expected response body type  * @param <T> the element type  * @return a mono containing the body of the given type {@code T}  */ <T> Mono<T> bodyToMono(ParameterizedTypeReference<T> typeReference).
true;;1;1;/**  * Extract the body to a {@code Flux}.  * @param elementClass the class of element in the {@code Flux}  * @param <T> the element type  * @return a flux containing the body of the given type {@code T}  */ ;/**  * Extract the body to a {@code Flux}.  * @param elementClass the class of element in the {@code Flux}  * @param <T> the element type  * @return a flux containing the body of the given type {@code T}  */ <T> Flux<T> bodyToFlux(Class<? extends T> elementClass).
true;;1;1;/**  * Extract the body to a {@code Flux}.  * @param typeReference a type reference describing the expected response body type  * @param <T> the element type  * @return a flux containing the body of the given type {@code T}  */ ;/**  * Extract the body to a {@code Flux}.  * @param typeReference a type reference describing the expected response body type  * @param <T> the element type  * @return a flux containing the body of the given type {@code T}  */ <T> Flux<T> bodyToFlux(ParameterizedTypeReference<T> typeReference).
true;;1;1;/**  * Return this response as a delayed {@code ResponseEntity}.  * @param bodyType the expected response body type  * @param <T> response body type  * @return {@code Mono} with the {@code ResponseEntity}  */ ;/**  * Return this response as a delayed {@code ResponseEntity}.  * @param bodyType the expected response body type  * @param <T> response body type  * @return {@code Mono} with the {@code ResponseEntity}  */ <T> Mono<ResponseEntity<T>> toEntity(Class<T> bodyType).
true;;1;1;/**  * Return this response as a delayed {@code ResponseEntity}.  * @param typeReference a type reference describing the expected response body type  * @param <T> response body type  * @return {@code Mono} with the {@code ResponseEntity}  */ ;/**  * Return this response as a delayed {@code ResponseEntity}.  * @param typeReference a type reference describing the expected response body type  * @param <T> response body type  * @return {@code Mono} with the {@code ResponseEntity}  */ <T> Mono<ResponseEntity<T>> toEntity(ParameterizedTypeReference<T> typeReference).
true;;1;1;/**  * Return this response as a delayed list of {@code ResponseEntity}s.  * @param elementType the expected response body list element type  * @param <T> the type of elements in the list  * @return {@code Mono} with the list of {@code ResponseEntity}s  */ ;/**  * Return this response as a delayed list of {@code ResponseEntity}s.  * @param elementType the expected response body list element type  * @param <T> the type of elements in the list  * @return {@code Mono} with the list of {@code ResponseEntity}s  */ <T> Mono<ResponseEntity<List<T>>> toEntityList(Class<T> elementType).
true;;1;1;/**  * Return this response as a delayed list of {@code ResponseEntity}s.  * @param typeReference a type reference describing the expected response body type  * @param <T> the type of elements in the list  * @return {@code Mono} with the list of {@code ResponseEntity}s  */ ;/**  * Return this response as a delayed list of {@code ResponseEntity}s.  * @param typeReference a type reference describing the expected response body type  * @param <T> the type of elements in the list  * @return {@code Mono} with the list of {@code ResponseEntity}s  */ <T> Mono<ResponseEntity<List<T>>> toEntityList(ParameterizedTypeReference<T> typeReference).
true;static;1;3;/**  * Create a builder with the status, headers, and cookies of the given response.  * @param other the response to copy the status, headers, and cookies from  * @return the created builder  */ ;// Static builder methods /**  * Create a builder with the status, headers, and cookies of the given response.  * @param other the response to copy the status, headers, and cookies from  * @return the created builder  */ static Builder from(ClientResponse other) {     return new DefaultClientResponseBuilder(other). }
true;static;1;3;/**  * Create a response builder with the given status code and using default strategies for  * reading the body.  * @param statusCode the status code  * @return the created builder  */ ;/**  * Create a response builder with the given status code and using default strategies for  * reading the body.  * @param statusCode the status code  * @return the created builder  */ static Builder create(HttpStatus statusCode) {     return create(statusCode, ExchangeStrategies.withDefaults()). }
true;static;2;3;/**  * Create a response builder with the given status code and strategies for reading the body.  * @param statusCode the status code  * @param strategies the strategies  * @return the created builder  */ ;/**  * Create a response builder with the given status code and strategies for reading the body.  * @param statusCode the status code  * @param strategies the strategies  * @return the created builder  */ static Builder create(HttpStatus statusCode, ExchangeStrategies strategies) {     return new DefaultClientResponseBuilder(strategies).statusCode(statusCode). }
false;public;0;4;;@Override public List<HttpMessageReader<?>> messageReaders() {     return messageReaders. }
false;public;0;5;;@Override public List<HttpMessageWriter<?>> messageWriters() {     // not used in the response     return Collections.emptyList(). }
true;static;2;13;/**  * Create a response builder with the given status code and message body readers.  * @param statusCode the status code  * @param messageReaders the message readers  * @return the created builder  */ ;/**  * Create a response builder with the given status code and message body readers.  * @param statusCode the status code  * @param messageReaders the message readers  * @return the created builder  */ static Builder create(HttpStatus statusCode, List<HttpMessageReader<?>> messageReaders) {     return create(statusCode, new ExchangeStrategies() {          @Override         public List<HttpMessageReader<?>> messageReaders() {             return messageReaders.         }          @Override         public List<HttpMessageWriter<?>> messageWriters() {             // not used in the response             return Collections.emptyList().         }     }). }
true;;0;1;/**  * Return the length of the body in bytes, as specified by the  * {@code Content-Length} header.  */ ;/**  * Return the length of the body in bytes, as specified by the  * {@code Content-Length} header.  */ OptionalLong contentLength().
true;;0;1;/**  * Return the {@linkplain MediaType media type} of the body, as specified  * by the {@code Content-Type} header.  */ ;/**  * Return the {@linkplain MediaType media type} of the body, as specified  * by the {@code Content-Type} header.  */ Optional<MediaType> contentType().
true;;1;1;/**  * Return the header value(s), if any, for the header of the given name.  * <p>Return an empty list if no header values are found.  * @param headerName the header name  */ ;/**  * Return the header value(s), if any, for the header of the given name.  * <p>Return an empty list if no header values are found.  * @param headerName the header name  */ List<String> header(String headerName).
true;;0;1;/**  * Return the headers as a {@link HttpHeaders} instance.  */ ;/**  * Return the headers as a {@link HttpHeaders} instance.  */ HttpHeaders asHttpHeaders().
true;;1;1;/**  * Set the status code of the response.  * @param statusCode the new status code.  * @return this builder  */ ;/**  * Set the status code of the response.  * @param statusCode the new status code.  * @return this builder  */ Builder statusCode(HttpStatus statusCode).
true;;2;1;/**  * Add the given header value(s) under the given name.  * @param headerName  the header name  * @param headerValues the header value(s)  * @return this builder  * @see HttpHeaders#add(String, String)  */ ;/**  * Add the given header value(s) under the given name.  * @param headerName  the header name  * @param headerValues the header value(s)  * @return this builder  * @see HttpHeaders#add(String, String)  */ Builder header(String headerName, String... headerValues).
true;;1;1;/**  * Manipulate this response's headers with the given consumer. The  * headers provided to the consumer are "live", so that the consumer can be used to  * {@linkplain HttpHeaders#set(String, String) overwrite} existing header values,  * {@linkplain HttpHeaders#remove(Object) remove} values, or use any of the other  * {@link HttpHeaders} methods.  * @param headersConsumer a function that consumes the {@code HttpHeaders}  * @return this builder  */ ;/**  * Manipulate this response's headers with the given consumer. The  * headers provided to the consumer are "live", so that the consumer can be used to  * {@linkplain HttpHeaders#set(String, String) overwrite} existing header values,  * {@linkplain HttpHeaders#remove(Object) remove} values, or use any of the other  * {@link HttpHeaders} methods.  * @param headersConsumer a function that consumes the {@code HttpHeaders}  * @return this builder  */ Builder headers(Consumer<HttpHeaders> headersConsumer).
true;;2;1;/**  * Add a cookie with the given name and value(s).  * @param name the cookie name  * @param values the cookie value(s)  * @return this builder  */ ;/**  * Add a cookie with the given name and value(s).  * @param name the cookie name  * @param values the cookie value(s)  * @return this builder  */ Builder cookie(String name, String... values).
true;;1;1;/**  * Manipulate this response's cookies with the given consumer. The  * map provided to the consumer is "live", so that the consumer can be used to  * {@linkplain MultiValueMap#set(Object, Object) overwrite} existing header values,  * {@linkplain MultiValueMap#remove(Object) remove} values, or use any of the other  * {@link MultiValueMap} methods.  * @param cookiesConsumer a function that consumes the cookies map  * @return this builder  */ ;/**  * Manipulate this response's cookies with the given consumer. The  * map provided to the consumer is "live", so that the consumer can be used to  * {@linkplain MultiValueMap#set(Object, Object) overwrite} existing header values,  * {@linkplain MultiValueMap#remove(Object) remove} values, or use any of the other  * {@link MultiValueMap} methods.  * @param cookiesConsumer a function that consumes the cookies map  * @return this builder  */ Builder cookies(Consumer<MultiValueMap<String, ResponseCookie>> cookiesConsumer).
true;;1;1;/**  * Set the body of the response. Calling this methods will  * {@linkplain org.springframework.core.io.buffer.DataBufferUtils#release(DataBuffer) release}  * the existing body of the builder.  * @param body the new body.  * @return this builder  */ ;/**  * Set the body of the response. Calling this methods will  * {@linkplain org.springframework.core.io.buffer.DataBufferUtils#release(DataBuffer) release}  * the existing body of the builder.  * @param body the new body.  * @return this builder  */ Builder body(Flux<DataBuffer> body).
true;;1;1;/**  * Set the body of the response to the UTF-8 encoded bytes of the given string.  * Calling this methods will  * {@linkplain org.springframework.core.io.buffer.DataBufferUtils#release(DataBuffer) release}  * the existing body of the builder.  * @param body the new body.  * @return this builder  */ ;/**  * Set the body of the response to the UTF-8 encoded bytes of the given string.  * Calling this methods will  * {@linkplain org.springframework.core.io.buffer.DataBufferUtils#release(DataBuffer) release}  * the existing body of the builder.  * @param body the new body.  * @return this builder  */ Builder body(String body).
true;;0;1;/**  * Build the response.  */ ;/**  * Build the response.  */ ClientResponse build().
