commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Whether this {@code HandlerAdapter} supports the given {@code handler}.  * @param handler handler object to check  * @return whether or not the handler is supported  */ ;/**  * Whether this {@code HandlerAdapter} supports the given {@code handler}.  * @param handler handler object to check  * @return whether or not the handler is supported  */ boolean supports(Object handler).
true;;2;1;/**  * Handle the request with the given handler.  * <p>Implementations are encouraged to handle exceptions resulting from the  * invocation of a handler in order and if necessary to return an alternate  * result that represents an error response.  * <p>Furthermore since an async {@code HandlerResult} may produce an error  * later during result handling implementations are also encouraged to  * {@link HandlerResult#setExceptionHandler(Function) set an exception  * handler} on the {@code HandlerResult} so that may also be applied later  * after result handling.  * @param exchange current server exchange  * @param handler the selected handler which must have been previously  * checked via {@link #supports(Object)}  * @return {@link Mono} that emits a single {@code HandlerResult} or none if  * the request has been fully handled and doesn't require further handling.  */ ;/**  * Handle the request with the given handler.  * <p>Implementations are encouraged to handle exceptions resulting from the  * invocation of a handler in order and if necessary to return an alternate  * result that represents an error response.  * <p>Furthermore since an async {@code HandlerResult} may produce an error  * later during result handling implementations are also encouraged to  * {@link HandlerResult#setExceptionHandler(Function) set an exception  * handler} on the {@code HandlerResult} so that may also be applied later  * after result handling.  * @param exchange current server exchange  * @param handler the selected handler which must have been previously  * checked via {@link #supports(Object)}  * @return {@link Mono} that emits a single {@code HandlerResult} or none if  * the request has been fully handled and doesn't require further handling.  */ Mono<HandlerResult> handle(ServerWebExchange exchange, Object handler).
