commented;modifiers;parameterAmount;loc;comment;code
true;default;1;2;/**  * Configure how the content type requested for the response is resolved  * when handling requests with annotated controllers.  * @param builder for configuring the resolvers to use  */ ;/**  * Configure how the content type requested for the response is resolved  * when handling requests with annotated controllers.  * @param builder for configuring the resolvers to use  */ default void configureContentTypeResolver(RequestedContentTypeResolverBuilder builder) { }
true;default;1;2;/**  * Configure "global" cross origin request processing.  * <p>The configured readers and writers will apply to all requests including  * annotated controllers and functional endpoints. Annotated controllers can  * further declare more fine-grained configuration via  * {@link org.springframework.web.bind.annotation.CrossOrigin @CrossOrigin}.  * @see CorsRegistry  */ ;/**  * Configure "global" cross origin request processing.  * <p>The configured readers and writers will apply to all requests including  * annotated controllers and functional endpoints. Annotated controllers can  * further declare more fine-grained configuration via  * {@link org.springframework.web.bind.annotation.CrossOrigin @CrossOrigin}.  * @see CorsRegistry  */ default void addCorsMappings(CorsRegistry registry) { }
true;default;1;2;/**  * Configure path matching options.  * <p>The configured path matching options will be used for mapping to  * annotated controllers and also  * {@link #addResourceHandlers(ResourceHandlerRegistry) static resources}.  * @param configurer the {@link PathMatchConfigurer} instance  */ ;/**  * Configure path matching options.  * <p>The configured path matching options will be used for mapping to  * annotated controllers and also  * {@link #addResourceHandlers(ResourceHandlerRegistry) static resources}.  * @param configurer the {@link PathMatchConfigurer} instance  */ default void configurePathMatching(PathMatchConfigurer configurer) { }
true;default;1;2;/**  * Add resource handlers for serving static resources.  * @see ResourceHandlerRegistry  */ ;/**  * Add resource handlers for serving static resources.  * @see ResourceHandlerRegistry  */ default void addResourceHandlers(ResourceHandlerRegistry registry) { }
true;default;1;2;/**  * Configure resolvers for custom {@code @RequestMapping} method arguments.  * @param configurer to configurer to use  */ ;/**  * Configure resolvers for custom {@code @RequestMapping} method arguments.  * @param configurer to configurer to use  */ default void configureArgumentResolvers(ArgumentResolverConfigurer configurer) { }
true;default;1;2;/**  * Configure custom HTTP message readers and writers or override built-in ones.  * <p>The configured readers and writers will be used for both annotated  * controllers and functional endpoints.  * @param configurer the configurer to use  */ ;/**  * Configure custom HTTP message readers and writers or override built-in ones.  * <p>The configured readers and writers will be used for both annotated  * controllers and functional endpoints.  * @param configurer the configurer to use  */ default void configureHttpMessageCodecs(ServerCodecConfigurer configurer) { }
true;default;1;2;/**  * Add custom {@link Converter Converters} and {@link Formatter Formatters} for  * performing type conversion and formatting of annotated controller method arguments.  */ ;/**  * Add custom {@link Converter Converters} and {@link Formatter Formatters} for  * performing type conversion and formatting of annotated controller method arguments.  */ default void addFormatters(FormatterRegistry registry) { }
true;default;0;4;/**  * Provide a custom {@link Validator}.  * <p>By default a validator for standard bean validation is created if  * bean validation API is present on the classpath.  * <p>The configured validator is used for validating annotated controller  * method arguments.  */ ;/**  * Provide a custom {@link Validator}.  * <p>By default a validator for standard bean validation is created if  * bean validation API is present on the classpath.  * <p>The configured validator is used for validating annotated controller  * method arguments.  */ @Nullable default Validator getValidator() {     return null. }
true;default;0;4;/**  * Provide a custom {@link MessageCodesResolver} to use for data binding in  * annotated controller method arguments instead of the one created by  * default in {@link org.springframework.validation.DataBinder}.  */ ;/**  * Provide a custom {@link MessageCodesResolver} to use for data binding in  * annotated controller method arguments instead of the one created by  * default in {@link org.springframework.validation.DataBinder}.  */ @Nullable default MessageCodesResolver getMessageCodesResolver() {     return null. }
true;default;1;2;/**  * Configure view resolution for rendering responses with a view and a model,  * where the view is typically an HTML template but could also be based on  * an HTTP message writer (e.g. JSON, XML).  * <p>The configured view resolvers will be used for both annotated  * controllers and functional endpoints.  */ ;/**  * Configure view resolution for rendering responses with a view and a model,  * where the view is typically an HTML template but could also be based on  * an HTTP message writer (e.g. JSON, XML).  * <p>The configured view resolvers will be used for both annotated  * controllers and functional endpoints.  */ default void configureViewResolvers(ViewResolverRegistry registry) { }
