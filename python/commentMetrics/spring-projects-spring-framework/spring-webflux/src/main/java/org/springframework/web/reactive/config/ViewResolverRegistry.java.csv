# id;timestamp;commentText;codeText;commentWords;codeWords
ViewResolverRegistry -> public UrlBasedViewResolverRegistration freeMarker();1485986572;Register a {@code FreeMarkerViewResolver} with a ".ftl" suffix._<p><strong>Note</strong> that you must also configure FreeMarker by_adding a {@link FreeMarkerConfigurer} bean.;public UrlBasedViewResolverRegistration freeMarker() {_		if (this.applicationContext != null && !hasBeanOfType(FreeMarkerConfigurer.class)) {_			throw new BeanInitializationException("In addition to a FreeMarker view resolver " +_					"there must also be a single FreeMarkerConfig bean in this web application context " +_					"(or its parent): FreeMarkerConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		FreeMarkerRegistration registration = new FreeMarkerRegistration()__		UrlBasedViewResolver resolver = registration.getViewResolver()__		resolver.setApplicationContext(this.applicationContext)__		this.viewResolvers.add(resolver)__		return registration__	};register,a,code,free,marker,view,resolver,with,a,ftl,suffix,p,strong,note,strong,that,you,must,also,configure,free,marker,by,adding,a,link,free,marker,configurer,bean;public,url,based,view,resolver,registration,free,marker,if,this,application,context,null,has,bean,of,type,free,marker,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,free,marker,view,resolver,there,must,also,be,a,single,free,marker,config,bean,in,this,web,application,context,or,its,parent,free,marker,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,free,marker,registration,registration,new,free,marker,registration,url,based,view,resolver,resolver,registration,get,view,resolver,resolver,set,application,context,this,application,context,this,view,resolvers,add,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration freeMarker();1496837955;Register a {@code FreeMarkerViewResolver} with a ".ftl" suffix._<p><strong>Note</strong> that you must also configure FreeMarker by_adding a {@link FreeMarkerConfigurer} bean.;public UrlBasedViewResolverRegistration freeMarker() {_		if (this.applicationContext != null && !hasBeanOfType(FreeMarkerConfigurer.class)) {_			throw new BeanInitializationException("In addition to a FreeMarker view resolver " +_					"there must also be a single FreeMarkerConfig bean in this web application context " +_					"(or its parent): FreeMarkerConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		FreeMarkerRegistration registration = new FreeMarkerRegistration()__		UrlBasedViewResolver resolver = registration.getViewResolver()__		if (this.applicationContext != null) {_			resolver.setApplicationContext(this.applicationContext)__		}_		this.viewResolvers.add(resolver)__		return registration__	};register,a,code,free,marker,view,resolver,with,a,ftl,suffix,p,strong,note,strong,that,you,must,also,configure,free,marker,by,adding,a,link,free,marker,configurer,bean;public,url,based,view,resolver,registration,free,marker,if,this,application,context,null,has,bean,of,type,free,marker,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,free,marker,view,resolver,there,must,also,be,a,single,free,marker,config,bean,in,this,web,application,context,or,its,parent,free,marker,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,free,marker,registration,registration,new,free,marker,registration,url,based,view,resolver,resolver,registration,get,view,resolver,if,this,application,context,null,resolver,set,application,context,this,application,context,this,view,resolvers,add,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration freeMarker();1498780456;Register a {@code FreeMarkerViewResolver} with a ".ftl" suffix._<p><strong>Note</strong> that you must also configure FreeMarker by_adding a {@link FreeMarkerConfigurer} bean.;public UrlBasedViewResolverRegistration freeMarker() {_		if (!checkBeanOfType(FreeMarkerConfigurer.class)) {_			throw new BeanInitializationException("In addition to a FreeMarker view resolver " +_					"there must also be a single FreeMarkerConfig bean in this web application context " +_					"(or its parent): FreeMarkerConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		FreeMarkerRegistration registration = new FreeMarkerRegistration()__		UrlBasedViewResolver resolver = registration.getViewResolver()__		if (this.applicationContext != null) {_			resolver.setApplicationContext(this.applicationContext)__		}_		this.viewResolvers.add(resolver)__		return registration__	};register,a,code,free,marker,view,resolver,with,a,ftl,suffix,p,strong,note,strong,that,you,must,also,configure,free,marker,by,adding,a,link,free,marker,configurer,bean;public,url,based,view,resolver,registration,free,marker,if,check,bean,of,type,free,marker,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,free,marker,view,resolver,there,must,also,be,a,single,free,marker,config,bean,in,this,web,application,context,or,its,parent,free,marker,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,free,marker,registration,registration,new,free,marker,registration,url,based,view,resolver,resolver,registration,get,view,resolver,if,this,application,context,null,resolver,set,application,context,this,application,context,this,view,resolvers,add,resolver,return,registration
ViewResolverRegistry -> public UrlBasedViewResolverRegistration freeMarker();1517391488;Register a {@code FreeMarkerViewResolver} with a ".ftl" suffix._<p><strong>Note</strong> that you must also configure FreeMarker by_adding a {@link FreeMarkerConfigurer} bean.;public UrlBasedViewResolverRegistration freeMarker() {_		if (!checkBeanOfType(FreeMarkerConfigurer.class)) {_			throw new BeanInitializationException("In addition to a FreeMarker view resolver " +_					"there must also be a single FreeMarkerConfig bean in this web application context " +_					"(or its parent): FreeMarkerConfigurer is the usual implementation. " +_					"This bean may be given any name.")__		}_		FreeMarkerRegistration registration = new FreeMarkerRegistration()__		UrlBasedViewResolver resolver = registration.getViewResolver()__		if (this.applicationContext != null) {_			resolver.setApplicationContext(this.applicationContext)__		}_		this.viewResolvers.add(resolver)__		return registration__	};register,a,code,free,marker,view,resolver,with,a,ftl,suffix,p,strong,note,strong,that,you,must,also,configure,free,marker,by,adding,a,link,free,marker,configurer,bean;public,url,based,view,resolver,registration,free,marker,if,check,bean,of,type,free,marker,configurer,class,throw,new,bean,initialization,exception,in,addition,to,a,free,marker,view,resolver,there,must,also,be,a,single,free,marker,config,bean,in,this,web,application,context,or,its,parent,free,marker,configurer,is,the,usual,implementation,this,bean,may,be,given,any,name,free,marker,registration,registration,new,free,marker,registration,url,based,view,resolver,resolver,registration,get,view,resolver,if,this,application,context,null,resolver,set,application,context,this,application,context,this,view,resolvers,add,resolver,return,registration
ViewResolverRegistry -> public void order(int order);1485986572;Set the order for the_{@link org.springframework.web.reactive.result.view.ViewResolutionResultHandler_ViewResolutionResultHandler}._<p>By default this property is not set, which means the result handler is_ordered at {@link Ordered#LOWEST_PRECEDENCE}.;public void order(int order) {_		this.order = order__	};set,the,order,for,the,link,org,springframework,web,reactive,result,view,view,resolution,result,handler,view,resolution,result,handler,p,by,default,this,property,is,not,set,which,means,the,result,handler,is,ordered,at,link,ordered;public,void,order,int,order,this,order,order
ViewResolverRegistry -> public void order(int order);1496837955;Set the order for the_{@link org.springframework.web.reactive.result.view.ViewResolutionResultHandler_ViewResolutionResultHandler}._<p>By default this property is not set, which means the result handler is_ordered at {@link Ordered#LOWEST_PRECEDENCE}.;public void order(int order) {_		this.order = order__	};set,the,order,for,the,link,org,springframework,web,reactive,result,view,view,resolution,result,handler,view,resolution,result,handler,p,by,default,this,property,is,not,set,which,means,the,result,handler,is,ordered,at,link,ordered;public,void,order,int,order,this,order,order
ViewResolverRegistry -> public void order(int order);1498780456;Set the order for the_{@link org.springframework.web.reactive.result.view.ViewResolutionResultHandler_ViewResolutionResultHandler}._<p>By default this property is not set, which means the result handler is_ordered at {@link Ordered#LOWEST_PRECEDENCE}.;public void order(int order) {_		this.order = order__	};set,the,order,for,the,link,org,springframework,web,reactive,result,view,view,resolution,result,handler,view,resolution,result,handler,p,by,default,this,property,is,not,set,which,means,the,result,handler,is,ordered,at,link,ordered;public,void,order,int,order,this,order,order
ViewResolverRegistry -> public void order(int order);1517391488;Set the order for the_{@link org.springframework.web.reactive.result.view.ViewResolutionResultHandler_ViewResolutionResultHandler}._<p>By default this property is not set, which means the result handler is_ordered at {@link Ordered#LOWEST_PRECEDENCE}.;public void order(int order) {_		this.order = order__	};set,the,order,for,the,link,org,springframework,web,reactive,result,view,view,resolution,result,handler,view,resolution,result,handler,p,by,default,this,property,is,not,set,which,means,the,result,handler,is,ordered,at,link,ordered;public,void,order,int,order,this,order,order
ViewResolverRegistry -> public void viewResolver(ViewResolver viewResolver);1485986572;Register a {@link ViewResolver} bean instance. This may be useful to_configure a 3rd party resolver implementation or as an alternative to_other registration methods in this class when they don't expose some_more advanced property that needs to be set.;public void viewResolver(ViewResolver viewResolver) {_		this.viewResolvers.add(viewResolver)__	};register,a,link,view,resolver,bean,instance,this,may,be,useful,to,configure,a,3rd,party,resolver,implementation,or,as,an,alternative,to,other,registration,methods,in,this,class,when,they,don,t,expose,some,more,advanced,property,that,needs,to,be,set;public,void,view,resolver,view,resolver,view,resolver,this,view,resolvers,add,view,resolver
ViewResolverRegistry -> public void viewResolver(ViewResolver viewResolver);1496837955;Register a {@link ViewResolver} bean instance. This may be useful to_configure a 3rd party resolver implementation or as an alternative to_other registration methods in this class when they don't expose some_more advanced property that needs to be set.;public void viewResolver(ViewResolver viewResolver) {_		this.viewResolvers.add(viewResolver)__	};register,a,link,view,resolver,bean,instance,this,may,be,useful,to,configure,a,3rd,party,resolver,implementation,or,as,an,alternative,to,other,registration,methods,in,this,class,when,they,don,t,expose,some,more,advanced,property,that,needs,to,be,set;public,void,view,resolver,view,resolver,view,resolver,this,view,resolvers,add,view,resolver
ViewResolverRegistry -> public void viewResolver(ViewResolver viewResolver);1498780456;Register a {@link ViewResolver} bean instance. This may be useful to_configure a 3rd party resolver implementation or as an alternative to_other registration methods in this class when they don't expose some_more advanced property that needs to be set.;public void viewResolver(ViewResolver viewResolver) {_		this.viewResolvers.add(viewResolver)__	};register,a,link,view,resolver,bean,instance,this,may,be,useful,to,configure,a,3rd,party,resolver,implementation,or,as,an,alternative,to,other,registration,methods,in,this,class,when,they,don,t,expose,some,more,advanced,property,that,needs,to,be,set;public,void,view,resolver,view,resolver,view,resolver,this,view,resolvers,add,view,resolver
ViewResolverRegistry -> public void viewResolver(ViewResolver viewResolver);1517391488;Register a {@link ViewResolver} bean instance. This may be useful to_configure a 3rd party resolver implementation or as an alternative to_other registration methods in this class when they don't expose some_more advanced property that needs to be set.;public void viewResolver(ViewResolver viewResolver) {_		this.viewResolvers.add(viewResolver)__	};register,a,link,view,resolver,bean,instance,this,may,be,useful,to,configure,a,3rd,party,resolver,implementation,or,as,an,alternative,to,other,registration,methods,in,this,class,when,they,don,t,expose,some,more,advanced,property,that,needs,to,be,set;public,void,view,resolver,view,resolver,view,resolver,this,view,resolvers,add,view,resolver
ViewResolverRegistry -> public void defaultViews(View... defaultViews);1485986572;Set default views associated with any view name and selected based on the_best match for the requested content type._<p>Use {@link HttpMessageWriterView_HttpMessageWriterView} to adapt and use any existing_{@code HttpMessageWriter} (e.g. JSON, XML) as a {@code View}.;public void defaultViews(View... defaultViews) {_		this.defaultViews.addAll(Arrays.asList(defaultViews))__	};set,default,views,associated,with,any,view,name,and,selected,based,on,the,best,match,for,the,requested,content,type,p,use,link,http,message,writer,view,http,message,writer,view,to,adapt,and,use,any,existing,code,http,message,writer,e,g,json,xml,as,a,code,view;public,void,default,views,view,default,views,this,default,views,add,all,arrays,as,list,default,views
ViewResolverRegistry -> public void defaultViews(View... defaultViews);1496837955;Set default views associated with any view name and selected based on the_best match for the requested content type._<p>Use {@link HttpMessageWriterView_HttpMessageWriterView} to adapt and use any existing_{@code HttpMessageWriter} (e.g. JSON, XML) as a {@code View}.;public void defaultViews(View... defaultViews) {_		this.defaultViews.addAll(Arrays.asList(defaultViews))__	};set,default,views,associated,with,any,view,name,and,selected,based,on,the,best,match,for,the,requested,content,type,p,use,link,http,message,writer,view,http,message,writer,view,to,adapt,and,use,any,existing,code,http,message,writer,e,g,json,xml,as,a,code,view;public,void,default,views,view,default,views,this,default,views,add,all,arrays,as,list,default,views
ViewResolverRegistry -> public void defaultViews(View... defaultViews);1498780456;Set default views associated with any view name and selected based on the_best match for the requested content type._<p>Use {@link HttpMessageWriterView_HttpMessageWriterView} to adapt and use any existing_{@code HttpMessageWriter} (e.g. JSON, XML) as a {@code View}.;public void defaultViews(View... defaultViews) {_		this.defaultViews.addAll(Arrays.asList(defaultViews))__	};set,default,views,associated,with,any,view,name,and,selected,based,on,the,best,match,for,the,requested,content,type,p,use,link,http,message,writer,view,http,message,writer,view,to,adapt,and,use,any,existing,code,http,message,writer,e,g,json,xml,as,a,code,view;public,void,default,views,view,default,views,this,default,views,add,all,arrays,as,list,default,views
ViewResolverRegistry -> public void defaultViews(View... defaultViews);1517391488;Set default views associated with any view name and selected based on the_best match for the requested content type._<p>Use {@link HttpMessageWriterView_HttpMessageWriterView} to adapt and use any existing_{@code HttpMessageWriter} (e.g. JSON, XML) as a {@code View}.;public void defaultViews(View... defaultViews) {_		this.defaultViews.addAll(Arrays.asList(defaultViews))__	};set,default,views,associated,with,any,view,name,and,selected,based,on,the,best,match,for,the,requested,content,type,p,use,link,http,message,writer,view,http,message,writer,view,to,adapt,and,use,any,existing,code,http,message,writer,e,g,json,xml,as,a,code,view;public,void,default,views,view,default,views,this,default,views,add,all,arrays,as,list,default,views
ViewResolverRegistry -> public boolean hasRegistrations();1485986572;Whether any view resolvers have been registered.;public boolean hasRegistrations() {_		return (!this.viewResolvers.isEmpty())__	};whether,any,view,resolvers,have,been,registered;public,boolean,has,registrations,return,this,view,resolvers,is,empty
ViewResolverRegistry -> public boolean hasRegistrations();1496837955;Whether any view resolvers have been registered.;public boolean hasRegistrations() {_		return (!this.viewResolvers.isEmpty())__	};whether,any,view,resolvers,have,been,registered;public,boolean,has,registrations,return,this,view,resolvers,is,empty
ViewResolverRegistry -> public boolean hasRegistrations();1498780456;Whether any view resolvers have been registered.;public boolean hasRegistrations() {_		return (!this.viewResolvers.isEmpty())__	};whether,any,view,resolvers,have,been,registered;public,boolean,has,registrations,return,this,view,resolvers,is,empty
ViewResolverRegistry -> public boolean hasRegistrations();1517391488;Whether any view resolvers have been registered.;public boolean hasRegistrations() {_		return (!this.viewResolvers.isEmpty())__	};whether,any,view,resolvers,have,been,registered;public,boolean,has,registrations,return,this,view,resolvers,is,empty
