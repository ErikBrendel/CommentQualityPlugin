commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public boolean supportsParameter(MethodParameter parameter) {     return checkParameterType(parameter, Errors.class::isAssignableFrom). }
false;public;3;15;;@Override public Mono<Object> resolveArgument(MethodParameter parameter, BindingContext context, ServerWebExchange exchange) {     Object errors = getErrors(parameter, context).     if (Mono.class.isAssignableFrom(errors.getClass())) {         return ((Mono<?>) errors).cast(Object.class).     } else if (Errors.class.isAssignableFrom(errors.getClass())) {         return Mono.just(errors).     } else {         throw new IllegalStateException("Unexpected Errors/BindingResult type: " + errors.getClass().getName()).     } }
false;private;2;26;;private Object getErrors(MethodParameter parameter, BindingContext context) {     Assert.isTrue(parameter.getParameterIndex() > 0, "Errors argument must be declared immediately after a model attribute argument").     int index = parameter.getParameterIndex() - 1.     MethodParameter attributeParam = MethodParameter.forExecutable(parameter.getExecutable(), index).     ReactiveAdapter adapter = getAdapterRegistry().getAdapter(attributeParam.getParameterType()).     Assert.state(adapter == null, "An @ModelAttribute and an Errors/BindingResult argument " + "cannot both be declared with an async type wrapper. " + "Either declare the @ModelAttribute without an async wrapper type or " + "handle a WebExchangeBindException error signal through the async type.").     ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class).     String name = (ann != null && StringUtils.hasText(ann.value()) ? ann.value() : Conventions.getVariableNameForParameter(attributeParam)).     Object errors = context.getModel().asMap().get(BindingResult.MODEL_KEY_PREFIX + name).     Assert.state(errors != null, () -> "An Errors/BindingResult argument is expected " + "immediately after the @ModelAttribute argument to which it applies. " + "For @RequestBody and @RequestPart arguments, please declare them with a reactive " + "type wrapper and use its onError operators to handle WebExchangeBindException: " + parameter.getMethod()).     return errors. }
