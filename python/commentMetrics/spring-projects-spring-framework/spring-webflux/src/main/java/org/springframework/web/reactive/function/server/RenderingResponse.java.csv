commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Return the name of the template to be rendered.  */ ;/**  * Return the name of the template to be rendered.  */ String name().
true;;0;1;/**  * Return the unmodifiable model map.  */ ;/**  * Return the unmodifiable model map.  */ Map<String, Object> model().
true;static;1;3;/**  * Create a builder with the template name, status code, headers and model of the given response.  * @param other the response to copy the values from  * @return the created builder  */ ;// Builder /**  * Create a builder with the template name, status code, headers and model of the given response.  * @param other the response to copy the values from  * @return the created builder  */ static Builder from(RenderingResponse other) {     return new DefaultRenderingResponseBuilder(other). }
true;static;1;3;/**  * Create a builder with the given template name.  * @param name the name of the template to render  * @return the created builder  */ ;/**  * Create a builder with the given template name.  * @param name the name of the template to render  * @return the created builder  */ static Builder create(String name) {     return new DefaultRenderingResponseBuilder(name). }
true;;1;1;/**  * Add the supplied attribute to the model using a  * {@linkplain org.springframework.core.Conventions#getVariableName generated name}.  * <p><em>Note: Empty {@link Collection Collections} are not added to  * the model when using this method because we cannot correctly determine  * the true convention name. View code should check for {@code null} rather  * than for empty collections.</em>  * @param attribute the model attribute value (never {@code null})  */ ;/**  * Add the supplied attribute to the model using a  * {@linkplain org.springframework.core.Conventions#getVariableName generated name}.  * <p><em>Note: Empty {@link Collection Collections} are not added to  * the model when using this method because we cannot correctly determine  * the true convention name. View code should check for {@code null} rather  * than for empty collections.</em>  * @param attribute the model attribute value (never {@code null})  */ Builder modelAttribute(Object attribute).
true;;2;1;/**  * Add the supplied attribute value under the supplied name.  * @param name the name of the model attribute (never {@code null})  * @param value the model attribute value (can be {@code null})  */ ;/**  * Add the supplied attribute value under the supplied name.  * @param name the name of the model attribute (never {@code null})  * @param value the model attribute value (can be {@code null})  */ Builder modelAttribute(String name, @Nullable Object value).
true;;1;1;/**  * Copy all attributes in the supplied array into the model,  * using attribute name generation for each element.  * @see #modelAttribute(Object)  */ ;/**  * Copy all attributes in the supplied array into the model,  * using attribute name generation for each element.  * @see #modelAttribute(Object)  */ Builder modelAttributes(Object... attributes).
true;;1;1;/**  * Copy all attributes in the supplied {@code Collection} into the model,  * using attribute name generation for each element.  * @see #modelAttribute(Object)  */ ;/**  * Copy all attributes in the supplied {@code Collection} into the model,  * using attribute name generation for each element.  * @see #modelAttribute(Object)  */ Builder modelAttributes(Collection<?> attributes).
true;;1;1;/**  * Copy all attributes in the supplied {@code Map} into the model.  * @see #modelAttribute(String, Object)  */ ;/**  * Copy all attributes in the supplied {@code Map} into the model.  * @see #modelAttribute(String, Object)  */ Builder modelAttributes(Map<String, ?> attributes).
true;;2;1;/**  * Add the given header value(s) under the given name.  * @param headerName the header name  * @param headerValues the header value(s)  * @return this builder  * @see HttpHeaders#add(String, String)  */ ;/**  * Add the given header value(s) under the given name.  * @param headerName the header name  * @param headerValues the header value(s)  * @return this builder  * @see HttpHeaders#add(String, String)  */ Builder header(String headerName, String... headerValues).
true;;1;1;/**  * Copy the given headers into the entity's headers map.  * @param headers the existing HttpHeaders to copy from  * @return this builder  * @see HttpHeaders#add(String, String)  */ ;/**  * Copy the given headers into the entity's headers map.  * @param headers the existing HttpHeaders to copy from  * @return this builder  * @see HttpHeaders#add(String, String)  */ Builder headers(HttpHeaders headers).
true;;1;1;/**  * Set the HTTP status.  * @param status the response status  * @return this builder  */ ;/**  * Set the HTTP status.  * @param status the response status  * @return this builder  */ Builder status(HttpStatus status).
true;;1;1;/**  * Set the HTTP status.  * @param status the response status  * @return this builder  * @since 5.0.3  */ ;/**  * Set the HTTP status.  * @param status the response status  * @return this builder  * @since 5.0.3  */ Builder status(int status).
true;;1;1;/**  * Add the given cookie to the response.  * @param cookie the cookie to add  * @return this builder  */ ;/**  * Add the given cookie to the response.  * @param cookie the cookie to add  * @return this builder  */ Builder cookie(ResponseCookie cookie).
true;;1;1;/**  * Manipulate this response's cookies with the given consumer. The  * cookies provided to the consumer are "live", so that the consumer can be used to  * {@linkplain MultiValueMap#set(Object, Object) overwrite} existing cookies,  * {@linkplain MultiValueMap#remove(Object) remove} cookies, or use any of the other  * {@link MultiValueMap} methods.  * @param cookiesConsumer a function that consumes the cookies  * @return this builder  */ ;/**  * Manipulate this response's cookies with the given consumer. The  * cookies provided to the consumer are "live", so that the consumer can be used to  * {@linkplain MultiValueMap#set(Object, Object) overwrite} existing cookies,  * {@linkplain MultiValueMap#remove(Object) remove} cookies, or use any of the other  * {@link MultiValueMap} methods.  * @param cookiesConsumer a function that consumes the cookies  * @return this builder  */ Builder cookies(Consumer<MultiValueMap<String, ResponseCookie>> cookiesConsumer).
true;;0;1;/**  * Build the response.  * @return the built response  */ ;/**  * Build the response.  * @return the built response  */ Mono<RenderingResponse> build().
