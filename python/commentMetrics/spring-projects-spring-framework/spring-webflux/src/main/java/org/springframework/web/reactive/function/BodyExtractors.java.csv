# id;timestamp;commentText;codeText;commentWords;codeWords
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(ParameterizedTypeReference<T> typeRef);1527269520;Variant of {@link #toFlux(Class)} for type information with generics._@param typeRef the type reference for the type to decode to_@param <T> the element type to decode to_@return {@code BodyExtractor} for {@code Flux<T>};public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(ParameterizedTypeReference<T> typeRef) {_		return toFlux(ResolvableType.forType(typeRef.getType()))__	};variant,of,link,to,flux,class,for,type,information,with,generics,param,type,ref,the,type,reference,for,the,type,to,decode,to,param,t,the,element,type,to,decode,to,return,code,body,extractor,for,code,flux,t;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,parameterized,type,reference,t,type,ref,return,to,flux,resolvable,type,for,type,type,ref,get,type
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(ParameterizedTypeReference<T> typeRef);1530174524;Variant of {@link #toFlux(Class)} for type information with generics._@param typeRef the type reference for the type to decode to_@param <T> the element type to decode to_@return {@code BodyExtractor} for {@code Flux<T>};public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(ParameterizedTypeReference<T> typeRef) {_		return toFlux(ResolvableType.forType(typeRef.getType()))__	};variant,of,link,to,flux,class,for,type,information,with,generics,param,type,ref,the,type,reference,for,the,type,to,decode,to,param,t,the,element,type,to,decode,to,return,code,body,extractor,for,code,flux,t;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,parameterized,type,reference,t,type,ref,return,to,flux,resolvable,type,for,type,type,ref,get,type
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(ParameterizedTypeReference<T> typeRef);1532088094;Variant of {@link #toFlux(Class)} for type information with generics._@param typeRef the type reference for the type to decode to_@param <T> the element type to decode to_@return {@code BodyExtractor} for {@code Flux<T>};public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(ParameterizedTypeReference<T> typeRef) {_		return toFlux(ResolvableType.forType(typeRef.getType()))__	};variant,of,link,to,flux,class,for,type,information,with,generics,param,type,ref,the,type,reference,for,the,type,to,decode,to,param,t,the,element,type,to,decode,to,return,code,body,extractor,for,code,flux,t;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,parameterized,type,reference,t,type,ref,return,to,flux,resolvable,type,for,type,type,ref,get,type
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(ParameterizedTypeReference<T> typeRef);1537262433;Variant of {@link #toFlux(Class)} for type information with generics._@param typeRef the type reference for the type to decode to_@param <T> the element type to decode to_@return {@code BodyExtractor} for {@code Flux<T>};public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(ParameterizedTypeReference<T> typeRef) {_		return toFlux(ResolvableType.forType(typeRef.getType()))__	};variant,of,link,to,flux,class,for,type,information,with,generics,param,type,ref,the,type,reference,for,the,type,to,decode,to,param,t,the,element,type,to,decode,to,return,code,body,extractor,for,code,flux,t;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,parameterized,type,reference,t,type,ref,return,to,flux,resolvable,type,for,type,type,ref,get,type
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(ParameterizedTypeReference<T> typeRef);1541736828;Variant of {@link #toFlux(Class)} for type information with generics._@param typeRef the type reference for the type to decode to_@param <T> the element type to decode to_@return {@code BodyExtractor} for {@code Flux<T>};public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(ParameterizedTypeReference<T> typeRef) {_		return toFlux(ResolvableType.forType(typeRef.getType()))__	};variant,of,link,to,flux,class,for,type,information,with,generics,param,type,ref,the,type,reference,for,the,type,to,decode,to,param,t,the,element,type,to,decode,to,return,code,body,extractor,for,code,flux,t;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,parameterized,type,reference,t,type,ref,return,to,flux,resolvable,type,for,type,type,ref,get,type
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(ParameterizedTypeReference<T> typeRef);1541798163;Variant of {@link #toFlux(Class)} for type information with generics._@param typeRef the type reference for the type to decode to_@param <T> the element type to decode to_@return {@code BodyExtractor} for {@code Flux<T>};public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(ParameterizedTypeReference<T> typeRef) {_		return toFlux(ResolvableType.forType(typeRef.getType()))__	};variant,of,link,to,flux,class,for,type,information,with,generics,param,type,ref,the,type,reference,for,the,type,to,decode,to,param,t,the,element,type,to,decode,to,return,code,body,extractor,for,code,flux,t;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,parameterized,type,reference,t,type,ref,return,to,flux,resolvable,type,for,type,type,ref,get,type
BodyExtractors -> public static BodyExtractor<Flux<Part>, ServerHttpRequest> toParts();1493894391;Return a {@code BodyExtractor} that reads multipart (i.e. file upload) form data into a_{@link MultiValueMap}._@return a {@code BodyExtractor} that reads multipart data;public static BodyExtractor<Flux<Part>, ServerHttpRequest> toParts() {_		return (serverRequest, context) -> {_			HttpMessageReader<Part> messageReader =_					messageReader(PART_TYPE, MediaType.MULTIPART_FORM_DATA, context)__			return context.serverResponse()_					.map(serverResponse -> messageReader.read(PART_TYPE, PART_TYPE, serverRequest, serverResponse, context.hints()))_					.orElseGet(() -> messageReader.read(PART_TYPE, serverRequest, context.hints()))__		}__	};return,a,code,body,extractor,that,reads,multipart,i,e,file,upload,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,multipart,data;public,static,body,extractor,flux,part,server,http,request,to,parts,return,server,request,context,http,message,reader,part,message,reader,message,reader,media,type,context,return,context,server,response,map,server,response,message,reader,read,server,request,server,response,context,hints,or,else,get,message,reader,read,server,request,context,hints
BodyExtractors -> public static BodyExtractor<Flux<Part>, ServerHttpRequest> toParts();1495626483;Return a {@code BodyExtractor} that reads multipart (i.e. file upload) form data into a_{@link MultiValueMap}._@return a {@code BodyExtractor} that reads multipart data;public static BodyExtractor<Flux<Part>, ServerHttpRequest> toParts() {_		return (serverRequest, context) -> {_			HttpMessageReader<Part> messageReader =_					messageReader(PART_TYPE, MediaType.MULTIPART_FORM_DATA, context)__			return context.serverResponse()_					.map(serverResponse -> messageReader.read(PART_TYPE, PART_TYPE, serverRequest, serverResponse, context.hints()))_					.orElseGet(() -> messageReader.read(PART_TYPE, serverRequest, context.hints()))__		}__	};return,a,code,body,extractor,that,reads,multipart,i,e,file,upload,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,multipart,data;public,static,body,extractor,flux,part,server,http,request,to,parts,return,server,request,context,http,message,reader,part,message,reader,message,reader,media,type,context,return,context,server,response,map,server,response,message,reader,read,server,request,server,response,context,hints,or,else,get,message,reader,read,server,request,context,hints
BodyExtractors -> public static BodyExtractor<Flux<Part>, ServerHttpRequest> toParts();1497007755;Return a {@code BodyExtractor} that reads multipart (i.e. file upload) form data into a_{@link MultiValueMap}._@return a {@code BodyExtractor} that reads multipart data;public static BodyExtractor<Flux<Part>, ServerHttpRequest> toParts() {_		return (serverRequest, context) -> {_			HttpMessageReader<Part> messageReader =_					messageReader(PART_TYPE, MediaType.MULTIPART_FORM_DATA, context)__			return context.serverResponse()_					.map(serverResponse -> messageReader.read(PART_TYPE, PART_TYPE, serverRequest, serverResponse, context.hints()))_					.orElseGet(() -> messageReader.read(PART_TYPE, serverRequest, context.hints()))__		}__	};return,a,code,body,extractor,that,reads,multipart,i,e,file,upload,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,multipart,data;public,static,body,extractor,flux,part,server,http,request,to,parts,return,server,request,context,http,message,reader,part,message,reader,message,reader,media,type,context,return,context,server,response,map,server,response,message,reader,read,server,request,server,response,context,hints,or,else,get,message,reader,read,server,request,context,hints
BodyExtractors -> public static BodyExtractor<Flux<Part>, ServerHttpRequest> toParts();1497969037;Return a {@code BodyExtractor} that reads multipart (i.e. file upload) form data into a_{@link MultiValueMap}._@return a {@code BodyExtractor} that reads multipart data;public static BodyExtractor<Flux<Part>, ServerHttpRequest> toParts() {_		return (serverRequest, context) -> {_			HttpMessageReader<Part> messageReader =_					messageReader(PART_TYPE, MediaType.MULTIPART_FORM_DATA, context)__			return context.serverResponse()_					.map(serverResponse -> messageReader.read(PART_TYPE, PART_TYPE, serverRequest, serverResponse, context.hints()))_					.orElseGet(() -> messageReader.read(PART_TYPE, serverRequest, context.hints()))__		}__	};return,a,code,body,extractor,that,reads,multipart,i,e,file,upload,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,multipart,data;public,static,body,extractor,flux,part,server,http,request,to,parts,return,server,request,context,http,message,reader,part,message,reader,message,reader,media,type,context,return,context,server,response,map,server,response,message,reader,read,server,request,server,response,context,hints,or,else,get,message,reader,read,server,request,context,hints
BodyExtractors -> public static BodyExtractor<Flux<Part>, ServerHttpRequest> toParts();1497969249;Return a {@code BodyExtractor} that reads multipart (i.e. file upload) form data into a_{@link MultiValueMap}._@return a {@code BodyExtractor} that reads multipart data;public static BodyExtractor<Flux<Part>, ServerHttpRequest> toParts() {_		return (serverRequest, context) -> {_			HttpMessageReader<Part> messageReader =_					messageReader(PART_TYPE, MediaType.MULTIPART_FORM_DATA, context)__			return context.serverResponse()_					.map(serverResponse -> messageReader.read(PART_TYPE, PART_TYPE, serverRequest, serverResponse, context.hints()))_					.orElseGet(() -> messageReader.read(PART_TYPE, serverRequest, context.hints()))__		}__	};return,a,code,body,extractor,that,reads,multipart,i,e,file,upload,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,multipart,data;public,static,body,extractor,flux,part,server,http,request,to,parts,return,server,request,context,http,message,reader,part,message,reader,message,reader,media,type,context,return,context,server,response,map,server,response,message,reader,read,server,request,server,response,context,hints,or,else,get,message,reader,read,server,request,context,hints
BodyExtractors -> public static BodyExtractor<Flux<Part>, ServerHttpRequest> toParts();1498758448;Return a {@code BodyExtractor} that reads multipart (i.e. file upload) form data into a_{@link MultiValueMap}._@return a {@code BodyExtractor} that reads multipart data;public static BodyExtractor<Flux<Part>, ServerHttpRequest> toParts() {_		return (serverRequest, context) -> {_			HttpMessageReader<Part> messageReader =_					messageReader(PART_TYPE, MediaType.MULTIPART_FORM_DATA, context)__			return context.serverResponse()_					.map(serverResponse -> messageReader.read(PART_TYPE, PART_TYPE, serverRequest, serverResponse, context.hints()))_					.orElseGet(() -> messageReader.read(PART_TYPE, serverRequest, context.hints()))__		}__	};return,a,code,body,extractor,that,reads,multipart,i,e,file,upload,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,multipart,data;public,static,body,extractor,flux,part,server,http,request,to,parts,return,server,request,context,http,message,reader,part,message,reader,message,reader,media,type,context,return,context,server,response,map,server,response,message,reader,read,server,request,server,response,context,hints,or,else,get,message,reader,read,server,request,context,hints
BodyExtractors -> public static BodyExtractor<Flux<Part>, ServerHttpRequest> toParts();1500035922;Return a {@code BodyExtractor} that reads multipart (i.e. file upload) form data into a_{@link MultiValueMap}._@return a {@code BodyExtractor} that reads multipart data;public static BodyExtractor<Flux<Part>, ServerHttpRequest> toParts() {_		return (serverRequest, context) -> {_			HttpMessageReader<Part> messageReader =_					messageReader(PART_TYPE, MediaType.MULTIPART_FORM_DATA, context)__			return context.serverResponse()_					.map(serverResponse -> messageReader.read(PART_TYPE, PART_TYPE, serverRequest, serverResponse, context.hints()))_					.orElseGet(() -> messageReader.read(PART_TYPE, serverRequest, context.hints()))__		}__	};return,a,code,body,extractor,that,reads,multipart,i,e,file,upload,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,multipart,data;public,static,body,extractor,flux,part,server,http,request,to,parts,return,server,request,context,http,message,reader,part,message,reader,message,reader,media,type,context,return,context,server,response,map,server,response,message,reader,read,server,request,server,response,context,hints,or,else,get,message,reader,read,server,request,context,hints
BodyExtractors -> public static BodyExtractor<Flux<Part>, ServerHttpRequest> toParts();1508532146;Return a {@code BodyExtractor} that reads multipart (i.e. file upload) form data into a_{@link MultiValueMap}._@return a {@code BodyExtractor} that reads multipart data;public static BodyExtractor<Flux<Part>, ServerHttpRequest> toParts() {_		return (serverRequest, context) -> {_			ResolvableType type = PART_TYPE__			HttpMessageReader<Part> reader = messageReader(type, MediaType.MULTIPART_FORM_DATA, context)__			return context.serverResponse()_					.map(response -> reader.read(type, type, serverRequest, response, context.hints()))_					.orElseGet(() -> reader.read(type, serverRequest, context.hints()))__		}__	};return,a,code,body,extractor,that,reads,multipart,i,e,file,upload,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,multipart,data;public,static,body,extractor,flux,part,server,http,request,to,parts,return,server,request,context,resolvable,type,type,http,message,reader,part,reader,message,reader,type,media,type,context,return,context,server,response,map,response,reader,read,type,type,server,request,response,context,hints,or,else,get,reader,read,type,server,request,context,hints
BodyExtractors -> public static BodyExtractor<Flux<Part>, ServerHttpRequest> toParts();1522103912;Return a {@code BodyExtractor} that reads multipart (i.e. file upload) form data into a_{@link MultiValueMap}._@return a {@code BodyExtractor} that reads multipart data;public static BodyExtractor<Flux<Part>, ServerHttpRequest> toParts() {_		return (serverRequest, context) -> {_			ResolvableType type = PART_TYPE__			HttpMessageReader<Part> reader = messageReader(type, MediaType.MULTIPART_FORM_DATA, context)__			return context.serverResponse()_					.map(response -> reader.read(type, type, serverRequest, response, context.hints()))_					.orElseGet(() -> reader.read(type, serverRequest, context.hints()))__		}__	};return,a,code,body,extractor,that,reads,multipart,i,e,file,upload,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,multipart,data;public,static,body,extractor,flux,part,server,http,request,to,parts,return,server,request,context,resolvable,type,type,http,message,reader,part,reader,message,reader,type,media,type,context,return,context,server,response,map,response,reader,read,type,type,server,request,response,context,hints,or,else,get,reader,read,type,server,request,context,hints
BodyExtractors -> public static BodyExtractor<Flux<Part>, ServerHttpRequest> toParts();1526354196;Return a {@code BodyExtractor} that reads multipart (i.e. file upload) form data into a_{@link MultiValueMap}._@return a {@code BodyExtractor} that reads multipart data;public static BodyExtractor<Flux<Part>, ServerHttpRequest> toParts() {_		return (serverRequest, context) -> {_			ResolvableType type = PART_TYPE__			HttpMessageReader<Part> reader = messageReader(type, MediaType.MULTIPART_FORM_DATA, context)__			return context.serverResponse()_					.map(response -> reader.read(type, type, serverRequest, response, context.hints()))_					.orElseGet(() -> reader.read(type, serverRequest, context.hints()))__		}__	};return,a,code,body,extractor,that,reads,multipart,i,e,file,upload,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,multipart,data;public,static,body,extractor,flux,part,server,http,request,to,parts,return,server,request,context,resolvable,type,type,http,message,reader,part,reader,message,reader,type,media,type,context,return,context,server,response,map,response,reader,read,type,type,server,request,response,context,hints,or,else,get,reader,read,type,server,request,context,hints
BodyExtractors -> public static BodyExtractor<Flux<Part>, ServerHttpRequest> toParts();1526481710;Return a {@code BodyExtractor} that reads multipart (i.e. file upload) form data into a_{@link MultiValueMap}._@return a {@code BodyExtractor} that reads multipart data;public static BodyExtractor<Flux<Part>, ServerHttpRequest> toParts() {_		return (serverRequest, context) -> {_			ResolvableType type = PART_TYPE__			HttpMessageReader<Part> reader = messageReader(type, MediaType.MULTIPART_FORM_DATA, context)__			return context.serverResponse()_					.map(response -> reader.read(type, type, serverRequest, response, context.hints()))_					.orElseGet(() -> reader.read(type, serverRequest, context.hints()))__		}__	};return,a,code,body,extractor,that,reads,multipart,i,e,file,upload,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,multipart,data;public,static,body,extractor,flux,part,server,http,request,to,parts,return,server,request,context,resolvable,type,type,http,message,reader,part,reader,message,reader,type,media,type,context,return,context,server,response,map,response,reader,read,type,type,server,request,response,context,hints,or,else,get,reader,read,type,server,request,context,hints
BodyExtractors -> public static BodyExtractor<Flux<Part>, ServerHttpRequest> toParts();1527269520;Extractor to read multipart data into {@code Flux<Part>}._@return {@code BodyExtractor} for multipart request parts;public static BodyExtractor<Flux<Part>, ServerHttpRequest> toParts() {_		return (serverRequest, context) -> {_			ResolvableType elementType = PART_TYPE__			MediaType mediaType = MediaType.MULTIPART_FORM_DATA__			HttpMessageReader<Part> reader = findReader(elementType, mediaType, context)__			return readToFlux(serverRequest, context, elementType, reader)__		}__	};extractor,to,read,multipart,data,into,code,flux,part,return,code,body,extractor,for,multipart,request,parts;public,static,body,extractor,flux,part,server,http,request,to,parts,return,server,request,context,resolvable,type,element,type,media,type,media,type,media,type,http,message,reader,part,reader,find,reader,element,type,media,type,context,return,read,to,flux,server,request,context,element,type,reader
BodyExtractors -> public static BodyExtractor<Flux<Part>, ServerHttpRequest> toParts();1530174524;Extractor to read multipart data into {@code Flux<Part>}._@return {@code BodyExtractor} for multipart request parts;public static BodyExtractor<Flux<Part>, ServerHttpRequest> toParts() {_		return (serverRequest, context) -> {_			ResolvableType elementType = PART_TYPE__			MediaType mediaType = MediaType.MULTIPART_FORM_DATA__			HttpMessageReader<Part> reader = findReader(elementType, mediaType, context)__			return readToFlux(serverRequest, context, elementType, reader)__		}__	};extractor,to,read,multipart,data,into,code,flux,part,return,code,body,extractor,for,multipart,request,parts;public,static,body,extractor,flux,part,server,http,request,to,parts,return,server,request,context,resolvable,type,element,type,media,type,media,type,media,type,http,message,reader,part,reader,find,reader,element,type,media,type,context,return,read,to,flux,server,request,context,element,type,reader
BodyExtractors -> public static BodyExtractor<Flux<Part>, ServerHttpRequest> toParts();1532088094;Extractor to read multipart data into {@code Flux<Part>}._@return {@code BodyExtractor} for multipart request parts;public static BodyExtractor<Flux<Part>, ServerHttpRequest> toParts() {_		return (serverRequest, context) -> {_			ResolvableType elementType = PART_TYPE__			MediaType mediaType = MediaType.MULTIPART_FORM_DATA__			HttpMessageReader<Part> reader = findReader(elementType, mediaType, context)__			return readToFlux(serverRequest, context, elementType, reader)__		}__	};extractor,to,read,multipart,data,into,code,flux,part,return,code,body,extractor,for,multipart,request,parts;public,static,body,extractor,flux,part,server,http,request,to,parts,return,server,request,context,resolvable,type,element,type,media,type,media,type,media,type,http,message,reader,part,reader,find,reader,element,type,media,type,context,return,read,to,flux,server,request,context,element,type,reader
BodyExtractors -> public static BodyExtractor<Flux<Part>, ServerHttpRequest> toParts();1537262433;Extractor to read multipart data into {@code Flux<Part>}._@return {@code BodyExtractor} for multipart request parts;public static BodyExtractor<Flux<Part>, ServerHttpRequest> toParts() {_		return (serverRequest, context) -> {_			ResolvableType elementType = PART_TYPE__			MediaType mediaType = MediaType.MULTIPART_FORM_DATA__			HttpMessageReader<Part> reader = findReader(elementType, mediaType, context)__			return readToFlux(serverRequest, context, elementType, reader)__		}__	};extractor,to,read,multipart,data,into,code,flux,part,return,code,body,extractor,for,multipart,request,parts;public,static,body,extractor,flux,part,server,http,request,to,parts,return,server,request,context,resolvable,type,element,type,media,type,media,type,media,type,http,message,reader,part,reader,find,reader,element,type,media,type,context,return,read,to,flux,server,request,context,element,type,reader
BodyExtractors -> public static BodyExtractor<Flux<Part>, ServerHttpRequest> toParts();1541736828;Extractor to read multipart data into {@code Flux<Part>}._@return {@code BodyExtractor} for multipart request parts;public static BodyExtractor<Flux<Part>, ServerHttpRequest> toParts() {_		return (serverRequest, context) -> {_			ResolvableType elementType = PART_TYPE__			MediaType mediaType = MediaType.MULTIPART_FORM_DATA__			HttpMessageReader<Part> reader = findReader(elementType, mediaType, context)__			return readToFlux(serverRequest, context, elementType, reader)__		}__	};extractor,to,read,multipart,data,into,code,flux,part,return,code,body,extractor,for,multipart,request,parts;public,static,body,extractor,flux,part,server,http,request,to,parts,return,server,request,context,resolvable,type,element,type,media,type,media,type,media,type,http,message,reader,part,reader,find,reader,element,type,media,type,context,return,read,to,flux,server,request,context,element,type,reader
BodyExtractors -> public static BodyExtractor<Flux<Part>, ServerHttpRequest> toParts();1541798163;Extractor to read multipart data into {@code Flux<Part>}._@return {@code BodyExtractor} for multipart request parts;public static BodyExtractor<Flux<Part>, ServerHttpRequest> toParts() {_		return (serverRequest, context) -> {_			ResolvableType elementType = PART_TYPE__			MediaType mediaType = MediaType.MULTIPART_FORM_DATA__			HttpMessageReader<Part> reader = findReader(elementType, mediaType, context)__			return readToFlux(serverRequest, context, elementType, reader)__		}__	};extractor,to,read,multipart,data,into,code,flux,part,return,code,body,extractor,for,multipart,request,parts;public,static,body,extractor,flux,part,server,http,request,to,parts,return,server,request,context,resolvable,type,element,type,media,type,media,type,media,type,http,message,reader,part,reader,find,reader,element,type,media,type,context,return,read,to,flux,server,request,context,element,type,reader
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(ResolvableType elementType);1485986572;Return a {@code BodyExtractor} that reads into a Reactor {@link Mono}._@param elementType the type of element in the {@code Mono}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(ResolvableType elementType) {_		Assert.notNull(elementType, "'elementType' must not be null")__		return (request, context) -> readWithMessageReaders(request, context,_				elementType,_				reader -> reader.readMono(elementType, request, context.hints()),_				Mono::error)__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,mono,param,element,type,the,type,of,element,in,the,code,mono,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,resolvable,type,element,type,assert,not,null,element,type,element,type,must,not,be,null,return,request,context,read,with,message,readers,request,context,element,type,reader,reader,read,mono,element,type,request,context,hints,mono,error
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(ResolvableType elementType);1486590418;Return a {@code BodyExtractor} that reads into a Reactor {@link Mono}._@param elementType the type of element in the {@code Mono}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(ResolvableType elementType) {_		Assert.notNull(elementType, "'elementType' must not be null")__		return (request, context) -> readWithMessageReaders(request, context,_				elementType,_				reader -> reader.readMono(elementType, request, context.hints()),_				Mono::error)__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,mono,param,element,type,the,type,of,element,in,the,code,mono,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,resolvable,type,element,type,assert,not,null,element,type,element,type,must,not,be,null,return,request,context,read,with,message,readers,request,context,element,type,reader,reader,read,mono,element,type,request,context,hints,mono,error
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(ResolvableType elementType);1486657400;Return a {@code BodyExtractor} that reads into a Reactor {@link Mono}._@param elementType the type of element in the {@code Mono}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(ResolvableType elementType) {_		Assert.notNull(elementType, "'elementType' must not be null")__		return (request, context) -> readWithMessageReaders(request, context,_				elementType,_				reader -> reader.readMono(elementType, request, context.hints()),_				Mono::error)__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,mono,param,element,type,the,type,of,element,in,the,code,mono,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,resolvable,type,element,type,assert,not,null,element,type,element,type,must,not,be,null,return,request,context,read,with,message,readers,request,context,element,type,reader,reader,read,mono,element,type,request,context,hints,mono,error
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(ResolvableType elementType);1487687241;Return a {@code BodyExtractor} that reads into a Reactor {@link Mono}._@param elementType the type of element in the {@code Mono}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(ResolvableType elementType) {_		Assert.notNull(elementType, "'elementType' must not be null")__		return (request, context) -> readWithMessageReaders(request, context,_				elementType,_				reader -> reader.readMono(elementType, request, context.hints()),_				Mono::error)__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,mono,param,element,type,the,type,of,element,in,the,code,mono,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,resolvable,type,element,type,assert,not,null,element,type,element,type,must,not,be,null,return,request,context,read,with,message,readers,request,context,element,type,reader,reader,read,mono,element,type,request,context,hints,mono,error
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(ResolvableType elementType);1491385016;Return a {@code BodyExtractor} that reads into a Reactor {@link Mono}._@param elementType the type of element in the {@code Mono}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(ResolvableType elementType) {_		Assert.notNull(elementType, "'elementType' must not be null")__		return (inputMessage, context) -> readWithMessageReaders(inputMessage, context,_				elementType,_				reader -> {_					Optional<ServerHttpResponse> serverResponse = context.serverResponse()__					if (serverResponse.isPresent() && inputMessage instanceof ServerHttpRequest) {_						return reader.readMono(elementType, elementType, (ServerHttpRequest) inputMessage,_								serverResponse.get(), context.hints())__					}_					else {_						return reader.readMono(elementType, inputMessage, context.hints())__					}_				},_				Mono::error)__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,mono,param,element,type,the,type,of,element,in,the,code,mono,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,resolvable,type,element,type,assert,not,null,element,type,element,type,must,not,be,null,return,input,message,context,read,with,message,readers,input,message,context,element,type,reader,optional,server,http,response,server,response,context,server,response,if,server,response,is,present,input,message,instanceof,server,http,request,return,reader,read,mono,element,type,element,type,server,http,request,input,message,server,response,get,context,hints,else,return,reader,read,mono,element,type,input,message,context,hints,mono,error
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(ResolvableType elementType);1493390543;Return a {@code BodyExtractor} that reads into a Reactor {@link Mono}._@param elementType the type of element in the {@code Mono}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(ResolvableType elementType) {_		Assert.notNull(elementType, "'elementType' must not be null")__		return (inputMessage, context) -> readWithMessageReaders(inputMessage, context,_				elementType,_				reader -> {_					Optional<ServerHttpResponse> serverResponse = context.serverResponse()__					if (serverResponse.isPresent() && inputMessage instanceof ServerHttpRequest) {_						return reader.readMono(elementType, elementType, (ServerHttpRequest) inputMessage,_								serverResponse.get(), context.hints())__					}_					else {_						return reader.readMono(elementType, inputMessage, context.hints())__					}_				},_				Mono::error)__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,mono,param,element,type,the,type,of,element,in,the,code,mono,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,resolvable,type,element,type,assert,not,null,element,type,element,type,must,not,be,null,return,input,message,context,read,with,message,readers,input,message,context,element,type,reader,optional,server,http,response,server,response,context,server,response,if,server,response,is,present,input,message,instanceof,server,http,request,return,reader,read,mono,element,type,element,type,server,http,request,input,message,server,response,get,context,hints,else,return,reader,read,mono,element,type,input,message,context,hints,mono,error
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(ResolvableType elementType);1493676008;Return a {@code BodyExtractor} that reads into a Reactor {@link Mono}._@param elementType the type of element in the {@code Mono}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(ResolvableType elementType) {_		Assert.notNull(elementType, "'elementType' must not be null")__		return (inputMessage, context) -> readWithMessageReaders(inputMessage, context,_				elementType,_				reader -> {_					Optional<ServerHttpResponse> serverResponse = context.serverResponse()__					if (serverResponse.isPresent() && inputMessage instanceof ServerHttpRequest) {_						return reader.readMono(elementType, elementType, (ServerHttpRequest) inputMessage,_								serverResponse.get(), context.hints())__					}_					else {_						return reader.readMono(elementType, inputMessage, context.hints())__					}_				},_				Mono::error)__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,mono,param,element,type,the,type,of,element,in,the,code,mono,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,resolvable,type,element,type,assert,not,null,element,type,element,type,must,not,be,null,return,input,message,context,read,with,message,readers,input,message,context,element,type,reader,optional,server,http,response,server,response,context,server,response,if,server,response,is,present,input,message,instanceof,server,http,request,return,reader,read,mono,element,type,element,type,server,http,request,input,message,server,response,get,context,hints,else,return,reader,read,mono,element,type,input,message,context,hints,mono,error
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(ResolvableType elementType);1493894391;Return a {@code BodyExtractor} that reads into a Reactor {@link Mono}._@param elementType the type of element in the {@code Mono}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(ResolvableType elementType) {_		Assert.notNull(elementType, "'elementType' must not be null")__		return (inputMessage, context) -> readWithMessageReaders(inputMessage, context,_				elementType,_				reader -> {_					Optional<ServerHttpResponse> serverResponse = context.serverResponse()__					if (serverResponse.isPresent() && inputMessage instanceof ServerHttpRequest) {_						return reader.readMono(elementType, elementType, (ServerHttpRequest) inputMessage,_								serverResponse.get(), context.hints())__					}_					else {_						return reader.readMono(elementType, inputMessage, context.hints())__					}_				},_				Mono::error)__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,mono,param,element,type,the,type,of,element,in,the,code,mono,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,resolvable,type,element,type,assert,not,null,element,type,element,type,must,not,be,null,return,input,message,context,read,with,message,readers,input,message,context,element,type,reader,optional,server,http,response,server,response,context,server,response,if,server,response,is,present,input,message,instanceof,server,http,request,return,reader,read,mono,element,type,element,type,server,http,request,input,message,server,response,get,context,hints,else,return,reader,read,mono,element,type,input,message,context,hints,mono,error
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(ResolvableType elementType);1495626483;Return a {@code BodyExtractor} that reads into a Reactor {@link Mono}._@param elementType the type of element in the {@code Mono}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(ResolvableType elementType) {_		Assert.notNull(elementType, "'elementType' must not be null")__		return (inputMessage, context) -> readWithMessageReaders(inputMessage, context,_				elementType,_				reader -> {_					Optional<ServerHttpResponse> serverResponse = context.serverResponse()__					if (serverResponse.isPresent() && inputMessage instanceof ServerHttpRequest) {_						return reader.readMono(elementType, elementType, (ServerHttpRequest) inputMessage,_								serverResponse.get(), context.hints())__					}_					else {_						return reader.readMono(elementType, inputMessage, context.hints())__					}_				},_				Mono::error)__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,mono,param,element,type,the,type,of,element,in,the,code,mono,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,resolvable,type,element,type,assert,not,null,element,type,element,type,must,not,be,null,return,input,message,context,read,with,message,readers,input,message,context,element,type,reader,optional,server,http,response,server,response,context,server,response,if,server,response,is,present,input,message,instanceof,server,http,request,return,reader,read,mono,element,type,element,type,server,http,request,input,message,server,response,get,context,hints,else,return,reader,read,mono,element,type,input,message,context,hints,mono,error
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, String>>, ReactiveHttpInputMessage> toFormData();1486590418;Return a {@code BodyExtractor} that reads form data into a {@link MultiValueMap}._@return a {@code BodyExtractor} that reads form data;public static BodyExtractor<Mono<MultiValueMap<String, String>>, ReactiveHttpInputMessage> toFormData() {_		return (serverRequest, context) -> {_					HttpMessageReader<MultiValueMap<String, String>> messageReader = formMessageReader(context)__					return messageReader.readMono(FORM_TYPE, serverRequest, context.hints())__				}__	};return,a,code,body,extractor,that,reads,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,form,data;public,static,body,extractor,mono,multi,value,map,string,string,reactive,http,input,message,to,form,data,return,server,request,context,http,message,reader,multi,value,map,string,string,message,reader,form,message,reader,context,return,message,reader,read,mono,server,request,context,hints
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, String>>, ReactiveHttpInputMessage> toFormData();1526481710;Return a {@code BodyExtractor} that reads form data into a {@link MultiValueMap}._<p>As of 5.1 this method can also be used on the client side to read form_data from a server response (e.g. OAuth)._@return a {@code BodyExtractor} that reads form data;public static BodyExtractor<Mono<MultiValueMap<String, String>>, ReactiveHttpInputMessage> toFormData() {_		return (message, context) -> {_			ResolvableType type = FORM_MAP_TYPE__			HttpMessageReader<MultiValueMap<String, String>> reader =_					messageReader(type, MediaType.APPLICATION_FORM_URLENCODED, context)__			Optional<ServerHttpResponse> response = context.serverResponse()__			if (response.isPresent() && message instanceof ServerHttpRequest) {_				return reader.readMono(type, type, (ServerHttpRequest) message, response.get(), context.hints())__			}_			else {_				return reader.readMono(type, message, context.hints())__			}_		}__	};return,a,code,body,extractor,that,reads,form,data,into,a,link,multi,value,map,p,as,of,5,1,this,method,can,also,be,used,on,the,client,side,to,read,form,data,from,a,server,response,e,g,oauth,return,a,code,body,extractor,that,reads,form,data;public,static,body,extractor,mono,multi,value,map,string,string,reactive,http,input,message,to,form,data,return,message,context,resolvable,type,type,http,message,reader,multi,value,map,string,string,reader,message,reader,type,media,type,context,optional,server,http,response,response,context,server,response,if,response,is,present,message,instanceof,server,http,request,return,reader,read,mono,type,type,server,http,request,message,response,get,context,hints,else,return,reader,read,mono,type,message,context,hints
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, String>>, ReactiveHttpInputMessage> toFormData();1527269520;Extractor to read form data into {@code MultiValueMap<String, String>}._<p>As of 5.1 this method can also be used on the client side to read form_data from a server response (e.g. OAuth)._@return {@code BodyExtractor} for form data;public static BodyExtractor<Mono<MultiValueMap<String, String>>, ReactiveHttpInputMessage> toFormData() {_		return (message, context) -> {_			ResolvableType elementType = FORM_DATA_TYPE__			MediaType mediaType = MediaType.APPLICATION_FORM_URLENCODED__			HttpMessageReader<MultiValueMap<String, String>> reader = findReader(elementType, mediaType, context)__			return readToMono(message, context, elementType, reader)__		}__	};extractor,to,read,form,data,into,code,multi,value,map,string,string,p,as,of,5,1,this,method,can,also,be,used,on,the,client,side,to,read,form,data,from,a,server,response,e,g,oauth,return,code,body,extractor,for,form,data;public,static,body,extractor,mono,multi,value,map,string,string,reactive,http,input,message,to,form,data,return,message,context,resolvable,type,element,type,media,type,media,type,media,type,http,message,reader,multi,value,map,string,string,reader,find,reader,element,type,media,type,context,return,read,to,mono,message,context,element,type,reader
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, String>>, ReactiveHttpInputMessage> toFormData();1530174524;Extractor to read form data into {@code MultiValueMap<String, String>}._<p>As of 5.1 this method can also be used on the client side to read form_data from a server response (e.g. OAuth)._@return {@code BodyExtractor} for form data;public static BodyExtractor<Mono<MultiValueMap<String, String>>, ReactiveHttpInputMessage> toFormData() {_		return (message, context) -> {_			ResolvableType elementType = FORM_DATA_TYPE__			MediaType mediaType = MediaType.APPLICATION_FORM_URLENCODED__			HttpMessageReader<MultiValueMap<String, String>> reader = findReader(elementType, mediaType, context)__			return readToMono(message, context, elementType, reader)__		}__	};extractor,to,read,form,data,into,code,multi,value,map,string,string,p,as,of,5,1,this,method,can,also,be,used,on,the,client,side,to,read,form,data,from,a,server,response,e,g,oauth,return,code,body,extractor,for,form,data;public,static,body,extractor,mono,multi,value,map,string,string,reactive,http,input,message,to,form,data,return,message,context,resolvable,type,element,type,media,type,media,type,media,type,http,message,reader,multi,value,map,string,string,reader,find,reader,element,type,media,type,context,return,read,to,mono,message,context,element,type,reader
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, String>>, ReactiveHttpInputMessage> toFormData();1532088094;Extractor to read form data into {@code MultiValueMap<String, String>}._<p>As of 5.1 this method can also be used on the client side to read form_data from a server response (e.g. OAuth)._@return {@code BodyExtractor} for form data;public static BodyExtractor<Mono<MultiValueMap<String, String>>, ReactiveHttpInputMessage> toFormData() {_		return (message, context) -> {_			ResolvableType elementType = FORM_DATA_TYPE__			MediaType mediaType = MediaType.APPLICATION_FORM_URLENCODED__			HttpMessageReader<MultiValueMap<String, String>> reader = findReader(elementType, mediaType, context)__			return readToMono(message, context, elementType, reader)__		}__	};extractor,to,read,form,data,into,code,multi,value,map,string,string,p,as,of,5,1,this,method,can,also,be,used,on,the,client,side,to,read,form,data,from,a,server,response,e,g,oauth,return,code,body,extractor,for,form,data;public,static,body,extractor,mono,multi,value,map,string,string,reactive,http,input,message,to,form,data,return,message,context,resolvable,type,element,type,media,type,media,type,media,type,http,message,reader,multi,value,map,string,string,reader,find,reader,element,type,media,type,context,return,read,to,mono,message,context,element,type,reader
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, String>>, ReactiveHttpInputMessage> toFormData();1537262433;Extractor to read form data into {@code MultiValueMap<String, String>}._<p>As of 5.1 this method can also be used on the client side to read form_data from a server response (e.g. OAuth)._@return {@code BodyExtractor} for form data;public static BodyExtractor<Mono<MultiValueMap<String, String>>, ReactiveHttpInputMessage> toFormData() {_		return (message, context) -> {_			ResolvableType elementType = FORM_DATA_TYPE__			MediaType mediaType = MediaType.APPLICATION_FORM_URLENCODED__			HttpMessageReader<MultiValueMap<String, String>> reader = findReader(elementType, mediaType, context)__			return readToMono(message, context, elementType, reader)__		}__	};extractor,to,read,form,data,into,code,multi,value,map,string,string,p,as,of,5,1,this,method,can,also,be,used,on,the,client,side,to,read,form,data,from,a,server,response,e,g,oauth,return,code,body,extractor,for,form,data;public,static,body,extractor,mono,multi,value,map,string,string,reactive,http,input,message,to,form,data,return,message,context,resolvable,type,element,type,media,type,media,type,media,type,http,message,reader,multi,value,map,string,string,reader,find,reader,element,type,media,type,context,return,read,to,mono,message,context,element,type,reader
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, String>>, ReactiveHttpInputMessage> toFormData();1541736828;Extractor to read form data into {@code MultiValueMap<String, String>}._<p>As of 5.1 this method can also be used on the client side to read form_data from a server response (e.g. OAuth)._@return {@code BodyExtractor} for form data;public static BodyExtractor<Mono<MultiValueMap<String, String>>, ReactiveHttpInputMessage> toFormData() {_		return (message, context) -> {_			ResolvableType elementType = FORM_DATA_TYPE__			MediaType mediaType = MediaType.APPLICATION_FORM_URLENCODED__			HttpMessageReader<MultiValueMap<String, String>> reader = findReader(elementType, mediaType, context)__			return readToMono(message, context, elementType, reader)__		}__	};extractor,to,read,form,data,into,code,multi,value,map,string,string,p,as,of,5,1,this,method,can,also,be,used,on,the,client,side,to,read,form,data,from,a,server,response,e,g,oauth,return,code,body,extractor,for,form,data;public,static,body,extractor,mono,multi,value,map,string,string,reactive,http,input,message,to,form,data,return,message,context,resolvable,type,element,type,media,type,media,type,media,type,http,message,reader,multi,value,map,string,string,reader,find,reader,element,type,media,type,context,return,read,to,mono,message,context,element,type,reader
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, String>>, ReactiveHttpInputMessage> toFormData();1541798163;Extractor to read form data into {@code MultiValueMap<String, String>}._<p>As of 5.1 this method can also be used on the client side to read form_data from a server response (e.g. OAuth)._@return {@code BodyExtractor} for form data;public static BodyExtractor<Mono<MultiValueMap<String, String>>, ReactiveHttpInputMessage> toFormData() {_		return (message, context) -> {_			ResolvableType elementType = FORM_DATA_TYPE__			MediaType mediaType = MediaType.APPLICATION_FORM_URLENCODED__			HttpMessageReader<MultiValueMap<String, String>> reader = findReader(elementType, mediaType, context)__			return readToMono(message, context, elementType, reader)__		}__	};extractor,to,read,form,data,into,code,multi,value,map,string,string,p,as,of,5,1,this,method,can,also,be,used,on,the,client,side,to,read,form,data,from,a,server,response,e,g,oauth,return,code,body,extractor,for,form,data;public,static,body,extractor,mono,multi,value,map,string,string,reactive,http,input,message,to,form,data,return,message,context,resolvable,type,element,type,media,type,media,type,media,type,http,message,reader,multi,value,map,string,string,reader,find,reader,element,type,media,type,context,return,read,to,mono,message,context,element,type,reader
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(ParameterizedTypeReference<T> typeReference);1497007755;Return a {@code BodyExtractor} that reads into a Reactor {@link Flux}._The given {@link ParameterizedTypeReference} is used to pass generic type information, for_instance when using the {@link org.springframework.web.reactive.function.client.WebClient WebClient}_<pre class="code">_Flux&lt_ServerSentEvent&lt_String&gt_&gt_ body = this.webClient_.get()_.uri("http://example.com")_.exchange()_.flatMap(r -> r.body(toFlux(new ParameterizedTypeReference&lt_ServerSentEvent&lt_String&gt_&gt_() {})))__</pre>_@param typeReference a reference to the type of element in the {@code Flux}_@param <T> the element type_@return a {@code BodyExtractor} that reads a flux;public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(ParameterizedTypeReference<T> typeReference) {_		Assert.notNull(typeReference, "'typeReference' must not be null")__		return toFlux(ResolvableType.forType(typeReference.getType()))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,flux,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,for,instance,when,using,the,link,org,springframework,web,reactive,function,client,web,client,web,client,pre,class,code,flux,lt,server,sent,event,lt,string,gt,gt,body,this,web,client,get,uri,http,example,com,exchange,flat,map,r,r,body,to,flux,new,parameterized,type,reference,lt,server,sent,event,lt,string,gt,gt,pre,param,type,reference,a,reference,to,the,type,of,element,in,the,code,flux,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,flux;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,parameterized,type,reference,t,type,reference,assert,not,null,type,reference,type,reference,must,not,be,null,return,to,flux,resolvable,type,for,type,type,reference,get,type
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(ParameterizedTypeReference<T> typeReference);1497969037;Return a {@code BodyExtractor} that reads into a Reactor {@link Flux}._The given {@link ParameterizedTypeReference} is used to pass generic type information, for_instance when using the {@link org.springframework.web.reactive.function.client.WebClient WebClient}_<pre class="code">_Flux&lt_ServerSentEvent&lt_String&gt_&gt_ body = this.webClient_.get()_.uri("http://example.com")_.exchange()_.flatMap(r -> r.body(toFlux(new ParameterizedTypeReference&lt_ServerSentEvent&lt_String&gt_&gt_() {})))__</pre>_@param typeReference a reference to the type of element in the {@code Flux}_@param <T> the element type_@return a {@code BodyExtractor} that reads a flux;public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(ParameterizedTypeReference<T> typeReference) {_		Assert.notNull(typeReference, "'typeReference' must not be null")__		return toFlux(ResolvableType.forType(typeReference.getType()))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,flux,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,for,instance,when,using,the,link,org,springframework,web,reactive,function,client,web,client,web,client,pre,class,code,flux,lt,server,sent,event,lt,string,gt,gt,body,this,web,client,get,uri,http,example,com,exchange,flat,map,r,r,body,to,flux,new,parameterized,type,reference,lt,server,sent,event,lt,string,gt,gt,pre,param,type,reference,a,reference,to,the,type,of,element,in,the,code,flux,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,flux;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,parameterized,type,reference,t,type,reference,assert,not,null,type,reference,type,reference,must,not,be,null,return,to,flux,resolvable,type,for,type,type,reference,get,type
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(ParameterizedTypeReference<T> typeReference);1497969249;Return a {@code BodyExtractor} that reads into a Reactor {@link Flux}._The given {@link ParameterizedTypeReference} is used to pass generic type information, for_instance when using the {@link org.springframework.web.reactive.function.client.WebClient WebClient}_<pre class="code">_Flux&lt_ServerSentEvent&lt_String&gt_&gt_ body = this.webClient_.get()_.uri("http://example.com")_.exchange()_.flatMap(r -> r.body(toFlux(new ParameterizedTypeReference&lt_ServerSentEvent&lt_String&gt_&gt_() {})))__</pre>_@param typeReference a reference to the type of element in the {@code Flux}_@param <T> the element type_@return a {@code BodyExtractor} that reads a flux;public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(ParameterizedTypeReference<T> typeReference) {_		Assert.notNull(typeReference, "'typeReference' must not be null")__		return toFlux(ResolvableType.forType(typeReference.getType()))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,flux,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,for,instance,when,using,the,link,org,springframework,web,reactive,function,client,web,client,web,client,pre,class,code,flux,lt,server,sent,event,lt,string,gt,gt,body,this,web,client,get,uri,http,example,com,exchange,flat,map,r,r,body,to,flux,new,parameterized,type,reference,lt,server,sent,event,lt,string,gt,gt,pre,param,type,reference,a,reference,to,the,type,of,element,in,the,code,flux,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,flux;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,parameterized,type,reference,t,type,reference,assert,not,null,type,reference,type,reference,must,not,be,null,return,to,flux,resolvable,type,for,type,type,reference,get,type
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(ParameterizedTypeReference<T> typeReference);1498758448;Return a {@code BodyExtractor} that reads into a Reactor {@link Flux}._The given {@link ParameterizedTypeReference} is used to pass generic type information, for_instance when using the {@link org.springframework.web.reactive.function.client.WebClient WebClient}_<pre class="code">_Flux&lt_ServerSentEvent&lt_String&gt_&gt_ body = this.webClient_.get()_.uri("http://example.com")_.exchange()_.flatMap(r -> r.body(toFlux(new ParameterizedTypeReference&lt_ServerSentEvent&lt_String&gt_&gt_() {})))__</pre>_@param typeReference a reference to the type of element in the {@code Flux}_@param <T> the element type_@return a {@code BodyExtractor} that reads a flux;public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(ParameterizedTypeReference<T> typeReference) {_		Assert.notNull(typeReference, "'typeReference' must not be null")__		return toFlux(ResolvableType.forType(typeReference.getType()))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,flux,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,for,instance,when,using,the,link,org,springframework,web,reactive,function,client,web,client,web,client,pre,class,code,flux,lt,server,sent,event,lt,string,gt,gt,body,this,web,client,get,uri,http,example,com,exchange,flat,map,r,r,body,to,flux,new,parameterized,type,reference,lt,server,sent,event,lt,string,gt,gt,pre,param,type,reference,a,reference,to,the,type,of,element,in,the,code,flux,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,flux;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,parameterized,type,reference,t,type,reference,assert,not,null,type,reference,type,reference,must,not,be,null,return,to,flux,resolvable,type,for,type,type,reference,get,type
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(ParameterizedTypeReference<T> typeReference);1500035922;Return a {@code BodyExtractor} that reads into a Reactor {@link Flux}._The given {@link ParameterizedTypeReference} is used to pass generic type information, for_instance when using the {@link org.springframework.web.reactive.function.client.WebClient WebClient}_<pre class="code">_Flux&lt_ServerSentEvent&lt_String&gt_&gt_ body = this.webClient_.get()_.uri("http://example.com")_.exchange()_.flatMap(r -> r.body(toFlux(new ParameterizedTypeReference&lt_ServerSentEvent&lt_String&gt_&gt_() {})))__</pre>_@param typeReference a reference to the type of element in the {@code Flux}_@param <T> the element type_@return a {@code BodyExtractor} that reads a flux;public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(ParameterizedTypeReference<T> typeReference) {_		Assert.notNull(typeReference, "'typeReference' must not be null")__		return toFlux(ResolvableType.forType(typeReference.getType()))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,flux,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,for,instance,when,using,the,link,org,springframework,web,reactive,function,client,web,client,web,client,pre,class,code,flux,lt,server,sent,event,lt,string,gt,gt,body,this,web,client,get,uri,http,example,com,exchange,flat,map,r,r,body,to,flux,new,parameterized,type,reference,lt,server,sent,event,lt,string,gt,gt,pre,param,type,reference,a,reference,to,the,type,of,element,in,the,code,flux,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,flux;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,parameterized,type,reference,t,type,reference,assert,not,null,type,reference,type,reference,must,not,be,null,return,to,flux,resolvable,type,for,type,type,reference,get,type
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono( 			ParameterizedTypeReference<T> typeReference);1508532146;Return a {@code BodyExtractor} that reads into a Reactor {@link Mono}._The given {@link ParameterizedTypeReference} is used to pass generic type information, for_instance when using the {@link org.springframework.web.reactive.function.client.WebClient WebClient}_<pre class="code">_Mono&lt_Map&lt_String, String&gt_&gt_ body = this.webClient_.get()_.uri("http://example.com")_.exchange()_.flatMap(r -> r.body(toMono(new ParameterizedTypeReference&lt_Map&lt_String,String&gt_&gt_() {})))__</pre>_@param typeReference a reference to the type of element in the {@code Mono}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(_			ParameterizedTypeReference<T> typeReference) {__		Assert.notNull(typeReference, "'typeReference' must not be null")__		return toMono(ResolvableType.forType(typeReference.getType()))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,mono,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,for,instance,when,using,the,link,org,springframework,web,reactive,function,client,web,client,web,client,pre,class,code,mono,lt,map,lt,string,string,gt,gt,body,this,web,client,get,uri,http,example,com,exchange,flat,map,r,r,body,to,mono,new,parameterized,type,reference,lt,map,lt,string,string,gt,gt,pre,param,type,reference,a,reference,to,the,type,of,element,in,the,code,mono,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,parameterized,type,reference,t,type,reference,assert,not,null,type,reference,type,reference,must,not,be,null,return,to,mono,resolvable,type,for,type,type,reference,get,type
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono( 			ParameterizedTypeReference<T> typeReference);1522103912;Return a {@code BodyExtractor} that reads into a Reactor {@link Mono}._The given {@link ParameterizedTypeReference} is used to pass generic type information, for_instance when using the {@link org.springframework.web.reactive.function.client.WebClient WebClient}_<pre class="code">_Mono&lt_Map&lt_String, String&gt_&gt_ body = this.webClient_.get()_.uri("http://example.com")_.exchange()_.flatMap(r -> r.body(toMono(new ParameterizedTypeReference&lt_Map&lt_String,String&gt_&gt_() {})))__</pre>_@param typeReference a reference to the type of element in the {@code Mono}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(_			ParameterizedTypeReference<T> typeReference) {__		return toMono(ResolvableType.forType(typeReference.getType()))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,mono,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,for,instance,when,using,the,link,org,springframework,web,reactive,function,client,web,client,web,client,pre,class,code,mono,lt,map,lt,string,string,gt,gt,body,this,web,client,get,uri,http,example,com,exchange,flat,map,r,r,body,to,mono,new,parameterized,type,reference,lt,map,lt,string,string,gt,gt,pre,param,type,reference,a,reference,to,the,type,of,element,in,the,code,mono,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,parameterized,type,reference,t,type,reference,return,to,mono,resolvable,type,for,type,type,reference,get,type
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono( 			ParameterizedTypeReference<T> typeReference);1526354196;Return a {@code BodyExtractor} that reads into a Reactor {@link Mono}._The given {@link ParameterizedTypeReference} is used to pass generic type information, for_instance when using the {@link org.springframework.web.reactive.function.client.WebClient WebClient}_<pre class="code">_Mono&lt_Map&lt_String, String&gt_&gt_ body = this.webClient_.get()_.uri("http://example.com")_.exchange()_.flatMap(r -> r.body(toMono(new ParameterizedTypeReference&lt_Map&lt_String,String&gt_&gt_() {})))__</pre>_@param typeReference a reference to the type of element in the {@code Mono}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(_			ParameterizedTypeReference<T> typeReference) {__		return toMono(ResolvableType.forType(typeReference.getType()))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,mono,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,for,instance,when,using,the,link,org,springframework,web,reactive,function,client,web,client,web,client,pre,class,code,mono,lt,map,lt,string,string,gt,gt,body,this,web,client,get,uri,http,example,com,exchange,flat,map,r,r,body,to,mono,new,parameterized,type,reference,lt,map,lt,string,string,gt,gt,pre,param,type,reference,a,reference,to,the,type,of,element,in,the,code,mono,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,parameterized,type,reference,t,type,reference,return,to,mono,resolvable,type,for,type,type,reference,get,type
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono( 			ParameterizedTypeReference<T> typeReference);1526481710;Return a {@code BodyExtractor} that reads into a Reactor {@link Mono}._The given {@link ParameterizedTypeReference} is used to pass generic type information, for_instance when using the {@link org.springframework.web.reactive.function.client.WebClient WebClient}_<pre class="code">_Mono&lt_Map&lt_String, String&gt_&gt_ body = this.webClient_.get()_.uri("http://example.com")_.exchange()_.flatMap(r -> r.body(toMono(new ParameterizedTypeReference&lt_Map&lt_String,String&gt_&gt_() {})))__</pre>_@param typeReference a reference to the type of element in the {@code Mono}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(_			ParameterizedTypeReference<T> typeReference) {__		return toMono(ResolvableType.forType(typeReference.getType()))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,mono,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,for,instance,when,using,the,link,org,springframework,web,reactive,function,client,web,client,web,client,pre,class,code,mono,lt,map,lt,string,string,gt,gt,body,this,web,client,get,uri,http,example,com,exchange,flat,map,r,r,body,to,mono,new,parameterized,type,reference,lt,map,lt,string,string,gt,gt,pre,param,type,reference,a,reference,to,the,type,of,element,in,the,code,mono,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,parameterized,type,reference,t,type,reference,return,to,mono,resolvable,type,for,type,type,reference,get,type
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(ParameterizedTypeReference<T> typeRef);1527269520;Variant of {@link #toMono(Class)} for type information with generics._@param typeRef the type reference for the type to decode to_@param <T> the element type to decode to_@return {@code BodyExtractor} for {@code Mono<T>};public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(ParameterizedTypeReference<T> typeRef) {_		return toMono(ResolvableType.forType(typeRef.getType()))__	};variant,of,link,to,mono,class,for,type,information,with,generics,param,type,ref,the,type,reference,for,the,type,to,decode,to,param,t,the,element,type,to,decode,to,return,code,body,extractor,for,code,mono,t;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,parameterized,type,reference,t,type,ref,return,to,mono,resolvable,type,for,type,type,ref,get,type
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(ParameterizedTypeReference<T> typeRef);1530174524;Variant of {@link #toMono(Class)} for type information with generics._@param typeRef the type reference for the type to decode to_@param <T> the element type to decode to_@return {@code BodyExtractor} for {@code Mono<T>};public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(ParameterizedTypeReference<T> typeRef) {_		return toMono(ResolvableType.forType(typeRef.getType()))__	};variant,of,link,to,mono,class,for,type,information,with,generics,param,type,ref,the,type,reference,for,the,type,to,decode,to,param,t,the,element,type,to,decode,to,return,code,body,extractor,for,code,mono,t;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,parameterized,type,reference,t,type,ref,return,to,mono,resolvable,type,for,type,type,ref,get,type
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(ParameterizedTypeReference<T> typeRef);1532088094;Variant of {@link #toMono(Class)} for type information with generics._@param typeRef the type reference for the type to decode to_@param <T> the element type to decode to_@return {@code BodyExtractor} for {@code Mono<T>};public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(ParameterizedTypeReference<T> typeRef) {_		return toMono(ResolvableType.forType(typeRef.getType()))__	};variant,of,link,to,mono,class,for,type,information,with,generics,param,type,ref,the,type,reference,for,the,type,to,decode,to,param,t,the,element,type,to,decode,to,return,code,body,extractor,for,code,mono,t;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,parameterized,type,reference,t,type,ref,return,to,mono,resolvable,type,for,type,type,ref,get,type
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(ParameterizedTypeReference<T> typeRef);1537262433;Variant of {@link #toMono(Class)} for type information with generics._@param typeRef the type reference for the type to decode to_@param <T> the element type to decode to_@return {@code BodyExtractor} for {@code Mono<T>};public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(ParameterizedTypeReference<T> typeRef) {_		return toMono(ResolvableType.forType(typeRef.getType()))__	};variant,of,link,to,mono,class,for,type,information,with,generics,param,type,ref,the,type,reference,for,the,type,to,decode,to,param,t,the,element,type,to,decode,to,return,code,body,extractor,for,code,mono,t;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,parameterized,type,reference,t,type,ref,return,to,mono,resolvable,type,for,type,type,ref,get,type
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(ParameterizedTypeReference<T> typeRef);1541736828;Variant of {@link #toMono(Class)} for type information with generics._@param typeRef the type reference for the type to decode to_@param <T> the element type to decode to_@return {@code BodyExtractor} for {@code Mono<T>};public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(ParameterizedTypeReference<T> typeRef) {_		return toMono(ResolvableType.forType(typeRef.getType()))__	};variant,of,link,to,mono,class,for,type,information,with,generics,param,type,ref,the,type,reference,for,the,type,to,decode,to,param,t,the,element,type,to,decode,to,return,code,body,extractor,for,code,mono,t;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,parameterized,type,reference,t,type,ref,return,to,mono,resolvable,type,for,type,type,ref,get,type
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(ParameterizedTypeReference<T> typeRef);1541798163;Variant of {@link #toMono(Class)} for type information with generics._@param typeRef the type reference for the type to decode to_@param <T> the element type to decode to_@return {@code BodyExtractor} for {@code Mono<T>};public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(ParameterizedTypeReference<T> typeRef) {_		return toMono(ResolvableType.forType(typeRef.getType()))__	};variant,of,link,to,mono,class,for,type,information,with,generics,param,type,ref,the,type,reference,for,the,type,to,decode,to,param,t,the,element,type,to,decode,to,return,code,body,extractor,for,code,mono,t;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,parameterized,type,reference,t,type,ref,return,to,mono,resolvable,type,for,type,type,ref,get,type
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass);1485986572;Return a {@code BodyExtractor} that reads into a Reactor {@link Mono}._@param elementClass the class of element in the {@code Mono}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass) {_		Assert.notNull(elementClass, "'elementClass' must not be null")__		return toMono(ResolvableType.forClass(elementClass))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,mono,param,element,class,the,class,of,element,in,the,code,mono,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,class,extends,t,element,class,assert,not,null,element,class,element,class,must,not,be,null,return,to,mono,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass);1486590418;Return a {@code BodyExtractor} that reads into a Reactor {@link Mono}._@param elementClass the class of element in the {@code Mono}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass) {_		Assert.notNull(elementClass, "'elementClass' must not be null")__		return toMono(ResolvableType.forClass(elementClass))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,mono,param,element,class,the,class,of,element,in,the,code,mono,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,class,extends,t,element,class,assert,not,null,element,class,element,class,must,not,be,null,return,to,mono,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass);1486657400;Return a {@code BodyExtractor} that reads into a Reactor {@link Mono}._@param elementClass the class of element in the {@code Mono}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass) {_		Assert.notNull(elementClass, "'elementClass' must not be null")__		return toMono(ResolvableType.forClass(elementClass))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,mono,param,element,class,the,class,of,element,in,the,code,mono,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,class,extends,t,element,class,assert,not,null,element,class,element,class,must,not,be,null,return,to,mono,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass);1487687241;Return a {@code BodyExtractor} that reads into a Reactor {@link Mono}._@param elementClass the class of element in the {@code Mono}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass) {_		Assert.notNull(elementClass, "'elementClass' must not be null")__		return toMono(ResolvableType.forClass(elementClass))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,mono,param,element,class,the,class,of,element,in,the,code,mono,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,class,extends,t,element,class,assert,not,null,element,class,element,class,must,not,be,null,return,to,mono,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass);1491385016;Return a {@code BodyExtractor} that reads into a Reactor {@link Mono}._@param elementClass the class of element in the {@code Mono}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass) {_		Assert.notNull(elementClass, "'elementClass' must not be null")__		return toMono(ResolvableType.forClass(elementClass))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,mono,param,element,class,the,class,of,element,in,the,code,mono,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,class,extends,t,element,class,assert,not,null,element,class,element,class,must,not,be,null,return,to,mono,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass);1493390543;Return a {@code BodyExtractor} that reads into a Reactor {@link Mono}._@param elementClass the class of element in the {@code Mono}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass) {_		Assert.notNull(elementClass, "'elementClass' must not be null")__		return toMono(ResolvableType.forClass(elementClass))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,mono,param,element,class,the,class,of,element,in,the,code,mono,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,class,extends,t,element,class,assert,not,null,element,class,element,class,must,not,be,null,return,to,mono,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass);1493676008;Return a {@code BodyExtractor} that reads into a Reactor {@link Mono}._@param elementClass the class of element in the {@code Mono}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass) {_		Assert.notNull(elementClass, "'elementClass' must not be null")__		return toMono(ResolvableType.forClass(elementClass))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,mono,param,element,class,the,class,of,element,in,the,code,mono,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,class,extends,t,element,class,assert,not,null,element,class,element,class,must,not,be,null,return,to,mono,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass);1493894391;Return a {@code BodyExtractor} that reads into a Reactor {@link Mono}._@param elementClass the class of element in the {@code Mono}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass) {_		Assert.notNull(elementClass, "'elementClass' must not be null")__		return toMono(ResolvableType.forClass(elementClass))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,mono,param,element,class,the,class,of,element,in,the,code,mono,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,class,extends,t,element,class,assert,not,null,element,class,element,class,must,not,be,null,return,to,mono,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass);1495626483;Return a {@code BodyExtractor} that reads into a Reactor {@link Mono}._@param elementClass the class of element in the {@code Mono}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass) {_		Assert.notNull(elementClass, "'elementClass' must not be null")__		return toMono(ResolvableType.forClass(elementClass))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,mono,param,element,class,the,class,of,element,in,the,code,mono,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,class,extends,t,element,class,assert,not,null,element,class,element,class,must,not,be,null,return,to,mono,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass);1497007755;Return a {@code BodyExtractor} that reads into a Reactor {@link Mono}._@param elementClass the class of element in the {@code Mono}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass) {_		Assert.notNull(elementClass, "'elementClass' must not be null")__		return toMono(ResolvableType.forClass(elementClass))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,mono,param,element,class,the,class,of,element,in,the,code,mono,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,class,extends,t,element,class,assert,not,null,element,class,element,class,must,not,be,null,return,to,mono,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass);1497969037;Return a {@code BodyExtractor} that reads into a Reactor {@link Mono}._@param elementClass the class of element in the {@code Mono}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass) {_		Assert.notNull(elementClass, "'elementClass' must not be null")__		return toMono(ResolvableType.forClass(elementClass))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,mono,param,element,class,the,class,of,element,in,the,code,mono,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,class,extends,t,element,class,assert,not,null,element,class,element,class,must,not,be,null,return,to,mono,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass);1497969249;Return a {@code BodyExtractor} that reads into a Reactor {@link Mono}._@param elementClass the class of element in the {@code Mono}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass) {_		Assert.notNull(elementClass, "'elementClass' must not be null")__		return toMono(ResolvableType.forClass(elementClass))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,mono,param,element,class,the,class,of,element,in,the,code,mono,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,class,extends,t,element,class,assert,not,null,element,class,element,class,must,not,be,null,return,to,mono,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass);1498758448;Return a {@code BodyExtractor} that reads into a Reactor {@link Mono}._@param elementClass the class of element in the {@code Mono}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass) {_		Assert.notNull(elementClass, "'elementClass' must not be null")__		return toMono(ResolvableType.forClass(elementClass))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,mono,param,element,class,the,class,of,element,in,the,code,mono,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,class,extends,t,element,class,assert,not,null,element,class,element,class,must,not,be,null,return,to,mono,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass);1500035922;Return a {@code BodyExtractor} that reads into a Reactor {@link Mono}._@param elementClass the class of element in the {@code Mono}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass) {_		Assert.notNull(elementClass, "'elementClass' must not be null")__		return toMono(ResolvableType.forClass(elementClass))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,mono,param,element,class,the,class,of,element,in,the,code,mono,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,class,extends,t,element,class,assert,not,null,element,class,element,class,must,not,be,null,return,to,mono,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass);1508532146;Return a {@code BodyExtractor} that reads into a Reactor {@link Mono}._@param elementClass the class of element in the {@code Mono}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass) {_		Assert.notNull(elementClass, "'elementClass' must not be null")__		return toMono(ResolvableType.forClass(elementClass))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,mono,param,element,class,the,class,of,element,in,the,code,mono,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,class,extends,t,element,class,assert,not,null,element,class,element,class,must,not,be,null,return,to,mono,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass);1522103912;Return a {@code BodyExtractor} that reads into a Reactor {@link Mono}._@param elementClass the class of element in the {@code Mono}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass) {_		return toMono(ResolvableType.forClass(elementClass))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,mono,param,element,class,the,class,of,element,in,the,code,mono,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,class,extends,t,element,class,return,to,mono,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass);1526354196;Return a {@code BodyExtractor} that reads into a Reactor {@link Mono}._@param elementClass the class of element in the {@code Mono}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass) {_		return toMono(ResolvableType.forClass(elementClass))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,mono,param,element,class,the,class,of,element,in,the,code,mono,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,class,extends,t,element,class,return,to,mono,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass);1526481710;Return a {@code BodyExtractor} that reads into a Reactor {@link Mono}._@param elementClass the class of element in the {@code Mono}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass) {_		return toMono(ResolvableType.forClass(elementClass))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,mono,param,element,class,the,class,of,element,in,the,code,mono,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,class,extends,t,element,class,return,to,mono,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass);1527269520;Extractor to decode the input content into {@code Mono<T>}._@param elementClass the class of the element type to decode to_@param <T> the element type to decode to_@return {@code BodyExtractor} for {@code Mono<T>};public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass) {_		return toMono(ResolvableType.forClass(elementClass))__	};extractor,to,decode,the,input,content,into,code,mono,t,param,element,class,the,class,of,the,element,type,to,decode,to,param,t,the,element,type,to,decode,to,return,code,body,extractor,for,code,mono,t;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,class,extends,t,element,class,return,to,mono,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass);1530174524;Extractor to decode the input content into {@code Mono<T>}._@param elementClass the class of the element type to decode to_@param <T> the element type to decode to_@return {@code BodyExtractor} for {@code Mono<T>};public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass) {_		return toMono(ResolvableType.forClass(elementClass))__	};extractor,to,decode,the,input,content,into,code,mono,t,param,element,class,the,class,of,the,element,type,to,decode,to,param,t,the,element,type,to,decode,to,return,code,body,extractor,for,code,mono,t;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,class,extends,t,element,class,return,to,mono,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass);1532088094;Extractor to decode the input content into {@code Mono<T>}._@param elementClass the class of the element type to decode to_@param <T> the element type to decode to_@return {@code BodyExtractor} for {@code Mono<T>};public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass) {_		return toMono(ResolvableType.forClass(elementClass))__	};extractor,to,decode,the,input,content,into,code,mono,t,param,element,class,the,class,of,the,element,type,to,decode,to,param,t,the,element,type,to,decode,to,return,code,body,extractor,for,code,mono,t;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,class,extends,t,element,class,return,to,mono,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass);1537262433;Extractor to decode the input content into {@code Mono<T>}._@param elementClass the class of the element type to decode to_@param <T> the element type to decode to_@return {@code BodyExtractor} for {@code Mono<T>};public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass) {_		return toMono(ResolvableType.forClass(elementClass))__	};extractor,to,decode,the,input,content,into,code,mono,t,param,element,class,the,class,of,the,element,type,to,decode,to,param,t,the,element,type,to,decode,to,return,code,body,extractor,for,code,mono,t;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,class,extends,t,element,class,return,to,mono,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass);1541736828;Extractor to decode the input content into {@code Mono<T>}._@param elementClass the class of the element type to decode to_@param <T> the element type to decode to_@return {@code BodyExtractor} for {@code Mono<T>};public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass) {_		return toMono(ResolvableType.forClass(elementClass))__	};extractor,to,decode,the,input,content,into,code,mono,t,param,element,class,the,class,of,the,element,type,to,decode,to,param,t,the,element,type,to,decode,to,return,code,body,extractor,for,code,mono,t;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,class,extends,t,element,class,return,to,mono,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass);1541798163;Extractor to decode the input content into {@code Mono<T>}._@param elementClass the class of the element type to decode to_@param <T> the element type to decode to_@return {@code BodyExtractor} for {@code Mono<T>};public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(Class<? extends T> elementClass) {_		return toMono(ResolvableType.forClass(elementClass))__	};extractor,to,decode,the,input,content,into,code,mono,t,param,element,class,the,class,of,the,element,type,to,decode,to,param,t,the,element,type,to,decode,to,return,code,body,extractor,for,code,mono,t;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,class,extends,t,element,class,return,to,mono,resolvable,type,for,class,element,class
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, Part>>, ServerHttpRequest> toMultipartData();1493390543;Return a {@code BodyExtractor} that reads form data into a {@link MultiValueMap}._@return a {@code BodyExtractor} that reads multipart data;public static BodyExtractor<Mono<MultiValueMap<String, Part>>, ServerHttpRequest> toMultipartData() {_		return (serverRequest, context) -> {_			HttpMessageReader<MultiValueMap<String, Part>> messageReader =_					multipartMessageReader(context)__			return context.serverResponse()_					.map(serverResponse -> messageReader.readMono(MULTIPART_VALUE_TYPE, MULTIPART_VALUE_TYPE, serverRequest, serverResponse, context.hints()))_					.orElseGet(() -> messageReader.readMono(MULTIPART_VALUE_TYPE, serverRequest, context.hints()))__		}__	};return,a,code,body,extractor,that,reads,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,multipart,data;public,static,body,extractor,mono,multi,value,map,string,part,server,http,request,to,multipart,data,return,server,request,context,http,message,reader,multi,value,map,string,part,message,reader,multipart,message,reader,context,return,context,server,response,map,server,response,message,reader,read,mono,server,request,server,response,context,hints,or,else,get,message,reader,read,mono,server,request,context,hints
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, Part>>, ServerHttpRequest> toMultipartData();1493676008;Return a {@code BodyExtractor} that reads form data into a {@link MultiValueMap}._@return a {@code BodyExtractor} that reads multipart data;public static BodyExtractor<Mono<MultiValueMap<String, Part>>, ServerHttpRequest> toMultipartData() {_		return (serverRequest, context) -> {_			HttpMessageReader<MultiValueMap<String, Part>> messageReader =_					multipartMessageReader(context)__			return context.serverResponse()_					.map(serverResponse -> messageReader.readMono(MULTIPART_TYPE, MULTIPART_TYPE, serverRequest, serverResponse, context.hints()))_					.orElseGet(() -> messageReader.readMono(MULTIPART_TYPE, serverRequest, context.hints()))__		}__	};return,a,code,body,extractor,that,reads,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,multipart,data;public,static,body,extractor,mono,multi,value,map,string,part,server,http,request,to,multipart,data,return,server,request,context,http,message,reader,multi,value,map,string,part,message,reader,multipart,message,reader,context,return,context,server,response,map,server,response,message,reader,read,mono,server,request,server,response,context,hints,or,else,get,message,reader,read,mono,server,request,context,hints
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, Part>>, ServerHttpRequest> toMultipartData();1493894391;Return a {@code BodyExtractor} that reads multipart (i.e. file upload) form data into a_{@link MultiValueMap}._@return a {@code BodyExtractor} that reads multipart data;public static BodyExtractor<Mono<MultiValueMap<String, Part>>, ServerHttpRequest> toMultipartData() {_		return (serverRequest, context) -> {_			HttpMessageReader<MultiValueMap<String, Part>> messageReader =_					messageReader(MULTIPART_MAP_TYPE, MediaType.MULTIPART_FORM_DATA, context)__			return context.serverResponse()_					.map(serverResponse -> messageReader.readMono(MULTIPART_MAP_TYPE,_							MULTIPART_MAP_TYPE, serverRequest, serverResponse, context.hints()))_					.orElseGet(() -> messageReader.readMono(MULTIPART_MAP_TYPE, serverRequest, context.hints()))__		}__	};return,a,code,body,extractor,that,reads,multipart,i,e,file,upload,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,multipart,data;public,static,body,extractor,mono,multi,value,map,string,part,server,http,request,to,multipart,data,return,server,request,context,http,message,reader,multi,value,map,string,part,message,reader,message,reader,media,type,context,return,context,server,response,map,server,response,message,reader,read,mono,server,request,server,response,context,hints,or,else,get,message,reader,read,mono,server,request,context,hints
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, Part>>, ServerHttpRequest> toMultipartData();1495626483;Return a {@code BodyExtractor} that reads multipart (i.e. file upload) form data into a_{@link MultiValueMap}._@return a {@code BodyExtractor} that reads multipart data;public static BodyExtractor<Mono<MultiValueMap<String, Part>>, ServerHttpRequest> toMultipartData() {_		return (serverRequest, context) -> {_			HttpMessageReader<MultiValueMap<String, Part>> messageReader =_					messageReader(MULTIPART_MAP_TYPE, MediaType.MULTIPART_FORM_DATA, context)__			return context.serverResponse()_					.map(serverResponse -> messageReader.readMono(MULTIPART_MAP_TYPE,_							MULTIPART_MAP_TYPE, serverRequest, serverResponse, context.hints()))_					.orElseGet(() -> messageReader.readMono(MULTIPART_MAP_TYPE, serverRequest, context.hints()))__		}__	};return,a,code,body,extractor,that,reads,multipart,i,e,file,upload,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,multipart,data;public,static,body,extractor,mono,multi,value,map,string,part,server,http,request,to,multipart,data,return,server,request,context,http,message,reader,multi,value,map,string,part,message,reader,message,reader,media,type,context,return,context,server,response,map,server,response,message,reader,read,mono,server,request,server,response,context,hints,or,else,get,message,reader,read,mono,server,request,context,hints
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, Part>>, ServerHttpRequest> toMultipartData();1497007755;Return a {@code BodyExtractor} that reads multipart (i.e. file upload) form data into a_{@link MultiValueMap}._@return a {@code BodyExtractor} that reads multipart data;public static BodyExtractor<Mono<MultiValueMap<String, Part>>, ServerHttpRequest> toMultipartData() {_		return (serverRequest, context) -> {_			HttpMessageReader<MultiValueMap<String, Part>> messageReader =_					messageReader(MULTIPART_MAP_TYPE, MediaType.MULTIPART_FORM_DATA, context)__			return context.serverResponse()_					.map(serverResponse -> messageReader.readMono(MULTIPART_MAP_TYPE,_							MULTIPART_MAP_TYPE, serverRequest, serverResponse, context.hints()))_					.orElseGet(() -> messageReader.readMono(MULTIPART_MAP_TYPE, serverRequest, context.hints()))__		}__	};return,a,code,body,extractor,that,reads,multipart,i,e,file,upload,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,multipart,data;public,static,body,extractor,mono,multi,value,map,string,part,server,http,request,to,multipart,data,return,server,request,context,http,message,reader,multi,value,map,string,part,message,reader,message,reader,media,type,context,return,context,server,response,map,server,response,message,reader,read,mono,server,request,server,response,context,hints,or,else,get,message,reader,read,mono,server,request,context,hints
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, Part>>, ServerHttpRequest> toMultipartData();1497969037;Return a {@code BodyExtractor} that reads multipart (i.e. file upload) form data into a_{@link MultiValueMap}._@return a {@code BodyExtractor} that reads multipart data;public static BodyExtractor<Mono<MultiValueMap<String, Part>>, ServerHttpRequest> toMultipartData() {_		return (serverRequest, context) -> {_			HttpMessageReader<MultiValueMap<String, Part>> messageReader =_					messageReader(MULTIPART_MAP_TYPE, MediaType.MULTIPART_FORM_DATA, context)__			return context.serverResponse()_					.map(serverResponse -> messageReader.readMono(MULTIPART_MAP_TYPE,_							MULTIPART_MAP_TYPE, serverRequest, serverResponse, context.hints()))_					.orElseGet(() -> messageReader.readMono(MULTIPART_MAP_TYPE, serverRequest, context.hints()))__		}__	};return,a,code,body,extractor,that,reads,multipart,i,e,file,upload,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,multipart,data;public,static,body,extractor,mono,multi,value,map,string,part,server,http,request,to,multipart,data,return,server,request,context,http,message,reader,multi,value,map,string,part,message,reader,message,reader,media,type,context,return,context,server,response,map,server,response,message,reader,read,mono,server,request,server,response,context,hints,or,else,get,message,reader,read,mono,server,request,context,hints
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, Part>>, ServerHttpRequest> toMultipartData();1497969249;Return a {@code BodyExtractor} that reads multipart (i.e. file upload) form data into a_{@link MultiValueMap}._@return a {@code BodyExtractor} that reads multipart data;public static BodyExtractor<Mono<MultiValueMap<String, Part>>, ServerHttpRequest> toMultipartData() {_		return (serverRequest, context) -> {_			HttpMessageReader<MultiValueMap<String, Part>> messageReader =_					messageReader(MULTIPART_MAP_TYPE, MediaType.MULTIPART_FORM_DATA, context)__			return context.serverResponse()_					.map(serverResponse -> messageReader.readMono(MULTIPART_MAP_TYPE,_							MULTIPART_MAP_TYPE, serverRequest, serverResponse, context.hints()))_					.orElseGet(() -> messageReader.readMono(MULTIPART_MAP_TYPE, serverRequest, context.hints()))__		}__	};return,a,code,body,extractor,that,reads,multipart,i,e,file,upload,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,multipart,data;public,static,body,extractor,mono,multi,value,map,string,part,server,http,request,to,multipart,data,return,server,request,context,http,message,reader,multi,value,map,string,part,message,reader,message,reader,media,type,context,return,context,server,response,map,server,response,message,reader,read,mono,server,request,server,response,context,hints,or,else,get,message,reader,read,mono,server,request,context,hints
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, Part>>, ServerHttpRequest> toMultipartData();1498758448;Return a {@code BodyExtractor} that reads multipart (i.e. file upload) form data into a_{@link MultiValueMap}._@return a {@code BodyExtractor} that reads multipart data;public static BodyExtractor<Mono<MultiValueMap<String, Part>>, ServerHttpRequest> toMultipartData() {_		return (serverRequest, context) -> {_			HttpMessageReader<MultiValueMap<String, Part>> messageReader =_					messageReader(MULTIPART_MAP_TYPE, MediaType.MULTIPART_FORM_DATA, context)__			return context.serverResponse()_					.map(serverResponse -> messageReader.readMono(MULTIPART_MAP_TYPE,_							MULTIPART_MAP_TYPE, serverRequest, serverResponse, context.hints()))_					.orElseGet(() -> messageReader.readMono(MULTIPART_MAP_TYPE, serverRequest, context.hints()))__		}__	};return,a,code,body,extractor,that,reads,multipart,i,e,file,upload,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,multipart,data;public,static,body,extractor,mono,multi,value,map,string,part,server,http,request,to,multipart,data,return,server,request,context,http,message,reader,multi,value,map,string,part,message,reader,message,reader,media,type,context,return,context,server,response,map,server,response,message,reader,read,mono,server,request,server,response,context,hints,or,else,get,message,reader,read,mono,server,request,context,hints
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, Part>>, ServerHttpRequest> toMultipartData();1500035922;Return a {@code BodyExtractor} that reads multipart (i.e. file upload) form data into a_{@link MultiValueMap}._@return a {@code BodyExtractor} that reads multipart data;public static BodyExtractor<Mono<MultiValueMap<String, Part>>, ServerHttpRequest> toMultipartData() {_		return (serverRequest, context) -> {_			HttpMessageReader<MultiValueMap<String, Part>> messageReader =_					messageReader(MULTIPART_MAP_TYPE, MediaType.MULTIPART_FORM_DATA, context)__			return context.serverResponse()_					.map(serverResponse -> messageReader.readMono(MULTIPART_MAP_TYPE,_							MULTIPART_MAP_TYPE, serverRequest, serverResponse, context.hints()))_					.orElseGet(() -> messageReader.readMono(MULTIPART_MAP_TYPE, serverRequest, context.hints()))__		}__	};return,a,code,body,extractor,that,reads,multipart,i,e,file,upload,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,multipart,data;public,static,body,extractor,mono,multi,value,map,string,part,server,http,request,to,multipart,data,return,server,request,context,http,message,reader,multi,value,map,string,part,message,reader,message,reader,media,type,context,return,context,server,response,map,server,response,message,reader,read,mono,server,request,server,response,context,hints,or,else,get,message,reader,read,mono,server,request,context,hints
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, Part>>, ServerHttpRequest> toMultipartData();1508532146;Return a {@code BodyExtractor} that reads multipart (i.e. file upload) form data into a_{@link MultiValueMap}._@return a {@code BodyExtractor} that reads multipart data;public static BodyExtractor<Mono<MultiValueMap<String, Part>>, ServerHttpRequest> toMultipartData() {_		return (serverRequest, context) -> {_			ResolvableType type = MULTIPART_MAP_TYPE__			HttpMessageReader<MultiValueMap<String, Part>> reader =_					messageReader(type, MediaType.MULTIPART_FORM_DATA, context)__			return context.serverResponse()_					.map(response -> reader.readMono(type, type, serverRequest, response, context.hints()))_					.orElseGet(() -> reader.readMono(type, serverRequest, context.hints()))__		}__	};return,a,code,body,extractor,that,reads,multipart,i,e,file,upload,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,multipart,data;public,static,body,extractor,mono,multi,value,map,string,part,server,http,request,to,multipart,data,return,server,request,context,resolvable,type,type,http,message,reader,multi,value,map,string,part,reader,message,reader,type,media,type,context,return,context,server,response,map,response,reader,read,mono,type,type,server,request,response,context,hints,or,else,get,reader,read,mono,type,server,request,context,hints
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, Part>>, ServerHttpRequest> toMultipartData();1522103912;Return a {@code BodyExtractor} that reads multipart (i.e. file upload) form data into a_{@link MultiValueMap}._@return a {@code BodyExtractor} that reads multipart data;public static BodyExtractor<Mono<MultiValueMap<String, Part>>, ServerHttpRequest> toMultipartData() {_		return (serverRequest, context) -> {_			ResolvableType type = MULTIPART_MAP_TYPE__			HttpMessageReader<MultiValueMap<String, Part>> reader =_					messageReader(type, MediaType.MULTIPART_FORM_DATA, context)__			return context.serverResponse()_					.map(response -> reader.readMono(type, type, serverRequest, response, context.hints()))_					.orElseGet(() -> reader.readMono(type, serverRequest, context.hints()))__		}__	};return,a,code,body,extractor,that,reads,multipart,i,e,file,upload,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,multipart,data;public,static,body,extractor,mono,multi,value,map,string,part,server,http,request,to,multipart,data,return,server,request,context,resolvable,type,type,http,message,reader,multi,value,map,string,part,reader,message,reader,type,media,type,context,return,context,server,response,map,response,reader,read,mono,type,type,server,request,response,context,hints,or,else,get,reader,read,mono,type,server,request,context,hints
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, Part>>, ServerHttpRequest> toMultipartData();1526354196;Return a {@code BodyExtractor} that reads multipart (i.e. file upload) form data into a_{@link MultiValueMap}._@return a {@code BodyExtractor} that reads multipart data;public static BodyExtractor<Mono<MultiValueMap<String, Part>>, ServerHttpRequest> toMultipartData() {_		return (serverRequest, context) -> {_			ResolvableType type = MULTIPART_MAP_TYPE__			HttpMessageReader<MultiValueMap<String, Part>> reader =_					messageReader(type, MediaType.MULTIPART_FORM_DATA, context)__			return context.serverResponse()_					.map(response -> reader.readMono(type, type, serverRequest, response, context.hints()))_					.orElseGet(() -> reader.readMono(type, serverRequest, context.hints()))__		}__	};return,a,code,body,extractor,that,reads,multipart,i,e,file,upload,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,multipart,data;public,static,body,extractor,mono,multi,value,map,string,part,server,http,request,to,multipart,data,return,server,request,context,resolvable,type,type,http,message,reader,multi,value,map,string,part,reader,message,reader,type,media,type,context,return,context,server,response,map,response,reader,read,mono,type,type,server,request,response,context,hints,or,else,get,reader,read,mono,type,server,request,context,hints
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, Part>>, ServerHttpRequest> toMultipartData();1526481710;Return a {@code BodyExtractor} that reads multipart (i.e. file upload) form data into a_{@link MultiValueMap}._@return a {@code BodyExtractor} that reads multipart data;public static BodyExtractor<Mono<MultiValueMap<String, Part>>, ServerHttpRequest> toMultipartData() {_		return (serverRequest, context) -> {_			ResolvableType type = MULTIPART_MAP_TYPE__			HttpMessageReader<MultiValueMap<String, Part>> reader =_					messageReader(type, MediaType.MULTIPART_FORM_DATA, context)__			return context.serverResponse()_					.map(response -> reader.readMono(type, type, serverRequest, response, context.hints()))_					.orElseGet(() -> reader.readMono(type, serverRequest, context.hints()))__		}__	};return,a,code,body,extractor,that,reads,multipart,i,e,file,upload,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,multipart,data;public,static,body,extractor,mono,multi,value,map,string,part,server,http,request,to,multipart,data,return,server,request,context,resolvable,type,type,http,message,reader,multi,value,map,string,part,reader,message,reader,type,media,type,context,return,context,server,response,map,response,reader,read,mono,type,type,server,request,response,context,hints,or,else,get,reader,read,mono,type,server,request,context,hints
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, Part>>, ServerHttpRequest> toMultipartData();1527269520;Extractor to read multipart data into a {@code MultiValueMap<String, Part>}._@return {@code BodyExtractor} for multipart data;public static BodyExtractor<Mono<MultiValueMap<String, Part>>, ServerHttpRequest> toMultipartData() {_		return (serverRequest, context) -> {_			ResolvableType elementType = MULTIPART_DATA_TYPE__			MediaType mediaType = MediaType.MULTIPART_FORM_DATA__			HttpMessageReader<MultiValueMap<String, Part>> reader = findReader(elementType, mediaType, context)__			return readToMono(serverRequest, context, elementType, reader)__		}__	};extractor,to,read,multipart,data,into,a,code,multi,value,map,string,part,return,code,body,extractor,for,multipart,data;public,static,body,extractor,mono,multi,value,map,string,part,server,http,request,to,multipart,data,return,server,request,context,resolvable,type,element,type,media,type,media,type,media,type,http,message,reader,multi,value,map,string,part,reader,find,reader,element,type,media,type,context,return,read,to,mono,server,request,context,element,type,reader
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, Part>>, ServerHttpRequest> toMultipartData();1530174524;Extractor to read multipart data into a {@code MultiValueMap<String, Part>}._@return {@code BodyExtractor} for multipart data;public static BodyExtractor<Mono<MultiValueMap<String, Part>>, ServerHttpRequest> toMultipartData() {_		return (serverRequest, context) -> {_			ResolvableType elementType = MULTIPART_DATA_TYPE__			MediaType mediaType = MediaType.MULTIPART_FORM_DATA__			HttpMessageReader<MultiValueMap<String, Part>> reader = findReader(elementType, mediaType, context)__			return readToMono(serverRequest, context, elementType, reader)__		}__	};extractor,to,read,multipart,data,into,a,code,multi,value,map,string,part,return,code,body,extractor,for,multipart,data;public,static,body,extractor,mono,multi,value,map,string,part,server,http,request,to,multipart,data,return,server,request,context,resolvable,type,element,type,media,type,media,type,media,type,http,message,reader,multi,value,map,string,part,reader,find,reader,element,type,media,type,context,return,read,to,mono,server,request,context,element,type,reader
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, Part>>, ServerHttpRequest> toMultipartData();1532088094;Extractor to read multipart data into a {@code MultiValueMap<String, Part>}._@return {@code BodyExtractor} for multipart data;public static BodyExtractor<Mono<MultiValueMap<String, Part>>, ServerHttpRequest> toMultipartData() {_		return (serverRequest, context) -> {_			ResolvableType elementType = MULTIPART_DATA_TYPE__			MediaType mediaType = MediaType.MULTIPART_FORM_DATA__			HttpMessageReader<MultiValueMap<String, Part>> reader = findReader(elementType, mediaType, context)__			return readToMono(serverRequest, context, elementType, reader)__		}__	};extractor,to,read,multipart,data,into,a,code,multi,value,map,string,part,return,code,body,extractor,for,multipart,data;public,static,body,extractor,mono,multi,value,map,string,part,server,http,request,to,multipart,data,return,server,request,context,resolvable,type,element,type,media,type,media,type,media,type,http,message,reader,multi,value,map,string,part,reader,find,reader,element,type,media,type,context,return,read,to,mono,server,request,context,element,type,reader
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, Part>>, ServerHttpRequest> toMultipartData();1537262433;Extractor to read multipart data into a {@code MultiValueMap<String, Part>}._@return {@code BodyExtractor} for multipart data;public static BodyExtractor<Mono<MultiValueMap<String, Part>>, ServerHttpRequest> toMultipartData() {_		return (serverRequest, context) -> {_			ResolvableType elementType = MULTIPART_DATA_TYPE__			MediaType mediaType = MediaType.MULTIPART_FORM_DATA__			HttpMessageReader<MultiValueMap<String, Part>> reader = findReader(elementType, mediaType, context)__			return readToMono(serverRequest, context, elementType, reader)__		}__	};extractor,to,read,multipart,data,into,a,code,multi,value,map,string,part,return,code,body,extractor,for,multipart,data;public,static,body,extractor,mono,multi,value,map,string,part,server,http,request,to,multipart,data,return,server,request,context,resolvable,type,element,type,media,type,media,type,media,type,http,message,reader,multi,value,map,string,part,reader,find,reader,element,type,media,type,context,return,read,to,mono,server,request,context,element,type,reader
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, Part>>, ServerHttpRequest> toMultipartData();1541736828;Extractor to read multipart data into a {@code MultiValueMap<String, Part>}._@return {@code BodyExtractor} for multipart data;public static BodyExtractor<Mono<MultiValueMap<String, Part>>, ServerHttpRequest> toMultipartData() {_		return (serverRequest, context) -> {_			ResolvableType elementType = MULTIPART_DATA_TYPE__			MediaType mediaType = MediaType.MULTIPART_FORM_DATA__			HttpMessageReader<MultiValueMap<String, Part>> reader = findReader(elementType, mediaType, context)__			return readToMono(serverRequest, context, elementType, reader)__		}__	};extractor,to,read,multipart,data,into,a,code,multi,value,map,string,part,return,code,body,extractor,for,multipart,data;public,static,body,extractor,mono,multi,value,map,string,part,server,http,request,to,multipart,data,return,server,request,context,resolvable,type,element,type,media,type,media,type,media,type,http,message,reader,multi,value,map,string,part,reader,find,reader,element,type,media,type,context,return,read,to,mono,server,request,context,element,type,reader
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, Part>>, ServerHttpRequest> toMultipartData();1541798163;Extractor to read multipart data into a {@code MultiValueMap<String, Part>}._@return {@code BodyExtractor} for multipart data;public static BodyExtractor<Mono<MultiValueMap<String, Part>>, ServerHttpRequest> toMultipartData() {_		return (serverRequest, context) -> {_			ResolvableType elementType = MULTIPART_DATA_TYPE__			MediaType mediaType = MediaType.MULTIPART_FORM_DATA__			HttpMessageReader<MultiValueMap<String, Part>> reader = findReader(elementType, mediaType, context)__			return readToMono(serverRequest, context, elementType, reader)__		}__	};extractor,to,read,multipart,data,into,a,code,multi,value,map,string,part,return,code,body,extractor,for,multipart,data;public,static,body,extractor,mono,multi,value,map,string,part,server,http,request,to,multipart,data,return,server,request,context,resolvable,type,element,type,media,type,media,type,media,type,http,message,reader,multi,value,map,string,part,reader,find,reader,element,type,media,type,context,return,read,to,mono,server,request,context,element,type,reader
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(ParameterizedTypeReference<T> typeReference);1497007755;Return a {@code BodyExtractor} that reads into a Reactor {@link Mono}._The given {@link ParameterizedTypeReference} is used to pass generic type information, for_instance when using the {@link org.springframework.web.reactive.function.client.WebClient WebClient}_<pre class="code">_Mono&lt_Map&lt_String, String&gt_&gt_ body = this.webClient_.get()_.uri("http://example.com")_.exchange()_.flatMap(r -> r.body(toMono(new ParameterizedTypeReference&lt_Map&lt_String,String&gt_&gt_() {})))__</pre>_@param typeReference a reference to the type of element in the {@code Mono}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(ParameterizedTypeReference<T> typeReference) {_		Assert.notNull(typeReference, "'typeReference' must not be null")__		return toMono(ResolvableType.forType(typeReference.getType()))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,mono,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,for,instance,when,using,the,link,org,springframework,web,reactive,function,client,web,client,web,client,pre,class,code,mono,lt,map,lt,string,string,gt,gt,body,this,web,client,get,uri,http,example,com,exchange,flat,map,r,r,body,to,mono,new,parameterized,type,reference,lt,map,lt,string,string,gt,gt,pre,param,type,reference,a,reference,to,the,type,of,element,in,the,code,mono,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,parameterized,type,reference,t,type,reference,assert,not,null,type,reference,type,reference,must,not,be,null,return,to,mono,resolvable,type,for,type,type,reference,get,type
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(ParameterizedTypeReference<T> typeReference);1497969037;Return a {@code BodyExtractor} that reads into a Reactor {@link Mono}._The given {@link ParameterizedTypeReference} is used to pass generic type information, for_instance when using the {@link org.springframework.web.reactive.function.client.WebClient WebClient}_<pre class="code">_Mono&lt_Map&lt_String, String&gt_&gt_ body = this.webClient_.get()_.uri("http://example.com")_.exchange()_.flatMap(r -> r.body(toMono(new ParameterizedTypeReference&lt_Map&lt_String,String&gt_&gt_() {})))__</pre>_@param typeReference a reference to the type of element in the {@code Mono}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(ParameterizedTypeReference<T> typeReference) {_		Assert.notNull(typeReference, "'typeReference' must not be null")__		return toMono(ResolvableType.forType(typeReference.getType()))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,mono,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,for,instance,when,using,the,link,org,springframework,web,reactive,function,client,web,client,web,client,pre,class,code,mono,lt,map,lt,string,string,gt,gt,body,this,web,client,get,uri,http,example,com,exchange,flat,map,r,r,body,to,mono,new,parameterized,type,reference,lt,map,lt,string,string,gt,gt,pre,param,type,reference,a,reference,to,the,type,of,element,in,the,code,mono,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,parameterized,type,reference,t,type,reference,assert,not,null,type,reference,type,reference,must,not,be,null,return,to,mono,resolvable,type,for,type,type,reference,get,type
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(ParameterizedTypeReference<T> typeReference);1497969249;Return a {@code BodyExtractor} that reads into a Reactor {@link Mono}._The given {@link ParameterizedTypeReference} is used to pass generic type information, for_instance when using the {@link org.springframework.web.reactive.function.client.WebClient WebClient}_<pre class="code">_Mono&lt_Map&lt_String, String&gt_&gt_ body = this.webClient_.get()_.uri("http://example.com")_.exchange()_.flatMap(r -> r.body(toMono(new ParameterizedTypeReference&lt_Map&lt_String,String&gt_&gt_() {})))__</pre>_@param typeReference a reference to the type of element in the {@code Mono}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(ParameterizedTypeReference<T> typeReference) {_		Assert.notNull(typeReference, "'typeReference' must not be null")__		return toMono(ResolvableType.forType(typeReference.getType()))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,mono,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,for,instance,when,using,the,link,org,springframework,web,reactive,function,client,web,client,web,client,pre,class,code,mono,lt,map,lt,string,string,gt,gt,body,this,web,client,get,uri,http,example,com,exchange,flat,map,r,r,body,to,mono,new,parameterized,type,reference,lt,map,lt,string,string,gt,gt,pre,param,type,reference,a,reference,to,the,type,of,element,in,the,code,mono,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,parameterized,type,reference,t,type,reference,assert,not,null,type,reference,type,reference,must,not,be,null,return,to,mono,resolvable,type,for,type,type,reference,get,type
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(ParameterizedTypeReference<T> typeReference);1498758448;Return a {@code BodyExtractor} that reads into a Reactor {@link Mono}._The given {@link ParameterizedTypeReference} is used to pass generic type information, for_instance when using the {@link org.springframework.web.reactive.function.client.WebClient WebClient}_<pre class="code">_Mono&lt_Map&lt_String, String&gt_&gt_ body = this.webClient_.get()_.uri("http://example.com")_.exchange()_.flatMap(r -> r.body(toMono(new ParameterizedTypeReference&lt_Map&lt_String,String&gt_&gt_() {})))__</pre>_@param typeReference a reference to the type of element in the {@code Mono}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(ParameterizedTypeReference<T> typeReference) {_		Assert.notNull(typeReference, "'typeReference' must not be null")__		return toMono(ResolvableType.forType(typeReference.getType()))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,mono,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,for,instance,when,using,the,link,org,springframework,web,reactive,function,client,web,client,web,client,pre,class,code,mono,lt,map,lt,string,string,gt,gt,body,this,web,client,get,uri,http,example,com,exchange,flat,map,r,r,body,to,mono,new,parameterized,type,reference,lt,map,lt,string,string,gt,gt,pre,param,type,reference,a,reference,to,the,type,of,element,in,the,code,mono,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,parameterized,type,reference,t,type,reference,assert,not,null,type,reference,type,reference,must,not,be,null,return,to,mono,resolvable,type,for,type,type,reference,get,type
BodyExtractors -> public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(ParameterizedTypeReference<T> typeReference);1500035922;Return a {@code BodyExtractor} that reads into a Reactor {@link Mono}._The given {@link ParameterizedTypeReference} is used to pass generic type information, for_instance when using the {@link org.springframework.web.reactive.function.client.WebClient WebClient}_<pre class="code">_Mono&lt_Map&lt_String, String&gt_&gt_ body = this.webClient_.get()_.uri("http://example.com")_.exchange()_.flatMap(r -> r.body(toMono(new ParameterizedTypeReference&lt_Map&lt_String,String&gt_&gt_() {})))__</pre>_@param typeReference a reference to the type of element in the {@code Mono}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Mono<T>, ReactiveHttpInputMessage> toMono(ParameterizedTypeReference<T> typeReference) {_		Assert.notNull(typeReference, "'typeReference' must not be null")__		return toMono(ResolvableType.forType(typeReference.getType()))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,mono,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,for,instance,when,using,the,link,org,springframework,web,reactive,function,client,web,client,web,client,pre,class,code,mono,lt,map,lt,string,string,gt,gt,body,this,web,client,get,uri,http,example,com,exchange,flat,map,r,r,body,to,mono,new,parameterized,type,reference,lt,map,lt,string,string,gt,gt,pre,param,type,reference,a,reference,to,the,type,of,element,in,the,code,mono,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,mono,t,reactive,http,input,message,to,mono,parameterized,type,reference,t,type,reference,assert,not,null,type,reference,type,reference,must,not,be,null,return,to,mono,resolvable,type,for,type,type,reference,get,type
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux( 			ParameterizedTypeReference<T> typeReference);1508532146;Return a {@code BodyExtractor} that reads into a Reactor {@link Flux}._The given {@link ParameterizedTypeReference} is used to pass generic type information, for_instance when using the {@link org.springframework.web.reactive.function.client.WebClient WebClient}_<pre class="code">_Flux&lt_ServerSentEvent&lt_String&gt_&gt_ body = this.webClient_.get()_.uri("http://example.com")_.exchange()_.flatMap(r -> r.body(toFlux(new ParameterizedTypeReference&lt_ServerSentEvent&lt_String&gt_&gt_() {})))__</pre>_@param typeReference a reference to the type of element in the {@code Flux}_@param <T> the element type_@return a {@code BodyExtractor} that reads a flux;public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(_			ParameterizedTypeReference<T> typeReference) {__		Assert.notNull(typeReference, "'typeReference' must not be null")__		return toFlux(ResolvableType.forType(typeReference.getType()))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,flux,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,for,instance,when,using,the,link,org,springframework,web,reactive,function,client,web,client,web,client,pre,class,code,flux,lt,server,sent,event,lt,string,gt,gt,body,this,web,client,get,uri,http,example,com,exchange,flat,map,r,r,body,to,flux,new,parameterized,type,reference,lt,server,sent,event,lt,string,gt,gt,pre,param,type,reference,a,reference,to,the,type,of,element,in,the,code,flux,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,flux;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,parameterized,type,reference,t,type,reference,assert,not,null,type,reference,type,reference,must,not,be,null,return,to,flux,resolvable,type,for,type,type,reference,get,type
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux( 			ParameterizedTypeReference<T> typeReference);1522103912;Return a {@code BodyExtractor} that reads into a Reactor {@link Flux}._The given {@link ParameterizedTypeReference} is used to pass generic type information, for_instance when using the {@link org.springframework.web.reactive.function.client.WebClient WebClient}_<pre class="code">_Flux&lt_ServerSentEvent&lt_String&gt_&gt_ body = this.webClient_.get()_.uri("http://example.com")_.exchange()_.flatMap(r -> r.body(toFlux(new ParameterizedTypeReference&lt_ServerSentEvent&lt_String&gt_&gt_() {})))__</pre>_@param typeReference a reference to the type of element in the {@code Flux}_@param <T> the element type_@return a {@code BodyExtractor} that reads a flux;public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(_			ParameterizedTypeReference<T> typeReference) {__		return toFlux(ResolvableType.forType(typeReference.getType()))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,flux,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,for,instance,when,using,the,link,org,springframework,web,reactive,function,client,web,client,web,client,pre,class,code,flux,lt,server,sent,event,lt,string,gt,gt,body,this,web,client,get,uri,http,example,com,exchange,flat,map,r,r,body,to,flux,new,parameterized,type,reference,lt,server,sent,event,lt,string,gt,gt,pre,param,type,reference,a,reference,to,the,type,of,element,in,the,code,flux,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,flux;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,parameterized,type,reference,t,type,reference,return,to,flux,resolvable,type,for,type,type,reference,get,type
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux( 			ParameterizedTypeReference<T> typeReference);1526354196;Return a {@code BodyExtractor} that reads into a Reactor {@link Flux}._The given {@link ParameterizedTypeReference} is used to pass generic type information, for_instance when using the {@link org.springframework.web.reactive.function.client.WebClient WebClient}_<pre class="code">_Flux&lt_ServerSentEvent&lt_String&gt_&gt_ body = this.webClient_.get()_.uri("http://example.com")_.exchange()_.flatMap(r -> r.body(toFlux(new ParameterizedTypeReference&lt_ServerSentEvent&lt_String&gt_&gt_() {})))__</pre>_@param typeReference a reference to the type of element in the {@code Flux}_@param <T> the element type_@return a {@code BodyExtractor} that reads a flux;public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(_			ParameterizedTypeReference<T> typeReference) {__		return toFlux(ResolvableType.forType(typeReference.getType()))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,flux,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,for,instance,when,using,the,link,org,springframework,web,reactive,function,client,web,client,web,client,pre,class,code,flux,lt,server,sent,event,lt,string,gt,gt,body,this,web,client,get,uri,http,example,com,exchange,flat,map,r,r,body,to,flux,new,parameterized,type,reference,lt,server,sent,event,lt,string,gt,gt,pre,param,type,reference,a,reference,to,the,type,of,element,in,the,code,flux,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,flux;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,parameterized,type,reference,t,type,reference,return,to,flux,resolvable,type,for,type,type,reference,get,type
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux( 			ParameterizedTypeReference<T> typeReference);1526481710;Return a {@code BodyExtractor} that reads into a Reactor {@link Flux}._The given {@link ParameterizedTypeReference} is used to pass generic type information, for_instance when using the {@link org.springframework.web.reactive.function.client.WebClient WebClient}_<pre class="code">_Flux&lt_ServerSentEvent&lt_String&gt_&gt_ body = this.webClient_.get()_.uri("http://example.com")_.exchange()_.flatMap(r -> r.body(toFlux(new ParameterizedTypeReference&lt_ServerSentEvent&lt_String&gt_&gt_() {})))__</pre>_@param typeReference a reference to the type of element in the {@code Flux}_@param <T> the element type_@return a {@code BodyExtractor} that reads a flux;public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(_			ParameterizedTypeReference<T> typeReference) {__		return toFlux(ResolvableType.forType(typeReference.getType()))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,flux,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,for,instance,when,using,the,link,org,springframework,web,reactive,function,client,web,client,web,client,pre,class,code,flux,lt,server,sent,event,lt,string,gt,gt,body,this,web,client,get,uri,http,example,com,exchange,flat,map,r,r,body,to,flux,new,parameterized,type,reference,lt,server,sent,event,lt,string,gt,gt,pre,param,type,reference,a,reference,to,the,type,of,element,in,the,code,flux,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,flux;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,parameterized,type,reference,t,type,reference,return,to,flux,resolvable,type,for,type,type,reference,get,type
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, String>>, ServerHttpRequest> toFormData();1485986572;Return a {@code BodyExtractor} that reads form data into a {@link MultiValueMap}._@return a {@code BodyExtractor} that reads form data;public static BodyExtractor<Mono<MultiValueMap<String, String>>, ServerHttpRequest> toFormData() {_		return (serverRequest, context) -> {_					HttpMessageReader<MultiValueMap<String, String>> messageReader = formMessageReader(context)__					return messageReader.readMono(FORM_TYPE, serverRequest, context.hints())__				}__	};return,a,code,body,extractor,that,reads,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,form,data;public,static,body,extractor,mono,multi,value,map,string,string,server,http,request,to,form,data,return,server,request,context,http,message,reader,multi,value,map,string,string,message,reader,form,message,reader,context,return,message,reader,read,mono,server,request,context,hints
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, String>>, ServerHttpRequest> toFormData();1486657400;Return a {@code BodyExtractor} that reads form data into a {@link MultiValueMap}._@return a {@code BodyExtractor} that reads form data;public static BodyExtractor<Mono<MultiValueMap<String, String>>, ServerHttpRequest> toFormData() {_		return (serverRequest, context) -> {_					HttpMessageReader<MultiValueMap<String, String>> messageReader = formMessageReader(context)__					return messageReader.readMono(FORM_TYPE, serverRequest, context.hints())__				}__	};return,a,code,body,extractor,that,reads,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,form,data;public,static,body,extractor,mono,multi,value,map,string,string,server,http,request,to,form,data,return,server,request,context,http,message,reader,multi,value,map,string,string,message,reader,form,message,reader,context,return,message,reader,read,mono,server,request,context,hints
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, String>>, ServerHttpRequest> toFormData();1487687241;Return a {@code BodyExtractor} that reads form data into a {@link MultiValueMap}._@return a {@code BodyExtractor} that reads form data;public static BodyExtractor<Mono<MultiValueMap<String, String>>, ServerHttpRequest> toFormData() {_		return (serverRequest, context) -> {_					HttpMessageReader<MultiValueMap<String, String>> messageReader = formMessageReader(context)__					return messageReader.readMono(FORM_TYPE, serverRequest, context.hints())__				}__	};return,a,code,body,extractor,that,reads,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,form,data;public,static,body,extractor,mono,multi,value,map,string,string,server,http,request,to,form,data,return,server,request,context,http,message,reader,multi,value,map,string,string,message,reader,form,message,reader,context,return,message,reader,read,mono,server,request,context,hints
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, String>>, ServerHttpRequest> toFormData();1491385016;Return a {@code BodyExtractor} that reads form data into a {@link MultiValueMap}._@return a {@code BodyExtractor} that reads form data;public static BodyExtractor<Mono<MultiValueMap<String, String>>, ServerHttpRequest> toFormData() {_		return (serverRequest, context) -> {_			HttpMessageReader<MultiValueMap<String, String>> messageReader =_					formMessageReader(context)__			return context.serverResponse()_					.map(serverResponse -> messageReader.readMono(FORM_TYPE, FORM_TYPE, serverRequest, serverResponse, context.hints()))_					.orElseGet(() -> messageReader.readMono(FORM_TYPE, serverRequest, context.hints()))__		}__	};return,a,code,body,extractor,that,reads,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,form,data;public,static,body,extractor,mono,multi,value,map,string,string,server,http,request,to,form,data,return,server,request,context,http,message,reader,multi,value,map,string,string,message,reader,form,message,reader,context,return,context,server,response,map,server,response,message,reader,read,mono,server,request,server,response,context,hints,or,else,get,message,reader,read,mono,server,request,context,hints
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, String>>, ServerHttpRequest> toFormData();1493390543;Return a {@code BodyExtractor} that reads form data into a {@link MultiValueMap}._@return a {@code BodyExtractor} that reads form data;public static BodyExtractor<Mono<MultiValueMap<String, String>>, ServerHttpRequest> toFormData() {_		return (serverRequest, context) -> {_			HttpMessageReader<MultiValueMap<String, String>> messageReader =_					formMessageReader(context)__			return context.serverResponse()_					.map(serverResponse -> messageReader.readMono(FORM_TYPE, FORM_TYPE, serverRequest, serverResponse, context.hints()))_					.orElseGet(() -> messageReader.readMono(FORM_TYPE, serverRequest, context.hints()))__		}__	};return,a,code,body,extractor,that,reads,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,form,data;public,static,body,extractor,mono,multi,value,map,string,string,server,http,request,to,form,data,return,server,request,context,http,message,reader,multi,value,map,string,string,message,reader,form,message,reader,context,return,context,server,response,map,server,response,message,reader,read,mono,server,request,server,response,context,hints,or,else,get,message,reader,read,mono,server,request,context,hints
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, String>>, ServerHttpRequest> toFormData();1493676008;Return a {@code BodyExtractor} that reads form data into a {@link MultiValueMap}._@return a {@code BodyExtractor} that reads form data;public static BodyExtractor<Mono<MultiValueMap<String, String>>, ServerHttpRequest> toFormData() {_		return (serverRequest, context) -> {_			HttpMessageReader<MultiValueMap<String, String>> messageReader =_					formMessageReader(context)__			return context.serverResponse()_					.map(serverResponse -> messageReader.readMono(FORM_TYPE, FORM_TYPE, serverRequest, serverResponse, context.hints()))_					.orElseGet(() -> messageReader.readMono(FORM_TYPE, serverRequest, context.hints()))__		}__	};return,a,code,body,extractor,that,reads,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,form,data;public,static,body,extractor,mono,multi,value,map,string,string,server,http,request,to,form,data,return,server,request,context,http,message,reader,multi,value,map,string,string,message,reader,form,message,reader,context,return,context,server,response,map,server,response,message,reader,read,mono,server,request,server,response,context,hints,or,else,get,message,reader,read,mono,server,request,context,hints
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, String>>, ServerHttpRequest> toFormData();1493894391;Return a {@code BodyExtractor} that reads form data into a {@link MultiValueMap}._@return a {@code BodyExtractor} that reads form data;public static BodyExtractor<Mono<MultiValueMap<String, String>>, ServerHttpRequest> toFormData() {_		return (serverRequest, context) -> {_			HttpMessageReader<MultiValueMap<String, String>> messageReader =_					messageReader(FORM_MAP_TYPE, MediaType.APPLICATION_FORM_URLENCODED, context)__			return context.serverResponse()_					.map(serverResponse -> messageReader.readMono(FORM_MAP_TYPE, FORM_MAP_TYPE, serverRequest, serverResponse, context.hints()))_					.orElseGet(() -> messageReader.readMono(FORM_MAP_TYPE, serverRequest, context.hints()))__		}__	};return,a,code,body,extractor,that,reads,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,form,data;public,static,body,extractor,mono,multi,value,map,string,string,server,http,request,to,form,data,return,server,request,context,http,message,reader,multi,value,map,string,string,message,reader,message,reader,media,type,context,return,context,server,response,map,server,response,message,reader,read,mono,server,request,server,response,context,hints,or,else,get,message,reader,read,mono,server,request,context,hints
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, String>>, ServerHttpRequest> toFormData();1495626483;Return a {@code BodyExtractor} that reads form data into a {@link MultiValueMap}._@return a {@code BodyExtractor} that reads form data;public static BodyExtractor<Mono<MultiValueMap<String, String>>, ServerHttpRequest> toFormData() {_		return (serverRequest, context) -> {_			HttpMessageReader<MultiValueMap<String, String>> messageReader =_					messageReader(FORM_MAP_TYPE, MediaType.APPLICATION_FORM_URLENCODED, context)__			return context.serverResponse()_					.map(serverResponse -> messageReader.readMono(FORM_MAP_TYPE, FORM_MAP_TYPE, serverRequest, serverResponse, context.hints()))_					.orElseGet(() -> messageReader.readMono(FORM_MAP_TYPE, serverRequest, context.hints()))__		}__	};return,a,code,body,extractor,that,reads,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,form,data;public,static,body,extractor,mono,multi,value,map,string,string,server,http,request,to,form,data,return,server,request,context,http,message,reader,multi,value,map,string,string,message,reader,message,reader,media,type,context,return,context,server,response,map,server,response,message,reader,read,mono,server,request,server,response,context,hints,or,else,get,message,reader,read,mono,server,request,context,hints
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, String>>, ServerHttpRequest> toFormData();1497007755;Return a {@code BodyExtractor} that reads form data into a {@link MultiValueMap}._@return a {@code BodyExtractor} that reads form data;public static BodyExtractor<Mono<MultiValueMap<String, String>>, ServerHttpRequest> toFormData() {_		return (serverRequest, context) -> {_			HttpMessageReader<MultiValueMap<String, String>> messageReader =_					messageReader(FORM_MAP_TYPE, MediaType.APPLICATION_FORM_URLENCODED, context)__			return context.serverResponse()_					.map(serverResponse -> messageReader.readMono(FORM_MAP_TYPE, FORM_MAP_TYPE, serverRequest, serverResponse, context.hints()))_					.orElseGet(() -> messageReader.readMono(FORM_MAP_TYPE, serverRequest, context.hints()))__		}__	};return,a,code,body,extractor,that,reads,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,form,data;public,static,body,extractor,mono,multi,value,map,string,string,server,http,request,to,form,data,return,server,request,context,http,message,reader,multi,value,map,string,string,message,reader,message,reader,media,type,context,return,context,server,response,map,server,response,message,reader,read,mono,server,request,server,response,context,hints,or,else,get,message,reader,read,mono,server,request,context,hints
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, String>>, ServerHttpRequest> toFormData();1497969037;Return a {@code BodyExtractor} that reads form data into a {@link MultiValueMap}._@return a {@code BodyExtractor} that reads form data;public static BodyExtractor<Mono<MultiValueMap<String, String>>, ServerHttpRequest> toFormData() {_		return (serverRequest, context) -> {_			HttpMessageReader<MultiValueMap<String, String>> messageReader =_					messageReader(FORM_MAP_TYPE, MediaType.APPLICATION_FORM_URLENCODED, context)__			return context.serverResponse()_					.map(serverResponse -> messageReader.readMono(FORM_MAP_TYPE, FORM_MAP_TYPE, serverRequest, serverResponse, context.hints()))_					.orElseGet(() -> messageReader.readMono(FORM_MAP_TYPE, serverRequest, context.hints()))__		}__	};return,a,code,body,extractor,that,reads,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,form,data;public,static,body,extractor,mono,multi,value,map,string,string,server,http,request,to,form,data,return,server,request,context,http,message,reader,multi,value,map,string,string,message,reader,message,reader,media,type,context,return,context,server,response,map,server,response,message,reader,read,mono,server,request,server,response,context,hints,or,else,get,message,reader,read,mono,server,request,context,hints
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, String>>, ServerHttpRequest> toFormData();1497969249;Return a {@code BodyExtractor} that reads form data into a {@link MultiValueMap}._@return a {@code BodyExtractor} that reads form data;public static BodyExtractor<Mono<MultiValueMap<String, String>>, ServerHttpRequest> toFormData() {_		return (serverRequest, context) -> {_			HttpMessageReader<MultiValueMap<String, String>> messageReader =_					messageReader(FORM_MAP_TYPE, MediaType.APPLICATION_FORM_URLENCODED, context)__			return context.serverResponse()_					.map(serverResponse -> messageReader.readMono(FORM_MAP_TYPE, FORM_MAP_TYPE, serverRequest, serverResponse, context.hints()))_					.orElseGet(() -> messageReader.readMono(FORM_MAP_TYPE, serverRequest, context.hints()))__		}__	};return,a,code,body,extractor,that,reads,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,form,data;public,static,body,extractor,mono,multi,value,map,string,string,server,http,request,to,form,data,return,server,request,context,http,message,reader,multi,value,map,string,string,message,reader,message,reader,media,type,context,return,context,server,response,map,server,response,message,reader,read,mono,server,request,server,response,context,hints,or,else,get,message,reader,read,mono,server,request,context,hints
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, String>>, ServerHttpRequest> toFormData();1498758448;Return a {@code BodyExtractor} that reads form data into a {@link MultiValueMap}._@return a {@code BodyExtractor} that reads form data;public static BodyExtractor<Mono<MultiValueMap<String, String>>, ServerHttpRequest> toFormData() {_		return (serverRequest, context) -> {_			HttpMessageReader<MultiValueMap<String, String>> messageReader =_					messageReader(FORM_MAP_TYPE, MediaType.APPLICATION_FORM_URLENCODED, context)__			return context.serverResponse()_					.map(serverResponse -> messageReader.readMono(FORM_MAP_TYPE, FORM_MAP_TYPE, serverRequest, serverResponse, context.hints()))_					.orElseGet(() -> messageReader.readMono(FORM_MAP_TYPE, serverRequest, context.hints()))__		}__	};return,a,code,body,extractor,that,reads,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,form,data;public,static,body,extractor,mono,multi,value,map,string,string,server,http,request,to,form,data,return,server,request,context,http,message,reader,multi,value,map,string,string,message,reader,message,reader,media,type,context,return,context,server,response,map,server,response,message,reader,read,mono,server,request,server,response,context,hints,or,else,get,message,reader,read,mono,server,request,context,hints
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, String>>, ServerHttpRequest> toFormData();1500035922;Return a {@code BodyExtractor} that reads form data into a {@link MultiValueMap}._@return a {@code BodyExtractor} that reads form data;public static BodyExtractor<Mono<MultiValueMap<String, String>>, ServerHttpRequest> toFormData() {_		return (serverRequest, context) -> {_			HttpMessageReader<MultiValueMap<String, String>> messageReader =_					messageReader(FORM_MAP_TYPE, MediaType.APPLICATION_FORM_URLENCODED, context)__			return context.serverResponse()_					.map(serverResponse -> messageReader.readMono(FORM_MAP_TYPE, FORM_MAP_TYPE, serverRequest, serverResponse, context.hints()))_					.orElseGet(() -> messageReader.readMono(FORM_MAP_TYPE, serverRequest, context.hints()))__		}__	};return,a,code,body,extractor,that,reads,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,form,data;public,static,body,extractor,mono,multi,value,map,string,string,server,http,request,to,form,data,return,server,request,context,http,message,reader,multi,value,map,string,string,message,reader,message,reader,media,type,context,return,context,server,response,map,server,response,message,reader,read,mono,server,request,server,response,context,hints,or,else,get,message,reader,read,mono,server,request,context,hints
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, String>>, ServerHttpRequest> toFormData();1508532146;Return a {@code BodyExtractor} that reads form data into a {@link MultiValueMap}._@return a {@code BodyExtractor} that reads form data;public static BodyExtractor<Mono<MultiValueMap<String, String>>, ServerHttpRequest> toFormData() {_		return (request, context) -> {_			ResolvableType type = FORM_MAP_TYPE__			HttpMessageReader<MultiValueMap<String, String>> reader =_					messageReader(type, MediaType.APPLICATION_FORM_URLENCODED, context)__			return context.serverResponse()_					.map(response -> reader.readMono(type, type, request, response, context.hints()))_					.orElseGet(() -> reader.readMono(type, request, context.hints()))__		}__	};return,a,code,body,extractor,that,reads,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,form,data;public,static,body,extractor,mono,multi,value,map,string,string,server,http,request,to,form,data,return,request,context,resolvable,type,type,http,message,reader,multi,value,map,string,string,reader,message,reader,type,media,type,context,return,context,server,response,map,response,reader,read,mono,type,type,request,response,context,hints,or,else,get,reader,read,mono,type,request,context,hints
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, String>>, ServerHttpRequest> toFormData();1522103912;Return a {@code BodyExtractor} that reads form data into a {@link MultiValueMap}._@return a {@code BodyExtractor} that reads form data;public static BodyExtractor<Mono<MultiValueMap<String, String>>, ServerHttpRequest> toFormData() {_		return (request, context) -> {_			ResolvableType type = FORM_MAP_TYPE__			HttpMessageReader<MultiValueMap<String, String>> reader =_					messageReader(type, MediaType.APPLICATION_FORM_URLENCODED, context)__			return context.serverResponse()_					.map(response -> reader.readMono(type, type, request, response, context.hints()))_					.orElseGet(() -> reader.readMono(type, request, context.hints()))__		}__	};return,a,code,body,extractor,that,reads,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,form,data;public,static,body,extractor,mono,multi,value,map,string,string,server,http,request,to,form,data,return,request,context,resolvable,type,type,http,message,reader,multi,value,map,string,string,reader,message,reader,type,media,type,context,return,context,server,response,map,response,reader,read,mono,type,type,request,response,context,hints,or,else,get,reader,read,mono,type,request,context,hints
BodyExtractors -> public static BodyExtractor<Mono<MultiValueMap<String, String>>, ServerHttpRequest> toFormData();1526354196;Return a {@code BodyExtractor} that reads form data into a {@link MultiValueMap}._@return a {@code BodyExtractor} that reads form data;public static BodyExtractor<Mono<MultiValueMap<String, String>>, ServerHttpRequest> toFormData() {_		return (request, context) -> {_			ResolvableType type = FORM_MAP_TYPE__			HttpMessageReader<MultiValueMap<String, String>> reader =_					messageReader(type, MediaType.APPLICATION_FORM_URLENCODED, context)__			return context.serverResponse()_					.map(response -> reader.readMono(type, type, request, response, context.hints()))_					.orElseGet(() -> reader.readMono(type, request, context.hints()))__		}__	};return,a,code,body,extractor,that,reads,form,data,into,a,link,multi,value,map,return,a,code,body,extractor,that,reads,form,data;public,static,body,extractor,mono,multi,value,map,string,string,server,http,request,to,form,data,return,request,context,resolvable,type,type,http,message,reader,multi,value,map,string,string,reader,message,reader,type,media,type,context,return,context,server,response,map,response,reader,read,mono,type,type,request,response,context,hints,or,else,get,reader,read,mono,type,request,context,hints
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(ResolvableType elementType);1485986572;Return a {@code BodyExtractor} that reads into a Reactor {@link Flux}._@param elementType the type of element in the {@code Flux}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(ResolvableType elementType) {_		Assert.notNull(elementType, "'elementType' must not be null")__		return (inputMessage, context) -> readWithMessageReaders(inputMessage, context,_				elementType,_				reader -> reader.read(elementType, inputMessage, context.hints()),_				Flux::error)__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,flux,param,element,type,the,type,of,element,in,the,code,flux,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,resolvable,type,element,type,assert,not,null,element,type,element,type,must,not,be,null,return,input,message,context,read,with,message,readers,input,message,context,element,type,reader,reader,read,element,type,input,message,context,hints,flux,error
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(ResolvableType elementType);1486590418;Return a {@code BodyExtractor} that reads into a Reactor {@link Flux}._@param elementType the type of element in the {@code Flux}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(ResolvableType elementType) {_		Assert.notNull(elementType, "'elementType' must not be null")__		return (inputMessage, context) -> readWithMessageReaders(inputMessage, context,_				elementType,_				reader -> reader.read(elementType, inputMessage, context.hints()),_				Flux::error)__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,flux,param,element,type,the,type,of,element,in,the,code,flux,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,resolvable,type,element,type,assert,not,null,element,type,element,type,must,not,be,null,return,input,message,context,read,with,message,readers,input,message,context,element,type,reader,reader,read,element,type,input,message,context,hints,flux,error
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(ResolvableType elementType);1486657400;Return a {@code BodyExtractor} that reads into a Reactor {@link Flux}._@param elementType the type of element in the {@code Flux}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(ResolvableType elementType) {_		Assert.notNull(elementType, "'elementType' must not be null")__		return (inputMessage, context) -> readWithMessageReaders(inputMessage, context,_				elementType,_				reader -> reader.read(elementType, inputMessage, context.hints()),_				Flux::error)__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,flux,param,element,type,the,type,of,element,in,the,code,flux,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,resolvable,type,element,type,assert,not,null,element,type,element,type,must,not,be,null,return,input,message,context,read,with,message,readers,input,message,context,element,type,reader,reader,read,element,type,input,message,context,hints,flux,error
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(ResolvableType elementType);1487687241;Return a {@code BodyExtractor} that reads into a Reactor {@link Flux}._@param elementType the type of element in the {@code Flux}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(ResolvableType elementType) {_		Assert.notNull(elementType, "'elementType' must not be null")__		return (inputMessage, context) -> readWithMessageReaders(inputMessage, context,_				elementType,_				reader -> reader.read(elementType, inputMessage, context.hints()),_				Flux::error)__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,flux,param,element,type,the,type,of,element,in,the,code,flux,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,resolvable,type,element,type,assert,not,null,element,type,element,type,must,not,be,null,return,input,message,context,read,with,message,readers,input,message,context,element,type,reader,reader,read,element,type,input,message,context,hints,flux,error
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(ResolvableType elementType);1491385016;Return a {@code BodyExtractor} that reads into a Reactor {@link Flux}._@param elementType the type of element in the {@code Flux}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(ResolvableType elementType) {_		Assert.notNull(elementType, "'elementType' must not be null")__		return (inputMessage, context) -> readWithMessageReaders(inputMessage, context,_				elementType,_				reader -> {_					Optional<ServerHttpResponse> serverResponse = context.serverResponse()__					if (serverResponse.isPresent() && inputMessage instanceof ServerHttpRequest) {_						return reader.read(elementType, elementType, (ServerHttpRequest) inputMessage,_								serverResponse.get(), context.hints())__					}_					else {_						return reader.read(elementType, inputMessage, context.hints())__					}_				},_				Flux::error)__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,flux,param,element,type,the,type,of,element,in,the,code,flux,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,resolvable,type,element,type,assert,not,null,element,type,element,type,must,not,be,null,return,input,message,context,read,with,message,readers,input,message,context,element,type,reader,optional,server,http,response,server,response,context,server,response,if,server,response,is,present,input,message,instanceof,server,http,request,return,reader,read,element,type,element,type,server,http,request,input,message,server,response,get,context,hints,else,return,reader,read,element,type,input,message,context,hints,flux,error
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(ResolvableType elementType);1493390543;Return a {@code BodyExtractor} that reads into a Reactor {@link Flux}._@param elementType the type of element in the {@code Flux}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(ResolvableType elementType) {_		Assert.notNull(elementType, "'elementType' must not be null")__		return (inputMessage, context) -> readWithMessageReaders(inputMessage, context,_				elementType,_				reader -> {_					Optional<ServerHttpResponse> serverResponse = context.serverResponse()__					if (serverResponse.isPresent() && inputMessage instanceof ServerHttpRequest) {_						return reader.read(elementType, elementType, (ServerHttpRequest) inputMessage,_								serverResponse.get(), context.hints())__					}_					else {_						return reader.read(elementType, inputMessage, context.hints())__					}_				},_				Flux::error)__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,flux,param,element,type,the,type,of,element,in,the,code,flux,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,resolvable,type,element,type,assert,not,null,element,type,element,type,must,not,be,null,return,input,message,context,read,with,message,readers,input,message,context,element,type,reader,optional,server,http,response,server,response,context,server,response,if,server,response,is,present,input,message,instanceof,server,http,request,return,reader,read,element,type,element,type,server,http,request,input,message,server,response,get,context,hints,else,return,reader,read,element,type,input,message,context,hints,flux,error
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(ResolvableType elementType);1493676008;Return a {@code BodyExtractor} that reads into a Reactor {@link Flux}._@param elementType the type of element in the {@code Flux}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(ResolvableType elementType) {_		Assert.notNull(elementType, "'elementType' must not be null")__		return (inputMessage, context) -> readWithMessageReaders(inputMessage, context,_				elementType,_				reader -> {_					Optional<ServerHttpResponse> serverResponse = context.serverResponse()__					if (serverResponse.isPresent() && inputMessage instanceof ServerHttpRequest) {_						return reader.read(elementType, elementType, (ServerHttpRequest) inputMessage,_								serverResponse.get(), context.hints())__					}_					else {_						return reader.read(elementType, inputMessage, context.hints())__					}_				},_				Flux::error)__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,flux,param,element,type,the,type,of,element,in,the,code,flux,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,resolvable,type,element,type,assert,not,null,element,type,element,type,must,not,be,null,return,input,message,context,read,with,message,readers,input,message,context,element,type,reader,optional,server,http,response,server,response,context,server,response,if,server,response,is,present,input,message,instanceof,server,http,request,return,reader,read,element,type,element,type,server,http,request,input,message,server,response,get,context,hints,else,return,reader,read,element,type,input,message,context,hints,flux,error
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(ResolvableType elementType);1493894391;Return a {@code BodyExtractor} that reads into a Reactor {@link Flux}._@param elementType the type of element in the {@code Flux}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(ResolvableType elementType) {_		Assert.notNull(elementType, "'elementType' must not be null")__		return (inputMessage, context) -> readWithMessageReaders(inputMessage, context,_				elementType,_				reader -> {_					Optional<ServerHttpResponse> serverResponse = context.serverResponse()__					if (serverResponse.isPresent() && inputMessage instanceof ServerHttpRequest) {_						return reader.read(elementType, elementType, (ServerHttpRequest) inputMessage,_								serverResponse.get(), context.hints())__					}_					else {_						return reader.read(elementType, inputMessage, context.hints())__					}_				},_				Flux::error)__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,flux,param,element,type,the,type,of,element,in,the,code,flux,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,resolvable,type,element,type,assert,not,null,element,type,element,type,must,not,be,null,return,input,message,context,read,with,message,readers,input,message,context,element,type,reader,optional,server,http,response,server,response,context,server,response,if,server,response,is,present,input,message,instanceof,server,http,request,return,reader,read,element,type,element,type,server,http,request,input,message,server,response,get,context,hints,else,return,reader,read,element,type,input,message,context,hints,flux,error
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(ResolvableType elementType);1495626483;Return a {@code BodyExtractor} that reads into a Reactor {@link Flux}._@param elementType the type of element in the {@code Flux}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(ResolvableType elementType) {_		Assert.notNull(elementType, "'elementType' must not be null")__		return (inputMessage, context) -> readWithMessageReaders(inputMessage, context,_				elementType,_				reader -> {_					Optional<ServerHttpResponse> serverResponse = context.serverResponse()__					if (serverResponse.isPresent() && inputMessage instanceof ServerHttpRequest) {_						return reader.read(elementType, elementType, (ServerHttpRequest) inputMessage,_								serverResponse.get(), context.hints())__					}_					else {_						return reader.read(elementType, inputMessage, context.hints())__					}_				},_				Flux::error)__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,flux,param,element,type,the,type,of,element,in,the,code,flux,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,resolvable,type,element,type,assert,not,null,element,type,element,type,must,not,be,null,return,input,message,context,read,with,message,readers,input,message,context,element,type,reader,optional,server,http,response,server,response,context,server,response,if,server,response,is,present,input,message,instanceof,server,http,request,return,reader,read,element,type,element,type,server,http,request,input,message,server,response,get,context,hints,else,return,reader,read,element,type,input,message,context,hints,flux,error
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass);1485986572;Return a {@code BodyExtractor} that reads into a Reactor {@link Flux}._@param elementClass the class of element in the {@code Flux}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass) {_		Assert.notNull(elementClass, "'elementClass' must not be null")__		return toFlux(ResolvableType.forClass(elementClass))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,flux,param,element,class,the,class,of,element,in,the,code,flux,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,class,extends,t,element,class,assert,not,null,element,class,element,class,must,not,be,null,return,to,flux,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass);1486590418;Return a {@code BodyExtractor} that reads into a Reactor {@link Flux}._@param elementClass the class of element in the {@code Flux}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass) {_		Assert.notNull(elementClass, "'elementClass' must not be null")__		return toFlux(ResolvableType.forClass(elementClass))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,flux,param,element,class,the,class,of,element,in,the,code,flux,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,class,extends,t,element,class,assert,not,null,element,class,element,class,must,not,be,null,return,to,flux,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass);1486657400;Return a {@code BodyExtractor} that reads into a Reactor {@link Flux}._@param elementClass the class of element in the {@code Flux}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass) {_		Assert.notNull(elementClass, "'elementClass' must not be null")__		return toFlux(ResolvableType.forClass(elementClass))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,flux,param,element,class,the,class,of,element,in,the,code,flux,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,class,extends,t,element,class,assert,not,null,element,class,element,class,must,not,be,null,return,to,flux,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass);1487687241;Return a {@code BodyExtractor} that reads into a Reactor {@link Flux}._@param elementClass the class of element in the {@code Flux}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass) {_		Assert.notNull(elementClass, "'elementClass' must not be null")__		return toFlux(ResolvableType.forClass(elementClass))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,flux,param,element,class,the,class,of,element,in,the,code,flux,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,class,extends,t,element,class,assert,not,null,element,class,element,class,must,not,be,null,return,to,flux,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass);1491385016;Return a {@code BodyExtractor} that reads into a Reactor {@link Flux}._@param elementClass the class of element in the {@code Flux}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass) {_		Assert.notNull(elementClass, "'elementClass' must not be null")__		return toFlux(ResolvableType.forClass(elementClass))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,flux,param,element,class,the,class,of,element,in,the,code,flux,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,class,extends,t,element,class,assert,not,null,element,class,element,class,must,not,be,null,return,to,flux,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass);1493390543;Return a {@code BodyExtractor} that reads into a Reactor {@link Flux}._@param elementClass the class of element in the {@code Flux}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass) {_		Assert.notNull(elementClass, "'elementClass' must not be null")__		return toFlux(ResolvableType.forClass(elementClass))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,flux,param,element,class,the,class,of,element,in,the,code,flux,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,class,extends,t,element,class,assert,not,null,element,class,element,class,must,not,be,null,return,to,flux,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass);1493676008;Return a {@code BodyExtractor} that reads into a Reactor {@link Flux}._@param elementClass the class of element in the {@code Flux}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass) {_		Assert.notNull(elementClass, "'elementClass' must not be null")__		return toFlux(ResolvableType.forClass(elementClass))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,flux,param,element,class,the,class,of,element,in,the,code,flux,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,class,extends,t,element,class,assert,not,null,element,class,element,class,must,not,be,null,return,to,flux,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass);1493894391;Return a {@code BodyExtractor} that reads into a Reactor {@link Flux}._@param elementClass the class of element in the {@code Flux}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass) {_		Assert.notNull(elementClass, "'elementClass' must not be null")__		return toFlux(ResolvableType.forClass(elementClass))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,flux,param,element,class,the,class,of,element,in,the,code,flux,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,class,extends,t,element,class,assert,not,null,element,class,element,class,must,not,be,null,return,to,flux,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass);1495626483;Return a {@code BodyExtractor} that reads into a Reactor {@link Flux}._@param elementClass the class of element in the {@code Flux}_@param <T> the element type_@return a {@code BodyExtractor} that reads a mono;public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass) {_		Assert.notNull(elementClass, "'elementClass' must not be null")__		return toFlux(ResolvableType.forClass(elementClass))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,flux,param,element,class,the,class,of,element,in,the,code,flux,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,mono;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,class,extends,t,element,class,assert,not,null,element,class,element,class,must,not,be,null,return,to,flux,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass);1497007755;Return a {@code BodyExtractor} that reads into a Reactor {@link Flux}._@param elementClass the class of element in the {@code Flux}_@param <T> the element type_@return a {@code BodyExtractor} that reads a flux;public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass) {_		Assert.notNull(elementClass, "'elementClass' must not be null")__		return toFlux(ResolvableType.forClass(elementClass))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,flux,param,element,class,the,class,of,element,in,the,code,flux,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,flux;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,class,extends,t,element,class,assert,not,null,element,class,element,class,must,not,be,null,return,to,flux,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass);1497969037;Return a {@code BodyExtractor} that reads into a Reactor {@link Flux}._@param elementClass the class of element in the {@code Flux}_@param <T> the element type_@return a {@code BodyExtractor} that reads a flux;public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass) {_		Assert.notNull(elementClass, "'elementClass' must not be null")__		return toFlux(ResolvableType.forClass(elementClass))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,flux,param,element,class,the,class,of,element,in,the,code,flux,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,flux;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,class,extends,t,element,class,assert,not,null,element,class,element,class,must,not,be,null,return,to,flux,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass);1497969249;Return a {@code BodyExtractor} that reads into a Reactor {@link Flux}._@param elementClass the class of element in the {@code Flux}_@param <T> the element type_@return a {@code BodyExtractor} that reads a flux;public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass) {_		Assert.notNull(elementClass, "'elementClass' must not be null")__		return toFlux(ResolvableType.forClass(elementClass))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,flux,param,element,class,the,class,of,element,in,the,code,flux,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,flux;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,class,extends,t,element,class,assert,not,null,element,class,element,class,must,not,be,null,return,to,flux,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass);1498758448;Return a {@code BodyExtractor} that reads into a Reactor {@link Flux}._@param elementClass the class of element in the {@code Flux}_@param <T> the element type_@return a {@code BodyExtractor} that reads a flux;public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass) {_		Assert.notNull(elementClass, "'elementClass' must not be null")__		return toFlux(ResolvableType.forClass(elementClass))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,flux,param,element,class,the,class,of,element,in,the,code,flux,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,flux;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,class,extends,t,element,class,assert,not,null,element,class,element,class,must,not,be,null,return,to,flux,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass);1500035922;Return a {@code BodyExtractor} that reads into a Reactor {@link Flux}._@param elementClass the class of element in the {@code Flux}_@param <T> the element type_@return a {@code BodyExtractor} that reads a flux;public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass) {_		Assert.notNull(elementClass, "'elementClass' must not be null")__		return toFlux(ResolvableType.forClass(elementClass))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,flux,param,element,class,the,class,of,element,in,the,code,flux,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,flux;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,class,extends,t,element,class,assert,not,null,element,class,element,class,must,not,be,null,return,to,flux,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass);1508532146;Return a {@code BodyExtractor} that reads into a Reactor {@link Flux}._@param elementClass the class of element in the {@code Flux}_@param <T> the element type_@return a {@code BodyExtractor} that reads a flux;public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass) {_		Assert.notNull(elementClass, "'elementClass' must not be null")__		return toFlux(ResolvableType.forClass(elementClass))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,flux,param,element,class,the,class,of,element,in,the,code,flux,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,flux;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,class,extends,t,element,class,assert,not,null,element,class,element,class,must,not,be,null,return,to,flux,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass);1522103912;Return a {@code BodyExtractor} that reads into a Reactor {@link Flux}._@param elementClass the class of element in the {@code Flux}_@param <T> the element type_@return a {@code BodyExtractor} that reads a flux;public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass) {_		return toFlux(ResolvableType.forClass(elementClass))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,flux,param,element,class,the,class,of,element,in,the,code,flux,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,flux;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,class,extends,t,element,class,return,to,flux,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass);1526354196;Return a {@code BodyExtractor} that reads into a Reactor {@link Flux}._@param elementClass the class of element in the {@code Flux}_@param <T> the element type_@return a {@code BodyExtractor} that reads a flux;public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass) {_		return toFlux(ResolvableType.forClass(elementClass))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,flux,param,element,class,the,class,of,element,in,the,code,flux,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,flux;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,class,extends,t,element,class,return,to,flux,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass);1526481710;Return a {@code BodyExtractor} that reads into a Reactor {@link Flux}._@param elementClass the class of element in the {@code Flux}_@param <T> the element type_@return a {@code BodyExtractor} that reads a flux;public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass) {_		return toFlux(ResolvableType.forClass(elementClass))__	};return,a,code,body,extractor,that,reads,into,a,reactor,link,flux,param,element,class,the,class,of,element,in,the,code,flux,param,t,the,element,type,return,a,code,body,extractor,that,reads,a,flux;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,class,extends,t,element,class,return,to,flux,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass);1527269520;Extractor to decode the input content into {@code Flux<T>}._@param elementClass the class of the element type to decode to_@param <T> the element type to decode to_@return {@code BodyExtractor} for {@code Flux<T>};public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass) {_		return toFlux(ResolvableType.forClass(elementClass))__	};extractor,to,decode,the,input,content,into,code,flux,t,param,element,class,the,class,of,the,element,type,to,decode,to,param,t,the,element,type,to,decode,to,return,code,body,extractor,for,code,flux,t;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,class,extends,t,element,class,return,to,flux,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass);1530174524;Extractor to decode the input content into {@code Flux<T>}._@param elementClass the class of the element type to decode to_@param <T> the element type to decode to_@return {@code BodyExtractor} for {@code Flux<T>};public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass) {_		return toFlux(ResolvableType.forClass(elementClass))__	};extractor,to,decode,the,input,content,into,code,flux,t,param,element,class,the,class,of,the,element,type,to,decode,to,param,t,the,element,type,to,decode,to,return,code,body,extractor,for,code,flux,t;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,class,extends,t,element,class,return,to,flux,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass);1532088094;Extractor to decode the input content into {@code Flux<T>}._@param elementClass the class of the element type to decode to_@param <T> the element type to decode to_@return {@code BodyExtractor} for {@code Flux<T>};public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass) {_		return toFlux(ResolvableType.forClass(elementClass))__	};extractor,to,decode,the,input,content,into,code,flux,t,param,element,class,the,class,of,the,element,type,to,decode,to,param,t,the,element,type,to,decode,to,return,code,body,extractor,for,code,flux,t;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,class,extends,t,element,class,return,to,flux,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass);1537262433;Extractor to decode the input content into {@code Flux<T>}._@param elementClass the class of the element type to decode to_@param <T> the element type to decode to_@return {@code BodyExtractor} for {@code Flux<T>};public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass) {_		return toFlux(ResolvableType.forClass(elementClass))__	};extractor,to,decode,the,input,content,into,code,flux,t,param,element,class,the,class,of,the,element,type,to,decode,to,param,t,the,element,type,to,decode,to,return,code,body,extractor,for,code,flux,t;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,class,extends,t,element,class,return,to,flux,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass);1541736828;Extractor to decode the input content into {@code Flux<T>}._@param elementClass the class of the element type to decode to_@param <T> the element type to decode to_@return {@code BodyExtractor} for {@code Flux<T>};public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass) {_		return toFlux(ResolvableType.forClass(elementClass))__	};extractor,to,decode,the,input,content,into,code,flux,t,param,element,class,the,class,of,the,element,type,to,decode,to,param,t,the,element,type,to,decode,to,return,code,body,extractor,for,code,flux,t;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,class,extends,t,element,class,return,to,flux,resolvable,type,for,class,element,class
BodyExtractors -> public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass);1541798163;Extractor to decode the input content into {@code Flux<T>}._@param elementClass the class of the element type to decode to_@param <T> the element type to decode to_@return {@code BodyExtractor} for {@code Flux<T>};public static <T> BodyExtractor<Flux<T>, ReactiveHttpInputMessage> toFlux(Class<? extends T> elementClass) {_		return toFlux(ResolvableType.forClass(elementClass))__	};extractor,to,decode,the,input,content,into,code,flux,t,param,element,class,the,class,of,the,element,type,to,decode,to,param,t,the,element,type,to,decode,to,return,code,body,extractor,for,code,flux,t;public,static,t,body,extractor,flux,t,reactive,http,input,message,to,flux,class,extends,t,element,class,return,to,flux,resolvable,type,for,class,element,class
BodyExtractors -> public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers();1485986572;Return a {@code BodyExtractor} that returns the body of the message as a {@link Flux} of_{@link DataBuffer}s._<p><strong>Note</strong> that the returned buffers should be released after usage by calling_{@link org.springframework.core.io.buffer.DataBufferUtils#release(DataBuffer)}_@return a {@code BodyExtractor} that returns the body_@see ReactiveHttpInputMessage#getBody();public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers() {_		return (inputMessage, context) -> inputMessage.getBody()__	};return,a,code,body,extractor,that,returns,the,body,of,the,message,as,a,link,flux,of,link,data,buffer,s,p,strong,note,strong,that,the,returned,buffers,should,be,released,after,usage,by,calling,link,org,springframework,core,io,buffer,data,buffer,utils,release,data,buffer,return,a,code,body,extractor,that,returns,the,body,see,reactive,http,input,message,get,body;public,static,body,extractor,flux,data,buffer,reactive,http,input,message,to,data,buffers,return,input,message,context,input,message,get,body
BodyExtractors -> public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers();1486590418;Return a {@code BodyExtractor} that returns the body of the message as a {@link Flux} of_{@link DataBuffer}s._<p><strong>Note</strong> that the returned buffers should be released after usage by calling_{@link org.springframework.core.io.buffer.DataBufferUtils#release(DataBuffer)}_@return a {@code BodyExtractor} that returns the body_@see ReactiveHttpInputMessage#getBody();public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers() {_		return (inputMessage, context) -> inputMessage.getBody()__	};return,a,code,body,extractor,that,returns,the,body,of,the,message,as,a,link,flux,of,link,data,buffer,s,p,strong,note,strong,that,the,returned,buffers,should,be,released,after,usage,by,calling,link,org,springframework,core,io,buffer,data,buffer,utils,release,data,buffer,return,a,code,body,extractor,that,returns,the,body,see,reactive,http,input,message,get,body;public,static,body,extractor,flux,data,buffer,reactive,http,input,message,to,data,buffers,return,input,message,context,input,message,get,body
BodyExtractors -> public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers();1486657400;Return a {@code BodyExtractor} that returns the body of the message as a {@link Flux} of_{@link DataBuffer}s._<p><strong>Note</strong> that the returned buffers should be released after usage by calling_{@link org.springframework.core.io.buffer.DataBufferUtils#release(DataBuffer)}_@return a {@code BodyExtractor} that returns the body_@see ReactiveHttpInputMessage#getBody();public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers() {_		return (inputMessage, context) -> inputMessage.getBody()__	};return,a,code,body,extractor,that,returns,the,body,of,the,message,as,a,link,flux,of,link,data,buffer,s,p,strong,note,strong,that,the,returned,buffers,should,be,released,after,usage,by,calling,link,org,springframework,core,io,buffer,data,buffer,utils,release,data,buffer,return,a,code,body,extractor,that,returns,the,body,see,reactive,http,input,message,get,body;public,static,body,extractor,flux,data,buffer,reactive,http,input,message,to,data,buffers,return,input,message,context,input,message,get,body
BodyExtractors -> public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers();1487687241;Return a {@code BodyExtractor} that returns the body of the message as a {@link Flux} of_{@link DataBuffer}s._<p><strong>Note</strong> that the returned buffers should be released after usage by calling_{@link org.springframework.core.io.buffer.DataBufferUtils#release(DataBuffer)}_@return a {@code BodyExtractor} that returns the body_@see ReactiveHttpInputMessage#getBody();public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers() {_		return (inputMessage, context) -> inputMessage.getBody()__	};return,a,code,body,extractor,that,returns,the,body,of,the,message,as,a,link,flux,of,link,data,buffer,s,p,strong,note,strong,that,the,returned,buffers,should,be,released,after,usage,by,calling,link,org,springframework,core,io,buffer,data,buffer,utils,release,data,buffer,return,a,code,body,extractor,that,returns,the,body,see,reactive,http,input,message,get,body;public,static,body,extractor,flux,data,buffer,reactive,http,input,message,to,data,buffers,return,input,message,context,input,message,get,body
BodyExtractors -> public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers();1491385016;Return a {@code BodyExtractor} that returns the body of the message as a {@link Flux} of_{@link DataBuffer}s._<p><strong>Note</strong> that the returned buffers should be released after usage by calling_{@link org.springframework.core.io.buffer.DataBufferUtils#release(DataBuffer)}_@return a {@code BodyExtractor} that returns the body_@see ReactiveHttpInputMessage#getBody();public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers() {_		return (inputMessage, context) -> inputMessage.getBody()__	};return,a,code,body,extractor,that,returns,the,body,of,the,message,as,a,link,flux,of,link,data,buffer,s,p,strong,note,strong,that,the,returned,buffers,should,be,released,after,usage,by,calling,link,org,springframework,core,io,buffer,data,buffer,utils,release,data,buffer,return,a,code,body,extractor,that,returns,the,body,see,reactive,http,input,message,get,body;public,static,body,extractor,flux,data,buffer,reactive,http,input,message,to,data,buffers,return,input,message,context,input,message,get,body
BodyExtractors -> public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers();1493390543;Return a {@code BodyExtractor} that returns the body of the message as a {@link Flux} of_{@link DataBuffer}s._<p><strong>Note</strong> that the returned buffers should be released after usage by calling_{@link org.springframework.core.io.buffer.DataBufferUtils#release(DataBuffer)}_@return a {@code BodyExtractor} that returns the body_@see ReactiveHttpInputMessage#getBody();public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers() {_		return (inputMessage, context) -> inputMessage.getBody()__	};return,a,code,body,extractor,that,returns,the,body,of,the,message,as,a,link,flux,of,link,data,buffer,s,p,strong,note,strong,that,the,returned,buffers,should,be,released,after,usage,by,calling,link,org,springframework,core,io,buffer,data,buffer,utils,release,data,buffer,return,a,code,body,extractor,that,returns,the,body,see,reactive,http,input,message,get,body;public,static,body,extractor,flux,data,buffer,reactive,http,input,message,to,data,buffers,return,input,message,context,input,message,get,body
BodyExtractors -> public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers();1493676008;Return a {@code BodyExtractor} that returns the body of the message as a {@link Flux} of_{@link DataBuffer}s._<p><strong>Note</strong> that the returned buffers should be released after usage by calling_{@link org.springframework.core.io.buffer.DataBufferUtils#release(DataBuffer)}_@return a {@code BodyExtractor} that returns the body_@see ReactiveHttpInputMessage#getBody();public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers() {_		return (inputMessage, context) -> inputMessage.getBody()__	};return,a,code,body,extractor,that,returns,the,body,of,the,message,as,a,link,flux,of,link,data,buffer,s,p,strong,note,strong,that,the,returned,buffers,should,be,released,after,usage,by,calling,link,org,springframework,core,io,buffer,data,buffer,utils,release,data,buffer,return,a,code,body,extractor,that,returns,the,body,see,reactive,http,input,message,get,body;public,static,body,extractor,flux,data,buffer,reactive,http,input,message,to,data,buffers,return,input,message,context,input,message,get,body
BodyExtractors -> public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers();1493894391;Return a {@code BodyExtractor} that returns the body of the message as a {@link Flux} of_{@link DataBuffer}s._<p><strong>Note</strong> that the returned buffers should be released after usage by calling_{@link org.springframework.core.io.buffer.DataBufferUtils#release(DataBuffer)}_@return a {@code BodyExtractor} that returns the body_@see ReactiveHttpInputMessage#getBody();public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers() {_		return (inputMessage, context) -> inputMessage.getBody()__	};return,a,code,body,extractor,that,returns,the,body,of,the,message,as,a,link,flux,of,link,data,buffer,s,p,strong,note,strong,that,the,returned,buffers,should,be,released,after,usage,by,calling,link,org,springframework,core,io,buffer,data,buffer,utils,release,data,buffer,return,a,code,body,extractor,that,returns,the,body,see,reactive,http,input,message,get,body;public,static,body,extractor,flux,data,buffer,reactive,http,input,message,to,data,buffers,return,input,message,context,input,message,get,body
BodyExtractors -> public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers();1495626483;Return a {@code BodyExtractor} that returns the body of the message as a {@link Flux} of_{@link DataBuffer}s._<p><strong>Note</strong> that the returned buffers should be released after usage by calling_{@link org.springframework.core.io.buffer.DataBufferUtils#release(DataBuffer)}_@return a {@code BodyExtractor} that returns the body_@see ReactiveHttpInputMessage#getBody();public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers() {_		return (inputMessage, context) -> inputMessage.getBody()__	};return,a,code,body,extractor,that,returns,the,body,of,the,message,as,a,link,flux,of,link,data,buffer,s,p,strong,note,strong,that,the,returned,buffers,should,be,released,after,usage,by,calling,link,org,springframework,core,io,buffer,data,buffer,utils,release,data,buffer,return,a,code,body,extractor,that,returns,the,body,see,reactive,http,input,message,get,body;public,static,body,extractor,flux,data,buffer,reactive,http,input,message,to,data,buffers,return,input,message,context,input,message,get,body
BodyExtractors -> public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers();1497007755;Return a {@code BodyExtractor} that returns the body of the message as a {@link Flux} of_{@link DataBuffer}s._<p><strong>Note</strong> that the returned buffers should be released after usage by calling_{@link org.springframework.core.io.buffer.DataBufferUtils#release(DataBuffer)}_@return a {@code BodyExtractor} that returns the body_@see ReactiveHttpInputMessage#getBody();public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers() {_		return (inputMessage, context) -> inputMessage.getBody()__	};return,a,code,body,extractor,that,returns,the,body,of,the,message,as,a,link,flux,of,link,data,buffer,s,p,strong,note,strong,that,the,returned,buffers,should,be,released,after,usage,by,calling,link,org,springframework,core,io,buffer,data,buffer,utils,release,data,buffer,return,a,code,body,extractor,that,returns,the,body,see,reactive,http,input,message,get,body;public,static,body,extractor,flux,data,buffer,reactive,http,input,message,to,data,buffers,return,input,message,context,input,message,get,body
BodyExtractors -> public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers();1497969037;Return a {@code BodyExtractor} that returns the body of the message as a {@link Flux} of_{@link DataBuffer}s._<p><strong>Note</strong> that the returned buffers should be released after usage by calling_{@link org.springframework.core.io.buffer.DataBufferUtils#release(DataBuffer)}_@return a {@code BodyExtractor} that returns the body_@see ReactiveHttpInputMessage#getBody();public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers() {_		return (inputMessage, context) -> inputMessage.getBody()__	};return,a,code,body,extractor,that,returns,the,body,of,the,message,as,a,link,flux,of,link,data,buffer,s,p,strong,note,strong,that,the,returned,buffers,should,be,released,after,usage,by,calling,link,org,springframework,core,io,buffer,data,buffer,utils,release,data,buffer,return,a,code,body,extractor,that,returns,the,body,see,reactive,http,input,message,get,body;public,static,body,extractor,flux,data,buffer,reactive,http,input,message,to,data,buffers,return,input,message,context,input,message,get,body
BodyExtractors -> public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers();1497969249;Return a {@code BodyExtractor} that returns the body of the message as a {@link Flux} of_{@link DataBuffer}s._<p><strong>Note</strong> that the returned buffers should be released after usage by calling_{@link org.springframework.core.io.buffer.DataBufferUtils#release(DataBuffer)}_@return a {@code BodyExtractor} that returns the body_@see ReactiveHttpInputMessage#getBody();public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers() {_		return (inputMessage, context) -> inputMessage.getBody()__	};return,a,code,body,extractor,that,returns,the,body,of,the,message,as,a,link,flux,of,link,data,buffer,s,p,strong,note,strong,that,the,returned,buffers,should,be,released,after,usage,by,calling,link,org,springframework,core,io,buffer,data,buffer,utils,release,data,buffer,return,a,code,body,extractor,that,returns,the,body,see,reactive,http,input,message,get,body;public,static,body,extractor,flux,data,buffer,reactive,http,input,message,to,data,buffers,return,input,message,context,input,message,get,body
BodyExtractors -> public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers();1498758448;Return a {@code BodyExtractor} that returns the body of the message as a {@link Flux} of_{@link DataBuffer}s._<p><strong>Note</strong> that the returned buffers should be released after usage by calling_{@link org.springframework.core.io.buffer.DataBufferUtils#release(DataBuffer)}_@return a {@code BodyExtractor} that returns the body_@see ReactiveHttpInputMessage#getBody();public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers() {_		return (inputMessage, context) -> inputMessage.getBody()__	};return,a,code,body,extractor,that,returns,the,body,of,the,message,as,a,link,flux,of,link,data,buffer,s,p,strong,note,strong,that,the,returned,buffers,should,be,released,after,usage,by,calling,link,org,springframework,core,io,buffer,data,buffer,utils,release,data,buffer,return,a,code,body,extractor,that,returns,the,body,see,reactive,http,input,message,get,body;public,static,body,extractor,flux,data,buffer,reactive,http,input,message,to,data,buffers,return,input,message,context,input,message,get,body
BodyExtractors -> public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers();1500035922;Return a {@code BodyExtractor} that returns the body of the message as a {@link Flux} of_{@link DataBuffer}s._<p><strong>Note</strong> that the returned buffers should be released after usage by calling_{@link org.springframework.core.io.buffer.DataBufferUtils#release(DataBuffer)}_@return a {@code BodyExtractor} that returns the body_@see ReactiveHttpInputMessage#getBody();public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers() {_		return (inputMessage, context) -> inputMessage.getBody()__	};return,a,code,body,extractor,that,returns,the,body,of,the,message,as,a,link,flux,of,link,data,buffer,s,p,strong,note,strong,that,the,returned,buffers,should,be,released,after,usage,by,calling,link,org,springframework,core,io,buffer,data,buffer,utils,release,data,buffer,return,a,code,body,extractor,that,returns,the,body,see,reactive,http,input,message,get,body;public,static,body,extractor,flux,data,buffer,reactive,http,input,message,to,data,buffers,return,input,message,context,input,message,get,body
BodyExtractors -> public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers();1508532146;Return a {@code BodyExtractor} that returns the body of the message as a {@link Flux} of_{@link DataBuffer}s._<p><strong>Note</strong> that the returned buffers should be released after usage by calling_{@link org.springframework.core.io.buffer.DataBufferUtils#release(DataBuffer)}_@return a {@code BodyExtractor} that returns the body_@see ReactiveHttpInputMessage#getBody();public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers() {_		return (inputMessage, context) -> inputMessage.getBody()__	};return,a,code,body,extractor,that,returns,the,body,of,the,message,as,a,link,flux,of,link,data,buffer,s,p,strong,note,strong,that,the,returned,buffers,should,be,released,after,usage,by,calling,link,org,springframework,core,io,buffer,data,buffer,utils,release,data,buffer,return,a,code,body,extractor,that,returns,the,body,see,reactive,http,input,message,get,body;public,static,body,extractor,flux,data,buffer,reactive,http,input,message,to,data,buffers,return,input,message,context,input,message,get,body
BodyExtractors -> public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers();1522103912;Return a {@code BodyExtractor} that returns the body of the message as a {@link Flux} of_{@link DataBuffer}s._<p><strong>Note</strong> that the returned buffers should be released after usage by calling_{@link org.springframework.core.io.buffer.DataBufferUtils#release(DataBuffer)}_@return a {@code BodyExtractor} that returns the body_@see ReactiveHttpInputMessage#getBody();public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers() {_		return (inputMessage, context) -> inputMessage.getBody()__	};return,a,code,body,extractor,that,returns,the,body,of,the,message,as,a,link,flux,of,link,data,buffer,s,p,strong,note,strong,that,the,returned,buffers,should,be,released,after,usage,by,calling,link,org,springframework,core,io,buffer,data,buffer,utils,release,data,buffer,return,a,code,body,extractor,that,returns,the,body,see,reactive,http,input,message,get,body;public,static,body,extractor,flux,data,buffer,reactive,http,input,message,to,data,buffers,return,input,message,context,input,message,get,body
BodyExtractors -> public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers();1526354196;Return a {@code BodyExtractor} that returns the body of the message as a {@link Flux} of_{@link DataBuffer}s._<p><strong>Note</strong> that the returned buffers should be released after usage by calling_{@link org.springframework.core.io.buffer.DataBufferUtils#release(DataBuffer)}_@return a {@code BodyExtractor} that returns the body_@see ReactiveHttpInputMessage#getBody();public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers() {_		return (inputMessage, context) -> inputMessage.getBody()__	};return,a,code,body,extractor,that,returns,the,body,of,the,message,as,a,link,flux,of,link,data,buffer,s,p,strong,note,strong,that,the,returned,buffers,should,be,released,after,usage,by,calling,link,org,springframework,core,io,buffer,data,buffer,utils,release,data,buffer,return,a,code,body,extractor,that,returns,the,body,see,reactive,http,input,message,get,body;public,static,body,extractor,flux,data,buffer,reactive,http,input,message,to,data,buffers,return,input,message,context,input,message,get,body
BodyExtractors -> public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers();1526481710;Return a {@code BodyExtractor} that returns the body of the message as a {@link Flux} of_{@link DataBuffer}s._<p><strong>Note</strong> that the returned buffers should be released after usage by calling_{@link org.springframework.core.io.buffer.DataBufferUtils#release(DataBuffer)}_@return a {@code BodyExtractor} that returns the body_@see ReactiveHttpInputMessage#getBody();public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers() {_		return (inputMessage, context) -> inputMessage.getBody()__	};return,a,code,body,extractor,that,returns,the,body,of,the,message,as,a,link,flux,of,link,data,buffer,s,p,strong,note,strong,that,the,returned,buffers,should,be,released,after,usage,by,calling,link,org,springframework,core,io,buffer,data,buffer,utils,release,data,buffer,return,a,code,body,extractor,that,returns,the,body,see,reactive,http,input,message,get,body;public,static,body,extractor,flux,data,buffer,reactive,http,input,message,to,data,buffers,return,input,message,context,input,message,get,body
BodyExtractors -> public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers();1527269520;Extractor that returns the raw {@link DataBuffer}s._<p><strong>Note:</strong> the data buffers should be_{@link org.springframework.core.io.buffer.DataBufferUtils#release(DataBuffer)_released} after being used._@return {@code BodyExtractor} for data buffers;public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers() {_		return (inputMessage, context) -> inputMessage.getBody()__	};extractor,that,returns,the,raw,link,data,buffer,s,p,strong,note,strong,the,data,buffers,should,be,link,org,springframework,core,io,buffer,data,buffer,utils,release,data,buffer,released,after,being,used,return,code,body,extractor,for,data,buffers;public,static,body,extractor,flux,data,buffer,reactive,http,input,message,to,data,buffers,return,input,message,context,input,message,get,body
BodyExtractors -> public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers();1530174524;Extractor that returns the raw {@link DataBuffer DataBuffers}._<p><strong>Note:</strong> the data buffers should be_{@link org.springframework.core.io.buffer.DataBufferUtils#release(DataBuffer)_released} after being used._@return {@code BodyExtractor} for data buffers;public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers() {_		return (inputMessage, context) -> inputMessage.getBody()__	};extractor,that,returns,the,raw,link,data,buffer,data,buffers,p,strong,note,strong,the,data,buffers,should,be,link,org,springframework,core,io,buffer,data,buffer,utils,release,data,buffer,released,after,being,used,return,code,body,extractor,for,data,buffers;public,static,body,extractor,flux,data,buffer,reactive,http,input,message,to,data,buffers,return,input,message,context,input,message,get,body
BodyExtractors -> public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers();1532088094;Extractor that returns the raw {@link DataBuffer DataBuffers}._<p><strong>Note:</strong> the data buffers should be_{@link org.springframework.core.io.buffer.DataBufferUtils#release(DataBuffer)_released} after being used._@return {@code BodyExtractor} for data buffers;public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers() {_		return (inputMessage, context) -> inputMessage.getBody()__	};extractor,that,returns,the,raw,link,data,buffer,data,buffers,p,strong,note,strong,the,data,buffers,should,be,link,org,springframework,core,io,buffer,data,buffer,utils,release,data,buffer,released,after,being,used,return,code,body,extractor,for,data,buffers;public,static,body,extractor,flux,data,buffer,reactive,http,input,message,to,data,buffers,return,input,message,context,input,message,get,body
BodyExtractors -> public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers();1537262433;Extractor that returns the raw {@link DataBuffer DataBuffers}._<p><strong>Note:</strong> the data buffers should be_{@link org.springframework.core.io.buffer.DataBufferUtils#release(DataBuffer)_released} after being used._@return {@code BodyExtractor} for data buffers;public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers() {_		return (inputMessage, context) -> inputMessage.getBody()__	};extractor,that,returns,the,raw,link,data,buffer,data,buffers,p,strong,note,strong,the,data,buffers,should,be,link,org,springframework,core,io,buffer,data,buffer,utils,release,data,buffer,released,after,being,used,return,code,body,extractor,for,data,buffers;public,static,body,extractor,flux,data,buffer,reactive,http,input,message,to,data,buffers,return,input,message,context,input,message,get,body
BodyExtractors -> public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers();1541736828;Extractor that returns the raw {@link DataBuffer DataBuffers}._<p><strong>Note:</strong> the data buffers should be_{@link org.springframework.core.io.buffer.DataBufferUtils#release(DataBuffer)_released} after being used._@return {@code BodyExtractor} for data buffers;public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers() {_		return (inputMessage, context) -> inputMessage.getBody()__	};extractor,that,returns,the,raw,link,data,buffer,data,buffers,p,strong,note,strong,the,data,buffers,should,be,link,org,springframework,core,io,buffer,data,buffer,utils,release,data,buffer,released,after,being,used,return,code,body,extractor,for,data,buffers;public,static,body,extractor,flux,data,buffer,reactive,http,input,message,to,data,buffers,return,input,message,context,input,message,get,body
BodyExtractors -> public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers();1541798163;Extractor that returns the raw {@link DataBuffer DataBuffers}._<p><strong>Note:</strong> the data buffers should be_{@link org.springframework.core.io.buffer.DataBufferUtils#release(DataBuffer)_released} after being used._@return {@code BodyExtractor} for data buffers;public static BodyExtractor<Flux<DataBuffer>, ReactiveHttpInputMessage> toDataBuffers() {_		return (inputMessage, context) -> inputMessage.getBody()__	};extractor,that,returns,the,raw,link,data,buffer,data,buffers,p,strong,note,strong,the,data,buffers,should,be,link,org,springframework,core,io,buffer,data,buffer,utils,release,data,buffer,released,after,being,used,return,code,body,extractor,for,data,buffers;public,static,body,extractor,flux,data,buffer,reactive,http,input,message,to,data,buffers,return,input,message,context,input,message,get,body
