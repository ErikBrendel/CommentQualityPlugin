commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the URL for the WebSocket endpoint.  */ ;/**  * Return the URL for the WebSocket endpoint.  */ public URI getUri() {     return this.uri. }
true;public;0;3;/**  * Return the handshake HTTP headers. Those are the request headers for a  * server session and the response headers for a client session.  */ ;/**  * Return the handshake HTTP headers. Those are the request headers for a  * server session and the response headers for a client session.  */ public HttpHeaders getHeaders() {     return this.headers. }
true;public;0;3;/**  * Return the principal associated with the handshake HTTP request.  */ ;/**  * Return the principal associated with the handshake HTTP request.  */ public Mono<Principal> getPrincipal() {     return this.principalMono. }
true;public;0;4;/**  * The sub-protocol negotiated at handshake time, or {@code null} if none.  * @see <a href="https://tools.ietf.org/html/rfc6455#section-1.9">  * https://tools.ietf.org/html/rfc6455#section-1.9</a>  */ ;/**  * The sub-protocol negotiated at handshake time, or {@code null} if none.  * @see <a href="https://tools.ietf.org/html/rfc6455#section-1.9">  * https://tools.ietf.org/html/rfc6455#section-1.9</a>  */ @Nullable public String getSubProtocol() {     return this.protocol. }
true;public;0;4;/**  * For a server-side session this is the remote address where the handshake  * request came from.  * @since 5.1  */ ;/**  * For a server-side session this is the remote address where the handshake  * request came from.  * @since 5.1  */ @Nullable public InetSocketAddress getRemoteAddress() {     return this.remoteAddress. }
true;public;0;3;/**  * Attributes extracted from the handshake request to be added to the  * WebSocket session.  * @since 5.1  */ ;/**  * Attributes extracted from the handshake request to be added to the  * WebSocket session.  * @since 5.1  */ public Map<String, Object> getAttributes() {     return this.attributes. }
true;public;0;4;/**  * A log prefix used in the handshake to correlate log messages, if any.  * @return a log prefix, or {@code null} if not specified  * @since 5.1  */ ;/**  * A log prefix used in the handshake to correlate log messages, if any.  * @return a log prefix, or {@code null} if not specified  * @since 5.1  */ @Nullable public String getLogPrefix() {     return this.logPrefix. }
false;public;0;4;;@Override public String toString() {     return "HandshakeInfo[uri=" + this.uri + ", headers=" + this.headers + "]". }
