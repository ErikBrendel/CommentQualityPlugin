commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;public void addWebFluxConfigurers(List<WebFluxConfigurer> configurers) {     if (!CollectionUtils.isEmpty(configurers)) {         this.delegates.addAll(configurers).     } }
false;public;1;4;;@Override public void configureContentTypeResolver(RequestedContentTypeResolverBuilder builder) {     this.delegates.forEach(delegate -> delegate.configureContentTypeResolver(builder)). }
false;public;1;4;;@Override public void addCorsMappings(CorsRegistry registry) {     this.delegates.forEach(delegate -> delegate.addCorsMappings(registry)). }
false;public;1;4;;@Override public void configurePathMatching(PathMatchConfigurer configurer) {     this.delegates.forEach(delegate -> delegate.configurePathMatching(configurer)). }
false;public;1;4;;@Override public void addResourceHandlers(ResourceHandlerRegistry registry) {     this.delegates.forEach(delegate -> delegate.addResourceHandlers(registry)). }
false;public;1;4;;@Override public void configureArgumentResolvers(ArgumentResolverConfigurer configurer) {     this.delegates.forEach(delegate -> delegate.configureArgumentResolvers(configurer)). }
false;public;1;4;;@Override public void configureHttpMessageCodecs(ServerCodecConfigurer configurer) {     this.delegates.forEach(delegate -> delegate.configureHttpMessageCodecs(configurer)). }
false;public;1;4;;@Override public void addFormatters(FormatterRegistry registry) {     this.delegates.forEach(delegate -> delegate.addFormatters(registry)). }
false;public;0;4;;@Override public Validator getValidator() {     return createSingleBean(WebFluxConfigurer::getValidator, Validator.class). }
false;public;0;4;;@Override public MessageCodesResolver getMessageCodesResolver() {     return createSingleBean(WebFluxConfigurer::getMessageCodesResolver, MessageCodesResolver.class). }
false;public;1;4;;@Override public void configureViewResolvers(ViewResolverRegistry registry) {     this.delegates.forEach(delegate -> delegate.configureViewResolvers(registry)). }
false;private;2;14;;@Nullable private <T> T createSingleBean(Function<WebFluxConfigurer, T> factory, Class<T> beanType) {     List<T> result = this.delegates.stream().map(factory).filter(Objects::nonNull).collect(Collectors.toList()).     if (result.isEmpty()) {         return null.     } else if (result.size() == 1) {         return result.get(0).     } else {         throw new IllegalStateException("More than one WebFluxConfigurer implements " + beanType.getSimpleName() + " factory method.").     } }
