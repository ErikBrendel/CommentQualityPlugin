commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;@Override public EntityResponse.Builder<T> status(HttpStatus status) {     Assert.notNull(status, "HttpStatus must not be null").     this.status = status.value().     return this. }
false;public;1;5;;@Override public EntityResponse.Builder<T> status(int status) {     this.status = status.     return this. }
false;public;1;6;;@Override public EntityResponse.Builder<T> cookie(ResponseCookie cookie) {     Assert.notNull(cookie, "ResponseCookie must not be null").     this.cookies.add(cookie.getName(), cookie).     return this. }
false;public;1;5;;@Override public EntityResponse.Builder<T> cookies(Consumer<MultiValueMap<String, ResponseCookie>> cookiesConsumer) {     cookiesConsumer.accept(this.cookies).     return this. }
false;public;2;7;;@Override public EntityResponse.Builder<T> header(String headerName, String... headerValues) {     for (String headerValue : headerValues) {         this.headers.add(headerName, headerValue).     }     return this. }
false;public;1;5;;@Override public EntityResponse.Builder<T> headers(HttpHeaders headers) {     this.headers.putAll(headers).     return this. }
false;public;1;5;;@Override public EntityResponse.Builder<T> allow(HttpMethod... allowedMethods) {     this.headers.setAllow(new LinkedHashSet<>(Arrays.asList(allowedMethods))).     return this. }
false;public;1;5;;@Override public EntityResponse.Builder<T> allow(Set<HttpMethod> allowedMethods) {     this.headers.setAllow(allowedMethods).     return this. }
false;public;1;5;;@Override public EntityResponse.Builder<T> contentLength(long contentLength) {     this.headers.setContentLength(contentLength).     return this. }
false;public;1;5;;@Override public EntityResponse.Builder<T> contentType(MediaType contentType) {     this.headers.setContentType(contentType).     return this. }
false;public;1;11;;@Override public EntityResponse.Builder<T> eTag(String etag) {     if (!etag.startsWith("\"") && !etag.startsWith("W/\"")) {         etag = "\"" + etag.     }     if (!etag.endsWith("\"")) {         etag = etag + "\"".     }     this.headers.setETag(etag).     return this. }
false;public;2;5;;@Override public EntityResponse.Builder<T> hint(String key, Object value) {     this.hints.put(key, value).     return this. }
false;public;1;5;;@Override public EntityResponse.Builder<T> lastModified(ZonedDateTime lastModified) {     this.headers.setLastModified(lastModified).     return this. }
false;public;1;5;;@Override public EntityResponse.Builder<T> lastModified(Instant lastModified) {     this.headers.setLastModified(lastModified).     return this. }
false;public;1;5;;@Override public EntityResponse.Builder<T> location(URI location) {     this.headers.setLocation(location).     return this. }
false;public;1;5;;@Override public EntityResponse.Builder<T> cacheControl(CacheControl cacheControl) {     this.headers.setCacheControl(cacheControl).     return this. }
false;public;1;5;;@Override public EntityResponse.Builder<T> varyBy(String... requestHeaders) {     this.headers.setVary(Arrays.asList(requestHeaders)).     return this. }
false;public;0;5;;@Override public Mono<EntityResponse<T>> build() {     return Mono.just(new DefaultEntityResponse<T>(this.status, this.headers, this.cookies, this.entity, this.inserter, this.hints)). }
false;public;0;4;;@Override public T entity() {     return this.entity. }
false;public;0;4;;@Override public BodyInserter<T, ? super ServerHttpResponse> inserter() {     return this.inserter. }
false;public;0;4;;@Override public List<HttpMessageWriter<?>> messageWriters() {     return context.messageWriters(). }
false;public;0;4;;@Override public Optional<ServerHttpRequest> serverRequest() {     return Optional.of(exchange.getRequest()). }
false;public;0;5;;@Override public Map<String, Object> hints() {     hints.put(Hints.LOG_PREFIX_HINT, exchange.getLogPrefix()).     return hints. }
false;protected;2;18;;@Override protected Mono<Void> writeToInternal(ServerWebExchange exchange, Context context) {     return inserter().insert(exchange.getResponse(), new BodyInserter.Context() {          @Override         public List<HttpMessageWriter<?>> messageWriters() {             return context.messageWriters().         }          @Override         public Optional<ServerHttpRequest> serverRequest() {             return Optional.of(exchange.getRequest()).         }          @Override         public Map<String, Object> hints() {             hints.put(Hints.LOG_PREFIX_HINT, exchange.getLogPrefix()).             return hints.         }     }). }
