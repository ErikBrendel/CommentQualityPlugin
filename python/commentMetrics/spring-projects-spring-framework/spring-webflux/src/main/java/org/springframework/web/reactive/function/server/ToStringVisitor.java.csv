commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;// RouterFunctions.Visitor @Override public void startNested(RequestPredicate predicate) {     indent().     predicate.accept(this).     this.builder.append(" => {\n").     this.indent++. }
false;public;1;6;;@Override public void endNested(RequestPredicate predicate) {     this.indent--.     indent().     this.builder.append("}\n"). }
false;public;2;7;;@Override public void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction) {     indent().     predicate.accept(this).     this.builder.append(" -> ").     this.builder.append(handlerFunction).append('\n'). }
false;public;1;5;;@Override public void resources(Function<ServerRequest, Mono<Resource>> lookupFunction) {     indent().     this.builder.append(lookupFunction).append('\n'). }
false;public;1;5;;@Override public void unknown(RouterFunction<?> routerFunction) {     indent().     this.builder.append(routerFunction). }
false;private;0;5;;private void indent() {     for (int i = 0. i < this.indent. i++) {         this.builder.append(' ').     } }
false;public;1;9;;// RequestPredicates.Visitor @Override public void method(Set<HttpMethod> methods) {     if (methods.size() == 1) {         this.builder.append(methods.iterator().next()).     } else {         this.builder.append(methods).     } }
false;public;1;4;;@Override public void path(String pattern) {     this.builder.append(pattern). }
false;public;1;4;;@Override public void pathExtension(String extension) {     this.builder.append(String.format("*.%s", extension)). }
false;public;2;4;;@Override public void header(String name, String value) {     this.builder.append(String.format("%s: %s", name, value)). }
false;public;2;4;;@Override public void queryParam(String name, String value) {     this.builder.append(String.format("?%s == %s", name, value)). }
false;public;0;4;;@Override public void startAnd() {     this.builder.append('('). }
false;public;0;4;;@Override public void and() {     this.builder.append(" && "). }
false;public;0;4;;@Override public void endAnd() {     this.builder.append(')'). }
false;public;0;4;;@Override public void startOr() {     this.builder.append('('). }
false;public;0;5;;@Override public void or() {     this.builder.append(" || "). }
false;public;0;4;;@Override public void endOr() {     this.builder.append(')'). }
false;public;0;4;;@Override public void startNegate() {     this.builder.append("!("). }
false;public;0;4;;@Override public void endNegate() {     this.builder.append(')'). }
false;public;1;4;;@Override public void unknown(RequestPredicate predicate) {     this.builder.append(predicate). }
false;public;0;8;;@Override public String toString() {     String result = this.builder.toString().     if (result.endsWith("\n")) {         result = result.substring(0, result.length() - 1).     }     return result. }
