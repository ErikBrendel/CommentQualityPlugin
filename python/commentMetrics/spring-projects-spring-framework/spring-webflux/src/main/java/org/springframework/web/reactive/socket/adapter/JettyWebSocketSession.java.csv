commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean canSuspendReceiving() {     return true. }
false;protected;0;5;;@Override protected void suspendReceiving() {     Assert.state(this.suspendToken == null, "Already suspended").     this.suspendToken = getDelegate().suspend(). }
false;protected;0;8;;@Override protected void resumeReceiving() {     SuspendToken tokenToUse = this.suspendToken.     this.suspendToken = null.     if (tokenToUse != null) {         tokenToUse.resume().     } }
false;protected;1;23;;@Override protected boolean sendMessage(WebSocketMessage message) throws IOException {     ByteBuffer buffer = message.getPayload().asByteBuffer().     if (WebSocketMessage.Type.TEXT.equals(message.getType())) {         getSendProcessor().setReadyToSend(false).         String text = new String(buffer.array(), StandardCharsets.UTF_8).         getDelegate().getRemote().sendString(text, new SendProcessorCallback()).     } else if (WebSocketMessage.Type.BINARY.equals(message.getType())) {         getSendProcessor().setReadyToSend(false).         getDelegate().getRemote().sendBytes(buffer, new SendProcessorCallback()).     } else if (WebSocketMessage.Type.PING.equals(message.getType())) {         getDelegate().getRemote().sendPing(buffer).     } else if (WebSocketMessage.Type.PONG.equals(message.getType())) {         getDelegate().getRemote().sendPong(buffer).     } else {         throw new IllegalArgumentException("Unexpected message type: " + message.getType()).     }     return true. }
false;public;1;5;;@Override public Mono<Void> close(CloseStatus status) {     getDelegate().close(status.getCode(), status.getReason()).     return Mono.empty(). }
false;public;1;5;;@Override public void writeFailed(Throwable x) {     getSendProcessor().cancel().     getSendProcessor().onError(x). }
false;public;0;5;;@Override public void writeSuccess() {     getSendProcessor().setReadyToSend(true).     getSendProcessor().onWritePossible(). }
