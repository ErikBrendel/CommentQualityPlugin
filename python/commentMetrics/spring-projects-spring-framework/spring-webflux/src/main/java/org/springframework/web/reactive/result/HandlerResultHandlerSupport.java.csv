# id;timestamp;commentText;codeText;commentWords;codeWords
HandlerResultHandlerSupport -> public void setOrder(int order);1489535791;Set the order for this result handler relative to others._<p>By default set to {@link Ordered#LOWEST_PRECEDENCE}, however see_Javadoc of sub-classes which may change this default._@param order the order;public void setOrder(int order) {_		this.order = order__	};set,the,order,for,this,result,handler,relative,to,others,p,by,default,set,to,link,ordered,however,see,javadoc,of,sub,classes,which,may,change,this,default,param,order,the,order;public,void,set,order,int,order,this,order,order
HandlerResultHandlerSupport -> public void setOrder(int order);1494019148;Set the order for this result handler relative to others._<p>By default set to {@link Ordered#LOWEST_PRECEDENCE}, however see_Javadoc of sub-classes which may change this default._@param order the order;public void setOrder(int order) {_		this.order = order__	};set,the,order,for,this,result,handler,relative,to,others,p,by,default,set,to,link,ordered,however,see,javadoc,of,sub,classes,which,may,change,this,default,param,order,the,order;public,void,set,order,int,order,this,order,order
HandlerResultHandlerSupport -> public void setOrder(int order);1495591054;Set the order for this result handler relative to others._<p>By default set to {@link Ordered#LOWEST_PRECEDENCE}, however see_Javadoc of sub-classes which may change this default._@param order the order;public void setOrder(int order) {_		this.order = order__	};set,the,order,for,this,result,handler,relative,to,others,p,by,default,set,to,link,ordered,however,see,javadoc,of,sub,classes,which,may,change,this,default,param,order,the,order;public,void,set,order,int,order,this,order,order
HandlerResultHandlerSupport -> public void setOrder(int order);1495868221;Set the order for this result handler relative to others._<p>By default set to {@link Ordered#LOWEST_PRECEDENCE}, however see_Javadoc of sub-classes which may change this default._@param order the order;public void setOrder(int order) {_		this.order = order__	};set,the,order,for,this,result,handler,relative,to,others,p,by,default,set,to,link,ordered,however,see,javadoc,of,sub,classes,which,may,change,this,default,param,order,the,order;public,void,set,order,int,order,this,order,order
HandlerResultHandlerSupport -> public void setOrder(int order);1498762530;Set the order for this result handler relative to others._<p>By default set to {@link Ordered#LOWEST_PRECEDENCE}, however see_Javadoc of sub-classes which may change this default._@param order the order;public void setOrder(int order) {_		this.order = order__	};set,the,order,for,this,result,handler,relative,to,others,p,by,default,set,to,link,ordered,however,see,javadoc,of,sub,classes,which,may,change,this,default,param,order,the,order;public,void,set,order,int,order,this,order,order
HandlerResultHandlerSupport -> public void setOrder(int order);1498957628;Set the order for this result handler relative to others._<p>By default set to {@link Ordered#LOWEST_PRECEDENCE}, however see_Javadoc of sub-classes which may change this default._@param order the order;public void setOrder(int order) {_		this.order = order__	};set,the,order,for,this,result,handler,relative,to,others,p,by,default,set,to,link,ordered,however,see,javadoc,of,sub,classes,which,may,change,this,default,param,order,the,order;public,void,set,order,int,order,this,order,order
HandlerResultHandlerSupport -> public void setOrder(int order);1510344303;Set the order for this result handler relative to others._<p>By default set to {@link Ordered#LOWEST_PRECEDENCE}, however see_Javadoc of sub-classes which may change this default._@param order the order;public void setOrder(int order) {_		this.order = order__	};set,the,order,for,this,result,handler,relative,to,others,p,by,default,set,to,link,ordered,however,see,javadoc,of,sub,classes,which,may,change,this,default,param,order,the,order;public,void,set,order,int,order,this,order,order
HandlerResultHandlerSupport -> public void setOrder(int order);1512193423;Set the order for this result handler relative to others._<p>By default set to {@link Ordered#LOWEST_PRECEDENCE}, however see_Javadoc of sub-classes which may change this default._@param order the order;public void setOrder(int order) {_		this.order = order__	};set,the,order,for,this,result,handler,relative,to,others,p,by,default,set,to,link,ordered,however,see,javadoc,of,sub,classes,which,may,change,this,default,param,order,the,order;public,void,set,order,int,order,this,order,order
HandlerResultHandlerSupport -> public void setOrder(int order);1522184065;Set the order for this result handler relative to others._<p>By default set to {@link Ordered#LOWEST_PRECEDENCE}, however see_Javadoc of sub-classes which may change this default._@param order the order;public void setOrder(int order) {_		this.order = order__	};set,the,order,for,this,result,handler,relative,to,others,p,by,default,set,to,link,ordered,however,see,javadoc,of,sub,classes,which,may,change,this,default,param,order,the,order;public,void,set,order,int,order,this,order,order
HandlerResultHandlerSupport -> public void setOrder(int order);1529721864;Set the order for this result handler relative to others._<p>By default set to {@link Ordered#LOWEST_PRECEDENCE}, however see_Javadoc of sub-classes which may change this default._@param order the order;public void setOrder(int order) {_		this.order = order__	};set,the,order,for,this,result,handler,relative,to,others,p,by,default,set,to,link,ordered,however,see,javadoc,of,sub,classes,which,may,change,this,default,param,order,the,order;public,void,set,order,int,order,this,order,order
HandlerResultHandlerSupport -> public void setOrder(int order);1530793633;Set the order for this result handler relative to others._<p>By default set to {@link Ordered#LOWEST_PRECEDENCE}, however see_Javadoc of sub-classes which may change this default._@param order the order;public void setOrder(int order) {_		this.order = order__	};set,the,order,for,this,result,handler,relative,to,others,p,by,default,set,to,link,ordered,however,see,javadoc,of,sub,classes,which,may,change,this,default,param,order,the,order;public,void,set,order,int,order,this,order,order
HandlerResultHandlerSupport -> public void setOrder(int order);1532479646;Set the order for this result handler relative to others._<p>By default set to {@link Ordered#LOWEST_PRECEDENCE}, however see_Javadoc of sub-classes which may change this default._@param order the order;public void setOrder(int order) {_		this.order = order__	};set,the,order,for,this,result,handler,relative,to,others,p,by,default,set,to,link,ordered,however,see,javadoc,of,sub,classes,which,may,change,this,default,param,order,the,order;public,void,set,order,int,order,this,order,order
HandlerResultHandlerSupport -> public void setOrder(int order);1542050977;Set the order for this result handler relative to others._<p>By default set to {@link Ordered#LOWEST_PRECEDENCE}, however see_Javadoc of sub-classes which may change this default._@param order the order;public void setOrder(int order) {_		this.order = order__	};set,the,order,for,this,result,handler,relative,to,others,p,by,default,set,to,link,ordered,however,see,javadoc,of,sub,classes,which,may,change,this,default,param,order,the,order;public,void,set,order,int,order,this,order,order
HandlerResultHandlerSupport -> public void setOrder(int order);1546457570;Set the order for this result handler relative to others._<p>By default set to {@link Ordered#LOWEST_PRECEDENCE}, however see_Javadoc of sub-classes which may change this default._@param order the order;public void setOrder(int order) {_		this.order = order__	};set,the,order,for,this,result,handler,relative,to,others,p,by,default,set,to,link,ordered,however,see,javadoc,of,sub,classes,which,may,change,this,default,param,order,the,order;public,void,set,order,int,order,this,order,order
HandlerResultHandlerSupport -> protected ReactiveAdapter getAdapter(HandlerResult result);1489535791;Get a {@code ReactiveAdapter} for the top-level return value type._@return the matching adapter or {@code null};protected ReactiveAdapter getAdapter(HandlerResult result) {_		Class<?> returnType = result.getReturnType().getRawClass()__		return getAdapterRegistry().getAdapter(returnType, result.getReturnValue())__	};get,a,code,reactive,adapter,for,the,top,level,return,value,type,return,the,matching,adapter,or,code,null;protected,reactive,adapter,get,adapter,handler,result,result,class,return,type,result,get,return,type,get,raw,class,return,get,adapter,registry,get,adapter,return,type,result,get,return,value
HandlerResultHandlerSupport -> protected ReactiveAdapter getAdapter(HandlerResult result);1494019148;Get a {@code ReactiveAdapter} for the top-level return value type._@return the matching adapter or {@code null};protected ReactiveAdapter getAdapter(HandlerResult result) {_		Class<?> returnType = result.getReturnType().getRawClass()__		return getAdapterRegistry().getAdapter(returnType, result.getReturnValue())__	};get,a,code,reactive,adapter,for,the,top,level,return,value,type,return,the,matching,adapter,or,code,null;protected,reactive,adapter,get,adapter,handler,result,result,class,return,type,result,get,return,type,get,raw,class,return,get,adapter,registry,get,adapter,return,type,result,get,return,value
HandlerResultHandlerSupport -> protected ReactiveAdapter getAdapter(HandlerResult result);1495591054;Get a {@code ReactiveAdapter} for the top-level return value type._@return the matching adapter or {@code null};protected ReactiveAdapter getAdapter(HandlerResult result) {_		Class<?> returnType = result.getReturnType().getRawClass()__		return getAdapterRegistry().getAdapter(returnType, result.getReturnValue())__	};get,a,code,reactive,adapter,for,the,top,level,return,value,type,return,the,matching,adapter,or,code,null;protected,reactive,adapter,get,adapter,handler,result,result,class,return,type,result,get,return,type,get,raw,class,return,get,adapter,registry,get,adapter,return,type,result,get,return,value
HandlerResultHandlerSupport -> public RequestedContentTypeResolver getContentTypeResolver();1489535791;Return the configured {@link RequestedContentTypeResolver}.;public RequestedContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,requested,content,type,resolver;public,requested,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
HandlerResultHandlerSupport -> public RequestedContentTypeResolver getContentTypeResolver();1494019148;Return the configured {@link RequestedContentTypeResolver}.;public RequestedContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,requested,content,type,resolver;public,requested,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
HandlerResultHandlerSupport -> public RequestedContentTypeResolver getContentTypeResolver();1495591054;Return the configured {@link RequestedContentTypeResolver}.;public RequestedContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,requested,content,type,resolver;public,requested,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
HandlerResultHandlerSupport -> public RequestedContentTypeResolver getContentTypeResolver();1495868221;Return the configured {@link RequestedContentTypeResolver}.;public RequestedContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,requested,content,type,resolver;public,requested,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
HandlerResultHandlerSupport -> public RequestedContentTypeResolver getContentTypeResolver();1498762530;Return the configured {@link RequestedContentTypeResolver}.;public RequestedContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,requested,content,type,resolver;public,requested,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
HandlerResultHandlerSupport -> public RequestedContentTypeResolver getContentTypeResolver();1498957628;Return the configured {@link RequestedContentTypeResolver}.;public RequestedContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,requested,content,type,resolver;public,requested,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
HandlerResultHandlerSupport -> public RequestedContentTypeResolver getContentTypeResolver();1510344303;Return the configured {@link RequestedContentTypeResolver}.;public RequestedContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,requested,content,type,resolver;public,requested,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
HandlerResultHandlerSupport -> public RequestedContentTypeResolver getContentTypeResolver();1512193423;Return the configured {@link RequestedContentTypeResolver}.;public RequestedContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,requested,content,type,resolver;public,requested,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
HandlerResultHandlerSupport -> public RequestedContentTypeResolver getContentTypeResolver();1522184065;Return the configured {@link RequestedContentTypeResolver}.;public RequestedContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,requested,content,type,resolver;public,requested,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
HandlerResultHandlerSupport -> public RequestedContentTypeResolver getContentTypeResolver();1529721864;Return the configured {@link RequestedContentTypeResolver}.;public RequestedContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,requested,content,type,resolver;public,requested,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
HandlerResultHandlerSupport -> public RequestedContentTypeResolver getContentTypeResolver();1530793633;Return the configured {@link RequestedContentTypeResolver}.;public RequestedContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,requested,content,type,resolver;public,requested,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
HandlerResultHandlerSupport -> public RequestedContentTypeResolver getContentTypeResolver();1532479646;Return the configured {@link RequestedContentTypeResolver}.;public RequestedContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,requested,content,type,resolver;public,requested,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
HandlerResultHandlerSupport -> public RequestedContentTypeResolver getContentTypeResolver();1542050977;Return the configured {@link RequestedContentTypeResolver}.;public RequestedContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,requested,content,type,resolver;public,requested,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
HandlerResultHandlerSupport -> public RequestedContentTypeResolver getContentTypeResolver();1546457570;Return the configured {@link RequestedContentTypeResolver}.;public RequestedContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,requested,content,type,resolver;public,requested,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
HandlerResultHandlerSupport -> @Nullable 	protected MediaType selectMediaType(ServerWebExchange exchange, 			Supplier<List<MediaType>> producibleTypesSupplier);1495868221;Select the best media type for the current request through a content_negotiation algorithm._@param exchange the current request_@param producibleTypesSupplier the media types that can be produced for the current request_@return the selected media type or {@code null};@Nullable_	protected MediaType selectMediaType(ServerWebExchange exchange,_			Supplier<List<MediaType>> producibleTypesSupplier) {__		List<MediaType> acceptableTypes = getAcceptableTypes(exchange)__		List<MediaType> producibleTypes = getProducibleTypes(exchange, producibleTypesSupplier)___		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<>()__		for (MediaType acceptable : acceptableTypes) {_			for (MediaType producible : producibleTypes) {_				if (acceptable.isCompatibleWith(producible)) {_					compatibleMediaTypes.add(selectMoreSpecificMediaType(acceptable, producible))__				}_			}_		}__		List<MediaType> result = new ArrayList<>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(result)___		for (MediaType mediaType : compatibleMediaTypes) {_			if (mediaType.isConcrete()) {_				return mediaType__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION_ALL)) {_				return MediaType.APPLICATION_OCTET_STREAM__			}_		}__		return null__	};select,the,best,media,type,for,the,current,request,through,a,content,negotiation,algorithm,param,exchange,the,current,request,param,producible,types,supplier,the,media,types,that,can,be,produced,for,the,current,request,return,the,selected,media,type,or,code,null;nullable,protected,media,type,select,media,type,server,web,exchange,exchange,supplier,list,media,type,producible,types,supplier,list,media,type,acceptable,types,get,acceptable,types,exchange,list,media,type,producible,types,get,producible,types,exchange,producible,types,supplier,set,media,type,compatible,media,types,new,linked,hash,set,for,media,type,acceptable,acceptable,types,for,media,type,producible,producible,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,select,more,specific,media,type,acceptable,producible,list,media,type,result,new,array,list,compatible,media,types,media,type,sort,by,specificity,and,quality,result,for,media,type,media,type,compatible,media,types,if,media,type,is,concrete,return,media,type,else,if,media,type,equals,media,type,all,media,type,equals,return,media,type,return,null
HandlerResultHandlerSupport -> @Nullable 	protected MediaType selectMediaType(ServerWebExchange exchange, 			Supplier<List<MediaType>> producibleTypesSupplier);1498762530;Select the best media type for the current request through a content_negotiation algorithm._@param exchange the current request_@param producibleTypesSupplier the media types that can be produced for the current request_@return the selected media type or {@code null};@Nullable_	protected MediaType selectMediaType(ServerWebExchange exchange,_			Supplier<List<MediaType>> producibleTypesSupplier) {__		List<MediaType> acceptableTypes = getAcceptableTypes(exchange)__		List<MediaType> producibleTypes = getProducibleTypes(exchange, producibleTypesSupplier)___		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<>()__		for (MediaType acceptable : acceptableTypes) {_			for (MediaType producible : producibleTypes) {_				if (acceptable.isCompatibleWith(producible)) {_					compatibleMediaTypes.add(selectMoreSpecificMediaType(acceptable, producible))__				}_			}_		}__		List<MediaType> result = new ArrayList<>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(result)___		for (MediaType mediaType : compatibleMediaTypes) {_			if (mediaType.isConcrete()) {_				return mediaType__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION_ALL)) {_				return MediaType.APPLICATION_OCTET_STREAM__			}_		}__		return null__	};select,the,best,media,type,for,the,current,request,through,a,content,negotiation,algorithm,param,exchange,the,current,request,param,producible,types,supplier,the,media,types,that,can,be,produced,for,the,current,request,return,the,selected,media,type,or,code,null;nullable,protected,media,type,select,media,type,server,web,exchange,exchange,supplier,list,media,type,producible,types,supplier,list,media,type,acceptable,types,get,acceptable,types,exchange,list,media,type,producible,types,get,producible,types,exchange,producible,types,supplier,set,media,type,compatible,media,types,new,linked,hash,set,for,media,type,acceptable,acceptable,types,for,media,type,producible,producible,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,select,more,specific,media,type,acceptable,producible,list,media,type,result,new,array,list,compatible,media,types,media,type,sort,by,specificity,and,quality,result,for,media,type,media,type,compatible,media,types,if,media,type,is,concrete,return,media,type,else,if,media,type,equals,media,type,all,media,type,equals,return,media,type,return,null
HandlerResultHandlerSupport -> @Nullable 	protected MediaType selectMediaType(ServerWebExchange exchange, 			Supplier<List<MediaType>> producibleTypesSupplier);1498957628;Select the best media type for the current request through a content_negotiation algorithm._@param exchange the current request_@param producibleTypesSupplier the media types that can be produced for the current request_@return the selected media type or {@code null};@Nullable_	protected MediaType selectMediaType(ServerWebExchange exchange,_			Supplier<List<MediaType>> producibleTypesSupplier) {__		List<MediaType> acceptableTypes = getAcceptableTypes(exchange)__		List<MediaType> producibleTypes = getProducibleTypes(exchange, producibleTypesSupplier)___		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<>()__		for (MediaType acceptable : acceptableTypes) {_			for (MediaType producible : producibleTypes) {_				if (acceptable.isCompatibleWith(producible)) {_					compatibleMediaTypes.add(selectMoreSpecificMediaType(acceptable, producible))__				}_			}_		}__		List<MediaType> result = new ArrayList<>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(result)___		for (MediaType mediaType : result) {_			if (mediaType.isConcrete()) {_				return mediaType__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION_ALL)) {_				return MediaType.APPLICATION_OCTET_STREAM__			}_		}__		return null__	};select,the,best,media,type,for,the,current,request,through,a,content,negotiation,algorithm,param,exchange,the,current,request,param,producible,types,supplier,the,media,types,that,can,be,produced,for,the,current,request,return,the,selected,media,type,or,code,null;nullable,protected,media,type,select,media,type,server,web,exchange,exchange,supplier,list,media,type,producible,types,supplier,list,media,type,acceptable,types,get,acceptable,types,exchange,list,media,type,producible,types,get,producible,types,exchange,producible,types,supplier,set,media,type,compatible,media,types,new,linked,hash,set,for,media,type,acceptable,acceptable,types,for,media,type,producible,producible,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,select,more,specific,media,type,acceptable,producible,list,media,type,result,new,array,list,compatible,media,types,media,type,sort,by,specificity,and,quality,result,for,media,type,media,type,result,if,media,type,is,concrete,return,media,type,else,if,media,type,equals,media,type,all,media,type,equals,return,media,type,return,null
HandlerResultHandlerSupport -> @Nullable 	protected MediaType selectMediaType(ServerWebExchange exchange, 			Supplier<List<MediaType>> producibleTypesSupplier);1510344303;Select the best media type for the current request through a content_negotiation algorithm._@param exchange the current request_@param producibleTypesSupplier the media types that can be produced for the current request_@return the selected media type or {@code null};@Nullable_	protected MediaType selectMediaType(ServerWebExchange exchange,_			Supplier<List<MediaType>> producibleTypesSupplier) {__		List<MediaType> acceptableTypes = getAcceptableTypes(exchange)__		List<MediaType> producibleTypes = getProducibleTypes(exchange, producibleTypesSupplier)___		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<>()__		for (MediaType acceptable : acceptableTypes) {_			for (MediaType producible : producibleTypes) {_				if (acceptable.isCompatibleWith(producible)) {_					compatibleMediaTypes.add(selectMoreSpecificMediaType(acceptable, producible))__				}_			}_		}__		List<MediaType> result = new ArrayList<>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(result)___		for (MediaType mediaType : result) {_			if (mediaType.isConcrete()) {_				return mediaType__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION_ALL)) {_				return MediaType.APPLICATION_OCTET_STREAM__			}_		}__		return null__	};select,the,best,media,type,for,the,current,request,through,a,content,negotiation,algorithm,param,exchange,the,current,request,param,producible,types,supplier,the,media,types,that,can,be,produced,for,the,current,request,return,the,selected,media,type,or,code,null;nullable,protected,media,type,select,media,type,server,web,exchange,exchange,supplier,list,media,type,producible,types,supplier,list,media,type,acceptable,types,get,acceptable,types,exchange,list,media,type,producible,types,get,producible,types,exchange,producible,types,supplier,set,media,type,compatible,media,types,new,linked,hash,set,for,media,type,acceptable,acceptable,types,for,media,type,producible,producible,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,select,more,specific,media,type,acceptable,producible,list,media,type,result,new,array,list,compatible,media,types,media,type,sort,by,specificity,and,quality,result,for,media,type,media,type,result,if,media,type,is,concrete,return,media,type,else,if,media,type,equals,media,type,all,media,type,equals,return,media,type,return,null
HandlerResultHandlerSupport -> @Nullable 	protected MediaType selectMediaType(ServerWebExchange exchange, 			Supplier<List<MediaType>> producibleTypesSupplier);1512193423;Select the best media type for the current request through a content_negotiation algorithm._@param exchange the current request_@param producibleTypesSupplier the media types that can be produced for the current request_@return the selected media type or {@code null};@Nullable_	protected MediaType selectMediaType(ServerWebExchange exchange,_			Supplier<List<MediaType>> producibleTypesSupplier) {__		MediaType contentType = exchange.getResponse().getHeaders().getContentType()__		if (contentType != null && contentType.isConcrete()) {_			return contentType__		}__		List<MediaType> acceptableTypes = getAcceptableTypes(exchange)__		List<MediaType> producibleTypes = getProducibleTypes(exchange, producibleTypesSupplier)___		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<>()__		for (MediaType acceptable : acceptableTypes) {_			for (MediaType producible : producibleTypes) {_				if (acceptable.isCompatibleWith(producible)) {_					compatibleMediaTypes.add(selectMoreSpecificMediaType(acceptable, producible))__				}_			}_		}__		List<MediaType> result = new ArrayList<>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(result)___		for (MediaType mediaType : result) {_			if (mediaType.isConcrete()) {_				return mediaType__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION_ALL)) {_				return MediaType.APPLICATION_OCTET_STREAM__			}_		}__		return null__	};select,the,best,media,type,for,the,current,request,through,a,content,negotiation,algorithm,param,exchange,the,current,request,param,producible,types,supplier,the,media,types,that,can,be,produced,for,the,current,request,return,the,selected,media,type,or,code,null;nullable,protected,media,type,select,media,type,server,web,exchange,exchange,supplier,list,media,type,producible,types,supplier,media,type,content,type,exchange,get,response,get,headers,get,content,type,if,content,type,null,content,type,is,concrete,return,content,type,list,media,type,acceptable,types,get,acceptable,types,exchange,list,media,type,producible,types,get,producible,types,exchange,producible,types,supplier,set,media,type,compatible,media,types,new,linked,hash,set,for,media,type,acceptable,acceptable,types,for,media,type,producible,producible,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,select,more,specific,media,type,acceptable,producible,list,media,type,result,new,array,list,compatible,media,types,media,type,sort,by,specificity,and,quality,result,for,media,type,media,type,result,if,media,type,is,concrete,return,media,type,else,if,media,type,equals,media,type,all,media,type,equals,return,media,type,return,null
HandlerResultHandlerSupport -> @Nullable 	protected MediaType selectMediaType(ServerWebExchange exchange, 			Supplier<List<MediaType>> producibleTypesSupplier);1522184065;Select the best media type for the current request through a content_negotiation algorithm._@param exchange the current request_@param producibleTypesSupplier the media types that can be produced for the current request_@return the selected media type or {@code null};@Nullable_	protected MediaType selectMediaType(ServerWebExchange exchange,_			Supplier<List<MediaType>> producibleTypesSupplier) {__		MediaType contentType = exchange.getResponse().getHeaders().getContentType()__		if (contentType != null && contentType.isConcrete()) {_			return contentType__		}__		List<MediaType> acceptableTypes = getAcceptableTypes(exchange)__		List<MediaType> producibleTypes = getProducibleTypes(exchange, producibleTypesSupplier)___		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<>()__		for (MediaType acceptable : acceptableTypes) {_			for (MediaType producible : producibleTypes) {_				if (acceptable.isCompatibleWith(producible)) {_					compatibleMediaTypes.add(selectMoreSpecificMediaType(acceptable, producible))__				}_			}_		}__		List<MediaType> result = new ArrayList<>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(result)___		for (MediaType mediaType : result) {_			if (mediaType.isConcrete()) {_				return mediaType__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION_ALL)) {_				return MediaType.APPLICATION_OCTET_STREAM__			}_		}__		return null__	};select,the,best,media,type,for,the,current,request,through,a,content,negotiation,algorithm,param,exchange,the,current,request,param,producible,types,supplier,the,media,types,that,can,be,produced,for,the,current,request,return,the,selected,media,type,or,code,null;nullable,protected,media,type,select,media,type,server,web,exchange,exchange,supplier,list,media,type,producible,types,supplier,media,type,content,type,exchange,get,response,get,headers,get,content,type,if,content,type,null,content,type,is,concrete,return,content,type,list,media,type,acceptable,types,get,acceptable,types,exchange,list,media,type,producible,types,get,producible,types,exchange,producible,types,supplier,set,media,type,compatible,media,types,new,linked,hash,set,for,media,type,acceptable,acceptable,types,for,media,type,producible,producible,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,select,more,specific,media,type,acceptable,producible,list,media,type,result,new,array,list,compatible,media,types,media,type,sort,by,specificity,and,quality,result,for,media,type,media,type,result,if,media,type,is,concrete,return,media,type,else,if,media,type,equals,media,type,all,media,type,equals,return,media,type,return,null
HandlerResultHandlerSupport -> @Nullable 	protected MediaType selectMediaType(ServerWebExchange exchange, 			Supplier<List<MediaType>> producibleTypesSupplier);1529721864;Select the best media type for the current request through a content_negotiation algorithm._@param exchange the current request_@param producibleTypesSupplier the media types that can be produced for the current request_@return the selected media type or {@code null};@Nullable_	protected MediaType selectMediaType(ServerWebExchange exchange,_			Supplier<List<MediaType>> producibleTypesSupplier) {__		MediaType contentType = exchange.getResponse().getHeaders().getContentType()__		if (contentType != null && contentType.isConcrete()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Found 'Content-Type:" + contentType + "' in response")__			}_			return contentType__		}__		List<MediaType> acceptableTypes = getAcceptableTypes(exchange)__		List<MediaType> producibleTypes = getProducibleTypes(exchange, producibleTypesSupplier)___		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<>()__		for (MediaType acceptable : acceptableTypes) {_			for (MediaType producible : producibleTypes) {_				if (acceptable.isCompatibleWith(producible)) {_					compatibleMediaTypes.add(selectMoreSpecificMediaType(acceptable, producible))__				}_			}_		}__		List<MediaType> result = new ArrayList<>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(result)___		for (MediaType mediaType : result) {_			if (mediaType.isConcrete()) {_				if (logger.isDebugEnabled()) {_					logger.debug("Using '" + mediaType + "' given " + acceptableTypes)__				}_				return mediaType__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION_ALL)) {_				mediaType = MediaType.APPLICATION_OCTET_STREAM__				if (logger.isDebugEnabled()) {_					logger.debug("Using '" + mediaType + "' given " + acceptableTypes)__				}_				return mediaType__			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("No match for " + acceptableTypes + ", supported: " + producibleTypes)__		}__		return null__	};select,the,best,media,type,for,the,current,request,through,a,content,negotiation,algorithm,param,exchange,the,current,request,param,producible,types,supplier,the,media,types,that,can,be,produced,for,the,current,request,return,the,selected,media,type,or,code,null;nullable,protected,media,type,select,media,type,server,web,exchange,exchange,supplier,list,media,type,producible,types,supplier,media,type,content,type,exchange,get,response,get,headers,get,content,type,if,content,type,null,content,type,is,concrete,if,logger,is,debug,enabled,logger,debug,found,content,type,content,type,in,response,return,content,type,list,media,type,acceptable,types,get,acceptable,types,exchange,list,media,type,producible,types,get,producible,types,exchange,producible,types,supplier,set,media,type,compatible,media,types,new,linked,hash,set,for,media,type,acceptable,acceptable,types,for,media,type,producible,producible,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,select,more,specific,media,type,acceptable,producible,list,media,type,result,new,array,list,compatible,media,types,media,type,sort,by,specificity,and,quality,result,for,media,type,media,type,result,if,media,type,is,concrete,if,logger,is,debug,enabled,logger,debug,using,media,type,given,acceptable,types,return,media,type,else,if,media,type,equals,media,type,all,media,type,equals,media,type,media,type,if,logger,is,debug,enabled,logger,debug,using,media,type,given,acceptable,types,return,media,type,if,logger,is,debug,enabled,logger,debug,no,match,for,acceptable,types,supported,producible,types,return,null
HandlerResultHandlerSupport -> @Nullable 	protected MediaType selectMediaType(ServerWebExchange exchange, 			Supplier<List<MediaType>> producibleTypesSupplier);1530793633;Select the best media type for the current request through a content_negotiation algorithm._@param exchange the current request_@param producibleTypesSupplier the media types that can be produced for the current request_@return the selected media type or {@code null};@Nullable_	protected MediaType selectMediaType(ServerWebExchange exchange,_			Supplier<List<MediaType>> producibleTypesSupplier) {__		MediaType contentType = exchange.getResponse().getHeaders().getContentType()__		if (contentType != null && contentType.isConcrete()) {_			if (logger.isDebugEnabled()) {_				logger.debug(exchange.getLogPrefix() + "Found 'Content-Type:" + contentType + "' in response")__			}_			return contentType__		}__		List<MediaType> acceptableTypes = getAcceptableTypes(exchange)__		List<MediaType> producibleTypes = getProducibleTypes(exchange, producibleTypesSupplier)___		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<>()__		for (MediaType acceptable : acceptableTypes) {_			for (MediaType producible : producibleTypes) {_				if (acceptable.isCompatibleWith(producible)) {_					compatibleMediaTypes.add(selectMoreSpecificMediaType(acceptable, producible))__				}_			}_		}__		List<MediaType> result = new ArrayList<>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(result)___		for (MediaType mediaType : result) {_			if (mediaType.isConcrete()) {_				if (logger.isDebugEnabled()) {_					logger.debug(exchange.getLogPrefix() + "Using '" + mediaType + "' given " + acceptableTypes)__				}_				return mediaType__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION_ALL)) {_				mediaType = MediaType.APPLICATION_OCTET_STREAM__				if (logger.isDebugEnabled()) {_					logger.debug(exchange.getLogPrefix() + "Using '" + mediaType + "' given " + acceptableTypes)__				}_				return mediaType__			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug(exchange.getLogPrefix() +_					"No match for " + acceptableTypes + ", supported: " + producibleTypes)__		}__		return null__	};select,the,best,media,type,for,the,current,request,through,a,content,negotiation,algorithm,param,exchange,the,current,request,param,producible,types,supplier,the,media,types,that,can,be,produced,for,the,current,request,return,the,selected,media,type,or,code,null;nullable,protected,media,type,select,media,type,server,web,exchange,exchange,supplier,list,media,type,producible,types,supplier,media,type,content,type,exchange,get,response,get,headers,get,content,type,if,content,type,null,content,type,is,concrete,if,logger,is,debug,enabled,logger,debug,exchange,get,log,prefix,found,content,type,content,type,in,response,return,content,type,list,media,type,acceptable,types,get,acceptable,types,exchange,list,media,type,producible,types,get,producible,types,exchange,producible,types,supplier,set,media,type,compatible,media,types,new,linked,hash,set,for,media,type,acceptable,acceptable,types,for,media,type,producible,producible,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,select,more,specific,media,type,acceptable,producible,list,media,type,result,new,array,list,compatible,media,types,media,type,sort,by,specificity,and,quality,result,for,media,type,media,type,result,if,media,type,is,concrete,if,logger,is,debug,enabled,logger,debug,exchange,get,log,prefix,using,media,type,given,acceptable,types,return,media,type,else,if,media,type,equals,media,type,all,media,type,equals,media,type,media,type,if,logger,is,debug,enabled,logger,debug,exchange,get,log,prefix,using,media,type,given,acceptable,types,return,media,type,if,logger,is,debug,enabled,logger,debug,exchange,get,log,prefix,no,match,for,acceptable,types,supported,producible,types,return,null
HandlerResultHandlerSupport -> @Nullable 	protected MediaType selectMediaType(ServerWebExchange exchange, 			Supplier<List<MediaType>> producibleTypesSupplier);1532479646;Select the best media type for the current request through a content_negotiation algorithm._@param exchange the current request_@param producibleTypesSupplier the media types that can be produced for the current request_@return the selected media type or {@code null};@Nullable_	protected MediaType selectMediaType(ServerWebExchange exchange,_			Supplier<List<MediaType>> producibleTypesSupplier) {__		MediaType contentType = exchange.getResponse().getHeaders().getContentType()__		if (contentType != null && contentType.isConcrete()) {_			if (logger.isDebugEnabled()) {_				logger.debug(exchange.getLogPrefix() + "Found 'Content-Type:" + contentType + "' in response")__			}_			return contentType__		}__		List<MediaType> acceptableTypes = getAcceptableTypes(exchange)__		List<MediaType> producibleTypes = getProducibleTypes(exchange, producibleTypesSupplier)___		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<>()__		for (MediaType acceptable : acceptableTypes) {_			for (MediaType producible : producibleTypes) {_				if (acceptable.isCompatibleWith(producible)) {_					compatibleMediaTypes.add(selectMoreSpecificMediaType(acceptable, producible))__				}_			}_		}__		List<MediaType> result = new ArrayList<>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(result)___		MediaType selected = null__		for (MediaType mediaType : result) {_			if (mediaType.isConcrete()) {_				selected = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION_ALL)) {_				selected = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selected != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Using '" + selected + "' given " +_						acceptableTypes + " and supported " + producibleTypes)__			}_		}_		else if (logger.isDebugEnabled()) {_			logger.debug(exchange.getLogPrefix() +_					"No match for " + acceptableTypes + ", supported: " + producibleTypes)__		}__		return selected__	};select,the,best,media,type,for,the,current,request,through,a,content,negotiation,algorithm,param,exchange,the,current,request,param,producible,types,supplier,the,media,types,that,can,be,produced,for,the,current,request,return,the,selected,media,type,or,code,null;nullable,protected,media,type,select,media,type,server,web,exchange,exchange,supplier,list,media,type,producible,types,supplier,media,type,content,type,exchange,get,response,get,headers,get,content,type,if,content,type,null,content,type,is,concrete,if,logger,is,debug,enabled,logger,debug,exchange,get,log,prefix,found,content,type,content,type,in,response,return,content,type,list,media,type,acceptable,types,get,acceptable,types,exchange,list,media,type,producible,types,get,producible,types,exchange,producible,types,supplier,set,media,type,compatible,media,types,new,linked,hash,set,for,media,type,acceptable,acceptable,types,for,media,type,producible,producible,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,select,more,specific,media,type,acceptable,producible,list,media,type,result,new,array,list,compatible,media,types,media,type,sort,by,specificity,and,quality,result,media,type,selected,null,for,media,type,media,type,result,if,media,type,is,concrete,selected,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,break,if,selected,null,if,logger,is,debug,enabled,logger,debug,using,selected,given,acceptable,types,and,supported,producible,types,else,if,logger,is,debug,enabled,logger,debug,exchange,get,log,prefix,no,match,for,acceptable,types,supported,producible,types,return,selected
HandlerResultHandlerSupport -> @Nullable 	protected MediaType selectMediaType(ServerWebExchange exchange, 			Supplier<List<MediaType>> producibleTypesSupplier);1542050977;Select the best media type for the current request through a content negotiation algorithm._@param exchange the current request_@param producibleTypesSupplier the media types that can be produced for the current request_@return the selected media type, or {@code null} if none;@Nullable_	protected MediaType selectMediaType(ServerWebExchange exchange,_			Supplier<List<MediaType>> producibleTypesSupplier) {__		MediaType contentType = exchange.getResponse().getHeaders().getContentType()__		if (contentType != null && contentType.isConcrete()) {_			if (logger.isDebugEnabled()) {_				logger.debug(exchange.getLogPrefix() + "Found 'Content-Type:" + contentType + "' in response")__			}_			return contentType__		}__		List<MediaType> acceptableTypes = getAcceptableTypes(exchange)__		List<MediaType> producibleTypes = getProducibleTypes(exchange, producibleTypesSupplier)___		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<>()__		for (MediaType acceptable : acceptableTypes) {_			for (MediaType producible : producibleTypes) {_				if (acceptable.isCompatibleWith(producible)) {_					compatibleMediaTypes.add(selectMoreSpecificMediaType(acceptable, producible))__				}_			}_		}__		List<MediaType> result = new ArrayList<>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(result)___		MediaType selected = null__		for (MediaType mediaType : result) {_			if (mediaType.isConcrete()) {_				selected = mediaType__				break__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION_ALL)) {_				selected = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selected != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Using '" + selected + "' given " +_						acceptableTypes + " and supported " + producibleTypes)__			}_		}_		else if (logger.isDebugEnabled()) {_			logger.debug(exchange.getLogPrefix() +_					"No match for " + acceptableTypes + ", supported: " + producibleTypes)__		}__		return selected__	};select,the,best,media,type,for,the,current,request,through,a,content,negotiation,algorithm,param,exchange,the,current,request,param,producible,types,supplier,the,media,types,that,can,be,produced,for,the,current,request,return,the,selected,media,type,or,code,null,if,none;nullable,protected,media,type,select,media,type,server,web,exchange,exchange,supplier,list,media,type,producible,types,supplier,media,type,content,type,exchange,get,response,get,headers,get,content,type,if,content,type,null,content,type,is,concrete,if,logger,is,debug,enabled,logger,debug,exchange,get,log,prefix,found,content,type,content,type,in,response,return,content,type,list,media,type,acceptable,types,get,acceptable,types,exchange,list,media,type,producible,types,get,producible,types,exchange,producible,types,supplier,set,media,type,compatible,media,types,new,linked,hash,set,for,media,type,acceptable,acceptable,types,for,media,type,producible,producible,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,select,more,specific,media,type,acceptable,producible,list,media,type,result,new,array,list,compatible,media,types,media,type,sort,by,specificity,and,quality,result,media,type,selected,null,for,media,type,media,type,result,if,media,type,is,concrete,selected,media,type,break,else,if,media,type,equals,media,type,all,media,type,equals,selected,media,type,break,if,selected,null,if,logger,is,debug,enabled,logger,debug,using,selected,given,acceptable,types,and,supported,producible,types,else,if,logger,is,debug,enabled,logger,debug,exchange,get,log,prefix,no,match,for,acceptable,types,supported,producible,types,return,selected
HandlerResultHandlerSupport -> @Nullable 	protected MediaType selectMediaType(ServerWebExchange exchange, 			Supplier<List<MediaType>> producibleTypesSupplier);1546457570;Select the best media type for the current request through a content negotiation algorithm._@param exchange the current request_@param producibleTypesSupplier the media types that can be produced for the current request_@return the selected media type, or {@code null} if none;@Nullable_	protected MediaType selectMediaType(ServerWebExchange exchange,_			Supplier<List<MediaType>> producibleTypesSupplier) {__		MediaType contentType = exchange.getResponse().getHeaders().getContentType()__		if (contentType != null && contentType.isConcrete()) {_			if (logger.isDebugEnabled()) {_				logger.debug(exchange.getLogPrefix() + "Found 'Content-Type:" + contentType + "' in response")__			}_			return contentType__		}__		List<MediaType> acceptableTypes = getAcceptableTypes(exchange)__		List<MediaType> producibleTypes = getProducibleTypes(exchange, producibleTypesSupplier)___		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<>()__		for (MediaType acceptable : acceptableTypes) {_			for (MediaType producible : producibleTypes) {_				if (acceptable.isCompatibleWith(producible)) {_					compatibleMediaTypes.add(selectMoreSpecificMediaType(acceptable, producible))__				}_			}_		}__		List<MediaType> result = new ArrayList<>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(result)___		MediaType selected = null__		for (MediaType mediaType : result) {_			if (mediaType.isConcrete()) {_				selected = mediaType__				break__			}_			else if (mediaType.isPresentIn(ALL_APPLICATION_MEDIA_TYPES)) {_				selected = MediaType.APPLICATION_OCTET_STREAM__				break__			}_		}__		if (selected != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Using '" + selected + "' given " +_						acceptableTypes + " and supported " + producibleTypes)__			}_		}_		else if (logger.isDebugEnabled()) {_			logger.debug(exchange.getLogPrefix() +_					"No match for " + acceptableTypes + ", supported: " + producibleTypes)__		}__		return selected__	};select,the,best,media,type,for,the,current,request,through,a,content,negotiation,algorithm,param,exchange,the,current,request,param,producible,types,supplier,the,media,types,that,can,be,produced,for,the,current,request,return,the,selected,media,type,or,code,null,if,none;nullable,protected,media,type,select,media,type,server,web,exchange,exchange,supplier,list,media,type,producible,types,supplier,media,type,content,type,exchange,get,response,get,headers,get,content,type,if,content,type,null,content,type,is,concrete,if,logger,is,debug,enabled,logger,debug,exchange,get,log,prefix,found,content,type,content,type,in,response,return,content,type,list,media,type,acceptable,types,get,acceptable,types,exchange,list,media,type,producible,types,get,producible,types,exchange,producible,types,supplier,set,media,type,compatible,media,types,new,linked,hash,set,for,media,type,acceptable,acceptable,types,for,media,type,producible,producible,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,select,more,specific,media,type,acceptable,producible,list,media,type,result,new,array,list,compatible,media,types,media,type,sort,by,specificity,and,quality,result,media,type,selected,null,for,media,type,media,type,result,if,media,type,is,concrete,selected,media,type,break,else,if,media,type,is,present,in,selected,media,type,break,if,selected,null,if,logger,is,debug,enabled,logger,debug,using,selected,given,acceptable,types,and,supported,producible,types,else,if,logger,is,debug,enabled,logger,debug,exchange,get,log,prefix,no,match,for,acceptable,types,supported,producible,types,return,selected
HandlerResultHandlerSupport -> protected MediaType selectMediaType(ServerWebExchange exchange, 			Supplier<List<MediaType>> producibleTypesSupplier);1489535791;Select the best media type for the current request through a content_negotiation algorithm._@param exchange the current request_@param producibleTypesSupplier the media types that can be produced for the current request_@return the selected media type or {@code null};protected MediaType selectMediaType(ServerWebExchange exchange,_			Supplier<List<MediaType>> producibleTypesSupplier) {__		List<MediaType> acceptableTypes = getAcceptableTypes(exchange)__		List<MediaType> producibleTypes = getProducibleTypes(exchange, producibleTypesSupplier)___		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<>()__		for (MediaType acceptable : acceptableTypes) {_			for (MediaType producible : producibleTypes) {_				if (acceptable.isCompatibleWith(producible)) {_					compatibleMediaTypes.add(selectMoreSpecificMediaType(acceptable, producible))__				}_			}_		}__		List<MediaType> result = new ArrayList<>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(result)___		for (MediaType mediaType : compatibleMediaTypes) {_			if (mediaType.isConcrete()) {_				return mediaType__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION_ALL)) {_				return MediaType.APPLICATION_OCTET_STREAM__			}_		}__		return null__	};select,the,best,media,type,for,the,current,request,through,a,content,negotiation,algorithm,param,exchange,the,current,request,param,producible,types,supplier,the,media,types,that,can,be,produced,for,the,current,request,return,the,selected,media,type,or,code,null;protected,media,type,select,media,type,server,web,exchange,exchange,supplier,list,media,type,producible,types,supplier,list,media,type,acceptable,types,get,acceptable,types,exchange,list,media,type,producible,types,get,producible,types,exchange,producible,types,supplier,set,media,type,compatible,media,types,new,linked,hash,set,for,media,type,acceptable,acceptable,types,for,media,type,producible,producible,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,select,more,specific,media,type,acceptable,producible,list,media,type,result,new,array,list,compatible,media,types,media,type,sort,by,specificity,and,quality,result,for,media,type,media,type,compatible,media,types,if,media,type,is,concrete,return,media,type,else,if,media,type,equals,media,type,all,media,type,equals,return,media,type,return,null
HandlerResultHandlerSupport -> protected MediaType selectMediaType(ServerWebExchange exchange, 			Supplier<List<MediaType>> producibleTypesSupplier);1494019148;Select the best media type for the current request through a content_negotiation algorithm._@param exchange the current request_@param producibleTypesSupplier the media types that can be produced for the current request_@return the selected media type or {@code null};protected MediaType selectMediaType(ServerWebExchange exchange,_			Supplier<List<MediaType>> producibleTypesSupplier) {__		List<MediaType> acceptableTypes = getAcceptableTypes(exchange)__		List<MediaType> producibleTypes = getProducibleTypes(exchange, producibleTypesSupplier)___		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<>()__		for (MediaType acceptable : acceptableTypes) {_			for (MediaType producible : producibleTypes) {_				if (acceptable.isCompatibleWith(producible)) {_					compatibleMediaTypes.add(selectMoreSpecificMediaType(acceptable, producible))__				}_			}_		}__		List<MediaType> result = new ArrayList<>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(result)___		for (MediaType mediaType : compatibleMediaTypes) {_			if (mediaType.isConcrete()) {_				return mediaType__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION_ALL)) {_				return MediaType.APPLICATION_OCTET_STREAM__			}_		}__		return null__	};select,the,best,media,type,for,the,current,request,through,a,content,negotiation,algorithm,param,exchange,the,current,request,param,producible,types,supplier,the,media,types,that,can,be,produced,for,the,current,request,return,the,selected,media,type,or,code,null;protected,media,type,select,media,type,server,web,exchange,exchange,supplier,list,media,type,producible,types,supplier,list,media,type,acceptable,types,get,acceptable,types,exchange,list,media,type,producible,types,get,producible,types,exchange,producible,types,supplier,set,media,type,compatible,media,types,new,linked,hash,set,for,media,type,acceptable,acceptable,types,for,media,type,producible,producible,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,select,more,specific,media,type,acceptable,producible,list,media,type,result,new,array,list,compatible,media,types,media,type,sort,by,specificity,and,quality,result,for,media,type,media,type,compatible,media,types,if,media,type,is,concrete,return,media,type,else,if,media,type,equals,media,type,all,media,type,equals,return,media,type,return,null
HandlerResultHandlerSupport -> protected MediaType selectMediaType(ServerWebExchange exchange, 			Supplier<List<MediaType>> producibleTypesSupplier);1495591054;Select the best media type for the current request through a content_negotiation algorithm._@param exchange the current request_@param producibleTypesSupplier the media types that can be produced for the current request_@return the selected media type or {@code null};protected MediaType selectMediaType(ServerWebExchange exchange,_			Supplier<List<MediaType>> producibleTypesSupplier) {__		List<MediaType> acceptableTypes = getAcceptableTypes(exchange)__		List<MediaType> producibleTypes = getProducibleTypes(exchange, producibleTypesSupplier)___		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<>()__		for (MediaType acceptable : acceptableTypes) {_			for (MediaType producible : producibleTypes) {_				if (acceptable.isCompatibleWith(producible)) {_					compatibleMediaTypes.add(selectMoreSpecificMediaType(acceptable, producible))__				}_			}_		}__		List<MediaType> result = new ArrayList<>(compatibleMediaTypes)__		MediaType.sortBySpecificityAndQuality(result)___		for (MediaType mediaType : compatibleMediaTypes) {_			if (mediaType.isConcrete()) {_				return mediaType__			}_			else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION_ALL)) {_				return MediaType.APPLICATION_OCTET_STREAM__			}_		}__		return null__	};select,the,best,media,type,for,the,current,request,through,a,content,negotiation,algorithm,param,exchange,the,current,request,param,producible,types,supplier,the,media,types,that,can,be,produced,for,the,current,request,return,the,selected,media,type,or,code,null;protected,media,type,select,media,type,server,web,exchange,exchange,supplier,list,media,type,producible,types,supplier,list,media,type,acceptable,types,get,acceptable,types,exchange,list,media,type,producible,types,get,producible,types,exchange,producible,types,supplier,set,media,type,compatible,media,types,new,linked,hash,set,for,media,type,acceptable,acceptable,types,for,media,type,producible,producible,types,if,acceptable,is,compatible,with,producible,compatible,media,types,add,select,more,specific,media,type,acceptable,producible,list,media,type,result,new,array,list,compatible,media,types,media,type,sort,by,specificity,and,quality,result,for,media,type,media,type,compatible,media,types,if,media,type,is,concrete,return,media,type,else,if,media,type,equals,media,type,all,media,type,equals,return,media,type,return,null
HandlerResultHandlerSupport -> @Nullable 	protected ReactiveAdapter getAdapter(HandlerResult result);1495868221;Get a {@code ReactiveAdapter} for the top-level return value type._@return the matching adapter or {@code null};@Nullable_	protected ReactiveAdapter getAdapter(HandlerResult result) {_		Class<?> returnType = result.getReturnType().getRawClass()__		return getAdapterRegistry().getAdapter(returnType, result.getReturnValue())__	};get,a,code,reactive,adapter,for,the,top,level,return,value,type,return,the,matching,adapter,or,code,null;nullable,protected,reactive,adapter,get,adapter,handler,result,result,class,return,type,result,get,return,type,get,raw,class,return,get,adapter,registry,get,adapter,return,type,result,get,return,value
HandlerResultHandlerSupport -> @Nullable 	protected ReactiveAdapter getAdapter(HandlerResult result);1498762530;Get a {@code ReactiveAdapter} for the top-level return value type._@return the matching adapter or {@code null};@Nullable_	protected ReactiveAdapter getAdapter(HandlerResult result) {_		Class<?> returnType = result.getReturnType().getRawClass()__		return getAdapterRegistry().getAdapter(returnType, result.getReturnValue())__	};get,a,code,reactive,adapter,for,the,top,level,return,value,type,return,the,matching,adapter,or,code,null;nullable,protected,reactive,adapter,get,adapter,handler,result,result,class,return,type,result,get,return,type,get,raw,class,return,get,adapter,registry,get,adapter,return,type,result,get,return,value
HandlerResultHandlerSupport -> @Nullable 	protected ReactiveAdapter getAdapter(HandlerResult result);1498957628;Get a {@code ReactiveAdapter} for the top-level return value type._@return the matching adapter or {@code null};@Nullable_	protected ReactiveAdapter getAdapter(HandlerResult result) {_		Class<?> returnType = result.getReturnType().getRawClass()__		return getAdapterRegistry().getAdapter(returnType, result.getReturnValue())__	};get,a,code,reactive,adapter,for,the,top,level,return,value,type,return,the,matching,adapter,or,code,null;nullable,protected,reactive,adapter,get,adapter,handler,result,result,class,return,type,result,get,return,type,get,raw,class,return,get,adapter,registry,get,adapter,return,type,result,get,return,value
HandlerResultHandlerSupport -> @Nullable 	protected ReactiveAdapter getAdapter(HandlerResult result);1510344303;Get a {@code ReactiveAdapter} for the top-level return value type._@return the matching adapter or {@code null};@Nullable_	protected ReactiveAdapter getAdapter(HandlerResult result) {_		Class<?> returnType = result.getReturnType().getRawClass()__		return getAdapterRegistry().getAdapter(returnType, result.getReturnValue())__	};get,a,code,reactive,adapter,for,the,top,level,return,value,type,return,the,matching,adapter,or,code,null;nullable,protected,reactive,adapter,get,adapter,handler,result,result,class,return,type,result,get,return,type,get,raw,class,return,get,adapter,registry,get,adapter,return,type,result,get,return,value
HandlerResultHandlerSupport -> @Nullable 	protected ReactiveAdapter getAdapter(HandlerResult result);1512193423;Get a {@code ReactiveAdapter} for the top-level return value type._@return the matching adapter or {@code null};@Nullable_	protected ReactiveAdapter getAdapter(HandlerResult result) {_		Class<?> returnType = result.getReturnType().getRawClass()__		return getAdapterRegistry().getAdapter(returnType, result.getReturnValue())__	};get,a,code,reactive,adapter,for,the,top,level,return,value,type,return,the,matching,adapter,or,code,null;nullable,protected,reactive,adapter,get,adapter,handler,result,result,class,return,type,result,get,return,type,get,raw,class,return,get,adapter,registry,get,adapter,return,type,result,get,return,value
HandlerResultHandlerSupport -> @Nullable 	protected ReactiveAdapter getAdapter(HandlerResult result);1522184065;Get a {@code ReactiveAdapter} for the top-level return value type._@return the matching adapter or {@code null};@Nullable_	protected ReactiveAdapter getAdapter(HandlerResult result) {_		Class<?> returnType = result.getReturnType().getRawClass()__		return getAdapterRegistry().getAdapter(returnType, result.getReturnValue())__	};get,a,code,reactive,adapter,for,the,top,level,return,value,type,return,the,matching,adapter,or,code,null;nullable,protected,reactive,adapter,get,adapter,handler,result,result,class,return,type,result,get,return,type,get,raw,class,return,get,adapter,registry,get,adapter,return,type,result,get,return,value
HandlerResultHandlerSupport -> @Nullable 	protected ReactiveAdapter getAdapter(HandlerResult result);1529721864;Get a {@code ReactiveAdapter} for the top-level return value type._@return the matching adapter or {@code null};@Nullable_	protected ReactiveAdapter getAdapter(HandlerResult result) {_		Class<?> returnType = result.getReturnType().getRawClass()__		return getAdapterRegistry().getAdapter(returnType, result.getReturnValue())__	};get,a,code,reactive,adapter,for,the,top,level,return,value,type,return,the,matching,adapter,or,code,null;nullable,protected,reactive,adapter,get,adapter,handler,result,result,class,return,type,result,get,return,type,get,raw,class,return,get,adapter,registry,get,adapter,return,type,result,get,return,value
HandlerResultHandlerSupport -> @Nullable 	protected ReactiveAdapter getAdapter(HandlerResult result);1530793633;Get a {@code ReactiveAdapter} for the top-level return value type._@return the matching adapter or {@code null};@Nullable_	protected ReactiveAdapter getAdapter(HandlerResult result) {_		Class<?> returnType = result.getReturnType().getRawClass()__		return getAdapterRegistry().getAdapter(returnType, result.getReturnValue())__	};get,a,code,reactive,adapter,for,the,top,level,return,value,type,return,the,matching,adapter,or,code,null;nullable,protected,reactive,adapter,get,adapter,handler,result,result,class,return,type,result,get,return,type,get,raw,class,return,get,adapter,registry,get,adapter,return,type,result,get,return,value
HandlerResultHandlerSupport -> @Nullable 	protected ReactiveAdapter getAdapter(HandlerResult result);1532479646;Get a {@code ReactiveAdapter} for the top-level return value type._@return the matching adapter or {@code null};@Nullable_	protected ReactiveAdapter getAdapter(HandlerResult result) {_		Class<?> returnType = result.getReturnType().getRawClass()__		return getAdapterRegistry().getAdapter(returnType, result.getReturnValue())__	};get,a,code,reactive,adapter,for,the,top,level,return,value,type,return,the,matching,adapter,or,code,null;nullable,protected,reactive,adapter,get,adapter,handler,result,result,class,return,type,result,get,return,type,get,raw,class,return,get,adapter,registry,get,adapter,return,type,result,get,return,value
HandlerResultHandlerSupport -> @Nullable 	protected ReactiveAdapter getAdapter(HandlerResult result);1542050977;Get a {@code ReactiveAdapter} for the top-level return value type._@return the matching adapter, or {@code null} if none;@Nullable_	protected ReactiveAdapter getAdapter(HandlerResult result) {_		return getAdapterRegistry().getAdapter(result.getReturnType().resolve(), result.getReturnValue())__	};get,a,code,reactive,adapter,for,the,top,level,return,value,type,return,the,matching,adapter,or,code,null,if,none;nullable,protected,reactive,adapter,get,adapter,handler,result,result,return,get,adapter,registry,get,adapter,result,get,return,type,resolve,result,get,return,value
HandlerResultHandlerSupport -> @Nullable 	protected ReactiveAdapter getAdapter(HandlerResult result);1546457570;Get a {@code ReactiveAdapter} for the top-level return value type._@return the matching adapter, or {@code null} if none;@Nullable_	protected ReactiveAdapter getAdapter(HandlerResult result) {_		return getAdapterRegistry().getAdapter(result.getReturnType().resolve(), result.getReturnValue())__	};get,a,code,reactive,adapter,for,the,top,level,return,value,type,return,the,matching,adapter,or,code,null,if,none;nullable,protected,reactive,adapter,get,adapter,handler,result,result,return,get,adapter,registry,get,adapter,result,get,return,type,resolve,result,get,return,value
HandlerResultHandlerSupport -> public ReactiveAdapterRegistry getAdapterRegistry();1489535791;Return the configured {@link ReactiveAdapterRegistry}.;public ReactiveAdapterRegistry getAdapterRegistry() {_		return this.adapterRegistry__	};return,the,configured,link,reactive,adapter,registry;public,reactive,adapter,registry,get,adapter,registry,return,this,adapter,registry
HandlerResultHandlerSupport -> public ReactiveAdapterRegistry getAdapterRegistry();1494019148;Return the configured {@link ReactiveAdapterRegistry}.;public ReactiveAdapterRegistry getAdapterRegistry() {_		return this.adapterRegistry__	};return,the,configured,link,reactive,adapter,registry;public,reactive,adapter,registry,get,adapter,registry,return,this,adapter,registry
HandlerResultHandlerSupport -> public ReactiveAdapterRegistry getAdapterRegistry();1495591054;Return the configured {@link ReactiveAdapterRegistry}.;public ReactiveAdapterRegistry getAdapterRegistry() {_		return this.adapterRegistry__	};return,the,configured,link,reactive,adapter,registry;public,reactive,adapter,registry,get,adapter,registry,return,this,adapter,registry
HandlerResultHandlerSupport -> public ReactiveAdapterRegistry getAdapterRegistry();1495868221;Return the configured {@link ReactiveAdapterRegistry}.;public ReactiveAdapterRegistry getAdapterRegistry() {_		return this.adapterRegistry__	};return,the,configured,link,reactive,adapter,registry;public,reactive,adapter,registry,get,adapter,registry,return,this,adapter,registry
HandlerResultHandlerSupport -> public ReactiveAdapterRegistry getAdapterRegistry();1498762530;Return the configured {@link ReactiveAdapterRegistry}.;public ReactiveAdapterRegistry getAdapterRegistry() {_		return this.adapterRegistry__	};return,the,configured,link,reactive,adapter,registry;public,reactive,adapter,registry,get,adapter,registry,return,this,adapter,registry
HandlerResultHandlerSupport -> public ReactiveAdapterRegistry getAdapterRegistry();1498957628;Return the configured {@link ReactiveAdapterRegistry}.;public ReactiveAdapterRegistry getAdapterRegistry() {_		return this.adapterRegistry__	};return,the,configured,link,reactive,adapter,registry;public,reactive,adapter,registry,get,adapter,registry,return,this,adapter,registry
HandlerResultHandlerSupport -> public ReactiveAdapterRegistry getAdapterRegistry();1510344303;Return the configured {@link ReactiveAdapterRegistry}.;public ReactiveAdapterRegistry getAdapterRegistry() {_		return this.adapterRegistry__	};return,the,configured,link,reactive,adapter,registry;public,reactive,adapter,registry,get,adapter,registry,return,this,adapter,registry
HandlerResultHandlerSupport -> public ReactiveAdapterRegistry getAdapterRegistry();1512193423;Return the configured {@link ReactiveAdapterRegistry}.;public ReactiveAdapterRegistry getAdapterRegistry() {_		return this.adapterRegistry__	};return,the,configured,link,reactive,adapter,registry;public,reactive,adapter,registry,get,adapter,registry,return,this,adapter,registry
HandlerResultHandlerSupport -> public ReactiveAdapterRegistry getAdapterRegistry();1522184065;Return the configured {@link ReactiveAdapterRegistry}.;public ReactiveAdapterRegistry getAdapterRegistry() {_		return this.adapterRegistry__	};return,the,configured,link,reactive,adapter,registry;public,reactive,adapter,registry,get,adapter,registry,return,this,adapter,registry
HandlerResultHandlerSupport -> public ReactiveAdapterRegistry getAdapterRegistry();1529721864;Return the configured {@link ReactiveAdapterRegistry}.;public ReactiveAdapterRegistry getAdapterRegistry() {_		return this.adapterRegistry__	};return,the,configured,link,reactive,adapter,registry;public,reactive,adapter,registry,get,adapter,registry,return,this,adapter,registry
HandlerResultHandlerSupport -> public ReactiveAdapterRegistry getAdapterRegistry();1530793633;Return the configured {@link ReactiveAdapterRegistry}.;public ReactiveAdapterRegistry getAdapterRegistry() {_		return this.adapterRegistry__	};return,the,configured,link,reactive,adapter,registry;public,reactive,adapter,registry,get,adapter,registry,return,this,adapter,registry
HandlerResultHandlerSupport -> public ReactiveAdapterRegistry getAdapterRegistry();1532479646;Return the configured {@link ReactiveAdapterRegistry}.;public ReactiveAdapterRegistry getAdapterRegistry() {_		return this.adapterRegistry__	};return,the,configured,link,reactive,adapter,registry;public,reactive,adapter,registry,get,adapter,registry,return,this,adapter,registry
HandlerResultHandlerSupport -> public ReactiveAdapterRegistry getAdapterRegistry();1542050977;Return the configured {@link ReactiveAdapterRegistry}.;public ReactiveAdapterRegistry getAdapterRegistry() {_		return this.adapterRegistry__	};return,the,configured,link,reactive,adapter,registry;public,reactive,adapter,registry,get,adapter,registry,return,this,adapter,registry
HandlerResultHandlerSupport -> public ReactiveAdapterRegistry getAdapterRegistry();1546457570;Return the configured {@link ReactiveAdapterRegistry}.;public ReactiveAdapterRegistry getAdapterRegistry() {_		return this.adapterRegistry__	};return,the,configured,link,reactive,adapter,registry;public,reactive,adapter,registry,get,adapter,registry,return,this,adapter,registry
