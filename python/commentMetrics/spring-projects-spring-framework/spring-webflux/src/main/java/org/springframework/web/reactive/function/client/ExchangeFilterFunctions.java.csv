# id;timestamp;commentText;codeText;commentWords;codeWords
ExchangeFilterFunctions -> public static ExchangeFilterFunction basicAuthentication(String user, String password);1528924489;Return a filter for HTTP Basic Authentication that adds an authorization_header, based on the given user and password._<p>Note that Basic Authentication only supports characters in the_{@link StandardCharsets#ISO_8859_1 ISO-8859-1} character set._@param user the user_@param password the password_@return the filter for basic authentication_@throws IllegalArgumentException if either {@code user} or_{@code password} contain characters that cannot be encoded to ISO-8859-1.;public static ExchangeFilterFunction basicAuthentication(String user, String password) {_		Assert.notNull(user, "'user' must not be null")__		Assert.notNull(password, "'password' must not be null")__		checkIllegalCharacters(user, password)__		return basicAuthenticationInternal(request -> Optional.of(new Credentials(user, password)))__	};return,a,filter,for,http,basic,authentication,that,adds,an,authorization,header,based,on,the,given,user,and,password,p,note,that,basic,authentication,only,supports,characters,in,the,link,standard,charsets,iso,8859,1,character,set,param,user,the,user,param,password,the,password,return,the,filter,for,basic,authentication,throws,illegal,argument,exception,if,either,code,user,or,code,password,contain,characters,that,cannot,be,encoded,to,iso,8859,1;public,static,exchange,filter,function,basic,authentication,string,user,string,password,assert,not,null,user,user,must,not,be,null,assert,not,null,password,password,must,not,be,null,check,illegal,characters,user,password,return,basic,authentication,internal,request,optional,of,new,credentials,user,password
ExchangeFilterFunctions -> public static ExchangeFilterFunction basicAuthentication(String user, String password);1530190293;Return a filter for HTTP Basic Authentication that adds an authorization_header, based on the given user and password._<p>Note that Basic Authentication only supports characters in the_{@link StandardCharsets#ISO_8859_1 ISO-8859-1} character set._@param user the user_@param password the password_@return the filter for basic authentication_@throws IllegalArgumentException if either {@code user} or_{@code password} contain characters that cannot be encoded to ISO-8859-1.;public static ExchangeFilterFunction basicAuthentication(String user, String password) {_		Assert.notNull(user, "'user' must not be null")__		Assert.notNull(password, "'password' must not be null")__		checkIllegalCharacters(user, password)__		return basicAuthenticationInternal(request -> Optional.of(new Credentials(user, password)))__	};return,a,filter,for,http,basic,authentication,that,adds,an,authorization,header,based,on,the,given,user,and,password,p,note,that,basic,authentication,only,supports,characters,in,the,link,standard,charsets,iso,8859,1,character,set,param,user,the,user,param,password,the,password,return,the,filter,for,basic,authentication,throws,illegal,argument,exception,if,either,code,user,or,code,password,contain,characters,that,cannot,be,encoded,to,iso,8859,1;public,static,exchange,filter,function,basic,authentication,string,user,string,password,assert,not,null,user,user,must,not,be,null,assert,not,null,password,password,must,not,be,null,check,illegal,characters,user,password,return,basic,authentication,internal,request,optional,of,new,credentials,user,password
ExchangeFilterFunctions -> public static ExchangeFilterFunction basicAuthentication(String user, String password);1533625827;Return a filter that applies HTTP Basic Authentication to the request_headers via {@link HttpHeaders#setBasicAuth(String, String)}._@param user the user_@param password the password_@return the filter to add authentication headers with_@see HttpHeaders#setBasicAuth(String, String)_@see HttpHeaders#setBasicAuth(String, String, Charset);public static ExchangeFilterFunction basicAuthentication(String user, String password) {_		return (request, next) ->_				next.exchange(ClientRequest.from(request)_						.headers(headers -> headers.setBasicAuth(user, password))_						.build())__	};return,a,filter,that,applies,http,basic,authentication,to,the,request,headers,via,link,http,headers,set,basic,auth,string,string,param,user,the,user,param,password,the,password,return,the,filter,to,add,authentication,headers,with,see,http,headers,set,basic,auth,string,string,see,http,headers,set,basic,auth,string,string,charset;public,static,exchange,filter,function,basic,authentication,string,user,string,password,return,request,next,next,exchange,client,request,from,request,headers,headers,headers,set,basic,auth,user,password,build
ExchangeFilterFunctions -> public static ExchangeFilterFunction basicAuthentication(String user, String password);1539119626;Return a filter that applies HTTP Basic Authentication to the request_headers via {@link HttpHeaders#setBasicAuth(String, String)}._@param user the user_@param password the password_@return the filter to add authentication headers with_@see HttpHeaders#setBasicAuth(String, String)_@see HttpHeaders#setBasicAuth(String, String, Charset);public static ExchangeFilterFunction basicAuthentication(String user, String password) {_		return (request, next) ->_				next.exchange(ClientRequest.from(request)_						.headers(headers -> headers.setBasicAuth(user, password))_						.build())__	};return,a,filter,that,applies,http,basic,authentication,to,the,request,headers,via,link,http,headers,set,basic,auth,string,string,param,user,the,user,param,password,the,password,return,the,filter,to,add,authentication,headers,with,see,http,headers,set,basic,auth,string,string,see,http,headers,set,basic,auth,string,string,charset;public,static,exchange,filter,function,basic,authentication,string,user,string,password,return,request,next,next,exchange,client,request,from,request,headers,headers,headers,set,basic,auth,user,password,build
ExchangeFilterFunctions -> public static ExchangeFilterFunction basicAuthentication(String user, String password);1542037423;Return a filter that applies HTTP Basic Authentication to the request_headers via {@link HttpHeaders#setBasicAuth(String, String)}._@param user the user_@param password the password_@return the filter to add authentication headers with_@see HttpHeaders#setBasicAuth(String, String)_@see HttpHeaders#setBasicAuth(String, String, Charset);public static ExchangeFilterFunction basicAuthentication(String user, String password) {_		return (request, next) ->_				next.exchange(ClientRequest.from(request)_						.headers(headers -> headers.setBasicAuth(user, password))_						.build())__	};return,a,filter,that,applies,http,basic,authentication,to,the,request,headers,via,link,http,headers,set,basic,auth,string,string,param,user,the,user,param,password,the,password,return,the,filter,to,add,authentication,headers,with,see,http,headers,set,basic,auth,string,string,see,http,headers,set,basic,auth,string,string,charset;public,static,exchange,filter,function,basic,authentication,string,user,string,password,return,request,next,next,exchange,client,request,from,request,headers,headers,headers,set,basic,auth,user,password,build
ExchangeFilterFunctions -> @Deprecated 	public static ExchangeFilterFunction basicAuthentication();1531147311;Variant of {@link #basicAuthentication(String, String)} that looks up_the {@link Credentials Credentials} provided in a_{@linkplain ClientRequest#attributes() request attribute}, or if the_attribute is not found, the authorization header is not added._@return the filter for basic authentication_@see #BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE_@see Credentials#basicAuthenticationCredentials(String, String)_@deprecated as of Spring 5.1, with no direct replacement;@Deprecated_	public static ExchangeFilterFunction basicAuthentication() {_		return basicAuthenticationInternal(request ->_				request.attribute(BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE)_						.map(credentials -> (Credentials) credentials))__	};variant,of,link,basic,authentication,string,string,that,looks,up,the,link,credentials,credentials,provided,in,a,linkplain,client,request,attributes,request,attribute,or,if,the,attribute,is,not,found,the,authorization,header,is,not,added,return,the,filter,for,basic,authentication,see,see,credentials,basic,authentication,credentials,string,string,deprecated,as,of,spring,5,1,with,no,direct,replacement;deprecated,public,static,exchange,filter,function,basic,authentication,return,basic,authentication,internal,request,request,attribute,map,credentials,credentials,credentials
ExchangeFilterFunctions -> @Deprecated 	public static ExchangeFilterFunction basicAuthentication();1533034998;Variant of {@link #basicAuthentication(String, String)} that looks up_the {@link Credentials Credentials} provided in a_{@linkplain ClientRequest#attributes() request attribute}, or if the_attribute is not found, the authorization header is not added._@return the filter for basic authentication_@see #BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE_@see Credentials#basicAuthenticationCredentials(String, String)_@deprecated as of Spring 5.1, with no direct replacement;@Deprecated_	public static ExchangeFilterFunction basicAuthentication() {_		return basicAuthenticationInternal(request ->_				request.attribute(BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE)_						.map(credentials -> (Credentials) credentials))__	};variant,of,link,basic,authentication,string,string,that,looks,up,the,link,credentials,credentials,provided,in,a,linkplain,client,request,attributes,request,attribute,or,if,the,attribute,is,not,found,the,authorization,header,is,not,added,return,the,filter,for,basic,authentication,see,see,credentials,basic,authentication,credentials,string,string,deprecated,as,of,spring,5,1,with,no,direct,replacement;deprecated,public,static,exchange,filter,function,basic,authentication,return,basic,authentication,internal,request,request,attribute,map,credentials,credentials,credentials
ExchangeFilterFunctions -> @Deprecated 	public static ExchangeFilterFunction basicAuthentication();1533233962;Variant of {@link #basicAuthentication(String, String)} that looks up_the {@link Credentials Credentials} provided in a_{@linkplain ClientRequest#attributes() request attribute}, or if the_attribute is not found, the authorization header is not added._@return the filter for basic authentication_@see #BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE_@see Credentials#basicAuthenticationCredentials(String, String)_@deprecated as of Spring 5.1, with no direct replacement;@Deprecated_	public static ExchangeFilterFunction basicAuthentication() {_		return basicAuthenticationInternal(request ->_				request.attribute(BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE)_						.map(credentials -> (Credentials) credentials))__	};variant,of,link,basic,authentication,string,string,that,looks,up,the,link,credentials,credentials,provided,in,a,linkplain,client,request,attributes,request,attribute,or,if,the,attribute,is,not,found,the,authorization,header,is,not,added,return,the,filter,for,basic,authentication,see,see,credentials,basic,authentication,credentials,string,string,deprecated,as,of,spring,5,1,with,no,direct,replacement;deprecated,public,static,exchange,filter,function,basic,authentication,return,basic,authentication,internal,request,request,attribute,map,credentials,credentials,credentials
ExchangeFilterFunctions -> @Deprecated 	public static ExchangeFilterFunction basicAuthentication();1533573240;Variant of {@link #basicAuthentication(String, String)} that looks up_the {@link Credentials Credentials} provided in a_{@linkplain ClientRequest#attributes() request attribute}, or if the_attribute is not found, the authorization header is not added._@return the filter for basic authentication_@see #BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE_@see Credentials#basicAuthenticationCredentials(String, String)_@deprecated as of Spring 5.1, with no direct replacement;@Deprecated_	public static ExchangeFilterFunction basicAuthentication() {_		return basicAuthenticationInternal(request ->_				request.attribute(BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE)_						.map(credentials -> (Credentials) credentials))__	};variant,of,link,basic,authentication,string,string,that,looks,up,the,link,credentials,credentials,provided,in,a,linkplain,client,request,attributes,request,attribute,or,if,the,attribute,is,not,found,the,authorization,header,is,not,added,return,the,filter,for,basic,authentication,see,see,credentials,basic,authentication,credentials,string,string,deprecated,as,of,spring,5,1,with,no,direct,replacement;deprecated,public,static,exchange,filter,function,basic,authentication,return,basic,authentication,internal,request,request,attribute,map,credentials,credentials,credentials
ExchangeFilterFunctions -> @Deprecated 	public static ExchangeFilterFunction basicAuthentication();1533625827;Variant of {@link #basicAuthentication(String, String)} that looks up_the {@link Credentials Credentials} in a_{@link #BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE request attribute}._@return the filter to use_@see Credentials_@deprecated as of Spring 5.1 in favor of using_{@link HttpHeaders#setBasicAuth(String, String)} while building the request.;@Deprecated_	public static ExchangeFilterFunction basicAuthentication() {__		return (request, next) -> {_			Credentials cred = (Credentials) request_					.attribute(BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE).orElse(null)___			if (cred != null) {_				return next.exchange(ClientRequest.from(request)_						.headers(headers -> headers.setBasicAuth(cred.username, cred.password))_						.build())__			}_			else {_				return next.exchange(request)__			}_		}__	};variant,of,link,basic,authentication,string,string,that,looks,up,the,link,credentials,credentials,in,a,link,request,attribute,return,the,filter,to,use,see,credentials,deprecated,as,of,spring,5,1,in,favor,of,using,link,http,headers,set,basic,auth,string,string,while,building,the,request;deprecated,public,static,exchange,filter,function,basic,authentication,return,request,next,credentials,cred,credentials,request,attribute,or,else,null,if,cred,null,return,next,exchange,client,request,from,request,headers,headers,headers,set,basic,auth,cred,username,cred,password,build,else,return,next,exchange,request
ExchangeFilterFunctions -> @Deprecated 	public static ExchangeFilterFunction basicAuthentication();1539119626;Variant of {@link #basicAuthentication(String, String)} that looks up_the {@link Credentials Credentials} in a_{@link #BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE request attribute}._@return the filter to use_@see Credentials_@deprecated as of Spring 5.1 in favor of using_{@link HttpHeaders#setBasicAuth(String, String)} while building the request.;@Deprecated_	public static ExchangeFilterFunction basicAuthentication() {_		return (request, next) -> {_			Credentials cred = (Credentials) request_					.attribute(BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE).orElse(null)__			if (cred != null) {_				return next.exchange(ClientRequest.from(request)_						.headers(headers -> headers.setBasicAuth(cred.username, cred.password))_						.build())__			}_			else {_				return next.exchange(request)__			}_		}__	};variant,of,link,basic,authentication,string,string,that,looks,up,the,link,credentials,credentials,in,a,link,request,attribute,return,the,filter,to,use,see,credentials,deprecated,as,of,spring,5,1,in,favor,of,using,link,http,headers,set,basic,auth,string,string,while,building,the,request;deprecated,public,static,exchange,filter,function,basic,authentication,return,request,next,credentials,cred,credentials,request,attribute,or,else,null,if,cred,null,return,next,exchange,client,request,from,request,headers,headers,headers,set,basic,auth,cred,username,cred,password,build,else,return,next,exchange,request
ExchangeFilterFunctions -> @Deprecated 	public static ExchangeFilterFunction basicAuthentication();1542037423;Variant of {@link #basicAuthentication(String, String)} that looks up_the {@link Credentials Credentials} in a_{@link #BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE request attribute}._@return the filter to use_@see Credentials_@deprecated as of Spring 5.1 in favor of using_{@link HttpHeaders#setBasicAuth(String, String)} while building the request.;@Deprecated_	public static ExchangeFilterFunction basicAuthentication() {_		return (request, next) -> {_			Object attr = request.attributes().get(BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE)__			if (attr instanceof Credentials) {_				Credentials cred = (Credentials) attr__				return next.exchange(ClientRequest.from(request)_						.headers(headers -> headers.setBasicAuth(cred.username, cred.password))_						.build())__			}_			else {_				return next.exchange(request)__			}_		}__	};variant,of,link,basic,authentication,string,string,that,looks,up,the,link,credentials,credentials,in,a,link,request,attribute,return,the,filter,to,use,see,credentials,deprecated,as,of,spring,5,1,in,favor,of,using,link,http,headers,set,basic,auth,string,string,while,building,the,request;deprecated,public,static,exchange,filter,function,basic,authentication,return,request,next,object,attr,request,attributes,get,if,attr,instanceof,credentials,credentials,cred,credentials,attr,return,next,exchange,client,request,from,request,headers,headers,headers,set,basic,auth,cred,username,cred,password,build,else,return,next,exchange,request
ExchangeFilterFunctions -> public static ExchangeFilterFunction basicAuthentication(String username, String password);1485986572;Return a filter that adds an Authorization header for HTTP Basic Authentication._@param username the username to use_@param password the password to use_@return the {@link ExchangeFilterFunction} that adds the Authorization header;public static ExchangeFilterFunction basicAuthentication(String username, String password) {_		Assert.notNull(username, "'username' must not be null")__		Assert.notNull(password, "'password' must not be null")___		return ExchangeFilterFunction.ofRequestProcessor(_				clientRequest -> {_					String authorization = authorization(username, password)__					ClientRequest<?> authorizedRequest = ClientRequest.from(clientRequest)_							.header(HttpHeaders.AUTHORIZATION, authorization)_							.body(clientRequest.inserter())__					return Mono.just(authorizedRequest)__				})__	};return,a,filter,that,adds,an,authorization,header,for,http,basic,authentication,param,username,the,username,to,use,param,password,the,password,to,use,return,the,link,exchange,filter,function,that,adds,the,authorization,header;public,static,exchange,filter,function,basic,authentication,string,username,string,password,assert,not,null,username,username,must,not,be,null,assert,not,null,password,password,must,not,be,null,return,exchange,filter,function,of,request,processor,client,request,string,authorization,authorization,username,password,client,request,authorized,request,client,request,from,client,request,header,http,headers,authorization,authorization,body,client,request,inserter,return,mono,just,authorized,request
ExchangeFilterFunctions -> public static ExchangeFilterFunction basicAuthentication(String username, String password);1486990463;Return a filter that adds an Authorization header for HTTP Basic Authentication._@param username the username to use_@param password the password to use_@return the {@link ExchangeFilterFunction} that adds the Authorization header;public static ExchangeFilterFunction basicAuthentication(String username, String password) {_		Assert.notNull(username, "'username' must not be null")__		Assert.notNull(password, "'password' must not be null")___		return ExchangeFilterFunction.ofRequestProcessor(_				clientRequest -> {_					String authorization = authorization(username, password)__					ClientRequest authorizedRequest = ClientRequest.from(clientRequest)_							.header(HttpHeaders.AUTHORIZATION, authorization)_							.build()__					return Mono.just(authorizedRequest)__				})__	};return,a,filter,that,adds,an,authorization,header,for,http,basic,authentication,param,username,the,username,to,use,param,password,the,password,to,use,return,the,link,exchange,filter,function,that,adds,the,authorization,header;public,static,exchange,filter,function,basic,authentication,string,username,string,password,assert,not,null,username,username,must,not,be,null,assert,not,null,password,password,must,not,be,null,return,exchange,filter,function,of,request,processor,client,request,string,authorization,authorization,username,password,client,request,authorized,request,client,request,from,client,request,header,http,headers,authorization,authorization,build,return,mono,just,authorized,request
ExchangeFilterFunctions -> public static ExchangeFilterFunction basicAuthentication(String username, String password);1496923239;Return a filter that adds an Authorization header for HTTP Basic Authentication._@param username the username to use_@param password the password to use_@return the {@link ExchangeFilterFunction} that adds the Authorization header;public static ExchangeFilterFunction basicAuthentication(String username, String password) {_		Assert.notNull(username, "'username' must not be null")__		Assert.notNull(password, "'password' must not be null")___		return ExchangeFilterFunction.ofRequestProcessor(_				clientRequest -> {_					String authorization = authorization(username, password)__					ClientRequest authorizedRequest = ClientRequest.from(clientRequest)_							.headers(headers -> {_								headers.set(HttpHeaders.AUTHORIZATION, authorization)__							})_							.build()__					return Mono.just(authorizedRequest)__				})__	};return,a,filter,that,adds,an,authorization,header,for,http,basic,authentication,param,username,the,username,to,use,param,password,the,password,to,use,return,the,link,exchange,filter,function,that,adds,the,authorization,header;public,static,exchange,filter,function,basic,authentication,string,username,string,password,assert,not,null,username,username,must,not,be,null,assert,not,null,password,password,must,not,be,null,return,exchange,filter,function,of,request,processor,client,request,string,authorization,authorization,username,password,client,request,authorized,request,client,request,from,client,request,headers,headers,headers,set,http,headers,authorization,authorization,build,return,mono,just,authorized,request
ExchangeFilterFunctions -> public static ExchangeFilterFunction basicAuthentication(String username, String password);1499259158;Return a filter that adds an Authorization header for HTTP Basic Authentication, based on_the given username and password._@param username the username to use_@param password the password to use_@return the {@link ExchangeFilterFunction} that adds the Authorization header;public static ExchangeFilterFunction basicAuthentication(String username, String password) {_		Assert.notNull(username, "'username' must not be null")__		Assert.notNull(password, "'password' must not be null")___		return basicAuthentication(r -> username, r -> password)__	};return,a,filter,that,adds,an,authorization,header,for,http,basic,authentication,based,on,the,given,username,and,password,param,username,the,username,to,use,param,password,the,password,to,use,return,the,link,exchange,filter,function,that,adds,the,authorization,header;public,static,exchange,filter,function,basic,authentication,string,username,string,password,assert,not,null,username,username,must,not,be,null,assert,not,null,password,password,must,not,be,null,return,basic,authentication,r,username,r,password
ExchangeFilterFunctions -> public static ExchangeFilterFunction basicAuthentication(String username, String password);1499780493;Return a filter that adds an Authorization header for HTTP Basic Authentication, based on_the given username and password._@param username the username to use_@param password the password to use_@return the {@link ExchangeFilterFunction} that adds the Authorization header;public static ExchangeFilterFunction basicAuthentication(String username, String password) {_		Assert.notNull(username, "'username' must not be null")__		Assert.notNull(password, "'password' must not be null")___		return basicAuthenticationInternal(r -> Optional.of(new Credentials(username, password)))__	};return,a,filter,that,adds,an,authorization,header,for,http,basic,authentication,based,on,the,given,username,and,password,param,username,the,username,to,use,param,password,the,password,to,use,return,the,link,exchange,filter,function,that,adds,the,authorization,header;public,static,exchange,filter,function,basic,authentication,string,username,string,password,assert,not,null,username,username,must,not,be,null,assert,not,null,password,password,must,not,be,null,return,basic,authentication,internal,r,optional,of,new,credentials,username,password
ExchangeFilterFunctions -> public static ExchangeFilterFunction basicAuthentication(String username, String password);1499783807;Return a filter that adds an Authorization header for HTTP Basic Authentication, based on_the given username and password._@param username the username to use_@param password the password to use_@return the {@link ExchangeFilterFunction} that adds the Authorization header;public static ExchangeFilterFunction basicAuthentication(String username, String password) {_		Assert.notNull(username, "'username' must not be null")__		Assert.notNull(password, "'password' must not be null")___		return basicAuthenticationInternal(r -> Optional.of(new Credentials(username, password)))__	};return,a,filter,that,adds,an,authorization,header,for,http,basic,authentication,based,on,the,given,username,and,password,param,username,the,username,to,use,param,password,the,password,to,use,return,the,link,exchange,filter,function,that,adds,the,authorization,header;public,static,exchange,filter,function,basic,authentication,string,username,string,password,assert,not,null,username,username,must,not,be,null,assert,not,null,password,password,must,not,be,null,return,basic,authentication,internal,r,optional,of,new,credentials,username,password
ExchangeFilterFunctions -> public static ExchangeFilterFunction basicAuthentication(String username, String password);1501164549;Return a filter that adds an Authorization header for HTTP Basic Authentication, based on_the given username and password._<p>Note that Basic Authentication only supports characters in the_{@link StandardCharsets#ISO_8859_1 ISO-8859-1} character set._@param username the username to use_@param password the password to use_@return the {@link ExchangeFilterFunction} that adds the Authorization header_@throws IllegalArgumentException if either {@code username} or {@code password} contain_characters that cannot be encoded to ISO-8859-1;public static ExchangeFilterFunction basicAuthentication(String username, String password) {_		Assert.notNull(username, "'username' must not be null")__		Assert.notNull(password, "'password' must not be null")___		checkIllegalCharacters(username, password)__		return basicAuthenticationInternal(r -> Optional.of(new Credentials(username, password)))__	};return,a,filter,that,adds,an,authorization,header,for,http,basic,authentication,based,on,the,given,username,and,password,p,note,that,basic,authentication,only,supports,characters,in,the,link,standard,charsets,iso,8859,1,character,set,param,username,the,username,to,use,param,password,the,password,to,use,return,the,link,exchange,filter,function,that,adds,the,authorization,header,throws,illegal,argument,exception,if,either,code,username,or,code,password,contain,characters,that,cannot,be,encoded,to,iso,8859,1;public,static,exchange,filter,function,basic,authentication,string,username,string,password,assert,not,null,username,username,must,not,be,null,assert,not,null,password,password,must,not,be,null,check,illegal,characters,username,password,return,basic,authentication,internal,r,optional,of,new,credentials,username,password
ExchangeFilterFunctions -> public static ExchangeFilterFunction basicAuthentication(String username, String password);1508532146;Return a filter that adds an Authorization header for HTTP Basic Authentication, based on_the given username and password._<p>Note that Basic Authentication only supports characters in the_{@link StandardCharsets#ISO_8859_1 ISO-8859-1} character set._@param username the username to use_@param password the password to use_@return the {@link ExchangeFilterFunction} that adds the Authorization header_@throws IllegalArgumentException if either {@code username} or {@code password} contain_characters that cannot be encoded to ISO-8859-1;public static ExchangeFilterFunction basicAuthentication(String username, String password) {_		Assert.notNull(username, "'username' must not be null")__		Assert.notNull(password, "'password' must not be null")___		checkIllegalCharacters(username, password)__		return basicAuthenticationInternal(r -> Optional.of(new Credentials(username, password)))__	};return,a,filter,that,adds,an,authorization,header,for,http,basic,authentication,based,on,the,given,username,and,password,p,note,that,basic,authentication,only,supports,characters,in,the,link,standard,charsets,iso,8859,1,character,set,param,username,the,username,to,use,param,password,the,password,to,use,return,the,link,exchange,filter,function,that,adds,the,authorization,header,throws,illegal,argument,exception,if,either,code,username,or,code,password,contain,characters,that,cannot,be,encoded,to,iso,8859,1;public,static,exchange,filter,function,basic,authentication,string,username,string,password,assert,not,null,username,username,must,not,be,null,assert,not,null,password,password,must,not,be,null,check,illegal,characters,username,password,return,basic,authentication,internal,r,optional,of,new,credentials,username,password
ExchangeFilterFunctions -> public static ExchangeFilterFunction basicAuthentication(String username, String password);1518567721;Return a filter that adds an Authorization header for HTTP Basic Authentication, based on_the given username and password._<p>Note that Basic Authentication only supports characters in the_{@link StandardCharsets#ISO_8859_1 ISO-8859-1} character set._@param username the username to use_@param password the password to use_@return the {@link ExchangeFilterFunction} that adds the Authorization header_@throws IllegalArgumentException if either {@code username} or {@code password} contain_characters that cannot be encoded to ISO-8859-1;public static ExchangeFilterFunction basicAuthentication(String username, String password) {_		Assert.notNull(username, "'username' must not be null")__		Assert.notNull(password, "'password' must not be null")___		checkIllegalCharacters(username, password)__		return basicAuthenticationInternal(r -> Optional.of(new Credentials(username, password)))__	};return,a,filter,that,adds,an,authorization,header,for,http,basic,authentication,based,on,the,given,username,and,password,p,note,that,basic,authentication,only,supports,characters,in,the,link,standard,charsets,iso,8859,1,character,set,param,username,the,username,to,use,param,password,the,password,to,use,return,the,link,exchange,filter,function,that,adds,the,authorization,header,throws,illegal,argument,exception,if,either,code,username,or,code,password,contain,characters,that,cannot,be,encoded,to,iso,8859,1;public,static,exchange,filter,function,basic,authentication,string,username,string,password,assert,not,null,username,username,must,not,be,null,assert,not,null,password,password,must,not,be,null,check,illegal,characters,username,password,return,basic,authentication,internal,r,optional,of,new,credentials,username,password
ExchangeFilterFunctions -> public static ExchangeFilterFunction basicAuthentication(String username, String password);1524865018;Return a filter that adds an Authorization header for HTTP Basic Authentication, based on_the given username and password._<p>Note that Basic Authentication only supports characters in the_{@link StandardCharsets#ISO_8859_1 ISO-8859-1} character set._@param username the username to use_@param password the password to use_@return the {@link ExchangeFilterFunction} that adds the Authorization header_@throws IllegalArgumentException if either {@code username} or {@code password} contain_characters that cannot be encoded to ISO-8859-1;public static ExchangeFilterFunction basicAuthentication(String username, String password) {_		Assert.notNull(username, "'username' must not be null")__		Assert.notNull(password, "'password' must not be null")__		checkIllegalCharacters(username, password)__		return basicAuthenticationInternal(r -> Optional.of(new Credentials(username, password)))__	};return,a,filter,that,adds,an,authorization,header,for,http,basic,authentication,based,on,the,given,username,and,password,p,note,that,basic,authentication,only,supports,characters,in,the,link,standard,charsets,iso,8859,1,character,set,param,username,the,username,to,use,param,password,the,password,to,use,return,the,link,exchange,filter,function,that,adds,the,authorization,header,throws,illegal,argument,exception,if,either,code,username,or,code,password,contain,characters,that,cannot,be,encoded,to,iso,8859,1;public,static,exchange,filter,function,basic,authentication,string,username,string,password,assert,not,null,username,username,must,not,be,null,assert,not,null,password,password,must,not,be,null,check,illegal,characters,username,password,return,basic,authentication,internal,r,optional,of,new,credentials,username,password
ExchangeFilterFunctions -> Credentials -> public Credentials(String username, String password);1501164549;Create a new {@code Credentials} instance with the given username and password._@param username the username_@param password the password;public Credentials(String username, String password) {_			Assert.notNull(username, "'username' must not be null")__			Assert.notNull(password, "'password' must not be null")___			this.username = username__			this.password = password__		};create,a,new,code,credentials,instance,with,the,given,username,and,password,param,username,the,username,param,password,the,password;public,credentials,string,username,string,password,assert,not,null,username,username,must,not,be,null,assert,not,null,password,password,must,not,be,null,this,username,username,this,password,password
ExchangeFilterFunctions -> Credentials -> public Credentials(String username, String password);1508532146;Create a new {@code Credentials} instance with the given username and password._@param username the username_@param password the password;public Credentials(String username, String password) {_			Assert.notNull(username, "'username' must not be null")__			Assert.notNull(password, "'password' must not be null")___			this.username = username__			this.password = password__		};create,a,new,code,credentials,instance,with,the,given,username,and,password,param,username,the,username,param,password,the,password;public,credentials,string,username,string,password,assert,not,null,username,username,must,not,be,null,assert,not,null,password,password,must,not,be,null,this,username,username,this,password,password
ExchangeFilterFunctions -> Credentials -> public Credentials(String username, String password);1518567721;Create a new {@code Credentials} instance with the given username and password._@param username the username_@param password the password;public Credentials(String username, String password) {_			Assert.notNull(username, "'username' must not be null")__			Assert.notNull(password, "'password' must not be null")___			this.username = username__			this.password = password__		};create,a,new,code,credentials,instance,with,the,given,username,and,password,param,username,the,username,param,password,the,password;public,credentials,string,username,string,password,assert,not,null,username,username,must,not,be,null,assert,not,null,password,password,must,not,be,null,this,username,username,this,password,password
ExchangeFilterFunctions -> Credentials -> public Credentials(String username, String password);1524865018;Create a new {@code Credentials} instance with the given username and password._@param username the username_@param password the password;public Credentials(String username, String password) {_			Assert.notNull(username, "'username' must not be null")__			Assert.notNull(password, "'password' must not be null")__			this.username = username__			this.password = password__		};create,a,new,code,credentials,instance,with,the,given,username,and,password,param,username,the,username,param,password,the,password;public,credentials,string,username,string,password,assert,not,null,username,username,must,not,be,null,assert,not,null,password,password,must,not,be,null,this,username,username,this,password,password
ExchangeFilterFunctions -> Credentials -> public Credentials(String username, String password);1528924489;Create a new {@code Credentials} instance with the given username and password._@param username the username_@param password the password;public Credentials(String username, String password) {_			Assert.notNull(username, "'username' must not be null")__			Assert.notNull(password, "'password' must not be null")__			this.username = username__			this.password = password__		};create,a,new,code,credentials,instance,with,the,given,username,and,password,param,username,the,username,param,password,the,password;public,credentials,string,username,string,password,assert,not,null,username,username,must,not,be,null,assert,not,null,password,password,must,not,be,null,this,username,username,this,password,password
ExchangeFilterFunctions -> Credentials -> public Credentials(String username, String password);1530190293;Create a new {@code Credentials} instance with the given username and password._@param username the username_@param password the password;public Credentials(String username, String password) {_			Assert.notNull(username, "'username' must not be null")__			Assert.notNull(password, "'password' must not be null")__			this.username = username__			this.password = password__		};create,a,new,code,credentials,instance,with,the,given,username,and,password,param,username,the,username,param,password,the,password;public,credentials,string,username,string,password,assert,not,null,username,username,must,not,be,null,assert,not,null,password,password,must,not,be,null,this,username,username,this,password,password
ExchangeFilterFunctions -> Credentials -> public Credentials(String username, String password);1531147311;Create a new {@code Credentials} instance with the given username and password._@param username the username_@param password the password;public Credentials(String username, String password) {_			Assert.notNull(username, "'username' must not be null")__			Assert.notNull(password, "'password' must not be null")__			this.username = username__			this.password = password__		};create,a,new,code,credentials,instance,with,the,given,username,and,password,param,username,the,username,param,password,the,password;public,credentials,string,username,string,password,assert,not,null,username,username,must,not,be,null,assert,not,null,password,password,must,not,be,null,this,username,username,this,password,password
ExchangeFilterFunctions -> Credentials -> public Credentials(String username, String password);1533034998;Create a new {@code Credentials} instance with the given username and password._@param username the username_@param password the password;public Credentials(String username, String password) {_			Assert.notNull(username, "'username' must not be null")__			Assert.notNull(password, "'password' must not be null")__			this.username = username__			this.password = password__		};create,a,new,code,credentials,instance,with,the,given,username,and,password,param,username,the,username,param,password,the,password;public,credentials,string,username,string,password,assert,not,null,username,username,must,not,be,null,assert,not,null,password,password,must,not,be,null,this,username,username,this,password,password
ExchangeFilterFunctions -> Credentials -> public Credentials(String username, String password);1533233962;Create a new {@code Credentials} instance with the given username and password._@param username the username_@param password the password;public Credentials(String username, String password) {_			Assert.notNull(username, "'username' must not be null")__			Assert.notNull(password, "'password' must not be null")__			this.username = username__			this.password = password__		};create,a,new,code,credentials,instance,with,the,given,username,and,password,param,username,the,username,param,password,the,password;public,credentials,string,username,string,password,assert,not,null,username,username,must,not,be,null,assert,not,null,password,password,must,not,be,null,this,username,username,this,password,password
ExchangeFilterFunctions -> Credentials -> public Credentials(String username, String password);1533573240;Create a new {@code Credentials} instance with the given username and password._@param username the username_@param password the password;public Credentials(String username, String password) {_			Assert.notNull(username, "'username' must not be null")__			Assert.notNull(password, "'password' must not be null")__			this.username = username__			this.password = password__		};create,a,new,code,credentials,instance,with,the,given,username,and,password,param,username,the,username,param,password,the,password;public,credentials,string,username,string,password,assert,not,null,username,username,must,not,be,null,assert,not,null,password,password,must,not,be,null,this,username,username,this,password,password
ExchangeFilterFunctions -> Credentials -> public Credentials(String username, String password);1533625827;Create a new {@code Credentials} instance with the given username and password._@param username the username_@param password the password;public Credentials(String username, String password) {_			Assert.notNull(username, "'username' must not be null")__			Assert.notNull(password, "'password' must not be null")__			this.username = username__			this.password = password__		};create,a,new,code,credentials,instance,with,the,given,username,and,password,param,username,the,username,param,password,the,password;public,credentials,string,username,string,password,assert,not,null,username,username,must,not,be,null,assert,not,null,password,password,must,not,be,null,this,username,username,this,password,password
ExchangeFilterFunctions -> Credentials -> public Credentials(String username, String password);1539119626;Create a new {@code Credentials} instance with the given username and password._@param username the username_@param password the password;public Credentials(String username, String password) {_			Assert.notNull(username, "'username' must not be null")__			Assert.notNull(password, "'password' must not be null")__			this.username = username__			this.password = password__		};create,a,new,code,credentials,instance,with,the,given,username,and,password,param,username,the,username,param,password,the,password;public,credentials,string,username,string,password,assert,not,null,username,username,must,not,be,null,assert,not,null,password,password,must,not,be,null,this,username,username,this,password,password
ExchangeFilterFunctions -> Credentials -> public Credentials(String username, String password);1542037423;Create a new {@code Credentials} instance with the given username and password._@param username the username_@param password the password;public Credentials(String username, String password) {_			Assert.notNull(username, "'username' must not be null")__			Assert.notNull(password, "'password' must not be null")__			this.username = username__			this.password = password__		};create,a,new,code,credentials,instance,with,the,given,username,and,password,param,username,the,username,param,password,the,password;public,credentials,string,username,string,password,assert,not,null,username,username,must,not,be,null,assert,not,null,password,password,must,not,be,null,this,username,username,this,password,password
ExchangeFilterFunctions -> @Deprecated 	public static ExchangeFilterFunction basicAuthentication(String user, String password);1531147311;Return a filter for HTTP Basic Authentication that adds an authorization_header, based on the given user and password._<p>Note that Basic Authentication only supports characters in the_{@link StandardCharsets#ISO_8859_1 ISO-8859-1} character set._@param user the user_@param password the password_@return the filter for basic authentication_@throws IllegalArgumentException if either {@code user} or_{@code password} contain characters that cannot be encoded to ISO-8859-1._@deprecated in favor of {@link HttpHeaders#setBasicAuth(String, String)};@Deprecated_	public static ExchangeFilterFunction basicAuthentication(String user, String password) {_		Assert.notNull(user, "'user' must not be null")__		Assert.notNull(password, "'password' must not be null")__		checkIllegalCharacters(user, password)__		return basicAuthenticationInternal(request -> Optional.of(new Credentials(user, password)))__	};return,a,filter,for,http,basic,authentication,that,adds,an,authorization,header,based,on,the,given,user,and,password,p,note,that,basic,authentication,only,supports,characters,in,the,link,standard,charsets,iso,8859,1,character,set,param,user,the,user,param,password,the,password,return,the,filter,for,basic,authentication,throws,illegal,argument,exception,if,either,code,user,or,code,password,contain,characters,that,cannot,be,encoded,to,iso,8859,1,deprecated,in,favor,of,link,http,headers,set,basic,auth,string,string;deprecated,public,static,exchange,filter,function,basic,authentication,string,user,string,password,assert,not,null,user,user,must,not,be,null,assert,not,null,password,password,must,not,be,null,check,illegal,characters,user,password,return,basic,authentication,internal,request,optional,of,new,credentials,user,password
ExchangeFilterFunctions -> @Deprecated 	public static ExchangeFilterFunction basicAuthentication(String user, String password);1533034998;Return a filter for HTTP Basic Authentication that adds an authorization_header, based on the given user and password._<p>Note that Basic Authentication only supports characters in the_{@link StandardCharsets#ISO_8859_1 ISO-8859-1} character set._@param user the user_@param password the password_@return the filter for basic authentication_@throws IllegalArgumentException if either {@code user} or_{@code password} contain characters that cannot be encoded to ISO-8859-1._@deprecated in favor of {@link HttpHeaders#setBasicAuth(String, String)};@Deprecated_	public static ExchangeFilterFunction basicAuthentication(String user, String password) {_		Assert.notNull(user, "'user' must not be null")__		Assert.notNull(password, "'password' must not be null")__		checkIllegalCharacters(user, password)__		return basicAuthenticationInternal(request -> Optional.of(new Credentials(user, password)))__	};return,a,filter,for,http,basic,authentication,that,adds,an,authorization,header,based,on,the,given,user,and,password,p,note,that,basic,authentication,only,supports,characters,in,the,link,standard,charsets,iso,8859,1,character,set,param,user,the,user,param,password,the,password,return,the,filter,for,basic,authentication,throws,illegal,argument,exception,if,either,code,user,or,code,password,contain,characters,that,cannot,be,encoded,to,iso,8859,1,deprecated,in,favor,of,link,http,headers,set,basic,auth,string,string;deprecated,public,static,exchange,filter,function,basic,authentication,string,user,string,password,assert,not,null,user,user,must,not,be,null,assert,not,null,password,password,must,not,be,null,check,illegal,characters,user,password,return,basic,authentication,internal,request,optional,of,new,credentials,user,password
ExchangeFilterFunctions -> @Deprecated 	public static ExchangeFilterFunction basicAuthentication(String user, String password);1533233962;Return a filter for HTTP Basic Authentication that adds an authorization_header, based on the given user and password._<p>Note that Basic Authentication only supports characters in the_{@link StandardCharsets#ISO_8859_1 ISO-8859-1} character set._@param user the user_@param password the password_@return the filter for basic authentication_@throws IllegalArgumentException if either {@code user} or_{@code password} contain characters that cannot be encoded to ISO-8859-1._@deprecated in favor of {@link HttpHeaders#setBasicAuth(String, String)};@Deprecated_	public static ExchangeFilterFunction basicAuthentication(String user, String password) {_		Assert.notNull(user, "'user' must not be null")__		Assert.notNull(password, "'password' must not be null")__		checkIllegalCharacters(user, password)__		return basicAuthenticationInternal(request -> Optional.of(new Credentials(user, password)))__	};return,a,filter,for,http,basic,authentication,that,adds,an,authorization,header,based,on,the,given,user,and,password,p,note,that,basic,authentication,only,supports,characters,in,the,link,standard,charsets,iso,8859,1,character,set,param,user,the,user,param,password,the,password,return,the,filter,for,basic,authentication,throws,illegal,argument,exception,if,either,code,user,or,code,password,contain,characters,that,cannot,be,encoded,to,iso,8859,1,deprecated,in,favor,of,link,http,headers,set,basic,auth,string,string;deprecated,public,static,exchange,filter,function,basic,authentication,string,user,string,password,assert,not,null,user,user,must,not,be,null,assert,not,null,password,password,must,not,be,null,check,illegal,characters,user,password,return,basic,authentication,internal,request,optional,of,new,credentials,user,password
ExchangeFilterFunctions -> @Deprecated 	public static ExchangeFilterFunction basicAuthentication(String user, String password);1533573240;Return a filter for HTTP Basic Authentication that adds an authorization_header, based on the given user and password._<p>Note that Basic Authentication only supports characters in the_{@link StandardCharsets#ISO_8859_1 ISO-8859-1} character set._@param user the user_@param password the password_@return the filter for basic authentication_@throws IllegalArgumentException if either {@code user} or_{@code password} contain characters that cannot be encoded to ISO-8859-1._@deprecated in favor of {@link HttpHeaders#setBasicAuth(String, String)};@Deprecated_	public static ExchangeFilterFunction basicAuthentication(String user, String password) {_		Assert.notNull(user, "'user' must not be null")__		Assert.notNull(password, "'password' must not be null")__		checkIllegalCharacters(user, password)__		return basicAuthenticationInternal(request -> Optional.of(new Credentials(user, password)))__	};return,a,filter,for,http,basic,authentication,that,adds,an,authorization,header,based,on,the,given,user,and,password,p,note,that,basic,authentication,only,supports,characters,in,the,link,standard,charsets,iso,8859,1,character,set,param,user,the,user,param,password,the,password,return,the,filter,for,basic,authentication,throws,illegal,argument,exception,if,either,code,user,or,code,password,contain,characters,that,cannot,be,encoded,to,iso,8859,1,deprecated,in,favor,of,link,http,headers,set,basic,auth,string,string;deprecated,public,static,exchange,filter,function,basic,authentication,string,user,string,password,assert,not,null,user,user,must,not,be,null,assert,not,null,password,password,must,not,be,null,check,illegal,characters,user,password,return,basic,authentication,internal,request,optional,of,new,credentials,user,password
ExchangeFilterFunctions -> public static ExchangeFilterFunction limitResponseSize(long maxByteCount);1533233962;Consume up to the specified number of bytes from the response body and_cancel if any more data arrives. Internally delegates to_{@link DataBufferUtils#takeUntilByteCount}._@return the filter to limit the response size with_@since 5.1;public static ExchangeFilterFunction limitResponseSize(long maxByteCount) {_		return (request, next) ->_				next.exchange(request).map(response -> {_					Flux<DataBuffer> body = response.body(BodyExtractors.toDataBuffers())__					body = DataBufferUtils.takeUntilByteCount(body, maxByteCount)__					return ClientResponse.from(response).body(body).build()__				})__	};consume,up,to,the,specified,number,of,bytes,from,the,response,body,and,cancel,if,any,more,data,arrives,internally,delegates,to,link,data,buffer,utils,take,until,byte,count,return,the,filter,to,limit,the,response,size,with,since,5,1;public,static,exchange,filter,function,limit,response,size,long,max,byte,count,return,request,next,next,exchange,request,map,response,flux,data,buffer,body,response,body,body,extractors,to,data,buffers,body,data,buffer,utils,take,until,byte,count,body,max,byte,count,return,client,response,from,response,body,body,build
ExchangeFilterFunctions -> public static ExchangeFilterFunction limitResponseSize(long maxByteCount);1533573240;Consume up to the specified number of bytes from the response body and_cancel if any more data arrives._<p>Internally delegates to {@link DataBufferUtils#takeUntilByteCount}._@param maxByteCount the limit as number of bytes_@return the filter to limit the response size with_@since 5.1;public static ExchangeFilterFunction limitResponseSize(long maxByteCount) {_		return (request, next) ->_				next.exchange(request).map(response -> {_					Flux<DataBuffer> body = response.body(BodyExtractors.toDataBuffers())__					body = DataBufferUtils.takeUntilByteCount(body, maxByteCount)__					return ClientResponse.from(response).body(body).build()__				})__	};consume,up,to,the,specified,number,of,bytes,from,the,response,body,and,cancel,if,any,more,data,arrives,p,internally,delegates,to,link,data,buffer,utils,take,until,byte,count,param,max,byte,count,the,limit,as,number,of,bytes,return,the,filter,to,limit,the,response,size,with,since,5,1;public,static,exchange,filter,function,limit,response,size,long,max,byte,count,return,request,next,next,exchange,request,map,response,flux,data,buffer,body,response,body,body,extractors,to,data,buffers,body,data,buffer,utils,take,until,byte,count,body,max,byte,count,return,client,response,from,response,body,body,build
ExchangeFilterFunctions -> public static ExchangeFilterFunction limitResponseSize(long maxByteCount);1533625827;Consume up to the specified number of bytes from the response body and_cancel if any more data arrives._<p>Internally delegates to {@link DataBufferUtils#takeUntilByteCount}._@param maxByteCount the limit as number of bytes_@return the filter to limit the response size with_@since 5.1;public static ExchangeFilterFunction limitResponseSize(long maxByteCount) {_		return (request, next) ->_				next.exchange(request).map(response -> {_					Flux<DataBuffer> body = response.body(BodyExtractors.toDataBuffers())__					body = DataBufferUtils.takeUntilByteCount(body, maxByteCount)__					return ClientResponse.from(response).body(body).build()__				})__	};consume,up,to,the,specified,number,of,bytes,from,the,response,body,and,cancel,if,any,more,data,arrives,p,internally,delegates,to,link,data,buffer,utils,take,until,byte,count,param,max,byte,count,the,limit,as,number,of,bytes,return,the,filter,to,limit,the,response,size,with,since,5,1;public,static,exchange,filter,function,limit,response,size,long,max,byte,count,return,request,next,next,exchange,request,map,response,flux,data,buffer,body,response,body,body,extractors,to,data,buffers,body,data,buffer,utils,take,until,byte,count,body,max,byte,count,return,client,response,from,response,body,body,build
ExchangeFilterFunctions -> public static ExchangeFilterFunction limitResponseSize(long maxByteCount);1539119626;Consume up to the specified number of bytes from the response body and_cancel if any more data arrives._<p>Internally delegates to {@link DataBufferUtils#takeUntilByteCount}._@param maxByteCount the limit as number of bytes_@return the filter to limit the response size with_@since 5.1;public static ExchangeFilterFunction limitResponseSize(long maxByteCount) {_		return (request, next) ->_				next.exchange(request).map(response -> {_					Flux<DataBuffer> body = response.body(BodyExtractors.toDataBuffers())__					body = DataBufferUtils.takeUntilByteCount(body, maxByteCount)__					return ClientResponse.from(response).body(body).build()__				})__	};consume,up,to,the,specified,number,of,bytes,from,the,response,body,and,cancel,if,any,more,data,arrives,p,internally,delegates,to,link,data,buffer,utils,take,until,byte,count,param,max,byte,count,the,limit,as,number,of,bytes,return,the,filter,to,limit,the,response,size,with,since,5,1;public,static,exchange,filter,function,limit,response,size,long,max,byte,count,return,request,next,next,exchange,request,map,response,flux,data,buffer,body,response,body,body,extractors,to,data,buffers,body,data,buffer,utils,take,until,byte,count,body,max,byte,count,return,client,response,from,response,body,body,build
ExchangeFilterFunctions -> public static ExchangeFilterFunction limitResponseSize(long maxByteCount);1542037423;Consume up to the specified number of bytes from the response body and_cancel if any more data arrives._<p>Internally delegates to {@link DataBufferUtils#takeUntilByteCount}._@param maxByteCount the limit as number of bytes_@return the filter to limit the response size with_@since 5.1;public static ExchangeFilterFunction limitResponseSize(long maxByteCount) {_		return (request, next) ->_				next.exchange(request).map(response -> {_					Flux<DataBuffer> body = response.body(BodyExtractors.toDataBuffers())__					body = DataBufferUtils.takeUntilByteCount(body, maxByteCount)__					return ClientResponse.from(response).body(body).build()__				})__	};consume,up,to,the,specified,number,of,bytes,from,the,response,body,and,cancel,if,any,more,data,arrives,p,internally,delegates,to,link,data,buffer,utils,take,until,byte,count,param,max,byte,count,the,limit,as,number,of,bytes,return,the,filter,to,limit,the,response,size,with,since,5,1;public,static,exchange,filter,function,limit,response,size,long,max,byte,count,return,request,next,next,exchange,request,map,response,flux,data,buffer,body,response,body,body,extractors,to,data,buffers,body,data,buffer,utils,take,until,byte,count,body,max,byte,count,return,client,response,from,response,body,body,build
ExchangeFilterFunctions -> public static ExchangeFilterFunction basicAuthentication();1499259158;Return a filter that adds an Authorization header for HTTP Basic Authentication, based on_the username and password provided in the_{@linkplain ClientRequest#attributes() request attributes}._@return the {@link ExchangeFilterFunction} that adds the Authorization header_@see #USERNAME_ATTRIBUTE_@see #PASSWORD_ATTRIBUTE;public static ExchangeFilterFunction basicAuthentication() {_		return basicAuthentication(_				request -> getRequiredAttribute(request, USERNAME_ATTRIBUTE),_				request -> getRequiredAttribute(request, PASSWORD_ATTRIBUTE)_				)__	};return,a,filter,that,adds,an,authorization,header,for,http,basic,authentication,based,on,the,username,and,password,provided,in,the,linkplain,client,request,attributes,request,attributes,return,the,link,exchange,filter,function,that,adds,the,authorization,header,see,see;public,static,exchange,filter,function,basic,authentication,return,basic,authentication,request,get,required,attribute,request,request,get,required,attribute,request
ExchangeFilterFunctions -> public static ExchangeFilterFunction basicAuthentication();1499780493;Return a filter that adds an Authorization header for HTTP Basic Authentication, based on_the username and password provided in the_{@linkplain ClientRequest#attributes() request attributes}. If the attributes are not found,_no authorization header_@return the {@link ExchangeFilterFunction} that adds the Authorization header_@see #USERNAME_ATTRIBUTE_@see #PASSWORD_ATTRIBUTE;public static ExchangeFilterFunction basicAuthentication() {_		return basicAuthenticationInternal(_				request -> {_					Optional<String> username = request.attribute(USERNAME_ATTRIBUTE).map(o -> (String)o)__					Optional<String> password = request.attribute(PASSWORD_ATTRIBUTE).map(o -> (String)o)__					if (username.isPresent() && password.isPresent()) {_						return Optional.of(new Credentials(username.get(), password.get()))__					} else {_						return Optional.empty()__					}_				})__	};return,a,filter,that,adds,an,authorization,header,for,http,basic,authentication,based,on,the,username,and,password,provided,in,the,linkplain,client,request,attributes,request,attributes,if,the,attributes,are,not,found,no,authorization,header,return,the,link,exchange,filter,function,that,adds,the,authorization,header,see,see;public,static,exchange,filter,function,basic,authentication,return,basic,authentication,internal,request,optional,string,username,request,attribute,map,o,string,o,optional,string,password,request,attribute,map,o,string,o,if,username,is,present,password,is,present,return,optional,of,new,credentials,username,get,password,get,else,return,optional,empty
ExchangeFilterFunctions -> public static ExchangeFilterFunction basicAuthentication();1499783807;Return a filter that adds an Authorization header for HTTP Basic Authentication, based on_the username and password provided in the_{@linkplain ClientRequest#attributes() request attributes}. If the attributes are not found,_no authorization header_@return the {@link ExchangeFilterFunction} that adds the Authorization header_@see #USERNAME_ATTRIBUTE_@see #PASSWORD_ATTRIBUTE;public static ExchangeFilterFunction basicAuthentication() {_		return basicAuthenticationInternal(_				request -> {_					Optional<String> username = request.attribute(USERNAME_ATTRIBUTE).map(o -> (String)o)__					Optional<String> password = request.attribute(PASSWORD_ATTRIBUTE).map(o -> (String)o)__					if (username.isPresent() && password.isPresent()) {_						return Optional.of(new Credentials(username.get(), password.get()))__					} else {_						return Optional.empty()__					}_				})__	};return,a,filter,that,adds,an,authorization,header,for,http,basic,authentication,based,on,the,username,and,password,provided,in,the,linkplain,client,request,attributes,request,attributes,if,the,attributes,are,not,found,no,authorization,header,return,the,link,exchange,filter,function,that,adds,the,authorization,header,see,see;public,static,exchange,filter,function,basic,authentication,return,basic,authentication,internal,request,optional,string,username,request,attribute,map,o,string,o,optional,string,password,request,attribute,map,o,string,o,if,username,is,present,password,is,present,return,optional,of,new,credentials,username,get,password,get,else,return,optional,empty
ExchangeFilterFunctions -> public static ExchangeFilterFunction basicAuthentication();1501164549;Return a filter that adds an Authorization header for HTTP Basic Authentication, based on_the {@link Credentials} provided in the_{@linkplain ClientRequest#attributes() request attributes}. If the attribute is not found,_no authorization header is added._<p>Note that Basic Authentication only supports characters in the_{@link StandardCharsets#ISO_8859_1 ISO-8859-1} character set._@return the {@link ExchangeFilterFunction} that adds the Authorization header_@see #BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE_@see Credentials#basicAuthenticationCredentials(String, String);public static ExchangeFilterFunction basicAuthentication() {_		return basicAuthenticationInternal(_				request -> request.attribute(BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE).map(o -> (Credentials)o))__	};return,a,filter,that,adds,an,authorization,header,for,http,basic,authentication,based,on,the,link,credentials,provided,in,the,linkplain,client,request,attributes,request,attributes,if,the,attribute,is,not,found,no,authorization,header,is,added,p,note,that,basic,authentication,only,supports,characters,in,the,link,standard,charsets,iso,8859,1,character,set,return,the,link,exchange,filter,function,that,adds,the,authorization,header,see,see,credentials,basic,authentication,credentials,string,string;public,static,exchange,filter,function,basic,authentication,return,basic,authentication,internal,request,request,attribute,map,o,credentials,o
ExchangeFilterFunctions -> public static ExchangeFilterFunction basicAuthentication();1508532146;Return a filter that adds an Authorization header for HTTP Basic Authentication, based on_the {@link Credentials} provided in the_{@linkplain ClientRequest#attributes() request attributes}. If the attribute is not found,_no authorization header is added._<p>Note that Basic Authentication only supports characters in the_{@link StandardCharsets#ISO_8859_1 ISO-8859-1} character set._@return the {@link ExchangeFilterFunction} that adds the Authorization header_@see #BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE_@see Credentials#basicAuthenticationCredentials(String, String);public static ExchangeFilterFunction basicAuthentication() {_		return basicAuthenticationInternal(_				request -> request.attribute(BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE).map(o -> (Credentials)o))__	};return,a,filter,that,adds,an,authorization,header,for,http,basic,authentication,based,on,the,link,credentials,provided,in,the,linkplain,client,request,attributes,request,attributes,if,the,attribute,is,not,found,no,authorization,header,is,added,p,note,that,basic,authentication,only,supports,characters,in,the,link,standard,charsets,iso,8859,1,character,set,return,the,link,exchange,filter,function,that,adds,the,authorization,header,see,see,credentials,basic,authentication,credentials,string,string;public,static,exchange,filter,function,basic,authentication,return,basic,authentication,internal,request,request,attribute,map,o,credentials,o
ExchangeFilterFunctions -> public static ExchangeFilterFunction basicAuthentication();1518567721;Return a filter that adds an Authorization header for HTTP Basic Authentication, based on_the {@link Credentials} provided in the_{@linkplain ClientRequest#attributes() request attributes}. If the attribute is not found,_no authorization header is added._<p>Note that Basic Authentication only supports characters in the_{@link StandardCharsets#ISO_8859_1 ISO-8859-1} character set._@return the {@link ExchangeFilterFunction} that adds the Authorization header_@see #BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE_@see Credentials#basicAuthenticationCredentials(String, String);public static ExchangeFilterFunction basicAuthentication() {_		return basicAuthenticationInternal(_				request -> request.attribute(BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE).map(o -> (Credentials)o))__	};return,a,filter,that,adds,an,authorization,header,for,http,basic,authentication,based,on,the,link,credentials,provided,in,the,linkplain,client,request,attributes,request,attributes,if,the,attribute,is,not,found,no,authorization,header,is,added,p,note,that,basic,authentication,only,supports,characters,in,the,link,standard,charsets,iso,8859,1,character,set,return,the,link,exchange,filter,function,that,adds,the,authorization,header,see,see,credentials,basic,authentication,credentials,string,string;public,static,exchange,filter,function,basic,authentication,return,basic,authentication,internal,request,request,attribute,map,o,credentials,o
ExchangeFilterFunctions -> public static ExchangeFilterFunction basicAuthentication();1524865018;Return a filter that adds an Authorization header for HTTP Basic Authentication, based on_the {@link Credentials} provided in the_{@linkplain ClientRequest#attributes() request attributes}. If the attribute is not found,_no authorization header is added._<p>Note that Basic Authentication only supports characters in the_{@link StandardCharsets#ISO_8859_1 ISO-8859-1} character set._@return the {@link ExchangeFilterFunction} that adds the Authorization header_@see #BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE_@see Credentials#basicAuthenticationCredentials(String, String);public static ExchangeFilterFunction basicAuthentication() {_		return basicAuthenticationInternal(_				request -> request.attribute(BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE).map(o -> (Credentials)o))__	};return,a,filter,that,adds,an,authorization,header,for,http,basic,authentication,based,on,the,link,credentials,provided,in,the,linkplain,client,request,attributes,request,attributes,if,the,attribute,is,not,found,no,authorization,header,is,added,p,note,that,basic,authentication,only,supports,characters,in,the,link,standard,charsets,iso,8859,1,character,set,return,the,link,exchange,filter,function,that,adds,the,authorization,header,see,see,credentials,basic,authentication,credentials,string,string;public,static,exchange,filter,function,basic,authentication,return,basic,authentication,internal,request,request,attribute,map,o,credentials,o
ExchangeFilterFunctions -> public static ExchangeFilterFunction basicAuthentication();1528924489;Variant of {@link #basicAuthentication(String, String)} that looks up_the {@link Credentials Credentials} provided in a_{@linkplain ClientRequest#attributes() request attribute}, or if the_attribute is not found, the authorization header is not added._@return the filter for basic authentication_@see #BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE_@see Credentials#basicAuthenticationCredentials(String, String);public static ExchangeFilterFunction basicAuthentication() {_		return basicAuthenticationInternal(request ->_				request.attribute(BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE)_						.map(credentials -> (Credentials) credentials))__	};variant,of,link,basic,authentication,string,string,that,looks,up,the,link,credentials,credentials,provided,in,a,linkplain,client,request,attributes,request,attribute,or,if,the,attribute,is,not,found,the,authorization,header,is,not,added,return,the,filter,for,basic,authentication,see,see,credentials,basic,authentication,credentials,string,string;public,static,exchange,filter,function,basic,authentication,return,basic,authentication,internal,request,request,attribute,map,credentials,credentials,credentials
ExchangeFilterFunctions -> public static ExchangeFilterFunction basicAuthentication();1530190293;Variant of {@link #basicAuthentication(String, String)} that looks up_the {@link Credentials Credentials} provided in a_{@linkplain ClientRequest#attributes() request attribute}, or if the_attribute is not found, the authorization header is not added._@return the filter for basic authentication_@see #BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE_@see Credentials#basicAuthenticationCredentials(String, String);public static ExchangeFilterFunction basicAuthentication() {_		return basicAuthenticationInternal(request ->_				request.attribute(BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE)_						.map(credentials -> (Credentials) credentials))__	};variant,of,link,basic,authentication,string,string,that,looks,up,the,link,credentials,credentials,provided,in,a,linkplain,client,request,attributes,request,attribute,or,if,the,attribute,is,not,found,the,authorization,header,is,not,added,return,the,filter,for,basic,authentication,see,see,credentials,basic,authentication,credentials,string,string;public,static,exchange,filter,function,basic,authentication,return,basic,authentication,internal,request,request,attribute,map,credentials,credentials,credentials
ExchangeFilterFunctions -> Credentials -> public static Consumer<Map<String, Object>> basicAuthenticationCredentials(String username, String password);1501164549;Return a consumer that stores the given username and password in the_{@linkplain ClientRequest.Builder#attributes(java.util.function.Consumer) request_attributes} as a {@code Credentials} object._@param username the username_@param password the password_@return a consumer that adds the given credentials to the attribute map_@see ClientRequest.Builder#attributes(java.util.function.Consumer)_@see #BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE;public static Consumer<Map<String, Object>> basicAuthenticationCredentials(String username, String password) {_			Credentials credentials = new Credentials(username, password)__			checkIllegalCharacters(username, password)___			return attributes -> attributes.put(BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE, credentials)__		};return,a,consumer,that,stores,the,given,username,and,password,in,the,linkplain,client,request,builder,attributes,java,util,function,consumer,request,attributes,as,a,code,credentials,object,param,username,the,username,param,password,the,password,return,a,consumer,that,adds,the,given,credentials,to,the,attribute,map,see,client,request,builder,attributes,java,util,function,consumer,see;public,static,consumer,map,string,object,basic,authentication,credentials,string,username,string,password,credentials,credentials,new,credentials,username,password,check,illegal,characters,username,password,return,attributes,attributes,put,credentials
ExchangeFilterFunctions -> Credentials -> public static Consumer<Map<String, Object>> basicAuthenticationCredentials(String username, String password);1508532146;Return a consumer that stores the given username and password in the_{@linkplain ClientRequest.Builder#attributes(java.util.function.Consumer) request_attributes} as a {@code Credentials} object._@param username the username_@param password the password_@return a consumer that adds the given credentials to the attribute map_@see ClientRequest.Builder#attributes(java.util.function.Consumer)_@see #BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE;public static Consumer<Map<String, Object>> basicAuthenticationCredentials(String username, String password) {_			Credentials credentials = new Credentials(username, password)__			checkIllegalCharacters(username, password)___			return attributes -> attributes.put(BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE, credentials)__		};return,a,consumer,that,stores,the,given,username,and,password,in,the,linkplain,client,request,builder,attributes,java,util,function,consumer,request,attributes,as,a,code,credentials,object,param,username,the,username,param,password,the,password,return,a,consumer,that,adds,the,given,credentials,to,the,attribute,map,see,client,request,builder,attributes,java,util,function,consumer,see;public,static,consumer,map,string,object,basic,authentication,credentials,string,username,string,password,credentials,credentials,new,credentials,username,password,check,illegal,characters,username,password,return,attributes,attributes,put,credentials
ExchangeFilterFunctions -> Credentials -> public static Consumer<Map<String, Object>> basicAuthenticationCredentials(String username, String password);1518567721;Return a consumer that stores the given username and password in the_{@linkplain ClientRequest.Builder#attributes(java.util.function.Consumer) request_attributes} as a {@code Credentials} object._@param username the username_@param password the password_@return a consumer that adds the given credentials to the attribute map_@see ClientRequest.Builder#attributes(java.util.function.Consumer)_@see #BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE;public static Consumer<Map<String, Object>> basicAuthenticationCredentials(String username, String password) {_			Credentials credentials = new Credentials(username, password)__			checkIllegalCharacters(username, password)___			return attributes -> attributes.put(BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE, credentials)__		};return,a,consumer,that,stores,the,given,username,and,password,in,the,linkplain,client,request,builder,attributes,java,util,function,consumer,request,attributes,as,a,code,credentials,object,param,username,the,username,param,password,the,password,return,a,consumer,that,adds,the,given,credentials,to,the,attribute,map,see,client,request,builder,attributes,java,util,function,consumer,see;public,static,consumer,map,string,object,basic,authentication,credentials,string,username,string,password,credentials,credentials,new,credentials,username,password,check,illegal,characters,username,password,return,attributes,attributes,put,credentials
ExchangeFilterFunctions -> Credentials -> public static Consumer<Map<String, Object>> basicAuthenticationCredentials(String username, String password);1524865018;Return a consumer that stores the given username and password in the_{@linkplain ClientRequest.Builder#attributes(java.util.function.Consumer) request_attributes} as a {@code Credentials} object._@param username the username_@param password the password_@return a consumer that adds the given credentials to the attribute map_@see ClientRequest.Builder#attributes(java.util.function.Consumer)_@see #BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE;public static Consumer<Map<String, Object>> basicAuthenticationCredentials(String username, String password) {_			Credentials credentials = new Credentials(username, password)__			checkIllegalCharacters(username, password)___			return attributes -> attributes.put(BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE, credentials)__		};return,a,consumer,that,stores,the,given,username,and,password,in,the,linkplain,client,request,builder,attributes,java,util,function,consumer,request,attributes,as,a,code,credentials,object,param,username,the,username,param,password,the,password,return,a,consumer,that,adds,the,given,credentials,to,the,attribute,map,see,client,request,builder,attributes,java,util,function,consumer,see;public,static,consumer,map,string,object,basic,authentication,credentials,string,username,string,password,credentials,credentials,new,credentials,username,password,check,illegal,characters,username,password,return,attributes,attributes,put,credentials
ExchangeFilterFunctions -> public static ExchangeFilterFunction statusError(Predicate<HttpStatus> statusPredicate, 			Function<ClientResponse, ? extends Throwable> exceptionFunction);1499783807;Return a filter that returns a given {@link Throwable} as response if the given_{@link HttpStatus} predicate matches._@param statusPredicate the predicate that should match the_{@linkplain ClientResponse#statusCode() response status}_@param exceptionFunction the function that returns the exception_@return the {@link ExchangeFilterFunction} that returns the given exception if the predicate_matches;public static ExchangeFilterFunction statusError(Predicate<HttpStatus> statusPredicate,_			Function<ClientResponse, ? extends Throwable> exceptionFunction) {__		Assert.notNull(statusPredicate, "'statusPredicate' must not be null")__		Assert.notNull(exceptionFunction, "'exceptionFunction' must not be null")___		return ExchangeFilterFunction.ofResponseProcessor(_				clientResponse -> {_					if (statusPredicate.test(clientResponse.statusCode())) {_						return Mono.error(exceptionFunction.apply(clientResponse))__					}_					else {_						return Mono.just(clientResponse)__					}_				}_		)__	};return,a,filter,that,returns,a,given,link,throwable,as,response,if,the,given,link,http,status,predicate,matches,param,status,predicate,the,predicate,that,should,match,the,linkplain,client,response,status,code,response,status,param,exception,function,the,function,that,returns,the,exception,return,the,link,exchange,filter,function,that,returns,the,given,exception,if,the,predicate,matches;public,static,exchange,filter,function,status,error,predicate,http,status,status,predicate,function,client,response,extends,throwable,exception,function,assert,not,null,status,predicate,status,predicate,must,not,be,null,assert,not,null,exception,function,exception,function,must,not,be,null,return,exchange,filter,function,of,response,processor,client,response,if,status,predicate,test,client,response,status,code,return,mono,error,exception,function,apply,client,response,else,return,mono,just,client,response
ExchangeFilterFunctions -> public static ExchangeFilterFunction statusError(Predicate<HttpStatus> statusPredicate, 			Function<ClientResponse, ? extends Throwable> exceptionFunction);1501164549;Return a filter that returns a given {@link Throwable} as response if the given_{@link HttpStatus} predicate matches._@param statusPredicate the predicate that should match the_{@linkplain ClientResponse#statusCode() response status}_@param exceptionFunction the function that returns the exception_@return the {@link ExchangeFilterFunction} that returns the given exception if the predicate_matches;public static ExchangeFilterFunction statusError(Predicate<HttpStatus> statusPredicate,_			Function<ClientResponse, ? extends Throwable> exceptionFunction) {__		Assert.notNull(statusPredicate, "'statusPredicate' must not be null")__		Assert.notNull(exceptionFunction, "'exceptionFunction' must not be null")___		return ExchangeFilterFunction.ofResponseProcessor(_				clientResponse -> {_					if (statusPredicate.test(clientResponse.statusCode())) {_						return Mono.error(exceptionFunction.apply(clientResponse))__					}_					else {_						return Mono.just(clientResponse)__					}_				}_		)__	};return,a,filter,that,returns,a,given,link,throwable,as,response,if,the,given,link,http,status,predicate,matches,param,status,predicate,the,predicate,that,should,match,the,linkplain,client,response,status,code,response,status,param,exception,function,the,function,that,returns,the,exception,return,the,link,exchange,filter,function,that,returns,the,given,exception,if,the,predicate,matches;public,static,exchange,filter,function,status,error,predicate,http,status,status,predicate,function,client,response,extends,throwable,exception,function,assert,not,null,status,predicate,status,predicate,must,not,be,null,assert,not,null,exception,function,exception,function,must,not,be,null,return,exchange,filter,function,of,response,processor,client,response,if,status,predicate,test,client,response,status,code,return,mono,error,exception,function,apply,client,response,else,return,mono,just,client,response
ExchangeFilterFunctions -> public static ExchangeFilterFunction statusError(Predicate<HttpStatus> statusPredicate, 			Function<ClientResponse, ? extends Throwable> exceptionFunction);1508532146;Return a filter that returns a given {@link Throwable} as response if the given_{@link HttpStatus} predicate matches._@param statusPredicate the predicate that should match the_{@linkplain ClientResponse#statusCode() response status}_@param exceptionFunction the function that returns the exception_@return the {@link ExchangeFilterFunction} that returns the given exception if the predicate_matches;public static ExchangeFilterFunction statusError(Predicate<HttpStatus> statusPredicate,_			Function<ClientResponse, ? extends Throwable> exceptionFunction) {__		Assert.notNull(statusPredicate, "'statusPredicate' must not be null")__		Assert.notNull(exceptionFunction, "'exceptionFunction' must not be null")___		return ExchangeFilterFunction.ofResponseProcessor(_				clientResponse -> {_					if (statusPredicate.test(clientResponse.statusCode())) {_						return Mono.error(exceptionFunction.apply(clientResponse))__					}_					else {_						return Mono.just(clientResponse)__					}_				}_		)__	};return,a,filter,that,returns,a,given,link,throwable,as,response,if,the,given,link,http,status,predicate,matches,param,status,predicate,the,predicate,that,should,match,the,linkplain,client,response,status,code,response,status,param,exception,function,the,function,that,returns,the,exception,return,the,link,exchange,filter,function,that,returns,the,given,exception,if,the,predicate,matches;public,static,exchange,filter,function,status,error,predicate,http,status,status,predicate,function,client,response,extends,throwable,exception,function,assert,not,null,status,predicate,status,predicate,must,not,be,null,assert,not,null,exception,function,exception,function,must,not,be,null,return,exchange,filter,function,of,response,processor,client,response,if,status,predicate,test,client,response,status,code,return,mono,error,exception,function,apply,client,response,else,return,mono,just,client,response
ExchangeFilterFunctions -> public static ExchangeFilterFunction statusError(Predicate<HttpStatus> statusPredicate, 			Function<ClientResponse, ? extends Throwable> exceptionFunction);1518567721;Return a filter that returns a given {@link Throwable} as response if the given_{@link HttpStatus} predicate matches._@param statusPredicate the predicate that should match the_{@linkplain ClientResponse#statusCode() response status}_@param exceptionFunction the function that returns the exception_@return the {@link ExchangeFilterFunction} that returns the given exception if the predicate_matches;public static ExchangeFilterFunction statusError(Predicate<HttpStatus> statusPredicate,_			Function<ClientResponse, ? extends Throwable> exceptionFunction) {__		Assert.notNull(statusPredicate, "'statusPredicate' must not be null")__		Assert.notNull(exceptionFunction, "'exceptionFunction' must not be null")___		return ExchangeFilterFunction.ofResponseProcessor(_				clientResponse -> {_					if (statusPredicate.test(clientResponse.statusCode())) {_						return Mono.error(exceptionFunction.apply(clientResponse))__					}_					else {_						return Mono.just(clientResponse)__					}_				}_		)__	};return,a,filter,that,returns,a,given,link,throwable,as,response,if,the,given,link,http,status,predicate,matches,param,status,predicate,the,predicate,that,should,match,the,linkplain,client,response,status,code,response,status,param,exception,function,the,function,that,returns,the,exception,return,the,link,exchange,filter,function,that,returns,the,given,exception,if,the,predicate,matches;public,static,exchange,filter,function,status,error,predicate,http,status,status,predicate,function,client,response,extends,throwable,exception,function,assert,not,null,status,predicate,status,predicate,must,not,be,null,assert,not,null,exception,function,exception,function,must,not,be,null,return,exchange,filter,function,of,response,processor,client,response,if,status,predicate,test,client,response,status,code,return,mono,error,exception,function,apply,client,response,else,return,mono,just,client,response
ExchangeFilterFunctions -> public static ExchangeFilterFunction statusError(Predicate<HttpStatus> statusPredicate, 			Function<ClientResponse, ? extends Throwable> exceptionFunction);1524865018;Return a filter that returns a given {@link Throwable} as response if the given_{@link HttpStatus} predicate matches._@param statusPredicate the predicate that should match the_{@linkplain ClientResponse#statusCode() response status}_@param exceptionFunction the function that returns the exception_@return the {@link ExchangeFilterFunction} that returns the given exception if the predicate_matches;public static ExchangeFilterFunction statusError(Predicate<HttpStatus> statusPredicate,_			Function<ClientResponse, ? extends Throwable> exceptionFunction) {__		Assert.notNull(statusPredicate, "Predicate must not be null")__		Assert.notNull(exceptionFunction, "Function must not be null")___		return ExchangeFilterFunction.ofResponseProcessor(_				clientResponse -> {_					if (statusPredicate.test(clientResponse.statusCode())) {_						return Mono.error(exceptionFunction.apply(clientResponse))__					}_					else {_						return Mono.just(clientResponse)__					}_				}_		)__	};return,a,filter,that,returns,a,given,link,throwable,as,response,if,the,given,link,http,status,predicate,matches,param,status,predicate,the,predicate,that,should,match,the,linkplain,client,response,status,code,response,status,param,exception,function,the,function,that,returns,the,exception,return,the,link,exchange,filter,function,that,returns,the,given,exception,if,the,predicate,matches;public,static,exchange,filter,function,status,error,predicate,http,status,status,predicate,function,client,response,extends,throwable,exception,function,assert,not,null,status,predicate,predicate,must,not,be,null,assert,not,null,exception,function,function,must,not,be,null,return,exchange,filter,function,of,response,processor,client,response,if,status,predicate,test,client,response,status,code,return,mono,error,exception,function,apply,client,response,else,return,mono,just,client,response
ExchangeFilterFunctions -> public static ExchangeFilterFunction statusError(Predicate<HttpStatus> statusPredicate, 			Function<ClientResponse, ? extends Throwable> exceptionFunction);1528924489;Return a filter that generates an error signal when the given_{@link HttpStatus} predicate matches._@param statusPredicate the predicate to check the HTTP status with_@param exceptionFunction the function that to create the exception_@return the filter to generate an error signal;public static ExchangeFilterFunction statusError(Predicate<HttpStatus> statusPredicate,_			Function<ClientResponse, ? extends Throwable> exceptionFunction) {__		Assert.notNull(statusPredicate, "Predicate must not be null")__		Assert.notNull(exceptionFunction, "Function must not be null")___		return ExchangeFilterFunction.ofResponseProcessor(_				response -> statusPredicate.test(response.statusCode()) ?_						Mono.error(exceptionFunction.apply(response)) :_						Mono.just(response)_		)__	};return,a,filter,that,generates,an,error,signal,when,the,given,link,http,status,predicate,matches,param,status,predicate,the,predicate,to,check,the,http,status,with,param,exception,function,the,function,that,to,create,the,exception,return,the,filter,to,generate,an,error,signal;public,static,exchange,filter,function,status,error,predicate,http,status,status,predicate,function,client,response,extends,throwable,exception,function,assert,not,null,status,predicate,predicate,must,not,be,null,assert,not,null,exception,function,function,must,not,be,null,return,exchange,filter,function,of,response,processor,response,status,predicate,test,response,status,code,mono,error,exception,function,apply,response,mono,just,response
ExchangeFilterFunctions -> public static ExchangeFilterFunction statusError(Predicate<HttpStatus> statusPredicate, 			Function<ClientResponse, ? extends Throwable> exceptionFunction);1530190293;Return a filter that generates an error signal when the given_{@link HttpStatus} predicate matches._@param statusPredicate the predicate to check the HTTP status with_@param exceptionFunction the function that to create the exception_@return the filter to generate an error signal;public static ExchangeFilterFunction statusError(Predicate<HttpStatus> statusPredicate,_			Function<ClientResponse, ? extends Throwable> exceptionFunction) {__		Assert.notNull(statusPredicate, "Predicate must not be null")__		Assert.notNull(exceptionFunction, "Function must not be null")___		return ExchangeFilterFunction.ofResponseProcessor(_				response -> (statusPredicate.test(response.statusCode()) ?_						Mono.error(exceptionFunction.apply(response)) : Mono.just(response)))__	};return,a,filter,that,generates,an,error,signal,when,the,given,link,http,status,predicate,matches,param,status,predicate,the,predicate,to,check,the,http,status,with,param,exception,function,the,function,that,to,create,the,exception,return,the,filter,to,generate,an,error,signal;public,static,exchange,filter,function,status,error,predicate,http,status,status,predicate,function,client,response,extends,throwable,exception,function,assert,not,null,status,predicate,predicate,must,not,be,null,assert,not,null,exception,function,function,must,not,be,null,return,exchange,filter,function,of,response,processor,response,status,predicate,test,response,status,code,mono,error,exception,function,apply,response,mono,just,response
ExchangeFilterFunctions -> public static ExchangeFilterFunction statusError(Predicate<HttpStatus> statusPredicate, 			Function<ClientResponse, ? extends Throwable> exceptionFunction);1531147311;Return a filter that generates an error signal when the given_{@link HttpStatus} predicate matches._@param statusPredicate the predicate to check the HTTP status with_@param exceptionFunction the function that to create the exception_@return the filter to generate an error signal;public static ExchangeFilterFunction statusError(Predicate<HttpStatus> statusPredicate,_			Function<ClientResponse, ? extends Throwable> exceptionFunction) {__		Assert.notNull(statusPredicate, "Predicate must not be null")__		Assert.notNull(exceptionFunction, "Function must not be null")___		return ExchangeFilterFunction.ofResponseProcessor(_				response -> (statusPredicate.test(response.statusCode()) ?_						Mono.error(exceptionFunction.apply(response)) : Mono.just(response)))__	};return,a,filter,that,generates,an,error,signal,when,the,given,link,http,status,predicate,matches,param,status,predicate,the,predicate,to,check,the,http,status,with,param,exception,function,the,function,that,to,create,the,exception,return,the,filter,to,generate,an,error,signal;public,static,exchange,filter,function,status,error,predicate,http,status,status,predicate,function,client,response,extends,throwable,exception,function,assert,not,null,status,predicate,predicate,must,not,be,null,assert,not,null,exception,function,function,must,not,be,null,return,exchange,filter,function,of,response,processor,response,status,predicate,test,response,status,code,mono,error,exception,function,apply,response,mono,just,response
ExchangeFilterFunctions -> public static ExchangeFilterFunction statusError(Predicate<HttpStatus> statusPredicate, 			Function<ClientResponse, ? extends Throwable> exceptionFunction);1533034998;Return a filter that generates an error signal when the given_{@link HttpStatus} predicate matches._@param statusPredicate the predicate to check the HTTP status with_@param exceptionFunction the function that to create the exception_@return the filter to generate an error signal;public static ExchangeFilterFunction statusError(Predicate<HttpStatus> statusPredicate,_			Function<ClientResponse, ? extends Throwable> exceptionFunction) {__		Assert.notNull(statusPredicate, "Predicate must not be null")__		Assert.notNull(exceptionFunction, "Function must not be null")___		return ExchangeFilterFunction.ofResponseProcessor(_				response -> (statusPredicate.test(response.statusCode()) ?_						Mono.error(exceptionFunction.apply(response)) : Mono.just(response)))__	};return,a,filter,that,generates,an,error,signal,when,the,given,link,http,status,predicate,matches,param,status,predicate,the,predicate,to,check,the,http,status,with,param,exception,function,the,function,that,to,create,the,exception,return,the,filter,to,generate,an,error,signal;public,static,exchange,filter,function,status,error,predicate,http,status,status,predicate,function,client,response,extends,throwable,exception,function,assert,not,null,status,predicate,predicate,must,not,be,null,assert,not,null,exception,function,function,must,not,be,null,return,exchange,filter,function,of,response,processor,response,status,predicate,test,response,status,code,mono,error,exception,function,apply,response,mono,just,response
ExchangeFilterFunctions -> public static ExchangeFilterFunction statusError(Predicate<HttpStatus> statusPredicate, 			Function<ClientResponse, ? extends Throwable> exceptionFunction);1533233962;Return a filter that generates an error signal when the given_{@link HttpStatus} predicate matches._@param statusPredicate the predicate to check the HTTP status with_@param exceptionFunction the function that to create the exception_@return the filter to generate an error signal;public static ExchangeFilterFunction statusError(Predicate<HttpStatus> statusPredicate,_			Function<ClientResponse, ? extends Throwable> exceptionFunction) {__		Assert.notNull(statusPredicate, "Predicate must not be null")__		Assert.notNull(exceptionFunction, "Function must not be null")___		return ExchangeFilterFunction.ofResponseProcessor(_				response -> (statusPredicate.test(response.statusCode()) ?_						Mono.error(exceptionFunction.apply(response)) : Mono.just(response)))__	};return,a,filter,that,generates,an,error,signal,when,the,given,link,http,status,predicate,matches,param,status,predicate,the,predicate,to,check,the,http,status,with,param,exception,function,the,function,that,to,create,the,exception,return,the,filter,to,generate,an,error,signal;public,static,exchange,filter,function,status,error,predicate,http,status,status,predicate,function,client,response,extends,throwable,exception,function,assert,not,null,status,predicate,predicate,must,not,be,null,assert,not,null,exception,function,function,must,not,be,null,return,exchange,filter,function,of,response,processor,response,status,predicate,test,response,status,code,mono,error,exception,function,apply,response,mono,just,response
ExchangeFilterFunctions -> public static ExchangeFilterFunction statusError(Predicate<HttpStatus> statusPredicate, 			Function<ClientResponse, ? extends Throwable> exceptionFunction);1533573240;Return a filter that generates an error signal when the given_{@link HttpStatus} predicate matches._@param statusPredicate the predicate to check the HTTP status with_@param exceptionFunction the function that to create the exception_@return the filter to generate an error signal;public static ExchangeFilterFunction statusError(Predicate<HttpStatus> statusPredicate,_			Function<ClientResponse, ? extends Throwable> exceptionFunction) {__		Assert.notNull(statusPredicate, "Predicate must not be null")__		Assert.notNull(exceptionFunction, "Function must not be null")___		return ExchangeFilterFunction.ofResponseProcessor(_				response -> (statusPredicate.test(response.statusCode()) ?_						Mono.error(exceptionFunction.apply(response)) : Mono.just(response)))__	};return,a,filter,that,generates,an,error,signal,when,the,given,link,http,status,predicate,matches,param,status,predicate,the,predicate,to,check,the,http,status,with,param,exception,function,the,function,that,to,create,the,exception,return,the,filter,to,generate,an,error,signal;public,static,exchange,filter,function,status,error,predicate,http,status,status,predicate,function,client,response,extends,throwable,exception,function,assert,not,null,status,predicate,predicate,must,not,be,null,assert,not,null,exception,function,function,must,not,be,null,return,exchange,filter,function,of,response,processor,response,status,predicate,test,response,status,code,mono,error,exception,function,apply,response,mono,just,response
ExchangeFilterFunctions -> public static ExchangeFilterFunction statusError(Predicate<HttpStatus> statusPredicate, 			Function<ClientResponse, ? extends Throwable> exceptionFunction);1533625827;Return a filter that generates an error signal when the given_{@link HttpStatus} predicate matches._@param statusPredicate the predicate to check the HTTP status with_@param exceptionFunction the function that to create the exception_@return the filter to generate an error signal;public static ExchangeFilterFunction statusError(Predicate<HttpStatus> statusPredicate,_			Function<ClientResponse, ? extends Throwable> exceptionFunction) {__		Assert.notNull(statusPredicate, "Predicate must not be null")__		Assert.notNull(exceptionFunction, "Function must not be null")___		return ExchangeFilterFunction.ofResponseProcessor(_				response -> (statusPredicate.test(response.statusCode()) ?_						Mono.error(exceptionFunction.apply(response)) : Mono.just(response)))__	};return,a,filter,that,generates,an,error,signal,when,the,given,link,http,status,predicate,matches,param,status,predicate,the,predicate,to,check,the,http,status,with,param,exception,function,the,function,that,to,create,the,exception,return,the,filter,to,generate,an,error,signal;public,static,exchange,filter,function,status,error,predicate,http,status,status,predicate,function,client,response,extends,throwable,exception,function,assert,not,null,status,predicate,predicate,must,not,be,null,assert,not,null,exception,function,function,must,not,be,null,return,exchange,filter,function,of,response,processor,response,status,predicate,test,response,status,code,mono,error,exception,function,apply,response,mono,just,response
ExchangeFilterFunctions -> public static ExchangeFilterFunction statusError(Predicate<HttpStatus> statusPredicate, 			Function<ClientResponse, ? extends Throwable> exceptionFunction);1539119626;Return a filter that generates an error signal when the given_{@link HttpStatus} predicate matches._@param statusPredicate the predicate to check the HTTP status with_@param exceptionFunction the function that to create the exception_@return the filter to generate an error signal;public static ExchangeFilterFunction statusError(Predicate<HttpStatus> statusPredicate,_			Function<ClientResponse, ? extends Throwable> exceptionFunction) {__		Assert.notNull(statusPredicate, "Predicate must not be null")__		Assert.notNull(exceptionFunction, "Function must not be null")___		return ExchangeFilterFunction.ofResponseProcessor(_				response -> (statusPredicate.test(response.statusCode()) ?_						Mono.error(exceptionFunction.apply(response)) : Mono.just(response)))__	};return,a,filter,that,generates,an,error,signal,when,the,given,link,http,status,predicate,matches,param,status,predicate,the,predicate,to,check,the,http,status,with,param,exception,function,the,function,that,to,create,the,exception,return,the,filter,to,generate,an,error,signal;public,static,exchange,filter,function,status,error,predicate,http,status,status,predicate,function,client,response,extends,throwable,exception,function,assert,not,null,status,predicate,predicate,must,not,be,null,assert,not,null,exception,function,function,must,not,be,null,return,exchange,filter,function,of,response,processor,response,status,predicate,test,response,status,code,mono,error,exception,function,apply,response,mono,just,response
ExchangeFilterFunctions -> public static ExchangeFilterFunction statusError(Predicate<HttpStatus> statusPredicate, 			Function<ClientResponse, ? extends Throwable> exceptionFunction);1542037423;Return a filter that generates an error signal when the given_{@link HttpStatus} predicate matches._@param statusPredicate the predicate to check the HTTP status with_@param exceptionFunction the function that to create the exception_@return the filter to generate an error signal;public static ExchangeFilterFunction statusError(Predicate<HttpStatus> statusPredicate,_			Function<ClientResponse, ? extends Throwable> exceptionFunction) {__		Assert.notNull(statusPredicate, "Predicate must not be null")__		Assert.notNull(exceptionFunction, "Function must not be null")___		return ExchangeFilterFunction.ofResponseProcessor(_				response -> (statusPredicate.test(response.statusCode()) ?_						Mono.error(exceptionFunction.apply(response)) : Mono.just(response)))__	};return,a,filter,that,generates,an,error,signal,when,the,given,link,http,status,predicate,matches,param,status,predicate,the,predicate,to,check,the,http,status,with,param,exception,function,the,function,that,to,create,the,exception,return,the,filter,to,generate,an,error,signal;public,static,exchange,filter,function,status,error,predicate,http,status,status,predicate,function,client,response,extends,throwable,exception,function,assert,not,null,status,predicate,predicate,must,not,be,null,assert,not,null,exception,function,function,must,not,be,null,return,exchange,filter,function,of,response,processor,response,status,predicate,test,response,status,code,mono,error,exception,function,apply,response,mono,just,response
ExchangeFilterFunctions -> Credentials -> public static Consumer<Map<String, Object>> basicAuthenticationCredentials(String user, String password);1528924489;Return a {@literal Consumer} that stores the given user and password_as a request attribute of type {@code Credentials} that is in turn_used by {@link ExchangeFilterFunctions#basicAuthentication()}._@param user the user_@param password the password_@return a consumer that can be passed into_{@linkplain ClientRequest.Builder#attributes(java.util.function.Consumer)}_@see ClientRequest.Builder#attributes(java.util.function.Consumer)_@see #BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE;public static Consumer<Map<String, Object>> basicAuthenticationCredentials(String user, String password) {_			Credentials credentials = new Credentials(user, password)__			checkIllegalCharacters(user, password)__			return map -> map.put(BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE, credentials)__		};return,a,literal,consumer,that,stores,the,given,user,and,password,as,a,request,attribute,of,type,code,credentials,that,is,in,turn,used,by,link,exchange,filter,functions,basic,authentication,param,user,the,user,param,password,the,password,return,a,consumer,that,can,be,passed,into,linkplain,client,request,builder,attributes,java,util,function,consumer,see,client,request,builder,attributes,java,util,function,consumer,see;public,static,consumer,map,string,object,basic,authentication,credentials,string,user,string,password,credentials,credentials,new,credentials,user,password,check,illegal,characters,user,password,return,map,map,put,credentials
ExchangeFilterFunctions -> Credentials -> public static Consumer<Map<String, Object>> basicAuthenticationCredentials(String user, String password);1530190293;Return a {@literal Consumer} that stores the given user and password_as a request attribute of type {@code Credentials} that is in turn_used by {@link ExchangeFilterFunctions#basicAuthentication()}._@param user the user_@param password the password_@return a consumer that can be passed into_{@linkplain ClientRequest.Builder#attributes(java.util.function.Consumer)}_@see ClientRequest.Builder#attributes(java.util.function.Consumer)_@see #BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE;public static Consumer<Map<String, Object>> basicAuthenticationCredentials(String user, String password) {_			Credentials credentials = new Credentials(user, password)__			checkIllegalCharacters(user, password)__			return (map -> map.put(BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE, credentials))__		};return,a,literal,consumer,that,stores,the,given,user,and,password,as,a,request,attribute,of,type,code,credentials,that,is,in,turn,used,by,link,exchange,filter,functions,basic,authentication,param,user,the,user,param,password,the,password,return,a,consumer,that,can,be,passed,into,linkplain,client,request,builder,attributes,java,util,function,consumer,see,client,request,builder,attributes,java,util,function,consumer,see;public,static,consumer,map,string,object,basic,authentication,credentials,string,user,string,password,credentials,credentials,new,credentials,user,password,check,illegal,characters,user,password,return,map,map,put,credentials
ExchangeFilterFunctions -> Credentials -> public static Consumer<Map<String, Object>> basicAuthenticationCredentials(String user, String password);1531147311;Return a {@literal Consumer} that stores the given user and password_as a request attribute of type {@code Credentials} that is in turn_used by {@link ExchangeFilterFunctions#basicAuthentication()}._@param user the user_@param password the password_@return a consumer that can be passed into_{@linkplain ClientRequest.Builder#attributes(java.util.function.Consumer)}_@see ClientRequest.Builder#attributes(java.util.function.Consumer)_@see #BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE;public static Consumer<Map<String, Object>> basicAuthenticationCredentials(String user, String password) {_			Credentials credentials = new Credentials(user, password)__			checkIllegalCharacters(user, password)__			return (map -> map.put(BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE, credentials))__		};return,a,literal,consumer,that,stores,the,given,user,and,password,as,a,request,attribute,of,type,code,credentials,that,is,in,turn,used,by,link,exchange,filter,functions,basic,authentication,param,user,the,user,param,password,the,password,return,a,consumer,that,can,be,passed,into,linkplain,client,request,builder,attributes,java,util,function,consumer,see,client,request,builder,attributes,java,util,function,consumer,see;public,static,consumer,map,string,object,basic,authentication,credentials,string,user,string,password,credentials,credentials,new,credentials,user,password,check,illegal,characters,user,password,return,map,map,put,credentials
ExchangeFilterFunctions -> Credentials -> public static Consumer<Map<String, Object>> basicAuthenticationCredentials(String user, String password);1533034998;Return a {@literal Consumer} that stores the given user and password_as a request attribute of type {@code Credentials} that is in turn_used by {@link ExchangeFilterFunctions#basicAuthentication()}._@param user the user_@param password the password_@return a consumer that can be passed into_{@linkplain ClientRequest.Builder#attributes(java.util.function.Consumer)}_@see ClientRequest.Builder#attributes(java.util.function.Consumer)_@see #BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE;public static Consumer<Map<String, Object>> basicAuthenticationCredentials(String user, String password) {_			Credentials credentials = new Credentials(user, password)__			checkIllegalCharacters(user, password)__			return (map -> map.put(BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE, credentials))__		};return,a,literal,consumer,that,stores,the,given,user,and,password,as,a,request,attribute,of,type,code,credentials,that,is,in,turn,used,by,link,exchange,filter,functions,basic,authentication,param,user,the,user,param,password,the,password,return,a,consumer,that,can,be,passed,into,linkplain,client,request,builder,attributes,java,util,function,consumer,see,client,request,builder,attributes,java,util,function,consumer,see;public,static,consumer,map,string,object,basic,authentication,credentials,string,user,string,password,credentials,credentials,new,credentials,user,password,check,illegal,characters,user,password,return,map,map,put,credentials
ExchangeFilterFunctions -> Credentials -> public static Consumer<Map<String, Object>> basicAuthenticationCredentials(String user, String password);1533233962;Return a {@literal Consumer} that stores the given user and password_as a request attribute of type {@code Credentials} that is in turn_used by {@link ExchangeFilterFunctions#basicAuthentication()}._@param user the user_@param password the password_@return a consumer that can be passed into_{@linkplain ClientRequest.Builder#attributes(java.util.function.Consumer)}_@see ClientRequest.Builder#attributes(java.util.function.Consumer)_@see #BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE;public static Consumer<Map<String, Object>> basicAuthenticationCredentials(String user, String password) {_			Credentials credentials = new Credentials(user, password)__			checkIllegalCharacters(user, password)__			return (map -> map.put(BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE, credentials))__		};return,a,literal,consumer,that,stores,the,given,user,and,password,as,a,request,attribute,of,type,code,credentials,that,is,in,turn,used,by,link,exchange,filter,functions,basic,authentication,param,user,the,user,param,password,the,password,return,a,consumer,that,can,be,passed,into,linkplain,client,request,builder,attributes,java,util,function,consumer,see,client,request,builder,attributes,java,util,function,consumer,see;public,static,consumer,map,string,object,basic,authentication,credentials,string,user,string,password,credentials,credentials,new,credentials,user,password,check,illegal,characters,user,password,return,map,map,put,credentials
ExchangeFilterFunctions -> Credentials -> public static Consumer<Map<String, Object>> basicAuthenticationCredentials(String user, String password);1533573240;Return a {@literal Consumer} that stores the given user and password_as a request attribute of type {@code Credentials} that is in turn_used by {@link ExchangeFilterFunctions#basicAuthentication()}._@param user the user_@param password the password_@return a consumer that can be passed into_{@linkplain ClientRequest.Builder#attributes(java.util.function.Consumer)}_@see ClientRequest.Builder#attributes(java.util.function.Consumer)_@see #BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE;public static Consumer<Map<String, Object>> basicAuthenticationCredentials(String user, String password) {_			Credentials credentials = new Credentials(user, password)__			checkIllegalCharacters(user, password)__			return (map -> map.put(BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE, credentials))__		};return,a,literal,consumer,that,stores,the,given,user,and,password,as,a,request,attribute,of,type,code,credentials,that,is,in,turn,used,by,link,exchange,filter,functions,basic,authentication,param,user,the,user,param,password,the,password,return,a,consumer,that,can,be,passed,into,linkplain,client,request,builder,attributes,java,util,function,consumer,see,client,request,builder,attributes,java,util,function,consumer,see;public,static,consumer,map,string,object,basic,authentication,credentials,string,user,string,password,credentials,credentials,new,credentials,user,password,check,illegal,characters,user,password,return,map,map,put,credentials
ExchangeFilterFunctions -> Credentials -> public static Consumer<Map<String, Object>> basicAuthenticationCredentials(String user, String password);1533625827;Return a {@literal Consumer} that stores the given user and password_as a request attribute of type {@code Credentials} that is in turn_used by {@link ExchangeFilterFunctions#basicAuthentication()}._@param user the user_@param password the password_@return a consumer that can be passed into_{@linkplain ClientRequest.Builder#attributes(java.util.function.Consumer)}_@see ClientRequest.Builder#attributes(java.util.function.Consumer)_@see #BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE;public static Consumer<Map<String, Object>> basicAuthenticationCredentials(String user, String password) {_			Credentials credentials = new Credentials(user, password)__			return (map -> map.put(BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE, credentials))__		};return,a,literal,consumer,that,stores,the,given,user,and,password,as,a,request,attribute,of,type,code,credentials,that,is,in,turn,used,by,link,exchange,filter,functions,basic,authentication,param,user,the,user,param,password,the,password,return,a,consumer,that,can,be,passed,into,linkplain,client,request,builder,attributes,java,util,function,consumer,see,client,request,builder,attributes,java,util,function,consumer,see;public,static,consumer,map,string,object,basic,authentication,credentials,string,user,string,password,credentials,credentials,new,credentials,user,password,return,map,map,put,credentials
ExchangeFilterFunctions -> Credentials -> public static Consumer<Map<String, Object>> basicAuthenticationCredentials(String user, String password);1539119626;Return a {@literal Consumer} that stores the given user and password_as a request attribute of type {@code Credentials} that is in turn_used by {@link ExchangeFilterFunctions#basicAuthentication()}._@param user the user_@param password the password_@return a consumer that can be passed into_{@linkplain ClientRequest.Builder#attributes(java.util.function.Consumer)}_@see ClientRequest.Builder#attributes(java.util.function.Consumer)_@see #BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE;public static Consumer<Map<String, Object>> basicAuthenticationCredentials(String user, String password) {_			Credentials credentials = new Credentials(user, password)__			return (map -> map.put(BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE, credentials))__		};return,a,literal,consumer,that,stores,the,given,user,and,password,as,a,request,attribute,of,type,code,credentials,that,is,in,turn,used,by,link,exchange,filter,functions,basic,authentication,param,user,the,user,param,password,the,password,return,a,consumer,that,can,be,passed,into,linkplain,client,request,builder,attributes,java,util,function,consumer,see,client,request,builder,attributes,java,util,function,consumer,see;public,static,consumer,map,string,object,basic,authentication,credentials,string,user,string,password,credentials,credentials,new,credentials,user,password,return,map,map,put,credentials
ExchangeFilterFunctions -> Credentials -> public static Consumer<Map<String, Object>> basicAuthenticationCredentials(String user, String password);1542037423;Return a {@literal Consumer} that stores the given user and password_as a request attribute of type {@code Credentials} that is in turn_used by {@link ExchangeFilterFunctions#basicAuthentication()}._@param user the user_@param password the password_@return a consumer that can be passed into_{@linkplain ClientRequest.Builder#attributes(java.util.function.Consumer)}_@see ClientRequest.Builder#attributes(java.util.function.Consumer)_@see #BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE;public static Consumer<Map<String, Object>> basicAuthenticationCredentials(String user, String password) {_			Credentials credentials = new Credentials(user, password)__			return (map -> map.put(BASIC_AUTHENTICATION_CREDENTIALS_ATTRIBUTE, credentials))__		};return,a,literal,consumer,that,stores,the,given,user,and,password,as,a,request,attribute,of,type,code,credentials,that,is,in,turn,used,by,link,exchange,filter,functions,basic,authentication,param,user,the,user,param,password,the,password,return,a,consumer,that,can,be,passed,into,linkplain,client,request,builder,attributes,java,util,function,consumer,see,client,request,builder,attributes,java,util,function,consumer,see;public,static,consumer,map,string,object,basic,authentication,credentials,string,user,string,password,credentials,credentials,new,credentials,user,password,return,map,map,put,credentials
