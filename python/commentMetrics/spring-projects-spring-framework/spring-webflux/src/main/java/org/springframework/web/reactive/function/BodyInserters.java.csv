# id;timestamp;commentText;codeText;commentWords;codeWords
BodyInserters -> public static FormInserter<String> fromFormData(MultiValueMap<String, String> formData);1509538672;Return a {@link FormInserter} that writes the given {@code MultiValueMap} as URL-encoded_form data. Note that the returned inserter allows for additional entries to be added via_{@link FormInserter#with(String, Object)}.__<p><strong>Note:</strong> you can also use the {@code syncBody(Object)}_method in the request builders of both the {@code WebClient} and_{@code WebTestClient}. In that case setting the content type is not_required. Just make sure the map contains String values only.__@param formData the form data to write to the output message_@return a {@code FormInserter} that writes form data;public static FormInserter<String> fromFormData(MultiValueMap<String, String> formData) {__		Assert.notNull(formData, "'formData' must not be null")___		return DefaultFormInserter.forFormData().with(formData)__	};return,a,link,form,inserter,that,writes,the,given,code,multi,value,map,as,url,encoded,form,data,note,that,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,p,strong,note,strong,you,can,also,use,the,code,sync,body,object,method,in,the,request,builders,of,both,the,code,web,client,and,code,web,test,client,in,that,case,setting,the,content,type,is,not,required,just,make,sure,the,map,contains,string,values,only,param,form,data,the,form,data,to,write,to,the,output,message,return,a,code,form,inserter,that,writes,form,data;public,static,form,inserter,string,from,form,data,multi,value,map,string,string,form,data,assert,not,null,form,data,form,data,must,not,be,null,return,default,form,inserter,for,form,data,with,form,data
BodyInserters -> public static FormInserter<String> fromFormData(MultiValueMap<String, String> formData);1509980418;Return a {@link FormInserter} that writes the given {@code MultiValueMap} as URL-encoded_form data. Note that the returned inserter allows for additional entries to be added via_{@link FormInserter#with(String, Object)}.__<p><strong>Note:</strong> you can also use the {@code syncBody(Object)}_method in the request builders of both the {@code WebClient} and_{@code WebTestClient}. In that case setting the content type is not_required. Just make sure the map contains String values only.__@param formData the form data to write to the output message_@return a {@code FormInserter} that writes form data;public static FormInserter<String> fromFormData(MultiValueMap<String, String> formData) {__		Assert.notNull(formData, "'formData' must not be null")___		return DefaultFormInserter.forFormData().with(formData)__	};return,a,link,form,inserter,that,writes,the,given,code,multi,value,map,as,url,encoded,form,data,note,that,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,p,strong,note,strong,you,can,also,use,the,code,sync,body,object,method,in,the,request,builders,of,both,the,code,web,client,and,code,web,test,client,in,that,case,setting,the,content,type,is,not,required,just,make,sure,the,map,contains,string,values,only,param,form,data,the,form,data,to,write,to,the,output,message,return,a,code,form,inserter,that,writes,form,data;public,static,form,inserter,string,from,form,data,multi,value,map,string,string,form,data,assert,not,null,form,data,form,data,must,not,be,null,return,default,form,inserter,for,form,data,with,form,data
BodyInserters -> public static FormInserter<String> fromFormData(MultiValueMap<String, String> formData);1510004038;Return a {@link FormInserter} that writes the given {@code MultiValueMap} as URL-encoded_form data. Note that the returned inserter allows for additional entries to be added via_{@link FormInserter#with(String, Object)}.__<p><strong>Note:</strong> you can also use the {@code syncBody(Object)}_method in the request builders of both the {@code WebClient} and_{@code WebTestClient}. In that case setting the content type is not_required. Just make sure the map contains String values only.__@param formData the form data to write to the output message_@return a {@code FormInserter} that writes form data;public static FormInserter<String> fromFormData(MultiValueMap<String, String> formData) {__		Assert.notNull(formData, "'formData' must not be null")___		return DefaultFormInserter.forFormData().with(formData)__	};return,a,link,form,inserter,that,writes,the,given,code,multi,value,map,as,url,encoded,form,data,note,that,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,p,strong,note,strong,you,can,also,use,the,code,sync,body,object,method,in,the,request,builders,of,both,the,code,web,client,and,code,web,test,client,in,that,case,setting,the,content,type,is,not,required,just,make,sure,the,map,contains,string,values,only,param,form,data,the,form,data,to,write,to,the,output,message,return,a,code,form,inserter,that,writes,form,data;public,static,form,inserter,string,from,form,data,multi,value,map,string,string,form,data,assert,not,null,form,data,form,data,must,not,be,null,return,default,form,inserter,for,form,data,with,form,data
BodyInserters -> public static FormInserter<String> fromFormData(MultiValueMap<String, String> formData);1510933433;Return a {@link FormInserter} that writes the given {@code MultiValueMap}_as URL-encoded form data. The returned inserter allows for additional_entries to be added via {@link FormInserter#with(String, Object)}.__<p>Note that you can also use the {@code syncBody(Object)} method in the_request builders of both the {@code WebClient} and {@code WebTestClient}._In that case the setting of the content type is also not required, just_be sure the map contains String values only or otherwise it would be_interpreted as a multipart request.__@param formData the form data to write to the output message_@return a {@code FormInserter} that writes form data;public static FormInserter<String> fromFormData(MultiValueMap<String, String> formData) {__		Assert.notNull(formData, "'formData' must not be null")___		return DefaultFormInserter.forFormData().with(formData)__	};return,a,link,form,inserter,that,writes,the,given,code,multi,value,map,as,url,encoded,form,data,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,p,note,that,you,can,also,use,the,code,sync,body,object,method,in,the,request,builders,of,both,the,code,web,client,and,code,web,test,client,in,that,case,the,setting,of,the,content,type,is,also,not,required,just,be,sure,the,map,contains,string,values,only,or,otherwise,it,would,be,interpreted,as,a,multipart,request,param,form,data,the,form,data,to,write,to,the,output,message,return,a,code,form,inserter,that,writes,form,data;public,static,form,inserter,string,from,form,data,multi,value,map,string,string,form,data,assert,not,null,form,data,form,data,must,not,be,null,return,default,form,inserter,for,form,data,with,form,data
BodyInserters -> public static FormInserter<String> fromFormData(MultiValueMap<String, String> formData);1513874461;Return a {@link FormInserter} that writes the given {@code MultiValueMap}_as URL-encoded form data. The returned inserter allows for additional_entries to be added via {@link FormInserter#with(String, Object)}.__<p>Note that you can also use the {@code syncBody(Object)} method in the_request builders of both the {@code WebClient} and {@code WebTestClient}._In that case the setting of the content type is also not required, just_be sure the map contains String values only or otherwise it would be_interpreted as a multipart request.__@param formData the form data to write to the output message_@return a {@code FormInserter} that writes form data;public static FormInserter<String> fromFormData(MultiValueMap<String, String> formData) {__		Assert.notNull(formData, "'formData' must not be null")___		return new DefaultFormInserter().with(formData)__	};return,a,link,form,inserter,that,writes,the,given,code,multi,value,map,as,url,encoded,form,data,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,p,note,that,you,can,also,use,the,code,sync,body,object,method,in,the,request,builders,of,both,the,code,web,client,and,code,web,test,client,in,that,case,the,setting,of,the,content,type,is,also,not,required,just,be,sure,the,map,contains,string,values,only,or,otherwise,it,would,be,interpreted,as,a,multipart,request,param,form,data,the,form,data,to,write,to,the,output,message,return,a,code,form,inserter,that,writes,form,data;public,static,form,inserter,string,from,form,data,multi,value,map,string,string,form,data,assert,not,null,form,data,form,data,must,not,be,null,return,new,default,form,inserter,with,form,data
BodyInserters -> public static FormInserter<String> fromFormData(MultiValueMap<String, String> formData);1515178754;Return a {@link FormInserter} that writes the given {@code MultiValueMap}_as URL-encoded form data. The returned inserter allows for additional_entries to be added via {@link FormInserter#with(String, Object)}.__<p>Note that you can also use the {@code syncBody(Object)} method in the_request builders of both the {@code WebClient} and {@code WebTestClient}._In that case the setting of the content type is also not required, just_be sure the map contains String values only or otherwise it would be_interpreted as a multipart request.__@param formData the form data to write to the output message_@return a {@code FormInserter} that writes form data;public static FormInserter<String> fromFormData(MultiValueMap<String, String> formData) {__		Assert.notNull(formData, "'formData' must not be null")___		return new DefaultFormInserter().with(formData)__	};return,a,link,form,inserter,that,writes,the,given,code,multi,value,map,as,url,encoded,form,data,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,p,note,that,you,can,also,use,the,code,sync,body,object,method,in,the,request,builders,of,both,the,code,web,client,and,code,web,test,client,in,that,case,the,setting,of,the,content,type,is,also,not,required,just,be,sure,the,map,contains,string,values,only,or,otherwise,it,would,be,interpreted,as,a,multipart,request,param,form,data,the,form,data,to,write,to,the,output,message,return,a,code,form,inserter,that,writes,form,data;public,static,form,inserter,string,from,form,data,multi,value,map,string,string,form,data,assert,not,null,form,data,form,data,must,not,be,null,return,new,default,form,inserter,with,form,data
BodyInserters -> public static FormInserter<String> fromFormData(MultiValueMap<String, String> formData);1515603291;Return a {@link FormInserter} that writes the given {@code MultiValueMap}_as URL-encoded form data. The returned inserter allows for additional_entries to be added via {@link FormInserter#with(String, Object)}.__<p>Note that you can also use the {@code syncBody(Object)} method in the_request builders of both the {@code WebClient} and {@code WebTestClient}._In that case the setting of the content type is also not required, just_be sure the map contains String values only or otherwise it would be_interpreted as a multipart request.__@param formData the form data to write to the output message_@return a {@code FormInserter} that writes form data;public static FormInserter<String> fromFormData(MultiValueMap<String, String> formData) {__		Assert.notNull(formData, "'formData' must not be null")___		return new DefaultFormInserter().with(formData)__	};return,a,link,form,inserter,that,writes,the,given,code,multi,value,map,as,url,encoded,form,data,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,p,note,that,you,can,also,use,the,code,sync,body,object,method,in,the,request,builders,of,both,the,code,web,client,and,code,web,test,client,in,that,case,the,setting,of,the,content,type,is,also,not,required,just,be,sure,the,map,contains,string,values,only,or,otherwise,it,would,be,interpreted,as,a,multipart,request,param,form,data,the,form,data,to,write,to,the,output,message,return,a,code,form,inserter,that,writes,form,data;public,static,form,inserter,string,from,form,data,multi,value,map,string,string,form,data,assert,not,null,form,data,form,data,must,not,be,null,return,new,default,form,inserter,with,form,data
BodyInserters -> public static FormInserter<String> fromFormData(MultiValueMap<String, String> formData);1521231485;Return a {@link FormInserter} that writes the given {@code MultiValueMap}_as URL-encoded form data. The returned inserter allows for additional_entries to be added via {@link FormInserter#with(String, Object)}.__<p>Note that you can also use the {@code syncBody(Object)} method in the_request builders of both the {@code WebClient} and {@code WebTestClient}._In that case the setting of the request content type is also not required,_just be sure the map contains String values only or otherwise it would be_interpreted as a multipart request.__@param formData the form data to write to the output message_@return the inserter that allows adding more form data;public static FormInserter<String> fromFormData(MultiValueMap<String, String> formData) {_		Assert.notNull(formData, "'formData' must not be null")__		return new DefaultFormInserter().with(formData)__	};return,a,link,form,inserter,that,writes,the,given,code,multi,value,map,as,url,encoded,form,data,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,p,note,that,you,can,also,use,the,code,sync,body,object,method,in,the,request,builders,of,both,the,code,web,client,and,code,web,test,client,in,that,case,the,setting,of,the,request,content,type,is,also,not,required,just,be,sure,the,map,contains,string,values,only,or,otherwise,it,would,be,interpreted,as,a,multipart,request,param,form,data,the,form,data,to,write,to,the,output,message,return,the,inserter,that,allows,adding,more,form,data;public,static,form,inserter,string,from,form,data,multi,value,map,string,string,form,data,assert,not,null,form,data,form,data,must,not,be,null,return,new,default,form,inserter,with,form,data
BodyInserters -> public static FormInserter<String> fromFormData(MultiValueMap<String, String> formData);1522103912;Return a {@link FormInserter} that writes the given {@code MultiValueMap}_as URL-encoded form data. The returned inserter allows for additional_entries to be added via {@link FormInserter#with(String, Object)}.__<p>Note that you can also use the {@code syncBody(Object)} method in the_request builders of both the {@code WebClient} and {@code WebTestClient}._In that case the setting of the request content type is also not required,_just be sure the map contains String values only or otherwise it would be_interpreted as a multipart request.__@param formData the form data to write to the output message_@return the inserter that allows adding more form data;public static FormInserter<String> fromFormData(MultiValueMap<String, String> formData) {_		return new DefaultFormInserter().with(formData)__	};return,a,link,form,inserter,that,writes,the,given,code,multi,value,map,as,url,encoded,form,data,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,p,note,that,you,can,also,use,the,code,sync,body,object,method,in,the,request,builders,of,both,the,code,web,client,and,code,web,test,client,in,that,case,the,setting,of,the,request,content,type,is,also,not,required,just,be,sure,the,map,contains,string,values,only,or,otherwise,it,would,be,interpreted,as,a,multipart,request,param,form,data,the,form,data,to,write,to,the,output,message,return,the,inserter,that,allows,adding,more,form,data;public,static,form,inserter,string,from,form,data,multi,value,map,string,string,form,data,return,new,default,form,inserter,with,form,data
BodyInserters -> public static FormInserter<String> fromFormData(MultiValueMap<String, String> formData);1524865018;Return a {@link FormInserter} that writes the given {@code MultiValueMap}_as URL-encoded form data. The returned inserter allows for additional_entries to be added via {@link FormInserter#with(String, Object)}.__<p>Note that you can also use the {@code syncBody(Object)} method in the_request builders of both the {@code WebClient} and {@code WebTestClient}._In that case the setting of the request content type is also not required,_just be sure the map contains String values only or otherwise it would be_interpreted as a multipart request.__@param formData the form data to write to the output message_@return the inserter that allows adding more form data;public static FormInserter<String> fromFormData(MultiValueMap<String, String> formData) {_		return new DefaultFormInserter().with(formData)__	};return,a,link,form,inserter,that,writes,the,given,code,multi,value,map,as,url,encoded,form,data,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,p,note,that,you,can,also,use,the,code,sync,body,object,method,in,the,request,builders,of,both,the,code,web,client,and,code,web,test,client,in,that,case,the,setting,of,the,request,content,type,is,also,not,required,just,be,sure,the,map,contains,string,values,only,or,otherwise,it,would,be,interpreted,as,a,multipart,request,param,form,data,the,form,data,to,write,to,the,output,message,return,the,inserter,that,allows,adding,more,form,data;public,static,form,inserter,string,from,form,data,multi,value,map,string,string,form,data,return,new,default,form,inserter,with,form,data
BodyInserters -> public static FormInserter<String> fromFormData(MultiValueMap<String, String> formData);1526354196;Return a {@link FormInserter} that writes the given {@code MultiValueMap}_as URL-encoded form data. The returned inserter allows for additional_entries to be added via {@link FormInserter#with(String, Object)}.__<p>Note that you can also use the {@code syncBody(Object)} method in the_request builders of both the {@code WebClient} and {@code WebTestClient}._In that case the setting of the request content type is also not required,_just be sure the map contains String values only or otherwise it would be_interpreted as a multipart request.__@param formData the form data to write to the output message_@return the inserter that allows adding more form data;public static FormInserter<String> fromFormData(MultiValueMap<String, String> formData) {_		return new DefaultFormInserter().with(formData)__	};return,a,link,form,inserter,that,writes,the,given,code,multi,value,map,as,url,encoded,form,data,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,p,note,that,you,can,also,use,the,code,sync,body,object,method,in,the,request,builders,of,both,the,code,web,client,and,code,web,test,client,in,that,case,the,setting,of,the,request,content,type,is,also,not,required,just,be,sure,the,map,contains,string,values,only,or,otherwise,it,would,be,interpreted,as,a,multipart,request,param,form,data,the,form,data,to,write,to,the,output,message,return,the,inserter,that,allows,adding,more,form,data;public,static,form,inserter,string,from,form,data,multi,value,map,string,string,form,data,return,new,default,form,inserter,with,form,data
BodyInserters -> public static FormInserter<String> fromFormData(MultiValueMap<String, String> formData);1527269520;Return a {@link FormInserter} to write the given {@code MultiValueMap}_as URL-encoded form data. The returned inserter allows for additional_entries to be added via {@link FormInserter#with(String, Object)}.__<p>Note that you can also use the {@code syncBody(Object)} method in the_request builders of both the {@code WebClient} and {@code WebTestClient}._In that case the setting of the request content type is also not required,_just be sure the map contains String values only or otherwise it would be_interpreted as a multipart request.__@param formData the form data to write to the output message_@return the inserter that allows adding more form data;public static FormInserter<String> fromFormData(MultiValueMap<String, String> formData) {_		return new DefaultFormInserter().with(formData)__	};return,a,link,form,inserter,to,write,the,given,code,multi,value,map,as,url,encoded,form,data,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,p,note,that,you,can,also,use,the,code,sync,body,object,method,in,the,request,builders,of,both,the,code,web,client,and,code,web,test,client,in,that,case,the,setting,of,the,request,content,type,is,also,not,required,just,be,sure,the,map,contains,string,values,only,or,otherwise,it,would,be,interpreted,as,a,multipart,request,param,form,data,the,form,data,to,write,to,the,output,message,return,the,inserter,that,allows,adding,more,form,data;public,static,form,inserter,string,from,form,data,multi,value,map,string,string,form,data,return,new,default,form,inserter,with,form,data
BodyInserters -> public static FormInserter<String> fromFormData(MultiValueMap<String, String> formData);1527341063;Return a {@link FormInserter} to write the given {@code MultiValueMap}_as URL-encoded form data. The returned inserter allows for additional_entries to be added via {@link FormInserter#with(String, Object)}.__<p>Note that you can also use the {@code syncBody(Object)} method in the_request builders of both the {@code WebClient} and {@code WebTestClient}._In that case the setting of the request content type is also not required,_just be sure the map contains String values only or otherwise it would be_interpreted as a multipart request.__@param formData the form data to write to the output message_@return the inserter that allows adding more form data;public static FormInserter<String> fromFormData(MultiValueMap<String, String> formData) {_		return new DefaultFormInserter().with(formData)__	};return,a,link,form,inserter,to,write,the,given,code,multi,value,map,as,url,encoded,form,data,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,p,note,that,you,can,also,use,the,code,sync,body,object,method,in,the,request,builders,of,both,the,code,web,client,and,code,web,test,client,in,that,case,the,setting,of,the,request,content,type,is,also,not,required,just,be,sure,the,map,contains,string,values,only,or,otherwise,it,would,be,interpreted,as,a,multipart,request,param,form,data,the,form,data,to,write,to,the,output,message,return,the,inserter,that,allows,adding,more,form,data;public,static,form,inserter,string,from,form,data,multi,value,map,string,string,form,data,return,new,default,form,inserter,with,form,data
BodyInserters -> public static FormInserter<String> fromFormData(MultiValueMap<String, String> formData);1530174524;Return a {@link FormInserter} to write the given {@code MultiValueMap}_as URL-encoded form data. The returned inserter allows for additional_entries to be added via {@link FormInserter#with(String, Object)}.__<p>Note that you can also use the {@code syncBody(Object)} method in the_request builders of both the {@code WebClient} and {@code WebTestClient}._In that case the setting of the request content type is also not required,_just be sure the map contains String values only or otherwise it would be_interpreted as a multipart request.__@param formData the form data to write to the output message_@return the inserter that allows adding more form data;public static FormInserter<String> fromFormData(MultiValueMap<String, String> formData) {_		return new DefaultFormInserter().with(formData)__	};return,a,link,form,inserter,to,write,the,given,code,multi,value,map,as,url,encoded,form,data,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,p,note,that,you,can,also,use,the,code,sync,body,object,method,in,the,request,builders,of,both,the,code,web,client,and,code,web,test,client,in,that,case,the,setting,of,the,request,content,type,is,also,not,required,just,be,sure,the,map,contains,string,values,only,or,otherwise,it,would,be,interpreted,as,a,multipart,request,param,form,data,the,form,data,to,write,to,the,output,message,return,the,inserter,that,allows,adding,more,form,data;public,static,form,inserter,string,from,form,data,multi,value,map,string,string,form,data,return,new,default,form,inserter,with,form,data
BodyInserters -> public static FormInserter<String> fromFormData(MultiValueMap<String, String> formData);1530793695;Return a {@link FormInserter} to write the given {@code MultiValueMap}_as URL-encoded form data. The returned inserter allows for additional_entries to be added via {@link FormInserter#with(String, Object)}.__<p>Note that you can also use the {@code syncBody(Object)} method in the_request builders of both the {@code WebClient} and {@code WebTestClient}._In that case the setting of the request content type is also not required,_just be sure the map contains String values only or otherwise it would be_interpreted as a multipart request.__@param formData the form data to write to the output message_@return the inserter that allows adding more form data;public static FormInserter<String> fromFormData(MultiValueMap<String, String> formData) {_		return new DefaultFormInserter().with(formData)__	};return,a,link,form,inserter,to,write,the,given,code,multi,value,map,as,url,encoded,form,data,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,p,note,that,you,can,also,use,the,code,sync,body,object,method,in,the,request,builders,of,both,the,code,web,client,and,code,web,test,client,in,that,case,the,setting,of,the,request,content,type,is,also,not,required,just,be,sure,the,map,contains,string,values,only,or,otherwise,it,would,be,interpreted,as,a,multipart,request,param,form,data,the,form,data,to,write,to,the,output,message,return,the,inserter,that,allows,adding,more,form,data;public,static,form,inserter,string,from,form,data,multi,value,map,string,string,form,data,return,new,default,form,inserter,with,form,data
BodyInserters -> public static FormInserter<String> fromFormData(MultiValueMap<String, String> formData);1542037423;Return a {@link FormInserter} to write the given {@code MultiValueMap}_as URL-encoded form data. The returned inserter allows for additional_entries to be added via {@link FormInserter#with(String, Object)}._<p>Note that you can also use the {@code syncBody(Object)} method in the_request builders of both the {@code WebClient} and {@code WebTestClient}._In that case the setting of the request content type is also not required,_just be sure the map contains String values only or otherwise it would be_interpreted as a multipart request._@param formData the form data to write to the output message_@return the inserter that allows adding more form data;public static FormInserter<String> fromFormData(MultiValueMap<String, String> formData) {_		return new DefaultFormInserter().with(formData)__	};return,a,link,form,inserter,to,write,the,given,code,multi,value,map,as,url,encoded,form,data,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,p,note,that,you,can,also,use,the,code,sync,body,object,method,in,the,request,builders,of,both,the,code,web,client,and,code,web,test,client,in,that,case,the,setting,of,the,request,content,type,is,also,not,required,just,be,sure,the,map,contains,string,values,only,or,otherwise,it,would,be,interpreted,as,a,multipart,request,param,form,data,the,form,data,to,write,to,the,output,message,return,the,inserter,that,allows,adding,more,form,data;public,static,form,inserter,string,from,form,data,multi,value,map,string,string,form,data,return,new,default,form,inserter,with,form,data
BodyInserters -> public static FormInserter<String> fromFormData(MultiValueMap<String, String> formData);1542613849;Return a {@link FormInserter} to write the given {@code MultiValueMap}_as URL-encoded form data. The returned inserter allows for additional_entries to be added via {@link FormInserter#with(String, Object)}._<p>Note that you can also use the {@code syncBody(Object)} method in the_request builders of both the {@code WebClient} and {@code WebTestClient}._In that case the setting of the request content type is also not required,_just be sure the map contains String values only or otherwise it would be_interpreted as a multipart request._@param formData the form data to write to the output message_@return the inserter that allows adding more form data;public static FormInserter<String> fromFormData(MultiValueMap<String, String> formData) {_		return new DefaultFormInserter().with(formData)__	};return,a,link,form,inserter,to,write,the,given,code,multi,value,map,as,url,encoded,form,data,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,p,note,that,you,can,also,use,the,code,sync,body,object,method,in,the,request,builders,of,both,the,code,web,client,and,code,web,test,client,in,that,case,the,setting,of,the,request,content,type,is,also,not,required,just,be,sure,the,map,contains,string,values,only,or,otherwise,it,would,be,interpreted,as,a,multipart,request,param,form,data,the,form,data,to,write,to,the,output,message,return,the,inserter,that,allows,adding,more,form,data;public,static,form,inserter,string,from,form,data,multi,value,map,string,string,form,data,return,new,default,form,inserter,with,form,data
BodyInserters -> public static FormInserter<String> fromFormData(MultiValueMap<String, String> formData);1542907316;Return a {@link FormInserter} to write the given {@code MultiValueMap}_as URL-encoded form data. The returned inserter allows for additional_entries to be added via {@link FormInserter#with(String, Object)}._<p>Note that you can also use the {@code syncBody(Object)} method in the_request builders of both the {@code WebClient} and {@code WebTestClient}._In that case the setting of the request content type is also not required,_just be sure the map contains String values only or otherwise it would be_interpreted as a multipart request._@param formData the form data to write to the output message_@return the inserter that allows adding more form data;public static FormInserter<String> fromFormData(MultiValueMap<String, String> formData) {_		return new DefaultFormInserter().with(formData)__	};return,a,link,form,inserter,to,write,the,given,code,multi,value,map,as,url,encoded,form,data,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,p,note,that,you,can,also,use,the,code,sync,body,object,method,in,the,request,builders,of,both,the,code,web,client,and,code,web,test,client,in,that,case,the,setting,of,the,request,content,type,is,also,not,required,just,be,sure,the,map,contains,string,values,only,or,otherwise,it,would,be,interpreted,as,a,multipart,request,param,form,data,the,form,data,to,write,to,the,output,message,return,the,inserter,that,allows,adding,more,form,data;public,static,form,inserter,string,from,form,data,multi,value,map,string,string,form,data,return,new,default,form,inserter,with,form,data
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(P publisher, 			ResolvableType elementType);1485986572;Return a {@code BodyInserter} that writes the given {@link Publisher}._@param publisher the publisher to stream to the response body_@param elementType the type of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(P publisher,_			ResolvableType elementType) {__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementType, "'elementType' must not be null")__		return bodyInserterFor(publisher, elementType)__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,param,publisher,the,publisher,to,stream,to,the,response,body,param,element,type,the,type,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,resolvable,type,element,type,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,type,element,type,must,not,be,null,return,body,inserter,for,publisher,element,type
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(P publisher, 			ResolvableType elementType);1486657400;Return a {@code BodyInserter} that writes the given {@link Publisher}._@param publisher the publisher to stream to the response body_@param elementType the type of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(P publisher,_			ResolvableType elementType) {__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementType, "'elementType' must not be null")__		return bodyInserterFor(publisher, elementType)__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,param,publisher,the,publisher,to,stream,to,the,response,body,param,element,type,the,type,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,resolvable,type,element,type,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,type,element,type,must,not,be,null,return,body,inserter,for,publisher,element,type
BodyInserters -> public static MultipartInserter fromMultipartData(MultiValueMap<String, Object> multipartData);1513874461;Return a {@code FormInserter} that writes the given {@code MultiValueMap}_as multipart data. The values in the {@code MultiValueMap} can be any_Object representing the body of the part, or an_{@link org.springframework.http.HttpEntity HttpEntity} representing a part_with body and headers. The {@code MultiValueMap} can be built conveniently_using {@link org.springframework.http.client.MultipartBodyBuilder_MultipartBodyBuilder}. Also the returned inserter allows for additional_entries to be added via {@link FormInserter#with(String, Object)}.__<p>Note that you can also use the {@code syncBody(Object)} method in the_request builders of both the {@code WebClient} and {@code WebTestClient}._In that case the setting of the content type is also not required, just_be sure the map contains at least one non-String value or otherwise,_without a content-type header as a hint, it would be interpreted as a_plain form data request.__@param multipartData the form data to write to the output message_@return a {@code BodyInserter} that writes multipart data_@see MultipartBodyBuilder;public static MultipartInserter fromMultipartData(MultiValueMap<String, Object> multipartData) {_		Assert.notNull(multipartData, "'multipartData' must not be null")__		return new DefaultMultipartInserter().with(multipartData)__	};return,a,code,form,inserter,that,writes,the,given,code,multi,value,map,as,multipart,data,the,values,in,the,code,multi,value,map,can,be,any,object,representing,the,body,of,the,part,or,an,link,org,springframework,http,http,entity,http,entity,representing,a,part,with,body,and,headers,the,code,multi,value,map,can,be,built,conveniently,using,link,org,springframework,http,client,multipart,body,builder,multipart,body,builder,also,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,p,note,that,you,can,also,use,the,code,sync,body,object,method,in,the,request,builders,of,both,the,code,web,client,and,code,web,test,client,in,that,case,the,setting,of,the,content,type,is,also,not,required,just,be,sure,the,map,contains,at,least,one,non,string,value,or,otherwise,without,a,content,type,header,as,a,hint,it,would,be,interpreted,as,a,plain,form,data,request,param,multipart,data,the,form,data,to,write,to,the,output,message,return,a,code,body,inserter,that,writes,multipart,data,see,multipart,body,builder;public,static,multipart,inserter,from,multipart,data,multi,value,map,string,object,multipart,data,assert,not,null,multipart,data,multipart,data,must,not,be,null,return,new,default,multipart,inserter,with,multipart,data
BodyInserters -> public static MultipartInserter fromMultipartData(MultiValueMap<String, Object> multipartData);1515178754;Return a {@code FormInserter} that writes the given {@code MultiValueMap}_as multipart data. The values in the {@code MultiValueMap} can be any_Object representing the body of the part, or an_{@link org.springframework.http.HttpEntity HttpEntity} representing a part_with body and headers. The {@code MultiValueMap} can be built conveniently_using {@link org.springframework.http.client.MultipartBodyBuilder_MultipartBodyBuilder}. Also the returned inserter allows for additional_entries to be added via {@link FormInserter#with(String, Object)}.__<p>Note that you can also use the {@code syncBody(Object)} method in the_request builders of both the {@code WebClient} and {@code WebTestClient}._In that case the setting of the content type is also not required, just_be sure the map contains at least one non-String value or otherwise,_without a content-type header as a hint, it would be interpreted as a_plain form data request.__@param multipartData the form data to write to the output message_@return a {@code BodyInserter} that writes multipart data_@see MultipartBodyBuilder;public static MultipartInserter fromMultipartData(MultiValueMap<String, Object> multipartData) {_		Assert.notNull(multipartData, "'multipartData' must not be null")__		return new DefaultMultipartInserter().with(multipartData)__	};return,a,code,form,inserter,that,writes,the,given,code,multi,value,map,as,multipart,data,the,values,in,the,code,multi,value,map,can,be,any,object,representing,the,body,of,the,part,or,an,link,org,springframework,http,http,entity,http,entity,representing,a,part,with,body,and,headers,the,code,multi,value,map,can,be,built,conveniently,using,link,org,springframework,http,client,multipart,body,builder,multipart,body,builder,also,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,p,note,that,you,can,also,use,the,code,sync,body,object,method,in,the,request,builders,of,both,the,code,web,client,and,code,web,test,client,in,that,case,the,setting,of,the,content,type,is,also,not,required,just,be,sure,the,map,contains,at,least,one,non,string,value,or,otherwise,without,a,content,type,header,as,a,hint,it,would,be,interpreted,as,a,plain,form,data,request,param,multipart,data,the,form,data,to,write,to,the,output,message,return,a,code,body,inserter,that,writes,multipart,data,see,multipart,body,builder;public,static,multipart,inserter,from,multipart,data,multi,value,map,string,object,multipart,data,assert,not,null,multipart,data,multipart,data,must,not,be,null,return,new,default,multipart,inserter,with,multipart,data
BodyInserters -> public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers(T publisher);1485986572;Return a {@code BodyInserter} that writes the given {@code Publisher<DataBuffer>} to the_body._@param publisher the data buffer publisher to write_@param <T> the type of the publisher_@return a {@code BodyInserter} that writes directly to the body_@see ReactiveHttpOutputMessage#writeWith(Publisher);public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers(T publisher) {_		Assert.notNull(publisher, "'publisher' must not be null")___		return (outputMessage, context) -> outputMessage.writeWith(publisher)__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,data,buffer,to,the,body,param,publisher,the,data,buffer,publisher,to,write,param,t,the,type,of,the,publisher,return,a,code,body,inserter,that,writes,directly,to,the,body,see,reactive,http,output,message,write,with,publisher;public,static,t,extends,publisher,data,buffer,body,inserter,t,reactive,http,output,message,from,data,buffers,t,publisher,assert,not,null,publisher,publisher,must,not,be,null,return,output,message,context,output,message,write,with,publisher
BodyInserters -> public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers(T publisher);1486657400;Return a {@code BodyInserter} that writes the given {@code Publisher<DataBuffer>} to the_body._@param publisher the data buffer publisher to write_@param <T> the type of the publisher_@return a {@code BodyInserter} that writes directly to the body_@see ReactiveHttpOutputMessage#writeWith(Publisher);public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers(T publisher) {_		Assert.notNull(publisher, "'publisher' must not be null")___		return (outputMessage, context) -> outputMessage.writeWith(publisher)__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,data,buffer,to,the,body,param,publisher,the,data,buffer,publisher,to,write,param,t,the,type,of,the,publisher,return,a,code,body,inserter,that,writes,directly,to,the,body,see,reactive,http,output,message,write,with,publisher;public,static,t,extends,publisher,data,buffer,body,inserter,t,reactive,http,output,message,from,data,buffers,t,publisher,assert,not,null,publisher,publisher,must,not,be,null,return,output,message,context,output,message,write,with,publisher
BodyInserters -> public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(String name, 			P publisher, ParameterizedTypeReference<T> typeReference);1521231485;Variant of {@link #fromMultipartAsyncData(String, Publisher, Class)} that_accepts a {@link ParameterizedTypeReference} for the element type, which_allows specifying generic type information.__<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}.__@param name the part name_@param publisher the publisher that forms the part value_@param typeReference the type contained in the {@code publisher}_@return the inserter that allows adding more parts;public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(String name,_			P publisher, ParameterizedTypeReference<T> typeReference) {__		Assert.notNull(name, "'key' must not be null")__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(typeReference, "'typeReference' must not be null")___		return new DefaultMultipartInserter().withPublisher(name, publisher, typeReference)__	};variant,of,link,from,multipart,async,data,string,publisher,class,that,accepts,a,link,parameterized,type,reference,for,the,element,type,which,allows,specifying,generic,type,information,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,name,the,part,name,param,publisher,the,publisher,that,forms,the,part,value,param,type,reference,the,type,contained,in,the,code,publisher,return,the,inserter,that,allows,adding,more,parts;public,static,t,p,extends,publisher,t,multipart,inserter,from,multipart,async,data,string,name,p,publisher,parameterized,type,reference,t,type,reference,assert,not,null,name,key,must,not,be,null,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,type,reference,type,reference,must,not,be,null,return,new,default,multipart,inserter,with,publisher,name,publisher,type,reference
BodyInserters -> public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(String name, 			P publisher, ParameterizedTypeReference<T> typeReference);1522103912;Variant of {@link #fromMultipartAsyncData(String, Publisher, Class)} that_accepts a {@link ParameterizedTypeReference} for the element type, which_allows specifying generic type information.__<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}.__@param name the part name_@param publisher the publisher that forms the part value_@param typeReference the type contained in the {@code publisher}_@return the inserter that allows adding more parts;public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(String name,_			P publisher, ParameterizedTypeReference<T> typeReference) {__		Assert.notNull(name, "'key' must not be null")__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(typeReference, "'typeReference' must not be null")___		return new DefaultMultipartInserter().withPublisher(name, publisher, typeReference)__	};variant,of,link,from,multipart,async,data,string,publisher,class,that,accepts,a,link,parameterized,type,reference,for,the,element,type,which,allows,specifying,generic,type,information,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,name,the,part,name,param,publisher,the,publisher,that,forms,the,part,value,param,type,reference,the,type,contained,in,the,code,publisher,return,the,inserter,that,allows,adding,more,parts;public,static,t,p,extends,publisher,t,multipart,inserter,from,multipart,async,data,string,name,p,publisher,parameterized,type,reference,t,type,reference,assert,not,null,name,key,must,not,be,null,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,type,reference,type,reference,must,not,be,null,return,new,default,multipart,inserter,with,publisher,name,publisher,type,reference
BodyInserters -> public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData( 			String name, P publisher, ParameterizedTypeReference<T> typeReference);1524865018;Variant of {@link #fromMultipartAsyncData(String, Publisher, Class)} that_accepts a {@link ParameterizedTypeReference} for the element type, which_allows specifying generic type information._<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}._@param name the part name_@param publisher the publisher that forms the part value_@param typeReference the type contained in the {@code publisher}_@return the inserter that allows adding more parts;public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(_			String name, P publisher, ParameterizedTypeReference<T> typeReference) {__		return new DefaultMultipartInserter().withPublisher(name, publisher, typeReference)__	};variant,of,link,from,multipart,async,data,string,publisher,class,that,accepts,a,link,parameterized,type,reference,for,the,element,type,which,allows,specifying,generic,type,information,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,name,the,part,name,param,publisher,the,publisher,that,forms,the,part,value,param,type,reference,the,type,contained,in,the,code,publisher,return,the,inserter,that,allows,adding,more,parts;public,static,t,p,extends,publisher,t,multipart,inserter,from,multipart,async,data,string,name,p,publisher,parameterized,type,reference,t,type,reference,return,new,default,multipart,inserter,with,publisher,name,publisher,type,reference
BodyInserters -> public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData( 			String name, P publisher, ParameterizedTypeReference<T> typeReference);1526354196;Variant of {@link #fromMultipartAsyncData(String, Publisher, Class)} that_accepts a {@link ParameterizedTypeReference} for the element type, which_allows specifying generic type information._<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}._@param name the part name_@param publisher the publisher that forms the part value_@param typeReference the type contained in the {@code publisher}_@return the inserter that allows adding more parts;public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(_			String name, P publisher, ParameterizedTypeReference<T> typeReference) {__		return new DefaultMultipartInserter().withPublisher(name, publisher, typeReference)__	};variant,of,link,from,multipart,async,data,string,publisher,class,that,accepts,a,link,parameterized,type,reference,for,the,element,type,which,allows,specifying,generic,type,information,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,name,the,part,name,param,publisher,the,publisher,that,forms,the,part,value,param,type,reference,the,type,contained,in,the,code,publisher,return,the,inserter,that,allows,adding,more,parts;public,static,t,p,extends,publisher,t,multipart,inserter,from,multipart,async,data,string,name,p,publisher,parameterized,type,reference,t,type,reference,return,new,default,multipart,inserter,with,publisher,name,publisher,type,reference
BodyInserters -> public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData( 			String name, P publisher, ParameterizedTypeReference<T> typeReference);1527269520;Variant of {@link #fromMultipartAsyncData(String, Publisher, Class)} that_accepts a {@link ParameterizedTypeReference} for the element type, which_allows specifying generic type information._<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}._@param name the part name_@param publisher the publisher that forms the part value_@param typeReference the type contained in the {@code publisher}_@return the inserter that allows adding more parts;public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(_			String name, P publisher, ParameterizedTypeReference<T> typeReference) {__		return new DefaultMultipartInserter().withPublisher(name, publisher, typeReference)__	};variant,of,link,from,multipart,async,data,string,publisher,class,that,accepts,a,link,parameterized,type,reference,for,the,element,type,which,allows,specifying,generic,type,information,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,name,the,part,name,param,publisher,the,publisher,that,forms,the,part,value,param,type,reference,the,type,contained,in,the,code,publisher,return,the,inserter,that,allows,adding,more,parts;public,static,t,p,extends,publisher,t,multipart,inserter,from,multipart,async,data,string,name,p,publisher,parameterized,type,reference,t,type,reference,return,new,default,multipart,inserter,with,publisher,name,publisher,type,reference
BodyInserters -> public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData( 			String name, P publisher, ParameterizedTypeReference<T> typeReference);1527341063;Variant of {@link #fromMultipartAsyncData(String, Publisher, Class)} that_accepts a {@link ParameterizedTypeReference} for the element type, which_allows specifying generic type information._<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}._@param name the part name_@param publisher the publisher that forms the part value_@param typeReference the type contained in the {@code publisher}_@return the inserter that allows adding more parts;public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(_			String name, P publisher, ParameterizedTypeReference<T> typeReference) {__		return new DefaultMultipartInserter().withPublisher(name, publisher, typeReference)__	};variant,of,link,from,multipart,async,data,string,publisher,class,that,accepts,a,link,parameterized,type,reference,for,the,element,type,which,allows,specifying,generic,type,information,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,name,the,part,name,param,publisher,the,publisher,that,forms,the,part,value,param,type,reference,the,type,contained,in,the,code,publisher,return,the,inserter,that,allows,adding,more,parts;public,static,t,p,extends,publisher,t,multipart,inserter,from,multipart,async,data,string,name,p,publisher,parameterized,type,reference,t,type,reference,return,new,default,multipart,inserter,with,publisher,name,publisher,type,reference
BodyInserters -> public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData( 			String name, P publisher, ParameterizedTypeReference<T> typeReference);1530174524;Variant of {@link #fromMultipartAsyncData(String, Publisher, Class)} that_accepts a {@link ParameterizedTypeReference} for the element type, which_allows specifying generic type information._<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}._@param name the part name_@param publisher the publisher that forms the part value_@param typeReference the type contained in the {@code publisher}_@return the inserter that allows adding more parts;public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(_			String name, P publisher, ParameterizedTypeReference<T> typeReference) {__		return new DefaultMultipartInserter().withPublisher(name, publisher, typeReference)__	};variant,of,link,from,multipart,async,data,string,publisher,class,that,accepts,a,link,parameterized,type,reference,for,the,element,type,which,allows,specifying,generic,type,information,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,name,the,part,name,param,publisher,the,publisher,that,forms,the,part,value,param,type,reference,the,type,contained,in,the,code,publisher,return,the,inserter,that,allows,adding,more,parts;public,static,t,p,extends,publisher,t,multipart,inserter,from,multipart,async,data,string,name,p,publisher,parameterized,type,reference,t,type,reference,return,new,default,multipart,inserter,with,publisher,name,publisher,type,reference
BodyInserters -> public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData( 			String name, P publisher, ParameterizedTypeReference<T> typeReference);1530793695;Variant of {@link #fromMultipartAsyncData(String, Publisher, Class)} that_accepts a {@link ParameterizedTypeReference} for the element type, which_allows specifying generic type information._<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}._@param name the part name_@param publisher the publisher that forms the part value_@param typeReference the type contained in the {@code publisher}_@return the inserter that allows adding more parts;public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(_			String name, P publisher, ParameterizedTypeReference<T> typeReference) {__		return new DefaultMultipartInserter().withPublisher(name, publisher, typeReference)__	};variant,of,link,from,multipart,async,data,string,publisher,class,that,accepts,a,link,parameterized,type,reference,for,the,element,type,which,allows,specifying,generic,type,information,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,name,the,part,name,param,publisher,the,publisher,that,forms,the,part,value,param,type,reference,the,type,contained,in,the,code,publisher,return,the,inserter,that,allows,adding,more,parts;public,static,t,p,extends,publisher,t,multipart,inserter,from,multipart,async,data,string,name,p,publisher,parameterized,type,reference,t,type,reference,return,new,default,multipart,inserter,with,publisher,name,publisher,type,reference
BodyInserters -> public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData( 			String name, P publisher, ParameterizedTypeReference<T> typeReference);1542037423;Variant of {@link #fromMultipartAsyncData(String, Publisher, Class)} that_accepts a {@link ParameterizedTypeReference} for the element type, which_allows specifying generic type information._<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}._@param name the part name_@param publisher the publisher that forms the part value_@param typeReference the type contained in the {@code publisher}_@return the inserter that allows adding more parts;public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(_			String name, P publisher, ParameterizedTypeReference<T> typeReference) {__		return new DefaultMultipartInserter().withPublisher(name, publisher, typeReference)__	};variant,of,link,from,multipart,async,data,string,publisher,class,that,accepts,a,link,parameterized,type,reference,for,the,element,type,which,allows,specifying,generic,type,information,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,name,the,part,name,param,publisher,the,publisher,that,forms,the,part,value,param,type,reference,the,type,contained,in,the,code,publisher,return,the,inserter,that,allows,adding,more,parts;public,static,t,p,extends,publisher,t,multipart,inserter,from,multipart,async,data,string,name,p,publisher,parameterized,type,reference,t,type,reference,return,new,default,multipart,inserter,with,publisher,name,publisher,type,reference
BodyInserters -> public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData( 			String name, P publisher, ParameterizedTypeReference<T> typeReference);1542613849;Variant of {@link #fromMultipartAsyncData(String, Publisher, Class)} that_accepts a {@link ParameterizedTypeReference} for the element type, which_allows specifying generic type information._<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}._@param name the part name_@param publisher the publisher that forms the part value_@param typeReference the type contained in the {@code publisher}_@return the inserter that allows adding more parts;public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(_			String name, P publisher, ParameterizedTypeReference<T> typeReference) {__		return new DefaultMultipartInserter().withPublisher(name, publisher, typeReference)__	};variant,of,link,from,multipart,async,data,string,publisher,class,that,accepts,a,link,parameterized,type,reference,for,the,element,type,which,allows,specifying,generic,type,information,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,name,the,part,name,param,publisher,the,publisher,that,forms,the,part,value,param,type,reference,the,type,contained,in,the,code,publisher,return,the,inserter,that,allows,adding,more,parts;public,static,t,p,extends,publisher,t,multipart,inserter,from,multipart,async,data,string,name,p,publisher,parameterized,type,reference,t,type,reference,return,new,default,multipart,inserter,with,publisher,name,publisher,type,reference
BodyInserters -> public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData( 			String name, P publisher, ParameterizedTypeReference<T> typeReference);1542907316;Variant of {@link #fromMultipartAsyncData(String, Publisher, Class)} that_accepts a {@link ParameterizedTypeReference} for the element type, which_allows specifying generic type information._<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}._@param name the part name_@param publisher the publisher that forms the part value_@param typeReference the type contained in the {@code publisher}_@return the inserter that allows adding more parts;public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(_			String name, P publisher, ParameterizedTypeReference<T> typeReference) {__		return new DefaultMultipartInserter().withPublisher(name, publisher, typeReference)__	};variant,of,link,from,multipart,async,data,string,publisher,class,that,accepts,a,link,parameterized,type,reference,for,the,element,type,which,allows,specifying,generic,type,information,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,name,the,part,name,param,publisher,the,publisher,that,forms,the,part,value,param,type,reference,the,type,contained,in,the,code,publisher,return,the,inserter,that,allows,adding,more,parts;public,static,t,p,extends,publisher,t,multipart,inserter,from,multipart,async,data,string,name,p,publisher,parameterized,type,reference,t,type,reference,return,new,default,multipart,inserter,with,publisher,name,publisher,type,reference
BodyInserters -> public static <T> FormInserter<T> fromMultipartData(String key, T value);1509538672;Return a {@code FormInserter} that writes the key-value pair  as multipart data. Note that_the returned inserter allows for additional entries to be added via_{@link FormInserter#with(String, Object)}._@param key the key to add to the form_@param value the value to add to the form_@return a {@code FormInserter} that writes multipart data;public static <T> FormInserter<T> fromMultipartData(String key, T value) {_		Assert.notNull(key, "'key' must not be null")__		Assert.notNull(value, "'value' must not be null")___		return DefaultFormInserter.<T>forMultipartData().with(key, value)__	};return,a,code,form,inserter,that,writes,the,key,value,pair,as,multipart,data,note,that,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,param,key,the,key,to,add,to,the,form,param,value,the,value,to,add,to,the,form,return,a,code,form,inserter,that,writes,multipart,data;public,static,t,form,inserter,t,from,multipart,data,string,key,t,value,assert,not,null,key,key,must,not,be,null,assert,not,null,value,value,must,not,be,null,return,default,form,inserter,t,for,multipart,data,with,key,value
BodyInserters -> public static <T> FormInserter<T> fromMultipartData(String key, T value);1509980418;Return a {@code FormInserter} that writes the key-value pair  as multipart data. The_{@code multipartData} parameter can conveniently be built using the_{@link org.springframework.http.client.MultipartBodyBuilder MultipartBodyBuilder}._Note that the returned inserter allows for additional entries to be added_via {@link FormInserter#with(String, Object)}._{@link FormInserter#with(String, Object)}._@param key the key to add to the form_@param value the value to add to the form_@return a {@code FormInserter} that writes multipart data;public static <T> FormInserter<T> fromMultipartData(String key, T value) {_		Assert.notNull(key, "'key' must not be null")__		Assert.notNull(value, "'value' must not be null")___		return DefaultFormInserter.<T>forMultipartData().with(key, value)__	};return,a,code,form,inserter,that,writes,the,key,value,pair,as,multipart,data,the,code,multipart,data,parameter,can,conveniently,be,built,using,the,link,org,springframework,http,client,multipart,body,builder,multipart,body,builder,note,that,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,link,form,inserter,with,string,object,param,key,the,key,to,add,to,the,form,param,value,the,value,to,add,to,the,form,return,a,code,form,inserter,that,writes,multipart,data;public,static,t,form,inserter,t,from,multipart,data,string,key,t,value,assert,not,null,key,key,must,not,be,null,assert,not,null,value,value,must,not,be,null,return,default,form,inserter,t,for,multipart,data,with,key,value
BodyInserters -> public static <T> FormInserter<T> fromMultipartData(String key, T value);1510004038;A variant of {@link #fromMultipartData(MultiValueMap)} for adding_parts as name-value pairs in-line vs building a {@code MultiValueMap}_and passing it in._@param key the part name_@param value the part value, an Object or {@code HttpEntity}_@return a {@code FormInserter} that can writes the provided multipart_data and also allows adding more parts;public static <T> FormInserter<T> fromMultipartData(String key, T value) {_		Assert.notNull(key, "'key' must not be null")__		Assert.notNull(value, "'value' must not be null")___		return DefaultFormInserter.<T>forMultipartData().with(key, value)__	};a,variant,of,link,from,multipart,data,multi,value,map,for,adding,parts,as,name,value,pairs,in,line,vs,building,a,code,multi,value,map,and,passing,it,in,param,key,the,part,name,param,value,the,part,value,an,object,or,code,http,entity,return,a,code,form,inserter,that,can,writes,the,provided,multipart,data,and,also,allows,adding,more,parts;public,static,t,form,inserter,t,from,multipart,data,string,key,t,value,assert,not,null,key,key,must,not,be,null,assert,not,null,value,value,must,not,be,null,return,default,form,inserter,t,for,multipart,data,with,key,value
BodyInserters -> public static <T> FormInserter<T> fromMultipartData(String key, T value);1510933433;A variant of {@link #fromMultipartData(MultiValueMap)} for adding_parts as name-value pairs in-line vs building a {@code MultiValueMap}_and passing it in._@param key the part name_@param value the part value, an Object or {@code HttpEntity}_@return a {@code FormInserter} that can writes the provided multipart_data and also allows adding more parts;public static <T> FormInserter<T> fromMultipartData(String key, T value) {_		Assert.notNull(key, "'key' must not be null")__		Assert.notNull(value, "'value' must not be null")___		return DefaultFormInserter.<T>forMultipartData().with(key, value)__	};a,variant,of,link,from,multipart,data,multi,value,map,for,adding,parts,as,name,value,pairs,in,line,vs,building,a,code,multi,value,map,and,passing,it,in,param,key,the,part,name,param,value,the,part,value,an,object,or,code,http,entity,return,a,code,form,inserter,that,can,writes,the,provided,multipart,data,and,also,allows,adding,more,parts;public,static,t,form,inserter,t,from,multipart,data,string,key,t,value,assert,not,null,key,key,must,not,be,null,assert,not,null,value,value,must,not,be,null,return,default,form,inserter,t,for,multipart,data,with,key,value
BodyInserters -> public static MultipartInserter fromMultipartData(String name, Object value);1521231485;Return a {@link MultipartInserter} that writes the given parts,_as multipart data. Values in the map can be an Object or an_{@link HttpEntity}.__<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}.__@param name the part name_@param value the part value, an Object or {@code HttpEntity}_@return the inserter that allows adding more parts;public static MultipartInserter fromMultipartData(String name, Object value) {_		Assert.notNull(name, "'key' must not be null")__		Assert.notNull(value, "'value' must not be null")__		return new DefaultMultipartInserter().with(name, value)__	};return,a,link,multipart,inserter,that,writes,the,given,parts,as,multipart,data,values,in,the,map,can,be,an,object,or,an,link,http,entity,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,name,the,part,name,param,value,the,part,value,an,object,or,code,http,entity,return,the,inserter,that,allows,adding,more,parts;public,static,multipart,inserter,from,multipart,data,string,name,object,value,assert,not,null,name,key,must,not,be,null,assert,not,null,value,value,must,not,be,null,return,new,default,multipart,inserter,with,name,value
BodyInserters -> public static MultipartInserter fromMultipartData(String name, Object value);1522103912;Return a {@link MultipartInserter} that writes the given parts,_as multipart data. Values in the map can be an Object or an_{@link HttpEntity}.__<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}.__@param name the part name_@param value the part value, an Object or {@code HttpEntity}_@return the inserter that allows adding more parts;public static MultipartInserter fromMultipartData(String name, Object value) {_		Assert.notNull(name, "'key' must not be null")__		Assert.notNull(value, "'value' must not be null")__		return new DefaultMultipartInserter().with(name, value)__	};return,a,link,multipart,inserter,that,writes,the,given,parts,as,multipart,data,values,in,the,map,can,be,an,object,or,an,link,http,entity,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,name,the,part,name,param,value,the,part,value,an,object,or,code,http,entity,return,the,inserter,that,allows,adding,more,parts;public,static,multipart,inserter,from,multipart,data,string,name,object,value,assert,not,null,name,key,must,not,be,null,assert,not,null,value,value,must,not,be,null,return,new,default,multipart,inserter,with,name,value
BodyInserters -> public static MultipartInserter fromMultipartData(String name, Object value);1524865018;Return a {@link MultipartInserter} that writes the given parts,_as multipart data. Values in the map can be an Object or an_{@link HttpEntity}._<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}._@param name the part name_@param value the part value, an Object or {@code HttpEntity}_@return the inserter that allows adding more parts;public static MultipartInserter fromMultipartData(String name, Object value) {_		Assert.notNull(name, "'name' must not be null")__		Assert.notNull(value, "'value' must not be null")__		return new DefaultMultipartInserter().with(name, value)__	};return,a,link,multipart,inserter,that,writes,the,given,parts,as,multipart,data,values,in,the,map,can,be,an,object,or,an,link,http,entity,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,name,the,part,name,param,value,the,part,value,an,object,or,code,http,entity,return,the,inserter,that,allows,adding,more,parts;public,static,multipart,inserter,from,multipart,data,string,name,object,value,assert,not,null,name,name,must,not,be,null,assert,not,null,value,value,must,not,be,null,return,new,default,multipart,inserter,with,name,value
BodyInserters -> public static MultipartInserter fromMultipartData(String name, Object value);1526354196;Return a {@link MultipartInserter} that writes the given parts,_as multipart data. Values in the map can be an Object or an_{@link HttpEntity}._<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}._@param name the part name_@param value the part value, an Object or {@code HttpEntity}_@return the inserter that allows adding more parts;public static MultipartInserter fromMultipartData(String name, Object value) {_		Assert.notNull(name, "'name' must not be null")__		Assert.notNull(value, "'value' must not be null")__		return new DefaultMultipartInserter().with(name, value)__	};return,a,link,multipart,inserter,that,writes,the,given,parts,as,multipart,data,values,in,the,map,can,be,an,object,or,an,link,http,entity,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,name,the,part,name,param,value,the,part,value,an,object,or,code,http,entity,return,the,inserter,that,allows,adding,more,parts;public,static,multipart,inserter,from,multipart,data,string,name,object,value,assert,not,null,name,name,must,not,be,null,assert,not,null,value,value,must,not,be,null,return,new,default,multipart,inserter,with,name,value
BodyInserters -> public static MultipartInserter fromMultipartData(String name, Object value);1527269520;Return a {@link MultipartInserter} to write the given parts,_as multipart data. Values in the map can be an Object or an_{@link HttpEntity}._<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}._@param name the part name_@param value the part value, an Object or {@code HttpEntity}_@return the inserter that allows adding more parts;public static MultipartInserter fromMultipartData(String name, Object value) {_		Assert.notNull(name, "'name' must not be null")__		Assert.notNull(value, "'value' must not be null")__		return new DefaultMultipartInserter().with(name, value)__	};return,a,link,multipart,inserter,to,write,the,given,parts,as,multipart,data,values,in,the,map,can,be,an,object,or,an,link,http,entity,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,name,the,part,name,param,value,the,part,value,an,object,or,code,http,entity,return,the,inserter,that,allows,adding,more,parts;public,static,multipart,inserter,from,multipart,data,string,name,object,value,assert,not,null,name,name,must,not,be,null,assert,not,null,value,value,must,not,be,null,return,new,default,multipart,inserter,with,name,value
BodyInserters -> public static MultipartInserter fromMultipartData(String name, Object value);1527341063;Return a {@link MultipartInserter} to write the given parts,_as multipart data. Values in the map can be an Object or an_{@link HttpEntity}._<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}._@param name the part name_@param value the part value, an Object or {@code HttpEntity}_@return the inserter that allows adding more parts;public static MultipartInserter fromMultipartData(String name, Object value) {_		Assert.notNull(name, "'name' must not be null")__		Assert.notNull(value, "'value' must not be null")__		return new DefaultMultipartInserter().with(name, value)__	};return,a,link,multipart,inserter,to,write,the,given,parts,as,multipart,data,values,in,the,map,can,be,an,object,or,an,link,http,entity,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,name,the,part,name,param,value,the,part,value,an,object,or,code,http,entity,return,the,inserter,that,allows,adding,more,parts;public,static,multipart,inserter,from,multipart,data,string,name,object,value,assert,not,null,name,name,must,not,be,null,assert,not,null,value,value,must,not,be,null,return,new,default,multipart,inserter,with,name,value
BodyInserters -> public static MultipartInserter fromMultipartData(String name, Object value);1530174524;Return a {@link MultipartInserter} to write the given parts,_as multipart data. Values in the map can be an Object or an_{@link HttpEntity}._<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}._@param name the part name_@param value the part value, an Object or {@code HttpEntity}_@return the inserter that allows adding more parts;public static MultipartInserter fromMultipartData(String name, Object value) {_		Assert.notNull(name, "'name' must not be null")__		Assert.notNull(value, "'value' must not be null")__		return new DefaultMultipartInserter().with(name, value)__	};return,a,link,multipart,inserter,to,write,the,given,parts,as,multipart,data,values,in,the,map,can,be,an,object,or,an,link,http,entity,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,name,the,part,name,param,value,the,part,value,an,object,or,code,http,entity,return,the,inserter,that,allows,adding,more,parts;public,static,multipart,inserter,from,multipart,data,string,name,object,value,assert,not,null,name,name,must,not,be,null,assert,not,null,value,value,must,not,be,null,return,new,default,multipart,inserter,with,name,value
BodyInserters -> public static MultipartInserter fromMultipartData(String name, Object value);1530793695;Return a {@link MultipartInserter} to write the given parts,_as multipart data. Values in the map can be an Object or an_{@link HttpEntity}._<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}._@param name the part name_@param value the part value, an Object or {@code HttpEntity}_@return the inserter that allows adding more parts;public static MultipartInserter fromMultipartData(String name, Object value) {_		Assert.notNull(name, "'name' must not be null")__		Assert.notNull(value, "'value' must not be null")__		return new DefaultMultipartInserter().with(name, value)__	};return,a,link,multipart,inserter,to,write,the,given,parts,as,multipart,data,values,in,the,map,can,be,an,object,or,an,link,http,entity,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,name,the,part,name,param,value,the,part,value,an,object,or,code,http,entity,return,the,inserter,that,allows,adding,more,parts;public,static,multipart,inserter,from,multipart,data,string,name,object,value,assert,not,null,name,name,must,not,be,null,assert,not,null,value,value,must,not,be,null,return,new,default,multipart,inserter,with,name,value
BodyInserters -> public static MultipartInserter fromMultipartData(String name, Object value);1542037423;Return a {@link MultipartInserter} to write the given parts,_as multipart data. Values in the map can be an Object or an_{@link HttpEntity}._<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}._@param name the part name_@param value the part value, an Object or {@code HttpEntity}_@return the inserter that allows adding more parts;public static MultipartInserter fromMultipartData(String name, Object value) {_		Assert.notNull(name, "'name' must not be null")__		Assert.notNull(value, "'value' must not be null")__		return new DefaultMultipartInserter().with(name, value)__	};return,a,link,multipart,inserter,to,write,the,given,parts,as,multipart,data,values,in,the,map,can,be,an,object,or,an,link,http,entity,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,name,the,part,name,param,value,the,part,value,an,object,or,code,http,entity,return,the,inserter,that,allows,adding,more,parts;public,static,multipart,inserter,from,multipart,data,string,name,object,value,assert,not,null,name,name,must,not,be,null,assert,not,null,value,value,must,not,be,null,return,new,default,multipart,inserter,with,name,value
BodyInserters -> public static MultipartInserter fromMultipartData(String name, Object value);1542613849;Return a {@link MultipartInserter} to write the given parts,_as multipart data. Values in the map can be an Object or an_{@link HttpEntity}._<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}._@param name the part name_@param value the part value, an Object or {@code HttpEntity}_@return the inserter that allows adding more parts;public static MultipartInserter fromMultipartData(String name, Object value) {_		Assert.notNull(name, "'name' must not be null")__		Assert.notNull(value, "'value' must not be null")__		return new DefaultMultipartInserter().with(name, value)__	};return,a,link,multipart,inserter,to,write,the,given,parts,as,multipart,data,values,in,the,map,can,be,an,object,or,an,link,http,entity,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,name,the,part,name,param,value,the,part,value,an,object,or,code,http,entity,return,the,inserter,that,allows,adding,more,parts;public,static,multipart,inserter,from,multipart,data,string,name,object,value,assert,not,null,name,name,must,not,be,null,assert,not,null,value,value,must,not,be,null,return,new,default,multipart,inserter,with,name,value
BodyInserters -> public static MultipartInserter fromMultipartData(String name, Object value);1542907316;Return a {@link MultipartInserter} to write the given parts,_as multipart data. Values in the map can be an Object or an_{@link HttpEntity}._<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}._@param name the part name_@param value the part value, an Object or {@code HttpEntity}_@return the inserter that allows adding more parts;public static MultipartInserter fromMultipartData(String name, Object value) {_		Assert.notNull(name, "'name' must not be null")__		Assert.notNull(value, "'value' must not be null")__		return new DefaultMultipartInserter().with(name, value)__	};return,a,link,multipart,inserter,to,write,the,given,parts,as,multipart,data,values,in,the,map,can,be,an,object,or,an,link,http,entity,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,name,the,part,name,param,value,the,part,value,an,object,or,code,http,entity,return,the,inserter,that,allows,adding,more,parts;public,static,multipart,inserter,from,multipart,data,string,name,object,value,assert,not,null,name,name,must,not,be,null,assert,not,null,value,value,must,not,be,null,return,new,default,multipart,inserter,with,name,value
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, ParameterizedTypeReference<T> typeRef);1527269520;Inserter to write the given {@link Publisher}._<p>Alternatively, consider using the {@code body} shortcuts on_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}._@param publisher the publisher to write with_@param typeRef the type of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the {@code Publisher} type_@return the inserter to write a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, ParameterizedTypeReference<T> typeRef) {__		return (message, context) ->_				writeWithMessageWriters(message, context, publisher, ResolvableType.forType(typeRef.getType()))__	};inserter,to,write,the,given,link,publisher,p,alternatively,consider,using,the,code,body,shortcuts,on,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,param,publisher,the,publisher,to,write,with,param,type,ref,the,type,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,code,publisher,type,return,the,inserter,to,write,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,parameterized,type,reference,t,type,ref,return,message,context,write,with,message,writers,message,context,publisher,resolvable,type,for,type,type,ref,get,type
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, ParameterizedTypeReference<T> typeRef);1527341063;Inserter to write the given {@link Publisher}._<p>Alternatively, consider using the {@code body} shortcuts on_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}._@param publisher the publisher to write with_@param typeRef the type of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the {@code Publisher} type_@return the inserter to write a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, ParameterizedTypeReference<T> typeRef) {__		return (message, context) ->_				writeWithMessageWriters(message, context, publisher, ResolvableType.forType(typeRef.getType()))__	};inserter,to,write,the,given,link,publisher,p,alternatively,consider,using,the,code,body,shortcuts,on,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,param,publisher,the,publisher,to,write,with,param,type,ref,the,type,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,code,publisher,type,return,the,inserter,to,write,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,parameterized,type,reference,t,type,ref,return,message,context,write,with,message,writers,message,context,publisher,resolvable,type,for,type,type,ref,get,type
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, ParameterizedTypeReference<T> typeRef);1530174524;Inserter to write the given {@link Publisher}._<p>Alternatively, consider using the {@code body} shortcuts on_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}._@param publisher the publisher to write with_@param typeRef the type of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the {@code Publisher} type_@return the inserter to write a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, ParameterizedTypeReference<T> typeRef) {__		return (message, context) ->_				writeWithMessageWriters(message, context, publisher, ResolvableType.forType(typeRef.getType()))__	};inserter,to,write,the,given,link,publisher,p,alternatively,consider,using,the,code,body,shortcuts,on,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,param,publisher,the,publisher,to,write,with,param,type,ref,the,type,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,code,publisher,type,return,the,inserter,to,write,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,parameterized,type,reference,t,type,ref,return,message,context,write,with,message,writers,message,context,publisher,resolvable,type,for,type,type,ref,get,type
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, ParameterizedTypeReference<T> typeRef);1530793695;Inserter to write the given {@link Publisher}._<p>Alternatively, consider using the {@code body} shortcuts on_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}._@param publisher the publisher to write with_@param typeRef the type of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the {@code Publisher} type_@return the inserter to write a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, ParameterizedTypeReference<T> typeRef) {__		return (message, context) ->_				writeWithMessageWriters(message, context, publisher, ResolvableType.forType(typeRef.getType()))__	};inserter,to,write,the,given,link,publisher,p,alternatively,consider,using,the,code,body,shortcuts,on,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,param,publisher,the,publisher,to,write,with,param,type,ref,the,type,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,code,publisher,type,return,the,inserter,to,write,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,parameterized,type,reference,t,type,ref,return,message,context,write,with,message,writers,message,context,publisher,resolvable,type,for,type,type,ref,get,type
BodyInserters -> public static MultipartInserter fromMultipartData(MultiValueMap<String, ?> multipartData);1515603291;Return a {@code FormInserter} that writes the given {@code MultiValueMap}_as multipart data. The values in the {@code MultiValueMap} can be any_Object representing the body of the part, or an_{@link org.springframework.http.HttpEntity HttpEntity} representing a part_with body and headers. The {@code MultiValueMap} can be built conveniently_using {@link org.springframework.http.client.MultipartBodyBuilder_MultipartBodyBuilder}. Also the returned inserter allows for additional_entries to be added via {@link FormInserter#with(String, Object)}.__<p>Note that you can also use the {@code syncBody(Object)} method in the_request builders of both the {@code WebClient} and {@code WebTestClient}._In that case the setting of the content type is also not required, just_be sure the map contains at least one non-String value or otherwise,_without a content-type header as a hint, it would be interpreted as a_plain form data request.__@param multipartData the form data to write to the output message_@return a {@code BodyInserter} that writes multipart data_@see MultipartBodyBuilder;public static MultipartInserter fromMultipartData(MultiValueMap<String, ?> multipartData) {_		Assert.notNull(multipartData, "'multipartData' must not be null")__		return new DefaultMultipartInserter().withInternal(multipartData)__	};return,a,code,form,inserter,that,writes,the,given,code,multi,value,map,as,multipart,data,the,values,in,the,code,multi,value,map,can,be,any,object,representing,the,body,of,the,part,or,an,link,org,springframework,http,http,entity,http,entity,representing,a,part,with,body,and,headers,the,code,multi,value,map,can,be,built,conveniently,using,link,org,springframework,http,client,multipart,body,builder,multipart,body,builder,also,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,p,note,that,you,can,also,use,the,code,sync,body,object,method,in,the,request,builders,of,both,the,code,web,client,and,code,web,test,client,in,that,case,the,setting,of,the,content,type,is,also,not,required,just,be,sure,the,map,contains,at,least,one,non,string,value,or,otherwise,without,a,content,type,header,as,a,hint,it,would,be,interpreted,as,a,plain,form,data,request,param,multipart,data,the,form,data,to,write,to,the,output,message,return,a,code,body,inserter,that,writes,multipart,data,see,multipart,body,builder;public,static,multipart,inserter,from,multipart,data,multi,value,map,string,multipart,data,assert,not,null,multipart,data,multipart,data,must,not,be,null,return,new,default,multipart,inserter,with,internal,multipart,data
BodyInserters -> public static MultipartInserter fromMultipartData(MultiValueMap<String, ?> multipartData);1521231485;Return a {@link MultipartInserter} that writes the given_{@code MultiValueMap} as multipart data. Values in the map can be an_Object or an {@link HttpEntity}.__<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}.__@param multipartData the form data to write to the output message_@return the inserter that allows adding more parts_@see MultipartBodyBuilder;public static MultipartInserter fromMultipartData(MultiValueMap<String, ?> multipartData) {_		Assert.notNull(multipartData, "'multipartData' must not be null")__		return new DefaultMultipartInserter().withInternal(multipartData)__	};return,a,link,multipart,inserter,that,writes,the,given,code,multi,value,map,as,multipart,data,values,in,the,map,can,be,an,object,or,an,link,http,entity,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,multipart,data,the,form,data,to,write,to,the,output,message,return,the,inserter,that,allows,adding,more,parts,see,multipart,body,builder;public,static,multipart,inserter,from,multipart,data,multi,value,map,string,multipart,data,assert,not,null,multipart,data,multipart,data,must,not,be,null,return,new,default,multipart,inserter,with,internal,multipart,data
BodyInserters -> public static MultipartInserter fromMultipartData(MultiValueMap<String, ?> multipartData);1522103912;Return a {@link MultipartInserter} that writes the given_{@code MultiValueMap} as multipart data. Values in the map can be an_Object or an {@link HttpEntity}.__<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}.__@param multipartData the form data to write to the output message_@return the inserter that allows adding more parts_@see MultipartBodyBuilder;public static MultipartInserter fromMultipartData(MultiValueMap<String, ?> multipartData) {_		Assert.notNull(multipartData, "'multipartData' must not be null")__		return new DefaultMultipartInserter().withInternal(multipartData)__	};return,a,link,multipart,inserter,that,writes,the,given,code,multi,value,map,as,multipart,data,values,in,the,map,can,be,an,object,or,an,link,http,entity,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,multipart,data,the,form,data,to,write,to,the,output,message,return,the,inserter,that,allows,adding,more,parts,see,multipart,body,builder;public,static,multipart,inserter,from,multipart,data,multi,value,map,string,multipart,data,assert,not,null,multipart,data,multipart,data,must,not,be,null,return,new,default,multipart,inserter,with,internal,multipart,data
BodyInserters -> public static MultipartInserter fromMultipartData(MultiValueMap<String, ?> multipartData);1524865018;Return a {@link MultipartInserter} that writes the given_{@code MultiValueMap} as multipart data. Values in the map can be an_Object or an {@link HttpEntity}._<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}._@param multipartData the form data to write to the output message_@return the inserter that allows adding more parts_@see MultipartBodyBuilder;public static MultipartInserter fromMultipartData(MultiValueMap<String, ?> multipartData) {_		Assert.notNull(multipartData, "'multipartData' must not be null")__		return new DefaultMultipartInserter().withInternal(multipartData)__	};return,a,link,multipart,inserter,that,writes,the,given,code,multi,value,map,as,multipart,data,values,in,the,map,can,be,an,object,or,an,link,http,entity,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,multipart,data,the,form,data,to,write,to,the,output,message,return,the,inserter,that,allows,adding,more,parts,see,multipart,body,builder;public,static,multipart,inserter,from,multipart,data,multi,value,map,string,multipart,data,assert,not,null,multipart,data,multipart,data,must,not,be,null,return,new,default,multipart,inserter,with,internal,multipart,data
BodyInserters -> public static MultipartInserter fromMultipartData(MultiValueMap<String, ?> multipartData);1526354196;Return a {@link MultipartInserter} that writes the given_{@code MultiValueMap} as multipart data. Values in the map can be an_Object or an {@link HttpEntity}._<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}._@param multipartData the form data to write to the output message_@return the inserter that allows adding more parts_@see MultipartBodyBuilder;public static MultipartInserter fromMultipartData(MultiValueMap<String, ?> multipartData) {_		Assert.notNull(multipartData, "'multipartData' must not be null")__		return new DefaultMultipartInserter().withInternal(multipartData)__	};return,a,link,multipart,inserter,that,writes,the,given,code,multi,value,map,as,multipart,data,values,in,the,map,can,be,an,object,or,an,link,http,entity,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,multipart,data,the,form,data,to,write,to,the,output,message,return,the,inserter,that,allows,adding,more,parts,see,multipart,body,builder;public,static,multipart,inserter,from,multipart,data,multi,value,map,string,multipart,data,assert,not,null,multipart,data,multipart,data,must,not,be,null,return,new,default,multipart,inserter,with,internal,multipart,data
BodyInserters -> public static MultipartInserter fromMultipartData(MultiValueMap<String, ?> multipartData);1527269520;Return a {@link MultipartInserter} to write the given_{@code MultiValueMap} as multipart data. Values in the map can be an_Object or an {@link HttpEntity}._<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}._@param multipartData the form data to write to the output message_@return the inserter that allows adding more parts_@see MultipartBodyBuilder;public static MultipartInserter fromMultipartData(MultiValueMap<String, ?> multipartData) {_		Assert.notNull(multipartData, "'multipartData' must not be null")__		return new DefaultMultipartInserter().withInternal(multipartData)__	};return,a,link,multipart,inserter,to,write,the,given,code,multi,value,map,as,multipart,data,values,in,the,map,can,be,an,object,or,an,link,http,entity,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,multipart,data,the,form,data,to,write,to,the,output,message,return,the,inserter,that,allows,adding,more,parts,see,multipart,body,builder;public,static,multipart,inserter,from,multipart,data,multi,value,map,string,multipart,data,assert,not,null,multipart,data,multipart,data,must,not,be,null,return,new,default,multipart,inserter,with,internal,multipart,data
BodyInserters -> public static MultipartInserter fromMultipartData(MultiValueMap<String, ?> multipartData);1527341063;Return a {@link MultipartInserter} to write the given_{@code MultiValueMap} as multipart data. Values in the map can be an_Object or an {@link HttpEntity}._<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}._@param multipartData the form data to write to the output message_@return the inserter that allows adding more parts_@see MultipartBodyBuilder;public static MultipartInserter fromMultipartData(MultiValueMap<String, ?> multipartData) {_		Assert.notNull(multipartData, "'multipartData' must not be null")__		return new DefaultMultipartInserter().withInternal(multipartData)__	};return,a,link,multipart,inserter,to,write,the,given,code,multi,value,map,as,multipart,data,values,in,the,map,can,be,an,object,or,an,link,http,entity,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,multipart,data,the,form,data,to,write,to,the,output,message,return,the,inserter,that,allows,adding,more,parts,see,multipart,body,builder;public,static,multipart,inserter,from,multipart,data,multi,value,map,string,multipart,data,assert,not,null,multipart,data,multipart,data,must,not,be,null,return,new,default,multipart,inserter,with,internal,multipart,data
BodyInserters -> public static MultipartInserter fromMultipartData(MultiValueMap<String, ?> multipartData);1530174524;Return a {@link MultipartInserter} to write the given_{@code MultiValueMap} as multipart data. Values in the map can be an_Object or an {@link HttpEntity}._<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}._@param multipartData the form data to write to the output message_@return the inserter that allows adding more parts_@see MultipartBodyBuilder;public static MultipartInserter fromMultipartData(MultiValueMap<String, ?> multipartData) {_		Assert.notNull(multipartData, "'multipartData' must not be null")__		return new DefaultMultipartInserter().withInternal(multipartData)__	};return,a,link,multipart,inserter,to,write,the,given,code,multi,value,map,as,multipart,data,values,in,the,map,can,be,an,object,or,an,link,http,entity,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,multipart,data,the,form,data,to,write,to,the,output,message,return,the,inserter,that,allows,adding,more,parts,see,multipart,body,builder;public,static,multipart,inserter,from,multipart,data,multi,value,map,string,multipart,data,assert,not,null,multipart,data,multipart,data,must,not,be,null,return,new,default,multipart,inserter,with,internal,multipart,data
BodyInserters -> public static MultipartInserter fromMultipartData(MultiValueMap<String, ?> multipartData);1530793695;Return a {@link MultipartInserter} to write the given_{@code MultiValueMap} as multipart data. Values in the map can be an_Object or an {@link HttpEntity}._<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}._@param multipartData the form data to write to the output message_@return the inserter that allows adding more parts_@see MultipartBodyBuilder;public static MultipartInserter fromMultipartData(MultiValueMap<String, ?> multipartData) {_		Assert.notNull(multipartData, "'multipartData' must not be null")__		return new DefaultMultipartInserter().withInternal(multipartData)__	};return,a,link,multipart,inserter,to,write,the,given,code,multi,value,map,as,multipart,data,values,in,the,map,can,be,an,object,or,an,link,http,entity,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,multipart,data,the,form,data,to,write,to,the,output,message,return,the,inserter,that,allows,adding,more,parts,see,multipart,body,builder;public,static,multipart,inserter,from,multipart,data,multi,value,map,string,multipart,data,assert,not,null,multipart,data,multipart,data,must,not,be,null,return,new,default,multipart,inserter,with,internal,multipart,data
BodyInserters -> public static MultipartInserter fromMultipartData(MultiValueMap<String, ?> multipartData);1542037423;Return a {@link MultipartInserter} to write the given_{@code MultiValueMap} as multipart data. Values in the map can be an_Object or an {@link HttpEntity}._<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}._@param multipartData the form data to write to the output message_@return the inserter that allows adding more parts_@see MultipartBodyBuilder;public static MultipartInserter fromMultipartData(MultiValueMap<String, ?> multipartData) {_		Assert.notNull(multipartData, "'multipartData' must not be null")__		return new DefaultMultipartInserter().withInternal(multipartData)__	};return,a,link,multipart,inserter,to,write,the,given,code,multi,value,map,as,multipart,data,values,in,the,map,can,be,an,object,or,an,link,http,entity,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,multipart,data,the,form,data,to,write,to,the,output,message,return,the,inserter,that,allows,adding,more,parts,see,multipart,body,builder;public,static,multipart,inserter,from,multipart,data,multi,value,map,string,multipart,data,assert,not,null,multipart,data,multipart,data,must,not,be,null,return,new,default,multipart,inserter,with,internal,multipart,data
BodyInserters -> public static MultipartInserter fromMultipartData(MultiValueMap<String, ?> multipartData);1542613849;Return a {@link MultipartInserter} to write the given_{@code MultiValueMap} as multipart data. Values in the map can be an_Object or an {@link HttpEntity}._<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}._@param multipartData the form data to write to the output message_@return the inserter that allows adding more parts_@see MultipartBodyBuilder;public static MultipartInserter fromMultipartData(MultiValueMap<String, ?> multipartData) {_		Assert.notNull(multipartData, "'multipartData' must not be null")__		return new DefaultMultipartInserter().withInternal(multipartData)__	};return,a,link,multipart,inserter,to,write,the,given,code,multi,value,map,as,multipart,data,values,in,the,map,can,be,an,object,or,an,link,http,entity,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,multipart,data,the,form,data,to,write,to,the,output,message,return,the,inserter,that,allows,adding,more,parts,see,multipart,body,builder;public,static,multipart,inserter,from,multipart,data,multi,value,map,string,multipart,data,assert,not,null,multipart,data,multipart,data,must,not,be,null,return,new,default,multipart,inserter,with,internal,multipart,data
BodyInserters -> public static MultipartInserter fromMultipartData(MultiValueMap<String, ?> multipartData);1542907316;Return a {@link MultipartInserter} to write the given_{@code MultiValueMap} as multipart data. Values in the map can be an_Object or an {@link HttpEntity}._<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}._@param multipartData the form data to write to the output message_@return the inserter that allows adding more parts_@see MultipartBodyBuilder;public static MultipartInserter fromMultipartData(MultiValueMap<String, ?> multipartData) {_		Assert.notNull(multipartData, "'multipartData' must not be null")__		return new DefaultMultipartInserter().withInternal(multipartData)__	};return,a,link,multipart,inserter,to,write,the,given,code,multi,value,map,as,multipart,data,values,in,the,map,can,be,an,object,or,an,link,http,entity,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,multipart,data,the,form,data,to,write,to,the,output,message,return,the,inserter,that,allows,adding,more,parts,see,multipart,body,builder;public,static,multipart,inserter,from,multipart,data,multi,value,map,string,multipart,data,assert,not,null,multipart,data,multipart,data,must,not,be,null,return,new,default,multipart,inserter,with,internal,multipart,data
BodyInserters -> MultipartInserter -> <T, P extends Publisher<T>> MultipartInserter withPublisher(String key, P publisher, 				Class<T> elementClass)_;1513874461;Adds the specified publisher as a part.__@param key the key to be added_@param publisher the publisher to be added as value_@param elementClass the class of elements contained in {@code publisher}_@return this inserter;<T, P extends Publisher<T>> MultipartInserter withPublisher(String key, P publisher,_				Class<T> elementClass)_;adds,the,specified,publisher,as,a,part,param,key,the,key,to,be,added,param,publisher,the,publisher,to,be,added,as,value,param,element,class,the,class,of,elements,contained,in,code,publisher,return,this,inserter;t,p,extends,publisher,t,multipart,inserter,with,publisher,string,key,p,publisher,class,t,element,class
BodyInserters -> MultipartInserter -> <T, P extends Publisher<T>> MultipartInserter withPublisher(String key, P publisher, 				Class<T> elementClass)_;1515178754;Adds the specified publisher as a part.__@param key the key to be added_@param publisher the publisher to be added as value_@param elementClass the class of elements contained in {@code publisher}_@return this inserter;<T, P extends Publisher<T>> MultipartInserter withPublisher(String key, P publisher,_				Class<T> elementClass)_;adds,the,specified,publisher,as,a,part,param,key,the,key,to,be,added,param,publisher,the,publisher,to,be,added,as,value,param,element,class,the,class,of,elements,contained,in,code,publisher,return,this,inserter;t,p,extends,publisher,t,multipart,inserter,with,publisher,string,key,p,publisher,class,t,element,class
BodyInserters -> MultipartInserter -> <T, P extends Publisher<T>> MultipartInserter withPublisher(String key, P publisher, 				Class<T> elementClass)_;1515603291;Adds the specified publisher as a part.__@param key the key to be added_@param publisher the publisher to be added as value_@param elementClass the class of elements contained in {@code publisher}_@return this inserter;<T, P extends Publisher<T>> MultipartInserter withPublisher(String key, P publisher,_				Class<T> elementClass)_;adds,the,specified,publisher,as,a,part,param,key,the,key,to,be,added,param,publisher,the,publisher,to,be,added,as,value,param,element,class,the,class,of,elements,contained,in,code,publisher,return,this,inserter;t,p,extends,publisher,t,multipart,inserter,with,publisher,string,key,p,publisher,class,t,element,class
BodyInserters -> FormInserter -> FormInserter<T> with(MultiValueMap<String, T> values)_;1509538672;Adds the specified values to the form._@param values the values to be added_@return this inserter;FormInserter<T> with(MultiValueMap<String, T> values)_;adds,the,specified,values,to,the,form,param,values,the,values,to,be,added,return,this,inserter;form,inserter,t,with,multi,value,map,string,t,values
BodyInserters -> FormInserter -> FormInserter<T> with(MultiValueMap<String, T> values)_;1509980418;Adds the specified values to the form._@param values the values to be added_@return this inserter;FormInserter<T> with(MultiValueMap<String, T> values)_;adds,the,specified,values,to,the,form,param,values,the,values,to,be,added,return,this,inserter;form,inserter,t,with,multi,value,map,string,t,values
BodyInserters -> FormInserter -> FormInserter<T> with(MultiValueMap<String, T> values)_;1510004038;Adds the specified values to the form._@param values the values to be added_@return this inserter;FormInserter<T> with(MultiValueMap<String, T> values)_;adds,the,specified,values,to,the,form,param,values,the,values,to,be,added,return,this,inserter;form,inserter,t,with,multi,value,map,string,t,values
BodyInserters -> FormInserter -> FormInserter<T> with(MultiValueMap<String, T> values)_;1510933433;Adds the specified values to the form._@param values the values to be added_@return this inserter;FormInserter<T> with(MultiValueMap<String, T> values)_;adds,the,specified,values,to,the,form,param,values,the,values,to,be,added,return,this,inserter;form,inserter,t,with,multi,value,map,string,t,values
BodyInserters -> FormInserter -> FormInserter<T> with(MultiValueMap<String, T> values)_;1513874461;Adds the specified values to the form._@param values the values to be added_@return this inserter;FormInserter<T> with(MultiValueMap<String, T> values)_;adds,the,specified,values,to,the,form,param,values,the,values,to,be,added,return,this,inserter;form,inserter,t,with,multi,value,map,string,t,values
BodyInserters -> FormInserter -> FormInserter<T> with(MultiValueMap<String, T> values)_;1515178754;Adds the specified values to the form._@param values the values to be added_@return this inserter;FormInserter<T> with(MultiValueMap<String, T> values)_;adds,the,specified,values,to,the,form,param,values,the,values,to,be,added,return,this,inserter;form,inserter,t,with,multi,value,map,string,t,values
BodyInserters -> FormInserter -> FormInserter<T> with(MultiValueMap<String, T> values)_;1515603291;Adds the specified values to the form._@param values the values to be added_@return this inserter;FormInserter<T> with(MultiValueMap<String, T> values)_;adds,the,specified,values,to,the,form,param,values,the,values,to,be,added,return,this,inserter;form,inserter,t,with,multi,value,map,string,t,values
BodyInserters -> FormInserter -> FormInserter<T> with(MultiValueMap<String, T> values)_;1521231485;Adds the specified values to the form._@param values the values to be added_@return this inserter for adding more parts;FormInserter<T> with(MultiValueMap<String, T> values)_;adds,the,specified,values,to,the,form,param,values,the,values,to,be,added,return,this,inserter,for,adding,more,parts;form,inserter,t,with,multi,value,map,string,t,values
BodyInserters -> FormInserter -> FormInserter<T> with(MultiValueMap<String, T> values)_;1522103912;Adds the specified values to the form._@param values the values to be added_@return this inserter for adding more parts;FormInserter<T> with(MultiValueMap<String, T> values)_;adds,the,specified,values,to,the,form,param,values,the,values,to,be,added,return,this,inserter,for,adding,more,parts;form,inserter,t,with,multi,value,map,string,t,values
BodyInserters -> FormInserter -> FormInserter<T> with(MultiValueMap<String, T> values)_;1524865018;Adds the specified values to the form._@param values the values to be added_@return this inserter for adding more parts;FormInserter<T> with(MultiValueMap<String, T> values)_;adds,the,specified,values,to,the,form,param,values,the,values,to,be,added,return,this,inserter,for,adding,more,parts;form,inserter,t,with,multi,value,map,string,t,values
BodyInserters -> FormInserter -> FormInserter<T> with(MultiValueMap<String, T> values)_;1526354196;Adds the specified values to the form._@param values the values to be added_@return this inserter for adding more parts;FormInserter<T> with(MultiValueMap<String, T> values)_;adds,the,specified,values,to,the,form,param,values,the,values,to,be,added,return,this,inserter,for,adding,more,parts;form,inserter,t,with,multi,value,map,string,t,values
BodyInserters -> FormInserter -> FormInserter<T> with(MultiValueMap<String, T> values)_;1527269520;Adds the specified values to the form._@param values the values to be added_@return this inserter for adding more parts;FormInserter<T> with(MultiValueMap<String, T> values)_;adds,the,specified,values,to,the,form,param,values,the,values,to,be,added,return,this,inserter,for,adding,more,parts;form,inserter,t,with,multi,value,map,string,t,values
BodyInserters -> FormInserter -> FormInserter<T> with(MultiValueMap<String, T> values)_;1527341063;Adds the specified values to the form._@param values the values to be added_@return this inserter for adding more parts;FormInserter<T> with(MultiValueMap<String, T> values)_;adds,the,specified,values,to,the,form,param,values,the,values,to,be,added,return,this,inserter,for,adding,more,parts;form,inserter,t,with,multi,value,map,string,t,values
BodyInserters -> FormInserter -> FormInserter<T> with(MultiValueMap<String, T> values)_;1530174524;Adds the specified values to the form._@param values the values to be added_@return this inserter for adding more parts;FormInserter<T> with(MultiValueMap<String, T> values)_;adds,the,specified,values,to,the,form,param,values,the,values,to,be,added,return,this,inserter,for,adding,more,parts;form,inserter,t,with,multi,value,map,string,t,values
BodyInserters -> FormInserter -> FormInserter<T> with(MultiValueMap<String, T> values)_;1530793695;Adds the specified values to the form._@param values the values to be added_@return this inserter for adding more parts;FormInserter<T> with(MultiValueMap<String, T> values)_;adds,the,specified,values,to,the,form,param,values,the,values,to,be,added,return,this,inserter,for,adding,more,parts;form,inserter,t,with,multi,value,map,string,t,values
BodyInserters -> FormInserter -> FormInserter<T> with(MultiValueMap<String, T> values)_;1542037423;Adds the specified values to the form._@param values the values to be added_@return this inserter for adding more parts;FormInserter<T> with(MultiValueMap<String, T> values)_;adds,the,specified,values,to,the,form,param,values,the,values,to,be,added,return,this,inserter,for,adding,more,parts;form,inserter,t,with,multi,value,map,string,t,values
BodyInserters -> FormInserter -> FormInserter<T> with(MultiValueMap<String, T> values)_;1542613849;Adds the specified values to the form._@param values the values to be added_@return this inserter for adding more parts;FormInserter<T> with(MultiValueMap<String, T> values)_;adds,the,specified,values,to,the,form,param,values,the,values,to,be,added,return,this,inserter,for,adding,more,parts;form,inserter,t,with,multi,value,map,string,t,values
BodyInserters -> FormInserter -> FormInserter<T> with(MultiValueMap<String, T> values)_;1542907316;Adds the specified values to the form._@param values the values to be added_@return this inserter for adding more parts;FormInserter<T> with(MultiValueMap<String, T> values)_;adds,the,specified,values,to,the,form,param,values,the,values,to,be,added,return,this,inserter,for,adding,more,parts;form,inserter,t,with,multi,value,map,string,t,values
BodyInserters -> public static <T, S extends Publisher<T>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(S eventsPublisher, 			ResolvableType eventType);1485986572;Return a {@code BodyInserter} that writes the given {@code Publisher} publisher as_Server-Sent Events._@param eventsPublisher the publisher to write to the response body as Server-Sent Events_@param eventType the type of event contained in the publisher_@param <T> the type of the elements contained in the publisher_@return a {@code BodyInserter} that writes the given {@code Publisher} publisher as_Server-Sent Events_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<T>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(S eventsPublisher,_			ResolvableType eventType) {__		Assert.notNull(eventsPublisher, "'eventsPublisher' must not be null")__		Assert.notNull(eventType, "'eventType' must not be null")__		return (outputMessage, context) -> {_			HttpMessageWriter<T> messageWriter =_					findMessageWriter(context, SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM)__			return messageWriter.write(eventsPublisher, eventType,_					MediaType.TEXT_EVENT_STREAM, outputMessage, context.hints())___		}__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,publisher,as,server,sent,events,param,events,publisher,the,publisher,to,write,to,the,response,body,as,server,sent,events,param,event,type,the,type,of,event,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,return,a,code,body,inserter,that,writes,the,given,code,publisher,publisher,as,server,sent,events,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,resolvable,type,event,type,assert,not,null,events,publisher,events,publisher,must,not,be,null,assert,not,null,event,type,event,type,must,not,be,null,return,output,message,context,http,message,writer,t,message,writer,find,message,writer,context,media,type,return,message,writer,write,events,publisher,event,type,media,type,output,message,context,hints
BodyInserters -> public static <T, S extends Publisher<T>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(S eventsPublisher, 			ResolvableType eventType);1486657400;Return a {@code BodyInserter} that writes the given {@code Publisher} publisher as_Server-Sent Events._@param eventsPublisher the publisher to write to the response body as Server-Sent Events_@param eventType the type of event contained in the publisher_@param <T> the type of the elements contained in the publisher_@return a {@code BodyInserter} that writes the given {@code Publisher} publisher as_Server-Sent Events_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<T>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(S eventsPublisher,_			ResolvableType eventType) {__		Assert.notNull(eventsPublisher, "'eventsPublisher' must not be null")__		Assert.notNull(eventType, "'eventType' must not be null")__		return (outputMessage, context) -> {_			HttpMessageWriter<T> messageWriter =_					findMessageWriter(context, SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM)__			return messageWriter.write(eventsPublisher, eventType,_					MediaType.TEXT_EVENT_STREAM, outputMessage, context.hints())___		}__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,publisher,as,server,sent,events,param,events,publisher,the,publisher,to,write,to,the,response,body,as,server,sent,events,param,event,type,the,type,of,event,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,return,a,code,body,inserter,that,writes,the,given,code,publisher,publisher,as,server,sent,events,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,resolvable,type,event,type,assert,not,null,events,publisher,events,publisher,must,not,be,null,assert,not,null,event,type,event,type,must,not,be,null,return,output,message,context,http,message,writer,t,message,writer,find,message,writer,context,media,type,return,message,writer,write,events,publisher,event,type,media,type,output,message,context,hints
BodyInserters -> public static <T, S extends Publisher<T>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(S eventsPublisher, 			ResolvableType eventType);1486720600;Return a {@code BodyInserter} that writes the given {@code Publisher} publisher as_Server-Sent Events._@param eventsPublisher the publisher to write to the response body as Server-Sent Events_@param eventType the type of event contained in the publisher_@param <T> the type of the elements contained in the publisher_@return a {@code BodyInserter} that writes the given {@code Publisher} publisher as_Server-Sent Events_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<T>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(S eventsPublisher,_			ResolvableType eventType) {__		Assert.notNull(eventsPublisher, "'eventsPublisher' must not be null")__		Assert.notNull(eventType, "'eventType' must not be null")__		return (outputMessage, context) -> {_			HttpMessageWriter<T> messageWriter =_					findMessageWriter(context, SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM)__			return messageWriter.write(eventsPublisher, eventType,_					MediaType.TEXT_EVENT_STREAM, outputMessage, context.hints())___		}__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,publisher,as,server,sent,events,param,events,publisher,the,publisher,to,write,to,the,response,body,as,server,sent,events,param,event,type,the,type,of,event,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,return,a,code,body,inserter,that,writes,the,given,code,publisher,publisher,as,server,sent,events,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,resolvable,type,event,type,assert,not,null,events,publisher,events,publisher,must,not,be,null,assert,not,null,event,type,event,type,must,not,be,null,return,output,message,context,http,message,writer,t,message,writer,find,message,writer,context,media,type,return,message,writer,write,events,publisher,event,type,media,type,output,message,context,hints
BodyInserters -> public static <T, S extends Publisher<T>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(S eventsPublisher, 			ResolvableType eventType);1487687241;Return a {@code BodyInserter} that writes the given {@code Publisher} publisher as_Server-Sent Events._@param eventsPublisher the publisher to write to the response body as Server-Sent Events_@param eventType the type of event contained in the publisher_@param <T> the type of the elements contained in the publisher_@return a {@code BodyInserter} that writes the given {@code Publisher} publisher as_Server-Sent Events_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<T>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(S eventsPublisher,_			ResolvableType eventType) {__		Assert.notNull(eventsPublisher, "'eventsPublisher' must not be null")__		Assert.notNull(eventType, "'eventType' must not be null")__		return (outputMessage, context) -> {_			HttpMessageWriter<T> messageWriter =_					findMessageWriter(context, SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM)__			return messageWriter.write(eventsPublisher, eventType,_					MediaType.TEXT_EVENT_STREAM, outputMessage, context.hints())___		}__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,publisher,as,server,sent,events,param,events,publisher,the,publisher,to,write,to,the,response,body,as,server,sent,events,param,event,type,the,type,of,event,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,return,a,code,body,inserter,that,writes,the,given,code,publisher,publisher,as,server,sent,events,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,resolvable,type,event,type,assert,not,null,events,publisher,events,publisher,must,not,be,null,assert,not,null,event,type,event,type,must,not,be,null,return,output,message,context,http,message,writer,t,message,writer,find,message,writer,context,media,type,return,message,writer,write,events,publisher,event,type,media,type,output,message,context,hints
BodyInserters -> public static <T, S extends Publisher<T>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(S eventsPublisher, 			ResolvableType eventType);1491385016;Return a {@code BodyInserter} that writes the given {@code Publisher} publisher as_Server-Sent Events._@param eventsPublisher the publisher to write to the response body as Server-Sent Events_@param eventType the type of event contained in the publisher_@param <T> the type of the elements contained in the publisher_@return a {@code BodyInserter} that writes the given {@code Publisher} publisher as_Server-Sent Events_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<T>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(S eventsPublisher,_			ResolvableType eventType) {__		Assert.notNull(eventsPublisher, "'eventsPublisher' must not be null")__		Assert.notNull(eventType, "'eventType' must not be null")__		return (serverResponse, context) -> {_			HttpMessageWriter<T> messageWriter =_					findMessageWriter(context, SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM)__			return context.serverRequest()_					.map(serverRequest -> messageWriter.write(eventsPublisher, eventType,_							eventType, MediaType.TEXT_EVENT_STREAM, serverRequest,_							serverResponse, context.hints()))_					.orElseGet(() -> messageWriter.write(eventsPublisher, eventType,_							MediaType.TEXT_EVENT_STREAM, serverResponse, context.hints()))__		}__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,publisher,as,server,sent,events,param,events,publisher,the,publisher,to,write,to,the,response,body,as,server,sent,events,param,event,type,the,type,of,event,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,return,a,code,body,inserter,that,writes,the,given,code,publisher,publisher,as,server,sent,events,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,resolvable,type,event,type,assert,not,null,events,publisher,events,publisher,must,not,be,null,assert,not,null,event,type,event,type,must,not,be,null,return,server,response,context,http,message,writer,t,message,writer,find,message,writer,context,media,type,return,context,server,request,map,server,request,message,writer,write,events,publisher,event,type,event,type,media,type,server,request,server,response,context,hints,or,else,get,message,writer,write,events,publisher,event,type,media,type,server,response,context,hints
BodyInserters -> public static <T, S extends Publisher<T>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(S eventsPublisher, 			ResolvableType eventType);1493390543;Return a {@code BodyInserter} that writes the given {@code Publisher} publisher as_Server-Sent Events._@param eventsPublisher the publisher to write to the response body as Server-Sent Events_@param eventType the type of event contained in the publisher_@param <T> the type of the elements contained in the publisher_@return a {@code BodyInserter} that writes the given {@code Publisher} publisher as_Server-Sent Events_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<T>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(S eventsPublisher,_			ResolvableType eventType) {__		Assert.notNull(eventsPublisher, "'eventsPublisher' must not be null")__		Assert.notNull(eventType, "'eventType' must not be null")__		return (serverResponse, context) -> {_			HttpMessageWriter<T> messageWriter =_					findMessageWriter(context, SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM)__			return context.serverRequest()_					.map(serverRequest -> messageWriter.write(eventsPublisher, eventType,_							eventType, MediaType.TEXT_EVENT_STREAM, serverRequest,_							serverResponse, context.hints()))_					.orElseGet(() -> messageWriter.write(eventsPublisher, eventType,_							MediaType.TEXT_EVENT_STREAM, serverResponse, context.hints()))__		}__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,publisher,as,server,sent,events,param,events,publisher,the,publisher,to,write,to,the,response,body,as,server,sent,events,param,event,type,the,type,of,event,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,return,a,code,body,inserter,that,writes,the,given,code,publisher,publisher,as,server,sent,events,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,resolvable,type,event,type,assert,not,null,events,publisher,events,publisher,must,not,be,null,assert,not,null,event,type,event,type,must,not,be,null,return,server,response,context,http,message,writer,t,message,writer,find,message,writer,context,media,type,return,context,server,request,map,server,request,message,writer,write,events,publisher,event,type,event,type,media,type,server,request,server,response,context,hints,or,else,get,message,writer,write,events,publisher,event,type,media,type,server,response,context,hints
BodyInserters -> public static <T, S extends Publisher<T>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(S eventsPublisher, 			ResolvableType eventType);1493676008;Return a {@code BodyInserter} that writes the given {@code Publisher} publisher as_Server-Sent Events._@param eventsPublisher the publisher to write to the response body as Server-Sent Events_@param eventType the type of event contained in the publisher_@param <T> the type of the elements contained in the publisher_@return a {@code BodyInserter} that writes the given {@code Publisher} publisher as_Server-Sent Events_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<T>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(S eventsPublisher,_			ResolvableType eventType) {__		Assert.notNull(eventsPublisher, "'eventsPublisher' must not be null")__		Assert.notNull(eventType, "'eventType' must not be null")__		return (serverResponse, context) -> {_			HttpMessageWriter<T> messageWriter =_					findMessageWriter(context, SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM)__			return context.serverRequest()_					.map(serverRequest -> messageWriter.write(eventsPublisher, eventType,_							eventType, MediaType.TEXT_EVENT_STREAM, serverRequest,_							serverResponse, context.hints()))_					.orElseGet(() -> messageWriter.write(eventsPublisher, eventType,_							MediaType.TEXT_EVENT_STREAM, serverResponse, context.hints()))__		}__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,publisher,as,server,sent,events,param,events,publisher,the,publisher,to,write,to,the,response,body,as,server,sent,events,param,event,type,the,type,of,event,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,return,a,code,body,inserter,that,writes,the,given,code,publisher,publisher,as,server,sent,events,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,resolvable,type,event,type,assert,not,null,events,publisher,events,publisher,must,not,be,null,assert,not,null,event,type,event,type,must,not,be,null,return,server,response,context,http,message,writer,t,message,writer,find,message,writer,context,media,type,return,context,server,request,map,server,request,message,writer,write,events,publisher,event,type,event,type,media,type,server,request,server,response,context,hints,or,else,get,message,writer,write,events,publisher,event,type,media,type,server,response,context,hints
BodyInserters -> public static <T, S extends Publisher<T>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(S eventsPublisher, 			ResolvableType eventType);1495626483;Return a {@code BodyInserter} that writes the given {@code Publisher} publisher as_Server-Sent Events._@param eventsPublisher the publisher to write to the response body as Server-Sent Events_@param eventType the type of event contained in the publisher_@param <T> the type of the elements contained in the publisher_@return a {@code BodyInserter} that writes the given {@code Publisher} publisher as_Server-Sent Events_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<T>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(S eventsPublisher,_			ResolvableType eventType) {__		Assert.notNull(eventsPublisher, "'eventsPublisher' must not be null")__		Assert.notNull(eventType, "'eventType' must not be null")__		return (serverResponse, context) -> {_			HttpMessageWriter<T> messageWriter =_					findMessageWriter(context, SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM)__			return context.serverRequest()_					.map(serverRequest -> messageWriter.write(eventsPublisher, eventType,_							eventType, MediaType.TEXT_EVENT_STREAM, serverRequest,_							serverResponse, context.hints()))_					.orElseGet(() -> messageWriter.write(eventsPublisher, eventType,_							MediaType.TEXT_EVENT_STREAM, serverResponse, context.hints()))__		}__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,publisher,as,server,sent,events,param,events,publisher,the,publisher,to,write,to,the,response,body,as,server,sent,events,param,event,type,the,type,of,event,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,return,a,code,body,inserter,that,writes,the,given,code,publisher,publisher,as,server,sent,events,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,resolvable,type,event,type,assert,not,null,events,publisher,events,publisher,must,not,be,null,assert,not,null,event,type,event,type,must,not,be,null,return,server,response,context,http,message,writer,t,message,writer,find,message,writer,context,media,type,return,context,server,request,map,server,request,message,writer,write,events,publisher,event,type,event,type,media,type,server,request,server,response,context,hints,or,else,get,message,writer,write,events,publisher,event,type,media,type,server,response,context,hints
BodyInserters -> public static <T, S extends Publisher<T>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(S eventsPublisher, 			ResolvableType eventType);1496837955;Return a {@code BodyInserter} that writes the given {@code Publisher} publisher as_Server-Sent Events._@param eventsPublisher the publisher to write to the response body as Server-Sent Events_@param eventType the type of event contained in the publisher_@param <T> the type of the elements contained in the publisher_@return a {@code BodyInserter} that writes the given {@code Publisher} publisher as_Server-Sent Events_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<T>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(S eventsPublisher,_			ResolvableType eventType) {__		Assert.notNull(eventsPublisher, "'eventsPublisher' must not be null")__		Assert.notNull(eventType, "'eventType' must not be null")__		return (serverResponse, context) -> {_			HttpMessageWriter<T> messageWriter =_					findMessageWriter(context, SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM)__			return context.serverRequest()_					.map(serverRequest -> messageWriter.write(eventsPublisher, eventType,_							eventType, MediaType.TEXT_EVENT_STREAM, serverRequest,_							serverResponse, context.hints()))_					.orElseGet(() -> messageWriter.write(eventsPublisher, eventType,_							MediaType.TEXT_EVENT_STREAM, serverResponse, context.hints()))__		}__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,publisher,as,server,sent,events,param,events,publisher,the,publisher,to,write,to,the,response,body,as,server,sent,events,param,event,type,the,type,of,event,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,return,a,code,body,inserter,that,writes,the,given,code,publisher,publisher,as,server,sent,events,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,resolvable,type,event,type,assert,not,null,events,publisher,events,publisher,must,not,be,null,assert,not,null,event,type,event,type,must,not,be,null,return,server,response,context,http,message,writer,t,message,writer,find,message,writer,context,media,type,return,context,server,request,map,server,request,message,writer,write,events,publisher,event,type,event,type,media,type,server,request,server,response,context,hints,or,else,get,message,writer,write,events,publisher,event,type,media,type,server,response,context,hints
BodyInserters -> public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body);1485986572;Return a {@code BodyInserter} that writes the given single object._@param body the body of the response_@return a {@code BodyInserter} that writes a single object;public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body) {_		Assert.notNull(body, "'body' must not be null")__		return bodyInserterFor(Mono.just(body), ResolvableType.forInstance(body))__	};return,a,code,body,inserter,that,writes,the,given,single,object,param,body,the,body,of,the,response,return,a,code,body,inserter,that,writes,a,single,object;public,static,t,body,inserter,t,reactive,http,output,message,from,object,t,body,assert,not,null,body,body,must,not,be,null,return,body,inserter,for,mono,just,body,resolvable,type,for,instance,body
BodyInserters -> public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body);1486657400;Return a {@code BodyInserter} that writes the given single object._@param body the body of the response_@return a {@code BodyInserter} that writes a single object;public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body) {_		Assert.notNull(body, "'body' must not be null")__		return bodyInserterFor(Mono.just(body), ResolvableType.forInstance(body))__	};return,a,code,body,inserter,that,writes,the,given,single,object,param,body,the,body,of,the,response,return,a,code,body,inserter,that,writes,a,single,object;public,static,t,body,inserter,t,reactive,http,output,message,from,object,t,body,assert,not,null,body,body,must,not,be,null,return,body,inserter,for,mono,just,body,resolvable,type,for,instance,body
BodyInserters -> public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body);1486720600;Return a {@code BodyInserter} that writes the given single object._@param body the body of the response_@return a {@code BodyInserter} that writes a single object;public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body) {_		Assert.notNull(body, "'body' must not be null")__		return bodyInserterFor(Mono.just(body), ResolvableType.forInstance(body))__	};return,a,code,body,inserter,that,writes,the,given,single,object,param,body,the,body,of,the,response,return,a,code,body,inserter,that,writes,a,single,object;public,static,t,body,inserter,t,reactive,http,output,message,from,object,t,body,assert,not,null,body,body,must,not,be,null,return,body,inserter,for,mono,just,body,resolvable,type,for,instance,body
BodyInserters -> public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body);1487687241;Return a {@code BodyInserter} that writes the given single object._@param body the body of the response_@return a {@code BodyInserter} that writes a single object;public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body) {_		Assert.notNull(body, "'body' must not be null")__		return bodyInserterFor(Mono.just(body), ResolvableType.forInstance(body))__	};return,a,code,body,inserter,that,writes,the,given,single,object,param,body,the,body,of,the,response,return,a,code,body,inserter,that,writes,a,single,object;public,static,t,body,inserter,t,reactive,http,output,message,from,object,t,body,assert,not,null,body,body,must,not,be,null,return,body,inserter,for,mono,just,body,resolvable,type,for,instance,body
BodyInserters -> public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body);1491385016;Return a {@code BodyInserter} that writes the given single object._@param body the body of the response_@return a {@code BodyInserter} that writes a single object;public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body) {_		Assert.notNull(body, "'body' must not be null")__		return bodyInserterFor(Mono.just(body), ResolvableType.forInstance(body))__	};return,a,code,body,inserter,that,writes,the,given,single,object,param,body,the,body,of,the,response,return,a,code,body,inserter,that,writes,a,single,object;public,static,t,body,inserter,t,reactive,http,output,message,from,object,t,body,assert,not,null,body,body,must,not,be,null,return,body,inserter,for,mono,just,body,resolvable,type,for,instance,body
BodyInserters -> public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body);1493390543;Return a {@code BodyInserter} that writes the given single object._@param body the body of the response_@return a {@code BodyInserter} that writes a single object;public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body) {_		Assert.notNull(body, "'body' must not be null")__		return bodyInserterFor(Mono.just(body), ResolvableType.forInstance(body))__	};return,a,code,body,inserter,that,writes,the,given,single,object,param,body,the,body,of,the,response,return,a,code,body,inserter,that,writes,a,single,object;public,static,t,body,inserter,t,reactive,http,output,message,from,object,t,body,assert,not,null,body,body,must,not,be,null,return,body,inserter,for,mono,just,body,resolvable,type,for,instance,body
BodyInserters -> public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body);1493676008;Return a {@code BodyInserter} that writes the given single object._@param body the body of the response_@return a {@code BodyInserter} that writes a single object;public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body) {_		Assert.notNull(body, "'body' must not be null")__		return bodyInserterFor(Mono.just(body), ResolvableType.forInstance(body))__	};return,a,code,body,inserter,that,writes,the,given,single,object,param,body,the,body,of,the,response,return,a,code,body,inserter,that,writes,a,single,object;public,static,t,body,inserter,t,reactive,http,output,message,from,object,t,body,assert,not,null,body,body,must,not,be,null,return,body,inserter,for,mono,just,body,resolvable,type,for,instance,body
BodyInserters -> public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body);1495626483;Return a {@code BodyInserter} that writes the given single object._@param body the body of the response_@return a {@code BodyInserter} that writes a single object;public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body) {_		Assert.notNull(body, "'body' must not be null")__		return bodyInserterFor(Mono.just(body), ResolvableType.forInstance(body))__	};return,a,code,body,inserter,that,writes,the,given,single,object,param,body,the,body,of,the,response,return,a,code,body,inserter,that,writes,a,single,object;public,static,t,body,inserter,t,reactive,http,output,message,from,object,t,body,assert,not,null,body,body,must,not,be,null,return,body,inserter,for,mono,just,body,resolvable,type,for,instance,body
BodyInserters -> public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body);1496837955;Return a {@code BodyInserter} that writes the given single object._@param body the body of the response_@return a {@code BodyInserter} that writes a single object;public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body) {_		Assert.notNull(body, "'body' must not be null")__		return bodyInserterFor(Mono.just(body), ResolvableType.forInstance(body))__	};return,a,code,body,inserter,that,writes,the,given,single,object,param,body,the,body,of,the,response,return,a,code,body,inserter,that,writes,a,single,object;public,static,t,body,inserter,t,reactive,http,output,message,from,object,t,body,assert,not,null,body,body,must,not,be,null,return,body,inserter,for,mono,just,body,resolvable,type,for,instance,body
BodyInserters -> public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body);1497007755;Return a {@code BodyInserter} that writes the given single object._@param body the body of the response_@return a {@code BodyInserter} that writes a single object;public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body) {_		Assert.notNull(body, "'body' must not be null")__		return bodyInserterFor(Mono.just(body), ResolvableType.forInstance(body))__	};return,a,code,body,inserter,that,writes,the,given,single,object,param,body,the,body,of,the,response,return,a,code,body,inserter,that,writes,a,single,object;public,static,t,body,inserter,t,reactive,http,output,message,from,object,t,body,assert,not,null,body,body,must,not,be,null,return,body,inserter,for,mono,just,body,resolvable,type,for,instance,body
BodyInserters -> public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body);1501238239;Return a {@code BodyInserter} that writes the given single object._@param body the body of the response_@return a {@code BodyInserter} that writes a single object;public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body) {_		Assert.notNull(body, "'body' must not be null")__		return bodyInserterFor(Mono.just(body), ResolvableType.forInstance(body))__	};return,a,code,body,inserter,that,writes,the,given,single,object,param,body,the,body,of,the,response,return,a,code,body,inserter,that,writes,a,single,object;public,static,t,body,inserter,t,reactive,http,output,message,from,object,t,body,assert,not,null,body,body,must,not,be,null,return,body,inserter,for,mono,just,body,resolvable,type,for,instance,body
BodyInserters -> public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body);1509456069;Return a {@code BodyInserter} that writes the given single object._@param body the body of the response_@return a {@code BodyInserter} that writes a single object;public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body) {_		Assert.notNull(body, "'body' must not be null")__		return bodyInserterFor(Mono.just(body), ResolvableType.forInstance(body))__	};return,a,code,body,inserter,that,writes,the,given,single,object,param,body,the,body,of,the,response,return,a,code,body,inserter,that,writes,a,single,object;public,static,t,body,inserter,t,reactive,http,output,message,from,object,t,body,assert,not,null,body,body,must,not,be,null,return,body,inserter,for,mono,just,body,resolvable,type,for,instance,body
BodyInserters -> public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body);1509538672;Return a {@code BodyInserter} that writes the given single object._@param body the body of the response_@return a {@code BodyInserter} that writes a single object;public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body) {_		Assert.notNull(body, "'body' must not be null")__		return bodyInserterFor(Mono.just(body), ResolvableType.forInstance(body))__	};return,a,code,body,inserter,that,writes,the,given,single,object,param,body,the,body,of,the,response,return,a,code,body,inserter,that,writes,a,single,object;public,static,t,body,inserter,t,reactive,http,output,message,from,object,t,body,assert,not,null,body,body,must,not,be,null,return,body,inserter,for,mono,just,body,resolvable,type,for,instance,body
BodyInserters -> public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body);1509980418;Return a {@code BodyInserter} that writes the given single object._@param body the body of the response_@return a {@code BodyInserter} that writes a single object;public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body) {_		Assert.notNull(body, "'body' must not be null")__		return bodyInserterFor(Mono.just(body), ResolvableType.forInstance(body))__	};return,a,code,body,inserter,that,writes,the,given,single,object,param,body,the,body,of,the,response,return,a,code,body,inserter,that,writes,a,single,object;public,static,t,body,inserter,t,reactive,http,output,message,from,object,t,body,assert,not,null,body,body,must,not,be,null,return,body,inserter,for,mono,just,body,resolvable,type,for,instance,body
BodyInserters -> public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body);1510004038;Return a {@code BodyInserter} that writes the given single object._@param body the body of the response_@return a {@code BodyInserter} that writes a single object;public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body) {_		Assert.notNull(body, "'body' must not be null")__		return bodyInserterFor(Mono.just(body), ResolvableType.forInstance(body))__	};return,a,code,body,inserter,that,writes,the,given,single,object,param,body,the,body,of,the,response,return,a,code,body,inserter,that,writes,a,single,object;public,static,t,body,inserter,t,reactive,http,output,message,from,object,t,body,assert,not,null,body,body,must,not,be,null,return,body,inserter,for,mono,just,body,resolvable,type,for,instance,body
BodyInserters -> public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body);1510933433;Return a {@code BodyInserter} that writes the given single object._<p>Note also that_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}_each offer a {@code syncBody(Object)} shortcut for providing an Object_as the body._@param body the body of the response_@return a {@code BodyInserter} that writes a single object;public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body) {_		Assert.notNull(body, "'body' must not be null")__		return bodyInserterFor(Mono.just(body), ResolvableType.forInstance(body))__	};return,a,code,body,inserter,that,writes,the,given,single,object,p,note,also,that,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,each,offer,a,code,sync,body,object,shortcut,for,providing,an,object,as,the,body,param,body,the,body,of,the,response,return,a,code,body,inserter,that,writes,a,single,object;public,static,t,body,inserter,t,reactive,http,output,message,from,object,t,body,assert,not,null,body,body,must,not,be,null,return,body,inserter,for,mono,just,body,resolvable,type,for,instance,body
BodyInserters -> public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body);1513874461;Return a {@code BodyInserter} that writes the given single object._<p>Note also that_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}_each offer a {@code syncBody(Object)} shortcut for providing an Object_as the body._@param body the body of the response_@return a {@code BodyInserter} that writes a single object;public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body) {_		Assert.notNull(body, "'body' must not be null")__		return bodyInserterFor(Mono.just(body), ResolvableType.forInstance(body))__	};return,a,code,body,inserter,that,writes,the,given,single,object,p,note,also,that,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,each,offer,a,code,sync,body,object,shortcut,for,providing,an,object,as,the,body,param,body,the,body,of,the,response,return,a,code,body,inserter,that,writes,a,single,object;public,static,t,body,inserter,t,reactive,http,output,message,from,object,t,body,assert,not,null,body,body,must,not,be,null,return,body,inserter,for,mono,just,body,resolvable,type,for,instance,body
BodyInserters -> public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body);1515178754;Return a {@code BodyInserter} that writes the given single object._<p>Note also that_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}_each offer a {@code syncBody(Object)} shortcut for providing an Object_as the body._@param body the body of the response_@return a {@code BodyInserter} that writes a single object;public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body) {_		Assert.notNull(body, "'body' must not be null")__		return bodyInserterFor(Mono.just(body), ResolvableType.forInstance(body))__	};return,a,code,body,inserter,that,writes,the,given,single,object,p,note,also,that,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,each,offer,a,code,sync,body,object,shortcut,for,providing,an,object,as,the,body,param,body,the,body,of,the,response,return,a,code,body,inserter,that,writes,a,single,object;public,static,t,body,inserter,t,reactive,http,output,message,from,object,t,body,assert,not,null,body,body,must,not,be,null,return,body,inserter,for,mono,just,body,resolvable,type,for,instance,body
BodyInserters -> public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body);1515603291;Return a {@code BodyInserter} that writes the given single object._<p>Note also that_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}_each offer a {@code syncBody(Object)} shortcut for providing an Object_as the body._@param body the body of the response_@return a {@code BodyInserter} that writes a single object;public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body) {_		Assert.notNull(body, "'body' must not be null")__		return bodyInserterFor(Mono.just(body), ResolvableType.forInstance(body))__	};return,a,code,body,inserter,that,writes,the,given,single,object,p,note,also,that,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,each,offer,a,code,sync,body,object,shortcut,for,providing,an,object,as,the,body,param,body,the,body,of,the,response,return,a,code,body,inserter,that,writes,a,single,object;public,static,t,body,inserter,t,reactive,http,output,message,from,object,t,body,assert,not,null,body,body,must,not,be,null,return,body,inserter,for,mono,just,body,resolvable,type,for,instance,body
BodyInserters -> public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body);1521231485;Return a {@code BodyInserter} that writes the given single object._<p>Note also that_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}_each offer a {@code syncBody(Object)} shortcut for providing an Object_as the body._@param body the body of the response_@return a {@code BodyInserter} that writes a single object;public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body) {_		Assert.notNull(body, "'body' must not be null")__		return bodyInserterFor(Mono.just(body), ResolvableType.forInstance(body))__	};return,a,code,body,inserter,that,writes,the,given,single,object,p,note,also,that,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,each,offer,a,code,sync,body,object,shortcut,for,providing,an,object,as,the,body,param,body,the,body,of,the,response,return,a,code,body,inserter,that,writes,a,single,object;public,static,t,body,inserter,t,reactive,http,output,message,from,object,t,body,assert,not,null,body,body,must,not,be,null,return,body,inserter,for,mono,just,body,resolvable,type,for,instance,body
BodyInserters -> public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body);1522103912;Return a {@code BodyInserter} that writes the given single object._<p>Note also that_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}_each offer a {@code syncBody(Object)} shortcut for providing an Object_as the body._@param body the body of the response_@return a {@code BodyInserter} that writes a single object;public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body) {_		return bodyInserterFor(Mono.just(body), ResolvableType.forInstance(body))__	};return,a,code,body,inserter,that,writes,the,given,single,object,p,note,also,that,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,each,offer,a,code,sync,body,object,shortcut,for,providing,an,object,as,the,body,param,body,the,body,of,the,response,return,a,code,body,inserter,that,writes,a,single,object;public,static,t,body,inserter,t,reactive,http,output,message,from,object,t,body,return,body,inserter,for,mono,just,body,resolvable,type,for,instance,body
BodyInserters -> public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body);1524865018;Return a {@code BodyInserter} that writes the given single object._<p>Note also that_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}_each offer a {@code syncBody(Object)} shortcut for providing an Object_as the body._@param body the body of the response_@return a {@code BodyInserter} that writes a single object;public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body) {_		return bodyInserterFor(Mono.just(body), ResolvableType.forInstance(body))__	};return,a,code,body,inserter,that,writes,the,given,single,object,p,note,also,that,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,each,offer,a,code,sync,body,object,shortcut,for,providing,an,object,as,the,body,param,body,the,body,of,the,response,return,a,code,body,inserter,that,writes,a,single,object;public,static,t,body,inserter,t,reactive,http,output,message,from,object,t,body,return,body,inserter,for,mono,just,body,resolvable,type,for,instance,body
BodyInserters -> public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body);1526354196;Return a {@code BodyInserter} that writes the given single object._<p>Note also that_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}_each offer a {@code syncBody(Object)} shortcut for providing an Object_as the body._@param body the body of the response_@return a {@code BodyInserter} that writes a single object;public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body) {_		return bodyInserterFor(Mono.just(body), ResolvableType.forInstance(body))__	};return,a,code,body,inserter,that,writes,the,given,single,object,p,note,also,that,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,each,offer,a,code,sync,body,object,shortcut,for,providing,an,object,as,the,body,param,body,the,body,of,the,response,return,a,code,body,inserter,that,writes,a,single,object;public,static,t,body,inserter,t,reactive,http,output,message,from,object,t,body,return,body,inserter,for,mono,just,body,resolvable,type,for,instance,body
BodyInserters -> public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body);1527269520;Inserter to write the given object._<p>Alternatively, consider using the {@code syncBody(Object)} shortcuts on_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}._@param body the body to write to the response_@param <T> the type of the body_@return the inserter to write a single object;public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body) {_		return (message, context) ->_				writeWithMessageWriters(message, context, Mono.just(body), ResolvableType.forInstance(body))__	};inserter,to,write,the,given,object,p,alternatively,consider,using,the,code,sync,body,object,shortcuts,on,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,param,body,the,body,to,write,to,the,response,param,t,the,type,of,the,body,return,the,inserter,to,write,a,single,object;public,static,t,body,inserter,t,reactive,http,output,message,from,object,t,body,return,message,context,write,with,message,writers,message,context,mono,just,body,resolvable,type,for,instance,body
BodyInserters -> public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body);1527341063;Inserter to write the given object._<p>Alternatively, consider using the {@code syncBody(Object)} shortcuts on_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}._@param body the body to write to the response_@param <T> the type of the body_@return the inserter to write a single object;public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body) {_		return (message, context) ->_				writeWithMessageWriters(message, context, Mono.just(body), ResolvableType.forInstance(body))__	};inserter,to,write,the,given,object,p,alternatively,consider,using,the,code,sync,body,object,shortcuts,on,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,param,body,the,body,to,write,to,the,response,param,t,the,type,of,the,body,return,the,inserter,to,write,a,single,object;public,static,t,body,inserter,t,reactive,http,output,message,from,object,t,body,return,message,context,write,with,message,writers,message,context,mono,just,body,resolvable,type,for,instance,body
BodyInserters -> public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body);1530174524;Inserter to write the given object._<p>Alternatively, consider using the {@code syncBody(Object)} shortcuts on_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}._@param body the body to write to the response_@param <T> the type of the body_@return the inserter to write a single object;public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body) {_		return (message, context) ->_				writeWithMessageWriters(message, context, Mono.just(body), ResolvableType.forInstance(body))__	};inserter,to,write,the,given,object,p,alternatively,consider,using,the,code,sync,body,object,shortcuts,on,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,param,body,the,body,to,write,to,the,response,param,t,the,type,of,the,body,return,the,inserter,to,write,a,single,object;public,static,t,body,inserter,t,reactive,http,output,message,from,object,t,body,return,message,context,write,with,message,writers,message,context,mono,just,body,resolvable,type,for,instance,body
BodyInserters -> public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body);1530793695;Inserter to write the given object._<p>Alternatively, consider using the {@code syncBody(Object)} shortcuts on_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}._@param body the body to write to the response_@param <T> the type of the body_@return the inserter to write a single object;public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body) {_		return (message, context) ->_				writeWithMessageWriters(message, context, Mono.just(body), ResolvableType.forInstance(body))__	};inserter,to,write,the,given,object,p,alternatively,consider,using,the,code,sync,body,object,shortcuts,on,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,param,body,the,body,to,write,to,the,response,param,t,the,type,of,the,body,return,the,inserter,to,write,a,single,object;public,static,t,body,inserter,t,reactive,http,output,message,from,object,t,body,return,message,context,write,with,message,writers,message,context,mono,just,body,resolvable,type,for,instance,body
BodyInserters -> public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body);1542037423;Inserter to write the given object._<p>Alternatively, consider using the {@code syncBody(Object)} shortcuts on_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}._@param body the body to write to the response_@param <T> the type of the body_@return the inserter to write a single object;public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body) {_		return (message, context) ->_				writeWithMessageWriters(message, context, Mono.just(body), ResolvableType.forInstance(body))__	};inserter,to,write,the,given,object,p,alternatively,consider,using,the,code,sync,body,object,shortcuts,on,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,param,body,the,body,to,write,to,the,response,param,t,the,type,of,the,body,return,the,inserter,to,write,a,single,object;public,static,t,body,inserter,t,reactive,http,output,message,from,object,t,body,return,message,context,write,with,message,writers,message,context,mono,just,body,resolvable,type,for,instance,body
BodyInserters -> public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body);1542613849;Inserter to write the given object._<p>Alternatively, consider using the {@code syncBody(Object)} shortcuts on_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}._@param body the body to write to the response_@param <T> the type of the body_@return the inserter to write a single object;public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body) {_		return (message, context) ->_				writeWithMessageWriters(message, context, Mono.just(body), ResolvableType.forInstance(body))__	};inserter,to,write,the,given,object,p,alternatively,consider,using,the,code,sync,body,object,shortcuts,on,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,param,body,the,body,to,write,to,the,response,param,t,the,type,of,the,body,return,the,inserter,to,write,a,single,object;public,static,t,body,inserter,t,reactive,http,output,message,from,object,t,body,return,message,context,write,with,message,writers,message,context,mono,just,body,resolvable,type,for,instance,body
BodyInserters -> public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body);1542907316;Inserter to write the given object._<p>Alternatively, consider using the {@code syncBody(Object)} shortcuts on_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}._@param body the body to write to the response_@param <T> the type of the body_@return the inserter to write a single object;public static <T> BodyInserter<T, ReactiveHttpOutputMessage> fromObject(T body) {_		return (message, context) ->_				writeWithMessageWriters(message, context, Mono.just(body), ResolvableType.forInstance(body))__	};inserter,to,write,the,given,object,p,alternatively,consider,using,the,code,sync,body,object,shortcuts,on,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,param,body,the,body,to,write,to,the,response,param,t,the,type,of,the,body,return,the,inserter,to,write,a,single,object;public,static,t,body,inserter,t,reactive,http,output,message,from,object,t,body,return,message,context,write,with,message,writers,message,context,mono,just,body,resolvable,type,for,instance,body
BodyInserters -> public static <T> FormInserter<T> fromMultipartData(MultiValueMap<String, T> multipartData);1509538672;Return a {@code FormInserter} that writes the given {@code MultiValueMap}_as multipart data. Note that the returned inserter allows for additional entries to be added_via {@link FormInserter#with(String, Object)}.__<p><strong>Note:</strong> you can also use the {@code syncBody(Object)}_method in the request builders of both the {@code WebClient} and_{@code WebTestClient}. In that case setting the content type is optional._Just make sure the {@code MultiValueMap} contains at least one non-String_value or otherwise it would be interpreted as plan form data.__@param multipartData the form data to write to the output message_@return a {@code BodyInserter} that writes multipart data;public static <T> FormInserter<T> fromMultipartData(MultiValueMap<String, T> multipartData) {__		Assert.notNull(multipartData, "'multipartData' must not be null")___		return DefaultFormInserter.<T>forMultipartData().with(multipartData)__	};return,a,code,form,inserter,that,writes,the,given,code,multi,value,map,as,multipart,data,note,that,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,p,strong,note,strong,you,can,also,use,the,code,sync,body,object,method,in,the,request,builders,of,both,the,code,web,client,and,code,web,test,client,in,that,case,setting,the,content,type,is,optional,just,make,sure,the,code,multi,value,map,contains,at,least,one,non,string,value,or,otherwise,it,would,be,interpreted,as,plan,form,data,param,multipart,data,the,form,data,to,write,to,the,output,message,return,a,code,body,inserter,that,writes,multipart,data;public,static,t,form,inserter,t,from,multipart,data,multi,value,map,string,t,multipart,data,assert,not,null,multipart,data,multipart,data,must,not,be,null,return,default,form,inserter,t,for,multipart,data,with,multipart,data
BodyInserters -> public static <T> FormInserter<T> fromMultipartData(MultiValueMap<String, T> multipartData);1509980418;Return a {@code FormInserter} that writes the given {@code MultiValueMap}_as multipart data. The {@code multipartData} parameter can conveniently be built using the_{@link org.springframework.http.client.MultipartBodyBuilder MultipartBodyBuilder}._Note that the returned inserter allows for additional entries to be added_via {@link FormInserter#with(String, Object)}.__<p><strong>Note:</strong> you can also use the {@code syncBody(Object)}_method in the request builders of both the {@code WebClient} and_{@code WebTestClient}. In that case setting the content type is optional._Just make sure the {@code MultiValueMap} contains at least one non-String_value or otherwise it would be interpreted as plan form data.__@param multipartData the form data to write to the output message_@return a {@code BodyInserter} that writes multipart data;public static <T> FormInserter<T> fromMultipartData(MultiValueMap<String, T> multipartData) {__		Assert.notNull(multipartData, "'multipartData' must not be null")___		return DefaultFormInserter.<T>forMultipartData().with(multipartData)__	};return,a,code,form,inserter,that,writes,the,given,code,multi,value,map,as,multipart,data,the,code,multipart,data,parameter,can,conveniently,be,built,using,the,link,org,springframework,http,client,multipart,body,builder,multipart,body,builder,note,that,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,p,strong,note,strong,you,can,also,use,the,code,sync,body,object,method,in,the,request,builders,of,both,the,code,web,client,and,code,web,test,client,in,that,case,setting,the,content,type,is,optional,just,make,sure,the,code,multi,value,map,contains,at,least,one,non,string,value,or,otherwise,it,would,be,interpreted,as,plan,form,data,param,multipart,data,the,form,data,to,write,to,the,output,message,return,a,code,body,inserter,that,writes,multipart,data;public,static,t,form,inserter,t,from,multipart,data,multi,value,map,string,t,multipart,data,assert,not,null,multipart,data,multipart,data,must,not,be,null,return,default,form,inserter,t,for,multipart,data,with,multipart,data
BodyInserters -> public static <T> FormInserter<T> fromMultipartData(MultiValueMap<String, T> multipartData);1510004038;Return a {@code FormInserter} that writes the given {@code MultiValueMap}_as multipart data. The values in the {@code MultiValueMap} can be any_Object representing the body of the part, or an_{@link org.springframework.http.HttpEntity HttpEntity} representing a part_with body and headers. The {@code MultiValueMap} can be built conveniently_using {@link org.springframework.http.client.MultipartBodyBuilder_MultipartBodyBuilder}. Also the returned inserter allows for additional_entries to be added via {@link FormInserter#with(String, Object)}.__<p><strong>Note:</strong> you can also use the {@code syncBody(Object)}_method in the request builders of both the {@code WebClient} and_{@code WebTestClient}. In that case setting the content type is optional._Just make sure the {@code MultiValueMap} contains at least one non-String_value or otherwise it would be interpreted as plan form data.__@param multipartData the form data to write to the output message_@return a {@code BodyInserter} that writes multipart data;public static <T> FormInserter<T> fromMultipartData(MultiValueMap<String, T> multipartData) {__		Assert.notNull(multipartData, "'multipartData' must not be null")___		return DefaultFormInserter.<T>forMultipartData().with(multipartData)__	};return,a,code,form,inserter,that,writes,the,given,code,multi,value,map,as,multipart,data,the,values,in,the,code,multi,value,map,can,be,any,object,representing,the,body,of,the,part,or,an,link,org,springframework,http,http,entity,http,entity,representing,a,part,with,body,and,headers,the,code,multi,value,map,can,be,built,conveniently,using,link,org,springframework,http,client,multipart,body,builder,multipart,body,builder,also,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,p,strong,note,strong,you,can,also,use,the,code,sync,body,object,method,in,the,request,builders,of,both,the,code,web,client,and,code,web,test,client,in,that,case,setting,the,content,type,is,optional,just,make,sure,the,code,multi,value,map,contains,at,least,one,non,string,value,or,otherwise,it,would,be,interpreted,as,plan,form,data,param,multipart,data,the,form,data,to,write,to,the,output,message,return,a,code,body,inserter,that,writes,multipart,data;public,static,t,form,inserter,t,from,multipart,data,multi,value,map,string,t,multipart,data,assert,not,null,multipart,data,multipart,data,must,not,be,null,return,default,form,inserter,t,for,multipart,data,with,multipart,data
BodyInserters -> public static <T> FormInserter<T> fromMultipartData(MultiValueMap<String, T> multipartData);1510933433;Return a {@code FormInserter} that writes the given {@code MultiValueMap}_as multipart data. The values in the {@code MultiValueMap} can be any_Object representing the body of the part, or an_{@link org.springframework.http.HttpEntity HttpEntity} representing a part_with body and headers. The {@code MultiValueMap} can be built conveniently_using {@link org.springframework.http.client.MultipartBodyBuilder_MultipartBodyBuilder}. Also the returned inserter allows for additional_entries to be added via {@link FormInserter#with(String, Object)}.__<p>Note that you can also use the {@code syncBody(Object)} method in the_request builders of both the {@code WebClient} and {@code WebTestClient}._In that case the setting of the content type is also not required, just_be sure the map contains at least one non-String value or otherwise,_without a content-type header as a hint, it would be interpreted as a_plain form data request.__@param multipartData the form data to write to the output message_@return a {@code BodyInserter} that writes multipart data;public static <T> FormInserter<T> fromMultipartData(MultiValueMap<String, T> multipartData) {__		Assert.notNull(multipartData, "'multipartData' must not be null")___		return DefaultFormInserter.<T>forMultipartData().with(multipartData)__	};return,a,code,form,inserter,that,writes,the,given,code,multi,value,map,as,multipart,data,the,values,in,the,code,multi,value,map,can,be,any,object,representing,the,body,of,the,part,or,an,link,org,springframework,http,http,entity,http,entity,representing,a,part,with,body,and,headers,the,code,multi,value,map,can,be,built,conveniently,using,link,org,springframework,http,client,multipart,body,builder,multipart,body,builder,also,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,p,note,that,you,can,also,use,the,code,sync,body,object,method,in,the,request,builders,of,both,the,code,web,client,and,code,web,test,client,in,that,case,the,setting,of,the,content,type,is,also,not,required,just,be,sure,the,map,contains,at,least,one,non,string,value,or,otherwise,without,a,content,type,header,as,a,hint,it,would,be,interpreted,as,a,plain,form,data,request,param,multipart,data,the,form,data,to,write,to,the,output,message,return,a,code,body,inserter,that,writes,multipart,data;public,static,t,form,inserter,t,from,multipart,data,multi,value,map,string,t,multipart,data,assert,not,null,multipart,data,multipart,data,must,not,be,null,return,default,form,inserter,t,for,multipart,data,with,multipart,data
BodyInserters -> MultipartInserter -> <T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher, 				ParameterizedTypeReference<T> typeReference)_;1521231485;Variant of {@link #withPublisher(String, Publisher, Class)} that accepts a_{@link ParameterizedTypeReference} for the element type, which allows_specifying generic type information._@param name the key to be added_@param publisher the publisher to be added as value_@param typeReference the type of elements contained in {@code publisher}_@return this inserter for adding more parts;<T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher,_				ParameterizedTypeReference<T> typeReference)_;variant,of,link,with,publisher,string,publisher,class,that,accepts,a,link,parameterized,type,reference,for,the,element,type,which,allows,specifying,generic,type,information,param,name,the,key,to,be,added,param,publisher,the,publisher,to,be,added,as,value,param,type,reference,the,type,of,elements,contained,in,code,publisher,return,this,inserter,for,adding,more,parts;t,p,extends,publisher,t,multipart,inserter,with,publisher,string,name,p,publisher,parameterized,type,reference,t,type,reference
BodyInserters -> MultipartInserter -> <T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher, 				ParameterizedTypeReference<T> typeReference)_;1522103912;Variant of {@link #withPublisher(String, Publisher, Class)} that accepts a_{@link ParameterizedTypeReference} for the element type, which allows_specifying generic type information._@param name the key to be added_@param publisher the publisher to be added as value_@param typeReference the type of elements contained in {@code publisher}_@return this inserter for adding more parts;<T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher,_				ParameterizedTypeReference<T> typeReference)_;variant,of,link,with,publisher,string,publisher,class,that,accepts,a,link,parameterized,type,reference,for,the,element,type,which,allows,specifying,generic,type,information,param,name,the,key,to,be,added,param,publisher,the,publisher,to,be,added,as,value,param,type,reference,the,type,of,elements,contained,in,code,publisher,return,this,inserter,for,adding,more,parts;t,p,extends,publisher,t,multipart,inserter,with,publisher,string,name,p,publisher,parameterized,type,reference,t,type,reference
BodyInserters -> MultipartInserter -> <T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher, 				ParameterizedTypeReference<T> typeReference)_;1524865018;Variant of {@link #withPublisher(String, Publisher, Class)} that accepts a_{@link ParameterizedTypeReference} for the element type, which allows_specifying generic type information._@param name the key to be added_@param publisher the publisher to be added as value_@param typeReference the type of elements contained in {@code publisher}_@return this inserter for adding more parts;<T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher,_				ParameterizedTypeReference<T> typeReference)_;variant,of,link,with,publisher,string,publisher,class,that,accepts,a,link,parameterized,type,reference,for,the,element,type,which,allows,specifying,generic,type,information,param,name,the,key,to,be,added,param,publisher,the,publisher,to,be,added,as,value,param,type,reference,the,type,of,elements,contained,in,code,publisher,return,this,inserter,for,adding,more,parts;t,p,extends,publisher,t,multipart,inserter,with,publisher,string,name,p,publisher,parameterized,type,reference,t,type,reference
BodyInserters -> MultipartInserter -> <T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher, 				ParameterizedTypeReference<T> typeReference)_;1526354196;Variant of {@link #withPublisher(String, Publisher, Class)} that accepts a_{@link ParameterizedTypeReference} for the element type, which allows_specifying generic type information._@param name the key to be added_@param publisher the publisher to be added as value_@param typeReference the type of elements contained in {@code publisher}_@return this inserter for adding more parts;<T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher,_				ParameterizedTypeReference<T> typeReference)_;variant,of,link,with,publisher,string,publisher,class,that,accepts,a,link,parameterized,type,reference,for,the,element,type,which,allows,specifying,generic,type,information,param,name,the,key,to,be,added,param,publisher,the,publisher,to,be,added,as,value,param,type,reference,the,type,of,elements,contained,in,code,publisher,return,this,inserter,for,adding,more,parts;t,p,extends,publisher,t,multipart,inserter,with,publisher,string,name,p,publisher,parameterized,type,reference,t,type,reference
BodyInserters -> MultipartInserter -> <T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher, 				ParameterizedTypeReference<T> typeReference)_;1527269520;Variant of {@link #withPublisher(String, Publisher, Class)} that accepts a_{@link ParameterizedTypeReference} for the element type, which allows_specifying generic type information._@param name the key to be added_@param publisher the publisher to be added as value_@param typeReference the type of elements contained in {@code publisher}_@return this inserter for adding more parts;<T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher,_				ParameterizedTypeReference<T> typeReference)_;variant,of,link,with,publisher,string,publisher,class,that,accepts,a,link,parameterized,type,reference,for,the,element,type,which,allows,specifying,generic,type,information,param,name,the,key,to,be,added,param,publisher,the,publisher,to,be,added,as,value,param,type,reference,the,type,of,elements,contained,in,code,publisher,return,this,inserter,for,adding,more,parts;t,p,extends,publisher,t,multipart,inserter,with,publisher,string,name,p,publisher,parameterized,type,reference,t,type,reference
BodyInserters -> MultipartInserter -> <T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher, 				ParameterizedTypeReference<T> typeReference)_;1527341063;Variant of {@link #withPublisher(String, Publisher, Class)} that accepts a_{@link ParameterizedTypeReference} for the element type, which allows_specifying generic type information._@param name the key to be added_@param publisher the publisher to be added as value_@param typeReference the type of elements contained in {@code publisher}_@return this inserter for adding more parts;<T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher,_				ParameterizedTypeReference<T> typeReference)_;variant,of,link,with,publisher,string,publisher,class,that,accepts,a,link,parameterized,type,reference,for,the,element,type,which,allows,specifying,generic,type,information,param,name,the,key,to,be,added,param,publisher,the,publisher,to,be,added,as,value,param,type,reference,the,type,of,elements,contained,in,code,publisher,return,this,inserter,for,adding,more,parts;t,p,extends,publisher,t,multipart,inserter,with,publisher,string,name,p,publisher,parameterized,type,reference,t,type,reference
BodyInserters -> MultipartInserter -> <T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher, 				ParameterizedTypeReference<T> typeReference)_;1530174524;Variant of {@link #withPublisher(String, Publisher, Class)} that accepts a_{@link ParameterizedTypeReference} for the element type, which allows_specifying generic type information._@param name the key to be added_@param publisher the publisher to be added as value_@param typeReference the type of elements contained in {@code publisher}_@return this inserter for adding more parts;<T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher,_				ParameterizedTypeReference<T> typeReference)_;variant,of,link,with,publisher,string,publisher,class,that,accepts,a,link,parameterized,type,reference,for,the,element,type,which,allows,specifying,generic,type,information,param,name,the,key,to,be,added,param,publisher,the,publisher,to,be,added,as,value,param,type,reference,the,type,of,elements,contained,in,code,publisher,return,this,inserter,for,adding,more,parts;t,p,extends,publisher,t,multipart,inserter,with,publisher,string,name,p,publisher,parameterized,type,reference,t,type,reference
BodyInserters -> MultipartInserter -> <T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher, 				ParameterizedTypeReference<T> typeReference)_;1530793695;Variant of {@link #withPublisher(String, Publisher, Class)} that accepts a_{@link ParameterizedTypeReference} for the element type, which allows_specifying generic type information._@param name the key to be added_@param publisher the publisher to be added as value_@param typeReference the type of elements contained in {@code publisher}_@return this inserter for adding more parts;<T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher,_				ParameterizedTypeReference<T> typeReference)_;variant,of,link,with,publisher,string,publisher,class,that,accepts,a,link,parameterized,type,reference,for,the,element,type,which,allows,specifying,generic,type,information,param,name,the,key,to,be,added,param,publisher,the,publisher,to,be,added,as,value,param,type,reference,the,type,of,elements,contained,in,code,publisher,return,this,inserter,for,adding,more,parts;t,p,extends,publisher,t,multipart,inserter,with,publisher,string,name,p,publisher,parameterized,type,reference,t,type,reference
BodyInserters -> MultipartInserter -> <T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher, 				ParameterizedTypeReference<T> typeReference)_;1542037423;Variant of {@link #withPublisher(String, Publisher, Class)} that accepts a_{@link ParameterizedTypeReference} for the element type, which allows_specifying generic type information._@param name the key to be added_@param publisher the publisher to be added as value_@param typeReference the type of elements contained in {@code publisher}_@return this inserter for adding more parts;<T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher,_				ParameterizedTypeReference<T> typeReference)_;variant,of,link,with,publisher,string,publisher,class,that,accepts,a,link,parameterized,type,reference,for,the,element,type,which,allows,specifying,generic,type,information,param,name,the,key,to,be,added,param,publisher,the,publisher,to,be,added,as,value,param,type,reference,the,type,of,elements,contained,in,code,publisher,return,this,inserter,for,adding,more,parts;t,p,extends,publisher,t,multipart,inserter,with,publisher,string,name,p,publisher,parameterized,type,reference,t,type,reference
BodyInserters -> MultipartInserter -> <T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher, 				ParameterizedTypeReference<T> typeReference)_;1542613849;Variant of {@link #withPublisher(String, Publisher, Class)} that accepts a_{@link ParameterizedTypeReference} for the element type, which allows_specifying generic type information._@param name the key to be added_@param publisher the publisher to be added as value_@param typeReference the type of elements contained in {@code publisher}_@return this inserter for adding more parts;<T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher,_				ParameterizedTypeReference<T> typeReference)_;variant,of,link,with,publisher,string,publisher,class,that,accepts,a,link,parameterized,type,reference,for,the,element,type,which,allows,specifying,generic,type,information,param,name,the,key,to,be,added,param,publisher,the,publisher,to,be,added,as,value,param,type,reference,the,type,of,elements,contained,in,code,publisher,return,this,inserter,for,adding,more,parts;t,p,extends,publisher,t,multipart,inserter,with,publisher,string,name,p,publisher,parameterized,type,reference,t,type,reference
BodyInserters -> MultipartInserter -> <T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher, 				ParameterizedTypeReference<T> typeReference)_;1542907316;Variant of {@link #withPublisher(String, Publisher, Class)} that accepts a_{@link ParameterizedTypeReference} for the element type, which allows_specifying generic type information._@param name the key to be added_@param publisher the publisher to be added as value_@param typeReference the type of elements contained in {@code publisher}_@return this inserter for adding more parts;<T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher,_				ParameterizedTypeReference<T> typeReference)_;variant,of,link,with,publisher,string,publisher,class,that,accepts,a,link,parameterized,type,reference,for,the,element,type,which,allows,specifying,generic,type,information,param,name,the,key,to,be,added,param,publisher,the,publisher,to,be,added,as,value,param,type,reference,the,type,of,elements,contained,in,code,publisher,return,this,inserter,for,adding,more,parts;t,p,extends,publisher,t,multipart,inserter,with,publisher,string,name,p,publisher,parameterized,type,reference,t,type,reference
BodyInserters -> public static FormInserter<String> fromFormData(String name, String value);1521231485;Return a {@link FormInserter} that writes the given key-value pair as_URL-encoded form data. The returned inserter allows for additional_entries to be added via {@link FormInserter#with(String, Object)}._@param name the key to add to the form_@param value the value to add to the form_@return the inserter that allows adding more form data;public static FormInserter<String> fromFormData(String name, String value) {_		Assert.notNull(name, "'key' must not be null")__		Assert.notNull(value, "'value' must not be null")__		return new DefaultFormInserter().with(name, value)__	};return,a,link,form,inserter,that,writes,the,given,key,value,pair,as,url,encoded,form,data,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,param,name,the,key,to,add,to,the,form,param,value,the,value,to,add,to,the,form,return,the,inserter,that,allows,adding,more,form,data;public,static,form,inserter,string,from,form,data,string,name,string,value,assert,not,null,name,key,must,not,be,null,assert,not,null,value,value,must,not,be,null,return,new,default,form,inserter,with,name,value
BodyInserters -> public static FormInserter<String> fromFormData(String name, String value);1522103912;Return a {@link FormInserter} that writes the given key-value pair as_URL-encoded form data. The returned inserter allows for additional_entries to be added via {@link FormInserter#with(String, Object)}._@param name the key to add to the form_@param value the value to add to the form_@return the inserter that allows adding more form data;public static FormInserter<String> fromFormData(String name, String value) {_		Assert.notNull(name, "'key' must not be null")__		Assert.notNull(value, "'value' must not be null")__		return new DefaultFormInserter().with(name, value)__	};return,a,link,form,inserter,that,writes,the,given,key,value,pair,as,url,encoded,form,data,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,param,name,the,key,to,add,to,the,form,param,value,the,value,to,add,to,the,form,return,the,inserter,that,allows,adding,more,form,data;public,static,form,inserter,string,from,form,data,string,name,string,value,assert,not,null,name,key,must,not,be,null,assert,not,null,value,value,must,not,be,null,return,new,default,form,inserter,with,name,value
BodyInserters -> public static FormInserter<String> fromFormData(String name, String value);1524865018;Return a {@link FormInserter} that writes the given key-value pair as_URL-encoded form data. The returned inserter allows for additional_entries to be added via {@link FormInserter#with(String, Object)}._@param name the key to add to the form_@param value the value to add to the form_@return the inserter that allows adding more form data;public static FormInserter<String> fromFormData(String name, String value) {_		Assert.notNull(name, "'name' must not be null")__		Assert.notNull(value, "'value' must not be null")__		return new DefaultFormInserter().with(name, value)__	};return,a,link,form,inserter,that,writes,the,given,key,value,pair,as,url,encoded,form,data,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,param,name,the,key,to,add,to,the,form,param,value,the,value,to,add,to,the,form,return,the,inserter,that,allows,adding,more,form,data;public,static,form,inserter,string,from,form,data,string,name,string,value,assert,not,null,name,name,must,not,be,null,assert,not,null,value,value,must,not,be,null,return,new,default,form,inserter,with,name,value
BodyInserters -> public static FormInserter<String> fromFormData(String name, String value);1526354196;Return a {@link FormInserter} that writes the given key-value pair as_URL-encoded form data. The returned inserter allows for additional_entries to be added via {@link FormInserter#with(String, Object)}._@param name the key to add to the form_@param value the value to add to the form_@return the inserter that allows adding more form data;public static FormInserter<String> fromFormData(String name, String value) {_		Assert.notNull(name, "'name' must not be null")__		Assert.notNull(value, "'value' must not be null")__		return new DefaultFormInserter().with(name, value)__	};return,a,link,form,inserter,that,writes,the,given,key,value,pair,as,url,encoded,form,data,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,param,name,the,key,to,add,to,the,form,param,value,the,value,to,add,to,the,form,return,the,inserter,that,allows,adding,more,form,data;public,static,form,inserter,string,from,form,data,string,name,string,value,assert,not,null,name,name,must,not,be,null,assert,not,null,value,value,must,not,be,null,return,new,default,form,inserter,with,name,value
BodyInserters -> public static FormInserter<String> fromFormData(String name, String value);1527269520;Return a {@link FormInserter} to write the given key-value pair as_URL-encoded form data. The returned inserter allows for additional_entries to be added via {@link FormInserter#with(String, Object)}._@param name the key to add to the form_@param value the value to add to the form_@return the inserter that allows adding more form data;public static FormInserter<String> fromFormData(String name, String value) {_		Assert.notNull(name, "'name' must not be null")__		Assert.notNull(value, "'value' must not be null")__		return new DefaultFormInserter().with(name, value)__	};return,a,link,form,inserter,to,write,the,given,key,value,pair,as,url,encoded,form,data,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,param,name,the,key,to,add,to,the,form,param,value,the,value,to,add,to,the,form,return,the,inserter,that,allows,adding,more,form,data;public,static,form,inserter,string,from,form,data,string,name,string,value,assert,not,null,name,name,must,not,be,null,assert,not,null,value,value,must,not,be,null,return,new,default,form,inserter,with,name,value
BodyInserters -> public static FormInserter<String> fromFormData(String name, String value);1527341063;Return a {@link FormInserter} to write the given key-value pair as_URL-encoded form data. The returned inserter allows for additional_entries to be added via {@link FormInserter#with(String, Object)}._@param name the key to add to the form_@param value the value to add to the form_@return the inserter that allows adding more form data;public static FormInserter<String> fromFormData(String name, String value) {_		Assert.notNull(name, "'name' must not be null")__		Assert.notNull(value, "'value' must not be null")__		return new DefaultFormInserter().with(name, value)__	};return,a,link,form,inserter,to,write,the,given,key,value,pair,as,url,encoded,form,data,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,param,name,the,key,to,add,to,the,form,param,value,the,value,to,add,to,the,form,return,the,inserter,that,allows,adding,more,form,data;public,static,form,inserter,string,from,form,data,string,name,string,value,assert,not,null,name,name,must,not,be,null,assert,not,null,value,value,must,not,be,null,return,new,default,form,inserter,with,name,value
BodyInserters -> public static FormInserter<String> fromFormData(String name, String value);1530174524;Return a {@link FormInserter} to write the given key-value pair as_URL-encoded form data. The returned inserter allows for additional_entries to be added via {@link FormInserter#with(String, Object)}._@param name the key to add to the form_@param value the value to add to the form_@return the inserter that allows adding more form data;public static FormInserter<String> fromFormData(String name, String value) {_		Assert.notNull(name, "'name' must not be null")__		Assert.notNull(value, "'value' must not be null")__		return new DefaultFormInserter().with(name, value)__	};return,a,link,form,inserter,to,write,the,given,key,value,pair,as,url,encoded,form,data,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,param,name,the,key,to,add,to,the,form,param,value,the,value,to,add,to,the,form,return,the,inserter,that,allows,adding,more,form,data;public,static,form,inserter,string,from,form,data,string,name,string,value,assert,not,null,name,name,must,not,be,null,assert,not,null,value,value,must,not,be,null,return,new,default,form,inserter,with,name,value
BodyInserters -> public static FormInserter<String> fromFormData(String name, String value);1530793695;Return a {@link FormInserter} to write the given key-value pair as_URL-encoded form data. The returned inserter allows for additional_entries to be added via {@link FormInserter#with(String, Object)}._@param name the key to add to the form_@param value the value to add to the form_@return the inserter that allows adding more form data;public static FormInserter<String> fromFormData(String name, String value) {_		Assert.notNull(name, "'name' must not be null")__		Assert.notNull(value, "'value' must not be null")__		return new DefaultFormInserter().with(name, value)__	};return,a,link,form,inserter,to,write,the,given,key,value,pair,as,url,encoded,form,data,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,param,name,the,key,to,add,to,the,form,param,value,the,value,to,add,to,the,form,return,the,inserter,that,allows,adding,more,form,data;public,static,form,inserter,string,from,form,data,string,name,string,value,assert,not,null,name,name,must,not,be,null,assert,not,null,value,value,must,not,be,null,return,new,default,form,inserter,with,name,value
BodyInserters -> public static FormInserter<String> fromFormData(String name, String value);1542037423;Return a {@link FormInserter} to write the given key-value pair as_URL-encoded form data. The returned inserter allows for additional_entries to be added via {@link FormInserter#with(String, Object)}._@param name the key to add to the form_@param value the value to add to the form_@return the inserter that allows adding more form data;public static FormInserter<String> fromFormData(String name, String value) {_		Assert.notNull(name, "'name' must not be null")__		Assert.notNull(value, "'value' must not be null")__		return new DefaultFormInserter().with(name, value)__	};return,a,link,form,inserter,to,write,the,given,key,value,pair,as,url,encoded,form,data,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,param,name,the,key,to,add,to,the,form,param,value,the,value,to,add,to,the,form,return,the,inserter,that,allows,adding,more,form,data;public,static,form,inserter,string,from,form,data,string,name,string,value,assert,not,null,name,name,must,not,be,null,assert,not,null,value,value,must,not,be,null,return,new,default,form,inserter,with,name,value
BodyInserters -> public static FormInserter<String> fromFormData(String name, String value);1542613849;Return a {@link FormInserter} to write the given key-value pair as_URL-encoded form data. The returned inserter allows for additional_entries to be added via {@link FormInserter#with(String, Object)}._@param name the key to add to the form_@param value the value to add to the form_@return the inserter that allows adding more form data;public static FormInserter<String> fromFormData(String name, String value) {_		Assert.notNull(name, "'name' must not be null")__		Assert.notNull(value, "'value' must not be null")__		return new DefaultFormInserter().with(name, value)__	};return,a,link,form,inserter,to,write,the,given,key,value,pair,as,url,encoded,form,data,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,param,name,the,key,to,add,to,the,form,param,value,the,value,to,add,to,the,form,return,the,inserter,that,allows,adding,more,form,data;public,static,form,inserter,string,from,form,data,string,name,string,value,assert,not,null,name,name,must,not,be,null,assert,not,null,value,value,must,not,be,null,return,new,default,form,inserter,with,name,value
BodyInserters -> public static FormInserter<String> fromFormData(String name, String value);1542907316;Return a {@link FormInserter} to write the given key-value pair as_URL-encoded form data. The returned inserter allows for additional_entries to be added via {@link FormInserter#with(String, Object)}._@param name the key to add to the form_@param value the value to add to the form_@return the inserter that allows adding more form data;public static FormInserter<String> fromFormData(String name, String value) {_		Assert.notNull(name, "'name' must not be null")__		Assert.notNull(value, "'value' must not be null")__		return new DefaultFormInserter().with(name, value)__	};return,a,link,form,inserter,to,write,the,given,key,value,pair,as,url,encoded,form,data,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,param,name,the,key,to,add,to,the,form,param,value,the,value,to,add,to,the,form,return,the,inserter,that,allows,adding,more,form,data;public,static,form,inserter,string,from,form,data,string,name,string,value,assert,not,null,name,name,must,not,be,null,assert,not,null,value,value,must,not,be,null,return,new,default,form,inserter,with,name,value
BodyInserters -> MultipartInserter -> <T, P extends Publisher<T>> MultipartInserter withPublisher(String key, P publisher, 				ParameterizedTypeReference<T> typeReference)_;1513874461;Adds the specified publisher as a part.__@param key the key to be added_@param publisher the publisher to be added as value_@param typeReference the type of elements contained in {@code publisher}_@return this inserter;<T, P extends Publisher<T>> MultipartInserter withPublisher(String key, P publisher,_				ParameterizedTypeReference<T> typeReference)_;adds,the,specified,publisher,as,a,part,param,key,the,key,to,be,added,param,publisher,the,publisher,to,be,added,as,value,param,type,reference,the,type,of,elements,contained,in,code,publisher,return,this,inserter;t,p,extends,publisher,t,multipart,inserter,with,publisher,string,key,p,publisher,parameterized,type,reference,t,type,reference
BodyInserters -> MultipartInserter -> <T, P extends Publisher<T>> MultipartInserter withPublisher(String key, P publisher, 				ParameterizedTypeReference<T> typeReference)_;1515178754;Adds the specified publisher as a part.__@param key the key to be added_@param publisher the publisher to be added as value_@param typeReference the type of elements contained in {@code publisher}_@return this inserter;<T, P extends Publisher<T>> MultipartInserter withPublisher(String key, P publisher,_				ParameterizedTypeReference<T> typeReference)_;adds,the,specified,publisher,as,a,part,param,key,the,key,to,be,added,param,publisher,the,publisher,to,be,added,as,value,param,type,reference,the,type,of,elements,contained,in,code,publisher,return,this,inserter;t,p,extends,publisher,t,multipart,inserter,with,publisher,string,key,p,publisher,parameterized,type,reference,t,type,reference
BodyInserters -> MultipartInserter -> <T, P extends Publisher<T>> MultipartInserter withPublisher(String key, P publisher, 				ParameterizedTypeReference<T> typeReference)_;1515603291;Adds the specified publisher as a part.__@param key the key to be added_@param publisher the publisher to be added as value_@param typeReference the type of elements contained in {@code publisher}_@return this inserter;<T, P extends Publisher<T>> MultipartInserter withPublisher(String key, P publisher,_				ParameterizedTypeReference<T> typeReference)_;adds,the,specified,publisher,as,a,part,param,key,the,key,to,be,added,param,publisher,the,publisher,to,be,added,as,value,param,type,reference,the,type,of,elements,contained,in,code,publisher,return,this,inserter;t,p,extends,publisher,t,multipart,inserter,with,publisher,string,key,p,publisher,parameterized,type,reference,t,type,reference
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, Class<T> elementClass);1486720600;Return a {@code BodyInserter} that writes the given {@link Publisher}._@param publisher the publisher to stream to the response body_@param elementClass the class of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, Class<T> elementClass) {__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementClass, "'elementClass' must not be null")__		return bodyInserterFor(publisher, ResolvableType.forClass(elementClass))__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,param,publisher,the,publisher,to,stream,to,the,response,body,param,element,class,the,class,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,class,t,element,class,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,class,element,class,must,not,be,null,return,body,inserter,for,publisher,resolvable,type,for,class,element,class
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, Class<T> elementClass);1487687241;Return a {@code BodyInserter} that writes the given {@link Publisher}._@param publisher the publisher to stream to the response body_@param elementClass the class of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, Class<T> elementClass) {__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementClass, "'elementClass' must not be null")__		return bodyInserterFor(publisher, ResolvableType.forClass(elementClass))__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,param,publisher,the,publisher,to,stream,to,the,response,body,param,element,class,the,class,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,class,t,element,class,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,class,element,class,must,not,be,null,return,body,inserter,for,publisher,resolvable,type,for,class,element,class
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, Class<T> elementClass);1491385016;Return a {@code BodyInserter} that writes the given {@link Publisher}._@param publisher the publisher to stream to the response body_@param elementClass the class of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, Class<T> elementClass) {__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementClass, "'elementClass' must not be null")__		return bodyInserterFor(publisher, ResolvableType.forClass(elementClass))__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,param,publisher,the,publisher,to,stream,to,the,response,body,param,element,class,the,class,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,class,t,element,class,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,class,element,class,must,not,be,null,return,body,inserter,for,publisher,resolvable,type,for,class,element,class
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, Class<T> elementClass);1493390543;Return a {@code BodyInserter} that writes the given {@link Publisher}._@param publisher the publisher to stream to the response body_@param elementClass the class of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, Class<T> elementClass) {__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementClass, "'elementClass' must not be null")__		return bodyInserterFor(publisher, ResolvableType.forClass(elementClass))__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,param,publisher,the,publisher,to,stream,to,the,response,body,param,element,class,the,class,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,class,t,element,class,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,class,element,class,must,not,be,null,return,body,inserter,for,publisher,resolvable,type,for,class,element,class
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, Class<T> elementClass);1493676008;Return a {@code BodyInserter} that writes the given {@link Publisher}._@param publisher the publisher to stream to the response body_@param elementClass the class of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, Class<T> elementClass) {__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementClass, "'elementClass' must not be null")__		return bodyInserterFor(publisher, ResolvableType.forClass(elementClass))__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,param,publisher,the,publisher,to,stream,to,the,response,body,param,element,class,the,class,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,class,t,element,class,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,class,element,class,must,not,be,null,return,body,inserter,for,publisher,resolvable,type,for,class,element,class
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, Class<T> elementClass);1495626483;Return a {@code BodyInserter} that writes the given {@link Publisher}._@param publisher the publisher to stream to the response body_@param elementClass the class of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, Class<T> elementClass) {__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementClass, "'elementClass' must not be null")__		return bodyInserterFor(publisher, ResolvableType.forClass(elementClass))__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,param,publisher,the,publisher,to,stream,to,the,response,body,param,element,class,the,class,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,class,t,element,class,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,class,element,class,must,not,be,null,return,body,inserter,for,publisher,resolvable,type,for,class,element,class
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, Class<T> elementClass);1496837955;Return a {@code BodyInserter} that writes the given {@link Publisher}._@param publisher the publisher to stream to the response body_@param elementClass the class of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, Class<T> elementClass) {__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementClass, "'elementClass' must not be null")__		return bodyInserterFor(publisher, ResolvableType.forClass(elementClass))__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,param,publisher,the,publisher,to,stream,to,the,response,body,param,element,class,the,class,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,class,t,element,class,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,class,element,class,must,not,be,null,return,body,inserter,for,publisher,resolvable,type,for,class,element,class
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, Class<T> elementClass);1497007755;Return a {@code BodyInserter} that writes the given {@link Publisher}._@param publisher the publisher to stream to the response body_@param elementClass the class of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, Class<T> elementClass) {__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementClass, "'elementClass' must not be null")__		return bodyInserterFor(publisher, ResolvableType.forClass(elementClass))__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,param,publisher,the,publisher,to,stream,to,the,response,body,param,element,class,the,class,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,class,t,element,class,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,class,element,class,must,not,be,null,return,body,inserter,for,publisher,resolvable,type,for,class,element,class
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, Class<T> elementClass);1501238239;Return a {@code BodyInserter} that writes the given {@link Publisher}._@param publisher the publisher to stream to the response body_@param elementClass the class of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, Class<T> elementClass) {__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementClass, "'elementClass' must not be null")__		return bodyInserterFor(publisher, ResolvableType.forClass(elementClass))__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,param,publisher,the,publisher,to,stream,to,the,response,body,param,element,class,the,class,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,class,t,element,class,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,class,element,class,must,not,be,null,return,body,inserter,for,publisher,resolvable,type,for,class,element,class
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, Class<T> elementClass);1509456069;Return a {@code BodyInserter} that writes the given {@link Publisher}._@param publisher the publisher to stream to the response body_@param elementClass the class of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, Class<T> elementClass) {__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementClass, "'elementClass' must not be null")__		return bodyInserterFor(publisher, ResolvableType.forClass(elementClass))__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,param,publisher,the,publisher,to,stream,to,the,response,body,param,element,class,the,class,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,class,t,element,class,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,class,element,class,must,not,be,null,return,body,inserter,for,publisher,resolvable,type,for,class,element,class
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, Class<T> elementClass);1509538672;Return a {@code BodyInserter} that writes the given {@link Publisher}._@param publisher the publisher to stream to the response body_@param elementClass the class of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, Class<T> elementClass) {__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementClass, "'elementClass' must not be null")__		return bodyInserterFor(publisher, ResolvableType.forClass(elementClass))__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,param,publisher,the,publisher,to,stream,to,the,response,body,param,element,class,the,class,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,class,t,element,class,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,class,element,class,must,not,be,null,return,body,inserter,for,publisher,resolvable,type,for,class,element,class
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, Class<T> elementClass);1509980418;Return a {@code BodyInserter} that writes the given {@link Publisher}._@param publisher the publisher to stream to the response body_@param elementClass the class of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, Class<T> elementClass) {__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementClass, "'elementClass' must not be null")__		return bodyInserterFor(publisher, ResolvableType.forClass(elementClass))__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,param,publisher,the,publisher,to,stream,to,the,response,body,param,element,class,the,class,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,class,t,element,class,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,class,element,class,must,not,be,null,return,body,inserter,for,publisher,resolvable,type,for,class,element,class
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, Class<T> elementClass);1510004038;Return a {@code BodyInserter} that writes the given {@link Publisher}._@param publisher the publisher to stream to the response body_@param elementClass the class of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, Class<T> elementClass) {__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementClass, "'elementClass' must not be null")__		return bodyInserterFor(publisher, ResolvableType.forClass(elementClass))__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,param,publisher,the,publisher,to,stream,to,the,response,body,param,element,class,the,class,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,class,t,element,class,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,class,element,class,must,not,be,null,return,body,inserter,for,publisher,resolvable,type,for,class,element,class
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, Class<T> elementClass);1510933433;Return a {@code BodyInserter} that writes the given {@link Publisher}._<p>Note also that_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}_each offer {@code body} shortcut methods for providing a Publisher as the body._@param publisher the publisher to stream to the response body_@param elementClass the class of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, Class<T> elementClass) {__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementClass, "'elementClass' must not be null")__		return bodyInserterFor(publisher, ResolvableType.forClass(elementClass))__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,p,note,also,that,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,each,offer,code,body,shortcut,methods,for,providing,a,publisher,as,the,body,param,publisher,the,publisher,to,stream,to,the,response,body,param,element,class,the,class,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,class,t,element,class,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,class,element,class,must,not,be,null,return,body,inserter,for,publisher,resolvable,type,for,class,element,class
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, Class<T> elementClass);1513874461;Return a {@code BodyInserter} that writes the given {@link Publisher}._<p>Note also that_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}_each offer {@code body} shortcut methods for providing a Publisher as the body._@param publisher the publisher to stream to the response body_@param elementClass the class of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, Class<T> elementClass) {__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementClass, "'elementClass' must not be null")__		return bodyInserterFor(publisher, ResolvableType.forClass(elementClass))__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,p,note,also,that,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,each,offer,code,body,shortcut,methods,for,providing,a,publisher,as,the,body,param,publisher,the,publisher,to,stream,to,the,response,body,param,element,class,the,class,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,class,t,element,class,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,class,element,class,must,not,be,null,return,body,inserter,for,publisher,resolvable,type,for,class,element,class
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, Class<T> elementClass);1515178754;Return a {@code BodyInserter} that writes the given {@link Publisher}._<p>Note also that_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}_each offer {@code body} shortcut methods for providing a Publisher as the body._@param publisher the publisher to stream to the response body_@param elementClass the class of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, Class<T> elementClass) {__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementClass, "'elementClass' must not be null")__		return bodyInserterFor(publisher, ResolvableType.forClass(elementClass))__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,p,note,also,that,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,each,offer,code,body,shortcut,methods,for,providing,a,publisher,as,the,body,param,publisher,the,publisher,to,stream,to,the,response,body,param,element,class,the,class,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,class,t,element,class,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,class,element,class,must,not,be,null,return,body,inserter,for,publisher,resolvable,type,for,class,element,class
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, Class<T> elementClass);1515603291;Return a {@code BodyInserter} that writes the given {@link Publisher}._<p>Note also that_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}_each offer {@code body} shortcut methods for providing a Publisher as the body._@param publisher the publisher to stream to the response body_@param elementClass the class of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, Class<T> elementClass) {__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementClass, "'elementClass' must not be null")__		return bodyInserterFor(publisher, ResolvableType.forClass(elementClass))__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,p,note,also,that,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,each,offer,code,body,shortcut,methods,for,providing,a,publisher,as,the,body,param,publisher,the,publisher,to,stream,to,the,response,body,param,element,class,the,class,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,class,t,element,class,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,class,element,class,must,not,be,null,return,body,inserter,for,publisher,resolvable,type,for,class,element,class
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, Class<T> elementClass);1521231485;Return a {@code BodyInserter} that writes the given {@link Publisher}._<p>Note also that_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}_each offer {@code body} shortcut methods for providing a Publisher as the body._@param publisher the publisher to stream to the response body_@param elementClass the class of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, Class<T> elementClass) {__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementClass, "'elementClass' must not be null")__		return bodyInserterFor(publisher, ResolvableType.forClass(elementClass))__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,p,note,also,that,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,each,offer,code,body,shortcut,methods,for,providing,a,publisher,as,the,body,param,publisher,the,publisher,to,stream,to,the,response,body,param,element,class,the,class,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,class,t,element,class,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,class,element,class,must,not,be,null,return,body,inserter,for,publisher,resolvable,type,for,class,element,class
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, Class<T> elementClass);1522103912;Return a {@code BodyInserter} that writes the given {@link Publisher}._<p>Note also that_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}_each offer {@code body} shortcut methods for providing a Publisher as the body._@param publisher the publisher to stream to the response body_@param elementClass the class of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, Class<T> elementClass) {__		return bodyInserterFor(publisher, ResolvableType.forClass(elementClass))__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,p,note,also,that,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,each,offer,code,body,shortcut,methods,for,providing,a,publisher,as,the,body,param,publisher,the,publisher,to,stream,to,the,response,body,param,element,class,the,class,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,class,t,element,class,return,body,inserter,for,publisher,resolvable,type,for,class,element,class
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, Class<T> elementClass);1524865018;Return a {@code BodyInserter} that writes the given {@link Publisher}._<p>Note also that_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}_each offer {@code body} shortcut methods for providing a Publisher as the body._@param publisher the publisher to stream to the response body_@param elementClass the class of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, Class<T> elementClass) {__		return bodyInserterFor(publisher, ResolvableType.forClass(elementClass))__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,p,note,also,that,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,each,offer,code,body,shortcut,methods,for,providing,a,publisher,as,the,body,param,publisher,the,publisher,to,stream,to,the,response,body,param,element,class,the,class,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,class,t,element,class,return,body,inserter,for,publisher,resolvable,type,for,class,element,class
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, Class<T> elementClass);1526354196;Return a {@code BodyInserter} that writes the given {@link Publisher}._<p>Note also that_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}_each offer {@code body} shortcut methods for providing a Publisher as the body._@param publisher the publisher to stream to the response body_@param elementClass the class of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, Class<T> elementClass) {__		return bodyInserterFor(publisher, ResolvableType.forClass(elementClass))__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,p,note,also,that,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,each,offer,code,body,shortcut,methods,for,providing,a,publisher,as,the,body,param,publisher,the,publisher,to,stream,to,the,response,body,param,element,class,the,class,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,class,t,element,class,return,body,inserter,for,publisher,resolvable,type,for,class,element,class
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, Class<T> elementClass);1527269520;Inserter to write the given {@link Publisher}._<p>Alternatively, consider using the {@code body} shortcuts on_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}._@param publisher the publisher to write with_@param elementClass the type of elements in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the {@code Publisher} type_@return the inserter to write a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, Class<T> elementClass) {__		return (message, context) ->_				writeWithMessageWriters(message, context, publisher, ResolvableType.forClass(elementClass))__	};inserter,to,write,the,given,link,publisher,p,alternatively,consider,using,the,code,body,shortcuts,on,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,param,publisher,the,publisher,to,write,with,param,element,class,the,type,of,elements,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,code,publisher,type,return,the,inserter,to,write,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,class,t,element,class,return,message,context,write,with,message,writers,message,context,publisher,resolvable,type,for,class,element,class
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, Class<T> elementClass);1527341063;Inserter to write the given {@link Publisher}._<p>Alternatively, consider using the {@code body} shortcuts on_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}._@param publisher the publisher to write with_@param elementClass the type of elements in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the {@code Publisher} type_@return the inserter to write a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, Class<T> elementClass) {__		return (message, context) ->_				writeWithMessageWriters(message, context, publisher, ResolvableType.forClass(elementClass))__	};inserter,to,write,the,given,link,publisher,p,alternatively,consider,using,the,code,body,shortcuts,on,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,param,publisher,the,publisher,to,write,with,param,element,class,the,type,of,elements,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,code,publisher,type,return,the,inserter,to,write,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,class,t,element,class,return,message,context,write,with,message,writers,message,context,publisher,resolvable,type,for,class,element,class
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, Class<T> elementClass);1530174524;Inserter to write the given {@link Publisher}._<p>Alternatively, consider using the {@code body} shortcuts on_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}._@param publisher the publisher to write with_@param elementClass the type of elements in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the {@code Publisher} type_@return the inserter to write a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, Class<T> elementClass) {__		return (message, context) ->_				writeWithMessageWriters(message, context, publisher, ResolvableType.forClass(elementClass))__	};inserter,to,write,the,given,link,publisher,p,alternatively,consider,using,the,code,body,shortcuts,on,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,param,publisher,the,publisher,to,write,with,param,element,class,the,type,of,elements,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,code,publisher,type,return,the,inserter,to,write,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,class,t,element,class,return,message,context,write,with,message,writers,message,context,publisher,resolvable,type,for,class,element,class
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, Class<T> elementClass);1530793695;Inserter to write the given {@link Publisher}._<p>Alternatively, consider using the {@code body} shortcuts on_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}._@param publisher the publisher to write with_@param elementClass the type of elements in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the {@code Publisher} type_@return the inserter to write a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, Class<T> elementClass) {__		return (message, context) ->_				writeWithMessageWriters(message, context, publisher, ResolvableType.forClass(elementClass))__	};inserter,to,write,the,given,link,publisher,p,alternatively,consider,using,the,code,body,shortcuts,on,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,param,publisher,the,publisher,to,write,with,param,element,class,the,type,of,elements,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,code,publisher,type,return,the,inserter,to,write,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,class,t,element,class,return,message,context,write,with,message,writers,message,context,publisher,resolvable,type,for,class,element,class
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, Class<T> elementClass);1542037423;Inserter to write the given {@link Publisher}._<p>Alternatively, consider using the {@code body} shortcuts on_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}._@param publisher the publisher to write with_@param elementClass the type of elements in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the {@code Publisher} type_@return the inserter to write a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, Class<T> elementClass) {__		Assert.notNull(publisher, "Publisher must not be null")__		Assert.notNull(elementClass, "Element Class must not be null")__		return (message, context) ->_				writeWithMessageWriters(message, context, publisher, ResolvableType.forClass(elementClass))__	};inserter,to,write,the,given,link,publisher,p,alternatively,consider,using,the,code,body,shortcuts,on,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,param,publisher,the,publisher,to,write,with,param,element,class,the,type,of,elements,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,code,publisher,type,return,the,inserter,to,write,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,class,t,element,class,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,class,element,class,must,not,be,null,return,message,context,write,with,message,writers,message,context,publisher,resolvable,type,for,class,element,class
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, Class<T> elementClass);1542613849;Inserter to write the given {@link Publisher}._<p>Alternatively, consider using the {@code body} shortcuts on_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}._@param publisher the publisher to write with_@param elementClass the type of elements in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the {@code Publisher} type_@return the inserter to write a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, Class<T> elementClass) {__		Assert.notNull(publisher, "Publisher must not be null")__		Assert.notNull(elementClass, "Element Class must not be null")__		return (message, context) ->_				writeWithMessageWriters(message, context, publisher, ResolvableType.forClass(elementClass))__	};inserter,to,write,the,given,link,publisher,p,alternatively,consider,using,the,code,body,shortcuts,on,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,param,publisher,the,publisher,to,write,with,param,element,class,the,type,of,elements,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,code,publisher,type,return,the,inserter,to,write,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,class,t,element,class,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,class,element,class,must,not,be,null,return,message,context,write,with,message,writers,message,context,publisher,resolvable,type,for,class,element,class
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, Class<T> elementClass);1542907316;Inserter to write the given {@link Publisher}._<p>Alternatively, consider using the {@code body} shortcuts on_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}._@param publisher the publisher to write with_@param elementClass the type of elements in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the {@code Publisher} type_@return the inserter to write a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, Class<T> elementClass) {__		Assert.notNull(publisher, "Publisher must not be null")__		Assert.notNull(elementClass, "Element Class must not be null")__		return (message, context) ->_				writeWithMessageWriters(message, context, publisher, ResolvableType.forClass(elementClass))__	};inserter,to,write,the,given,link,publisher,p,alternatively,consider,using,the,code,body,shortcuts,on,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,param,publisher,the,publisher,to,write,with,param,element,class,the,type,of,elements,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,code,publisher,type,return,the,inserter,to,write,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,class,t,element,class,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,class,element,class,must,not,be,null,return,message,context,write,with,message,writers,message,context,publisher,resolvable,type,for,class,element,class
BodyInserters -> FormInserter -> FormInserter<T> with(String key, @Nullable T value)_;1509538672;Adds the specified key-value pair to the form._@param key the key to be added_@param value the value to be added_@return this inserter;FormInserter<T> with(String key, @Nullable T value)_;adds,the,specified,key,value,pair,to,the,form,param,key,the,key,to,be,added,param,value,the,value,to,be,added,return,this,inserter;form,inserter,t,with,string,key,nullable,t,value
BodyInserters -> FormInserter -> FormInserter<T> with(String key, @Nullable T value)_;1509980418;Adds the specified key-value pair to the form._@param key the key to be added_@param value the value to be added_@return this inserter;FormInserter<T> with(String key, @Nullable T value)_;adds,the,specified,key,value,pair,to,the,form,param,key,the,key,to,be,added,param,value,the,value,to,be,added,return,this,inserter;form,inserter,t,with,string,key,nullable,t,value
BodyInserters -> FormInserter -> FormInserter<T> with(String key, @Nullable T value)_;1510004038;Adds the specified key-value pair to the form._@param key the key to be added_@param value the value to be added_@return this inserter;FormInserter<T> with(String key, @Nullable T value)_;adds,the,specified,key,value,pair,to,the,form,param,key,the,key,to,be,added,param,value,the,value,to,be,added,return,this,inserter;form,inserter,t,with,string,key,nullable,t,value
BodyInserters -> FormInserter -> FormInserter<T> with(String key, @Nullable T value)_;1510933433;Adds the specified key-value pair to the form._@param key the key to be added_@param value the value to be added_@return this inserter;FormInserter<T> with(String key, @Nullable T value)_;adds,the,specified,key,value,pair,to,the,form,param,key,the,key,to,be,added,param,value,the,value,to,be,added,return,this,inserter;form,inserter,t,with,string,key,nullable,t,value
BodyInserters -> FormInserter -> FormInserter<T> with(String key, @Nullable T value)_;1513874461;Adds the specified key-value pair to the form._@param key the key to be added_@param value the value to be added_@return this inserter;FormInserter<T> with(String key, @Nullable T value)_;adds,the,specified,key,value,pair,to,the,form,param,key,the,key,to,be,added,param,value,the,value,to,be,added,return,this,inserter;form,inserter,t,with,string,key,nullable,t,value
BodyInserters -> FormInserter -> FormInserter<T> with(String key, @Nullable T value)_;1515178754;Adds the specified key-value pair to the form._@param key the key to be added_@param value the value to be added_@return this inserter;FormInserter<T> with(String key, @Nullable T value)_;adds,the,specified,key,value,pair,to,the,form,param,key,the,key,to,be,added,param,value,the,value,to,be,added,return,this,inserter;form,inserter,t,with,string,key,nullable,t,value
BodyInserters -> FormInserter -> FormInserter<T> with(String key, @Nullable T value)_;1515603291;Adds the specified key-value pair to the form._@param key the key to be added_@param value the value to be added_@return this inserter;FormInserter<T> with(String key, @Nullable T value)_;adds,the,specified,key,value,pair,to,the,form,param,key,the,key,to,be,added,param,value,the,value,to,be,added,return,this,inserter;form,inserter,t,with,string,key,nullable,t,value
BodyInserters -> FormInserter -> FormInserter<T> with(String key, @Nullable T value)_;1521231485;Adds the specified key-value pair to the form._@param key the key to be added_@param value the value to be added_@return this inserter for adding more parts;FormInserter<T> with(String key, @Nullable T value)_;adds,the,specified,key,value,pair,to,the,form,param,key,the,key,to,be,added,param,value,the,value,to,be,added,return,this,inserter,for,adding,more,parts;form,inserter,t,with,string,key,nullable,t,value
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(P publisher, 			Class<T> elementClass);1485986572;Return a {@code BodyInserter} that writes the given {@link Publisher}._@param publisher the publisher to stream to the response body_@param elementClass the class of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(P publisher,_			Class<T> elementClass) {__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementClass, "'elementClass' must not be null")__		return bodyInserterFor(publisher, ResolvableType.forClass(elementClass))__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,param,publisher,the,publisher,to,stream,to,the,response,body,param,element,class,the,class,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,class,t,element,class,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,class,element,class,must,not,be,null,return,body,inserter,for,publisher,resolvable,type,for,class,element,class
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(P publisher, 			Class<T> elementClass);1486657400;Return a {@code BodyInserter} that writes the given {@link Publisher}._@param publisher the publisher to stream to the response body_@param elementClass the class of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(P publisher,_			Class<T> elementClass) {__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementClass, "'elementClass' must not be null")__		return bodyInserterFor(publisher, ResolvableType.forClass(elementClass))__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,param,publisher,the,publisher,to,stream,to,the,response,body,param,element,class,the,class,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,class,t,element,class,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,class,element,class,must,not,be,null,return,body,inserter,for,publisher,resolvable,type,for,class,element,class
BodyInserters -> public static BodyInserter<MultiValueMap<String, String>, ClientHttpRequest> fromFormData(MultiValueMap<String, String> formData);1485986572;Return a {@code BodyInserter} that writes the given {@code MultiValueMap} as URL-encoded_form data._@param formData the form data to write to the output message_@return a {@code BodyInserter} that writes form data;public static BodyInserter<MultiValueMap<String, String>, ClientHttpRequest> fromFormData(MultiValueMap<String, String> formData) {_		Assert.notNull(formData, "'formData' must not be null")___		return (outputMessage, context) -> {_			HttpMessageWriter<MultiValueMap<String, String>> messageWriter =_					findMessageWriter(context, FORM_TYPE, MediaType.APPLICATION_FORM_URLENCODED)__			return messageWriter.write(Mono.just(formData), FORM_TYPE,_					MediaType.APPLICATION_FORM_URLENCODED, outputMessage, context.hints())__		}__	};return,a,code,body,inserter,that,writes,the,given,code,multi,value,map,as,url,encoded,form,data,param,form,data,the,form,data,to,write,to,the,output,message,return,a,code,body,inserter,that,writes,form,data;public,static,body,inserter,multi,value,map,string,string,client,http,request,from,form,data,multi,value,map,string,string,form,data,assert,not,null,form,data,form,data,must,not,be,null,return,output,message,context,http,message,writer,multi,value,map,string,string,message,writer,find,message,writer,context,media,type,return,message,writer,write,mono,just,form,data,media,type,output,message,context,hints
BodyInserters -> public static BodyInserter<MultiValueMap<String, String>, ClientHttpRequest> fromFormData(MultiValueMap<String, String> formData);1486657400;Return a {@code BodyInserter} that writes the given {@code MultiValueMap} as URL-encoded_form data._@param formData the form data to write to the output message_@return a {@code BodyInserter} that writes form data;public static BodyInserter<MultiValueMap<String, String>, ClientHttpRequest> fromFormData(MultiValueMap<String, String> formData) {_		Assert.notNull(formData, "'formData' must not be null")___		return (outputMessage, context) -> {_			HttpMessageWriter<MultiValueMap<String, String>> messageWriter =_					findMessageWriter(context, FORM_TYPE, MediaType.APPLICATION_FORM_URLENCODED)__			return messageWriter.write(Mono.just(formData), FORM_TYPE,_					MediaType.APPLICATION_FORM_URLENCODED, outputMessage, context.hints())__		}__	};return,a,code,body,inserter,that,writes,the,given,code,multi,value,map,as,url,encoded,form,data,param,form,data,the,form,data,to,write,to,the,output,message,return,a,code,body,inserter,that,writes,form,data;public,static,body,inserter,multi,value,map,string,string,client,http,request,from,form,data,multi,value,map,string,string,form,data,assert,not,null,form,data,form,data,must,not,be,null,return,output,message,context,http,message,writer,multi,value,map,string,string,message,writer,find,message,writer,context,media,type,return,message,writer,write,mono,just,form,data,media,type,output,message,context,hints
BodyInserters -> public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers( 			T publisher);1486720600;Return a {@code BodyInserter} that writes the given {@code Publisher<DataBuffer>} to the body._@param publisher the data buffer publisher to write_@param <T> the type of the publisher_@return a {@code BodyInserter} that writes directly to the body_@see ReactiveHttpOutputMessage#writeWith(Publisher);public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers(_			T publisher) {__		Assert.notNull(publisher, "'publisher' must not be null")__		return (outputMessage, context) -> outputMessage.writeWith(publisher)__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,data,buffer,to,the,body,param,publisher,the,data,buffer,publisher,to,write,param,t,the,type,of,the,publisher,return,a,code,body,inserter,that,writes,directly,to,the,body,see,reactive,http,output,message,write,with,publisher;public,static,t,extends,publisher,data,buffer,body,inserter,t,reactive,http,output,message,from,data,buffers,t,publisher,assert,not,null,publisher,publisher,must,not,be,null,return,output,message,context,output,message,write,with,publisher
BodyInserters -> public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers( 			T publisher);1487687241;Return a {@code BodyInserter} that writes the given {@code Publisher<DataBuffer>} to the body._@param publisher the data buffer publisher to write_@param <T> the type of the publisher_@return a {@code BodyInserter} that writes directly to the body_@see ReactiveHttpOutputMessage#writeWith(Publisher);public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers(_			T publisher) {__		Assert.notNull(publisher, "'publisher' must not be null")__		return (outputMessage, context) -> outputMessage.writeWith(publisher)__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,data,buffer,to,the,body,param,publisher,the,data,buffer,publisher,to,write,param,t,the,type,of,the,publisher,return,a,code,body,inserter,that,writes,directly,to,the,body,see,reactive,http,output,message,write,with,publisher;public,static,t,extends,publisher,data,buffer,body,inserter,t,reactive,http,output,message,from,data,buffers,t,publisher,assert,not,null,publisher,publisher,must,not,be,null,return,output,message,context,output,message,write,with,publisher
BodyInserters -> public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers( 			T publisher);1491385016;Return a {@code BodyInserter} that writes the given {@code Publisher<DataBuffer>} to the body._@param publisher the data buffer publisher to write_@param <T> the type of the publisher_@return a {@code BodyInserter} that writes directly to the body_@see ReactiveHttpOutputMessage#writeWith(Publisher);public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers(_			T publisher) {__		Assert.notNull(publisher, "'publisher' must not be null")__		return (outputMessage, context) -> outputMessage.writeWith(publisher)__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,data,buffer,to,the,body,param,publisher,the,data,buffer,publisher,to,write,param,t,the,type,of,the,publisher,return,a,code,body,inserter,that,writes,directly,to,the,body,see,reactive,http,output,message,write,with,publisher;public,static,t,extends,publisher,data,buffer,body,inserter,t,reactive,http,output,message,from,data,buffers,t,publisher,assert,not,null,publisher,publisher,must,not,be,null,return,output,message,context,output,message,write,with,publisher
BodyInserters -> public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers( 			T publisher);1493390543;Return a {@code BodyInserter} that writes the given {@code Publisher<DataBuffer>} to the body._@param publisher the data buffer publisher to write_@param <T> the type of the publisher_@return a {@code BodyInserter} that writes directly to the body_@see ReactiveHttpOutputMessage#writeWith(Publisher);public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers(_			T publisher) {__		Assert.notNull(publisher, "'publisher' must not be null")__		return (outputMessage, context) -> outputMessage.writeWith(publisher)__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,data,buffer,to,the,body,param,publisher,the,data,buffer,publisher,to,write,param,t,the,type,of,the,publisher,return,a,code,body,inserter,that,writes,directly,to,the,body,see,reactive,http,output,message,write,with,publisher;public,static,t,extends,publisher,data,buffer,body,inserter,t,reactive,http,output,message,from,data,buffers,t,publisher,assert,not,null,publisher,publisher,must,not,be,null,return,output,message,context,output,message,write,with,publisher
BodyInserters -> public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers( 			T publisher);1493676008;Return a {@code BodyInserter} that writes the given {@code Publisher<DataBuffer>} to the body._@param publisher the data buffer publisher to write_@param <T> the type of the publisher_@return a {@code BodyInserter} that writes directly to the body_@see ReactiveHttpOutputMessage#writeWith(Publisher);public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers(_			T publisher) {__		Assert.notNull(publisher, "'publisher' must not be null")__		return (outputMessage, context) -> outputMessage.writeWith(publisher)__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,data,buffer,to,the,body,param,publisher,the,data,buffer,publisher,to,write,param,t,the,type,of,the,publisher,return,a,code,body,inserter,that,writes,directly,to,the,body,see,reactive,http,output,message,write,with,publisher;public,static,t,extends,publisher,data,buffer,body,inserter,t,reactive,http,output,message,from,data,buffers,t,publisher,assert,not,null,publisher,publisher,must,not,be,null,return,output,message,context,output,message,write,with,publisher
BodyInserters -> public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers( 			T publisher);1495626483;Return a {@code BodyInserter} that writes the given {@code Publisher<DataBuffer>} to the body._@param publisher the data buffer publisher to write_@param <T> the type of the publisher_@return a {@code BodyInserter} that writes directly to the body_@see ReactiveHttpOutputMessage#writeWith(Publisher);public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers(_			T publisher) {__		Assert.notNull(publisher, "'publisher' must not be null")__		return (outputMessage, context) -> outputMessage.writeWith(publisher)__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,data,buffer,to,the,body,param,publisher,the,data,buffer,publisher,to,write,param,t,the,type,of,the,publisher,return,a,code,body,inserter,that,writes,directly,to,the,body,see,reactive,http,output,message,write,with,publisher;public,static,t,extends,publisher,data,buffer,body,inserter,t,reactive,http,output,message,from,data,buffers,t,publisher,assert,not,null,publisher,publisher,must,not,be,null,return,output,message,context,output,message,write,with,publisher
BodyInserters -> public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers( 			T publisher);1496837955;Return a {@code BodyInserter} that writes the given {@code Publisher<DataBuffer>} to the body._@param publisher the data buffer publisher to write_@param <T> the type of the publisher_@return a {@code BodyInserter} that writes directly to the body_@see ReactiveHttpOutputMessage#writeWith(Publisher);public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers(_			T publisher) {__		Assert.notNull(publisher, "'publisher' must not be null")__		return (outputMessage, context) -> outputMessage.writeWith(publisher)__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,data,buffer,to,the,body,param,publisher,the,data,buffer,publisher,to,write,param,t,the,type,of,the,publisher,return,a,code,body,inserter,that,writes,directly,to,the,body,see,reactive,http,output,message,write,with,publisher;public,static,t,extends,publisher,data,buffer,body,inserter,t,reactive,http,output,message,from,data,buffers,t,publisher,assert,not,null,publisher,publisher,must,not,be,null,return,output,message,context,output,message,write,with,publisher
BodyInserters -> public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers( 			T publisher);1497007755;Return a {@code BodyInserter} that writes the given {@code Publisher<DataBuffer>} to the body._@param publisher the data buffer publisher to write_@param <T> the type of the publisher_@return a {@code BodyInserter} that writes directly to the body_@see ReactiveHttpOutputMessage#writeWith(Publisher);public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers(_			T publisher) {__		Assert.notNull(publisher, "'publisher' must not be null")__		return (outputMessage, context) -> outputMessage.writeWith(publisher)__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,data,buffer,to,the,body,param,publisher,the,data,buffer,publisher,to,write,param,t,the,type,of,the,publisher,return,a,code,body,inserter,that,writes,directly,to,the,body,see,reactive,http,output,message,write,with,publisher;public,static,t,extends,publisher,data,buffer,body,inserter,t,reactive,http,output,message,from,data,buffers,t,publisher,assert,not,null,publisher,publisher,must,not,be,null,return,output,message,context,output,message,write,with,publisher
BodyInserters -> public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers( 			T publisher);1501238239;Return a {@code BodyInserter} that writes the given {@code Publisher<DataBuffer>} to the body._@param publisher the data buffer publisher to write_@param <T> the type of the publisher_@return a {@code BodyInserter} that writes directly to the body_@see ReactiveHttpOutputMessage#writeWith(Publisher);public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers(_			T publisher) {__		Assert.notNull(publisher, "'publisher' must not be null")__		return (outputMessage, context) -> outputMessage.writeWith(publisher)__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,data,buffer,to,the,body,param,publisher,the,data,buffer,publisher,to,write,param,t,the,type,of,the,publisher,return,a,code,body,inserter,that,writes,directly,to,the,body,see,reactive,http,output,message,write,with,publisher;public,static,t,extends,publisher,data,buffer,body,inserter,t,reactive,http,output,message,from,data,buffers,t,publisher,assert,not,null,publisher,publisher,must,not,be,null,return,output,message,context,output,message,write,with,publisher
BodyInserters -> public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers( 			T publisher);1509456069;Return a {@code BodyInserter} that writes the given {@code Publisher<DataBuffer>} to the body._@param publisher the data buffer publisher to write_@param <T> the type of the publisher_@return a {@code BodyInserter} that writes directly to the body_@see ReactiveHttpOutputMessage#writeWith(Publisher);public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers(_			T publisher) {__		Assert.notNull(publisher, "'publisher' must not be null")__		return (outputMessage, context) -> outputMessage.writeWith(publisher)__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,data,buffer,to,the,body,param,publisher,the,data,buffer,publisher,to,write,param,t,the,type,of,the,publisher,return,a,code,body,inserter,that,writes,directly,to,the,body,see,reactive,http,output,message,write,with,publisher;public,static,t,extends,publisher,data,buffer,body,inserter,t,reactive,http,output,message,from,data,buffers,t,publisher,assert,not,null,publisher,publisher,must,not,be,null,return,output,message,context,output,message,write,with,publisher
BodyInserters -> public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers( 			T publisher);1509538672;Return a {@code BodyInserter} that writes the given {@code Publisher<DataBuffer>} to the body._@param publisher the data buffer publisher to write_@param <T> the type of the publisher_@return a {@code BodyInserter} that writes directly to the body_@see ReactiveHttpOutputMessage#writeWith(Publisher);public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers(_			T publisher) {__		Assert.notNull(publisher, "'publisher' must not be null")__		return (outputMessage, context) -> outputMessage.writeWith(publisher)__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,data,buffer,to,the,body,param,publisher,the,data,buffer,publisher,to,write,param,t,the,type,of,the,publisher,return,a,code,body,inserter,that,writes,directly,to,the,body,see,reactive,http,output,message,write,with,publisher;public,static,t,extends,publisher,data,buffer,body,inserter,t,reactive,http,output,message,from,data,buffers,t,publisher,assert,not,null,publisher,publisher,must,not,be,null,return,output,message,context,output,message,write,with,publisher
BodyInserters -> public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers( 			T publisher);1509980418;Return a {@code BodyInserter} that writes the given {@code Publisher<DataBuffer>} to the body._@param publisher the data buffer publisher to write_@param <T> the type of the publisher_@return a {@code BodyInserter} that writes directly to the body_@see ReactiveHttpOutputMessage#writeWith(Publisher);public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers(_			T publisher) {__		Assert.notNull(publisher, "'publisher' must not be null")__		return (outputMessage, context) -> outputMessage.writeWith(publisher)__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,data,buffer,to,the,body,param,publisher,the,data,buffer,publisher,to,write,param,t,the,type,of,the,publisher,return,a,code,body,inserter,that,writes,directly,to,the,body,see,reactive,http,output,message,write,with,publisher;public,static,t,extends,publisher,data,buffer,body,inserter,t,reactive,http,output,message,from,data,buffers,t,publisher,assert,not,null,publisher,publisher,must,not,be,null,return,output,message,context,output,message,write,with,publisher
BodyInserters -> public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers( 			T publisher);1510004038;Return a {@code BodyInserter} that writes the given {@code Publisher<DataBuffer>} to the body._@param publisher the data buffer publisher to write_@param <T> the type of the publisher_@return a {@code BodyInserter} that writes directly to the body_@see ReactiveHttpOutputMessage#writeWith(Publisher);public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers(_			T publisher) {__		Assert.notNull(publisher, "'publisher' must not be null")__		return (outputMessage, context) -> outputMessage.writeWith(publisher)__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,data,buffer,to,the,body,param,publisher,the,data,buffer,publisher,to,write,param,t,the,type,of,the,publisher,return,a,code,body,inserter,that,writes,directly,to,the,body,see,reactive,http,output,message,write,with,publisher;public,static,t,extends,publisher,data,buffer,body,inserter,t,reactive,http,output,message,from,data,buffers,t,publisher,assert,not,null,publisher,publisher,must,not,be,null,return,output,message,context,output,message,write,with,publisher
BodyInserters -> public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers( 			T publisher);1510933433;Return a {@code BodyInserter} that writes the given_{@code Publisher<DataBuffer>} to the body._@param publisher the data buffer publisher to write_@param <T> the type of the publisher_@return a {@code BodyInserter} that writes directly to the body_@see ReactiveHttpOutputMessage#writeWith(Publisher);public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers(_			T publisher) {__		Assert.notNull(publisher, "'publisher' must not be null")__		return (outputMessage, context) -> outputMessage.writeWith(publisher)__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,data,buffer,to,the,body,param,publisher,the,data,buffer,publisher,to,write,param,t,the,type,of,the,publisher,return,a,code,body,inserter,that,writes,directly,to,the,body,see,reactive,http,output,message,write,with,publisher;public,static,t,extends,publisher,data,buffer,body,inserter,t,reactive,http,output,message,from,data,buffers,t,publisher,assert,not,null,publisher,publisher,must,not,be,null,return,output,message,context,output,message,write,with,publisher
BodyInserters -> public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers( 			T publisher);1513874461;Return a {@code BodyInserter} that writes the given_{@code Publisher<DataBuffer>} to the body._@param publisher the data buffer publisher to write_@param <T> the type of the publisher_@return a {@code BodyInserter} that writes directly to the body_@see ReactiveHttpOutputMessage#writeWith(Publisher);public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers(_			T publisher) {__		Assert.notNull(publisher, "'publisher' must not be null")__		return (outputMessage, context) -> outputMessage.writeWith(publisher)__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,data,buffer,to,the,body,param,publisher,the,data,buffer,publisher,to,write,param,t,the,type,of,the,publisher,return,a,code,body,inserter,that,writes,directly,to,the,body,see,reactive,http,output,message,write,with,publisher;public,static,t,extends,publisher,data,buffer,body,inserter,t,reactive,http,output,message,from,data,buffers,t,publisher,assert,not,null,publisher,publisher,must,not,be,null,return,output,message,context,output,message,write,with,publisher
BodyInserters -> public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers( 			T publisher);1515178754;Return a {@code BodyInserter} that writes the given_{@code Publisher<DataBuffer>} to the body._@param publisher the data buffer publisher to write_@param <T> the type of the publisher_@return a {@code BodyInserter} that writes directly to the body_@see ReactiveHttpOutputMessage#writeWith(Publisher);public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers(_			T publisher) {__		Assert.notNull(publisher, "'publisher' must not be null")__		return (outputMessage, context) -> outputMessage.writeWith(publisher)__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,data,buffer,to,the,body,param,publisher,the,data,buffer,publisher,to,write,param,t,the,type,of,the,publisher,return,a,code,body,inserter,that,writes,directly,to,the,body,see,reactive,http,output,message,write,with,publisher;public,static,t,extends,publisher,data,buffer,body,inserter,t,reactive,http,output,message,from,data,buffers,t,publisher,assert,not,null,publisher,publisher,must,not,be,null,return,output,message,context,output,message,write,with,publisher
BodyInserters -> public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers( 			T publisher);1515603291;Return a {@code BodyInserter} that writes the given_{@code Publisher<DataBuffer>} to the body._@param publisher the data buffer publisher to write_@param <T> the type of the publisher_@return a {@code BodyInserter} that writes directly to the body_@see ReactiveHttpOutputMessage#writeWith(Publisher);public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers(_			T publisher) {__		Assert.notNull(publisher, "'publisher' must not be null")__		return (outputMessage, context) -> outputMessage.writeWith(publisher)__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,data,buffer,to,the,body,param,publisher,the,data,buffer,publisher,to,write,param,t,the,type,of,the,publisher,return,a,code,body,inserter,that,writes,directly,to,the,body,see,reactive,http,output,message,write,with,publisher;public,static,t,extends,publisher,data,buffer,body,inserter,t,reactive,http,output,message,from,data,buffers,t,publisher,assert,not,null,publisher,publisher,must,not,be,null,return,output,message,context,output,message,write,with,publisher
BodyInserters -> public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers( 			T publisher);1521231485;Return a {@code BodyInserter} that writes the given_{@code Publisher<DataBuffer>} to the body._@param publisher the data buffer publisher to write_@param <T> the type of the publisher_@return a {@code BodyInserter} that writes directly to the body_@see ReactiveHttpOutputMessage#writeWith(Publisher);public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers(_			T publisher) {__		Assert.notNull(publisher, "'publisher' must not be null")__		return (outputMessage, context) -> outputMessage.writeWith(publisher)__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,data,buffer,to,the,body,param,publisher,the,data,buffer,publisher,to,write,param,t,the,type,of,the,publisher,return,a,code,body,inserter,that,writes,directly,to,the,body,see,reactive,http,output,message,write,with,publisher;public,static,t,extends,publisher,data,buffer,body,inserter,t,reactive,http,output,message,from,data,buffers,t,publisher,assert,not,null,publisher,publisher,must,not,be,null,return,output,message,context,output,message,write,with,publisher
BodyInserters -> public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers( 			T publisher);1522103912;Return a {@code BodyInserter} that writes the given_{@code Publisher<DataBuffer>} to the body._@param publisher the data buffer publisher to write_@param <T> the type of the publisher_@return a {@code BodyInserter} that writes directly to the body_@see ReactiveHttpOutputMessage#writeWith(Publisher);public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers(_			T publisher) {__		Assert.notNull(publisher, "'publisher' must not be null")__		return (outputMessage, context) -> outputMessage.writeWith(publisher)__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,data,buffer,to,the,body,param,publisher,the,data,buffer,publisher,to,write,param,t,the,type,of,the,publisher,return,a,code,body,inserter,that,writes,directly,to,the,body,see,reactive,http,output,message,write,with,publisher;public,static,t,extends,publisher,data,buffer,body,inserter,t,reactive,http,output,message,from,data,buffers,t,publisher,assert,not,null,publisher,publisher,must,not,be,null,return,output,message,context,output,message,write,with,publisher
BodyInserters -> public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers( 			T publisher);1524865018;Return a {@code BodyInserter} that writes the given_{@code Publisher<DataBuffer>} to the body._@param publisher the data buffer publisher to write_@param <T> the type of the publisher_@return a {@code BodyInserter} that writes directly to the body_@see ReactiveHttpOutputMessage#writeWith(Publisher);public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers(_			T publisher) {__		Assert.notNull(publisher, "Publisher must not be null")__		return (outputMessage, context) -> outputMessage.writeWith(publisher)__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,data,buffer,to,the,body,param,publisher,the,data,buffer,publisher,to,write,param,t,the,type,of,the,publisher,return,a,code,body,inserter,that,writes,directly,to,the,body,see,reactive,http,output,message,write,with,publisher;public,static,t,extends,publisher,data,buffer,body,inserter,t,reactive,http,output,message,from,data,buffers,t,publisher,assert,not,null,publisher,publisher,must,not,be,null,return,output,message,context,output,message,write,with,publisher
BodyInserters -> public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers( 			T publisher);1526354196;Return a {@code BodyInserter} that writes the given_{@code Publisher<DataBuffer>} to the body._@param publisher the data buffer publisher to write_@param <T> the type of the publisher_@return a {@code BodyInserter} that writes directly to the body_@see ReactiveHttpOutputMessage#writeWith(Publisher);public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers(_			T publisher) {__		Assert.notNull(publisher, "Publisher must not be null")__		return (outputMessage, context) -> outputMessage.writeWith(publisher)__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,data,buffer,to,the,body,param,publisher,the,data,buffer,publisher,to,write,param,t,the,type,of,the,publisher,return,a,code,body,inserter,that,writes,directly,to,the,body,see,reactive,http,output,message,write,with,publisher;public,static,t,extends,publisher,data,buffer,body,inserter,t,reactive,http,output,message,from,data,buffers,t,publisher,assert,not,null,publisher,publisher,must,not,be,null,return,output,message,context,output,message,write,with,publisher
BodyInserters -> public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers( 			T publisher);1527269520;Inserter to write the given_{@code Publisher<DataBuffer>} to the body._@param publisher the data buffer publisher to write_@param <T> the type of the publisher_@return the inserter to write directly to the body_@see ReactiveHttpOutputMessage#writeWith(Publisher);public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers(_			T publisher) {__		Assert.notNull(publisher, "Publisher must not be null")__		return (outputMessage, context) -> outputMessage.writeWith(publisher)__	};inserter,to,write,the,given,code,publisher,data,buffer,to,the,body,param,publisher,the,data,buffer,publisher,to,write,param,t,the,type,of,the,publisher,return,the,inserter,to,write,directly,to,the,body,see,reactive,http,output,message,write,with,publisher;public,static,t,extends,publisher,data,buffer,body,inserter,t,reactive,http,output,message,from,data,buffers,t,publisher,assert,not,null,publisher,publisher,must,not,be,null,return,output,message,context,output,message,write,with,publisher
BodyInserters -> public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers( 			T publisher);1527341063;Inserter to write the given_{@code Publisher<DataBuffer>} to the body._@param publisher the data buffer publisher to write_@param <T> the type of the publisher_@return the inserter to write directly to the body_@see ReactiveHttpOutputMessage#writeWith(Publisher);public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers(_			T publisher) {__		Assert.notNull(publisher, "Publisher must not be null")__		return (outputMessage, context) -> outputMessage.writeWith(publisher)__	};inserter,to,write,the,given,code,publisher,data,buffer,to,the,body,param,publisher,the,data,buffer,publisher,to,write,param,t,the,type,of,the,publisher,return,the,inserter,to,write,directly,to,the,body,see,reactive,http,output,message,write,with,publisher;public,static,t,extends,publisher,data,buffer,body,inserter,t,reactive,http,output,message,from,data,buffers,t,publisher,assert,not,null,publisher,publisher,must,not,be,null,return,output,message,context,output,message,write,with,publisher
BodyInserters -> public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers( 			T publisher);1530174524;Inserter to write the given_{@code Publisher<DataBuffer>} to the body._@param publisher the data buffer publisher to write_@param <T> the type of the publisher_@return the inserter to write directly to the body_@see ReactiveHttpOutputMessage#writeWith(Publisher);public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers(_			T publisher) {__		Assert.notNull(publisher, "Publisher must not be null")__		return (outputMessage, context) -> outputMessage.writeWith(publisher)__	};inserter,to,write,the,given,code,publisher,data,buffer,to,the,body,param,publisher,the,data,buffer,publisher,to,write,param,t,the,type,of,the,publisher,return,the,inserter,to,write,directly,to,the,body,see,reactive,http,output,message,write,with,publisher;public,static,t,extends,publisher,data,buffer,body,inserter,t,reactive,http,output,message,from,data,buffers,t,publisher,assert,not,null,publisher,publisher,must,not,be,null,return,output,message,context,output,message,write,with,publisher
BodyInserters -> public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers( 			T publisher);1530793695;Inserter to write the given_{@code Publisher<DataBuffer>} to the body._@param publisher the data buffer publisher to write_@param <T> the type of the publisher_@return the inserter to write directly to the body_@see ReactiveHttpOutputMessage#writeWith(Publisher);public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers(_			T publisher) {__		Assert.notNull(publisher, "Publisher must not be null")__		return (outputMessage, context) -> outputMessage.writeWith(publisher)__	};inserter,to,write,the,given,code,publisher,data,buffer,to,the,body,param,publisher,the,data,buffer,publisher,to,write,param,t,the,type,of,the,publisher,return,the,inserter,to,write,directly,to,the,body,see,reactive,http,output,message,write,with,publisher;public,static,t,extends,publisher,data,buffer,body,inserter,t,reactive,http,output,message,from,data,buffers,t,publisher,assert,not,null,publisher,publisher,must,not,be,null,return,output,message,context,output,message,write,with,publisher
BodyInserters -> public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers( 			T publisher);1542037423;Inserter to write the given_{@code Publisher<DataBuffer>} to the body._@param publisher the data buffer publisher to write_@param <T> the type of the publisher_@return the inserter to write directly to the body_@see ReactiveHttpOutputMessage#writeWith(Publisher);public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers(_			T publisher) {__		Assert.notNull(publisher, "Publisher must not be null")__		return (outputMessage, context) -> outputMessage.writeWith(publisher)__	};inserter,to,write,the,given,code,publisher,data,buffer,to,the,body,param,publisher,the,data,buffer,publisher,to,write,param,t,the,type,of,the,publisher,return,the,inserter,to,write,directly,to,the,body,see,reactive,http,output,message,write,with,publisher;public,static,t,extends,publisher,data,buffer,body,inserter,t,reactive,http,output,message,from,data,buffers,t,publisher,assert,not,null,publisher,publisher,must,not,be,null,return,output,message,context,output,message,write,with,publisher
BodyInserters -> public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers( 			T publisher);1542613849;Inserter to write the given_{@code Publisher<DataBuffer>} to the body._@param publisher the data buffer publisher to write_@param <T> the type of the publisher_@return the inserter to write directly to the body_@see ReactiveHttpOutputMessage#writeWith(Publisher);public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers(_			T publisher) {__		Assert.notNull(publisher, "Publisher must not be null")__		return (outputMessage, context) -> outputMessage.writeWith(publisher)__	};inserter,to,write,the,given,code,publisher,data,buffer,to,the,body,param,publisher,the,data,buffer,publisher,to,write,param,t,the,type,of,the,publisher,return,the,inserter,to,write,directly,to,the,body,see,reactive,http,output,message,write,with,publisher;public,static,t,extends,publisher,data,buffer,body,inserter,t,reactive,http,output,message,from,data,buffers,t,publisher,assert,not,null,publisher,publisher,must,not,be,null,return,output,message,context,output,message,write,with,publisher
BodyInserters -> public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers( 			T publisher);1542907316;Inserter to write the given {@code Publisher<DataBuffer>} to the body._@param publisher the data buffer publisher to write_@param <T> the type of the publisher_@return the inserter to write directly to the body_@see ReactiveHttpOutputMessage#writeWith(Publisher);public static <T extends Publisher<DataBuffer>> BodyInserter<T, ReactiveHttpOutputMessage> fromDataBuffers(_			T publisher) {__		Assert.notNull(publisher, "Publisher must not be null")__		return (outputMessage, context) -> outputMessage.writeWith(publisher)__	};inserter,to,write,the,given,code,publisher,data,buffer,to,the,body,param,publisher,the,data,buffer,publisher,to,write,param,t,the,type,of,the,publisher,return,the,inserter,to,write,directly,to,the,body,see,reactive,http,output,message,write,with,publisher;public,static,t,extends,publisher,data,buffer,body,inserter,t,reactive,http,output,message,from,data,buffers,t,publisher,assert,not,null,publisher,publisher,must,not,be,null,return,output,message,context,output,message,write,with,publisher
BodyInserters -> public static BodyInserter<MultiValueMap<String, String>, ClientHttpRequest> fromFormData( 			MultiValueMap<String, String> formData);1486720600;Return a {@code BodyInserter} that writes the given {@code MultiValueMap} as URL-encoded_form data._@param formData the form data to write to the output message_@return a {@code BodyInserter} that writes form data;public static BodyInserter<MultiValueMap<String, String>, ClientHttpRequest> fromFormData(_			MultiValueMap<String, String> formData) {__		Assert.notNull(formData, "'formData' must not be null")__		return (outputMessage, context) -> {_			HttpMessageWriter<MultiValueMap<String, String>> messageWriter =_					findMessageWriter(context, FORM_TYPE, MediaType.APPLICATION_FORM_URLENCODED)__			return messageWriter.write(Mono.just(formData), FORM_TYPE,_					MediaType.APPLICATION_FORM_URLENCODED, outputMessage, context.hints())__		}__	};return,a,code,body,inserter,that,writes,the,given,code,multi,value,map,as,url,encoded,form,data,param,form,data,the,form,data,to,write,to,the,output,message,return,a,code,body,inserter,that,writes,form,data;public,static,body,inserter,multi,value,map,string,string,client,http,request,from,form,data,multi,value,map,string,string,form,data,assert,not,null,form,data,form,data,must,not,be,null,return,output,message,context,http,message,writer,multi,value,map,string,string,message,writer,find,message,writer,context,media,type,return,message,writer,write,mono,just,form,data,media,type,output,message,context,hints
BodyInserters -> public static BodyInserter<MultiValueMap<String, String>, ClientHttpRequest> fromFormData( 			MultiValueMap<String, String> formData);1487687241;Return a {@code BodyInserter} that writes the given {@code MultiValueMap} as URL-encoded_form data._@param formData the form data to write to the output message_@return a {@code BodyInserter} that writes form data;public static BodyInserter<MultiValueMap<String, String>, ClientHttpRequest> fromFormData(_			MultiValueMap<String, String> formData) {__		Assert.notNull(formData, "'formData' must not be null")__		return (outputMessage, context) -> {_			HttpMessageWriter<MultiValueMap<String, String>> messageWriter =_					findMessageWriter(context, FORM_TYPE, MediaType.APPLICATION_FORM_URLENCODED)__			return messageWriter.write(Mono.just(formData), FORM_TYPE,_					MediaType.APPLICATION_FORM_URLENCODED, outputMessage, context.hints())__		}__	};return,a,code,body,inserter,that,writes,the,given,code,multi,value,map,as,url,encoded,form,data,param,form,data,the,form,data,to,write,to,the,output,message,return,a,code,body,inserter,that,writes,form,data;public,static,body,inserter,multi,value,map,string,string,client,http,request,from,form,data,multi,value,map,string,string,form,data,assert,not,null,form,data,form,data,must,not,be,null,return,output,message,context,http,message,writer,multi,value,map,string,string,message,writer,find,message,writer,context,media,type,return,message,writer,write,mono,just,form,data,media,type,output,message,context,hints
BodyInserters -> public static BodyInserter<MultiValueMap<String, String>, ClientHttpRequest> fromFormData( 			MultiValueMap<String, String> formData);1491385016;Return a {@code BodyInserter} that writes the given {@code MultiValueMap} as URL-encoded_form data._@param formData the form data to write to the output message_@return a {@code BodyInserter} that writes form data;public static BodyInserter<MultiValueMap<String, String>, ClientHttpRequest> fromFormData(_			MultiValueMap<String, String> formData) {__		Assert.notNull(formData, "'formData' must not be null")__		return (outputMessage, context) -> {_			HttpMessageWriter<MultiValueMap<String, String>> messageWriter =_					findMessageWriter(context, FORM_TYPE, MediaType.APPLICATION_FORM_URLENCODED)__			return messageWriter.write(Mono.just(formData), FORM_TYPE,_					MediaType.APPLICATION_FORM_URLENCODED, outputMessage, context.hints())__		}__	};return,a,code,body,inserter,that,writes,the,given,code,multi,value,map,as,url,encoded,form,data,param,form,data,the,form,data,to,write,to,the,output,message,return,a,code,body,inserter,that,writes,form,data;public,static,body,inserter,multi,value,map,string,string,client,http,request,from,form,data,multi,value,map,string,string,form,data,assert,not,null,form,data,form,data,must,not,be,null,return,output,message,context,http,message,writer,multi,value,map,string,string,message,writer,find,message,writer,context,media,type,return,message,writer,write,mono,just,form,data,media,type,output,message,context,hints
BodyInserters -> public static BodyInserter<MultiValueMap<String, String>, ClientHttpRequest> fromFormData( 			MultiValueMap<String, String> formData);1493390543;Return a {@code BodyInserter} that writes the given {@code MultiValueMap} as URL-encoded_form data._@param formData the form data to write to the output message_@return a {@code BodyInserter} that writes form data;public static BodyInserter<MultiValueMap<String, String>, ClientHttpRequest> fromFormData(_			MultiValueMap<String, String> formData) {__		Assert.notNull(formData, "'formData' must not be null")__		return (outputMessage, context) -> {_			HttpMessageWriter<MultiValueMap<String, String>> messageWriter =_					findMessageWriter(context, FORM_TYPE, MediaType.APPLICATION_FORM_URLENCODED)__			return messageWriter.write(Mono.just(formData), FORM_TYPE,_					MediaType.APPLICATION_FORM_URLENCODED, outputMessage, context.hints())__		}__	};return,a,code,body,inserter,that,writes,the,given,code,multi,value,map,as,url,encoded,form,data,param,form,data,the,form,data,to,write,to,the,output,message,return,a,code,body,inserter,that,writes,form,data;public,static,body,inserter,multi,value,map,string,string,client,http,request,from,form,data,multi,value,map,string,string,form,data,assert,not,null,form,data,form,data,must,not,be,null,return,output,message,context,http,message,writer,multi,value,map,string,string,message,writer,find,message,writer,context,media,type,return,message,writer,write,mono,just,form,data,media,type,output,message,context,hints
BodyInserters -> public static BodyInserter<MultiValueMap<String, String>, ClientHttpRequest> fromFormData( 			MultiValueMap<String, String> formData);1493676008;Return a {@code BodyInserter} that writes the given {@code MultiValueMap} as URL-encoded_form data._@param formData the form data to write to the output message_@return a {@code BodyInserter} that writes form data;public static BodyInserter<MultiValueMap<String, String>, ClientHttpRequest> fromFormData(_			MultiValueMap<String, String> formData) {__		Assert.notNull(formData, "'formData' must not be null")__		return (outputMessage, context) -> {_			HttpMessageWriter<MultiValueMap<String, String>> messageWriter =_					findMessageWriter(context, FORM_TYPE, MediaType.APPLICATION_FORM_URLENCODED)__			return messageWriter.write(Mono.just(formData), FORM_TYPE,_					MediaType.APPLICATION_FORM_URLENCODED, outputMessage, context.hints())__		}__	};return,a,code,body,inserter,that,writes,the,given,code,multi,value,map,as,url,encoded,form,data,param,form,data,the,form,data,to,write,to,the,output,message,return,a,code,body,inserter,that,writes,form,data;public,static,body,inserter,multi,value,map,string,string,client,http,request,from,form,data,multi,value,map,string,string,form,data,assert,not,null,form,data,form,data,must,not,be,null,return,output,message,context,http,message,writer,multi,value,map,string,string,message,writer,find,message,writer,context,media,type,return,message,writer,write,mono,just,form,data,media,type,output,message,context,hints
BodyInserters -> public static BodyInserter<MultiValueMap<String, String>, ClientHttpRequest> fromFormData( 			MultiValueMap<String, String> formData);1495626483;Return a {@code BodyInserter} that writes the given {@code MultiValueMap} as URL-encoded_form data._@param formData the form data to write to the output message_@return a {@code BodyInserter} that writes form data;public static BodyInserter<MultiValueMap<String, String>, ClientHttpRequest> fromFormData(_			MultiValueMap<String, String> formData) {__		Assert.notNull(formData, "'formData' must not be null")__		return (outputMessage, context) -> {_			HttpMessageWriter<MultiValueMap<String, String>> messageWriter =_					findMessageWriter(context, FORM_TYPE, MediaType.APPLICATION_FORM_URLENCODED)__			return messageWriter.write(Mono.just(formData), FORM_TYPE,_					MediaType.APPLICATION_FORM_URLENCODED, outputMessage, context.hints())__		}__	};return,a,code,body,inserter,that,writes,the,given,code,multi,value,map,as,url,encoded,form,data,param,form,data,the,form,data,to,write,to,the,output,message,return,a,code,body,inserter,that,writes,form,data;public,static,body,inserter,multi,value,map,string,string,client,http,request,from,form,data,multi,value,map,string,string,form,data,assert,not,null,form,data,form,data,must,not,be,null,return,output,message,context,http,message,writer,multi,value,map,string,string,message,writer,find,message,writer,context,media,type,return,message,writer,write,mono,just,form,data,media,type,output,message,context,hints
BodyInserters -> public static BodyInserter<MultiValueMap<String, String>, ClientHttpRequest> fromFormData( 			MultiValueMap<String, String> formData);1496837955;Return a {@code BodyInserter} that writes the given {@code MultiValueMap} as URL-encoded_form data._@param formData the form data to write to the output message_@return a {@code BodyInserter} that writes form data;public static BodyInserter<MultiValueMap<String, String>, ClientHttpRequest> fromFormData(_			MultiValueMap<String, String> formData) {__		Assert.notNull(formData, "'formData' must not be null")__		return (outputMessage, context) -> {_			HttpMessageWriter<MultiValueMap<String, String>> messageWriter =_					findMessageWriter(context, FORM_TYPE, MediaType.APPLICATION_FORM_URLENCODED)__			return messageWriter.write(Mono.just(formData), FORM_TYPE,_					MediaType.APPLICATION_FORM_URLENCODED, outputMessage, context.hints())__		}__	};return,a,code,body,inserter,that,writes,the,given,code,multi,value,map,as,url,encoded,form,data,param,form,data,the,form,data,to,write,to,the,output,message,return,a,code,body,inserter,that,writes,form,data;public,static,body,inserter,multi,value,map,string,string,client,http,request,from,form,data,multi,value,map,string,string,form,data,assert,not,null,form,data,form,data,must,not,be,null,return,output,message,context,http,message,writer,multi,value,map,string,string,message,writer,find,message,writer,context,media,type,return,message,writer,write,mono,just,form,data,media,type,output,message,context,hints
BodyInserters -> public static BodyInserter<MultiValueMap<String, String>, ClientHttpRequest> fromFormData( 			MultiValueMap<String, String> formData);1497007755;Return a {@code BodyInserter} that writes the given {@code MultiValueMap} as URL-encoded_form data._@param formData the form data to write to the output message_@return a {@code BodyInserter} that writes form data;public static BodyInserter<MultiValueMap<String, String>, ClientHttpRequest> fromFormData(_			MultiValueMap<String, String> formData) {__		Assert.notNull(formData, "'formData' must not be null")__		return (outputMessage, context) -> {_			HttpMessageWriter<MultiValueMap<String, String>> messageWriter =_					findMessageWriter(context, FORM_TYPE, MediaType.APPLICATION_FORM_URLENCODED)__			return messageWriter.write(Mono.just(formData), FORM_TYPE,_					MediaType.APPLICATION_FORM_URLENCODED, outputMessage, context.hints())__		}__	};return,a,code,body,inserter,that,writes,the,given,code,multi,value,map,as,url,encoded,form,data,param,form,data,the,form,data,to,write,to,the,output,message,return,a,code,body,inserter,that,writes,form,data;public,static,body,inserter,multi,value,map,string,string,client,http,request,from,form,data,multi,value,map,string,string,form,data,assert,not,null,form,data,form,data,must,not,be,null,return,output,message,context,http,message,writer,multi,value,map,string,string,message,writer,find,message,writer,context,media,type,return,message,writer,write,mono,just,form,data,media,type,output,message,context,hints
BodyInserters -> public static BodyInserter<MultiValueMap<String, String>, ClientHttpRequest> fromFormData( 			MultiValueMap<String, String> formData);1501238239;Return a {@code BodyInserter} that writes the given {@code MultiValueMap} as URL-encoded_form data._@param formData the form data to write to the output message_@return a {@code BodyInserter} that writes form data;public static BodyInserter<MultiValueMap<String, String>, ClientHttpRequest> fromFormData(_			MultiValueMap<String, String> formData) {__		Assert.notNull(formData, "'formData' must not be null")__		return (outputMessage, context) -> {_			HttpMessageWriter<MultiValueMap<String, String>> messageWriter =_					findMessageWriter(context, FORM_TYPE, MediaType.APPLICATION_FORM_URLENCODED)__			return messageWriter.write(Mono.just(formData), FORM_TYPE,_					MediaType.APPLICATION_FORM_URLENCODED, outputMessage, context.hints())__		}__	};return,a,code,body,inserter,that,writes,the,given,code,multi,value,map,as,url,encoded,form,data,param,form,data,the,form,data,to,write,to,the,output,message,return,a,code,body,inserter,that,writes,form,data;public,static,body,inserter,multi,value,map,string,string,client,http,request,from,form,data,multi,value,map,string,string,form,data,assert,not,null,form,data,form,data,must,not,be,null,return,output,message,context,http,message,writer,multi,value,map,string,string,message,writer,find,message,writer,context,media,type,return,message,writer,write,mono,just,form,data,media,type,output,message,context,hints
BodyInserters -> public static BodyInserter<MultiValueMap<String, String>, ClientHttpRequest> fromFormData( 			MultiValueMap<String, String> formData);1509456069;Return a {@code BodyInserter} that writes the given {@code MultiValueMap}_as URL-encoded form data.__<p><strong>Note:</strong> you can also use the {@code syncBody(Object)}_method in the request builders of both the {@code WebClient} and_{@code WebTestClient}. In that case setting the content type is not_required. Just make sure the map contains String values only.__@param formData the form data to write to the output message_@return a {@code BodyInserter} that writes form data;public static BodyInserter<MultiValueMap<String, String>, ClientHttpRequest> fromFormData(_			MultiValueMap<String, String> formData) {__		Assert.notNull(formData, "'formData' must not be null")__		return (outputMessage, context) -> {_			HttpMessageWriter<MultiValueMap<String, String>> messageWriter =_					findMessageWriter(context, FORM_TYPE, MediaType.APPLICATION_FORM_URLENCODED)__			return messageWriter.write(Mono.just(formData), FORM_TYPE,_					MediaType.APPLICATION_FORM_URLENCODED, outputMessage, context.hints())__		}__	};return,a,code,body,inserter,that,writes,the,given,code,multi,value,map,as,url,encoded,form,data,p,strong,note,strong,you,can,also,use,the,code,sync,body,object,method,in,the,request,builders,of,both,the,code,web,client,and,code,web,test,client,in,that,case,setting,the,content,type,is,not,required,just,make,sure,the,map,contains,string,values,only,param,form,data,the,form,data,to,write,to,the,output,message,return,a,code,body,inserter,that,writes,form,data;public,static,body,inserter,multi,value,map,string,string,client,http,request,from,form,data,multi,value,map,string,string,form,data,assert,not,null,form,data,form,data,must,not,be,null,return,output,message,context,http,message,writer,multi,value,map,string,string,message,writer,find,message,writer,context,media,type,return,message,writer,write,mono,just,form,data,media,type,output,message,context,hints
BodyInserters -> public static FormInserter<String> fromFormData(String key, String value);1509538672;Return a {@link FormInserter} that writes the given key-value pair as URL-encoded_form data. Note that the returned inserter allows for additional entries to be added via_{@link FormInserter#with(String, Object)}._@param key the key to add to the form_@param value the value to add to the form_@return a {@code FormInserter} that writes form data;public static FormInserter<String> fromFormData(String key, String value) {_		Assert.notNull(key, "'key' must not be null")__		Assert.notNull(value, "'value' must not be null")___		return DefaultFormInserter.forFormData().with(key, value)__	};return,a,link,form,inserter,that,writes,the,given,key,value,pair,as,url,encoded,form,data,note,that,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,param,key,the,key,to,add,to,the,form,param,value,the,value,to,add,to,the,form,return,a,code,form,inserter,that,writes,form,data;public,static,form,inserter,string,from,form,data,string,key,string,value,assert,not,null,key,key,must,not,be,null,assert,not,null,value,value,must,not,be,null,return,default,form,inserter,for,form,data,with,key,value
BodyInserters -> public static FormInserter<String> fromFormData(String key, String value);1509980418;Return a {@link FormInserter} that writes the given key-value pair as URL-encoded_form data. Note that the returned inserter allows for additional entries to be added via_{@link FormInserter#with(String, Object)}._@param key the key to add to the form_@param value the value to add to the form_@return a {@code FormInserter} that writes form data;public static FormInserter<String> fromFormData(String key, String value) {_		Assert.notNull(key, "'key' must not be null")__		Assert.notNull(value, "'value' must not be null")___		return DefaultFormInserter.forFormData().with(key, value)__	};return,a,link,form,inserter,that,writes,the,given,key,value,pair,as,url,encoded,form,data,note,that,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,param,key,the,key,to,add,to,the,form,param,value,the,value,to,add,to,the,form,return,a,code,form,inserter,that,writes,form,data;public,static,form,inserter,string,from,form,data,string,key,string,value,assert,not,null,key,key,must,not,be,null,assert,not,null,value,value,must,not,be,null,return,default,form,inserter,for,form,data,with,key,value
BodyInserters -> public static FormInserter<String> fromFormData(String key, String value);1510004038;Return a {@link FormInserter} that writes the given key-value pair as URL-encoded_form data. Note that the returned inserter allows for additional entries to be added via_{@link FormInserter#with(String, Object)}._@param key the key to add to the form_@param value the value to add to the form_@return a {@code FormInserter} that writes form data;public static FormInserter<String> fromFormData(String key, String value) {_		Assert.notNull(key, "'key' must not be null")__		Assert.notNull(value, "'value' must not be null")___		return DefaultFormInserter.forFormData().with(key, value)__	};return,a,link,form,inserter,that,writes,the,given,key,value,pair,as,url,encoded,form,data,note,that,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,param,key,the,key,to,add,to,the,form,param,value,the,value,to,add,to,the,form,return,a,code,form,inserter,that,writes,form,data;public,static,form,inserter,string,from,form,data,string,key,string,value,assert,not,null,key,key,must,not,be,null,assert,not,null,value,value,must,not,be,null,return,default,form,inserter,for,form,data,with,key,value
BodyInserters -> public static FormInserter<String> fromFormData(String key, String value);1510933433;Return a {@link FormInserter} that writes the given key-value pair as_URL-encoded form data. The returned inserter allows for additional_entries to be added via {@link FormInserter#with(String, Object)}._@param key the key to add to the form_@param value the value to add to the form_@return a {@code FormInserter} that writes form data;public static FormInserter<String> fromFormData(String key, String value) {_		Assert.notNull(key, "'key' must not be null")__		Assert.notNull(value, "'value' must not be null")___		return DefaultFormInserter.forFormData().with(key, value)__	};return,a,link,form,inserter,that,writes,the,given,key,value,pair,as,url,encoded,form,data,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,param,key,the,key,to,add,to,the,form,param,value,the,value,to,add,to,the,form,return,a,code,form,inserter,that,writes,form,data;public,static,form,inserter,string,from,form,data,string,key,string,value,assert,not,null,key,key,must,not,be,null,assert,not,null,value,value,must,not,be,null,return,default,form,inserter,for,form,data,with,key,value
BodyInserters -> public static FormInserter<String> fromFormData(String key, String value);1513874461;Return a {@link FormInserter} that writes the given key-value pair as_URL-encoded form data. The returned inserter allows for additional_entries to be added via {@link FormInserter#with(String, Object)}._@param key the key to add to the form_@param value the value to add to the form_@return a {@code FormInserter} that writes form data;public static FormInserter<String> fromFormData(String key, String value) {_		Assert.notNull(key, "'key' must not be null")__		Assert.notNull(value, "'value' must not be null")___		return new DefaultFormInserter().with(key, value)__	};return,a,link,form,inserter,that,writes,the,given,key,value,pair,as,url,encoded,form,data,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,param,key,the,key,to,add,to,the,form,param,value,the,value,to,add,to,the,form,return,a,code,form,inserter,that,writes,form,data;public,static,form,inserter,string,from,form,data,string,key,string,value,assert,not,null,key,key,must,not,be,null,assert,not,null,value,value,must,not,be,null,return,new,default,form,inserter,with,key,value
BodyInserters -> public static FormInserter<String> fromFormData(String key, String value);1515178754;Return a {@link FormInserter} that writes the given key-value pair as_URL-encoded form data. The returned inserter allows for additional_entries to be added via {@link FormInserter#with(String, Object)}._@param key the key to add to the form_@param value the value to add to the form_@return a {@code FormInserter} that writes form data;public static FormInserter<String> fromFormData(String key, String value) {_		Assert.notNull(key, "'key' must not be null")__		Assert.notNull(value, "'value' must not be null")___		return new DefaultFormInserter().with(key, value)__	};return,a,link,form,inserter,that,writes,the,given,key,value,pair,as,url,encoded,form,data,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,param,key,the,key,to,add,to,the,form,param,value,the,value,to,add,to,the,form,return,a,code,form,inserter,that,writes,form,data;public,static,form,inserter,string,from,form,data,string,key,string,value,assert,not,null,key,key,must,not,be,null,assert,not,null,value,value,must,not,be,null,return,new,default,form,inserter,with,key,value
BodyInserters -> public static FormInserter<String> fromFormData(String key, String value);1515603291;Return a {@link FormInserter} that writes the given key-value pair as_URL-encoded form data. The returned inserter allows for additional_entries to be added via {@link FormInserter#with(String, Object)}._@param key the key to add to the form_@param value the value to add to the form_@return a {@code FormInserter} that writes form data;public static FormInserter<String> fromFormData(String key, String value) {_		Assert.notNull(key, "'key' must not be null")__		Assert.notNull(value, "'value' must not be null")___		return new DefaultFormInserter().with(key, value)__	};return,a,link,form,inserter,that,writes,the,given,key,value,pair,as,url,encoded,form,data,the,returned,inserter,allows,for,additional,entries,to,be,added,via,link,form,inserter,with,string,object,param,key,the,key,to,add,to,the,form,param,value,the,value,to,add,to,the,form,return,a,code,form,inserter,that,writes,form,data;public,static,form,inserter,string,from,form,data,string,key,string,value,assert,not,null,key,key,must,not,be,null,assert,not,null,value,value,must,not,be,null,return,new,default,form,inserter,with,key,value
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, ResolvableType elementType);1486720600;Return a {@code BodyInserter} that writes the given {@link Publisher}._@param publisher the publisher to stream to the response body_@param elementType the type of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, ResolvableType elementType) {__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementType, "'elementType' must not be null")__		return bodyInserterFor(publisher, elementType)__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,param,publisher,the,publisher,to,stream,to,the,response,body,param,element,type,the,type,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,resolvable,type,element,type,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,type,element,type,must,not,be,null,return,body,inserter,for,publisher,element,type
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, ResolvableType elementType);1487687241;Return a {@code BodyInserter} that writes the given {@link Publisher}._@param publisher the publisher to stream to the response body_@param elementType the type of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, ResolvableType elementType) {__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementType, "'elementType' must not be null")__		return bodyInserterFor(publisher, elementType)__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,param,publisher,the,publisher,to,stream,to,the,response,body,param,element,type,the,type,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,resolvable,type,element,type,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,type,element,type,must,not,be,null,return,body,inserter,for,publisher,element,type
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, ResolvableType elementType);1491385016;Return a {@code BodyInserter} that writes the given {@link Publisher}._@param publisher the publisher to stream to the response body_@param elementType the type of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, ResolvableType elementType) {__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementType, "'elementType' must not be null")__		return bodyInserterFor(publisher, elementType)__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,param,publisher,the,publisher,to,stream,to,the,response,body,param,element,type,the,type,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,resolvable,type,element,type,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,type,element,type,must,not,be,null,return,body,inserter,for,publisher,element,type
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, ResolvableType elementType);1493390543;Return a {@code BodyInserter} that writes the given {@link Publisher}._@param publisher the publisher to stream to the response body_@param elementType the type of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, ResolvableType elementType) {__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementType, "'elementType' must not be null")__		return bodyInserterFor(publisher, elementType)__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,param,publisher,the,publisher,to,stream,to,the,response,body,param,element,type,the,type,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,resolvable,type,element,type,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,type,element,type,must,not,be,null,return,body,inserter,for,publisher,element,type
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, ResolvableType elementType);1493676008;Return a {@code BodyInserter} that writes the given {@link Publisher}._@param publisher the publisher to stream to the response body_@param elementType the type of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, ResolvableType elementType) {__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementType, "'elementType' must not be null")__		return bodyInserterFor(publisher, elementType)__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,param,publisher,the,publisher,to,stream,to,the,response,body,param,element,type,the,type,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,resolvable,type,element,type,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,type,element,type,must,not,be,null,return,body,inserter,for,publisher,element,type
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, ResolvableType elementType);1495626483;Return a {@code BodyInserter} that writes the given {@link Publisher}._@param publisher the publisher to stream to the response body_@param elementType the type of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, ResolvableType elementType) {__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementType, "'elementType' must not be null")__		return bodyInserterFor(publisher, elementType)__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,param,publisher,the,publisher,to,stream,to,the,response,body,param,element,type,the,type,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,resolvable,type,element,type,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,type,element,type,must,not,be,null,return,body,inserter,for,publisher,element,type
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, ResolvableType elementType);1496837955;Return a {@code BodyInserter} that writes the given {@link Publisher}._@param publisher the publisher to stream to the response body_@param elementType the type of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, ResolvableType elementType) {__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementType, "'elementType' must not be null")__		return bodyInserterFor(publisher, elementType)__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,param,publisher,the,publisher,to,stream,to,the,response,body,param,element,type,the,type,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,resolvable,type,element,type,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,type,element,type,must,not,be,null,return,body,inserter,for,publisher,element,type
BodyInserters -> public static MultipartInserter fromMultipartData(String key, Object value);1513874461;A variant of {@link #fromMultipartData(MultiValueMap)} for adding_parts as name-value pairs in-line vs building a {@code MultiValueMap}_and passing it in._@param key the part name_@param value the part value, an Object or {@code HttpEntity}_@return a {@code FormInserter} that can writes the provided multipart_data and also allows adding more parts;public static MultipartInserter fromMultipartData(String key, Object value) {_		Assert.notNull(key, "'key' must not be null")__		Assert.notNull(value, "'value' must not be null")___		return new DefaultMultipartInserter().with(key, value)__	};a,variant,of,link,from,multipart,data,multi,value,map,for,adding,parts,as,name,value,pairs,in,line,vs,building,a,code,multi,value,map,and,passing,it,in,param,key,the,part,name,param,value,the,part,value,an,object,or,code,http,entity,return,a,code,form,inserter,that,can,writes,the,provided,multipart,data,and,also,allows,adding,more,parts;public,static,multipart,inserter,from,multipart,data,string,key,object,value,assert,not,null,key,key,must,not,be,null,assert,not,null,value,value,must,not,be,null,return,new,default,multipart,inserter,with,key,value
BodyInserters -> public static MultipartInserter fromMultipartData(String key, Object value);1515178754;A variant of {@link #fromMultipartData(MultiValueMap)} for adding_parts as name-value pairs in-line vs building a {@code MultiValueMap}_and passing it in._@param key the part name_@param value the part value, an Object or {@code HttpEntity}_@return a {@code FormInserter} that can writes the provided multipart_data and also allows adding more parts;public static MultipartInserter fromMultipartData(String key, Object value) {_		Assert.notNull(key, "'key' must not be null")__		Assert.notNull(value, "'value' must not be null")___		return new DefaultMultipartInserter().with(key, value)__	};a,variant,of,link,from,multipart,data,multi,value,map,for,adding,parts,as,name,value,pairs,in,line,vs,building,a,code,multi,value,map,and,passing,it,in,param,key,the,part,name,param,value,the,part,value,an,object,or,code,http,entity,return,a,code,form,inserter,that,can,writes,the,provided,multipart,data,and,also,allows,adding,more,parts;public,static,multipart,inserter,from,multipart,data,string,key,object,value,assert,not,null,key,key,must,not,be,null,assert,not,null,value,value,must,not,be,null,return,new,default,multipart,inserter,with,key,value
BodyInserters -> public static MultipartInserter fromMultipartData(String key, Object value);1515603291;A variant of {@link #fromMultipartData(MultiValueMap)} for adding_parts as name-value pairs in-line vs building a {@code MultiValueMap}_and passing it in._@param key the part name_@param value the part value, an Object or {@code HttpEntity}_@return a {@code FormInserter} that can writes the provided multipart_data and also allows adding more parts;public static MultipartInserter fromMultipartData(String key, Object value) {_		Assert.notNull(key, "'key' must not be null")__		Assert.notNull(value, "'value' must not be null")___		return new DefaultMultipartInserter().with(key, value)__	};a,variant,of,link,from,multipart,data,multi,value,map,for,adding,parts,as,name,value,pairs,in,line,vs,building,a,code,multi,value,map,and,passing,it,in,param,key,the,part,name,param,value,the,part,value,an,object,or,code,http,entity,return,a,code,form,inserter,that,can,writes,the,provided,multipart,data,and,also,allows,adding,more,parts;public,static,multipart,inserter,from,multipart,data,string,key,object,value,assert,not,null,key,key,must,not,be,null,assert,not,null,value,value,must,not,be,null,return,new,default,multipart,inserter,with,key,value
BodyInserters -> public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents( 			S eventsPublisher);1485986572;Return a {@code BodyInserter} that writes the given {@code ServerSentEvent} publisher._@param eventsPublisher the {@code ServerSentEvent} publisher to write to the response body_@param <T> the type of the elements contained in the {@link ServerSentEvent}_@return a {@code BodyInserter} that writes a {@code ServerSentEvent} publisher_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(_			S eventsPublisher) {__		Assert.notNull(eventsPublisher, "'eventsPublisher' must not be null")__		return (response, context) -> {_			HttpMessageWriter<ServerSentEvent<T>> messageWriter =_					findMessageWriter(context, SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM)__			return messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_					MediaType.TEXT_EVENT_STREAM, response, context.hints())__		}__	};return,a,code,body,inserter,that,writes,the,given,code,server,sent,event,publisher,param,events,publisher,the,code,server,sent,event,publisher,to,write,to,the,response,body,param,t,the,type,of,the,elements,contained,in,the,link,server,sent,event,return,a,code,body,inserter,that,writes,a,code,server,sent,event,publisher,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,server,sent,event,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,assert,not,null,events,publisher,events,publisher,must,not,be,null,return,response,context,http,message,writer,server,sent,event,t,message,writer,find,message,writer,context,media,type,return,message,writer,write,events,publisher,media,type,response,context,hints
BodyInserters -> public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents( 			S eventsPublisher);1486657400;Return a {@code BodyInserter} that writes the given {@code ServerSentEvent} publisher._@param eventsPublisher the {@code ServerSentEvent} publisher to write to the response body_@param <T> the type of the elements contained in the {@link ServerSentEvent}_@return a {@code BodyInserter} that writes a {@code ServerSentEvent} publisher_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(_			S eventsPublisher) {__		Assert.notNull(eventsPublisher, "'eventsPublisher' must not be null")__		return (response, context) -> {_			HttpMessageWriter<ServerSentEvent<T>> messageWriter =_					findMessageWriter(context, SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM)__			return messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_					MediaType.TEXT_EVENT_STREAM, response, context.hints())__		}__	};return,a,code,body,inserter,that,writes,the,given,code,server,sent,event,publisher,param,events,publisher,the,code,server,sent,event,publisher,to,write,to,the,response,body,param,t,the,type,of,the,elements,contained,in,the,link,server,sent,event,return,a,code,body,inserter,that,writes,a,code,server,sent,event,publisher,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,server,sent,event,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,assert,not,null,events,publisher,events,publisher,must,not,be,null,return,response,context,http,message,writer,server,sent,event,t,message,writer,find,message,writer,context,media,type,return,message,writer,write,events,publisher,media,type,response,context,hints
BodyInserters -> public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents( 			S eventsPublisher);1486720600;Return a {@code BodyInserter} that writes the given {@code ServerSentEvent} publisher._@param eventsPublisher the {@code ServerSentEvent} publisher to write to the response body_@param <T> the type of the elements contained in the {@link ServerSentEvent}_@return a {@code BodyInserter} that writes a {@code ServerSentEvent} publisher_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(_			S eventsPublisher) {__		Assert.notNull(eventsPublisher, "'eventsPublisher' must not be null")__		return (response, context) -> {_			HttpMessageWriter<ServerSentEvent<T>> messageWriter =_					findMessageWriter(context, SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM)__			return messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_					MediaType.TEXT_EVENT_STREAM, response, context.hints())__		}__	};return,a,code,body,inserter,that,writes,the,given,code,server,sent,event,publisher,param,events,publisher,the,code,server,sent,event,publisher,to,write,to,the,response,body,param,t,the,type,of,the,elements,contained,in,the,link,server,sent,event,return,a,code,body,inserter,that,writes,a,code,server,sent,event,publisher,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,server,sent,event,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,assert,not,null,events,publisher,events,publisher,must,not,be,null,return,response,context,http,message,writer,server,sent,event,t,message,writer,find,message,writer,context,media,type,return,message,writer,write,events,publisher,media,type,response,context,hints
BodyInserters -> public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents( 			S eventsPublisher);1487687241;Return a {@code BodyInserter} that writes the given {@code ServerSentEvent} publisher._@param eventsPublisher the {@code ServerSentEvent} publisher to write to the response body_@param <T> the type of the elements contained in the {@link ServerSentEvent}_@return a {@code BodyInserter} that writes a {@code ServerSentEvent} publisher_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(_			S eventsPublisher) {__		Assert.notNull(eventsPublisher, "'eventsPublisher' must not be null")__		return (response, context) -> {_			HttpMessageWriter<ServerSentEvent<T>> messageWriter =_					findMessageWriter(context, SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM)__			return messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_					MediaType.TEXT_EVENT_STREAM, response, context.hints())__		}__	};return,a,code,body,inserter,that,writes,the,given,code,server,sent,event,publisher,param,events,publisher,the,code,server,sent,event,publisher,to,write,to,the,response,body,param,t,the,type,of,the,elements,contained,in,the,link,server,sent,event,return,a,code,body,inserter,that,writes,a,code,server,sent,event,publisher,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,server,sent,event,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,assert,not,null,events,publisher,events,publisher,must,not,be,null,return,response,context,http,message,writer,server,sent,event,t,message,writer,find,message,writer,context,media,type,return,message,writer,write,events,publisher,media,type,response,context,hints
BodyInserters -> public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents( 			S eventsPublisher);1491385016;Return a {@code BodyInserter} that writes the given {@code ServerSentEvent} publisher._@param eventsPublisher the {@code ServerSentEvent} publisher to write to the response body_@param <T> the type of the elements contained in the {@link ServerSentEvent}_@return a {@code BodyInserter} that writes a {@code ServerSentEvent} publisher_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(_			S eventsPublisher) {__		Assert.notNull(eventsPublisher, "'eventsPublisher' must not be null")__		return (serverResponse, context) -> {_			HttpMessageWriter<ServerSentEvent<T>> messageWriter =_					findMessageWriter(context, SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM)__			return context.serverRequest()_					.map(serverRequest -> messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_							SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM, serverRequest,_							serverResponse, context.hints()))_					.orElseGet(() -> messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_							MediaType.TEXT_EVENT_STREAM, serverResponse, context.hints()))__		}__	};return,a,code,body,inserter,that,writes,the,given,code,server,sent,event,publisher,param,events,publisher,the,code,server,sent,event,publisher,to,write,to,the,response,body,param,t,the,type,of,the,elements,contained,in,the,link,server,sent,event,return,a,code,body,inserter,that,writes,a,code,server,sent,event,publisher,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,server,sent,event,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,assert,not,null,events,publisher,events,publisher,must,not,be,null,return,server,response,context,http,message,writer,server,sent,event,t,message,writer,find,message,writer,context,media,type,return,context,server,request,map,server,request,message,writer,write,events,publisher,media,type,server,request,server,response,context,hints,or,else,get,message,writer,write,events,publisher,media,type,server,response,context,hints
BodyInserters -> public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents( 			S eventsPublisher);1493390543;Return a {@code BodyInserter} that writes the given {@code ServerSentEvent} publisher._@param eventsPublisher the {@code ServerSentEvent} publisher to write to the response body_@param <T> the type of the elements contained in the {@link ServerSentEvent}_@return a {@code BodyInserter} that writes a {@code ServerSentEvent} publisher_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(_			S eventsPublisher) {__		Assert.notNull(eventsPublisher, "'eventsPublisher' must not be null")__		return (serverResponse, context) -> {_			HttpMessageWriter<ServerSentEvent<T>> messageWriter =_					findMessageWriter(context, SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM)__			return context.serverRequest()_					.map(serverRequest -> messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_							SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM, serverRequest,_							serverResponse, context.hints()))_					.orElseGet(() -> messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_							MediaType.TEXT_EVENT_STREAM, serverResponse, context.hints()))__		}__	};return,a,code,body,inserter,that,writes,the,given,code,server,sent,event,publisher,param,events,publisher,the,code,server,sent,event,publisher,to,write,to,the,response,body,param,t,the,type,of,the,elements,contained,in,the,link,server,sent,event,return,a,code,body,inserter,that,writes,a,code,server,sent,event,publisher,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,server,sent,event,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,assert,not,null,events,publisher,events,publisher,must,not,be,null,return,server,response,context,http,message,writer,server,sent,event,t,message,writer,find,message,writer,context,media,type,return,context,server,request,map,server,request,message,writer,write,events,publisher,media,type,server,request,server,response,context,hints,or,else,get,message,writer,write,events,publisher,media,type,server,response,context,hints
BodyInserters -> public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents( 			S eventsPublisher);1493676008;Return a {@code BodyInserter} that writes the given {@code ServerSentEvent} publisher._@param eventsPublisher the {@code ServerSentEvent} publisher to write to the response body_@param <T> the type of the elements contained in the {@link ServerSentEvent}_@return a {@code BodyInserter} that writes a {@code ServerSentEvent} publisher_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(_			S eventsPublisher) {__		Assert.notNull(eventsPublisher, "'eventsPublisher' must not be null")__		return (serverResponse, context) -> {_			HttpMessageWriter<ServerSentEvent<T>> messageWriter =_					findMessageWriter(context, SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM)__			return context.serverRequest()_					.map(serverRequest -> messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_							SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM, serverRequest,_							serverResponse, context.hints()))_					.orElseGet(() -> messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_							MediaType.TEXT_EVENT_STREAM, serverResponse, context.hints()))__		}__	};return,a,code,body,inserter,that,writes,the,given,code,server,sent,event,publisher,param,events,publisher,the,code,server,sent,event,publisher,to,write,to,the,response,body,param,t,the,type,of,the,elements,contained,in,the,link,server,sent,event,return,a,code,body,inserter,that,writes,a,code,server,sent,event,publisher,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,server,sent,event,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,assert,not,null,events,publisher,events,publisher,must,not,be,null,return,server,response,context,http,message,writer,server,sent,event,t,message,writer,find,message,writer,context,media,type,return,context,server,request,map,server,request,message,writer,write,events,publisher,media,type,server,request,server,response,context,hints,or,else,get,message,writer,write,events,publisher,media,type,server,response,context,hints
BodyInserters -> public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents( 			S eventsPublisher);1495626483;Return a {@code BodyInserter} that writes the given {@code ServerSentEvent} publisher._@param eventsPublisher the {@code ServerSentEvent} publisher to write to the response body_@param <T> the type of the elements contained in the {@link ServerSentEvent}_@return a {@code BodyInserter} that writes a {@code ServerSentEvent} publisher_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(_			S eventsPublisher) {__		Assert.notNull(eventsPublisher, "'eventsPublisher' must not be null")__		return (serverResponse, context) -> {_			HttpMessageWriter<ServerSentEvent<T>> messageWriter =_					findMessageWriter(context, SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM)__			return context.serverRequest()_					.map(serverRequest -> messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_							SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM, serverRequest,_							serverResponse, context.hints()))_					.orElseGet(() -> messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_							MediaType.TEXT_EVENT_STREAM, serverResponse, context.hints()))__		}__	};return,a,code,body,inserter,that,writes,the,given,code,server,sent,event,publisher,param,events,publisher,the,code,server,sent,event,publisher,to,write,to,the,response,body,param,t,the,type,of,the,elements,contained,in,the,link,server,sent,event,return,a,code,body,inserter,that,writes,a,code,server,sent,event,publisher,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,server,sent,event,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,assert,not,null,events,publisher,events,publisher,must,not,be,null,return,server,response,context,http,message,writer,server,sent,event,t,message,writer,find,message,writer,context,media,type,return,context,server,request,map,server,request,message,writer,write,events,publisher,media,type,server,request,server,response,context,hints,or,else,get,message,writer,write,events,publisher,media,type,server,response,context,hints
BodyInserters -> public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents( 			S eventsPublisher);1496837955;Return a {@code BodyInserter} that writes the given {@code ServerSentEvent} publisher._@param eventsPublisher the {@code ServerSentEvent} publisher to write to the response body_@param <T> the type of the elements contained in the {@link ServerSentEvent}_@return a {@code BodyInserter} that writes a {@code ServerSentEvent} publisher_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(_			S eventsPublisher) {__		Assert.notNull(eventsPublisher, "'eventsPublisher' must not be null")__		return (serverResponse, context) -> {_			HttpMessageWriter<ServerSentEvent<T>> messageWriter =_					findMessageWriter(context, SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM)__			return context.serverRequest()_					.map(serverRequest -> messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_							SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM, serverRequest,_							serverResponse, context.hints()))_					.orElseGet(() -> messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_							MediaType.TEXT_EVENT_STREAM, serverResponse, context.hints()))__		}__	};return,a,code,body,inserter,that,writes,the,given,code,server,sent,event,publisher,param,events,publisher,the,code,server,sent,event,publisher,to,write,to,the,response,body,param,t,the,type,of,the,elements,contained,in,the,link,server,sent,event,return,a,code,body,inserter,that,writes,a,code,server,sent,event,publisher,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,server,sent,event,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,assert,not,null,events,publisher,events,publisher,must,not,be,null,return,server,response,context,http,message,writer,server,sent,event,t,message,writer,find,message,writer,context,media,type,return,context,server,request,map,server,request,message,writer,write,events,publisher,media,type,server,request,server,response,context,hints,or,else,get,message,writer,write,events,publisher,media,type,server,response,context,hints
BodyInserters -> public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents( 			S eventsPublisher);1497007755;Return a {@code BodyInserter} that writes the given {@code ServerSentEvent} publisher._@param eventsPublisher the {@code ServerSentEvent} publisher to write to the response body_@param <T> the type of the elements contained in the {@link ServerSentEvent}_@return a {@code BodyInserter} that writes a {@code ServerSentEvent} publisher_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(_			S eventsPublisher) {__		Assert.notNull(eventsPublisher, "'eventsPublisher' must not be null")__		return (serverResponse, context) -> {_			HttpMessageWriter<ServerSentEvent<T>> messageWriter =_					findMessageWriter(context, SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM)__			return context.serverRequest()_					.map(serverRequest -> messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_							SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM, serverRequest,_							serverResponse, context.hints()))_					.orElseGet(() -> messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_							MediaType.TEXT_EVENT_STREAM, serverResponse, context.hints()))__		}__	};return,a,code,body,inserter,that,writes,the,given,code,server,sent,event,publisher,param,events,publisher,the,code,server,sent,event,publisher,to,write,to,the,response,body,param,t,the,type,of,the,elements,contained,in,the,link,server,sent,event,return,a,code,body,inserter,that,writes,a,code,server,sent,event,publisher,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,server,sent,event,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,assert,not,null,events,publisher,events,publisher,must,not,be,null,return,server,response,context,http,message,writer,server,sent,event,t,message,writer,find,message,writer,context,media,type,return,context,server,request,map,server,request,message,writer,write,events,publisher,media,type,server,request,server,response,context,hints,or,else,get,message,writer,write,events,publisher,media,type,server,response,context,hints
BodyInserters -> public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents( 			S eventsPublisher);1501238239;Return a {@code BodyInserter} that writes the given {@code ServerSentEvent} publisher._<p>Note that a SSE {@code BodyInserter} can also be obtained by passing a stream of strings_or POJOs (to be encoded as JSON) to {@link #fromPublisher(Publisher, Class)}, and specifying a_{@link MediaType#TEXT_EVENT_STREAM text/event-stream} Content-Type._@param eventsPublisher the {@code ServerSentEvent} publisher to write to the response body_@param <T> the type of the elements contained in the {@link ServerSentEvent}_@return a {@code BodyInserter} that writes a {@code ServerSentEvent} publisher_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(_			S eventsPublisher) {__		Assert.notNull(eventsPublisher, "'eventsPublisher' must not be null")__		return (serverResponse, context) -> {_			HttpMessageWriter<ServerSentEvent<T>> messageWriter =_					findMessageWriter(context, SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM)__			return context.serverRequest()_					.map(serverRequest -> messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_							SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM, serverRequest,_							serverResponse, context.hints()))_					.orElseGet(() -> messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_							MediaType.TEXT_EVENT_STREAM, serverResponse, context.hints()))__		}__	};return,a,code,body,inserter,that,writes,the,given,code,server,sent,event,publisher,p,note,that,a,sse,code,body,inserter,can,also,be,obtained,by,passing,a,stream,of,strings,or,pojos,to,be,encoded,as,json,to,link,from,publisher,publisher,class,and,specifying,a,link,media,type,text,event,stream,content,type,param,events,publisher,the,code,server,sent,event,publisher,to,write,to,the,response,body,param,t,the,type,of,the,elements,contained,in,the,link,server,sent,event,return,a,code,body,inserter,that,writes,a,code,server,sent,event,publisher,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,server,sent,event,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,assert,not,null,events,publisher,events,publisher,must,not,be,null,return,server,response,context,http,message,writer,server,sent,event,t,message,writer,find,message,writer,context,media,type,return,context,server,request,map,server,request,message,writer,write,events,publisher,media,type,server,request,server,response,context,hints,or,else,get,message,writer,write,events,publisher,media,type,server,response,context,hints
BodyInserters -> public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents( 			S eventsPublisher);1509456069;Return a {@code BodyInserter} that writes the given {@code ServerSentEvent} publisher._<p>Note that a SSE {@code BodyInserter} can also be obtained by passing a stream of strings_or POJOs (to be encoded as JSON) to {@link #fromPublisher(Publisher, Class)}, and specifying a_{@link MediaType#TEXT_EVENT_STREAM text/event-stream} Content-Type._@param eventsPublisher the {@code ServerSentEvent} publisher to write to the response body_@param <T> the type of the elements contained in the {@link ServerSentEvent}_@return a {@code BodyInserter} that writes a {@code ServerSentEvent} publisher_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(_			S eventsPublisher) {__		Assert.notNull(eventsPublisher, "'eventsPublisher' must not be null")__		return (serverResponse, context) -> {_			HttpMessageWriter<ServerSentEvent<T>> messageWriter =_					findMessageWriter(context, SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM)__			return context.serverRequest()_					.map(serverRequest -> messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_							SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM, serverRequest,_							serverResponse, context.hints()))_					.orElseGet(() -> messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_							MediaType.TEXT_EVENT_STREAM, serverResponse, context.hints()))__		}__	};return,a,code,body,inserter,that,writes,the,given,code,server,sent,event,publisher,p,note,that,a,sse,code,body,inserter,can,also,be,obtained,by,passing,a,stream,of,strings,or,pojos,to,be,encoded,as,json,to,link,from,publisher,publisher,class,and,specifying,a,link,media,type,text,event,stream,content,type,param,events,publisher,the,code,server,sent,event,publisher,to,write,to,the,response,body,param,t,the,type,of,the,elements,contained,in,the,link,server,sent,event,return,a,code,body,inserter,that,writes,a,code,server,sent,event,publisher,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,server,sent,event,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,assert,not,null,events,publisher,events,publisher,must,not,be,null,return,server,response,context,http,message,writer,server,sent,event,t,message,writer,find,message,writer,context,media,type,return,context,server,request,map,server,request,message,writer,write,events,publisher,media,type,server,request,server,response,context,hints,or,else,get,message,writer,write,events,publisher,media,type,server,response,context,hints
BodyInserters -> public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents( 			S eventsPublisher);1509538672;Return a {@code BodyInserter} that writes the given {@code ServerSentEvent} publisher._<p>Note that a SSE {@code BodyInserter} can also be obtained by passing a stream of strings_or POJOs (to be encoded as JSON) to {@link #fromPublisher(Publisher, Class)}, and specifying a_{@link MediaType#TEXT_EVENT_STREAM text/event-stream} Content-Type._@param eventsPublisher the {@code ServerSentEvent} publisher to write to the response body_@param <T> the type of the elements contained in the {@link ServerSentEvent}_@return a {@code BodyInserter} that writes a {@code ServerSentEvent} publisher_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(_			S eventsPublisher) {__		Assert.notNull(eventsPublisher, "'eventsPublisher' must not be null")__		return (serverResponse, context) -> {_			HttpMessageWriter<ServerSentEvent<T>> messageWriter =_					findMessageWriter(context, SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM)__			return context.serverRequest()_					.map(serverRequest -> messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_							SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM, serverRequest,_							serverResponse, context.hints()))_					.orElseGet(() -> messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_							MediaType.TEXT_EVENT_STREAM, serverResponse, context.hints()))__		}__	};return,a,code,body,inserter,that,writes,the,given,code,server,sent,event,publisher,p,note,that,a,sse,code,body,inserter,can,also,be,obtained,by,passing,a,stream,of,strings,or,pojos,to,be,encoded,as,json,to,link,from,publisher,publisher,class,and,specifying,a,link,media,type,text,event,stream,content,type,param,events,publisher,the,code,server,sent,event,publisher,to,write,to,the,response,body,param,t,the,type,of,the,elements,contained,in,the,link,server,sent,event,return,a,code,body,inserter,that,writes,a,code,server,sent,event,publisher,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,server,sent,event,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,assert,not,null,events,publisher,events,publisher,must,not,be,null,return,server,response,context,http,message,writer,server,sent,event,t,message,writer,find,message,writer,context,media,type,return,context,server,request,map,server,request,message,writer,write,events,publisher,media,type,server,request,server,response,context,hints,or,else,get,message,writer,write,events,publisher,media,type,server,response,context,hints
BodyInserters -> public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents( 			S eventsPublisher);1509980418;Return a {@code BodyInserter} that writes the given {@code ServerSentEvent} publisher._<p>Note that a SSE {@code BodyInserter} can also be obtained by passing a stream of strings_or POJOs (to be encoded as JSON) to {@link #fromPublisher(Publisher, Class)}, and specifying a_{@link MediaType#TEXT_EVENT_STREAM text/event-stream} Content-Type._@param eventsPublisher the {@code ServerSentEvent} publisher to write to the response body_@param <T> the type of the elements contained in the {@link ServerSentEvent}_@return a {@code BodyInserter} that writes a {@code ServerSentEvent} publisher_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(_			S eventsPublisher) {__		Assert.notNull(eventsPublisher, "'eventsPublisher' must not be null")__		return (serverResponse, context) -> {_			HttpMessageWriter<ServerSentEvent<T>> messageWriter =_					findMessageWriter(context, SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM)__			return context.serverRequest()_					.map(serverRequest -> messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_							SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM, serverRequest,_							serverResponse, context.hints()))_					.orElseGet(() -> messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_							MediaType.TEXT_EVENT_STREAM, serverResponse, context.hints()))__		}__	};return,a,code,body,inserter,that,writes,the,given,code,server,sent,event,publisher,p,note,that,a,sse,code,body,inserter,can,also,be,obtained,by,passing,a,stream,of,strings,or,pojos,to,be,encoded,as,json,to,link,from,publisher,publisher,class,and,specifying,a,link,media,type,text,event,stream,content,type,param,events,publisher,the,code,server,sent,event,publisher,to,write,to,the,response,body,param,t,the,type,of,the,elements,contained,in,the,link,server,sent,event,return,a,code,body,inserter,that,writes,a,code,server,sent,event,publisher,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,server,sent,event,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,assert,not,null,events,publisher,events,publisher,must,not,be,null,return,server,response,context,http,message,writer,server,sent,event,t,message,writer,find,message,writer,context,media,type,return,context,server,request,map,server,request,message,writer,write,events,publisher,media,type,server,request,server,response,context,hints,or,else,get,message,writer,write,events,publisher,media,type,server,response,context,hints
BodyInserters -> public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents( 			S eventsPublisher);1510004038;Return a {@code BodyInserter} that writes the given {@code ServerSentEvent} publisher._<p>Note that a SSE {@code BodyInserter} can also be obtained by passing a stream of strings_or POJOs (to be encoded as JSON) to {@link #fromPublisher(Publisher, Class)}, and specifying a_{@link MediaType#TEXT_EVENT_STREAM text/event-stream} Content-Type._@param eventsPublisher the {@code ServerSentEvent} publisher to write to the response body_@param <T> the type of the elements contained in the {@link ServerSentEvent}_@return a {@code BodyInserter} that writes a {@code ServerSentEvent} publisher_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(_			S eventsPublisher) {__		Assert.notNull(eventsPublisher, "'eventsPublisher' must not be null")__		return (serverResponse, context) -> {_			HttpMessageWriter<ServerSentEvent<T>> messageWriter =_					findMessageWriter(context, SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM)__			return context.serverRequest()_					.map(serverRequest -> messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_							SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM, serverRequest,_							serverResponse, context.hints()))_					.orElseGet(() -> messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_							MediaType.TEXT_EVENT_STREAM, serverResponse, context.hints()))__		}__	};return,a,code,body,inserter,that,writes,the,given,code,server,sent,event,publisher,p,note,that,a,sse,code,body,inserter,can,also,be,obtained,by,passing,a,stream,of,strings,or,pojos,to,be,encoded,as,json,to,link,from,publisher,publisher,class,and,specifying,a,link,media,type,text,event,stream,content,type,param,events,publisher,the,code,server,sent,event,publisher,to,write,to,the,response,body,param,t,the,type,of,the,elements,contained,in,the,link,server,sent,event,return,a,code,body,inserter,that,writes,a,code,server,sent,event,publisher,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,server,sent,event,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,assert,not,null,events,publisher,events,publisher,must,not,be,null,return,server,response,context,http,message,writer,server,sent,event,t,message,writer,find,message,writer,context,media,type,return,context,server,request,map,server,request,message,writer,write,events,publisher,media,type,server,request,server,response,context,hints,or,else,get,message,writer,write,events,publisher,media,type,server,response,context,hints
BodyInserters -> public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents( 			S eventsPublisher);1510933433;Return a {@code BodyInserter} that writes the given {@code ServerSentEvent} publisher._<p>Note that a SSE {@code BodyInserter} can also be obtained by passing a stream of strings_or POJOs (to be encoded as JSON) to {@link #fromPublisher(Publisher, Class)}, and specifying a_{@link MediaType#TEXT_EVENT_STREAM text/event-stream} Content-Type._@param eventsPublisher the {@code ServerSentEvent} publisher to write to the response body_@param <T> the type of the elements contained in the {@link ServerSentEvent}_@return a {@code BodyInserter} that writes a {@code ServerSentEvent} publisher_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(_			S eventsPublisher) {__		Assert.notNull(eventsPublisher, "'eventsPublisher' must not be null")__		return (serverResponse, context) -> {_			HttpMessageWriter<ServerSentEvent<T>> messageWriter =_					findMessageWriter(context, SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM)__			return context.serverRequest()_					.map(serverRequest -> messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_							SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM, serverRequest,_							serverResponse, context.hints()))_					.orElseGet(() -> messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_							MediaType.TEXT_EVENT_STREAM, serverResponse, context.hints()))__		}__	};return,a,code,body,inserter,that,writes,the,given,code,server,sent,event,publisher,p,note,that,a,sse,code,body,inserter,can,also,be,obtained,by,passing,a,stream,of,strings,or,pojos,to,be,encoded,as,json,to,link,from,publisher,publisher,class,and,specifying,a,link,media,type,text,event,stream,content,type,param,events,publisher,the,code,server,sent,event,publisher,to,write,to,the,response,body,param,t,the,type,of,the,elements,contained,in,the,link,server,sent,event,return,a,code,body,inserter,that,writes,a,code,server,sent,event,publisher,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,server,sent,event,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,assert,not,null,events,publisher,events,publisher,must,not,be,null,return,server,response,context,http,message,writer,server,sent,event,t,message,writer,find,message,writer,context,media,type,return,context,server,request,map,server,request,message,writer,write,events,publisher,media,type,server,request,server,response,context,hints,or,else,get,message,writer,write,events,publisher,media,type,server,response,context,hints
BodyInserters -> public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents( 			S eventsPublisher);1513874461;Return a {@code BodyInserter} that writes the given {@code ServerSentEvent} publisher._<p>Note that a SSE {@code BodyInserter} can also be obtained by passing a stream of strings_or POJOs (to be encoded as JSON) to {@link #fromPublisher(Publisher, Class)}, and specifying a_{@link MediaType#TEXT_EVENT_STREAM text/event-stream} Content-Type._@param eventsPublisher the {@code ServerSentEvent} publisher to write to the response body_@param <T> the type of the elements contained in the {@link ServerSentEvent}_@return a {@code BodyInserter} that writes a {@code ServerSentEvent} publisher_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(_			S eventsPublisher) {__		Assert.notNull(eventsPublisher, "'eventsPublisher' must not be null")__		return (serverResponse, context) -> {_			HttpMessageWriter<ServerSentEvent<T>> messageWriter =_					findMessageWriter(context, SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM)__			return context.serverRequest()_					.map(serverRequest -> messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_							SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM, serverRequest,_							serverResponse, context.hints()))_					.orElseGet(() -> messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_							MediaType.TEXT_EVENT_STREAM, serverResponse, context.hints()))__		}__	};return,a,code,body,inserter,that,writes,the,given,code,server,sent,event,publisher,p,note,that,a,sse,code,body,inserter,can,also,be,obtained,by,passing,a,stream,of,strings,or,pojos,to,be,encoded,as,json,to,link,from,publisher,publisher,class,and,specifying,a,link,media,type,text,event,stream,content,type,param,events,publisher,the,code,server,sent,event,publisher,to,write,to,the,response,body,param,t,the,type,of,the,elements,contained,in,the,link,server,sent,event,return,a,code,body,inserter,that,writes,a,code,server,sent,event,publisher,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,server,sent,event,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,assert,not,null,events,publisher,events,publisher,must,not,be,null,return,server,response,context,http,message,writer,server,sent,event,t,message,writer,find,message,writer,context,media,type,return,context,server,request,map,server,request,message,writer,write,events,publisher,media,type,server,request,server,response,context,hints,or,else,get,message,writer,write,events,publisher,media,type,server,response,context,hints
BodyInserters -> public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents( 			S eventsPublisher);1515178754;Return a {@code BodyInserter} that writes the given {@code ServerSentEvent} publisher._<p>Note that a SSE {@code BodyInserter} can also be obtained by passing a stream of strings_or POJOs (to be encoded as JSON) to {@link #fromPublisher(Publisher, Class)}, and specifying a_{@link MediaType#TEXT_EVENT_STREAM text/event-stream} Content-Type._@param eventsPublisher the {@code ServerSentEvent} publisher to write to the response body_@param <T> the type of the elements contained in the {@link ServerSentEvent}_@return a {@code BodyInserter} that writes a {@code ServerSentEvent} publisher_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(_			S eventsPublisher) {__		Assert.notNull(eventsPublisher, "'eventsPublisher' must not be null")__		return (serverResponse, context) -> {_			HttpMessageWriter<ServerSentEvent<T>> messageWriter =_					findMessageWriter(context, SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM)__			return context.serverRequest()_					.map(serverRequest -> messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_							SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM, serverRequest,_							serverResponse, context.hints()))_					.orElseGet(() -> messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_							MediaType.TEXT_EVENT_STREAM, serverResponse, context.hints()))__		}__	};return,a,code,body,inserter,that,writes,the,given,code,server,sent,event,publisher,p,note,that,a,sse,code,body,inserter,can,also,be,obtained,by,passing,a,stream,of,strings,or,pojos,to,be,encoded,as,json,to,link,from,publisher,publisher,class,and,specifying,a,link,media,type,text,event,stream,content,type,param,events,publisher,the,code,server,sent,event,publisher,to,write,to,the,response,body,param,t,the,type,of,the,elements,contained,in,the,link,server,sent,event,return,a,code,body,inserter,that,writes,a,code,server,sent,event,publisher,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,server,sent,event,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,assert,not,null,events,publisher,events,publisher,must,not,be,null,return,server,response,context,http,message,writer,server,sent,event,t,message,writer,find,message,writer,context,media,type,return,context,server,request,map,server,request,message,writer,write,events,publisher,media,type,server,request,server,response,context,hints,or,else,get,message,writer,write,events,publisher,media,type,server,response,context,hints
BodyInserters -> public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents( 			S eventsPublisher);1515603291;Return a {@code BodyInserter} that writes the given {@code ServerSentEvent} publisher._<p>Note that a SSE {@code BodyInserter} can also be obtained by passing a stream of strings_or POJOs (to be encoded as JSON) to {@link #fromPublisher(Publisher, Class)}, and specifying a_{@link MediaType#TEXT_EVENT_STREAM text/event-stream} Content-Type._@param eventsPublisher the {@code ServerSentEvent} publisher to write to the response body_@param <T> the type of the elements contained in the {@link ServerSentEvent}_@return a {@code BodyInserter} that writes a {@code ServerSentEvent} publisher_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(_			S eventsPublisher) {__		Assert.notNull(eventsPublisher, "'eventsPublisher' must not be null")__		return (serverResponse, context) -> {_			HttpMessageWriter<ServerSentEvent<T>> messageWriter =_					findMessageWriter(context, SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM)__			return context.serverRequest()_					.map(serverRequest -> messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_							SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM, serverRequest,_							serverResponse, context.hints()))_					.orElseGet(() -> messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_							MediaType.TEXT_EVENT_STREAM, serverResponse, context.hints()))__		}__	};return,a,code,body,inserter,that,writes,the,given,code,server,sent,event,publisher,p,note,that,a,sse,code,body,inserter,can,also,be,obtained,by,passing,a,stream,of,strings,or,pojos,to,be,encoded,as,json,to,link,from,publisher,publisher,class,and,specifying,a,link,media,type,text,event,stream,content,type,param,events,publisher,the,code,server,sent,event,publisher,to,write,to,the,response,body,param,t,the,type,of,the,elements,contained,in,the,link,server,sent,event,return,a,code,body,inserter,that,writes,a,code,server,sent,event,publisher,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,server,sent,event,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,assert,not,null,events,publisher,events,publisher,must,not,be,null,return,server,response,context,http,message,writer,server,sent,event,t,message,writer,find,message,writer,context,media,type,return,context,server,request,map,server,request,message,writer,write,events,publisher,media,type,server,request,server,response,context,hints,or,else,get,message,writer,write,events,publisher,media,type,server,response,context,hints
BodyInserters -> public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents( 			S eventsPublisher);1521231485;Return a {@code BodyInserter} that writes the given {@code ServerSentEvent} publisher._<p>Note that a SSE {@code BodyInserter} can also be obtained by passing a stream of strings_or POJOs (to be encoded as JSON) to {@link #fromPublisher(Publisher, Class)}, and specifying a_{@link MediaType#TEXT_EVENT_STREAM text/event-stream} Content-Type._@param eventsPublisher the {@code ServerSentEvent} publisher to write to the response body_@param <T> the type of the elements contained in the {@link ServerSentEvent}_@return a {@code BodyInserter} that writes a {@code ServerSentEvent} publisher_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(_			S eventsPublisher) {__		Assert.notNull(eventsPublisher, "'eventsPublisher' must not be null")__		return (serverResponse, context) -> {_			HttpMessageWriter<ServerSentEvent<T>> messageWriter =_					findMessageWriter(context, SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM)__			return context.serverRequest()_					.map(serverRequest -> messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_							SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM, serverRequest,_							serverResponse, context.hints()))_					.orElseGet(() -> messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_							MediaType.TEXT_EVENT_STREAM, serverResponse, context.hints()))__		}__	};return,a,code,body,inserter,that,writes,the,given,code,server,sent,event,publisher,p,note,that,a,sse,code,body,inserter,can,also,be,obtained,by,passing,a,stream,of,strings,or,pojos,to,be,encoded,as,json,to,link,from,publisher,publisher,class,and,specifying,a,link,media,type,text,event,stream,content,type,param,events,publisher,the,code,server,sent,event,publisher,to,write,to,the,response,body,param,t,the,type,of,the,elements,contained,in,the,link,server,sent,event,return,a,code,body,inserter,that,writes,a,code,server,sent,event,publisher,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,server,sent,event,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,assert,not,null,events,publisher,events,publisher,must,not,be,null,return,server,response,context,http,message,writer,server,sent,event,t,message,writer,find,message,writer,context,media,type,return,context,server,request,map,server,request,message,writer,write,events,publisher,media,type,server,request,server,response,context,hints,or,else,get,message,writer,write,events,publisher,media,type,server,response,context,hints
BodyInserters -> public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents( 			S eventsPublisher);1522103912;Return a {@code BodyInserter} that writes the given {@code ServerSentEvent} publisher._<p>Note that a SSE {@code BodyInserter} can also be obtained by passing a stream of strings_or POJOs (to be encoded as JSON) to {@link #fromPublisher(Publisher, Class)}, and specifying a_{@link MediaType#TEXT_EVENT_STREAM text/event-stream} Content-Type._@param eventsPublisher the {@code ServerSentEvent} publisher to write to the response body_@param <T> the type of the elements contained in the {@link ServerSentEvent}_@return a {@code BodyInserter} that writes a {@code ServerSentEvent} publisher_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(_			S eventsPublisher) {__		return (serverResponse, context) -> {_			HttpMessageWriter<ServerSentEvent<T>> messageWriter =_					findMessageWriter(context, SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM)__			return context.serverRequest()_					.map(serverRequest -> messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_							SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM, serverRequest,_							serverResponse, context.hints()))_					.orElseGet(() -> messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_							MediaType.TEXT_EVENT_STREAM, serverResponse, context.hints()))__		}__	};return,a,code,body,inserter,that,writes,the,given,code,server,sent,event,publisher,p,note,that,a,sse,code,body,inserter,can,also,be,obtained,by,passing,a,stream,of,strings,or,pojos,to,be,encoded,as,json,to,link,from,publisher,publisher,class,and,specifying,a,link,media,type,text,event,stream,content,type,param,events,publisher,the,code,server,sent,event,publisher,to,write,to,the,response,body,param,t,the,type,of,the,elements,contained,in,the,link,server,sent,event,return,a,code,body,inserter,that,writes,a,code,server,sent,event,publisher,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,server,sent,event,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,return,server,response,context,http,message,writer,server,sent,event,t,message,writer,find,message,writer,context,media,type,return,context,server,request,map,server,request,message,writer,write,events,publisher,media,type,server,request,server,response,context,hints,or,else,get,message,writer,write,events,publisher,media,type,server,response,context,hints
BodyInserters -> public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents( 			S eventsPublisher);1524865018;Return a {@code BodyInserter} that writes the given {@code ServerSentEvent} publisher._<p>Note that a SSE {@code BodyInserter} can also be obtained by passing a stream of strings_or POJOs (to be encoded as JSON) to {@link #fromPublisher(Publisher, Class)}, and specifying a_{@link MediaType#TEXT_EVENT_STREAM text/event-stream} Content-Type._@param eventsPublisher the {@code ServerSentEvent} publisher to write to the response body_@param <T> the type of the elements contained in the {@link ServerSentEvent}_@return a {@code BodyInserter} that writes a {@code ServerSentEvent} publisher_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(_			S eventsPublisher) {__		return (serverResponse, context) -> {_			HttpMessageWriter<ServerSentEvent<T>> messageWriter =_					findMessageWriter(context, SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM)__			return context.serverRequest()_					.map(serverRequest -> messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_							SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM, serverRequest,_							serverResponse, context.hints()))_					.orElseGet(() -> messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_							MediaType.TEXT_EVENT_STREAM, serverResponse, context.hints()))__		}__	};return,a,code,body,inserter,that,writes,the,given,code,server,sent,event,publisher,p,note,that,a,sse,code,body,inserter,can,also,be,obtained,by,passing,a,stream,of,strings,or,pojos,to,be,encoded,as,json,to,link,from,publisher,publisher,class,and,specifying,a,link,media,type,text,event,stream,content,type,param,events,publisher,the,code,server,sent,event,publisher,to,write,to,the,response,body,param,t,the,type,of,the,elements,contained,in,the,link,server,sent,event,return,a,code,body,inserter,that,writes,a,code,server,sent,event,publisher,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,server,sent,event,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,return,server,response,context,http,message,writer,server,sent,event,t,message,writer,find,message,writer,context,media,type,return,context,server,request,map,server,request,message,writer,write,events,publisher,media,type,server,request,server,response,context,hints,or,else,get,message,writer,write,events,publisher,media,type,server,response,context,hints
BodyInserters -> public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents( 			S eventsPublisher);1526354196;Return a {@code BodyInserter} that writes the given {@code ServerSentEvent} publisher._<p>Note that a SSE {@code BodyInserter} can also be obtained by passing a stream of strings_or POJOs (to be encoded as JSON) to {@link #fromPublisher(Publisher, Class)}, and specifying a_{@link MediaType#TEXT_EVENT_STREAM text/event-stream} Content-Type._@param eventsPublisher the {@code ServerSentEvent} publisher to write to the response body_@param <T> the type of the elements contained in the {@link ServerSentEvent}_@return a {@code BodyInserter} that writes a {@code ServerSentEvent} publisher_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(_			S eventsPublisher) {__		return (serverResponse, context) -> {_			HttpMessageWriter<ServerSentEvent<T>> messageWriter =_					findMessageWriter(context, SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM)__			return context.serverRequest()_					.map(serverRequest -> messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_							SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM, serverRequest,_							serverResponse, context.hints()))_					.orElseGet(() -> messageWriter.write(eventsPublisher, SERVER_SIDE_EVENT_TYPE,_							MediaType.TEXT_EVENT_STREAM, serverResponse, context.hints()))__		}__	};return,a,code,body,inserter,that,writes,the,given,code,server,sent,event,publisher,p,note,that,a,sse,code,body,inserter,can,also,be,obtained,by,passing,a,stream,of,strings,or,pojos,to,be,encoded,as,json,to,link,from,publisher,publisher,class,and,specifying,a,link,media,type,text,event,stream,content,type,param,events,publisher,the,code,server,sent,event,publisher,to,write,to,the,response,body,param,t,the,type,of,the,elements,contained,in,the,link,server,sent,event,return,a,code,body,inserter,that,writes,a,code,server,sent,event,publisher,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,server,sent,event,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,return,server,response,context,http,message,writer,server,sent,event,t,message,writer,find,message,writer,context,media,type,return,context,server,request,map,server,request,message,writer,write,events,publisher,media,type,server,request,server,response,context,hints,or,else,get,message,writer,write,events,publisher,media,type,server,response,context,hints
BodyInserters -> public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents( 			S eventsPublisher);1527269520;Inserter to write the given {@code ServerSentEvent} publisher._<p>Alternatively, you can provide event data objects via_{@link #fromPublisher(Publisher, Class)}, and set the "Content-Type" to_{@link MediaType#TEXT_EVENT_STREAM text/event-stream}._@param eventsPublisher the {@code ServerSentEvent} publisher to write to the response body_@param <T> the type of the data elements in the {@link ServerSentEvent}_@return the inserter to write a {@code ServerSentEvent} publisher_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(_			S eventsPublisher) {__		return (serverResponse, context) -> {_			ResolvableType elmentType = SSE_TYPE__			MediaType mediaType = MediaType.TEXT_EVENT_STREAM__			HttpMessageWriter<ServerSentEvent<T>> writer = findWriter(context, elmentType, mediaType)__			return write(eventsPublisher, elmentType, mediaType, serverResponse, context, writer)__		}__	};inserter,to,write,the,given,code,server,sent,event,publisher,p,alternatively,you,can,provide,event,data,objects,via,link,from,publisher,publisher,class,and,set,the,content,type,to,link,media,type,text,event,stream,param,events,publisher,the,code,server,sent,event,publisher,to,write,to,the,response,body,param,t,the,type,of,the,data,elements,in,the,link,server,sent,event,return,the,inserter,to,write,a,code,server,sent,event,publisher,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,server,sent,event,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,return,server,response,context,resolvable,type,elment,type,media,type,media,type,media,type,http,message,writer,server,sent,event,t,writer,find,writer,context,elment,type,media,type,return,write,events,publisher,elment,type,media,type,server,response,context,writer
BodyInserters -> public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents( 			S eventsPublisher);1527341063;Inserter to write the given {@code ServerSentEvent} publisher._<p>Alternatively, you can provide event data objects via_{@link #fromPublisher(Publisher, Class)}, and set the "Content-Type" to_{@link MediaType#TEXT_EVENT_STREAM text/event-stream}._@param eventsPublisher the {@code ServerSentEvent} publisher to write to the response body_@param <T> the type of the data elements in the {@link ServerSentEvent}_@return the inserter to write a {@code ServerSentEvent} publisher_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(_			S eventsPublisher) {__		return (serverResponse, context) -> {_			ResolvableType elmentType = SSE_TYPE__			MediaType mediaType = MediaType.TEXT_EVENT_STREAM__			HttpMessageWriter<ServerSentEvent<T>> writer = findWriter(context, elmentType, mediaType)__			return write(eventsPublisher, elmentType, mediaType, serverResponse, context, writer)__		}__	};inserter,to,write,the,given,code,server,sent,event,publisher,p,alternatively,you,can,provide,event,data,objects,via,link,from,publisher,publisher,class,and,set,the,content,type,to,link,media,type,text,event,stream,param,events,publisher,the,code,server,sent,event,publisher,to,write,to,the,response,body,param,t,the,type,of,the,data,elements,in,the,link,server,sent,event,return,the,inserter,to,write,a,code,server,sent,event,publisher,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,server,sent,event,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,return,server,response,context,resolvable,type,elment,type,media,type,media,type,media,type,http,message,writer,server,sent,event,t,writer,find,writer,context,elment,type,media,type,return,write,events,publisher,elment,type,media,type,server,response,context,writer
BodyInserters -> public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents( 			S eventsPublisher);1530174524;Inserter to write the given {@code ServerSentEvent} publisher._<p>Alternatively, you can provide event data objects via_{@link #fromPublisher(Publisher, Class)}, and set the "Content-Type" to_{@link MediaType#TEXT_EVENT_STREAM text/event-stream}._@param eventsPublisher the {@code ServerSentEvent} publisher to write to the response body_@param <T> the type of the data elements in the {@link ServerSentEvent}_@return the inserter to write a {@code ServerSentEvent} publisher_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(_			S eventsPublisher) {__		return (serverResponse, context) -> {_			ResolvableType elmentType = SSE_TYPE__			MediaType mediaType = MediaType.TEXT_EVENT_STREAM__			HttpMessageWriter<ServerSentEvent<T>> writer = findWriter(context, elmentType, mediaType)__			return write(eventsPublisher, elmentType, mediaType, serverResponse, context, writer)__		}__	};inserter,to,write,the,given,code,server,sent,event,publisher,p,alternatively,you,can,provide,event,data,objects,via,link,from,publisher,publisher,class,and,set,the,content,type,to,link,media,type,text,event,stream,param,events,publisher,the,code,server,sent,event,publisher,to,write,to,the,response,body,param,t,the,type,of,the,data,elements,in,the,link,server,sent,event,return,the,inserter,to,write,a,code,server,sent,event,publisher,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,server,sent,event,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,return,server,response,context,resolvable,type,elment,type,media,type,media,type,media,type,http,message,writer,server,sent,event,t,writer,find,writer,context,elment,type,media,type,return,write,events,publisher,elment,type,media,type,server,response,context,writer
BodyInserters -> public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents( 			S eventsPublisher);1530793695;Inserter to write the given {@code ServerSentEvent} publisher._<p>Alternatively, you can provide event data objects via_{@link #fromPublisher(Publisher, Class)}, and set the "Content-Type" to_{@link MediaType#TEXT_EVENT_STREAM text/event-stream}._@param eventsPublisher the {@code ServerSentEvent} publisher to write to the response body_@param <T> the type of the data elements in the {@link ServerSentEvent}_@return the inserter to write a {@code ServerSentEvent} publisher_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(_			S eventsPublisher) {__		return (serverResponse, context) -> {_			ResolvableType elmentType = SSE_TYPE__			MediaType mediaType = MediaType.TEXT_EVENT_STREAM__			HttpMessageWriter<ServerSentEvent<T>> writer = findWriter(context, elmentType, mediaType)__			return write(eventsPublisher, elmentType, mediaType, serverResponse, context, writer)__		}__	};inserter,to,write,the,given,code,server,sent,event,publisher,p,alternatively,you,can,provide,event,data,objects,via,link,from,publisher,publisher,class,and,set,the,content,type,to,link,media,type,text,event,stream,param,events,publisher,the,code,server,sent,event,publisher,to,write,to,the,response,body,param,t,the,type,of,the,data,elements,in,the,link,server,sent,event,return,the,inserter,to,write,a,code,server,sent,event,publisher,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,server,sent,event,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,return,server,response,context,resolvable,type,elment,type,media,type,media,type,media,type,http,message,writer,server,sent,event,t,writer,find,writer,context,elment,type,media,type,return,write,events,publisher,elment,type,media,type,server,response,context,writer
BodyInserters -> public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents( 			S eventsPublisher);1542037423;Inserter to write the given {@code ServerSentEvent} publisher._<p>Alternatively, you can provide event data objects via_{@link #fromPublisher(Publisher, Class)}, and set the "Content-Type" to_{@link MediaType#TEXT_EVENT_STREAM text/event-stream}._@param eventsPublisher the {@code ServerSentEvent} publisher to write to the response body_@param <T> the type of the data elements in the {@link ServerSentEvent}_@return the inserter to write a {@code ServerSentEvent} publisher_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(_			S eventsPublisher) {__		Assert.notNull(eventsPublisher, "Publisher must not be null")__		return (serverResponse, context) -> {_			ResolvableType elmentType = SSE_TYPE__			MediaType mediaType = MediaType.TEXT_EVENT_STREAM__			HttpMessageWriter<ServerSentEvent<T>> writer = findWriter(context, elmentType, mediaType)__			return write(eventsPublisher, elmentType, mediaType, serverResponse, context, writer)__		}__	};inserter,to,write,the,given,code,server,sent,event,publisher,p,alternatively,you,can,provide,event,data,objects,via,link,from,publisher,publisher,class,and,set,the,content,type,to,link,media,type,text,event,stream,param,events,publisher,the,code,server,sent,event,publisher,to,write,to,the,response,body,param,t,the,type,of,the,data,elements,in,the,link,server,sent,event,return,the,inserter,to,write,a,code,server,sent,event,publisher,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,server,sent,event,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,assert,not,null,events,publisher,publisher,must,not,be,null,return,server,response,context,resolvable,type,elment,type,media,type,media,type,media,type,http,message,writer,server,sent,event,t,writer,find,writer,context,elment,type,media,type,return,write,events,publisher,elment,type,media,type,server,response,context,writer
BodyInserters -> public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents( 			S eventsPublisher);1542613849;Inserter to write the given {@code ServerSentEvent} publisher._<p>Alternatively, you can provide event data objects via_{@link #fromPublisher(Publisher, Class)}, and set the "Content-Type" to_{@link MediaType#TEXT_EVENT_STREAM text/event-stream}._@param eventsPublisher the {@code ServerSentEvent} publisher to write to the response body_@param <T> the type of the data elements in the {@link ServerSentEvent}_@return the inserter to write a {@code ServerSentEvent} publisher_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(_			S eventsPublisher) {__		Assert.notNull(eventsPublisher, "Publisher must not be null")__		return (serverResponse, context) -> {_			ResolvableType elementType = SSE_TYPE__			MediaType mediaType = MediaType.TEXT_EVENT_STREAM__			HttpMessageWriter<ServerSentEvent<T>> writer = findWriter(context, elementType, mediaType)__			return write(eventsPublisher, elementType, mediaType, serverResponse, context, writer)__		}__	};inserter,to,write,the,given,code,server,sent,event,publisher,p,alternatively,you,can,provide,event,data,objects,via,link,from,publisher,publisher,class,and,set,the,content,type,to,link,media,type,text,event,stream,param,events,publisher,the,code,server,sent,event,publisher,to,write,to,the,response,body,param,t,the,type,of,the,data,elements,in,the,link,server,sent,event,return,the,inserter,to,write,a,code,server,sent,event,publisher,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,server,sent,event,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,assert,not,null,events,publisher,publisher,must,not,be,null,return,server,response,context,resolvable,type,element,type,media,type,media,type,media,type,http,message,writer,server,sent,event,t,writer,find,writer,context,element,type,media,type,return,write,events,publisher,element,type,media,type,server,response,context,writer
BodyInserters -> public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents( 			S eventsPublisher);1542907316;Inserter to write the given {@code ServerSentEvent} publisher._<p>Alternatively, you can provide event data objects via_{@link #fromPublisher(Publisher, Class)}, and set the "Content-Type" to_{@link MediaType#TEXT_EVENT_STREAM text/event-stream}._@param eventsPublisher the {@code ServerSentEvent} publisher to write to the response body_@param <T> the type of the data elements in the {@link ServerSentEvent}_@return the inserter to write a {@code ServerSentEvent} publisher_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<ServerSentEvent<T>>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(_			S eventsPublisher) {__		Assert.notNull(eventsPublisher, "Publisher must not be null")__		return (serverResponse, context) -> {_			ResolvableType elementType = SSE_TYPE__			MediaType mediaType = MediaType.TEXT_EVENT_STREAM__			HttpMessageWriter<ServerSentEvent<T>> writer = findWriter(context, elementType, mediaType)__			return write(eventsPublisher, elementType, mediaType, serverResponse, context, writer)__		}__	};inserter,to,write,the,given,code,server,sent,event,publisher,p,alternatively,you,can,provide,event,data,objects,via,link,from,publisher,publisher,class,and,set,the,content,type,to,link,media,type,text,event,stream,param,events,publisher,the,code,server,sent,event,publisher,to,write,to,the,response,body,param,t,the,type,of,the,data,elements,in,the,link,server,sent,event,return,the,inserter,to,write,a,code,server,sent,event,publisher,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,server,sent,event,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,assert,not,null,events,publisher,publisher,must,not,be,null,return,server,response,context,resolvable,type,element,type,media,type,media,type,media,type,http,message,writer,server,sent,event,t,writer,find,writer,context,element,type,media,type,return,write,events,publisher,element,type,media,type,server,response,context,writer
BodyInserters -> public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(String key, 			P publisher, ParameterizedTypeReference<T> typeReference);1513874461;A variant of {@link #fromMultipartData(MultiValueMap)} for adding asynchronous data as a_part in-line vs building a {@code MultiValueMap} and passing it in._@param key the part name_@param publisher the publisher that forms the part value_@param typeReference the type contained in the {@code publisher}_@return a {@code FormInserter} that can writes the provided multipart_data and also allows adding more parts;public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(String key,_			P publisher, ParameterizedTypeReference<T> typeReference) {__		Assert.notNull(key, "'key' must not be null")__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(typeReference, "'typeReference' must not be null")___		return new DefaultMultipartInserter().withPublisher(key, publisher, typeReference)__	};a,variant,of,link,from,multipart,data,multi,value,map,for,adding,asynchronous,data,as,a,part,in,line,vs,building,a,code,multi,value,map,and,passing,it,in,param,key,the,part,name,param,publisher,the,publisher,that,forms,the,part,value,param,type,reference,the,type,contained,in,the,code,publisher,return,a,code,form,inserter,that,can,writes,the,provided,multipart,data,and,also,allows,adding,more,parts;public,static,t,p,extends,publisher,t,multipart,inserter,from,multipart,async,data,string,key,p,publisher,parameterized,type,reference,t,type,reference,assert,not,null,key,key,must,not,be,null,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,type,reference,type,reference,must,not,be,null,return,new,default,multipart,inserter,with,publisher,key,publisher,type,reference
BodyInserters -> public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(String key, 			P publisher, ParameterizedTypeReference<T> typeReference);1515178754;A variant of {@link #fromMultipartData(MultiValueMap)} for adding asynchronous data as a_part in-line vs building a {@code MultiValueMap} and passing it in._@param key the part name_@param publisher the publisher that forms the part value_@param typeReference the type contained in the {@code publisher}_@return a {@code FormInserter} that can writes the provided multipart_data and also allows adding more parts;public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(String key,_			P publisher, ParameterizedTypeReference<T> typeReference) {__		Assert.notNull(key, "'key' must not be null")__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(typeReference, "'typeReference' must not be null")___		return new DefaultMultipartInserter().withPublisher(key, publisher, typeReference)__	};a,variant,of,link,from,multipart,data,multi,value,map,for,adding,asynchronous,data,as,a,part,in,line,vs,building,a,code,multi,value,map,and,passing,it,in,param,key,the,part,name,param,publisher,the,publisher,that,forms,the,part,value,param,type,reference,the,type,contained,in,the,code,publisher,return,a,code,form,inserter,that,can,writes,the,provided,multipart,data,and,also,allows,adding,more,parts;public,static,t,p,extends,publisher,t,multipart,inserter,from,multipart,async,data,string,key,p,publisher,parameterized,type,reference,t,type,reference,assert,not,null,key,key,must,not,be,null,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,type,reference,type,reference,must,not,be,null,return,new,default,multipart,inserter,with,publisher,key,publisher,type,reference
BodyInserters -> public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(String key, 			P publisher, ParameterizedTypeReference<T> typeReference);1515603291;A variant of {@link #fromMultipartData(MultiValueMap)} for adding asynchronous data as a_part in-line vs building a {@code MultiValueMap} and passing it in._@param key the part name_@param publisher the publisher that forms the part value_@param typeReference the type contained in the {@code publisher}_@return a {@code FormInserter} that can writes the provided multipart_data and also allows adding more parts;public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(String key,_			P publisher, ParameterizedTypeReference<T> typeReference) {__		Assert.notNull(key, "'key' must not be null")__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(typeReference, "'typeReference' must not be null")___		return new DefaultMultipartInserter().withPublisher(key, publisher, typeReference)__	};a,variant,of,link,from,multipart,data,multi,value,map,for,adding,asynchronous,data,as,a,part,in,line,vs,building,a,code,multi,value,map,and,passing,it,in,param,key,the,part,name,param,publisher,the,publisher,that,forms,the,part,value,param,type,reference,the,type,contained,in,the,code,publisher,return,a,code,form,inserter,that,can,writes,the,provided,multipart,data,and,also,allows,adding,more,parts;public,static,t,p,extends,publisher,t,multipart,inserter,from,multipart,async,data,string,key,p,publisher,parameterized,type,reference,t,type,reference,assert,not,null,key,key,must,not,be,null,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,type,reference,type,reference,must,not,be,null,return,new,default,multipart,inserter,with,publisher,key,publisher,type,reference
BodyInserters -> public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource);1485986572;Return a {@code BodyInserter} that writes the given {@code Resource}._If the resource can be resolved to a {@linkplain Resource#getFile() file}, it will be copied_using_<a href="https://en.wikipedia.org/wiki/Zero-copy">zero-copy</a>_@param resource the resource to write to the output message_@param <T> the type of the {@code Resource}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource) {_		Assert.notNull(resource, "'resource' must not be null")__		return (outputMessage, context) -> {_					HttpMessageWriter<Resource> messageWriter = resourceHttpMessageWriter(context)__					return messageWriter.write(Mono.just(resource), RESOURCE_TYPE, null,_							outputMessage, context.hints())__				}__	};return,a,code,body,inserter,that,writes,the,given,code,resource,if,the,resource,can,be,resolved,to,a,linkplain,resource,get,file,file,it,will,be,copied,using,a,href,https,en,wikipedia,org,wiki,zero,copy,zero,copy,a,param,resource,the,resource,to,write,to,the,output,message,param,t,the,type,of,the,code,resource,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,extends,resource,body,inserter,t,reactive,http,output,message,from,resource,t,resource,assert,not,null,resource,resource,must,not,be,null,return,output,message,context,http,message,writer,resource,message,writer,resource,http,message,writer,context,return,message,writer,write,mono,just,resource,null,output,message,context,hints
BodyInserters -> public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource);1486657400;Return a {@code BodyInserter} that writes the given {@code Resource}._If the resource can be resolved to a {@linkplain Resource#getFile() file}, it will be copied_using_<a href="https://en.wikipedia.org/wiki/Zero-copy">zero-copy</a>_@param resource the resource to write to the output message_@param <T> the type of the {@code Resource}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource) {_		Assert.notNull(resource, "'resource' must not be null")__		return (outputMessage, context) -> {_					HttpMessageWriter<Resource> messageWriter = resourceHttpMessageWriter(context)__					return messageWriter.write(Mono.just(resource), RESOURCE_TYPE, null,_							outputMessage, context.hints())__				}__	};return,a,code,body,inserter,that,writes,the,given,code,resource,if,the,resource,can,be,resolved,to,a,linkplain,resource,get,file,file,it,will,be,copied,using,a,href,https,en,wikipedia,org,wiki,zero,copy,zero,copy,a,param,resource,the,resource,to,write,to,the,output,message,param,t,the,type,of,the,code,resource,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,extends,resource,body,inserter,t,reactive,http,output,message,from,resource,t,resource,assert,not,null,resource,resource,must,not,be,null,return,output,message,context,http,message,writer,resource,message,writer,resource,http,message,writer,context,return,message,writer,write,mono,just,resource,null,output,message,context,hints
BodyInserters -> public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource);1486720600;Return a {@code BodyInserter} that writes the given {@code Resource}._<p>If the resource can be resolved to a {@linkplain Resource#getFile() file}, it will_be copied using <a href="https://en.wikipedia.org/wiki/Zero-copy">zero-copy</a>._@param resource the resource to write to the output message_@param <T> the type of the {@code Resource}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource) {_		Assert.notNull(resource, "'resource' must not be null")__		return (outputMessage, context) -> {_					HttpMessageWriter<Resource> messageWriter = resourceHttpMessageWriter(context)__					return messageWriter.write(Mono.just(resource), RESOURCE_TYPE, null,_							outputMessage, context.hints())__				}__	};return,a,code,body,inserter,that,writes,the,given,code,resource,p,if,the,resource,can,be,resolved,to,a,linkplain,resource,get,file,file,it,will,be,copied,using,a,href,https,en,wikipedia,org,wiki,zero,copy,zero,copy,a,param,resource,the,resource,to,write,to,the,output,message,param,t,the,type,of,the,code,resource,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,extends,resource,body,inserter,t,reactive,http,output,message,from,resource,t,resource,assert,not,null,resource,resource,must,not,be,null,return,output,message,context,http,message,writer,resource,message,writer,resource,http,message,writer,context,return,message,writer,write,mono,just,resource,null,output,message,context,hints
BodyInserters -> public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource);1487687241;Return a {@code BodyInserter} that writes the given {@code Resource}._<p>If the resource can be resolved to a {@linkplain Resource#getFile() file}, it will_be copied using <a href="https://en.wikipedia.org/wiki/Zero-copy">zero-copy</a>._@param resource the resource to write to the output message_@param <T> the type of the {@code Resource}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource) {_		Assert.notNull(resource, "'resource' must not be null")__		return (outputMessage, context) -> {_					HttpMessageWriter<Resource> messageWriter = resourceHttpMessageWriter(context)__					return messageWriter.write(Mono.just(resource), RESOURCE_TYPE, null,_							outputMessage, context.hints())__				}__	};return,a,code,body,inserter,that,writes,the,given,code,resource,p,if,the,resource,can,be,resolved,to,a,linkplain,resource,get,file,file,it,will,be,copied,using,a,href,https,en,wikipedia,org,wiki,zero,copy,zero,copy,a,param,resource,the,resource,to,write,to,the,output,message,param,t,the,type,of,the,code,resource,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,extends,resource,body,inserter,t,reactive,http,output,message,from,resource,t,resource,assert,not,null,resource,resource,must,not,be,null,return,output,message,context,http,message,writer,resource,message,writer,resource,http,message,writer,context,return,message,writer,write,mono,just,resource,null,output,message,context,hints
BodyInserters -> public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource);1491385016;Return a {@code BodyInserter} that writes the given {@code Resource}._<p>If the resource can be resolved to a {@linkplain Resource#getFile() file}, it will_be copied using <a href="https://en.wikipedia.org/wiki/Zero-copy">zero-copy</a>._@param resource the resource to write to the output message_@param <T> the type of the {@code Resource}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource) {_		Assert.notNull(resource, "'resource' must not be null")__		return (outputMessage, context) -> {_			Mono<T> inputStream = Mono.just(resource)__			HttpMessageWriter<Resource> messageWriter = resourceHttpMessageWriter(context)__			Optional<ServerHttpRequest> serverRequest = context.serverRequest()__			if (serverRequest.isPresent() && outputMessage instanceof ServerHttpResponse) {_				return messageWriter.write(inputStream, RESOURCE_TYPE, RESOURCE_TYPE, null,_						serverRequest.get(), (ServerHttpResponse) outputMessage, context.hints())__			}_			else {_				return messageWriter.write(inputStream, RESOURCE_TYPE, null,_						outputMessage, context.hints())__			}_		}__	};return,a,code,body,inserter,that,writes,the,given,code,resource,p,if,the,resource,can,be,resolved,to,a,linkplain,resource,get,file,file,it,will,be,copied,using,a,href,https,en,wikipedia,org,wiki,zero,copy,zero,copy,a,param,resource,the,resource,to,write,to,the,output,message,param,t,the,type,of,the,code,resource,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,extends,resource,body,inserter,t,reactive,http,output,message,from,resource,t,resource,assert,not,null,resource,resource,must,not,be,null,return,output,message,context,mono,t,input,stream,mono,just,resource,http,message,writer,resource,message,writer,resource,http,message,writer,context,optional,server,http,request,server,request,context,server,request,if,server,request,is,present,output,message,instanceof,server,http,response,return,message,writer,write,input,stream,null,server,request,get,server,http,response,output,message,context,hints,else,return,message,writer,write,input,stream,null,output,message,context,hints
BodyInserters -> public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource);1493390543;Return a {@code BodyInserter} that writes the given {@code Resource}._<p>If the resource can be resolved to a {@linkplain Resource#getFile() file}, it will_be copied using <a href="https://en.wikipedia.org/wiki/Zero-copy">zero-copy</a>._@param resource the resource to write to the output message_@param <T> the type of the {@code Resource}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource) {_		Assert.notNull(resource, "'resource' must not be null")__		return (outputMessage, context) -> {_			Mono<T> inputStream = Mono.just(resource)__			HttpMessageWriter<Resource> messageWriter = resourceHttpMessageWriter(context)__			Optional<ServerHttpRequest> serverRequest = context.serverRequest()__			if (serverRequest.isPresent() && outputMessage instanceof ServerHttpResponse) {_				return messageWriter.write(inputStream, RESOURCE_TYPE, RESOURCE_TYPE, null,_						serverRequest.get(), (ServerHttpResponse) outputMessage, context.hints())__			}_			else {_				return messageWriter.write(inputStream, RESOURCE_TYPE, null,_						outputMessage, context.hints())__			}_		}__	};return,a,code,body,inserter,that,writes,the,given,code,resource,p,if,the,resource,can,be,resolved,to,a,linkplain,resource,get,file,file,it,will,be,copied,using,a,href,https,en,wikipedia,org,wiki,zero,copy,zero,copy,a,param,resource,the,resource,to,write,to,the,output,message,param,t,the,type,of,the,code,resource,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,extends,resource,body,inserter,t,reactive,http,output,message,from,resource,t,resource,assert,not,null,resource,resource,must,not,be,null,return,output,message,context,mono,t,input,stream,mono,just,resource,http,message,writer,resource,message,writer,resource,http,message,writer,context,optional,server,http,request,server,request,context,server,request,if,server,request,is,present,output,message,instanceof,server,http,response,return,message,writer,write,input,stream,null,server,request,get,server,http,response,output,message,context,hints,else,return,message,writer,write,input,stream,null,output,message,context,hints
BodyInserters -> public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource);1493676008;Return a {@code BodyInserter} that writes the given {@code Resource}._<p>If the resource can be resolved to a {@linkplain Resource#getFile() file}, it will_be copied using <a href="https://en.wikipedia.org/wiki/Zero-copy">zero-copy</a>._@param resource the resource to write to the output message_@param <T> the type of the {@code Resource}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource) {_		Assert.notNull(resource, "'resource' must not be null")__		return (outputMessage, context) -> {_			Mono<T> inputStream = Mono.just(resource)__			HttpMessageWriter<Resource> messageWriter = resourceHttpMessageWriter(context)__			Optional<ServerHttpRequest> serverRequest = context.serverRequest()__			if (serverRequest.isPresent() && outputMessage instanceof ServerHttpResponse) {_				return messageWriter.write(inputStream, RESOURCE_TYPE, RESOURCE_TYPE, null,_						serverRequest.get(), (ServerHttpResponse) outputMessage, context.hints())__			}_			else {_				return messageWriter.write(inputStream, RESOURCE_TYPE, null,_						outputMessage, context.hints())__			}_		}__	};return,a,code,body,inserter,that,writes,the,given,code,resource,p,if,the,resource,can,be,resolved,to,a,linkplain,resource,get,file,file,it,will,be,copied,using,a,href,https,en,wikipedia,org,wiki,zero,copy,zero,copy,a,param,resource,the,resource,to,write,to,the,output,message,param,t,the,type,of,the,code,resource,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,extends,resource,body,inserter,t,reactive,http,output,message,from,resource,t,resource,assert,not,null,resource,resource,must,not,be,null,return,output,message,context,mono,t,input,stream,mono,just,resource,http,message,writer,resource,message,writer,resource,http,message,writer,context,optional,server,http,request,server,request,context,server,request,if,server,request,is,present,output,message,instanceof,server,http,response,return,message,writer,write,input,stream,null,server,request,get,server,http,response,output,message,context,hints,else,return,message,writer,write,input,stream,null,output,message,context,hints
BodyInserters -> public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource);1495626483;Return a {@code BodyInserter} that writes the given {@code Resource}._<p>If the resource can be resolved to a {@linkplain Resource#getFile() file}, it will_be copied using <a href="https://en.wikipedia.org/wiki/Zero-copy">zero-copy</a>._@param resource the resource to write to the output message_@param <T> the type of the {@code Resource}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource) {_		Assert.notNull(resource, "'resource' must not be null")__		return (outputMessage, context) -> {_			Mono<T> inputStream = Mono.just(resource)__			HttpMessageWriter<Resource> messageWriter = resourceHttpMessageWriter(context)__			Optional<ServerHttpRequest> serverRequest = context.serverRequest()__			if (serverRequest.isPresent() && outputMessage instanceof ServerHttpResponse) {_				return messageWriter.write(inputStream, RESOURCE_TYPE, RESOURCE_TYPE, null,_						serverRequest.get(), (ServerHttpResponse) outputMessage, context.hints())__			}_			else {_				return messageWriter.write(inputStream, RESOURCE_TYPE, null,_						outputMessage, context.hints())__			}_		}__	};return,a,code,body,inserter,that,writes,the,given,code,resource,p,if,the,resource,can,be,resolved,to,a,linkplain,resource,get,file,file,it,will,be,copied,using,a,href,https,en,wikipedia,org,wiki,zero,copy,zero,copy,a,param,resource,the,resource,to,write,to,the,output,message,param,t,the,type,of,the,code,resource,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,extends,resource,body,inserter,t,reactive,http,output,message,from,resource,t,resource,assert,not,null,resource,resource,must,not,be,null,return,output,message,context,mono,t,input,stream,mono,just,resource,http,message,writer,resource,message,writer,resource,http,message,writer,context,optional,server,http,request,server,request,context,server,request,if,server,request,is,present,output,message,instanceof,server,http,response,return,message,writer,write,input,stream,null,server,request,get,server,http,response,output,message,context,hints,else,return,message,writer,write,input,stream,null,output,message,context,hints
BodyInserters -> public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource);1496837955;Return a {@code BodyInserter} that writes the given {@code Resource}._<p>If the resource can be resolved to a {@linkplain Resource#getFile() file}, it will_be copied using <a href="https://en.wikipedia.org/wiki/Zero-copy">zero-copy</a>._@param resource the resource to write to the output message_@param <T> the type of the {@code Resource}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource) {_		Assert.notNull(resource, "'resource' must not be null")__		return (outputMessage, context) -> {_			Mono<T> inputStream = Mono.just(resource)__			HttpMessageWriter<Resource> messageWriter = resourceHttpMessageWriter(context)__			Optional<ServerHttpRequest> serverRequest = context.serverRequest()__			if (serverRequest.isPresent() && outputMessage instanceof ServerHttpResponse) {_				return messageWriter.write(inputStream, RESOURCE_TYPE, RESOURCE_TYPE, null,_						serverRequest.get(), (ServerHttpResponse) outputMessage, context.hints())__			}_			else {_				return messageWriter.write(inputStream, RESOURCE_TYPE, null, outputMessage, context.hints())__			}_		}__	};return,a,code,body,inserter,that,writes,the,given,code,resource,p,if,the,resource,can,be,resolved,to,a,linkplain,resource,get,file,file,it,will,be,copied,using,a,href,https,en,wikipedia,org,wiki,zero,copy,zero,copy,a,param,resource,the,resource,to,write,to,the,output,message,param,t,the,type,of,the,code,resource,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,extends,resource,body,inserter,t,reactive,http,output,message,from,resource,t,resource,assert,not,null,resource,resource,must,not,be,null,return,output,message,context,mono,t,input,stream,mono,just,resource,http,message,writer,resource,message,writer,resource,http,message,writer,context,optional,server,http,request,server,request,context,server,request,if,server,request,is,present,output,message,instanceof,server,http,response,return,message,writer,write,input,stream,null,server,request,get,server,http,response,output,message,context,hints,else,return,message,writer,write,input,stream,null,output,message,context,hints
BodyInserters -> public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource);1497007755;Return a {@code BodyInserter} that writes the given {@code Resource}._<p>If the resource can be resolved to a {@linkplain Resource#getFile() file}, it will_be copied using <a href="https://en.wikipedia.org/wiki/Zero-copy">zero-copy</a>._@param resource the resource to write to the output message_@param <T> the type of the {@code Resource}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource) {_		Assert.notNull(resource, "'resource' must not be null")__		return (outputMessage, context) -> {_			Mono<T> inputStream = Mono.just(resource)__			HttpMessageWriter<Resource> messageWriter = resourceHttpMessageWriter(context)__			Optional<ServerHttpRequest> serverRequest = context.serverRequest()__			if (serverRequest.isPresent() && outputMessage instanceof ServerHttpResponse) {_				return messageWriter.write(inputStream, RESOURCE_TYPE, RESOURCE_TYPE, null,_						serverRequest.get(), (ServerHttpResponse) outputMessage, context.hints())__			}_			else {_				return messageWriter.write(inputStream, RESOURCE_TYPE, null, outputMessage, context.hints())__			}_		}__	};return,a,code,body,inserter,that,writes,the,given,code,resource,p,if,the,resource,can,be,resolved,to,a,linkplain,resource,get,file,file,it,will,be,copied,using,a,href,https,en,wikipedia,org,wiki,zero,copy,zero,copy,a,param,resource,the,resource,to,write,to,the,output,message,param,t,the,type,of,the,code,resource,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,extends,resource,body,inserter,t,reactive,http,output,message,from,resource,t,resource,assert,not,null,resource,resource,must,not,be,null,return,output,message,context,mono,t,input,stream,mono,just,resource,http,message,writer,resource,message,writer,resource,http,message,writer,context,optional,server,http,request,server,request,context,server,request,if,server,request,is,present,output,message,instanceof,server,http,response,return,message,writer,write,input,stream,null,server,request,get,server,http,response,output,message,context,hints,else,return,message,writer,write,input,stream,null,output,message,context,hints
BodyInserters -> public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource);1501238239;Return a {@code BodyInserter} that writes the given {@code Resource}._<p>If the resource can be resolved to a {@linkplain Resource#getFile() file}, it will_be copied using <a href="https://en.wikipedia.org/wiki/Zero-copy">zero-copy</a>._@param resource the resource to write to the output message_@param <T> the type of the {@code Resource}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource) {_		Assert.notNull(resource, "'resource' must not be null")__		return (outputMessage, context) -> {_			Mono<T> inputStream = Mono.just(resource)__			HttpMessageWriter<Resource> messageWriter = resourceHttpMessageWriter(context)__			Optional<ServerHttpRequest> serverRequest = context.serverRequest()__			if (serverRequest.isPresent() && outputMessage instanceof ServerHttpResponse) {_				return messageWriter.write(inputStream, RESOURCE_TYPE, RESOURCE_TYPE, null,_						serverRequest.get(), (ServerHttpResponse) outputMessage, context.hints())__			}_			else {_				return messageWriter.write(inputStream, RESOURCE_TYPE, null, outputMessage, context.hints())__			}_		}__	};return,a,code,body,inserter,that,writes,the,given,code,resource,p,if,the,resource,can,be,resolved,to,a,linkplain,resource,get,file,file,it,will,be,copied,using,a,href,https,en,wikipedia,org,wiki,zero,copy,zero,copy,a,param,resource,the,resource,to,write,to,the,output,message,param,t,the,type,of,the,code,resource,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,extends,resource,body,inserter,t,reactive,http,output,message,from,resource,t,resource,assert,not,null,resource,resource,must,not,be,null,return,output,message,context,mono,t,input,stream,mono,just,resource,http,message,writer,resource,message,writer,resource,http,message,writer,context,optional,server,http,request,server,request,context,server,request,if,server,request,is,present,output,message,instanceof,server,http,response,return,message,writer,write,input,stream,null,server,request,get,server,http,response,output,message,context,hints,else,return,message,writer,write,input,stream,null,output,message,context,hints
BodyInserters -> public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource);1509456069;Return a {@code BodyInserter} that writes the given {@code Resource}._<p>If the resource can be resolved to a {@linkplain Resource#getFile() file}, it will_be copied using <a href="https://en.wikipedia.org/wiki/Zero-copy">zero-copy</a>._@param resource the resource to write to the output message_@param <T> the type of the {@code Resource}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource) {_		Assert.notNull(resource, "'resource' must not be null")__		return (outputMessage, context) -> {_			Mono<T> inputStream = Mono.just(resource)__			HttpMessageWriter<Resource> messageWriter = resourceHttpMessageWriter(context)__			Optional<ServerHttpRequest> serverRequest = context.serverRequest()__			if (serverRequest.isPresent() && outputMessage instanceof ServerHttpResponse) {_				return messageWriter.write(inputStream, RESOURCE_TYPE, RESOURCE_TYPE, null,_						serverRequest.get(), (ServerHttpResponse) outputMessage, context.hints())__			}_			else {_				return messageWriter.write(inputStream, RESOURCE_TYPE, null, outputMessage, context.hints())__			}_		}__	};return,a,code,body,inserter,that,writes,the,given,code,resource,p,if,the,resource,can,be,resolved,to,a,linkplain,resource,get,file,file,it,will,be,copied,using,a,href,https,en,wikipedia,org,wiki,zero,copy,zero,copy,a,param,resource,the,resource,to,write,to,the,output,message,param,t,the,type,of,the,code,resource,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,extends,resource,body,inserter,t,reactive,http,output,message,from,resource,t,resource,assert,not,null,resource,resource,must,not,be,null,return,output,message,context,mono,t,input,stream,mono,just,resource,http,message,writer,resource,message,writer,resource,http,message,writer,context,optional,server,http,request,server,request,context,server,request,if,server,request,is,present,output,message,instanceof,server,http,response,return,message,writer,write,input,stream,null,server,request,get,server,http,response,output,message,context,hints,else,return,message,writer,write,input,stream,null,output,message,context,hints
BodyInserters -> public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource);1509538672;Return a {@code BodyInserter} that writes the given {@code Resource}._<p>If the resource can be resolved to a {@linkplain Resource#getFile() file}, it will_be copied using <a href="https://en.wikipedia.org/wiki/Zero-copy">zero-copy</a>._@param resource the resource to write to the output message_@param <T> the type of the {@code Resource}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource) {_		Assert.notNull(resource, "'resource' must not be null")__		return (outputMessage, context) -> {_			Mono<T> inputStream = Mono.just(resource)__			HttpMessageWriter<Resource> messageWriter = resourceHttpMessageWriter(context)__			Optional<ServerHttpRequest> serverRequest = context.serverRequest()__			if (serverRequest.isPresent() && outputMessage instanceof ServerHttpResponse) {_				return messageWriter.write(inputStream, RESOURCE_TYPE, RESOURCE_TYPE, null,_						serverRequest.get(), (ServerHttpResponse) outputMessage, context.hints())__			}_			else {_				return messageWriter.write(inputStream, RESOURCE_TYPE, null, outputMessage, context.hints())__			}_		}__	};return,a,code,body,inserter,that,writes,the,given,code,resource,p,if,the,resource,can,be,resolved,to,a,linkplain,resource,get,file,file,it,will,be,copied,using,a,href,https,en,wikipedia,org,wiki,zero,copy,zero,copy,a,param,resource,the,resource,to,write,to,the,output,message,param,t,the,type,of,the,code,resource,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,extends,resource,body,inserter,t,reactive,http,output,message,from,resource,t,resource,assert,not,null,resource,resource,must,not,be,null,return,output,message,context,mono,t,input,stream,mono,just,resource,http,message,writer,resource,message,writer,resource,http,message,writer,context,optional,server,http,request,server,request,context,server,request,if,server,request,is,present,output,message,instanceof,server,http,response,return,message,writer,write,input,stream,null,server,request,get,server,http,response,output,message,context,hints,else,return,message,writer,write,input,stream,null,output,message,context,hints
BodyInserters -> public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource);1509980418;Return a {@code BodyInserter} that writes the given {@code Resource}._<p>If the resource can be resolved to a {@linkplain Resource#getFile() file}, it will_be copied using <a href="https://en.wikipedia.org/wiki/Zero-copy">zero-copy</a>._@param resource the resource to write to the output message_@param <T> the type of the {@code Resource}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource) {_		Assert.notNull(resource, "'resource' must not be null")__		return (outputMessage, context) -> {_			Mono<T> inputStream = Mono.just(resource)__			HttpMessageWriter<Resource> messageWriter = resourceHttpMessageWriter(context)__			Optional<ServerHttpRequest> serverRequest = context.serverRequest()__			if (serverRequest.isPresent() && outputMessage instanceof ServerHttpResponse) {_				return messageWriter.write(inputStream, RESOURCE_TYPE, RESOURCE_TYPE, null,_						serverRequest.get(), (ServerHttpResponse) outputMessage, context.hints())__			}_			else {_				return messageWriter.write(inputStream, RESOURCE_TYPE, null, outputMessage, context.hints())__			}_		}__	};return,a,code,body,inserter,that,writes,the,given,code,resource,p,if,the,resource,can,be,resolved,to,a,linkplain,resource,get,file,file,it,will,be,copied,using,a,href,https,en,wikipedia,org,wiki,zero,copy,zero,copy,a,param,resource,the,resource,to,write,to,the,output,message,param,t,the,type,of,the,code,resource,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,extends,resource,body,inserter,t,reactive,http,output,message,from,resource,t,resource,assert,not,null,resource,resource,must,not,be,null,return,output,message,context,mono,t,input,stream,mono,just,resource,http,message,writer,resource,message,writer,resource,http,message,writer,context,optional,server,http,request,server,request,context,server,request,if,server,request,is,present,output,message,instanceof,server,http,response,return,message,writer,write,input,stream,null,server,request,get,server,http,response,output,message,context,hints,else,return,message,writer,write,input,stream,null,output,message,context,hints
BodyInserters -> public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource);1510004038;Return a {@code BodyInserter} that writes the given {@code Resource}._<p>If the resource can be resolved to a {@linkplain Resource#getFile() file}, it will_be copied using <a href="https://en.wikipedia.org/wiki/Zero-copy">zero-copy</a>._@param resource the resource to write to the output message_@param <T> the type of the {@code Resource}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource) {_		Assert.notNull(resource, "'resource' must not be null")__		return (outputMessage, context) -> {_			Mono<T> inputStream = Mono.just(resource)__			HttpMessageWriter<Resource> messageWriter = resourceHttpMessageWriter(context)__			Optional<ServerHttpRequest> serverRequest = context.serverRequest()__			if (serverRequest.isPresent() && outputMessage instanceof ServerHttpResponse) {_				return messageWriter.write(inputStream, RESOURCE_TYPE, RESOURCE_TYPE, null,_						serverRequest.get(), (ServerHttpResponse) outputMessage, context.hints())__			}_			else {_				return messageWriter.write(inputStream, RESOURCE_TYPE, null, outputMessage, context.hints())__			}_		}__	};return,a,code,body,inserter,that,writes,the,given,code,resource,p,if,the,resource,can,be,resolved,to,a,linkplain,resource,get,file,file,it,will,be,copied,using,a,href,https,en,wikipedia,org,wiki,zero,copy,zero,copy,a,param,resource,the,resource,to,write,to,the,output,message,param,t,the,type,of,the,code,resource,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,extends,resource,body,inserter,t,reactive,http,output,message,from,resource,t,resource,assert,not,null,resource,resource,must,not,be,null,return,output,message,context,mono,t,input,stream,mono,just,resource,http,message,writer,resource,message,writer,resource,http,message,writer,context,optional,server,http,request,server,request,context,server,request,if,server,request,is,present,output,message,instanceof,server,http,response,return,message,writer,write,input,stream,null,server,request,get,server,http,response,output,message,context,hints,else,return,message,writer,write,input,stream,null,output,message,context,hints
BodyInserters -> public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource);1510933433;Return a {@code BodyInserter} that writes the given {@code Resource}._<p>If the resource can be resolved to a {@linkplain Resource#getFile() file}, it will_be copied using <a href="https://en.wikipedia.org/wiki/Zero-copy">zero-copy</a>._@param resource the resource to write to the output message_@param <T> the type of the {@code Resource}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource) {_		Assert.notNull(resource, "'resource' must not be null")__		return (outputMessage, context) -> {_			Mono<T> inputStream = Mono.just(resource)__			HttpMessageWriter<Resource> messageWriter = resourceHttpMessageWriter(context)__			Optional<ServerHttpRequest> serverRequest = context.serverRequest()__			if (serverRequest.isPresent() && outputMessage instanceof ServerHttpResponse) {_				return messageWriter.write(inputStream, RESOURCE_TYPE, RESOURCE_TYPE, null,_						serverRequest.get(), (ServerHttpResponse) outputMessage, context.hints())__			}_			else {_				return messageWriter.write(inputStream, RESOURCE_TYPE, null, outputMessage, context.hints())__			}_		}__	};return,a,code,body,inserter,that,writes,the,given,code,resource,p,if,the,resource,can,be,resolved,to,a,linkplain,resource,get,file,file,it,will,be,copied,using,a,href,https,en,wikipedia,org,wiki,zero,copy,zero,copy,a,param,resource,the,resource,to,write,to,the,output,message,param,t,the,type,of,the,code,resource,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,extends,resource,body,inserter,t,reactive,http,output,message,from,resource,t,resource,assert,not,null,resource,resource,must,not,be,null,return,output,message,context,mono,t,input,stream,mono,just,resource,http,message,writer,resource,message,writer,resource,http,message,writer,context,optional,server,http,request,server,request,context,server,request,if,server,request,is,present,output,message,instanceof,server,http,response,return,message,writer,write,input,stream,null,server,request,get,server,http,response,output,message,context,hints,else,return,message,writer,write,input,stream,null,output,message,context,hints
BodyInserters -> public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource);1513874461;Return a {@code BodyInserter} that writes the given {@code Resource}._<p>If the resource can be resolved to a {@linkplain Resource#getFile() file}, it will_be copied using <a href="https://en.wikipedia.org/wiki/Zero-copy">zero-copy</a>._@param resource the resource to write to the output message_@param <T> the type of the {@code Resource}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource) {_		Assert.notNull(resource, "'resource' must not be null")__		return (outputMessage, context) -> {_			Mono<T> inputStream = Mono.just(resource)__			HttpMessageWriter<Resource> messageWriter = resourceHttpMessageWriter(context)__			Optional<ServerHttpRequest> serverRequest = context.serverRequest()__			if (serverRequest.isPresent() && outputMessage instanceof ServerHttpResponse) {_				return messageWriter.write(inputStream, RESOURCE_TYPE, RESOURCE_TYPE, null,_						serverRequest.get(), (ServerHttpResponse) outputMessage, context.hints())__			}_			else {_				return messageWriter.write(inputStream, RESOURCE_TYPE, null, outputMessage, context.hints())__			}_		}__	};return,a,code,body,inserter,that,writes,the,given,code,resource,p,if,the,resource,can,be,resolved,to,a,linkplain,resource,get,file,file,it,will,be,copied,using,a,href,https,en,wikipedia,org,wiki,zero,copy,zero,copy,a,param,resource,the,resource,to,write,to,the,output,message,param,t,the,type,of,the,code,resource,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,extends,resource,body,inserter,t,reactive,http,output,message,from,resource,t,resource,assert,not,null,resource,resource,must,not,be,null,return,output,message,context,mono,t,input,stream,mono,just,resource,http,message,writer,resource,message,writer,resource,http,message,writer,context,optional,server,http,request,server,request,context,server,request,if,server,request,is,present,output,message,instanceof,server,http,response,return,message,writer,write,input,stream,null,server,request,get,server,http,response,output,message,context,hints,else,return,message,writer,write,input,stream,null,output,message,context,hints
BodyInserters -> public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource);1515178754;Return a {@code BodyInserter} that writes the given {@code Resource}._<p>If the resource can be resolved to a {@linkplain Resource#getFile() file}, it will_be copied using <a href="https://en.wikipedia.org/wiki/Zero-copy">zero-copy</a>._@param resource the resource to write to the output message_@param <T> the type of the {@code Resource}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource) {_		Assert.notNull(resource, "'resource' must not be null")__		return (outputMessage, context) -> {_			Mono<T> inputStream = Mono.just(resource)__			HttpMessageWriter<Resource> messageWriter = resourceHttpMessageWriter(context)__			Optional<ServerHttpRequest> serverRequest = context.serverRequest()__			if (serverRequest.isPresent() && outputMessage instanceof ServerHttpResponse) {_				return messageWriter.write(inputStream, RESOURCE_TYPE, RESOURCE_TYPE, null,_						serverRequest.get(), (ServerHttpResponse) outputMessage, context.hints())__			}_			else {_				return messageWriter.write(inputStream, RESOURCE_TYPE, null, outputMessage, context.hints())__			}_		}__	};return,a,code,body,inserter,that,writes,the,given,code,resource,p,if,the,resource,can,be,resolved,to,a,linkplain,resource,get,file,file,it,will,be,copied,using,a,href,https,en,wikipedia,org,wiki,zero,copy,zero,copy,a,param,resource,the,resource,to,write,to,the,output,message,param,t,the,type,of,the,code,resource,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,extends,resource,body,inserter,t,reactive,http,output,message,from,resource,t,resource,assert,not,null,resource,resource,must,not,be,null,return,output,message,context,mono,t,input,stream,mono,just,resource,http,message,writer,resource,message,writer,resource,http,message,writer,context,optional,server,http,request,server,request,context,server,request,if,server,request,is,present,output,message,instanceof,server,http,response,return,message,writer,write,input,stream,null,server,request,get,server,http,response,output,message,context,hints,else,return,message,writer,write,input,stream,null,output,message,context,hints
BodyInserters -> public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource);1515603291;Return a {@code BodyInserter} that writes the given {@code Resource}._<p>If the resource can be resolved to a {@linkplain Resource#getFile() file}, it will_be copied using <a href="https://en.wikipedia.org/wiki/Zero-copy">zero-copy</a>._@param resource the resource to write to the output message_@param <T> the type of the {@code Resource}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource) {_		Assert.notNull(resource, "'resource' must not be null")__		return (outputMessage, context) -> {_			Mono<T> inputStream = Mono.just(resource)__			HttpMessageWriter<Resource> messageWriter = resourceHttpMessageWriter(context)__			Optional<ServerHttpRequest> serverRequest = context.serverRequest()__			if (serverRequest.isPresent() && outputMessage instanceof ServerHttpResponse) {_				return messageWriter.write(inputStream, RESOURCE_TYPE, RESOURCE_TYPE, null,_						serverRequest.get(), (ServerHttpResponse) outputMessage, context.hints())__			}_			else {_				return messageWriter.write(inputStream, RESOURCE_TYPE, null, outputMessage, context.hints())__			}_		}__	};return,a,code,body,inserter,that,writes,the,given,code,resource,p,if,the,resource,can,be,resolved,to,a,linkplain,resource,get,file,file,it,will,be,copied,using,a,href,https,en,wikipedia,org,wiki,zero,copy,zero,copy,a,param,resource,the,resource,to,write,to,the,output,message,param,t,the,type,of,the,code,resource,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,extends,resource,body,inserter,t,reactive,http,output,message,from,resource,t,resource,assert,not,null,resource,resource,must,not,be,null,return,output,message,context,mono,t,input,stream,mono,just,resource,http,message,writer,resource,message,writer,resource,http,message,writer,context,optional,server,http,request,server,request,context,server,request,if,server,request,is,present,output,message,instanceof,server,http,response,return,message,writer,write,input,stream,null,server,request,get,server,http,response,output,message,context,hints,else,return,message,writer,write,input,stream,null,output,message,context,hints
BodyInserters -> public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource);1521231485;Return a {@code BodyInserter} that writes the given {@code Resource}._<p>If the resource can be resolved to a {@linkplain Resource#getFile() file}, it will_be copied using <a href="https://en.wikipedia.org/wiki/Zero-copy">zero-copy</a>._@param resource the resource to write to the output message_@param <T> the type of the {@code Resource}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource) {_		Assert.notNull(resource, "'resource' must not be null")__		return (outputMessage, context) -> {_			Mono<T> inputStream = Mono.just(resource)__			HttpMessageWriter<Resource> messageWriter = resourceHttpMessageWriter(context)__			Optional<ServerHttpRequest> serverRequest = context.serverRequest()__			if (serverRequest.isPresent() && outputMessage instanceof ServerHttpResponse) {_				return messageWriter.write(inputStream, RESOURCE_TYPE, RESOURCE_TYPE, null,_						serverRequest.get(), (ServerHttpResponse) outputMessage, context.hints())__			}_			else {_				return messageWriter.write(inputStream, RESOURCE_TYPE, null, outputMessage, context.hints())__			}_		}__	};return,a,code,body,inserter,that,writes,the,given,code,resource,p,if,the,resource,can,be,resolved,to,a,linkplain,resource,get,file,file,it,will,be,copied,using,a,href,https,en,wikipedia,org,wiki,zero,copy,zero,copy,a,param,resource,the,resource,to,write,to,the,output,message,param,t,the,type,of,the,code,resource,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,extends,resource,body,inserter,t,reactive,http,output,message,from,resource,t,resource,assert,not,null,resource,resource,must,not,be,null,return,output,message,context,mono,t,input,stream,mono,just,resource,http,message,writer,resource,message,writer,resource,http,message,writer,context,optional,server,http,request,server,request,context,server,request,if,server,request,is,present,output,message,instanceof,server,http,response,return,message,writer,write,input,stream,null,server,request,get,server,http,response,output,message,context,hints,else,return,message,writer,write,input,stream,null,output,message,context,hints
BodyInserters -> public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource);1522103912;Return a {@code BodyInserter} that writes the given {@code Resource}._<p>If the resource can be resolved to a {@linkplain Resource#getFile() file}, it will_be copied using <a href="https://en.wikipedia.org/wiki/Zero-copy">zero-copy</a>._@param resource the resource to write to the output message_@param <T> the type of the {@code Resource}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource) {_		return (outputMessage, context) -> {_			Mono<T> inputStream = Mono.just(resource)__			HttpMessageWriter<Resource> messageWriter = resourceHttpMessageWriter(context)__			Optional<ServerHttpRequest> serverRequest = context.serverRequest()__			if (serverRequest.isPresent() && outputMessage instanceof ServerHttpResponse) {_				return messageWriter.write(inputStream, RESOURCE_TYPE, RESOURCE_TYPE, null,_						serverRequest.get(), (ServerHttpResponse) outputMessage, context.hints())__			}_			else {_				return messageWriter.write(inputStream, RESOURCE_TYPE, null, outputMessage, context.hints())__			}_		}__	};return,a,code,body,inserter,that,writes,the,given,code,resource,p,if,the,resource,can,be,resolved,to,a,linkplain,resource,get,file,file,it,will,be,copied,using,a,href,https,en,wikipedia,org,wiki,zero,copy,zero,copy,a,param,resource,the,resource,to,write,to,the,output,message,param,t,the,type,of,the,code,resource,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,extends,resource,body,inserter,t,reactive,http,output,message,from,resource,t,resource,return,output,message,context,mono,t,input,stream,mono,just,resource,http,message,writer,resource,message,writer,resource,http,message,writer,context,optional,server,http,request,server,request,context,server,request,if,server,request,is,present,output,message,instanceof,server,http,response,return,message,writer,write,input,stream,null,server,request,get,server,http,response,output,message,context,hints,else,return,message,writer,write,input,stream,null,output,message,context,hints
BodyInserters -> public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource);1524865018;Return a {@code BodyInserter} that writes the given {@code Resource}._<p>If the resource can be resolved to a {@linkplain Resource#getFile() file}, it will_be copied using <a href="https://en.wikipedia.org/wiki/Zero-copy">zero-copy</a>._@param resource the resource to write to the output message_@param <T> the type of the {@code Resource}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource) {_		return (outputMessage, context) -> {_			Mono<T> inputStream = Mono.just(resource)__			HttpMessageWriter<Resource> messageWriter = resourceHttpMessageWriter(context)__			Optional<ServerHttpRequest> serverRequest = context.serverRequest()__			if (serverRequest.isPresent() && outputMessage instanceof ServerHttpResponse) {_				return messageWriter.write(inputStream, RESOURCE_TYPE, RESOURCE_TYPE, null,_						serverRequest.get(), (ServerHttpResponse) outputMessage, context.hints())__			}_			else {_				return messageWriter.write(inputStream, RESOURCE_TYPE, null, outputMessage, context.hints())__			}_		}__	};return,a,code,body,inserter,that,writes,the,given,code,resource,p,if,the,resource,can,be,resolved,to,a,linkplain,resource,get,file,file,it,will,be,copied,using,a,href,https,en,wikipedia,org,wiki,zero,copy,zero,copy,a,param,resource,the,resource,to,write,to,the,output,message,param,t,the,type,of,the,code,resource,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,extends,resource,body,inserter,t,reactive,http,output,message,from,resource,t,resource,return,output,message,context,mono,t,input,stream,mono,just,resource,http,message,writer,resource,message,writer,resource,http,message,writer,context,optional,server,http,request,server,request,context,server,request,if,server,request,is,present,output,message,instanceof,server,http,response,return,message,writer,write,input,stream,null,server,request,get,server,http,response,output,message,context,hints,else,return,message,writer,write,input,stream,null,output,message,context,hints
BodyInserters -> public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource);1526354196;Return a {@code BodyInserter} that writes the given {@code Resource}._<p>If the resource can be resolved to a {@linkplain Resource#getFile() file}, it will_be copied using <a href="https://en.wikipedia.org/wiki/Zero-copy">zero-copy</a>._@param resource the resource to write to the output message_@param <T> the type of the {@code Resource}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource) {_		return (outputMessage, context) -> {_			Mono<T> inputStream = Mono.just(resource)__			HttpMessageWriter<Resource> messageWriter = resourceHttpMessageWriter(context)__			Optional<ServerHttpRequest> serverRequest = context.serverRequest()__			if (serverRequest.isPresent() && outputMessage instanceof ServerHttpResponse) {_				return messageWriter.write(inputStream, RESOURCE_TYPE, RESOURCE_TYPE, null,_						serverRequest.get(), (ServerHttpResponse) outputMessage, context.hints())__			}_			else {_				return messageWriter.write(inputStream, RESOURCE_TYPE, null, outputMessage, context.hints())__			}_		}__	};return,a,code,body,inserter,that,writes,the,given,code,resource,p,if,the,resource,can,be,resolved,to,a,linkplain,resource,get,file,file,it,will,be,copied,using,a,href,https,en,wikipedia,org,wiki,zero,copy,zero,copy,a,param,resource,the,resource,to,write,to,the,output,message,param,t,the,type,of,the,code,resource,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,extends,resource,body,inserter,t,reactive,http,output,message,from,resource,t,resource,return,output,message,context,mono,t,input,stream,mono,just,resource,http,message,writer,resource,message,writer,resource,http,message,writer,context,optional,server,http,request,server,request,context,server,request,if,server,request,is,present,output,message,instanceof,server,http,response,return,message,writer,write,input,stream,null,server,request,get,server,http,response,output,message,context,hints,else,return,message,writer,write,input,stream,null,output,message,context,hints
BodyInserters -> public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource);1527269520;Inserter to write the given {@code Resource}._<p>If the resource can be resolved to a {@linkplain Resource#getFile() file}, it will_be copied using <a href="https://en.wikipedia.org/wiki/Zero-copy">zero-copy</a>._@param resource the resource to write to the output message_@param <T> the type of the {@code Resource}_@return the inserter to write a {@code Publisher};public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource) {_		return (outputMessage, context) -> {_			ResolvableType elementType = RESOURCE_TYPE__			HttpMessageWriter<Resource> writer = findWriter(context, elementType, null)__			return write(Mono.just(resource), elementType, null, outputMessage, context, writer)__		}__	};inserter,to,write,the,given,code,resource,p,if,the,resource,can,be,resolved,to,a,linkplain,resource,get,file,file,it,will,be,copied,using,a,href,https,en,wikipedia,org,wiki,zero,copy,zero,copy,a,param,resource,the,resource,to,write,to,the,output,message,param,t,the,type,of,the,code,resource,return,the,inserter,to,write,a,code,publisher;public,static,t,extends,resource,body,inserter,t,reactive,http,output,message,from,resource,t,resource,return,output,message,context,resolvable,type,element,type,http,message,writer,resource,writer,find,writer,context,element,type,null,return,write,mono,just,resource,element,type,null,output,message,context,writer
BodyInserters -> public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource);1527341063;Inserter to write the given {@code Resource}._<p>If the resource can be resolved to a {@linkplain Resource#getFile() file}, it will_be copied using <a href="https://en.wikipedia.org/wiki/Zero-copy">zero-copy</a>._@param resource the resource to write to the output message_@param <T> the type of the {@code Resource}_@return the inserter to write a {@code Publisher};public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource) {_		return (outputMessage, context) -> {_			ResolvableType elementType = RESOURCE_TYPE__			HttpMessageWriter<Resource> writer = findWriter(context, elementType, null)__			return write(Mono.just(resource), elementType, null, outputMessage, context, writer)__		}__	};inserter,to,write,the,given,code,resource,p,if,the,resource,can,be,resolved,to,a,linkplain,resource,get,file,file,it,will,be,copied,using,a,href,https,en,wikipedia,org,wiki,zero,copy,zero,copy,a,param,resource,the,resource,to,write,to,the,output,message,param,t,the,type,of,the,code,resource,return,the,inserter,to,write,a,code,publisher;public,static,t,extends,resource,body,inserter,t,reactive,http,output,message,from,resource,t,resource,return,output,message,context,resolvable,type,element,type,http,message,writer,resource,writer,find,writer,context,element,type,null,return,write,mono,just,resource,element,type,null,output,message,context,writer
BodyInserters -> public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource);1530174524;Inserter to write the given {@code Resource}._<p>If the resource can be resolved to a {@linkplain Resource#getFile() file}, it will_be copied using <a href="https://en.wikipedia.org/wiki/Zero-copy">zero-copy</a>._@param resource the resource to write to the output message_@param <T> the type of the {@code Resource}_@return the inserter to write a {@code Publisher};public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource) {_		return (outputMessage, context) -> {_			ResolvableType elementType = RESOURCE_TYPE__			HttpMessageWriter<Resource> writer = findWriter(context, elementType, null)__			return write(Mono.just(resource), elementType, null, outputMessage, context, writer)__		}__	};inserter,to,write,the,given,code,resource,p,if,the,resource,can,be,resolved,to,a,linkplain,resource,get,file,file,it,will,be,copied,using,a,href,https,en,wikipedia,org,wiki,zero,copy,zero,copy,a,param,resource,the,resource,to,write,to,the,output,message,param,t,the,type,of,the,code,resource,return,the,inserter,to,write,a,code,publisher;public,static,t,extends,resource,body,inserter,t,reactive,http,output,message,from,resource,t,resource,return,output,message,context,resolvable,type,element,type,http,message,writer,resource,writer,find,writer,context,element,type,null,return,write,mono,just,resource,element,type,null,output,message,context,writer
BodyInserters -> public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource);1530793695;Inserter to write the given {@code Resource}._<p>If the resource can be resolved to a {@linkplain Resource#getFile() file}, it will_be copied using <a href="https://en.wikipedia.org/wiki/Zero-copy">zero-copy</a>._@param resource the resource to write to the output message_@param <T> the type of the {@code Resource}_@return the inserter to write a {@code Publisher};public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource) {_		return (outputMessage, context) -> {_			ResolvableType elementType = RESOURCE_TYPE__			HttpMessageWriter<Resource> writer = findWriter(context, elementType, null)__			return write(Mono.just(resource), elementType, null, outputMessage, context, writer)__		}__	};inserter,to,write,the,given,code,resource,p,if,the,resource,can,be,resolved,to,a,linkplain,resource,get,file,file,it,will,be,copied,using,a,href,https,en,wikipedia,org,wiki,zero,copy,zero,copy,a,param,resource,the,resource,to,write,to,the,output,message,param,t,the,type,of,the,code,resource,return,the,inserter,to,write,a,code,publisher;public,static,t,extends,resource,body,inserter,t,reactive,http,output,message,from,resource,t,resource,return,output,message,context,resolvable,type,element,type,http,message,writer,resource,writer,find,writer,context,element,type,null,return,write,mono,just,resource,element,type,null,output,message,context,writer
BodyInserters -> public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource);1542037423;Inserter to write the given {@code Resource}._<p>If the resource can be resolved to a {@linkplain Resource#getFile() file}, it will_be copied using <a href="https://en.wikipedia.org/wiki/Zero-copy">zero-copy</a>._@param resource the resource to write to the output message_@param <T> the type of the {@code Resource}_@return the inserter to write a {@code Publisher};public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource) {_		Assert.notNull(resource, "Resource must not be null")__		return (outputMessage, context) -> {_			ResolvableType elementType = RESOURCE_TYPE__			HttpMessageWriter<Resource> writer = findWriter(context, elementType, null)__			return write(Mono.just(resource), elementType, null, outputMessage, context, writer)__		}__	};inserter,to,write,the,given,code,resource,p,if,the,resource,can,be,resolved,to,a,linkplain,resource,get,file,file,it,will,be,copied,using,a,href,https,en,wikipedia,org,wiki,zero,copy,zero,copy,a,param,resource,the,resource,to,write,to,the,output,message,param,t,the,type,of,the,code,resource,return,the,inserter,to,write,a,code,publisher;public,static,t,extends,resource,body,inserter,t,reactive,http,output,message,from,resource,t,resource,assert,not,null,resource,resource,must,not,be,null,return,output,message,context,resolvable,type,element,type,http,message,writer,resource,writer,find,writer,context,element,type,null,return,write,mono,just,resource,element,type,null,output,message,context,writer
BodyInserters -> public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource);1542613849;Inserter to write the given {@code Resource}._<p>If the resource can be resolved to a {@linkplain Resource#getFile() file}, it will_be copied using <a href="https://en.wikipedia.org/wiki/Zero-copy">zero-copy</a>._@param resource the resource to write to the output message_@param <T> the type of the {@code Resource}_@return the inserter to write a {@code Publisher};public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource) {_		Assert.notNull(resource, "Resource must not be null")__		return (outputMessage, context) -> {_			ResolvableType elementType = RESOURCE_TYPE__			HttpMessageWriter<Resource> writer = findWriter(context, elementType, null)__			return write(Mono.just(resource), elementType, null, outputMessage, context, writer)__		}__	};inserter,to,write,the,given,code,resource,p,if,the,resource,can,be,resolved,to,a,linkplain,resource,get,file,file,it,will,be,copied,using,a,href,https,en,wikipedia,org,wiki,zero,copy,zero,copy,a,param,resource,the,resource,to,write,to,the,output,message,param,t,the,type,of,the,code,resource,return,the,inserter,to,write,a,code,publisher;public,static,t,extends,resource,body,inserter,t,reactive,http,output,message,from,resource,t,resource,assert,not,null,resource,resource,must,not,be,null,return,output,message,context,resolvable,type,element,type,http,message,writer,resource,writer,find,writer,context,element,type,null,return,write,mono,just,resource,element,type,null,output,message,context,writer
BodyInserters -> public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource);1542907316;Inserter to write the given {@code Resource}._<p>If the resource can be resolved to a {@linkplain Resource#getFile() file}, it will_be copied using <a href="https://en.wikipedia.org/wiki/Zero-copy">zero-copy</a>._@param resource the resource to write to the output message_@param <T> the type of the {@code Resource}_@return the inserter to write a {@code Publisher};public static <T extends Resource> BodyInserter<T, ReactiveHttpOutputMessage> fromResource(T resource) {_		Assert.notNull(resource, "Resource must not be null")__		return (outputMessage, context) -> {_			ResolvableType elementType = RESOURCE_TYPE__			HttpMessageWriter<Resource> writer = findWriter(context, elementType, null)__			return write(Mono.just(resource), elementType, null, outputMessage, context, writer)__		}__	};inserter,to,write,the,given,code,resource,p,if,the,resource,can,be,resolved,to,a,linkplain,resource,get,file,file,it,will,be,copied,using,a,href,https,en,wikipedia,org,wiki,zero,copy,zero,copy,a,param,resource,the,resource,to,write,to,the,output,message,param,t,the,type,of,the,code,resource,return,the,inserter,to,write,a,code,publisher;public,static,t,extends,resource,body,inserter,t,reactive,http,output,message,from,resource,t,resource,assert,not,null,resource,resource,must,not,be,null,return,output,message,context,resolvable,type,element,type,http,message,writer,resource,writer,find,writer,context,element,type,null,return,write,mono,just,resource,element,type,null,output,message,context,writer
BodyInserters -> public static <T, S extends Publisher<T>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(S eventsPublisher, 			Class<T> eventClass);1485986572;Return a {@code BodyInserter} that writes the given {@code Publisher} publisher as_Server-Sent Events._@param eventsPublisher the publisher to write to the response body as Server-Sent Events_@param eventClass the class of event contained in the publisher_@param <T> the type of the elements contained in the publisher_@return a {@code BodyInserter} that writes the given {@code Publisher} publisher as_Server-Sent Events_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<T>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(S eventsPublisher,_			Class<T> eventClass) {__		Assert.notNull(eventsPublisher, "'eventsPublisher' must not be null")__		Assert.notNull(eventClass, "'eventClass' must not be null")__		return fromServerSentEvents(eventsPublisher, ResolvableType.forClass(eventClass))__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,publisher,as,server,sent,events,param,events,publisher,the,publisher,to,write,to,the,response,body,as,server,sent,events,param,event,class,the,class,of,event,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,return,a,code,body,inserter,that,writes,the,given,code,publisher,publisher,as,server,sent,events,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,class,t,event,class,assert,not,null,events,publisher,events,publisher,must,not,be,null,assert,not,null,event,class,event,class,must,not,be,null,return,from,server,sent,events,events,publisher,resolvable,type,for,class,event,class
BodyInserters -> public static <T, S extends Publisher<T>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(S eventsPublisher, 			Class<T> eventClass);1486657400;Return a {@code BodyInserter} that writes the given {@code Publisher} publisher as_Server-Sent Events._@param eventsPublisher the publisher to write to the response body as Server-Sent Events_@param eventClass the class of event contained in the publisher_@param <T> the type of the elements contained in the publisher_@return a {@code BodyInserter} that writes the given {@code Publisher} publisher as_Server-Sent Events_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<T>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(S eventsPublisher,_			Class<T> eventClass) {__		Assert.notNull(eventsPublisher, "'eventsPublisher' must not be null")__		Assert.notNull(eventClass, "'eventClass' must not be null")__		return fromServerSentEvents(eventsPublisher, ResolvableType.forClass(eventClass))__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,publisher,as,server,sent,events,param,events,publisher,the,publisher,to,write,to,the,response,body,as,server,sent,events,param,event,class,the,class,of,event,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,return,a,code,body,inserter,that,writes,the,given,code,publisher,publisher,as,server,sent,events,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,class,t,event,class,assert,not,null,events,publisher,events,publisher,must,not,be,null,assert,not,null,event,class,event,class,must,not,be,null,return,from,server,sent,events,events,publisher,resolvable,type,for,class,event,class
BodyInserters -> public static <T, S extends Publisher<T>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(S eventsPublisher, 			Class<T> eventClass);1486720600;Return a {@code BodyInserter} that writes the given {@code Publisher} publisher as_Server-Sent Events._@param eventsPublisher the publisher to write to the response body as Server-Sent Events_@param eventClass the class of event contained in the publisher_@param <T> the type of the elements contained in the publisher_@return a {@code BodyInserter} that writes the given {@code Publisher} publisher as_Server-Sent Events_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<T>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(S eventsPublisher,_			Class<T> eventClass) {__		Assert.notNull(eventsPublisher, "'eventsPublisher' must not be null")__		Assert.notNull(eventClass, "'eventClass' must not be null")__		return fromServerSentEvents(eventsPublisher, ResolvableType.forClass(eventClass))__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,publisher,as,server,sent,events,param,events,publisher,the,publisher,to,write,to,the,response,body,as,server,sent,events,param,event,class,the,class,of,event,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,return,a,code,body,inserter,that,writes,the,given,code,publisher,publisher,as,server,sent,events,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,class,t,event,class,assert,not,null,events,publisher,events,publisher,must,not,be,null,assert,not,null,event,class,event,class,must,not,be,null,return,from,server,sent,events,events,publisher,resolvable,type,for,class,event,class
BodyInserters -> public static <T, S extends Publisher<T>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(S eventsPublisher, 			Class<T> eventClass);1487687241;Return a {@code BodyInserter} that writes the given {@code Publisher} publisher as_Server-Sent Events._@param eventsPublisher the publisher to write to the response body as Server-Sent Events_@param eventClass the class of event contained in the publisher_@param <T> the type of the elements contained in the publisher_@return a {@code BodyInserter} that writes the given {@code Publisher} publisher as_Server-Sent Events_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<T>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(S eventsPublisher,_			Class<T> eventClass) {__		Assert.notNull(eventsPublisher, "'eventsPublisher' must not be null")__		Assert.notNull(eventClass, "'eventClass' must not be null")__		return fromServerSentEvents(eventsPublisher, ResolvableType.forClass(eventClass))__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,publisher,as,server,sent,events,param,events,publisher,the,publisher,to,write,to,the,response,body,as,server,sent,events,param,event,class,the,class,of,event,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,return,a,code,body,inserter,that,writes,the,given,code,publisher,publisher,as,server,sent,events,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,class,t,event,class,assert,not,null,events,publisher,events,publisher,must,not,be,null,assert,not,null,event,class,event,class,must,not,be,null,return,from,server,sent,events,events,publisher,resolvable,type,for,class,event,class
BodyInserters -> public static <T, S extends Publisher<T>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(S eventsPublisher, 			Class<T> eventClass);1491385016;Return a {@code BodyInserter} that writes the given {@code Publisher} publisher as_Server-Sent Events._@param eventsPublisher the publisher to write to the response body as Server-Sent Events_@param eventClass the class of event contained in the publisher_@param <T> the type of the elements contained in the publisher_@return a {@code BodyInserter} that writes the given {@code Publisher} publisher as_Server-Sent Events_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<T>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(S eventsPublisher,_			Class<T> eventClass) {__		Assert.notNull(eventsPublisher, "'eventsPublisher' must not be null")__		Assert.notNull(eventClass, "'eventClass' must not be null")__		return fromServerSentEvents(eventsPublisher, ResolvableType.forClass(eventClass))__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,publisher,as,server,sent,events,param,events,publisher,the,publisher,to,write,to,the,response,body,as,server,sent,events,param,event,class,the,class,of,event,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,return,a,code,body,inserter,that,writes,the,given,code,publisher,publisher,as,server,sent,events,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,class,t,event,class,assert,not,null,events,publisher,events,publisher,must,not,be,null,assert,not,null,event,class,event,class,must,not,be,null,return,from,server,sent,events,events,publisher,resolvable,type,for,class,event,class
BodyInserters -> public static <T, S extends Publisher<T>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(S eventsPublisher, 			Class<T> eventClass);1493390543;Return a {@code BodyInserter} that writes the given {@code Publisher} publisher as_Server-Sent Events._@param eventsPublisher the publisher to write to the response body as Server-Sent Events_@param eventClass the class of event contained in the publisher_@param <T> the type of the elements contained in the publisher_@return a {@code BodyInserter} that writes the given {@code Publisher} publisher as_Server-Sent Events_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<T>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(S eventsPublisher,_			Class<T> eventClass) {__		Assert.notNull(eventsPublisher, "'eventsPublisher' must not be null")__		Assert.notNull(eventClass, "'eventClass' must not be null")__		return fromServerSentEvents(eventsPublisher, ResolvableType.forClass(eventClass))__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,publisher,as,server,sent,events,param,events,publisher,the,publisher,to,write,to,the,response,body,as,server,sent,events,param,event,class,the,class,of,event,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,return,a,code,body,inserter,that,writes,the,given,code,publisher,publisher,as,server,sent,events,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,class,t,event,class,assert,not,null,events,publisher,events,publisher,must,not,be,null,assert,not,null,event,class,event,class,must,not,be,null,return,from,server,sent,events,events,publisher,resolvable,type,for,class,event,class
BodyInserters -> public static <T, S extends Publisher<T>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(S eventsPublisher, 			Class<T> eventClass);1493676008;Return a {@code BodyInserter} that writes the given {@code Publisher} publisher as_Server-Sent Events._@param eventsPublisher the publisher to write to the response body as Server-Sent Events_@param eventClass the class of event contained in the publisher_@param <T> the type of the elements contained in the publisher_@return a {@code BodyInserter} that writes the given {@code Publisher} publisher as_Server-Sent Events_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<T>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(S eventsPublisher,_			Class<T> eventClass) {__		Assert.notNull(eventsPublisher, "'eventsPublisher' must not be null")__		Assert.notNull(eventClass, "'eventClass' must not be null")__		return fromServerSentEvents(eventsPublisher, ResolvableType.forClass(eventClass))__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,publisher,as,server,sent,events,param,events,publisher,the,publisher,to,write,to,the,response,body,as,server,sent,events,param,event,class,the,class,of,event,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,return,a,code,body,inserter,that,writes,the,given,code,publisher,publisher,as,server,sent,events,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,class,t,event,class,assert,not,null,events,publisher,events,publisher,must,not,be,null,assert,not,null,event,class,event,class,must,not,be,null,return,from,server,sent,events,events,publisher,resolvable,type,for,class,event,class
BodyInserters -> public static <T, S extends Publisher<T>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(S eventsPublisher, 			Class<T> eventClass);1495626483;Return a {@code BodyInserter} that writes the given {@code Publisher} publisher as_Server-Sent Events._@param eventsPublisher the publisher to write to the response body as Server-Sent Events_@param eventClass the class of event contained in the publisher_@param <T> the type of the elements contained in the publisher_@return a {@code BodyInserter} that writes the given {@code Publisher} publisher as_Server-Sent Events_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<T>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(S eventsPublisher,_			Class<T> eventClass) {__		Assert.notNull(eventsPublisher, "'eventsPublisher' must not be null")__		Assert.notNull(eventClass, "'eventClass' must not be null")__		return fromServerSentEvents(eventsPublisher, ResolvableType.forClass(eventClass))__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,publisher,as,server,sent,events,param,events,publisher,the,publisher,to,write,to,the,response,body,as,server,sent,events,param,event,class,the,class,of,event,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,return,a,code,body,inserter,that,writes,the,given,code,publisher,publisher,as,server,sent,events,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,class,t,event,class,assert,not,null,events,publisher,events,publisher,must,not,be,null,assert,not,null,event,class,event,class,must,not,be,null,return,from,server,sent,events,events,publisher,resolvable,type,for,class,event,class
BodyInserters -> public static <T, S extends Publisher<T>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(S eventsPublisher, 			Class<T> eventClass);1496837955;Return a {@code BodyInserter} that writes the given {@code Publisher} publisher as_Server-Sent Events._@param eventsPublisher the publisher to write to the response body as Server-Sent Events_@param eventClass the class of event contained in the publisher_@param <T> the type of the elements contained in the publisher_@return a {@code BodyInserter} that writes the given {@code Publisher} publisher as_Server-Sent Events_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<T>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(S eventsPublisher,_			Class<T> eventClass) {__		Assert.notNull(eventsPublisher, "'eventsPublisher' must not be null")__		Assert.notNull(eventClass, "'eventClass' must not be null")__		return fromServerSentEvents(eventsPublisher, ResolvableType.forClass(eventClass))__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,publisher,as,server,sent,events,param,events,publisher,the,publisher,to,write,to,the,response,body,as,server,sent,events,param,event,class,the,class,of,event,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,return,a,code,body,inserter,that,writes,the,given,code,publisher,publisher,as,server,sent,events,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,class,t,event,class,assert,not,null,events,publisher,events,publisher,must,not,be,null,assert,not,null,event,class,event,class,must,not,be,null,return,from,server,sent,events,events,publisher,resolvable,type,for,class,event,class
BodyInserters -> public static <T, S extends Publisher<T>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(S eventsPublisher, 			Class<T> eventClass);1497007755;Return a {@code BodyInserter} that writes the given {@code Publisher} publisher as_Server-Sent Events._@param eventsPublisher the publisher to write to the response body as Server-Sent Events_@param eventClass the class of event contained in the publisher_@param <T> the type of the elements contained in the publisher_@return a {@code BodyInserter} that writes the given {@code Publisher} publisher as_Server-Sent Events_@see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>;public static <T, S extends Publisher<T>> BodyInserter<S, ServerHttpResponse> fromServerSentEvents(S eventsPublisher,_			Class<T> eventClass) {__		Assert.notNull(eventsPublisher, "'eventsPublisher' must not be null")__		Assert.notNull(eventClass, "'eventClass' must not be null")__		return fromServerSentEvents(eventsPublisher, ResolvableType.forClass(eventClass))__	};return,a,code,body,inserter,that,writes,the,given,code,publisher,publisher,as,server,sent,events,param,events,publisher,the,publisher,to,write,to,the,response,body,as,server,sent,events,param,event,class,the,class,of,event,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,return,a,code,body,inserter,that,writes,the,given,code,publisher,publisher,as,server,sent,events,see,a,href,https,www,w3,org,tr,eventsource,server,sent,events,w3c,recommendation,a;public,static,t,s,extends,publisher,t,body,inserter,s,server,http,response,from,server,sent,events,s,events,publisher,class,t,event,class,assert,not,null,events,publisher,events,publisher,must,not,be,null,assert,not,null,event,class,event,class,must,not,be,null,return,from,server,sent,events,events,publisher,resolvable,type,for,class,event,class
BodyInserters -> @SuppressWarnings("unchecked") 	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty();1485986572;Return an empty {@code BodyInserter} that writes nothing._@return an empty {@code BodyInserter};@SuppressWarnings("unchecked")_	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty() {_		return (BodyInserter<T, ReactiveHttpOutputMessage>)EMPTY__	};return,an,empty,code,body,inserter,that,writes,nothing,return,an,empty,code,body,inserter;suppress,warnings,unchecked,public,static,t,body,inserter,t,reactive,http,output,message,empty,return,body,inserter,t,reactive,http,output,message,empty
BodyInserters -> @SuppressWarnings("unchecked") 	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty();1486657400;Return an empty {@code BodyInserter} that writes nothing._@return an empty {@code BodyInserter};@SuppressWarnings("unchecked")_	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty() {_		return (BodyInserter<T, ReactiveHttpOutputMessage>)EMPTY__	};return,an,empty,code,body,inserter,that,writes,nothing,return,an,empty,code,body,inserter;suppress,warnings,unchecked,public,static,t,body,inserter,t,reactive,http,output,message,empty,return,body,inserter,t,reactive,http,output,message,empty
BodyInserters -> @SuppressWarnings("unchecked") 	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty();1486720600;Return an empty {@code BodyInserter} that writes nothing._@return an empty {@code BodyInserter};@SuppressWarnings("unchecked")_	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty() {_		return (BodyInserter<T, ReactiveHttpOutputMessage>)EMPTY__	};return,an,empty,code,body,inserter,that,writes,nothing,return,an,empty,code,body,inserter;suppress,warnings,unchecked,public,static,t,body,inserter,t,reactive,http,output,message,empty,return,body,inserter,t,reactive,http,output,message,empty
BodyInserters -> @SuppressWarnings("unchecked") 	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty();1487687241;Return an empty {@code BodyInserter} that writes nothing._@return an empty {@code BodyInserter};@SuppressWarnings("unchecked")_	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty() {_		return (BodyInserter<T, ReactiveHttpOutputMessage>)EMPTY__	};return,an,empty,code,body,inserter,that,writes,nothing,return,an,empty,code,body,inserter;suppress,warnings,unchecked,public,static,t,body,inserter,t,reactive,http,output,message,empty,return,body,inserter,t,reactive,http,output,message,empty
BodyInserters -> @SuppressWarnings("unchecked") 	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty();1491385016;Return an empty {@code BodyInserter} that writes nothing._@return an empty {@code BodyInserter};@SuppressWarnings("unchecked")_	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty() {_		return (BodyInserter<T, ReactiveHttpOutputMessage>)EMPTY__	};return,an,empty,code,body,inserter,that,writes,nothing,return,an,empty,code,body,inserter;suppress,warnings,unchecked,public,static,t,body,inserter,t,reactive,http,output,message,empty,return,body,inserter,t,reactive,http,output,message,empty
BodyInserters -> @SuppressWarnings("unchecked") 	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty();1493390543;Return an empty {@code BodyInserter} that writes nothing._@return an empty {@code BodyInserter};@SuppressWarnings("unchecked")_	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty() {_		return (BodyInserter<T, ReactiveHttpOutputMessage>)EMPTY__	};return,an,empty,code,body,inserter,that,writes,nothing,return,an,empty,code,body,inserter;suppress,warnings,unchecked,public,static,t,body,inserter,t,reactive,http,output,message,empty,return,body,inserter,t,reactive,http,output,message,empty
BodyInserters -> @SuppressWarnings("unchecked") 	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty();1493676008;Return an empty {@code BodyInserter} that writes nothing._@return an empty {@code BodyInserter};@SuppressWarnings("unchecked")_	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty() {_		return (BodyInserter<T, ReactiveHttpOutputMessage>)EMPTY__	};return,an,empty,code,body,inserter,that,writes,nothing,return,an,empty,code,body,inserter;suppress,warnings,unchecked,public,static,t,body,inserter,t,reactive,http,output,message,empty,return,body,inserter,t,reactive,http,output,message,empty
BodyInserters -> @SuppressWarnings("unchecked") 	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty();1495626483;Return an empty {@code BodyInserter} that writes nothing._@return an empty {@code BodyInserter};@SuppressWarnings("unchecked")_	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty() {_		return (BodyInserter<T, ReactiveHttpOutputMessage>)EMPTY__	};return,an,empty,code,body,inserter,that,writes,nothing,return,an,empty,code,body,inserter;suppress,warnings,unchecked,public,static,t,body,inserter,t,reactive,http,output,message,empty,return,body,inserter,t,reactive,http,output,message,empty
BodyInserters -> @SuppressWarnings("unchecked") 	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty();1496837955;Return an empty {@code BodyInserter} that writes nothing._@return an empty {@code BodyInserter};@SuppressWarnings("unchecked")_	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty() {_		return (BodyInserter<T, ReactiveHttpOutputMessage>)EMPTY__	};return,an,empty,code,body,inserter,that,writes,nothing,return,an,empty,code,body,inserter;suppress,warnings,unchecked,public,static,t,body,inserter,t,reactive,http,output,message,empty,return,body,inserter,t,reactive,http,output,message,empty
BodyInserters -> @SuppressWarnings("unchecked") 	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty();1497007755;Return an empty {@code BodyInserter} that writes nothing._@return an empty {@code BodyInserter};@SuppressWarnings("unchecked")_	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty() {_		return (BodyInserter<T, ReactiveHttpOutputMessage>)EMPTY__	};return,an,empty,code,body,inserter,that,writes,nothing,return,an,empty,code,body,inserter;suppress,warnings,unchecked,public,static,t,body,inserter,t,reactive,http,output,message,empty,return,body,inserter,t,reactive,http,output,message,empty
BodyInserters -> @SuppressWarnings("unchecked") 	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty();1501238239;Return an empty {@code BodyInserter} that writes nothing._@return an empty {@code BodyInserter};@SuppressWarnings("unchecked")_	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty() {_		return (BodyInserter<T, ReactiveHttpOutputMessage>)EMPTY__	};return,an,empty,code,body,inserter,that,writes,nothing,return,an,empty,code,body,inserter;suppress,warnings,unchecked,public,static,t,body,inserter,t,reactive,http,output,message,empty,return,body,inserter,t,reactive,http,output,message,empty
BodyInserters -> @SuppressWarnings("unchecked") 	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty();1509456069;Return an empty {@code BodyInserter} that writes nothing._@return an empty {@code BodyInserter};@SuppressWarnings("unchecked")_	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty() {_		return (BodyInserter<T, ReactiveHttpOutputMessage>)EMPTY__	};return,an,empty,code,body,inserter,that,writes,nothing,return,an,empty,code,body,inserter;suppress,warnings,unchecked,public,static,t,body,inserter,t,reactive,http,output,message,empty,return,body,inserter,t,reactive,http,output,message,empty
BodyInserters -> @SuppressWarnings("unchecked") 	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty();1509538672;Return an empty {@code BodyInserter} that writes nothing._@return an empty {@code BodyInserter};@SuppressWarnings("unchecked")_	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty() {_		return (BodyInserter<T, ReactiveHttpOutputMessage>)EMPTY__	};return,an,empty,code,body,inserter,that,writes,nothing,return,an,empty,code,body,inserter;suppress,warnings,unchecked,public,static,t,body,inserter,t,reactive,http,output,message,empty,return,body,inserter,t,reactive,http,output,message,empty
BodyInserters -> @SuppressWarnings("unchecked") 	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty();1509980418;Return an empty {@code BodyInserter} that writes nothing._@return an empty {@code BodyInserter};@SuppressWarnings("unchecked")_	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty() {_		return (BodyInserter<T, ReactiveHttpOutputMessage>)EMPTY__	};return,an,empty,code,body,inserter,that,writes,nothing,return,an,empty,code,body,inserter;suppress,warnings,unchecked,public,static,t,body,inserter,t,reactive,http,output,message,empty,return,body,inserter,t,reactive,http,output,message,empty
BodyInserters -> @SuppressWarnings("unchecked") 	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty();1510004038;Return an empty {@code BodyInserter} that writes nothing._@return an empty {@code BodyInserter};@SuppressWarnings("unchecked")_	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty() {_		return (BodyInserter<T, ReactiveHttpOutputMessage>)EMPTY__	};return,an,empty,code,body,inserter,that,writes,nothing,return,an,empty,code,body,inserter;suppress,warnings,unchecked,public,static,t,body,inserter,t,reactive,http,output,message,empty,return,body,inserter,t,reactive,http,output,message,empty
BodyInserters -> @SuppressWarnings("unchecked") 	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty();1510933433;Return an empty {@code BodyInserter} that writes nothing._@return an empty {@code BodyInserter};@SuppressWarnings("unchecked")_	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty() {_		return (BodyInserter<T, ReactiveHttpOutputMessage>)EMPTY__	};return,an,empty,code,body,inserter,that,writes,nothing,return,an,empty,code,body,inserter;suppress,warnings,unchecked,public,static,t,body,inserter,t,reactive,http,output,message,empty,return,body,inserter,t,reactive,http,output,message,empty
BodyInserters -> @SuppressWarnings("unchecked") 	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty();1513874461;Return an empty {@code BodyInserter} that writes nothing._@return an empty {@code BodyInserter};@SuppressWarnings("unchecked")_	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty() {_		return (BodyInserter<T, ReactiveHttpOutputMessage>)EMPTY__	};return,an,empty,code,body,inserter,that,writes,nothing,return,an,empty,code,body,inserter;suppress,warnings,unchecked,public,static,t,body,inserter,t,reactive,http,output,message,empty,return,body,inserter,t,reactive,http,output,message,empty
BodyInserters -> @SuppressWarnings("unchecked") 	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty();1515178754;Return an empty {@code BodyInserter} that writes nothing._@return an empty {@code BodyInserter};@SuppressWarnings("unchecked")_	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty() {_		return (BodyInserter<T, ReactiveHttpOutputMessage>)EMPTY__	};return,an,empty,code,body,inserter,that,writes,nothing,return,an,empty,code,body,inserter;suppress,warnings,unchecked,public,static,t,body,inserter,t,reactive,http,output,message,empty,return,body,inserter,t,reactive,http,output,message,empty
BodyInserters -> @SuppressWarnings("unchecked") 	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty();1515603291;Return an empty {@code BodyInserter} that writes nothing._@return an empty {@code BodyInserter};@SuppressWarnings("unchecked")_	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty() {_		return (BodyInserter<T, ReactiveHttpOutputMessage>)EMPTY__	};return,an,empty,code,body,inserter,that,writes,nothing,return,an,empty,code,body,inserter;suppress,warnings,unchecked,public,static,t,body,inserter,t,reactive,http,output,message,empty,return,body,inserter,t,reactive,http,output,message,empty
BodyInserters -> @SuppressWarnings("unchecked") 	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty();1521231485;Return an empty {@code BodyInserter} that writes nothing._@return an empty {@code BodyInserter};@SuppressWarnings("unchecked")_	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty() {_		return (BodyInserter<T, ReactiveHttpOutputMessage>)EMPTY__	};return,an,empty,code,body,inserter,that,writes,nothing,return,an,empty,code,body,inserter;suppress,warnings,unchecked,public,static,t,body,inserter,t,reactive,http,output,message,empty,return,body,inserter,t,reactive,http,output,message,empty
BodyInserters -> @SuppressWarnings("unchecked") 	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty();1522103912;Return an empty {@code BodyInserter} that writes nothing._@return an empty {@code BodyInserter};@SuppressWarnings("unchecked")_	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty() {_		return (BodyInserter<T, ReactiveHttpOutputMessage>)EMPTY__	};return,an,empty,code,body,inserter,that,writes,nothing,return,an,empty,code,body,inserter;suppress,warnings,unchecked,public,static,t,body,inserter,t,reactive,http,output,message,empty,return,body,inserter,t,reactive,http,output,message,empty
BodyInserters -> @SuppressWarnings("unchecked") 	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty();1524865018;Return an empty {@code BodyInserter} that writes nothing._@return an empty {@code BodyInserter};@SuppressWarnings("unchecked")_	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty() {_		return (BodyInserter<T, ReactiveHttpOutputMessage>)EMPTY__	};return,an,empty,code,body,inserter,that,writes,nothing,return,an,empty,code,body,inserter;suppress,warnings,unchecked,public,static,t,body,inserter,t,reactive,http,output,message,empty,return,body,inserter,t,reactive,http,output,message,empty
BodyInserters -> @SuppressWarnings("unchecked") 	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty();1526354196;Return an empty {@code BodyInserter} that writes nothing._@return an empty {@code BodyInserter};@SuppressWarnings("unchecked")_	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty() {_		return (BodyInserter<T, ReactiveHttpOutputMessage>)EMPTY__	};return,an,empty,code,body,inserter,that,writes,nothing,return,an,empty,code,body,inserter;suppress,warnings,unchecked,public,static,t,body,inserter,t,reactive,http,output,message,empty,return,body,inserter,t,reactive,http,output,message,empty
BodyInserters -> @SuppressWarnings("unchecked") 	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty();1527269520;Inserter that does not write._@return the inserter;@SuppressWarnings("unchecked")_	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty() {_		return (BodyInserter<T, ReactiveHttpOutputMessage>) EMPTY_INSERTER__	};inserter,that,does,not,write,return,the,inserter;suppress,warnings,unchecked,public,static,t,body,inserter,t,reactive,http,output,message,empty,return,body,inserter,t,reactive,http,output,message
BodyInserters -> @SuppressWarnings("unchecked") 	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty();1527341063;Inserter that does not write._@return the inserter;@SuppressWarnings("unchecked")_	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty() {_		return (BodyInserter<T, ReactiveHttpOutputMessage>) EMPTY_INSERTER__	};inserter,that,does,not,write,return,the,inserter;suppress,warnings,unchecked,public,static,t,body,inserter,t,reactive,http,output,message,empty,return,body,inserter,t,reactive,http,output,message
BodyInserters -> @SuppressWarnings("unchecked") 	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty();1530174524;Inserter that does not write._@return the inserter;@SuppressWarnings("unchecked")_	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty() {_		return (BodyInserter<T, ReactiveHttpOutputMessage>) EMPTY_INSERTER__	};inserter,that,does,not,write,return,the,inserter;suppress,warnings,unchecked,public,static,t,body,inserter,t,reactive,http,output,message,empty,return,body,inserter,t,reactive,http,output,message
BodyInserters -> @SuppressWarnings("unchecked") 	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty();1530793695;Inserter that does not write._@return the inserter;@SuppressWarnings("unchecked")_	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty() {_		return (BodyInserter<T, ReactiveHttpOutputMessage>) EMPTY_INSERTER__	};inserter,that,does,not,write,return,the,inserter;suppress,warnings,unchecked,public,static,t,body,inserter,t,reactive,http,output,message,empty,return,body,inserter,t,reactive,http,output,message
BodyInserters -> @SuppressWarnings("unchecked") 	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty();1542037423;Inserter that does not write._@return the inserter;@SuppressWarnings("unchecked")_	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty() {_		return (BodyInserter<T, ReactiveHttpOutputMessage>) EMPTY_INSERTER__	};inserter,that,does,not,write,return,the,inserter;suppress,warnings,unchecked,public,static,t,body,inserter,t,reactive,http,output,message,empty,return,body,inserter,t,reactive,http,output,message
BodyInserters -> @SuppressWarnings("unchecked") 	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty();1542613849;Inserter that does not write._@return the inserter;@SuppressWarnings("unchecked")_	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty() {_		return (BodyInserter<T, ReactiveHttpOutputMessage>) EMPTY_INSERTER__	};inserter,that,does,not,write,return,the,inserter;suppress,warnings,unchecked,public,static,t,body,inserter,t,reactive,http,output,message,empty,return,body,inserter,t,reactive,http,output,message
BodyInserters -> @SuppressWarnings("unchecked") 	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty();1542907316;Inserter that does not write._@return the inserter;@SuppressWarnings("unchecked")_	public static <T> BodyInserter<T, ReactiveHttpOutputMessage> empty() {_		return (BodyInserter<T, ReactiveHttpOutputMessage>) EMPTY_INSERTER__	};inserter,that,does,not,write,return,the,inserter;suppress,warnings,unchecked,public,static,t,body,inserter,t,reactive,http,output,message,empty,return,body,inserter,t,reactive,http,output,message
BodyInserters -> MultipartInserter -> <T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher, 				Class<T> elementClass)_;1521231485;Add an asynchronous part with {@link Publisher}-based content._@param name the name of the part to add_@param publisher the part contents_@param elementClass the type of elements contained in the publisher_@return this inserter for adding more parts;<T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher,_				Class<T> elementClass)_;add,an,asynchronous,part,with,link,publisher,based,content,param,name,the,name,of,the,part,to,add,param,publisher,the,part,contents,param,element,class,the,type,of,elements,contained,in,the,publisher,return,this,inserter,for,adding,more,parts;t,p,extends,publisher,t,multipart,inserter,with,publisher,string,name,p,publisher,class,t,element,class
BodyInserters -> MultipartInserter -> <T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher, 				Class<T> elementClass)_;1522103912;Add an asynchronous part with {@link Publisher}-based content._@param name the name of the part to add_@param publisher the part contents_@param elementClass the type of elements contained in the publisher_@return this inserter for adding more parts;<T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher,_				Class<T> elementClass)_;add,an,asynchronous,part,with,link,publisher,based,content,param,name,the,name,of,the,part,to,add,param,publisher,the,part,contents,param,element,class,the,type,of,elements,contained,in,the,publisher,return,this,inserter,for,adding,more,parts;t,p,extends,publisher,t,multipart,inserter,with,publisher,string,name,p,publisher,class,t,element,class
BodyInserters -> MultipartInserter -> <T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher, 				Class<T> elementClass)_;1524865018;Add an asynchronous part with {@link Publisher}-based content._@param name the name of the part to add_@param publisher the part contents_@param elementClass the type of elements contained in the publisher_@return this inserter for adding more parts;<T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher,_				Class<T> elementClass)_;add,an,asynchronous,part,with,link,publisher,based,content,param,name,the,name,of,the,part,to,add,param,publisher,the,part,contents,param,element,class,the,type,of,elements,contained,in,the,publisher,return,this,inserter,for,adding,more,parts;t,p,extends,publisher,t,multipart,inserter,with,publisher,string,name,p,publisher,class,t,element,class
BodyInserters -> MultipartInserter -> <T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher, 				Class<T> elementClass)_;1526354196;Add an asynchronous part with {@link Publisher}-based content._@param name the name of the part to add_@param publisher the part contents_@param elementClass the type of elements contained in the publisher_@return this inserter for adding more parts;<T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher,_				Class<T> elementClass)_;add,an,asynchronous,part,with,link,publisher,based,content,param,name,the,name,of,the,part,to,add,param,publisher,the,part,contents,param,element,class,the,type,of,elements,contained,in,the,publisher,return,this,inserter,for,adding,more,parts;t,p,extends,publisher,t,multipart,inserter,with,publisher,string,name,p,publisher,class,t,element,class
BodyInserters -> MultipartInserter -> <T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher, 				Class<T> elementClass)_;1527269520;Add an asynchronous part with {@link Publisher}-based content._@param name the name of the part to add_@param publisher the part contents_@param elementClass the type of elements contained in the publisher_@return this inserter for adding more parts;<T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher,_				Class<T> elementClass)_;add,an,asynchronous,part,with,link,publisher,based,content,param,name,the,name,of,the,part,to,add,param,publisher,the,part,contents,param,element,class,the,type,of,elements,contained,in,the,publisher,return,this,inserter,for,adding,more,parts;t,p,extends,publisher,t,multipart,inserter,with,publisher,string,name,p,publisher,class,t,element,class
BodyInserters -> MultipartInserter -> <T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher, 				Class<T> elementClass)_;1527341063;Add an asynchronous part with {@link Publisher}-based content._@param name the name of the part to add_@param publisher the part contents_@param elementClass the type of elements contained in the publisher_@return this inserter for adding more parts;<T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher,_				Class<T> elementClass)_;add,an,asynchronous,part,with,link,publisher,based,content,param,name,the,name,of,the,part,to,add,param,publisher,the,part,contents,param,element,class,the,type,of,elements,contained,in,the,publisher,return,this,inserter,for,adding,more,parts;t,p,extends,publisher,t,multipart,inserter,with,publisher,string,name,p,publisher,class,t,element,class
BodyInserters -> MultipartInserter -> <T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher, 				Class<T> elementClass)_;1530174524;Add an asynchronous part with {@link Publisher}-based content._@param name the name of the part to add_@param publisher the part contents_@param elementClass the type of elements contained in the publisher_@return this inserter for adding more parts;<T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher,_				Class<T> elementClass)_;add,an,asynchronous,part,with,link,publisher,based,content,param,name,the,name,of,the,part,to,add,param,publisher,the,part,contents,param,element,class,the,type,of,elements,contained,in,the,publisher,return,this,inserter,for,adding,more,parts;t,p,extends,publisher,t,multipart,inserter,with,publisher,string,name,p,publisher,class,t,element,class
BodyInserters -> MultipartInserter -> <T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher, 				Class<T> elementClass)_;1530793695;Add an asynchronous part with {@link Publisher}-based content._@param name the name of the part to add_@param publisher the part contents_@param elementClass the type of elements contained in the publisher_@return this inserter for adding more parts;<T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher,_				Class<T> elementClass)_;add,an,asynchronous,part,with,link,publisher,based,content,param,name,the,name,of,the,part,to,add,param,publisher,the,part,contents,param,element,class,the,type,of,elements,contained,in,the,publisher,return,this,inserter,for,adding,more,parts;t,p,extends,publisher,t,multipart,inserter,with,publisher,string,name,p,publisher,class,t,element,class
BodyInserters -> MultipartInserter -> <T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher, 				Class<T> elementClass)_;1542037423;Add an asynchronous part with {@link Publisher}-based content._@param name the name of the part to add_@param publisher the part contents_@param elementClass the type of elements contained in the publisher_@return this inserter for adding more parts;<T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher,_				Class<T> elementClass)_;add,an,asynchronous,part,with,link,publisher,based,content,param,name,the,name,of,the,part,to,add,param,publisher,the,part,contents,param,element,class,the,type,of,elements,contained,in,the,publisher,return,this,inserter,for,adding,more,parts;t,p,extends,publisher,t,multipart,inserter,with,publisher,string,name,p,publisher,class,t,element,class
BodyInserters -> MultipartInserter -> <T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher, 				Class<T> elementClass)_;1542613849;Add an asynchronous part with {@link Publisher}-based content._@param name the name of the part to add_@param publisher the part contents_@param elementClass the type of elements contained in the publisher_@return this inserter for adding more parts;<T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher,_				Class<T> elementClass)_;add,an,asynchronous,part,with,link,publisher,based,content,param,name,the,name,of,the,part,to,add,param,publisher,the,part,contents,param,element,class,the,type,of,elements,contained,in,the,publisher,return,this,inserter,for,adding,more,parts;t,p,extends,publisher,t,multipart,inserter,with,publisher,string,name,p,publisher,class,t,element,class
BodyInserters -> MultipartInserter -> <T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher, 				Class<T> elementClass)_;1542907316;Add an asynchronous part with {@link Publisher}-based content._@param name the name of the part to add_@param publisher the part contents_@param elementClass the type of elements contained in the publisher_@return this inserter for adding more parts;<T, P extends Publisher<T>> MultipartInserter withPublisher(String name, P publisher,_				Class<T> elementClass)_;add,an,asynchronous,part,with,link,publisher,based,content,param,name,the,name,of,the,part,to,add,param,publisher,the,part,contents,param,element,class,the,type,of,elements,contained,in,the,publisher,return,this,inserter,for,adding,more,parts;t,p,extends,publisher,t,multipart,inserter,with,publisher,string,name,p,publisher,class,t,element,class
BodyInserters -> public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData( 			String name, P publisher, Class<T> elementClass);1524865018;Return a {@link MultipartInserter} that writes the given asynchronous parts,_as multipart data._<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}._@param name the part name_@param publisher the publisher that forms the part value_@param elementClass the class contained in the {@code publisher}_@return the inserter that allows adding more parts;public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(_			String name, P publisher, Class<T> elementClass) {__		return new DefaultMultipartInserter().withPublisher(name, publisher, elementClass)__	};return,a,link,multipart,inserter,that,writes,the,given,asynchronous,parts,as,multipart,data,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,name,the,part,name,param,publisher,the,publisher,that,forms,the,part,value,param,element,class,the,class,contained,in,the,code,publisher,return,the,inserter,that,allows,adding,more,parts;public,static,t,p,extends,publisher,t,multipart,inserter,from,multipart,async,data,string,name,p,publisher,class,t,element,class,return,new,default,multipart,inserter,with,publisher,name,publisher,element,class
BodyInserters -> public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData( 			String name, P publisher, Class<T> elementClass);1526354196;Return a {@link MultipartInserter} that writes the given asynchronous parts,_as multipart data._<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}._@param name the part name_@param publisher the publisher that forms the part value_@param elementClass the class contained in the {@code publisher}_@return the inserter that allows adding more parts;public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(_			String name, P publisher, Class<T> elementClass) {__		return new DefaultMultipartInserter().withPublisher(name, publisher, elementClass)__	};return,a,link,multipart,inserter,that,writes,the,given,asynchronous,parts,as,multipart,data,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,name,the,part,name,param,publisher,the,publisher,that,forms,the,part,value,param,element,class,the,class,contained,in,the,code,publisher,return,the,inserter,that,allows,adding,more,parts;public,static,t,p,extends,publisher,t,multipart,inserter,from,multipart,async,data,string,name,p,publisher,class,t,element,class,return,new,default,multipart,inserter,with,publisher,name,publisher,element,class
BodyInserters -> public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData( 			String name, P publisher, Class<T> elementClass);1527269520;Return a {@link MultipartInserter} to write the given asynchronous parts,_as multipart data._<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}._@param name the part name_@param publisher the publisher that forms the part value_@param elementClass the class contained in the {@code publisher}_@return the inserter that allows adding more parts;public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(_			String name, P publisher, Class<T> elementClass) {__		return new DefaultMultipartInserter().withPublisher(name, publisher, elementClass)__	};return,a,link,multipart,inserter,to,write,the,given,asynchronous,parts,as,multipart,data,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,name,the,part,name,param,publisher,the,publisher,that,forms,the,part,value,param,element,class,the,class,contained,in,the,code,publisher,return,the,inserter,that,allows,adding,more,parts;public,static,t,p,extends,publisher,t,multipart,inserter,from,multipart,async,data,string,name,p,publisher,class,t,element,class,return,new,default,multipart,inserter,with,publisher,name,publisher,element,class
BodyInserters -> public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData( 			String name, P publisher, Class<T> elementClass);1527341063;Return a {@link MultipartInserter} to write the given asynchronous parts,_as multipart data._<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}._@param name the part name_@param publisher the publisher that forms the part value_@param elementClass the class contained in the {@code publisher}_@return the inserter that allows adding more parts;public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(_			String name, P publisher, Class<T> elementClass) {__		return new DefaultMultipartInserter().withPublisher(name, publisher, elementClass)__	};return,a,link,multipart,inserter,to,write,the,given,asynchronous,parts,as,multipart,data,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,name,the,part,name,param,publisher,the,publisher,that,forms,the,part,value,param,element,class,the,class,contained,in,the,code,publisher,return,the,inserter,that,allows,adding,more,parts;public,static,t,p,extends,publisher,t,multipart,inserter,from,multipart,async,data,string,name,p,publisher,class,t,element,class,return,new,default,multipart,inserter,with,publisher,name,publisher,element,class
BodyInserters -> public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData( 			String name, P publisher, Class<T> elementClass);1530174524;Return a {@link MultipartInserter} to write the given asynchronous parts,_as multipart data._<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}._@param name the part name_@param publisher the publisher that forms the part value_@param elementClass the class contained in the {@code publisher}_@return the inserter that allows adding more parts;public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(_			String name, P publisher, Class<T> elementClass) {__		return new DefaultMultipartInserter().withPublisher(name, publisher, elementClass)__	};return,a,link,multipart,inserter,to,write,the,given,asynchronous,parts,as,multipart,data,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,name,the,part,name,param,publisher,the,publisher,that,forms,the,part,value,param,element,class,the,class,contained,in,the,code,publisher,return,the,inserter,that,allows,adding,more,parts;public,static,t,p,extends,publisher,t,multipart,inserter,from,multipart,async,data,string,name,p,publisher,class,t,element,class,return,new,default,multipart,inserter,with,publisher,name,publisher,element,class
BodyInserters -> public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData( 			String name, P publisher, Class<T> elementClass);1530793695;Return a {@link MultipartInserter} to write the given asynchronous parts,_as multipart data._<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}._@param name the part name_@param publisher the publisher that forms the part value_@param elementClass the class contained in the {@code publisher}_@return the inserter that allows adding more parts;public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(_			String name, P publisher, Class<T> elementClass) {__		return new DefaultMultipartInserter().withPublisher(name, publisher, elementClass)__	};return,a,link,multipart,inserter,to,write,the,given,asynchronous,parts,as,multipart,data,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,name,the,part,name,param,publisher,the,publisher,that,forms,the,part,value,param,element,class,the,class,contained,in,the,code,publisher,return,the,inserter,that,allows,adding,more,parts;public,static,t,p,extends,publisher,t,multipart,inserter,from,multipart,async,data,string,name,p,publisher,class,t,element,class,return,new,default,multipart,inserter,with,publisher,name,publisher,element,class
BodyInserters -> public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData( 			String name, P publisher, Class<T> elementClass);1542037423;Return a {@link MultipartInserter} to write the given asynchronous parts,_as multipart data._<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}._@param name the part name_@param publisher the publisher that forms the part value_@param elementClass the class contained in the {@code publisher}_@return the inserter that allows adding more parts;public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(_			String name, P publisher, Class<T> elementClass) {__		return new DefaultMultipartInserter().withPublisher(name, publisher, elementClass)__	};return,a,link,multipart,inserter,to,write,the,given,asynchronous,parts,as,multipart,data,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,name,the,part,name,param,publisher,the,publisher,that,forms,the,part,value,param,element,class,the,class,contained,in,the,code,publisher,return,the,inserter,that,allows,adding,more,parts;public,static,t,p,extends,publisher,t,multipart,inserter,from,multipart,async,data,string,name,p,publisher,class,t,element,class,return,new,default,multipart,inserter,with,publisher,name,publisher,element,class
BodyInserters -> public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData( 			String name, P publisher, Class<T> elementClass);1542613849;Return a {@link MultipartInserter} to write the given asynchronous parts,_as multipart data._<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}._@param name the part name_@param publisher the publisher that forms the part value_@param elementClass the class contained in the {@code publisher}_@return the inserter that allows adding more parts;public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(_			String name, P publisher, Class<T> elementClass) {__		return new DefaultMultipartInserter().withPublisher(name, publisher, elementClass)__	};return,a,link,multipart,inserter,to,write,the,given,asynchronous,parts,as,multipart,data,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,name,the,part,name,param,publisher,the,publisher,that,forms,the,part,value,param,element,class,the,class,contained,in,the,code,publisher,return,the,inserter,that,allows,adding,more,parts;public,static,t,p,extends,publisher,t,multipart,inserter,from,multipart,async,data,string,name,p,publisher,class,t,element,class,return,new,default,multipart,inserter,with,publisher,name,publisher,element,class
BodyInserters -> public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData( 			String name, P publisher, Class<T> elementClass);1542907316;Return a {@link MultipartInserter} to write the given asynchronous parts,_as multipart data._<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}._@param name the part name_@param publisher the publisher that forms the part value_@param elementClass the class contained in the {@code publisher}_@return the inserter that allows adding more parts;public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(_			String name, P publisher, Class<T> elementClass) {__		return new DefaultMultipartInserter().withPublisher(name, publisher, elementClass)__	};return,a,link,multipart,inserter,to,write,the,given,asynchronous,parts,as,multipart,data,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,name,the,part,name,param,publisher,the,publisher,that,forms,the,part,value,param,element,class,the,class,contained,in,the,code,publisher,return,the,inserter,that,allows,adding,more,parts;public,static,t,p,extends,publisher,t,multipart,inserter,from,multipart,async,data,string,name,p,publisher,class,t,element,class,return,new,default,multipart,inserter,with,publisher,name,publisher,element,class
BodyInserters -> public static BodyInserter<MultiValueMap<String, ?>, ClientHttpRequest> fromMultipartData( 			MultiValueMap<String, ?> multipartData);1493390543;Return a {@code BodyInserter} that writes the given {@code MultiValueMap} as Multipart_data._@param multipartData the form data to write to the output message_@return a {@code BodyInserter} that writes form data;public static BodyInserter<MultiValueMap<String, ?>, ClientHttpRequest> fromMultipartData(_			MultiValueMap<String, ?> multipartData) {__		Assert.notNull(multipartData, "'multipartData' must not be null")__		return (outputMessage, context) -> {_			HttpMessageWriter<MultiValueMap<String, ?>> messageWriter =_					findMessageWriter(context, MULTIPART_VALUE_TYPE, MediaType.MULTIPART_FORM_DATA)__			return messageWriter.write(Mono.just(multipartData), FORM_TYPE,_					MediaType.MULTIPART_FORM_DATA, outputMessage, context.hints())__		}__	};return,a,code,body,inserter,that,writes,the,given,code,multi,value,map,as,multipart,data,param,multipart,data,the,form,data,to,write,to,the,output,message,return,a,code,body,inserter,that,writes,form,data;public,static,body,inserter,multi,value,map,string,client,http,request,from,multipart,data,multi,value,map,string,multipart,data,assert,not,null,multipart,data,multipart,data,must,not,be,null,return,output,message,context,http,message,writer,multi,value,map,string,message,writer,find,message,writer,context,media,type,return,message,writer,write,mono,just,multipart,data,media,type,output,message,context,hints
BodyInserters -> public static BodyInserter<MultiValueMap<String, ?>, ClientHttpRequest> fromMultipartData( 			MultiValueMap<String, ?> multipartData);1493676008;Return a {@code BodyInserter} that writes the given {@code MultiValueMap} as Multipart_data._@param multipartData the form data to write to the output message_@return a {@code BodyInserter} that writes form data;public static BodyInserter<MultiValueMap<String, ?>, ClientHttpRequest> fromMultipartData(_			MultiValueMap<String, ?> multipartData) {__		Assert.notNull(multipartData, "'multipartData' must not be null")__		return (outputMessage, context) -> {_			HttpMessageWriter<MultiValueMap<String, ?>> messageWriter =_					findMessageWriter(context, MULTIPART_VALUE_TYPE, MediaType.MULTIPART_FORM_DATA)__			return messageWriter.write(Mono.just(multipartData), FORM_TYPE,_					MediaType.MULTIPART_FORM_DATA, outputMessage, context.hints())__		}__	};return,a,code,body,inserter,that,writes,the,given,code,multi,value,map,as,multipart,data,param,multipart,data,the,form,data,to,write,to,the,output,message,return,a,code,body,inserter,that,writes,form,data;public,static,body,inserter,multi,value,map,string,client,http,request,from,multipart,data,multi,value,map,string,multipart,data,assert,not,null,multipart,data,multipart,data,must,not,be,null,return,output,message,context,http,message,writer,multi,value,map,string,message,writer,find,message,writer,context,media,type,return,message,writer,write,mono,just,multipart,data,media,type,output,message,context,hints
BodyInserters -> public static BodyInserter<MultiValueMap<String, ?>, ClientHttpRequest> fromMultipartData( 			MultiValueMap<String, ?> multipartData);1495626483;Return a {@code BodyInserter} that writes the given {@code MultiValueMap} as Multipart_data._@param multipartData the form data to write to the output message_@return a {@code BodyInserter} that writes form data;public static BodyInserter<MultiValueMap<String, ?>, ClientHttpRequest> fromMultipartData(_			MultiValueMap<String, ?> multipartData) {__		Assert.notNull(multipartData, "'multipartData' must not be null")__		return (outputMessage, context) -> {_			HttpMessageWriter<MultiValueMap<String, ?>> messageWriter =_					findMessageWriter(context, MULTIPART_VALUE_TYPE, MediaType.MULTIPART_FORM_DATA)__			return messageWriter.write(Mono.just(multipartData), FORM_TYPE,_					MediaType.MULTIPART_FORM_DATA, outputMessage, context.hints())__		}__	};return,a,code,body,inserter,that,writes,the,given,code,multi,value,map,as,multipart,data,param,multipart,data,the,form,data,to,write,to,the,output,message,return,a,code,body,inserter,that,writes,form,data;public,static,body,inserter,multi,value,map,string,client,http,request,from,multipart,data,multi,value,map,string,multipart,data,assert,not,null,multipart,data,multipart,data,must,not,be,null,return,output,message,context,http,message,writer,multi,value,map,string,message,writer,find,message,writer,context,media,type,return,message,writer,write,mono,just,multipart,data,media,type,output,message,context,hints
BodyInserters -> public static BodyInserter<MultiValueMap<String, ?>, ClientHttpRequest> fromMultipartData( 			MultiValueMap<String, ?> multipartData);1496837955;Return a {@code BodyInserter} that writes the given {@code MultiValueMap} as Multipart_data._@param multipartData the form data to write to the output message_@return a {@code BodyInserter} that writes form data;public static BodyInserter<MultiValueMap<String, ?>, ClientHttpRequest> fromMultipartData(_			MultiValueMap<String, ?> multipartData) {__		Assert.notNull(multipartData, "'multipartData' must not be null")__		return (outputMessage, context) -> {_			HttpMessageWriter<MultiValueMap<String, ?>> messageWriter =_					findMessageWriter(context, MULTIPART_VALUE_TYPE, MediaType.MULTIPART_FORM_DATA)__			return messageWriter.write(Mono.just(multipartData), FORM_TYPE,_					MediaType.MULTIPART_FORM_DATA, outputMessage, context.hints())__		}__	};return,a,code,body,inserter,that,writes,the,given,code,multi,value,map,as,multipart,data,param,multipart,data,the,form,data,to,write,to,the,output,message,return,a,code,body,inserter,that,writes,form,data;public,static,body,inserter,multi,value,map,string,client,http,request,from,multipart,data,multi,value,map,string,multipart,data,assert,not,null,multipart,data,multipart,data,must,not,be,null,return,output,message,context,http,message,writer,multi,value,map,string,message,writer,find,message,writer,context,media,type,return,message,writer,write,mono,just,multipart,data,media,type,output,message,context,hints
BodyInserters -> public static BodyInserter<MultiValueMap<String, ?>, ClientHttpRequest> fromMultipartData( 			MultiValueMap<String, ?> multipartData);1497007755;Return a {@code BodyInserter} that writes the given {@code MultiValueMap} as Multipart_data._@param multipartData the form data to write to the output message_@return a {@code BodyInserter} that writes form data;public static BodyInserter<MultiValueMap<String, ?>, ClientHttpRequest> fromMultipartData(_			MultiValueMap<String, ?> multipartData) {__		Assert.notNull(multipartData, "'multipartData' must not be null")__		return (outputMessage, context) -> {_			HttpMessageWriter<MultiValueMap<String, ?>> messageWriter =_					findMessageWriter(context, MULTIPART_VALUE_TYPE, MediaType.MULTIPART_FORM_DATA)__			return messageWriter.write(Mono.just(multipartData), FORM_TYPE,_					MediaType.MULTIPART_FORM_DATA, outputMessage, context.hints())__		}__	};return,a,code,body,inserter,that,writes,the,given,code,multi,value,map,as,multipart,data,param,multipart,data,the,form,data,to,write,to,the,output,message,return,a,code,body,inserter,that,writes,form,data;public,static,body,inserter,multi,value,map,string,client,http,request,from,multipart,data,multi,value,map,string,multipart,data,assert,not,null,multipart,data,multipart,data,must,not,be,null,return,output,message,context,http,message,writer,multi,value,map,string,message,writer,find,message,writer,context,media,type,return,message,writer,write,mono,just,multipart,data,media,type,output,message,context,hints
BodyInserters -> public static BodyInserter<MultiValueMap<String, ?>, ClientHttpRequest> fromMultipartData( 			MultiValueMap<String, ?> multipartData);1501238239;Return a {@code BodyInserter} that writes the given {@code MultiValueMap} as Multipart_data._@param multipartData the form data to write to the output message_@return a {@code BodyInserter} that writes form data;public static BodyInserter<MultiValueMap<String, ?>, ClientHttpRequest> fromMultipartData(_			MultiValueMap<String, ?> multipartData) {__		Assert.notNull(multipartData, "'multipartData' must not be null")__		return (outputMessage, context) -> {_			HttpMessageWriter<MultiValueMap<String, ?>> messageWriter =_					findMessageWriter(context, MULTIPART_VALUE_TYPE, MediaType.MULTIPART_FORM_DATA)__			return messageWriter.write(Mono.just(multipartData), FORM_TYPE,_					MediaType.MULTIPART_FORM_DATA, outputMessage, context.hints())__		}__	};return,a,code,body,inserter,that,writes,the,given,code,multi,value,map,as,multipart,data,param,multipart,data,the,form,data,to,write,to,the,output,message,return,a,code,body,inserter,that,writes,form,data;public,static,body,inserter,multi,value,map,string,client,http,request,from,multipart,data,multi,value,map,string,multipart,data,assert,not,null,multipart,data,multipart,data,must,not,be,null,return,output,message,context,http,message,writer,multi,value,map,string,message,writer,find,message,writer,context,media,type,return,message,writer,write,mono,just,multipart,data,media,type,output,message,context,hints
BodyInserters -> public static BodyInserter<MultiValueMap<String, ?>, ClientHttpRequest> fromMultipartData( 			MultiValueMap<String, ?> multipartData);1509456069;Return a {@code BodyInserter} that writes the given {@code MultiValueMap}_as multipart data.__<p><strong>Note:</strong> you can also use the {@code syncBody(Object)}_method in the request builders of both the {@code WebClient} and_{@code WebTestClient}. In that case setting the content type is optional._Just make sure the {@code MultiValueMap} contains at least one non-String_value or otherwise it would be interpreted as plan form data.__@param multipartData the form data to write to the output message_@return a {@code BodyInserter} that writes form data;public static BodyInserter<MultiValueMap<String, ?>, ClientHttpRequest> fromMultipartData(_			MultiValueMap<String, ?> multipartData) {__		Assert.notNull(multipartData, "'multipartData' must not be null")__		return (outputMessage, context) -> {_			HttpMessageWriter<MultiValueMap<String, ?>> messageWriter =_					findMessageWriter(context, MULTIPART_VALUE_TYPE, MediaType.MULTIPART_FORM_DATA)__			return messageWriter.write(Mono.just(multipartData), FORM_TYPE,_					MediaType.MULTIPART_FORM_DATA, outputMessage, context.hints())__		}__	};return,a,code,body,inserter,that,writes,the,given,code,multi,value,map,as,multipart,data,p,strong,note,strong,you,can,also,use,the,code,sync,body,object,method,in,the,request,builders,of,both,the,code,web,client,and,code,web,test,client,in,that,case,setting,the,content,type,is,optional,just,make,sure,the,code,multi,value,map,contains,at,least,one,non,string,value,or,otherwise,it,would,be,interpreted,as,plan,form,data,param,multipart,data,the,form,data,to,write,to,the,output,message,return,a,code,body,inserter,that,writes,form,data;public,static,body,inserter,multi,value,map,string,client,http,request,from,multipart,data,multi,value,map,string,multipart,data,assert,not,null,multipart,data,multipart,data,must,not,be,null,return,output,message,context,http,message,writer,multi,value,map,string,message,writer,find,message,writer,context,media,type,return,message,writer,write,mono,just,multipart,data,media,type,output,message,context,hints
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, ParameterizedTypeReference<T> typeReference);1497007755;Return a {@code BodyInserter} that writes the given {@link Publisher}._@param publisher the publisher to stream to the response body_@param typeReference the type of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, ParameterizedTypeReference<T> typeReference) {__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(typeReference, "'typeReference' must not be null")__		return bodyInserterFor(publisher, ResolvableType.forType(typeReference.getType()))__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,param,publisher,the,publisher,to,stream,to,the,response,body,param,type,reference,the,type,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,parameterized,type,reference,t,type,reference,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,type,reference,type,reference,must,not,be,null,return,body,inserter,for,publisher,resolvable,type,for,type,type,reference,get,type
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, ParameterizedTypeReference<T> typeReference);1501238239;Return a {@code BodyInserter} that writes the given {@link Publisher}._@param publisher the publisher to stream to the response body_@param typeReference the type of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, ParameterizedTypeReference<T> typeReference) {__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(typeReference, "'typeReference' must not be null")__		return bodyInserterFor(publisher, ResolvableType.forType(typeReference.getType()))__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,param,publisher,the,publisher,to,stream,to,the,response,body,param,type,reference,the,type,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,parameterized,type,reference,t,type,reference,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,type,reference,type,reference,must,not,be,null,return,body,inserter,for,publisher,resolvable,type,for,type,type,reference,get,type
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, ParameterizedTypeReference<T> typeReference);1509456069;Return a {@code BodyInserter} that writes the given {@link Publisher}._@param publisher the publisher to stream to the response body_@param typeReference the type of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, ParameterizedTypeReference<T> typeReference) {__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(typeReference, "'typeReference' must not be null")__		return bodyInserterFor(publisher, ResolvableType.forType(typeReference.getType()))__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,param,publisher,the,publisher,to,stream,to,the,response,body,param,type,reference,the,type,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,parameterized,type,reference,t,type,reference,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,type,reference,type,reference,must,not,be,null,return,body,inserter,for,publisher,resolvable,type,for,type,type,reference,get,type
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, ParameterizedTypeReference<T> typeReference);1509538672;Return a {@code BodyInserter} that writes the given {@link Publisher}._@param publisher the publisher to stream to the response body_@param typeReference the type of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, ParameterizedTypeReference<T> typeReference) {__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(typeReference, "'typeReference' must not be null")__		return bodyInserterFor(publisher, ResolvableType.forType(typeReference.getType()))__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,param,publisher,the,publisher,to,stream,to,the,response,body,param,type,reference,the,type,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,parameterized,type,reference,t,type,reference,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,type,reference,type,reference,must,not,be,null,return,body,inserter,for,publisher,resolvable,type,for,type,type,reference,get,type
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, ParameterizedTypeReference<T> typeReference);1509980418;Return a {@code BodyInserter} that writes the given {@link Publisher}._@param publisher the publisher to stream to the response body_@param typeReference the type of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, ParameterizedTypeReference<T> typeReference) {__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(typeReference, "'typeReference' must not be null")__		return bodyInserterFor(publisher, ResolvableType.forType(typeReference.getType()))__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,param,publisher,the,publisher,to,stream,to,the,response,body,param,type,reference,the,type,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,parameterized,type,reference,t,type,reference,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,type,reference,type,reference,must,not,be,null,return,body,inserter,for,publisher,resolvable,type,for,type,type,reference,get,type
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, ParameterizedTypeReference<T> typeReference);1510004038;Return a {@code BodyInserter} that writes the given {@link Publisher}._@param publisher the publisher to stream to the response body_@param typeReference the type of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, ParameterizedTypeReference<T> typeReference) {__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(typeReference, "'typeReference' must not be null")__		return bodyInserterFor(publisher, ResolvableType.forType(typeReference.getType()))__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,param,publisher,the,publisher,to,stream,to,the,response,body,param,type,reference,the,type,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,parameterized,type,reference,t,type,reference,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,type,reference,type,reference,must,not,be,null,return,body,inserter,for,publisher,resolvable,type,for,type,type,reference,get,type
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, ParameterizedTypeReference<T> typeReference);1510933433;Return a {@code BodyInserter} that writes the given {@link Publisher}._<p>Note also that_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}_each offer {@code body} shortcut methods for providing a Publisher as the body._@param publisher the publisher to stream to the response body_@param typeReference the type of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, ParameterizedTypeReference<T> typeReference) {__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(typeReference, "'typeReference' must not be null")__		return bodyInserterFor(publisher, ResolvableType.forType(typeReference.getType()))__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,p,note,also,that,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,each,offer,code,body,shortcut,methods,for,providing,a,publisher,as,the,body,param,publisher,the,publisher,to,stream,to,the,response,body,param,type,reference,the,type,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,parameterized,type,reference,t,type,reference,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,type,reference,type,reference,must,not,be,null,return,body,inserter,for,publisher,resolvable,type,for,type,type,reference,get,type
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, ParameterizedTypeReference<T> typeReference);1513874461;Return a {@code BodyInserter} that writes the given {@link Publisher}._<p>Note also that_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}_each offer {@code body} shortcut methods for providing a Publisher as the body._@param publisher the publisher to stream to the response body_@param typeReference the type of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, ParameterizedTypeReference<T> typeReference) {__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(typeReference, "'typeReference' must not be null")__		return bodyInserterFor(publisher, ResolvableType.forType(typeReference.getType()))__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,p,note,also,that,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,each,offer,code,body,shortcut,methods,for,providing,a,publisher,as,the,body,param,publisher,the,publisher,to,stream,to,the,response,body,param,type,reference,the,type,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,parameterized,type,reference,t,type,reference,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,type,reference,type,reference,must,not,be,null,return,body,inserter,for,publisher,resolvable,type,for,type,type,reference,get,type
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, ParameterizedTypeReference<T> typeReference);1515178754;Return a {@code BodyInserter} that writes the given {@link Publisher}._<p>Note also that_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}_each offer {@code body} shortcut methods for providing a Publisher as the body._@param publisher the publisher to stream to the response body_@param typeReference the type of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, ParameterizedTypeReference<T> typeReference) {__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(typeReference, "'typeReference' must not be null")__		return bodyInserterFor(publisher, ResolvableType.forType(typeReference.getType()))__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,p,note,also,that,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,each,offer,code,body,shortcut,methods,for,providing,a,publisher,as,the,body,param,publisher,the,publisher,to,stream,to,the,response,body,param,type,reference,the,type,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,parameterized,type,reference,t,type,reference,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,type,reference,type,reference,must,not,be,null,return,body,inserter,for,publisher,resolvable,type,for,type,type,reference,get,type
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, ParameterizedTypeReference<T> typeReference);1515603291;Return a {@code BodyInserter} that writes the given {@link Publisher}._<p>Note also that_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}_each offer {@code body} shortcut methods for providing a Publisher as the body._@param publisher the publisher to stream to the response body_@param typeReference the type of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, ParameterizedTypeReference<T> typeReference) {__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(typeReference, "'typeReference' must not be null")__		return bodyInserterFor(publisher, ResolvableType.forType(typeReference.getType()))__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,p,note,also,that,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,each,offer,code,body,shortcut,methods,for,providing,a,publisher,as,the,body,param,publisher,the,publisher,to,stream,to,the,response,body,param,type,reference,the,type,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,parameterized,type,reference,t,type,reference,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,type,reference,type,reference,must,not,be,null,return,body,inserter,for,publisher,resolvable,type,for,type,type,reference,get,type
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, ParameterizedTypeReference<T> typeReference);1521231485;Return a {@code BodyInserter} that writes the given {@link Publisher}._<p>Note also that_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}_each offer {@code body} shortcut methods for providing a Publisher as the body._@param publisher the publisher to stream to the response body_@param typeReference the type of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, ParameterizedTypeReference<T> typeReference) {__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(typeReference, "'typeReference' must not be null")__		return bodyInserterFor(publisher, ResolvableType.forType(typeReference.getType()))__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,p,note,also,that,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,each,offer,code,body,shortcut,methods,for,providing,a,publisher,as,the,body,param,publisher,the,publisher,to,stream,to,the,response,body,param,type,reference,the,type,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,parameterized,type,reference,t,type,reference,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,type,reference,type,reference,must,not,be,null,return,body,inserter,for,publisher,resolvable,type,for,type,type,reference,get,type
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, ParameterizedTypeReference<T> typeReference);1522103912;Return a {@code BodyInserter} that writes the given {@link Publisher}._<p>Note also that_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}_each offer {@code body} shortcut methods for providing a Publisher as the body._@param publisher the publisher to stream to the response body_@param typeReference the type of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, ParameterizedTypeReference<T> typeReference) {__		return bodyInserterFor(publisher, ResolvableType.forType(typeReference.getType()))__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,p,note,also,that,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,each,offer,code,body,shortcut,methods,for,providing,a,publisher,as,the,body,param,publisher,the,publisher,to,stream,to,the,response,body,param,type,reference,the,type,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,parameterized,type,reference,t,type,reference,return,body,inserter,for,publisher,resolvable,type,for,type,type,reference,get,type
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, ParameterizedTypeReference<T> typeReference);1524865018;Return a {@code BodyInserter} that writes the given {@link Publisher}._<p>Note also that_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}_each offer {@code body} shortcut methods for providing a Publisher as the body._@param publisher the publisher to stream to the response body_@param typeReference the type of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, ParameterizedTypeReference<T> typeReference) {__		return bodyInserterFor(publisher, ResolvableType.forType(typeReference.getType()))__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,p,note,also,that,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,each,offer,code,body,shortcut,methods,for,providing,a,publisher,as,the,body,param,publisher,the,publisher,to,stream,to,the,response,body,param,type,reference,the,type,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,parameterized,type,reference,t,type,reference,return,body,inserter,for,publisher,resolvable,type,for,type,type,reference,get,type
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, ParameterizedTypeReference<T> typeReference);1526354196;Return a {@code BodyInserter} that writes the given {@link Publisher}._<p>Note also that_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}_each offer {@code body} shortcut methods for providing a Publisher as the body._@param publisher the publisher to stream to the response body_@param typeReference the type of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the type of the {@code Publisher}_@return a {@code BodyInserter} that writes a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, ParameterizedTypeReference<T> typeReference) {__		return bodyInserterFor(publisher, ResolvableType.forType(typeReference.getType()))__	};return,a,code,body,inserter,that,writes,the,given,link,publisher,p,note,also,that,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,each,offer,code,body,shortcut,methods,for,providing,a,publisher,as,the,body,param,publisher,the,publisher,to,stream,to,the,response,body,param,type,reference,the,type,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,type,of,the,code,publisher,return,a,code,body,inserter,that,writes,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,parameterized,type,reference,t,type,reference,return,body,inserter,for,publisher,resolvable,type,for,type,type,reference,get,type
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, ParameterizedTypeReference<T> typeReference);1542037423;Inserter to write the given {@link Publisher}._<p>Alternatively, consider using the {@code body} shortcuts on_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}._@param publisher the publisher to write with_@param typeReference the type of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the {@code Publisher} type_@return the inserter to write a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, ParameterizedTypeReference<T> typeReference) {__		Assert.notNull(publisher, "Publisher must not be null")__		Assert.notNull(typeReference, "ParameterizedTypeReference must not be null")__		return (message, context) ->_				writeWithMessageWriters(message, context, publisher, ResolvableType.forType(typeReference.getType()))__	};inserter,to,write,the,given,link,publisher,p,alternatively,consider,using,the,code,body,shortcuts,on,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,param,publisher,the,publisher,to,write,with,param,type,reference,the,type,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,code,publisher,type,return,the,inserter,to,write,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,parameterized,type,reference,t,type,reference,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,type,reference,parameterized,type,reference,must,not,be,null,return,message,context,write,with,message,writers,message,context,publisher,resolvable,type,for,type,type,reference,get,type
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, ParameterizedTypeReference<T> typeReference);1542613849;Inserter to write the given {@link Publisher}._<p>Alternatively, consider using the {@code body} shortcuts on_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}._@param publisher the publisher to write with_@param typeReference the type of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the {@code Publisher} type_@return the inserter to write a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, ParameterizedTypeReference<T> typeReference) {__		Assert.notNull(publisher, "Publisher must not be null")__		Assert.notNull(typeReference, "ParameterizedTypeReference must not be null")__		return (message, context) ->_				writeWithMessageWriters(message, context, publisher, ResolvableType.forType(typeReference.getType()))__	};inserter,to,write,the,given,link,publisher,p,alternatively,consider,using,the,code,body,shortcuts,on,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,param,publisher,the,publisher,to,write,with,param,type,reference,the,type,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,code,publisher,type,return,the,inserter,to,write,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,parameterized,type,reference,t,type,reference,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,type,reference,parameterized,type,reference,must,not,be,null,return,message,context,write,with,message,writers,message,context,publisher,resolvable,type,for,type,type,reference,get,type
BodyInserters -> public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher( 			P publisher, ParameterizedTypeReference<T> typeReference);1542907316;Inserter to write the given {@link Publisher}._<p>Alternatively, consider using the {@code body} shortcuts on_{@link org.springframework.web.reactive.function.client.WebClient WebClient} and_{@link org.springframework.web.reactive.function.server.ServerResponse ServerResponse}._@param publisher the publisher to write with_@param typeReference the type of elements contained in the publisher_@param <T> the type of the elements contained in the publisher_@param <P> the {@code Publisher} type_@return the inserter to write a {@code Publisher};public static <T, P extends Publisher<T>> BodyInserter<P, ReactiveHttpOutputMessage> fromPublisher(_			P publisher, ParameterizedTypeReference<T> typeReference) {__		Assert.notNull(publisher, "Publisher must not be null")__		Assert.notNull(typeReference, "ParameterizedTypeReference must not be null")__		return (message, context) ->_				writeWithMessageWriters(message, context, publisher, ResolvableType.forType(typeReference.getType()))__	};inserter,to,write,the,given,link,publisher,p,alternatively,consider,using,the,code,body,shortcuts,on,link,org,springframework,web,reactive,function,client,web,client,web,client,and,link,org,springframework,web,reactive,function,server,server,response,server,response,param,publisher,the,publisher,to,write,with,param,type,reference,the,type,of,elements,contained,in,the,publisher,param,t,the,type,of,the,elements,contained,in,the,publisher,param,p,the,code,publisher,type,return,the,inserter,to,write,a,code,publisher;public,static,t,p,extends,publisher,t,body,inserter,p,reactive,http,output,message,from,publisher,p,publisher,parameterized,type,reference,t,type,reference,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,type,reference,parameterized,type,reference,must,not,be,null,return,message,context,write,with,message,writers,message,context,publisher,resolvable,type,for,type,type,reference,get,type
BodyInserters -> FormInserter -> FormInserter<T> with(String key, T value)_;1522103912;Adds the specified key-value pair to the form._@param key the key to be added_@param value the value to be added_@return this inserter for adding more parts;FormInserter<T> with(String key, T value)_;adds,the,specified,key,value,pair,to,the,form,param,key,the,key,to,be,added,param,value,the,value,to,be,added,return,this,inserter,for,adding,more,parts;form,inserter,t,with,string,key,t,value
BodyInserters -> FormInserter -> FormInserter<T> with(String key, T value)_;1524865018;Adds the specified key-value pair to the form._@param key the key to be added_@param value the value to be added_@return this inserter for adding more parts;FormInserter<T> with(String key, T value)_;adds,the,specified,key,value,pair,to,the,form,param,key,the,key,to,be,added,param,value,the,value,to,be,added,return,this,inserter,for,adding,more,parts;form,inserter,t,with,string,key,t,value
BodyInserters -> FormInserter -> FormInserter<T> with(String key, T value)_;1526354196;Adds the specified key-value pair to the form._@param key the key to be added_@param value the value to be added_@return this inserter for adding more parts;FormInserter<T> with(String key, T value)_;adds,the,specified,key,value,pair,to,the,form,param,key,the,key,to,be,added,param,value,the,value,to,be,added,return,this,inserter,for,adding,more,parts;form,inserter,t,with,string,key,t,value
BodyInserters -> FormInserter -> FormInserter<T> with(String key, T value)_;1527269520;Adds the specified key-value pair to the form._@param key the key to be added_@param value the value to be added_@return this inserter for adding more parts;FormInserter<T> with(String key, T value)_;adds,the,specified,key,value,pair,to,the,form,param,key,the,key,to,be,added,param,value,the,value,to,be,added,return,this,inserter,for,adding,more,parts;form,inserter,t,with,string,key,t,value
BodyInserters -> FormInserter -> FormInserter<T> with(String key, T value)_;1527341063;Adds the specified key-value pair to the form._@param key the key to be added_@param value the value to be added_@return this inserter for adding more parts;FormInserter<T> with(String key, T value)_;adds,the,specified,key,value,pair,to,the,form,param,key,the,key,to,be,added,param,value,the,value,to,be,added,return,this,inserter,for,adding,more,parts;form,inserter,t,with,string,key,t,value
BodyInserters -> FormInserter -> FormInserter<T> with(String key, T value)_;1530174524;Adds the specified key-value pair to the form._@param key the key to be added_@param value the value to be added_@return this inserter for adding more parts;FormInserter<T> with(String key, T value)_;adds,the,specified,key,value,pair,to,the,form,param,key,the,key,to,be,added,param,value,the,value,to,be,added,return,this,inserter,for,adding,more,parts;form,inserter,t,with,string,key,t,value
BodyInserters -> FormInserter -> FormInserter<T> with(String key, T value)_;1530793695;Adds the specified key-value pair to the form._@param key the key to be added_@param value the value to be added_@return this inserter for adding more parts;FormInserter<T> with(String key, T value)_;adds,the,specified,key,value,pair,to,the,form,param,key,the,key,to,be,added,param,value,the,value,to,be,added,return,this,inserter,for,adding,more,parts;form,inserter,t,with,string,key,t,value
BodyInserters -> FormInserter -> FormInserter<T> with(String key, T value)_;1542037423;Adds the specified key-value pair to the form._@param key the key to be added_@param value the value to be added_@return this inserter for adding more parts;FormInserter<T> with(String key, T value)_;adds,the,specified,key,value,pair,to,the,form,param,key,the,key,to,be,added,param,value,the,value,to,be,added,return,this,inserter,for,adding,more,parts;form,inserter,t,with,string,key,t,value
BodyInserters -> FormInserter -> FormInserter<T> with(String key, T value)_;1542613849;Adds the specified key-value pair to the form._@param key the key to be added_@param value the value to be added_@return this inserter for adding more parts;FormInserter<T> with(String key, T value)_;adds,the,specified,key,value,pair,to,the,form,param,key,the,key,to,be,added,param,value,the,value,to,be,added,return,this,inserter,for,adding,more,parts;form,inserter,t,with,string,key,t,value
BodyInserters -> FormInserter -> FormInserter<T> with(String key, T value)_;1542907316;Adds the specified key-value pair to the form._@param key the key to be added_@param value the value to be added_@return this inserter for adding more parts;FormInserter<T> with(String key, T value)_;adds,the,specified,key,value,pair,to,the,form,param,key,the,key,to,be,added,param,value,the,value,to,be,added,return,this,inserter,for,adding,more,parts;form,inserter,t,with,string,key,t,value
BodyInserters -> public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(String key, 			P publisher, Class<T> elementClass);1513874461;A variant of {@link #fromMultipartData(MultiValueMap)} for adding asynchronous data as a_part in-line vs building a {@code MultiValueMap} and passing it in._@param key the part name_@param publisher the publisher that forms the part value_@param elementClass the class contained in the {@code publisher}_@return a {@code FormInserter} that can writes the provided multipart_data and also allows adding more parts;public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(String key,_			P publisher, Class<T> elementClass) {__		Assert.notNull(key, "'key' must not be null")__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementClass, "'elementClass' must not be null")___		return new DefaultMultipartInserter().withPublisher(key, publisher, elementClass)__	};a,variant,of,link,from,multipart,data,multi,value,map,for,adding,asynchronous,data,as,a,part,in,line,vs,building,a,code,multi,value,map,and,passing,it,in,param,key,the,part,name,param,publisher,the,publisher,that,forms,the,part,value,param,element,class,the,class,contained,in,the,code,publisher,return,a,code,form,inserter,that,can,writes,the,provided,multipart,data,and,also,allows,adding,more,parts;public,static,t,p,extends,publisher,t,multipart,inserter,from,multipart,async,data,string,key,p,publisher,class,t,element,class,assert,not,null,key,key,must,not,be,null,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,class,element,class,must,not,be,null,return,new,default,multipart,inserter,with,publisher,key,publisher,element,class
BodyInserters -> public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(String key, 			P publisher, Class<T> elementClass);1515178754;A variant of {@link #fromMultipartData(MultiValueMap)} for adding asynchronous data as a_part in-line vs building a {@code MultiValueMap} and passing it in._@param key the part name_@param publisher the publisher that forms the part value_@param elementClass the class contained in the {@code publisher}_@return a {@code FormInserter} that can writes the provided multipart_data and also allows adding more parts;public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(String key,_			P publisher, Class<T> elementClass) {__		Assert.notNull(key, "'key' must not be null")__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementClass, "'elementClass' must not be null")___		return new DefaultMultipartInserter().withPublisher(key, publisher, elementClass)__	};a,variant,of,link,from,multipart,data,multi,value,map,for,adding,asynchronous,data,as,a,part,in,line,vs,building,a,code,multi,value,map,and,passing,it,in,param,key,the,part,name,param,publisher,the,publisher,that,forms,the,part,value,param,element,class,the,class,contained,in,the,code,publisher,return,a,code,form,inserter,that,can,writes,the,provided,multipart,data,and,also,allows,adding,more,parts;public,static,t,p,extends,publisher,t,multipart,inserter,from,multipart,async,data,string,key,p,publisher,class,t,element,class,assert,not,null,key,key,must,not,be,null,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,class,element,class,must,not,be,null,return,new,default,multipart,inserter,with,publisher,key,publisher,element,class
BodyInserters -> public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(String key, 			P publisher, Class<T> elementClass);1515603291;A variant of {@link #fromMultipartData(MultiValueMap)} for adding asynchronous data as a_part in-line vs building a {@code MultiValueMap} and passing it in._@param key the part name_@param publisher the publisher that forms the part value_@param elementClass the class contained in the {@code publisher}_@return a {@code FormInserter} that can writes the provided multipart_data and also allows adding more parts;public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(String key,_			P publisher, Class<T> elementClass) {__		Assert.notNull(key, "'key' must not be null")__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementClass, "'elementClass' must not be null")___		return new DefaultMultipartInserter().withPublisher(key, publisher, elementClass)__	};a,variant,of,link,from,multipart,data,multi,value,map,for,adding,asynchronous,data,as,a,part,in,line,vs,building,a,code,multi,value,map,and,passing,it,in,param,key,the,part,name,param,publisher,the,publisher,that,forms,the,part,value,param,element,class,the,class,contained,in,the,code,publisher,return,a,code,form,inserter,that,can,writes,the,provided,multipart,data,and,also,allows,adding,more,parts;public,static,t,p,extends,publisher,t,multipart,inserter,from,multipart,async,data,string,key,p,publisher,class,t,element,class,assert,not,null,key,key,must,not,be,null,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,class,element,class,must,not,be,null,return,new,default,multipart,inserter,with,publisher,key,publisher,element,class
BodyInserters -> public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(String name, 			P publisher, Class<T> elementClass);1521231485;Return a {@link MultipartInserter} that writes the given asynchronous parts,_as multipart data.__<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}.__@param name the part name_@param publisher the publisher that forms the part value_@param elementClass the class contained in the {@code publisher}_@return the inserter that allows adding more parts;public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(String name,_			P publisher, Class<T> elementClass) {__		Assert.notNull(name, "'key' must not be null")__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementClass, "'elementClass' must not be null")___		return new DefaultMultipartInserter().withPublisher(name, publisher, elementClass)__	};return,a,link,multipart,inserter,that,writes,the,given,asynchronous,parts,as,multipart,data,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,name,the,part,name,param,publisher,the,publisher,that,forms,the,part,value,param,element,class,the,class,contained,in,the,code,publisher,return,the,inserter,that,allows,adding,more,parts;public,static,t,p,extends,publisher,t,multipart,inserter,from,multipart,async,data,string,name,p,publisher,class,t,element,class,assert,not,null,name,key,must,not,be,null,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,class,element,class,must,not,be,null,return,new,default,multipart,inserter,with,publisher,name,publisher,element,class
BodyInserters -> public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(String name, 			P publisher, Class<T> elementClass);1522103912;Return a {@link MultipartInserter} that writes the given asynchronous parts,_as multipart data.__<p>Note that you can also build the multipart data externally with_{@link MultipartBodyBuilder}, and pass the resulting map directly to the_{@code syncBody(Object)} shortcut method in {@code WebClient}.__@param name the part name_@param publisher the publisher that forms the part value_@param elementClass the class contained in the {@code publisher}_@return the inserter that allows adding more parts;public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(String name,_			P publisher, Class<T> elementClass) {__		Assert.notNull(name, "'key' must not be null")__		Assert.notNull(publisher, "'publisher' must not be null")__		Assert.notNull(elementClass, "'elementClass' must not be null")___		return new DefaultMultipartInserter().withPublisher(name, publisher, elementClass)__	};return,a,link,multipart,inserter,that,writes,the,given,asynchronous,parts,as,multipart,data,p,note,that,you,can,also,build,the,multipart,data,externally,with,link,multipart,body,builder,and,pass,the,resulting,map,directly,to,the,code,sync,body,object,shortcut,method,in,code,web,client,param,name,the,part,name,param,publisher,the,publisher,that,forms,the,part,value,param,element,class,the,class,contained,in,the,code,publisher,return,the,inserter,that,allows,adding,more,parts;public,static,t,p,extends,publisher,t,multipart,inserter,from,multipart,async,data,string,name,p,publisher,class,t,element,class,assert,not,null,name,key,must,not,be,null,assert,not,null,publisher,publisher,must,not,be,null,assert,not,null,element,class,element,class,must,not,be,null,return,new,default,multipart,inserter,with,publisher,name,publisher,element,class
