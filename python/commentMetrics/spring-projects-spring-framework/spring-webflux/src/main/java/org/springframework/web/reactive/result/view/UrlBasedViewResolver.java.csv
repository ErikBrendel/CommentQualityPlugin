# id;timestamp;commentText;codeText;commentWords;codeWords
UrlBasedViewResolver -> protected String[] getViewNames();1485986572;Return the view names (or name patterns) that can be handled by this_{@link ViewResolver}.;protected String[] getViewNames() {_		return this.viewNames__	};return,the,view,names,or,name,patterns,that,can,be,handled,by,this,link,view,resolver;protected,string,get,view,names,return,this,view,names
UrlBasedViewResolver -> protected String[] getViewNames();1486720600;Return the view names (or name patterns) that can be handled by this_{@link ViewResolver}.;protected String[] getViewNames() {_		return this.viewNames__	};return,the,view,names,or,name,patterns,that,can,be,handled,by,this,link,view,resolver;protected,string,get,view,names,return,this,view,names
UrlBasedViewResolver -> protected String[] getViewNames();1495868221;Return the view names (or name patterns) that can be handled by this_{@link ViewResolver}.;protected String[] getViewNames() {_		return this.viewNames__	};return,the,view,names,or,name,patterns,that,can,be,handled,by,this,link,view,resolver;protected,string,get,view,names,return,this,view,names
UrlBasedViewResolver -> @Nullable 	protected Class<?> getViewClass();1496837955;Return the view class to be used to create views.;@Nullable_	protected Class<?> getViewClass() {_		return this.viewClass__	};return,the,view,class,to,be,used,to,create,views;nullable,protected,class,get,view,class,return,this,view,class
UrlBasedViewResolver -> @Nullable 	protected Class<?> getViewClass();1496955179;Return the view class to be used to create views.;@Nullable_	protected Class<?> getViewClass() {_		return this.viewClass__	};return,the,view,class,to,be,used,to,create,views;nullable,protected,class,get,view,class,return,this,view,class
UrlBasedViewResolver -> @Nullable 	protected Class<?> getViewClass();1497275339;Return the view class to be used to create views.;@Nullable_	protected Class<?> getViewClass() {_		return this.viewClass__	};return,the,view,class,to,be,used,to,create,views;nullable,protected,class,get,view,class,return,this,view,class
UrlBasedViewResolver -> @Nullable 	protected Class<?> getViewClass();1500448076;Return the view class to be used to create views.;@Nullable_	protected Class<?> getViewClass() {_		return this.viewClass__	};return,the,view,class,to,be,used,to,create,views;nullable,protected,class,get,view,class,return,this,view,class
UrlBasedViewResolver -> public void setViewNames(String... viewNames);1485986572;Set the view names (or name patterns) that can be handled by this_{@link ViewResolver}. View names can contain simple wildcards such that_'my*', '*Report' and '*Repo*' will all match the view name 'myReport'._@see #canHandle;public void setViewNames(String... viewNames) {_		this.viewNames = viewNames__	};set,the,view,names,or,name,patterns,that,can,be,handled,by,this,link,view,resolver,view,names,can,contain,simple,wildcards,such,that,my,report,and,repo,will,all,match,the,view,name,my,report,see,can,handle;public,void,set,view,names,string,view,names,this,view,names,view,names
UrlBasedViewResolver -> public void setViewNames(String... viewNames);1486720600;Set the view names (or name patterns) that can be handled by this_{@link ViewResolver}. View names can contain simple wildcards such that_'my*', '*Report' and '*Repo*' will all match the view name 'myReport'._@see #canHandle;public void setViewNames(String... viewNames) {_		this.viewNames = viewNames__	};set,the,view,names,or,name,patterns,that,can,be,handled,by,this,link,view,resolver,view,names,can,contain,simple,wildcards,such,that,my,report,and,repo,will,all,match,the,view,name,my,report,see,can,handle;public,void,set,view,names,string,view,names,this,view,names,view,names
UrlBasedViewResolver -> public void setViewNames(String... viewNames);1495868221;Set the view names (or name patterns) that can be handled by this_{@link ViewResolver}. View names can contain simple wildcards such that_'my*', '*Report' and '*Repo*' will all match the view name 'myReport'._@see #canHandle;public void setViewNames(String... viewNames) {_		this.viewNames = viewNames__	};set,the,view,names,or,name,patterns,that,can,be,handled,by,this,link,view,resolver,view,names,can,contain,simple,wildcards,such,that,my,report,and,repo,will,all,match,the,view,name,my,report,see,can,handle;public,void,set,view,names,string,view,names,this,view,names,view,names
UrlBasedViewResolver -> public void setViewNames(String... viewNames);1496837955;Set the view names (or name patterns) that can be handled by this_{@link ViewResolver}. View names can contain simple wildcards such that_'my*', '*Report' and '*Repo*' will all match the view name 'myReport'._@see #canHandle;public void setViewNames(String... viewNames) {_		this.viewNames = viewNames__	};set,the,view,names,or,name,patterns,that,can,be,handled,by,this,link,view,resolver,view,names,can,contain,simple,wildcards,such,that,my,report,and,repo,will,all,match,the,view,name,my,report,see,can,handle;public,void,set,view,names,string,view,names,this,view,names,view,names
UrlBasedViewResolver -> public void setViewNames(String... viewNames);1496955179;Set the view names (or name patterns) that can be handled by this_{@link ViewResolver}. View names can contain simple wildcards such that_'my*', '*Report' and '*Repo*' will all match the view name 'myReport'._@see #canHandle;public void setViewNames(String... viewNames) {_		this.viewNames = viewNames__	};set,the,view,names,or,name,patterns,that,can,be,handled,by,this,link,view,resolver,view,names,can,contain,simple,wildcards,such,that,my,report,and,repo,will,all,match,the,view,name,my,report,see,can,handle;public,void,set,view,names,string,view,names,this,view,names,view,names
UrlBasedViewResolver -> public void setViewNames(String... viewNames);1497275339;Set the view names (or name patterns) that can be handled by this_{@link ViewResolver}. View names can contain simple wildcards such that_'my*', '*Report' and '*Repo*' will all match the view name 'myReport'._@see #canHandle;public void setViewNames(String... viewNames) {_		this.viewNames = viewNames__	};set,the,view,names,or,name,patterns,that,can,be,handled,by,this,link,view,resolver,view,names,can,contain,simple,wildcards,such,that,my,report,and,repo,will,all,match,the,view,name,my,report,see,can,handle;public,void,set,view,names,string,view,names,this,view,names,view,names
UrlBasedViewResolver -> protected boolean canHandle(String viewName, Locale locale);1485986572;Indicates whether or not this {@link ViewResolver} can handle the_supplied view name. If not, an empty result is returned. The default_implementation checks against the configured {@link #setViewNames_view names}._@param viewName the name of the view to retrieve_@param locale the Locale to retrieve the view for_@return whether this resolver applies to the specified view_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean canHandle(String viewName, Locale locale) {_		String[] viewNames = getViewNames()__		return (viewNames == null || PatternMatchUtils.simpleMatch(viewNames, viewName))__	};indicates,whether,or,not,this,link,view,resolver,can,handle,the,supplied,view,name,if,not,an,empty,result,is,returned,the,default,implementation,checks,against,the,configured,link,set,view,names,view,names,param,view,name,the,name,of,the,view,to,retrieve,param,locale,the,locale,to,retrieve,the,view,for,return,whether,this,resolver,applies,to,the,specified,view,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,can,handle,string,view,name,locale,locale,string,view,names,get,view,names,return,view,names,null,pattern,match,utils,simple,match,view,names,view,name
UrlBasedViewResolver -> protected boolean canHandle(String viewName, Locale locale);1486720600;Indicates whether or not this {@link ViewResolver} can handle the_supplied view name. If not, an empty result is returned. The default_implementation checks against the configured {@link #setViewNames_view names}._@param viewName the name of the view to retrieve_@param locale the Locale to retrieve the view for_@return whether this resolver applies to the specified view_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean canHandle(String viewName, Locale locale) {_		String[] viewNames = getViewNames()__		return (viewNames == null || PatternMatchUtils.simpleMatch(viewNames, viewName))__	};indicates,whether,or,not,this,link,view,resolver,can,handle,the,supplied,view,name,if,not,an,empty,result,is,returned,the,default,implementation,checks,against,the,configured,link,set,view,names,view,names,param,view,name,the,name,of,the,view,to,retrieve,param,locale,the,locale,to,retrieve,the,view,for,return,whether,this,resolver,applies,to,the,specified,view,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,can,handle,string,view,name,locale,locale,string,view,names,get,view,names,return,view,names,null,pattern,match,utils,simple,match,view,names,view,name
UrlBasedViewResolver -> protected boolean canHandle(String viewName, Locale locale);1495868221;Indicates whether or not this {@link ViewResolver} can handle the_supplied view name. If not, an empty result is returned. The default_implementation checks against the configured {@link #setViewNames_view names}._@param viewName the name of the view to retrieve_@param locale the Locale to retrieve the view for_@return whether this resolver applies to the specified view_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean canHandle(String viewName, Locale locale) {_		String[] viewNames = getViewNames()__		return (viewNames == null || PatternMatchUtils.simpleMatch(viewNames, viewName))__	};indicates,whether,or,not,this,link,view,resolver,can,handle,the,supplied,view,name,if,not,an,empty,result,is,returned,the,default,implementation,checks,against,the,configured,link,set,view,names,view,names,param,view,name,the,name,of,the,view,to,retrieve,param,locale,the,locale,to,retrieve,the,view,for,return,whether,this,resolver,applies,to,the,specified,view,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,can,handle,string,view,name,locale,locale,string,view,names,get,view,names,return,view,names,null,pattern,match,utils,simple,match,view,names,view,name
UrlBasedViewResolver -> protected boolean canHandle(String viewName, Locale locale);1496837955;Indicates whether or not this {@link ViewResolver} can handle the_supplied view name. If not, an empty result is returned. The default_implementation checks against the configured {@link #setViewNames_view names}._@param viewName the name of the view to retrieve_@param locale the Locale to retrieve the view for_@return whether this resolver applies to the specified view_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean canHandle(String viewName, Locale locale) {_		String[] viewNames = getViewNames()__		return (viewNames == null || PatternMatchUtils.simpleMatch(viewNames, viewName))__	};indicates,whether,or,not,this,link,view,resolver,can,handle,the,supplied,view,name,if,not,an,empty,result,is,returned,the,default,implementation,checks,against,the,configured,link,set,view,names,view,names,param,view,name,the,name,of,the,view,to,retrieve,param,locale,the,locale,to,retrieve,the,view,for,return,whether,this,resolver,applies,to,the,specified,view,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,can,handle,string,view,name,locale,locale,string,view,names,get,view,names,return,view,names,null,pattern,match,utils,simple,match,view,names,view,name
UrlBasedViewResolver -> protected boolean canHandle(String viewName, Locale locale);1496955179;Indicates whether or not this {@link ViewResolver} can handle the_supplied view name. If not, an empty result is returned. The default_implementation checks against the configured {@link #setViewNames_view names}._@param viewName the name of the view to retrieve_@param locale the Locale to retrieve the view for_@return whether this resolver applies to the specified view_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean canHandle(String viewName, Locale locale) {_		String[] viewNames = getViewNames()__		return (viewNames == null || PatternMatchUtils.simpleMatch(viewNames, viewName))__	};indicates,whether,or,not,this,link,view,resolver,can,handle,the,supplied,view,name,if,not,an,empty,result,is,returned,the,default,implementation,checks,against,the,configured,link,set,view,names,view,names,param,view,name,the,name,of,the,view,to,retrieve,param,locale,the,locale,to,retrieve,the,view,for,return,whether,this,resolver,applies,to,the,specified,view,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,can,handle,string,view,name,locale,locale,string,view,names,get,view,names,return,view,names,null,pattern,match,utils,simple,match,view,names,view,name
UrlBasedViewResolver -> protected boolean canHandle(String viewName, Locale locale);1497275339;Indicates whether or not this {@link ViewResolver} can handle the supplied_view name. If not, an empty result is returned. The default implementation_checks against the configured {@link #setViewNames view names}._@param viewName the name of the view to retrieve_@param locale the Locale to retrieve the view for_@return whether this resolver applies to the specified view_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean canHandle(String viewName, Locale locale) {_		String[] viewNames = getViewNames()__		return (viewNames == null || PatternMatchUtils.simpleMatch(viewNames, viewName))__	};indicates,whether,or,not,this,link,view,resolver,can,handle,the,supplied,view,name,if,not,an,empty,result,is,returned,the,default,implementation,checks,against,the,configured,link,set,view,names,view,names,param,view,name,the,name,of,the,view,to,retrieve,param,locale,the,locale,to,retrieve,the,view,for,return,whether,this,resolver,applies,to,the,specified,view,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,can,handle,string,view,name,locale,locale,string,view,names,get,view,names,return,view,names,null,pattern,match,utils,simple,match,view,names,view,name
UrlBasedViewResolver -> protected boolean canHandle(String viewName, Locale locale);1500448076;Indicates whether or not this {@link ViewResolver} can handle the supplied_view name. If not, an empty result is returned. The default implementation_checks against the configured {@link #setViewNames view names}._@param viewName the name of the view to retrieve_@param locale the Locale to retrieve the view for_@return whether this resolver applies to the specified view_@see org.springframework.util.PatternMatchUtils#simpleMatch(String, String);protected boolean canHandle(String viewName, Locale locale) {_		String[] viewNames = getViewNames()__		return (viewNames == null || PatternMatchUtils.simpleMatch(viewNames, viewName))__	};indicates,whether,or,not,this,link,view,resolver,can,handle,the,supplied,view,name,if,not,an,empty,result,is,returned,the,default,implementation,checks,against,the,configured,link,set,view,names,view,names,param,view,name,the,name,of,the,view,to,retrieve,param,locale,the,locale,to,retrieve,the,view,for,return,whether,this,resolver,applies,to,the,specified,view,see,org,springframework,util,pattern,match,utils,simple,match,string,string;protected,boolean,can,handle,string,view,name,locale,locale,string,view,names,get,view,names,return,view,names,null,pattern,match,utils,simple,match,view,names,view,name
UrlBasedViewResolver -> @Nullable 	protected String getRequestContextAttribute();1495868221;Return the name of the RequestContext attribute for all views, if any.;@Nullable_	protected String getRequestContextAttribute() {_		return this.requestContextAttribute__	};return,the,name,of,the,request,context,attribute,for,all,views,if,any;nullable,protected,string,get,request,context,attribute,return,this,request,context,attribute
UrlBasedViewResolver -> @Nullable 	protected String getRequestContextAttribute();1496837955;Return the name of the RequestContext attribute for all views, if any.;@Nullable_	protected String getRequestContextAttribute() {_		return this.requestContextAttribute__	};return,the,name,of,the,request,context,attribute,for,all,views,if,any;nullable,protected,string,get,request,context,attribute,return,this,request,context,attribute
UrlBasedViewResolver -> @Nullable 	protected String getRequestContextAttribute();1496955179;Return the name of the RequestContext attribute for all views, if any.;@Nullable_	protected String getRequestContextAttribute() {_		return this.requestContextAttribute__	};return,the,name,of,the,request,context,attribute,for,all,views,if,any;nullable,protected,string,get,request,context,attribute,return,this,request,context,attribute
UrlBasedViewResolver -> @Nullable 	protected String getRequestContextAttribute();1497275339;Return the name of the @link RequestContext} attribute for all views, if any.;@Nullable_	protected String getRequestContextAttribute() {_		return this.requestContextAttribute__	};return,the,name,of,the,link,request,context,attribute,for,all,views,if,any;nullable,protected,string,get,request,context,attribute,return,this,request,context,attribute
UrlBasedViewResolver -> @Nullable 	protected String getRequestContextAttribute();1500448076;Return the name of the @link RequestContext} attribute for all views, if any.;@Nullable_	protected String getRequestContextAttribute() {_		return this.requestContextAttribute__	};return,the,name,of,the,link,request,context,attribute,for,all,views,if,any;nullable,protected,string,get,request,context,attribute,return,this,request,context,attribute
UrlBasedViewResolver -> public void setPrefix(@Nullable String prefix);1496837955;Set the prefix that gets prepended to view names when building a URL.;public void setPrefix(@Nullable String prefix) {_		this.prefix = (prefix != null ? prefix : "")__	};set,the,prefix,that,gets,prepended,to,view,names,when,building,a,url;public,void,set,prefix,nullable,string,prefix,this,prefix,prefix,null,prefix
UrlBasedViewResolver -> public void setPrefix(@Nullable String prefix);1496955179;Set the prefix that gets prepended to view names when building a URL.;public void setPrefix(@Nullable String prefix) {_		this.prefix = (prefix != null ? prefix : "")__	};set,the,prefix,that,gets,prepended,to,view,names,when,building,a,url;public,void,set,prefix,nullable,string,prefix,this,prefix,prefix,null,prefix
UrlBasedViewResolver -> public void setPrefix(@Nullable String prefix);1497275339;Set the prefix that gets prepended to view names when building a URL.;public void setPrefix(@Nullable String prefix) {_		this.prefix = (prefix != null ? prefix : "")__	};set,the,prefix,that,gets,prepended,to,view,names,when,building,a,url;public,void,set,prefix,nullable,string,prefix,this,prefix,prefix,null,prefix
UrlBasedViewResolver -> public void setPrefix(@Nullable String prefix);1500448076;Set the prefix that gets prepended to view names when building a URL.;public void setPrefix(@Nullable String prefix) {_		this.prefix = (prefix != null ? prefix : "")__	};set,the,prefix,that,gets,prepended,to,view,names,when,building,a,url;public,void,set,prefix,nullable,string,prefix,this,prefix,prefix,null,prefix
UrlBasedViewResolver -> protected String getPrefix();1485986572;Return the prefix that gets prepended to view names when building a URL.;protected String getPrefix() {_		return this.prefix__	};return,the,prefix,that,gets,prepended,to,view,names,when,building,a,url;protected,string,get,prefix,return,this,prefix
UrlBasedViewResolver -> protected String getPrefix();1486720600;Return the prefix that gets prepended to view names when building a URL.;protected String getPrefix() {_		return this.prefix__	};return,the,prefix,that,gets,prepended,to,view,names,when,building,a,url;protected,string,get,prefix,return,this,prefix
UrlBasedViewResolver -> protected String getPrefix();1495868221;Return the prefix that gets prepended to view names when building a URL.;protected String getPrefix() {_		return this.prefix__	};return,the,prefix,that,gets,prepended,to,view,names,when,building,a,url;protected,string,get,prefix,return,this,prefix
UrlBasedViewResolver -> protected String getPrefix();1496837955;Return the prefix that gets prepended to view names when building a URL.;protected String getPrefix() {_		return this.prefix__	};return,the,prefix,that,gets,prepended,to,view,names,when,building,a,url;protected,string,get,prefix,return,this,prefix
UrlBasedViewResolver -> protected String getPrefix();1496955179;Return the prefix that gets prepended to view names when building a URL.;protected String getPrefix() {_		return this.prefix__	};return,the,prefix,that,gets,prepended,to,view,names,when,building,a,url;protected,string,get,prefix,return,this,prefix
UrlBasedViewResolver -> protected String getPrefix();1497275339;Return the prefix that gets prepended to view names when building a URL.;protected String getPrefix() {_		return this.prefix__	};return,the,prefix,that,gets,prepended,to,view,names,when,building,a,url;protected,string,get,prefix,return,this,prefix
UrlBasedViewResolver -> protected String getPrefix();1500448076;Return the prefix that gets prepended to view names when building a URL.;protected String getPrefix() {_		return this.prefix__	};return,the,prefix,that,gets,prepended,to,view,names,when,building,a,url;protected,string,get,prefix,return,this,prefix
UrlBasedViewResolver -> public void setRequestContextAttribute(String requestContextAttribute);1485986572;Set the name of the RequestContext attribute for all views._@param requestContextAttribute name of the RequestContext attribute_@see AbstractView#setRequestContextAttribute;public void setRequestContextAttribute(String requestContextAttribute) {_		this.requestContextAttribute = requestContextAttribute__	};set,the,name,of,the,request,context,attribute,for,all,views,param,request,context,attribute,name,of,the,request,context,attribute,see,abstract,view,set,request,context,attribute;public,void,set,request,context,attribute,string,request,context,attribute,this,request,context,attribute,request,context,attribute
UrlBasedViewResolver -> public void setRequestContextAttribute(String requestContextAttribute);1486720600;Set the name of the RequestContext attribute for all views._@param requestContextAttribute name of the RequestContext attribute_@see AbstractView#setRequestContextAttribute;public void setRequestContextAttribute(String requestContextAttribute) {_		this.requestContextAttribute = requestContextAttribute__	};set,the,name,of,the,request,context,attribute,for,all,views,param,request,context,attribute,name,of,the,request,context,attribute,see,abstract,view,set,request,context,attribute;public,void,set,request,context,attribute,string,request,context,attribute,this,request,context,attribute,request,context,attribute
UrlBasedViewResolver -> public void setRequestContextAttribute(String requestContextAttribute);1495868221;Set the name of the RequestContext attribute for all views._@param requestContextAttribute name of the RequestContext attribute_@see AbstractView#setRequestContextAttribute;public void setRequestContextAttribute(String requestContextAttribute) {_		this.requestContextAttribute = requestContextAttribute__	};set,the,name,of,the,request,context,attribute,for,all,views,param,request,context,attribute,name,of,the,request,context,attribute,see,abstract,view,set,request,context,attribute;public,void,set,request,context,attribute,string,request,context,attribute,this,request,context,attribute,request,context,attribute
UrlBasedViewResolver -> public void setRequestContextAttribute(String requestContextAttribute);1496837955;Set the name of the RequestContext attribute for all views._@param requestContextAttribute name of the RequestContext attribute_@see AbstractView#setRequestContextAttribute;public void setRequestContextAttribute(String requestContextAttribute) {_		this.requestContextAttribute = requestContextAttribute__	};set,the,name,of,the,request,context,attribute,for,all,views,param,request,context,attribute,name,of,the,request,context,attribute,see,abstract,view,set,request,context,attribute;public,void,set,request,context,attribute,string,request,context,attribute,this,request,context,attribute,request,context,attribute
UrlBasedViewResolver -> public void setRequestContextAttribute(String requestContextAttribute);1496955179;Set the name of the RequestContext attribute for all views._@param requestContextAttribute name of the RequestContext attribute_@see AbstractView#setRequestContextAttribute;public void setRequestContextAttribute(String requestContextAttribute) {_		this.requestContextAttribute = requestContextAttribute__	};set,the,name,of,the,request,context,attribute,for,all,views,param,request,context,attribute,name,of,the,request,context,attribute,see,abstract,view,set,request,context,attribute;public,void,set,request,context,attribute,string,request,context,attribute,this,request,context,attribute,request,context,attribute
UrlBasedViewResolver -> public void setRequestContextAttribute(String requestContextAttribute);1497275339;Set the name of the {@link RequestContext} attribute for all views._@param requestContextAttribute name of the RequestContext attribute_@see AbstractView#setRequestContextAttribute;public void setRequestContextAttribute(String requestContextAttribute) {_		this.requestContextAttribute = requestContextAttribute__	};set,the,name,of,the,link,request,context,attribute,for,all,views,param,request,context,attribute,name,of,the,request,context,attribute,see,abstract,view,set,request,context,attribute;public,void,set,request,context,attribute,string,request,context,attribute,this,request,context,attribute,request,context,attribute
UrlBasedViewResolver -> public void setViewClass(Class<?> viewClass);1485986572;Set the view class to instantiate through {@link #createUrlBasedView(String)}._@param viewClass a class that is assignable to the required view class_which by default is AbstractUrlBasedView.;public void setViewClass(Class<?> viewClass) {_		if (viewClass == null || !requiredViewClass().isAssignableFrom(viewClass)) {_			String name = (viewClass != null ? viewClass.getName() : null)__			throw new IllegalArgumentException("Given view class [" + name + "] " +_					"is not of type [" + requiredViewClass().getName() + "]")__		}_		this.viewClass = viewClass__	};set,the,view,class,to,instantiate,through,link,create,url,based,view,string,param,view,class,a,class,that,is,assignable,to,the,required,view,class,which,by,default,is,abstract,url,based,view;public,void,set,view,class,class,view,class,if,view,class,null,required,view,class,is,assignable,from,view,class,string,name,view,class,null,view,class,get,name,null,throw,new,illegal,argument,exception,given,view,class,name,is,not,of,type,required,view,class,get,name,this,view,class,view,class
UrlBasedViewResolver -> public void setViewClass(Class<?> viewClass);1486720600;Set the view class to instantiate through {@link #createUrlBasedView(String)}._@param viewClass a class that is assignable to the required view class_which by default is AbstractUrlBasedView.;public void setViewClass(Class<?> viewClass) {_		if (viewClass == null || !requiredViewClass().isAssignableFrom(viewClass)) {_			String name = (viewClass != null ? viewClass.getName() : null)__			throw new IllegalArgumentException("Given view class [" + name + "] " +_					"is not of type [" + requiredViewClass().getName() + "]")__		}_		this.viewClass = viewClass__	};set,the,view,class,to,instantiate,through,link,create,url,based,view,string,param,view,class,a,class,that,is,assignable,to,the,required,view,class,which,by,default,is,abstract,url,based,view;public,void,set,view,class,class,view,class,if,view,class,null,required,view,class,is,assignable,from,view,class,string,name,view,class,null,view,class,get,name,null,throw,new,illegal,argument,exception,given,view,class,name,is,not,of,type,required,view,class,get,name,this,view,class,view,class
UrlBasedViewResolver -> public void setViewClass(Class<?> viewClass);1495868221;Set the view class to instantiate through {@link #createUrlBasedView(String)}._@param viewClass a class that is assignable to the required view class_which by default is AbstractUrlBasedView.;public void setViewClass(Class<?> viewClass) {_		if (viewClass == null || !requiredViewClass().isAssignableFrom(viewClass)) {_			String name = (viewClass != null ? viewClass.getName() : null)__			throw new IllegalArgumentException("Given view class [" + name + "] " +_					"is not of type [" + requiredViewClass().getName() + "]")__		}_		this.viewClass = viewClass__	};set,the,view,class,to,instantiate,through,link,create,url,based,view,string,param,view,class,a,class,that,is,assignable,to,the,required,view,class,which,by,default,is,abstract,url,based,view;public,void,set,view,class,class,view,class,if,view,class,null,required,view,class,is,assignable,from,view,class,string,name,view,class,null,view,class,get,name,null,throw,new,illegal,argument,exception,given,view,class,name,is,not,of,type,required,view,class,get,name,this,view,class,view,class
UrlBasedViewResolver -> public void setViewClass(Class<?> viewClass);1496837955;Set the view class to instantiate through {@link #createUrlBasedView(String)}._@param viewClass a class that is assignable to the required view class_which by default is AbstractUrlBasedView.;public void setViewClass(Class<?> viewClass) {_		if (!requiredViewClass().isAssignableFrom(viewClass)) {_			String name = viewClass.getName()__			throw new IllegalArgumentException("Given view class [" + name + "] " +_					"is not of type [" + requiredViewClass().getName() + "]")__		}_		this.viewClass = viewClass__	};set,the,view,class,to,instantiate,through,link,create,url,based,view,string,param,view,class,a,class,that,is,assignable,to,the,required,view,class,which,by,default,is,abstract,url,based,view;public,void,set,view,class,class,view,class,if,required,view,class,is,assignable,from,view,class,string,name,view,class,get,name,throw,new,illegal,argument,exception,given,view,class,name,is,not,of,type,required,view,class,get,name,this,view,class,view,class
UrlBasedViewResolver -> public void setViewClass(Class<?> viewClass);1496955179;Set the view class to instantiate through {@link #createUrlBasedView(String)}._@param viewClass a class that is assignable to the required view class_which by default is AbstractUrlBasedView.;public void setViewClass(Class<?> viewClass) {_		if (!requiredViewClass().isAssignableFrom(viewClass)) {_			String name = viewClass.getName()__			throw new IllegalArgumentException("Given view class [" + name + "] " +_					"is not of type [" + requiredViewClass().getName() + "]")__		}_		this.viewClass = viewClass__	};set,the,view,class,to,instantiate,through,link,create,url,based,view,string,param,view,class,a,class,that,is,assignable,to,the,required,view,class,which,by,default,is,abstract,url,based,view;public,void,set,view,class,class,view,class,if,required,view,class,is,assignable,from,view,class,string,name,view,class,get,name,throw,new,illegal,argument,exception,given,view,class,name,is,not,of,type,required,view,class,get,name,this,view,class,view,class
UrlBasedViewResolver -> public void setViewClass(Class<?> viewClass);1497275339;Set the view class to instantiate through {@link #createView(String)}._@param viewClass a class that is assignable to the required view class_which by default is AbstractUrlBasedView;public void setViewClass(Class<?> viewClass) {_		if (!requiredViewClass().isAssignableFrom(viewClass)) {_			String name = viewClass.getName()__			throw new IllegalArgumentException("Given view class [" + name + "] " +_					"is not of type [" + requiredViewClass().getName() + "]")__		}_		this.viewClass = viewClass__	};set,the,view,class,to,instantiate,through,link,create,view,string,param,view,class,a,class,that,is,assignable,to,the,required,view,class,which,by,default,is,abstract,url,based,view;public,void,set,view,class,class,view,class,if,required,view,class,is,assignable,from,view,class,string,name,view,class,get,name,throw,new,illegal,argument,exception,given,view,class,name,is,not,of,type,required,view,class,get,name,this,view,class,view,class
UrlBasedViewResolver -> protected AbstractUrlBasedView createUrlBasedView(String viewName);1485986572;Creates a new View instance of the specified view class and configures it._Does <i>not</i> perform any lookup for pre-defined View instances._<p>Spring lifecycle methods as defined by the bean container do not have to_be called here_ those will be applied by the {@code loadView} method_after this method returns._<p>Subclasses will typically call {@code super.buildView(viewName)}_first, before setting further properties themselves. {@code loadView}_will then apply Spring lifecycle methods at the end of this process._@param viewName the name of the view to build_@return the View instance;protected AbstractUrlBasedView createUrlBasedView(String viewName) {_		AbstractUrlBasedView view = (AbstractUrlBasedView) BeanUtils.instantiateClass(getViewClass())__		view.setSupportedMediaTypes(getSupportedMediaTypes())__		view.setRequestContextAttribute(getRequestContextAttribute())__		view.setDefaultCharset(getDefaultCharset())__		view.setUrl(getPrefix() + viewName + getSuffix())__		return view__	};creates,a,new,view,instance,of,the,specified,view,class,and,configures,it,does,i,not,i,perform,any,lookup,for,pre,defined,view,instances,p,spring,lifecycle,methods,as,defined,by,the,bean,container,do,not,have,to,be,called,here,those,will,be,applied,by,the,code,load,view,method,after,this,method,returns,p,subclasses,will,typically,call,code,super,build,view,view,name,first,before,setting,further,properties,themselves,code,load,view,will,then,apply,spring,lifecycle,methods,at,the,end,of,this,process,param,view,name,the,name,of,the,view,to,build,return,the,view,instance;protected,abstract,url,based,view,create,url,based,view,string,view,name,abstract,url,based,view,view,abstract,url,based,view,bean,utils,instantiate,class,get,view,class,view,set,supported,media,types,get,supported,media,types,view,set,request,context,attribute,get,request,context,attribute,view,set,default,charset,get,default,charset,view,set,url,get,prefix,view,name,get,suffix,return,view
UrlBasedViewResolver -> protected AbstractUrlBasedView createUrlBasedView(String viewName);1486720600;Creates a new View instance of the specified view class and configures it._Does <i>not</i> perform any lookup for pre-defined View instances._<p>Spring lifecycle methods as defined by the bean container do not have to_be called here_ those will be applied by the {@code loadView} method_after this method returns._<p>Subclasses will typically call {@code super.buildView(viewName)}_first, before setting further properties themselves. {@code loadView}_will then apply Spring lifecycle methods at the end of this process._@param viewName the name of the view to build_@return the View instance;protected AbstractUrlBasedView createUrlBasedView(String viewName) {_		AbstractUrlBasedView view = (AbstractUrlBasedView) BeanUtils.instantiateClass(getViewClass())__		view.setSupportedMediaTypes(getSupportedMediaTypes())__		view.setRequestContextAttribute(getRequestContextAttribute())__		view.setDefaultCharset(getDefaultCharset())__		view.setUrl(getPrefix() + viewName + getSuffix())__		return view__	};creates,a,new,view,instance,of,the,specified,view,class,and,configures,it,does,i,not,i,perform,any,lookup,for,pre,defined,view,instances,p,spring,lifecycle,methods,as,defined,by,the,bean,container,do,not,have,to,be,called,here,those,will,be,applied,by,the,code,load,view,method,after,this,method,returns,p,subclasses,will,typically,call,code,super,build,view,view,name,first,before,setting,further,properties,themselves,code,load,view,will,then,apply,spring,lifecycle,methods,at,the,end,of,this,process,param,view,name,the,name,of,the,view,to,build,return,the,view,instance;protected,abstract,url,based,view,create,url,based,view,string,view,name,abstract,url,based,view,view,abstract,url,based,view,bean,utils,instantiate,class,get,view,class,view,set,supported,media,types,get,supported,media,types,view,set,request,context,attribute,get,request,context,attribute,view,set,default,charset,get,default,charset,view,set,url,get,prefix,view,name,get,suffix,return,view
UrlBasedViewResolver -> protected AbstractUrlBasedView createUrlBasedView(String viewName);1495868221;Creates a new View instance of the specified view class and configures it._Does <i>not</i> perform any lookup for pre-defined View instances._<p>Spring lifecycle methods as defined by the bean container do not have to_be called here_ those will be applied by the {@code loadView} method_after this method returns._<p>Subclasses will typically call {@code super.buildView(viewName)}_first, before setting further properties themselves. {@code loadView}_will then apply Spring lifecycle methods at the end of this process._@param viewName the name of the view to build_@return the View instance;protected AbstractUrlBasedView createUrlBasedView(String viewName) {_		AbstractUrlBasedView view = (AbstractUrlBasedView) BeanUtils.instantiateClass(getViewClass())__		view.setSupportedMediaTypes(getSupportedMediaTypes())__		view.setRequestContextAttribute(getRequestContextAttribute())__		view.setDefaultCharset(getDefaultCharset())__		view.setUrl(getPrefix() + viewName + getSuffix())__		return view__	};creates,a,new,view,instance,of,the,specified,view,class,and,configures,it,does,i,not,i,perform,any,lookup,for,pre,defined,view,instances,p,spring,lifecycle,methods,as,defined,by,the,bean,container,do,not,have,to,be,called,here,those,will,be,applied,by,the,code,load,view,method,after,this,method,returns,p,subclasses,will,typically,call,code,super,build,view,view,name,first,before,setting,further,properties,themselves,code,load,view,will,then,apply,spring,lifecycle,methods,at,the,end,of,this,process,param,view,name,the,name,of,the,view,to,build,return,the,view,instance;protected,abstract,url,based,view,create,url,based,view,string,view,name,abstract,url,based,view,view,abstract,url,based,view,bean,utils,instantiate,class,get,view,class,view,set,supported,media,types,get,supported,media,types,view,set,request,context,attribute,get,request,context,attribute,view,set,default,charset,get,default,charset,view,set,url,get,prefix,view,name,get,suffix,return,view
UrlBasedViewResolver -> protected AbstractUrlBasedView createUrlBasedView(String viewName);1496837955;Creates a new View instance of the specified view class and configures it._Does <i>not</i> perform any lookup for pre-defined View instances._<p>Spring lifecycle methods as defined by the bean container do not have to_be called here_ those will be applied by the {@code loadView} method_after this method returns._<p>Subclasses will typically call {@code super.buildView(viewName)}_first, before setting further properties themselves. {@code loadView}_will then apply Spring lifecycle methods at the end of this process._@param viewName the name of the view to build_@return the View instance;protected AbstractUrlBasedView createUrlBasedView(String viewName) {_		Class<?> viewClass = getViewClass()__		Assert.state(viewClass != null, "No view class")___		AbstractUrlBasedView view = (AbstractUrlBasedView) BeanUtils.instantiateClass(viewClass)__		view.setSupportedMediaTypes(getSupportedMediaTypes())__		view.setRequestContextAttribute(getRequestContextAttribute())__		view.setDefaultCharset(getDefaultCharset())__		view.setUrl(getPrefix() + viewName + getSuffix())___		return view__	};creates,a,new,view,instance,of,the,specified,view,class,and,configures,it,does,i,not,i,perform,any,lookup,for,pre,defined,view,instances,p,spring,lifecycle,methods,as,defined,by,the,bean,container,do,not,have,to,be,called,here,those,will,be,applied,by,the,code,load,view,method,after,this,method,returns,p,subclasses,will,typically,call,code,super,build,view,view,name,first,before,setting,further,properties,themselves,code,load,view,will,then,apply,spring,lifecycle,methods,at,the,end,of,this,process,param,view,name,the,name,of,the,view,to,build,return,the,view,instance;protected,abstract,url,based,view,create,url,based,view,string,view,name,class,view,class,get,view,class,assert,state,view,class,null,no,view,class,abstract,url,based,view,view,abstract,url,based,view,bean,utils,instantiate,class,view,class,view,set,supported,media,types,get,supported,media,types,view,set,request,context,attribute,get,request,context,attribute,view,set,default,charset,get,default,charset,view,set,url,get,prefix,view,name,get,suffix,return,view
UrlBasedViewResolver -> protected AbstractUrlBasedView createUrlBasedView(String viewName);1496955179;Creates a new View instance of the specified view class and configures it._Does <i>not</i> perform any lookup for pre-defined View instances._<p>Spring lifecycle methods as defined by the bean container do not have to_be called here_ those will be applied by the {@code loadView} method_after this method returns._<p>Subclasses will typically call {@code super.buildView(viewName)}_first, before setting further properties themselves. {@code loadView}_will then apply Spring lifecycle methods at the end of this process._@param viewName the name of the view to build_@return the View instance;protected AbstractUrlBasedView createUrlBasedView(String viewName) {_		Class<?> viewClass = getViewClass()__		Assert.state(viewClass != null, "No view class")___		AbstractUrlBasedView view = (AbstractUrlBasedView) BeanUtils.instantiateClass(viewClass)__		view.setSupportedMediaTypes(getSupportedMediaTypes())__		view.setRequestContextAttribute(getRequestContextAttribute())__		view.setDefaultCharset(getDefaultCharset())__		view.setUrl(getPrefix() + viewName + getSuffix())___		return view__	};creates,a,new,view,instance,of,the,specified,view,class,and,configures,it,does,i,not,i,perform,any,lookup,for,pre,defined,view,instances,p,spring,lifecycle,methods,as,defined,by,the,bean,container,do,not,have,to,be,called,here,those,will,be,applied,by,the,code,load,view,method,after,this,method,returns,p,subclasses,will,typically,call,code,super,build,view,view,name,first,before,setting,further,properties,themselves,code,load,view,will,then,apply,spring,lifecycle,methods,at,the,end,of,this,process,param,view,name,the,name,of,the,view,to,build,return,the,view,instance;protected,abstract,url,based,view,create,url,based,view,string,view,name,class,view,class,get,view,class,assert,state,view,class,null,no,view,class,abstract,url,based,view,view,abstract,url,based,view,bean,utils,instantiate,class,view,class,view,set,supported,media,types,get,supported,media,types,view,set,request,context,attribute,get,request,context,attribute,view,set,default,charset,get,default,charset,view,set,url,get,prefix,view,name,get,suffix,return,view
UrlBasedViewResolver -> protected String getSuffix();1485986572;Return the suffix that gets appended to view names when building a URL.;protected String getSuffix() {_		return this.suffix__	};return,the,suffix,that,gets,appended,to,view,names,when,building,a,url;protected,string,get,suffix,return,this,suffix
UrlBasedViewResolver -> protected String getSuffix();1486720600;Return the suffix that gets appended to view names when building a URL.;protected String getSuffix() {_		return this.suffix__	};return,the,suffix,that,gets,appended,to,view,names,when,building,a,url;protected,string,get,suffix,return,this,suffix
UrlBasedViewResolver -> protected String getSuffix();1495868221;Return the suffix that gets appended to view names when building a URL.;protected String getSuffix() {_		return this.suffix__	};return,the,suffix,that,gets,appended,to,view,names,when,building,a,url;protected,string,get,suffix,return,this,suffix
UrlBasedViewResolver -> protected String getSuffix();1496837955;Return the suffix that gets appended to view names when building a URL.;protected String getSuffix() {_		return this.suffix__	};return,the,suffix,that,gets,appended,to,view,names,when,building,a,url;protected,string,get,suffix,return,this,suffix
UrlBasedViewResolver -> protected String getSuffix();1496955179;Return the suffix that gets appended to view names when building a URL.;protected String getSuffix() {_		return this.suffix__	};return,the,suffix,that,gets,appended,to,view,names,when,building,a,url;protected,string,get,suffix,return,this,suffix
UrlBasedViewResolver -> protected String getSuffix();1497275339;Return the suffix that gets appended to view names when building a URL.;protected String getSuffix() {_		return this.suffix__	};return,the,suffix,that,gets,appended,to,view,names,when,building,a,url;protected,string,get,suffix,return,this,suffix
UrlBasedViewResolver -> protected String getSuffix();1500448076;Return the suffix that gets appended to view names when building a URL.;protected String getSuffix() {_		return this.suffix__	};return,the,suffix,that,gets,appended,to,view,names,when,building,a,url;protected,string,get,suffix,return,this,suffix
UrlBasedViewResolver -> protected View applyLifecycleMethods(String viewName, AbstractUrlBasedView view);1497275339;Apply the containing {@link ApplicationContext}'s lifecycle methods_to the given {@link View} instance, if such a context is available._@param viewName the name of the view_@param view the freshly created View instance, pre-configured with_{@link AbstractUrlBasedView}'s properties_@return the {@link View} instance to use (either the original one_or a decorated variant)_@see #getApplicationContext()_@see ApplicationContext#getAutowireCapableBeanFactory()_@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#initializeBean;protected View applyLifecycleMethods(String viewName, AbstractUrlBasedView view) {_		ApplicationContext context = getApplicationContext()__		if (context != null) {_			Object initialized = context.getAutowireCapableBeanFactory().initializeBean(view, viewName)__			if (initialized instanceof View) {_				return (View) initialized__			}_		}_		return view__	};apply,the,containing,link,application,context,s,lifecycle,methods,to,the,given,link,view,instance,if,such,a,context,is,available,param,view,name,the,name,of,the,view,param,view,the,freshly,created,view,instance,pre,configured,with,link,abstract,url,based,view,s,properties,return,the,link,view,instance,to,use,either,the,original,one,or,a,decorated,variant,see,get,application,context,see,application,context,get,autowire,capable,bean,factory,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,initialize,bean;protected,view,apply,lifecycle,methods,string,view,name,abstract,url,based,view,view,application,context,context,get,application,context,if,context,null,object,initialized,context,get,autowire,capable,bean,factory,initialize,bean,view,view,name,if,initialized,instanceof,view,return,view,initialized,return,view
UrlBasedViewResolver -> protected View applyLifecycleMethods(String viewName, AbstractUrlBasedView view);1500448076;Apply the containing {@link ApplicationContext}'s lifecycle methods_to the given {@link View} instance, if such a context is available._@param viewName the name of the view_@param view the freshly created View instance, pre-configured with_{@link AbstractUrlBasedView}'s properties_@return the {@link View} instance to use (either the original one_or a decorated variant)_@see #getApplicationContext()_@see ApplicationContext#getAutowireCapableBeanFactory()_@see org.springframework.beans.factory.config.AutowireCapableBeanFactory#initializeBean;protected View applyLifecycleMethods(String viewName, AbstractUrlBasedView view) {_		ApplicationContext context = getApplicationContext()__		if (context != null) {_			Object initialized = context.getAutowireCapableBeanFactory().initializeBean(view, viewName)__			if (initialized instanceof View) {_				return (View) initialized__			}_		}_		return view__	};apply,the,containing,link,application,context,s,lifecycle,methods,to,the,given,link,view,instance,if,such,a,context,is,available,param,view,name,the,name,of,the,view,param,view,the,freshly,created,view,instance,pre,configured,with,link,abstract,url,based,view,s,properties,return,the,link,view,instance,to,use,either,the,original,one,or,a,decorated,variant,see,get,application,context,see,application,context,get,autowire,capable,bean,factory,see,org,springframework,beans,factory,config,autowire,capable,bean,factory,initialize,bean;protected,view,apply,lifecycle,methods,string,view,name,abstract,url,based,view,view,application,context,context,get,application,context,if,context,null,object,initialized,context,get,autowire,capable,bean,factory,initialize,bean,view,view,name,if,initialized,instanceof,view,return,view,initialized,return,view
UrlBasedViewResolver -> @Nullable 	public ApplicationContext getApplicationContext();1497275339;Return the containing {@code ApplicationContext}, if any._@see #setApplicationContext;@Nullable_	public ApplicationContext getApplicationContext() {_		return this.applicationContext__	};return,the,containing,code,application,context,if,any,see,set,application,context;nullable,public,application,context,get,application,context,return,this,application,context
UrlBasedViewResolver -> @Nullable 	public ApplicationContext getApplicationContext();1500448076;Return the containing {@code ApplicationContext}, if any._@see #setApplicationContext;@Nullable_	public ApplicationContext getApplicationContext() {_		return this.applicationContext__	};return,the,containing,code,application,context,if,any,see,set,application,context;nullable,public,application,context,get,application,context,return,this,application,context
UrlBasedViewResolver -> protected Class<?> requiredViewClass();1485986572;Return the required type of view for this resolver._This implementation returns {@link AbstractUrlBasedView}._@see AbstractUrlBasedView;protected Class<?> requiredViewClass() {_		return AbstractUrlBasedView.class__	};return,the,required,type,of,view,for,this,resolver,this,implementation,returns,link,abstract,url,based,view,see,abstract,url,based,view;protected,class,required,view,class,return,abstract,url,based,view,class
UrlBasedViewResolver -> protected Class<?> requiredViewClass();1486720600;Return the required type of view for this resolver._This implementation returns {@link AbstractUrlBasedView}._@see AbstractUrlBasedView;protected Class<?> requiredViewClass() {_		return AbstractUrlBasedView.class__	};return,the,required,type,of,view,for,this,resolver,this,implementation,returns,link,abstract,url,based,view,see,abstract,url,based,view;protected,class,required,view,class,return,abstract,url,based,view,class
UrlBasedViewResolver -> protected Class<?> requiredViewClass();1495868221;Return the required type of view for this resolver._This implementation returns {@link AbstractUrlBasedView}._@see AbstractUrlBasedView;protected Class<?> requiredViewClass() {_		return AbstractUrlBasedView.class__	};return,the,required,type,of,view,for,this,resolver,this,implementation,returns,link,abstract,url,based,view,see,abstract,url,based,view;protected,class,required,view,class,return,abstract,url,based,view,class
UrlBasedViewResolver -> protected Class<?> requiredViewClass();1496837955;Return the required type of view for this resolver._This implementation returns {@link AbstractUrlBasedView}._@see AbstractUrlBasedView;protected Class<?> requiredViewClass() {_		return AbstractUrlBasedView.class__	};return,the,required,type,of,view,for,this,resolver,this,implementation,returns,link,abstract,url,based,view,see,abstract,url,based,view;protected,class,required,view,class,return,abstract,url,based,view,class
UrlBasedViewResolver -> protected Class<?> requiredViewClass();1496955179;Return the required type of view for this resolver._This implementation returns {@link AbstractUrlBasedView}._@see AbstractUrlBasedView;protected Class<?> requiredViewClass() {_		return AbstractUrlBasedView.class__	};return,the,required,type,of,view,for,this,resolver,this,implementation,returns,link,abstract,url,based,view,see,abstract,url,based,view;protected,class,required,view,class,return,abstract,url,based,view,class
UrlBasedViewResolver -> protected Class<?> requiredViewClass();1497275339;Return the required type of view for this resolver._This implementation returns {@link AbstractUrlBasedView}._@see AbstractUrlBasedView;protected Class<?> requiredViewClass() {_		return AbstractUrlBasedView.class__	};return,the,required,type,of,view,for,this,resolver,this,implementation,returns,link,abstract,url,based,view,see,abstract,url,based,view;protected,class,required,view,class,return,abstract,url,based,view,class
UrlBasedViewResolver -> protected Class<?> requiredViewClass();1500448076;Return the required type of view for this resolver._This implementation returns {@link AbstractUrlBasedView}._@see AbstractUrlBasedView;protected Class<?> requiredViewClass() {_		return AbstractUrlBasedView.class__	};return,the,required,type,of,view,for,this,resolver,this,implementation,returns,link,abstract,url,based,view,see,abstract,url,based,view;protected,class,required,view,class,return,abstract,url,based,view,class
UrlBasedViewResolver -> public void setSuffix(@Nullable String suffix);1496837955;Set the suffix that gets appended to view names when building a URL.;public void setSuffix(@Nullable String suffix) {_		this.suffix = (suffix != null ? suffix : "")__	};set,the,suffix,that,gets,appended,to,view,names,when,building,a,url;public,void,set,suffix,nullable,string,suffix,this,suffix,suffix,null,suffix
UrlBasedViewResolver -> public void setSuffix(@Nullable String suffix);1496955179;Set the suffix that gets appended to view names when building a URL.;public void setSuffix(@Nullable String suffix) {_		this.suffix = (suffix != null ? suffix : "")__	};set,the,suffix,that,gets,appended,to,view,names,when,building,a,url;public,void,set,suffix,nullable,string,suffix,this,suffix,suffix,null,suffix
UrlBasedViewResolver -> public void setSuffix(@Nullable String suffix);1497275339;Set the suffix that gets appended to view names when building a URL.;public void setSuffix(@Nullable String suffix) {_		this.suffix = (suffix != null ? suffix : "")__	};set,the,suffix,that,gets,appended,to,view,names,when,building,a,url;public,void,set,suffix,nullable,string,suffix,this,suffix,suffix,null,suffix
UrlBasedViewResolver -> public void setSuffix(@Nullable String suffix);1500448076;Set the suffix that gets appended to view names when building a URL.;public void setSuffix(@Nullable String suffix) {_		this.suffix = (suffix != null ? suffix : "")__	};set,the,suffix,that,gets,appended,to,view,names,when,building,a,url;public,void,set,suffix,nullable,string,suffix,this,suffix,suffix,null,suffix
UrlBasedViewResolver -> protected String getRequestContextAttribute();1485986572;Return the name of the RequestContext attribute for all views, if any.;protected String getRequestContextAttribute() {_		return this.requestContextAttribute__	};return,the,name,of,the,request,context,attribute,for,all,views,if,any;protected,string,get,request,context,attribute,return,this,request,context,attribute
UrlBasedViewResolver -> protected String getRequestContextAttribute();1486720600;Return the name of the RequestContext attribute for all views, if any.;protected String getRequestContextAttribute() {_		return this.requestContextAttribute__	};return,the,name,of,the,request,context,attribute,for,all,views,if,any;protected,string,get,request,context,attribute,return,this,request,context,attribute
UrlBasedViewResolver -> protected AbstractUrlBasedView createView(String viewName);1497275339;Creates a new View instance of the specified view class and configures it._Does <i>not</i> perform any lookup for pre-defined View instances._<p>Spring lifecycle methods as defined by the bean container do not have to_be called here: They will be automatically applied afterwards, provided_that an {@link #setApplicationContext ApplicationContext} is available._@param viewName the name of the view to build_@return the View instance_@see #getViewClass()_@see #applyLifecycleMethods;protected AbstractUrlBasedView createView(String viewName) {_		Class<?> viewClass = getViewClass()__		Assert.state(viewClass != null, "No view class")___		AbstractUrlBasedView view = (AbstractUrlBasedView) BeanUtils.instantiateClass(viewClass)__		view.setSupportedMediaTypes(getSupportedMediaTypes())__		view.setRequestContextAttribute(getRequestContextAttribute())__		view.setDefaultCharset(getDefaultCharset())__		view.setUrl(getPrefix() + viewName + getSuffix())___		return view__	};creates,a,new,view,instance,of,the,specified,view,class,and,configures,it,does,i,not,i,perform,any,lookup,for,pre,defined,view,instances,p,spring,lifecycle,methods,as,defined,by,the,bean,container,do,not,have,to,be,called,here,they,will,be,automatically,applied,afterwards,provided,that,an,link,set,application,context,application,context,is,available,param,view,name,the,name,of,the,view,to,build,return,the,view,instance,see,get,view,class,see,apply,lifecycle,methods;protected,abstract,url,based,view,create,view,string,view,name,class,view,class,get,view,class,assert,state,view,class,null,no,view,class,abstract,url,based,view,view,abstract,url,based,view,bean,utils,instantiate,class,view,class,view,set,supported,media,types,get,supported,media,types,view,set,request,context,attribute,get,request,context,attribute,view,set,default,charset,get,default,charset,view,set,url,get,prefix,view,name,get,suffix,return,view
UrlBasedViewResolver -> protected AbstractUrlBasedView createView(String viewName);1500448076;Creates a new View instance of the specified view class and configures it._Does <i>not</i> perform any lookup for pre-defined View instances._<p>Spring lifecycle methods as defined by the bean container do not have to_be called here: They will be automatically applied afterwards, provided_that an {@link #setApplicationContext ApplicationContext} is available._@param viewName the name of the view to build_@return the View instance_@see #getViewClass()_@see #applyLifecycleMethods;protected AbstractUrlBasedView createView(String viewName) {_		Class<?> viewClass = getViewClass()__		Assert.state(viewClass != null, "No view class")___		AbstractUrlBasedView view = (AbstractUrlBasedView) BeanUtils.instantiateClass(viewClass)__		view.setSupportedMediaTypes(getSupportedMediaTypes())__		view.setRequestContextAttribute(getRequestContextAttribute())__		view.setDefaultCharset(getDefaultCharset())__		view.setUrl(getPrefix() + viewName + getSuffix())___		return view__	};creates,a,new,view,instance,of,the,specified,view,class,and,configures,it,does,i,not,i,perform,any,lookup,for,pre,defined,view,instances,p,spring,lifecycle,methods,as,defined,by,the,bean,container,do,not,have,to,be,called,here,they,will,be,automatically,applied,afterwards,provided,that,an,link,set,application,context,application,context,is,available,param,view,name,the,name,of,the,view,to,build,return,the,view,instance,see,get,view,class,see,apply,lifecycle,methods;protected,abstract,url,based,view,create,view,string,view,name,class,view,class,get,view,class,assert,state,view,class,null,no,view,class,abstract,url,based,view,view,abstract,url,based,view,bean,utils,instantiate,class,view,class,view,set,supported,media,types,get,supported,media,types,view,set,request,context,attribute,get,request,context,attribute,view,set,default,charset,get,default,charset,view,set,url,get,prefix,view,name,get,suffix,return,view
UrlBasedViewResolver -> public void setRedirectViewProvider(Function<String, RedirectView> redirectViewProvider);1485986572;URL based {@link RedirectView} provider which can be used to provide, for example,_redirect views with a custom default status code.;public void setRedirectViewProvider(Function<String, RedirectView> redirectViewProvider) {_		this.redirectViewProvider = redirectViewProvider__	};url,based,link,redirect,view,provider,which,can,be,used,to,provide,for,example,redirect,views,with,a,custom,default,status,code;public,void,set,redirect,view,provider,function,string,redirect,view,redirect,view,provider,this,redirect,view,provider,redirect,view,provider
UrlBasedViewResolver -> public void setRedirectViewProvider(Function<String, RedirectView> redirectViewProvider);1486720600;URL based {@link RedirectView} provider which can be used to provide, for example,_redirect views with a custom default status code.;public void setRedirectViewProvider(Function<String, RedirectView> redirectViewProvider) {_		this.redirectViewProvider = redirectViewProvider__	};url,based,link,redirect,view,provider,which,can,be,used,to,provide,for,example,redirect,views,with,a,custom,default,status,code;public,void,set,redirect,view,provider,function,string,redirect,view,redirect,view,provider,this,redirect,view,provider,redirect,view,provider
UrlBasedViewResolver -> public void setRedirectViewProvider(Function<String, RedirectView> redirectViewProvider);1495868221;URL based {@link RedirectView} provider which can be used to provide, for example,_redirect views with a custom default status code.;public void setRedirectViewProvider(Function<String, RedirectView> redirectViewProvider) {_		this.redirectViewProvider = redirectViewProvider__	};url,based,link,redirect,view,provider,which,can,be,used,to,provide,for,example,redirect,views,with,a,custom,default,status,code;public,void,set,redirect,view,provider,function,string,redirect,view,redirect,view,provider,this,redirect,view,provider,redirect,view,provider
UrlBasedViewResolver -> public void setRedirectViewProvider(Function<String, RedirectView> redirectViewProvider);1496837955;URL based {@link RedirectView} provider which can be used to provide, for example,_redirect views with a custom default status code.;public void setRedirectViewProvider(Function<String, RedirectView> redirectViewProvider) {_		this.redirectViewProvider = redirectViewProvider__	};url,based,link,redirect,view,provider,which,can,be,used,to,provide,for,example,redirect,views,with,a,custom,default,status,code;public,void,set,redirect,view,provider,function,string,redirect,view,redirect,view,provider,this,redirect,view,provider,redirect,view,provider
UrlBasedViewResolver -> public void setRedirectViewProvider(Function<String, RedirectView> redirectViewProvider);1496955179;URL based {@link RedirectView} provider which can be used to provide, for example,_redirect views with a custom default status code.;public void setRedirectViewProvider(Function<String, RedirectView> redirectViewProvider) {_		this.redirectViewProvider = redirectViewProvider__	};url,based,link,redirect,view,provider,which,can,be,used,to,provide,for,example,redirect,views,with,a,custom,default,status,code;public,void,set,redirect,view,provider,function,string,redirect,view,redirect,view,provider,this,redirect,view,provider,redirect,view,provider
UrlBasedViewResolver -> public void setRedirectViewProvider(Function<String, RedirectView> redirectViewProvider);1497275339;URL based {@link RedirectView} provider which can be used to provide, for example,_redirect views with a custom default status code.;public void setRedirectViewProvider(Function<String, RedirectView> redirectViewProvider) {_		this.redirectViewProvider = redirectViewProvider__	};url,based,link,redirect,view,provider,which,can,be,used,to,provide,for,example,redirect,views,with,a,custom,default,status,code;public,void,set,redirect,view,provider,function,string,redirect,view,redirect,view,provider,this,redirect,view,provider,redirect,view,provider
UrlBasedViewResolver -> public void setRedirectViewProvider(Function<String, RedirectView> redirectViewProvider);1500448076;URL based {@link RedirectView} provider which can be used to provide, for example,_redirect views with a custom default status code.;public void setRedirectViewProvider(Function<String, RedirectView> redirectViewProvider) {_		this.redirectViewProvider = redirectViewProvider__	};url,based,link,redirect,view,provider,which,can,be,used,to,provide,for,example,redirect,views,with,a,custom,default,status,code;public,void,set,redirect,view,provider,function,string,redirect,view,redirect,view,provider,this,redirect,view,provider,redirect,view,provider
UrlBasedViewResolver -> protected Class<?> getViewClass();1485986572;Return the view class to be used to create views.;protected Class<?> getViewClass() {_		return this.viewClass__	};return,the,view,class,to,be,used,to,create,views;protected,class,get,view,class,return,this,view,class
UrlBasedViewResolver -> protected Class<?> getViewClass();1486720600;Return the view class to be used to create views.;protected Class<?> getViewClass() {_		return this.viewClass__	};return,the,view,class,to,be,used,to,create,views;protected,class,get,view,class,return,this,view,class
UrlBasedViewResolver -> protected Class<?> getViewClass();1495868221;Return the view class to be used to create views.;protected Class<?> getViewClass() {_		return this.viewClass__	};return,the,view,class,to,be,used,to,create,views;protected,class,get,view,class,return,this,view,class
UrlBasedViewResolver -> @Nullable 	protected String[] getViewNames();1496837955;Return the view names (or name patterns) that can be handled by this_{@link ViewResolver}.;@Nullable_	protected String[] getViewNames() {_		return this.viewNames__	};return,the,view,names,or,name,patterns,that,can,be,handled,by,this,link,view,resolver;nullable,protected,string,get,view,names,return,this,view,names
UrlBasedViewResolver -> @Nullable 	protected String[] getViewNames();1496955179;Return the view names (or name patterns) that can be handled by this_{@link ViewResolver}.;@Nullable_	protected String[] getViewNames() {_		return this.viewNames__	};return,the,view,names,or,name,patterns,that,can,be,handled,by,this,link,view,resolver;nullable,protected,string,get,view,names,return,this,view,names
UrlBasedViewResolver -> @Nullable 	protected String[] getViewNames();1497275339;Return the view names (or name patterns) that can be handled by this_{@link ViewResolver}.;@Nullable_	protected String[] getViewNames() {_		return this.viewNames__	};return,the,view,names,or,name,patterns,that,can,be,handled,by,this,link,view,resolver;nullable,protected,string,get,view,names,return,this,view,names
UrlBasedViewResolver -> @Nullable 	protected String[] getViewNames();1500448076;Return the view names (or name patterns) that can be handled by this_{@link ViewResolver}.;@Nullable_	protected String[] getViewNames() {_		return this.viewNames__	};return,the,view,names,or,name,patterns,that,can,be,handled,by,this,link,view,resolver;nullable,protected,string,get,view,names,return,this,view,names
UrlBasedViewResolver -> public void setSuffix(String suffix);1485986572;Set the suffix that gets appended to view names when building a URL.;public void setSuffix(String suffix) {_		this.suffix = (suffix != null ? suffix : "")__	};set,the,suffix,that,gets,appended,to,view,names,when,building,a,url;public,void,set,suffix,string,suffix,this,suffix,suffix,null,suffix
UrlBasedViewResolver -> public void setSuffix(String suffix);1486720600;Set the suffix that gets appended to view names when building a URL.;public void setSuffix(String suffix) {_		this.suffix = (suffix != null ? suffix : "")__	};set,the,suffix,that,gets,appended,to,view,names,when,building,a,url;public,void,set,suffix,string,suffix,this,suffix,suffix,null,suffix
UrlBasedViewResolver -> public void setSuffix(String suffix);1495868221;Set the suffix that gets appended to view names when building a URL.;public void setSuffix(String suffix) {_		this.suffix = (suffix != null ? suffix : "")__	};set,the,suffix,that,gets,appended,to,view,names,when,building,a,url;public,void,set,suffix,string,suffix,this,suffix,suffix,null,suffix
UrlBasedViewResolver -> public void setPrefix(String prefix);1485986572;Set the prefix that gets prepended to view names when building a URL.;public void setPrefix(String prefix) {_		this.prefix = (prefix != null ? prefix : "")__	};set,the,prefix,that,gets,prepended,to,view,names,when,building,a,url;public,void,set,prefix,string,prefix,this,prefix,prefix,null,prefix
UrlBasedViewResolver -> public void setPrefix(String prefix);1486720600;Set the prefix that gets prepended to view names when building a URL.;public void setPrefix(String prefix) {_		this.prefix = (prefix != null ? prefix : "")__	};set,the,prefix,that,gets,prepended,to,view,names,when,building,a,url;public,void,set,prefix,string,prefix,this,prefix,prefix,null,prefix
UrlBasedViewResolver -> public void setPrefix(String prefix);1495868221;Set the prefix that gets prepended to view names when building a URL.;public void setPrefix(String prefix) {_		this.prefix = (prefix != null ? prefix : "")__	};set,the,prefix,that,gets,prepended,to,view,names,when,building,a,url;public,void,set,prefix,string,prefix,this,prefix,prefix,null,prefix
