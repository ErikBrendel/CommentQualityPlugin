commented;modifiers;parameterAmount;loc;comment;code
false;public;2;20;;@Override public void onOpen(Session session, EndpointConfig config) {     this.delegateSession = this.sessionFactory.apply(session).     Assert.state(this.delegateSession != null, "No delegate session").     session.addMessageHandler(String.class, message -> {         WebSocketMessage webSocketMessage = toMessage(message).         this.delegateSession.handleMessage(webSocketMessage.getType(), webSocketMessage).     }).     session.addMessageHandler(ByteBuffer.class, message -> {         WebSocketMessage webSocketMessage = toMessage(message).         this.delegateSession.handleMessage(webSocketMessage.getType(), webSocketMessage).     }).     session.addMessageHandler(PongMessage.class, message -> {         WebSocketMessage webSocketMessage = toMessage(message).         this.delegateSession.handleMessage(webSocketMessage.getType(), webSocketMessage).     }).     this.delegateHandler.handle(this.delegateSession).subscribe(this.delegateSession). }
false;private;1;19;;private <T> WebSocketMessage toMessage(T message) {     WebSocketSession session = this.delegateSession.     Assert.state(session != null, "Cannot create message without a session").     if (message instanceof String) {         byte[] bytes = ((String) message).getBytes(StandardCharsets.UTF_8).         return new WebSocketMessage(Type.TEXT, session.bufferFactory().wrap(bytes)).     } else if (message instanceof ByteBuffer) {         DataBuffer buffer = session.bufferFactory().wrap((ByteBuffer) message).         return new WebSocketMessage(Type.BINARY, buffer).     } else if (message instanceof PongMessage) {         DataBuffer buffer = session.bufferFactory().wrap(((PongMessage) message).getApplicationData()).         return new WebSocketMessage(Type.PONG, buffer).     } else {         throw new IllegalArgumentException("Unexpected message type: " + message).     } }
false;public;2;7;;@Override public void onClose(Session session, CloseReason reason) {     if (this.delegateSession != null) {         int code = reason.getCloseCode().getCode().         this.delegateSession.handleClose(new CloseStatus(code, reason.getReasonPhrase())).     } }
false;public;2;6;;@Override public void onError(Session session, Throwable exception) {     if (this.delegateSession != null) {         this.delegateSession.handleError(exception).     } }
