commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set a pre-configured Configuration to use for the FreeMarker web config,  * e.g. a shared one for web and email usage. If this is not set,  * FreeMarkerConfigurationFactory's properties (inherited by this class)  * have to be specified.  */ ;/**  * Set a pre-configured Configuration to use for the FreeMarker web config,  * e.g. a shared one for web and email usage. If this is not set,  * FreeMarkerConfigurationFactory's properties (inherited by this class)  * have to be specified.  */ public void setConfiguration(Configuration configuration) {     this.configuration = configuration. }
true;public;0;6;/**  * Initialize FreeMarkerConfigurationFactory's Configuration  * if not overridden by a pre-configured FreeMarker Configuration.  * <p>Sets up a ClassTemplateLoader to use for loading Spring macros.  * @see #createConfiguration  * @see #setConfiguration  */ ;/**  * Initialize FreeMarkerConfigurationFactory's Configuration  * if not overridden by a pre-configured FreeMarker Configuration.  * <p>Sets up a ClassTemplateLoader to use for loading Spring macros.  * @see #createConfiguration  * @see #setConfiguration  */ @Override public void afterPropertiesSet() throws IOException, TemplateException {     if (this.configuration == null) {         this.configuration = createConfiguration().     } }
true;protected;1;4;/**  * This implementation registers an additional ClassTemplateLoader  * for the Spring-provided macros, added to the end of the list.  */ ;/**  * This implementation registers an additional ClassTemplateLoader  * for the Spring-provided macros, added to the end of the list.  */ @Override protected void postProcessTemplateLoaders(List<TemplateLoader> templateLoaders) {     templateLoaders.add(new ClassTemplateLoader(FreeMarkerConfigurer.class, "")). }
true;public;0;5;/**  * Return the Configuration object wrapped by this bean.  */ ;/**  * Return the Configuration object wrapped by this bean.  */ @Override public Configuration getConfiguration() {     Assert.state(this.configuration != null, "No Configuration available").     return this.configuration. }
