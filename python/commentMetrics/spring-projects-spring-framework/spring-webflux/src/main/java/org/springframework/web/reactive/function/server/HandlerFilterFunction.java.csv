# id;timestamp;commentText;codeText;commentWords;codeWords
HandlerFilterFunction -> static HandlerFilterFunction<?, ?> ofRequestProcessor( 			Function<ServerRequest, Mono<ServerRequest>> requestProcessor);1487687241;Adapt the given request processor function to a filter function that only operates on the_{@code ClientRequest}._@param requestProcessor the request processor_@return the filter adaptation of the request processor;static HandlerFilterFunction<?, ?> ofRequestProcessor(_			Function<ServerRequest, Mono<ServerRequest>> requestProcessor) {__		Assert.notNull(requestProcessor, "'requestProcessor' must not be null")__		return (request, next) -> requestProcessor.apply(request).then(next::handle)__	};adapt,the,given,request,processor,function,to,a,filter,function,that,only,operates,on,the,code,client,request,param,request,processor,the,request,processor,return,the,filter,adaptation,of,the,request,processor;static,handler,filter,function,of,request,processor,function,server,request,mono,server,request,request,processor,assert,not,null,request,processor,request,processor,must,not,be,null,return,request,next,request,processor,apply,request,then,next,handle
HandlerFilterFunction -> static HandlerFilterFunction<?, ?> ofRequestProcessor( 			Function<ServerRequest, Mono<ServerRequest>> requestProcessor);1487713300;Adapt the given request processor function to a filter function that only operates on the_{@code ClientRequest}._@param requestProcessor the request processor_@return the filter adaptation of the request processor;static HandlerFilterFunction<?, ?> ofRequestProcessor(_			Function<ServerRequest, Mono<ServerRequest>> requestProcessor) {__		Assert.notNull(requestProcessor, "'requestProcessor' must not be null")__		return (request, next) -> requestProcessor.apply(request).then(next::handle)__	};adapt,the,given,request,processor,function,to,a,filter,function,that,only,operates,on,the,code,client,request,param,request,processor,the,request,processor,return,the,filter,adaptation,of,the,request,processor;static,handler,filter,function,of,request,processor,function,server,request,mono,server,request,request,processor,assert,not,null,request,processor,request,processor,must,not,be,null,return,request,next,request,processor,apply,request,then,next,handle
HandlerFilterFunction -> static HandlerFilterFunction<?, ?> ofRequestProcessor( 			Function<ServerRequest, Mono<ServerRequest>> requestProcessor);1490180115;Adapt the given request processor function to a filter function that only operates on the_{@code ClientRequest}._@param requestProcessor the request processor_@return the filter adaptation of the request processor;static HandlerFilterFunction<?, ?> ofRequestProcessor(_			Function<ServerRequest, Mono<ServerRequest>> requestProcessor) {__		Assert.notNull(requestProcessor, "'requestProcessor' must not be null")__		return (request, next) -> requestProcessor.apply(request).then(next::handle)__	};adapt,the,given,request,processor,function,to,a,filter,function,that,only,operates,on,the,code,client,request,param,request,processor,the,request,processor,return,the,filter,adaptation,of,the,request,processor;static,handler,filter,function,of,request,processor,function,server,request,mono,server,request,request,processor,assert,not,null,request,processor,request,processor,must,not,be,null,return,request,next,request,processor,apply,request,then,next,handle
HandlerFilterFunction -> static HandlerFilterFunction<?, ?> ofRequestProcessor( 			Function<ServerRequest, Mono<ServerRequest>> requestProcessor);1491927184;Adapt the given request processor function to a filter function that only operates on the_{@code ClientRequest}._@param requestProcessor the request processor_@return the filter adaptation of the request processor;static HandlerFilterFunction<?, ?> ofRequestProcessor(_			Function<ServerRequest, Mono<ServerRequest>> requestProcessor) {__		Assert.notNull(requestProcessor, "'requestProcessor' must not be null")__		return (request, next) -> requestProcessor.apply(request).flatMap(next::handle)__	};adapt,the,given,request,processor,function,to,a,filter,function,that,only,operates,on,the,code,client,request,param,request,processor,the,request,processor,return,the,filter,adaptation,of,the,request,processor;static,handler,filter,function,of,request,processor,function,server,request,mono,server,request,request,processor,assert,not,null,request,processor,request,processor,must,not,be,null,return,request,next,request,processor,apply,request,flat,map,next,handle
HandlerFilterFunction -> static HandlerFilterFunction<?, ?> ofRequestProcessor( 			Function<ServerRequest, Mono<ServerRequest>> requestProcessor);1524865018;Adapt the given request processor function to a filter function that only operates_on the {@code ClientRequest}._@param requestProcessor the request processor_@return the filter adaptation of the request processor;static HandlerFilterFunction<?, ?> ofRequestProcessor(_			Function<ServerRequest, Mono<ServerRequest>> requestProcessor) {__		Assert.notNull(requestProcessor, "Function must not be null")__		return (request, next) -> requestProcessor.apply(request).flatMap(next::handle)__	};adapt,the,given,request,processor,function,to,a,filter,function,that,only,operates,on,the,code,client,request,param,request,processor,the,request,processor,return,the,filter,adaptation,of,the,request,processor;static,handler,filter,function,of,request,processor,function,server,request,mono,server,request,request,processor,assert,not,null,request,processor,function,must,not,be,null,return,request,next,request,processor,apply,request,flat,map,next,handle
HandlerFilterFunction -> static HandlerFilterFunction<?, ?> ofRequestProcessor( 			Function<ServerRequest, Mono<ServerRequest>> requestProcessor);1531415288;Adapt the given request processor function to a filter function that only operates_on the {@code ServerRequest}._@param requestProcessor the request processor_@return the filter adaptation of the request processor;static HandlerFilterFunction<?, ?> ofRequestProcessor(_			Function<ServerRequest, Mono<ServerRequest>> requestProcessor) {__		Assert.notNull(requestProcessor, "Function must not be null")__		return (request, next) -> requestProcessor.apply(request).flatMap(next::handle)__	};adapt,the,given,request,processor,function,to,a,filter,function,that,only,operates,on,the,code,server,request,param,request,processor,the,request,processor,return,the,filter,adaptation,of,the,request,processor;static,handler,filter,function,of,request,processor,function,server,request,mono,server,request,request,processor,assert,not,null,request,processor,function,must,not,be,null,return,request,next,request,processor,apply,request,flat,map,next,handle
HandlerFilterFunction -> static <T extends ServerResponse, R extends ServerResponse> HandlerFilterFunction<T, R> ofResponseProcessor( 			Function<T, Mono<R>> responseProcessor);1490180115;Adapt the given response processor function to a filter function that only operates on the_{@code ClientResponse}._@param responseProcessor the response processor_@return the filter adaptation of the request processor;static <T extends ServerResponse, R extends ServerResponse> HandlerFilterFunction<T, R> ofResponseProcessor(_			Function<T, Mono<R>> responseProcessor) {__		Assert.notNull(responseProcessor, "'responseProcessor' must not be null")__		return (request, next) -> next.handle(request).then(responseProcessor)__	};adapt,the,given,response,processor,function,to,a,filter,function,that,only,operates,on,the,code,client,response,param,response,processor,the,response,processor,return,the,filter,adaptation,of,the,request,processor;static,t,extends,server,response,r,extends,server,response,handler,filter,function,t,r,of,response,processor,function,t,mono,r,response,processor,assert,not,null,response,processor,response,processor,must,not,be,null,return,request,next,next,handle,request,then,response,processor
HandlerFilterFunction -> static <T extends ServerResponse, R extends ServerResponse> HandlerFilterFunction<T, R> ofResponseProcessor( 			Function<T, Mono<R>> responseProcessor);1491927184;Adapt the given response processor function to a filter function that only operates on the_{@code ClientResponse}._@param responseProcessor the response processor_@return the filter adaptation of the request processor;static <T extends ServerResponse, R extends ServerResponse> HandlerFilterFunction<T, R> ofResponseProcessor(_			Function<T, Mono<R>> responseProcessor) {__		Assert.notNull(responseProcessor, "'responseProcessor' must not be null")__		return (request, next) -> next.handle(request).flatMap(responseProcessor)__	};adapt,the,given,response,processor,function,to,a,filter,function,that,only,operates,on,the,code,client,response,param,response,processor,the,response,processor,return,the,filter,adaptation,of,the,request,processor;static,t,extends,server,response,r,extends,server,response,handler,filter,function,t,r,of,response,processor,function,t,mono,r,response,processor,assert,not,null,response,processor,response,processor,must,not,be,null,return,request,next,next,handle,request,flat,map,response,processor
HandlerFilterFunction -> static <T extends ServerResponse, R extends ServerResponse> HandlerFilterFunction<T, R> ofResponseProcessor( 			Function<T, Mono<R>> responseProcessor);1524865018;Adapt the given response processor function to a filter function that only operates_on the {@code ClientResponse}._@param responseProcessor the response processor_@return the filter adaptation of the request processor;static <T extends ServerResponse, R extends ServerResponse> HandlerFilterFunction<T, R> ofResponseProcessor(_			Function<T, Mono<R>> responseProcessor) {__		Assert.notNull(responseProcessor, "Function must not be null")__		return (request, next) -> next.handle(request).flatMap(responseProcessor)__	};adapt,the,given,response,processor,function,to,a,filter,function,that,only,operates,on,the,code,client,response,param,response,processor,the,response,processor,return,the,filter,adaptation,of,the,request,processor;static,t,extends,server,response,r,extends,server,response,handler,filter,function,t,r,of,response,processor,function,t,mono,r,response,processor,assert,not,null,response,processor,function,must,not,be,null,return,request,next,next,handle,request,flat,map,response,processor
HandlerFilterFunction -> static <T extends ServerResponse, R extends ServerResponse> HandlerFilterFunction<T, R> ofResponseProcessor( 			Function<T, Mono<R>> responseProcessor);1531415288;Adapt the given response processor function to a filter function that only operates_on the {@code ServerResponse}._@param responseProcessor the response processor_@return the filter adaptation of the request processor;static <T extends ServerResponse, R extends ServerResponse> HandlerFilterFunction<T, R> ofResponseProcessor(_			Function<T, Mono<R>> responseProcessor) {__		Assert.notNull(responseProcessor, "Function must not be null")__		return (request, next) -> next.handle(request).flatMap(responseProcessor)__	};adapt,the,given,response,processor,function,to,a,filter,function,that,only,operates,on,the,code,server,response,param,response,processor,the,response,processor,return,the,filter,adaptation,of,the,request,processor;static,t,extends,server,response,r,extends,server,response,handler,filter,function,t,r,of,response,processor,function,t,mono,r,response,processor,assert,not,null,response,processor,function,must,not,be,null,return,request,next,next,handle,request,flat,map,response,processor
HandlerFilterFunction -> Mono<R> filter(ServerRequest request, HandlerFunction<T> next)_;1485986572;Apply this filter to the given handler function. The given_{@linkplain HandlerFunction handler function} represents the next entity in the_chain, and can be {@linkplain HandlerFunction#handle(ServerRequest) invoked} in order_to proceed to this entity, or not invoked to block the chain.__@param request the request_@param next    the next handler or filter function in the chain_@return the filtered response_@see ServerRequestWrapper;Mono<R> filter(ServerRequest request, HandlerFunction<T> next)_;apply,this,filter,to,the,given,handler,function,the,given,linkplain,handler,function,handler,function,represents,the,next,entity,in,the,chain,and,can,be,linkplain,handler,function,handle,server,request,invoked,in,order,to,proceed,to,this,entity,or,not,invoked,to,block,the,chain,param,request,the,request,param,next,the,next,handler,or,filter,function,in,the,chain,return,the,filtered,response,see,server,request,wrapper;mono,r,filter,server,request,request,handler,function,t,next
HandlerFilterFunction -> Mono<R> filter(ServerRequest request, HandlerFunction<T> next)_;1487687241;Apply this filter to the given handler function. The given_{@linkplain HandlerFunction handler function} represents the next entity in the chain,_and can be {@linkplain HandlerFunction#handle(ServerRequest) invoked} in order to_proceed to this entity, or not invoked to block the chain._@param request the request_@param next the next handler or filter function in the chain_@return the filtered response_@see ServerRequestWrapper;Mono<R> filter(ServerRequest request, HandlerFunction<T> next)_;apply,this,filter,to,the,given,handler,function,the,given,linkplain,handler,function,handler,function,represents,the,next,entity,in,the,chain,and,can,be,linkplain,handler,function,handle,server,request,invoked,in,order,to,proceed,to,this,entity,or,not,invoked,to,block,the,chain,param,request,the,request,param,next,the,next,handler,or,filter,function,in,the,chain,return,the,filtered,response,see,server,request,wrapper;mono,r,filter,server,request,request,handler,function,t,next
HandlerFilterFunction -> Mono<R> filter(ServerRequest request, HandlerFunction<T> next)_;1487713300;Apply this filter to the given handler function. The given_{@linkplain HandlerFunction handler function} represents the next entity in the chain,_and can be {@linkplain HandlerFunction#handle(ServerRequest) invoked} in order to_proceed to this entity, or not invoked to block the chain._@param request the request_@param next the next handler or filter function in the chain_@return the filtered response_@see ServerRequestWrapper;Mono<R> filter(ServerRequest request, HandlerFunction<T> next)_;apply,this,filter,to,the,given,handler,function,the,given,linkplain,handler,function,handler,function,represents,the,next,entity,in,the,chain,and,can,be,linkplain,handler,function,handle,server,request,invoked,in,order,to,proceed,to,this,entity,or,not,invoked,to,block,the,chain,param,request,the,request,param,next,the,next,handler,or,filter,function,in,the,chain,return,the,filtered,response,see,server,request,wrapper;mono,r,filter,server,request,request,handler,function,t,next
HandlerFilterFunction -> Mono<R> filter(ServerRequest request, HandlerFunction<T> next)_;1490180115;Apply this filter to the given handler function. The given_{@linkplain HandlerFunction handler function} represents the next entity in the chain,_and can be {@linkplain HandlerFunction#handle(ServerRequest) invoked} in order to_proceed to this entity, or not invoked to block the chain._@param request the request_@param next the next handler or filter function in the chain_@return the filtered response_@see ServerRequestWrapper;Mono<R> filter(ServerRequest request, HandlerFunction<T> next)_;apply,this,filter,to,the,given,handler,function,the,given,linkplain,handler,function,handler,function,represents,the,next,entity,in,the,chain,and,can,be,linkplain,handler,function,handle,server,request,invoked,in,order,to,proceed,to,this,entity,or,not,invoked,to,block,the,chain,param,request,the,request,param,next,the,next,handler,or,filter,function,in,the,chain,return,the,filtered,response,see,server,request,wrapper;mono,r,filter,server,request,request,handler,function,t,next
HandlerFilterFunction -> Mono<R> filter(ServerRequest request, HandlerFunction<T> next)_;1491927184;Apply this filter to the given handler function. The given_{@linkplain HandlerFunction handler function} represents the next entity in the chain,_and can be {@linkplain HandlerFunction#handle(ServerRequest) invoked} in order to_proceed to this entity, or not invoked to block the chain._@param request the request_@param next the next handler or filter function in the chain_@return the filtered response_@see ServerRequestWrapper;Mono<R> filter(ServerRequest request, HandlerFunction<T> next)_;apply,this,filter,to,the,given,handler,function,the,given,linkplain,handler,function,handler,function,represents,the,next,entity,in,the,chain,and,can,be,linkplain,handler,function,handle,server,request,invoked,in,order,to,proceed,to,this,entity,or,not,invoked,to,block,the,chain,param,request,the,request,param,next,the,next,handler,or,filter,function,in,the,chain,return,the,filtered,response,see,server,request,wrapper;mono,r,filter,server,request,request,handler,function,t,next
HandlerFilterFunction -> Mono<R> filter(ServerRequest request, HandlerFunction<T> next)_;1524865018;Apply this filter to the given handler function. The given_{@linkplain HandlerFunction handler function} represents the next entity in the chain,_and can be {@linkplain HandlerFunction#handle(ServerRequest) invoked} in order to_proceed to this entity, or not invoked to block the chain._@param request the request_@param next the next handler or filter function in the chain_@return the filtered response_@see ServerRequestWrapper;Mono<R> filter(ServerRequest request, HandlerFunction<T> next)_;apply,this,filter,to,the,given,handler,function,the,given,linkplain,handler,function,handler,function,represents,the,next,entity,in,the,chain,and,can,be,linkplain,handler,function,handle,server,request,invoked,in,order,to,proceed,to,this,entity,or,not,invoked,to,block,the,chain,param,request,the,request,param,next,the,next,handler,or,filter,function,in,the,chain,return,the,filtered,response,see,server,request,wrapper;mono,r,filter,server,request,request,handler,function,t,next
HandlerFilterFunction -> Mono<R> filter(ServerRequest request, HandlerFunction<T> next)_;1531415288;Apply this filter to the given handler function. The given_{@linkplain HandlerFunction handler function} represents the next entity in the chain,_and can be {@linkplain HandlerFunction#handle(ServerRequest) invoked} in order to_proceed to this entity, or not invoked to block the chain._@param request the request_@param next the next handler or filter function in the chain_@return the filtered response_@see ServerRequestWrapper;Mono<R> filter(ServerRequest request, HandlerFunction<T> next)_;apply,this,filter,to,the,given,handler,function,the,given,linkplain,handler,function,handler,function,represents,the,next,entity,in,the,chain,and,can,be,linkplain,handler,function,handle,server,request,invoked,in,order,to,proceed,to,this,entity,or,not,invoked,to,block,the,chain,param,request,the,request,param,next,the,next,handler,or,filter,function,in,the,chain,return,the,filtered,response,see,server,request,wrapper;mono,r,filter,server,request,request,handler,function,t,next
HandlerFilterFunction -> default HandlerFilterFunction<T, R> andThen(HandlerFilterFunction<T, T> after);1485986572;Return a composed filter function that first applies this filter, and then applies the_{@code after} filter._@param after the filter to apply after this filter is applied_@return a composed filter that first applies this function and then applies the_{@code after} function;default HandlerFilterFunction<T, R> andThen(HandlerFilterFunction<T, T> after) {_		Assert.notNull(after, "'after' must not be null")__		return (request, next) -> {_			HandlerFunction<T> nextHandler =_					handlerRequest -> after.filter(handlerRequest, next)__			return filter(request, nextHandler)__		}__	};return,a,composed,filter,function,that,first,applies,this,filter,and,then,applies,the,code,after,filter,param,after,the,filter,to,apply,after,this,filter,is,applied,return,a,composed,filter,that,first,applies,this,function,and,then,applies,the,code,after,function;default,handler,filter,function,t,r,and,then,handler,filter,function,t,t,after,assert,not,null,after,after,must,not,be,null,return,request,next,handler,function,t,next,handler,handler,request,after,filter,handler,request,next,return,filter,request,next,handler
HandlerFilterFunction -> default HandlerFilterFunction<T, R> andThen(HandlerFilterFunction<T, T> after);1487687241;Return a composed filter function that first applies this filter, and then applies the_{@code after} filter._@param after the filter to apply after this filter is applied_@return a composed filter that first applies this function and then applies the_{@code after} function;default HandlerFilterFunction<T, R> andThen(HandlerFilterFunction<T, T> after) {_		Assert.notNull(after, "'after' must not be null")__		return (request, next) -> {_			HandlerFunction<T> nextHandler = handlerRequest -> after.filter(handlerRequest, next)__			return filter(request, nextHandler)__		}__	};return,a,composed,filter,function,that,first,applies,this,filter,and,then,applies,the,code,after,filter,param,after,the,filter,to,apply,after,this,filter,is,applied,return,a,composed,filter,that,first,applies,this,function,and,then,applies,the,code,after,function;default,handler,filter,function,t,r,and,then,handler,filter,function,t,t,after,assert,not,null,after,after,must,not,be,null,return,request,next,handler,function,t,next,handler,handler,request,after,filter,handler,request,next,return,filter,request,next,handler
HandlerFilterFunction -> default HandlerFilterFunction<T, R> andThen(HandlerFilterFunction<T, T> after);1487713300;Return a composed filter function that first applies this filter, and then applies the_{@code after} filter._@param after the filter to apply after this filter is applied_@return a composed filter that first applies this function and then applies the_{@code after} function;default HandlerFilterFunction<T, R> andThen(HandlerFilterFunction<T, T> after) {_		Assert.notNull(after, "'after' must not be null")__		return (request, next) -> {_			HandlerFunction<T> nextHandler = handlerRequest -> after.filter(handlerRequest, next)__			return filter(request, nextHandler)__		}__	};return,a,composed,filter,function,that,first,applies,this,filter,and,then,applies,the,code,after,filter,param,after,the,filter,to,apply,after,this,filter,is,applied,return,a,composed,filter,that,first,applies,this,function,and,then,applies,the,code,after,function;default,handler,filter,function,t,r,and,then,handler,filter,function,t,t,after,assert,not,null,after,after,must,not,be,null,return,request,next,handler,function,t,next,handler,handler,request,after,filter,handler,request,next,return,filter,request,next,handler
HandlerFilterFunction -> default HandlerFilterFunction<T, R> andThen(HandlerFilterFunction<T, T> after);1490180115;Return a composed filter function that first applies this filter, and then applies the_{@code after} filter._@param after the filter to apply after this filter is applied_@return a composed filter that first applies this function and then applies the_{@code after} function;default HandlerFilterFunction<T, R> andThen(HandlerFilterFunction<T, T> after) {_		Assert.notNull(after, "'after' must not be null")__		return (request, next) -> {_			HandlerFunction<T> nextHandler = handlerRequest -> after.filter(handlerRequest, next)__			return filter(request, nextHandler)__		}__	};return,a,composed,filter,function,that,first,applies,this,filter,and,then,applies,the,code,after,filter,param,after,the,filter,to,apply,after,this,filter,is,applied,return,a,composed,filter,that,first,applies,this,function,and,then,applies,the,code,after,function;default,handler,filter,function,t,r,and,then,handler,filter,function,t,t,after,assert,not,null,after,after,must,not,be,null,return,request,next,handler,function,t,next,handler,handler,request,after,filter,handler,request,next,return,filter,request,next,handler
HandlerFilterFunction -> default HandlerFilterFunction<T, R> andThen(HandlerFilterFunction<T, T> after);1491927184;Return a composed filter function that first applies this filter, and then applies the_{@code after} filter._@param after the filter to apply after this filter is applied_@return a composed filter that first applies this function and then applies the_{@code after} function;default HandlerFilterFunction<T, R> andThen(HandlerFilterFunction<T, T> after) {_		Assert.notNull(after, "'after' must not be null")__		return (request, next) -> {_			HandlerFunction<T> nextHandler = handlerRequest -> after.filter(handlerRequest, next)__			return filter(request, nextHandler)__		}__	};return,a,composed,filter,function,that,first,applies,this,filter,and,then,applies,the,code,after,filter,param,after,the,filter,to,apply,after,this,filter,is,applied,return,a,composed,filter,that,first,applies,this,function,and,then,applies,the,code,after,function;default,handler,filter,function,t,r,and,then,handler,filter,function,t,t,after,assert,not,null,after,after,must,not,be,null,return,request,next,handler,function,t,next,handler,handler,request,after,filter,handler,request,next,return,filter,request,next,handler
HandlerFilterFunction -> default HandlerFilterFunction<T, R> andThen(HandlerFilterFunction<T, T> after);1524865018;Return a composed filter function that first applies this filter, and then applies the_{@code after} filter._@param after the filter to apply after this filter is applied_@return a composed filter that first applies this function and then applies the_{@code after} function;default HandlerFilterFunction<T, R> andThen(HandlerFilterFunction<T, T> after) {_		Assert.notNull(after, "HandlerFilterFunction must not be null")__		return (request, next) -> {_			HandlerFunction<T> nextHandler = handlerRequest -> after.filter(handlerRequest, next)__			return filter(request, nextHandler)__		}__	};return,a,composed,filter,function,that,first,applies,this,filter,and,then,applies,the,code,after,filter,param,after,the,filter,to,apply,after,this,filter,is,applied,return,a,composed,filter,that,first,applies,this,function,and,then,applies,the,code,after,function;default,handler,filter,function,t,r,and,then,handler,filter,function,t,t,after,assert,not,null,after,handler,filter,function,must,not,be,null,return,request,next,handler,function,t,next,handler,handler,request,after,filter,handler,request,next,return,filter,request,next,handler
HandlerFilterFunction -> default HandlerFilterFunction<T, R> andThen(HandlerFilterFunction<T, T> after);1531415288;Return a composed filter function that first applies this filter, and then applies the_{@code after} filter._@param after the filter to apply after this filter is applied_@return a composed filter that first applies this function and then applies the_{@code after} function;default HandlerFilterFunction<T, R> andThen(HandlerFilterFunction<T, T> after) {_		Assert.notNull(after, "HandlerFilterFunction must not be null")__		return (request, next) -> {_			HandlerFunction<T> nextHandler = handlerRequest -> after.filter(handlerRequest, next)__			return filter(request, nextHandler)__		}__	};return,a,composed,filter,function,that,first,applies,this,filter,and,then,applies,the,code,after,filter,param,after,the,filter,to,apply,after,this,filter,is,applied,return,a,composed,filter,that,first,applies,this,function,and,then,applies,the,code,after,function;default,handler,filter,function,t,r,and,then,handler,filter,function,t,t,after,assert,not,null,after,handler,filter,function,must,not,be,null,return,request,next,handler,function,t,next,handler,handler,request,after,filter,handler,request,next,return,filter,request,next,handler
HandlerFilterFunction -> default HandlerFunction<R> apply(HandlerFunction<T> handler);1485986572;Apply this filter to the given handler function, resulting in a filtered handler function._@param handler the handler function to filter_@return the filtered handler function;default HandlerFunction<R> apply(HandlerFunction<T> handler) {_		Assert.notNull(handler, "'handler' must not be null")__		return request -> this.filter(request, handler)__	};apply,this,filter,to,the,given,handler,function,resulting,in,a,filtered,handler,function,param,handler,the,handler,function,to,filter,return,the,filtered,handler,function;default,handler,function,r,apply,handler,function,t,handler,assert,not,null,handler,handler,must,not,be,null,return,request,this,filter,request,handler
HandlerFilterFunction -> default HandlerFunction<R> apply(HandlerFunction<T> handler);1487687241;Apply this filter to the given handler function, resulting in a filtered handler function._@param handler the handler function to filter_@return the filtered handler function;default HandlerFunction<R> apply(HandlerFunction<T> handler) {_		Assert.notNull(handler, "'handler' must not be null")__		return request -> this.filter(request, handler)__	};apply,this,filter,to,the,given,handler,function,resulting,in,a,filtered,handler,function,param,handler,the,handler,function,to,filter,return,the,filtered,handler,function;default,handler,function,r,apply,handler,function,t,handler,assert,not,null,handler,handler,must,not,be,null,return,request,this,filter,request,handler
HandlerFilterFunction -> default HandlerFunction<R> apply(HandlerFunction<T> handler);1487713300;Apply this filter to the given handler function, resulting in a filtered handler function._@param handler the handler function to filter_@return the filtered handler function;default HandlerFunction<R> apply(HandlerFunction<T> handler) {_		Assert.notNull(handler, "'handler' must not be null")__		return request -> this.filter(request, handler)__	};apply,this,filter,to,the,given,handler,function,resulting,in,a,filtered,handler,function,param,handler,the,handler,function,to,filter,return,the,filtered,handler,function;default,handler,function,r,apply,handler,function,t,handler,assert,not,null,handler,handler,must,not,be,null,return,request,this,filter,request,handler
HandlerFilterFunction -> default HandlerFunction<R> apply(HandlerFunction<T> handler);1490180115;Apply this filter to the given handler function, resulting in a filtered handler function._@param handler the handler function to filter_@return the filtered handler function;default HandlerFunction<R> apply(HandlerFunction<T> handler) {_		Assert.notNull(handler, "'handler' must not be null")__		return request -> this.filter(request, handler)__	};apply,this,filter,to,the,given,handler,function,resulting,in,a,filtered,handler,function,param,handler,the,handler,function,to,filter,return,the,filtered,handler,function;default,handler,function,r,apply,handler,function,t,handler,assert,not,null,handler,handler,must,not,be,null,return,request,this,filter,request,handler
HandlerFilterFunction -> default HandlerFunction<R> apply(HandlerFunction<T> handler);1491927184;Apply this filter to the given handler function, resulting in a filtered handler function._@param handler the handler function to filter_@return the filtered handler function;default HandlerFunction<R> apply(HandlerFunction<T> handler) {_		Assert.notNull(handler, "'handler' must not be null")__		return request -> this.filter(request, handler)__	};apply,this,filter,to,the,given,handler,function,resulting,in,a,filtered,handler,function,param,handler,the,handler,function,to,filter,return,the,filtered,handler,function;default,handler,function,r,apply,handler,function,t,handler,assert,not,null,handler,handler,must,not,be,null,return,request,this,filter,request,handler
HandlerFilterFunction -> default HandlerFunction<R> apply(HandlerFunction<T> handler);1524865018;Apply this filter to the given handler function, resulting in a filtered handler function._@param handler the handler function to filter_@return the filtered handler function;default HandlerFunction<R> apply(HandlerFunction<T> handler) {_		Assert.notNull(handler, "HandlerFunction must not be null")__		return request -> this.filter(request, handler)__	};apply,this,filter,to,the,given,handler,function,resulting,in,a,filtered,handler,function,param,handler,the,handler,function,to,filter,return,the,filtered,handler,function;default,handler,function,r,apply,handler,function,t,handler,assert,not,null,handler,handler,function,must,not,be,null,return,request,this,filter,request,handler
HandlerFilterFunction -> default HandlerFunction<R> apply(HandlerFunction<T> handler);1531415288;Apply this filter to the given handler function, resulting in a filtered handler function._@param handler the handler function to filter_@return the filtered handler function;default HandlerFunction<R> apply(HandlerFunction<T> handler) {_		Assert.notNull(handler, "HandlerFunction must not be null")__		return request -> this.filter(request, handler)__	};apply,this,filter,to,the,given,handler,function,resulting,in,a,filtered,handler,function,param,handler,the,handler,function,to,filter,return,the,filtered,handler,function;default,handler,function,r,apply,handler,function,t,handler,assert,not,null,handler,handler,function,must,not,be,null,return,request,this,filter,request,handler
HandlerFilterFunction -> static <T extends ServerResponse, R extends ServerResponse> HandlerFilterFunction<T, R> ofResponseProcessor( 			Function<T, R> responseProcessor);1487687241;Adapt the given response processor function to a filter function that only operates on the_{@code ClientResponse}._@param responseProcessor the response processor_@return the filter adaptation of the request processor;static <T extends ServerResponse, R extends ServerResponse> HandlerFilterFunction<T, R> ofResponseProcessor(_			Function<T, R> responseProcessor) {__		Assert.notNull(responseProcessor, "'responseProcessor' must not be null")__		return (request, next) -> next.handle(request).map(responseProcessor)__	};adapt,the,given,response,processor,function,to,a,filter,function,that,only,operates,on,the,code,client,response,param,response,processor,the,response,processor,return,the,filter,adaptation,of,the,request,processor;static,t,extends,server,response,r,extends,server,response,handler,filter,function,t,r,of,response,processor,function,t,r,response,processor,assert,not,null,response,processor,response,processor,must,not,be,null,return,request,next,next,handle,request,map,response,processor
HandlerFilterFunction -> static <T extends ServerResponse, R extends ServerResponse> HandlerFilterFunction<T, R> ofResponseProcessor( 			Function<T, R> responseProcessor);1487713300;Adapt the given response processor function to a filter function that only operates on the_{@code ClientResponse}._@param responseProcessor the response processor_@return the filter adaptation of the request processor;static <T extends ServerResponse, R extends ServerResponse> HandlerFilterFunction<T, R> ofResponseProcessor(_			Function<T, R> responseProcessor) {__		Assert.notNull(responseProcessor, "'responseProcessor' must not be null")__		return (request, next) -> next.handle(request).map(responseProcessor)__	};adapt,the,given,response,processor,function,to,a,filter,function,that,only,operates,on,the,code,client,response,param,response,processor,the,response,processor,return,the,filter,adaptation,of,the,request,processor;static,t,extends,server,response,r,extends,server,response,handler,filter,function,t,r,of,response,processor,function,t,r,response,processor,assert,not,null,response,processor,response,processor,must,not,be,null,return,request,next,next,handle,request,map,response,processor
