commented;modifiers;parameterAmount;loc;comment;code
true;;2;1;/**  * Apply this filter to the given handler function. The given  * {@linkplain HandlerFunction handler function} represents the next entity in the chain,  * and can be {@linkplain HandlerFunction#handle(ServerRequest) invoked} in order to  * proceed to this entity, or not invoked to block the chain.  * @param request the request  * @param next the next handler or filter function in the chain  * @return the filtered response  * @see ServerRequestWrapper  */ ;/**  * Apply this filter to the given handler function. The given  * {@linkplain HandlerFunction handler function} represents the next entity in the chain,  * and can be {@linkplain HandlerFunction#handle(ServerRequest) invoked} in order to  * proceed to this entity, or not invoked to block the chain.  * @param request the request  * @param next the next handler or filter function in the chain  * @return the filtered response  * @see ServerRequestWrapper  */ Mono<R> filter(ServerRequest request, HandlerFunction<T> next).
true;default;1;7;/**  * Return a composed filter function that first applies this filter, and then applies the  * {@code after} filter.  * @param after the filter to apply after this filter is applied  * @return a composed filter that first applies this function and then applies the  * {@code after} function  */ ;/**  * Return a composed filter function that first applies this filter, and then applies the  * {@code after} filter.  * @param after the filter to apply after this filter is applied  * @return a composed filter that first applies this function and then applies the  * {@code after} function  */ default HandlerFilterFunction<T, R> andThen(HandlerFilterFunction<T, T> after) {     Assert.notNull(after, "HandlerFilterFunction must not be null").     return (request, next) -> {         HandlerFunction<T> nextHandler = handlerRequest -> after.filter(handlerRequest, next).         return filter(request, nextHandler).     }. }
true;default;1;4;/**  * Apply this filter to the given handler function, resulting in a filtered handler function.  * @param handler the handler function to filter  * @return the filtered handler function  */ ;/**  * Apply this filter to the given handler function, resulting in a filtered handler function.  * @param handler the handler function to filter  * @return the filtered handler function  */ default HandlerFunction<R> apply(HandlerFunction<T> handler) {     Assert.notNull(handler, "HandlerFunction must not be null").     return request -> this.filter(request, handler). }
true;static;1;6;/**  * Adapt the given request processor function to a filter function that only operates  * on the {@code ServerRequest}.  * @param requestProcessor the request processor  * @return the filter adaptation of the request processor  */ ;/**  * Adapt the given request processor function to a filter function that only operates  * on the {@code ServerRequest}.  * @param requestProcessor the request processor  * @return the filter adaptation of the request processor  */ static HandlerFilterFunction<?, ?> ofRequestProcessor(Function<ServerRequest, Mono<ServerRequest>> requestProcessor) {     Assert.notNull(requestProcessor, "Function must not be null").     return (request, next) -> requestProcessor.apply(request).flatMap(next::handle). }
true;static;1;6;/**  * Adapt the given response processor function to a filter function that only operates  * on the {@code ServerResponse}.  * @param responseProcessor the response processor  * @return the filter adaptation of the request processor  */ ;/**  * Adapt the given response processor function to a filter function that only operates  * on the {@code ServerResponse}.  * @param responseProcessor the response processor  * @return the filter adaptation of the request processor  */ static <T extends ServerResponse, R extends ServerResponse> HandlerFilterFunction<T, R> ofResponseProcessor(Function<T, Mono<R>> responseProcessor) {     Assert.notNull(responseProcessor, "Function must not be null").     return (request, next) -> next.handle(request).flatMap(responseProcessor). }
