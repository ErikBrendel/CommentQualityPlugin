commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean canSuspendReceiving() {     return false. }
false;protected;0;4;;@Override protected void suspendReceiving() { // no-op }
false;protected;0;4;;@Override protected void resumeReceiving() { // no-op }
false;protected;1;23;;@Override protected boolean sendMessage(WebSocketMessage message) throws IOException {     ByteBuffer buffer = message.getPayload().asByteBuffer().     if (WebSocketMessage.Type.TEXT.equals(message.getType())) {         getSendProcessor().setReadyToSend(false).         String text = new String(buffer.array(), StandardCharsets.UTF_8).         getDelegate().getAsyncRemote().sendText(text, new SendProcessorCallback()).     } else if (WebSocketMessage.Type.BINARY.equals(message.getType())) {         getSendProcessor().setReadyToSend(false).         getDelegate().getAsyncRemote().sendBinary(buffer, new SendProcessorCallback()).     } else if (WebSocketMessage.Type.PING.equals(message.getType())) {         getDelegate().getAsyncRemote().sendPing(buffer).     } else if (WebSocketMessage.Type.PONG.equals(message.getType())) {         getDelegate().getAsyncRemote().sendPong(buffer).     } else {         throw new IllegalArgumentException("Unexpected message type: " + message.getType()).     }     return true. }
false;public;1;11;;@Override public Mono<Void> close(CloseStatus status) {     try {         CloseReason.CloseCode code = CloseCodes.getCloseCode(status.getCode()).         getDelegate().close(new CloseReason(code, status.getReason())).     } catch (IOException ex) {         return Mono.error(ex).     }     return Mono.empty(). }
false;public;1;11;;@Override public void onResult(SendResult result) {     if (result.isOK()) {         getSendProcessor().setReadyToSend(true).         getSendProcessor().onWritePossible().     } else {         getSendProcessor().cancel().         getSendProcessor().onError(result.getException()).     } }
