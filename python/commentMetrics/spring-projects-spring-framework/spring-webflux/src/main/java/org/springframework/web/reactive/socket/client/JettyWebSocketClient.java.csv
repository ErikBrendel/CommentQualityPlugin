commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the underlying Jetty {@code WebSocketClient}.  */ ;/**  * Return the underlying Jetty {@code WebSocketClient}.  */ public org.eclipse.jetty.websocket.client.WebSocketClient getJettyClient() {     return this.jettyClient. }
false;public;0;11;;@Override public void start() {     if (!this.externallyManaged) {         try {             this.jettyClient.start().         } catch (Exception ex) {             throw new IllegalStateException("Failed to start Jetty WebSocketClient", ex).         }     } }
false;public;0;11;;@Override public void stop() {     if (!this.externallyManaged) {         try {             this.jettyClient.stop().         } catch (Exception ex) {             throw new IllegalStateException("Error stopping Jetty WebSocketClient", ex).         }     } }
false;public;0;4;;@Override public boolean isRunning() {     return this.jettyClient.isRunning(). }
false;public;2;4;;@Override public Mono<Void> execute(URI url, WebSocketHandler handler) {     return execute(url, new HttpHeaders(), handler). }
false;public;3;4;;@Override public Mono<Void> execute(URI url, HttpHeaders headers, WebSocketHandler handler) {     return executeInternal(url, headers, handler). }
false;private;3;15;;private Mono<Void> executeInternal(URI url, HttpHeaders headers, WebSocketHandler handler) {     MonoProcessor<Void> completionMono = MonoProcessor.create().     return Mono.fromCallable(() -> {         if (logger.isDebugEnabled()) {             logger.debug("Connecting to " + url).         }         Object jettyHandler = createHandler(url, handler, completionMono).         ClientUpgradeRequest request = new ClientUpgradeRequest().         request.setSubProtocols(handler.getSubProtocols()).         UpgradeListener upgradeListener = new DefaultUpgradeListener(headers).         return this.jettyClient.connect(jettyHandler, url, request, upgradeListener).     }).then(completionMono). }
false;private;3;6;;private Object createHandler(URI url, WebSocketHandler handler, MonoProcessor<Void> completion) {     return new JettyWebSocketHandlerAdapter(handler, session -> {         HandshakeInfo info = createHandshakeInfo(url, session).         return new JettyWebSocketSession(session, info, this.bufferFactory, completion).     }). }
false;private;2;6;;private HandshakeInfo createHandshakeInfo(URI url, Session jettySession) {     HttpHeaders headers = new HttpHeaders().     jettySession.getUpgradeResponse().getHeaders().forEach(headers::put).     String protocol = headers.getFirst("Sec-WebSocket-Protocol").     return new HandshakeInfo(url, headers, Mono.empty(), protocol). }
false;public;1;4;;@Override public void onHandshakeRequest(UpgradeRequest request) {     this.headers.forEach(request::setHeader). }
false;public;1;3;;@Override public void onHandshakeResponse(UpgradeResponse response) { }
