# id;timestamp;commentText;codeText;commentWords;codeWords
SyncInvocableHandlerMethod -> public void setSyncArgumentResolvers(List<SyncHandlerMethodArgumentResolver> resolvers);1485986572;Convenient alternative to {@link #setArgumentResolvers(List)} to configure_synchronous argument resolvers.;public void setSyncArgumentResolvers(List<SyncHandlerMethodArgumentResolver> resolvers) {_		setArgumentResolvers(new ArrayList<>(resolvers))__	};convenient,alternative,to,link,set,argument,resolvers,list,to,configure,synchronous,argument,resolvers;public,void,set,sync,argument,resolvers,list,sync,handler,method,argument,resolver,resolvers,set,argument,resolvers,new,array,list,resolvers
SyncInvocableHandlerMethod -> public void setSyncArgumentResolvers(List<SyncHandlerMethodArgumentResolver> resolvers);1489433860;Convenient alternative to {@link #setArgumentResolvers(List)} to configure_synchronous argument resolvers.;public void setSyncArgumentResolvers(List<SyncHandlerMethodArgumentResolver> resolvers) {_		setArgumentResolvers(new ArrayList<>(resolvers))__	};convenient,alternative,to,link,set,argument,resolvers,list,to,configure,synchronous,argument,resolvers;public,void,set,sync,argument,resolvers,list,sync,handler,method,argument,resolver,resolvers,set,argument,resolvers,new,array,list,resolvers
SyncInvocableHandlerMethod -> public List<SyncHandlerMethodArgumentResolver> getResolvers();1489433883;Return the configured argument resolvers.;public List<SyncHandlerMethodArgumentResolver> getResolvers() {_		return this.delegate.getResolvers().stream()_				.map(resolver -> (SyncHandlerMethodArgumentResolver) resolver)_				.collect(Collectors.toList())__	};return,the,configured,argument,resolvers;public,list,sync,handler,method,argument,resolver,get,resolvers,return,this,delegate,get,resolvers,stream,map,resolver,sync,handler,method,argument,resolver,resolver,collect,collectors,to,list
SyncInvocableHandlerMethod -> public List<SyncHandlerMethodArgumentResolver> getResolvers();1498780456;Return the configured argument resolvers.;public List<SyncHandlerMethodArgumentResolver> getResolvers() {_		return this.delegate.getResolvers().stream()_				.map(resolver -> (SyncHandlerMethodArgumentResolver) resolver)_				.collect(Collectors.toList())__	};return,the,configured,argument,resolvers;public,list,sync,handler,method,argument,resolver,get,resolvers,return,this,delegate,get,resolvers,stream,map,resolver,sync,handler,method,argument,resolver,resolver,collect,collectors,to,list
SyncInvocableHandlerMethod -> public List<SyncHandlerMethodArgumentResolver> getResolvers();1522509518;Return the configured argument resolvers.;public List<SyncHandlerMethodArgumentResolver> getResolvers() {_		return this.delegate.getResolvers().stream()_				.map(resolver -> (SyncHandlerMethodArgumentResolver) resolver)_				.collect(Collectors.toList())__	};return,the,configured,argument,resolvers;public,list,sync,handler,method,argument,resolver,get,resolvers,return,this,delegate,get,resolvers,stream,map,resolver,sync,handler,method,argument,resolver,resolver,collect,collectors,to,list
SyncInvocableHandlerMethod -> public List<SyncHandlerMethodArgumentResolver> getResolvers();1522512384;Return the configured argument resolvers.;public List<SyncHandlerMethodArgumentResolver> getResolvers() {_		return this.delegate.getResolvers().stream()_				.map(resolver -> (SyncHandlerMethodArgumentResolver) resolver)_				.collect(Collectors.toList())__	};return,the,configured,argument,resolvers;public,list,sync,handler,method,argument,resolver,get,resolvers,return,this,delegate,get,resolvers,stream,map,resolver,sync,handler,method,argument,resolver,resolver,collect,collectors,to,list
SyncInvocableHandlerMethod -> public List<SyncHandlerMethodArgumentResolver> getResolvers();1522534875;Return the configured argument resolvers.;public List<SyncHandlerMethodArgumentResolver> getResolvers() {_		return this.delegate.getResolvers().stream()_				.map(resolver -> (SyncHandlerMethodArgumentResolver) resolver)_				.collect(Collectors.toList())__	};return,the,configured,argument,resolvers;public,list,sync,handler,method,argument,resolver,get,resolvers,return,this,delegate,get,resolvers,stream,map,resolver,sync,handler,method,argument,resolver,resolver,collect,collectors,to,list
SyncInvocableHandlerMethod -> public List<SyncHandlerMethodArgumentResolver> getResolvers();1530174524;Return the configured argument resolvers.;public List<SyncHandlerMethodArgumentResolver> getResolvers() {_		return this.delegate.getResolvers().stream()_				.map(resolver -> (SyncHandlerMethodArgumentResolver) resolver)_				.collect(Collectors.toList())__	};return,the,configured,argument,resolvers;public,list,sync,handler,method,argument,resolver,get,resolvers,return,this,delegate,get,resolvers,stream,map,resolver,sync,handler,method,argument,resolver,resolver,collect,collectors,to,list
SyncInvocableHandlerMethod -> @Override 	public void setArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers);1485986572;{@inheritDoc}_<p>Resolvers must be of type {@link SyncHandlerMethodArgumentResolver}._@see #setSyncArgumentResolvers(List);@Override_	public void setArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {_		resolvers.forEach(resolver ->_				Assert.isInstanceOf(SyncHandlerMethodArgumentResolver.class, resolver,_						"SyncHandlerMethodArgumentResolver requires SyncHandlerMethodArgumentResolver"))__		super.setArgumentResolvers(resolvers)__	};inherit,doc,p,resolvers,must,be,of,type,link,sync,handler,method,argument,resolver,see,set,sync,argument,resolvers,list;override,public,void,set,argument,resolvers,list,handler,method,argument,resolver,resolvers,resolvers,for,each,resolver,assert,is,instance,of,sync,handler,method,argument,resolver,class,resolver,sync,handler,method,argument,resolver,requires,sync,handler,method,argument,resolver,super,set,argument,resolvers,resolvers
SyncInvocableHandlerMethod -> @Override 	public void setArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers);1489433860;{@inheritDoc}_<p>Resolvers must be of type {@link SyncHandlerMethodArgumentResolver}._@see #setSyncArgumentResolvers(List);@Override_	public void setArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {_		resolvers.forEach(this::assertSyncResolvers)__		super.setArgumentResolvers(resolvers)__	};inherit,doc,p,resolvers,must,be,of,type,link,sync,handler,method,argument,resolver,see,set,sync,argument,resolvers,list;override,public,void,set,argument,resolvers,list,handler,method,argument,resolver,resolvers,resolvers,for,each,this,assert,sync,resolvers,super,set,argument,resolvers,resolvers
SyncInvocableHandlerMethod -> @Nullable 	public HandlerResult invokeForHandlerResult(ServerWebExchange exchange, 			BindingContext bindingContext, Object... providedArgs);1498780456;Invoke the method for the given exchange._@param exchange the current exchange_@param bindingContext the binding context to use_@param providedArgs optional list of argument values to match by type_@return Mono with a {@link HandlerResult}.;@Nullable_	public HandlerResult invokeForHandlerResult(ServerWebExchange exchange,_			BindingContext bindingContext, Object... providedArgs) {__		_		return this.delegate.invoke(exchange, bindingContext, providedArgs).block()__	};invoke,the,method,for,the,given,exchange,param,exchange,the,current,exchange,param,binding,context,the,binding,context,to,use,param,provided,args,optional,list,of,argument,values,to,match,by,type,return,mono,with,a,link,handler,result;nullable,public,handler,result,invoke,for,handler,result,server,web,exchange,exchange,binding,context,binding,context,object,provided,args,return,this,delegate,invoke,exchange,binding,context,provided,args,block
SyncInvocableHandlerMethod -> @Nullable 	public HandlerResult invokeForHandlerResult(ServerWebExchange exchange, 			BindingContext bindingContext, Object... providedArgs);1522509518;Invoke the method for the given exchange._@param exchange the current exchange_@param bindingContext the binding context to use_@param providedArgs optional list of argument values to match by type_@return Mono with a {@link HandlerResult}.;@Nullable_	public HandlerResult invokeForHandlerResult(ServerWebExchange exchange,_			BindingContext bindingContext, Object... providedArgs) {__		MonoProcessor<HandlerResult> processor = MonoProcessor.create()__		this.delegate.invoke(exchange, bindingContext, providedArgs).subscribeWith(processor)___		if (processor.isTerminated()) {_			Throwable error = processor.getError()__			if (error != null) {_				throw (RuntimeException) error__			}_			return processor.peek()__		}_		else {_			_			throw new IllegalStateException(_					"SyncInvocableHandlerMethod should have completed synchronously.")__		}_	};invoke,the,method,for,the,given,exchange,param,exchange,the,current,exchange,param,binding,context,the,binding,context,to,use,param,provided,args,optional,list,of,argument,values,to,match,by,type,return,mono,with,a,link,handler,result;nullable,public,handler,result,invoke,for,handler,result,server,web,exchange,exchange,binding,context,binding,context,object,provided,args,mono,processor,handler,result,processor,mono,processor,create,this,delegate,invoke,exchange,binding,context,provided,args,subscribe,with,processor,if,processor,is,terminated,throwable,error,processor,get,error,if,error,null,throw,runtime,exception,error,return,processor,peek,else,throw,new,illegal,state,exception,sync,invocable,handler,method,should,have,completed,synchronously
SyncInvocableHandlerMethod -> @Nullable 	public HandlerResult invokeForHandlerResult(ServerWebExchange exchange, 			BindingContext bindingContext, Object... providedArgs);1522512384;Invoke the method for the given exchange._@param exchange the current exchange_@param bindingContext the binding context to use_@param providedArgs optional list of argument values to match by type_@return Mono with a {@link HandlerResult}._@throws ServerErrorException if method argument resolution or method invocation fails;@Nullable_	public HandlerResult invokeForHandlerResult(ServerWebExchange exchange,_			BindingContext bindingContext, Object... providedArgs) {__		MonoProcessor<HandlerResult> processor = MonoProcessor.create()__		this.delegate.invoke(exchange, bindingContext, providedArgs).subscribeWith(processor)___		if (processor.isTerminated()) {_			Throwable ex = processor.getError()__			if (ex != null) {_				throw (ex instanceof ServerErrorException ? (ServerErrorException) ex :_						new ServerErrorException("Failed to invoke: " + getShortLogMessage(), this, ex))__			}_			return processor.peek()__		}_		else {_			_			throw new IllegalStateException(_					"SyncInvocableHandlerMethod should have completed synchronously.")__		}_	};invoke,the,method,for,the,given,exchange,param,exchange,the,current,exchange,param,binding,context,the,binding,context,to,use,param,provided,args,optional,list,of,argument,values,to,match,by,type,return,mono,with,a,link,handler,result,throws,server,error,exception,if,method,argument,resolution,or,method,invocation,fails;nullable,public,handler,result,invoke,for,handler,result,server,web,exchange,exchange,binding,context,binding,context,object,provided,args,mono,processor,handler,result,processor,mono,processor,create,this,delegate,invoke,exchange,binding,context,provided,args,subscribe,with,processor,if,processor,is,terminated,throwable,ex,processor,get,error,if,ex,null,throw,ex,instanceof,server,error,exception,server,error,exception,ex,new,server,error,exception,failed,to,invoke,get,short,log,message,this,ex,return,processor,peek,else,throw,new,illegal,state,exception,sync,invocable,handler,method,should,have,completed,synchronously
SyncInvocableHandlerMethod -> @Nullable 	public HandlerResult invokeForHandlerResult(ServerWebExchange exchange, 			BindingContext bindingContext, Object... providedArgs);1522534875;Invoke the method for the given exchange._@param exchange the current exchange_@param bindingContext the binding context to use_@param providedArgs optional list of argument values to match by type_@return Mono with a {@link HandlerResult}._@throws ServerErrorException if method argument resolution or method invocation fails;@Nullable_	public HandlerResult invokeForHandlerResult(ServerWebExchange exchange,_			BindingContext bindingContext, Object... providedArgs) {__		MonoProcessor<HandlerResult> processor = MonoProcessor.create()__		this.delegate.invoke(exchange, bindingContext, providedArgs).subscribeWith(processor)___		if (processor.isTerminated()) {_			Throwable ex = processor.getError()__			if (ex != null) {_				throw (ex instanceof ServerErrorException ? (ServerErrorException) ex :_						new ServerErrorException("Failed to invoke: " + getShortLogMessage(), getMethod(), ex))__			}_			return processor.peek()__		}_		else {_			_			throw new IllegalStateException(_					"SyncInvocableHandlerMethod should have completed synchronously.")__		}_	};invoke,the,method,for,the,given,exchange,param,exchange,the,current,exchange,param,binding,context,the,binding,context,to,use,param,provided,args,optional,list,of,argument,values,to,match,by,type,return,mono,with,a,link,handler,result,throws,server,error,exception,if,method,argument,resolution,or,method,invocation,fails;nullable,public,handler,result,invoke,for,handler,result,server,web,exchange,exchange,binding,context,binding,context,object,provided,args,mono,processor,handler,result,processor,mono,processor,create,this,delegate,invoke,exchange,binding,context,provided,args,subscribe,with,processor,if,processor,is,terminated,throwable,ex,processor,get,error,if,ex,null,throw,ex,instanceof,server,error,exception,server,error,exception,ex,new,server,error,exception,failed,to,invoke,get,short,log,message,get,method,ex,return,processor,peek,else,throw,new,illegal,state,exception,sync,invocable,handler,method,should,have,completed,synchronously
SyncInvocableHandlerMethod -> @Nullable 	public HandlerResult invokeForHandlerResult(ServerWebExchange exchange, 			BindingContext bindingContext, Object... providedArgs);1530174524;Invoke the method for the given exchange._@param exchange the current exchange_@param bindingContext the binding context to use_@param providedArgs optional list of argument values to match by type_@return a Mono with a {@link HandlerResult}._@throws ServerErrorException if method argument resolution or method invocation fails;@Nullable_	public HandlerResult invokeForHandlerResult(ServerWebExchange exchange,_			BindingContext bindingContext, Object... providedArgs) {__		MonoProcessor<HandlerResult> processor = MonoProcessor.create()__		this.delegate.invoke(exchange, bindingContext, providedArgs).subscribeWith(processor)___		if (processor.isTerminated()) {_			Throwable ex = processor.getError()__			if (ex != null) {_				throw (ex instanceof ServerErrorException ? (ServerErrorException) ex :_						new ServerErrorException("Failed to invoke: " + getShortLogMessage(), getMethod(), ex))__			}_			return processor.peek()__		}_		else {_			_			throw new IllegalStateException(_					"SyncInvocableHandlerMethod should have completed synchronously.")__		}_	};invoke,the,method,for,the,given,exchange,param,exchange,the,current,exchange,param,binding,context,the,binding,context,to,use,param,provided,args,optional,list,of,argument,values,to,match,by,type,return,a,mono,with,a,link,handler,result,throws,server,error,exception,if,method,argument,resolution,or,method,invocation,fails;nullable,public,handler,result,invoke,for,handler,result,server,web,exchange,exchange,binding,context,binding,context,object,provided,args,mono,processor,handler,result,processor,mono,processor,create,this,delegate,invoke,exchange,binding,context,provided,args,subscribe,with,processor,if,processor,is,terminated,throwable,ex,processor,get,error,if,ex,null,throw,ex,instanceof,server,error,exception,server,error,exception,ex,new,server,error,exception,failed,to,invoke,get,short,log,message,get,method,ex,return,processor,peek,else,throw,new,illegal,state,exception,sync,invocable,handler,method,should,have,completed,synchronously
SyncInvocableHandlerMethod -> public void setArgumentResolvers(List<SyncHandlerMethodArgumentResolver> resolvers);1489433883;Configure the argument resolvers to use to use for resolving method_argument values against a {@code ServerWebExchange}.;public void setArgumentResolvers(List<SyncHandlerMethodArgumentResolver> resolvers) {_		this.delegate.setArgumentResolvers(new ArrayList<>(resolvers))__	};configure,the,argument,resolvers,to,use,to,use,for,resolving,method,argument,values,against,a,code,server,web,exchange;public,void,set,argument,resolvers,list,sync,handler,method,argument,resolver,resolvers,this,delegate,set,argument,resolvers,new,array,list,resolvers
SyncInvocableHandlerMethod -> public void setArgumentResolvers(List<SyncHandlerMethodArgumentResolver> resolvers);1498780456;Configure the argument resolvers to use to use for resolving method_argument values against a {@code ServerWebExchange}.;public void setArgumentResolvers(List<SyncHandlerMethodArgumentResolver> resolvers) {_		this.delegate.setArgumentResolvers(new ArrayList<>(resolvers))__	};configure,the,argument,resolvers,to,use,to,use,for,resolving,method,argument,values,against,a,code,server,web,exchange;public,void,set,argument,resolvers,list,sync,handler,method,argument,resolver,resolvers,this,delegate,set,argument,resolvers,new,array,list,resolvers
SyncInvocableHandlerMethod -> public void setArgumentResolvers(List<SyncHandlerMethodArgumentResolver> resolvers);1522509518;Configure the argument resolvers to use to use for resolving method_argument values against a {@code ServerWebExchange}.;public void setArgumentResolvers(List<SyncHandlerMethodArgumentResolver> resolvers) {_		this.delegate.setArgumentResolvers(new ArrayList<>(resolvers))__	};configure,the,argument,resolvers,to,use,to,use,for,resolving,method,argument,values,against,a,code,server,web,exchange;public,void,set,argument,resolvers,list,sync,handler,method,argument,resolver,resolvers,this,delegate,set,argument,resolvers,new,array,list,resolvers
SyncInvocableHandlerMethod -> public void setArgumentResolvers(List<SyncHandlerMethodArgumentResolver> resolvers);1522512384;Configure the argument resolvers to use to use for resolving method_argument values against a {@code ServerWebExchange}.;public void setArgumentResolvers(List<SyncHandlerMethodArgumentResolver> resolvers) {_		this.delegate.setArgumentResolvers(new ArrayList<>(resolvers))__	};configure,the,argument,resolvers,to,use,to,use,for,resolving,method,argument,values,against,a,code,server,web,exchange;public,void,set,argument,resolvers,list,sync,handler,method,argument,resolver,resolvers,this,delegate,set,argument,resolvers,new,array,list,resolvers
SyncInvocableHandlerMethod -> public void setArgumentResolvers(List<SyncHandlerMethodArgumentResolver> resolvers);1522534875;Configure the argument resolvers to use to use for resolving method_argument values against a {@code ServerWebExchange}.;public void setArgumentResolvers(List<SyncHandlerMethodArgumentResolver> resolvers) {_		this.delegate.setArgumentResolvers(new ArrayList<>(resolvers))__	};configure,the,argument,resolvers,to,use,to,use,for,resolving,method,argument,values,against,a,code,server,web,exchange;public,void,set,argument,resolvers,list,sync,handler,method,argument,resolver,resolvers,this,delegate,set,argument,resolvers,new,array,list,resolvers
SyncInvocableHandlerMethod -> public void setArgumentResolvers(List<SyncHandlerMethodArgumentResolver> resolvers);1530174524;Configure the argument resolvers to use to use for resolving method_argument values against a {@code ServerWebExchange}.;public void setArgumentResolvers(List<SyncHandlerMethodArgumentResolver> resolvers) {_		this.delegate.setArgumentResolvers(new ArrayList<>(resolvers))__	};configure,the,argument,resolvers,to,use,to,use,for,resolving,method,argument,values,against,a,code,server,web,exchange;public,void,set,argument,resolvers,list,sync,handler,method,argument,resolver,resolvers,this,delegate,set,argument,resolvers,new,array,list,resolvers
SyncInvocableHandlerMethod -> public HandlerResult invokeForHandlerResult(ServerWebExchange exchange, 			BindingContext bindingContext, Object... providedArgs);1485986572;Delegate to the base class {@link #invoke} and also wait for the result._Since all argument resolvers are synchronous this won't actually block.;public HandlerResult invokeForHandlerResult(ServerWebExchange exchange,_			BindingContext bindingContext, Object... providedArgs) {__		_		return super.invoke(exchange, bindingContext, providedArgs).block()__	};delegate,to,the,base,class,link,invoke,and,also,wait,for,the,result,since,all,argument,resolvers,are,synchronous,this,won,t,actually,block;public,handler,result,invoke,for,handler,result,server,web,exchange,exchange,binding,context,binding,context,object,provided,args,return,super,invoke,exchange,binding,context,provided,args,block
SyncInvocableHandlerMethod -> public HandlerResult invokeForHandlerResult(ServerWebExchange exchange, 			BindingContext bindingContext, Object... providedArgs);1489433860;Delegate to the base class {@link #invoke} and also wait for the result._Since all argument resolvers are synchronous this won't actually block.;public HandlerResult invokeForHandlerResult(ServerWebExchange exchange,_			BindingContext bindingContext, Object... providedArgs) {__		_		return super.invoke(exchange, bindingContext, providedArgs).block()__	};delegate,to,the,base,class,link,invoke,and,also,wait,for,the,result,since,all,argument,resolvers,are,synchronous,this,won,t,actually,block;public,handler,result,invoke,for,handler,result,server,web,exchange,exchange,binding,context,binding,context,object,provided,args,return,super,invoke,exchange,binding,context,provided,args,block
SyncInvocableHandlerMethod -> public HandlerResult invokeForHandlerResult(ServerWebExchange exchange, 			BindingContext bindingContext, Object... providedArgs);1489433883;Invoke the method for the given exchange._@param exchange the current exchange_@param bindingContext the binding context to use_@param providedArgs optional list of argument values to match by type_@return Mono with a {@link HandlerResult}.;public HandlerResult invokeForHandlerResult(ServerWebExchange exchange,_			BindingContext bindingContext, Object... providedArgs) {__		_		return this.delegate.invoke(exchange, bindingContext, providedArgs).block()__	};invoke,the,method,for,the,given,exchange,param,exchange,the,current,exchange,param,binding,context,the,binding,context,to,use,param,provided,args,optional,list,of,argument,values,to,match,by,type,return,mono,with,a,link,handler,result;public,handler,result,invoke,for,handler,result,server,web,exchange,exchange,binding,context,binding,context,object,provided,args,return,this,delegate,invoke,exchange,binding,context,provided,args,block
SyncInvocableHandlerMethod -> public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer);1489433883;Set the ParameterNameDiscoverer for resolving parameter names when needed_(e.g. default request attribute name)._<p>Default is a {@link DefaultParameterNameDiscoverer}.;public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer) {_		this.delegate.setParameterNameDiscoverer(nameDiscoverer)__	};set,the,parameter,name,discoverer,for,resolving,parameter,names,when,needed,e,g,default,request,attribute,name,p,default,is,a,link,default,parameter,name,discoverer;public,void,set,parameter,name,discoverer,parameter,name,discoverer,name,discoverer,this,delegate,set,parameter,name,discoverer,name,discoverer
SyncInvocableHandlerMethod -> public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer);1498780456;Set the ParameterNameDiscoverer for resolving parameter names when needed_(e.g. default request attribute name)._<p>Default is a {@link DefaultParameterNameDiscoverer}.;public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer) {_		this.delegate.setParameterNameDiscoverer(nameDiscoverer)__	};set,the,parameter,name,discoverer,for,resolving,parameter,names,when,needed,e,g,default,request,attribute,name,p,default,is,a,link,default,parameter,name,discoverer;public,void,set,parameter,name,discoverer,parameter,name,discoverer,name,discoverer,this,delegate,set,parameter,name,discoverer,name,discoverer
SyncInvocableHandlerMethod -> public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer);1522509518;Set the ParameterNameDiscoverer for resolving parameter names when needed_(e.g. default request attribute name)._<p>Default is a {@link DefaultParameterNameDiscoverer}.;public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer) {_		this.delegate.setParameterNameDiscoverer(nameDiscoverer)__	};set,the,parameter,name,discoverer,for,resolving,parameter,names,when,needed,e,g,default,request,attribute,name,p,default,is,a,link,default,parameter,name,discoverer;public,void,set,parameter,name,discoverer,parameter,name,discoverer,name,discoverer,this,delegate,set,parameter,name,discoverer,name,discoverer
SyncInvocableHandlerMethod -> public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer);1522512384;Set the ParameterNameDiscoverer for resolving parameter names when needed_(e.g. default request attribute name)._<p>Default is a {@link DefaultParameterNameDiscoverer}.;public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer) {_		this.delegate.setParameterNameDiscoverer(nameDiscoverer)__	};set,the,parameter,name,discoverer,for,resolving,parameter,names,when,needed,e,g,default,request,attribute,name,p,default,is,a,link,default,parameter,name,discoverer;public,void,set,parameter,name,discoverer,parameter,name,discoverer,name,discoverer,this,delegate,set,parameter,name,discoverer,name,discoverer
SyncInvocableHandlerMethod -> public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer);1522534875;Set the ParameterNameDiscoverer for resolving parameter names when needed_(e.g. default request attribute name)._<p>Default is a {@link DefaultParameterNameDiscoverer}.;public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer) {_		this.delegate.setParameterNameDiscoverer(nameDiscoverer)__	};set,the,parameter,name,discoverer,for,resolving,parameter,names,when,needed,e,g,default,request,attribute,name,p,default,is,a,link,default,parameter,name,discoverer;public,void,set,parameter,name,discoverer,parameter,name,discoverer,name,discoverer,this,delegate,set,parameter,name,discoverer,name,discoverer
SyncInvocableHandlerMethod -> public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer);1530174524;Set the ParameterNameDiscoverer for resolving parameter names when needed_(e.g. default request attribute name)._<p>Default is a {@link DefaultParameterNameDiscoverer}.;public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer) {_		this.delegate.setParameterNameDiscoverer(nameDiscoverer)__	};set,the,parameter,name,discoverer,for,resolving,parameter,names,when,needed,e,g,default,request,attribute,name,p,default,is,a,link,default,parameter,name,discoverer;public,void,set,parameter,name,discoverer,parameter,name,discoverer,name,discoverer,this,delegate,set,parameter,name,discoverer,name,discoverer
SyncInvocableHandlerMethod -> public ParameterNameDiscoverer getParameterNameDiscoverer();1489433883;Return the configured parameter name discoverer.;public ParameterNameDiscoverer getParameterNameDiscoverer() {_		return this.delegate.getParameterNameDiscoverer()__	};return,the,configured,parameter,name,discoverer;public,parameter,name,discoverer,get,parameter,name,discoverer,return,this,delegate,get,parameter,name,discoverer
SyncInvocableHandlerMethod -> public ParameterNameDiscoverer getParameterNameDiscoverer();1498780456;Return the configured parameter name discoverer.;public ParameterNameDiscoverer getParameterNameDiscoverer() {_		return this.delegate.getParameterNameDiscoverer()__	};return,the,configured,parameter,name,discoverer;public,parameter,name,discoverer,get,parameter,name,discoverer,return,this,delegate,get,parameter,name,discoverer
SyncInvocableHandlerMethod -> public ParameterNameDiscoverer getParameterNameDiscoverer();1522509518;Return the configured parameter name discoverer.;public ParameterNameDiscoverer getParameterNameDiscoverer() {_		return this.delegate.getParameterNameDiscoverer()__	};return,the,configured,parameter,name,discoverer;public,parameter,name,discoverer,get,parameter,name,discoverer,return,this,delegate,get,parameter,name,discoverer
SyncInvocableHandlerMethod -> public ParameterNameDiscoverer getParameterNameDiscoverer();1522512384;Return the configured parameter name discoverer.;public ParameterNameDiscoverer getParameterNameDiscoverer() {_		return this.delegate.getParameterNameDiscoverer()__	};return,the,configured,parameter,name,discoverer;public,parameter,name,discoverer,get,parameter,name,discoverer,return,this,delegate,get,parameter,name,discoverer
SyncInvocableHandlerMethod -> public ParameterNameDiscoverer getParameterNameDiscoverer();1522534875;Return the configured parameter name discoverer.;public ParameterNameDiscoverer getParameterNameDiscoverer() {_		return this.delegate.getParameterNameDiscoverer()__	};return,the,configured,parameter,name,discoverer;public,parameter,name,discoverer,get,parameter,name,discoverer,return,this,delegate,get,parameter,name,discoverer
SyncInvocableHandlerMethod -> public ParameterNameDiscoverer getParameterNameDiscoverer();1530174524;Return the configured parameter name discoverer.;public ParameterNameDiscoverer getParameterNameDiscoverer() {_		return this.delegate.getParameterNameDiscoverer()__	};return,the,configured,parameter,name,discoverer;public,parameter,name,discoverer,get,parameter,name,discoverer,return,this,delegate,get,parameter,name,discoverer
