commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Configure the argument resolvers to use to use for resolving method  * argument values against a {@code ServerWebExchange}.  */ ;/**  * Configure the argument resolvers to use to use for resolving method  * argument values against a {@code ServerWebExchange}.  */ public void setArgumentResolvers(List<SyncHandlerMethodArgumentResolver> resolvers) {     this.delegate.setArgumentResolvers(new ArrayList<>(resolvers)). }
true;public;0;5;/**  * Return the configured argument resolvers.  */ ;/**  * Return the configured argument resolvers.  */ public List<SyncHandlerMethodArgumentResolver> getResolvers() {     return this.delegate.getResolvers().stream().map(resolver -> (SyncHandlerMethodArgumentResolver) resolver).collect(Collectors.toList()). }
true;public;1;3;/**  * Set the ParameterNameDiscoverer for resolving parameter names when needed  * (e.g. default request attribute name).  * <p>Default is a {@link DefaultParameterNameDiscoverer}.  */ ;/**  * Set the ParameterNameDiscoverer for resolving parameter names when needed  * (e.g. default request attribute name).  * <p>Default is a {@link DefaultParameterNameDiscoverer}.  */ public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer) {     this.delegate.setParameterNameDiscoverer(nameDiscoverer). }
true;public;0;3;/**  * Return the configured parameter name discoverer.  */ ;/**  * Return the configured parameter name discoverer.  */ public ParameterNameDiscoverer getParameterNameDiscoverer() {     return this.delegate.getParameterNameDiscoverer(). }
true;public;3;21;/**  * Invoke the method for the given exchange.  * @param exchange the current exchange  * @param bindingContext the binding context to use  * @param providedArgs optional list of argument values to match by type  * @return a Mono with a {@link HandlerResult}.  * @throws ServerErrorException if method argument resolution or method invocation fails  */ ;/**  * Invoke the method for the given exchange.  * @param exchange the current exchange  * @param bindingContext the binding context to use  * @param providedArgs optional list of argument values to match by type  * @return a Mono with a {@link HandlerResult}.  * @throws ServerErrorException if method argument resolution or method invocation fails  */ @Nullable public HandlerResult invokeForHandlerResult(ServerWebExchange exchange, BindingContext bindingContext, Object... providedArgs) {     MonoProcessor<HandlerResult> processor = MonoProcessor.create().     this.delegate.invoke(exchange, bindingContext, providedArgs).subscribeWith(processor).     if (processor.isTerminated()) {         Throwable ex = processor.getError().         if (ex != null) {             throw (ex instanceof ServerErrorException ? (ServerErrorException) ex : new ServerErrorException("Failed to invoke: " + getShortLogMessage(), getMethod(), ex)).         }         return processor.peek().     } else {         // Should never happen...         throw new IllegalStateException("SyncInvocableHandlerMethod should have completed synchronously.").     } }
