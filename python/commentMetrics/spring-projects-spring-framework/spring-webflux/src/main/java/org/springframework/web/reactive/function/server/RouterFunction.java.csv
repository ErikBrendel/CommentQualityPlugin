# id;timestamp;commentText;codeText;commentWords;codeWords
RouterFunction -> default RouterFunction<?> and(RouterFunction<?> other);1485986572;Return a composed routing function that first invokes this function,_and then invokes the {@code other} function (of a different type) if this route had_{@linkplain Optional#empty() no result}.__@param other the function to apply when this function has no result_@return a composed function that first routes with this function and then the {@code other} function if this_function has no result;default RouterFunction<?> and(RouterFunction<?> other) {_		return request -> this.route(request)_				.map(RouterFunctions::cast)_				.otherwiseIfEmpty(other.route(request).map(RouterFunctions::cast))__	};return,a,composed,routing,function,that,first,invokes,this,function,and,then,invokes,the,code,other,function,of,a,different,type,if,this,route,had,linkplain,optional,empty,no,result,param,other,the,function,to,apply,when,this,function,has,no,result,return,a,composed,function,that,first,routes,with,this,function,and,then,the,code,other,function,if,this,function,has,no,result;default,router,function,and,router,function,other,return,request,this,route,request,map,router,functions,cast,otherwise,if,empty,other,route,request,map,router,functions,cast
RouterFunction -> default RouterFunction<?> and(RouterFunction<?> other);1486720600;Return a composed routing function that first invokes this function,_and then invokes the {@code other} function (of a different type) if this route had_{@linkplain Optional#empty() no result}._@param other the function to apply when this function has no result_@return a composed function that first routes with this function and then the_{@code other} function if this function has no result;default RouterFunction<?> and(RouterFunction<?> other) {_		return request -> this.route(request)_				.map(RouterFunctions::cast)_				.otherwiseIfEmpty(other.route(request).map(RouterFunctions::cast))__	};return,a,composed,routing,function,that,first,invokes,this,function,and,then,invokes,the,code,other,function,of,a,different,type,if,this,route,had,linkplain,optional,empty,no,result,param,other,the,function,to,apply,when,this,function,has,no,result,return,a,composed,function,that,first,routes,with,this,function,and,then,the,code,other,function,if,this,function,has,no,result;default,router,function,and,router,function,other,return,request,this,route,request,map,router,functions,cast,otherwise,if,empty,other,route,request,map,router,functions,cast
RouterFunction -> default <S extends ServerResponse> RouterFunction<S> filter(HandlerFilterFunction<T, S> filterFunction);1485986572;Filter all {@linkplain HandlerFunction handler functions} routed by this function with the given_{@linkplain HandlerFilterFunction filter function}.__@param filterFunction the filter to apply_@param <S>            the filter return type_@return the filtered routing function;default <S extends ServerResponse> RouterFunction<S> filter(HandlerFilterFunction<T, S> filterFunction) {_		return request -> this.route(request).map(filterFunction::apply)__	};filter,all,linkplain,handler,function,handler,functions,routed,by,this,function,with,the,given,linkplain,handler,filter,function,filter,function,param,filter,function,the,filter,to,apply,param,s,the,filter,return,type,return,the,filtered,routing,function;default,s,extends,server,response,router,function,s,filter,handler,filter,function,t,s,filter,function,return,request,this,route,request,map,filter,function,apply
RouterFunction -> default <S extends ServerResponse> RouterFunction<S> filter(HandlerFilterFunction<T, S> filterFunction);1486720600;Filter all {@linkplain HandlerFunction handler functions} routed by this function with the given_{@linkplain HandlerFilterFunction filter function}._@param <S> the filter return type_@param filterFunction the filter to apply_@return the filtered routing function;default <S extends ServerResponse> RouterFunction<S> filter(HandlerFilterFunction<T, S> filterFunction) {_		return request -> this.route(request).map(filterFunction::apply)__	};filter,all,linkplain,handler,function,handler,functions,routed,by,this,function,with,the,given,linkplain,handler,filter,function,filter,function,param,s,the,filter,return,type,param,filter,function,the,filter,to,apply,return,the,filtered,routing,function;default,s,extends,server,response,router,function,s,filter,handler,filter,function,t,s,filter,function,return,request,this,route,request,map,filter,function,apply
RouterFunction -> default <S extends ServerResponse> RouterFunction<S> filter(HandlerFilterFunction<T, S> filterFunction);1487083917;Filter all {@linkplain HandlerFunction handler functions} routed by this function with the given_{@linkplain HandlerFilterFunction filter function}._@param <S> the filter return type_@param filterFunction the filter to apply_@return the filtered routing function;default <S extends ServerResponse> RouterFunction<S> filter(HandlerFilterFunction<T, S> filterFunction) {_		return request -> this.route(request).map(filterFunction::apply)__	};filter,all,linkplain,handler,function,handler,functions,routed,by,this,function,with,the,given,linkplain,handler,filter,function,filter,function,param,s,the,filter,return,type,param,filter,function,the,filter,to,apply,return,the,filtered,routing,function;default,s,extends,server,response,router,function,s,filter,handler,filter,function,t,s,filter,function,return,request,this,route,request,map,filter,function,apply
RouterFunction -> default <S extends ServerResponse> RouterFunction<S> filter(HandlerFilterFunction<T, S> filterFunction);1487250745;Filter all {@linkplain HandlerFunction handler functions} routed by this function with the given_{@linkplain HandlerFilterFunction filter function}._@param <S> the filter return type_@param filterFunction the filter to apply_@return the filtered routing function;default <S extends ServerResponse> RouterFunction<S> filter(HandlerFilterFunction<T, S> filterFunction) {_		return request -> this.route(request).map(filterFunction::apply)__	};filter,all,linkplain,handler,function,handler,functions,routed,by,this,function,with,the,given,linkplain,handler,filter,function,filter,function,param,s,the,filter,return,type,param,filter,function,the,filter,to,apply,return,the,filtered,routing,function;default,s,extends,server,response,router,function,s,filter,handler,filter,function,t,s,filter,function,return,request,this,route,request,map,filter,function,apply
RouterFunction -> default <S extends ServerResponse> RouterFunction<S> filter(HandlerFilterFunction<T, S> filterFunction);1487584793;Filter all {@linkplain HandlerFunction handler functions} routed by this function with the given_{@linkplain HandlerFilterFunction filter function}._@param <S> the filter return type_@param filterFunction the filter to apply_@return the filtered routing function;default <S extends ServerResponse> RouterFunction<S> filter(HandlerFilterFunction<T, S> filterFunction) {_		return request -> this.route(request).map(filterFunction::apply)__	};filter,all,linkplain,handler,function,handler,functions,routed,by,this,function,with,the,given,linkplain,handler,filter,function,filter,function,param,s,the,filter,return,type,param,filter,function,the,filter,to,apply,return,the,filtered,routing,function;default,s,extends,server,response,router,function,s,filter,handler,filter,function,t,s,filter,function,return,request,this,route,request,map,filter,function,apply
RouterFunction -> default <S extends ServerResponse> RouterFunction<S> filter(HandlerFilterFunction<T, S> filterFunction);1487713300;Filter all {@linkplain HandlerFunction handler functions} routed by this function with the given_{@linkplain HandlerFilterFunction filter function}._@param <S> the filter return type_@param filterFunction the filter to apply_@return the filtered routing function;default <S extends ServerResponse> RouterFunction<S> filter(HandlerFilterFunction<T, S> filterFunction) {_		return request -> this.route(request).map(filterFunction::apply)__	};filter,all,linkplain,handler,function,handler,functions,routed,by,this,function,with,the,given,linkplain,handler,filter,function,filter,function,param,s,the,filter,return,type,param,filter,function,the,filter,to,apply,return,the,filtered,routing,function;default,s,extends,server,response,router,function,s,filter,handler,filter,function,t,s,filter,function,return,request,this,route,request,map,filter,function,apply
RouterFunction -> default <S extends ServerResponse> RouterFunction<S> filter(HandlerFilterFunction<T, S> filterFunction);1492090594;Filter all {@linkplain HandlerFunction handler functions} routed by this function with the given_{@linkplain HandlerFilterFunction filter function}._@param <S> the filter return type_@param filterFunction the filter to apply_@return the filtered routing function;default <S extends ServerResponse> RouterFunction<S> filter(HandlerFilterFunction<T, S> filterFunction) {_		return request -> this.route(request).map(filterFunction::apply)__	};filter,all,linkplain,handler,function,handler,functions,routed,by,this,function,with,the,given,linkplain,handler,filter,function,filter,function,param,s,the,filter,return,type,param,filter,function,the,filter,to,apply,return,the,filtered,routing,function;default,s,extends,server,response,router,function,s,filter,handler,filter,function,t,s,filter,function,return,request,this,route,request,map,filter,function,apply
RouterFunction -> default <S extends ServerResponse> RouterFunction<S> filter(HandlerFilterFunction<T, S> filterFunction);1506081789;Filter all {@linkplain HandlerFunction handler functions} routed by this function with the given_{@linkplain HandlerFilterFunction filter function}._@param <S> the filter return type_@param filterFunction the filter to apply_@return the filtered routing function;default <S extends ServerResponse> RouterFunction<S> filter(HandlerFilterFunction<T, S> filterFunction) {_		return new RouterFunctions.FilteredRouterFunction<>(this, filterFunction)__	};filter,all,linkplain,handler,function,handler,functions,routed,by,this,function,with,the,given,linkplain,handler,filter,function,filter,function,param,s,the,filter,return,type,param,filter,function,the,filter,to,apply,return,the,filtered,routing,function;default,s,extends,server,response,router,function,s,filter,handler,filter,function,t,s,filter,function,return,new,router,functions,filtered,router,function,this,filter,function
RouterFunction -> default <S extends ServerResponse> RouterFunction<S> filter(HandlerFilterFunction<T, S> filterFunction);1542719117;Filter all {@linkplain HandlerFunction handler functions} routed by this function with the given_{@linkplain HandlerFilterFunction filter function}._@param <S> the filter return type_@param filterFunction the filter to apply_@return the filtered routing function;default <S extends ServerResponse> RouterFunction<S> filter(HandlerFilterFunction<T, S> filterFunction) {_		return new RouterFunctions.FilteredRouterFunction<>(this, filterFunction)__	};filter,all,linkplain,handler,function,handler,functions,routed,by,this,function,with,the,given,linkplain,handler,filter,function,filter,function,param,s,the,filter,return,type,param,filter,function,the,filter,to,apply,return,the,filtered,routing,function;default,s,extends,server,response,router,function,s,filter,handler,filter,function,t,s,filter,function,return,new,router,functions,filtered,router,function,this,filter,function
RouterFunction -> default RouterFunction<T> and(RouterFunction<T> other);1487083917;Return a composed routing function that first invokes this function,_and then invokes the {@code other} function (of the same response type {@code T})_if this route had {@linkplain Mono#empty() no result}._@param other the function of type {@code T} to apply when this function has no result_@return a composed function that first routes with this function and then the_{@code other} function if this function has no result_@see #andOther(RouterFunction);default RouterFunction<T> and(RouterFunction<T> other) {_		return request -> this.route(request).otherwiseIfEmpty(other.route(request))__	};return,a,composed,routing,function,that,first,invokes,this,function,and,then,invokes,the,code,other,function,of,the,same,response,type,code,t,if,this,route,had,linkplain,mono,empty,no,result,param,other,the,function,of,type,code,t,to,apply,when,this,function,has,no,result,return,a,composed,function,that,first,routes,with,this,function,and,then,the,code,other,function,if,this,function,has,no,result,see,and,other,router,function;default,router,function,t,and,router,function,t,other,return,request,this,route,request,otherwise,if,empty,other,route,request
RouterFunction -> default RouterFunction<T> and(RouterFunction<T> other);1487250745;Return a composed routing function that first invokes this function,_and then invokes the {@code other} function (of the same response type {@code T})_if this route had {@linkplain Mono#empty() no result}._@param other the function of type {@code T} to apply when this function has no result_@return a composed function that first routes with this function and then the_{@code other} function if this function has no result_@see #andOther(RouterFunction);default RouterFunction<T> and(RouterFunction<T> other) {_		return request -> this.route(request).otherwiseIfEmpty(other.route(request))__	};return,a,composed,routing,function,that,first,invokes,this,function,and,then,invokes,the,code,other,function,of,the,same,response,type,code,t,if,this,route,had,linkplain,mono,empty,no,result,param,other,the,function,of,type,code,t,to,apply,when,this,function,has,no,result,return,a,composed,function,that,first,routes,with,this,function,and,then,the,code,other,function,if,this,function,has,no,result,see,and,other,router,function;default,router,function,t,and,router,function,t,other,return,request,this,route,request,otherwise,if,empty,other,route,request
RouterFunction -> default RouterFunction<T> and(RouterFunction<T> other);1487584793;Return a composed routing function that first invokes this function,_and then invokes the {@code other} function (of the same response type {@code T})_if this route had {@linkplain Mono#empty() no result}._@param other the function of type {@code T} to apply when this function has no result_@return a composed function that first routes with this function and then the_{@code other} function if this function has no result_@see #andOther(RouterFunction);default RouterFunction<T> and(RouterFunction<T> other) {_		return request -> this.route(request)_				.otherwiseIfEmpty(Mono.defer(() -> other.route(request)))__	};return,a,composed,routing,function,that,first,invokes,this,function,and,then,invokes,the,code,other,function,of,the,same,response,type,code,t,if,this,route,had,linkplain,mono,empty,no,result,param,other,the,function,of,type,code,t,to,apply,when,this,function,has,no,result,return,a,composed,function,that,first,routes,with,this,function,and,then,the,code,other,function,if,this,function,has,no,result,see,and,other,router,function;default,router,function,t,and,router,function,t,other,return,request,this,route,request,otherwise,if,empty,mono,defer,other,route,request
RouterFunction -> default RouterFunction<T> and(RouterFunction<T> other);1487713300;Return a composed routing function that first invokes this function,_and then invokes the {@code other} function (of the same response type {@code T})_if this route had {@linkplain Mono#empty() no result}._@param other the function of type {@code T} to apply when this function has no result_@return a composed function that first routes with this function and then the_{@code other} function if this function has no result_@see #andOther(RouterFunction);default RouterFunction<T> and(RouterFunction<T> other) {_		return request -> this.route(request)_				.otherwiseIfEmpty(Mono.defer(() -> other.route(request)))__	};return,a,composed,routing,function,that,first,invokes,this,function,and,then,invokes,the,code,other,function,of,the,same,response,type,code,t,if,this,route,had,linkplain,mono,empty,no,result,param,other,the,function,of,type,code,t,to,apply,when,this,function,has,no,result,return,a,composed,function,that,first,routes,with,this,function,and,then,the,code,other,function,if,this,function,has,no,result,see,and,other,router,function;default,router,function,t,and,router,function,t,other,return,request,this,route,request,otherwise,if,empty,mono,defer,other,route,request
RouterFunction -> default RouterFunction<T> and(RouterFunction<T> other);1492090594;Return a composed routing function that first invokes this function,_and then invokes the {@code other} function (of the same response type {@code T})_if this route had {@linkplain Mono#empty() no result}._@param other the function of type {@code T} to apply when this function has no result_@return a composed function that first routes with this function and then the_{@code other} function if this function has no result_@see #andOther(RouterFunction);default RouterFunction<T> and(RouterFunction<T> other) {_		return request -> this.route(request)_				.switchIfEmpty(Mono.defer(() -> other.route(request)))__	};return,a,composed,routing,function,that,first,invokes,this,function,and,then,invokes,the,code,other,function,of,the,same,response,type,code,t,if,this,route,had,linkplain,mono,empty,no,result,param,other,the,function,of,type,code,t,to,apply,when,this,function,has,no,result,return,a,composed,function,that,first,routes,with,this,function,and,then,the,code,other,function,if,this,function,has,no,result,see,and,other,router,function;default,router,function,t,and,router,function,t,other,return,request,this,route,request,switch,if,empty,mono,defer,other,route,request
RouterFunction -> default RouterFunction<T> and(RouterFunction<T> other);1506081789;Return a composed routing function that first invokes this function,_and then invokes the {@code other} function (of the same response type {@code T})_if this route had {@linkplain Mono#empty() no result}._@param other the function of type {@code T} to apply when this function has no result_@return a composed function that first routes with this function and then the_{@code other} function if this function has no result_@see #andOther(RouterFunction);default RouterFunction<T> and(RouterFunction<T> other) {_		return new RouterFunctions.SameComposedRouterFunction<>(this, other)__	};return,a,composed,routing,function,that,first,invokes,this,function,and,then,invokes,the,code,other,function,of,the,same,response,type,code,t,if,this,route,had,linkplain,mono,empty,no,result,param,other,the,function,of,type,code,t,to,apply,when,this,function,has,no,result,return,a,composed,function,that,first,routes,with,this,function,and,then,the,code,other,function,if,this,function,has,no,result,see,and,other,router,function;default,router,function,t,and,router,function,t,other,return,new,router,functions,same,composed,router,function,this,other
RouterFunction -> default RouterFunction<T> and(RouterFunction<T> other);1542719117;Return a composed routing function that first invokes this function,_and then invokes the {@code other} function (of the same response type {@code T})_if this route had {@linkplain Mono#empty() no result}._@param other the function of type {@code T} to apply when this function has no result_@return a composed function that first routes with this function and then the_{@code other} function if this function has no result_@see #andOther(RouterFunction);default RouterFunction<T> and(RouterFunction<T> other) {_		return new RouterFunctions.SameComposedRouterFunction<>(this, other)__	};return,a,composed,routing,function,that,first,invokes,this,function,and,then,invokes,the,code,other,function,of,the,same,response,type,code,t,if,this,route,had,linkplain,mono,empty,no,result,param,other,the,function,of,type,code,t,to,apply,when,this,function,has,no,result,return,a,composed,function,that,first,routes,with,this,function,and,then,the,code,other,function,if,this,function,has,no,result,see,and,other,router,function;default,router,function,t,and,router,function,t,other,return,new,router,functions,same,composed,router,function,this,other
RouterFunction -> default RouterFunction<T> andRoute(RequestPredicate predicate, HandlerFunction<T> handlerFunction);1487083917;Return a composed routing function that first invokes this function,_and then routes to the given handler function if the given request predicate applies. This_method is a convenient combination of {@link #and(RouterFunction)} and_{@link RouterFunctions#route(RequestPredicate, HandlerFunction)}._@param predicate the predicate to test_@param handlerFunction the handler function to route to_@return a composed function that first routes with this function and then the function_created from {@code predicate} and {@code handlerFunction} if this_function has no result;default RouterFunction<T> andRoute(RequestPredicate predicate, HandlerFunction<T> handlerFunction) {_		return and(RouterFunctions.route(predicate, handlerFunction))__	};return,a,composed,routing,function,that,first,invokes,this,function,and,then,routes,to,the,given,handler,function,if,the,given,request,predicate,applies,this,method,is,a,convenient,combination,of,link,and,router,function,and,link,router,functions,route,request,predicate,handler,function,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,return,a,composed,function,that,first,routes,with,this,function,and,then,the,function,created,from,code,predicate,and,code,handler,function,if,this,function,has,no,result;default,router,function,t,and,route,request,predicate,predicate,handler,function,t,handler,function,return,and,router,functions,route,predicate,handler,function
RouterFunction -> default RouterFunction<T> andRoute(RequestPredicate predicate, HandlerFunction<T> handlerFunction);1487250745;Return a composed routing function that routes to the given handler function if this_route does not match and the given request predicate applies. This method is a convenient_combination of {@link #and(RouterFunction)} and_{@link RouterFunctions#route(RequestPredicate, HandlerFunction)}._@param predicate the predicate to test if this route does not match_@param handlerFunction the handler function to route to if this route does not match and_the predicate applies_@return a composed function that route to {@code handlerFunction} if this route does not_match and if {@code predicate} applies;default RouterFunction<T> andRoute(RequestPredicate predicate, HandlerFunction<T> handlerFunction) {_		return and(RouterFunctions.route(predicate, handlerFunction))__	};return,a,composed,routing,function,that,routes,to,the,given,handler,function,if,this,route,does,not,match,and,the,given,request,predicate,applies,this,method,is,a,convenient,combination,of,link,and,router,function,and,link,router,functions,route,request,predicate,handler,function,param,predicate,the,predicate,to,test,if,this,route,does,not,match,param,handler,function,the,handler,function,to,route,to,if,this,route,does,not,match,and,the,predicate,applies,return,a,composed,function,that,route,to,code,handler,function,if,this,route,does,not,match,and,if,code,predicate,applies;default,router,function,t,and,route,request,predicate,predicate,handler,function,t,handler,function,return,and,router,functions,route,predicate,handler,function
RouterFunction -> default RouterFunction<T> andRoute(RequestPredicate predicate, HandlerFunction<T> handlerFunction);1487584793;Return a composed routing function that routes to the given handler function if this_route does not match and the given request predicate applies. This method is a convenient_combination of {@link #and(RouterFunction)} and_{@link RouterFunctions#route(RequestPredicate, HandlerFunction)}._@param predicate the predicate to test if this route does not match_@param handlerFunction the handler function to route to if this route does not match and_the predicate applies_@return a composed function that route to {@code handlerFunction} if this route does not_match and if {@code predicate} applies;default RouterFunction<T> andRoute(RequestPredicate predicate, HandlerFunction<T> handlerFunction) {_		return and(RouterFunctions.route(predicate, handlerFunction))__	};return,a,composed,routing,function,that,routes,to,the,given,handler,function,if,this,route,does,not,match,and,the,given,request,predicate,applies,this,method,is,a,convenient,combination,of,link,and,router,function,and,link,router,functions,route,request,predicate,handler,function,param,predicate,the,predicate,to,test,if,this,route,does,not,match,param,handler,function,the,handler,function,to,route,to,if,this,route,does,not,match,and,the,predicate,applies,return,a,composed,function,that,route,to,code,handler,function,if,this,route,does,not,match,and,if,code,predicate,applies;default,router,function,t,and,route,request,predicate,predicate,handler,function,t,handler,function,return,and,router,functions,route,predicate,handler,function
RouterFunction -> default RouterFunction<T> andRoute(RequestPredicate predicate, HandlerFunction<T> handlerFunction);1487713300;Return a composed routing function that routes to the given handler function if this_route does not match and the given request predicate applies. This method is a convenient_combination of {@link #and(RouterFunction)} and_{@link RouterFunctions#route(RequestPredicate, HandlerFunction)}._@param predicate the predicate to test if this route does not match_@param handlerFunction the handler function to route to if this route does not match and_the predicate applies_@return a composed function that route to {@code handlerFunction} if this route does not_match and if {@code predicate} applies;default RouterFunction<T> andRoute(RequestPredicate predicate, HandlerFunction<T> handlerFunction) {_		return and(RouterFunctions.route(predicate, handlerFunction))__	};return,a,composed,routing,function,that,routes,to,the,given,handler,function,if,this,route,does,not,match,and,the,given,request,predicate,applies,this,method,is,a,convenient,combination,of,link,and,router,function,and,link,router,functions,route,request,predicate,handler,function,param,predicate,the,predicate,to,test,if,this,route,does,not,match,param,handler,function,the,handler,function,to,route,to,if,this,route,does,not,match,and,the,predicate,applies,return,a,composed,function,that,route,to,code,handler,function,if,this,route,does,not,match,and,if,code,predicate,applies;default,router,function,t,and,route,request,predicate,predicate,handler,function,t,handler,function,return,and,router,functions,route,predicate,handler,function
RouterFunction -> default RouterFunction<T> andRoute(RequestPredicate predicate, HandlerFunction<T> handlerFunction);1492090594;Return a composed routing function that routes to the given handler function if this_route does not match and the given request predicate applies. This method is a convenient_combination of {@link #and(RouterFunction)} and_{@link RouterFunctions#route(RequestPredicate, HandlerFunction)}._@param predicate the predicate to test if this route does not match_@param handlerFunction the handler function to route to if this route does not match and_the predicate applies_@return a composed function that route to {@code handlerFunction} if this route does not_match and if {@code predicate} applies;default RouterFunction<T> andRoute(RequestPredicate predicate, HandlerFunction<T> handlerFunction) {_		return and(RouterFunctions.route(predicate, handlerFunction))__	};return,a,composed,routing,function,that,routes,to,the,given,handler,function,if,this,route,does,not,match,and,the,given,request,predicate,applies,this,method,is,a,convenient,combination,of,link,and,router,function,and,link,router,functions,route,request,predicate,handler,function,param,predicate,the,predicate,to,test,if,this,route,does,not,match,param,handler,function,the,handler,function,to,route,to,if,this,route,does,not,match,and,the,predicate,applies,return,a,composed,function,that,route,to,code,handler,function,if,this,route,does,not,match,and,if,code,predicate,applies;default,router,function,t,and,route,request,predicate,predicate,handler,function,t,handler,function,return,and,router,functions,route,predicate,handler,function
RouterFunction -> default RouterFunction<T> andRoute(RequestPredicate predicate, HandlerFunction<T> handlerFunction);1506081789;Return a composed routing function that routes to the given handler function if this_route does not match and the given request predicate applies. This method is a convenient_combination of {@link #and(RouterFunction)} and_{@link RouterFunctions#route(RequestPredicate, HandlerFunction)}._@param predicate the predicate to test if this route does not match_@param handlerFunction the handler function to route to if this route does not match and_the predicate applies_@return a composed function that route to {@code handlerFunction} if this route does not_match and if {@code predicate} applies;default RouterFunction<T> andRoute(RequestPredicate predicate, HandlerFunction<T> handlerFunction) {_		return and(RouterFunctions.route(predicate, handlerFunction))__	};return,a,composed,routing,function,that,routes,to,the,given,handler,function,if,this,route,does,not,match,and,the,given,request,predicate,applies,this,method,is,a,convenient,combination,of,link,and,router,function,and,link,router,functions,route,request,predicate,handler,function,param,predicate,the,predicate,to,test,if,this,route,does,not,match,param,handler,function,the,handler,function,to,route,to,if,this,route,does,not,match,and,the,predicate,applies,return,a,composed,function,that,route,to,code,handler,function,if,this,route,does,not,match,and,if,code,predicate,applies;default,router,function,t,and,route,request,predicate,predicate,handler,function,t,handler,function,return,and,router,functions,route,predicate,handler,function
RouterFunction -> default RouterFunction<T> andRoute(RequestPredicate predicate, HandlerFunction<T> handlerFunction);1542719117;Return a composed routing function that routes to the given handler function if this_route does not match and the given request predicate applies. This method is a convenient_combination of {@link #and(RouterFunction)} and_{@link RouterFunctions#route(RequestPredicate, HandlerFunction)}._@param predicate the predicate to test if this route does not match_@param handlerFunction the handler function to route to if this route does not match and_the predicate applies_@return a composed function that route to {@code handlerFunction} if this route does not_match and if {@code predicate} applies;default RouterFunction<T> andRoute(RequestPredicate predicate, HandlerFunction<T> handlerFunction) {_		return and(RouterFunctions.route(predicate, handlerFunction))__	};return,a,composed,routing,function,that,routes,to,the,given,handler,function,if,this,route,does,not,match,and,the,given,request,predicate,applies,this,method,is,a,convenient,combination,of,link,and,router,function,and,link,router,functions,route,request,predicate,handler,function,param,predicate,the,predicate,to,test,if,this,route,does,not,match,param,handler,function,the,handler,function,to,route,to,if,this,route,does,not,match,and,the,predicate,applies,return,a,composed,function,that,route,to,code,handler,function,if,this,route,does,not,match,and,if,code,predicate,applies;default,router,function,t,and,route,request,predicate,predicate,handler,function,t,handler,function,return,and,router,functions,route,predicate,handler,function
RouterFunction -> Mono<HandlerFunction<T>> route(ServerRequest request)_;1485986572;Return the {@linkplain HandlerFunction handler function} that matches the given request._@param request the request to route to_@return an {@code Mono} describing the {@code HandlerFunction} that matches this request,_or an empty {@code Mono} if there is no match;Mono<HandlerFunction<T>> route(ServerRequest request)_;return,the,linkplain,handler,function,handler,function,that,matches,the,given,request,param,request,the,request,to,route,to,return,an,code,mono,describing,the,code,handler,function,that,matches,this,request,or,an,empty,code,mono,if,there,is,no,match;mono,handler,function,t,route,server,request,request
RouterFunction -> Mono<HandlerFunction<T>> route(ServerRequest request)_;1486720600;Return the {@linkplain HandlerFunction handler function} that matches the given request._@param request the request to route to_@return an {@code Mono} describing the {@code HandlerFunction} that matches this request,_or an empty {@code Mono} if there is no match;Mono<HandlerFunction<T>> route(ServerRequest request)_;return,the,linkplain,handler,function,handler,function,that,matches,the,given,request,param,request,the,request,to,route,to,return,an,code,mono,describing,the,code,handler,function,that,matches,this,request,or,an,empty,code,mono,if,there,is,no,match;mono,handler,function,t,route,server,request,request
RouterFunction -> Mono<HandlerFunction<T>> route(ServerRequest request)_;1487083917;Return the {@linkplain HandlerFunction handler function} that matches the given request._@param request the request to route_@return an {@code Mono} describing the {@code HandlerFunction} that matches this request,_or an empty {@code Mono} if there is no match;Mono<HandlerFunction<T>> route(ServerRequest request)_;return,the,linkplain,handler,function,handler,function,that,matches,the,given,request,param,request,the,request,to,route,return,an,code,mono,describing,the,code,handler,function,that,matches,this,request,or,an,empty,code,mono,if,there,is,no,match;mono,handler,function,t,route,server,request,request
RouterFunction -> Mono<HandlerFunction<T>> route(ServerRequest request)_;1487250745;Return the {@linkplain HandlerFunction handler function} that matches the given request._@param request the request to route_@return an {@code Mono} describing the {@code HandlerFunction} that matches this request,_or an empty {@code Mono} if there is no match;Mono<HandlerFunction<T>> route(ServerRequest request)_;return,the,linkplain,handler,function,handler,function,that,matches,the,given,request,param,request,the,request,to,route,return,an,code,mono,describing,the,code,handler,function,that,matches,this,request,or,an,empty,code,mono,if,there,is,no,match;mono,handler,function,t,route,server,request,request
RouterFunction -> Mono<HandlerFunction<T>> route(ServerRequest request)_;1487584793;Return the {@linkplain HandlerFunction handler function} that matches the given request._@param request the request to route_@return an {@code Mono} describing the {@code HandlerFunction} that matches this request,_or an empty {@code Mono} if there is no match;Mono<HandlerFunction<T>> route(ServerRequest request)_;return,the,linkplain,handler,function,handler,function,that,matches,the,given,request,param,request,the,request,to,route,return,an,code,mono,describing,the,code,handler,function,that,matches,this,request,or,an,empty,code,mono,if,there,is,no,match;mono,handler,function,t,route,server,request,request
RouterFunction -> Mono<HandlerFunction<T>> route(ServerRequest request)_;1487713300;Return the {@linkplain HandlerFunction handler function} that matches the given request._@param request the request to route_@return an {@code Mono} describing the {@code HandlerFunction} that matches this request,_or an empty {@code Mono} if there is no match;Mono<HandlerFunction<T>> route(ServerRequest request)_;return,the,linkplain,handler,function,handler,function,that,matches,the,given,request,param,request,the,request,to,route,return,an,code,mono,describing,the,code,handler,function,that,matches,this,request,or,an,empty,code,mono,if,there,is,no,match;mono,handler,function,t,route,server,request,request
RouterFunction -> Mono<HandlerFunction<T>> route(ServerRequest request)_;1492090594;Return the {@linkplain HandlerFunction handler function} that matches the given request._@param request the request to route_@return an {@code Mono} describing the {@code HandlerFunction} that matches this request,_or an empty {@code Mono} if there is no match;Mono<HandlerFunction<T>> route(ServerRequest request)_;return,the,linkplain,handler,function,handler,function,that,matches,the,given,request,param,request,the,request,to,route,return,an,code,mono,describing,the,code,handler,function,that,matches,this,request,or,an,empty,code,mono,if,there,is,no,match;mono,handler,function,t,route,server,request,request
RouterFunction -> Mono<HandlerFunction<T>> route(ServerRequest request)_;1506081789;Return the {@linkplain HandlerFunction handler function} that matches the given request._@param request the request to route_@return an {@code Mono} describing the {@code HandlerFunction} that matches this request,_or an empty {@code Mono} if there is no match;Mono<HandlerFunction<T>> route(ServerRequest request)_;return,the,linkplain,handler,function,handler,function,that,matches,the,given,request,param,request,the,request,to,route,return,an,code,mono,describing,the,code,handler,function,that,matches,this,request,or,an,empty,code,mono,if,there,is,no,match;mono,handler,function,t,route,server,request,request
RouterFunction -> Mono<HandlerFunction<T>> route(ServerRequest request)_;1542719117;Return the {@linkplain HandlerFunction handler function} that matches the given request._@param request the request to route_@return an {@code Mono} describing the {@code HandlerFunction} that matches this request,_or an empty {@code Mono} if there is no match;Mono<HandlerFunction<T>> route(ServerRequest request)_;return,the,linkplain,handler,function,handler,function,that,matches,the,given,request,param,request,the,request,to,route,return,an,code,mono,describing,the,code,handler,function,that,matches,this,request,or,an,empty,code,mono,if,there,is,no,match;mono,handler,function,t,route,server,request,request
RouterFunction -> default <S extends ServerResponse> RouterFunction<?> andRoute(RequestPredicate predicate, 			HandlerFunction<S> handlerFunction);1485986572;Return a composed routing function that first invokes this function,_and then routes to the given handler function if the given request predicate applies. This_method is a convenient combination of {@link #and(RouterFunction)} and_{@link RouterFunctions#route(RequestPredicate, HandlerFunction)}._@param predicate the predicate to test_@param handlerFunction the handler function to route to_@param <S> the handler function type_@return a composed function that first routes with this function and then the function_created from {@code predicate} and {@code handlerFunction} if this_function has no result;default <S extends ServerResponse> RouterFunction<?> andRoute(RequestPredicate predicate,_			HandlerFunction<S> handlerFunction) {_		return and(RouterFunctions.route(predicate, handlerFunction))__	};return,a,composed,routing,function,that,first,invokes,this,function,and,then,routes,to,the,given,handler,function,if,the,given,request,predicate,applies,this,method,is,a,convenient,combination,of,link,and,router,function,and,link,router,functions,route,request,predicate,handler,function,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,param,s,the,handler,function,type,return,a,composed,function,that,first,routes,with,this,function,and,then,the,function,created,from,code,predicate,and,code,handler,function,if,this,function,has,no,result;default,s,extends,server,response,router,function,and,route,request,predicate,predicate,handler,function,s,handler,function,return,and,router,functions,route,predicate,handler,function
RouterFunction -> default <S extends ServerResponse> RouterFunction<?> andRoute(RequestPredicate predicate, 			HandlerFunction<S> handlerFunction);1486720600;Return a composed routing function that first invokes this function,_and then routes to the given handler function if the given request predicate applies. This_method is a convenient combination of {@link #and(RouterFunction)} and_{@link RouterFunctions#route(RequestPredicate, HandlerFunction)}._@param <S> the handler function type_@param predicate the predicate to test_@param handlerFunction the handler function to route to_@return a composed function that first routes with this function and then the function_created from {@code predicate} and {@code handlerFunction} if this_function has no result;default <S extends ServerResponse> RouterFunction<?> andRoute(RequestPredicate predicate,_			HandlerFunction<S> handlerFunction) {__		return and(RouterFunctions.route(predicate, handlerFunction))__	};return,a,composed,routing,function,that,first,invokes,this,function,and,then,routes,to,the,given,handler,function,if,the,given,request,predicate,applies,this,method,is,a,convenient,combination,of,link,and,router,function,and,link,router,functions,route,request,predicate,handler,function,param,s,the,handler,function,type,param,predicate,the,predicate,to,test,param,handler,function,the,handler,function,to,route,to,return,a,composed,function,that,first,routes,with,this,function,and,then,the,function,created,from,code,predicate,and,code,handler,function,if,this,function,has,no,result;default,s,extends,server,response,router,function,and,route,request,predicate,predicate,handler,function,s,handler,function,return,and,router,functions,route,predicate,handler,function
RouterFunction -> default RouterFunction<?> andOther(RouterFunction<?> other);1487083917;Return a composed routing function that first invokes this function,_and then invokes the {@code other} function (of a different response type) if this route had_{@linkplain Mono#empty() no result}._@param other the function to apply when this function has no result_@return a composed function that first routes with this function and then the_{@code other} function if this function has no result_@see #and(RouterFunction);default RouterFunction<?> andOther(RouterFunction<?> other) {_		return request -> this.route(request)_				.map(RouterFunctions::cast)_				.otherwiseIfEmpty(other.route(request).map(RouterFunctions::cast))__	};return,a,composed,routing,function,that,first,invokes,this,function,and,then,invokes,the,code,other,function,of,a,different,response,type,if,this,route,had,linkplain,mono,empty,no,result,param,other,the,function,to,apply,when,this,function,has,no,result,return,a,composed,function,that,first,routes,with,this,function,and,then,the,code,other,function,if,this,function,has,no,result,see,and,router,function;default,router,function,and,other,router,function,other,return,request,this,route,request,map,router,functions,cast,otherwise,if,empty,other,route,request,map,router,functions,cast
RouterFunction -> default RouterFunction<?> andOther(RouterFunction<?> other);1487250745;Return a composed routing function that first invokes this function,_and then invokes the {@code other} function (of a different response type) if this route had_{@linkplain Mono#empty() no result}._@param other the function to apply when this function has no result_@return a composed function that first routes with this function and then the_{@code other} function if this function has no result_@see #and(RouterFunction);default RouterFunction<?> andOther(RouterFunction<?> other) {_		return request -> this.route(request)_				.map(RouterFunctions::cast)_				.otherwiseIfEmpty(other.route(request).map(RouterFunctions::cast))__	};return,a,composed,routing,function,that,first,invokes,this,function,and,then,invokes,the,code,other,function,of,a,different,response,type,if,this,route,had,linkplain,mono,empty,no,result,param,other,the,function,to,apply,when,this,function,has,no,result,return,a,composed,function,that,first,routes,with,this,function,and,then,the,code,other,function,if,this,function,has,no,result,see,and,router,function;default,router,function,and,other,router,function,other,return,request,this,route,request,map,router,functions,cast,otherwise,if,empty,other,route,request,map,router,functions,cast
RouterFunction -> default RouterFunction<?> andOther(RouterFunction<?> other);1487584793;Return a composed routing function that first invokes this function,_and then invokes the {@code other} function (of a different response type) if this route had_{@linkplain Mono#empty() no result}._@param other the function to apply when this function has no result_@return a composed function that first routes with this function and then the_{@code other} function if this function has no result_@see #and(RouterFunction);default RouterFunction<?> andOther(RouterFunction<?> other) {_		return request -> this.route(request)_				.map(RouterFunctions::cast)_				.otherwiseIfEmpty(_						Mono.defer(() -> other.route(request).map(RouterFunctions::cast)))__	};return,a,composed,routing,function,that,first,invokes,this,function,and,then,invokes,the,code,other,function,of,a,different,response,type,if,this,route,had,linkplain,mono,empty,no,result,param,other,the,function,to,apply,when,this,function,has,no,result,return,a,composed,function,that,first,routes,with,this,function,and,then,the,code,other,function,if,this,function,has,no,result,see,and,router,function;default,router,function,and,other,router,function,other,return,request,this,route,request,map,router,functions,cast,otherwise,if,empty,mono,defer,other,route,request,map,router,functions,cast
RouterFunction -> default RouterFunction<?> andOther(RouterFunction<?> other);1487713300;Return a composed routing function that first invokes this function,_and then invokes the {@code other} function (of a different response type) if this route had_{@linkplain Mono#empty() no result}._@param other the function to apply when this function has no result_@return a composed function that first routes with this function and then the_{@code other} function if this function has no result_@see #and(RouterFunction);default RouterFunction<?> andOther(RouterFunction<?> other) {_		return request -> this.route(request)_				.map(RouterFunctions::cast)_				.otherwiseIfEmpty(_						Mono.defer(() -> other.route(request).map(RouterFunctions::cast)))__	};return,a,composed,routing,function,that,first,invokes,this,function,and,then,invokes,the,code,other,function,of,a,different,response,type,if,this,route,had,linkplain,mono,empty,no,result,param,other,the,function,to,apply,when,this,function,has,no,result,return,a,composed,function,that,first,routes,with,this,function,and,then,the,code,other,function,if,this,function,has,no,result,see,and,router,function;default,router,function,and,other,router,function,other,return,request,this,route,request,map,router,functions,cast,otherwise,if,empty,mono,defer,other,route,request,map,router,functions,cast
RouterFunction -> default RouterFunction<?> andOther(RouterFunction<?> other);1492090594;Return a composed routing function that first invokes this function,_and then invokes the {@code other} function (of a different response type) if this route had_{@linkplain Mono#empty() no result}._@param other the function to apply when this function has no result_@return a composed function that first routes with this function and then the_{@code other} function if this function has no result_@see #and(RouterFunction);default RouterFunction<?> andOther(RouterFunction<?> other) {_		return request -> this.route(request)_				.map(RouterFunctions::cast)_				.switchIfEmpty(_						Mono.defer(() -> other.route(request).map(RouterFunctions::cast)))__	};return,a,composed,routing,function,that,first,invokes,this,function,and,then,invokes,the,code,other,function,of,a,different,response,type,if,this,route,had,linkplain,mono,empty,no,result,param,other,the,function,to,apply,when,this,function,has,no,result,return,a,composed,function,that,first,routes,with,this,function,and,then,the,code,other,function,if,this,function,has,no,result,see,and,router,function;default,router,function,and,other,router,function,other,return,request,this,route,request,map,router,functions,cast,switch,if,empty,mono,defer,other,route,request,map,router,functions,cast
RouterFunction -> default RouterFunction<?> andOther(RouterFunction<?> other);1506081789;Return a composed routing function that first invokes this function,_and then invokes the {@code other} function (of a different response type) if this route had_{@linkplain Mono#empty() no result}._@param other the function to apply when this function has no result_@return a composed function that first routes with this function and then the_{@code other} function if this function has no result_@see #and(RouterFunction);default RouterFunction<?> andOther(RouterFunction<?> other) {_		return new RouterFunctions.DifferentComposedRouterFunction(this, other)__	};return,a,composed,routing,function,that,first,invokes,this,function,and,then,invokes,the,code,other,function,of,a,different,response,type,if,this,route,had,linkplain,mono,empty,no,result,param,other,the,function,to,apply,when,this,function,has,no,result,return,a,composed,function,that,first,routes,with,this,function,and,then,the,code,other,function,if,this,function,has,no,result,see,and,router,function;default,router,function,and,other,router,function,other,return,new,router,functions,different,composed,router,function,this,other
RouterFunction -> default RouterFunction<?> andOther(RouterFunction<?> other);1542719117;Return a composed routing function that first invokes this function,_and then invokes the {@code other} function (of a different response type) if this route had_{@linkplain Mono#empty() no result}._@param other the function to apply when this function has no result_@return a composed function that first routes with this function and then the_{@code other} function if this function has no result_@see #and(RouterFunction);default RouterFunction<?> andOther(RouterFunction<?> other) {_		return new RouterFunctions.DifferentComposedRouterFunction(this, other)__	};return,a,composed,routing,function,that,first,invokes,this,function,and,then,invokes,the,code,other,function,of,a,different,response,type,if,this,route,had,linkplain,mono,empty,no,result,param,other,the,function,to,apply,when,this,function,has,no,result,return,a,composed,function,that,first,routes,with,this,function,and,then,the,code,other,function,if,this,function,has,no,result,see,and,router,function;default,router,function,and,other,router,function,other,return,new,router,functions,different,composed,router,function,this,other
RouterFunction -> default void accept(RouterFunctions.Visitor visitor);1506081789;Accept the given visitor. Default implementation calls_{@link RouterFunctions.Visitor#unknown(RouterFunction)}_ composed {@code RouterFunction}_implementations are expected to call {@code accept} for all components that make up this_router function_@param visitor the visitor to accept;default void accept(RouterFunctions.Visitor visitor) {_		visitor.unknown(this)__	};accept,the,given,visitor,default,implementation,calls,link,router,functions,visitor,unknown,router,function,composed,code,router,function,implementations,are,expected,to,call,code,accept,for,all,components,that,make,up,this,router,function,param,visitor,the,visitor,to,accept;default,void,accept,router,functions,visitor,visitor,visitor,unknown,this
RouterFunction -> default void accept(RouterFunctions.Visitor visitor);1542719117;Accept the given visitor. Default implementation calls_{@link RouterFunctions.Visitor#unknown(RouterFunction)}_ composed {@code RouterFunction}_implementations are expected to call {@code accept} for all components that make up this_router function._@param visitor the visitor to accept;default void accept(RouterFunctions.Visitor visitor) {_		visitor.unknown(this)__	};accept,the,given,visitor,default,implementation,calls,link,router,functions,visitor,unknown,router,function,composed,code,router,function,implementations,are,expected,to,call,code,accept,for,all,components,that,make,up,this,router,function,param,visitor,the,visitor,to,accept;default,void,accept,router,functions,visitor,visitor,visitor,unknown,this
RouterFunction -> default RouterFunction<T> andSame(RouterFunction<T> other);1485986572;Return a composed routing function that first invokes this function,_and then invokes the {@code other} function (of the same type {@code T}) if this route had_{@linkplain Mono#empty() no result}.__@param other the function of type {@code T} to apply when this function has no result_@return a composed function that first routes with this function and then the {@code other} function if this_function has no result;default RouterFunction<T> andSame(RouterFunction<T> other) {_		return request -> this.route(request).otherwiseIfEmpty(other.route(request))__	};return,a,composed,routing,function,that,first,invokes,this,function,and,then,invokes,the,code,other,function,of,the,same,type,code,t,if,this,route,had,linkplain,mono,empty,no,result,param,other,the,function,of,type,code,t,to,apply,when,this,function,has,no,result,return,a,composed,function,that,first,routes,with,this,function,and,then,the,code,other,function,if,this,function,has,no,result;default,router,function,t,and,same,router,function,t,other,return,request,this,route,request,otherwise,if,empty,other,route,request
RouterFunction -> default RouterFunction<T> andSame(RouterFunction<T> other);1486720600;Return a composed routing function that first invokes this function,_and then invokes the {@code other} function (of the same type {@code T})_if this route had {@linkplain Mono#empty() no result}._@param other the function of type {@code T} to apply when this function has no result_@return a composed function that first routes with this function and then the_{@code other} function if this function has no result;default RouterFunction<T> andSame(RouterFunction<T> other) {_		return request -> this.route(request).otherwiseIfEmpty(other.route(request))__	};return,a,composed,routing,function,that,first,invokes,this,function,and,then,invokes,the,code,other,function,of,the,same,type,code,t,if,this,route,had,linkplain,mono,empty,no,result,param,other,the,function,of,type,code,t,to,apply,when,this,function,has,no,result,return,a,composed,function,that,first,routes,with,this,function,and,then,the,code,other,function,if,this,function,has,no,result;default,router,function,t,and,same,router,function,t,other,return,request,this,route,request,otherwise,if,empty,other,route,request
RouterFunction -> default RouterFunction<T> andNest(RequestPredicate predicate, RouterFunction<T> routerFunction);1487250745;Return a composed routing function that routes to the given router function if this_route does not match and the given request predicate applies. This method is a convenient_combination of {@link #and(RouterFunction)} and_{@link RouterFunctions#nest(RequestPredicate, RouterFunction)}._@param predicate the predicate to test if this route does not match_@param routerFunction the router function to route to if this route does not match and_the predicate applies_@return a composed function that route to {@code routerFunction} if this route does not_match and if {@code predicate} applies;default RouterFunction<T> andNest(RequestPredicate predicate, RouterFunction<T> routerFunction) {_		return and(RouterFunctions.nest(predicate, routerFunction))__	};return,a,composed,routing,function,that,routes,to,the,given,router,function,if,this,route,does,not,match,and,the,given,request,predicate,applies,this,method,is,a,convenient,combination,of,link,and,router,function,and,link,router,functions,nest,request,predicate,router,function,param,predicate,the,predicate,to,test,if,this,route,does,not,match,param,router,function,the,router,function,to,route,to,if,this,route,does,not,match,and,the,predicate,applies,return,a,composed,function,that,route,to,code,router,function,if,this,route,does,not,match,and,if,code,predicate,applies;default,router,function,t,and,nest,request,predicate,predicate,router,function,t,router,function,return,and,router,functions,nest,predicate,router,function
RouterFunction -> default RouterFunction<T> andNest(RequestPredicate predicate, RouterFunction<T> routerFunction);1487584793;Return a composed routing function that routes to the given router function if this_route does not match and the given request predicate applies. This method is a convenient_combination of {@link #and(RouterFunction)} and_{@link RouterFunctions#nest(RequestPredicate, RouterFunction)}._@param predicate the predicate to test if this route does not match_@param routerFunction the router function to route to if this route does not match and_the predicate applies_@return a composed function that route to {@code routerFunction} if this route does not_match and if {@code predicate} applies;default RouterFunction<T> andNest(RequestPredicate predicate, RouterFunction<T> routerFunction) {_		return and(RouterFunctions.nest(predicate, routerFunction))__	};return,a,composed,routing,function,that,routes,to,the,given,router,function,if,this,route,does,not,match,and,the,given,request,predicate,applies,this,method,is,a,convenient,combination,of,link,and,router,function,and,link,router,functions,nest,request,predicate,router,function,param,predicate,the,predicate,to,test,if,this,route,does,not,match,param,router,function,the,router,function,to,route,to,if,this,route,does,not,match,and,the,predicate,applies,return,a,composed,function,that,route,to,code,router,function,if,this,route,does,not,match,and,if,code,predicate,applies;default,router,function,t,and,nest,request,predicate,predicate,router,function,t,router,function,return,and,router,functions,nest,predicate,router,function
RouterFunction -> default RouterFunction<T> andNest(RequestPredicate predicate, RouterFunction<T> routerFunction);1487713300;Return a composed routing function that routes to the given router function if this_route does not match and the given request predicate applies. This method is a convenient_combination of {@link #and(RouterFunction)} and_{@link RouterFunctions#nest(RequestPredicate, RouterFunction)}._@param predicate the predicate to test if this route does not match_@param routerFunction the router function to route to if this route does not match and_the predicate applies_@return a composed function that route to {@code routerFunction} if this route does not_match and if {@code predicate} applies;default RouterFunction<T> andNest(RequestPredicate predicate, RouterFunction<T> routerFunction) {_		return and(RouterFunctions.nest(predicate, routerFunction))__	};return,a,composed,routing,function,that,routes,to,the,given,router,function,if,this,route,does,not,match,and,the,given,request,predicate,applies,this,method,is,a,convenient,combination,of,link,and,router,function,and,link,router,functions,nest,request,predicate,router,function,param,predicate,the,predicate,to,test,if,this,route,does,not,match,param,router,function,the,router,function,to,route,to,if,this,route,does,not,match,and,the,predicate,applies,return,a,composed,function,that,route,to,code,router,function,if,this,route,does,not,match,and,if,code,predicate,applies;default,router,function,t,and,nest,request,predicate,predicate,router,function,t,router,function,return,and,router,functions,nest,predicate,router,function
RouterFunction -> default RouterFunction<T> andNest(RequestPredicate predicate, RouterFunction<T> routerFunction);1492090594;Return a composed routing function that routes to the given router function if this_route does not match and the given request predicate applies. This method is a convenient_combination of {@link #and(RouterFunction)} and_{@link RouterFunctions#nest(RequestPredicate, RouterFunction)}._@param predicate the predicate to test if this route does not match_@param routerFunction the router function to route to if this route does not match and_the predicate applies_@return a composed function that route to {@code routerFunction} if this route does not_match and if {@code predicate} applies;default RouterFunction<T> andNest(RequestPredicate predicate, RouterFunction<T> routerFunction) {_		return and(RouterFunctions.nest(predicate, routerFunction))__	};return,a,composed,routing,function,that,routes,to,the,given,router,function,if,this,route,does,not,match,and,the,given,request,predicate,applies,this,method,is,a,convenient,combination,of,link,and,router,function,and,link,router,functions,nest,request,predicate,router,function,param,predicate,the,predicate,to,test,if,this,route,does,not,match,param,router,function,the,router,function,to,route,to,if,this,route,does,not,match,and,the,predicate,applies,return,a,composed,function,that,route,to,code,router,function,if,this,route,does,not,match,and,if,code,predicate,applies;default,router,function,t,and,nest,request,predicate,predicate,router,function,t,router,function,return,and,router,functions,nest,predicate,router,function
RouterFunction -> default RouterFunction<T> andNest(RequestPredicate predicate, RouterFunction<T> routerFunction);1506081789;Return a composed routing function that routes to the given router function if this_route does not match and the given request predicate applies. This method is a convenient_combination of {@link #and(RouterFunction)} and_{@link RouterFunctions#nest(RequestPredicate, RouterFunction)}._@param predicate the predicate to test if this route does not match_@param routerFunction the router function to route to if this route does not match and_the predicate applies_@return a composed function that route to {@code routerFunction} if this route does not_match and if {@code predicate} applies;default RouterFunction<T> andNest(RequestPredicate predicate, RouterFunction<T> routerFunction) {_		return and(RouterFunctions.nest(predicate, routerFunction))__	};return,a,composed,routing,function,that,routes,to,the,given,router,function,if,this,route,does,not,match,and,the,given,request,predicate,applies,this,method,is,a,convenient,combination,of,link,and,router,function,and,link,router,functions,nest,request,predicate,router,function,param,predicate,the,predicate,to,test,if,this,route,does,not,match,param,router,function,the,router,function,to,route,to,if,this,route,does,not,match,and,the,predicate,applies,return,a,composed,function,that,route,to,code,router,function,if,this,route,does,not,match,and,if,code,predicate,applies;default,router,function,t,and,nest,request,predicate,predicate,router,function,t,router,function,return,and,router,functions,nest,predicate,router,function
RouterFunction -> default RouterFunction<T> andNest(RequestPredicate predicate, RouterFunction<T> routerFunction);1542719117;Return a composed routing function that routes to the given router function if this_route does not match and the given request predicate applies. This method is a convenient_combination of {@link #and(RouterFunction)} and_{@link RouterFunctions#nest(RequestPredicate, RouterFunction)}._@param predicate the predicate to test if this route does not match_@param routerFunction the router function to route to if this route does not match and_the predicate applies_@return a composed function that route to {@code routerFunction} if this route does not_match and if {@code predicate} applies;default RouterFunction<T> andNest(RequestPredicate predicate, RouterFunction<T> routerFunction) {_		return and(RouterFunctions.nest(predicate, routerFunction))__	};return,a,composed,routing,function,that,routes,to,the,given,router,function,if,this,route,does,not,match,and,the,given,request,predicate,applies,this,method,is,a,convenient,combination,of,link,and,router,function,and,link,router,functions,nest,request,predicate,router,function,param,predicate,the,predicate,to,test,if,this,route,does,not,match,param,router,function,the,router,function,to,route,to,if,this,route,does,not,match,and,the,predicate,applies,return,a,composed,function,that,route,to,code,router,function,if,this,route,does,not,match,and,if,code,predicate,applies;default,router,function,t,and,nest,request,predicate,predicate,router,function,t,router,function,return,and,router,functions,nest,predicate,router,function
