commented;modifiers;parameterAmount;loc;comment;code
false;public;2;7;;@Override public ServerResponse.BodyBuilder header(String headerName, String... headerValues) {     for (String headerValue : headerValues) {         this.headers.add(headerName, headerValue).     }     return this. }
false;public;1;5;;@Override public ServerResponse.BodyBuilder headers(Consumer<HttpHeaders> headersConsumer) {     headersConsumer.accept(this.headers).     return this. }
false;public;1;6;;@Override public ServerResponse.BodyBuilder cookie(ResponseCookie cookie) {     Assert.notNull(cookie, "ResponseCookie must not be null").     this.cookies.add(cookie.getName(), cookie).     return this. }
false;public;1;5;;@Override public ServerResponse.BodyBuilder cookies(Consumer<MultiValueMap<String, ResponseCookie>> cookiesConsumer) {     cookiesConsumer.accept(this.cookies).     return this. }
false;public;1;5;;@Override public ServerResponse.BodyBuilder allow(HttpMethod... allowedMethods) {     this.headers.setAllow(new LinkedHashSet<>(Arrays.asList(allowedMethods))).     return this. }
false;public;1;5;;@Override public ServerResponse.BodyBuilder allow(Set<HttpMethod> allowedMethods) {     this.headers.setAllow(allowedMethods).     return this. }
false;public;1;5;;@Override public ServerResponse.BodyBuilder contentLength(long contentLength) {     this.headers.setContentLength(contentLength).     return this. }
false;public;1;5;;@Override public ServerResponse.BodyBuilder contentType(MediaType contentType) {     this.headers.setContentType(contentType).     return this. }
false;public;1;11;;@Override public ServerResponse.BodyBuilder eTag(String etag) {     if (!etag.startsWith("\"") && !etag.startsWith("W/\"")) {         etag = "\"" + etag.     }     if (!etag.endsWith("\"")) {         etag = etag + "\"".     }     this.headers.setETag(etag).     return this. }
false;public;2;5;;@Override public ServerResponse.BodyBuilder hint(String key, Object value) {     this.hints.put(key, value).     return this. }
false;public;1;5;;@Override public ServerResponse.BodyBuilder lastModified(ZonedDateTime lastModified) {     this.headers.setLastModified(lastModified).     return this. }
false;public;1;5;;@Override public ServerResponse.BodyBuilder lastModified(Instant lastModified) {     this.headers.setLastModified(lastModified).     return this. }
false;public;1;5;;@Override public ServerResponse.BodyBuilder location(URI location) {     this.headers.setLocation(location).     return this. }
false;public;1;5;;@Override public ServerResponse.BodyBuilder cacheControl(CacheControl cacheControl) {     this.headers.setCacheControl(cacheControl).     return this. }
false;public;1;5;;@Override public ServerResponse.BodyBuilder varyBy(String... requestHeaders) {     this.headers.setVary(Arrays.asList(requestHeaders)).     return this. }
false;public;0;4;;@Override public Mono<ServerResponse> build() {     return build((exchange, handlerStrategies) -> exchange.getResponse().setComplete()). }
false;public;1;6;;@Override public Mono<ServerResponse> build(Publisher<Void> voidPublisher) {     Assert.notNull(voidPublisher, "Publisher must not be null").     return build((exchange, handlerStrategies) -> Mono.from(voidPublisher).then(exchange.getResponse().setComplete())). }
false;public;1;7;;@Override public Mono<ServerResponse> build(BiFunction<ServerWebExchange, ServerResponse.Context, Mono<Void>> writeFunction) {     return Mono.just(new WriterFunctionResponse(this.statusCode, this.headers, this.cookies, writeFunction)). }
false;public;2;12;;@Override public <T, P extends Publisher<T>> Mono<ServerResponse> body(P publisher, Class<T> elementClass) {     Assert.notNull(publisher, "Publisher must not be null").     Assert.notNull(elementClass, "Element Class must not be null").     return new DefaultEntityResponseBuilder<>(publisher, BodyInserters.fromPublisher(publisher, elementClass)).headers(this.headers).status(this.statusCode).build().map(entityResponse -> entityResponse). }
false;public;2;14;;@Override public <T, P extends Publisher<T>> Mono<ServerResponse> body(P publisher, ParameterizedTypeReference<T> typeReference) {     Assert.notNull(publisher, "Publisher must not be null").     Assert.notNull(typeReference, "ParameterizedTypeReference must not be null").     return new DefaultEntityResponseBuilder<>(publisher, BodyInserters.fromPublisher(publisher, typeReference)).headers(this.headers).status(this.statusCode).build().map(entityResponse -> entityResponse). }
false;public;1;13;;@Override public Mono<ServerResponse> syncBody(Object body) {     Assert.notNull(body, "Body must not be null").     Assert.isTrue(!(body instanceof Publisher), "Please specify the element class by using body(Publisher, Class)").     return new DefaultEntityResponseBuilder<>(body, BodyInserters.fromObject(body)).headers(this.headers).status(this.statusCode).build().map(entityResponse -> entityResponse). }
false;public;1;5;;@Override public Mono<ServerResponse> body(BodyInserter<?, ? super ServerHttpResponse> inserter) {     return Mono.just(new BodyInserterResponse<>(this.statusCode, this.headers, this.cookies, inserter, this.hints)). }
false;public;2;9;;@Override public Mono<ServerResponse> render(String name, Object... modelAttributes) {     return new DefaultRenderingResponseBuilder(name).headers(this.headers).status(this.statusCode).modelAttributes(modelAttributes).build().map(renderingResponse -> renderingResponse). }
false;public;2;9;;@Override public Mono<ServerResponse> render(String name, Map<String, ?> model) {     return new DefaultRenderingResponseBuilder(name).headers(this.headers).status(this.statusCode).modelAttributes(model).build().map(renderingResponse -> renderingResponse). }
false;public,final;0;4;;@Override public final HttpStatus statusCode() {     return HttpStatus.valueOf(this.statusCode). }
false;public,final;0;4;;@Override public final HttpHeaders headers() {     return this.headers. }
false;public;0;4;;@Override public MultiValueMap<String, ResponseCookie> cookies() {     return this.cookies. }
false;public,final;2;12;;@Override public final Mono<Void> writeTo(ServerWebExchange exchange, Context context) {     writeStatusAndHeaders(exchange.getResponse()).     Instant lastModified = Instant.ofEpochMilli(headers().getLastModified()).     HttpMethod httpMethod = exchange.getRequest().getMethod().     if (SAFE_METHODS.contains(httpMethod) && exchange.checkNotModified(headers().getETag(), lastModified)) {         return exchange.getResponse().setComplete().     } else {         return writeToInternal(exchange, context).     } }
false;private;1;15;;private void writeStatusAndHeaders(ServerHttpResponse response) {     if (response instanceof AbstractServerHttpResponse) {         ((AbstractServerHttpResponse) response).setStatusCodeValue(this.statusCode).     } else {         HttpStatus status = HttpStatus.resolve(this.statusCode).         if (status == null) {             throw new IllegalStateException("Unresolvable HttpStatus for general ServerHttpResponse: " + this.statusCode).         }         response.setStatusCode(status).     }     copy(this.headers, response.getHeaders()).     copy(this.cookies, response.getCookies()). }
false;protected,abstract;2;1;;protected abstract Mono<Void> writeToInternal(ServerWebExchange exchange, Context context).
false;private,static;2;7;;private static <K, V> void copy(MultiValueMap<K, V> src, MultiValueMap<K, V> dst) {     if (!src.isEmpty()) {         src.entrySet().stream().filter(entry -> !dst.containsKey(entry.getKey())).forEach(entry -> dst.put(entry.getKey(), entry.getValue())).     } }
false;protected;2;4;;@Override protected Mono<Void> writeToInternal(ServerWebExchange exchange, Context context) {     return this.writeFunction.apply(exchange, context). }
false;public;0;4;;@Override public List<HttpMessageWriter<?>> messageWriters() {     return context.messageWriters(). }
false;public;0;4;;@Override public Optional<ServerHttpRequest> serverRequest() {     return Optional.of(exchange.getRequest()). }
false;public;0;5;;@Override public Map<String, Object> hints() {     hints.put(Hints.LOG_PREFIX_HINT, exchange.getLogPrefix()).     return hints. }
false;protected;2;18;;@Override protected Mono<Void> writeToInternal(ServerWebExchange exchange, Context context) {     return this.inserter.insert(exchange.getResponse(), new BodyInserter.Context() {          @Override         public List<HttpMessageWriter<?>> messageWriters() {             return context.messageWriters().         }          @Override         public Optional<ServerHttpRequest> serverRequest() {             return Optional.of(exchange.getRequest()).         }          @Override         public Map<String, Object> hints() {             hints.put(Hints.LOG_PREFIX_HINT, exchange.getLogPrefix()).             return hints.         }     }). }
