commented;modifiers;parameterAmount;loc;comment;code
true;public;0;4;/**  * Return the name for this mapping, or {@code null}.  */ ;/**  * Return the name for this mapping, or {@code null}.  */ @Nullable public String getName() {     return this.name. }
true;public;0;3;/**  * Returns the URL patterns of this {@link RequestMappingInfo}.  * or instance with 0 patterns, never {@code null}.  */ ;/**  * Returns the URL patterns of this {@link RequestMappingInfo}.  * or instance with 0 patterns, never {@code null}.  */ public PatternsRequestCondition getPatternsCondition() {     return this.patternsCondition. }
true;public;0;3;/**  * Returns the HTTP request methods of this {@link RequestMappingInfo}.  * or instance with 0 request methods, never {@code null}.  */ ;/**  * Returns the HTTP request methods of this {@link RequestMappingInfo}.  * or instance with 0 request methods, never {@code null}.  */ public RequestMethodsRequestCondition getMethodsCondition() {     return this.methodsCondition. }
true;public;0;3;/**  * Returns the "parameters" condition of this {@link RequestMappingInfo}.  * or instance with 0 parameter expressions, never {@code null}.  */ ;/**  * Returns the "parameters" condition of this {@link RequestMappingInfo}.  * or instance with 0 parameter expressions, never {@code null}.  */ public ParamsRequestCondition getParamsCondition() {     return this.paramsCondition. }
true;public;0;3;/**  * Returns the "headers" condition of this {@link RequestMappingInfo}.  * or instance with 0 header expressions, never {@code null}.  */ ;/**  * Returns the "headers" condition of this {@link RequestMappingInfo}.  * or instance with 0 header expressions, never {@code null}.  */ public HeadersRequestCondition getHeadersCondition() {     return this.headersCondition. }
true;public;0;3;/**  * Returns the "consumes" condition of this {@link RequestMappingInfo}.  * or instance with 0 consumes expressions, never {@code null}.  */ ;/**  * Returns the "consumes" condition of this {@link RequestMappingInfo}.  * or instance with 0 consumes expressions, never {@code null}.  */ public ConsumesRequestCondition getConsumesCondition() {     return this.consumesCondition. }
true;public;0;3;/**  * Returns the "produces" condition of this {@link RequestMappingInfo}.  * or instance with 0 produces expressions, never {@code null}.  */ ;/**  * Returns the "produces" condition of this {@link RequestMappingInfo}.  * or instance with 0 produces expressions, never {@code null}.  */ public ProducesRequestCondition getProducesCondition() {     return this.producesCondition. }
true;public;0;4;/**  * Returns the "custom" condition of this {@link RequestMappingInfo}. or {@code null}.  */ ;/**  * Returns the "custom" condition of this {@link RequestMappingInfo}. or {@code null}.  */ @Nullable public RequestCondition<?> getCustomCondition() {     return this.customConditionHolder.getCondition(). }
true;public;1;14;/**  * Combines "this" request mapping info (i.e. the current instance) with another request mapping info instance.  * <p>Example: combine type- and method-level request mappings.  * @return a new request mapping info instance. never {@code null}  */ ;/**  * Combines "this" request mapping info (i.e. the current instance) with another request mapping info instance.  * <p>Example: combine type- and method-level request mappings.  * @return a new request mapping info instance. never {@code null}  */ @Override public RequestMappingInfo combine(RequestMappingInfo other) {     String name = combineNames(other).     PatternsRequestCondition patterns = this.patternsCondition.combine(other.patternsCondition).     RequestMethodsRequestCondition methods = this.methodsCondition.combine(other.methodsCondition).     ParamsRequestCondition params = this.paramsCondition.combine(other.paramsCondition).     HeadersRequestCondition headers = this.headersCondition.combine(other.headersCondition).     ConsumesRequestCondition consumes = this.consumesCondition.combine(other.consumesCondition).     ProducesRequestCondition produces = this.producesCondition.combine(other.producesCondition).     RequestConditionHolder custom = this.customConditionHolder.combine(other.customConditionHolder).     return new RequestMappingInfo(name, patterns, methods, params, headers, consumes, produces, custom.getCondition()). }
false;private;1;12;;@Nullable private String combineNames(RequestMappingInfo other) {     if (this.name != null && other.name != null) {         return this.name + "#" + other.name.     } else if (this.name != null) {         return this.name.     } else {         return other.name.     } }
true;public;1;26;/**  * Checks if all conditions in this request mapping info match the provided request and returns  * a potentially new request mapping info with conditions tailored to the current request.  * <p>For example the returned instance may contain the subset of URL patterns that match to  * the current request, sorted with best matching patterns on top.  * @return a new instance in case all conditions match. or {@code null} otherwise  */ ;/**  * Checks if all conditions in this request mapping info match the provided request and returns  * a potentially new request mapping info with conditions tailored to the current request.  * <p>For example the returned instance may contain the subset of URL patterns that match to  * the current request, sorted with best matching patterns on top.  * @return a new instance in case all conditions match. or {@code null} otherwise  */ @Override @Nullable public RequestMappingInfo getMatchingCondition(ServerWebExchange exchange) {     RequestMethodsRequestCondition methods = this.methodsCondition.getMatchingCondition(exchange).     ParamsRequestCondition params = this.paramsCondition.getMatchingCondition(exchange).     HeadersRequestCondition headers = this.headersCondition.getMatchingCondition(exchange).     ConsumesRequestCondition consumes = this.consumesCondition.getMatchingCondition(exchange).     ProducesRequestCondition produces = this.producesCondition.getMatchingCondition(exchange).     if (methods == null || params == null || headers == null || consumes == null || produces == null) {         return null.     }     PatternsRequestCondition patterns = this.patternsCondition.getMatchingCondition(exchange).     if (patterns == null) {         return null.     }     RequestConditionHolder custom = this.customConditionHolder.getMatchingCondition(exchange).     if (custom == null) {         return null.     }     return new RequestMappingInfo(this.name, patterns, methods, params, headers, consumes, produces, custom.getCondition()). }
true;public;2;32;/**  * Compares "this" info (i.e. the current instance) with another info in the context of a request.  * <p>Note: It is assumed both instances have been obtained via  * {@link #getMatchingCondition(ServerWebExchange)} to ensure they have conditions with  * content relevant to current request.  */ ;/**  * Compares "this" info (i.e. the current instance) with another info in the context of a request.  * <p>Note: It is assumed both instances have been obtained via  * {@link #getMatchingCondition(ServerWebExchange)} to ensure they have conditions with  * content relevant to current request.  */ @Override public int compareTo(RequestMappingInfo other, ServerWebExchange exchange) {     int result = this.patternsCondition.compareTo(other.getPatternsCondition(), exchange).     if (result != 0) {         return result.     }     result = this.paramsCondition.compareTo(other.getParamsCondition(), exchange).     if (result != 0) {         return result.     }     result = this.headersCondition.compareTo(other.getHeadersCondition(), exchange).     if (result != 0) {         return result.     }     result = this.consumesCondition.compareTo(other.getConsumesCondition(), exchange).     if (result != 0) {         return result.     }     result = this.producesCondition.compareTo(other.getProducesCondition(), exchange).     if (result != 0) {         return result.     }     result = this.methodsCondition.compareTo(other.getMethodsCondition(), exchange).     if (result != 0) {         return result.     }     result = this.customConditionHolder.compareTo(other.customConditionHolder, exchange).     if (result != 0) {         return result.     }     return 0. }
false;public;1;17;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (!(other instanceof RequestMappingInfo)) {         return false.     }     RequestMappingInfo otherInfo = (RequestMappingInfo) other.     return (this.patternsCondition.equals(otherInfo.patternsCondition) && this.methodsCondition.equals(otherInfo.methodsCondition) && this.paramsCondition.equals(otherInfo.paramsCondition) && this.headersCondition.equals(otherInfo.headersCondition) && this.consumesCondition.equals(otherInfo.consumesCondition) && this.producesCondition.equals(otherInfo.producesCondition) && this.customConditionHolder.equals(otherInfo.customConditionHolder)). }
false;public;0;7;;@Override public int hashCode() {     return (// primary differentiation     this.patternsCondition.hashCode() * 31 + this.methodsCondition.hashCode() + this.paramsCondition.hashCode() + this.headersCondition.hashCode() + this.consumesCondition.hashCode() + this.producesCondition.hashCode() + this.customConditionHolder.hashCode()). }
false;public;0;29;;@Override public String toString() {     StringBuilder builder = new StringBuilder("{").     if (!this.methodsCondition.isEmpty()) {         Set<RequestMethod> httpMethods = this.methodsCondition.getMethods().         builder.append(httpMethods.size() == 1 ? httpMethods.iterator().next() : httpMethods).     }     if (!this.patternsCondition.isEmpty()) {         Set<PathPattern> patterns = this.patternsCondition.getPatterns().         builder.append(" ").append(patterns.size() == 1 ? patterns.iterator().next() : patterns).     }     if (!this.paramsCondition.isEmpty()) {         builder.append(", params ").append(this.paramsCondition).     }     if (!this.headersCondition.isEmpty()) {         builder.append(", headers ").append(this.headersCondition).     }     if (!this.consumesCondition.isEmpty()) {         builder.append(", consumes ").append(this.consumesCondition).     }     if (!this.producesCondition.isEmpty()) {         builder.append(", produces ").append(this.producesCondition).     }     if (!this.customConditionHolder.isEmpty()) {         builder.append(", and ").append(this.customConditionHolder).     }     builder.append('}').     return builder.toString(). }
true;public,static;1;3;/**  * Create a new {@code RequestMappingInfo.Builder} with the given paths.  * @param paths the paths to use  */ ;/**  * Create a new {@code RequestMappingInfo.Builder} with the given paths.  * @param paths the paths to use  */ public static Builder paths(String... paths) {     return new DefaultBuilder(paths). }
true;;1;1;/**  * Set the path patterns.  */ ;/**  * Set the path patterns.  */ Builder paths(String... paths).
true;;1;1;/**  * Set the request method conditions.  */ ;/**  * Set the request method conditions.  */ Builder methods(RequestMethod... methods).
true;;1;1;/**  * Set the request param conditions.  */ ;/**  * Set the request param conditions.  */ Builder params(String... params).
true;;1;1;/**  * Set the header conditions.  * <p>By default this is not set.  */ ;/**  * Set the header conditions.  * <p>By default this is not set.  */ Builder headers(String... headers).
true;;1;1;/**  * Set the consumes conditions.  */ ;/**  * Set the consumes conditions.  */ Builder consumes(String... consumes).
true;;1;1;/**  * Set the produces conditions.  */ ;/**  * Set the produces conditions.  */ Builder produces(String... produces).
true;;1;1;/**  * Set the mapping name.  */ ;/**  * Set the mapping name.  */ Builder mappingName(String name).
true;;1;1;/**  * Set a custom condition to use.  */ ;/**  * Set a custom condition to use.  */ Builder customCondition(RequestCondition<?> condition).
true;;1;1;/**  * Provide additional configuration needed for request mapping purposes.  */ ;/**  * Provide additional configuration needed for request mapping purposes.  */ Builder options(BuilderConfiguration options).
true;;0;1;/**  * Build the RequestMappingInfo.  */ ;/**  * Build the RequestMappingInfo.  */ RequestMappingInfo build().
false;public;1;5;;@Override public Builder paths(String... paths) {     this.paths = paths.     return this. }
false;public;1;5;;@Override public DefaultBuilder methods(RequestMethod... methods) {     this.methods = methods.     return this. }
false;public;1;5;;@Override public DefaultBuilder params(String... params) {     this.params = params.     return this. }
false;public;1;5;;@Override public DefaultBuilder headers(String... headers) {     this.headers = headers.     return this. }
false;public;1;5;;@Override public DefaultBuilder consumes(String... consumes) {     this.consumes = consumes.     return this. }
false;public;1;5;;@Override public DefaultBuilder produces(String... produces) {     this.produces = produces.     return this. }
false;public;1;5;;@Override public DefaultBuilder mappingName(String name) {     this.mappingName = name.     return this. }
false;public;1;5;;@Override public DefaultBuilder customCondition(RequestCondition<?> condition) {     this.customCondition = condition.     return this. }
false;public;1;5;;@Override public Builder options(BuilderConfiguration options) {     this.options = options.     return this. }
false;public;0;16;;@Override public RequestMappingInfo build() {     RequestedContentTypeResolver contentTypeResolver = this.options.getContentTypeResolver().     PathPatternParser parser = (this.options.getPatternParser() != null ? this.options.getPatternParser() : new PathPatternParser()).     PatternsRequestCondition patternsCondition = new PatternsRequestCondition(parse(this.paths, parser)).     return new RequestMappingInfo(this.mappingName, patternsCondition, new RequestMethodsRequestCondition(this.methods), new ParamsRequestCondition(this.params), new HeadersRequestCondition(this.headers), new ConsumesRequestCondition(this.consumes, this.headers), new ProducesRequestCondition(this.produces, this.headers, contentTypeResolver), this.customCondition). }
false;private,static;2;11;;private static List<PathPattern> parse(String[] paths, PathPatternParser parser) {     return Arrays.stream(paths).map(path -> {         if (StringUtils.hasText(path) && !path.startsWith("/")) {             path = "/" + path.         }         return parser.parse(path).     }).collect(Collectors.toList()). }
false;public;1;3;;public void setPatternParser(PathPatternParser patternParser) {     this.patternParser = patternParser. }
false;public;0;4;;@Nullable public PathPatternParser getPatternParser() {     return this.patternParser. }
true;public;1;3;/**  * Set the ContentNegotiationManager to use for the ProducesRequestCondition.  * <p>By default this is not set.  */ ;/**  * Set the ContentNegotiationManager to use for the ProducesRequestCondition.  * <p>By default this is not set.  */ public void setContentTypeResolver(RequestedContentTypeResolver resolver) {     this.contentTypeResolver = resolver. }
false;public;0;4;;@Nullable public RequestedContentTypeResolver getContentTypeResolver() {     return this.contentTypeResolver. }
