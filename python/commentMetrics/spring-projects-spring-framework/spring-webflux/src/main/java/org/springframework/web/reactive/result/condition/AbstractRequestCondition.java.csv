commented;modifiers;parameterAmount;loc;comment;code
false;public;1;10;;@Override public boolean equals(@Nullable Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     return getContent().equals(((AbstractRequestCondition<?>) other).getContent()). }
false;public;0;4;;@Override public int hashCode() {     return getContent().hashCode(). }
false;public;0;13;;@Override public String toString() {     StringBuilder builder = new StringBuilder("[").     for (Iterator<?> iterator = getContent().iterator(). iterator.hasNext(). ) {         Object expression = iterator.next().         builder.append(expression.toString()).         if (iterator.hasNext()) {             builder.append(getToStringInfix()).         }     }     builder.append("]").     return builder.toString(). }
true;public;0;3;/**  * Indicates whether this condition is empty, i.e. whether or not it  * contains any discrete items.  * @return {@code true} if empty. {@code false} otherwise  */ ;/**  * Indicates whether this condition is empty, i.e. whether or not it  * contains any discrete items.  * @return {@code true} if empty. {@code false} otherwise  */ public boolean isEmpty() {     return getContent().isEmpty(). }
true;protected,abstract;0;1;/**  * Return the discrete items a request condition is composed of.  * <p>For example URL patterns, HTTP request methods, param expressions, etc.  * @return a collection of objects, never {@code null}  */ ;/**  * Return the discrete items a request condition is composed of.  * <p>For example URL patterns, HTTP request methods, param expressions, etc.  * @return a collection of objects, never {@code null}  */ protected abstract Collection<?> getContent().
true;protected,abstract;0;1;/**  * The notation to use when printing discrete items of content.  * <p>For example {@code " || "} for URL patterns or {@code " && "}  * for param expressions.  */ ;/**  * The notation to use when printing discrete items of content.  * <p>For example {@code " || "} for URL patterns or {@code " && "}  * for param expressions.  */ protected abstract String getToStringInfix().
