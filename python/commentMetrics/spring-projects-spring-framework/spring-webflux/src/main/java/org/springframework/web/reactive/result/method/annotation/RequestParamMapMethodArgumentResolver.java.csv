commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public boolean supportsParameter(MethodParameter param) {     return checkAnnotatedParamNoReactiveWrapper(param, RequestParam.class, this::allParams). }
false;private;2;3;;private boolean allParams(RequestParam requestParam, Class<?> type) {     return (Map.class.isAssignableFrom(type) && !StringUtils.hasText(requestParam.name())). }
false;public;3;8;;@Override public Object resolveArgumentValue(MethodParameter methodParameter, BindingContext context, ServerWebExchange exchange) {     boolean isMultiValueMap = MultiValueMap.class.isAssignableFrom(methodParameter.getParameterType()).     MultiValueMap<String, String> queryParams = exchange.getRequest().getQueryParams().     return (isMultiValueMap ? queryParams : queryParams.toSingleValueMap()). }
