# id;timestamp;commentText;codeText;commentWords;codeWords
View -> List<MediaType> getSupportedMediaTypes()_;1485986572;Return the list of media types this View supports, or an empty list.;List<MediaType> getSupportedMediaTypes()_;return,the,list,of,media,types,this,view,supports,or,an,empty,list;list,media,type,get,supported,media,types
View -> List<MediaType> getSupportedMediaTypes()_;1495657865;Return the list of media types this View supports, or an empty list.;List<MediaType> getSupportedMediaTypes()_;return,the,list,of,media,types,this,view,supports,or,an,empty,list;list,media,type,get,supported,media,types
View -> List<MediaType> getSupportedMediaTypes()_;1495868221;Return the list of media types this View supports, or an empty list.;List<MediaType> getSupportedMediaTypes()_;return,the,list,of,media,types,this,view,supports,or,an,empty,list;list,media,type,get,supported,media,types
View -> List<MediaType> getSupportedMediaTypes()_;1496242568;Return the list of media types this View supports, or an empty list.;List<MediaType> getSupportedMediaTypes()_;return,the,list,of,media,types,this,view,supports,or,an,empty,list;list,media,type,get,supported,media,types
View -> default List<MediaType> getSupportedMediaTypes();1517567643;Return the list of media types this View supports, or an empty list.;default List<MediaType> getSupportedMediaTypes() {_		return Collections.emptyList()__	};return,the,list,of,media,types,this,view,supports,or,an,empty,list;default,list,media,type,get,supported,media,types,return,collections,empty,list
View -> default List<MediaType> getSupportedMediaTypes();1530174524;Return the list of media types this View supports, or an empty list.;default List<MediaType> getSupportedMediaTypes() {_		return Collections.emptyList()__	};return,the,list,of,media,types,this,view,supports,or,an,empty,list;default,list,media,type,get,supported,media,types,return,collections,empty,list
View -> Mono<Void> render(Map<String, ?> model, MediaType contentType, ServerWebExchange exchange)_;1485986572;Render the view based on the given {@link HandlerResult}. Implementations_can access and use the model or only a specific attribute in it._@param model Map with name Strings as keys and corresponding model_objects as values (Map can also be {@code null} in case of empty model)_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange the current exchange_@return {@code Mono} to represent when and if rendering succeeds;Mono<Void> render(Map<String, ?> model, MediaType contentType, ServerWebExchange exchange)_;render,the,view,based,on,the,given,link,handler,result,implementations,can,access,and,use,the,model,or,only,a,specific,attribute,in,it,param,model,map,with,name,strings,as,keys,and,corresponding,model,objects,as,values,map,can,also,be,code,null,in,case,of,empty,model,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,the,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;mono,void,render,map,string,model,media,type,content,type,server,web,exchange,exchange
View -> Mono<Void> render(Map<String, ?> model, MediaType contentType, ServerWebExchange exchange)_;1495657865;Render the view based on the given {@link HandlerResult}. Implementations_can access and use the model or only a specific attribute in it._@param model Map with name Strings as keys and corresponding model_objects as values (Map can also be {@code null} in case of empty model)_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange the current exchange_@return {@code Mono} to represent when and if rendering succeeds;Mono<Void> render(Map<String, ?> model, MediaType contentType, ServerWebExchange exchange)_;render,the,view,based,on,the,given,link,handler,result,implementations,can,access,and,use,the,model,or,only,a,specific,attribute,in,it,param,model,map,with,name,strings,as,keys,and,corresponding,model,objects,as,values,map,can,also,be,code,null,in,case,of,empty,model,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,the,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;mono,void,render,map,string,model,media,type,content,type,server,web,exchange,exchange
View -> default boolean isRedirectView();1495657865;Whether this View does rendering by performing a redirect.;default boolean isRedirectView() {_		return false__	};whether,this,view,does,rendering,by,performing,a,redirect;default,boolean,is,redirect,view,return,false
View -> default boolean isRedirectView();1495868221;Whether this View does rendering by performing a redirect.;default boolean isRedirectView() {_		return false__	};whether,this,view,does,rendering,by,performing,a,redirect;default,boolean,is,redirect,view,return,false
View -> default boolean isRedirectView();1496242568;Whether this View does rendering by performing a redirect.;default boolean isRedirectView() {_		return false__	};whether,this,view,does,rendering,by,performing,a,redirect;default,boolean,is,redirect,view,return,false
View -> default boolean isRedirectView();1517567643;Whether this View does rendering by performing a redirect.;default boolean isRedirectView() {_		return false__	};whether,this,view,does,rendering,by,performing,a,redirect;default,boolean,is,redirect,view,return,false
View -> default boolean isRedirectView();1530174524;Whether this View does rendering by performing a redirect.;default boolean isRedirectView() {_		return false__	};whether,this,view,does,rendering,by,performing,a,redirect;default,boolean,is,redirect,view,return,false
View -> Mono<Void> render(@Nullable Map<String, ?> model, @Nullable MediaType contentType, ServerWebExchange exchange)_;1496242568;Render the view based on the given {@link HandlerResult}. Implementations_can access and use the model or only a specific attribute in it._@param model Map with name Strings as keys and corresponding model_objects as values (Map can also be {@code null} in case of empty model)_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange the current exchange_@return {@code Mono} to represent when and if rendering succeeds;Mono<Void> render(@Nullable Map<String, ?> model, @Nullable MediaType contentType, ServerWebExchange exchange)_;render,the,view,based,on,the,given,link,handler,result,implementations,can,access,and,use,the,model,or,only,a,specific,attribute,in,it,param,model,map,with,name,strings,as,keys,and,corresponding,model,objects,as,values,map,can,also,be,code,null,in,case,of,empty,model,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,the,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;mono,void,render,nullable,map,string,model,nullable,media,type,content,type,server,web,exchange,exchange
View -> Mono<Void> render(@Nullable Map<String, ?> model, @Nullable MediaType contentType, ServerWebExchange exchange)_;1517567643;Render the view based on the given {@link HandlerResult}. Implementations_can access and use the model or only a specific attribute in it._@param model Map with name Strings as keys and corresponding model_objects as values (Map can also be {@code null} in case of empty model)_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange the current exchange_@return {@code Mono} to represent when and if rendering succeeds;Mono<Void> render(@Nullable Map<String, ?> model, @Nullable MediaType contentType, ServerWebExchange exchange)_;render,the,view,based,on,the,given,link,handler,result,implementations,can,access,and,use,the,model,or,only,a,specific,attribute,in,it,param,model,map,with,name,strings,as,keys,and,corresponding,model,objects,as,values,map,can,also,be,code,null,in,case,of,empty,model,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,the,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;mono,void,render,nullable,map,string,model,nullable,media,type,content,type,server,web,exchange,exchange
View -> Mono<Void> render(@Nullable Map<String, ?> model, @Nullable MediaType contentType, ServerWebExchange exchange)_;1530174524;Render the view based on the given {@link HandlerResult}. Implementations_can access and use the model or only a specific attribute in it._@param model a Map with name Strings as keys and corresponding model_objects as values (Map can also be {@code null} in case of empty model)_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange the current exchange_@return {@code Mono} to represent when and if rendering succeeds;Mono<Void> render(@Nullable Map<String, ?> model, @Nullable MediaType contentType, ServerWebExchange exchange)_;render,the,view,based,on,the,given,link,handler,result,implementations,can,access,and,use,the,model,or,only,a,specific,attribute,in,it,param,model,a,map,with,name,strings,as,keys,and,corresponding,model,objects,as,values,map,can,also,be,code,null,in,case,of,empty,model,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,the,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;mono,void,render,nullable,map,string,model,nullable,media,type,content,type,server,web,exchange,exchange
