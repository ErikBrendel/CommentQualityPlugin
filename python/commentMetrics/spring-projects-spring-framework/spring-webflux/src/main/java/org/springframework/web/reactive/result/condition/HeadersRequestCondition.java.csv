commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;13;;private static Collection<HeaderExpression> parseExpressions(String... headers) {     Set<HeaderExpression> expressions = new LinkedHashSet<>().     if (headers != null) {         for (String header : headers) {             HeaderExpression expr = new HeaderExpression(header).             if ("Accept".equalsIgnoreCase(expr.name) || "Content-Type".equalsIgnoreCase(expr.name)) {                 continue.             }             expressions.add(expr).         }     }     return expressions. }
true;public;0;3;/**  * Return the contained request header expressions.  */ ;/**  * Return the contained request header expressions.  */ public Set<NameValueExpression<String>> getExpressions() {     return new LinkedHashSet<>(this.expressions). }
false;protected;0;4;;@Override protected Collection<HeaderExpression> getContent() {     return this.expressions. }
false;protected;0;4;;@Override protected String getToStringInfix() {     return " && ". }
true;public;1;6;/**  * Returns a new instance with the union of the header expressions  * from "this" and the "other" instance.  */ ;/**  * Returns a new instance with the union of the header expressions  * from "this" and the "other" instance.  */ @Override public HeadersRequestCondition combine(HeadersRequestCondition other) {     Set<HeaderExpression> set = new LinkedHashSet<>(this.expressions).     set.addAll(other.expressions).     return new HeadersRequestCondition(set). }
true;public;1;13;/**  * Returns "this" instance if the request matches all expressions.  * or {@code null} otherwise.  */ ;/**  * Returns "this" instance if the request matches all expressions.  * or {@code null} otherwise.  */ @Override @Nullable public HeadersRequestCondition getMatchingCondition(ServerWebExchange exchange) {     if (CorsUtils.isPreFlightRequest(exchange.getRequest())) {         return PRE_FLIGHT_MATCH.     }     for (HeaderExpression expression : this.expressions) {         if (!expression.match(exchange)) {             return null.         }     }     return this. }
true;public;2;8;/**  * Compare to another condition based on header expressions. A condition  * is considered to be a more specific match, if it has:  * <ol>  * <li>A greater number of expressions.  * <li>A greater number of non-negated expressions with a concrete value.  * </ol>  * <p>It is assumed that both instances have been obtained via  * {@link #getMatchingCondition(ServerWebExchange)} and each instance  * contains the matching header expression only or is otherwise empty.  */ ;/**  * Compare to another condition based on header expressions. A condition  * is considered to be a more specific match, if it has:  * <ol>  * <li>A greater number of expressions.  * <li>A greater number of non-negated expressions with a concrete value.  * </ol>  * <p>It is assumed that both instances have been obtained via  * {@link #getMatchingCondition(ServerWebExchange)} and each instance  * contains the matching header expression only or is otherwise empty.  */ @Override public int compareTo(HeadersRequestCondition other, ServerWebExchange exchange) {     int result = other.expressions.size() - this.expressions.size().     if (result != 0) {         return result.     }     return (int) (getValueMatchCount(other.expressions) - getValueMatchCount(this.expressions)). }
false;private;1;3;;private long getValueMatchCount(Set<HeaderExpression> expressions) {     return expressions.stream().filter(e -> e.getValue() != null && !e.isNegated()).count(). }
false;protected;0;4;;@Override protected boolean isCaseSensitiveName() {     return false. }
false;protected;1;4;;@Override protected String parseValue(String valueExpression) {     return valueExpression. }
false;protected;1;4;;@Override protected boolean matchName(ServerWebExchange exchange) {     return (exchange.getRequest().getHeaders().get(this.name) != null). }
false;protected;1;4;;@Override protected boolean matchValue(ServerWebExchange exchange) {     return (this.value != null && this.value.equals(exchange.getRequest().getHeaders().getFirst(this.name))). }
