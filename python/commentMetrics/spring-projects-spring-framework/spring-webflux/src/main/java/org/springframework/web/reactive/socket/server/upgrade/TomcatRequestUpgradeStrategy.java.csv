commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Exposes the underlying config option on  * {@link javax.websocket.server.ServerContainer#setAsyncSendTimeout(long)}.  */ ;/**  * Exposes the underlying config option on  * {@link javax.websocket.server.ServerContainer#setAsyncSendTimeout(long)}.  */ public void setAsyncSendTimeout(Long timeoutInMillis) {     this.asyncSendTimeout = timeoutInMillis. }
false;public;0;4;;@Nullable public Long getAsyncSendTimeout() {     return this.asyncSendTimeout. }
true;public;1;3;/**  * Exposes the underlying config option on  * {@link javax.websocket.server.ServerContainer#setDefaultMaxSessionIdleTimeout(long)}.  */ ;/**  * Exposes the underlying config option on  * {@link javax.websocket.server.ServerContainer#setDefaultMaxSessionIdleTimeout(long)}.  */ public void setMaxSessionIdleTimeout(Long timeoutInMillis) {     this.maxSessionIdleTimeout = timeoutInMillis. }
false;public;0;4;;@Nullable public Long getMaxSessionIdleTimeout() {     return this.maxSessionIdleTimeout. }
true;public;1;3;/**  * Exposes the underlying config option on  * {@link javax.websocket.server.ServerContainer#setDefaultMaxTextMessageBufferSize(int)}.  */ ;/**  * Exposes the underlying config option on  * {@link javax.websocket.server.ServerContainer#setDefaultMaxTextMessageBufferSize(int)}.  */ public void setMaxTextMessageBufferSize(Integer bufferSize) {     this.maxTextMessageBufferSize = bufferSize. }
false;public;0;4;;@Nullable public Integer getMaxTextMessageBufferSize() {     return this.maxTextMessageBufferSize. }
true;public;1;3;/**  * Exposes the underlying config option on  * {@link javax.websocket.server.ServerContainer#setDefaultMaxBinaryMessageBufferSize(int)}.  */ ;/**  * Exposes the underlying config option on  * {@link javax.websocket.server.ServerContainer#setDefaultMaxBinaryMessageBufferSize(int)}.  */ public void setMaxBinaryMessageBufferSize(Integer bufferSize) {     this.maxBinaryMessageBufferSize = bufferSize. }
false;public;0;4;;@Nullable public Integer getMaxBinaryMessageBufferSize() {     return this.maxBinaryMessageBufferSize. }
false;public;4;31;;@Override public Mono<Void> upgrade(ServerWebExchange exchange, WebSocketHandler handler, @Nullable String subProtocol, Supplier<HandshakeInfo> handshakeInfoFactory) {     ServerHttpRequest request = exchange.getRequest().     ServerHttpResponse response = exchange.getResponse().     HttpServletRequest servletRequest = getHttpServletRequest(request).     HttpServletResponse servletResponse = getHttpServletResponse(response).     HandshakeInfo handshakeInfo = handshakeInfoFactory.get().     DataBufferFactory bufferFactory = response.bufferFactory().     Endpoint endpoint = new StandardWebSocketHandlerAdapter(handler, session -> new TomcatWebSocketSession(session, handshakeInfo, bufferFactory)).     String requestURI = servletRequest.getRequestURI().     DefaultServerEndpointConfig config = new DefaultServerEndpointConfig(requestURI, endpoint).     config.setSubprotocols(subProtocol != null ? Collections.singletonList(subProtocol) : Collections.emptyList()).     try {         WsServerContainer container = getContainer(servletRequest).         container.doUpgrade(servletRequest, servletResponse, config, Collections.emptyMap()).     } catch (ServletException | IOException ex) {         return Mono.error(ex).     }     return Mono.empty(). }
false;private;1;4;;private HttpServletRequest getHttpServletRequest(ServerHttpRequest request) {     Assert.isInstanceOf(AbstractServerHttpRequest.class, request, "ServletServerHttpRequest required").     return ((AbstractServerHttpRequest) request).getNativeRequest(). }
false;private;1;4;;private HttpServletResponse getHttpServletResponse(ServerHttpResponse response) {     Assert.isInstanceOf(AbstractServerHttpResponse.class, response, "ServletServerHttpResponse required").     return ((AbstractServerHttpResponse) response).getNativeResponse(). }
false;private;1;10;;private WsServerContainer getContainer(HttpServletRequest request) {     if (this.serverContainer == null) {         Object container = request.getServletContext().getAttribute(SERVER_CONTAINER_ATTR).         Assert.state(container instanceof WsServerContainer, "ServletContext attribute 'javax.websocket.server.ServerContainer' not found.").         this.serverContainer = (WsServerContainer) container.         initServerContainer(this.serverContainer).     }     return this.serverContainer. }
false;private;1;14;;private void initServerContainer(ServerContainer serverContainer) {     if (this.asyncSendTimeout != null) {         serverContainer.setAsyncSendTimeout(this.asyncSendTimeout).     }     if (this.maxSessionIdleTimeout != null) {         serverContainer.setDefaultMaxSessionIdleTimeout(this.maxSessionIdleTimeout).     }     if (this.maxTextMessageBufferSize != null) {         serverContainer.setDefaultMaxTextMessageBufferSize(this.maxTextMessageBufferSize).     }     if (this.maxBinaryMessageBufferSize != null) {         serverContainer.setDefaultMaxBinaryMessageBufferSize(this.maxBinaryMessageBufferSize).     } }
