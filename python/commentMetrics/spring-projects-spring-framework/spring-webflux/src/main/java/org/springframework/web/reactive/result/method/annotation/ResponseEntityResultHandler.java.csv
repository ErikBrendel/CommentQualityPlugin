commented;modifiers;parameterAmount;loc;comment;code
false;public;1;10;;@Override public boolean supports(HandlerResult result) {     Class<?> valueType = resolveReturnValueType(result).     if (isSupportedType(valueType)) {         return true.     }     ReactiveAdapter adapter = getAdapter(result).     return adapter != null && !adapter.isNoValue() && isSupportedType(result.getReturnType().getGeneric().toClass()). }
false;private,static;1;9;;@Nullable private static Class<?> resolveReturnValueType(HandlerResult result) {     Class<?> valueType = result.getReturnType().toClass().     Object value = result.getReturnValue().     if (valueType == Object.class && value != null) {         valueType = value.getClass().     }     return valueType. }
false;private;1;5;;private boolean isSupportedType(@Nullable Class<?> clazz) {     return (clazz != null && ((HttpEntity.class.isAssignableFrom(clazz) && !RequestEntity.class.isAssignableFrom(clazz)) || HttpHeaders.class.isAssignableFrom(clazz))). }
false;public;2;63;;@Override public Mono<Void> handleResult(ServerWebExchange exchange, HandlerResult result) {     Mono<?> returnValueMono.     MethodParameter bodyParameter.     ReactiveAdapter adapter = getAdapter(result).     MethodParameter actualParameter = result.getReturnTypeSource().     if (adapter != null) {         Assert.isTrue(!adapter.isMultiValue(), "Only a single ResponseEntity supported").         returnValueMono = Mono.from(adapter.toPublisher(result.getReturnValue())).         bodyParameter = actualParameter.nested().nested().     } else {         returnValueMono = Mono.justOrEmpty(result.getReturnValue()).         bodyParameter = actualParameter.nested().     }     return returnValueMono.flatMap(returnValue -> {         HttpEntity<?> httpEntity.         if (returnValue instanceof HttpEntity) {             httpEntity = (HttpEntity<?>) returnValue.         } else if (returnValue instanceof HttpHeaders) {             httpEntity = new ResponseEntity<>((HttpHeaders) returnValue, HttpStatus.OK).         } else {             throw new IllegalArgumentException("HttpEntity or HttpHeaders expected but got: " + returnValue.getClass()).         }         if (httpEntity instanceof ResponseEntity) {             ResponseEntity<?> responseEntity = (ResponseEntity<?>) httpEntity.             ServerHttpResponse response = exchange.getResponse().             if (response instanceof AbstractServerHttpResponse) {                 ((AbstractServerHttpResponse) response).setStatusCodeValue(responseEntity.getStatusCodeValue()).             } else {                 response.setStatusCode(responseEntity.getStatusCode()).             }         }         HttpHeaders entityHeaders = httpEntity.getHeaders().         HttpHeaders responseHeaders = exchange.getResponse().getHeaders().         if (!entityHeaders.isEmpty()) {             entityHeaders.entrySet().stream().forEach(entry -> responseHeaders.put(entry.getKey(), entry.getValue())).         }         if (httpEntity.getBody() == null || returnValue instanceof HttpHeaders) {             return exchange.getResponse().setComplete().         }         String etag = entityHeaders.getETag().         Instant lastModified = Instant.ofEpochMilli(entityHeaders.getLastModified()).         HttpMethod httpMethod = exchange.getRequest().getMethod().         if (SAFE_METHODS.contains(httpMethod) && exchange.checkNotModified(etag, lastModified)) {             return exchange.getResponse().setComplete().         }         return writeBody(httpEntity.getBody(), bodyParameter, actualParameter, exchange).     }). }
