commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the wrapped request.  */ ;/**  * Return the wrapped request.  */ public ServerRequest request() {     return this.delegate. }
false;public;0;4;;@Override public HttpMethod method() {     return this.delegate.method(). }
false;public;0;4;;@Override public String methodName() {     return this.delegate.methodName(). }
false;public;0;4;;@Override public URI uri() {     return this.delegate.uri(). }
false;public;0;4;;@Override public UriBuilder uriBuilder() {     return this.delegate.uriBuilder(). }
false;public;0;4;;@Override public String path() {     return this.delegate.path(). }
false;public;0;4;;@Override public PathContainer pathContainer() {     return this.delegate.pathContainer(). }
false;public;0;4;;@Override public Headers headers() {     return this.delegate.headers(). }
false;public;0;4;;@Override public MultiValueMap<String, HttpCookie> cookies() {     return this.delegate.cookies(). }
false;public;0;4;;@Override public Optional<InetSocketAddress> remoteAddress() {     return this.delegate.remoteAddress(). }
false;public;0;4;;@Override public List<HttpMessageReader<?>> messageReaders() {     return this.delegate.messageReaders(). }
false;public;1;4;;@Override public <T> T body(BodyExtractor<T, ? super ServerHttpRequest> extractor) {     return this.delegate.body(extractor). }
false;public;2;4;;@Override public <T> T body(BodyExtractor<T, ? super ServerHttpRequest> extractor, Map<String, Object> hints) {     return this.delegate.body(extractor, hints). }
false;public;1;4;;@Override public <T> Mono<T> bodyToMono(Class<? extends T> elementClass) {     return this.delegate.bodyToMono(elementClass). }
false;public;1;4;;@Override public <T> Mono<T> bodyToMono(ParameterizedTypeReference<T> typeReference) {     return this.delegate.bodyToMono(typeReference). }
false;public;1;4;;@Override public <T> Flux<T> bodyToFlux(Class<? extends T> elementClass) {     return this.delegate.bodyToFlux(elementClass). }
false;public;1;4;;@Override public <T> Flux<T> bodyToFlux(ParameterizedTypeReference<T> typeReference) {     return this.delegate.bodyToFlux(typeReference). }
false;public;1;4;;@Override public Optional<Object> attribute(String name) {     return this.delegate.attribute(name). }
false;public;0;4;;@Override public Map<String, Object> attributes() {     return this.delegate.attributes(). }
false;public;1;4;;@Override public Optional<String> queryParam(String name) {     return this.delegate.queryParam(name). }
false;public;0;4;;@Override public MultiValueMap<String, String> queryParams() {     return this.delegate.queryParams(). }
false;public;1;4;;@Override public String pathVariable(String name) {     return this.delegate.pathVariable(name). }
false;public;0;4;;@Override public Map<String, String> pathVariables() {     return this.delegate.pathVariables(). }
false;public;0;4;;@Override public Mono<WebSession> session() {     return this.delegate.session(). }
false;public;0;4;;@Override public Mono<? extends Principal> principal() {     return this.delegate.principal(). }
false;public;0;4;;@Override public Mono<MultiValueMap<String, String>> formData() {     return this.delegate.formData(). }
false;public;0;4;;@Override public Mono<MultiValueMap<String, Part>> multipartData() {     return this.delegate.multipartData(). }
false;public;0;4;;@Override public ServerWebExchange exchange() {     return this.delegate.exchange(). }
false;public;0;4;;@Override public List<MediaType> accept() {     return this.headers.accept(). }
false;public;0;4;;@Override public List<Charset> acceptCharset() {     return this.headers.acceptCharset(). }
false;public;0;4;;@Override public List<Locale.LanguageRange> acceptLanguage() {     return this.headers.acceptLanguage(). }
false;public;0;4;;@Override public OptionalLong contentLength() {     return this.headers.contentLength(). }
false;public;0;4;;@Override public Optional<MediaType> contentType() {     return this.headers.contentType(). }
false;public;0;4;;@Override public InetSocketAddress host() {     return this.headers.host(). }
false;public;0;4;;@Override public List<HttpRange> range() {     return this.headers.range(). }
false;public;1;4;;@Override public List<String> header(String headerName) {     return this.headers.header(headerName). }
false;public;0;4;;@Override public HttpHeaders asHttpHeaders() {     return this.headers.asHttpHeaders(). }
