commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Return the HTTP method.  */ ;/**  * Return the HTTP method.  */ HttpMethod method().
true;;0;1;/**  * Return the request URI.  */ ;/**  * Return the request URI.  */ URI url().
true;;0;1;/**  * Return the headers of this request.  */ ;/**  * Return the headers of this request.  */ HttpHeaders headers().
true;;0;1;/**  * Return the cookies of this request.  */ ;/**  * Return the cookies of this request.  */ MultiValueMap<String, String> cookies().
true;;0;1;/**  * Return the body inserter of this request.  */ ;/**  * Return the body inserter of this request.  */ BodyInserter<?, ? super ClientHttpRequest> body().
true;default;1;3;/**  * Return the request attribute value if present.  * @param name the attribute name  * @return the attribute value  */ ;/**  * Return the request attribute value if present.  * @param name the attribute name  * @return the attribute value  */ default Optional<Object> attribute(String name) {     return Optional.ofNullable(attributes().get(name)). }
true;;0;1;/**  * Return the attributes of this request.  */ ;/**  * Return the attributes of this request.  */ Map<String, Object> attributes().
true;;0;1;/**  * Return a log message prefix to use to correlate messages for this request.  * The prefix is based on the value of the attribute {@link #LOG_ID_ATTRIBUTE}  * along with some extra formatting so that the prefix can be conveniently  * prepended with no further formatting no separators required.  * @return the log message prefix or an empty String if the  * {@link #LOG_ID_ATTRIBUTE} is not set.  * @since 5.1  */ ;/**  * Return a log message prefix to use to correlate messages for this request.  * The prefix is based on the value of the attribute {@link #LOG_ID_ATTRIBUTE}  * along with some extra formatting so that the prefix can be conveniently  * prepended with no further formatting no separators required.  * @return the log message prefix or an empty String if the  * {@link #LOG_ID_ATTRIBUTE} is not set.  * @since 5.1  */ String logPrefix().
true;;2;1;/**  * Write this request to the given {@link ClientHttpRequest}.  * @param request the client http request to write to  * @param strategies the strategies to use when writing  * @return {@code Mono<Void>} to indicate when writing is complete  */ ;/**  * Write this request to the given {@link ClientHttpRequest}.  * @param request the client http request to write to  * @param strategies the strategies to use when writing  * @return {@code Mono<Void>} to indicate when writing is complete  */ Mono<Void> writeTo(ClientHttpRequest request, ExchangeStrategies strategies).
true;static;1;3;/**  * Create a builder with the method, URI, headers, and cookies of the given request.  * @param other the request to copy the method, URI, headers, and cookies from  * @return the created builder  */ ;// Static builder methods /**  * Create a builder with the method, URI, headers, and cookies of the given request.  * @param other the request to copy the method, URI, headers, and cookies from  * @return the created builder  */ static Builder from(ClientRequest other) {     return new DefaultClientRequestBuilder(other). }
true;static;2;4;/**  * Create a builder with the given method and url.  * @param method the HTTP method (GET, POST, etc)  * @param url the url (as a URI instance)  * @return the created builder  * @deprecated in favor of {@link #create(HttpMethod, URI)}  */ ;/**  * Create a builder with the given method and url.  * @param method the HTTP method (GET, POST, etc)  * @param url the url (as a URI instance)  * @return the created builder  * @deprecated in favor of {@link #create(HttpMethod, URI)}  */ @Deprecated static Builder method(HttpMethod method, URI url) {     return new DefaultClientRequestBuilder(method, url). }
true;static;2;3;/**  * Create a request builder with the given method and url.  * @param method the HTTP method (GET, POST, etc)  * @param url the url (as a URI instance)  * @return the created builder  */ ;/**  * Create a request builder with the given method and url.  * @param method the HTTP method (GET, POST, etc)  * @param url the url (as a URI instance)  * @return the created builder  */ static Builder create(HttpMethod method, URI url) {     return new DefaultClientRequestBuilder(method, url). }
true;;1;1;/**  * Set the method of the request.  * @param method the new method  * @return this builder  * @since 5.0.1  */ ;/**  * Set the method of the request.  * @param method the new method  * @return this builder  * @since 5.0.1  */ Builder method(HttpMethod method).
true;;1;1;/**  * Set the url of the request.  * @param url the new url  * @return this builder  * @since 5.0.1  */ ;/**  * Set the url of the request.  * @param url the new url  * @return this builder  * @since 5.0.1  */ Builder url(URI url).
true;;2;1;/**  * Add the given header value(s) under the given name.  * @param headerName  the header name  * @param headerValues the header value(s)  * @return this builder  * @see HttpHeaders#add(String, String)  */ ;/**  * Add the given header value(s) under the given name.  * @param headerName  the header name  * @param headerValues the header value(s)  * @return this builder  * @see HttpHeaders#add(String, String)  */ Builder header(String headerName, String... headerValues).
true;;1;1;/**  * Manipulate this request's headers with the given consumer. The  * headers provided to the consumer are "live", so that the consumer can be used to  * {@linkplain HttpHeaders#set(String, String) overwrite} existing header values,  * {@linkplain HttpHeaders#remove(Object) remove} values, or use any of the other  * {@link HttpHeaders} methods.  * @param headersConsumer a function that consumes the {@code HttpHeaders}  * @return this builder  */ ;/**  * Manipulate this request's headers with the given consumer. The  * headers provided to the consumer are "live", so that the consumer can be used to  * {@linkplain HttpHeaders#set(String, String) overwrite} existing header values,  * {@linkplain HttpHeaders#remove(Object) remove} values, or use any of the other  * {@link HttpHeaders} methods.  * @param headersConsumer a function that consumes the {@code HttpHeaders}  * @return this builder  */ Builder headers(Consumer<HttpHeaders> headersConsumer).
true;;2;1;/**  * Add a cookie with the given name and value(s).  * @param name the cookie name  * @param values the cookie value(s)  * @return this builder  */ ;/**  * Add a cookie with the given name and value(s).  * @param name the cookie name  * @param values the cookie value(s)  * @return this builder  */ Builder cookie(String name, String... values).
true;;1;1;/**  * Manipulate this request's cookies with the given consumer. The  * map provided to the consumer is "live", so that the consumer can be used to  * {@linkplain MultiValueMap#set(Object, Object) overwrite} existing header values,  * {@linkplain MultiValueMap#remove(Object) remove} values, or use any of the other  * {@link MultiValueMap} methods.  * @param cookiesConsumer a function that consumes the cookies map  * @return this builder  */ ;/**  * Manipulate this request's cookies with the given consumer. The  * map provided to the consumer is "live", so that the consumer can be used to  * {@linkplain MultiValueMap#set(Object, Object) overwrite} existing header values,  * {@linkplain MultiValueMap#remove(Object) remove} values, or use any of the other  * {@link MultiValueMap} methods.  * @param cookiesConsumer a function that consumes the cookies map  * @return this builder  */ Builder cookies(Consumer<MultiValueMap<String, String>> cookiesConsumer).
true;;1;1;/**  * Set the body of the request to the given {@code BodyInserter}.  * @param inserter the {@code BodyInserter} that writes to the request  * @return this builder  */ ;/**  * Set the body of the request to the given {@code BodyInserter}.  * @param inserter the {@code BodyInserter} that writes to the request  * @return this builder  */ Builder body(BodyInserter<?, ? super ClientHttpRequest> inserter).
true;;2;1;/**  * Set the body of the request to the given {@code Publisher} and return it.  * @param publisher the {@code Publisher} to write to the request  * @param elementClass the class of elements contained in the publisher  * @param <S> the type of the elements contained in the publisher  * @param <P> the type of the {@code Publisher}  * @return the built request  */ ;/**  * Set the body of the request to the given {@code Publisher} and return it.  * @param publisher the {@code Publisher} to write to the request  * @param elementClass the class of elements contained in the publisher  * @param <S> the type of the elements contained in the publisher  * @param <P> the type of the {@code Publisher}  * @return the built request  */ <S, P extends Publisher<S>> Builder body(P publisher, Class<S> elementClass).
true;;2;1;/**  * Set the body of the request to the given {@code Publisher} and return it.  * @param publisher the {@code Publisher} to write to the request  * @param typeReference a type reference describing the elements contained in the publisher  * @param <S> the type of the elements contained in the publisher  * @param <P> the type of the {@code Publisher}  * @return the built request  */ ;/**  * Set the body of the request to the given {@code Publisher} and return it.  * @param publisher the {@code Publisher} to write to the request  * @param typeReference a type reference describing the elements contained in the publisher  * @param <S> the type of the elements contained in the publisher  * @param <P> the type of the {@code Publisher}  * @return the built request  */ <S, P extends Publisher<S>> Builder body(P publisher, ParameterizedTypeReference<S> typeReference).
true;;2;1;/**  * Set the attribute with the given name to the given value.  * @param name the name of the attribute to add  * @param value the value of the attribute to add  * @return this builder  */ ;/**  * Set the attribute with the given name to the given value.  * @param name the name of the attribute to add  * @param value the value of the attribute to add  * @return this builder  */ Builder attribute(String name, Object value).
true;;1;1;/**  * Manipulate the request attributes with the given consumer. The attributes provided to  * the consumer are "live", so that the consumer can be used to inspect attributes,  * remove attributes, or use any of the other map-provided methods.  * @param attributesConsumer a function that consumes the attributes  * @return this builder  */ ;/**  * Manipulate the request attributes with the given consumer. The attributes provided to  * the consumer are "live", so that the consumer can be used to inspect attributes,  * remove attributes, or use any of the other map-provided methods.  * @param attributesConsumer a function that consumes the attributes  * @return this builder  */ Builder attributes(Consumer<Map<String, Object>> attributesConsumer).
true;;0;1;/**  * Build the request.  */ ;/**  * Build the request.  */ ClientRequest build().
