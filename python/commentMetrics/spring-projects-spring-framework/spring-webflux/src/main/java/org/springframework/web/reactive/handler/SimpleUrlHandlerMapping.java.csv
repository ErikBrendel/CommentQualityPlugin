commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Map URL paths to handler bean names.  * This is the typical way of configuring this HandlerMapping.  * <p>Supports direct URL matches and Ant-style pattern matches. For syntax details,  * see the {@link org.springframework.web.util.pattern.PathPattern} javadoc.  * @param mappings properties with URLs as keys and bean names as values  * @see #setUrlMap  */ ;/**  * Map URL paths to handler bean names.  * This is the typical way of configuring this HandlerMapping.  * <p>Supports direct URL matches and Ant-style pattern matches. For syntax details,  * see the {@link org.springframework.web.util.pattern.PathPattern} javadoc.  * @param mappings properties with URLs as keys and bean names as values  * @see #setUrlMap  */ public void setMappings(Properties mappings) {     CollectionUtils.mergePropertiesIntoMap(mappings, this.urlMap). }
true;public;1;3;/**  * Set a Map with URL paths as keys and handler beans (or handler bean names)  * as values. Convenient for population with bean references.  * <p>Supports direct URL matches and Ant-style pattern matches. For syntax details,  * see the {@link org.springframework.web.util.pattern.PathPattern} javadoc.  * @param urlMap map with URLs as keys and beans as values  * @see #setMappings  */ ;/**  * Set a Map with URL paths as keys and handler beans (or handler bean names)  * as values. Convenient for population with bean references.  * <p>Supports direct URL matches and Ant-style pattern matches. For syntax details,  * see the {@link org.springframework.web.util.pattern.PathPattern} javadoc.  * @param urlMap map with URLs as keys and beans as values  * @see #setMappings  */ public void setUrlMap(Map<String, ?> urlMap) {     this.urlMap.putAll(urlMap). }
true;public;0;3;/**  * Allow Map access to the URL path mappings, with the option to add or  * override specific entries.  * <p>Useful for specifying entries directly, for example via "urlMap[myKey]".  * This is particularly useful for adding or overriding entries in child  * bean definitions.  */ ;/**  * Allow Map access to the URL path mappings, with the option to add or  * override specific entries.  * <p>Useful for specifying entries directly, for example via "urlMap[myKey]".  * This is particularly useful for adding or overriding entries in child  * bean definitions.  */ public Map<String, ?> getUrlMap() {     return this.urlMap. }
true;public;0;5;/**  * Calls the {@link #registerHandlers} method in addition to the  * superclass's initialization.  */ ;/**  * Calls the {@link #registerHandlers} method in addition to the  * superclass's initialization.  */ @Override public void initApplicationContext() throws BeansException {     super.initApplicationContext().     registerHandlers(this.urlMap). }
true;protected;1;23;/**  * Register all handlers specified in the URL map for the corresponding paths.  * @param urlMap a Map with URL paths as keys and handler beans or bean names as values  * @throws BeansException if a handler couldn't be registered  * @throws IllegalStateException if there is a conflicting handler registered  */ ;/**  * Register all handlers specified in the URL map for the corresponding paths.  * @param urlMap a Map with URL paths as keys and handler beans or bean names as values  * @throws BeansException if a handler couldn't be registered  * @throws IllegalStateException if there is a conflicting handler registered  */ protected void registerHandlers(Map<String, Object> urlMap) throws BeansException {     if (urlMap.isEmpty()) {         logger.trace("No patterns in " + formatMappingName()).     } else {         for (Map.Entry<String, Object> entry : urlMap.entrySet()) {             String url = entry.getKey().             Object handler = entry.getValue().             // Prepend with slash if not already present.             if (!url.startsWith("/")) {                 url = "/" + url.             }             // Remove whitespace from handler bean name.             if (handler instanceof String) {                 handler = ((String) handler).trim().             }             registerHandler(url, handler).         }         if (logger.isDebugEnabled()) {             logger.debug("Patterns " + getHandlerMap().keySet() + " in " + formatMappingName()).         }     } }
