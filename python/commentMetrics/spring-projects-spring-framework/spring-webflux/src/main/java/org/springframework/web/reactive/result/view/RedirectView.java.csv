# id;timestamp;commentText;codeText;commentWords;codeWords
RedirectView -> public boolean isContextRelative();1485986572;Whether to interpret URLs as relative to the current context path.;public boolean isContextRelative() {_		return this.contextRelative__	};whether,to,interpret,urls,as,relative,to,the,current,context,path;public,boolean,is,context,relative,return,this,context,relative
RedirectView -> public boolean isContextRelative();1495657865;Whether to interpret URLs as relative to the current context path.;public boolean isContextRelative() {_		return this.contextRelative__	};whether,to,interpret,urls,as,relative,to,the,current,context,path;public,boolean,is,context,relative,return,this,context,relative
RedirectView -> public boolean isContextRelative();1496837955;Whether to interpret URLs as relative to the current context path.;public boolean isContextRelative() {_		return this.contextRelative__	};whether,to,interpret,urls,as,relative,to,the,current,context,path;public,boolean,is,context,relative,return,this,context,relative
RedirectView -> public boolean isContextRelative();1497232764;Whether to interpret URLs as relative to the current context path.;public boolean isContextRelative() {_		return this.contextRelative__	};whether,to,interpret,urls,as,relative,to,the,current,context,path;public,boolean,is,context,relative,return,this,context,relative
RedirectView -> public boolean isContextRelative();1497275505;Whether to interpret URLs as relative to the current context path.;public boolean isContextRelative() {_		return this.contextRelative__	};whether,to,interpret,urls,as,relative,to,the,current,context,path;public,boolean,is,context,relative,return,this,context,relative
RedirectView -> public boolean isContextRelative();1498762530;Whether to interpret URLs as relative to the current context path.;public boolean isContextRelative() {_		return this.contextRelative__	};whether,to,interpret,urls,as,relative,to,the,current,context,path;public,boolean,is,context,relative,return,this,context,relative
RedirectView -> public boolean isContextRelative();1500448076;Whether to interpret URLs as relative to the current context path.;public boolean isContextRelative() {_		return this.contextRelative__	};whether,to,interpret,urls,as,relative,to,the,current,context,path;public,boolean,is,context,relative,return,this,context,relative
RedirectView -> public boolean isContextRelative();1500457438;Whether to interpret URLs as relative to the current context path.;public boolean isContextRelative() {_		return this.contextRelative__	};whether,to,interpret,urls,as,relative,to,the,current,context,path;public,boolean,is,context,relative,return,this,context,relative
RedirectView -> public boolean isContextRelative();1500495747;Whether to interpret URLs as relative to the current context path.;public boolean isContextRelative() {_		return this.contextRelative__	};whether,to,interpret,urls,as,relative,to,the,current,context,path;public,boolean,is,context,relative,return,this,context,relative
RedirectView -> public boolean isContextRelative();1504701549;Whether to interpret URLs as relative to the current context path.;public boolean isContextRelative() {_		return this.contextRelative__	};whether,to,interpret,urls,as,relative,to,the,current,context,path;public,boolean,is,context,relative,return,this,context,relative
RedirectView -> public boolean isContextRelative();1516617801;Whether to interpret URLs as relative to the current context path.;public boolean isContextRelative() {_		return this.contextRelative__	};whether,to,interpret,urls,as,relative,to,the,current,context,path;public,boolean,is,context,relative,return,this,context,relative
RedirectView -> public boolean isContextRelative();1519588127;Whether to interpret URLs as relative to the current context path.;public boolean isContextRelative() {_		return this.contextRelative__	};whether,to,interpret,urls,as,relative,to,the,current,context,path;public,boolean,is,context,relative,return,this,context,relative
RedirectView -> public boolean isContextRelative();1530174524;Whether to interpret URLs as relative to the current context path.;public boolean isContextRelative() {_		return this.contextRelative__	};whether,to,interpret,urls,as,relative,to,the,current,context,path;public,boolean,is,context,relative,return,this,context,relative
RedirectView -> public boolean isContextRelative();1533034998;Whether to interpret URLs as relative to the current context path.;public boolean isContextRelative() {_		return this.contextRelative__	};whether,to,interpret,urls,as,relative,to,the,current,context,path;public,boolean,is,context,relative,return,this,context,relative
RedirectView -> @Nullable 	public String[] getHosts();1500457438;Return the configured application hosts.;@Nullable_	public String[] getHosts() {_		return this.hosts__	};return,the,configured,application,hosts;nullable,public,string,get,hosts,return,this,hosts
RedirectView -> @Nullable 	public String[] getHosts();1500495747;Return the configured application hosts.;@Nullable_	public String[] getHosts() {_		return this.hosts__	};return,the,configured,application,hosts;nullable,public,string,get,hosts,return,this,hosts
RedirectView -> @Nullable 	public String[] getHosts();1504701549;Return the configured application hosts.;@Nullable_	public String[] getHosts() {_		return this.hosts__	};return,the,configured,application,hosts;nullable,public,string,get,hosts,return,this,hosts
RedirectView -> @Nullable 	public String[] getHosts();1516617801;Return the configured application hosts.;@Nullable_	public String[] getHosts() {_		return this.hosts__	};return,the,configured,application,hosts;nullable,public,string,get,hosts,return,this,hosts
RedirectView -> @Nullable 	public String[] getHosts();1519588127;Return the configured application hosts.;@Nullable_	public String[] getHosts() {_		return this.hosts__	};return,the,configured,application,hosts;nullable,public,string,get,hosts,return,this,hosts
RedirectView -> @Nullable 	public String[] getHosts();1530174524;Return the configured application hosts.;@Nullable_	public String[] getHosts() {_		return this.hosts__	};return,the,configured,application,hosts;nullable,public,string,get,hosts,return,this,hosts
RedirectView -> @Nullable 	public String[] getHosts();1533034998;Return the configured application hosts.;@Nullable_	public String[] getHosts() {_		return this.hosts__	};return,the,configured,application,hosts;nullable,public,string,get,hosts,return,this,hosts
RedirectView -> public void setContextRelative(boolean contextRelative);1485986572;Whether to interpret a given redirect URLs that starts with a slash ("/")_as relative to the current context path ({@code true}, the default) or to_the web server root ({@code false}).;public void setContextRelative(boolean contextRelative) {_		this.contextRelative = contextRelative__	};whether,to,interpret,a,given,redirect,urls,that,starts,with,a,slash,as,relative,to,the,current,context,path,code,true,the,default,or,to,the,web,server,root,code,false;public,void,set,context,relative,boolean,context,relative,this,context,relative,context,relative
RedirectView -> public void setContextRelative(boolean contextRelative);1495657865;Whether to interpret a given redirect URLs that starts with a slash ("/")_as relative to the current context path ({@code true}, the default) or to_the web server root ({@code false}).;public void setContextRelative(boolean contextRelative) {_		this.contextRelative = contextRelative__	};whether,to,interpret,a,given,redirect,urls,that,starts,with,a,slash,as,relative,to,the,current,context,path,code,true,the,default,or,to,the,web,server,root,code,false;public,void,set,context,relative,boolean,context,relative,this,context,relative,context,relative
RedirectView -> public void setContextRelative(boolean contextRelative);1496837955;Whether to interpret a given redirect URLs that starts with a slash ("/")_as relative to the current context path ({@code true}, the default) or to_the web server root ({@code false}).;public void setContextRelative(boolean contextRelative) {_		this.contextRelative = contextRelative__	};whether,to,interpret,a,given,redirect,urls,that,starts,with,a,slash,as,relative,to,the,current,context,path,code,true,the,default,or,to,the,web,server,root,code,false;public,void,set,context,relative,boolean,context,relative,this,context,relative,context,relative
RedirectView -> public void setContextRelative(boolean contextRelative);1497232764;Whether to interpret a given redirect URLs that starts with a slash ("/")_as relative to the current context path ({@code true}, the default) or to_the web server root ({@code false}).;public void setContextRelative(boolean contextRelative) {_		this.contextRelative = contextRelative__	};whether,to,interpret,a,given,redirect,urls,that,starts,with,a,slash,as,relative,to,the,current,context,path,code,true,the,default,or,to,the,web,server,root,code,false;public,void,set,context,relative,boolean,context,relative,this,context,relative,context,relative
RedirectView -> public void setContextRelative(boolean contextRelative);1497275505;Whether to interpret a given redirect URLs that starts with a slash ("/")_as relative to the current context path ({@code true}, the default) or to_the web server root ({@code false}).;public void setContextRelative(boolean contextRelative) {_		this.contextRelative = contextRelative__	};whether,to,interpret,a,given,redirect,urls,that,starts,with,a,slash,as,relative,to,the,current,context,path,code,true,the,default,or,to,the,web,server,root,code,false;public,void,set,context,relative,boolean,context,relative,this,context,relative,context,relative
RedirectView -> public void setContextRelative(boolean contextRelative);1498762530;Whether to interpret a given redirect URLs that starts with a slash ("/")_as relative to the current context path ({@code true}, the default) or to_the web server root ({@code false}).;public void setContextRelative(boolean contextRelative) {_		this.contextRelative = contextRelative__	};whether,to,interpret,a,given,redirect,urls,that,starts,with,a,slash,as,relative,to,the,current,context,path,code,true,the,default,or,to,the,web,server,root,code,false;public,void,set,context,relative,boolean,context,relative,this,context,relative,context,relative
RedirectView -> public void setContextRelative(boolean contextRelative);1500448076;Whether to interpret a given redirect URLs that starts with a slash ("/")_as relative to the current context path ({@code true}, the default) or to_the web server root ({@code false}).;public void setContextRelative(boolean contextRelative) {_		this.contextRelative = contextRelative__	};whether,to,interpret,a,given,redirect,urls,that,starts,with,a,slash,as,relative,to,the,current,context,path,code,true,the,default,or,to,the,web,server,root,code,false;public,void,set,context,relative,boolean,context,relative,this,context,relative,context,relative
RedirectView -> public void setContextRelative(boolean contextRelative);1500457438;Whether to interpret a given redirect URLs that starts with a slash ("/")_as relative to the current context path ({@code true}, the default) or to_the web server root ({@code false}).;public void setContextRelative(boolean contextRelative) {_		this.contextRelative = contextRelative__	};whether,to,interpret,a,given,redirect,urls,that,starts,with,a,slash,as,relative,to,the,current,context,path,code,true,the,default,or,to,the,web,server,root,code,false;public,void,set,context,relative,boolean,context,relative,this,context,relative,context,relative
RedirectView -> public void setContextRelative(boolean contextRelative);1500495747;Whether to interpret a given redirect URLs that starts with a slash ("/")_as relative to the current context path ({@code true}, the default) or to_the web server root ({@code false}).;public void setContextRelative(boolean contextRelative) {_		this.contextRelative = contextRelative__	};whether,to,interpret,a,given,redirect,urls,that,starts,with,a,slash,as,relative,to,the,current,context,path,code,true,the,default,or,to,the,web,server,root,code,false;public,void,set,context,relative,boolean,context,relative,this,context,relative,context,relative
RedirectView -> public void setContextRelative(boolean contextRelative);1504701549;Whether to interpret a given redirect URLs that starts with a slash ("/")_as relative to the current context path ({@code true}, the default) or to_the web server root ({@code false}).;public void setContextRelative(boolean contextRelative) {_		this.contextRelative = contextRelative__	};whether,to,interpret,a,given,redirect,urls,that,starts,with,a,slash,as,relative,to,the,current,context,path,code,true,the,default,or,to,the,web,server,root,code,false;public,void,set,context,relative,boolean,context,relative,this,context,relative,context,relative
RedirectView -> public void setContextRelative(boolean contextRelative);1516617801;Whether to interpret a given redirect URLs that starts with a slash ("/")_as relative to the current context path ({@code true}, the default) or to_the web server root ({@code false}).;public void setContextRelative(boolean contextRelative) {_		this.contextRelative = contextRelative__	};whether,to,interpret,a,given,redirect,urls,that,starts,with,a,slash,as,relative,to,the,current,context,path,code,true,the,default,or,to,the,web,server,root,code,false;public,void,set,context,relative,boolean,context,relative,this,context,relative,context,relative
RedirectView -> public void setContextRelative(boolean contextRelative);1519588127;Whether to interpret a given redirect URLs that starts with a slash ("/")_as relative to the current context path ({@code true}, the default) or to_the web server root ({@code false}).;public void setContextRelative(boolean contextRelative) {_		this.contextRelative = contextRelative__	};whether,to,interpret,a,given,redirect,urls,that,starts,with,a,slash,as,relative,to,the,current,context,path,code,true,the,default,or,to,the,web,server,root,code,false;public,void,set,context,relative,boolean,context,relative,this,context,relative,context,relative
RedirectView -> public void setContextRelative(boolean contextRelative);1530174524;Whether to interpret a given redirect URLs that starts with a slash ("/")_as relative to the current context path ({@code true}, the default) or to_the web server root ({@code false}).;public void setContextRelative(boolean contextRelative) {_		this.contextRelative = contextRelative__	};whether,to,interpret,a,given,redirect,urls,that,starts,with,a,slash,as,relative,to,the,current,context,path,code,true,the,default,or,to,the,web,server,root,code,false;public,void,set,context,relative,boolean,context,relative,this,context,relative,context,relative
RedirectView -> public void setContextRelative(boolean contextRelative);1533034998;Whether to interpret a given redirect URLs that starts with a slash ("/")_as relative to the current context path ({@code true}, the default) or to_the web server root ({@code false}).;public void setContextRelative(boolean contextRelative) {_		this.contextRelative = contextRelative__	};whether,to,interpret,a,given,redirect,urls,that,starts,with,a,slash,as,relative,to,the,current,context,path,code,true,the,default,or,to,the,web,server,root,code,false;public,void,set,context,relative,boolean,context,relative,this,context,relative,context,relative
RedirectView -> public RedirectView();1485986572;Constructor for use as a bean.;public RedirectView() {_	};constructor,for,use,as,a,bean;public,redirect,view
RedirectView -> public RedirectView();1495657865;Constructor for use as a bean.;public RedirectView() {_	};constructor,for,use,as,a,bean;public,redirect,view
RedirectView -> public RedirectView();1496837955;Constructor for use as a bean.;public RedirectView() {_	};constructor,for,use,as,a,bean;public,redirect,view
RedirectView -> public RedirectView();1497232764;Constructor for use as a bean.;public RedirectView() {_	};constructor,for,use,as,a,bean;public,redirect,view
RedirectView -> public RedirectView();1497275505;Constructor for use as a bean.;public RedirectView() {_	};constructor,for,use,as,a,bean;public,redirect,view
RedirectView -> public RedirectView();1498762530;Constructor for use as a bean.;public RedirectView() {_	};constructor,for,use,as,a,bean;public,redirect,view
RedirectView -> public RedirectView();1500448076;Constructor for use as a bean.;public RedirectView() {_	};constructor,for,use,as,a,bean;public,redirect,view
RedirectView -> public RedirectView();1500457438;Constructor for use as a bean.;public RedirectView() {_	};constructor,for,use,as,a,bean;public,redirect,view
RedirectView -> public RedirectView();1500495747;Constructor for use as a bean.;public RedirectView() {_	};constructor,for,use,as,a,bean;public,redirect,view
RedirectView -> public RedirectView();1504701549;Constructor for use as a bean.;public RedirectView() {_	};constructor,for,use,as,a,bean;public,redirect,view
RedirectView -> public RedirectView();1516617801;Constructor for use as a bean.;public RedirectView() {_	};constructor,for,use,as,a,bean;public,redirect,view
RedirectView -> public RedirectView();1519588127;Constructor for use as a bean.;public RedirectView() {_	};constructor,for,use,as,a,bean;public,redirect,view
RedirectView -> public RedirectView();1530174524;Constructor for use as a bean.;public RedirectView() {_	};constructor,for,use,as,a,bean;public,redirect,view
RedirectView -> public RedirectView();1533034998;Constructor for use as a bean.;public RedirectView() {_	};constructor,for,use,as,a,bean;public,redirect,view
RedirectView -> protected StringBuilder appendCurrentRequestQuery(String targetUrl, ServerHttpRequest request);1485986572;Append the query of the current request to the target redirect URL.;protected StringBuilder appendCurrentRequestQuery(String targetUrl, ServerHttpRequest request) {_		String query = request.getURI().getRawQuery()__		if (!StringUtils.hasText(query)) {_			return new StringBuilder(targetUrl)__		}__		int index = targetUrl.indexOf("#")__		String fragment = (index > -1 ? targetUrl.substring(index) : null)___		StringBuilder result = new StringBuilder()__		result.append(index != -1 ? targetUrl.substring(0, index) : targetUrl)__		result.append(targetUrl.indexOf('?') < 0 ? '?' : '&').append(query)___		if (fragment != null) {_			result.append(fragment)__		}__		return result__	};append,the,query,of,the,current,request,to,the,target,redirect,url;protected,string,builder,append,current,request,query,string,target,url,server,http,request,request,string,query,request,get,uri,get,raw,query,if,string,utils,has,text,query,return,new,string,builder,target,url,int,index,target,url,index,of,string,fragment,index,1,target,url,substring,index,null,string,builder,result,new,string,builder,result,append,index,1,target,url,substring,0,index,target,url,result,append,target,url,index,of,0,append,query,if,fragment,null,result,append,fragment,return,result
RedirectView -> protected StringBuilder appendCurrentRequestQuery(String targetUrl, ServerHttpRequest request);1495657865;Append the query of the current request to the target redirect URL.;protected StringBuilder appendCurrentRequestQuery(String targetUrl, ServerHttpRequest request) {_		String query = request.getURI().getRawQuery()__		if (!StringUtils.hasText(query)) {_			return new StringBuilder(targetUrl)__		}__		int index = targetUrl.indexOf("#")__		String fragment = (index > -1 ? targetUrl.substring(index) : null)___		StringBuilder result = new StringBuilder()__		result.append(index != -1 ? targetUrl.substring(0, index) : targetUrl)__		result.append(targetUrl.indexOf('?') < 0 ? '?' : '&').append(query)___		if (fragment != null) {_			result.append(fragment)__		}__		return result__	};append,the,query,of,the,current,request,to,the,target,redirect,url;protected,string,builder,append,current,request,query,string,target,url,server,http,request,request,string,query,request,get,uri,get,raw,query,if,string,utils,has,text,query,return,new,string,builder,target,url,int,index,target,url,index,of,string,fragment,index,1,target,url,substring,index,null,string,builder,result,new,string,builder,result,append,index,1,target,url,substring,0,index,target,url,result,append,target,url,index,of,0,append,query,if,fragment,null,result,append,fragment,return,result
RedirectView -> protected StringBuilder appendCurrentRequestQuery(String targetUrl, ServerHttpRequest request);1496837955;Append the query of the current request to the target redirect URL.;protected StringBuilder appendCurrentRequestQuery(String targetUrl, ServerHttpRequest request) {_		String query = request.getURI().getRawQuery()__		if (!StringUtils.hasText(query)) {_			return new StringBuilder(targetUrl)__		}__		int index = targetUrl.indexOf("#")__		String fragment = (index > -1 ? targetUrl.substring(index) : null)___		StringBuilder result = new StringBuilder()__		result.append(index != -1 ? targetUrl.substring(0, index) : targetUrl)__		result.append(targetUrl.indexOf('?') < 0 ? '?' : '&').append(query)___		if (fragment != null) {_			result.append(fragment)__		}__		return result__	};append,the,query,of,the,current,request,to,the,target,redirect,url;protected,string,builder,append,current,request,query,string,target,url,server,http,request,request,string,query,request,get,uri,get,raw,query,if,string,utils,has,text,query,return,new,string,builder,target,url,int,index,target,url,index,of,string,fragment,index,1,target,url,substring,index,null,string,builder,result,new,string,builder,result,append,index,1,target,url,substring,0,index,target,url,result,append,target,url,index,of,0,append,query,if,fragment,null,result,append,fragment,return,result
RedirectView -> protected StringBuilder appendCurrentRequestQuery(String targetUrl, ServerHttpRequest request);1497232764;Append the query of the current request to the target redirect URL.;protected StringBuilder appendCurrentRequestQuery(String targetUrl, ServerHttpRequest request) {_		String query = request.getURI().getRawQuery()__		if (!StringUtils.hasText(query)) {_			return new StringBuilder(targetUrl)__		}__		int index = targetUrl.indexOf("#")__		String fragment = (index > -1 ? targetUrl.substring(index) : null)___		StringBuilder result = new StringBuilder()__		result.append(index != -1 ? targetUrl.substring(0, index) : targetUrl)__		result.append(targetUrl.indexOf('?') < 0 ? '?' : '&').append(query)___		if (fragment != null) {_			result.append(fragment)__		}__		return result__	};append,the,query,of,the,current,request,to,the,target,redirect,url;protected,string,builder,append,current,request,query,string,target,url,server,http,request,request,string,query,request,get,uri,get,raw,query,if,string,utils,has,text,query,return,new,string,builder,target,url,int,index,target,url,index,of,string,fragment,index,1,target,url,substring,index,null,string,builder,result,new,string,builder,result,append,index,1,target,url,substring,0,index,target,url,result,append,target,url,index,of,0,append,query,if,fragment,null,result,append,fragment,return,result
RedirectView -> protected StringBuilder appendCurrentRequestQuery(String targetUrl, ServerHttpRequest request);1497275505;Append the query of the current request to the target redirect URL.;protected StringBuilder appendCurrentRequestQuery(String targetUrl, ServerHttpRequest request) {_		String query = request.getURI().getRawQuery()__		if (!StringUtils.hasText(query)) {_			return new StringBuilder(targetUrl)__		}__		int index = targetUrl.indexOf("#")__		String fragment = (index > -1 ? targetUrl.substring(index) : null)___		StringBuilder result = new StringBuilder()__		result.append(index != -1 ? targetUrl.substring(0, index) : targetUrl)__		result.append(targetUrl.indexOf('?') < 0 ? '?' : '&').append(query)___		if (fragment != null) {_			result.append(fragment)__		}__		return result__	};append,the,query,of,the,current,request,to,the,target,redirect,url;protected,string,builder,append,current,request,query,string,target,url,server,http,request,request,string,query,request,get,uri,get,raw,query,if,string,utils,has,text,query,return,new,string,builder,target,url,int,index,target,url,index,of,string,fragment,index,1,target,url,substring,index,null,string,builder,result,new,string,builder,result,append,index,1,target,url,substring,0,index,target,url,result,append,target,url,index,of,0,append,query,if,fragment,null,result,append,fragment,return,result
RedirectView -> protected StringBuilder appendCurrentRequestQuery(String targetUrl, ServerHttpRequest request);1498762530;Append the query of the current request to the target redirect URL.;protected StringBuilder appendCurrentRequestQuery(String targetUrl, ServerHttpRequest request) {_		String query = request.getURI().getRawQuery()__		if (!StringUtils.hasText(query)) {_			return new StringBuilder(targetUrl)__		}__		int index = targetUrl.indexOf("#")__		String fragment = (index > -1 ? targetUrl.substring(index) : null)___		StringBuilder result = new StringBuilder()__		result.append(index != -1 ? targetUrl.substring(0, index) : targetUrl)__		result.append(targetUrl.indexOf('?') < 0 ? '?' : '&').append(query)___		if (fragment != null) {_			result.append(fragment)__		}__		return result__	};append,the,query,of,the,current,request,to,the,target,redirect,url;protected,string,builder,append,current,request,query,string,target,url,server,http,request,request,string,query,request,get,uri,get,raw,query,if,string,utils,has,text,query,return,new,string,builder,target,url,int,index,target,url,index,of,string,fragment,index,1,target,url,substring,index,null,string,builder,result,new,string,builder,result,append,index,1,target,url,substring,0,index,target,url,result,append,target,url,index,of,0,append,query,if,fragment,null,result,append,fragment,return,result
RedirectView -> protected StringBuilder appendCurrentRequestQuery(String targetUrl, ServerHttpRequest request);1500448076;Append the query of the current request to the target redirect URL.;protected StringBuilder appendCurrentRequestQuery(String targetUrl, ServerHttpRequest request) {_		String query = request.getURI().getRawQuery()__		if (!StringUtils.hasText(query)) {_			return new StringBuilder(targetUrl)__		}__		int index = targetUrl.indexOf("#")__		String fragment = (index > -1 ? targetUrl.substring(index) : null)___		StringBuilder result = new StringBuilder()__		result.append(index != -1 ? targetUrl.substring(0, index) : targetUrl)__		result.append(targetUrl.indexOf('?') < 0 ? '?' : '&').append(query)___		if (fragment != null) {_			result.append(fragment)__		}__		return result__	};append,the,query,of,the,current,request,to,the,target,redirect,url;protected,string,builder,append,current,request,query,string,target,url,server,http,request,request,string,query,request,get,uri,get,raw,query,if,string,utils,has,text,query,return,new,string,builder,target,url,int,index,target,url,index,of,string,fragment,index,1,target,url,substring,index,null,string,builder,result,new,string,builder,result,append,index,1,target,url,substring,0,index,target,url,result,append,target,url,index,of,0,append,query,if,fragment,null,result,append,fragment,return,result
RedirectView -> protected StringBuilder appendCurrentRequestQuery(String targetUrl, ServerHttpRequest request);1500457438;Append the query of the current request to the target redirect URL.;protected StringBuilder appendCurrentRequestQuery(String targetUrl, ServerHttpRequest request) {_		String query = request.getURI().getRawQuery()__		if (!StringUtils.hasText(query)) {_			return new StringBuilder(targetUrl)__		}__		int index = targetUrl.indexOf("#")__		String fragment = (index > -1 ? targetUrl.substring(index) : null)___		StringBuilder result = new StringBuilder()__		result.append(index != -1 ? targetUrl.substring(0, index) : targetUrl)__		result.append(targetUrl.indexOf('?') < 0 ? '?' : '&').append(query)___		if (fragment != null) {_			result.append(fragment)__		}__		return result__	};append,the,query,of,the,current,request,to,the,target,redirect,url;protected,string,builder,append,current,request,query,string,target,url,server,http,request,request,string,query,request,get,uri,get,raw,query,if,string,utils,has,text,query,return,new,string,builder,target,url,int,index,target,url,index,of,string,fragment,index,1,target,url,substring,index,null,string,builder,result,new,string,builder,result,append,index,1,target,url,substring,0,index,target,url,result,append,target,url,index,of,0,append,query,if,fragment,null,result,append,fragment,return,result
RedirectView -> protected StringBuilder appendCurrentRequestQuery(String targetUrl, ServerHttpRequest request);1500495747;Append the query of the current request to the target redirect URL.;protected StringBuilder appendCurrentRequestQuery(String targetUrl, ServerHttpRequest request) {_		String query = request.getURI().getRawQuery()__		if (!StringUtils.hasText(query)) {_			return new StringBuilder(targetUrl)__		}__		int index = targetUrl.indexOf("#")__		String fragment = (index > -1 ? targetUrl.substring(index) : null)___		StringBuilder result = new StringBuilder()__		result.append(index != -1 ? targetUrl.substring(0, index) : targetUrl)__		result.append(targetUrl.indexOf('?') < 0 ? '?' : '&').append(query)___		if (fragment != null) {_			result.append(fragment)__		}__		return result__	};append,the,query,of,the,current,request,to,the,target,redirect,url;protected,string,builder,append,current,request,query,string,target,url,server,http,request,request,string,query,request,get,uri,get,raw,query,if,string,utils,has,text,query,return,new,string,builder,target,url,int,index,target,url,index,of,string,fragment,index,1,target,url,substring,index,null,string,builder,result,new,string,builder,result,append,index,1,target,url,substring,0,index,target,url,result,append,target,url,index,of,0,append,query,if,fragment,null,result,append,fragment,return,result
RedirectView -> protected StringBuilder appendCurrentRequestQuery(String targetUrl, ServerHttpRequest request);1504701549;Append the query of the current request to the target redirect URL.;protected StringBuilder appendCurrentRequestQuery(String targetUrl, ServerHttpRequest request) {_		String query = request.getURI().getRawQuery()__		if (!StringUtils.hasText(query)) {_			return new StringBuilder(targetUrl)__		}__		int index = targetUrl.indexOf("#")__		String fragment = (index > -1 ? targetUrl.substring(index) : null)___		StringBuilder result = new StringBuilder()__		result.append(index != -1 ? targetUrl.substring(0, index) : targetUrl)__		result.append(targetUrl.indexOf('?') < 0 ? '?' : '&').append(query)___		if (fragment != null) {_			result.append(fragment)__		}__		return result__	};append,the,query,of,the,current,request,to,the,target,redirect,url;protected,string,builder,append,current,request,query,string,target,url,server,http,request,request,string,query,request,get,uri,get,raw,query,if,string,utils,has,text,query,return,new,string,builder,target,url,int,index,target,url,index,of,string,fragment,index,1,target,url,substring,index,null,string,builder,result,new,string,builder,result,append,index,1,target,url,substring,0,index,target,url,result,append,target,url,index,of,0,append,query,if,fragment,null,result,append,fragment,return,result
RedirectView -> protected StringBuilder appendCurrentRequestQuery(String targetUrl, ServerHttpRequest request);1516617801;Append the query of the current request to the target redirect URL.;protected StringBuilder appendCurrentRequestQuery(String targetUrl, ServerHttpRequest request) {_		String query = request.getURI().getRawQuery()__		if (!StringUtils.hasText(query)) {_			return new StringBuilder(targetUrl)__		}__		int index = targetUrl.indexOf("#")__		String fragment = (index > -1 ? targetUrl.substring(index) : null)___		StringBuilder result = new StringBuilder()__		result.append(index != -1 ? targetUrl.substring(0, index) : targetUrl)__		result.append(targetUrl.indexOf('?') < 0 ? '?' : '&').append(query)___		if (fragment != null) {_			result.append(fragment)__		}__		return result__	};append,the,query,of,the,current,request,to,the,target,redirect,url;protected,string,builder,append,current,request,query,string,target,url,server,http,request,request,string,query,request,get,uri,get,raw,query,if,string,utils,has,text,query,return,new,string,builder,target,url,int,index,target,url,index,of,string,fragment,index,1,target,url,substring,index,null,string,builder,result,new,string,builder,result,append,index,1,target,url,substring,0,index,target,url,result,append,target,url,index,of,0,append,query,if,fragment,null,result,append,fragment,return,result
RedirectView -> protected StringBuilder appendCurrentRequestQuery(String targetUrl, ServerHttpRequest request);1519588127;Append the query of the current request to the target redirect URL.;protected StringBuilder appendCurrentRequestQuery(String targetUrl, ServerHttpRequest request) {_		String query = request.getURI().getRawQuery()__		if (!StringUtils.hasText(query)) {_			return new StringBuilder(targetUrl)__		}__		int index = targetUrl.indexOf('#')__		String fragment = (index > -1 ? targetUrl.substring(index) : null)___		StringBuilder result = new StringBuilder()__		result.append(index != -1 ? targetUrl.substring(0, index) : targetUrl)__		result.append(targetUrl.indexOf('?') < 0 ? '?' : '&').append(query)___		if (fragment != null) {_			result.append(fragment)__		}__		return result__	};append,the,query,of,the,current,request,to,the,target,redirect,url;protected,string,builder,append,current,request,query,string,target,url,server,http,request,request,string,query,request,get,uri,get,raw,query,if,string,utils,has,text,query,return,new,string,builder,target,url,int,index,target,url,index,of,string,fragment,index,1,target,url,substring,index,null,string,builder,result,new,string,builder,result,append,index,1,target,url,substring,0,index,target,url,result,append,target,url,index,of,0,append,query,if,fragment,null,result,append,fragment,return,result
RedirectView -> protected StringBuilder appendCurrentRequestQuery(String targetUrl, ServerHttpRequest request);1530174524;Append the query of the current request to the target redirect URL.;protected StringBuilder appendCurrentRequestQuery(String targetUrl, ServerHttpRequest request) {_		String query = request.getURI().getRawQuery()__		if (!StringUtils.hasText(query)) {_			return new StringBuilder(targetUrl)__		}__		int index = targetUrl.indexOf('#')__		String fragment = (index > -1 ? targetUrl.substring(index) : null)___		StringBuilder result = new StringBuilder()__		result.append(index != -1 ? targetUrl.substring(0, index) : targetUrl)__		result.append(targetUrl.indexOf('?') < 0 ? '?' : '&').append(query)___		if (fragment != null) {_			result.append(fragment)__		}__		return result__	};append,the,query,of,the,current,request,to,the,target,redirect,url;protected,string,builder,append,current,request,query,string,target,url,server,http,request,request,string,query,request,get,uri,get,raw,query,if,string,utils,has,text,query,return,new,string,builder,target,url,int,index,target,url,index,of,string,fragment,index,1,target,url,substring,index,null,string,builder,result,new,string,builder,result,append,index,1,target,url,substring,0,index,target,url,result,append,target,url,index,of,0,append,query,if,fragment,null,result,append,fragment,return,result
RedirectView -> protected StringBuilder appendCurrentRequestQuery(String targetUrl, ServerHttpRequest request);1533034998;Append the query of the current request to the target redirect URL.;protected StringBuilder appendCurrentRequestQuery(String targetUrl, ServerHttpRequest request) {_		String query = request.getURI().getRawQuery()__		if (!StringUtils.hasText(query)) {_			return new StringBuilder(targetUrl)__		}__		int index = targetUrl.indexOf('#')__		String fragment = (index > -1 ? targetUrl.substring(index) : null)___		StringBuilder result = new StringBuilder()__		result.append(index != -1 ? targetUrl.substring(0, index) : targetUrl)__		result.append(targetUrl.indexOf('?') < 0 ? '?' : '&').append(query)___		if (fragment != null) {_			result.append(fragment)__		}__		return result__	};append,the,query,of,the,current,request,to,the,target,redirect,url;protected,string,builder,append,current,request,query,string,target,url,server,http,request,request,string,query,request,get,uri,get,raw,query,if,string,utils,has,text,query,return,new,string,builder,target,url,int,index,target,url,index,of,string,fragment,index,1,target,url,substring,index,null,string,builder,result,new,string,builder,result,append,index,1,target,url,substring,0,index,target,url,result,append,target,url,index,of,0,append,query,if,fragment,null,result,append,fragment,return,result
RedirectView -> public void setPropagateQuery(boolean propagateQuery);1485986572;Whether to append the query string of the current URL to the redirect URL_({@code true}) or not ({@code false}, the default).;public void setPropagateQuery(boolean propagateQuery) {_		this.propagateQuery = propagateQuery__	};whether,to,append,the,query,string,of,the,current,url,to,the,redirect,url,code,true,or,not,code,false,the,default;public,void,set,propagate,query,boolean,propagate,query,this,propagate,query,propagate,query
RedirectView -> public void setPropagateQuery(boolean propagateQuery);1495657865;Whether to append the query string of the current URL to the redirect URL_({@code true}) or not ({@code false}, the default).;public void setPropagateQuery(boolean propagateQuery) {_		this.propagateQuery = propagateQuery__	};whether,to,append,the,query,string,of,the,current,url,to,the,redirect,url,code,true,or,not,code,false,the,default;public,void,set,propagate,query,boolean,propagate,query,this,propagate,query,propagate,query
RedirectView -> public void setPropagateQuery(boolean propagateQuery);1496837955;Whether to append the query string of the current URL to the redirect URL_({@code true}) or not ({@code false}, the default).;public void setPropagateQuery(boolean propagateQuery) {_		this.propagateQuery = propagateQuery__	};whether,to,append,the,query,string,of,the,current,url,to,the,redirect,url,code,true,or,not,code,false,the,default;public,void,set,propagate,query,boolean,propagate,query,this,propagate,query,propagate,query
RedirectView -> public void setPropagateQuery(boolean propagateQuery);1497232764;Whether to append the query string of the current URL to the redirect URL_({@code true}) or not ({@code false}, the default).;public void setPropagateQuery(boolean propagateQuery) {_		this.propagateQuery = propagateQuery__	};whether,to,append,the,query,string,of,the,current,url,to,the,redirect,url,code,true,or,not,code,false,the,default;public,void,set,propagate,query,boolean,propagate,query,this,propagate,query,propagate,query
RedirectView -> public void setPropagateQuery(boolean propagateQuery);1497275505;Whether to append the query string of the current URL to the redirect URL_({@code true}) or not ({@code false}, the default).;public void setPropagateQuery(boolean propagateQuery) {_		this.propagateQuery = propagateQuery__	};whether,to,append,the,query,string,of,the,current,url,to,the,redirect,url,code,true,or,not,code,false,the,default;public,void,set,propagate,query,boolean,propagate,query,this,propagate,query,propagate,query
RedirectView -> public void setPropagateQuery(boolean propagateQuery);1498762530;Whether to append the query string of the current URL to the redirect URL_({@code true}) or not ({@code false}, the default).;public void setPropagateQuery(boolean propagateQuery) {_		this.propagateQuery = propagateQuery__	};whether,to,append,the,query,string,of,the,current,url,to,the,redirect,url,code,true,or,not,code,false,the,default;public,void,set,propagate,query,boolean,propagate,query,this,propagate,query,propagate,query
RedirectView -> public void setPropagateQuery(boolean propagateQuery);1500448076;Whether to append the query string of the current URL to the redirect URL_({@code true}) or not ({@code false}, the default).;public void setPropagateQuery(boolean propagateQuery) {_		this.propagateQuery = propagateQuery__	};whether,to,append,the,query,string,of,the,current,url,to,the,redirect,url,code,true,or,not,code,false,the,default;public,void,set,propagate,query,boolean,propagate,query,this,propagate,query,propagate,query
RedirectView -> public void setPropagateQuery(boolean propagateQuery);1500457438;Whether to append the query string of the current URL to the redirect URL_({@code true}) or not ({@code false}, the default).;public void setPropagateQuery(boolean propagateQuery) {_		this.propagateQuery = propagateQuery__	};whether,to,append,the,query,string,of,the,current,url,to,the,redirect,url,code,true,or,not,code,false,the,default;public,void,set,propagate,query,boolean,propagate,query,this,propagate,query,propagate,query
RedirectView -> public void setPropagateQuery(boolean propagateQuery);1500495747;Whether to append the query string of the current URL to the redirect URL_({@code true}) or not ({@code false}, the default).;public void setPropagateQuery(boolean propagateQuery) {_		this.propagateQuery = propagateQuery__	};whether,to,append,the,query,string,of,the,current,url,to,the,redirect,url,code,true,or,not,code,false,the,default;public,void,set,propagate,query,boolean,propagate,query,this,propagate,query,propagate,query
RedirectView -> public void setPropagateQuery(boolean propagateQuery);1504701549;Whether to append the query string of the current URL to the redirect URL_({@code true}) or not ({@code false}, the default).;public void setPropagateQuery(boolean propagateQuery) {_		this.propagateQuery = propagateQuery__	};whether,to,append,the,query,string,of,the,current,url,to,the,redirect,url,code,true,or,not,code,false,the,default;public,void,set,propagate,query,boolean,propagate,query,this,propagate,query,propagate,query
RedirectView -> public void setPropagateQuery(boolean propagateQuery);1516617801;Whether to append the query string of the current URL to the redirect URL_({@code true}) or not ({@code false}, the default).;public void setPropagateQuery(boolean propagateQuery) {_		this.propagateQuery = propagateQuery__	};whether,to,append,the,query,string,of,the,current,url,to,the,redirect,url,code,true,or,not,code,false,the,default;public,void,set,propagate,query,boolean,propagate,query,this,propagate,query,propagate,query
RedirectView -> public void setPropagateQuery(boolean propagateQuery);1519588127;Whether to append the query string of the current URL to the redirect URL_({@code true}) or not ({@code false}, the default).;public void setPropagateQuery(boolean propagateQuery) {_		this.propagateQuery = propagateQuery__	};whether,to,append,the,query,string,of,the,current,url,to,the,redirect,url,code,true,or,not,code,false,the,default;public,void,set,propagate,query,boolean,propagate,query,this,propagate,query,propagate,query
RedirectView -> public void setPropagateQuery(boolean propagateQuery);1530174524;Whether to append the query string of the current URL to the redirect URL_({@code true}) or not ({@code false}, the default).;public void setPropagateQuery(boolean propagateQuery) {_		this.propagateQuery = propagateQuery__	};whether,to,append,the,query,string,of,the,current,url,to,the,redirect,url,code,true,or,not,code,false,the,default;public,void,set,propagate,query,boolean,propagate,query,this,propagate,query,propagate,query
RedirectView -> public void setPropagateQuery(boolean propagateQuery);1533034998;Whether to append the query string of the current URL to the redirect URL_({@code true}) or not ({@code false}, the default).;public void setPropagateQuery(boolean propagateQuery) {_		this.propagateQuery = propagateQuery__	};whether,to,append,the,query,string,of,the,current,url,to,the,redirect,url,code,true,or,not,code,false,the,default;public,void,set,propagate,query,boolean,propagate,query,this,propagate,query,propagate,query
RedirectView -> protected Mono<Void> sendRedirect(String targetUrl, ServerWebExchange exchange);1485986572;Send a redirect back to the HTTP client_@param targetUrl the target URL to redirect to_@param exchange current exchange;protected Mono<Void> sendRedirect(String targetUrl, ServerWebExchange exchange) {_		ServerHttpResponse response = exchange.getResponse()__		String encodedURL = (isRemoteHost(targetUrl) ? targetUrl : response.encodeUrl(targetUrl))__		response.getHeaders().setLocation(URI.create(encodedURL))__		response.setStatusCode(getStatusCode())__		return Mono.empty()__	};send,a,redirect,back,to,the,http,client,param,target,url,the,target,url,to,redirect,to,param,exchange,current,exchange;protected,mono,void,send,redirect,string,target,url,server,web,exchange,exchange,server,http,response,response,exchange,get,response,string,encoded,url,is,remote,host,target,url,target,url,response,encode,url,target,url,response,get,headers,set,location,uri,create,encoded,url,response,set,status,code,get,status,code,return,mono,empty
RedirectView -> protected Mono<Void> sendRedirect(String targetUrl, ServerWebExchange exchange);1495657865;Send a redirect back to the HTTP client_@param targetUrl the target URL to redirect to_@param exchange current exchange;protected Mono<Void> sendRedirect(String targetUrl, ServerWebExchange exchange) {_		ServerHttpResponse response = exchange.getResponse()__		String encodedURL = (isRemoteHost(targetUrl) ? targetUrl : response.encodeUrl(targetUrl))__		response.getHeaders().setLocation(URI.create(encodedURL))__		response.setStatusCode(getStatusCode())__		return Mono.empty()__	};send,a,redirect,back,to,the,http,client,param,target,url,the,target,url,to,redirect,to,param,exchange,current,exchange;protected,mono,void,send,redirect,string,target,url,server,web,exchange,exchange,server,http,response,response,exchange,get,response,string,encoded,url,is,remote,host,target,url,target,url,response,encode,url,target,url,response,get,headers,set,location,uri,create,encoded,url,response,set,status,code,get,status,code,return,mono,empty
RedirectView -> protected Mono<Void> sendRedirect(String targetUrl, ServerWebExchange exchange);1496837955;Send a redirect back to the HTTP client_@param targetUrl the target URL to redirect to_@param exchange current exchange;protected Mono<Void> sendRedirect(String targetUrl, ServerWebExchange exchange) {_		ServerHttpResponse response = exchange.getResponse()__		String encodedURL = (isRemoteHost(targetUrl) ? targetUrl : response.encodeUrl(targetUrl))__		response.getHeaders().setLocation(URI.create(encodedURL))__		HttpStatus status = getStatusCode()__		if (status != null) {_			response.setStatusCode(status)__		}_		return Mono.empty()__	};send,a,redirect,back,to,the,http,client,param,target,url,the,target,url,to,redirect,to,param,exchange,current,exchange;protected,mono,void,send,redirect,string,target,url,server,web,exchange,exchange,server,http,response,response,exchange,get,response,string,encoded,url,is,remote,host,target,url,target,url,response,encode,url,target,url,response,get,headers,set,location,uri,create,encoded,url,http,status,status,get,status,code,if,status,null,response,set,status,code,status,return,mono,empty
RedirectView -> protected Mono<Void> sendRedirect(String targetUrl, ServerWebExchange exchange);1497232764;Send a redirect back to the HTTP client_@param targetUrl the target URL to redirect to_@param exchange current exchange;protected Mono<Void> sendRedirect(String targetUrl, ServerWebExchange exchange) {_		ServerHttpResponse response = exchange.getResponse()__		String encodedURL = (isRemoteHost(targetUrl) ? targetUrl : response.encodeUrl(targetUrl))__		response.getHeaders().setLocation(URI.create(encodedURL))__		HttpStatus status = getStatusCode()__		if (status != null) {_			response.setStatusCode(status)__		}_		return Mono.empty()__	};send,a,redirect,back,to,the,http,client,param,target,url,the,target,url,to,redirect,to,param,exchange,current,exchange;protected,mono,void,send,redirect,string,target,url,server,web,exchange,exchange,server,http,response,response,exchange,get,response,string,encoded,url,is,remote,host,target,url,target,url,response,encode,url,target,url,response,get,headers,set,location,uri,create,encoded,url,http,status,status,get,status,code,if,status,null,response,set,status,code,status,return,mono,empty
RedirectView -> protected Mono<Void> sendRedirect(String targetUrl, ServerWebExchange exchange);1497275505;Send a redirect back to the HTTP client_@param targetUrl the target URL to redirect to_@param exchange current exchange;protected Mono<Void> sendRedirect(String targetUrl, ServerWebExchange exchange) {_		ServerHttpResponse response = exchange.getResponse()__		String encodedURL = (isRemoteHost(targetUrl) ? targetUrl : response.encodeUrl(targetUrl))__		response.getHeaders().setLocation(URI.create(encodedURL))__		HttpStatus status = getStatusCode()__		if (status != null) {_			response.setStatusCode(status)__		}_		return Mono.empty()__	};send,a,redirect,back,to,the,http,client,param,target,url,the,target,url,to,redirect,to,param,exchange,current,exchange;protected,mono,void,send,redirect,string,target,url,server,web,exchange,exchange,server,http,response,response,exchange,get,response,string,encoded,url,is,remote,host,target,url,target,url,response,encode,url,target,url,response,get,headers,set,location,uri,create,encoded,url,http,status,status,get,status,code,if,status,null,response,set,status,code,status,return,mono,empty
RedirectView -> protected Mono<Void> sendRedirect(String targetUrl, ServerWebExchange exchange);1498762530;Send a redirect back to the HTTP client_@param targetUrl the target URL to redirect to_@param exchange current exchange;protected Mono<Void> sendRedirect(String targetUrl, ServerWebExchange exchange) {_		ServerHttpResponse response = exchange.getResponse()__		String encodedURL = (isRemoteHost(targetUrl) ? targetUrl : response.encodeUrl(targetUrl))__		response.getHeaders().setLocation(URI.create(encodedURL))__		HttpStatus status = getStatusCode()__		if (status != null) {_			response.setStatusCode(status)__		}_		return Mono.empty()__	};send,a,redirect,back,to,the,http,client,param,target,url,the,target,url,to,redirect,to,param,exchange,current,exchange;protected,mono,void,send,redirect,string,target,url,server,web,exchange,exchange,server,http,response,response,exchange,get,response,string,encoded,url,is,remote,host,target,url,target,url,response,encode,url,target,url,response,get,headers,set,location,uri,create,encoded,url,http,status,status,get,status,code,if,status,null,response,set,status,code,status,return,mono,empty
RedirectView -> protected Mono<Void> sendRedirect(String targetUrl, ServerWebExchange exchange);1500448076;Send a redirect back to the HTTP client_@param targetUrl the target URL to redirect to_@param exchange current exchange;protected Mono<Void> sendRedirect(String targetUrl, ServerWebExchange exchange) {_		ServerHttpResponse response = exchange.getResponse()__		String encodedURL = (isRemoteHost(targetUrl) ? targetUrl : response.encodeUrl(targetUrl))__		response.getHeaders().setLocation(URI.create(encodedURL))__		HttpStatus status = getStatusCode()__		if (status != null) {_			response.setStatusCode(status)__		}_		return Mono.empty()__	};send,a,redirect,back,to,the,http,client,param,target,url,the,target,url,to,redirect,to,param,exchange,current,exchange;protected,mono,void,send,redirect,string,target,url,server,web,exchange,exchange,server,http,response,response,exchange,get,response,string,encoded,url,is,remote,host,target,url,target,url,response,encode,url,target,url,response,get,headers,set,location,uri,create,encoded,url,http,status,status,get,status,code,if,status,null,response,set,status,code,status,return,mono,empty
RedirectView -> protected Mono<Void> sendRedirect(String targetUrl, ServerWebExchange exchange);1500457438;Send a redirect back to the HTTP client_@param targetUrl the target URL to redirect to_@param exchange current exchange;protected Mono<Void> sendRedirect(String targetUrl, ServerWebExchange exchange) {_		ServerHttpResponse response = exchange.getResponse()__		String encodedURL = (isRemoteHost(targetUrl) ? targetUrl : response.encodeUrl(targetUrl))__		response.getHeaders().setLocation(URI.create(encodedURL))__		response.setStatusCode(getStatusCode())__		return Mono.empty()__	};send,a,redirect,back,to,the,http,client,param,target,url,the,target,url,to,redirect,to,param,exchange,current,exchange;protected,mono,void,send,redirect,string,target,url,server,web,exchange,exchange,server,http,response,response,exchange,get,response,string,encoded,url,is,remote,host,target,url,target,url,response,encode,url,target,url,response,get,headers,set,location,uri,create,encoded,url,response,set,status,code,get,status,code,return,mono,empty
RedirectView -> protected Mono<Void> sendRedirect(String targetUrl, ServerWebExchange exchange);1500495747;Send a redirect back to the HTTP client_@param targetUrl the target URL to redirect to_@param exchange current exchange;protected Mono<Void> sendRedirect(String targetUrl, ServerWebExchange exchange) {_		ServerHttpResponse response = exchange.getResponse()__		String encodedURL = (isRemoteHost(targetUrl) ? targetUrl : response.encodeUrl(targetUrl))__		response.getHeaders().setLocation(URI.create(encodedURL))__		response.setStatusCode(getStatusCode())__		return Mono.empty()__	};send,a,redirect,back,to,the,http,client,param,target,url,the,target,url,to,redirect,to,param,exchange,current,exchange;protected,mono,void,send,redirect,string,target,url,server,web,exchange,exchange,server,http,response,response,exchange,get,response,string,encoded,url,is,remote,host,target,url,target,url,response,encode,url,target,url,response,get,headers,set,location,uri,create,encoded,url,response,set,status,code,get,status,code,return,mono,empty
RedirectView -> protected Mono<Void> sendRedirect(String targetUrl, ServerWebExchange exchange);1504701549;Send a redirect back to the HTTP client_@param targetUrl the target URL to redirect to_@param exchange current exchange;protected Mono<Void> sendRedirect(String targetUrl, ServerWebExchange exchange) {_		String transformedUrl = (isRemoteHost(targetUrl) ? targetUrl : exchange.transformUrl(targetUrl))__		ServerHttpResponse response = exchange.getResponse()__		response.getHeaders().setLocation(URI.create(transformedUrl))__		response.setStatusCode(getStatusCode())__		return Mono.empty()__	};send,a,redirect,back,to,the,http,client,param,target,url,the,target,url,to,redirect,to,param,exchange,current,exchange;protected,mono,void,send,redirect,string,target,url,server,web,exchange,exchange,string,transformed,url,is,remote,host,target,url,target,url,exchange,transform,url,target,url,server,http,response,response,exchange,get,response,response,get,headers,set,location,uri,create,transformed,url,response,set,status,code,get,status,code,return,mono,empty
RedirectView -> protected Mono<Void> sendRedirect(String targetUrl, ServerWebExchange exchange);1516617801;Send a redirect back to the HTTP client_@param targetUrl the target URL to redirect to_@param exchange current exchange;protected Mono<Void> sendRedirect(String targetUrl, ServerWebExchange exchange) {_		String transformedUrl = (isRemoteHost(targetUrl) ? targetUrl : exchange.transformUrl(targetUrl))__		ServerHttpResponse response = exchange.getResponse()__		response.getHeaders().setLocation(URI.create(transformedUrl))__		response.setStatusCode(getStatusCode())__		return Mono.empty()__	};send,a,redirect,back,to,the,http,client,param,target,url,the,target,url,to,redirect,to,param,exchange,current,exchange;protected,mono,void,send,redirect,string,target,url,server,web,exchange,exchange,string,transformed,url,is,remote,host,target,url,target,url,exchange,transform,url,target,url,server,http,response,response,exchange,get,response,response,get,headers,set,location,uri,create,transformed,url,response,set,status,code,get,status,code,return,mono,empty
RedirectView -> protected Mono<Void> sendRedirect(String targetUrl, ServerWebExchange exchange);1519588127;Send a redirect back to the HTTP client_@param targetUrl the target URL to redirect to_@param exchange current exchange;protected Mono<Void> sendRedirect(String targetUrl, ServerWebExchange exchange) {_		String transformedUrl = (isRemoteHost(targetUrl) ? targetUrl : exchange.transformUrl(targetUrl))__		ServerHttpResponse response = exchange.getResponse()__		response.getHeaders().setLocation(URI.create(transformedUrl))__		response.setStatusCode(getStatusCode())__		return Mono.empty()__	};send,a,redirect,back,to,the,http,client,param,target,url,the,target,url,to,redirect,to,param,exchange,current,exchange;protected,mono,void,send,redirect,string,target,url,server,web,exchange,exchange,string,transformed,url,is,remote,host,target,url,target,url,exchange,transform,url,target,url,server,http,response,response,exchange,get,response,response,get,headers,set,location,uri,create,transformed,url,response,set,status,code,get,status,code,return,mono,empty
RedirectView -> protected Mono<Void> sendRedirect(String targetUrl, ServerWebExchange exchange);1530174524;Send a redirect back to the HTTP client._@param targetUrl the target URL to redirect to_@param exchange current exchange;protected Mono<Void> sendRedirect(String targetUrl, ServerWebExchange exchange) {_		String transformedUrl = (isRemoteHost(targetUrl) ? targetUrl : exchange.transformUrl(targetUrl))__		ServerHttpResponse response = exchange.getResponse()__		response.getHeaders().setLocation(URI.create(transformedUrl))__		response.setStatusCode(getStatusCode())__		return Mono.empty()__	};send,a,redirect,back,to,the,http,client,param,target,url,the,target,url,to,redirect,to,param,exchange,current,exchange;protected,mono,void,send,redirect,string,target,url,server,web,exchange,exchange,string,transformed,url,is,remote,host,target,url,target,url,exchange,transform,url,target,url,server,http,response,response,exchange,get,response,response,get,headers,set,location,uri,create,transformed,url,response,set,status,code,get,status,code,return,mono,empty
RedirectView -> protected Mono<Void> sendRedirect(String targetUrl, ServerWebExchange exchange);1533034998;Send a redirect back to the HTTP client._@param targetUrl the target URL to redirect to_@param exchange current exchange;protected Mono<Void> sendRedirect(String targetUrl, ServerWebExchange exchange) {_		String transformedUrl = (isRemoteHost(targetUrl) ? targetUrl : exchange.transformUrl(targetUrl))__		ServerHttpResponse response = exchange.getResponse()__		response.getHeaders().setLocation(URI.create(transformedUrl))__		response.setStatusCode(getStatusCode())__		return Mono.empty()__	};send,a,redirect,back,to,the,http,client,param,target,url,the,target,url,to,redirect,to,param,exchange,current,exchange;protected,mono,void,send,redirect,string,target,url,server,web,exchange,exchange,string,transformed,url,is,remote,host,target,url,target,url,exchange,transform,url,target,url,server,http,response,response,exchange,get,response,response,get,headers,set,location,uri,create,transformed,url,response,set,status,code,get,status,code,return,mono,empty
RedirectView -> public void setHosts(@Nullable String... hosts);1500457438;Configure one or more hosts associated with the application._All other hosts will be considered external hosts._<p>In effect this provides a way turn off encoding via_{@link ServerHttpResponse#encodeUrl(String)} for URLs that have a_host and that host is not listed as a known host._<p>If not set (the default) all redirect URLs are encoded._@param hosts one or more application hosts;public void setHosts(@Nullable String... hosts) {_		this.hosts = hosts__	};configure,one,or,more,hosts,associated,with,the,application,all,other,hosts,will,be,considered,external,hosts,p,in,effect,this,provides,a,way,turn,off,encoding,via,link,server,http,response,encode,url,string,for,urls,that,have,a,host,and,that,host,is,not,listed,as,a,known,host,p,if,not,set,the,default,all,redirect,urls,are,encoded,param,hosts,one,or,more,application,hosts;public,void,set,hosts,nullable,string,hosts,this,hosts,hosts
RedirectView -> public void setHosts(@Nullable String... hosts);1500495747;Configure one or more hosts associated with the application._All other hosts will be considered external hosts._<p>In effect this provides a way turn off encoding via_{@link ServerHttpResponse#encodeUrl(String)} for URLs that have a_host and that host is not listed as a known host._<p>If not set (the default) all redirect URLs are encoded._@param hosts one or more application hosts;public void setHosts(@Nullable String... hosts) {_		this.hosts = hosts__	};configure,one,or,more,hosts,associated,with,the,application,all,other,hosts,will,be,considered,external,hosts,p,in,effect,this,provides,a,way,turn,off,encoding,via,link,server,http,response,encode,url,string,for,urls,that,have,a,host,and,that,host,is,not,listed,as,a,known,host,p,if,not,set,the,default,all,redirect,urls,are,encoded,param,hosts,one,or,more,application,hosts;public,void,set,hosts,nullable,string,hosts,this,hosts,hosts
RedirectView -> public void setHosts(@Nullable String... hosts);1504701549;Configure one or more hosts associated with the application._All other hosts will be considered external hosts._<p>In effect this provides a way turn off encoding via_{@link ServerHttpResponse#encodeUrl(String)} for URLs that have a_host and that host is not listed as a known host._<p>If not set (the default) all redirect URLs are encoded._@param hosts one or more application hosts;public void setHosts(@Nullable String... hosts) {_		this.hosts = hosts__	};configure,one,or,more,hosts,associated,with,the,application,all,other,hosts,will,be,considered,external,hosts,p,in,effect,this,provides,a,way,turn,off,encoding,via,link,server,http,response,encode,url,string,for,urls,that,have,a,host,and,that,host,is,not,listed,as,a,known,host,p,if,not,set,the,default,all,redirect,urls,are,encoded,param,hosts,one,or,more,application,hosts;public,void,set,hosts,nullable,string,hosts,this,hosts,hosts
RedirectView -> public void setHosts(@Nullable String... hosts);1516617801;Configure one or more hosts associated with the application._All other hosts will be considered external hosts._<p>In effect this provides a way turn off encoding for URLs that_have a host and that host is not listed as a known host._<p>If not set (the default) all redirect URLs are encoded._@param hosts one or more application hosts;public void setHosts(@Nullable String... hosts) {_		this.hosts = hosts__	};configure,one,or,more,hosts,associated,with,the,application,all,other,hosts,will,be,considered,external,hosts,p,in,effect,this,provides,a,way,turn,off,encoding,for,urls,that,have,a,host,and,that,host,is,not,listed,as,a,known,host,p,if,not,set,the,default,all,redirect,urls,are,encoded,param,hosts,one,or,more,application,hosts;public,void,set,hosts,nullable,string,hosts,this,hosts,hosts
RedirectView -> public void setHosts(@Nullable String... hosts);1519588127;Configure one or more hosts associated with the application._All other hosts will be considered external hosts._<p>In effect this provides a way turn off encoding for URLs that_have a host and that host is not listed as a known host._<p>If not set (the default) all redirect URLs are encoded._@param hosts one or more application hosts;public void setHosts(@Nullable String... hosts) {_		this.hosts = hosts__	};configure,one,or,more,hosts,associated,with,the,application,all,other,hosts,will,be,considered,external,hosts,p,in,effect,this,provides,a,way,turn,off,encoding,for,urls,that,have,a,host,and,that,host,is,not,listed,as,a,known,host,p,if,not,set,the,default,all,redirect,urls,are,encoded,param,hosts,one,or,more,application,hosts;public,void,set,hosts,nullable,string,hosts,this,hosts,hosts
RedirectView -> public void setHosts(@Nullable String... hosts);1530174524;Configure one or more hosts associated with the application._All other hosts will be considered external hosts._<p>In effect this provides a way turn off encoding for URLs that_have a host and that host is not listed as a known host._<p>If not set (the default) all redirect URLs are encoded._@param hosts one or more application hosts;public void setHosts(@Nullable String... hosts) {_		this.hosts = hosts__	};configure,one,or,more,hosts,associated,with,the,application,all,other,hosts,will,be,considered,external,hosts,p,in,effect,this,provides,a,way,turn,off,encoding,for,urls,that,have,a,host,and,that,host,is,not,listed,as,a,known,host,p,if,not,set,the,default,all,redirect,urls,are,encoded,param,hosts,one,or,more,application,hosts;public,void,set,hosts,nullable,string,hosts,this,hosts,hosts
RedirectView -> public void setHosts(@Nullable String... hosts);1533034998;Configure one or more hosts associated with the application._All other hosts will be considered external hosts._<p>In effect this provides a way turn off encoding for URLs that_have a host and that host is not listed as a known host._<p>If not set (the default) all redirect URLs are encoded._@param hosts one or more application hosts;public void setHosts(@Nullable String... hosts) {_		this.hosts = hosts__	};configure,one,or,more,hosts,associated,with,the,application,all,other,hosts,will,be,considered,external,hosts,p,in,effect,this,provides,a,way,turn,off,encoding,for,urls,that,have,a,host,and,that,host,is,not,listed,as,a,known,host,p,if,not,set,the,default,all,redirect,urls,are,encoded,param,hosts,one,or,more,application,hosts;public,void,set,hosts,nullable,string,hosts,this,hosts,hosts
RedirectView -> @Override 	protected Mono<Void> renderInternal( 			Map<String, Object> model, @Nullable MediaType contentType, ServerWebExchange exchange);1500457438;Convert model to request parameters and redirect to the given URL.;@Override_	protected Mono<Void> renderInternal(_			Map<String, Object> model, @Nullable MediaType contentType, ServerWebExchange exchange) {__		String targetUrl = createTargetUrl(model, exchange)__		return sendRedirect(targetUrl, exchange)__	};convert,model,to,request,parameters,and,redirect,to,the,given,url;override,protected,mono,void,render,internal,map,string,object,model,nullable,media,type,content,type,server,web,exchange,exchange,string,target,url,create,target,url,model,exchange,return,send,redirect,target,url,exchange
RedirectView -> @Override 	protected Mono<Void> renderInternal( 			Map<String, Object> model, @Nullable MediaType contentType, ServerWebExchange exchange);1500495747;Convert model to request parameters and redirect to the given URL.;@Override_	protected Mono<Void> renderInternal(_			Map<String, Object> model, @Nullable MediaType contentType, ServerWebExchange exchange) {__		String targetUrl = createTargetUrl(model, exchange)__		return sendRedirect(targetUrl, exchange)__	};convert,model,to,request,parameters,and,redirect,to,the,given,url;override,protected,mono,void,render,internal,map,string,object,model,nullable,media,type,content,type,server,web,exchange,exchange,string,target,url,create,target,url,model,exchange,return,send,redirect,target,url,exchange
RedirectView -> @Override 	protected Mono<Void> renderInternal( 			Map<String, Object> model, @Nullable MediaType contentType, ServerWebExchange exchange);1504701549;Convert model to request parameters and redirect to the given URL.;@Override_	protected Mono<Void> renderInternal(_			Map<String, Object> model, @Nullable MediaType contentType, ServerWebExchange exchange) {__		String targetUrl = createTargetUrl(model, exchange)__		return sendRedirect(targetUrl, exchange)__	};convert,model,to,request,parameters,and,redirect,to,the,given,url;override,protected,mono,void,render,internal,map,string,object,model,nullable,media,type,content,type,server,web,exchange,exchange,string,target,url,create,target,url,model,exchange,return,send,redirect,target,url,exchange
RedirectView -> @Override 	protected Mono<Void> renderInternal( 			Map<String, Object> model, @Nullable MediaType contentType, ServerWebExchange exchange);1516617801;Convert model to request parameters and redirect to the given URL.;@Override_	protected Mono<Void> renderInternal(_			Map<String, Object> model, @Nullable MediaType contentType, ServerWebExchange exchange) {__		String targetUrl = createTargetUrl(model, exchange)__		return sendRedirect(targetUrl, exchange)__	};convert,model,to,request,parameters,and,redirect,to,the,given,url;override,protected,mono,void,render,internal,map,string,object,model,nullable,media,type,content,type,server,web,exchange,exchange,string,target,url,create,target,url,model,exchange,return,send,redirect,target,url,exchange
RedirectView -> @Override 	protected Mono<Void> renderInternal( 			Map<String, Object> model, @Nullable MediaType contentType, ServerWebExchange exchange);1519588127;Convert model to request parameters and redirect to the given URL.;@Override_	protected Mono<Void> renderInternal(_			Map<String, Object> model, @Nullable MediaType contentType, ServerWebExchange exchange) {__		String targetUrl = createTargetUrl(model, exchange)__		return sendRedirect(targetUrl, exchange)__	};convert,model,to,request,parameters,and,redirect,to,the,given,url;override,protected,mono,void,render,internal,map,string,object,model,nullable,media,type,content,type,server,web,exchange,exchange,string,target,url,create,target,url,model,exchange,return,send,redirect,target,url,exchange
RedirectView -> @Override 	protected Mono<Void> renderInternal( 			Map<String, Object> model, @Nullable MediaType contentType, ServerWebExchange exchange);1530174524;Convert model to request parameters and redirect to the given URL.;@Override_	protected Mono<Void> renderInternal(_			Map<String, Object> model, @Nullable MediaType contentType, ServerWebExchange exchange) {__		String targetUrl = createTargetUrl(model, exchange)__		return sendRedirect(targetUrl, exchange)__	};convert,model,to,request,parameters,and,redirect,to,the,given,url;override,protected,mono,void,render,internal,map,string,object,model,nullable,media,type,content,type,server,web,exchange,exchange,string,target,url,create,target,url,model,exchange,return,send,redirect,target,url,exchange
RedirectView -> @Override 	protected Mono<Void> renderInternal( 			Map<String, Object> model, @Nullable MediaType contentType, ServerWebExchange exchange);1533034998;Convert model to request parameters and redirect to the given URL.;@Override_	protected Mono<Void> renderInternal(_			Map<String, Object> model, @Nullable MediaType contentType, ServerWebExchange exchange) {__		String targetUrl = createTargetUrl(model, exchange)__		return sendRedirect(targetUrl, exchange)__	};convert,model,to,request,parameters,and,redirect,to,the,given,url;override,protected,mono,void,render,internal,map,string,object,model,nullable,media,type,content,type,server,web,exchange,exchange,string,target,url,create,target,url,model,exchange,return,send,redirect,target,url,exchange
RedirectView -> public HttpStatus getStatusCode();1485986572;Get the redirect status code to use.;public HttpStatus getStatusCode() {_		return this.statusCode__	};get,the,redirect,status,code,to,use;public,http,status,get,status,code,return,this,status,code
RedirectView -> public HttpStatus getStatusCode();1495657865;Get the redirect status code to use.;public HttpStatus getStatusCode() {_		return this.statusCode__	};get,the,redirect,status,code,to,use;public,http,status,get,status,code,return,this,status,code
RedirectView -> public HttpStatus getStatusCode();1500457438;Get the redirect status code to use.;public HttpStatus getStatusCode() {_		return this.statusCode__	};get,the,redirect,status,code,to,use;public,http,status,get,status,code,return,this,status,code
RedirectView -> public HttpStatus getStatusCode();1500495747;Get the redirect status code to use.;public HttpStatus getStatusCode() {_		return this.statusCode__	};get,the,redirect,status,code,to,use;public,http,status,get,status,code,return,this,status,code
RedirectView -> public HttpStatus getStatusCode();1504701549;Get the redirect status code to use.;public HttpStatus getStatusCode() {_		return this.statusCode__	};get,the,redirect,status,code,to,use;public,http,status,get,status,code,return,this,status,code
RedirectView -> public HttpStatus getStatusCode();1516617801;Get the redirect status code to use.;public HttpStatus getStatusCode() {_		return this.statusCode__	};get,the,redirect,status,code,to,use;public,http,status,get,status,code,return,this,status,code
RedirectView -> public HttpStatus getStatusCode();1519588127;Get the redirect status code to use.;public HttpStatus getStatusCode() {_		return this.statusCode__	};get,the,redirect,status,code,to,use;public,http,status,get,status,code,return,this,status,code
RedirectView -> public HttpStatus getStatusCode();1530174524;Get the redirect status code to use.;public HttpStatus getStatusCode() {_		return this.statusCode__	};get,the,redirect,status,code,to,use;public,http,status,get,status,code,return,this,status,code
RedirectView -> public HttpStatus getStatusCode();1533034998;Get the redirect status code to use.;public HttpStatus getStatusCode() {_		return this.statusCode__	};get,the,redirect,status,code,to,use;public,http,status,get,status,code,return,this,status,code
RedirectView -> protected StringBuilder expandTargetUrlTemplate(String targetUrl, 			Map<String, Object> model, Map<String, String> uriVariables);1485986572;Expand URI template variables in the target URL with either model_attribute values or as a fallback with URI variable values from the_current request. Values are encoded.;protected StringBuilder expandTargetUrlTemplate(String targetUrl,_			Map<String, Object> model, Map<String, String> uriVariables) {__		Matcher matcher = URI_TEMPLATE_VARIABLE_PATTERN.matcher(targetUrl)__		boolean found = matcher.find()__		if (!found) {_			return new StringBuilder(targetUrl)__		}_		StringBuilder result = new StringBuilder()__		int endLastMatch = 0__		while (found) {_			String name = matcher.group(1)__			Object value = (model.containsKey(name) ? model.get(name) : uriVariables.get(name))__			Assert.notNull(value, "No value for URI variable '" + name + "'")__			result.append(targetUrl.substring(endLastMatch, matcher.start()))__			result.append(encodeUriVariable(value.toString()))__			endLastMatch = matcher.end()__			found = matcher.find()__		}_		result.append(targetUrl.substring(endLastMatch, targetUrl.length()))__		return result__	};expand,uri,template,variables,in,the,target,url,with,either,model,attribute,values,or,as,a,fallback,with,uri,variable,values,from,the,current,request,values,are,encoded;protected,string,builder,expand,target,url,template,string,target,url,map,string,object,model,map,string,string,uri,variables,matcher,matcher,matcher,target,url,boolean,found,matcher,find,if,found,return,new,string,builder,target,url,string,builder,result,new,string,builder,int,end,last,match,0,while,found,string,name,matcher,group,1,object,value,model,contains,key,name,model,get,name,uri,variables,get,name,assert,not,null,value,no,value,for,uri,variable,name,result,append,target,url,substring,end,last,match,matcher,start,result,append,encode,uri,variable,value,to,string,end,last,match,matcher,end,found,matcher,find,result,append,target,url,substring,end,last,match,target,url,length,return,result
RedirectView -> protected StringBuilder expandTargetUrlTemplate(String targetUrl, 			Map<String, Object> model, Map<String, String> uriVariables);1495657865;Expand URI template variables in the target URL with either model_attribute values or as a fallback with URI variable values from the_current request. Values are encoded.;protected StringBuilder expandTargetUrlTemplate(String targetUrl,_			Map<String, Object> model, Map<String, String> uriVariables) {__		Matcher matcher = URI_TEMPLATE_VARIABLE_PATTERN.matcher(targetUrl)__		boolean found = matcher.find()__		if (!found) {_			return new StringBuilder(targetUrl)__		}_		StringBuilder result = new StringBuilder()__		int endLastMatch = 0__		while (found) {_			String name = matcher.group(1)__			Object value = (model.containsKey(name) ? model.get(name) : uriVariables.get(name))__			Assert.notNull(value, "No value for URI variable '" + name + "'")__			result.append(targetUrl.substring(endLastMatch, matcher.start()))__			result.append(encodeUriVariable(value.toString()))__			endLastMatch = matcher.end()__			found = matcher.find()__		}_		result.append(targetUrl.substring(endLastMatch, targetUrl.length()))__		return result__	};expand,uri,template,variables,in,the,target,url,with,either,model,attribute,values,or,as,a,fallback,with,uri,variable,values,from,the,current,request,values,are,encoded;protected,string,builder,expand,target,url,template,string,target,url,map,string,object,model,map,string,string,uri,variables,matcher,matcher,matcher,target,url,boolean,found,matcher,find,if,found,return,new,string,builder,target,url,string,builder,result,new,string,builder,int,end,last,match,0,while,found,string,name,matcher,group,1,object,value,model,contains,key,name,model,get,name,uri,variables,get,name,assert,not,null,value,no,value,for,uri,variable,name,result,append,target,url,substring,end,last,match,matcher,start,result,append,encode,uri,variable,value,to,string,end,last,match,matcher,end,found,matcher,find,result,append,target,url,substring,end,last,match,target,url,length,return,result
RedirectView -> protected StringBuilder expandTargetUrlTemplate(String targetUrl, 			Map<String, Object> model, Map<String, String> uriVariables);1496837955;Expand URI template variables in the target URL with either model_attribute values or as a fallback with URI variable values from the_current request. Values are encoded.;protected StringBuilder expandTargetUrlTemplate(String targetUrl,_			Map<String, Object> model, Map<String, String> uriVariables) {__		Matcher matcher = URI_TEMPLATE_VARIABLE_PATTERN.matcher(targetUrl)__		boolean found = matcher.find()__		if (!found) {_			return new StringBuilder(targetUrl)__		}_		StringBuilder result = new StringBuilder()__		int endLastMatch = 0__		while (found) {_			String name = matcher.group(1)__			Object value = (model.containsKey(name) ? model.get(name) : uriVariables.get(name))__			Assert.notNull(value, "No value for URI variable '" + name + "'")__			result.append(targetUrl.substring(endLastMatch, matcher.start()))__			result.append(encodeUriVariable(value.toString()))__			endLastMatch = matcher.end()__			found = matcher.find()__		}_		result.append(targetUrl.substring(endLastMatch, targetUrl.length()))__		return result__	};expand,uri,template,variables,in,the,target,url,with,either,model,attribute,values,or,as,a,fallback,with,uri,variable,values,from,the,current,request,values,are,encoded;protected,string,builder,expand,target,url,template,string,target,url,map,string,object,model,map,string,string,uri,variables,matcher,matcher,matcher,target,url,boolean,found,matcher,find,if,found,return,new,string,builder,target,url,string,builder,result,new,string,builder,int,end,last,match,0,while,found,string,name,matcher,group,1,object,value,model,contains,key,name,model,get,name,uri,variables,get,name,assert,not,null,value,no,value,for,uri,variable,name,result,append,target,url,substring,end,last,match,matcher,start,result,append,encode,uri,variable,value,to,string,end,last,match,matcher,end,found,matcher,find,result,append,target,url,substring,end,last,match,target,url,length,return,result
RedirectView -> protected StringBuilder expandTargetUrlTemplate(String targetUrl, 			Map<String, Object> model, Map<String, String> uriVariables);1497232764;Expand URI template variables in the target URL with either model_attribute values or as a fallback with URI variable values from the_current request. Values are encoded.;protected StringBuilder expandTargetUrlTemplate(String targetUrl,_			Map<String, Object> model, Map<String, String> uriVariables) {__		Matcher matcher = URI_TEMPLATE_VARIABLE_PATTERN.matcher(targetUrl)__		boolean found = matcher.find()__		if (!found) {_			return new StringBuilder(targetUrl)__		}_		StringBuilder result = new StringBuilder()__		int endLastMatch = 0__		while (found) {_			String name = matcher.group(1)__			Object value = (model.containsKey(name) ? model.get(name) : uriVariables.get(name))__			Assert.notNull(value, "No value for URI variable '" + name + "'")__			result.append(targetUrl.substring(endLastMatch, matcher.start()))__			result.append(encodeUriVariable(value.toString()))__			endLastMatch = matcher.end()__			found = matcher.find()__		}_		result.append(targetUrl.substring(endLastMatch, targetUrl.length()))__		return result__	};expand,uri,template,variables,in,the,target,url,with,either,model,attribute,values,or,as,a,fallback,with,uri,variable,values,from,the,current,request,values,are,encoded;protected,string,builder,expand,target,url,template,string,target,url,map,string,object,model,map,string,string,uri,variables,matcher,matcher,matcher,target,url,boolean,found,matcher,find,if,found,return,new,string,builder,target,url,string,builder,result,new,string,builder,int,end,last,match,0,while,found,string,name,matcher,group,1,object,value,model,contains,key,name,model,get,name,uri,variables,get,name,assert,not,null,value,no,value,for,uri,variable,name,result,append,target,url,substring,end,last,match,matcher,start,result,append,encode,uri,variable,value,to,string,end,last,match,matcher,end,found,matcher,find,result,append,target,url,substring,end,last,match,target,url,length,return,result
RedirectView -> protected StringBuilder expandTargetUrlTemplate(String targetUrl, 			Map<String, Object> model, Map<String, String> uriVariables);1497275505;Expand URI template variables in the target URL with either model_attribute values or as a fallback with URI variable values from the_current request. Values are encoded.;protected StringBuilder expandTargetUrlTemplate(String targetUrl,_			Map<String, Object> model, Map<String, String> uriVariables) {__		Matcher matcher = URI_TEMPLATE_VARIABLE_PATTERN.matcher(targetUrl)__		boolean found = matcher.find()__		if (!found) {_			return new StringBuilder(targetUrl)__		}_		StringBuilder result = new StringBuilder()__		int endLastMatch = 0__		while (found) {_			String name = matcher.group(1)__			Object value = (model.containsKey(name) ? model.get(name) : uriVariables.get(name))__			Assert.notNull(value, "No value for URI variable '" + name + "'")__			result.append(targetUrl.substring(endLastMatch, matcher.start()))__			result.append(encodeUriVariable(value.toString()))__			endLastMatch = matcher.end()__			found = matcher.find()__		}_		result.append(targetUrl.substring(endLastMatch, targetUrl.length()))__		return result__	};expand,uri,template,variables,in,the,target,url,with,either,model,attribute,values,or,as,a,fallback,with,uri,variable,values,from,the,current,request,values,are,encoded;protected,string,builder,expand,target,url,template,string,target,url,map,string,object,model,map,string,string,uri,variables,matcher,matcher,matcher,target,url,boolean,found,matcher,find,if,found,return,new,string,builder,target,url,string,builder,result,new,string,builder,int,end,last,match,0,while,found,string,name,matcher,group,1,object,value,model,contains,key,name,model,get,name,uri,variables,get,name,assert,not,null,value,no,value,for,uri,variable,name,result,append,target,url,substring,end,last,match,matcher,start,result,append,encode,uri,variable,value,to,string,end,last,match,matcher,end,found,matcher,find,result,append,target,url,substring,end,last,match,target,url,length,return,result
RedirectView -> protected StringBuilder expandTargetUrlTemplate(String targetUrl, 			Map<String, Object> model, Map<String, String> uriVariables);1498762530;Expand URI template variables in the target URL with either model_attribute values or as a fallback with URI variable values from the_current request. Values are encoded.;protected StringBuilder expandTargetUrlTemplate(String targetUrl,_			Map<String, Object> model, Map<String, String> uriVariables) {__		Matcher matcher = URI_TEMPLATE_VARIABLE_PATTERN.matcher(targetUrl)__		boolean found = matcher.find()__		if (!found) {_			return new StringBuilder(targetUrl)__		}_		StringBuilder result = new StringBuilder()__		int endLastMatch = 0__		while (found) {_			String name = matcher.group(1)__			Object value = (model.containsKey(name) ? model.get(name) : uriVariables.get(name))__			Assert.notNull(value, "No value for URI variable '" + name + "'")__			result.append(targetUrl.substring(endLastMatch, matcher.start()))__			result.append(encodeUriVariable(value.toString()))__			endLastMatch = matcher.end()__			found = matcher.find()__		}_		result.append(targetUrl.substring(endLastMatch, targetUrl.length()))__		return result__	};expand,uri,template,variables,in,the,target,url,with,either,model,attribute,values,or,as,a,fallback,with,uri,variable,values,from,the,current,request,values,are,encoded;protected,string,builder,expand,target,url,template,string,target,url,map,string,object,model,map,string,string,uri,variables,matcher,matcher,matcher,target,url,boolean,found,matcher,find,if,found,return,new,string,builder,target,url,string,builder,result,new,string,builder,int,end,last,match,0,while,found,string,name,matcher,group,1,object,value,model,contains,key,name,model,get,name,uri,variables,get,name,assert,not,null,value,no,value,for,uri,variable,name,result,append,target,url,substring,end,last,match,matcher,start,result,append,encode,uri,variable,value,to,string,end,last,match,matcher,end,found,matcher,find,result,append,target,url,substring,end,last,match,target,url,length,return,result
RedirectView -> protected StringBuilder expandTargetUrlTemplate(String targetUrl, 			Map<String, Object> model, Map<String, String> uriVariables);1500448076;Expand URI template variables in the target URL with either model_attribute values or as a fallback with URI variable values from the_current request. Values are encoded.;protected StringBuilder expandTargetUrlTemplate(String targetUrl,_			Map<String, Object> model, Map<String, String> uriVariables) {__		Matcher matcher = URI_TEMPLATE_VARIABLE_PATTERN.matcher(targetUrl)__		boolean found = matcher.find()__		if (!found) {_			return new StringBuilder(targetUrl)__		}_		StringBuilder result = new StringBuilder()__		int endLastMatch = 0__		while (found) {_			String name = matcher.group(1)__			Object value = (model.containsKey(name) ? model.get(name) : uriVariables.get(name))__			Assert.notNull(value, "No value for URI variable '" + name + "'")__			result.append(targetUrl.substring(endLastMatch, matcher.start()))__			result.append(encodeUriVariable(value.toString()))__			endLastMatch = matcher.end()__			found = matcher.find()__		}_		result.append(targetUrl.substring(endLastMatch, targetUrl.length()))__		return result__	};expand,uri,template,variables,in,the,target,url,with,either,model,attribute,values,or,as,a,fallback,with,uri,variable,values,from,the,current,request,values,are,encoded;protected,string,builder,expand,target,url,template,string,target,url,map,string,object,model,map,string,string,uri,variables,matcher,matcher,matcher,target,url,boolean,found,matcher,find,if,found,return,new,string,builder,target,url,string,builder,result,new,string,builder,int,end,last,match,0,while,found,string,name,matcher,group,1,object,value,model,contains,key,name,model,get,name,uri,variables,get,name,assert,not,null,value,no,value,for,uri,variable,name,result,append,target,url,substring,end,last,match,matcher,start,result,append,encode,uri,variable,value,to,string,end,last,match,matcher,end,found,matcher,find,result,append,target,url,substring,end,last,match,target,url,length,return,result
RedirectView -> protected StringBuilder expandTargetUrlTemplate(String targetUrl, 			Map<String, Object> model, Map<String, String> uriVariables);1500457438;Expand URI template variables in the target URL with either model_attribute values or as a fallback with URI variable values from the_current request. Values are encoded.;protected StringBuilder expandTargetUrlTemplate(String targetUrl,_			Map<String, Object> model, Map<String, String> uriVariables) {__		Matcher matcher = URI_TEMPLATE_VARIABLE_PATTERN.matcher(targetUrl)__		boolean found = matcher.find()__		if (!found) {_			return new StringBuilder(targetUrl)__		}_		StringBuilder result = new StringBuilder()__		int endLastMatch = 0__		while (found) {_			String name = matcher.group(1)__			Object value = (model.containsKey(name) ? model.get(name) : uriVariables.get(name))__			Assert.notNull(value, "No value for URI variable '" + name + "'")__			result.append(targetUrl.substring(endLastMatch, matcher.start()))__			result.append(encodeUriVariable(value.toString()))__			endLastMatch = matcher.end()__			found = matcher.find()__		}_		result.append(targetUrl.substring(endLastMatch, targetUrl.length()))__		return result__	};expand,uri,template,variables,in,the,target,url,with,either,model,attribute,values,or,as,a,fallback,with,uri,variable,values,from,the,current,request,values,are,encoded;protected,string,builder,expand,target,url,template,string,target,url,map,string,object,model,map,string,string,uri,variables,matcher,matcher,matcher,target,url,boolean,found,matcher,find,if,found,return,new,string,builder,target,url,string,builder,result,new,string,builder,int,end,last,match,0,while,found,string,name,matcher,group,1,object,value,model,contains,key,name,model,get,name,uri,variables,get,name,assert,not,null,value,no,value,for,uri,variable,name,result,append,target,url,substring,end,last,match,matcher,start,result,append,encode,uri,variable,value,to,string,end,last,match,matcher,end,found,matcher,find,result,append,target,url,substring,end,last,match,target,url,length,return,result
RedirectView -> protected StringBuilder expandTargetUrlTemplate(String targetUrl, 			Map<String, Object> model, Map<String, String> uriVariables);1500495747;Expand URI template variables in the target URL with either model_attribute values or as a fallback with URI variable values from the_current request. Values are encoded.;protected StringBuilder expandTargetUrlTemplate(String targetUrl,_			Map<String, Object> model, Map<String, String> uriVariables) {__		Matcher matcher = URI_TEMPLATE_VARIABLE_PATTERN.matcher(targetUrl)__		boolean found = matcher.find()__		if (!found) {_			return new StringBuilder(targetUrl)__		}_		StringBuilder result = new StringBuilder()__		int endLastMatch = 0__		while (found) {_			String name = matcher.group(1)__			Object value = (model.containsKey(name) ? model.get(name) : uriVariables.get(name))__			Assert.notNull(value, "No value for URI variable '" + name + "'")__			result.append(targetUrl.substring(endLastMatch, matcher.start()))__			result.append(encodeUriVariable(value.toString()))__			endLastMatch = matcher.end()__			found = matcher.find()__		}_		result.append(targetUrl.substring(endLastMatch, targetUrl.length()))__		return result__	};expand,uri,template,variables,in,the,target,url,with,either,model,attribute,values,or,as,a,fallback,with,uri,variable,values,from,the,current,request,values,are,encoded;protected,string,builder,expand,target,url,template,string,target,url,map,string,object,model,map,string,string,uri,variables,matcher,matcher,matcher,target,url,boolean,found,matcher,find,if,found,return,new,string,builder,target,url,string,builder,result,new,string,builder,int,end,last,match,0,while,found,string,name,matcher,group,1,object,value,model,contains,key,name,model,get,name,uri,variables,get,name,assert,not,null,value,no,value,for,uri,variable,name,result,append,target,url,substring,end,last,match,matcher,start,result,append,encode,uri,variable,value,to,string,end,last,match,matcher,end,found,matcher,find,result,append,target,url,substring,end,last,match,target,url,length,return,result
RedirectView -> protected StringBuilder expandTargetUrlTemplate(String targetUrl, 			Map<String, Object> model, Map<String, String> uriVariables);1504701549;Expand URI template variables in the target URL with either model_attribute values or as a fallback with URI variable values from the_current request. Values are encoded.;protected StringBuilder expandTargetUrlTemplate(String targetUrl,_			Map<String, Object> model, Map<String, String> uriVariables) {__		Matcher matcher = URI_TEMPLATE_VARIABLE_PATTERN.matcher(targetUrl)__		boolean found = matcher.find()__		if (!found) {_			return new StringBuilder(targetUrl)__		}_		StringBuilder result = new StringBuilder()__		int endLastMatch = 0__		while (found) {_			String name = matcher.group(1)__			Object value = (model.containsKey(name) ? model.get(name) : uriVariables.get(name))__			Assert.notNull(value, "No value for URI variable '" + name + "'")__			result.append(targetUrl.substring(endLastMatch, matcher.start()))__			result.append(encodeUriVariable(value.toString()))__			endLastMatch = matcher.end()__			found = matcher.find()__		}_		result.append(targetUrl.substring(endLastMatch, targetUrl.length()))__		return result__	};expand,uri,template,variables,in,the,target,url,with,either,model,attribute,values,or,as,a,fallback,with,uri,variable,values,from,the,current,request,values,are,encoded;protected,string,builder,expand,target,url,template,string,target,url,map,string,object,model,map,string,string,uri,variables,matcher,matcher,matcher,target,url,boolean,found,matcher,find,if,found,return,new,string,builder,target,url,string,builder,result,new,string,builder,int,end,last,match,0,while,found,string,name,matcher,group,1,object,value,model,contains,key,name,model,get,name,uri,variables,get,name,assert,not,null,value,no,value,for,uri,variable,name,result,append,target,url,substring,end,last,match,matcher,start,result,append,encode,uri,variable,value,to,string,end,last,match,matcher,end,found,matcher,find,result,append,target,url,substring,end,last,match,target,url,length,return,result
RedirectView -> protected StringBuilder expandTargetUrlTemplate(String targetUrl, 			Map<String, Object> model, Map<String, String> uriVariables);1516617801;Expand URI template variables in the target URL with either model_attribute values or as a fallback with URI variable values from the_current request. Values are encoded.;protected StringBuilder expandTargetUrlTemplate(String targetUrl,_			Map<String, Object> model, Map<String, String> uriVariables) {__		Matcher matcher = URI_TEMPLATE_VARIABLE_PATTERN.matcher(targetUrl)__		boolean found = matcher.find()__		if (!found) {_			return new StringBuilder(targetUrl)__		}_		StringBuilder result = new StringBuilder()__		int endLastMatch = 0__		while (found) {_			String name = matcher.group(1)__			Object value = (model.containsKey(name) ? model.get(name) : uriVariables.get(name))__			Assert.notNull(value, "No value for URI variable '" + name + "'")__			result.append(targetUrl.substring(endLastMatch, matcher.start()))__			result.append(encodeUriVariable(value.toString()))__			endLastMatch = matcher.end()__			found = matcher.find()__		}_		result.append(targetUrl.substring(endLastMatch, targetUrl.length()))__		return result__	};expand,uri,template,variables,in,the,target,url,with,either,model,attribute,values,or,as,a,fallback,with,uri,variable,values,from,the,current,request,values,are,encoded;protected,string,builder,expand,target,url,template,string,target,url,map,string,object,model,map,string,string,uri,variables,matcher,matcher,matcher,target,url,boolean,found,matcher,find,if,found,return,new,string,builder,target,url,string,builder,result,new,string,builder,int,end,last,match,0,while,found,string,name,matcher,group,1,object,value,model,contains,key,name,model,get,name,uri,variables,get,name,assert,not,null,value,no,value,for,uri,variable,name,result,append,target,url,substring,end,last,match,matcher,start,result,append,encode,uri,variable,value,to,string,end,last,match,matcher,end,found,matcher,find,result,append,target,url,substring,end,last,match,target,url,length,return,result
RedirectView -> protected StringBuilder expandTargetUrlTemplate(String targetUrl, 			Map<String, Object> model, Map<String, String> uriVariables);1519588127;Expand URI template variables in the target URL with either model_attribute values or as a fallback with URI variable values from the_current request. Values are encoded.;protected StringBuilder expandTargetUrlTemplate(String targetUrl,_			Map<String, Object> model, Map<String, String> uriVariables) {__		Matcher matcher = URI_TEMPLATE_VARIABLE_PATTERN.matcher(targetUrl)__		boolean found = matcher.find()__		if (!found) {_			return new StringBuilder(targetUrl)__		}_		StringBuilder result = new StringBuilder()__		int endLastMatch = 0__		while (found) {_			String name = matcher.group(1)__			Object value = (model.containsKey(name) ? model.get(name) : uriVariables.get(name))__			Assert.notNull(value, "No value for URI variable '" + name + "'")__			result.append(targetUrl.substring(endLastMatch, matcher.start()))__			result.append(encodeUriVariable(value.toString()))__			endLastMatch = matcher.end()__			found = matcher.find()__		}_		result.append(targetUrl.substring(endLastMatch, targetUrl.length()))__		return result__	};expand,uri,template,variables,in,the,target,url,with,either,model,attribute,values,or,as,a,fallback,with,uri,variable,values,from,the,current,request,values,are,encoded;protected,string,builder,expand,target,url,template,string,target,url,map,string,object,model,map,string,string,uri,variables,matcher,matcher,matcher,target,url,boolean,found,matcher,find,if,found,return,new,string,builder,target,url,string,builder,result,new,string,builder,int,end,last,match,0,while,found,string,name,matcher,group,1,object,value,model,contains,key,name,model,get,name,uri,variables,get,name,assert,not,null,value,no,value,for,uri,variable,name,result,append,target,url,substring,end,last,match,matcher,start,result,append,encode,uri,variable,value,to,string,end,last,match,matcher,end,found,matcher,find,result,append,target,url,substring,end,last,match,target,url,length,return,result
RedirectView -> protected StringBuilder expandTargetUrlTemplate(String targetUrl, 			Map<String, Object> model, Map<String, String> uriVariables);1530174524;Expand URI template variables in the target URL with either model_attribute values or as a fallback with URI variable values from the_current request. Values are encoded.;protected StringBuilder expandTargetUrlTemplate(String targetUrl,_			Map<String, Object> model, Map<String, String> uriVariables) {__		Matcher matcher = URI_TEMPLATE_VARIABLE_PATTERN.matcher(targetUrl)__		boolean found = matcher.find()__		if (!found) {_			return new StringBuilder(targetUrl)__		}_		StringBuilder result = new StringBuilder()__		int endLastMatch = 0__		while (found) {_			String name = matcher.group(1)__			Object value = (model.containsKey(name) ? model.get(name) : uriVariables.get(name))__			Assert.notNull(value, "No value for URI variable '" + name + "'")__			result.append(targetUrl.substring(endLastMatch, matcher.start()))__			result.append(encodeUriVariable(value.toString()))__			endLastMatch = matcher.end()__			found = matcher.find()__		}_		result.append(targetUrl.substring(endLastMatch, targetUrl.length()))__		return result__	};expand,uri,template,variables,in,the,target,url,with,either,model,attribute,values,or,as,a,fallback,with,uri,variable,values,from,the,current,request,values,are,encoded;protected,string,builder,expand,target,url,template,string,target,url,map,string,object,model,map,string,string,uri,variables,matcher,matcher,matcher,target,url,boolean,found,matcher,find,if,found,return,new,string,builder,target,url,string,builder,result,new,string,builder,int,end,last,match,0,while,found,string,name,matcher,group,1,object,value,model,contains,key,name,model,get,name,uri,variables,get,name,assert,not,null,value,no,value,for,uri,variable,name,result,append,target,url,substring,end,last,match,matcher,start,result,append,encode,uri,variable,value,to,string,end,last,match,matcher,end,found,matcher,find,result,append,target,url,substring,end,last,match,target,url,length,return,result
RedirectView -> protected StringBuilder expandTargetUrlTemplate(String targetUrl, 			Map<String, Object> model, Map<String, String> uriVariables);1533034998;Expand URI template variables in the target URL with either model_attribute values or as a fallback with URI variable values from the_current request. Values are encoded.;protected StringBuilder expandTargetUrlTemplate(String targetUrl,_			Map<String, Object> model, Map<String, String> uriVariables) {__		Matcher matcher = URI_TEMPLATE_VARIABLE_PATTERN.matcher(targetUrl)__		boolean found = matcher.find()__		if (!found) {_			return new StringBuilder(targetUrl)__		}_		StringBuilder result = new StringBuilder()__		int endLastMatch = 0__		while (found) {_			String name = matcher.group(1)__			Object value = (model.containsKey(name) ? model.get(name) : uriVariables.get(name))__			Assert.notNull(value, () -> "No value for URI variable '" + name + "'")__			result.append(targetUrl.substring(endLastMatch, matcher.start()))__			result.append(encodeUriVariable(value.toString()))__			endLastMatch = matcher.end()__			found = matcher.find()__		}_		result.append(targetUrl.substring(endLastMatch, targetUrl.length()))__		return result__	};expand,uri,template,variables,in,the,target,url,with,either,model,attribute,values,or,as,a,fallback,with,uri,variable,values,from,the,current,request,values,are,encoded;protected,string,builder,expand,target,url,template,string,target,url,map,string,object,model,map,string,string,uri,variables,matcher,matcher,matcher,target,url,boolean,found,matcher,find,if,found,return,new,string,builder,target,url,string,builder,result,new,string,builder,int,end,last,match,0,while,found,string,name,matcher,group,1,object,value,model,contains,key,name,model,get,name,uri,variables,get,name,assert,not,null,value,no,value,for,uri,variable,name,result,append,target,url,substring,end,last,match,matcher,start,result,append,encode,uri,variable,value,to,string,end,last,match,matcher,end,found,matcher,find,result,append,target,url,substring,end,last,match,target,url,length,return,result
RedirectView -> protected final String createTargetUrl(Map<String, Object> model, ServerWebExchange exchange);1485986572;Create the target URL and, if necessary, pre-pend the contextPath, expand_URI template variables, append the current request query, and apply the_configured {@link #getRequestDataValueProcessor()_RequestDataValueProcessor}.;protected final String createTargetUrl(Map<String, Object> model, ServerWebExchange exchange) {__		StringBuilder targetUrl = new StringBuilder()__		if (isContextRelative() && getUrl().startsWith("/")) {_			targetUrl.append(exchange.getRequest().getContextPath())__		}_		targetUrl.append(getUrl())___		if (StringUtils.hasText(targetUrl)) {_			Map<String, String> uriVars = getCurrentUriVariables(exchange)__			targetUrl = expandTargetUrlTemplate(targetUrl.toString(), model, uriVars)__		}__		if (isPropagateQuery()) {_			targetUrl = appendCurrentRequestQuery(targetUrl.toString(), exchange.getRequest())__		}__		String result = targetUrl.toString()___		RequestDataValueProcessor processor = getRequestDataValueProcessor()__		return (processor != null ? processor.processUrl(exchange, result) : result)__	};create,the,target,url,and,if,necessary,pre,pend,the,context,path,expand,uri,template,variables,append,the,current,request,query,and,apply,the,configured,link,get,request,data,value,processor,request,data,value,processor;protected,final,string,create,target,url,map,string,object,model,server,web,exchange,exchange,string,builder,target,url,new,string,builder,if,is,context,relative,get,url,starts,with,target,url,append,exchange,get,request,get,context,path,target,url,append,get,url,if,string,utils,has,text,target,url,map,string,string,uri,vars,get,current,uri,variables,exchange,target,url,expand,target,url,template,target,url,to,string,model,uri,vars,if,is,propagate,query,target,url,append,current,request,query,target,url,to,string,exchange,get,request,string,result,target,url,to,string,request,data,value,processor,processor,get,request,data,value,processor,return,processor,null,processor,process,url,exchange,result,result
RedirectView -> protected final String createTargetUrl(Map<String, Object> model, ServerWebExchange exchange);1495657865;Create the target URL and, if necessary, pre-pend the contextPath, expand_URI template variables, append the current request query, and apply the_configured {@link #getRequestDataValueProcessor()_RequestDataValueProcessor}.;protected final String createTargetUrl(Map<String, Object> model, ServerWebExchange exchange) {__		StringBuilder targetUrl = new StringBuilder()__		if (isContextRelative() && getUrl().startsWith("/")) {_			targetUrl.append(exchange.getRequest().getContextPath())__		}_		targetUrl.append(getUrl())___		if (StringUtils.hasText(targetUrl)) {_			Map<String, String> uriVars = getCurrentUriVariables(exchange)__			targetUrl = expandTargetUrlTemplate(targetUrl.toString(), model, uriVars)__		}__		if (isPropagateQuery()) {_			targetUrl = appendCurrentRequestQuery(targetUrl.toString(), exchange.getRequest())__		}__		String result = targetUrl.toString()___		RequestDataValueProcessor processor = getRequestDataValueProcessor()__		return (processor != null ? processor.processUrl(exchange, result) : result)__	};create,the,target,url,and,if,necessary,pre,pend,the,context,path,expand,uri,template,variables,append,the,current,request,query,and,apply,the,configured,link,get,request,data,value,processor,request,data,value,processor;protected,final,string,create,target,url,map,string,object,model,server,web,exchange,exchange,string,builder,target,url,new,string,builder,if,is,context,relative,get,url,starts,with,target,url,append,exchange,get,request,get,context,path,target,url,append,get,url,if,string,utils,has,text,target,url,map,string,string,uri,vars,get,current,uri,variables,exchange,target,url,expand,target,url,template,target,url,to,string,model,uri,vars,if,is,propagate,query,target,url,append,current,request,query,target,url,to,string,exchange,get,request,string,result,target,url,to,string,request,data,value,processor,processor,get,request,data,value,processor,return,processor,null,processor,process,url,exchange,result,result
RedirectView -> protected final String createTargetUrl(Map<String, Object> model, ServerWebExchange exchange);1496837955;Create the target URL and, if necessary, pre-pend the contextPath, expand_URI template variables, append the current request query, and apply the_configured {@link #getRequestDataValueProcessor()_RequestDataValueProcessor}.;protected final String createTargetUrl(Map<String, Object> model, ServerWebExchange exchange) {_		String url = getUrl()__		Assert.state(url != null, "'url' not set")___		StringBuilder targetUrl = new StringBuilder()__		if (isContextRelative() && url.startsWith("/")) {_			targetUrl.append(exchange.getRequest().getContextPath())__		}_		targetUrl.append(url)___		if (StringUtils.hasText(targetUrl)) {_			Map<String, String> uriVars = getCurrentUriVariables(exchange)__			targetUrl = expandTargetUrlTemplate(targetUrl.toString(), model, uriVars)__		}__		if (isPropagateQuery()) {_			targetUrl = appendCurrentRequestQuery(targetUrl.toString(), exchange.getRequest())__		}__		String result = targetUrl.toString()___		RequestDataValueProcessor processor = getRequestDataValueProcessor()__		return (processor != null ? processor.processUrl(exchange, result) : result)__	};create,the,target,url,and,if,necessary,pre,pend,the,context,path,expand,uri,template,variables,append,the,current,request,query,and,apply,the,configured,link,get,request,data,value,processor,request,data,value,processor;protected,final,string,create,target,url,map,string,object,model,server,web,exchange,exchange,string,url,get,url,assert,state,url,null,url,not,set,string,builder,target,url,new,string,builder,if,is,context,relative,url,starts,with,target,url,append,exchange,get,request,get,context,path,target,url,append,url,if,string,utils,has,text,target,url,map,string,string,uri,vars,get,current,uri,variables,exchange,target,url,expand,target,url,template,target,url,to,string,model,uri,vars,if,is,propagate,query,target,url,append,current,request,query,target,url,to,string,exchange,get,request,string,result,target,url,to,string,request,data,value,processor,processor,get,request,data,value,processor,return,processor,null,processor,process,url,exchange,result,result
RedirectView -> protected final String createTargetUrl(Map<String, Object> model, ServerWebExchange exchange);1497232764;Create the target URL and, if necessary, pre-pend the contextPath, expand_URI template variables, append the current request query, and apply the_configured {@link #getRequestDataValueProcessor()_RequestDataValueProcessor}.;protected final String createTargetUrl(Map<String, Object> model, ServerWebExchange exchange) {_		String url = getUrl()__		Assert.state(url != null, "'url' not set")___		ServerHttpRequest request = exchange.getRequest()___		StringBuilder targetUrl = new StringBuilder()__		if (isContextRelative() && url.startsWith("/")) {_			targetUrl.append(request.getPath().contextPath().value())__		}_		targetUrl.append(url)___		if (StringUtils.hasText(targetUrl)) {_			Map<String, String> uriVars = getCurrentUriVariables(exchange)__			targetUrl = expandTargetUrlTemplate(targetUrl.toString(), model, uriVars)__		}__		if (isPropagateQuery()) {_			targetUrl = appendCurrentRequestQuery(targetUrl.toString(), request)__		}__		String result = targetUrl.toString()___		RequestDataValueProcessor processor = getRequestDataValueProcessor()__		return (processor != null ? processor.processUrl(exchange, result) : result)__	};create,the,target,url,and,if,necessary,pre,pend,the,context,path,expand,uri,template,variables,append,the,current,request,query,and,apply,the,configured,link,get,request,data,value,processor,request,data,value,processor;protected,final,string,create,target,url,map,string,object,model,server,web,exchange,exchange,string,url,get,url,assert,state,url,null,url,not,set,server,http,request,request,exchange,get,request,string,builder,target,url,new,string,builder,if,is,context,relative,url,starts,with,target,url,append,request,get,path,context,path,value,target,url,append,url,if,string,utils,has,text,target,url,map,string,string,uri,vars,get,current,uri,variables,exchange,target,url,expand,target,url,template,target,url,to,string,model,uri,vars,if,is,propagate,query,target,url,append,current,request,query,target,url,to,string,request,string,result,target,url,to,string,request,data,value,processor,processor,get,request,data,value,processor,return,processor,null,processor,process,url,exchange,result,result
RedirectView -> protected final String createTargetUrl(Map<String, Object> model, ServerWebExchange exchange);1497275505;Create the target URL and, if necessary, pre-pend the contextPath, expand_URI template variables, append the current request query, and apply the_configured {@link #getRequestDataValueProcessor()_RequestDataValueProcessor}.;protected final String createTargetUrl(Map<String, Object> model, ServerWebExchange exchange) {_		String url = getUrl()__		Assert.state(url != null, "'url' not set")___		ServerHttpRequest request = exchange.getRequest()___		StringBuilder targetUrl = new StringBuilder()__		if (isContextRelative() && url.startsWith("/")) {_			targetUrl.append(request.getPath().contextPath().value())__		}_		targetUrl.append(url)___		if (StringUtils.hasText(targetUrl)) {_			Map<String, String> uriVars = getCurrentUriVariables(exchange)__			targetUrl = expandTargetUrlTemplate(targetUrl.toString(), model, uriVars)__		}__		if (isPropagateQuery()) {_			targetUrl = appendCurrentRequestQuery(targetUrl.toString(), request)__		}__		String result = targetUrl.toString()___		RequestDataValueProcessor processor = getRequestDataValueProcessor()__		return (processor != null ? processor.processUrl(exchange, result) : result)__	};create,the,target,url,and,if,necessary,pre,pend,the,context,path,expand,uri,template,variables,append,the,current,request,query,and,apply,the,configured,link,get,request,data,value,processor,request,data,value,processor;protected,final,string,create,target,url,map,string,object,model,server,web,exchange,exchange,string,url,get,url,assert,state,url,null,url,not,set,server,http,request,request,exchange,get,request,string,builder,target,url,new,string,builder,if,is,context,relative,url,starts,with,target,url,append,request,get,path,context,path,value,target,url,append,url,if,string,utils,has,text,target,url,map,string,string,uri,vars,get,current,uri,variables,exchange,target,url,expand,target,url,template,target,url,to,string,model,uri,vars,if,is,propagate,query,target,url,append,current,request,query,target,url,to,string,request,string,result,target,url,to,string,request,data,value,processor,processor,get,request,data,value,processor,return,processor,null,processor,process,url,exchange,result,result
RedirectView -> protected final String createTargetUrl(Map<String, Object> model, ServerWebExchange exchange);1498762530;Create the target URL and, if necessary, pre-pend the contextPath, expand_URI template variables, append the current request query, and apply the_configured {@link #getRequestDataValueProcessor()_RequestDataValueProcessor}.;protected final String createTargetUrl(Map<String, Object> model, ServerWebExchange exchange) {_		String url = getUrl()__		Assert.state(url != null, "'url' not set")___		ServerHttpRequest request = exchange.getRequest()___		StringBuilder targetUrl = new StringBuilder()__		if (isContextRelative() && url.startsWith("/")) {_			targetUrl.append(request.getPath().contextPath().value())__		}_		targetUrl.append(url)___		if (StringUtils.hasText(targetUrl)) {_			Map<String, String> uriVars = getCurrentUriVariables(exchange)__			targetUrl = expandTargetUrlTemplate(targetUrl.toString(), model, uriVars)__		}__		if (isPropagateQuery()) {_			targetUrl = appendCurrentRequestQuery(targetUrl.toString(), request)__		}__		String result = targetUrl.toString()___		RequestDataValueProcessor processor = getRequestDataValueProcessor()__		return (processor != null ? processor.processUrl(exchange, result) : result)__	};create,the,target,url,and,if,necessary,pre,pend,the,context,path,expand,uri,template,variables,append,the,current,request,query,and,apply,the,configured,link,get,request,data,value,processor,request,data,value,processor;protected,final,string,create,target,url,map,string,object,model,server,web,exchange,exchange,string,url,get,url,assert,state,url,null,url,not,set,server,http,request,request,exchange,get,request,string,builder,target,url,new,string,builder,if,is,context,relative,url,starts,with,target,url,append,request,get,path,context,path,value,target,url,append,url,if,string,utils,has,text,target,url,map,string,string,uri,vars,get,current,uri,variables,exchange,target,url,expand,target,url,template,target,url,to,string,model,uri,vars,if,is,propagate,query,target,url,append,current,request,query,target,url,to,string,request,string,result,target,url,to,string,request,data,value,processor,processor,get,request,data,value,processor,return,processor,null,processor,process,url,exchange,result,result
RedirectView -> protected final String createTargetUrl(Map<String, Object> model, ServerWebExchange exchange);1500448076;Create the target URL and, if necessary, pre-pend the contextPath, expand_URI template variables, append the current request query, and apply the_configured {@link #getRequestDataValueProcessor()_RequestDataValueProcessor}.;protected final String createTargetUrl(Map<String, Object> model, ServerWebExchange exchange) {_		String url = getUrl()__		Assert.state(url != null, "'url' not set")___		ServerHttpRequest request = exchange.getRequest()___		StringBuilder targetUrl = new StringBuilder()__		if (isContextRelative() && url.startsWith("/")) {_			targetUrl.append(request.getPath().contextPath().value())__		}_		targetUrl.append(url)___		if (StringUtils.hasText(targetUrl)) {_			Map<String, String> uriVars = getCurrentUriVariables(exchange)__			targetUrl = expandTargetUrlTemplate(targetUrl.toString(), model, uriVars)__		}__		if (isPropagateQuery()) {_			targetUrl = appendCurrentRequestQuery(targetUrl.toString(), request)__		}__		String result = targetUrl.toString()___		RequestDataValueProcessor processor = getRequestDataValueProcessor()__		return (processor != null ? processor.processUrl(exchange, result) : result)__	};create,the,target,url,and,if,necessary,pre,pend,the,context,path,expand,uri,template,variables,append,the,current,request,query,and,apply,the,configured,link,get,request,data,value,processor,request,data,value,processor;protected,final,string,create,target,url,map,string,object,model,server,web,exchange,exchange,string,url,get,url,assert,state,url,null,url,not,set,server,http,request,request,exchange,get,request,string,builder,target,url,new,string,builder,if,is,context,relative,url,starts,with,target,url,append,request,get,path,context,path,value,target,url,append,url,if,string,utils,has,text,target,url,map,string,string,uri,vars,get,current,uri,variables,exchange,target,url,expand,target,url,template,target,url,to,string,model,uri,vars,if,is,propagate,query,target,url,append,current,request,query,target,url,to,string,request,string,result,target,url,to,string,request,data,value,processor,processor,get,request,data,value,processor,return,processor,null,processor,process,url,exchange,result,result
RedirectView -> protected final String createTargetUrl(Map<String, Object> model, ServerWebExchange exchange);1500457438;Create the target URL and, if necessary, pre-pend the contextPath, expand_URI template variables, append the current request query, and apply the_configured {@link #getRequestDataValueProcessor()_RequestDataValueProcessor}.;protected final String createTargetUrl(Map<String, Object> model, ServerWebExchange exchange) {_		String url = getUrl()__		Assert.state(url != null, "'url' not set")___		ServerHttpRequest request = exchange.getRequest()___		StringBuilder targetUrl = new StringBuilder()__		if (isContextRelative() && url.startsWith("/")) {_			targetUrl.append(request.getPath().contextPath().value())__		}_		targetUrl.append(url)___		if (StringUtils.hasText(targetUrl)) {_			Map<String, String> uriVars = getCurrentUriVariables(exchange)__			targetUrl = expandTargetUrlTemplate(targetUrl.toString(), model, uriVars)__		}__		if (isPropagateQuery()) {_			targetUrl = appendCurrentRequestQuery(targetUrl.toString(), request)__		}__		String result = targetUrl.toString()___		RequestDataValueProcessor processor = getRequestDataValueProcessor()__		return (processor != null ? processor.processUrl(exchange, result) : result)__	};create,the,target,url,and,if,necessary,pre,pend,the,context,path,expand,uri,template,variables,append,the,current,request,query,and,apply,the,configured,link,get,request,data,value,processor,request,data,value,processor;protected,final,string,create,target,url,map,string,object,model,server,web,exchange,exchange,string,url,get,url,assert,state,url,null,url,not,set,server,http,request,request,exchange,get,request,string,builder,target,url,new,string,builder,if,is,context,relative,url,starts,with,target,url,append,request,get,path,context,path,value,target,url,append,url,if,string,utils,has,text,target,url,map,string,string,uri,vars,get,current,uri,variables,exchange,target,url,expand,target,url,template,target,url,to,string,model,uri,vars,if,is,propagate,query,target,url,append,current,request,query,target,url,to,string,request,string,result,target,url,to,string,request,data,value,processor,processor,get,request,data,value,processor,return,processor,null,processor,process,url,exchange,result,result
RedirectView -> protected final String createTargetUrl(Map<String, Object> model, ServerWebExchange exchange);1500495747;Create the target URL and, if necessary, pre-pend the contextPath, expand_URI template variables, append the current request query, and apply the_configured {@link #getRequestDataValueProcessor()_RequestDataValueProcessor}.;protected final String createTargetUrl(Map<String, Object> model, ServerWebExchange exchange) {_		String url = getUrl()__		Assert.state(url != null, "'url' not set")___		ServerHttpRequest request = exchange.getRequest()___		StringBuilder targetUrl = new StringBuilder()__		if (isContextRelative() && url.startsWith("/")) {_			targetUrl.append(request.getPath().contextPath().value())__		}_		targetUrl.append(url)___		if (StringUtils.hasText(targetUrl)) {_			Map<String, String> uriVars = getCurrentUriVariables(exchange)__			targetUrl = expandTargetUrlTemplate(targetUrl.toString(), model, uriVars)__		}__		if (isPropagateQuery()) {_			targetUrl = appendCurrentRequestQuery(targetUrl.toString(), request)__		}__		String result = targetUrl.toString()___		RequestDataValueProcessor processor = getRequestDataValueProcessor()__		return (processor != null ? processor.processUrl(exchange, result) : result)__	};create,the,target,url,and,if,necessary,pre,pend,the,context,path,expand,uri,template,variables,append,the,current,request,query,and,apply,the,configured,link,get,request,data,value,processor,request,data,value,processor;protected,final,string,create,target,url,map,string,object,model,server,web,exchange,exchange,string,url,get,url,assert,state,url,null,url,not,set,server,http,request,request,exchange,get,request,string,builder,target,url,new,string,builder,if,is,context,relative,url,starts,with,target,url,append,request,get,path,context,path,value,target,url,append,url,if,string,utils,has,text,target,url,map,string,string,uri,vars,get,current,uri,variables,exchange,target,url,expand,target,url,template,target,url,to,string,model,uri,vars,if,is,propagate,query,target,url,append,current,request,query,target,url,to,string,request,string,result,target,url,to,string,request,data,value,processor,processor,get,request,data,value,processor,return,processor,null,processor,process,url,exchange,result,result
RedirectView -> protected final String createTargetUrl(Map<String, Object> model, ServerWebExchange exchange);1504701549;Create the target URL and, if necessary, pre-pend the contextPath, expand_URI template variables, append the current request query, and apply the_configured {@link #getRequestDataValueProcessor()_RequestDataValueProcessor}.;protected final String createTargetUrl(Map<String, Object> model, ServerWebExchange exchange) {_		String url = getUrl()__		Assert.state(url != null, "'url' not set")___		ServerHttpRequest request = exchange.getRequest()___		StringBuilder targetUrl = new StringBuilder()__		if (isContextRelative() && url.startsWith("/")) {_			targetUrl.append(request.getPath().contextPath().value())__		}_		targetUrl.append(url)___		if (StringUtils.hasText(targetUrl)) {_			Map<String, String> uriVars = getCurrentUriVariables(exchange)__			targetUrl = expandTargetUrlTemplate(targetUrl.toString(), model, uriVars)__		}__		if (isPropagateQuery()) {_			targetUrl = appendCurrentRequestQuery(targetUrl.toString(), request)__		}__		String result = targetUrl.toString()___		RequestDataValueProcessor processor = getRequestDataValueProcessor()__		return (processor != null ? processor.processUrl(exchange, result) : result)__	};create,the,target,url,and,if,necessary,pre,pend,the,context,path,expand,uri,template,variables,append,the,current,request,query,and,apply,the,configured,link,get,request,data,value,processor,request,data,value,processor;protected,final,string,create,target,url,map,string,object,model,server,web,exchange,exchange,string,url,get,url,assert,state,url,null,url,not,set,server,http,request,request,exchange,get,request,string,builder,target,url,new,string,builder,if,is,context,relative,url,starts,with,target,url,append,request,get,path,context,path,value,target,url,append,url,if,string,utils,has,text,target,url,map,string,string,uri,vars,get,current,uri,variables,exchange,target,url,expand,target,url,template,target,url,to,string,model,uri,vars,if,is,propagate,query,target,url,append,current,request,query,target,url,to,string,request,string,result,target,url,to,string,request,data,value,processor,processor,get,request,data,value,processor,return,processor,null,processor,process,url,exchange,result,result
RedirectView -> protected final String createTargetUrl(Map<String, Object> model, ServerWebExchange exchange);1516617801;Create the target URL and, if necessary, pre-pend the contextPath, expand_URI template variables, append the current request query, and apply the_configured {@link #getRequestDataValueProcessor()_RequestDataValueProcessor}.;protected final String createTargetUrl(Map<String, Object> model, ServerWebExchange exchange) {_		String url = getUrl()__		Assert.state(url != null, "'url' not set")___		ServerHttpRequest request = exchange.getRequest()___		StringBuilder targetUrl = new StringBuilder()__		if (isContextRelative() && url.startsWith("/")) {_			targetUrl.append(request.getPath().contextPath().value())__		}_		targetUrl.append(url)___		if (StringUtils.hasText(targetUrl)) {_			Map<String, String> uriVars = getCurrentUriVariables(exchange)__			targetUrl = expandTargetUrlTemplate(targetUrl.toString(), model, uriVars)__		}__		if (isPropagateQuery()) {_			targetUrl = appendCurrentRequestQuery(targetUrl.toString(), request)__		}__		String result = targetUrl.toString()___		RequestDataValueProcessor processor = getRequestDataValueProcessor()__		return (processor != null ? processor.processUrl(exchange, result) : result)__	};create,the,target,url,and,if,necessary,pre,pend,the,context,path,expand,uri,template,variables,append,the,current,request,query,and,apply,the,configured,link,get,request,data,value,processor,request,data,value,processor;protected,final,string,create,target,url,map,string,object,model,server,web,exchange,exchange,string,url,get,url,assert,state,url,null,url,not,set,server,http,request,request,exchange,get,request,string,builder,target,url,new,string,builder,if,is,context,relative,url,starts,with,target,url,append,request,get,path,context,path,value,target,url,append,url,if,string,utils,has,text,target,url,map,string,string,uri,vars,get,current,uri,variables,exchange,target,url,expand,target,url,template,target,url,to,string,model,uri,vars,if,is,propagate,query,target,url,append,current,request,query,target,url,to,string,request,string,result,target,url,to,string,request,data,value,processor,processor,get,request,data,value,processor,return,processor,null,processor,process,url,exchange,result,result
RedirectView -> protected final String createTargetUrl(Map<String, Object> model, ServerWebExchange exchange);1519588127;Create the target URL and, if necessary, pre-pend the contextPath, expand_URI template variables, append the current request query, and apply the_configured {@link #getRequestDataValueProcessor()_RequestDataValueProcessor}.;protected final String createTargetUrl(Map<String, Object> model, ServerWebExchange exchange) {_		String url = getUrl()__		Assert.state(url != null, "'url' not set")___		ServerHttpRequest request = exchange.getRequest()___		StringBuilder targetUrl = new StringBuilder()__		if (isContextRelative() && url.startsWith("/")) {_			targetUrl.append(request.getPath().contextPath().value())__		}_		targetUrl.append(url)___		if (StringUtils.hasText(targetUrl)) {_			Map<String, String> uriVars = getCurrentUriVariables(exchange)__			targetUrl = expandTargetUrlTemplate(targetUrl.toString(), model, uriVars)__		}__		if (isPropagateQuery()) {_			targetUrl = appendCurrentRequestQuery(targetUrl.toString(), request)__		}__		String result = targetUrl.toString()___		RequestDataValueProcessor processor = getRequestDataValueProcessor()__		return (processor != null ? processor.processUrl(exchange, result) : result)__	};create,the,target,url,and,if,necessary,pre,pend,the,context,path,expand,uri,template,variables,append,the,current,request,query,and,apply,the,configured,link,get,request,data,value,processor,request,data,value,processor;protected,final,string,create,target,url,map,string,object,model,server,web,exchange,exchange,string,url,get,url,assert,state,url,null,url,not,set,server,http,request,request,exchange,get,request,string,builder,target,url,new,string,builder,if,is,context,relative,url,starts,with,target,url,append,request,get,path,context,path,value,target,url,append,url,if,string,utils,has,text,target,url,map,string,string,uri,vars,get,current,uri,variables,exchange,target,url,expand,target,url,template,target,url,to,string,model,uri,vars,if,is,propagate,query,target,url,append,current,request,query,target,url,to,string,request,string,result,target,url,to,string,request,data,value,processor,processor,get,request,data,value,processor,return,processor,null,processor,process,url,exchange,result,result
RedirectView -> protected final String createTargetUrl(Map<String, Object> model, ServerWebExchange exchange);1530174524;Create the target URL and, if necessary, pre-pend the contextPath, expand_URI template variables, append the current request query, and apply the_configured {@link #getRequestDataValueProcessor()_RequestDataValueProcessor}.;protected final String createTargetUrl(Map<String, Object> model, ServerWebExchange exchange) {_		String url = getUrl()__		Assert.state(url != null, "'url' not set")___		ServerHttpRequest request = exchange.getRequest()___		StringBuilder targetUrl = new StringBuilder()__		if (isContextRelative() && url.startsWith("/")) {_			targetUrl.append(request.getPath().contextPath().value())__		}_		targetUrl.append(url)___		if (StringUtils.hasText(targetUrl)) {_			Map<String, String> uriVars = getCurrentUriVariables(exchange)__			targetUrl = expandTargetUrlTemplate(targetUrl.toString(), model, uriVars)__		}__		if (isPropagateQuery()) {_			targetUrl = appendCurrentRequestQuery(targetUrl.toString(), request)__		}__		String result = targetUrl.toString()___		RequestDataValueProcessor processor = getRequestDataValueProcessor()__		return (processor != null ? processor.processUrl(exchange, result) : result)__	};create,the,target,url,and,if,necessary,pre,pend,the,context,path,expand,uri,template,variables,append,the,current,request,query,and,apply,the,configured,link,get,request,data,value,processor,request,data,value,processor;protected,final,string,create,target,url,map,string,object,model,server,web,exchange,exchange,string,url,get,url,assert,state,url,null,url,not,set,server,http,request,request,exchange,get,request,string,builder,target,url,new,string,builder,if,is,context,relative,url,starts,with,target,url,append,request,get,path,context,path,value,target,url,append,url,if,string,utils,has,text,target,url,map,string,string,uri,vars,get,current,uri,variables,exchange,target,url,expand,target,url,template,target,url,to,string,model,uri,vars,if,is,propagate,query,target,url,append,current,request,query,target,url,to,string,request,string,result,target,url,to,string,request,data,value,processor,processor,get,request,data,value,processor,return,processor,null,processor,process,url,exchange,result,result
RedirectView -> protected final String createTargetUrl(Map<String, Object> model, ServerWebExchange exchange);1533034998;Create the target URL and, if necessary, pre-pend the contextPath, expand_URI template variables, append the current request query, and apply the_configured {@link #getRequestDataValueProcessor()_RequestDataValueProcessor}.;protected final String createTargetUrl(Map<String, Object> model, ServerWebExchange exchange) {_		String url = getUrl()__		Assert.state(url != null, "'url' not set")___		ServerHttpRequest request = exchange.getRequest()___		StringBuilder targetUrl = new StringBuilder()__		if (isContextRelative() && url.startsWith("/")) {_			targetUrl.append(request.getPath().contextPath().value())__		}_		targetUrl.append(url)___		if (StringUtils.hasText(targetUrl)) {_			Map<String, String> uriVars = getCurrentUriVariables(exchange)__			targetUrl = expandTargetUrlTemplate(targetUrl.toString(), model, uriVars)__		}__		if (isPropagateQuery()) {_			targetUrl = appendCurrentRequestQuery(targetUrl.toString(), request)__		}__		String result = targetUrl.toString()___		RequestDataValueProcessor processor = getRequestDataValueProcessor()__		return (processor != null ? processor.processUrl(exchange, result) : result)__	};create,the,target,url,and,if,necessary,pre,pend,the,context,path,expand,uri,template,variables,append,the,current,request,query,and,apply,the,configured,link,get,request,data,value,processor,request,data,value,processor;protected,final,string,create,target,url,map,string,object,model,server,web,exchange,exchange,string,url,get,url,assert,state,url,null,url,not,set,server,http,request,request,exchange,get,request,string,builder,target,url,new,string,builder,if,is,context,relative,url,starts,with,target,url,append,request,get,path,context,path,value,target,url,append,url,if,string,utils,has,text,target,url,map,string,string,uri,vars,get,current,uri,variables,exchange,target,url,expand,target,url,template,target,url,to,string,model,uri,vars,if,is,propagate,query,target,url,append,current,request,query,target,url,to,string,request,string,result,target,url,to,string,request,data,value,processor,processor,get,request,data,value,processor,return,processor,null,processor,process,url,exchange,result,result
RedirectView -> @Nullable 	public HttpStatus getStatusCode();1496837955;Get the redirect status code to use.;@Nullable_	public HttpStatus getStatusCode() {_		return this.statusCode__	};get,the,redirect,status,code,to,use;nullable,public,http,status,get,status,code,return,this,status,code
RedirectView -> @Nullable 	public HttpStatus getStatusCode();1497232764;Get the redirect status code to use.;@Nullable_	public HttpStatus getStatusCode() {_		return this.statusCode__	};get,the,redirect,status,code,to,use;nullable,public,http,status,get,status,code,return,this,status,code
RedirectView -> @Nullable 	public HttpStatus getStatusCode();1497275505;Get the redirect status code to use.;@Nullable_	public HttpStatus getStatusCode() {_		return this.statusCode__	};get,the,redirect,status,code,to,use;nullable,public,http,status,get,status,code,return,this,status,code
RedirectView -> @Nullable 	public HttpStatus getStatusCode();1498762530;Get the redirect status code to use.;@Nullable_	public HttpStatus getStatusCode() {_		return this.statusCode__	};get,the,redirect,status,code,to,use;nullable,public,http,status,get,status,code,return,this,status,code
RedirectView -> @Nullable 	public HttpStatus getStatusCode();1500448076;Get the redirect status code to use.;@Nullable_	public HttpStatus getStatusCode() {_		return this.statusCode__	};get,the,redirect,status,code,to,use;nullable,public,http,status,get,status,code,return,this,status,code
RedirectView -> protected boolean isRemoteHost(String targetUrl);1485986572;Whether the given targetUrl has a host that is a "foreign" system in which_case {@link javax.servlet.http.HttpServletResponse#encodeRedirectURL} will not be applied._This method returns {@code true} if the {@link #setHosts(String[])}_property is configured and the target URL has a host that does not match._@param targetUrl the target redirect URL_@return {@code true} the target URL has a remote host, {@code false} if it_the URL does not have a host or the "host" property is not configured.;protected boolean isRemoteHost(String targetUrl) {_		if (ObjectUtils.isEmpty(this.hosts)) {_			return false__		}_		String targetHost = UriComponentsBuilder.fromUriString(targetUrl).build().getHost()__		if (StringUtils.isEmpty(targetHost)) {_			return false__		}_		for (String host : this.hosts) {_			if (targetHost.equals(host)) {_				return false__			}_		}_		return true__	};whether,the,given,target,url,has,a,host,that,is,a,foreign,system,in,which,case,link,javax,servlet,http,http,servlet,response,encode,redirect,url,will,not,be,applied,this,method,returns,code,true,if,the,link,set,hosts,string,property,is,configured,and,the,target,url,has,a,host,that,does,not,match,param,target,url,the,target,redirect,url,return,code,true,the,target,url,has,a,remote,host,code,false,if,it,the,url,does,not,have,a,host,or,the,host,property,is,not,configured;protected,boolean,is,remote,host,string,target,url,if,object,utils,is,empty,this,hosts,return,false,string,target,host,uri,components,builder,from,uri,string,target,url,build,get,host,if,string,utils,is,empty,target,host,return,false,for,string,host,this,hosts,if,target,host,equals,host,return,false,return,true
RedirectView -> protected boolean isRemoteHost(String targetUrl);1495657865;Whether the given targetUrl has a host that is a "foreign" system in which_case {@link javax.servlet.http.HttpServletResponse#encodeRedirectURL} will not be applied._This method returns {@code true} if the {@link #setHosts(String[])}_property is configured and the target URL has a host that does not match._@param targetUrl the target redirect URL_@return {@code true} the target URL has a remote host, {@code false} if it_the URL does not have a host or the "host" property is not configured.;protected boolean isRemoteHost(String targetUrl) {_		if (ObjectUtils.isEmpty(this.hosts)) {_			return false__		}_		String targetHost = UriComponentsBuilder.fromUriString(targetUrl).build().getHost()__		if (StringUtils.isEmpty(targetHost)) {_			return false__		}_		for (String host : this.hosts) {_			if (targetHost.equals(host)) {_				return false__			}_		}_		return true__	};whether,the,given,target,url,has,a,host,that,is,a,foreign,system,in,which,case,link,javax,servlet,http,http,servlet,response,encode,redirect,url,will,not,be,applied,this,method,returns,code,true,if,the,link,set,hosts,string,property,is,configured,and,the,target,url,has,a,host,that,does,not,match,param,target,url,the,target,redirect,url,return,code,true,the,target,url,has,a,remote,host,code,false,if,it,the,url,does,not,have,a,host,or,the,host,property,is,not,configured;protected,boolean,is,remote,host,string,target,url,if,object,utils,is,empty,this,hosts,return,false,string,target,host,uri,components,builder,from,uri,string,target,url,build,get,host,if,string,utils,is,empty,target,host,return,false,for,string,host,this,hosts,if,target,host,equals,host,return,false,return,true
RedirectView -> protected boolean isRemoteHost(String targetUrl);1496837955;Whether the given targetUrl has a host that is a "foreign" system in which_case {@link javax.servlet.http.HttpServletResponse#encodeRedirectURL} will not be applied._This method returns {@code true} if the {@link #setHosts(String[])}_property is configured and the target URL has a host that does not match._@param targetUrl the target redirect URL_@return {@code true} the target URL has a remote host, {@code false} if it_the URL does not have a host or the "host" property is not configured.;protected boolean isRemoteHost(String targetUrl) {_		if (ObjectUtils.isEmpty(this.hosts)) {_			return false__		}_		String targetHost = UriComponentsBuilder.fromUriString(targetUrl).build().getHost()__		if (StringUtils.isEmpty(targetHost)) {_			return false__		}_		for (String host : this.hosts) {_			if (targetHost.equals(host)) {_				return false__			}_		}_		return true__	};whether,the,given,target,url,has,a,host,that,is,a,foreign,system,in,which,case,link,javax,servlet,http,http,servlet,response,encode,redirect,url,will,not,be,applied,this,method,returns,code,true,if,the,link,set,hosts,string,property,is,configured,and,the,target,url,has,a,host,that,does,not,match,param,target,url,the,target,redirect,url,return,code,true,the,target,url,has,a,remote,host,code,false,if,it,the,url,does,not,have,a,host,or,the,host,property,is,not,configured;protected,boolean,is,remote,host,string,target,url,if,object,utils,is,empty,this,hosts,return,false,string,target,host,uri,components,builder,from,uri,string,target,url,build,get,host,if,string,utils,is,empty,target,host,return,false,for,string,host,this,hosts,if,target,host,equals,host,return,false,return,true
RedirectView -> protected boolean isRemoteHost(String targetUrl);1497232764;Whether the given targetUrl has a host that is a "foreign" system in which_case {@link javax.servlet.http.HttpServletResponse#encodeRedirectURL} will not be applied._This method returns {@code true} if the {@link #setHosts(String[])}_property is configured and the target URL has a host that does not match._@param targetUrl the target redirect URL_@return {@code true} the target URL has a remote host, {@code false} if it_the URL does not have a host or the "host" property is not configured.;protected boolean isRemoteHost(String targetUrl) {_		if (ObjectUtils.isEmpty(this.hosts)) {_			return false__		}_		String targetHost = UriComponentsBuilder.fromUriString(targetUrl).build().getHost()__		if (StringUtils.isEmpty(targetHost)) {_			return false__		}_		for (String host : this.hosts) {_			if (targetHost.equals(host)) {_				return false__			}_		}_		return true__	};whether,the,given,target,url,has,a,host,that,is,a,foreign,system,in,which,case,link,javax,servlet,http,http,servlet,response,encode,redirect,url,will,not,be,applied,this,method,returns,code,true,if,the,link,set,hosts,string,property,is,configured,and,the,target,url,has,a,host,that,does,not,match,param,target,url,the,target,redirect,url,return,code,true,the,target,url,has,a,remote,host,code,false,if,it,the,url,does,not,have,a,host,or,the,host,property,is,not,configured;protected,boolean,is,remote,host,string,target,url,if,object,utils,is,empty,this,hosts,return,false,string,target,host,uri,components,builder,from,uri,string,target,url,build,get,host,if,string,utils,is,empty,target,host,return,false,for,string,host,this,hosts,if,target,host,equals,host,return,false,return,true
RedirectView -> protected boolean isRemoteHost(String targetUrl);1497275505;Whether the given targetUrl has a host that is a "foreign" system in which_case {@link javax.servlet.http.HttpServletResponse#encodeRedirectURL} will not be applied._This method returns {@code true} if the {@link #setHosts(String[])}_property is configured and the target URL has a host that does not match._@param targetUrl the target redirect URL_@return {@code true} the target URL has a remote host, {@code false} if it_the URL does not have a host or the "host" property is not configured.;protected boolean isRemoteHost(String targetUrl) {_		if (ObjectUtils.isEmpty(this.hosts)) {_			return false__		}_		String targetHost = UriComponentsBuilder.fromUriString(targetUrl).build().getHost()__		if (StringUtils.isEmpty(targetHost)) {_			return false__		}_		for (String host : this.hosts) {_			if (targetHost.equals(host)) {_				return false__			}_		}_		return true__	};whether,the,given,target,url,has,a,host,that,is,a,foreign,system,in,which,case,link,javax,servlet,http,http,servlet,response,encode,redirect,url,will,not,be,applied,this,method,returns,code,true,if,the,link,set,hosts,string,property,is,configured,and,the,target,url,has,a,host,that,does,not,match,param,target,url,the,target,redirect,url,return,code,true,the,target,url,has,a,remote,host,code,false,if,it,the,url,does,not,have,a,host,or,the,host,property,is,not,configured;protected,boolean,is,remote,host,string,target,url,if,object,utils,is,empty,this,hosts,return,false,string,target,host,uri,components,builder,from,uri,string,target,url,build,get,host,if,string,utils,is,empty,target,host,return,false,for,string,host,this,hosts,if,target,host,equals,host,return,false,return,true
RedirectView -> protected boolean isRemoteHost(String targetUrl);1498762530;Whether the given targetUrl has a host that is a "foreign" system in which_case {@link javax.servlet.http.HttpServletResponse#encodeRedirectURL} will not be applied._This method returns {@code true} if the {@link #setHosts(String[])}_property is configured and the target URL has a host that does not match._@param targetUrl the target redirect URL_@return {@code true} the target URL has a remote host, {@code false} if it_the URL does not have a host or the "host" property is not configured.;protected boolean isRemoteHost(String targetUrl) {_		if (ObjectUtils.isEmpty(this.hosts)) {_			return false__		}_		String targetHost = UriComponentsBuilder.fromUriString(targetUrl).build().getHost()__		if (StringUtils.isEmpty(targetHost)) {_			return false__		}_		for (String host : this.hosts) {_			if (targetHost.equals(host)) {_				return false__			}_		}_		return true__	};whether,the,given,target,url,has,a,host,that,is,a,foreign,system,in,which,case,link,javax,servlet,http,http,servlet,response,encode,redirect,url,will,not,be,applied,this,method,returns,code,true,if,the,link,set,hosts,string,property,is,configured,and,the,target,url,has,a,host,that,does,not,match,param,target,url,the,target,redirect,url,return,code,true,the,target,url,has,a,remote,host,code,false,if,it,the,url,does,not,have,a,host,or,the,host,property,is,not,configured;protected,boolean,is,remote,host,string,target,url,if,object,utils,is,empty,this,hosts,return,false,string,target,host,uri,components,builder,from,uri,string,target,url,build,get,host,if,string,utils,is,empty,target,host,return,false,for,string,host,this,hosts,if,target,host,equals,host,return,false,return,true
RedirectView -> protected boolean isRemoteHost(String targetUrl);1500448076;Whether the given targetUrl has a host that is a "foreign" system in which_case {@link javax.servlet.http.HttpServletResponse#encodeRedirectURL} will not be applied._This method returns {@code true} if the {@link #setHosts(String[])}_property is configured and the target URL has a host that does not match._@param targetUrl the target redirect URL_@return {@code true} the target URL has a remote host, {@code false} if it_the URL does not have a host or the "host" property is not configured.;protected boolean isRemoteHost(String targetUrl) {_		if (ObjectUtils.isEmpty(this.hosts)) {_			return false__		}_		String targetHost = UriComponentsBuilder.fromUriString(targetUrl).build().getHost()__		if (StringUtils.isEmpty(targetHost)) {_			return false__		}_		for (String host : this.hosts) {_			if (targetHost.equals(host)) {_				return false__			}_		}_		return true__	};whether,the,given,target,url,has,a,host,that,is,a,foreign,system,in,which,case,link,javax,servlet,http,http,servlet,response,encode,redirect,url,will,not,be,applied,this,method,returns,code,true,if,the,link,set,hosts,string,property,is,configured,and,the,target,url,has,a,host,that,does,not,match,param,target,url,the,target,redirect,url,return,code,true,the,target,url,has,a,remote,host,code,false,if,it,the,url,does,not,have,a,host,or,the,host,property,is,not,configured;protected,boolean,is,remote,host,string,target,url,if,object,utils,is,empty,this,hosts,return,false,string,target,host,uri,components,builder,from,uri,string,target,url,build,get,host,if,string,utils,is,empty,target,host,return,false,for,string,host,this,hosts,if,target,host,equals,host,return,false,return,true
RedirectView -> protected boolean isRemoteHost(String targetUrl);1500457438;Whether the given targetUrl has a host that is a "foreign" system in which_case {@link javax.servlet.http.HttpServletResponse#encodeRedirectURL} will not be applied._This method returns {@code true} if the {@link #setHosts(String[])}_property is configured and the target URL has a host that does not match._@param targetUrl the target redirect URL_@return {@code true} the target URL has a remote host, {@code false} if it_the URL does not have a host or the "host" property is not configured.;protected boolean isRemoteHost(String targetUrl) {_		if (ObjectUtils.isEmpty(this.hosts)) {_			return false__		}_		String targetHost = UriComponentsBuilder.fromUriString(targetUrl).build().getHost()__		if (StringUtils.isEmpty(targetHost)) {_			return false__		}_		for (String host : this.hosts) {_			if (targetHost.equals(host)) {_				return false__			}_		}_		return true__	};whether,the,given,target,url,has,a,host,that,is,a,foreign,system,in,which,case,link,javax,servlet,http,http,servlet,response,encode,redirect,url,will,not,be,applied,this,method,returns,code,true,if,the,link,set,hosts,string,property,is,configured,and,the,target,url,has,a,host,that,does,not,match,param,target,url,the,target,redirect,url,return,code,true,the,target,url,has,a,remote,host,code,false,if,it,the,url,does,not,have,a,host,or,the,host,property,is,not,configured;protected,boolean,is,remote,host,string,target,url,if,object,utils,is,empty,this,hosts,return,false,string,target,host,uri,components,builder,from,uri,string,target,url,build,get,host,if,string,utils,is,empty,target,host,return,false,for,string,host,this,hosts,if,target,host,equals,host,return,false,return,true
RedirectView -> protected boolean isRemoteHost(String targetUrl);1500495747;Whether the given targetUrl has a host that is a "foreign" system in which_case {@link javax.servlet.http.HttpServletResponse#encodeRedirectURL} will not be applied._This method returns {@code true} if the {@link #setHosts(String[])}_property is configured and the target URL has a host that does not match._@param targetUrl the target redirect URL_@return {@code true} the target URL has a remote host, {@code false} if it_the URL does not have a host or the "host" property is not configured.;protected boolean isRemoteHost(String targetUrl) {_		if (ObjectUtils.isEmpty(this.hosts)) {_			return false__		}_		String targetHost = UriComponentsBuilder.fromUriString(targetUrl).build().getHost()__		if (StringUtils.isEmpty(targetHost)) {_			return false__		}_		for (String host : this.hosts) {_			if (targetHost.equals(host)) {_				return false__			}_		}_		return true__	};whether,the,given,target,url,has,a,host,that,is,a,foreign,system,in,which,case,link,javax,servlet,http,http,servlet,response,encode,redirect,url,will,not,be,applied,this,method,returns,code,true,if,the,link,set,hosts,string,property,is,configured,and,the,target,url,has,a,host,that,does,not,match,param,target,url,the,target,redirect,url,return,code,true,the,target,url,has,a,remote,host,code,false,if,it,the,url,does,not,have,a,host,or,the,host,property,is,not,configured;protected,boolean,is,remote,host,string,target,url,if,object,utils,is,empty,this,hosts,return,false,string,target,host,uri,components,builder,from,uri,string,target,url,build,get,host,if,string,utils,is,empty,target,host,return,false,for,string,host,this,hosts,if,target,host,equals,host,return,false,return,true
RedirectView -> protected boolean isRemoteHost(String targetUrl);1504701549;Whether the given targetUrl has a host that is a "foreign" system in which_case {@link javax.servlet.http.HttpServletResponse#encodeRedirectURL} will not be applied._This method returns {@code true} if the {@link #setHosts(String[])}_property is configured and the target URL has a host that does not match._@param targetUrl the target redirect URL_@return {@code true} the target URL has a remote host, {@code false} if it_the URL does not have a host or the "host" property is not configured.;protected boolean isRemoteHost(String targetUrl) {_		if (ObjectUtils.isEmpty(this.hosts)) {_			return false__		}_		String targetHost = UriComponentsBuilder.fromUriString(targetUrl).build().getHost()__		if (StringUtils.isEmpty(targetHost)) {_			return false__		}_		for (String host : this.hosts) {_			if (targetHost.equals(host)) {_				return false__			}_		}_		return true__	};whether,the,given,target,url,has,a,host,that,is,a,foreign,system,in,which,case,link,javax,servlet,http,http,servlet,response,encode,redirect,url,will,not,be,applied,this,method,returns,code,true,if,the,link,set,hosts,string,property,is,configured,and,the,target,url,has,a,host,that,does,not,match,param,target,url,the,target,redirect,url,return,code,true,the,target,url,has,a,remote,host,code,false,if,it,the,url,does,not,have,a,host,or,the,host,property,is,not,configured;protected,boolean,is,remote,host,string,target,url,if,object,utils,is,empty,this,hosts,return,false,string,target,host,uri,components,builder,from,uri,string,target,url,build,get,host,if,string,utils,is,empty,target,host,return,false,for,string,host,this,hosts,if,target,host,equals,host,return,false,return,true
RedirectView -> protected boolean isRemoteHost(String targetUrl);1516617801;Whether the given targetUrl has a host that is a "foreign" system in which_case {@link javax.servlet.http.HttpServletResponse#encodeRedirectURL} will not be applied._This method returns {@code true} if the {@link #setHosts(String[])}_property is configured and the target URL has a host that does not match._@param targetUrl the target redirect URL_@return {@code true} the target URL has a remote host, {@code false} if it_the URL does not have a host or the "host" property is not configured.;protected boolean isRemoteHost(String targetUrl) {_		if (ObjectUtils.isEmpty(this.hosts)) {_			return false__		}_		String targetHost = UriComponentsBuilder.fromUriString(targetUrl).build().getHost()__		if (StringUtils.isEmpty(targetHost)) {_			return false__		}_		for (String host : this.hosts) {_			if (targetHost.equals(host)) {_				return false__			}_		}_		return true__	};whether,the,given,target,url,has,a,host,that,is,a,foreign,system,in,which,case,link,javax,servlet,http,http,servlet,response,encode,redirect,url,will,not,be,applied,this,method,returns,code,true,if,the,link,set,hosts,string,property,is,configured,and,the,target,url,has,a,host,that,does,not,match,param,target,url,the,target,redirect,url,return,code,true,the,target,url,has,a,remote,host,code,false,if,it,the,url,does,not,have,a,host,or,the,host,property,is,not,configured;protected,boolean,is,remote,host,string,target,url,if,object,utils,is,empty,this,hosts,return,false,string,target,host,uri,components,builder,from,uri,string,target,url,build,get,host,if,string,utils,is,empty,target,host,return,false,for,string,host,this,hosts,if,target,host,equals,host,return,false,return,true
RedirectView -> protected boolean isRemoteHost(String targetUrl);1519588127;Whether the given targetUrl has a host that is a "foreign" system in which_case {@link javax.servlet.http.HttpServletResponse#encodeRedirectURL} will not be applied._This method returns {@code true} if the {@link #setHosts(String[])}_property is configured and the target URL has a host that does not match._@param targetUrl the target redirect URL_@return {@code true} the target URL has a remote host, {@code false} if it_the URL does not have a host or the "host" property is not configured.;protected boolean isRemoteHost(String targetUrl) {_		if (ObjectUtils.isEmpty(this.hosts)) {_			return false__		}_		String targetHost = UriComponentsBuilder.fromUriString(targetUrl).build().getHost()__		if (StringUtils.isEmpty(targetHost)) {_			return false__		}_		for (String host : this.hosts) {_			if (targetHost.equals(host)) {_				return false__			}_		}_		return true__	};whether,the,given,target,url,has,a,host,that,is,a,foreign,system,in,which,case,link,javax,servlet,http,http,servlet,response,encode,redirect,url,will,not,be,applied,this,method,returns,code,true,if,the,link,set,hosts,string,property,is,configured,and,the,target,url,has,a,host,that,does,not,match,param,target,url,the,target,redirect,url,return,code,true,the,target,url,has,a,remote,host,code,false,if,it,the,url,does,not,have,a,host,or,the,host,property,is,not,configured;protected,boolean,is,remote,host,string,target,url,if,object,utils,is,empty,this,hosts,return,false,string,target,host,uri,components,builder,from,uri,string,target,url,build,get,host,if,string,utils,is,empty,target,host,return,false,for,string,host,this,hosts,if,target,host,equals,host,return,false,return,true
RedirectView -> protected boolean isRemoteHost(String targetUrl);1530174524;Whether the given targetUrl has a host that is a "foreign" system in which_case {@link javax.servlet.http.HttpServletResponse#encodeRedirectURL} will not be applied._This method returns {@code true} if the {@link #setHosts(String[])}_property is configured and the target URL has a host that does not match._@param targetUrl the target redirect URL_@return {@code true} the target URL has a remote host, {@code false} if it_the URL does not have a host or the "host" property is not configured.;protected boolean isRemoteHost(String targetUrl) {_		if (ObjectUtils.isEmpty(this.hosts)) {_			return false__		}_		String targetHost = UriComponentsBuilder.fromUriString(targetUrl).build().getHost()__		if (StringUtils.isEmpty(targetHost)) {_			return false__		}_		for (String host : this.hosts) {_			if (targetHost.equals(host)) {_				return false__			}_		}_		return true__	};whether,the,given,target,url,has,a,host,that,is,a,foreign,system,in,which,case,link,javax,servlet,http,http,servlet,response,encode,redirect,url,will,not,be,applied,this,method,returns,code,true,if,the,link,set,hosts,string,property,is,configured,and,the,target,url,has,a,host,that,does,not,match,param,target,url,the,target,redirect,url,return,code,true,the,target,url,has,a,remote,host,code,false,if,it,the,url,does,not,have,a,host,or,the,host,property,is,not,configured;protected,boolean,is,remote,host,string,target,url,if,object,utils,is,empty,this,hosts,return,false,string,target,host,uri,components,builder,from,uri,string,target,url,build,get,host,if,string,utils,is,empty,target,host,return,false,for,string,host,this,hosts,if,target,host,equals,host,return,false,return,true
RedirectView -> protected boolean isRemoteHost(String targetUrl);1533034998;Whether the given targetUrl has a host that is a "foreign" system in which_case {@link javax.servlet.http.HttpServletResponse#encodeRedirectURL} will not be applied._This method returns {@code true} if the {@link #setHosts(String[])}_property is configured and the target URL has a host that does not match._@param targetUrl the target redirect URL_@return {@code true} the target URL has a remote host, {@code false} if it_the URL does not have a host or the "host" property is not configured.;protected boolean isRemoteHost(String targetUrl) {_		if (ObjectUtils.isEmpty(this.hosts)) {_			return false__		}_		String targetHost = UriComponentsBuilder.fromUriString(targetUrl).build().getHost()__		if (StringUtils.isEmpty(targetHost)) {_			return false__		}_		for (String host : this.hosts) {_			if (targetHost.equals(host)) {_				return false__			}_		}_		return true__	};whether,the,given,target,url,has,a,host,that,is,a,foreign,system,in,which,case,link,javax,servlet,http,http,servlet,response,encode,redirect,url,will,not,be,applied,this,method,returns,code,true,if,the,link,set,hosts,string,property,is,configured,and,the,target,url,has,a,host,that,does,not,match,param,target,url,the,target,redirect,url,return,code,true,the,target,url,has,a,remote,host,code,false,if,it,the,url,does,not,have,a,host,or,the,host,property,is,not,configured;protected,boolean,is,remote,host,string,target,url,if,object,utils,is,empty,this,hosts,return,false,string,target,host,uri,components,builder,from,uri,string,target,url,build,get,host,if,string,utils,is,empty,target,host,return,false,for,string,host,this,hosts,if,target,host,equals,host,return,false,return,true
RedirectView -> public RedirectView(String redirectUrl, HttpStatus statusCode);1485986572;Create a new {@code RedirectView} with the given URL and an alternate_redirect status code such as {@link HttpStatus#TEMPORARY_REDIRECT} or_{@link HttpStatus#PERMANENT_REDIRECT}.;public RedirectView(String redirectUrl, HttpStatus statusCode) {_		super(redirectUrl)__		setStatusCode(statusCode)__	};create,a,new,code,redirect,view,with,the,given,url,and,an,alternate,redirect,status,code,such,as,link,http,status,or,link,http,status;public,redirect,view,string,redirect,url,http,status,status,code,super,redirect,url,set,status,code,status,code
RedirectView -> public RedirectView(String redirectUrl, HttpStatus statusCode);1495657865;Create a new {@code RedirectView} with the given URL and an alternate_redirect status code such as {@link HttpStatus#TEMPORARY_REDIRECT} or_{@link HttpStatus#PERMANENT_REDIRECT}.;public RedirectView(String redirectUrl, HttpStatus statusCode) {_		super(redirectUrl)__		setStatusCode(statusCode)__	};create,a,new,code,redirect,view,with,the,given,url,and,an,alternate,redirect,status,code,such,as,link,http,status,or,link,http,status;public,redirect,view,string,redirect,url,http,status,status,code,super,redirect,url,set,status,code,status,code
RedirectView -> public RedirectView(String redirectUrl, HttpStatus statusCode);1496837955;Create a new {@code RedirectView} with the given URL and an alternate_redirect status code such as {@link HttpStatus#TEMPORARY_REDIRECT} or_{@link HttpStatus#PERMANENT_REDIRECT}.;public RedirectView(String redirectUrl, HttpStatus statusCode) {_		super(redirectUrl)__		setStatusCode(statusCode)__	};create,a,new,code,redirect,view,with,the,given,url,and,an,alternate,redirect,status,code,such,as,link,http,status,or,link,http,status;public,redirect,view,string,redirect,url,http,status,status,code,super,redirect,url,set,status,code,status,code
RedirectView -> public RedirectView(String redirectUrl, HttpStatus statusCode);1497232764;Create a new {@code RedirectView} with the given URL and an alternate_redirect status code such as {@link HttpStatus#TEMPORARY_REDIRECT} or_{@link HttpStatus#PERMANENT_REDIRECT}.;public RedirectView(String redirectUrl, HttpStatus statusCode) {_		super(redirectUrl)__		setStatusCode(statusCode)__	};create,a,new,code,redirect,view,with,the,given,url,and,an,alternate,redirect,status,code,such,as,link,http,status,or,link,http,status;public,redirect,view,string,redirect,url,http,status,status,code,super,redirect,url,set,status,code,status,code
RedirectView -> public RedirectView(String redirectUrl, HttpStatus statusCode);1497275505;Create a new {@code RedirectView} with the given URL and an alternate_redirect status code such as {@link HttpStatus#TEMPORARY_REDIRECT} or_{@link HttpStatus#PERMANENT_REDIRECT}.;public RedirectView(String redirectUrl, HttpStatus statusCode) {_		super(redirectUrl)__		setStatusCode(statusCode)__	};create,a,new,code,redirect,view,with,the,given,url,and,an,alternate,redirect,status,code,such,as,link,http,status,or,link,http,status;public,redirect,view,string,redirect,url,http,status,status,code,super,redirect,url,set,status,code,status,code
RedirectView -> public RedirectView(String redirectUrl, HttpStatus statusCode);1498762530;Create a new {@code RedirectView} with the given URL and an alternate_redirect status code such as {@link HttpStatus#TEMPORARY_REDIRECT} or_{@link HttpStatus#PERMANENT_REDIRECT}.;public RedirectView(String redirectUrl, HttpStatus statusCode) {_		super(redirectUrl)__		setStatusCode(statusCode)__	};create,a,new,code,redirect,view,with,the,given,url,and,an,alternate,redirect,status,code,such,as,link,http,status,or,link,http,status;public,redirect,view,string,redirect,url,http,status,status,code,super,redirect,url,set,status,code,status,code
RedirectView -> public RedirectView(String redirectUrl, HttpStatus statusCode);1500448076;Create a new {@code RedirectView} with the given URL and an alternate_redirect status code such as {@link HttpStatus#TEMPORARY_REDIRECT} or_{@link HttpStatus#PERMANENT_REDIRECT}.;public RedirectView(String redirectUrl, HttpStatus statusCode) {_		super(redirectUrl)__		setStatusCode(statusCode)__	};create,a,new,code,redirect,view,with,the,given,url,and,an,alternate,redirect,status,code,such,as,link,http,status,or,link,http,status;public,redirect,view,string,redirect,url,http,status,status,code,super,redirect,url,set,status,code,status,code
RedirectView -> public RedirectView(String redirectUrl, HttpStatus statusCode);1500457438;Create a new {@code RedirectView} with the given URL and an alternate_redirect status code such as {@link HttpStatus#TEMPORARY_REDIRECT} or_{@link HttpStatus#PERMANENT_REDIRECT}.;public RedirectView(String redirectUrl, HttpStatus statusCode) {_		super(redirectUrl)__		setStatusCode(statusCode)__	};create,a,new,code,redirect,view,with,the,given,url,and,an,alternate,redirect,status,code,such,as,link,http,status,or,link,http,status;public,redirect,view,string,redirect,url,http,status,status,code,super,redirect,url,set,status,code,status,code
RedirectView -> public RedirectView(String redirectUrl, HttpStatus statusCode);1500495747;Create a new {@code RedirectView} with the given URL and an alternate_redirect status code such as {@link HttpStatus#TEMPORARY_REDIRECT} or_{@link HttpStatus#PERMANENT_REDIRECT}.;public RedirectView(String redirectUrl, HttpStatus statusCode) {_		super(redirectUrl)__		setStatusCode(statusCode)__	};create,a,new,code,redirect,view,with,the,given,url,and,an,alternate,redirect,status,code,such,as,link,http,status,or,link,http,status;public,redirect,view,string,redirect,url,http,status,status,code,super,redirect,url,set,status,code,status,code
RedirectView -> public RedirectView(String redirectUrl, HttpStatus statusCode);1504701549;Create a new {@code RedirectView} with the given URL and an alternate_redirect status code such as {@link HttpStatus#TEMPORARY_REDIRECT} or_{@link HttpStatus#PERMANENT_REDIRECT}.;public RedirectView(String redirectUrl, HttpStatus statusCode) {_		super(redirectUrl)__		setStatusCode(statusCode)__	};create,a,new,code,redirect,view,with,the,given,url,and,an,alternate,redirect,status,code,such,as,link,http,status,or,link,http,status;public,redirect,view,string,redirect,url,http,status,status,code,super,redirect,url,set,status,code,status,code
RedirectView -> public RedirectView(String redirectUrl, HttpStatus statusCode);1516617801;Create a new {@code RedirectView} with the given URL and an alternate_redirect status code such as {@link HttpStatus#TEMPORARY_REDIRECT} or_{@link HttpStatus#PERMANENT_REDIRECT}.;public RedirectView(String redirectUrl, HttpStatus statusCode) {_		super(redirectUrl)__		setStatusCode(statusCode)__	};create,a,new,code,redirect,view,with,the,given,url,and,an,alternate,redirect,status,code,such,as,link,http,status,or,link,http,status;public,redirect,view,string,redirect,url,http,status,status,code,super,redirect,url,set,status,code,status,code
RedirectView -> public RedirectView(String redirectUrl, HttpStatus statusCode);1519588127;Create a new {@code RedirectView} with the given URL and an alternate_redirect status code such as {@link HttpStatus#TEMPORARY_REDIRECT} or_{@link HttpStatus#PERMANENT_REDIRECT}.;public RedirectView(String redirectUrl, HttpStatus statusCode) {_		super(redirectUrl)__		setStatusCode(statusCode)__	};create,a,new,code,redirect,view,with,the,given,url,and,an,alternate,redirect,status,code,such,as,link,http,status,or,link,http,status;public,redirect,view,string,redirect,url,http,status,status,code,super,redirect,url,set,status,code,status,code
RedirectView -> public RedirectView(String redirectUrl, HttpStatus statusCode);1530174524;Create a new {@code RedirectView} with the given URL and an alternate_redirect status code such as {@link HttpStatus#TEMPORARY_REDIRECT} or_{@link HttpStatus#PERMANENT_REDIRECT}.;public RedirectView(String redirectUrl, HttpStatus statusCode) {_		super(redirectUrl)__		setStatusCode(statusCode)__	};create,a,new,code,redirect,view,with,the,given,url,and,an,alternate,redirect,status,code,such,as,link,http,status,or,link,http,status;public,redirect,view,string,redirect,url,http,status,status,code,super,redirect,url,set,status,code,status,code
RedirectView -> public RedirectView(String redirectUrl, HttpStatus statusCode);1533034998;Create a new {@code RedirectView} with the given URL and an alternate_redirect status code such as {@link HttpStatus#TEMPORARY_REDIRECT} or_{@link HttpStatus#PERMANENT_REDIRECT}.;public RedirectView(String redirectUrl, HttpStatus statusCode) {_		super(redirectUrl)__		setStatusCode(statusCode)__	};create,a,new,code,redirect,view,with,the,given,url,and,an,alternate,redirect,status,code,such,as,link,http,status,or,link,http,status;public,redirect,view,string,redirect,url,http,status,status,code,super,redirect,url,set,status,code,status,code
RedirectView -> public void setStatusCode(HttpStatus statusCode);1485986572;Set an alternate redirect status code such as_{@link HttpStatus#TEMPORARY_REDIRECT} or_{@link HttpStatus#PERMANENT_REDIRECT}.;public void setStatusCode(HttpStatus statusCode) {_		Assert.notNull(statusCode, "HttpStatus must not be null")__		Assert.isTrue(statusCode.is3xxRedirection(), "Must be a redirection (3xx status code)")__		this.statusCode = statusCode__	};set,an,alternate,redirect,status,code,such,as,link,http,status,or,link,http,status;public,void,set,status,code,http,status,status,code,assert,not,null,status,code,http,status,must,not,be,null,assert,is,true,status,code,is3xx,redirection,must,be,a,redirection,3xx,status,code,this,status,code,status,code
RedirectView -> public void setStatusCode(HttpStatus statusCode);1495657865;Set an alternate redirect status code such as_{@link HttpStatus#TEMPORARY_REDIRECT} or_{@link HttpStatus#PERMANENT_REDIRECT}.;public void setStatusCode(HttpStatus statusCode) {_		Assert.notNull(statusCode, "HttpStatus must not be null")__		Assert.isTrue(statusCode.is3xxRedirection(), "Must be a redirection (3xx status code)")__		this.statusCode = statusCode__	};set,an,alternate,redirect,status,code,such,as,link,http,status,or,link,http,status;public,void,set,status,code,http,status,status,code,assert,not,null,status,code,http,status,must,not,be,null,assert,is,true,status,code,is3xx,redirection,must,be,a,redirection,3xx,status,code,this,status,code,status,code
RedirectView -> public void setStatusCode(HttpStatus statusCode);1496837955;Set an alternate redirect status code such as_{@link HttpStatus#TEMPORARY_REDIRECT} or_{@link HttpStatus#PERMANENT_REDIRECT}.;public void setStatusCode(HttpStatus statusCode) {_		Assert.notNull(statusCode, "HttpStatus must not be null")__		Assert.isTrue(statusCode.is3xxRedirection(), "Must be a redirection (3xx status code)")__		this.statusCode = statusCode__	};set,an,alternate,redirect,status,code,such,as,link,http,status,or,link,http,status;public,void,set,status,code,http,status,status,code,assert,not,null,status,code,http,status,must,not,be,null,assert,is,true,status,code,is3xx,redirection,must,be,a,redirection,3xx,status,code,this,status,code,status,code
RedirectView -> public void setStatusCode(HttpStatus statusCode);1497232764;Set an alternate redirect status code such as_{@link HttpStatus#TEMPORARY_REDIRECT} or_{@link HttpStatus#PERMANENT_REDIRECT}.;public void setStatusCode(HttpStatus statusCode) {_		Assert.notNull(statusCode, "HttpStatus must not be null")__		Assert.isTrue(statusCode.is3xxRedirection(), "Must be a redirection (3xx status code)")__		this.statusCode = statusCode__	};set,an,alternate,redirect,status,code,such,as,link,http,status,or,link,http,status;public,void,set,status,code,http,status,status,code,assert,not,null,status,code,http,status,must,not,be,null,assert,is,true,status,code,is3xx,redirection,must,be,a,redirection,3xx,status,code,this,status,code,status,code
RedirectView -> public void setStatusCode(HttpStatus statusCode);1497275505;Set an alternate redirect status code such as_{@link HttpStatus#TEMPORARY_REDIRECT} or_{@link HttpStatus#PERMANENT_REDIRECT}.;public void setStatusCode(HttpStatus statusCode) {_		Assert.notNull(statusCode, "HttpStatus must not be null")__		Assert.isTrue(statusCode.is3xxRedirection(), "Must be a redirection (3xx status code)")__		this.statusCode = statusCode__	};set,an,alternate,redirect,status,code,such,as,link,http,status,or,link,http,status;public,void,set,status,code,http,status,status,code,assert,not,null,status,code,http,status,must,not,be,null,assert,is,true,status,code,is3xx,redirection,must,be,a,redirection,3xx,status,code,this,status,code,status,code
RedirectView -> public void setStatusCode(HttpStatus statusCode);1498762530;Set an alternate redirect status code such as_{@link HttpStatus#TEMPORARY_REDIRECT} or_{@link HttpStatus#PERMANENT_REDIRECT}.;public void setStatusCode(HttpStatus statusCode) {_		Assert.notNull(statusCode, "HttpStatus must not be null")__		Assert.isTrue(statusCode.is3xxRedirection(), "Must be a redirection (3xx status code)")__		this.statusCode = statusCode__	};set,an,alternate,redirect,status,code,such,as,link,http,status,or,link,http,status;public,void,set,status,code,http,status,status,code,assert,not,null,status,code,http,status,must,not,be,null,assert,is,true,status,code,is3xx,redirection,must,be,a,redirection,3xx,status,code,this,status,code,status,code
RedirectView -> public void setStatusCode(HttpStatus statusCode);1500457438;Set an alternate redirect status code such as_{@link HttpStatus#TEMPORARY_REDIRECT} or_{@link HttpStatus#PERMANENT_REDIRECT}.;public void setStatusCode(HttpStatus statusCode) {_		Assert.isTrue(statusCode.is3xxRedirection(), "Must be a redirection (3xx status code)")__		this.statusCode = statusCode__	};set,an,alternate,redirect,status,code,such,as,link,http,status,or,link,http,status;public,void,set,status,code,http,status,status,code,assert,is,true,status,code,is3xx,redirection,must,be,a,redirection,3xx,status,code,this,status,code,status,code
RedirectView -> public void setStatusCode(HttpStatus statusCode);1500495747;Set an alternate redirect status code such as_{@link HttpStatus#TEMPORARY_REDIRECT} or_{@link HttpStatus#PERMANENT_REDIRECT}.;public void setStatusCode(HttpStatus statusCode) {_		Assert.isTrue(statusCode.is3xxRedirection(), "Not a redirect status code")__		this.statusCode = statusCode__	};set,an,alternate,redirect,status,code,such,as,link,http,status,or,link,http,status;public,void,set,status,code,http,status,status,code,assert,is,true,status,code,is3xx,redirection,not,a,redirect,status,code,this,status,code,status,code
RedirectView -> public void setStatusCode(HttpStatus statusCode);1504701549;Set an alternate redirect status code such as_{@link HttpStatus#TEMPORARY_REDIRECT} or_{@link HttpStatus#PERMANENT_REDIRECT}.;public void setStatusCode(HttpStatus statusCode) {_		Assert.isTrue(statusCode.is3xxRedirection(), "Not a redirect status code")__		this.statusCode = statusCode__	};set,an,alternate,redirect,status,code,such,as,link,http,status,or,link,http,status;public,void,set,status,code,http,status,status,code,assert,is,true,status,code,is3xx,redirection,not,a,redirect,status,code,this,status,code,status,code
RedirectView -> public void setStatusCode(HttpStatus statusCode);1516617801;Set an alternate redirect status code such as_{@link HttpStatus#TEMPORARY_REDIRECT} or_{@link HttpStatus#PERMANENT_REDIRECT}.;public void setStatusCode(HttpStatus statusCode) {_		Assert.isTrue(statusCode.is3xxRedirection(), "Not a redirect status code")__		this.statusCode = statusCode__	};set,an,alternate,redirect,status,code,such,as,link,http,status,or,link,http,status;public,void,set,status,code,http,status,status,code,assert,is,true,status,code,is3xx,redirection,not,a,redirect,status,code,this,status,code,status,code
RedirectView -> public void setStatusCode(HttpStatus statusCode);1519588127;Set an alternate redirect status code such as_{@link HttpStatus#TEMPORARY_REDIRECT} or_{@link HttpStatus#PERMANENT_REDIRECT}.;public void setStatusCode(HttpStatus statusCode) {_		Assert.isTrue(statusCode.is3xxRedirection(), "Not a redirect status code")__		this.statusCode = statusCode__	};set,an,alternate,redirect,status,code,such,as,link,http,status,or,link,http,status;public,void,set,status,code,http,status,status,code,assert,is,true,status,code,is3xx,redirection,not,a,redirect,status,code,this,status,code,status,code
RedirectView -> public void setStatusCode(HttpStatus statusCode);1530174524;Set an alternate redirect status code such as_{@link HttpStatus#TEMPORARY_REDIRECT} or_{@link HttpStatus#PERMANENT_REDIRECT}.;public void setStatusCode(HttpStatus statusCode) {_		Assert.isTrue(statusCode.is3xxRedirection(), "Not a redirect status code")__		this.statusCode = statusCode__	};set,an,alternate,redirect,status,code,such,as,link,http,status,or,link,http,status;public,void,set,status,code,http,status,status,code,assert,is,true,status,code,is3xx,redirection,not,a,redirect,status,code,this,status,code,status,code
RedirectView -> public void setStatusCode(HttpStatus statusCode);1533034998;Set an alternate redirect status code such as_{@link HttpStatus#TEMPORARY_REDIRECT} or_{@link HttpStatus#PERMANENT_REDIRECT}.;public void setStatusCode(HttpStatus statusCode) {_		Assert.isTrue(statusCode.is3xxRedirection(), "Not a redirect status code")__		this.statusCode = statusCode__	};set,an,alternate,redirect,status,code,such,as,link,http,status,or,link,http,status;public,void,set,status,code,http,status,status,code,assert,is,true,status,code,is3xx,redirection,not,a,redirect,status,code,this,status,code,status,code
RedirectView -> public void setHosts(String... hosts);1485986572;Configure one or more hosts associated with the application._All other hosts will be considered external hosts._<p>In effect this provides a way turn off encoding via_{@link ServerHttpResponse#encodeUrl(String)} for URLs that have a_host and that host is not listed as a known host._<p>If not set (the default) all redirect URLs are encoded._@param hosts one or more application hosts;public void setHosts(String... hosts) {_		this.hosts = hosts__	};configure,one,or,more,hosts,associated,with,the,application,all,other,hosts,will,be,considered,external,hosts,p,in,effect,this,provides,a,way,turn,off,encoding,via,link,server,http,response,encode,url,string,for,urls,that,have,a,host,and,that,host,is,not,listed,as,a,known,host,p,if,not,set,the,default,all,redirect,urls,are,encoded,param,hosts,one,or,more,application,hosts;public,void,set,hosts,string,hosts,this,hosts,hosts
RedirectView -> public void setHosts(String... hosts);1495657865;Configure one or more hosts associated with the application._All other hosts will be considered external hosts._<p>In effect this provides a way turn off encoding via_{@link ServerHttpResponse#encodeUrl(String)} for URLs that have a_host and that host is not listed as a known host._<p>If not set (the default) all redirect URLs are encoded._@param hosts one or more application hosts;public void setHosts(String... hosts) {_		this.hosts = hosts__	};configure,one,or,more,hosts,associated,with,the,application,all,other,hosts,will,be,considered,external,hosts,p,in,effect,this,provides,a,way,turn,off,encoding,via,link,server,http,response,encode,url,string,for,urls,that,have,a,host,and,that,host,is,not,listed,as,a,known,host,p,if,not,set,the,default,all,redirect,urls,are,encoded,param,hosts,one,or,more,application,hosts;public,void,set,hosts,string,hosts,this,hosts,hosts
RedirectView -> public void setHosts(String... hosts);1496837955;Configure one or more hosts associated with the application._All other hosts will be considered external hosts._<p>In effect this provides a way turn off encoding via_{@link ServerHttpResponse#encodeUrl(String)} for URLs that have a_host and that host is not listed as a known host._<p>If not set (the default) all redirect URLs are encoded._@param hosts one or more application hosts;public void setHosts(String... hosts) {_		this.hosts = hosts__	};configure,one,or,more,hosts,associated,with,the,application,all,other,hosts,will,be,considered,external,hosts,p,in,effect,this,provides,a,way,turn,off,encoding,via,link,server,http,response,encode,url,string,for,urls,that,have,a,host,and,that,host,is,not,listed,as,a,known,host,p,if,not,set,the,default,all,redirect,urls,are,encoded,param,hosts,one,or,more,application,hosts;public,void,set,hosts,string,hosts,this,hosts,hosts
RedirectView -> public void setHosts(String... hosts);1497232764;Configure one or more hosts associated with the application._All other hosts will be considered external hosts._<p>In effect this provides a way turn off encoding via_{@link ServerHttpResponse#encodeUrl(String)} for URLs that have a_host and that host is not listed as a known host._<p>If not set (the default) all redirect URLs are encoded._@param hosts one or more application hosts;public void setHosts(String... hosts) {_		this.hosts = hosts__	};configure,one,or,more,hosts,associated,with,the,application,all,other,hosts,will,be,considered,external,hosts,p,in,effect,this,provides,a,way,turn,off,encoding,via,link,server,http,response,encode,url,string,for,urls,that,have,a,host,and,that,host,is,not,listed,as,a,known,host,p,if,not,set,the,default,all,redirect,urls,are,encoded,param,hosts,one,or,more,application,hosts;public,void,set,hosts,string,hosts,this,hosts,hosts
RedirectView -> public void setHosts(String... hosts);1497275505;Configure one or more hosts associated with the application._All other hosts will be considered external hosts._<p>In effect this provides a way turn off encoding via_{@link ServerHttpResponse#encodeUrl(String)} for URLs that have a_host and that host is not listed as a known host._<p>If not set (the default) all redirect URLs are encoded._@param hosts one or more application hosts;public void setHosts(String... hosts) {_		this.hosts = hosts__	};configure,one,or,more,hosts,associated,with,the,application,all,other,hosts,will,be,considered,external,hosts,p,in,effect,this,provides,a,way,turn,off,encoding,via,link,server,http,response,encode,url,string,for,urls,that,have,a,host,and,that,host,is,not,listed,as,a,known,host,p,if,not,set,the,default,all,redirect,urls,are,encoded,param,hosts,one,or,more,application,hosts;public,void,set,hosts,string,hosts,this,hosts,hosts
RedirectView -> public void setHosts(String... hosts);1498762530;Configure one or more hosts associated with the application._All other hosts will be considered external hosts._<p>In effect this provides a way turn off encoding via_{@link ServerHttpResponse#encodeUrl(String)} for URLs that have a_host and that host is not listed as a known host._<p>If not set (the default) all redirect URLs are encoded._@param hosts one or more application hosts;public void setHosts(String... hosts) {_		this.hosts = hosts__	};configure,one,or,more,hosts,associated,with,the,application,all,other,hosts,will,be,considered,external,hosts,p,in,effect,this,provides,a,way,turn,off,encoding,via,link,server,http,response,encode,url,string,for,urls,that,have,a,host,and,that,host,is,not,listed,as,a,known,host,p,if,not,set,the,default,all,redirect,urls,are,encoded,param,hosts,one,or,more,application,hosts;public,void,set,hosts,string,hosts,this,hosts,hosts
RedirectView -> public void setHosts(String... hosts);1500448076;Configure one or more hosts associated with the application._All other hosts will be considered external hosts._<p>In effect this provides a way turn off encoding via_{@link ServerHttpResponse#encodeUrl(String)} for URLs that have a_host and that host is not listed as a known host._<p>If not set (the default) all redirect URLs are encoded._@param hosts one or more application hosts;public void setHosts(String... hosts) {_		this.hosts = hosts__	};configure,one,or,more,hosts,associated,with,the,application,all,other,hosts,will,be,considered,external,hosts,p,in,effect,this,provides,a,way,turn,off,encoding,via,link,server,http,response,encode,url,string,for,urls,that,have,a,host,and,that,host,is,not,listed,as,a,known,host,p,if,not,set,the,default,all,redirect,urls,are,encoded,param,hosts,one,or,more,application,hosts;public,void,set,hosts,string,hosts,this,hosts,hosts
RedirectView -> public boolean isPropagateQuery();1485986572;Whether the query string of the current URL is appended to the redirect URL.;public boolean isPropagateQuery() {_		return this.propagateQuery__	};whether,the,query,string,of,the,current,url,is,appended,to,the,redirect,url;public,boolean,is,propagate,query,return,this,propagate,query
RedirectView -> public boolean isPropagateQuery();1495657865;Whether the query string of the current URL is appended to the redirect URL.;public boolean isPropagateQuery() {_		return this.propagateQuery__	};whether,the,query,string,of,the,current,url,is,appended,to,the,redirect,url;public,boolean,is,propagate,query,return,this,propagate,query
RedirectView -> public boolean isPropagateQuery();1496837955;Whether the query string of the current URL is appended to the redirect URL.;public boolean isPropagateQuery() {_		return this.propagateQuery__	};whether,the,query,string,of,the,current,url,is,appended,to,the,redirect,url;public,boolean,is,propagate,query,return,this,propagate,query
RedirectView -> public boolean isPropagateQuery();1497232764;Whether the query string of the current URL is appended to the redirect URL.;public boolean isPropagateQuery() {_		return this.propagateQuery__	};whether,the,query,string,of,the,current,url,is,appended,to,the,redirect,url;public,boolean,is,propagate,query,return,this,propagate,query
RedirectView -> public boolean isPropagateQuery();1497275505;Whether the query string of the current URL is appended to the redirect URL.;public boolean isPropagateQuery() {_		return this.propagateQuery__	};whether,the,query,string,of,the,current,url,is,appended,to,the,redirect,url;public,boolean,is,propagate,query,return,this,propagate,query
RedirectView -> public boolean isPropagateQuery();1498762530;Whether the query string of the current URL is appended to the redirect URL.;public boolean isPropagateQuery() {_		return this.propagateQuery__	};whether,the,query,string,of,the,current,url,is,appended,to,the,redirect,url;public,boolean,is,propagate,query,return,this,propagate,query
RedirectView -> public boolean isPropagateQuery();1500448076;Whether the query string of the current URL is appended to the redirect URL.;public boolean isPropagateQuery() {_		return this.propagateQuery__	};whether,the,query,string,of,the,current,url,is,appended,to,the,redirect,url;public,boolean,is,propagate,query,return,this,propagate,query
RedirectView -> public boolean isPropagateQuery();1500457438;Whether the query string of the current URL is appended to the redirect URL.;public boolean isPropagateQuery() {_		return this.propagateQuery__	};whether,the,query,string,of,the,current,url,is,appended,to,the,redirect,url;public,boolean,is,propagate,query,return,this,propagate,query
RedirectView -> public boolean isPropagateQuery();1500495747;Whether the query string of the current URL is appended to the redirect URL.;public boolean isPropagateQuery() {_		return this.propagateQuery__	};whether,the,query,string,of,the,current,url,is,appended,to,the,redirect,url;public,boolean,is,propagate,query,return,this,propagate,query
RedirectView -> public boolean isPropagateQuery();1504701549;Whether the query string of the current URL is appended to the redirect URL.;public boolean isPropagateQuery() {_		return this.propagateQuery__	};whether,the,query,string,of,the,current,url,is,appended,to,the,redirect,url;public,boolean,is,propagate,query,return,this,propagate,query
RedirectView -> public boolean isPropagateQuery();1516617801;Whether the query string of the current URL is appended to the redirect URL.;public boolean isPropagateQuery() {_		return this.propagateQuery__	};whether,the,query,string,of,the,current,url,is,appended,to,the,redirect,url;public,boolean,is,propagate,query,return,this,propagate,query
RedirectView -> public boolean isPropagateQuery();1519588127;Whether the query string of the current URL is appended to the redirect URL.;public boolean isPropagateQuery() {_		return this.propagateQuery__	};whether,the,query,string,of,the,current,url,is,appended,to,the,redirect,url;public,boolean,is,propagate,query,return,this,propagate,query
RedirectView -> public boolean isPropagateQuery();1530174524;Whether the query string of the current URL is appended to the redirect URL.;public boolean isPropagateQuery() {_		return this.propagateQuery__	};whether,the,query,string,of,the,current,url,is,appended,to,the,redirect,url;public,boolean,is,propagate,query,return,this,propagate,query
RedirectView -> public boolean isPropagateQuery();1533034998;Whether the query string of the current URL is appended to the redirect URL.;public boolean isPropagateQuery() {_		return this.propagateQuery__	};whether,the,query,string,of,the,current,url,is,appended,to,the,redirect,url;public,boolean,is,propagate,query,return,this,propagate,query
RedirectView -> public String[] getHosts();1485986572;Return the configured application hosts.;public String[] getHosts() {_		return this.hosts__	};return,the,configured,application,hosts;public,string,get,hosts,return,this,hosts
RedirectView -> public String[] getHosts();1495657865;Return the configured application hosts.;public String[] getHosts() {_		return this.hosts__	};return,the,configured,application,hosts;public,string,get,hosts,return,this,hosts
RedirectView -> public String[] getHosts();1496837955;Return the configured application hosts.;public String[] getHosts() {_		return this.hosts__	};return,the,configured,application,hosts;public,string,get,hosts,return,this,hosts
RedirectView -> public String[] getHosts();1497232764;Return the configured application hosts.;public String[] getHosts() {_		return this.hosts__	};return,the,configured,application,hosts;public,string,get,hosts,return,this,hosts
RedirectView -> public String[] getHosts();1497275505;Return the configured application hosts.;public String[] getHosts() {_		return this.hosts__	};return,the,configured,application,hosts;public,string,get,hosts,return,this,hosts
RedirectView -> public String[] getHosts();1498762530;Return the configured application hosts.;public String[] getHosts() {_		return this.hosts__	};return,the,configured,application,hosts;public,string,get,hosts,return,this,hosts
RedirectView -> public String[] getHosts();1500448076;Return the configured application hosts.;public String[] getHosts() {_		return this.hosts__	};return,the,configured,application,hosts;public,string,get,hosts,return,this,hosts
RedirectView -> public RedirectView(String redirectUrl);1485986572;Create a new {@code RedirectView} with the given redirect URL._Status code {@link HttpStatus#SEE_OTHER} is used by default.;public RedirectView(String redirectUrl) {_		super(redirectUrl)__	};create,a,new,code,redirect,view,with,the,given,redirect,url,status,code,link,http,status,is,used,by,default;public,redirect,view,string,redirect,url,super,redirect,url
RedirectView -> public RedirectView(String redirectUrl);1495657865;Create a new {@code RedirectView} with the given redirect URL._Status code {@link HttpStatus#SEE_OTHER} is used by default.;public RedirectView(String redirectUrl) {_		super(redirectUrl)__	};create,a,new,code,redirect,view,with,the,given,redirect,url,status,code,link,http,status,is,used,by,default;public,redirect,view,string,redirect,url,super,redirect,url
RedirectView -> public RedirectView(String redirectUrl);1496837955;Create a new {@code RedirectView} with the given redirect URL._Status code {@link HttpStatus#SEE_OTHER} is used by default.;public RedirectView(String redirectUrl) {_		super(redirectUrl)__	};create,a,new,code,redirect,view,with,the,given,redirect,url,status,code,link,http,status,is,used,by,default;public,redirect,view,string,redirect,url,super,redirect,url
RedirectView -> public RedirectView(String redirectUrl);1497232764;Create a new {@code RedirectView} with the given redirect URL._Status code {@link HttpStatus#SEE_OTHER} is used by default.;public RedirectView(String redirectUrl) {_		super(redirectUrl)__	};create,a,new,code,redirect,view,with,the,given,redirect,url,status,code,link,http,status,is,used,by,default;public,redirect,view,string,redirect,url,super,redirect,url
RedirectView -> public RedirectView(String redirectUrl);1497275505;Create a new {@code RedirectView} with the given redirect URL._Status code {@link HttpStatus#SEE_OTHER} is used by default.;public RedirectView(String redirectUrl) {_		super(redirectUrl)__	};create,a,new,code,redirect,view,with,the,given,redirect,url,status,code,link,http,status,is,used,by,default;public,redirect,view,string,redirect,url,super,redirect,url
RedirectView -> public RedirectView(String redirectUrl);1498762530;Create a new {@code RedirectView} with the given redirect URL._Status code {@link HttpStatus#SEE_OTHER} is used by default.;public RedirectView(String redirectUrl) {_		super(redirectUrl)__	};create,a,new,code,redirect,view,with,the,given,redirect,url,status,code,link,http,status,is,used,by,default;public,redirect,view,string,redirect,url,super,redirect,url
RedirectView -> public RedirectView(String redirectUrl);1500448076;Create a new {@code RedirectView} with the given redirect URL._Status code {@link HttpStatus#SEE_OTHER} is used by default.;public RedirectView(String redirectUrl) {_		super(redirectUrl)__	};create,a,new,code,redirect,view,with,the,given,redirect,url,status,code,link,http,status,is,used,by,default;public,redirect,view,string,redirect,url,super,redirect,url
RedirectView -> public RedirectView(String redirectUrl);1500457438;Create a new {@code RedirectView} with the given redirect URL._Status code {@link HttpStatus#SEE_OTHER} is used by default.;public RedirectView(String redirectUrl) {_		super(redirectUrl)__	};create,a,new,code,redirect,view,with,the,given,redirect,url,status,code,link,http,status,is,used,by,default;public,redirect,view,string,redirect,url,super,redirect,url
RedirectView -> public RedirectView(String redirectUrl);1500495747;Create a new {@code RedirectView} with the given redirect URL._Status code {@link HttpStatus#SEE_OTHER} is used by default.;public RedirectView(String redirectUrl) {_		super(redirectUrl)__	};create,a,new,code,redirect,view,with,the,given,redirect,url,status,code,link,http,status,is,used,by,default;public,redirect,view,string,redirect,url,super,redirect,url
RedirectView -> public RedirectView(String redirectUrl);1504701549;Create a new {@code RedirectView} with the given redirect URL._Status code {@link HttpStatus#SEE_OTHER} is used by default.;public RedirectView(String redirectUrl) {_		super(redirectUrl)__	};create,a,new,code,redirect,view,with,the,given,redirect,url,status,code,link,http,status,is,used,by,default;public,redirect,view,string,redirect,url,super,redirect,url
RedirectView -> public RedirectView(String redirectUrl);1516617801;Create a new {@code RedirectView} with the given redirect URL._Status code {@link HttpStatus#SEE_OTHER} is used by default.;public RedirectView(String redirectUrl) {_		super(redirectUrl)__	};create,a,new,code,redirect,view,with,the,given,redirect,url,status,code,link,http,status,is,used,by,default;public,redirect,view,string,redirect,url,super,redirect,url
RedirectView -> public RedirectView(String redirectUrl);1519588127;Create a new {@code RedirectView} with the given redirect URL._Status code {@link HttpStatus#SEE_OTHER} is used by default.;public RedirectView(String redirectUrl) {_		super(redirectUrl)__	};create,a,new,code,redirect,view,with,the,given,redirect,url,status,code,link,http,status,is,used,by,default;public,redirect,view,string,redirect,url,super,redirect,url
RedirectView -> public RedirectView(String redirectUrl);1530174524;Create a new {@code RedirectView} with the given redirect URL._Status code {@link HttpStatus#SEE_OTHER} is used by default.;public RedirectView(String redirectUrl) {_		super(redirectUrl)__	};create,a,new,code,redirect,view,with,the,given,redirect,url,status,code,link,http,status,is,used,by,default;public,redirect,view,string,redirect,url,super,redirect,url
RedirectView -> public RedirectView(String redirectUrl);1533034998;Create a new {@code RedirectView} with the given redirect URL._Status code {@link HttpStatus#SEE_OTHER} is used by default.;public RedirectView(String redirectUrl) {_		super(redirectUrl)__	};create,a,new,code,redirect,view,with,the,given,redirect,url,status,code,link,http,status,is,used,by,default;public,redirect,view,string,redirect,url,super,redirect,url
RedirectView -> @Override 	protected Mono<Void> renderInternal(Map<String, Object> model, MediaType contentType, 			ServerWebExchange exchange);1485986572;Convert model to request parameters and redirect to the given URL.;@Override_	protected Mono<Void> renderInternal(Map<String, Object> model, MediaType contentType,_			ServerWebExchange exchange) {__		String targetUrl = createTargetUrl(model, exchange)__		return sendRedirect(targetUrl, exchange)__	};convert,model,to,request,parameters,and,redirect,to,the,given,url;override,protected,mono,void,render,internal,map,string,object,model,media,type,content,type,server,web,exchange,exchange,string,target,url,create,target,url,model,exchange,return,send,redirect,target,url,exchange
RedirectView -> @Override 	protected Mono<Void> renderInternal(Map<String, Object> model, MediaType contentType, 			ServerWebExchange exchange);1495657865;Convert model to request parameters and redirect to the given URL.;@Override_	protected Mono<Void> renderInternal(Map<String, Object> model, MediaType contentType,_			ServerWebExchange exchange) {__		String targetUrl = createTargetUrl(model, exchange)__		return sendRedirect(targetUrl, exchange)__	};convert,model,to,request,parameters,and,redirect,to,the,given,url;override,protected,mono,void,render,internal,map,string,object,model,media,type,content,type,server,web,exchange,exchange,string,target,url,create,target,url,model,exchange,return,send,redirect,target,url,exchange
RedirectView -> @Override 	protected Mono<Void> renderInternal(Map<String, Object> model, MediaType contentType, 			ServerWebExchange exchange);1496837955;Convert model to request parameters and redirect to the given URL.;@Override_	protected Mono<Void> renderInternal(Map<String, Object> model, MediaType contentType,_			ServerWebExchange exchange) {__		String targetUrl = createTargetUrl(model, exchange)__		return sendRedirect(targetUrl, exchange)__	};convert,model,to,request,parameters,and,redirect,to,the,given,url;override,protected,mono,void,render,internal,map,string,object,model,media,type,content,type,server,web,exchange,exchange,string,target,url,create,target,url,model,exchange,return,send,redirect,target,url,exchange
RedirectView -> @Override 	protected Mono<Void> renderInternal(Map<String, Object> model, MediaType contentType, 			ServerWebExchange exchange);1497232764;Convert model to request parameters and redirect to the given URL.;@Override_	protected Mono<Void> renderInternal(Map<String, Object> model, MediaType contentType,_			ServerWebExchange exchange) {__		String targetUrl = createTargetUrl(model, exchange)__		return sendRedirect(targetUrl, exchange)__	};convert,model,to,request,parameters,and,redirect,to,the,given,url;override,protected,mono,void,render,internal,map,string,object,model,media,type,content,type,server,web,exchange,exchange,string,target,url,create,target,url,model,exchange,return,send,redirect,target,url,exchange
RedirectView -> @Override 	protected Mono<Void> renderInternal(Map<String, Object> model, MediaType contentType, 			ServerWebExchange exchange);1497275505;Convert model to request parameters and redirect to the given URL.;@Override_	protected Mono<Void> renderInternal(Map<String, Object> model, MediaType contentType,_			ServerWebExchange exchange) {__		String targetUrl = createTargetUrl(model, exchange)__		return sendRedirect(targetUrl, exchange)__	};convert,model,to,request,parameters,and,redirect,to,the,given,url;override,protected,mono,void,render,internal,map,string,object,model,media,type,content,type,server,web,exchange,exchange,string,target,url,create,target,url,model,exchange,return,send,redirect,target,url,exchange
RedirectView -> @Override 	protected Mono<Void> renderInternal(Map<String, Object> model, MediaType contentType, 			ServerWebExchange exchange);1498762530;Convert model to request parameters and redirect to the given URL.;@Override_	protected Mono<Void> renderInternal(Map<String, Object> model, MediaType contentType,_			ServerWebExchange exchange) {__		String targetUrl = createTargetUrl(model, exchange)__		return sendRedirect(targetUrl, exchange)__	};convert,model,to,request,parameters,and,redirect,to,the,given,url;override,protected,mono,void,render,internal,map,string,object,model,media,type,content,type,server,web,exchange,exchange,string,target,url,create,target,url,model,exchange,return,send,redirect,target,url,exchange
RedirectView -> @Override 	protected Mono<Void> renderInternal(Map<String, Object> model, MediaType contentType, 			ServerWebExchange exchange);1500448076;Convert model to request parameters and redirect to the given URL.;@Override_	protected Mono<Void> renderInternal(Map<String, Object> model, MediaType contentType,_			ServerWebExchange exchange) {__		String targetUrl = createTargetUrl(model, exchange)__		return sendRedirect(targetUrl, exchange)__	};convert,model,to,request,parameters,and,redirect,to,the,given,url;override,protected,mono,void,render,internal,map,string,object,model,media,type,content,type,server,web,exchange,exchange,string,target,url,create,target,url,model,exchange,return,send,redirect,target,url,exchange
