commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the configured {@link WebSocketContainer} to use.  */ ;/**  * Return the configured {@link WebSocketContainer} to use.  */ public WebSocketContainer getWebSocketContainer() {     return this.webSocketContainer. }
false;public;2;4;;@Override public Mono<Void> execute(URI url, WebSocketHandler handler) {     return execute(url, new HttpHeaders(), handler). }
false;public;3;4;;@Override public Mono<Void> execute(URI url, HttpHeaders headers, WebSocketHandler handler) {     return executeInternal(url, headers, handler). }
false;private;3;16;;private Mono<Void> executeInternal(URI url, HttpHeaders requestHeaders, WebSocketHandler handler) {     MonoProcessor<Void> completionMono = MonoProcessor.create().     return Mono.fromCallable(() -> {         if (logger.isDebugEnabled()) {             logger.debug("Connecting to " + url).         }         List<String> protocols = handler.getSubProtocols().         DefaultConfigurator configurator = new DefaultConfigurator(requestHeaders).         Endpoint endpoint = createEndpoint(url, handler, completionMono, configurator).         ClientEndpointConfig config = createEndpointConfig(configurator, protocols).         return this.webSocketContainer.connectToServer(endpoint, config, url).     }).subscribeOn(// connectToServer is blocking     Schedulers.elastic()).then(completionMono). }
false;private;4;6;;private StandardWebSocketHandlerAdapter createEndpoint(URI url, WebSocketHandler handler, MonoProcessor<Void> completion, DefaultConfigurator configurator) {     return new StandardWebSocketHandlerAdapter(handler, session -> createWebSocketSession(session, createHandshakeInfo(url, configurator), completion)). }
false;private;2;5;;private HandshakeInfo createHandshakeInfo(URI url, DefaultConfigurator configurator) {     HttpHeaders responseHeaders = configurator.getResponseHeaders().     String protocol = responseHeaders.getFirst("Sec-WebSocket-Protocol").     return new HandshakeInfo(url, responseHeaders, Mono.empty(), protocol). }
false;protected;3;5;;protected StandardWebSocketSession createWebSocketSession(Session session, HandshakeInfo info, MonoProcessor<Void> completion) {     return new StandardWebSocketSession(session, info, this.bufferFactory, completion). }
false;private;2;6;;private ClientEndpointConfig createEndpointConfig(Configurator configurator, List<String> subProtocols) {     return ClientEndpointConfig.Builder.create().configurator(configurator).preferredSubprotocols(subProtocols).build(). }
false;protected;0;3;;protected DataBufferFactory bufferFactory() {     return this.bufferFactory. }
false;public;0;3;;public HttpHeaders getResponseHeaders() {     return this.responseHeaders. }
false;public;1;4;;@Override public void beforeRequest(Map<String, List<String>> requestHeaders) {     requestHeaders.putAll(this.requestHeaders). }
false;public;1;4;;@Override public void afterResponse(HandshakeResponse response) {     response.getHeaders().forEach(this.responseHeaders::put). }
