# id;timestamp;commentText;codeText;commentWords;codeWords
ResourceWebHandler -> protected String processPath(String path);1485986572;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}.;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceWebHandler -> protected String processPath(String path);1490197121;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}.;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceWebHandler -> protected String processPath(String path);1491927184;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}.;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceWebHandler -> protected String processPath(String path);1492090594;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}.;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceWebHandler -> protected String processPath(String path);1495639183;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}.;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceWebHandler -> protected String processPath(String path);1495868221;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}.;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceWebHandler -> protected String processPath(String path);1496837955;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}.;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceWebHandler -> protected String processPath(String path);1497039338;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}.;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceWebHandler -> protected String processPath(String path);1498762530;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}.;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceWebHandler -> protected String processPath(String path);1498953917;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}.;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceWebHandler -> protected String processPath(String path);1500448076;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}.;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceWebHandler -> protected String processPath(String path);1501237594;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}.;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceWebHandler -> protected String processPath(String path);1507670883;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}.;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceWebHandler -> protected String processPath(String path);1519295386;Process the given resource path to be used._<p>The default implementation replaces any combination of leading '/' and_control characters (00-1F and 7F) with a single "/" or "". For example_{@code "  // /// ////  foo/bar"} becomes {@code "/foo/bar"}.;protected String processPath(String path) {_		boolean slash = false__		for (int i = 0_ i < path.length()_ i++) {_			if (path.charAt(i) == '/') {_				slash = true__			}_			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {_				if (i == 0 || (i == 1 && slash)) {_					return path__				}_				path = slash ? "/" + path.substring(i) : path.substring(i)__				if (logger.isTraceEnabled()) {_					logger.trace("Path after trimming leading '/' and control characters: " + path)__				}_				return path__			}_		}_		return (slash ? "/" : "")__	};process,the,given,resource,path,to,be,used,p,the,default,implementation,replaces,any,combination,of,leading,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar;protected,string,process,path,string,path,boolean,slash,false,for,int,i,0,i,path,length,i,if,path,char,at,i,slash,true,else,if,path,char,at,i,path,char,at,i,127,if,i,0,i,1,slash,return,path,path,slash,path,substring,i,path,substring,i,if,logger,is,trace,enabled,logger,trace,path,after,trimming,leading,and,control,characters,path,return,path,return,slash
ResourceWebHandler -> protected String processPath(String path);1521494163;Process the given resource path._<p>The default implementation replaces:_<ul>_<li>Backslash with forward slash._<li>Duplicate occurrences of slash with a single slash._<li>Any combination of leading slash and control characters (00-1F and 7F)_with a single "/" or "". For example {@code "  / // foo/bar"}_becomes {@code "/foo/bar"}._</ul>_@since 3.2.12;protected String processPath(String path) {_		path = StringUtils.replace(path, "\\", "/")__		path = cleanDuplicateSlashes(path)__		return cleanLeadingSlash(path)__	};process,the,given,resource,path,p,the,default,implementation,replaces,ul,li,backslash,with,forward,slash,li,duplicate,occurrences,of,slash,with,a,single,slash,li,any,combination,of,leading,slash,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,ul,since,3,2,12;protected,string,process,path,string,path,path,string,utils,replace,path,path,clean,duplicate,slashes,path,return,clean,leading,slash,path
ResourceWebHandler -> protected String processPath(String path);1522105242;Process the given resource path._<p>The default implementation replaces:_<ul>_<li>Backslash with forward slash._<li>Duplicate occurrences of slash with a single slash._<li>Any combination of leading slash and control characters (00-1F and 7F)_with a single "/" or "". For example {@code "  / // foo/bar"}_becomes {@code "/foo/bar"}._</ul>_@since 3.2.12;protected String processPath(String path) {_		path = StringUtils.replace(path, "\\", "/")__		path = cleanDuplicateSlashes(path)__		return cleanLeadingSlash(path)__	};process,the,given,resource,path,p,the,default,implementation,replaces,ul,li,backslash,with,forward,slash,li,duplicate,occurrences,of,slash,with,a,single,slash,li,any,combination,of,leading,slash,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,ul,since,3,2,12;protected,string,process,path,string,path,path,string,utils,replace,path,path,clean,duplicate,slashes,path,return,clean,leading,slash,path
ResourceWebHandler -> protected String processPath(String path);1527081441;Process the given resource path._<p>The default implementation replaces:_<ul>_<li>Backslash with forward slash._<li>Duplicate occurrences of slash with a single slash._<li>Any combination of leading slash and control characters (00-1F and 7F)_with a single "/" or "". For example {@code "  / // foo/bar"}_becomes {@code "/foo/bar"}._</ul>_@since 3.2.12;protected String processPath(String path) {_		path = StringUtils.replace(path, "\\", "/")__		path = cleanDuplicateSlashes(path)__		return cleanLeadingSlash(path)__	};process,the,given,resource,path,p,the,default,implementation,replaces,ul,li,backslash,with,forward,slash,li,duplicate,occurrences,of,slash,with,a,single,slash,li,any,combination,of,leading,slash,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,ul,since,3,2,12;protected,string,process,path,string,path,path,string,utils,replace,path,path,clean,duplicate,slashes,path,return,clean,leading,slash,path
ResourceWebHandler -> protected String processPath(String path);1529721864;Process the given resource path._<p>The default implementation replaces:_<ul>_<li>Backslash with forward slash._<li>Duplicate occurrences of slash with a single slash._<li>Any combination of leading slash and control characters (00-1F and 7F)_with a single "/" or "". For example {@code "  / // foo/bar"}_becomes {@code "/foo/bar"}._</ul>_@since 3.2.12;protected String processPath(String path) {_		path = StringUtils.replace(path, "\\", "/")__		path = cleanDuplicateSlashes(path)__		return cleanLeadingSlash(path)__	};process,the,given,resource,path,p,the,default,implementation,replaces,ul,li,backslash,with,forward,slash,li,duplicate,occurrences,of,slash,with,a,single,slash,li,any,combination,of,leading,slash,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,ul,since,3,2,12;protected,string,process,path,string,path,path,string,utils,replace,path,path,clean,duplicate,slashes,path,return,clean,leading,slash,path
ResourceWebHandler -> protected String processPath(String path);1530174524;Process the given resource path._<p>The default implementation replaces:_<ul>_<li>Backslash with forward slash._<li>Duplicate occurrences of slash with a single slash._<li>Any combination of leading slash and control characters (00-1F and 7F)_with a single "/" or "". For example {@code "  / // foo/bar"}_becomes {@code "/foo/bar"}._</ul>_@since 3.2.12;protected String processPath(String path) {_		path = StringUtils.replace(path, "\\", "/")__		path = cleanDuplicateSlashes(path)__		return cleanLeadingSlash(path)__	};process,the,given,resource,path,p,the,default,implementation,replaces,ul,li,backslash,with,forward,slash,li,duplicate,occurrences,of,slash,with,a,single,slash,li,any,combination,of,leading,slash,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,ul,since,3,2,12;protected,string,process,path,string,path,path,string,utils,replace,path,path,clean,duplicate,slashes,path,return,clean,leading,slash,path
ResourceWebHandler -> protected String processPath(String path);1530190293;Process the given resource path._<p>The default implementation replaces:_<ul>_<li>Backslash with forward slash._<li>Duplicate occurrences of slash with a single slash._<li>Any combination of leading slash and control characters (00-1F and 7F)_with a single "/" or "". For example {@code "  / // foo/bar"}_becomes {@code "/foo/bar"}._</ul>_@since 3.2.12;protected String processPath(String path) {_		path = StringUtils.replace(path, "\\", "/")__		path = cleanDuplicateSlashes(path)__		return cleanLeadingSlash(path)__	};process,the,given,resource,path,p,the,default,implementation,replaces,ul,li,backslash,with,forward,slash,li,duplicate,occurrences,of,slash,with,a,single,slash,li,any,combination,of,leading,slash,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,ul,since,3,2,12;protected,string,process,path,string,path,path,string,utils,replace,path,path,clean,duplicate,slashes,path,return,clean,leading,slash,path
ResourceWebHandler -> protected String processPath(String path);1530793633;Process the given resource path._<p>The default implementation replaces:_<ul>_<li>Backslash with forward slash._<li>Duplicate occurrences of slash with a single slash._<li>Any combination of leading slash and control characters (00-1F and 7F)_with a single "/" or "". For example {@code "  / // foo/bar"}_becomes {@code "/foo/bar"}._</ul>_@since 3.2.12;protected String processPath(String path) {_		path = StringUtils.replace(path, "\\", "/")__		path = cleanDuplicateSlashes(path)__		return cleanLeadingSlash(path)__	};process,the,given,resource,path,p,the,default,implementation,replaces,ul,li,backslash,with,forward,slash,li,duplicate,occurrences,of,slash,with,a,single,slash,li,any,combination,of,leading,slash,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,ul,since,3,2,12;protected,string,process,path,string,path,path,string,utils,replace,path,path,clean,duplicate,slashes,path,return,clean,leading,slash,path
ResourceWebHandler -> protected String processPath(String path);1530793695;Process the given resource path._<p>The default implementation replaces:_<ul>_<li>Backslash with forward slash._<li>Duplicate occurrences of slash with a single slash._<li>Any combination of leading slash and control characters (00-1F and 7F)_with a single "/" or "". For example {@code "  / // foo/bar"}_becomes {@code "/foo/bar"}._</ul>_@since 3.2.12;protected String processPath(String path) {_		path = StringUtils.replace(path, "\\", "/")__		path = cleanDuplicateSlashes(path)__		return cleanLeadingSlash(path)__	};process,the,given,resource,path,p,the,default,implementation,replaces,ul,li,backslash,with,forward,slash,li,duplicate,occurrences,of,slash,with,a,single,slash,li,any,combination,of,leading,slash,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,ul,since,3,2,12;protected,string,process,path,string,path,path,string,utils,replace,path,path,clean,duplicate,slashes,path,return,clean,leading,slash,path
ResourceWebHandler -> protected String processPath(String path);1532091916;Process the given resource path._<p>The default implementation replaces:_<ul>_<li>Backslash with forward slash._<li>Duplicate occurrences of slash with a single slash._<li>Any combination of leading slash and control characters (00-1F and 7F)_with a single "/" or "". For example {@code "  / // foo/bar"}_becomes {@code "/foo/bar"}._</ul>_@since 3.2.12;protected String processPath(String path) {_		path = StringUtils.replace(path, "\\", "/")__		path = cleanDuplicateSlashes(path)__		return cleanLeadingSlash(path)__	};process,the,given,resource,path,p,the,default,implementation,replaces,ul,li,backslash,with,forward,slash,li,duplicate,occurrences,of,slash,with,a,single,slash,li,any,combination,of,leading,slash,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,ul,since,3,2,12;protected,string,process,path,string,path,path,string,utils,replace,path,path,clean,duplicate,slashes,path,return,clean,leading,slash,path
ResourceWebHandler -> protected String processPath(String path);1542138563;Process the given resource path._<p>The default implementation replaces:_<ul>_<li>Backslash with forward slash._<li>Duplicate occurrences of slash with a single slash._<li>Any combination of leading slash and control characters (00-1F and 7F)_with a single "/" or "". For example {@code "  / // foo/bar"}_becomes {@code "/foo/bar"}._</ul>_@since 3.2.12;protected String processPath(String path) {_		path = StringUtils.replace(path, "\\", "/")__		path = cleanDuplicateSlashes(path)__		return cleanLeadingSlash(path)__	};process,the,given,resource,path,p,the,default,implementation,replaces,ul,li,backslash,with,forward,slash,li,duplicate,occurrences,of,slash,with,a,single,slash,li,any,combination,of,leading,slash,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,ul,since,3,2,12;protected,string,process,path,string,path,path,string,utils,replace,path,path,clean,duplicate,slashes,path,return,clean,leading,slash,path
ResourceWebHandler -> protected String processPath(String path);1542899558;Process the given resource path._<p>The default implementation replaces:_<ul>_<li>Backslash with forward slash._<li>Duplicate occurrences of slash with a single slash._<li>Any combination of leading slash and control characters (00-1F and 7F)_with a single "/" or "". For example {@code "  / // foo/bar"}_becomes {@code "/foo/bar"}._</ul>_@since 3.2.12;protected String processPath(String path) {_		path = StringUtils.replace(path, "\\", "/")__		path = cleanDuplicateSlashes(path)__		return cleanLeadingSlash(path)__	};process,the,given,resource,path,p,the,default,implementation,replaces,ul,li,backslash,with,forward,slash,li,duplicate,occurrences,of,slash,with,a,single,slash,li,any,combination,of,leading,slash,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,ul,since,3,2,12;protected,string,process,path,string,path,path,string,utils,replace,path,path,clean,duplicate,slashes,path,return,clean,leading,slash,path
ResourceWebHandler -> protected String processPath(String path);1542907316;Process the given resource path._<p>The default implementation replaces:_<ul>_<li>Backslash with forward slash._<li>Duplicate occurrences of slash with a single slash._<li>Any combination of leading slash and control characters (00-1F and 7F)_with a single "/" or "". For example {@code "  / // foo/bar"}_becomes {@code "/foo/bar"}._</ul>_@since 3.2.12;protected String processPath(String path) {_		path = StringUtils.replace(path, "\\", "/")__		path = cleanDuplicateSlashes(path)__		return cleanLeadingSlash(path)__	};process,the,given,resource,path,p,the,default,implementation,replaces,ul,li,backslash,with,forward,slash,li,duplicate,occurrences,of,slash,with,a,single,slash,li,any,combination,of,leading,slash,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,ul,since,3,2,12;protected,string,process,path,string,path,path,string,utils,replace,path,path,clean,duplicate,slashes,path,return,clean,leading,slash,path
ResourceWebHandler -> protected String processPath(String path);1544609805;Process the given resource path._<p>The default implementation replaces:_<ul>_<li>Backslash with forward slash._<li>Duplicate occurrences of slash with a single slash._<li>Any combination of leading slash and control characters (00-1F and 7F)_with a single "/" or "". For example {@code "  / // foo/bar"}_becomes {@code "/foo/bar"}._</ul>_@since 3.2.12;protected String processPath(String path) {_		path = StringUtils.replace(path, "\\", "/")__		path = cleanDuplicateSlashes(path)__		return cleanLeadingSlash(path)__	};process,the,given,resource,path,p,the,default,implementation,replaces,ul,li,backslash,with,forward,slash,li,duplicate,occurrences,of,slash,with,a,single,slash,li,any,combination,of,leading,slash,and,control,characters,00,1f,and,7f,with,a,single,or,for,example,code,foo,bar,becomes,code,foo,bar,ul,since,3,2,12;protected,string,process,path,string,path,path,string,utils,replace,path,path,clean,duplicate,slashes,path,return,clean,leading,slash,path
ResourceWebHandler -> public void setLocations(List<Resource> locations);1485986572;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceWebHandler -> public void setLocations(List<Resource> locations);1490197121;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceWebHandler -> public void setLocations(List<Resource> locations);1491927184;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceWebHandler -> public void setLocations(List<Resource> locations);1492090594;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceWebHandler -> public void setLocations(List<Resource> locations);1495639183;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceWebHandler -> public void setLocations(List<Resource> locations);1495868221;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(List<Resource> locations) {_		Assert.notNull(locations, "Locations list must not be null")__		this.locations.clear()__		this.locations.addAll(locations)__	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,list,resource,locations,assert,not,null,locations,locations,list,must,not,be,null,this,locations,clear,this,locations,add,all,locations
ResourceWebHandler -> private boolean isInvalidEncodedPath(String path);1522105242;Check whether the given path contains invalid escape sequences._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;private boolean isInvalidEncodedPath(String path) {_		if (path.contains("%")) {_			try {_				_				String decodedPath = URLDecoder.decode(path, "UTF-8")__				if (isInvalidPath(decodedPath)) {_					return true__				}_				decodedPath = processPath(decodedPath)__				if (isInvalidPath(decodedPath)) {_					return true__				}_			}_			catch (IllegalArgumentException | UnsupportedEncodingException ex) {_				_			}_		}_		return false__	};check,whether,the,given,path,contains,invalid,escape,sequences,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;private,boolean,is,invalid,encoded,path,string,path,if,path,contains,try,string,decoded,path,urldecoder,decode,path,utf,8,if,is,invalid,path,decoded,path,return,true,decoded,path,process,path,decoded,path,if,is,invalid,path,decoded,path,return,true,catch,illegal,argument,exception,unsupported,encoding,exception,ex,return,false
ResourceWebHandler -> private boolean isInvalidEncodedPath(String path);1527081441;Check whether the given path contains invalid escape sequences._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;private boolean isInvalidEncodedPath(String path) {_		if (path.contains("%")) {_			try {_				_				String decodedPath = URLDecoder.decode(path, "UTF-8")__				if (isInvalidPath(decodedPath)) {_					return true__				}_				decodedPath = processPath(decodedPath)__				if (isInvalidPath(decodedPath)) {_					return true__				}_			}_			catch (IllegalArgumentException | UnsupportedEncodingException ex) {_				_			}_		}_		return false__	};check,whether,the,given,path,contains,invalid,escape,sequences,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;private,boolean,is,invalid,encoded,path,string,path,if,path,contains,try,string,decoded,path,urldecoder,decode,path,utf,8,if,is,invalid,path,decoded,path,return,true,decoded,path,process,path,decoded,path,if,is,invalid,path,decoded,path,return,true,catch,illegal,argument,exception,unsupported,encoding,exception,ex,return,false
ResourceWebHandler -> private boolean isInvalidEncodedPath(String path);1529721864;Check whether the given path contains invalid escape sequences._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;private boolean isInvalidEncodedPath(String path) {_		if (path.contains("%")) {_			try {_				_				String decodedPath = URLDecoder.decode(path, "UTF-8")__				if (isInvalidPath(decodedPath)) {_					return true__				}_				decodedPath = processPath(decodedPath)__				if (isInvalidPath(decodedPath)) {_					return true__				}_			}_			catch (IllegalArgumentException | UnsupportedEncodingException ex) {_				_			}_		}_		return false__	};check,whether,the,given,path,contains,invalid,escape,sequences,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;private,boolean,is,invalid,encoded,path,string,path,if,path,contains,try,string,decoded,path,urldecoder,decode,path,utf,8,if,is,invalid,path,decoded,path,return,true,decoded,path,process,path,decoded,path,if,is,invalid,path,decoded,path,return,true,catch,illegal,argument,exception,unsupported,encoding,exception,ex,return,false
ResourceWebHandler -> private boolean isInvalidEncodedPath(String path);1530174524;Check whether the given path contains invalid escape sequences._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;private boolean isInvalidEncodedPath(String path) {_		if (path.contains("%")) {_			try {_				_				String decodedPath = URLDecoder.decode(path, "UTF-8")__				if (isInvalidPath(decodedPath)) {_					return true__				}_				decodedPath = processPath(decodedPath)__				if (isInvalidPath(decodedPath)) {_					return true__				}_			}_			catch (IllegalArgumentException | UnsupportedEncodingException ex) {_				_			}_		}_		return false__	};check,whether,the,given,path,contains,invalid,escape,sequences,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;private,boolean,is,invalid,encoded,path,string,path,if,path,contains,try,string,decoded,path,urldecoder,decode,path,utf,8,if,is,invalid,path,decoded,path,return,true,decoded,path,process,path,decoded,path,if,is,invalid,path,decoded,path,return,true,catch,illegal,argument,exception,unsupported,encoding,exception,ex,return,false
ResourceWebHandler -> private boolean isInvalidEncodedPath(String path);1530190293;Check whether the given path contains invalid escape sequences._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;private boolean isInvalidEncodedPath(String path) {_		if (path.contains("%")) {_			try {_				_				String decodedPath = URLDecoder.decode(path, "UTF-8")__				if (isInvalidPath(decodedPath)) {_					return true__				}_				decodedPath = processPath(decodedPath)__				if (isInvalidPath(decodedPath)) {_					return true__				}_			}_			catch (IllegalArgumentException | UnsupportedEncodingException ex) {_				_			}_		}_		return false__	};check,whether,the,given,path,contains,invalid,escape,sequences,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;private,boolean,is,invalid,encoded,path,string,path,if,path,contains,try,string,decoded,path,urldecoder,decode,path,utf,8,if,is,invalid,path,decoded,path,return,true,decoded,path,process,path,decoded,path,if,is,invalid,path,decoded,path,return,true,catch,illegal,argument,exception,unsupported,encoding,exception,ex,return,false
ResourceWebHandler -> private boolean isInvalidEncodedPath(String path);1530793633;Check whether the given path contains invalid escape sequences._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;private boolean isInvalidEncodedPath(String path) {_		if (path.contains("%")) {_			try {_				_				String decodedPath = URLDecoder.decode(path, "UTF-8")__				if (isInvalidPath(decodedPath)) {_					return true__				}_				decodedPath = processPath(decodedPath)__				if (isInvalidPath(decodedPath)) {_					return true__				}_			}_			catch (IllegalArgumentException | UnsupportedEncodingException ex) {_				_			}_		}_		return false__	};check,whether,the,given,path,contains,invalid,escape,sequences,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;private,boolean,is,invalid,encoded,path,string,path,if,path,contains,try,string,decoded,path,urldecoder,decode,path,utf,8,if,is,invalid,path,decoded,path,return,true,decoded,path,process,path,decoded,path,if,is,invalid,path,decoded,path,return,true,catch,illegal,argument,exception,unsupported,encoding,exception,ex,return,false
ResourceWebHandler -> private boolean isInvalidEncodedPath(String path);1530793695;Check whether the given path contains invalid escape sequences._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;private boolean isInvalidEncodedPath(String path) {_		if (path.contains("%")) {_			try {_				_				String decodedPath = URLDecoder.decode(path, "UTF-8")__				if (isInvalidPath(decodedPath)) {_					return true__				}_				decodedPath = processPath(decodedPath)__				if (isInvalidPath(decodedPath)) {_					return true__				}_			}_			catch (IllegalArgumentException | UnsupportedEncodingException ex) {_				_			}_		}_		return false__	};check,whether,the,given,path,contains,invalid,escape,sequences,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;private,boolean,is,invalid,encoded,path,string,path,if,path,contains,try,string,decoded,path,urldecoder,decode,path,utf,8,if,is,invalid,path,decoded,path,return,true,decoded,path,process,path,decoded,path,if,is,invalid,path,decoded,path,return,true,catch,illegal,argument,exception,unsupported,encoding,exception,ex,return,false
ResourceWebHandler -> private boolean isInvalidEncodedPath(String path);1532091916;Check whether the given path contains invalid escape sequences._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;private boolean isInvalidEncodedPath(String path) {_		if (path.contains("%")) {_			try {_				_				String decodedPath = URLDecoder.decode(path, "UTF-8")__				if (isInvalidPath(decodedPath)) {_					return true__				}_				decodedPath = processPath(decodedPath)__				if (isInvalidPath(decodedPath)) {_					return true__				}_			}_			catch (IllegalArgumentException | UnsupportedEncodingException ex) {_				_			}_		}_		return false__	};check,whether,the,given,path,contains,invalid,escape,sequences,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;private,boolean,is,invalid,encoded,path,string,path,if,path,contains,try,string,decoded,path,urldecoder,decode,path,utf,8,if,is,invalid,path,decoded,path,return,true,decoded,path,process,path,decoded,path,if,is,invalid,path,decoded,path,return,true,catch,illegal,argument,exception,unsupported,encoding,exception,ex,return,false
ResourceWebHandler -> private boolean isInvalidEncodedPath(String path);1542138563;Check whether the given path contains invalid escape sequences._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;private boolean isInvalidEncodedPath(String path) {_		if (path.contains("%")) {_			try {_				_				String decodedPath = URLDecoder.decode(path, "UTF-8")__				if (isInvalidPath(decodedPath)) {_					return true__				}_				decodedPath = processPath(decodedPath)__				if (isInvalidPath(decodedPath)) {_					return true__				}_			}_			catch (IllegalArgumentException | UnsupportedEncodingException ex) {_				_			}_		}_		return false__	};check,whether,the,given,path,contains,invalid,escape,sequences,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;private,boolean,is,invalid,encoded,path,string,path,if,path,contains,try,string,decoded,path,urldecoder,decode,path,utf,8,if,is,invalid,path,decoded,path,return,true,decoded,path,process,path,decoded,path,if,is,invalid,path,decoded,path,return,true,catch,illegal,argument,exception,unsupported,encoding,exception,ex,return,false
ResourceWebHandler -> private boolean isInvalidEncodedPath(String path);1542899558;Check whether the given path contains invalid escape sequences._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;private boolean isInvalidEncodedPath(String path) {_		if (path.contains("%")) {_			try {_				_				String decodedPath = URLDecoder.decode(path, "UTF-8")__				if (isInvalidPath(decodedPath)) {_					return true__				}_				decodedPath = processPath(decodedPath)__				if (isInvalidPath(decodedPath)) {_					return true__				}_			}_			catch (IllegalArgumentException | UnsupportedEncodingException ex) {_				_			}_		}_		return false__	};check,whether,the,given,path,contains,invalid,escape,sequences,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;private,boolean,is,invalid,encoded,path,string,path,if,path,contains,try,string,decoded,path,urldecoder,decode,path,utf,8,if,is,invalid,path,decoded,path,return,true,decoded,path,process,path,decoded,path,if,is,invalid,path,decoded,path,return,true,catch,illegal,argument,exception,unsupported,encoding,exception,ex,return,false
ResourceWebHandler -> private boolean isInvalidEncodedPath(String path);1542907316;Check whether the given path contains invalid escape sequences._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;private boolean isInvalidEncodedPath(String path) {_		if (path.contains("%")) {_			try {_				_				String decodedPath = URLDecoder.decode(path, "UTF-8")__				if (isInvalidPath(decodedPath)) {_					return true__				}_				decodedPath = processPath(decodedPath)__				if (isInvalidPath(decodedPath)) {_					return true__				}_			}_			catch (IllegalArgumentException | UnsupportedEncodingException ex) {_				_			}_		}_		return false__	};check,whether,the,given,path,contains,invalid,escape,sequences,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;private,boolean,is,invalid,encoded,path,string,path,if,path,contains,try,string,decoded,path,urldecoder,decode,path,utf,8,if,is,invalid,path,decoded,path,return,true,decoded,path,process,path,decoded,path,if,is,invalid,path,decoded,path,return,true,catch,illegal,argument,exception,unsupported,encoding,exception,ex,return,false
ResourceWebHandler -> private boolean isInvalidEncodedPath(String path);1544609805;Check whether the given path contains invalid escape sequences._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;private boolean isInvalidEncodedPath(String path) {_		if (path.contains("%")) {_			try {_				_				String decodedPath = URLDecoder.decode(path, "UTF-8")__				if (isInvalidPath(decodedPath)) {_					return true__				}_				decodedPath = processPath(decodedPath)__				if (isInvalidPath(decodedPath)) {_					return true__				}_			}_			catch (IllegalArgumentException | UnsupportedEncodingException ex) {_				_			}_		}_		return false__	};check,whether,the,given,path,contains,invalid,escape,sequences,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;private,boolean,is,invalid,encoded,path,string,path,if,path,contains,try,string,decoded,path,urldecoder,decode,path,utf,8,if,is,invalid,path,decoded,path,return,true,decoded,path,process,path,decoded,path,if,is,invalid,path,decoded,path,return,true,catch,illegal,argument,exception,unsupported,encoding,exception,ex,return,false
ResourceWebHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1496837955;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceWebHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1497039338;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceWebHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1498762530;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceWebHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1498953917;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceWebHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1500448076;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceWebHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1501237594;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceWebHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1507670883;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceWebHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1519295386;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceWebHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1521494163;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceWebHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1522105242;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceWebHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1527081441;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceWebHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1529721864;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceWebHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1530174524;Configure the list of {@link ResourceResolver ResourceResolvers} to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,resource,resolvers,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceWebHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1530190293;Configure the list of {@link ResourceResolver ResourceResolvers} to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,resource,resolvers,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceWebHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1530793633;Configure the list of {@link ResourceResolver ResourceResolvers} to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,resource,resolvers,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceWebHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1530793695;Configure the list of {@link ResourceResolver ResourceResolvers} to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,resource,resolvers,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceWebHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1532091916;Configure the list of {@link ResourceResolver ResourceResolvers} to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,resource,resolvers,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceWebHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1542138563;Configure the list of {@link ResourceResolver ResourceResolvers} to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,resource,resolvers,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceWebHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1542899558;Configure the list of {@link ResourceResolver ResourceResolvers} to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,resource,resolvers,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceWebHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1542907316;Configure the list of {@link ResourceResolver ResourceResolvers} to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,resource,resolvers,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceWebHandler -> public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers);1544609805;Configure the list of {@link ResourceResolver ResourceResolvers} to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(@Nullable List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,resource,resolvers,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,nullable,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceWebHandler -> public void setResourceHttpMessageWriter(@Nullable ResourceHttpMessageWriter httpMessageWriter);1500448076;Configure the {@link ResourceHttpMessageWriter} to use._<p>By default a {@link ResourceHttpMessageWriter} will be configured.;public void setResourceHttpMessageWriter(@Nullable ResourceHttpMessageWriter httpMessageWriter) {_		this.resourceHttpMessageWriter = httpMessageWriter__	};configure,the,link,resource,http,message,writer,to,use,p,by,default,a,link,resource,http,message,writer,will,be,configured;public,void,set,resource,http,message,writer,nullable,resource,http,message,writer,http,message,writer,this,resource,http,message,writer,http,message,writer
ResourceWebHandler -> public void setResourceHttpMessageWriter(@Nullable ResourceHttpMessageWriter httpMessageWriter);1501237594;Configure the {@link ResourceHttpMessageWriter} to use._<p>By default a {@link ResourceHttpMessageWriter} will be configured.;public void setResourceHttpMessageWriter(@Nullable ResourceHttpMessageWriter httpMessageWriter) {_		this.resourceHttpMessageWriter = httpMessageWriter__	};configure,the,link,resource,http,message,writer,to,use,p,by,default,a,link,resource,http,message,writer,will,be,configured;public,void,set,resource,http,message,writer,nullable,resource,http,message,writer,http,message,writer,this,resource,http,message,writer,http,message,writer
ResourceWebHandler -> public void setResourceHttpMessageWriter(@Nullable ResourceHttpMessageWriter httpMessageWriter);1507670883;Configure the {@link ResourceHttpMessageWriter} to use._<p>By default a {@link ResourceHttpMessageWriter} will be configured.;public void setResourceHttpMessageWriter(@Nullable ResourceHttpMessageWriter httpMessageWriter) {_		this.resourceHttpMessageWriter = httpMessageWriter__	};configure,the,link,resource,http,message,writer,to,use,p,by,default,a,link,resource,http,message,writer,will,be,configured;public,void,set,resource,http,message,writer,nullable,resource,http,message,writer,http,message,writer,this,resource,http,message,writer,http,message,writer
ResourceWebHandler -> public void setResourceHttpMessageWriter(@Nullable ResourceHttpMessageWriter httpMessageWriter);1519295386;Configure the {@link ResourceHttpMessageWriter} to use._<p>By default a {@link ResourceHttpMessageWriter} will be configured.;public void setResourceHttpMessageWriter(@Nullable ResourceHttpMessageWriter httpMessageWriter) {_		this.resourceHttpMessageWriter = httpMessageWriter__	};configure,the,link,resource,http,message,writer,to,use,p,by,default,a,link,resource,http,message,writer,will,be,configured;public,void,set,resource,http,message,writer,nullable,resource,http,message,writer,http,message,writer,this,resource,http,message,writer,http,message,writer
ResourceWebHandler -> public void setResourceHttpMessageWriter(@Nullable ResourceHttpMessageWriter httpMessageWriter);1521494163;Configure the {@link ResourceHttpMessageWriter} to use._<p>By default a {@link ResourceHttpMessageWriter} will be configured.;public void setResourceHttpMessageWriter(@Nullable ResourceHttpMessageWriter httpMessageWriter) {_		this.resourceHttpMessageWriter = httpMessageWriter__	};configure,the,link,resource,http,message,writer,to,use,p,by,default,a,link,resource,http,message,writer,will,be,configured;public,void,set,resource,http,message,writer,nullable,resource,http,message,writer,http,message,writer,this,resource,http,message,writer,http,message,writer
ResourceWebHandler -> public void setResourceHttpMessageWriter(@Nullable ResourceHttpMessageWriter httpMessageWriter);1522105242;Configure the {@link ResourceHttpMessageWriter} to use._<p>By default a {@link ResourceHttpMessageWriter} will be configured.;public void setResourceHttpMessageWriter(@Nullable ResourceHttpMessageWriter httpMessageWriter) {_		this.resourceHttpMessageWriter = httpMessageWriter__	};configure,the,link,resource,http,message,writer,to,use,p,by,default,a,link,resource,http,message,writer,will,be,configured;public,void,set,resource,http,message,writer,nullable,resource,http,message,writer,http,message,writer,this,resource,http,message,writer,http,message,writer
ResourceWebHandler -> public void setResourceHttpMessageWriter(@Nullable ResourceHttpMessageWriter httpMessageWriter);1527081441;Configure the {@link ResourceHttpMessageWriter} to use._<p>By default a {@link ResourceHttpMessageWriter} will be configured.;public void setResourceHttpMessageWriter(@Nullable ResourceHttpMessageWriter httpMessageWriter) {_		this.resourceHttpMessageWriter = httpMessageWriter__	};configure,the,link,resource,http,message,writer,to,use,p,by,default,a,link,resource,http,message,writer,will,be,configured;public,void,set,resource,http,message,writer,nullable,resource,http,message,writer,http,message,writer,this,resource,http,message,writer,http,message,writer
ResourceWebHandler -> public void setResourceHttpMessageWriter(@Nullable ResourceHttpMessageWriter httpMessageWriter);1529721864;Configure the {@link ResourceHttpMessageWriter} to use._<p>By default a {@link ResourceHttpMessageWriter} will be configured.;public void setResourceHttpMessageWriter(@Nullable ResourceHttpMessageWriter httpMessageWriter) {_		this.resourceHttpMessageWriter = httpMessageWriter__	};configure,the,link,resource,http,message,writer,to,use,p,by,default,a,link,resource,http,message,writer,will,be,configured;public,void,set,resource,http,message,writer,nullable,resource,http,message,writer,http,message,writer,this,resource,http,message,writer,http,message,writer
ResourceWebHandler -> public void setResourceHttpMessageWriter(@Nullable ResourceHttpMessageWriter httpMessageWriter);1530174524;Configure the {@link ResourceHttpMessageWriter} to use._<p>By default a {@link ResourceHttpMessageWriter} will be configured.;public void setResourceHttpMessageWriter(@Nullable ResourceHttpMessageWriter httpMessageWriter) {_		this.resourceHttpMessageWriter = httpMessageWriter__	};configure,the,link,resource,http,message,writer,to,use,p,by,default,a,link,resource,http,message,writer,will,be,configured;public,void,set,resource,http,message,writer,nullable,resource,http,message,writer,http,message,writer,this,resource,http,message,writer,http,message,writer
ResourceWebHandler -> public void setResourceHttpMessageWriter(@Nullable ResourceHttpMessageWriter httpMessageWriter);1530190293;Configure the {@link ResourceHttpMessageWriter} to use._<p>By default a {@link ResourceHttpMessageWriter} will be configured.;public void setResourceHttpMessageWriter(@Nullable ResourceHttpMessageWriter httpMessageWriter) {_		this.resourceHttpMessageWriter = httpMessageWriter__	};configure,the,link,resource,http,message,writer,to,use,p,by,default,a,link,resource,http,message,writer,will,be,configured;public,void,set,resource,http,message,writer,nullable,resource,http,message,writer,http,message,writer,this,resource,http,message,writer,http,message,writer
ResourceWebHandler -> public void setResourceHttpMessageWriter(@Nullable ResourceHttpMessageWriter httpMessageWriter);1530793633;Configure the {@link ResourceHttpMessageWriter} to use._<p>By default a {@link ResourceHttpMessageWriter} will be configured.;public void setResourceHttpMessageWriter(@Nullable ResourceHttpMessageWriter httpMessageWriter) {_		this.resourceHttpMessageWriter = httpMessageWriter__	};configure,the,link,resource,http,message,writer,to,use,p,by,default,a,link,resource,http,message,writer,will,be,configured;public,void,set,resource,http,message,writer,nullable,resource,http,message,writer,http,message,writer,this,resource,http,message,writer,http,message,writer
ResourceWebHandler -> public void setResourceHttpMessageWriter(@Nullable ResourceHttpMessageWriter httpMessageWriter);1530793695;Configure the {@link ResourceHttpMessageWriter} to use._<p>By default a {@link ResourceHttpMessageWriter} will be configured.;public void setResourceHttpMessageWriter(@Nullable ResourceHttpMessageWriter httpMessageWriter) {_		this.resourceHttpMessageWriter = httpMessageWriter__	};configure,the,link,resource,http,message,writer,to,use,p,by,default,a,link,resource,http,message,writer,will,be,configured;public,void,set,resource,http,message,writer,nullable,resource,http,message,writer,http,message,writer,this,resource,http,message,writer,http,message,writer
ResourceWebHandler -> public void setResourceHttpMessageWriter(@Nullable ResourceHttpMessageWriter httpMessageWriter);1532091916;Configure the {@link ResourceHttpMessageWriter} to use._<p>By default a {@link ResourceHttpMessageWriter} will be configured.;public void setResourceHttpMessageWriter(@Nullable ResourceHttpMessageWriter httpMessageWriter) {_		this.resourceHttpMessageWriter = httpMessageWriter__	};configure,the,link,resource,http,message,writer,to,use,p,by,default,a,link,resource,http,message,writer,will,be,configured;public,void,set,resource,http,message,writer,nullable,resource,http,message,writer,http,message,writer,this,resource,http,message,writer,http,message,writer
ResourceWebHandler -> public void setResourceHttpMessageWriter(@Nullable ResourceHttpMessageWriter httpMessageWriter);1542138563;Configure the {@link ResourceHttpMessageWriter} to use._<p>By default a {@link ResourceHttpMessageWriter} will be configured.;public void setResourceHttpMessageWriter(@Nullable ResourceHttpMessageWriter httpMessageWriter) {_		this.resourceHttpMessageWriter = httpMessageWriter__	};configure,the,link,resource,http,message,writer,to,use,p,by,default,a,link,resource,http,message,writer,will,be,configured;public,void,set,resource,http,message,writer,nullable,resource,http,message,writer,http,message,writer,this,resource,http,message,writer,http,message,writer
ResourceWebHandler -> public void setResourceHttpMessageWriter(@Nullable ResourceHttpMessageWriter httpMessageWriter);1542899558;Configure the {@link ResourceHttpMessageWriter} to use._<p>By default a {@link ResourceHttpMessageWriter} will be configured.;public void setResourceHttpMessageWriter(@Nullable ResourceHttpMessageWriter httpMessageWriter) {_		this.resourceHttpMessageWriter = httpMessageWriter__	};configure,the,link,resource,http,message,writer,to,use,p,by,default,a,link,resource,http,message,writer,will,be,configured;public,void,set,resource,http,message,writer,nullable,resource,http,message,writer,http,message,writer,this,resource,http,message,writer,http,message,writer
ResourceWebHandler -> public void setResourceHttpMessageWriter(@Nullable ResourceHttpMessageWriter httpMessageWriter);1542907316;Configure the {@link ResourceHttpMessageWriter} to use._<p>By default a {@link ResourceHttpMessageWriter} will be configured.;public void setResourceHttpMessageWriter(@Nullable ResourceHttpMessageWriter httpMessageWriter) {_		this.resourceHttpMessageWriter = httpMessageWriter__	};configure,the,link,resource,http,message,writer,to,use,p,by,default,a,link,resource,http,message,writer,will,be,configured;public,void,set,resource,http,message,writer,nullable,resource,http,message,writer,http,message,writer,this,resource,http,message,writer,http,message,writer
ResourceWebHandler -> public void setResourceHttpMessageWriter(@Nullable ResourceHttpMessageWriter httpMessageWriter);1544609805;Configure the {@link ResourceHttpMessageWriter} to use._<p>By default a {@link ResourceHttpMessageWriter} will be configured.;public void setResourceHttpMessageWriter(@Nullable ResourceHttpMessageWriter httpMessageWriter) {_		this.resourceHttpMessageWriter = httpMessageWriter__	};configure,the,link,resource,http,message,writer,to,use,p,by,default,a,link,resource,http,message,writer,will,be,configured;public,void,set,resource,http,message,writer,nullable,resource,http,message,writer,http,message,writer,this,resource,http,message,writer,http,message,writer
ResourceWebHandler -> @Nullable 	public ResourceHttpMessageWriter getResourceHttpMessageWriter();1496837955;Return the configured resource message writer.;@Nullable_	public ResourceHttpMessageWriter getResourceHttpMessageWriter() {_		return this.resourceHttpMessageWriter__	};return,the,configured,resource,message,writer;nullable,public,resource,http,message,writer,get,resource,http,message,writer,return,this,resource,http,message,writer
ResourceWebHandler -> @Nullable 	public ResourceHttpMessageWriter getResourceHttpMessageWriter();1497039338;Return the configured resource message writer.;@Nullable_	public ResourceHttpMessageWriter getResourceHttpMessageWriter() {_		return this.resourceHttpMessageWriter__	};return,the,configured,resource,message,writer;nullable,public,resource,http,message,writer,get,resource,http,message,writer,return,this,resource,http,message,writer
ResourceWebHandler -> @Nullable 	public ResourceHttpMessageWriter getResourceHttpMessageWriter();1498762530;Return the configured resource message writer.;@Nullable_	public ResourceHttpMessageWriter getResourceHttpMessageWriter() {_		return this.resourceHttpMessageWriter__	};return,the,configured,resource,message,writer;nullable,public,resource,http,message,writer,get,resource,http,message,writer,return,this,resource,http,message,writer
ResourceWebHandler -> @Nullable 	public ResourceHttpMessageWriter getResourceHttpMessageWriter();1498953917;Return the configured resource message writer.;@Nullable_	public ResourceHttpMessageWriter getResourceHttpMessageWriter() {_		return this.resourceHttpMessageWriter__	};return,the,configured,resource,message,writer;nullable,public,resource,http,message,writer,get,resource,http,message,writer,return,this,resource,http,message,writer
ResourceWebHandler -> @Nullable 	public ResourceHttpMessageWriter getResourceHttpMessageWriter();1500448076;Return the configured resource message writer.;@Nullable_	public ResourceHttpMessageWriter getResourceHttpMessageWriter() {_		return this.resourceHttpMessageWriter__	};return,the,configured,resource,message,writer;nullable,public,resource,http,message,writer,get,resource,http,message,writer,return,this,resource,http,message,writer
ResourceWebHandler -> @Nullable 	public ResourceHttpMessageWriter getResourceHttpMessageWriter();1501237594;Return the configured resource message writer.;@Nullable_	public ResourceHttpMessageWriter getResourceHttpMessageWriter() {_		return this.resourceHttpMessageWriter__	};return,the,configured,resource,message,writer;nullable,public,resource,http,message,writer,get,resource,http,message,writer,return,this,resource,http,message,writer
ResourceWebHandler -> @Nullable 	public ResourceHttpMessageWriter getResourceHttpMessageWriter();1507670883;Return the configured resource message writer.;@Nullable_	public ResourceHttpMessageWriter getResourceHttpMessageWriter() {_		return this.resourceHttpMessageWriter__	};return,the,configured,resource,message,writer;nullable,public,resource,http,message,writer,get,resource,http,message,writer,return,this,resource,http,message,writer
ResourceWebHandler -> @Nullable 	public ResourceHttpMessageWriter getResourceHttpMessageWriter();1519295386;Return the configured resource message writer.;@Nullable_	public ResourceHttpMessageWriter getResourceHttpMessageWriter() {_		return this.resourceHttpMessageWriter__	};return,the,configured,resource,message,writer;nullable,public,resource,http,message,writer,get,resource,http,message,writer,return,this,resource,http,message,writer
ResourceWebHandler -> @Nullable 	public ResourceHttpMessageWriter getResourceHttpMessageWriter();1521494163;Return the configured resource message writer.;@Nullable_	public ResourceHttpMessageWriter getResourceHttpMessageWriter() {_		return this.resourceHttpMessageWriter__	};return,the,configured,resource,message,writer;nullable,public,resource,http,message,writer,get,resource,http,message,writer,return,this,resource,http,message,writer
ResourceWebHandler -> @Nullable 	public ResourceHttpMessageWriter getResourceHttpMessageWriter();1522105242;Return the configured resource message writer.;@Nullable_	public ResourceHttpMessageWriter getResourceHttpMessageWriter() {_		return this.resourceHttpMessageWriter__	};return,the,configured,resource,message,writer;nullable,public,resource,http,message,writer,get,resource,http,message,writer,return,this,resource,http,message,writer
ResourceWebHandler -> @Nullable 	public ResourceHttpMessageWriter getResourceHttpMessageWriter();1527081441;Return the configured resource message writer.;@Nullable_	public ResourceHttpMessageWriter getResourceHttpMessageWriter() {_		return this.resourceHttpMessageWriter__	};return,the,configured,resource,message,writer;nullable,public,resource,http,message,writer,get,resource,http,message,writer,return,this,resource,http,message,writer
ResourceWebHandler -> @Nullable 	public ResourceHttpMessageWriter getResourceHttpMessageWriter();1529721864;Return the configured resource message writer.;@Nullable_	public ResourceHttpMessageWriter getResourceHttpMessageWriter() {_		return this.resourceHttpMessageWriter__	};return,the,configured,resource,message,writer;nullable,public,resource,http,message,writer,get,resource,http,message,writer,return,this,resource,http,message,writer
ResourceWebHandler -> @Nullable 	public ResourceHttpMessageWriter getResourceHttpMessageWriter();1530174524;Return the configured resource message writer.;@Nullable_	public ResourceHttpMessageWriter getResourceHttpMessageWriter() {_		return this.resourceHttpMessageWriter__	};return,the,configured,resource,message,writer;nullable,public,resource,http,message,writer,get,resource,http,message,writer,return,this,resource,http,message,writer
ResourceWebHandler -> @Nullable 	public ResourceHttpMessageWriter getResourceHttpMessageWriter();1530190293;Return the configured resource message writer.;@Nullable_	public ResourceHttpMessageWriter getResourceHttpMessageWriter() {_		return this.resourceHttpMessageWriter__	};return,the,configured,resource,message,writer;nullable,public,resource,http,message,writer,get,resource,http,message,writer,return,this,resource,http,message,writer
ResourceWebHandler -> @Nullable 	public ResourceHttpMessageWriter getResourceHttpMessageWriter();1530793633;Return the configured resource message writer.;@Nullable_	public ResourceHttpMessageWriter getResourceHttpMessageWriter() {_		return this.resourceHttpMessageWriter__	};return,the,configured,resource,message,writer;nullable,public,resource,http,message,writer,get,resource,http,message,writer,return,this,resource,http,message,writer
ResourceWebHandler -> @Nullable 	public ResourceHttpMessageWriter getResourceHttpMessageWriter();1530793695;Return the configured resource message writer.;@Nullable_	public ResourceHttpMessageWriter getResourceHttpMessageWriter() {_		return this.resourceHttpMessageWriter__	};return,the,configured,resource,message,writer;nullable,public,resource,http,message,writer,get,resource,http,message,writer,return,this,resource,http,message,writer
ResourceWebHandler -> @Nullable 	public ResourceHttpMessageWriter getResourceHttpMessageWriter();1532091916;Return the configured resource message writer.;@Nullable_	public ResourceHttpMessageWriter getResourceHttpMessageWriter() {_		return this.resourceHttpMessageWriter__	};return,the,configured,resource,message,writer;nullable,public,resource,http,message,writer,get,resource,http,message,writer,return,this,resource,http,message,writer
ResourceWebHandler -> @Nullable 	public ResourceHttpMessageWriter getResourceHttpMessageWriter();1542138563;Return the configured resource message writer.;@Nullable_	public ResourceHttpMessageWriter getResourceHttpMessageWriter() {_		return this.resourceHttpMessageWriter__	};return,the,configured,resource,message,writer;nullable,public,resource,http,message,writer,get,resource,http,message,writer,return,this,resource,http,message,writer
ResourceWebHandler -> @Nullable 	public ResourceHttpMessageWriter getResourceHttpMessageWriter();1542899558;Return the configured resource message writer.;@Nullable_	public ResourceHttpMessageWriter getResourceHttpMessageWriter() {_		return this.resourceHttpMessageWriter__	};return,the,configured,resource,message,writer;nullable,public,resource,http,message,writer,get,resource,http,message,writer,return,this,resource,http,message,writer
ResourceWebHandler -> @Nullable 	public ResourceHttpMessageWriter getResourceHttpMessageWriter();1542907316;Return the configured resource message writer.;@Nullable_	public ResourceHttpMessageWriter getResourceHttpMessageWriter() {_		return this.resourceHttpMessageWriter__	};return,the,configured,resource,message,writer;nullable,public,resource,http,message,writer,get,resource,http,message,writer,return,this,resource,http,message,writer
ResourceWebHandler -> @Nullable 	public ResourceHttpMessageWriter getResourceHttpMessageWriter();1544609805;Return the configured resource message writer.;@Nullable_	public ResourceHttpMessageWriter getResourceHttpMessageWriter() {_		return this.resourceHttpMessageWriter__	};return,the,configured,resource,message,writer;nullable,public,resource,http,message,writer,get,resource,http,message,writer,return,this,resource,http,message,writer
ResourceWebHandler -> public void setLocations(@Nullable List<Resource> locations);1496837955;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(@Nullable List<Resource> locations) {_		this.locations.clear()__		if (locations != null) {_			this.locations.addAll(locations)__		}_	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,nullable,list,resource,locations,this,locations,clear,if,locations,null,this,locations,add,all,locations
ResourceWebHandler -> public void setLocations(@Nullable List<Resource> locations);1497039338;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(@Nullable List<Resource> locations) {_		this.locations.clear()__		if (locations != null) {_			this.locations.addAll(locations)__		}_	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,nullable,list,resource,locations,this,locations,clear,if,locations,null,this,locations,add,all,locations
ResourceWebHandler -> public void setLocations(@Nullable List<Resource> locations);1498762530;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(@Nullable List<Resource> locations) {_		this.locations.clear()__		if (locations != null) {_			this.locations.addAll(locations)__		}_	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,nullable,list,resource,locations,this,locations,clear,if,locations,null,this,locations,add,all,locations
ResourceWebHandler -> public void setLocations(@Nullable List<Resource> locations);1498953917;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(@Nullable List<Resource> locations) {_		this.locations.clear()__		if (locations != null) {_			this.locations.addAll(locations)__		}_	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,nullable,list,resource,locations,this,locations,clear,if,locations,null,this,locations,add,all,locations
ResourceWebHandler -> public void setLocations(@Nullable List<Resource> locations);1500448076;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(@Nullable List<Resource> locations) {_		this.locations.clear()__		if (locations != null) {_			this.locations.addAll(locations)__		}_	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,nullable,list,resource,locations,this,locations,clear,if,locations,null,this,locations,add,all,locations
ResourceWebHandler -> public void setLocations(@Nullable List<Resource> locations);1501237594;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(@Nullable List<Resource> locations) {_		this.locations.clear()__		if (locations != null) {_			this.locations.addAll(locations)__		}_	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,nullable,list,resource,locations,this,locations,clear,if,locations,null,this,locations,add,all,locations
ResourceWebHandler -> public void setLocations(@Nullable List<Resource> locations);1507670883;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(@Nullable List<Resource> locations) {_		this.locations.clear()__		if (locations != null) {_			this.locations.addAll(locations)__		}_	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,nullable,list,resource,locations,this,locations,clear,if,locations,null,this,locations,add,all,locations
ResourceWebHandler -> public void setLocations(@Nullable List<Resource> locations);1519295386;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(@Nullable List<Resource> locations) {_		this.locations.clear()__		if (locations != null) {_			this.locations.addAll(locations)__		}_	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,nullable,list,resource,locations,this,locations,clear,if,locations,null,this,locations,add,all,locations
ResourceWebHandler -> public void setLocations(@Nullable List<Resource> locations);1521494163;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(@Nullable List<Resource> locations) {_		this.locations.clear()__		if (locations != null) {_			this.locations.addAll(locations)__		}_	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,nullable,list,resource,locations,this,locations,clear,if,locations,null,this,locations,add,all,locations
ResourceWebHandler -> public void setLocations(@Nullable List<Resource> locations);1522105242;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(@Nullable List<Resource> locations) {_		this.locations.clear()__		if (locations != null) {_			this.locations.addAll(locations)__		}_	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,nullable,list,resource,locations,this,locations,clear,if,locations,null,this,locations,add,all,locations
ResourceWebHandler -> public void setLocations(@Nullable List<Resource> locations);1527081441;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(@Nullable List<Resource> locations) {_		this.locations.clear()__		if (locations != null) {_			this.locations.addAll(locations)__		}_	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,nullable,list,resource,locations,this,locations,clear,if,locations,null,this,locations,add,all,locations
ResourceWebHandler -> public void setLocations(@Nullable List<Resource> locations);1529721864;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(@Nullable List<Resource> locations) {_		this.locations.clear()__		if (locations != null) {_			this.locations.addAll(locations)__		}_	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,nullable,list,resource,locations,this,locations,clear,if,locations,null,this,locations,add,all,locations
ResourceWebHandler -> public void setLocations(@Nullable List<Resource> locations);1530174524;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(@Nullable List<Resource> locations) {_		this.locations.clear()__		if (locations != null) {_			this.locations.addAll(locations)__		}_	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,nullable,list,resource,locations,this,locations,clear,if,locations,null,this,locations,add,all,locations
ResourceWebHandler -> public void setLocations(@Nullable List<Resource> locations);1530190293;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(@Nullable List<Resource> locations) {_		this.locations.clear()__		if (locations != null) {_			this.locations.addAll(locations)__		}_	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,nullable,list,resource,locations,this,locations,clear,if,locations,null,this,locations,add,all,locations
ResourceWebHandler -> public void setLocations(@Nullable List<Resource> locations);1530793633;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(@Nullable List<Resource> locations) {_		this.locations.clear()__		if (locations != null) {_			this.locations.addAll(locations)__		}_	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,nullable,list,resource,locations,this,locations,clear,if,locations,null,this,locations,add,all,locations
ResourceWebHandler -> public void setLocations(@Nullable List<Resource> locations);1530793695;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(@Nullable List<Resource> locations) {_		this.locations.clear()__		if (locations != null) {_			this.locations.addAll(locations)__		}_	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,nullable,list,resource,locations,this,locations,clear,if,locations,null,this,locations,add,all,locations
ResourceWebHandler -> public void setLocations(@Nullable List<Resource> locations);1532091916;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(@Nullable List<Resource> locations) {_		this.locations.clear()__		if (locations != null) {_			this.locations.addAll(locations)__		}_	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,nullable,list,resource,locations,this,locations,clear,if,locations,null,this,locations,add,all,locations
ResourceWebHandler -> public void setLocations(@Nullable List<Resource> locations);1542138563;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(@Nullable List<Resource> locations) {_		this.locations.clear()__		if (locations != null) {_			this.locations.addAll(locations)__		}_	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,nullable,list,resource,locations,this,locations,clear,if,locations,null,this,locations,add,all,locations
ResourceWebHandler -> public void setLocations(@Nullable List<Resource> locations);1542899558;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(@Nullable List<Resource> locations) {_		this.locations.clear()__		if (locations != null) {_			this.locations.addAll(locations)__		}_	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,nullable,list,resource,locations,this,locations,clear,if,locations,null,this,locations,add,all,locations
ResourceWebHandler -> public void setLocations(@Nullable List<Resource> locations);1542907316;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(@Nullable List<Resource> locations) {_		this.locations.clear()__		if (locations != null) {_			this.locations.addAll(locations)__		}_	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,nullable,list,resource,locations,this,locations,clear,if,locations,null,this,locations,add,all,locations
ResourceWebHandler -> public void setLocations(@Nullable List<Resource> locations);1544609805;Set the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public void setLocations(@Nullable List<Resource> locations) {_		this.locations.clear()__		if (locations != null) {_			this.locations.addAll(locations)__		}_	};set,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,void,set,locations,nullable,list,resource,locations,this,locations,clear,if,locations,null,this,locations,add,all,locations
ResourceWebHandler -> protected void initAllowedLocations();1485986572;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver resolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(resolver.getAllowedLocations())) {_					resolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,resolver,get,allowed,locations,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceWebHandler -> protected void initAllowedLocations();1490197121;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver resolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(resolver.getAllowedLocations())) {_					resolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,resolver,get,allowed,locations,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceWebHandler -> protected void initAllowedLocations();1491927184;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver resolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(resolver.getAllowedLocations())) {_					resolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,resolver,get,allowed,locations,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceWebHandler -> protected void initAllowedLocations();1492090594;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver resolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(resolver.getAllowedLocations())) {_					resolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,resolver,get,allowed,locations,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceWebHandler -> protected void initAllowedLocations();1495639183;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver resolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(resolver.getAllowedLocations())) {_					resolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,resolver,get,allowed,locations,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceWebHandler -> protected void initAllowedLocations();1495868221;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver resolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(resolver.getAllowedLocations())) {_					resolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,resolver,get,allowed,locations,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceWebHandler -> protected void initAllowedLocations();1496837955;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			if (logger.isWarnEnabled()) {_				logger.warn("Locations list is empty. No resources will be served unless a " +_						"custom ResourceResolver is configured as an alternative to PathResourceResolver.")__			}_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver resolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(resolver.getAllowedLocations())) {_					resolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,if,logger,is,warn,enabled,logger,warn,locations,list,is,empty,no,resources,will,be,served,unless,a,custom,resource,resolver,is,configured,as,an,alternative,to,path,resource,resolver,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,resolver,get,allowed,locations,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceWebHandler -> protected void initAllowedLocations();1497039338;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			if (logger.isWarnEnabled()) {_				logger.warn("Locations list is empty. No resources will be served unless a " +_						"custom ResourceResolver is configured as an alternative to PathResourceResolver.")__			}_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver resolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(resolver.getAllowedLocations())) {_					resolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,if,logger,is,warn,enabled,logger,warn,locations,list,is,empty,no,resources,will,be,served,unless,a,custom,resource,resolver,is,configured,as,an,alternative,to,path,resource,resolver,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,resolver,get,allowed,locations,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceWebHandler -> protected void initAllowedLocations();1498762530;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			if (logger.isWarnEnabled()) {_				logger.warn("Locations list is empty. No resources will be served unless a " +_						"custom ResourceResolver is configured as an alternative to PathResourceResolver.")__			}_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver resolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(resolver.getAllowedLocations())) {_					resolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,if,logger,is,warn,enabled,logger,warn,locations,list,is,empty,no,resources,will,be,served,unless,a,custom,resource,resolver,is,configured,as,an,alternative,to,path,resource,resolver,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,resolver,get,allowed,locations,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceWebHandler -> protected void initAllowedLocations();1498953917;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			if (logger.isWarnEnabled()) {_				logger.warn("Locations list is empty. No resources will be served unless a " +_						"custom ResourceResolver is configured as an alternative to PathResourceResolver.")__			}_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver resolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(resolver.getAllowedLocations())) {_					resolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,if,logger,is,warn,enabled,logger,warn,locations,list,is,empty,no,resources,will,be,served,unless,a,custom,resource,resolver,is,configured,as,an,alternative,to,path,resource,resolver,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,resolver,get,allowed,locations,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceWebHandler -> protected void initAllowedLocations();1500448076;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			if (logger.isWarnEnabled()) {_				logger.warn("Locations list is empty. No resources will be served unless a " +_						"custom ResourceResolver is configured as an alternative to PathResourceResolver.")__			}_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver resolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(resolver.getAllowedLocations())) {_					resolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,if,logger,is,warn,enabled,logger,warn,locations,list,is,empty,no,resources,will,be,served,unless,a,custom,resource,resolver,is,configured,as,an,alternative,to,path,resource,resolver,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,resolver,get,allowed,locations,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceWebHandler -> protected void initAllowedLocations();1501237594;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			if (logger.isWarnEnabled()) {_				logger.warn("Locations list is empty. No resources will be served unless a " +_						"custom ResourceResolver is configured as an alternative to PathResourceResolver.")__			}_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver resolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(resolver.getAllowedLocations())) {_					resolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,if,logger,is,warn,enabled,logger,warn,locations,list,is,empty,no,resources,will,be,served,unless,a,custom,resource,resolver,is,configured,as,an,alternative,to,path,resource,resolver,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,resolver,get,allowed,locations,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceWebHandler -> protected void initAllowedLocations();1507670883;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			if (logger.isWarnEnabled()) {_				logger.warn("Locations list is empty. No resources will be served unless a " +_						"custom ResourceResolver is configured as an alternative to PathResourceResolver.")__			}_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver resolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(resolver.getAllowedLocations())) {_					resolver.setAllowedLocations(getLocations().toArray(new Resource[getLocations().size()]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,if,logger,is,warn,enabled,logger,warn,locations,list,is,empty,no,resources,will,be,served,unless,a,custom,resource,resolver,is,configured,as,an,alternative,to,path,resource,resolver,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,resolver,get,allowed,locations,resolver,set,allowed,locations,get,locations,to,array,new,resource,get,locations,size,break
ResourceWebHandler -> protected void initAllowedLocations();1519295386;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			if (logger.isWarnEnabled()) {_				logger.warn("Locations list is empty. No resources will be served unless a " +_						"custom ResourceResolver is configured as an alternative to PathResourceResolver.")__			}_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver resolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(resolver.getAllowedLocations())) {_					resolver.setAllowedLocations(getLocations().toArray(new Resource[0]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,if,logger,is,warn,enabled,logger,warn,locations,list,is,empty,no,resources,will,be,served,unless,a,custom,resource,resolver,is,configured,as,an,alternative,to,path,resource,resolver,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,resolver,get,allowed,locations,resolver,set,allowed,locations,get,locations,to,array,new,resource,0,break
ResourceWebHandler -> protected void initAllowedLocations();1521494163;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			if (logger.isWarnEnabled()) {_				logger.warn("Locations list is empty. No resources will be served unless a " +_						"custom ResourceResolver is configured as an alternative to PathResourceResolver.")__			}_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver resolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(resolver.getAllowedLocations())) {_					resolver.setAllowedLocations(getLocations().toArray(new Resource[0]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,if,logger,is,warn,enabled,logger,warn,locations,list,is,empty,no,resources,will,be,served,unless,a,custom,resource,resolver,is,configured,as,an,alternative,to,path,resource,resolver,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,resolver,get,allowed,locations,resolver,set,allowed,locations,get,locations,to,array,new,resource,0,break
ResourceWebHandler -> protected void initAllowedLocations();1522105242;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			if (logger.isWarnEnabled()) {_				logger.warn("Locations list is empty. No resources will be served unless a " +_						"custom ResourceResolver is configured as an alternative to PathResourceResolver.")__			}_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver resolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(resolver.getAllowedLocations())) {_					resolver.setAllowedLocations(getLocations().toArray(new Resource[0]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,if,logger,is,warn,enabled,logger,warn,locations,list,is,empty,no,resources,will,be,served,unless,a,custom,resource,resolver,is,configured,as,an,alternative,to,path,resource,resolver,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,resolver,get,allowed,locations,resolver,set,allowed,locations,get,locations,to,array,new,resource,0,break
ResourceWebHandler -> protected void initAllowedLocations();1527081441;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			if (logger.isWarnEnabled()) {_				logger.warn("Locations list is empty. No resources will be served unless a " +_						"custom ResourceResolver is configured as an alternative to PathResourceResolver.")__			}_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver resolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(resolver.getAllowedLocations())) {_					resolver.setAllowedLocations(getLocations().toArray(new Resource[0]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,if,logger,is,warn,enabled,logger,warn,locations,list,is,empty,no,resources,will,be,served,unless,a,custom,resource,resolver,is,configured,as,an,alternative,to,path,resource,resolver,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,resolver,get,allowed,locations,resolver,set,allowed,locations,get,locations,to,array,new,resource,0,break
ResourceWebHandler -> protected void initAllowedLocations();1529721864;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			if (logger.isWarnEnabled()) {_				logger.warn("Locations list is empty. No resources will be served unless a " +_						"custom ResourceResolver is configured as an alternative to PathResourceResolver.")__			}_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver resolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(resolver.getAllowedLocations())) {_					resolver.setAllowedLocations(getLocations().toArray(new Resource[0]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,if,logger,is,warn,enabled,logger,warn,locations,list,is,empty,no,resources,will,be,served,unless,a,custom,resource,resolver,is,configured,as,an,alternative,to,path,resource,resolver,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,resolver,get,allowed,locations,resolver,set,allowed,locations,get,locations,to,array,new,resource,0,break
ResourceWebHandler -> protected void initAllowedLocations();1530174524;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			if (logger.isWarnEnabled()) {_				logger.warn("Locations list is empty. No resources will be served unless a " +_						"custom ResourceResolver is configured as an alternative to PathResourceResolver.")__			}_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver resolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(resolver.getAllowedLocations())) {_					resolver.setAllowedLocations(getLocations().toArray(new Resource[0]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,if,logger,is,warn,enabled,logger,warn,locations,list,is,empty,no,resources,will,be,served,unless,a,custom,resource,resolver,is,configured,as,an,alternative,to,path,resource,resolver,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,resolver,get,allowed,locations,resolver,set,allowed,locations,get,locations,to,array,new,resource,0,break
ResourceWebHandler -> protected void initAllowedLocations();1530190293;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			if (logger.isWarnEnabled()) {_				logger.warn("Locations list is empty. No resources will be served unless a " +_						"custom ResourceResolver is configured as an alternative to PathResourceResolver.")__			}_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver resolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(resolver.getAllowedLocations())) {_					resolver.setAllowedLocations(getLocations().toArray(new Resource[0]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,if,logger,is,warn,enabled,logger,warn,locations,list,is,empty,no,resources,will,be,served,unless,a,custom,resource,resolver,is,configured,as,an,alternative,to,path,resource,resolver,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,resolver,get,allowed,locations,resolver,set,allowed,locations,get,locations,to,array,new,resource,0,break
ResourceWebHandler -> protected void initAllowedLocations();1530793633;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			if (logger.isWarnEnabled()) {_				logger.warn("Locations list is empty. No resources will be served unless a " +_						"custom ResourceResolver is configured as an alternative to PathResourceResolver.")__			}_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver resolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(resolver.getAllowedLocations())) {_					resolver.setAllowedLocations(getLocations().toArray(new Resource[0]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,if,logger,is,warn,enabled,logger,warn,locations,list,is,empty,no,resources,will,be,served,unless,a,custom,resource,resolver,is,configured,as,an,alternative,to,path,resource,resolver,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,resolver,get,allowed,locations,resolver,set,allowed,locations,get,locations,to,array,new,resource,0,break
ResourceWebHandler -> protected void initAllowedLocations();1530793695;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			if (logger.isWarnEnabled()) {_				logger.warn("Locations list is empty. No resources will be served unless a " +_						"custom ResourceResolver is configured as an alternative to PathResourceResolver.")__			}_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver resolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(resolver.getAllowedLocations())) {_					resolver.setAllowedLocations(getLocations().toArray(new Resource[0]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,if,logger,is,warn,enabled,logger,warn,locations,list,is,empty,no,resources,will,be,served,unless,a,custom,resource,resolver,is,configured,as,an,alternative,to,path,resource,resolver,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,resolver,get,allowed,locations,resolver,set,allowed,locations,get,locations,to,array,new,resource,0,break
ResourceWebHandler -> protected void initAllowedLocations();1532091916;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			if (logger.isInfoEnabled()) {_				logger.info("Locations list is empty. No resources will be served unless a " +_						"custom ResourceResolver is configured as an alternative to PathResourceResolver.")__			}_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver resolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(resolver.getAllowedLocations())) {_					resolver.setAllowedLocations(getLocations().toArray(new Resource[0]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,if,logger,is,info,enabled,logger,info,locations,list,is,empty,no,resources,will,be,served,unless,a,custom,resource,resolver,is,configured,as,an,alternative,to,path,resource,resolver,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,resolver,get,allowed,locations,resolver,set,allowed,locations,get,locations,to,array,new,resource,0,break
ResourceWebHandler -> protected void initAllowedLocations();1542138563;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			if (logger.isInfoEnabled()) {_				logger.info("Locations list is empty. No resources will be served unless a " +_						"custom ResourceResolver is configured as an alternative to PathResourceResolver.")__			}_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver resolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(resolver.getAllowedLocations())) {_					resolver.setAllowedLocations(getLocations().toArray(new Resource[0]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,if,logger,is,info,enabled,logger,info,locations,list,is,empty,no,resources,will,be,served,unless,a,custom,resource,resolver,is,configured,as,an,alternative,to,path,resource,resolver,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,resolver,get,allowed,locations,resolver,set,allowed,locations,get,locations,to,array,new,resource,0,break
ResourceWebHandler -> protected void initAllowedLocations();1542899558;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			if (logger.isInfoEnabled()) {_				logger.info("Locations list is empty. No resources will be served unless a " +_						"custom ResourceResolver is configured as an alternative to PathResourceResolver.")__			}_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver resolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(resolver.getAllowedLocations())) {_					resolver.setAllowedLocations(getLocations().toArray(new Resource[0]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,if,logger,is,info,enabled,logger,info,locations,list,is,empty,no,resources,will,be,served,unless,a,custom,resource,resolver,is,configured,as,an,alternative,to,path,resource,resolver,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,resolver,get,allowed,locations,resolver,set,allowed,locations,get,locations,to,array,new,resource,0,break
ResourceWebHandler -> protected void initAllowedLocations();1542907316;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			if (logger.isInfoEnabled()) {_				logger.info("Locations list is empty. No resources will be served unless a " +_						"custom ResourceResolver is configured as an alternative to PathResourceResolver.")__			}_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver resolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(resolver.getAllowedLocations())) {_					resolver.setAllowedLocations(getLocations().toArray(new Resource[0]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,if,logger,is,info,enabled,logger,info,locations,list,is,empty,no,resources,will,be,served,unless,a,custom,resource,resolver,is,configured,as,an,alternative,to,path,resource,resolver,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,resolver,get,allowed,locations,resolver,set,allowed,locations,get,locations,to,array,new,resource,0,break
ResourceWebHandler -> protected void initAllowedLocations();1544609805;Look for a {@code PathResourceResolver} among the configured resource_resolvers and set its {@code allowedLocations} property (if empty) to_match the {@link #setLocations locations} configured on this class.;protected void initAllowedLocations() {_		if (CollectionUtils.isEmpty(this.locations)) {_			if (logger.isInfoEnabled()) {_				logger.info("Locations list is empty. No resources will be served unless a " +_						"custom ResourceResolver is configured as an alternative to PathResourceResolver.")__			}_			return__		}_		for (int i = getResourceResolvers().size() - 1_ i >= 0_ i--) {_			if (getResourceResolvers().get(i) instanceof PathResourceResolver) {_				PathResourceResolver resolver = (PathResourceResolver) getResourceResolvers().get(i)__				if (ObjectUtils.isEmpty(resolver.getAllowedLocations())) {_					resolver.setAllowedLocations(getLocations().toArray(new Resource[0]))__				}_				break__			}_		}_	};look,for,a,code,path,resource,resolver,among,the,configured,resource,resolvers,and,set,its,code,allowed,locations,property,if,empty,to,match,the,link,set,locations,locations,configured,on,this,class;protected,void,init,allowed,locations,if,collection,utils,is,empty,this,locations,if,logger,is,info,enabled,logger,info,locations,list,is,empty,no,resources,will,be,served,unless,a,custom,resource,resolver,is,configured,as,an,alternative,to,path,resource,resolver,return,for,int,i,get,resource,resolvers,size,1,i,0,i,if,get,resource,resolvers,get,i,instanceof,path,resource,resolver,path,resource,resolver,resolver,path,resource,resolver,get,resource,resolvers,get,i,if,object,utils,is,empty,resolver,get,allowed,locations,resolver,set,allowed,locations,get,locations,to,array,new,resource,0,break
ResourceWebHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1485986572;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceWebHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1490197121;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceWebHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1491927184;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceWebHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1492090594;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceWebHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1495639183;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceWebHandler -> public void setResourceTransformers(List<ResourceTransformer> resourceTransformers);1495868221;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceWebHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1496837955;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceWebHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1497039338;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceWebHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1498762530;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceWebHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1498953917;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceWebHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1500448076;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceWebHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1501237594;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceWebHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1507670883;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceWebHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1519295386;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceWebHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1521494163;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceWebHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1522105242;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceWebHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1527081441;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceWebHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1529721864;Configure the list of {@link ResourceTransformer}s to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,s,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceWebHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1530174524;Configure the list of {@link ResourceTransformer ResourceTransformers} to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,resource,transformers,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceWebHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1530190293;Configure the list of {@link ResourceTransformer ResourceTransformers} to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,resource,transformers,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceWebHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1530793633;Configure the list of {@link ResourceTransformer ResourceTransformers} to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,resource,transformers,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceWebHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1530793695;Configure the list of {@link ResourceTransformer ResourceTransformers} to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,resource,transformers,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceWebHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1532091916;Configure the list of {@link ResourceTransformer ResourceTransformers} to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,resource,transformers,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceWebHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1542138563;Configure the list of {@link ResourceTransformer ResourceTransformers} to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,resource,transformers,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceWebHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1542899558;Configure the list of {@link ResourceTransformer ResourceTransformers} to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,resource,transformers,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceWebHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1542907316;Configure the list of {@link ResourceTransformer ResourceTransformers} to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,resource,transformers,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceWebHandler -> public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers);1544609805;Configure the list of {@link ResourceTransformer ResourceTransformers} to use._<p>By default no transformers are configured for use.;public void setResourceTransformers(@Nullable List<ResourceTransformer> resourceTransformers) {_		this.resourceTransformers.clear()__		if (resourceTransformers != null) {_			this.resourceTransformers.addAll(resourceTransformers)__		}_	};configure,the,list,of,link,resource,transformer,resource,transformers,to,use,p,by,default,no,transformers,are,configured,for,use;public,void,set,resource,transformers,nullable,list,resource,transformer,resource,transformers,this,resource,transformers,clear,if,resource,transformers,null,this,resource,transformers,add,all,resource,transformers
ResourceWebHandler -> public ResourceHttpMessageWriter getResourceHttpMessageWriter();1485986572;Return the configured resource message writer.;public ResourceHttpMessageWriter getResourceHttpMessageWriter() {_		return this.resourceHttpMessageWriter__	};return,the,configured,resource,message,writer;public,resource,http,message,writer,get,resource,http,message,writer,return,this,resource,http,message,writer
ResourceWebHandler -> public ResourceHttpMessageWriter getResourceHttpMessageWriter();1490197121;Return the configured resource message writer.;public ResourceHttpMessageWriter getResourceHttpMessageWriter() {_		return this.resourceHttpMessageWriter__	};return,the,configured,resource,message,writer;public,resource,http,message,writer,get,resource,http,message,writer,return,this,resource,http,message,writer
ResourceWebHandler -> public ResourceHttpMessageWriter getResourceHttpMessageWriter();1491927184;Return the configured resource message writer.;public ResourceHttpMessageWriter getResourceHttpMessageWriter() {_		return this.resourceHttpMessageWriter__	};return,the,configured,resource,message,writer;public,resource,http,message,writer,get,resource,http,message,writer,return,this,resource,http,message,writer
ResourceWebHandler -> public ResourceHttpMessageWriter getResourceHttpMessageWriter();1492090594;Return the configured resource message writer.;public ResourceHttpMessageWriter getResourceHttpMessageWriter() {_		return this.resourceHttpMessageWriter__	};return,the,configured,resource,message,writer;public,resource,http,message,writer,get,resource,http,message,writer,return,this,resource,http,message,writer
ResourceWebHandler -> public ResourceHttpMessageWriter getResourceHttpMessageWriter();1495639183;Return the configured resource message writer.;public ResourceHttpMessageWriter getResourceHttpMessageWriter() {_		return this.resourceHttpMessageWriter__	};return,the,configured,resource,message,writer;public,resource,http,message,writer,get,resource,http,message,writer,return,this,resource,http,message,writer
ResourceWebHandler -> public ResourceHttpMessageWriter getResourceHttpMessageWriter();1495868221;Return the configured resource message writer.;public ResourceHttpMessageWriter getResourceHttpMessageWriter() {_		return this.resourceHttpMessageWriter__	};return,the,configured,resource,message,writer;public,resource,http,message,writer,get,resource,http,message,writer,return,this,resource,http,message,writer
ResourceWebHandler -> @Override 	public Mono<Void> handle(ServerWebExchange exchange);1485986572;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public Mono<Void> handle(ServerWebExchange exchange) {__		return getResource(exchange)_				.otherwiseIfEmpty(Mono.defer(() -> {_					logger.trace("No matching resource found - returning 404")__					exchange.getResponse().setStatusCode(HttpStatus.NOT_FOUND)__					return Mono.empty()__				}))_				.then(resource -> {_					try {_						if (HttpMethod.OPTIONS.equals(exchange.getRequest().getMethod())) {_							exchange.getResponse().getHeaders().add("Allow", "GET,HEAD,OPTIONS")__							return Mono.empty()__						}__						_						String httpMehtod = exchange.getRequest().getMethod().name()__						if (!SUPPORTED_METHODS.contains(httpMehtod)) {_							return Mono.error(new MethodNotAllowedException(httpMehtod, SUPPORTED_METHODS))__						}__						_						if (exchange.checkNotModified(Instant.ofEpochMilli(resource.lastModified()))) {_							logger.trace("Resource not modified - returning 304")__							return Mono.empty()__						}__						_						if (getCacheControl() != null) {_							String value = getCacheControl().getHeaderValue()__							if (value != null) {_								exchange.getResponse().getHeaders().setCacheControl(value)__							}_						}__						_						MediaType mediaType = getMediaType(exchange, resource)__						if (mediaType != null) {_							if (logger.isTraceEnabled()) {_								logger.trace("Determined media type '" + mediaType + "' for " + resource)__							}_						}_						else {_							if (logger.isTraceEnabled()) {_								logger.trace("No media type found " +_										"for " + resource + " - not sending a content-type header")__							}_						}__						_						if (HttpMethod.HEAD.equals(exchange.getRequest().getMethod())) {_							setHeaders(exchange, resource, mediaType)__							exchange.getResponse().getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__							logger.trace("HEAD request - skipping content")__							return Mono.empty()__						}__						setHeaders(exchange, resource, mediaType)__						return this.resourceHttpMessageWriter.write(Mono.just(resource),_								null, ResolvableType.forClass(Resource.class), mediaType,_								exchange.getRequest(), exchange.getResponse(), Collections.emptyMap())__					}_					catch (IOException ex) {_						return Mono.error(ex)__					}_				})__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,mono,void,handle,server,web,exchange,exchange,return,get,resource,exchange,otherwise,if,empty,mono,defer,logger,trace,no,matching,resource,found,returning,404,exchange,get,response,set,status,code,http,status,return,mono,empty,then,resource,try,if,http,method,options,equals,exchange,get,request,get,method,exchange,get,response,get,headers,add,allow,get,head,options,return,mono,empty,string,http,mehtod,exchange,get,request,get,method,name,if,contains,http,mehtod,return,mono,error,new,method,not,allowed,exception,http,mehtod,if,exchange,check,not,modified,instant,of,epoch,milli,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,mono,empty,if,get,cache,control,null,string,value,get,cache,control,get,header,value,if,value,null,exchange,get,response,get,headers,set,cache,control,value,media,type,media,type,get,media,type,exchange,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,http,method,head,equals,exchange,get,request,get,method,set,headers,exchange,resource,media,type,exchange,get,response,get,headers,set,http,headers,bytes,logger,trace,head,request,skipping,content,return,mono,empty,set,headers,exchange,resource,media,type,return,this,resource,http,message,writer,write,mono,just,resource,null,resolvable,type,for,class,resource,class,media,type,exchange,get,request,exchange,get,response,collections,empty,map,catch,ioexception,ex,return,mono,error,ex
ResourceWebHandler -> @Override 	public Mono<Void> handle(ServerWebExchange exchange);1490197121;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public Mono<Void> handle(ServerWebExchange exchange) {__		return getResource(exchange)_				.otherwiseIfEmpty(Mono.defer(() -> {_					logger.trace("No matching resource found - returning 404")__					exchange.getResponse().setStatusCode(HttpStatus.NOT_FOUND)__					return Mono.empty()__				}))_				.then(resource -> {_					try {_						if (HttpMethod.OPTIONS.equals(exchange.getRequest().getMethod())) {_							exchange.getResponse().getHeaders().add("Allow", "GET,HEAD,OPTIONS")__							return Mono.empty()__						}__						_						HttpMethod httpMethod = exchange.getRequest().getMethod()__						if (!SUPPORTED_METHODS.contains(httpMethod)) {_							return Mono.error(new MethodNotAllowedException(httpMethod, SUPPORTED_METHODS))__						}__						_						if (exchange.checkNotModified(Instant.ofEpochMilli(resource.lastModified()))) {_							logger.trace("Resource not modified - returning 304")__							return Mono.empty()__						}__						_						if (getCacheControl() != null) {_							String value = getCacheControl().getHeaderValue()__							if (value != null) {_								exchange.getResponse().getHeaders().setCacheControl(value)__							}_						}__						_						MediaType mediaType = getMediaType(exchange, resource)__						if (mediaType != null) {_							if (logger.isTraceEnabled()) {_								logger.trace("Determined media type '" + mediaType + "' for " + resource)__							}_						}_						else {_							if (logger.isTraceEnabled()) {_								logger.trace("No media type found " +_										"for " + resource + " - not sending a content-type header")__							}_						}__						_						if (HttpMethod.HEAD.equals(exchange.getRequest().getMethod())) {_							setHeaders(exchange, resource, mediaType)__							exchange.getResponse().getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__							logger.trace("HEAD request - skipping content")__							return Mono.empty()__						}__						setHeaders(exchange, resource, mediaType)__						return this.resourceHttpMessageWriter.write(Mono.just(resource),_								null, ResolvableType.forClass(Resource.class), mediaType,_								exchange.getRequest(), exchange.getResponse(), Collections.emptyMap())__					}_					catch (IOException ex) {_						return Mono.error(ex)__					}_				})__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,mono,void,handle,server,web,exchange,exchange,return,get,resource,exchange,otherwise,if,empty,mono,defer,logger,trace,no,matching,resource,found,returning,404,exchange,get,response,set,status,code,http,status,return,mono,empty,then,resource,try,if,http,method,options,equals,exchange,get,request,get,method,exchange,get,response,get,headers,add,allow,get,head,options,return,mono,empty,http,method,http,method,exchange,get,request,get,method,if,contains,http,method,return,mono,error,new,method,not,allowed,exception,http,method,if,exchange,check,not,modified,instant,of,epoch,milli,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,mono,empty,if,get,cache,control,null,string,value,get,cache,control,get,header,value,if,value,null,exchange,get,response,get,headers,set,cache,control,value,media,type,media,type,get,media,type,exchange,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,http,method,head,equals,exchange,get,request,get,method,set,headers,exchange,resource,media,type,exchange,get,response,get,headers,set,http,headers,bytes,logger,trace,head,request,skipping,content,return,mono,empty,set,headers,exchange,resource,media,type,return,this,resource,http,message,writer,write,mono,just,resource,null,resolvable,type,for,class,resource,class,media,type,exchange,get,request,exchange,get,response,collections,empty,map,catch,ioexception,ex,return,mono,error,ex
ResourceWebHandler -> @Override 	public Mono<Void> handle(ServerWebExchange exchange);1491927184;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public Mono<Void> handle(ServerWebExchange exchange) {__		return getResource(exchange)_				.otherwiseIfEmpty(Mono.defer(() -> {_					logger.trace("No matching resource found - returning 404")__					exchange.getResponse().setStatusCode(HttpStatus.NOT_FOUND)__					return Mono.empty()__				}))_				.flatMap(resource -> {_					try {_						if (HttpMethod.OPTIONS.equals(exchange.getRequest().getMethod())) {_							exchange.getResponse().getHeaders().add("Allow", "GET,HEAD,OPTIONS")__							return Mono.empty()__						}__						_						HttpMethod httpMethod = exchange.getRequest().getMethod()__						if (!SUPPORTED_METHODS.contains(httpMethod)) {_							return Mono.error(new MethodNotAllowedException(httpMethod, SUPPORTED_METHODS))__						}__						_						if (exchange.checkNotModified(Instant.ofEpochMilli(resource.lastModified()))) {_							logger.trace("Resource not modified - returning 304")__							return Mono.empty()__						}__						_						if (getCacheControl() != null) {_							String value = getCacheControl().getHeaderValue()__							if (value != null) {_								exchange.getResponse().getHeaders().setCacheControl(value)__							}_						}__						_						MediaType mediaType = getMediaType(exchange, resource)__						if (mediaType != null) {_							if (logger.isTraceEnabled()) {_								logger.trace("Determined media type '" + mediaType + "' for " + resource)__							}_						}_						else {_							if (logger.isTraceEnabled()) {_								logger.trace("No media type found " +_										"for " + resource + " - not sending a content-type header")__							}_						}__						_						if (HttpMethod.HEAD.equals(exchange.getRequest().getMethod())) {_							setHeaders(exchange, resource, mediaType)__							exchange.getResponse().getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__							logger.trace("HEAD request - skipping content")__							return Mono.empty()__						}__						setHeaders(exchange, resource, mediaType)__						return this.resourceHttpMessageWriter.write(Mono.just(resource),_								null, ResolvableType.forClass(Resource.class), mediaType,_								exchange.getRequest(), exchange.getResponse(), Collections.emptyMap())__					}_					catch (IOException ex) {_						return Mono.error(ex)__					}_				})__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,mono,void,handle,server,web,exchange,exchange,return,get,resource,exchange,otherwise,if,empty,mono,defer,logger,trace,no,matching,resource,found,returning,404,exchange,get,response,set,status,code,http,status,return,mono,empty,flat,map,resource,try,if,http,method,options,equals,exchange,get,request,get,method,exchange,get,response,get,headers,add,allow,get,head,options,return,mono,empty,http,method,http,method,exchange,get,request,get,method,if,contains,http,method,return,mono,error,new,method,not,allowed,exception,http,method,if,exchange,check,not,modified,instant,of,epoch,milli,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,mono,empty,if,get,cache,control,null,string,value,get,cache,control,get,header,value,if,value,null,exchange,get,response,get,headers,set,cache,control,value,media,type,media,type,get,media,type,exchange,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,http,method,head,equals,exchange,get,request,get,method,set,headers,exchange,resource,media,type,exchange,get,response,get,headers,set,http,headers,bytes,logger,trace,head,request,skipping,content,return,mono,empty,set,headers,exchange,resource,media,type,return,this,resource,http,message,writer,write,mono,just,resource,null,resolvable,type,for,class,resource,class,media,type,exchange,get,request,exchange,get,response,collections,empty,map,catch,ioexception,ex,return,mono,error,ex
ResourceWebHandler -> @Override 	public Mono<Void> handle(ServerWebExchange exchange);1492090594;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public Mono<Void> handle(ServerWebExchange exchange) {__		return getResource(exchange)_				.switchIfEmpty(Mono.defer(() -> {_					logger.trace("No matching resource found - returning 404")__					exchange.getResponse().setStatusCode(HttpStatus.NOT_FOUND)__					return Mono.empty()__				}))_				.flatMap(resource -> {_					try {_						if (HttpMethod.OPTIONS.equals(exchange.getRequest().getMethod())) {_							exchange.getResponse().getHeaders().add("Allow", "GET,HEAD,OPTIONS")__							return Mono.empty()__						}__						_						HttpMethod httpMethod = exchange.getRequest().getMethod()__						if (!SUPPORTED_METHODS.contains(httpMethod)) {_							return Mono.error(new MethodNotAllowedException(httpMethod, SUPPORTED_METHODS))__						}__						_						if (exchange.checkNotModified(Instant.ofEpochMilli(resource.lastModified()))) {_							logger.trace("Resource not modified - returning 304")__							return Mono.empty()__						}__						_						if (getCacheControl() != null) {_							String value = getCacheControl().getHeaderValue()__							if (value != null) {_								exchange.getResponse().getHeaders().setCacheControl(value)__							}_						}__						_						MediaType mediaType = getMediaType(exchange, resource)__						if (mediaType != null) {_							if (logger.isTraceEnabled()) {_								logger.trace("Determined media type '" + mediaType + "' for " + resource)__							}_						}_						else {_							if (logger.isTraceEnabled()) {_								logger.trace("No media type found " +_										"for " + resource + " - not sending a content-type header")__							}_						}__						_						if (HttpMethod.HEAD.equals(exchange.getRequest().getMethod())) {_							setHeaders(exchange, resource, mediaType)__							exchange.getResponse().getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__							logger.trace("HEAD request - skipping content")__							return Mono.empty()__						}__						setHeaders(exchange, resource, mediaType)__						return this.resourceHttpMessageWriter.write(Mono.just(resource),_								null, ResolvableType.forClass(Resource.class), mediaType,_								exchange.getRequest(), exchange.getResponse(), Collections.emptyMap())__					}_					catch (IOException ex) {_						return Mono.error(ex)__					}_				})__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,mono,void,handle,server,web,exchange,exchange,return,get,resource,exchange,switch,if,empty,mono,defer,logger,trace,no,matching,resource,found,returning,404,exchange,get,response,set,status,code,http,status,return,mono,empty,flat,map,resource,try,if,http,method,options,equals,exchange,get,request,get,method,exchange,get,response,get,headers,add,allow,get,head,options,return,mono,empty,http,method,http,method,exchange,get,request,get,method,if,contains,http,method,return,mono,error,new,method,not,allowed,exception,http,method,if,exchange,check,not,modified,instant,of,epoch,milli,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,mono,empty,if,get,cache,control,null,string,value,get,cache,control,get,header,value,if,value,null,exchange,get,response,get,headers,set,cache,control,value,media,type,media,type,get,media,type,exchange,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,http,method,head,equals,exchange,get,request,get,method,set,headers,exchange,resource,media,type,exchange,get,response,get,headers,set,http,headers,bytes,logger,trace,head,request,skipping,content,return,mono,empty,set,headers,exchange,resource,media,type,return,this,resource,http,message,writer,write,mono,just,resource,null,resolvable,type,for,class,resource,class,media,type,exchange,get,request,exchange,get,response,collections,empty,map,catch,ioexception,ex,return,mono,error,ex
ResourceWebHandler -> @Override 	public Mono<Void> handle(ServerWebExchange exchange);1495639183;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public Mono<Void> handle(ServerWebExchange exchange) {__		return getResource(exchange)_				.switchIfEmpty(Mono.defer(() -> {_					logger.trace("No matching resource found - returning 404")__					exchange.getResponse().setStatusCode(HttpStatus.NOT_FOUND)__					return Mono.empty()__				}))_				.flatMap(resource -> {_					try {_						if (HttpMethod.OPTIONS.matches(exchange.getRequest().getMethodValue())) {_							exchange.getResponse().getHeaders().add("Allow", "GET,HEAD,OPTIONS")__							return Mono.empty()__						}__						_						HttpMethod httpMethod = exchange.getRequest().getMethod()__						if (!SUPPORTED_METHODS.contains(httpMethod)) {_							return Mono.error(new MethodNotAllowedException(httpMethod, SUPPORTED_METHODS))__						}__						_						if (exchange.checkNotModified(Instant.ofEpochMilli(resource.lastModified()))) {_							logger.trace("Resource not modified - returning 304")__							return Mono.empty()__						}__						_						if (getCacheControl() != null) {_							String value = getCacheControl().getHeaderValue()__							if (value != null) {_								exchange.getResponse().getHeaders().setCacheControl(value)__							}_						}__						_						MediaType mediaType = getMediaType(exchange, resource)__						if (mediaType != null) {_							if (logger.isTraceEnabled()) {_								logger.trace("Determined media type '" + mediaType + "' for " + resource)__							}_						}_						else {_							if (logger.isTraceEnabled()) {_								logger.trace("No media type found " +_										"for " + resource + " - not sending a content-type header")__							}_						}__						_						if (HttpMethod.HEAD.matches(exchange.getRequest().getMethodValue())) {_							setHeaders(exchange, resource, mediaType)__							exchange.getResponse().getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__							logger.trace("HEAD request - skipping content")__							return Mono.empty()__						}__						setHeaders(exchange, resource, mediaType)__						return this.resourceHttpMessageWriter.write(Mono.just(resource),_								null, ResolvableType.forClass(Resource.class), mediaType,_								exchange.getRequest(), exchange.getResponse(), Collections.emptyMap())__					}_					catch (IOException ex) {_						return Mono.error(ex)__					}_				})__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,mono,void,handle,server,web,exchange,exchange,return,get,resource,exchange,switch,if,empty,mono,defer,logger,trace,no,matching,resource,found,returning,404,exchange,get,response,set,status,code,http,status,return,mono,empty,flat,map,resource,try,if,http,method,options,matches,exchange,get,request,get,method,value,exchange,get,response,get,headers,add,allow,get,head,options,return,mono,empty,http,method,http,method,exchange,get,request,get,method,if,contains,http,method,return,mono,error,new,method,not,allowed,exception,http,method,if,exchange,check,not,modified,instant,of,epoch,milli,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,mono,empty,if,get,cache,control,null,string,value,get,cache,control,get,header,value,if,value,null,exchange,get,response,get,headers,set,cache,control,value,media,type,media,type,get,media,type,exchange,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,http,method,head,matches,exchange,get,request,get,method,value,set,headers,exchange,resource,media,type,exchange,get,response,get,headers,set,http,headers,bytes,logger,trace,head,request,skipping,content,return,mono,empty,set,headers,exchange,resource,media,type,return,this,resource,http,message,writer,write,mono,just,resource,null,resolvable,type,for,class,resource,class,media,type,exchange,get,request,exchange,get,response,collections,empty,map,catch,ioexception,ex,return,mono,error,ex
ResourceWebHandler -> @Override 	public Mono<Void> handle(ServerWebExchange exchange);1495868221;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public Mono<Void> handle(ServerWebExchange exchange) {__		return getResource(exchange)_				.switchIfEmpty(Mono.defer(() -> {_					logger.trace("No matching resource found - returning 404")__					exchange.getResponse().setStatusCode(HttpStatus.NOT_FOUND)__					return Mono.empty()__				}))_				.flatMap(resource -> {_					try {_						if (HttpMethod.OPTIONS.matches(exchange.getRequest().getMethodValue())) {_							exchange.getResponse().getHeaders().add("Allow", "GET,HEAD,OPTIONS")__							return Mono.empty()__						}__						_						HttpMethod httpMethod = exchange.getRequest().getMethod()__						if (!SUPPORTED_METHODS.contains(httpMethod)) {_							return Mono.error(new MethodNotAllowedException(httpMethod, SUPPORTED_METHODS))__						}__						_						if (exchange.checkNotModified(Instant.ofEpochMilli(resource.lastModified()))) {_							logger.trace("Resource not modified - returning 304")__							return Mono.empty()__						}__						_						if (getCacheControl() != null) {_							String value = getCacheControl().getHeaderValue()__							if (value != null) {_								exchange.getResponse().getHeaders().setCacheControl(value)__							}_						}__						_						MediaType mediaType = getMediaType(exchange, resource)__						if (mediaType != null) {_							if (logger.isTraceEnabled()) {_								logger.trace("Determined media type '" + mediaType + "' for " + resource)__							}_						}_						else {_							if (logger.isTraceEnabled()) {_								logger.trace("No media type found " +_										"for " + resource + " - not sending a content-type header")__							}_						}__						_						if (HttpMethod.HEAD.matches(exchange.getRequest().getMethodValue())) {_							setHeaders(exchange, resource, mediaType)__							exchange.getResponse().getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__							logger.trace("HEAD request - skipping content")__							return Mono.empty()__						}__						setHeaders(exchange, resource, mediaType)__						return this.resourceHttpMessageWriter.write(Mono.just(resource),_								null, ResolvableType.forClass(Resource.class), mediaType,_								exchange.getRequest(), exchange.getResponse(), Collections.emptyMap())__					}_					catch (IOException ex) {_						return Mono.error(ex)__					}_				})__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,mono,void,handle,server,web,exchange,exchange,return,get,resource,exchange,switch,if,empty,mono,defer,logger,trace,no,matching,resource,found,returning,404,exchange,get,response,set,status,code,http,status,return,mono,empty,flat,map,resource,try,if,http,method,options,matches,exchange,get,request,get,method,value,exchange,get,response,get,headers,add,allow,get,head,options,return,mono,empty,http,method,http,method,exchange,get,request,get,method,if,contains,http,method,return,mono,error,new,method,not,allowed,exception,http,method,if,exchange,check,not,modified,instant,of,epoch,milli,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,mono,empty,if,get,cache,control,null,string,value,get,cache,control,get,header,value,if,value,null,exchange,get,response,get,headers,set,cache,control,value,media,type,media,type,get,media,type,exchange,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,http,method,head,matches,exchange,get,request,get,method,value,set,headers,exchange,resource,media,type,exchange,get,response,get,headers,set,http,headers,bytes,logger,trace,head,request,skipping,content,return,mono,empty,set,headers,exchange,resource,media,type,return,this,resource,http,message,writer,write,mono,just,resource,null,resolvable,type,for,class,resource,class,media,type,exchange,get,request,exchange,get,response,collections,empty,map,catch,ioexception,ex,return,mono,error,ex
ResourceWebHandler -> @Override 	public Mono<Void> handle(ServerWebExchange exchange);1496837955;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public Mono<Void> handle(ServerWebExchange exchange) {_		return getResource(exchange)_				.switchIfEmpty(Mono.defer(() -> {_					logger.trace("No matching resource found - returning 404")__					exchange.getResponse().setStatusCode(HttpStatus.NOT_FOUND)__					return Mono.empty()__				}))_				.flatMap(resource -> {_					try {_						if (HttpMethod.OPTIONS.matches(exchange.getRequest().getMethodValue())) {_							exchange.getResponse().getHeaders().add("Allow", "GET,HEAD,OPTIONS")__							return Mono.empty()__						}__						_						HttpMethod httpMethod = exchange.getRequest().getMethod()__						if (!SUPPORTED_METHODS.contains(httpMethod)) {_							return Mono.error(new MethodNotAllowedException(_									exchange.getRequest().getMethodValue(), SUPPORTED_METHODS))__						}__						_						if (exchange.checkNotModified(Instant.ofEpochMilli(resource.lastModified()))) {_							logger.trace("Resource not modified - returning 304")__							return Mono.empty()__						}__						_						if (getCacheControl() != null) {_							String value = getCacheControl().getHeaderValue()__							if (value != null) {_								exchange.getResponse().getHeaders().setCacheControl(value)__							}_						}__						_						MediaType mediaType = getMediaType(exchange, resource)__						if (mediaType != null) {_							if (logger.isTraceEnabled()) {_								logger.trace("Determined media type '" + mediaType + "' for " + resource)__							}_						}_						else {_							if (logger.isTraceEnabled()) {_								logger.trace("No media type found " +_										"for " + resource + " - not sending a content-type header")__							}_						}__						_						if (HttpMethod.HEAD.matches(exchange.getRequest().getMethodValue())) {_							setHeaders(exchange, resource, mediaType)__							exchange.getResponse().getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__							logger.trace("HEAD request - skipping content")__							return Mono.empty()__						}__						setHeaders(exchange, resource, mediaType)__						ResourceHttpMessageWriter writer = getResourceHttpMessageWriter()__						Assert.state(writer != null, "No ResourceHttpMessageWriter")__						return writer.write(Mono.just(resource),_								null, ResolvableType.forClass(Resource.class), mediaType,_								exchange.getRequest(), exchange.getResponse(), Collections.emptyMap())__					}_					catch (IOException ex) {_						return Mono.error(ex)__					}_				})__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,mono,void,handle,server,web,exchange,exchange,return,get,resource,exchange,switch,if,empty,mono,defer,logger,trace,no,matching,resource,found,returning,404,exchange,get,response,set,status,code,http,status,return,mono,empty,flat,map,resource,try,if,http,method,options,matches,exchange,get,request,get,method,value,exchange,get,response,get,headers,add,allow,get,head,options,return,mono,empty,http,method,http,method,exchange,get,request,get,method,if,contains,http,method,return,mono,error,new,method,not,allowed,exception,exchange,get,request,get,method,value,if,exchange,check,not,modified,instant,of,epoch,milli,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,mono,empty,if,get,cache,control,null,string,value,get,cache,control,get,header,value,if,value,null,exchange,get,response,get,headers,set,cache,control,value,media,type,media,type,get,media,type,exchange,resource,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,http,method,head,matches,exchange,get,request,get,method,value,set,headers,exchange,resource,media,type,exchange,get,response,get,headers,set,http,headers,bytes,logger,trace,head,request,skipping,content,return,mono,empty,set,headers,exchange,resource,media,type,resource,http,message,writer,writer,get,resource,http,message,writer,assert,state,writer,null,no,resource,http,message,writer,return,writer,write,mono,just,resource,null,resolvable,type,for,class,resource,class,media,type,exchange,get,request,exchange,get,response,collections,empty,map,catch,ioexception,ex,return,mono,error,ex
ResourceWebHandler -> @Override 	public Mono<Void> handle(ServerWebExchange exchange);1497039338;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public Mono<Void> handle(ServerWebExchange exchange) {_		return getResource(exchange)_				.switchIfEmpty(Mono.defer(() -> {_					logger.trace("No matching resource found - returning 404")__					exchange.getResponse().setStatusCode(HttpStatus.NOT_FOUND)__					return Mono.empty()__				}))_				.flatMap(resource -> {_					try {_						if (HttpMethod.OPTIONS.matches(exchange.getRequest().getMethodValue())) {_							exchange.getResponse().getHeaders().add("Allow", "GET,HEAD,OPTIONS")__							return Mono.empty()__						}__						_						HttpMethod httpMethod = exchange.getRequest().getMethod()__						if (!SUPPORTED_METHODS.contains(httpMethod)) {_							return Mono.error(new MethodNotAllowedException(_									exchange.getRequest().getMethodValue(), SUPPORTED_METHODS))__						}__						_						if (exchange.checkNotModified(Instant.ofEpochMilli(resource.lastModified()))) {_							logger.trace("Resource not modified - returning 304")__							return Mono.empty()__						}__						_						if (getCacheControl() != null) {_							String value = getCacheControl().getHeaderValue()__							if (value != null) {_								exchange.getResponse().getHeaders().setCacheControl(value)__							}_						}__						_						MediaType mediaType = MediaTypeFactory.getMediaType(resource).orElse(null)__						if (mediaType != null) {_							if (logger.isTraceEnabled()) {_								logger.trace("Determined media type '" + mediaType + "' for " + resource)__							}_						}_						else {_							if (logger.isTraceEnabled()) {_								logger.trace("No media type found " +_										"for " + resource + " - not sending a content-type header")__							}_						}__						_						if (HttpMethod.HEAD.matches(exchange.getRequest().getMethodValue())) {_							setHeaders(exchange, resource, mediaType)__							exchange.getResponse().getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__							logger.trace("HEAD request - skipping content")__							return Mono.empty()__						}__						setHeaders(exchange, resource, mediaType)__						ResourceHttpMessageWriter writer = getResourceHttpMessageWriter()__						Assert.state(writer != null, "No ResourceHttpMessageWriter")__						return writer.write(Mono.just(resource),_								null, ResolvableType.forClass(Resource.class), mediaType,_								exchange.getRequest(), exchange.getResponse(), Collections.emptyMap())__					}_					catch (IOException ex) {_						return Mono.error(ex)__					}_				})__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,mono,void,handle,server,web,exchange,exchange,return,get,resource,exchange,switch,if,empty,mono,defer,logger,trace,no,matching,resource,found,returning,404,exchange,get,response,set,status,code,http,status,return,mono,empty,flat,map,resource,try,if,http,method,options,matches,exchange,get,request,get,method,value,exchange,get,response,get,headers,add,allow,get,head,options,return,mono,empty,http,method,http,method,exchange,get,request,get,method,if,contains,http,method,return,mono,error,new,method,not,allowed,exception,exchange,get,request,get,method,value,if,exchange,check,not,modified,instant,of,epoch,milli,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,mono,empty,if,get,cache,control,null,string,value,get,cache,control,get,header,value,if,value,null,exchange,get,response,get,headers,set,cache,control,value,media,type,media,type,media,type,factory,get,media,type,resource,or,else,null,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,http,method,head,matches,exchange,get,request,get,method,value,set,headers,exchange,resource,media,type,exchange,get,response,get,headers,set,http,headers,bytes,logger,trace,head,request,skipping,content,return,mono,empty,set,headers,exchange,resource,media,type,resource,http,message,writer,writer,get,resource,http,message,writer,assert,state,writer,null,no,resource,http,message,writer,return,writer,write,mono,just,resource,null,resolvable,type,for,class,resource,class,media,type,exchange,get,request,exchange,get,response,collections,empty,map,catch,ioexception,ex,return,mono,error,ex
ResourceWebHandler -> @Override 	public Mono<Void> handle(ServerWebExchange exchange);1498762530;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public Mono<Void> handle(ServerWebExchange exchange) {_		return getResource(exchange)_				.switchIfEmpty(Mono.defer(() -> {_					logger.trace("No matching resource found - returning 404")__					exchange.getResponse().setStatusCode(HttpStatus.NOT_FOUND)__					return Mono.empty()__				}))_				.flatMap(resource -> {_					try {_						if (HttpMethod.OPTIONS.matches(exchange.getRequest().getMethodValue())) {_							exchange.getResponse().getHeaders().add("Allow", "GET,HEAD,OPTIONS")__							return Mono.empty()__						}__						_						HttpMethod httpMethod = exchange.getRequest().getMethod()__						if (!SUPPORTED_METHODS.contains(httpMethod)) {_							return Mono.error(new MethodNotAllowedException(_									exchange.getRequest().getMethodValue(), SUPPORTED_METHODS))__						}__						_						if (exchange.checkNotModified(Instant.ofEpochMilli(resource.lastModified()))) {_							logger.trace("Resource not modified - returning 304")__							return Mono.empty()__						}__						_						if (getCacheControl() != null) {_							String value = getCacheControl().getHeaderValue()__							if (value != null) {_								exchange.getResponse().getHeaders().setCacheControl(value)__							}_						}__						_						MediaType mediaType = MediaTypeFactory.getMediaType(resource).orElse(null)__						if (mediaType != null) {_							if (logger.isTraceEnabled()) {_								logger.trace("Determined media type '" + mediaType + "' for " + resource)__							}_						}_						else {_							if (logger.isTraceEnabled()) {_								logger.trace("No media type found " +_										"for " + resource + " - not sending a content-type header")__							}_						}__						_						if (HttpMethod.HEAD.matches(exchange.getRequest().getMethodValue())) {_							setHeaders(exchange, resource, mediaType)__							exchange.getResponse().getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__							logger.trace("HEAD request - skipping content")__							return Mono.empty()__						}__						setHeaders(exchange, resource, mediaType)__						ResourceHttpMessageWriter writer = getResourceHttpMessageWriter()__						Assert.state(writer != null, "No ResourceHttpMessageWriter")__						return writer.write(Mono.just(resource),_								null, ResolvableType.forClass(Resource.class), mediaType,_								exchange.getRequest(), exchange.getResponse(), Collections.emptyMap())__					}_					catch (IOException ex) {_						return Mono.error(ex)__					}_				})__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,mono,void,handle,server,web,exchange,exchange,return,get,resource,exchange,switch,if,empty,mono,defer,logger,trace,no,matching,resource,found,returning,404,exchange,get,response,set,status,code,http,status,return,mono,empty,flat,map,resource,try,if,http,method,options,matches,exchange,get,request,get,method,value,exchange,get,response,get,headers,add,allow,get,head,options,return,mono,empty,http,method,http,method,exchange,get,request,get,method,if,contains,http,method,return,mono,error,new,method,not,allowed,exception,exchange,get,request,get,method,value,if,exchange,check,not,modified,instant,of,epoch,milli,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,mono,empty,if,get,cache,control,null,string,value,get,cache,control,get,header,value,if,value,null,exchange,get,response,get,headers,set,cache,control,value,media,type,media,type,media,type,factory,get,media,type,resource,or,else,null,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,http,method,head,matches,exchange,get,request,get,method,value,set,headers,exchange,resource,media,type,exchange,get,response,get,headers,set,http,headers,bytes,logger,trace,head,request,skipping,content,return,mono,empty,set,headers,exchange,resource,media,type,resource,http,message,writer,writer,get,resource,http,message,writer,assert,state,writer,null,no,resource,http,message,writer,return,writer,write,mono,just,resource,null,resolvable,type,for,class,resource,class,media,type,exchange,get,request,exchange,get,response,collections,empty,map,catch,ioexception,ex,return,mono,error,ex
ResourceWebHandler -> @Override 	public Mono<Void> handle(ServerWebExchange exchange);1498953917;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public Mono<Void> handle(ServerWebExchange exchange) {_		return getResource(exchange)_				.switchIfEmpty(Mono.defer(() -> {_					logger.trace("No matching resource found - returning 404")__					exchange.getResponse().setStatusCode(HttpStatus.NOT_FOUND)__					return Mono.empty()__				}))_				.flatMap(resource -> {_					try {_						if (HttpMethod.OPTIONS.matches(exchange.getRequest().getMethodValue())) {_							exchange.getResponse().getHeaders().add("Allow", "GET,HEAD,OPTIONS")__							return Mono.empty()__						}__						_						HttpMethod httpMethod = exchange.getRequest().getMethod()__						if (!SUPPORTED_METHODS.contains(httpMethod)) {_							return Mono.error(new MethodNotAllowedException(_									exchange.getRequest().getMethodValue(), SUPPORTED_METHODS))__						}__						_						if (exchange.checkNotModified(Instant.ofEpochMilli(resource.lastModified()))) {_							logger.trace("Resource not modified - returning 304")__							return Mono.empty()__						}__						_						if (getCacheControl() != null) {_							String value = getCacheControl().getHeaderValue()__							if (value != null) {_								exchange.getResponse().getHeaders().setCacheControl(value)__							}_						}__						_						MediaType mediaType = MediaTypeFactory.getMediaType(resource).orElse(null)__						if (mediaType != null) {_							if (logger.isTraceEnabled()) {_								logger.trace("Determined media type '" + mediaType + "' for " + resource)__							}_						}_						else {_							if (logger.isTraceEnabled()) {_								logger.trace("No media type found " +_										"for " + resource + " - not sending a content-type header")__							}_						}__						_						if (HttpMethod.HEAD.matches(exchange.getRequest().getMethodValue())) {_							setHeaders(exchange, resource, mediaType)__							exchange.getResponse().getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__							logger.trace("HEAD request - skipping content")__							return Mono.empty()__						}__						setHeaders(exchange, resource, mediaType)__						ResourceHttpMessageWriter writer = getResourceHttpMessageWriter()__						Assert.state(writer != null, "No ResourceHttpMessageWriter")__						return writer.write(Mono.just(resource),_								null, ResolvableType.forClass(Resource.class), mediaType,_								exchange.getRequest(), exchange.getResponse(), Collections.emptyMap())__					}_					catch (IOException ex) {_						return Mono.error(ex)__					}_				})__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,mono,void,handle,server,web,exchange,exchange,return,get,resource,exchange,switch,if,empty,mono,defer,logger,trace,no,matching,resource,found,returning,404,exchange,get,response,set,status,code,http,status,return,mono,empty,flat,map,resource,try,if,http,method,options,matches,exchange,get,request,get,method,value,exchange,get,response,get,headers,add,allow,get,head,options,return,mono,empty,http,method,http,method,exchange,get,request,get,method,if,contains,http,method,return,mono,error,new,method,not,allowed,exception,exchange,get,request,get,method,value,if,exchange,check,not,modified,instant,of,epoch,milli,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,mono,empty,if,get,cache,control,null,string,value,get,cache,control,get,header,value,if,value,null,exchange,get,response,get,headers,set,cache,control,value,media,type,media,type,media,type,factory,get,media,type,resource,or,else,null,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,http,method,head,matches,exchange,get,request,get,method,value,set,headers,exchange,resource,media,type,exchange,get,response,get,headers,set,http,headers,bytes,logger,trace,head,request,skipping,content,return,mono,empty,set,headers,exchange,resource,media,type,resource,http,message,writer,writer,get,resource,http,message,writer,assert,state,writer,null,no,resource,http,message,writer,return,writer,write,mono,just,resource,null,resolvable,type,for,class,resource,class,media,type,exchange,get,request,exchange,get,response,collections,empty,map,catch,ioexception,ex,return,mono,error,ex
ResourceWebHandler -> @Override 	public Mono<Void> handle(ServerWebExchange exchange);1500448076;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public Mono<Void> handle(ServerWebExchange exchange) {_		return getResource(exchange)_				.switchIfEmpty(Mono.defer(() -> {_					logger.trace("No matching resource found - returning 404")__					exchange.getResponse().setStatusCode(HttpStatus.NOT_FOUND)__					return Mono.empty()__				}))_				.flatMap(resource -> {_					try {_						if (HttpMethod.OPTIONS.matches(exchange.getRequest().getMethodValue())) {_							exchange.getResponse().getHeaders().add("Allow", "GET,HEAD,OPTIONS")__							return Mono.empty()__						}__						_						HttpMethod httpMethod = exchange.getRequest().getMethod()__						if (!SUPPORTED_METHODS.contains(httpMethod)) {_							return Mono.error(new MethodNotAllowedException(_									exchange.getRequest().getMethodValue(), SUPPORTED_METHODS))__						}__						_						if (exchange.checkNotModified(Instant.ofEpochMilli(resource.lastModified()))) {_							logger.trace("Resource not modified - returning 304")__							return Mono.empty()__						}__						_						if (getCacheControl() != null) {_							String value = getCacheControl().getHeaderValue()__							if (value != null) {_								exchange.getResponse().getHeaders().setCacheControl(value)__							}_						}__						_						MediaType mediaType = MediaTypeFactory.getMediaType(resource).orElse(null)__						if (mediaType != null) {_							if (logger.isTraceEnabled()) {_								logger.trace("Determined media type '" + mediaType + "' for " + resource)__							}_						}_						else {_							if (logger.isTraceEnabled()) {_								logger.trace("No media type found " +_										"for " + resource + " - not sending a content-type header")__							}_						}__						_						if (HttpMethod.HEAD.matches(exchange.getRequest().getMethodValue())) {_							setHeaders(exchange, resource, mediaType)__							exchange.getResponse().getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__							logger.trace("HEAD request - skipping content")__							return Mono.empty()__						}__						setHeaders(exchange, resource, mediaType)__						ResourceHttpMessageWriter writer = getResourceHttpMessageWriter()__						Assert.state(writer != null, "No ResourceHttpMessageWriter")__						return writer.write(Mono.just(resource),_								null, ResolvableType.forClass(Resource.class), mediaType,_								exchange.getRequest(), exchange.getResponse(), Collections.emptyMap())__					}_					catch (IOException ex) {_						return Mono.error(ex)__					}_				})__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,mono,void,handle,server,web,exchange,exchange,return,get,resource,exchange,switch,if,empty,mono,defer,logger,trace,no,matching,resource,found,returning,404,exchange,get,response,set,status,code,http,status,return,mono,empty,flat,map,resource,try,if,http,method,options,matches,exchange,get,request,get,method,value,exchange,get,response,get,headers,add,allow,get,head,options,return,mono,empty,http,method,http,method,exchange,get,request,get,method,if,contains,http,method,return,mono,error,new,method,not,allowed,exception,exchange,get,request,get,method,value,if,exchange,check,not,modified,instant,of,epoch,milli,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,mono,empty,if,get,cache,control,null,string,value,get,cache,control,get,header,value,if,value,null,exchange,get,response,get,headers,set,cache,control,value,media,type,media,type,media,type,factory,get,media,type,resource,or,else,null,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,http,method,head,matches,exchange,get,request,get,method,value,set,headers,exchange,resource,media,type,exchange,get,response,get,headers,set,http,headers,bytes,logger,trace,head,request,skipping,content,return,mono,empty,set,headers,exchange,resource,media,type,resource,http,message,writer,writer,get,resource,http,message,writer,assert,state,writer,null,no,resource,http,message,writer,return,writer,write,mono,just,resource,null,resolvable,type,for,class,resource,class,media,type,exchange,get,request,exchange,get,response,collections,empty,map,catch,ioexception,ex,return,mono,error,ex
ResourceWebHandler -> @Override 	public Mono<Void> handle(ServerWebExchange exchange);1501237594;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public Mono<Void> handle(ServerWebExchange exchange) {_		return getResource(exchange)_				.switchIfEmpty(Mono.defer(() -> {_					logger.trace("No matching resource found - returning 404")__					exchange.getResponse().setStatusCode(HttpStatus.NOT_FOUND)__					return Mono.empty()__				}))_				.flatMap(resource -> {_					try {_						if (HttpMethod.OPTIONS.matches(exchange.getRequest().getMethodValue())) {_							exchange.getResponse().getHeaders().add("Allow", "GET,HEAD,OPTIONS")__							return Mono.empty()__						}__						_						HttpMethod httpMethod = exchange.getRequest().getMethod()__						if (!SUPPORTED_METHODS.contains(httpMethod)) {_							return Mono.error(new MethodNotAllowedException(_									exchange.getRequest().getMethodValue(), SUPPORTED_METHODS))__						}__						_						if (exchange.checkNotModified(Instant.ofEpochMilli(resource.lastModified()))) {_							logger.trace("Resource not modified - returning 304")__							return Mono.empty()__						}__						_						if (getCacheControl() != null) {_							String value = getCacheControl().getHeaderValue()__							if (value != null) {_								exchange.getResponse().getHeaders().setCacheControl(value)__							}_						}__						_						MediaType mediaType = MediaTypeFactory.getMediaType(resource).orElse(null)__						if (mediaType != null) {_							if (logger.isTraceEnabled()) {_								logger.trace("Determined media type '" + mediaType + "' for " + resource)__							}_						}_						else {_							if (logger.isTraceEnabled()) {_								logger.trace("No media type found " +_										"for " + resource + " - not sending a content-type header")__							}_						}__						_						if (HttpMethod.HEAD.matches(exchange.getRequest().getMethodValue())) {_							setHeaders(exchange, resource, mediaType)__							exchange.getResponse().getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__							logger.trace("HEAD request - skipping content")__							return Mono.empty()__						}__						setHeaders(exchange, resource, mediaType)__						ResourceHttpMessageWriter writer = getResourceHttpMessageWriter()__						Assert.state(writer != null, "No ResourceHttpMessageWriter")__						return writer.write(Mono.just(resource),_								null, ResolvableType.forClass(Resource.class), mediaType,_								exchange.getRequest(), exchange.getResponse(), Collections.emptyMap())__					}_					catch (IOException ex) {_						return Mono.error(ex)__					}_				})__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,mono,void,handle,server,web,exchange,exchange,return,get,resource,exchange,switch,if,empty,mono,defer,logger,trace,no,matching,resource,found,returning,404,exchange,get,response,set,status,code,http,status,return,mono,empty,flat,map,resource,try,if,http,method,options,matches,exchange,get,request,get,method,value,exchange,get,response,get,headers,add,allow,get,head,options,return,mono,empty,http,method,http,method,exchange,get,request,get,method,if,contains,http,method,return,mono,error,new,method,not,allowed,exception,exchange,get,request,get,method,value,if,exchange,check,not,modified,instant,of,epoch,milli,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,mono,empty,if,get,cache,control,null,string,value,get,cache,control,get,header,value,if,value,null,exchange,get,response,get,headers,set,cache,control,value,media,type,media,type,media,type,factory,get,media,type,resource,or,else,null,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,http,method,head,matches,exchange,get,request,get,method,value,set,headers,exchange,resource,media,type,exchange,get,response,get,headers,set,http,headers,bytes,logger,trace,head,request,skipping,content,return,mono,empty,set,headers,exchange,resource,media,type,resource,http,message,writer,writer,get,resource,http,message,writer,assert,state,writer,null,no,resource,http,message,writer,return,writer,write,mono,just,resource,null,resolvable,type,for,class,resource,class,media,type,exchange,get,request,exchange,get,response,collections,empty,map,catch,ioexception,ex,return,mono,error,ex
ResourceWebHandler -> @Override 	public Mono<Void> handle(ServerWebExchange exchange);1507670883;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public Mono<Void> handle(ServerWebExchange exchange) {_		return getResource(exchange)_				.switchIfEmpty(Mono.defer(() -> {_					logger.trace("No matching resource found - returning 404")__					return Mono.error(NOT_FOUND_EXCEPTION)__				}))_				.flatMap(resource -> {_					try {_						if (HttpMethod.OPTIONS.matches(exchange.getRequest().getMethodValue())) {_							exchange.getResponse().getHeaders().add("Allow", "GET,HEAD,OPTIONS")__							return Mono.empty()__						}__						_						HttpMethod httpMethod = exchange.getRequest().getMethod()__						if (!SUPPORTED_METHODS.contains(httpMethod)) {_							return Mono.error(new MethodNotAllowedException(_									exchange.getRequest().getMethodValue(), SUPPORTED_METHODS))__						}__						_						if (exchange.checkNotModified(Instant.ofEpochMilli(resource.lastModified()))) {_							logger.trace("Resource not modified - returning 304")__							return Mono.empty()__						}__						_						if (getCacheControl() != null) {_							String value = getCacheControl().getHeaderValue()__							if (value != null) {_								exchange.getResponse().getHeaders().setCacheControl(value)__							}_						}__						_						MediaType mediaType = MediaTypeFactory.getMediaType(resource).orElse(null)__						if (mediaType != null) {_							if (logger.isTraceEnabled()) {_								logger.trace("Determined media type '" + mediaType + "' for " + resource)__							}_						}_						else {_							if (logger.isTraceEnabled()) {_								logger.trace("No media type found " +_										"for " + resource + " - not sending a content-type header")__							}_						}__						_						if (HttpMethod.HEAD.matches(exchange.getRequest().getMethodValue())) {_							setHeaders(exchange, resource, mediaType)__							exchange.getResponse().getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__							logger.trace("HEAD request - skipping content")__							return Mono.empty()__						}__						setHeaders(exchange, resource, mediaType)__						ResourceHttpMessageWriter writer = getResourceHttpMessageWriter()__						Assert.state(writer != null, "No ResourceHttpMessageWriter")__						return writer.write(Mono.just(resource),_								null, ResolvableType.forClass(Resource.class), mediaType,_								exchange.getRequest(), exchange.getResponse(), Collections.emptyMap())__					}_					catch (IOException ex) {_						return Mono.error(ex)__					}_				})__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,mono,void,handle,server,web,exchange,exchange,return,get,resource,exchange,switch,if,empty,mono,defer,logger,trace,no,matching,resource,found,returning,404,return,mono,error,flat,map,resource,try,if,http,method,options,matches,exchange,get,request,get,method,value,exchange,get,response,get,headers,add,allow,get,head,options,return,mono,empty,http,method,http,method,exchange,get,request,get,method,if,contains,http,method,return,mono,error,new,method,not,allowed,exception,exchange,get,request,get,method,value,if,exchange,check,not,modified,instant,of,epoch,milli,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,mono,empty,if,get,cache,control,null,string,value,get,cache,control,get,header,value,if,value,null,exchange,get,response,get,headers,set,cache,control,value,media,type,media,type,media,type,factory,get,media,type,resource,or,else,null,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,http,method,head,matches,exchange,get,request,get,method,value,set,headers,exchange,resource,media,type,exchange,get,response,get,headers,set,http,headers,bytes,logger,trace,head,request,skipping,content,return,mono,empty,set,headers,exchange,resource,media,type,resource,http,message,writer,writer,get,resource,http,message,writer,assert,state,writer,null,no,resource,http,message,writer,return,writer,write,mono,just,resource,null,resolvable,type,for,class,resource,class,media,type,exchange,get,request,exchange,get,response,collections,empty,map,catch,ioexception,ex,return,mono,error,ex
ResourceWebHandler -> @Override 	public Mono<Void> handle(ServerWebExchange exchange);1519295386;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public Mono<Void> handle(ServerWebExchange exchange) {_		return getResource(exchange)_				.switchIfEmpty(Mono.defer(() -> {_					logger.trace("No matching resource found - returning 404")__					return Mono.error(NOT_FOUND_EXCEPTION)__				}))_				.flatMap(resource -> {_					try {_						if (HttpMethod.OPTIONS.matches(exchange.getRequest().getMethodValue())) {_							exchange.getResponse().getHeaders().add("Allow", "GET,HEAD,OPTIONS")__							return Mono.empty()__						}__						_						HttpMethod httpMethod = exchange.getRequest().getMethod()__						if (!SUPPORTED_METHODS.contains(httpMethod)) {_							return Mono.error(new MethodNotAllowedException(_									exchange.getRequest().getMethodValue(), SUPPORTED_METHODS))__						}__						_						if (exchange.checkNotModified(Instant.ofEpochMilli(resource.lastModified()))) {_							logger.trace("Resource not modified - returning 304")__							return Mono.empty()__						}__						_						if (getCacheControl() != null) {_							String value = getCacheControl().getHeaderValue()__							if (value != null) {_								exchange.getResponse().getHeaders().setCacheControl(value)__							}_						}__						_						MediaType mediaType = MediaTypeFactory.getMediaType(resource).orElse(null)__						if (mediaType != null) {_							if (logger.isTraceEnabled()) {_								logger.trace("Determined media type '" + mediaType + "' for " + resource)__							}_						}_						else {_							if (logger.isTraceEnabled()) {_								logger.trace("No media type found " +_										"for " + resource + " - not sending a content-type header")__							}_						}__						_						if (HttpMethod.HEAD.matches(exchange.getRequest().getMethodValue())) {_							setHeaders(exchange, resource, mediaType)__							exchange.getResponse().getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__							logger.trace("HEAD request - skipping content")__							return Mono.empty()__						}__						setHeaders(exchange, resource, mediaType)__						ResourceHttpMessageWriter writer = getResourceHttpMessageWriter()__						Assert.state(writer != null, "No ResourceHttpMessageWriter")__						return writer.write(Mono.just(resource),_								null, ResolvableType.forClass(Resource.class), mediaType,_								exchange.getRequest(), exchange.getResponse(), Collections.emptyMap())__					}_					catch (IOException ex) {_						return Mono.error(ex)__					}_				})__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,mono,void,handle,server,web,exchange,exchange,return,get,resource,exchange,switch,if,empty,mono,defer,logger,trace,no,matching,resource,found,returning,404,return,mono,error,flat,map,resource,try,if,http,method,options,matches,exchange,get,request,get,method,value,exchange,get,response,get,headers,add,allow,get,head,options,return,mono,empty,http,method,http,method,exchange,get,request,get,method,if,contains,http,method,return,mono,error,new,method,not,allowed,exception,exchange,get,request,get,method,value,if,exchange,check,not,modified,instant,of,epoch,milli,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,mono,empty,if,get,cache,control,null,string,value,get,cache,control,get,header,value,if,value,null,exchange,get,response,get,headers,set,cache,control,value,media,type,media,type,media,type,factory,get,media,type,resource,or,else,null,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,http,method,head,matches,exchange,get,request,get,method,value,set,headers,exchange,resource,media,type,exchange,get,response,get,headers,set,http,headers,bytes,logger,trace,head,request,skipping,content,return,mono,empty,set,headers,exchange,resource,media,type,resource,http,message,writer,writer,get,resource,http,message,writer,assert,state,writer,null,no,resource,http,message,writer,return,writer,write,mono,just,resource,null,resolvable,type,for,class,resource,class,media,type,exchange,get,request,exchange,get,response,collections,empty,map,catch,ioexception,ex,return,mono,error,ex
ResourceWebHandler -> @Override 	public Mono<Void> handle(ServerWebExchange exchange);1521494163;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public Mono<Void> handle(ServerWebExchange exchange) {_		return getResource(exchange)_				.switchIfEmpty(Mono.defer(() -> {_					logger.trace("No matching resource found - returning 404")__					return Mono.error(NOT_FOUND_EXCEPTION)__				}))_				.flatMap(resource -> {_					try {_						if (HttpMethod.OPTIONS.matches(exchange.getRequest().getMethodValue())) {_							exchange.getResponse().getHeaders().add("Allow", "GET,HEAD,OPTIONS")__							return Mono.empty()__						}__						_						HttpMethod httpMethod = exchange.getRequest().getMethod()__						if (!SUPPORTED_METHODS.contains(httpMethod)) {_							return Mono.error(new MethodNotAllowedException(_									exchange.getRequest().getMethodValue(), SUPPORTED_METHODS))__						}__						_						if (exchange.checkNotModified(Instant.ofEpochMilli(resource.lastModified()))) {_							logger.trace("Resource not modified - returning 304")__							return Mono.empty()__						}__						_						if (getCacheControl() != null) {_							String value = getCacheControl().getHeaderValue()__							if (value != null) {_								exchange.getResponse().getHeaders().setCacheControl(value)__							}_						}__						_						MediaType mediaType = MediaTypeFactory.getMediaType(resource).orElse(null)__						if (mediaType != null) {_							if (logger.isTraceEnabled()) {_								logger.trace("Determined media type '" + mediaType + "' for " + resource)__							}_						}_						else {_							if (logger.isTraceEnabled()) {_								logger.trace("No media type found " +_										"for " + resource + " - not sending a content-type header")__							}_						}__						_						if (HttpMethod.HEAD.matches(exchange.getRequest().getMethodValue())) {_							setHeaders(exchange, resource, mediaType)__							exchange.getResponse().getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__							logger.trace("HEAD request - skipping content")__							return Mono.empty()__						}__						setHeaders(exchange, resource, mediaType)__						ResourceHttpMessageWriter writer = getResourceHttpMessageWriter()__						Assert.state(writer != null, "No ResourceHttpMessageWriter")__						return writer.write(Mono.just(resource),_								null, ResolvableType.forClass(Resource.class), mediaType,_								exchange.getRequest(), exchange.getResponse(), Collections.emptyMap())__					}_					catch (IOException ex) {_						return Mono.error(ex)__					}_				})__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,mono,void,handle,server,web,exchange,exchange,return,get,resource,exchange,switch,if,empty,mono,defer,logger,trace,no,matching,resource,found,returning,404,return,mono,error,flat,map,resource,try,if,http,method,options,matches,exchange,get,request,get,method,value,exchange,get,response,get,headers,add,allow,get,head,options,return,mono,empty,http,method,http,method,exchange,get,request,get,method,if,contains,http,method,return,mono,error,new,method,not,allowed,exception,exchange,get,request,get,method,value,if,exchange,check,not,modified,instant,of,epoch,milli,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,mono,empty,if,get,cache,control,null,string,value,get,cache,control,get,header,value,if,value,null,exchange,get,response,get,headers,set,cache,control,value,media,type,media,type,media,type,factory,get,media,type,resource,or,else,null,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,http,method,head,matches,exchange,get,request,get,method,value,set,headers,exchange,resource,media,type,exchange,get,response,get,headers,set,http,headers,bytes,logger,trace,head,request,skipping,content,return,mono,empty,set,headers,exchange,resource,media,type,resource,http,message,writer,writer,get,resource,http,message,writer,assert,state,writer,null,no,resource,http,message,writer,return,writer,write,mono,just,resource,null,resolvable,type,for,class,resource,class,media,type,exchange,get,request,exchange,get,response,collections,empty,map,catch,ioexception,ex,return,mono,error,ex
ResourceWebHandler -> @Override 	public Mono<Void> handle(ServerWebExchange exchange);1522105242;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public Mono<Void> handle(ServerWebExchange exchange) {_		return getResource(exchange)_				.switchIfEmpty(Mono.defer(() -> {_					logger.trace("No matching resource found - returning 404")__					return Mono.error(NOT_FOUND_EXCEPTION)__				}))_				.flatMap(resource -> {_					try {_						if (HttpMethod.OPTIONS.matches(exchange.getRequest().getMethodValue())) {_							exchange.getResponse().getHeaders().add("Allow", "GET,HEAD,OPTIONS")__							return Mono.empty()__						}__						_						HttpMethod httpMethod = exchange.getRequest().getMethod()__						if (!SUPPORTED_METHODS.contains(httpMethod)) {_							return Mono.error(new MethodNotAllowedException(_									exchange.getRequest().getMethodValue(), SUPPORTED_METHODS))__						}__						_						if (exchange.checkNotModified(Instant.ofEpochMilli(resource.lastModified()))) {_							logger.trace("Resource not modified - returning 304")__							return Mono.empty()__						}__						_						if (getCacheControl() != null) {_							String value = getCacheControl().getHeaderValue()__							if (value != null) {_								exchange.getResponse().getHeaders().setCacheControl(value)__							}_						}__						_						MediaType mediaType = MediaTypeFactory.getMediaType(resource).orElse(null)__						if (mediaType != null) {_							if (logger.isTraceEnabled()) {_								logger.trace("Determined media type '" + mediaType + "' for " + resource)__							}_						}_						else {_							if (logger.isTraceEnabled()) {_								logger.trace("No media type found " +_										"for " + resource + " - not sending a content-type header")__							}_						}__						_						if (HttpMethod.HEAD.matches(exchange.getRequest().getMethodValue())) {_							setHeaders(exchange, resource, mediaType)__							exchange.getResponse().getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__							logger.trace("HEAD request - skipping content")__							return Mono.empty()__						}__						setHeaders(exchange, resource, mediaType)__						ResourceHttpMessageWriter writer = getResourceHttpMessageWriter()__						Assert.state(writer != null, "No ResourceHttpMessageWriter")__						return writer.write(Mono.just(resource),_								null, ResolvableType.forClass(Resource.class), mediaType,_								exchange.getRequest(), exchange.getResponse(), Collections.emptyMap())__					}_					catch (IOException ex) {_						return Mono.error(ex)__					}_				})__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,mono,void,handle,server,web,exchange,exchange,return,get,resource,exchange,switch,if,empty,mono,defer,logger,trace,no,matching,resource,found,returning,404,return,mono,error,flat,map,resource,try,if,http,method,options,matches,exchange,get,request,get,method,value,exchange,get,response,get,headers,add,allow,get,head,options,return,mono,empty,http,method,http,method,exchange,get,request,get,method,if,contains,http,method,return,mono,error,new,method,not,allowed,exception,exchange,get,request,get,method,value,if,exchange,check,not,modified,instant,of,epoch,milli,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,mono,empty,if,get,cache,control,null,string,value,get,cache,control,get,header,value,if,value,null,exchange,get,response,get,headers,set,cache,control,value,media,type,media,type,media,type,factory,get,media,type,resource,or,else,null,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,http,method,head,matches,exchange,get,request,get,method,value,set,headers,exchange,resource,media,type,exchange,get,response,get,headers,set,http,headers,bytes,logger,trace,head,request,skipping,content,return,mono,empty,set,headers,exchange,resource,media,type,resource,http,message,writer,writer,get,resource,http,message,writer,assert,state,writer,null,no,resource,http,message,writer,return,writer,write,mono,just,resource,null,resolvable,type,for,class,resource,class,media,type,exchange,get,request,exchange,get,response,collections,empty,map,catch,ioexception,ex,return,mono,error,ex
ResourceWebHandler -> @Override 	public Mono<Void> handle(ServerWebExchange exchange);1527081441;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public Mono<Void> handle(ServerWebExchange exchange) {_		return getResource(exchange)_				.switchIfEmpty(Mono.defer(() -> {_					logger.trace("No matching resource found - returning 404")__					return Mono.error(NOT_FOUND_EXCEPTION)__				}))_				.flatMap(resource -> {_					try {_						if (HttpMethod.OPTIONS.matches(exchange.getRequest().getMethodValue())) {_							exchange.getResponse().getHeaders().add("Allow", "GET,HEAD,OPTIONS")__							return Mono.empty()__						}__						_						HttpMethod httpMethod = exchange.getRequest().getMethod()__						if (!SUPPORTED_METHODS.contains(httpMethod)) {_							return Mono.error(new MethodNotAllowedException(_									exchange.getRequest().getMethodValue(), SUPPORTED_METHODS))__						}__						_						if (exchange.checkNotModified(Instant.ofEpochMilli(resource.lastModified()))) {_							logger.trace("Resource not modified - returning 304")__							return Mono.empty()__						}__						_						if (getCacheControl() != null) {_							String value = getCacheControl().getHeaderValue()__							if (value != null) {_								exchange.getResponse().getHeaders().setCacheControl(value)__							}_						}__						_						MediaType mediaType = MediaTypeFactory.getMediaType(resource).orElse(null)__						if (mediaType != null) {_							if (logger.isTraceEnabled()) {_								logger.trace("Determined media type '" + mediaType + "' for " + resource)__							}_						}_						else {_							if (logger.isTraceEnabled()) {_								logger.trace("No media type found " +_										"for " + resource + " - not sending a content-type header")__							}_						}__						_						if (HttpMethod.HEAD.matches(exchange.getRequest().getMethodValue())) {_							setHeaders(exchange, resource, mediaType)__							exchange.getResponse().getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__							logger.trace("HEAD request - skipping content")__							return Mono.empty()__						}__						setHeaders(exchange, resource, mediaType)__						ResourceHttpMessageWriter writer = getResourceHttpMessageWriter()__						Assert.state(writer != null, "No ResourceHttpMessageWriter")__						return writer.write(Mono.just(resource),_								null, ResolvableType.forClass(Resource.class), mediaType,_								exchange.getRequest(), exchange.getResponse(), Collections.emptyMap())__					}_					catch (IOException ex) {_						return Mono.error(ex)__					}_				})__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,mono,void,handle,server,web,exchange,exchange,return,get,resource,exchange,switch,if,empty,mono,defer,logger,trace,no,matching,resource,found,returning,404,return,mono,error,flat,map,resource,try,if,http,method,options,matches,exchange,get,request,get,method,value,exchange,get,response,get,headers,add,allow,get,head,options,return,mono,empty,http,method,http,method,exchange,get,request,get,method,if,contains,http,method,return,mono,error,new,method,not,allowed,exception,exchange,get,request,get,method,value,if,exchange,check,not,modified,instant,of,epoch,milli,resource,last,modified,logger,trace,resource,not,modified,returning,304,return,mono,empty,if,get,cache,control,null,string,value,get,cache,control,get,header,value,if,value,null,exchange,get,response,get,headers,set,cache,control,value,media,type,media,type,media,type,factory,get,media,type,resource,or,else,null,if,media,type,null,if,logger,is,trace,enabled,logger,trace,determined,media,type,media,type,for,resource,else,if,logger,is,trace,enabled,logger,trace,no,media,type,found,for,resource,not,sending,a,content,type,header,if,http,method,head,matches,exchange,get,request,get,method,value,set,headers,exchange,resource,media,type,exchange,get,response,get,headers,set,http,headers,bytes,logger,trace,head,request,skipping,content,return,mono,empty,set,headers,exchange,resource,media,type,resource,http,message,writer,writer,get,resource,http,message,writer,assert,state,writer,null,no,resource,http,message,writer,return,writer,write,mono,just,resource,null,resolvable,type,for,class,resource,class,media,type,exchange,get,request,exchange,get,response,collections,empty,map,catch,ioexception,ex,return,mono,error,ex
ResourceWebHandler -> @Override 	public Mono<Void> handle(ServerWebExchange exchange);1529721864;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public Mono<Void> handle(ServerWebExchange exchange) {_		return getResource(exchange)_				.switchIfEmpty(Mono.defer(() -> {_					logger.debug("Resource not found")__					return Mono.error(NOT_FOUND_EXCEPTION)__				}))_				.flatMap(resource -> {_					try {_						if (HttpMethod.OPTIONS.matches(exchange.getRequest().getMethodValue())) {_							exchange.getResponse().getHeaders().add("Allow", "GET,HEAD,OPTIONS")__							return Mono.empty()__						}__						_						HttpMethod httpMethod = exchange.getRequest().getMethod()__						if (!SUPPORTED_METHODS.contains(httpMethod)) {_							return Mono.error(new MethodNotAllowedException(_									exchange.getRequest().getMethodValue(), SUPPORTED_METHODS))__						}__						_						if (exchange.checkNotModified(Instant.ofEpochMilli(resource.lastModified()))) {_							logger.trace("Resource not modified")__							return Mono.empty()__						}__						_						if (getCacheControl() != null) {_							String value = getCacheControl().getHeaderValue()__							if (value != null) {_								exchange.getResponse().getHeaders().setCacheControl(value)__							}_						}__						_						MediaType mediaType = MediaTypeFactory.getMediaType(resource).orElse(null)___						_						if (HttpMethod.HEAD.matches(exchange.getRequest().getMethodValue())) {_							setHeaders(exchange, resource, mediaType)__							exchange.getResponse().getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__							return Mono.empty()__						}__						setHeaders(exchange, resource, mediaType)__						ResourceHttpMessageWriter writer = getResourceHttpMessageWriter()__						Assert.state(writer != null, "No ResourceHttpMessageWriter")__						return writer.write(Mono.just(resource),_								null, ResolvableType.forClass(Resource.class), mediaType,_								exchange.getRequest(), exchange.getResponse(), Collections.emptyMap())__					}_					catch (IOException ex) {_						return Mono.error(ex)__					}_				})__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,mono,void,handle,server,web,exchange,exchange,return,get,resource,exchange,switch,if,empty,mono,defer,logger,debug,resource,not,found,return,mono,error,flat,map,resource,try,if,http,method,options,matches,exchange,get,request,get,method,value,exchange,get,response,get,headers,add,allow,get,head,options,return,mono,empty,http,method,http,method,exchange,get,request,get,method,if,contains,http,method,return,mono,error,new,method,not,allowed,exception,exchange,get,request,get,method,value,if,exchange,check,not,modified,instant,of,epoch,milli,resource,last,modified,logger,trace,resource,not,modified,return,mono,empty,if,get,cache,control,null,string,value,get,cache,control,get,header,value,if,value,null,exchange,get,response,get,headers,set,cache,control,value,media,type,media,type,media,type,factory,get,media,type,resource,or,else,null,if,http,method,head,matches,exchange,get,request,get,method,value,set,headers,exchange,resource,media,type,exchange,get,response,get,headers,set,http,headers,bytes,return,mono,empty,set,headers,exchange,resource,media,type,resource,http,message,writer,writer,get,resource,http,message,writer,assert,state,writer,null,no,resource,http,message,writer,return,writer,write,mono,just,resource,null,resolvable,type,for,class,resource,class,media,type,exchange,get,request,exchange,get,response,collections,empty,map,catch,ioexception,ex,return,mono,error,ex
ResourceWebHandler -> @Override 	public Mono<Void> handle(ServerWebExchange exchange);1530174524;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public Mono<Void> handle(ServerWebExchange exchange) {_		return getResource(exchange)_				.switchIfEmpty(Mono.defer(() -> {_					logger.debug("Resource not found")__					return Mono.error(NOT_FOUND_EXCEPTION)__				}))_				.flatMap(resource -> {_					try {_						if (HttpMethod.OPTIONS.matches(exchange.getRequest().getMethodValue())) {_							exchange.getResponse().getHeaders().add("Allow", "GET,HEAD,OPTIONS")__							return Mono.empty()__						}__						_						HttpMethod httpMethod = exchange.getRequest().getMethod()__						if (!SUPPORTED_METHODS.contains(httpMethod)) {_							return Mono.error(new MethodNotAllowedException(_									exchange.getRequest().getMethodValue(), SUPPORTED_METHODS))__						}__						_						if (exchange.checkNotModified(Instant.ofEpochMilli(resource.lastModified()))) {_							logger.trace("Resource not modified")__							return Mono.empty()__						}__						_						if (getCacheControl() != null) {_							String value = getCacheControl().getHeaderValue()__							if (value != null) {_								exchange.getResponse().getHeaders().setCacheControl(value)__							}_						}__						_						MediaType mediaType = MediaTypeFactory.getMediaType(resource).orElse(null)___						_						if (HttpMethod.HEAD.matches(exchange.getRequest().getMethodValue())) {_							setHeaders(exchange, resource, mediaType)__							exchange.getResponse().getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__							return Mono.empty()__						}__						setHeaders(exchange, resource, mediaType)__						ResourceHttpMessageWriter writer = getResourceHttpMessageWriter()__						Assert.state(writer != null, "No ResourceHttpMessageWriter")__						return writer.write(Mono.just(resource),_								null, ResolvableType.forClass(Resource.class), mediaType,_								exchange.getRequest(), exchange.getResponse(), Collections.emptyMap())__					}_					catch (IOException ex) {_						return Mono.error(ex)__					}_				})__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,mono,void,handle,server,web,exchange,exchange,return,get,resource,exchange,switch,if,empty,mono,defer,logger,debug,resource,not,found,return,mono,error,flat,map,resource,try,if,http,method,options,matches,exchange,get,request,get,method,value,exchange,get,response,get,headers,add,allow,get,head,options,return,mono,empty,http,method,http,method,exchange,get,request,get,method,if,contains,http,method,return,mono,error,new,method,not,allowed,exception,exchange,get,request,get,method,value,if,exchange,check,not,modified,instant,of,epoch,milli,resource,last,modified,logger,trace,resource,not,modified,return,mono,empty,if,get,cache,control,null,string,value,get,cache,control,get,header,value,if,value,null,exchange,get,response,get,headers,set,cache,control,value,media,type,media,type,media,type,factory,get,media,type,resource,or,else,null,if,http,method,head,matches,exchange,get,request,get,method,value,set,headers,exchange,resource,media,type,exchange,get,response,get,headers,set,http,headers,bytes,return,mono,empty,set,headers,exchange,resource,media,type,resource,http,message,writer,writer,get,resource,http,message,writer,assert,state,writer,null,no,resource,http,message,writer,return,writer,write,mono,just,resource,null,resolvable,type,for,class,resource,class,media,type,exchange,get,request,exchange,get,response,collections,empty,map,catch,ioexception,ex,return,mono,error,ex
ResourceWebHandler -> @Override 	public Mono<Void> handle(ServerWebExchange exchange);1530190293;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public Mono<Void> handle(ServerWebExchange exchange) {_		return getResource(exchange)_				.switchIfEmpty(Mono.defer(() -> {_					logger.debug("Resource not found")__					return Mono.error(NOT_FOUND_EXCEPTION)__				}))_				.flatMap(resource -> {_					try {_						if (HttpMethod.OPTIONS.matches(exchange.getRequest().getMethodValue())) {_							exchange.getResponse().getHeaders().add("Allow", "GET,HEAD,OPTIONS")__							return Mono.empty()__						}__						_						HttpMethod httpMethod = exchange.getRequest().getMethod()__						if (!SUPPORTED_METHODS.contains(httpMethod)) {_							return Mono.error(new MethodNotAllowedException(_									exchange.getRequest().getMethodValue(), SUPPORTED_METHODS))__						}__						_						if (exchange.checkNotModified(Instant.ofEpochMilli(resource.lastModified()))) {_							logger.trace("Resource not modified")__							return Mono.empty()__						}__						_						if (getCacheControl() != null) {_							String value = getCacheControl().getHeaderValue()__							if (value != null) {_								exchange.getResponse().getHeaders().setCacheControl(value)__							}_						}__						_						MediaType mediaType = MediaTypeFactory.getMediaType(resource).orElse(null)___						_						if (HttpMethod.HEAD.matches(exchange.getRequest().getMethodValue())) {_							setHeaders(exchange, resource, mediaType)__							exchange.getResponse().getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__							return Mono.empty()__						}__						setHeaders(exchange, resource, mediaType)__						ResourceHttpMessageWriter writer = getResourceHttpMessageWriter()__						Assert.state(writer != null, "No ResourceHttpMessageWriter")__						return writer.write(Mono.just(resource),_								null, ResolvableType.forClass(Resource.class), mediaType,_								exchange.getRequest(), exchange.getResponse(), Collections.emptyMap())__					}_					catch (IOException ex) {_						return Mono.error(ex)__					}_				})__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,mono,void,handle,server,web,exchange,exchange,return,get,resource,exchange,switch,if,empty,mono,defer,logger,debug,resource,not,found,return,mono,error,flat,map,resource,try,if,http,method,options,matches,exchange,get,request,get,method,value,exchange,get,response,get,headers,add,allow,get,head,options,return,mono,empty,http,method,http,method,exchange,get,request,get,method,if,contains,http,method,return,mono,error,new,method,not,allowed,exception,exchange,get,request,get,method,value,if,exchange,check,not,modified,instant,of,epoch,milli,resource,last,modified,logger,trace,resource,not,modified,return,mono,empty,if,get,cache,control,null,string,value,get,cache,control,get,header,value,if,value,null,exchange,get,response,get,headers,set,cache,control,value,media,type,media,type,media,type,factory,get,media,type,resource,or,else,null,if,http,method,head,matches,exchange,get,request,get,method,value,set,headers,exchange,resource,media,type,exchange,get,response,get,headers,set,http,headers,bytes,return,mono,empty,set,headers,exchange,resource,media,type,resource,http,message,writer,writer,get,resource,http,message,writer,assert,state,writer,null,no,resource,http,message,writer,return,writer,write,mono,just,resource,null,resolvable,type,for,class,resource,class,media,type,exchange,get,request,exchange,get,response,collections,empty,map,catch,ioexception,ex,return,mono,error,ex
ResourceWebHandler -> @Override 	public Mono<Void> handle(ServerWebExchange exchange);1530793633;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public Mono<Void> handle(ServerWebExchange exchange) {_		return getResource(exchange)_				.switchIfEmpty(Mono.defer(() -> {_					logger.debug(exchange.getLogPrefix() + "Resource not found")__					return Mono.error(NOT_FOUND_EXCEPTION)__				}))_				.flatMap(resource -> {_					try {_						if (HttpMethod.OPTIONS.matches(exchange.getRequest().getMethodValue())) {_							exchange.getResponse().getHeaders().add("Allow", "GET,HEAD,OPTIONS")__							return Mono.empty()__						}__						_						HttpMethod httpMethod = exchange.getRequest().getMethod()__						if (!SUPPORTED_METHODS.contains(httpMethod)) {_							return Mono.error(new MethodNotAllowedException(_									exchange.getRequest().getMethodValue(), SUPPORTED_METHODS))__						}__						_						if (exchange.checkNotModified(Instant.ofEpochMilli(resource.lastModified()))) {_							logger.trace(exchange.getLogPrefix() + "Resource not modified")__							return Mono.empty()__						}__						_						if (getCacheControl() != null) {_							String value = getCacheControl().getHeaderValue()__							if (value != null) {_								exchange.getResponse().getHeaders().setCacheControl(value)__							}_						}__						_						MediaType mediaType = MediaTypeFactory.getMediaType(resource).orElse(null)___						_						if (HttpMethod.HEAD.matches(exchange.getRequest().getMethodValue())) {_							setHeaders(exchange, resource, mediaType)__							exchange.getResponse().getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__							return Mono.empty()__						}__						setHeaders(exchange, resource, mediaType)__						ResourceHttpMessageWriter writer = getResourceHttpMessageWriter()__						Assert.state(writer != null, "No ResourceHttpMessageWriter")__						return writer.write(Mono.just(resource),_								null, ResolvableType.forClass(Resource.class), mediaType,_								exchange.getRequest(), exchange.getResponse(), Collections.emptyMap())__					}_					catch (IOException ex) {_						return Mono.error(ex)__					}_				})__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,mono,void,handle,server,web,exchange,exchange,return,get,resource,exchange,switch,if,empty,mono,defer,logger,debug,exchange,get,log,prefix,resource,not,found,return,mono,error,flat,map,resource,try,if,http,method,options,matches,exchange,get,request,get,method,value,exchange,get,response,get,headers,add,allow,get,head,options,return,mono,empty,http,method,http,method,exchange,get,request,get,method,if,contains,http,method,return,mono,error,new,method,not,allowed,exception,exchange,get,request,get,method,value,if,exchange,check,not,modified,instant,of,epoch,milli,resource,last,modified,logger,trace,exchange,get,log,prefix,resource,not,modified,return,mono,empty,if,get,cache,control,null,string,value,get,cache,control,get,header,value,if,value,null,exchange,get,response,get,headers,set,cache,control,value,media,type,media,type,media,type,factory,get,media,type,resource,or,else,null,if,http,method,head,matches,exchange,get,request,get,method,value,set,headers,exchange,resource,media,type,exchange,get,response,get,headers,set,http,headers,bytes,return,mono,empty,set,headers,exchange,resource,media,type,resource,http,message,writer,writer,get,resource,http,message,writer,assert,state,writer,null,no,resource,http,message,writer,return,writer,write,mono,just,resource,null,resolvable,type,for,class,resource,class,media,type,exchange,get,request,exchange,get,response,collections,empty,map,catch,ioexception,ex,return,mono,error,ex
ResourceWebHandler -> @Override 	public Mono<Void> handle(ServerWebExchange exchange);1530793695;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public Mono<Void> handle(ServerWebExchange exchange) {_		return getResource(exchange)_				.switchIfEmpty(Mono.defer(() -> {_					logger.debug(exchange.getLogPrefix() + "Resource not found")__					return Mono.error(NOT_FOUND_EXCEPTION)__				}))_				.flatMap(resource -> {_					try {_						if (HttpMethod.OPTIONS.matches(exchange.getRequest().getMethodValue())) {_							exchange.getResponse().getHeaders().add("Allow", "GET,HEAD,OPTIONS")__							return Mono.empty()__						}__						_						HttpMethod httpMethod = exchange.getRequest().getMethod()__						if (!SUPPORTED_METHODS.contains(httpMethod)) {_							return Mono.error(new MethodNotAllowedException(_									exchange.getRequest().getMethodValue(), SUPPORTED_METHODS))__						}__						_						if (exchange.checkNotModified(Instant.ofEpochMilli(resource.lastModified()))) {_							logger.trace(exchange.getLogPrefix() + "Resource not modified")__							return Mono.empty()__						}__						_						if (getCacheControl() != null) {_							String value = getCacheControl().getHeaderValue()__							if (value != null) {_								exchange.getResponse().getHeaders().setCacheControl(value)__							}_						}__						_						MediaType mediaType = MediaTypeFactory.getMediaType(resource).orElse(null)___						_						if (HttpMethod.HEAD.matches(exchange.getRequest().getMethodValue())) {_							setHeaders(exchange, resource, mediaType)__							exchange.getResponse().getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__							return Mono.empty()__						}__						setHeaders(exchange, resource, mediaType)__						ResourceHttpMessageWriter writer = getResourceHttpMessageWriter()__						Assert.state(writer != null, "No ResourceHttpMessageWriter")__						return writer.write(Mono.just(resource),_								null, ResolvableType.forClass(Resource.class), mediaType,_								exchange.getRequest(), exchange.getResponse(),_								Hints.from(Hints.LOG_PREFIX_HINT, exchange.getLogPrefix()))__					}_					catch (IOException ex) {_						return Mono.error(ex)__					}_				})__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,mono,void,handle,server,web,exchange,exchange,return,get,resource,exchange,switch,if,empty,mono,defer,logger,debug,exchange,get,log,prefix,resource,not,found,return,mono,error,flat,map,resource,try,if,http,method,options,matches,exchange,get,request,get,method,value,exchange,get,response,get,headers,add,allow,get,head,options,return,mono,empty,http,method,http,method,exchange,get,request,get,method,if,contains,http,method,return,mono,error,new,method,not,allowed,exception,exchange,get,request,get,method,value,if,exchange,check,not,modified,instant,of,epoch,milli,resource,last,modified,logger,trace,exchange,get,log,prefix,resource,not,modified,return,mono,empty,if,get,cache,control,null,string,value,get,cache,control,get,header,value,if,value,null,exchange,get,response,get,headers,set,cache,control,value,media,type,media,type,media,type,factory,get,media,type,resource,or,else,null,if,http,method,head,matches,exchange,get,request,get,method,value,set,headers,exchange,resource,media,type,exchange,get,response,get,headers,set,http,headers,bytes,return,mono,empty,set,headers,exchange,resource,media,type,resource,http,message,writer,writer,get,resource,http,message,writer,assert,state,writer,null,no,resource,http,message,writer,return,writer,write,mono,just,resource,null,resolvable,type,for,class,resource,class,media,type,exchange,get,request,exchange,get,response,hints,from,hints,exchange,get,log,prefix,catch,ioexception,ex,return,mono,error,ex
ResourceWebHandler -> @Override 	public Mono<Void> handle(ServerWebExchange exchange);1532091916;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public Mono<Void> handle(ServerWebExchange exchange) {_		return getResource(exchange)_				.switchIfEmpty(Mono.defer(() -> {_					logger.debug(exchange.getLogPrefix() + "Resource not found")__					return Mono.error(NOT_FOUND_EXCEPTION)__				}))_				.flatMap(resource -> {_					try {_						if (HttpMethod.OPTIONS.matches(exchange.getRequest().getMethodValue())) {_							exchange.getResponse().getHeaders().add("Allow", "GET,HEAD,OPTIONS")__							return Mono.empty()__						}__						_						HttpMethod httpMethod = exchange.getRequest().getMethod()__						if (!SUPPORTED_METHODS.contains(httpMethod)) {_							return Mono.error(new MethodNotAllowedException(_									exchange.getRequest().getMethodValue(), SUPPORTED_METHODS))__						}__						_						if (exchange.checkNotModified(Instant.ofEpochMilli(resource.lastModified()))) {_							logger.trace(exchange.getLogPrefix() + "Resource not modified")__							return Mono.empty()__						}__						_						if (getCacheControl() != null) {_							String value = getCacheControl().getHeaderValue()__							if (value != null) {_								exchange.getResponse().getHeaders().setCacheControl(value)__							}_						}__						_						MediaType mediaType = MediaTypeFactory.getMediaType(resource).orElse(null)___						_						if (HttpMethod.HEAD.matches(exchange.getRequest().getMethodValue())) {_							setHeaders(exchange, resource, mediaType)__							exchange.getResponse().getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__							return Mono.empty()__						}__						setHeaders(exchange, resource, mediaType)__						ResourceHttpMessageWriter writer = getResourceHttpMessageWriter()__						Assert.state(writer != null, "No ResourceHttpMessageWriter")__						return writer.write(Mono.just(resource),_								null, ResolvableType.forClass(Resource.class), mediaType,_								exchange.getRequest(), exchange.getResponse(),_								Hints.from(Hints.LOG_PREFIX_HINT, exchange.getLogPrefix()))__					}_					catch (IOException ex) {_						return Mono.error(ex)__					}_				})__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,mono,void,handle,server,web,exchange,exchange,return,get,resource,exchange,switch,if,empty,mono,defer,logger,debug,exchange,get,log,prefix,resource,not,found,return,mono,error,flat,map,resource,try,if,http,method,options,matches,exchange,get,request,get,method,value,exchange,get,response,get,headers,add,allow,get,head,options,return,mono,empty,http,method,http,method,exchange,get,request,get,method,if,contains,http,method,return,mono,error,new,method,not,allowed,exception,exchange,get,request,get,method,value,if,exchange,check,not,modified,instant,of,epoch,milli,resource,last,modified,logger,trace,exchange,get,log,prefix,resource,not,modified,return,mono,empty,if,get,cache,control,null,string,value,get,cache,control,get,header,value,if,value,null,exchange,get,response,get,headers,set,cache,control,value,media,type,media,type,media,type,factory,get,media,type,resource,or,else,null,if,http,method,head,matches,exchange,get,request,get,method,value,set,headers,exchange,resource,media,type,exchange,get,response,get,headers,set,http,headers,bytes,return,mono,empty,set,headers,exchange,resource,media,type,resource,http,message,writer,writer,get,resource,http,message,writer,assert,state,writer,null,no,resource,http,message,writer,return,writer,write,mono,just,resource,null,resolvable,type,for,class,resource,class,media,type,exchange,get,request,exchange,get,response,hints,from,hints,exchange,get,log,prefix,catch,ioexception,ex,return,mono,error,ex
ResourceWebHandler -> @Override 	public Mono<Void> handle(ServerWebExchange exchange);1542138563;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public Mono<Void> handle(ServerWebExchange exchange) {_		return getResource(exchange)_				.switchIfEmpty(Mono.defer(() -> {_					logger.debug(exchange.getLogPrefix() + "Resource not found")__					return Mono.error(new ResponseStatusException(HttpStatus.NOT_FOUND))__				}))_				.flatMap(resource -> {_					try {_						if (HttpMethod.OPTIONS.matches(exchange.getRequest().getMethodValue())) {_							exchange.getResponse().getHeaders().add("Allow", "GET,HEAD,OPTIONS")__							return Mono.empty()__						}__						_						HttpMethod httpMethod = exchange.getRequest().getMethod()__						if (!SUPPORTED_METHODS.contains(httpMethod)) {_							return Mono.error(new MethodNotAllowedException(_									exchange.getRequest().getMethodValue(), SUPPORTED_METHODS))__						}__						_						if (exchange.checkNotModified(Instant.ofEpochMilli(resource.lastModified()))) {_							logger.trace(exchange.getLogPrefix() + "Resource not modified")__							return Mono.empty()__						}__						_						if (getCacheControl() != null) {_							String value = getCacheControl().getHeaderValue()__							if (value != null) {_								exchange.getResponse().getHeaders().setCacheControl(value)__							}_						}__						_						MediaType mediaType = MediaTypeFactory.getMediaType(resource).orElse(null)___						_						if (HttpMethod.HEAD.matches(exchange.getRequest().getMethodValue())) {_							setHeaders(exchange, resource, mediaType)__							exchange.getResponse().getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__							return Mono.empty()__						}__						setHeaders(exchange, resource, mediaType)__						ResourceHttpMessageWriter writer = getResourceHttpMessageWriter()__						Assert.state(writer != null, "No ResourceHttpMessageWriter")__						return writer.write(Mono.just(resource),_								null, ResolvableType.forClass(Resource.class), mediaType,_								exchange.getRequest(), exchange.getResponse(),_								Hints.from(Hints.LOG_PREFIX_HINT, exchange.getLogPrefix()))__					}_					catch (IOException ex) {_						return Mono.error(ex)__					}_				})__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,mono,void,handle,server,web,exchange,exchange,return,get,resource,exchange,switch,if,empty,mono,defer,logger,debug,exchange,get,log,prefix,resource,not,found,return,mono,error,new,response,status,exception,http,status,flat,map,resource,try,if,http,method,options,matches,exchange,get,request,get,method,value,exchange,get,response,get,headers,add,allow,get,head,options,return,mono,empty,http,method,http,method,exchange,get,request,get,method,if,contains,http,method,return,mono,error,new,method,not,allowed,exception,exchange,get,request,get,method,value,if,exchange,check,not,modified,instant,of,epoch,milli,resource,last,modified,logger,trace,exchange,get,log,prefix,resource,not,modified,return,mono,empty,if,get,cache,control,null,string,value,get,cache,control,get,header,value,if,value,null,exchange,get,response,get,headers,set,cache,control,value,media,type,media,type,media,type,factory,get,media,type,resource,or,else,null,if,http,method,head,matches,exchange,get,request,get,method,value,set,headers,exchange,resource,media,type,exchange,get,response,get,headers,set,http,headers,bytes,return,mono,empty,set,headers,exchange,resource,media,type,resource,http,message,writer,writer,get,resource,http,message,writer,assert,state,writer,null,no,resource,http,message,writer,return,writer,write,mono,just,resource,null,resolvable,type,for,class,resource,class,media,type,exchange,get,request,exchange,get,response,hints,from,hints,exchange,get,log,prefix,catch,ioexception,ex,return,mono,error,ex
ResourceWebHandler -> @Override 	public Mono<Void> handle(ServerWebExchange exchange);1542899558;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public Mono<Void> handle(ServerWebExchange exchange) {_		return getResource(exchange)_				.switchIfEmpty(Mono.defer(() -> {_					logger.debug(exchange.getLogPrefix() + "Resource not found")__					return Mono.error(new ResponseStatusException(HttpStatus.NOT_FOUND))__				}))_				.flatMap(resource -> {_					try {_						if (HttpMethod.OPTIONS.matches(exchange.getRequest().getMethodValue())) {_							exchange.getResponse().getHeaders().add("Allow", "GET,HEAD,OPTIONS")__							return Mono.empty()__						}__						_						HttpMethod httpMethod = exchange.getRequest().getMethod()__						if (!SUPPORTED_METHODS.contains(httpMethod)) {_							return Mono.error(new MethodNotAllowedException(_									exchange.getRequest().getMethodValue(), SUPPORTED_METHODS))__						}__						_						if (exchange.checkNotModified(Instant.ofEpochMilli(resource.lastModified()))) {_							logger.trace(exchange.getLogPrefix() + "Resource not modified")__							return Mono.empty()__						}__						_						if (getCacheControl() != null) {_							String value = getCacheControl().getHeaderValue()__							if (value != null) {_								exchange.getResponse().getHeaders().setCacheControl(value)__							}_						}__						_						MediaType mediaType = MediaTypeFactory.getMediaType(resource).orElse(null)___						_						if (HttpMethod.HEAD.matches(exchange.getRequest().getMethodValue())) {_							setHeaders(exchange, resource, mediaType)__							exchange.getResponse().getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__							return Mono.empty()__						}__						setHeaders(exchange, resource, mediaType)__						ResourceHttpMessageWriter writer = getResourceHttpMessageWriter()__						Assert.state(writer != null, "No ResourceHttpMessageWriter")__						return writer.write(Mono.just(resource),_								null, ResolvableType.forClass(Resource.class), mediaType,_								exchange.getRequest(), exchange.getResponse(),_								Hints.from(Hints.LOG_PREFIX_HINT, exchange.getLogPrefix()))__					}_					catch (IOException ex) {_						return Mono.error(ex)__					}_				})__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,mono,void,handle,server,web,exchange,exchange,return,get,resource,exchange,switch,if,empty,mono,defer,logger,debug,exchange,get,log,prefix,resource,not,found,return,mono,error,new,response,status,exception,http,status,flat,map,resource,try,if,http,method,options,matches,exchange,get,request,get,method,value,exchange,get,response,get,headers,add,allow,get,head,options,return,mono,empty,http,method,http,method,exchange,get,request,get,method,if,contains,http,method,return,mono,error,new,method,not,allowed,exception,exchange,get,request,get,method,value,if,exchange,check,not,modified,instant,of,epoch,milli,resource,last,modified,logger,trace,exchange,get,log,prefix,resource,not,modified,return,mono,empty,if,get,cache,control,null,string,value,get,cache,control,get,header,value,if,value,null,exchange,get,response,get,headers,set,cache,control,value,media,type,media,type,media,type,factory,get,media,type,resource,or,else,null,if,http,method,head,matches,exchange,get,request,get,method,value,set,headers,exchange,resource,media,type,exchange,get,response,get,headers,set,http,headers,bytes,return,mono,empty,set,headers,exchange,resource,media,type,resource,http,message,writer,writer,get,resource,http,message,writer,assert,state,writer,null,no,resource,http,message,writer,return,writer,write,mono,just,resource,null,resolvable,type,for,class,resource,class,media,type,exchange,get,request,exchange,get,response,hints,from,hints,exchange,get,log,prefix,catch,ioexception,ex,return,mono,error,ex
ResourceWebHandler -> @Override 	public Mono<Void> handle(ServerWebExchange exchange);1542907316;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public Mono<Void> handle(ServerWebExchange exchange) {_		return getResource(exchange)_				.switchIfEmpty(Mono.defer(() -> {_					logger.debug(exchange.getLogPrefix() + "Resource not found")__					return Mono.error(new ResponseStatusException(HttpStatus.NOT_FOUND))__				}))_				.flatMap(resource -> {_					try {_						if (HttpMethod.OPTIONS.matches(exchange.getRequest().getMethodValue())) {_							exchange.getResponse().getHeaders().add("Allow", "GET,HEAD,OPTIONS")__							return Mono.empty()__						}__						_						HttpMethod httpMethod = exchange.getRequest().getMethod()__						if (!SUPPORTED_METHODS.contains(httpMethod)) {_							return Mono.error(new MethodNotAllowedException(_									exchange.getRequest().getMethodValue(), SUPPORTED_METHODS))__						}__						_						if (exchange.checkNotModified(Instant.ofEpochMilli(resource.lastModified()))) {_							logger.trace(exchange.getLogPrefix() + "Resource not modified")__							return Mono.empty()__						}__						_						if (getCacheControl() != null) {_							String value = getCacheControl().getHeaderValue()__							if (value != null) {_								exchange.getResponse().getHeaders().setCacheControl(value)__							}_						}__						_						MediaType mediaType = MediaTypeFactory.getMediaType(resource).orElse(null)___						_						if (HttpMethod.HEAD.matches(exchange.getRequest().getMethodValue())) {_							setHeaders(exchange, resource, mediaType)__							exchange.getResponse().getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__							return Mono.empty()__						}__						setHeaders(exchange, resource, mediaType)__						ResourceHttpMessageWriter writer = getResourceHttpMessageWriter()__						Assert.state(writer != null, "No ResourceHttpMessageWriter")__						return writer.write(Mono.just(resource),_								null, ResolvableType.forClass(Resource.class), mediaType,_								exchange.getRequest(), exchange.getResponse(),_								Hints.from(Hints.LOG_PREFIX_HINT, exchange.getLogPrefix()))__					}_					catch (IOException ex) {_						return Mono.error(ex)__					}_				})__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,mono,void,handle,server,web,exchange,exchange,return,get,resource,exchange,switch,if,empty,mono,defer,logger,debug,exchange,get,log,prefix,resource,not,found,return,mono,error,new,response,status,exception,http,status,flat,map,resource,try,if,http,method,options,matches,exchange,get,request,get,method,value,exchange,get,response,get,headers,add,allow,get,head,options,return,mono,empty,http,method,http,method,exchange,get,request,get,method,if,contains,http,method,return,mono,error,new,method,not,allowed,exception,exchange,get,request,get,method,value,if,exchange,check,not,modified,instant,of,epoch,milli,resource,last,modified,logger,trace,exchange,get,log,prefix,resource,not,modified,return,mono,empty,if,get,cache,control,null,string,value,get,cache,control,get,header,value,if,value,null,exchange,get,response,get,headers,set,cache,control,value,media,type,media,type,media,type,factory,get,media,type,resource,or,else,null,if,http,method,head,matches,exchange,get,request,get,method,value,set,headers,exchange,resource,media,type,exchange,get,response,get,headers,set,http,headers,bytes,return,mono,empty,set,headers,exchange,resource,media,type,resource,http,message,writer,writer,get,resource,http,message,writer,assert,state,writer,null,no,resource,http,message,writer,return,writer,write,mono,just,resource,null,resolvable,type,for,class,resource,class,media,type,exchange,get,request,exchange,get,response,hints,from,hints,exchange,get,log,prefix,catch,ioexception,ex,return,mono,error,ex
ResourceWebHandler -> @Override 	public Mono<Void> handle(ServerWebExchange exchange);1544609805;Processes a resource request._<p>Checks for the existence of the requested resource in the configured list of locations._If the resource does not exist, a {@code 404} response will be returned to the client._If the resource exists, the request will be checked for the presence of the_{@code Last-Modified} header, and its value will be compared against the last-modified_timestamp of the given resource, returning a {@code 304} status code if the_{@code Last-Modified} value  is greater. If the resource is newer than the_{@code Last-Modified} value, or the header is not present, the content resource_of the resource will be written to the response with caching headers_set to expire one year in the future.;@Override_	public Mono<Void> handle(ServerWebExchange exchange) {_		return getResource(exchange)_				.switchIfEmpty(Mono.defer(() -> {_					logger.debug(exchange.getLogPrefix() + "Resource not found")__					return Mono.error(new ResponseStatusException(HttpStatus.NOT_FOUND))__				}))_				.flatMap(resource -> {_					try {_						if (HttpMethod.OPTIONS.matches(exchange.getRequest().getMethodValue())) {_							exchange.getResponse().getHeaders().add("Allow", "GET,HEAD,OPTIONS")__							return Mono.empty()__						}__						_						HttpMethod httpMethod = exchange.getRequest().getMethod()__						if (!SUPPORTED_METHODS.contains(httpMethod)) {_							return Mono.error(new MethodNotAllowedException(_									exchange.getRequest().getMethodValue(), SUPPORTED_METHODS))__						}__						_						if (exchange.checkNotModified(Instant.ofEpochMilli(resource.lastModified()))) {_							logger.trace(exchange.getLogPrefix() + "Resource not modified")__							return Mono.empty()__						}__						_						CacheControl cacheControl = getCacheControl()__						if (cacheControl != null) {_							exchange.getResponse().getHeaders().setCacheControl(cacheControl)__						}__						_						MediaType mediaType = MediaTypeFactory.getMediaType(resource).orElse(null)___						_						if (HttpMethod.HEAD.matches(exchange.getRequest().getMethodValue())) {_							setHeaders(exchange, resource, mediaType)__							exchange.getResponse().getHeaders().set(HttpHeaders.ACCEPT_RANGES, "bytes")__							return Mono.empty()__						}__						setHeaders(exchange, resource, mediaType)__						ResourceHttpMessageWriter writer = getResourceHttpMessageWriter()__						Assert.state(writer != null, "No ResourceHttpMessageWriter")__						return writer.write(Mono.just(resource),_								null, ResolvableType.forClass(Resource.class), mediaType,_								exchange.getRequest(), exchange.getResponse(),_								Hints.from(Hints.LOG_PREFIX_HINT, exchange.getLogPrefix()))__					}_					catch (IOException ex) {_						return Mono.error(ex)__					}_				})__	};processes,a,resource,request,p,checks,for,the,existence,of,the,requested,resource,in,the,configured,list,of,locations,if,the,resource,does,not,exist,a,code,404,response,will,be,returned,to,the,client,if,the,resource,exists,the,request,will,be,checked,for,the,presence,of,the,code,last,modified,header,and,its,value,will,be,compared,against,the,last,modified,timestamp,of,the,given,resource,returning,a,code,304,status,code,if,the,code,last,modified,value,is,greater,if,the,resource,is,newer,than,the,code,last,modified,value,or,the,header,is,not,present,the,content,resource,of,the,resource,will,be,written,to,the,response,with,caching,headers,set,to,expire,one,year,in,the,future;override,public,mono,void,handle,server,web,exchange,exchange,return,get,resource,exchange,switch,if,empty,mono,defer,logger,debug,exchange,get,log,prefix,resource,not,found,return,mono,error,new,response,status,exception,http,status,flat,map,resource,try,if,http,method,options,matches,exchange,get,request,get,method,value,exchange,get,response,get,headers,add,allow,get,head,options,return,mono,empty,http,method,http,method,exchange,get,request,get,method,if,contains,http,method,return,mono,error,new,method,not,allowed,exception,exchange,get,request,get,method,value,if,exchange,check,not,modified,instant,of,epoch,milli,resource,last,modified,logger,trace,exchange,get,log,prefix,resource,not,modified,return,mono,empty,cache,control,cache,control,get,cache,control,if,cache,control,null,exchange,get,response,get,headers,set,cache,control,cache,control,media,type,media,type,media,type,factory,get,media,type,resource,or,else,null,if,http,method,head,matches,exchange,get,request,get,method,value,set,headers,exchange,resource,media,type,exchange,get,response,get,headers,set,http,headers,bytes,return,mono,empty,set,headers,exchange,resource,media,type,resource,http,message,writer,writer,get,resource,http,message,writer,assert,state,writer,null,no,resource,http,message,writer,return,writer,write,mono,just,resource,null,resolvable,type,for,class,resource,class,media,type,exchange,get,request,exchange,get,response,hints,from,hints,exchange,get,log,prefix,catch,ioexception,ex,return,mono,error,ex
ResourceWebHandler -> public void setResourceLoader(ResourceLoader resourceLoader);1529721864;Provide the ResourceLoader to load {@link #setLocationValues(List)_location values} with._@since 5.1;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};provide,the,resource,loader,to,load,link,set,location,values,list,location,values,with,since,5,1;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
ResourceWebHandler -> public void setResourceLoader(ResourceLoader resourceLoader);1530174524;Provide the ResourceLoader to load {@link #setLocationValues(List)_location values} with._@since 5.1;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};provide,the,resource,loader,to,load,link,set,location,values,list,location,values,with,since,5,1;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
ResourceWebHandler -> public void setResourceLoader(ResourceLoader resourceLoader);1530190293;Provide the ResourceLoader to load {@link #setLocationValues(List)_location values} with._@since 5.1;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};provide,the,resource,loader,to,load,link,set,location,values,list,location,values,with,since,5,1;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
ResourceWebHandler -> public void setResourceLoader(ResourceLoader resourceLoader);1530793633;Provide the ResourceLoader to load {@link #setLocationValues(List)_location values} with._@since 5.1;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};provide,the,resource,loader,to,load,link,set,location,values,list,location,values,with,since,5,1;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
ResourceWebHandler -> public void setResourceLoader(ResourceLoader resourceLoader);1530793695;Provide the ResourceLoader to load {@link #setLocationValues(List)_location values} with._@since 5.1;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};provide,the,resource,loader,to,load,link,set,location,values,list,location,values,with,since,5,1;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
ResourceWebHandler -> public void setResourceLoader(ResourceLoader resourceLoader);1532091916;Provide the ResourceLoader to load {@link #setLocationValues(List)_location values} with._@since 5.1;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};provide,the,resource,loader,to,load,link,set,location,values,list,location,values,with,since,5,1;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
ResourceWebHandler -> public void setResourceLoader(ResourceLoader resourceLoader);1542138563;Provide the ResourceLoader to load {@link #setLocationValues(List)_location values} with._@since 5.1;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};provide,the,resource,loader,to,load,link,set,location,values,list,location,values,with,since,5,1;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
ResourceWebHandler -> public void setResourceLoader(ResourceLoader resourceLoader);1542899558;Provide the ResourceLoader to load {@link #setLocationValues(List)_location values} with._@since 5.1;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};provide,the,resource,loader,to,load,link,set,location,values,list,location,values,with,since,5,1;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
ResourceWebHandler -> public void setResourceLoader(ResourceLoader resourceLoader);1542907316;Provide the ResourceLoader to load {@link #setLocationValues(List)_location values} with._@since 5.1;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};provide,the,resource,loader,to,load,link,set,location,values,list,location,values,with,since,5,1;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
ResourceWebHandler -> public void setResourceLoader(ResourceLoader resourceLoader);1544609805;Provide the ResourceLoader to load {@link #setLocationValues(List)_location values} with._@since 5.1;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};provide,the,resource,loader,to,load,link,set,location,values,list,location,values,with,since,5,1;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
ResourceWebHandler -> public void setContentTypeResolver(CompositeContentTypeResolver contentTypeResolver);1485986572;Configure a {@link CompositeContentTypeResolver} to help determine the_media types for resources being served. If the manager contains a path_extension resolver it will be checked for registered file extension._@param contentTypeResolver the resolver in use;public void setContentTypeResolver(CompositeContentTypeResolver contentTypeResolver) {_		this.contentTypeResolver = contentTypeResolver__	};configure,a,link,composite,content,type,resolver,to,help,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,resolver,it,will,be,checked,for,registered,file,extension,param,content,type,resolver,the,resolver,in,use;public,void,set,content,type,resolver,composite,content,type,resolver,content,type,resolver,this,content,type,resolver,content,type,resolver
ResourceWebHandler -> public void setContentTypeResolver(CompositeContentTypeResolver contentTypeResolver);1490197121;Configure a {@link CompositeContentTypeResolver} to help determine the_media types for resources being served. If the manager contains a path_extension resolver it will be checked for registered file extension._@param contentTypeResolver the resolver in use;public void setContentTypeResolver(CompositeContentTypeResolver contentTypeResolver) {_		this.contentTypeResolver = contentTypeResolver__	};configure,a,link,composite,content,type,resolver,to,help,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,resolver,it,will,be,checked,for,registered,file,extension,param,content,type,resolver,the,resolver,in,use;public,void,set,content,type,resolver,composite,content,type,resolver,content,type,resolver,this,content,type,resolver,content,type,resolver
ResourceWebHandler -> public void setContentTypeResolver(CompositeContentTypeResolver contentTypeResolver);1491927184;Configure a {@link CompositeContentTypeResolver} to help determine the_media types for resources being served. If the manager contains a path_extension resolver it will be checked for registered file extension._@param contentTypeResolver the resolver in use;public void setContentTypeResolver(CompositeContentTypeResolver contentTypeResolver) {_		this.contentTypeResolver = contentTypeResolver__	};configure,a,link,composite,content,type,resolver,to,help,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,resolver,it,will,be,checked,for,registered,file,extension,param,content,type,resolver,the,resolver,in,use;public,void,set,content,type,resolver,composite,content,type,resolver,content,type,resolver,this,content,type,resolver,content,type,resolver
ResourceWebHandler -> public void setContentTypeResolver(CompositeContentTypeResolver contentTypeResolver);1492090594;Configure a {@link CompositeContentTypeResolver} to help determine the_media types for resources being served. If the manager contains a path_extension resolver it will be checked for registered file extension._@param contentTypeResolver the resolver in use;public void setContentTypeResolver(CompositeContentTypeResolver contentTypeResolver) {_		this.contentTypeResolver = contentTypeResolver__	};configure,a,link,composite,content,type,resolver,to,help,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,resolver,it,will,be,checked,for,registered,file,extension,param,content,type,resolver,the,resolver,in,use;public,void,set,content,type,resolver,composite,content,type,resolver,content,type,resolver,this,content,type,resolver,content,type,resolver
ResourceWebHandler -> public void setContentTypeResolver(CompositeContentTypeResolver contentTypeResolver);1495639183;Configure a {@link CompositeContentTypeResolver} to help determine the_media types for resources being served. If the manager contains a path_extension resolver it will be checked for registered file extension._@param contentTypeResolver the resolver in use;public void setContentTypeResolver(CompositeContentTypeResolver contentTypeResolver) {_		this.contentTypeResolver = contentTypeResolver__	};configure,a,link,composite,content,type,resolver,to,help,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,resolver,it,will,be,checked,for,registered,file,extension,param,content,type,resolver,the,resolver,in,use;public,void,set,content,type,resolver,composite,content,type,resolver,content,type,resolver,this,content,type,resolver,content,type,resolver
ResourceWebHandler -> public void setContentTypeResolver(CompositeContentTypeResolver contentTypeResolver);1495868221;Configure a {@link CompositeContentTypeResolver} to help determine the_media types for resources being served. If the manager contains a path_extension resolver it will be checked for registered file extension._@param contentTypeResolver the resolver in use;public void setContentTypeResolver(CompositeContentTypeResolver contentTypeResolver) {_		this.contentTypeResolver = contentTypeResolver__	};configure,a,link,composite,content,type,resolver,to,help,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,resolver,it,will,be,checked,for,registered,file,extension,param,content,type,resolver,the,resolver,in,use;public,void,set,content,type,resolver,composite,content,type,resolver,content,type,resolver,this,content,type,resolver,content,type,resolver
ResourceWebHandler -> public void setContentTypeResolver(CompositeContentTypeResolver contentTypeResolver);1496837955;Configure a {@link CompositeContentTypeResolver} to help determine the_media types for resources being served. If the manager contains a path_extension resolver it will be checked for registered file extension._@param contentTypeResolver the resolver in use;public void setContentTypeResolver(CompositeContentTypeResolver contentTypeResolver) {_		this.contentTypeResolver = contentTypeResolver__	};configure,a,link,composite,content,type,resolver,to,help,determine,the,media,types,for,resources,being,served,if,the,manager,contains,a,path,extension,resolver,it,will,be,checked,for,registered,file,extension,param,content,type,resolver,the,resolver,in,use;public,void,set,content,type,resolver,composite,content,type,resolver,content,type,resolver,this,content,type,resolver,content,type,resolver
ResourceWebHandler -> public List<ResourceResolver> getResourceResolvers();1485986572;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceWebHandler -> public List<ResourceResolver> getResourceResolvers();1490197121;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceWebHandler -> public List<ResourceResolver> getResourceResolvers();1491927184;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceWebHandler -> public List<ResourceResolver> getResourceResolvers();1492090594;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceWebHandler -> public List<ResourceResolver> getResourceResolvers();1495639183;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceWebHandler -> public List<ResourceResolver> getResourceResolvers();1495868221;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceWebHandler -> public List<ResourceResolver> getResourceResolvers();1496837955;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceWebHandler -> public List<ResourceResolver> getResourceResolvers();1497039338;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceWebHandler -> public List<ResourceResolver> getResourceResolvers();1498762530;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceWebHandler -> public List<ResourceResolver> getResourceResolvers();1498953917;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceWebHandler -> public List<ResourceResolver> getResourceResolvers();1500448076;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceWebHandler -> public List<ResourceResolver> getResourceResolvers();1501237594;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceWebHandler -> public List<ResourceResolver> getResourceResolvers();1507670883;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceWebHandler -> public List<ResourceResolver> getResourceResolvers();1519295386;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceWebHandler -> public List<ResourceResolver> getResourceResolvers();1521494163;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceWebHandler -> public List<ResourceResolver> getResourceResolvers();1522105242;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceWebHandler -> public List<ResourceResolver> getResourceResolvers();1527081441;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceWebHandler -> public List<ResourceResolver> getResourceResolvers();1529721864;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceWebHandler -> public List<ResourceResolver> getResourceResolvers();1530174524;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceWebHandler -> public List<ResourceResolver> getResourceResolvers();1530190293;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceWebHandler -> public List<ResourceResolver> getResourceResolvers();1530793633;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceWebHandler -> public List<ResourceResolver> getResourceResolvers();1530793695;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceWebHandler -> public List<ResourceResolver> getResourceResolvers();1532091916;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceWebHandler -> public List<ResourceResolver> getResourceResolvers();1542138563;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceWebHandler -> public List<ResourceResolver> getResourceResolvers();1542899558;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceWebHandler -> public List<ResourceResolver> getResourceResolvers();1542907316;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceWebHandler -> public List<ResourceResolver> getResourceResolvers();1544609805;Return the list of configured resource resolvers.;public List<ResourceResolver> getResourceResolvers() {_		return this.resourceResolvers__	};return,the,list,of,configured,resource,resolvers;public,list,resource,resolver,get,resource,resolvers,return,this,resource,resolvers
ResourceWebHandler -> protected MediaType getMediaType(ServerWebExchange exchange, Resource resource);1485986572;Determine the media type for the given request and the resource matched_to it. This implementation tries to determine the MediaType based on the_file extension of the Resource via_{@link PathExtensionContentTypeResolver#resolveMediaTypeForResource(Resource)}._@param exchange the current exchange_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(ServerWebExchange exchange, Resource resource) {_		return this.pathExtensionResolver.resolveMediaTypeForResource(resource)__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,tries,to,determine,the,media,type,based,on,the,file,extension,of,the,resource,via,link,path,extension,content,type,resolver,resolve,media,type,for,resource,resource,param,exchange,the,current,exchange,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,server,web,exchange,exchange,resource,resource,return,this,path,extension,resolver,resolve,media,type,for,resource,resource
ResourceWebHandler -> protected MediaType getMediaType(ServerWebExchange exchange, Resource resource);1490197121;Determine the media type for the given request and the resource matched_to it. This implementation tries to determine the MediaType based on the_file extension of the Resource via_{@link PathExtensionContentTypeResolver#resolveMediaTypeForResource(Resource)}._@param exchange the current exchange_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(ServerWebExchange exchange, Resource resource) {_		return this.pathExtensionResolver.resolveMediaTypeForResource(resource)__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,tries,to,determine,the,media,type,based,on,the,file,extension,of,the,resource,via,link,path,extension,content,type,resolver,resolve,media,type,for,resource,resource,param,exchange,the,current,exchange,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,server,web,exchange,exchange,resource,resource,return,this,path,extension,resolver,resolve,media,type,for,resource,resource
ResourceWebHandler -> protected MediaType getMediaType(ServerWebExchange exchange, Resource resource);1491927184;Determine the media type for the given request and the resource matched_to it. This implementation tries to determine the MediaType based on the_file extension of the Resource via_{@link PathExtensionContentTypeResolver#resolveMediaTypeForResource(Resource)}._@param exchange the current exchange_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(ServerWebExchange exchange, Resource resource) {_		return this.pathExtensionResolver.resolveMediaTypeForResource(resource)__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,tries,to,determine,the,media,type,based,on,the,file,extension,of,the,resource,via,link,path,extension,content,type,resolver,resolve,media,type,for,resource,resource,param,exchange,the,current,exchange,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,server,web,exchange,exchange,resource,resource,return,this,path,extension,resolver,resolve,media,type,for,resource,resource
ResourceWebHandler -> protected MediaType getMediaType(ServerWebExchange exchange, Resource resource);1492090594;Determine the media type for the given request and the resource matched_to it. This implementation tries to determine the MediaType based on the_file extension of the Resource via_{@link PathExtensionContentTypeResolver#resolveMediaTypeForResource(Resource)}._@param exchange the current exchange_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(ServerWebExchange exchange, Resource resource) {_		return this.pathExtensionResolver.resolveMediaTypeForResource(resource)__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,tries,to,determine,the,media,type,based,on,the,file,extension,of,the,resource,via,link,path,extension,content,type,resolver,resolve,media,type,for,resource,resource,param,exchange,the,current,exchange,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,server,web,exchange,exchange,resource,resource,return,this,path,extension,resolver,resolve,media,type,for,resource,resource
ResourceWebHandler -> protected MediaType getMediaType(ServerWebExchange exchange, Resource resource);1495639183;Determine the media type for the given request and the resource matched_to it. This implementation tries to determine the MediaType based on the_file extension of the Resource via_{@link PathExtensionContentTypeResolver#resolveMediaTypeForResource(Resource)}._@param exchange the current exchange_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;protected MediaType getMediaType(ServerWebExchange exchange, Resource resource) {_		return this.pathExtensionResolver.resolveMediaTypeForResource(resource)__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,tries,to,determine,the,media,type,based,on,the,file,extension,of,the,resource,via,link,path,extension,content,type,resolver,resolve,media,type,for,resource,resource,param,exchange,the,current,exchange,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;protected,media,type,get,media,type,server,web,exchange,exchange,resource,resource,return,this,path,extension,resolver,resolve,media,type,for,resource,resource
ResourceWebHandler -> protected void setHeaders(ServerWebExchange exchange, Resource resource, MediaType mediaType) 			throws IOException;1485986572;Set headers on the response. Called for both GET and HEAD requests._@param exchange current exchange_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null});protected void setHeaders(ServerWebExchange exchange, Resource resource, MediaType mediaType)_			throws IOException {__		HttpHeaders headers = exchange.getResponse().getHeaders()___		long length = resource.contentLength()__		headers.setContentLength(length)___		if (mediaType != null) {_			headers.setContentType(mediaType)__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			exchange.getResponse().getHeaders().putAll(resourceHeaders)__		}_	};set,headers,on,the,response,called,for,both,get,and,head,requests,param,exchange,current,exchange,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null;protected,void,set,headers,server,web,exchange,exchange,resource,resource,media,type,media,type,throws,ioexception,http,headers,headers,exchange,get,response,get,headers,long,length,resource,content,length,headers,set,content,length,length,if,media,type,null,headers,set,content,type,media,type,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,exchange,get,response,get,headers,put,all,resource,headers
ResourceWebHandler -> protected void setHeaders(ServerWebExchange exchange, Resource resource, MediaType mediaType) 			throws IOException;1490197121;Set headers on the response. Called for both GET and HEAD requests._@param exchange current exchange_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null});protected void setHeaders(ServerWebExchange exchange, Resource resource, MediaType mediaType)_			throws IOException {__		HttpHeaders headers = exchange.getResponse().getHeaders()___		long length = resource.contentLength()__		headers.setContentLength(length)___		if (mediaType != null) {_			headers.setContentType(mediaType)__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			exchange.getResponse().getHeaders().putAll(resourceHeaders)__		}_	};set,headers,on,the,response,called,for,both,get,and,head,requests,param,exchange,current,exchange,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null;protected,void,set,headers,server,web,exchange,exchange,resource,resource,media,type,media,type,throws,ioexception,http,headers,headers,exchange,get,response,get,headers,long,length,resource,content,length,headers,set,content,length,length,if,media,type,null,headers,set,content,type,media,type,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,exchange,get,response,get,headers,put,all,resource,headers
ResourceWebHandler -> protected void setHeaders(ServerWebExchange exchange, Resource resource, MediaType mediaType) 			throws IOException;1491927184;Set headers on the response. Called for both GET and HEAD requests._@param exchange current exchange_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null});protected void setHeaders(ServerWebExchange exchange, Resource resource, MediaType mediaType)_			throws IOException {__		HttpHeaders headers = exchange.getResponse().getHeaders()___		long length = resource.contentLength()__		headers.setContentLength(length)___		if (mediaType != null) {_			headers.setContentType(mediaType)__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			exchange.getResponse().getHeaders().putAll(resourceHeaders)__		}_	};set,headers,on,the,response,called,for,both,get,and,head,requests,param,exchange,current,exchange,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null;protected,void,set,headers,server,web,exchange,exchange,resource,resource,media,type,media,type,throws,ioexception,http,headers,headers,exchange,get,response,get,headers,long,length,resource,content,length,headers,set,content,length,length,if,media,type,null,headers,set,content,type,media,type,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,exchange,get,response,get,headers,put,all,resource,headers
ResourceWebHandler -> protected void setHeaders(ServerWebExchange exchange, Resource resource, MediaType mediaType) 			throws IOException;1492090594;Set headers on the response. Called for both GET and HEAD requests._@param exchange current exchange_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null});protected void setHeaders(ServerWebExchange exchange, Resource resource, MediaType mediaType)_			throws IOException {__		HttpHeaders headers = exchange.getResponse().getHeaders()___		long length = resource.contentLength()__		headers.setContentLength(length)___		if (mediaType != null) {_			headers.setContentType(mediaType)__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			exchange.getResponse().getHeaders().putAll(resourceHeaders)__		}_	};set,headers,on,the,response,called,for,both,get,and,head,requests,param,exchange,current,exchange,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null;protected,void,set,headers,server,web,exchange,exchange,resource,resource,media,type,media,type,throws,ioexception,http,headers,headers,exchange,get,response,get,headers,long,length,resource,content,length,headers,set,content,length,length,if,media,type,null,headers,set,content,type,media,type,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,exchange,get,response,get,headers,put,all,resource,headers
ResourceWebHandler -> protected void setHeaders(ServerWebExchange exchange, Resource resource, MediaType mediaType) 			throws IOException;1495639183;Set headers on the response. Called for both GET and HEAD requests._@param exchange current exchange_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null});protected void setHeaders(ServerWebExchange exchange, Resource resource, MediaType mediaType)_			throws IOException {__		HttpHeaders headers = exchange.getResponse().getHeaders()___		long length = resource.contentLength()__		headers.setContentLength(length)___		if (mediaType != null) {_			headers.setContentType(mediaType)__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			exchange.getResponse().getHeaders().putAll(resourceHeaders)__		}_	};set,headers,on,the,response,called,for,both,get,and,head,requests,param,exchange,current,exchange,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null;protected,void,set,headers,server,web,exchange,exchange,resource,resource,media,type,media,type,throws,ioexception,http,headers,headers,exchange,get,response,get,headers,long,length,resource,content,length,headers,set,content,length,length,if,media,type,null,headers,set,content,type,media,type,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,exchange,get,response,get,headers,put,all,resource,headers
ResourceWebHandler -> protected void setHeaders(ServerWebExchange exchange, Resource resource, MediaType mediaType) 			throws IOException;1495868221;Set headers on the response. Called for both GET and HEAD requests._@param exchange current exchange_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null});protected void setHeaders(ServerWebExchange exchange, Resource resource, MediaType mediaType)_			throws IOException {__		HttpHeaders headers = exchange.getResponse().getHeaders()___		long length = resource.contentLength()__		headers.setContentLength(length)___		if (mediaType != null) {_			headers.setContentType(mediaType)__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			exchange.getResponse().getHeaders().putAll(resourceHeaders)__		}_	};set,headers,on,the,response,called,for,both,get,and,head,requests,param,exchange,current,exchange,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null;protected,void,set,headers,server,web,exchange,exchange,resource,resource,media,type,media,type,throws,ioexception,http,headers,headers,exchange,get,response,get,headers,long,length,resource,content,length,headers,set,content,length,length,if,media,type,null,headers,set,content,type,media,type,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,exchange,get,response,get,headers,put,all,resource,headers
ResourceWebHandler -> public List<Resource> getLocations();1485986572;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceWebHandler -> public List<Resource> getLocations();1490197121;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceWebHandler -> public List<Resource> getLocations();1491927184;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceWebHandler -> public List<Resource> getLocations();1492090594;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceWebHandler -> public List<Resource> getLocations();1495639183;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceWebHandler -> public List<Resource> getLocations();1495868221;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceWebHandler -> public List<Resource> getLocations();1496837955;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceWebHandler -> public List<Resource> getLocations();1497039338;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceWebHandler -> public List<Resource> getLocations();1498762530;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceWebHandler -> public List<Resource> getLocations();1498953917;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceWebHandler -> public List<Resource> getLocations();1500448076;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceWebHandler -> public List<Resource> getLocations();1501237594;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceWebHandler -> public List<Resource> getLocations();1507670883;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceWebHandler -> public List<Resource> getLocations();1519295386;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceWebHandler -> public List<Resource> getLocations();1521494163;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceWebHandler -> public List<Resource> getLocations();1522105242;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceWebHandler -> public List<Resource> getLocations();1527081441;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources.;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources;public,list,resource,get,locations,return,this,locations
ResourceWebHandler -> public List<Resource> getLocations();1529721864;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources._<p>Note that if {@link #setLocationValues(List) locationValues} are provided,_instead of loaded Resource-based locations, this method will return_empty until after initialization via {@link #afterPropertiesSet()}._@see #setLocationValues_@see #setLocations;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources,p,note,that,if,link,set,location,values,list,location,values,are,provided,instead,of,loaded,resource,based,locations,this,method,will,return,empty,until,after,initialization,via,link,after,properties,set,see,set,location,values,see,set,locations;public,list,resource,get,locations,return,this,locations
ResourceWebHandler -> public List<Resource> getLocations();1530174524;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources._<p>Note that if {@link #setLocationValues(List) locationValues} are provided,_instead of loaded Resource-based locations, this method will return_empty until after initialization via {@link #afterPropertiesSet()}._@see #setLocationValues_@see #setLocations;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources,p,note,that,if,link,set,location,values,list,location,values,are,provided,instead,of,loaded,resource,based,locations,this,method,will,return,empty,until,after,initialization,via,link,after,properties,set,see,set,location,values,see,set,locations;public,list,resource,get,locations,return,this,locations
ResourceWebHandler -> public List<Resource> getLocations();1530190293;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources._<p>Note that if {@link #setLocationValues(List) locationValues} are provided,_instead of loaded Resource-based locations, this method will return_empty until after initialization via {@link #afterPropertiesSet()}._@see #setLocationValues_@see #setLocations;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources,p,note,that,if,link,set,location,values,list,location,values,are,provided,instead,of,loaded,resource,based,locations,this,method,will,return,empty,until,after,initialization,via,link,after,properties,set,see,set,location,values,see,set,locations;public,list,resource,get,locations,return,this,locations
ResourceWebHandler -> public List<Resource> getLocations();1530793633;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources._<p>Note that if {@link #setLocationValues(List) locationValues} are provided,_instead of loaded Resource-based locations, this method will return_empty until after initialization via {@link #afterPropertiesSet()}._@see #setLocationValues_@see #setLocations;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources,p,note,that,if,link,set,location,values,list,location,values,are,provided,instead,of,loaded,resource,based,locations,this,method,will,return,empty,until,after,initialization,via,link,after,properties,set,see,set,location,values,see,set,locations;public,list,resource,get,locations,return,this,locations
ResourceWebHandler -> public List<Resource> getLocations();1530793695;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources._<p>Note that if {@link #setLocationValues(List) locationValues} are provided,_instead of loaded Resource-based locations, this method will return_empty until after initialization via {@link #afterPropertiesSet()}._@see #setLocationValues_@see #setLocations;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources,p,note,that,if,link,set,location,values,list,location,values,are,provided,instead,of,loaded,resource,based,locations,this,method,will,return,empty,until,after,initialization,via,link,after,properties,set,see,set,location,values,see,set,locations;public,list,resource,get,locations,return,this,locations
ResourceWebHandler -> public List<Resource> getLocations();1532091916;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources._<p>Note that if {@link #setLocationValues(List) locationValues} are provided,_instead of loaded Resource-based locations, this method will return_empty until after initialization via {@link #afterPropertiesSet()}._@see #setLocationValues_@see #setLocations;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources,p,note,that,if,link,set,location,values,list,location,values,are,provided,instead,of,loaded,resource,based,locations,this,method,will,return,empty,until,after,initialization,via,link,after,properties,set,see,set,location,values,see,set,locations;public,list,resource,get,locations,return,this,locations
ResourceWebHandler -> public List<Resource> getLocations();1542138563;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources._<p>Note that if {@link #setLocationValues(List) locationValues} are provided,_instead of loaded Resource-based locations, this method will return_empty until after initialization via {@link #afterPropertiesSet()}._@see #setLocationValues_@see #setLocations;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources,p,note,that,if,link,set,location,values,list,location,values,are,provided,instead,of,loaded,resource,based,locations,this,method,will,return,empty,until,after,initialization,via,link,after,properties,set,see,set,location,values,see,set,locations;public,list,resource,get,locations,return,this,locations
ResourceWebHandler -> public List<Resource> getLocations();1542899558;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources._<p>Note that if {@link #setLocationValues(List) locationValues} are provided,_instead of loaded Resource-based locations, this method will return_empty until after initialization via {@link #afterPropertiesSet()}._@see #setLocationValues_@see #setLocations;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources,p,note,that,if,link,set,location,values,list,location,values,are,provided,instead,of,loaded,resource,based,locations,this,method,will,return,empty,until,after,initialization,via,link,after,properties,set,see,set,location,values,see,set,locations;public,list,resource,get,locations,return,this,locations
ResourceWebHandler -> public List<Resource> getLocations();1542907316;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources._<p>Note that if {@link #setLocationValues(List) locationValues} are provided,_instead of loaded Resource-based locations, this method will return_empty until after initialization via {@link #afterPropertiesSet()}._@see #setLocationValues_@see #setLocations;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources,p,note,that,if,link,set,location,values,list,location,values,are,provided,instead,of,loaded,resource,based,locations,this,method,will,return,empty,until,after,initialization,via,link,after,properties,set,see,set,location,values,see,set,locations;public,list,resource,get,locations,return,this,locations
ResourceWebHandler -> public List<Resource> getLocations();1544609805;Return the {@code List} of {@code Resource} paths to use as sources_for serving static resources._<p>Note that if {@link #setLocationValues(List) locationValues} are provided,_instead of loaded Resource-based locations, this method will return_empty until after initialization via {@link #afterPropertiesSet()}._@see #setLocationValues_@see #setLocations;public List<Resource> getLocations() {_		return this.locations__	};return,the,code,list,of,code,resource,paths,to,use,as,sources,for,serving,static,resources,p,note,that,if,link,set,location,values,list,location,values,are,provided,instead,of,loaded,resource,based,locations,this,method,will,return,empty,until,after,initialization,via,link,after,properties,set,see,set,location,values,see,set,locations;public,list,resource,get,locations,return,this,locations
ResourceWebHandler -> public void setLocationValues(List<String> locationValues);1529721864;Accepts a list of String-based location values to be resolved into_{@link Resource} locations._@since 5.1;public void setLocationValues(List<String> locationValues) {_		Assert.notNull(locationValues, "Location values list must not be null")__		this.locationValues.clear()__		this.locationValues.addAll(locationValues)__	};accepts,a,list,of,string,based,location,values,to,be,resolved,into,link,resource,locations,since,5,1;public,void,set,location,values,list,string,location,values,assert,not,null,location,values,location,values,list,must,not,be,null,this,location,values,clear,this,location,values,add,all,location,values
ResourceWebHandler -> public void setLocationValues(List<String> locationValues);1530174524;Accepts a list of String-based location values to be resolved into_{@link Resource} locations._@since 5.1;public void setLocationValues(List<String> locationValues) {_		Assert.notNull(locationValues, "Location values list must not be null")__		this.locationValues.clear()__		this.locationValues.addAll(locationValues)__	};accepts,a,list,of,string,based,location,values,to,be,resolved,into,link,resource,locations,since,5,1;public,void,set,location,values,list,string,location,values,assert,not,null,location,values,location,values,list,must,not,be,null,this,location,values,clear,this,location,values,add,all,location,values
ResourceWebHandler -> public void setLocationValues(List<String> locationValues);1530190293;Accepts a list of String-based location values to be resolved into_{@link Resource} locations._@since 5.1;public void setLocationValues(List<String> locationValues) {_		Assert.notNull(locationValues, "Location values list must not be null")__		this.locationValues.clear()__		this.locationValues.addAll(locationValues)__	};accepts,a,list,of,string,based,location,values,to,be,resolved,into,link,resource,locations,since,5,1;public,void,set,location,values,list,string,location,values,assert,not,null,location,values,location,values,list,must,not,be,null,this,location,values,clear,this,location,values,add,all,location,values
ResourceWebHandler -> public void setLocationValues(List<String> locationValues);1530793633;Accepts a list of String-based location values to be resolved into_{@link Resource} locations._@since 5.1;public void setLocationValues(List<String> locationValues) {_		Assert.notNull(locationValues, "Location values list must not be null")__		this.locationValues.clear()__		this.locationValues.addAll(locationValues)__	};accepts,a,list,of,string,based,location,values,to,be,resolved,into,link,resource,locations,since,5,1;public,void,set,location,values,list,string,location,values,assert,not,null,location,values,location,values,list,must,not,be,null,this,location,values,clear,this,location,values,add,all,location,values
ResourceWebHandler -> public void setLocationValues(List<String> locationValues);1530793695;Accepts a list of String-based location values to be resolved into_{@link Resource} locations._@since 5.1;public void setLocationValues(List<String> locationValues) {_		Assert.notNull(locationValues, "Location values list must not be null")__		this.locationValues.clear()__		this.locationValues.addAll(locationValues)__	};accepts,a,list,of,string,based,location,values,to,be,resolved,into,link,resource,locations,since,5,1;public,void,set,location,values,list,string,location,values,assert,not,null,location,values,location,values,list,must,not,be,null,this,location,values,clear,this,location,values,add,all,location,values
ResourceWebHandler -> public void setLocationValues(List<String> locationValues);1532091916;Accepts a list of String-based location values to be resolved into_{@link Resource} locations._@since 5.1;public void setLocationValues(List<String> locationValues) {_		Assert.notNull(locationValues, "Location values list must not be null")__		this.locationValues.clear()__		this.locationValues.addAll(locationValues)__	};accepts,a,list,of,string,based,location,values,to,be,resolved,into,link,resource,locations,since,5,1;public,void,set,location,values,list,string,location,values,assert,not,null,location,values,location,values,list,must,not,be,null,this,location,values,clear,this,location,values,add,all,location,values
ResourceWebHandler -> public void setLocationValues(List<String> locationValues);1542138563;Accepts a list of String-based location values to be resolved into_{@link Resource} locations._@since 5.1;public void setLocationValues(List<String> locationValues) {_		Assert.notNull(locationValues, "Location values list must not be null")__		this.locationValues.clear()__		this.locationValues.addAll(locationValues)__	};accepts,a,list,of,string,based,location,values,to,be,resolved,into,link,resource,locations,since,5,1;public,void,set,location,values,list,string,location,values,assert,not,null,location,values,location,values,list,must,not,be,null,this,location,values,clear,this,location,values,add,all,location,values
ResourceWebHandler -> public void setLocationValues(List<String> locationValues);1542899558;Accepts a list of String-based location values to be resolved into_{@link Resource} locations._@since 5.1;public void setLocationValues(List<String> locationValues) {_		Assert.notNull(locationValues, "Location values list must not be null")__		this.locationValues.clear()__		this.locationValues.addAll(locationValues)__	};accepts,a,list,of,string,based,location,values,to,be,resolved,into,link,resource,locations,since,5,1;public,void,set,location,values,list,string,location,values,assert,not,null,location,values,location,values,list,must,not,be,null,this,location,values,clear,this,location,values,add,all,location,values
ResourceWebHandler -> public void setLocationValues(List<String> locationValues);1542907316;Accepts a list of String-based location values to be resolved into_{@link Resource} locations._@since 5.1;public void setLocationValues(List<String> locationValues) {_		Assert.notNull(locationValues, "Location values list must not be null")__		this.locationValues.clear()__		this.locationValues.addAll(locationValues)__	};accepts,a,list,of,string,based,location,values,to,be,resolved,into,link,resource,locations,since,5,1;public,void,set,location,values,list,string,location,values,assert,not,null,location,values,location,values,list,must,not,be,null,this,location,values,clear,this,location,values,add,all,location,values
ResourceWebHandler -> public void setLocationValues(List<String> locationValues);1544609805;Accepts a list of String-based location values to be resolved into_{@link Resource} locations._@since 5.1;public void setLocationValues(List<String> locationValues) {_		Assert.notNull(locationValues, "Location values list must not be null")__		this.locationValues.clear()__		this.locationValues.addAll(locationValues)__	};accepts,a,list,of,string,based,location,values,to,be,resolved,into,link,resource,locations,since,5,1;public,void,set,location,values,list,string,location,values,assert,not,null,location,values,location,values,list,must,not,be,null,this,location,values,clear,this,location,values,add,all,location,values
ResourceWebHandler -> public void setCacheControl(@Nullable CacheControl cacheControl);1500448076;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;public void setCacheControl(@Nullable CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;public,void,set,cache,control,nullable,cache,control,cache,control,this,cache,control,cache,control
ResourceWebHandler -> public void setCacheControl(@Nullable CacheControl cacheControl);1501237594;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;public void setCacheControl(@Nullable CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;public,void,set,cache,control,nullable,cache,control,cache,control,this,cache,control,cache,control
ResourceWebHandler -> public void setCacheControl(@Nullable CacheControl cacheControl);1507670883;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;public void setCacheControl(@Nullable CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;public,void,set,cache,control,nullable,cache,control,cache,control,this,cache,control,cache,control
ResourceWebHandler -> public void setCacheControl(@Nullable CacheControl cacheControl);1519295386;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;public void setCacheControl(@Nullable CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;public,void,set,cache,control,nullable,cache,control,cache,control,this,cache,control,cache,control
ResourceWebHandler -> public void setCacheControl(@Nullable CacheControl cacheControl);1521494163;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;public void setCacheControl(@Nullable CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;public,void,set,cache,control,nullable,cache,control,cache,control,this,cache,control,cache,control
ResourceWebHandler -> public void setCacheControl(@Nullable CacheControl cacheControl);1522105242;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;public void setCacheControl(@Nullable CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;public,void,set,cache,control,nullable,cache,control,cache,control,this,cache,control,cache,control
ResourceWebHandler -> public void setCacheControl(@Nullable CacheControl cacheControl);1527081441;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;public void setCacheControl(@Nullable CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;public,void,set,cache,control,nullable,cache,control,cache,control,this,cache,control,cache,control
ResourceWebHandler -> public void setCacheControl(@Nullable CacheControl cacheControl);1529721864;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;public void setCacheControl(@Nullable CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;public,void,set,cache,control,nullable,cache,control,cache,control,this,cache,control,cache,control
ResourceWebHandler -> public void setCacheControl(@Nullable CacheControl cacheControl);1530174524;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;public void setCacheControl(@Nullable CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;public,void,set,cache,control,nullable,cache,control,cache,control,this,cache,control,cache,control
ResourceWebHandler -> public void setCacheControl(@Nullable CacheControl cacheControl);1530190293;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;public void setCacheControl(@Nullable CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;public,void,set,cache,control,nullable,cache,control,cache,control,this,cache,control,cache,control
ResourceWebHandler -> public void setCacheControl(@Nullable CacheControl cacheControl);1530793633;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;public void setCacheControl(@Nullable CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;public,void,set,cache,control,nullable,cache,control,cache,control,this,cache,control,cache,control
ResourceWebHandler -> public void setCacheControl(@Nullable CacheControl cacheControl);1530793695;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;public void setCacheControl(@Nullable CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;public,void,set,cache,control,nullable,cache,control,cache,control,this,cache,control,cache,control
ResourceWebHandler -> public void setCacheControl(@Nullable CacheControl cacheControl);1532091916;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;public void setCacheControl(@Nullable CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;public,void,set,cache,control,nullable,cache,control,cache,control,this,cache,control,cache,control
ResourceWebHandler -> public void setCacheControl(@Nullable CacheControl cacheControl);1542138563;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;public void setCacheControl(@Nullable CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;public,void,set,cache,control,nullable,cache,control,cache,control,this,cache,control,cache,control
ResourceWebHandler -> public void setCacheControl(@Nullable CacheControl cacheControl);1542899558;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;public void setCacheControl(@Nullable CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;public,void,set,cache,control,nullable,cache,control,cache,control,this,cache,control,cache,control
ResourceWebHandler -> public void setCacheControl(@Nullable CacheControl cacheControl);1542907316;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;public void setCacheControl(@Nullable CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;public,void,set,cache,control,nullable,cache,control,cache,control,this,cache,control,cache,control
ResourceWebHandler -> public void setCacheControl(@Nullable CacheControl cacheControl);1544609805;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;public void setCacheControl(@Nullable CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;public,void,set,cache,control,nullable,cache,control,cache,control,this,cache,control,cache,control
ResourceWebHandler -> public List<String> getLocationValues();1529721864;Return the configured location values._@since 5.1;public List<String> getLocationValues() {_		return this.locationValues__	};return,the,configured,location,values,since,5,1;public,list,string,get,location,values,return,this,location,values
ResourceWebHandler -> public List<String> getLocationValues();1530174524;Return the configured location values._@since 5.1;public List<String> getLocationValues() {_		return this.locationValues__	};return,the,configured,location,values,since,5,1;public,list,string,get,location,values,return,this,location,values
ResourceWebHandler -> public List<String> getLocationValues();1530190293;Return the configured location values._@since 5.1;public List<String> getLocationValues() {_		return this.locationValues__	};return,the,configured,location,values,since,5,1;public,list,string,get,location,values,return,this,location,values
ResourceWebHandler -> public List<String> getLocationValues();1530793633;Return the configured location values._@since 5.1;public List<String> getLocationValues() {_		return this.locationValues__	};return,the,configured,location,values,since,5,1;public,list,string,get,location,values,return,this,location,values
ResourceWebHandler -> public List<String> getLocationValues();1530793695;Return the configured location values._@since 5.1;public List<String> getLocationValues() {_		return this.locationValues__	};return,the,configured,location,values,since,5,1;public,list,string,get,location,values,return,this,location,values
ResourceWebHandler -> public List<String> getLocationValues();1532091916;Return the configured location values._@since 5.1;public List<String> getLocationValues() {_		return this.locationValues__	};return,the,configured,location,values,since,5,1;public,list,string,get,location,values,return,this,location,values
ResourceWebHandler -> public List<String> getLocationValues();1542138563;Return the configured location values._@since 5.1;public List<String> getLocationValues() {_		return this.locationValues__	};return,the,configured,location,values,since,5,1;public,list,string,get,location,values,return,this,location,values
ResourceWebHandler -> public List<String> getLocationValues();1542899558;Return the configured location values._@since 5.1;public List<String> getLocationValues() {_		return this.locationValues__	};return,the,configured,location,values,since,5,1;public,list,string,get,location,values,return,this,location,values
ResourceWebHandler -> public List<String> getLocationValues();1542907316;Return the configured location values._@since 5.1;public List<String> getLocationValues() {_		return this.locationValues__	};return,the,configured,location,values,since,5,1;public,list,string,get,location,values,return,this,location,values
ResourceWebHandler -> public List<String> getLocationValues();1544609805;Return the configured location values._@since 5.1;public List<String> getLocationValues() {_		return this.locationValues__	};return,the,configured,location,values,since,5,1;public,list,string,get,location,values,return,this,location,values
ResourceWebHandler -> @Nullable 	public CacheControl getCacheControl();1496837955;Return the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;@Nullable_	public CacheControl getCacheControl() {_		return this.cacheControl__	};return,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;nullable,public,cache,control,get,cache,control,return,this,cache,control
ResourceWebHandler -> @Nullable 	public CacheControl getCacheControl();1497039338;Return the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;@Nullable_	public CacheControl getCacheControl() {_		return this.cacheControl__	};return,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;nullable,public,cache,control,get,cache,control,return,this,cache,control
ResourceWebHandler -> @Nullable 	public CacheControl getCacheControl();1498762530;Return the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;@Nullable_	public CacheControl getCacheControl() {_		return this.cacheControl__	};return,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;nullable,public,cache,control,get,cache,control,return,this,cache,control
ResourceWebHandler -> @Nullable 	public CacheControl getCacheControl();1498953917;Return the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;@Nullable_	public CacheControl getCacheControl() {_		return this.cacheControl__	};return,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;nullable,public,cache,control,get,cache,control,return,this,cache,control
ResourceWebHandler -> @Nullable 	public CacheControl getCacheControl();1500448076;Return the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;@Nullable_	public CacheControl getCacheControl() {_		return this.cacheControl__	};return,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;nullable,public,cache,control,get,cache,control,return,this,cache,control
ResourceWebHandler -> @Nullable 	public CacheControl getCacheControl();1501237594;Return the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;@Nullable_	public CacheControl getCacheControl() {_		return this.cacheControl__	};return,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;nullable,public,cache,control,get,cache,control,return,this,cache,control
ResourceWebHandler -> @Nullable 	public CacheControl getCacheControl();1507670883;Return the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;@Nullable_	public CacheControl getCacheControl() {_		return this.cacheControl__	};return,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;nullable,public,cache,control,get,cache,control,return,this,cache,control
ResourceWebHandler -> @Nullable 	public CacheControl getCacheControl();1519295386;Return the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;@Nullable_	public CacheControl getCacheControl() {_		return this.cacheControl__	};return,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;nullable,public,cache,control,get,cache,control,return,this,cache,control
ResourceWebHandler -> @Nullable 	public CacheControl getCacheControl();1521494163;Return the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;@Nullable_	public CacheControl getCacheControl() {_		return this.cacheControl__	};return,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;nullable,public,cache,control,get,cache,control,return,this,cache,control
ResourceWebHandler -> @Nullable 	public CacheControl getCacheControl();1522105242;Return the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;@Nullable_	public CacheControl getCacheControl() {_		return this.cacheControl__	};return,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;nullable,public,cache,control,get,cache,control,return,this,cache,control
ResourceWebHandler -> @Nullable 	public CacheControl getCacheControl();1527081441;Return the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;@Nullable_	public CacheControl getCacheControl() {_		return this.cacheControl__	};return,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;nullable,public,cache,control,get,cache,control,return,this,cache,control
ResourceWebHandler -> @Nullable 	public CacheControl getCacheControl();1529721864;Return the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;@Nullable_	public CacheControl getCacheControl() {_		return this.cacheControl__	};return,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;nullable,public,cache,control,get,cache,control,return,this,cache,control
ResourceWebHandler -> @Nullable 	public CacheControl getCacheControl();1530174524;Return the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;@Nullable_	public CacheControl getCacheControl() {_		return this.cacheControl__	};return,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;nullable,public,cache,control,get,cache,control,return,this,cache,control
ResourceWebHandler -> @Nullable 	public CacheControl getCacheControl();1530190293;Return the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;@Nullable_	public CacheControl getCacheControl() {_		return this.cacheControl__	};return,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;nullable,public,cache,control,get,cache,control,return,this,cache,control
ResourceWebHandler -> @Nullable 	public CacheControl getCacheControl();1530793633;Return the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;@Nullable_	public CacheControl getCacheControl() {_		return this.cacheControl__	};return,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;nullable,public,cache,control,get,cache,control,return,this,cache,control
ResourceWebHandler -> @Nullable 	public CacheControl getCacheControl();1530793695;Return the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;@Nullable_	public CacheControl getCacheControl() {_		return this.cacheControl__	};return,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;nullable,public,cache,control,get,cache,control,return,this,cache,control
ResourceWebHandler -> @Nullable 	public CacheControl getCacheControl();1532091916;Return the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;@Nullable_	public CacheControl getCacheControl() {_		return this.cacheControl__	};return,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;nullable,public,cache,control,get,cache,control,return,this,cache,control
ResourceWebHandler -> @Nullable 	public CacheControl getCacheControl();1542138563;Return the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;@Nullable_	public CacheControl getCacheControl() {_		return this.cacheControl__	};return,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;nullable,public,cache,control,get,cache,control,return,this,cache,control
ResourceWebHandler -> @Nullable 	public CacheControl getCacheControl();1542899558;Return the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;@Nullable_	public CacheControl getCacheControl() {_		return this.cacheControl__	};return,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;nullable,public,cache,control,get,cache,control,return,this,cache,control
ResourceWebHandler -> @Nullable 	public CacheControl getCacheControl();1542907316;Return the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;@Nullable_	public CacheControl getCacheControl() {_		return this.cacheControl__	};return,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;nullable,public,cache,control,get,cache,control,return,this,cache,control
ResourceWebHandler -> @Nullable 	public CacheControl getCacheControl();1544609805;Return the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;@Nullable_	public CacheControl getCacheControl() {_		return this.cacheControl__	};return,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;nullable,public,cache,control,get,cache,control,return,this,cache,control
ResourceWebHandler -> public void setCacheControl(CacheControl cacheControl);1485986572;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;public void setCacheControl(CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;public,void,set,cache,control,cache,control,cache,control,this,cache,control,cache,control
ResourceWebHandler -> public void setCacheControl(CacheControl cacheControl);1490197121;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;public void setCacheControl(CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;public,void,set,cache,control,cache,control,cache,control,this,cache,control,cache,control
ResourceWebHandler -> public void setCacheControl(CacheControl cacheControl);1491927184;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;public void setCacheControl(CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;public,void,set,cache,control,cache,control,cache,control,this,cache,control,cache,control
ResourceWebHandler -> public void setCacheControl(CacheControl cacheControl);1492090594;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;public void setCacheControl(CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;public,void,set,cache,control,cache,control,cache,control,this,cache,control,cache,control
ResourceWebHandler -> public void setCacheControl(CacheControl cacheControl);1495639183;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;public void setCacheControl(CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;public,void,set,cache,control,cache,control,cache,control,this,cache,control,cache,control
ResourceWebHandler -> public void setCacheControl(CacheControl cacheControl);1495868221;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;public void setCacheControl(CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;public,void,set,cache,control,cache,control,cache,control,this,cache,control,cache,control
ResourceWebHandler -> public void setCacheControl(CacheControl cacheControl);1496837955;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;public void setCacheControl(CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;public,void,set,cache,control,cache,control,cache,control,this,cache,control,cache,control
ResourceWebHandler -> public void setCacheControl(CacheControl cacheControl);1497039338;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;public void setCacheControl(CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;public,void,set,cache,control,cache,control,cache,control,this,cache,control,cache,control
ResourceWebHandler -> public void setCacheControl(CacheControl cacheControl);1498762530;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;public void setCacheControl(CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;public,void,set,cache,control,cache,control,cache,control,this,cache,control,cache,control
ResourceWebHandler -> public void setCacheControl(CacheControl cacheControl);1498953917;Set the {@link org.springframework.http.CacheControl} instance to build_the Cache-Control HTTP response header.;public void setCacheControl(CacheControl cacheControl) {_		this.cacheControl = cacheControl__	};set,the,link,org,springframework,http,cache,control,instance,to,build,the,cache,control,http,response,header;public,void,set,cache,control,cache,control,cache,control,this,cache,control,cache,control
ResourceWebHandler -> protected boolean isInvalidPath(String path);1485986572;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link StringUtils#cleanPath}._<li>Paths that represent a {@link ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,string,utils,clean,path,li,paths,that,represent,a,link,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceWebHandler -> protected boolean isInvalidPath(String path);1490197121;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link StringUtils#cleanPath}._<li>Paths that represent a {@link ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,string,utils,clean,path,li,paths,that,represent,a,link,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceWebHandler -> protected boolean isInvalidPath(String path);1491927184;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link StringUtils#cleanPath}._<li>Paths that represent a {@link ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,string,utils,clean,path,li,paths,that,represent,a,link,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceWebHandler -> protected boolean isInvalidPath(String path);1492090594;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link StringUtils#cleanPath}._<li>Paths that represent a {@link ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,string,utils,clean,path,li,paths,that,represent,a,link,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceWebHandler -> protected boolean isInvalidPath(String path);1495639183;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link StringUtils#cleanPath}._<li>Paths that represent a {@link ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,string,utils,clean,path,li,paths,that,represent,a,link,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceWebHandler -> protected boolean isInvalidPath(String path);1495868221;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link StringUtils#cleanPath}._<li>Paths that represent a {@link ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,string,utils,clean,path,li,paths,that,represent,a,link,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceWebHandler -> protected boolean isInvalidPath(String path);1496837955;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link StringUtils#cleanPath}._<li>Paths that represent a {@link ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,string,utils,clean,path,li,paths,that,represent,a,link,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceWebHandler -> protected boolean isInvalidPath(String path);1497039338;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link StringUtils#cleanPath}._<li>Paths that represent a {@link ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,string,utils,clean,path,li,paths,that,represent,a,link,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceWebHandler -> protected boolean isInvalidPath(String path);1498762530;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link StringUtils#cleanPath}._<li>Paths that represent a {@link ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,string,utils,clean,path,li,paths,that,represent,a,link,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceWebHandler -> protected boolean isInvalidPath(String path);1498953917;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link StringUtils#cleanPath}._<li>Paths that represent a {@link ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,string,utils,clean,path,li,paths,that,represent,a,link,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceWebHandler -> protected boolean isInvalidPath(String path);1500448076;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link StringUtils#cleanPath}._<li>Paths that represent a {@link ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,string,utils,clean,path,li,paths,that,represent,a,link,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceWebHandler -> protected boolean isInvalidPath(String path);1501237594;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link StringUtils#cleanPath}._<li>Paths that represent a {@link ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,string,utils,clean,path,li,paths,that,represent,a,link,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceWebHandler -> protected boolean isInvalidPath(String path);1507670883;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link StringUtils#cleanPath}._<li>Paths that represent a {@link ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,string,utils,clean,path,li,paths,that,represent,a,link,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceWebHandler -> protected boolean isInvalidPath(String path);1519295386;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link StringUtils#cleanPath}._<li>Paths that represent a {@link ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,string,utils,clean,path,li,paths,that,represent,a,link,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceWebHandler -> protected boolean isInvalidPath(String path);1521494163;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link StringUtils#cleanPath}._<li>Paths that represent a {@link ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,string,utils,clean,path,li,paths,that,represent,a,link,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceWebHandler -> protected boolean isInvalidPath(String path);1522105242;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link StringUtils#cleanPath}._<li>Paths that represent a {@link ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,string,utils,clean,path,li,paths,that,represent,a,link,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceWebHandler -> protected boolean isInvalidPath(String path);1527081441;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link StringUtils#cleanPath}._<li>Paths that represent a {@link ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (logger.isTraceEnabled()) {_			logger.trace("Applying \"invalid path\" checks to path: " + path)__		}_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isTraceEnabled()) {_				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path represents URL or has \"url:\" prefix.")__				}_				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				if (logger.isTraceEnabled()) {_					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.")__				}_				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,string,utils,clean,path,li,paths,that,represent,a,link,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,logger,is,trace,enabled,logger,trace,applying,invalid,path,checks,to,path,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,trace,enabled,logger,trace,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,trace,enabled,logger,trace,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,if,logger,is,trace,enabled,logger,trace,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceWebHandler -> protected boolean isInvalidPath(String path);1529721864;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link StringUtils#cleanPath}._<li>Paths that represent a {@link ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			logger.warn("Path contains \"WEB-INF\" or \"META-INF\".")__			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				logger.warn("Path represents URL or has \"url:\" prefix.")__				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				logger.warn("Path contains \"../\" after call to StringUtils#cleanPath.")__				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,string,utils,clean,path,li,paths,that,represent,a,link,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,path,contains,web,inf,path,contains,meta,inf,logger,warn,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,logger,warn,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,logger,warn,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceWebHandler -> protected boolean isInvalidPath(String path);1530174524;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link StringUtils#cleanPath}._<li>Paths that represent a {@link ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			logger.warn("Path contains \"WEB-INF\" or \"META-INF\".")__			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				logger.warn("Path represents URL or has \"url:\" prefix.")__				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				logger.warn("Path contains \"../\" after call to StringUtils#cleanPath.")__				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,string,utils,clean,path,li,paths,that,represent,a,link,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,path,contains,web,inf,path,contains,meta,inf,logger,warn,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,logger,warn,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,logger,warn,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceWebHandler -> protected boolean isInvalidPath(String path);1530190293;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link StringUtils#cleanPath}._<li>Paths that represent a {@link ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			logger.warn("Path contains \"WEB-INF\" or \"META-INF\".")__			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				logger.warn("Path represents URL or has \"url:\" prefix.")__				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				logger.warn("Path contains \"../\" after call to StringUtils#cleanPath.")__				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,string,utils,clean,path,li,paths,that,represent,a,link,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,path,contains,web,inf,path,contains,meta,inf,logger,warn,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,logger,warn,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,logger,warn,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceWebHandler -> protected boolean isInvalidPath(String path);1530793633;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link StringUtils#cleanPath}._<li>Paths that represent a {@link ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			logger.warn("Path contains \"WEB-INF\" or \"META-INF\".")__			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				logger.warn("Path represents URL or has \"url:\" prefix.")__				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				logger.warn("Path contains \"../\" after call to StringUtils#cleanPath.")__				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,string,utils,clean,path,li,paths,that,represent,a,link,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,path,contains,web,inf,path,contains,meta,inf,logger,warn,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,logger,warn,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,logger,warn,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceWebHandler -> protected boolean isInvalidPath(String path);1530793695;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link StringUtils#cleanPath}._<li>Paths that represent a {@link ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			logger.warn("Path contains \"WEB-INF\" or \"META-INF\".")__			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				logger.warn("Path represents URL or has \"url:\" prefix.")__				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				logger.warn("Path contains \"../\" after call to StringUtils#cleanPath.")__				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,string,utils,clean,path,li,paths,that,represent,a,link,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,path,contains,web,inf,path,contains,meta,inf,logger,warn,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,logger,warn,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,logger,warn,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceWebHandler -> protected boolean isInvalidPath(String path);1532091916;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link StringUtils#cleanPath}._<li>Paths that represent a {@link ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			logger.warn("Path contains \"WEB-INF\" or \"META-INF\".")__			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				logger.warn("Path represents URL or has \"url:\" prefix.")__				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				logger.warn("Path contains \"../\" after call to StringUtils#cleanPath.")__				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,string,utils,clean,path,li,paths,that,represent,a,link,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,path,contains,web,inf,path,contains,meta,inf,logger,warn,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,logger,warn,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,logger,warn,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceWebHandler -> protected boolean isInvalidPath(String path);1542138563;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link StringUtils#cleanPath}._<li>Paths that represent a {@link ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			logger.warn("Path contains \"WEB-INF\" or \"META-INF\".")__			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				logger.warn("Path represents URL or has \"url:\" prefix.")__				return true__			}_		}_		if (path.contains("..")) {_			path = StringUtils.cleanPath(path)__			if (path.contains("../")) {_				logger.warn("Path contains \"../\" after call to StringUtils#cleanPath.")__				return true__			}_		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,string,utils,clean,path,li,paths,that,represent,a,link,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,path,contains,web,inf,path,contains,meta,inf,logger,warn,path,contains,web,inf,or,meta,inf,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,logger,warn,path,represents,url,or,has,url,prefix,return,true,if,path,contains,path,string,utils,clean,path,path,if,path,contains,logger,warn,path,contains,after,call,to,string,utils,clean,path,return,true,return,false
ResourceWebHandler -> protected boolean isInvalidPath(String path);1542899558;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link StringUtils#cleanPath}._<li>Paths that represent a {@link ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			logger.warn("Path with \"WEB-INF\" or \"META-INF\": [" + path + "]")__			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				logger.warn("Path represents URL or has \"url:\" prefix: [" + path + "]")__				return true__			}_		}_		if (path.contains("..") && StringUtils.cleanPath(path).contains("../")) {_			logger.warn("Path contains \"../\" after call to StringUtils#cleanPath: [" + path + "]")__			return true__		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,string,utils,clean,path,li,paths,that,represent,a,link,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,path,contains,web,inf,path,contains,meta,inf,logger,warn,path,with,web,inf,or,meta,inf,path,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,logger,warn,path,represents,url,or,has,url,prefix,path,return,true,if,path,contains,string,utils,clean,path,path,contains,logger,warn,path,contains,after,call,to,string,utils,clean,path,path,return,true,return,false
ResourceWebHandler -> protected boolean isInvalidPath(String path);1542907316;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link StringUtils#cleanPath}._<li>Paths that represent a {@link ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isWarnEnabled()) {_				logger.warn("Path with \"WEB-INF\" or \"META-INF\": [" + path + "]")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isWarnEnabled()) {_					logger.warn("Path represents URL or has \"url:\" prefix: [" + path + "]")__				}_				return true__			}_		}_		if (path.contains("..") && StringUtils.cleanPath(path).contains("../")) {_			if (logger.isWarnEnabled()) {_				logger.warn("Path contains \"../\" after call to StringUtils#cleanPath: [" + path + "]")__			}_			return true__		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,string,utils,clean,path,li,paths,that,represent,a,link,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,warn,enabled,logger,warn,path,with,web,inf,or,meta,inf,path,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,warn,enabled,logger,warn,path,represents,url,or,has,url,prefix,path,return,true,if,path,contains,string,utils,clean,path,path,contains,if,logger,is,warn,enabled,logger,warn,path,contains,after,call,to,string,utils,clean,path,path,return,true,return,false
ResourceWebHandler -> protected boolean isInvalidPath(String path);1544609805;Identifies invalid resource paths. By default rejects:_<ul>_<li>Paths that contain "WEB-INF" or "META-INF"_<li>Paths that contain "../" after a call to_{@link StringUtils#cleanPath}._<li>Paths that represent a {@link ResourceUtils#isUrl_valid URL} or would represent one after the leading slash is removed._</ul>_<p><strong>Note:</strong> this method assumes that leading, duplicate '/'_or control characters (e.g. white space) have been trimmed so that the_path starts predictably with a single '/' or does not have one._@param path the path to validate_@return {@code true} if the path is invalid, {@code false} otherwise;protected boolean isInvalidPath(String path) {_		if (path.contains("WEB-INF") || path.contains("META-INF")) {_			if (logger.isWarnEnabled()) {_				logger.warn("Path with \"WEB-INF\" or \"META-INF\": [" + path + "]")__			}_			return true__		}_		if (path.contains(":/")) {_			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path)__			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {_				if (logger.isWarnEnabled()) {_					logger.warn("Path represents URL or has \"url:\" prefix: [" + path + "]")__				}_				return true__			}_		}_		if (path.contains("..") && StringUtils.cleanPath(path).contains("../")) {_			if (logger.isWarnEnabled()) {_				logger.warn("Path contains \"../\" after call to StringUtils#cleanPath: [" + path + "]")__			}_			return true__		}_		return false__	};identifies,invalid,resource,paths,by,default,rejects,ul,li,paths,that,contain,web,inf,or,meta,inf,li,paths,that,contain,after,a,call,to,link,string,utils,clean,path,li,paths,that,represent,a,link,resource,utils,is,url,valid,url,or,would,represent,one,after,the,leading,slash,is,removed,ul,p,strong,note,strong,this,method,assumes,that,leading,duplicate,or,control,characters,e,g,white,space,have,been,trimmed,so,that,the,path,starts,predictably,with,a,single,or,does,not,have,one,param,path,the,path,to,validate,return,code,true,if,the,path,is,invalid,code,false,otherwise;protected,boolean,is,invalid,path,string,path,if,path,contains,web,inf,path,contains,meta,inf,if,logger,is,warn,enabled,logger,warn,path,with,web,inf,or,meta,inf,path,return,true,if,path,contains,string,relative,path,path,char,at,0,path,substring,1,path,if,resource,utils,is,url,relative,path,relative,path,starts,with,url,if,logger,is,warn,enabled,logger,warn,path,represents,url,or,has,url,prefix,path,return,true,if,path,contains,string,utils,clean,path,path,contains,if,logger,is,warn,enabled,logger,warn,path,contains,after,call,to,string,utils,clean,path,path,return,true,return,false
ResourceWebHandler -> protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1496837955;Set headers on the response. Called for both GET and HEAD requests._@param exchange current exchange_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null});protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		HttpHeaders headers = exchange.getResponse().getHeaders()___		long length = resource.contentLength()__		headers.setContentLength(length)___		if (mediaType != null) {_			headers.setContentType(mediaType)__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			exchange.getResponse().getHeaders().putAll(resourceHeaders)__		}_	};set,headers,on,the,response,called,for,both,get,and,head,requests,param,exchange,current,exchange,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null;protected,void,set,headers,server,web,exchange,exchange,resource,resource,nullable,media,type,media,type,throws,ioexception,http,headers,headers,exchange,get,response,get,headers,long,length,resource,content,length,headers,set,content,length,length,if,media,type,null,headers,set,content,type,media,type,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,exchange,get,response,get,headers,put,all,resource,headers
ResourceWebHandler -> protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1497039338;Set headers on the response. Called for both GET and HEAD requests._@param exchange current exchange_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null});protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		HttpHeaders headers = exchange.getResponse().getHeaders()___		long length = resource.contentLength()__		headers.setContentLength(length)___		if (mediaType != null) {_			headers.setContentType(mediaType)__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			exchange.getResponse().getHeaders().putAll(resourceHeaders)__		}_	};set,headers,on,the,response,called,for,both,get,and,head,requests,param,exchange,current,exchange,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null;protected,void,set,headers,server,web,exchange,exchange,resource,resource,nullable,media,type,media,type,throws,ioexception,http,headers,headers,exchange,get,response,get,headers,long,length,resource,content,length,headers,set,content,length,length,if,media,type,null,headers,set,content,type,media,type,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,exchange,get,response,get,headers,put,all,resource,headers
ResourceWebHandler -> protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1498762530;Set headers on the response. Called for both GET and HEAD requests._@param exchange current exchange_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null});protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		HttpHeaders headers = exchange.getResponse().getHeaders()___		long length = resource.contentLength()__		headers.setContentLength(length)___		if (mediaType != null) {_			headers.setContentType(mediaType)__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			exchange.getResponse().getHeaders().putAll(resourceHeaders)__		}_	};set,headers,on,the,response,called,for,both,get,and,head,requests,param,exchange,current,exchange,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null;protected,void,set,headers,server,web,exchange,exchange,resource,resource,nullable,media,type,media,type,throws,ioexception,http,headers,headers,exchange,get,response,get,headers,long,length,resource,content,length,headers,set,content,length,length,if,media,type,null,headers,set,content,type,media,type,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,exchange,get,response,get,headers,put,all,resource,headers
ResourceWebHandler -> protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1498953917;Set headers on the response. Called for both GET and HEAD requests._@param exchange current exchange_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null});protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		HttpHeaders headers = exchange.getResponse().getHeaders()___		long length = resource.contentLength()__		headers.setContentLength(length)___		if (mediaType != null) {_			headers.setContentType(mediaType)__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			exchange.getResponse().getHeaders().putAll(resourceHeaders)__		}_	};set,headers,on,the,response,called,for,both,get,and,head,requests,param,exchange,current,exchange,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null;protected,void,set,headers,server,web,exchange,exchange,resource,resource,nullable,media,type,media,type,throws,ioexception,http,headers,headers,exchange,get,response,get,headers,long,length,resource,content,length,headers,set,content,length,length,if,media,type,null,headers,set,content,type,media,type,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,exchange,get,response,get,headers,put,all,resource,headers
ResourceWebHandler -> protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1500448076;Set headers on the response. Called for both GET and HEAD requests._@param exchange current exchange_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null});protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		HttpHeaders headers = exchange.getResponse().getHeaders()___		long length = resource.contentLength()__		headers.setContentLength(length)___		if (mediaType != null) {_			headers.setContentType(mediaType)__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			exchange.getResponse().getHeaders().putAll(resourceHeaders)__		}_	};set,headers,on,the,response,called,for,both,get,and,head,requests,param,exchange,current,exchange,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null;protected,void,set,headers,server,web,exchange,exchange,resource,resource,nullable,media,type,media,type,throws,ioexception,http,headers,headers,exchange,get,response,get,headers,long,length,resource,content,length,headers,set,content,length,length,if,media,type,null,headers,set,content,type,media,type,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,exchange,get,response,get,headers,put,all,resource,headers
ResourceWebHandler -> protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1501237594;Set headers on the response. Called for both GET and HEAD requests._@param exchange current exchange_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null});protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		HttpHeaders headers = exchange.getResponse().getHeaders()___		long length = resource.contentLength()__		headers.setContentLength(length)___		if (mediaType != null) {_			headers.setContentType(mediaType)__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			exchange.getResponse().getHeaders().putAll(resourceHeaders)__		}_	};set,headers,on,the,response,called,for,both,get,and,head,requests,param,exchange,current,exchange,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null;protected,void,set,headers,server,web,exchange,exchange,resource,resource,nullable,media,type,media,type,throws,ioexception,http,headers,headers,exchange,get,response,get,headers,long,length,resource,content,length,headers,set,content,length,length,if,media,type,null,headers,set,content,type,media,type,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,exchange,get,response,get,headers,put,all,resource,headers
ResourceWebHandler -> protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1507670883;Set headers on the response. Called for both GET and HEAD requests._@param exchange current exchange_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null});protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		HttpHeaders headers = exchange.getResponse().getHeaders()___		long length = resource.contentLength()__		headers.setContentLength(length)___		if (mediaType != null) {_			headers.setContentType(mediaType)__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			exchange.getResponse().getHeaders().putAll(resourceHeaders)__		}_	};set,headers,on,the,response,called,for,both,get,and,head,requests,param,exchange,current,exchange,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null;protected,void,set,headers,server,web,exchange,exchange,resource,resource,nullable,media,type,media,type,throws,ioexception,http,headers,headers,exchange,get,response,get,headers,long,length,resource,content,length,headers,set,content,length,length,if,media,type,null,headers,set,content,type,media,type,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,exchange,get,response,get,headers,put,all,resource,headers
ResourceWebHandler -> protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1519295386;Set headers on the response. Called for both GET and HEAD requests._@param exchange current exchange_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null});protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		HttpHeaders headers = exchange.getResponse().getHeaders()___		long length = resource.contentLength()__		headers.setContentLength(length)___		if (mediaType != null) {_			headers.setContentType(mediaType)__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			exchange.getResponse().getHeaders().putAll(resourceHeaders)__		}_	};set,headers,on,the,response,called,for,both,get,and,head,requests,param,exchange,current,exchange,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null;protected,void,set,headers,server,web,exchange,exchange,resource,resource,nullable,media,type,media,type,throws,ioexception,http,headers,headers,exchange,get,response,get,headers,long,length,resource,content,length,headers,set,content,length,length,if,media,type,null,headers,set,content,type,media,type,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,exchange,get,response,get,headers,put,all,resource,headers
ResourceWebHandler -> protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1521494163;Set headers on the response. Called for both GET and HEAD requests._@param exchange current exchange_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null});protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		HttpHeaders headers = exchange.getResponse().getHeaders()___		long length = resource.contentLength()__		headers.setContentLength(length)___		if (mediaType != null) {_			headers.setContentType(mediaType)__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			exchange.getResponse().getHeaders().putAll(resourceHeaders)__		}_	};set,headers,on,the,response,called,for,both,get,and,head,requests,param,exchange,current,exchange,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null;protected,void,set,headers,server,web,exchange,exchange,resource,resource,nullable,media,type,media,type,throws,ioexception,http,headers,headers,exchange,get,response,get,headers,long,length,resource,content,length,headers,set,content,length,length,if,media,type,null,headers,set,content,type,media,type,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,exchange,get,response,get,headers,put,all,resource,headers
ResourceWebHandler -> protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1522105242;Set headers on the response. Called for both GET and HEAD requests._@param exchange current exchange_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null});protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		HttpHeaders headers = exchange.getResponse().getHeaders()___		long length = resource.contentLength()__		headers.setContentLength(length)___		if (mediaType != null) {_			headers.setContentType(mediaType)__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			exchange.getResponse().getHeaders().putAll(resourceHeaders)__		}_	};set,headers,on,the,response,called,for,both,get,and,head,requests,param,exchange,current,exchange,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null;protected,void,set,headers,server,web,exchange,exchange,resource,resource,nullable,media,type,media,type,throws,ioexception,http,headers,headers,exchange,get,response,get,headers,long,length,resource,content,length,headers,set,content,length,length,if,media,type,null,headers,set,content,type,media,type,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,exchange,get,response,get,headers,put,all,resource,headers
ResourceWebHandler -> protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1527081441;Set headers on the response. Called for both GET and HEAD requests._@param exchange current exchange_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null});protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		HttpHeaders headers = exchange.getResponse().getHeaders()___		long length = resource.contentLength()__		headers.setContentLength(length)___		if (mediaType != null) {_			headers.setContentType(mediaType)__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			exchange.getResponse().getHeaders().putAll(resourceHeaders)__		}_	};set,headers,on,the,response,called,for,both,get,and,head,requests,param,exchange,current,exchange,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null;protected,void,set,headers,server,web,exchange,exchange,resource,resource,nullable,media,type,media,type,throws,ioexception,http,headers,headers,exchange,get,response,get,headers,long,length,resource,content,length,headers,set,content,length,length,if,media,type,null,headers,set,content,type,media,type,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,exchange,get,response,get,headers,put,all,resource,headers
ResourceWebHandler -> protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1529721864;Set headers on the response. Called for both GET and HEAD requests._@param exchange current exchange_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null});protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		HttpHeaders headers = exchange.getResponse().getHeaders()___		long length = resource.contentLength()__		headers.setContentLength(length)___		if (mediaType != null) {_			headers.setContentType(mediaType)__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			exchange.getResponse().getHeaders().putAll(resourceHeaders)__		}_	};set,headers,on,the,response,called,for,both,get,and,head,requests,param,exchange,current,exchange,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null;protected,void,set,headers,server,web,exchange,exchange,resource,resource,nullable,media,type,media,type,throws,ioexception,http,headers,headers,exchange,get,response,get,headers,long,length,resource,content,length,headers,set,content,length,length,if,media,type,null,headers,set,content,type,media,type,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,exchange,get,response,get,headers,put,all,resource,headers
ResourceWebHandler -> protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1530174524;Set headers on the response. Called for both GET and HEAD requests._@param exchange current exchange_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null});protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		HttpHeaders headers = exchange.getResponse().getHeaders()___		long length = resource.contentLength()__		headers.setContentLength(length)___		if (mediaType != null) {_			headers.setContentType(mediaType)__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			exchange.getResponse().getHeaders().putAll(resourceHeaders)__		}_	};set,headers,on,the,response,called,for,both,get,and,head,requests,param,exchange,current,exchange,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null;protected,void,set,headers,server,web,exchange,exchange,resource,resource,nullable,media,type,media,type,throws,ioexception,http,headers,headers,exchange,get,response,get,headers,long,length,resource,content,length,headers,set,content,length,length,if,media,type,null,headers,set,content,type,media,type,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,exchange,get,response,get,headers,put,all,resource,headers
ResourceWebHandler -> protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1530190293;Set headers on the response. Called for both GET and HEAD requests._@param exchange current exchange_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null});protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		HttpHeaders headers = exchange.getResponse().getHeaders()___		long length = resource.contentLength()__		headers.setContentLength(length)___		if (mediaType != null) {_			headers.setContentType(mediaType)__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			exchange.getResponse().getHeaders().putAll(resourceHeaders)__		}_	};set,headers,on,the,response,called,for,both,get,and,head,requests,param,exchange,current,exchange,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null;protected,void,set,headers,server,web,exchange,exchange,resource,resource,nullable,media,type,media,type,throws,ioexception,http,headers,headers,exchange,get,response,get,headers,long,length,resource,content,length,headers,set,content,length,length,if,media,type,null,headers,set,content,type,media,type,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,exchange,get,response,get,headers,put,all,resource,headers
ResourceWebHandler -> protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1530793633;Set headers on the response. Called for both GET and HEAD requests._@param exchange current exchange_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null});protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		HttpHeaders headers = exchange.getResponse().getHeaders()___		long length = resource.contentLength()__		headers.setContentLength(length)___		if (mediaType != null) {_			headers.setContentType(mediaType)__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			exchange.getResponse().getHeaders().putAll(resourceHeaders)__		}_	};set,headers,on,the,response,called,for,both,get,and,head,requests,param,exchange,current,exchange,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null;protected,void,set,headers,server,web,exchange,exchange,resource,resource,nullable,media,type,media,type,throws,ioexception,http,headers,headers,exchange,get,response,get,headers,long,length,resource,content,length,headers,set,content,length,length,if,media,type,null,headers,set,content,type,media,type,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,exchange,get,response,get,headers,put,all,resource,headers
ResourceWebHandler -> protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1530793695;Set headers on the response. Called for both GET and HEAD requests._@param exchange current exchange_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null});protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		HttpHeaders headers = exchange.getResponse().getHeaders()___		long length = resource.contentLength()__		headers.setContentLength(length)___		if (mediaType != null) {_			headers.setContentType(mediaType)__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			exchange.getResponse().getHeaders().putAll(resourceHeaders)__		}_	};set,headers,on,the,response,called,for,both,get,and,head,requests,param,exchange,current,exchange,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null;protected,void,set,headers,server,web,exchange,exchange,resource,resource,nullable,media,type,media,type,throws,ioexception,http,headers,headers,exchange,get,response,get,headers,long,length,resource,content,length,headers,set,content,length,length,if,media,type,null,headers,set,content,type,media,type,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,exchange,get,response,get,headers,put,all,resource,headers
ResourceWebHandler -> protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1532091916;Set headers on the response. Called for both GET and HEAD requests._@param exchange current exchange_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null});protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		HttpHeaders headers = exchange.getResponse().getHeaders()___		long length = resource.contentLength()__		headers.setContentLength(length)___		if (mediaType != null) {_			headers.setContentType(mediaType)__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			exchange.getResponse().getHeaders().putAll(resourceHeaders)__		}_	};set,headers,on,the,response,called,for,both,get,and,head,requests,param,exchange,current,exchange,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null;protected,void,set,headers,server,web,exchange,exchange,resource,resource,nullable,media,type,media,type,throws,ioexception,http,headers,headers,exchange,get,response,get,headers,long,length,resource,content,length,headers,set,content,length,length,if,media,type,null,headers,set,content,type,media,type,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,exchange,get,response,get,headers,put,all,resource,headers
ResourceWebHandler -> protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1542138563;Set headers on the response. Called for both GET and HEAD requests._@param exchange current exchange_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null});protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		HttpHeaders headers = exchange.getResponse().getHeaders()___		long length = resource.contentLength()__		headers.setContentLength(length)___		if (mediaType != null) {_			headers.setContentType(mediaType)__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			exchange.getResponse().getHeaders().putAll(resourceHeaders)__		}_	};set,headers,on,the,response,called,for,both,get,and,head,requests,param,exchange,current,exchange,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null;protected,void,set,headers,server,web,exchange,exchange,resource,resource,nullable,media,type,media,type,throws,ioexception,http,headers,headers,exchange,get,response,get,headers,long,length,resource,content,length,headers,set,content,length,length,if,media,type,null,headers,set,content,type,media,type,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,exchange,get,response,get,headers,put,all,resource,headers
ResourceWebHandler -> protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1542899558;Set headers on the response. Called for both GET and HEAD requests._@param exchange current exchange_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null});protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		HttpHeaders headers = exchange.getResponse().getHeaders()___		long length = resource.contentLength()__		headers.setContentLength(length)___		if (mediaType != null) {_			headers.setContentType(mediaType)__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			exchange.getResponse().getHeaders().putAll(resourceHeaders)__		}_	};set,headers,on,the,response,called,for,both,get,and,head,requests,param,exchange,current,exchange,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null;protected,void,set,headers,server,web,exchange,exchange,resource,resource,nullable,media,type,media,type,throws,ioexception,http,headers,headers,exchange,get,response,get,headers,long,length,resource,content,length,headers,set,content,length,length,if,media,type,null,headers,set,content,type,media,type,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,exchange,get,response,get,headers,put,all,resource,headers
ResourceWebHandler -> protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1542907316;Set headers on the response. Called for both GET and HEAD requests._@param exchange current exchange_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null});protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		HttpHeaders headers = exchange.getResponse().getHeaders()___		long length = resource.contentLength()__		headers.setContentLength(length)___		if (mediaType != null) {_			headers.setContentType(mediaType)__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			exchange.getResponse().getHeaders().putAll(resourceHeaders)__		}_	};set,headers,on,the,response,called,for,both,get,and,head,requests,param,exchange,current,exchange,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null;protected,void,set,headers,server,web,exchange,exchange,resource,resource,nullable,media,type,media,type,throws,ioexception,http,headers,headers,exchange,get,response,get,headers,long,length,resource,content,length,headers,set,content,length,length,if,media,type,null,headers,set,content,type,media,type,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,exchange,get,response,get,headers,put,all,resource,headers
ResourceWebHandler -> protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType) 			throws IOException;1544609805;Set headers on the response. Called for both GET and HEAD requests._@param exchange current exchange_@param resource the identified resource (never {@code null})_@param mediaType the resource's media type (never {@code null});protected void setHeaders(ServerWebExchange exchange, Resource resource, @Nullable MediaType mediaType)_			throws IOException {__		HttpHeaders headers = exchange.getResponse().getHeaders()___		long length = resource.contentLength()__		headers.setContentLength(length)___		if (mediaType != null) {_			headers.setContentType(mediaType)__		}_		if (resource instanceof HttpResource) {_			HttpHeaders resourceHeaders = ((HttpResource) resource).getResponseHeaders()__			exchange.getResponse().getHeaders().putAll(resourceHeaders)__		}_	};set,headers,on,the,response,called,for,both,get,and,head,requests,param,exchange,current,exchange,param,resource,the,identified,resource,never,code,null,param,media,type,the,resource,s,media,type,never,code,null;protected,void,set,headers,server,web,exchange,exchange,resource,resource,nullable,media,type,media,type,throws,ioexception,http,headers,headers,exchange,get,response,get,headers,long,length,resource,content,length,headers,set,content,length,length,if,media,type,null,headers,set,content,type,media,type,if,resource,instanceof,http,resource,http,headers,resource,headers,http,resource,resource,get,response,headers,exchange,get,response,get,headers,put,all,resource,headers
ResourceWebHandler -> public void setResourceHttpMessageWriter(ResourceHttpMessageWriter httpMessageWriter);1485986572;Configure the {@link ResourceHttpMessageWriter} to use._<p>By default a {@link ResourceHttpMessageWriter} will be configured.;public void setResourceHttpMessageWriter(ResourceHttpMessageWriter httpMessageWriter) {_		this.resourceHttpMessageWriter = httpMessageWriter__	};configure,the,link,resource,http,message,writer,to,use,p,by,default,a,link,resource,http,message,writer,will,be,configured;public,void,set,resource,http,message,writer,resource,http,message,writer,http,message,writer,this,resource,http,message,writer,http,message,writer
ResourceWebHandler -> public void setResourceHttpMessageWriter(ResourceHttpMessageWriter httpMessageWriter);1490197121;Configure the {@link ResourceHttpMessageWriter} to use._<p>By default a {@link ResourceHttpMessageWriter} will be configured.;public void setResourceHttpMessageWriter(ResourceHttpMessageWriter httpMessageWriter) {_		this.resourceHttpMessageWriter = httpMessageWriter__	};configure,the,link,resource,http,message,writer,to,use,p,by,default,a,link,resource,http,message,writer,will,be,configured;public,void,set,resource,http,message,writer,resource,http,message,writer,http,message,writer,this,resource,http,message,writer,http,message,writer
ResourceWebHandler -> public void setResourceHttpMessageWriter(ResourceHttpMessageWriter httpMessageWriter);1491927184;Configure the {@link ResourceHttpMessageWriter} to use._<p>By default a {@link ResourceHttpMessageWriter} will be configured.;public void setResourceHttpMessageWriter(ResourceHttpMessageWriter httpMessageWriter) {_		this.resourceHttpMessageWriter = httpMessageWriter__	};configure,the,link,resource,http,message,writer,to,use,p,by,default,a,link,resource,http,message,writer,will,be,configured;public,void,set,resource,http,message,writer,resource,http,message,writer,http,message,writer,this,resource,http,message,writer,http,message,writer
ResourceWebHandler -> public void setResourceHttpMessageWriter(ResourceHttpMessageWriter httpMessageWriter);1492090594;Configure the {@link ResourceHttpMessageWriter} to use._<p>By default a {@link ResourceHttpMessageWriter} will be configured.;public void setResourceHttpMessageWriter(ResourceHttpMessageWriter httpMessageWriter) {_		this.resourceHttpMessageWriter = httpMessageWriter__	};configure,the,link,resource,http,message,writer,to,use,p,by,default,a,link,resource,http,message,writer,will,be,configured;public,void,set,resource,http,message,writer,resource,http,message,writer,http,message,writer,this,resource,http,message,writer,http,message,writer
ResourceWebHandler -> public void setResourceHttpMessageWriter(ResourceHttpMessageWriter httpMessageWriter);1495639183;Configure the {@link ResourceHttpMessageWriter} to use._<p>By default a {@link ResourceHttpMessageWriter} will be configured.;public void setResourceHttpMessageWriter(ResourceHttpMessageWriter httpMessageWriter) {_		this.resourceHttpMessageWriter = httpMessageWriter__	};configure,the,link,resource,http,message,writer,to,use,p,by,default,a,link,resource,http,message,writer,will,be,configured;public,void,set,resource,http,message,writer,resource,http,message,writer,http,message,writer,this,resource,http,message,writer,http,message,writer
ResourceWebHandler -> public void setResourceHttpMessageWriter(ResourceHttpMessageWriter httpMessageWriter);1495868221;Configure the {@link ResourceHttpMessageWriter} to use._<p>By default a {@link ResourceHttpMessageWriter} will be configured.;public void setResourceHttpMessageWriter(ResourceHttpMessageWriter httpMessageWriter) {_		this.resourceHttpMessageWriter = httpMessageWriter__	};configure,the,link,resource,http,message,writer,to,use,p,by,default,a,link,resource,http,message,writer,will,be,configured;public,void,set,resource,http,message,writer,resource,http,message,writer,http,message,writer,this,resource,http,message,writer,http,message,writer
ResourceWebHandler -> public void setResourceHttpMessageWriter(ResourceHttpMessageWriter httpMessageWriter);1496837955;Configure the {@link ResourceHttpMessageWriter} to use._<p>By default a {@link ResourceHttpMessageWriter} will be configured.;public void setResourceHttpMessageWriter(ResourceHttpMessageWriter httpMessageWriter) {_		this.resourceHttpMessageWriter = httpMessageWriter__	};configure,the,link,resource,http,message,writer,to,use,p,by,default,a,link,resource,http,message,writer,will,be,configured;public,void,set,resource,http,message,writer,resource,http,message,writer,http,message,writer,this,resource,http,message,writer,http,message,writer
ResourceWebHandler -> public void setResourceHttpMessageWriter(ResourceHttpMessageWriter httpMessageWriter);1497039338;Configure the {@link ResourceHttpMessageWriter} to use._<p>By default a {@link ResourceHttpMessageWriter} will be configured.;public void setResourceHttpMessageWriter(ResourceHttpMessageWriter httpMessageWriter) {_		this.resourceHttpMessageWriter = httpMessageWriter__	};configure,the,link,resource,http,message,writer,to,use,p,by,default,a,link,resource,http,message,writer,will,be,configured;public,void,set,resource,http,message,writer,resource,http,message,writer,http,message,writer,this,resource,http,message,writer,http,message,writer
ResourceWebHandler -> public void setResourceHttpMessageWriter(ResourceHttpMessageWriter httpMessageWriter);1498762530;Configure the {@link ResourceHttpMessageWriter} to use._<p>By default a {@link ResourceHttpMessageWriter} will be configured.;public void setResourceHttpMessageWriter(ResourceHttpMessageWriter httpMessageWriter) {_		this.resourceHttpMessageWriter = httpMessageWriter__	};configure,the,link,resource,http,message,writer,to,use,p,by,default,a,link,resource,http,message,writer,will,be,configured;public,void,set,resource,http,message,writer,resource,http,message,writer,http,message,writer,this,resource,http,message,writer,http,message,writer
ResourceWebHandler -> public void setResourceHttpMessageWriter(ResourceHttpMessageWriter httpMessageWriter);1498953917;Configure the {@link ResourceHttpMessageWriter} to use._<p>By default a {@link ResourceHttpMessageWriter} will be configured.;public void setResourceHttpMessageWriter(ResourceHttpMessageWriter httpMessageWriter) {_		this.resourceHttpMessageWriter = httpMessageWriter__	};configure,the,link,resource,http,message,writer,to,use,p,by,default,a,link,resource,http,message,writer,will,be,configured;public,void,set,resource,http,message,writer,resource,http,message,writer,http,message,writer,this,resource,http,message,writer,http,message,writer
ResourceWebHandler -> public CompositeContentTypeResolver getContentTypeResolver();1485986572;Return the configured {@link CompositeContentTypeResolver}.;public CompositeContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,composite,content,type,resolver;public,composite,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
ResourceWebHandler -> public CompositeContentTypeResolver getContentTypeResolver();1490197121;Return the configured {@link CompositeContentTypeResolver}.;public CompositeContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,composite,content,type,resolver;public,composite,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
ResourceWebHandler -> public CompositeContentTypeResolver getContentTypeResolver();1491927184;Return the configured {@link CompositeContentTypeResolver}.;public CompositeContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,composite,content,type,resolver;public,composite,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
ResourceWebHandler -> public CompositeContentTypeResolver getContentTypeResolver();1492090594;Return the configured {@link CompositeContentTypeResolver}.;public CompositeContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,composite,content,type,resolver;public,composite,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
ResourceWebHandler -> public CompositeContentTypeResolver getContentTypeResolver();1495639183;Return the configured {@link CompositeContentTypeResolver}.;public CompositeContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,composite,content,type,resolver;public,composite,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
ResourceWebHandler -> public CompositeContentTypeResolver getContentTypeResolver();1495868221;Return the configured {@link CompositeContentTypeResolver}.;public CompositeContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,composite,content,type,resolver;public,composite,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
ResourceWebHandler -> @Nullable 	protected MediaType getMediaType(ServerWebExchange exchange, Resource resource);1495868221;Determine the media type for the given request and the resource matched_to it. This implementation tries to determine the MediaType based on the_file extension of the Resource via_{@link PathExtensionContentTypeResolver#resolveMediaTypeForResource(Resource)}._@param exchange the current exchange_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;@Nullable_	protected MediaType getMediaType(ServerWebExchange exchange, Resource resource) {_		return this.pathExtensionResolver.resolveMediaTypeForResource(resource)__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,tries,to,determine,the,media,type,based,on,the,file,extension,of,the,resource,via,link,path,extension,content,type,resolver,resolve,media,type,for,resource,resource,param,exchange,the,current,exchange,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;nullable,protected,media,type,get,media,type,server,web,exchange,exchange,resource,resource,return,this,path,extension,resolver,resolve,media,type,for,resource,resource
ResourceWebHandler -> @Nullable 	protected MediaType getMediaType(ServerWebExchange exchange, Resource resource);1496837955;Determine the media type for the given request and the resource matched_to it. This implementation tries to determine the MediaType based on the_file extension of the Resource via_{@link PathExtensionContentTypeResolver#resolveMediaTypeForResource(Resource)}._@param exchange the current exchange_@param resource the resource to check_@return the corresponding media type, or {@code null} if none found;@Nullable_	protected MediaType getMediaType(ServerWebExchange exchange, Resource resource) {_		return this.pathExtensionResolver.resolveMediaTypeForResource(resource)__	};determine,the,media,type,for,the,given,request,and,the,resource,matched,to,it,this,implementation,tries,to,determine,the,media,type,based,on,the,file,extension,of,the,resource,via,link,path,extension,content,type,resolver,resolve,media,type,for,resource,resource,param,exchange,the,current,exchange,param,resource,the,resource,to,check,return,the,corresponding,media,type,or,code,null,if,none,found;nullable,protected,media,type,get,media,type,server,web,exchange,exchange,resource,resource,return,this,path,extension,resolver,resolve,media,type,for,resource,resource
ResourceWebHandler -> public List<ResourceTransformer> getResourceTransformers();1485986572;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceWebHandler -> public List<ResourceTransformer> getResourceTransformers();1490197121;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceWebHandler -> public List<ResourceTransformer> getResourceTransformers();1491927184;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceWebHandler -> public List<ResourceTransformer> getResourceTransformers();1492090594;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceWebHandler -> public List<ResourceTransformer> getResourceTransformers();1495639183;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceWebHandler -> public List<ResourceTransformer> getResourceTransformers();1495868221;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceWebHandler -> public List<ResourceTransformer> getResourceTransformers();1496837955;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceWebHandler -> public List<ResourceTransformer> getResourceTransformers();1497039338;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceWebHandler -> public List<ResourceTransformer> getResourceTransformers();1498762530;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceWebHandler -> public List<ResourceTransformer> getResourceTransformers();1498953917;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceWebHandler -> public List<ResourceTransformer> getResourceTransformers();1500448076;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceWebHandler -> public List<ResourceTransformer> getResourceTransformers();1501237594;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceWebHandler -> public List<ResourceTransformer> getResourceTransformers();1507670883;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceWebHandler -> public List<ResourceTransformer> getResourceTransformers();1519295386;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceWebHandler -> public List<ResourceTransformer> getResourceTransformers();1521494163;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceWebHandler -> public List<ResourceTransformer> getResourceTransformers();1522105242;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceWebHandler -> public List<ResourceTransformer> getResourceTransformers();1527081441;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceWebHandler -> public List<ResourceTransformer> getResourceTransformers();1529721864;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceWebHandler -> public List<ResourceTransformer> getResourceTransformers();1530174524;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceWebHandler -> public List<ResourceTransformer> getResourceTransformers();1530190293;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceWebHandler -> public List<ResourceTransformer> getResourceTransformers();1530793633;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceWebHandler -> public List<ResourceTransformer> getResourceTransformers();1530793695;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceWebHandler -> public List<ResourceTransformer> getResourceTransformers();1532091916;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceWebHandler -> public List<ResourceTransformer> getResourceTransformers();1542138563;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceWebHandler -> public List<ResourceTransformer> getResourceTransformers();1542899558;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceWebHandler -> public List<ResourceTransformer> getResourceTransformers();1542907316;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceWebHandler -> public List<ResourceTransformer> getResourceTransformers();1544609805;Return the list of configured resource transformers.;public List<ResourceTransformer> getResourceTransformers() {_		return this.resourceTransformers__	};return,the,list,of,configured,resource,transformers;public,list,resource,transformer,get,resource,transformers,return,this,resource,transformers
ResourceWebHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1485986572;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceWebHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1490197121;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceWebHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1491927184;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceWebHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1492090594;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceWebHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1495639183;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
ResourceWebHandler -> public void setResourceResolvers(List<ResourceResolver> resourceResolvers);1495868221;Configure the list of {@link ResourceResolver}s to use._<p>By default {@link PathResourceResolver} is configured. If using this property,_it is recommended to add {@link PathResourceResolver} as the last resolver.;public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {_		this.resourceResolvers.clear()__		if (resourceResolvers != null) {_			this.resourceResolvers.addAll(resourceResolvers)__		}_	};configure,the,list,of,link,resource,resolver,s,to,use,p,by,default,link,path,resource,resolver,is,configured,if,using,this,property,it,is,recommended,to,add,link,path,resource,resolver,as,the,last,resolver;public,void,set,resource,resolvers,list,resource,resolver,resource,resolvers,this,resource,resolvers,clear,if,resource,resolvers,null,this,resource,resolvers,add,all,resource,resolvers
