commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the HTTP status code value.  * @throws IllegalArgumentException in case of an unknown HTTP status code  */ ;/**  * Return the HTTP status code value.  * @throws IllegalArgumentException in case of an unknown HTTP status code  */ public HttpStatus getStatusCode() {     return HttpStatus.valueOf(this.statusCode). }
true;public;0;3;/**  * Return the raw HTTP status code value.  */ ;/**  * Return the raw HTTP status code value.  */ public int getRawStatusCode() {     return this.statusCode. }
true;public;0;3;/**  * Return the HTTP status text.  */ ;/**  * Return the HTTP status text.  */ public String getStatusText() {     return this.statusText. }
true;public;0;3;/**  * Return the HTTP response headers.  */ ;/**  * Return the HTTP response headers.  */ public HttpHeaders getHeaders() {     return this.headers. }
true;public;0;3;/**  * Return the response body as a byte array.  */ ;/**  * Return the response body as a byte array.  */ public byte[] getResponseBodyAsByteArray() {     return this.responseBody. }
true;public;0;3;/**  * Return the response body as a string.  */ ;/**  * Return the response body as a string.  */ public String getResponseBodyAsString() {     return new String(this.responseBody, this.responseCharset). }
true;public;0;4;/**  * Return the corresponding request.  * @since 5.1.4  */ ;/**  * Return the corresponding request.  * @since 5.1.4  */ @Nullable public HttpRequest getRequest() {     return this.request. }
true;public,static;5;5;/**  * Create {@code WebClientResponseException} or an HTTP status specific subclass.  * @since 5.1  */ ;/**  * Create {@code WebClientResponseException} or an HTTP status specific subclass.  * @since 5.1  */ public static WebClientResponseException create(int statusCode, String statusText, HttpHeaders headers, byte[] body, @Nullable Charset charset) {     return create(statusCode, statusText, headers, body, charset, null). }
true;public,static;6;43;/**  * Create {@code WebClientResponseException} or an HTTP status specific subclass.  * @since 5.1.4  */ ;/**  * Create {@code WebClientResponseException} or an HTTP status specific subclass.  * @since 5.1.4  */ public static WebClientResponseException create(int statusCode, String statusText, HttpHeaders headers, byte[] body, @Nullable Charset charset, @Nullable HttpRequest request) {     HttpStatus httpStatus = HttpStatus.resolve(statusCode).     if (httpStatus != null) {         switch(httpStatus) {             case BAD_REQUEST:                 return new WebClientResponseException.BadRequest(statusText, headers, body, charset, request).             case UNAUTHORIZED:                 return new WebClientResponseException.Unauthorized(statusText, headers, body, charset, request).             case FORBIDDEN:                 return new WebClientResponseException.Forbidden(statusText, headers, body, charset, request).             case NOT_FOUND:                 return new WebClientResponseException.NotFound(statusText, headers, body, charset, request).             case METHOD_NOT_ALLOWED:                 return new WebClientResponseException.MethodNotAllowed(statusText, headers, body, charset, request).             case NOT_ACCEPTABLE:                 return new WebClientResponseException.NotAcceptable(statusText, headers, body, charset, request).             case CONFLICT:                 return new WebClientResponseException.Conflict(statusText, headers, body, charset, request).             case GONE:                 return new WebClientResponseException.Gone(statusText, headers, body, charset, request).             case UNSUPPORTED_MEDIA_TYPE:                 return new WebClientResponseException.UnsupportedMediaType(statusText, headers, body, charset, request).             case TOO_MANY_REQUESTS:                 return new WebClientResponseException.TooManyRequests(statusText, headers, body, charset, request).             case UNPROCESSABLE_ENTITY:                 return new WebClientResponseException.UnprocessableEntity(statusText, headers, body, charset, request).             case INTERNAL_SERVER_ERROR:                 return new WebClientResponseException.InternalServerError(statusText, headers, body, charset, request).             case NOT_IMPLEMENTED:                 return new WebClientResponseException.NotImplemented(statusText, headers, body, charset, request).             case BAD_GATEWAY:                 return new WebClientResponseException.BadGateway(statusText, headers, body, charset, request).             case SERVICE_UNAVAILABLE:                 return new WebClientResponseException.ServiceUnavailable(statusText, headers, body, charset, request).             case GATEWAY_TIMEOUT:                 return new WebClientResponseException.GatewayTimeout(statusText, headers, body, charset, request).         }     }     return new WebClientResponseException(statusCode, statusText, headers, body, charset, request). }
