commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the message type (text, binary, etc).  */ ;/**  * Return the message type (text, binary, etc).  */ public Type getType() {     return this.type. }
true;public;0;3;/**  * Return the message payload.  */ ;/**  * Return the message payload.  */ public DataBuffer getPayload() {     return this.payload. }
true;public;0;3;/**  * A variant of {@link #getPayloadAsText(Charset)} that uses {@code UTF-8}  * for decoding the raw content to text.  */ ;/**  * A variant of {@link #getPayloadAsText(Charset)} that uses {@code UTF-8}  * for decoding the raw content to text.  */ public String getPayloadAsText() {     return getPayloadAsText(StandardCharsets.UTF_8). }
true;public;1;5;/**  * A shortcut for decoding the raw content of the message to text with the  * given character encoding. This is useful for text WebSocket messages, or  * otherwise when the payload is expected to contain text.  * @param charset the character encoding  * @since 5.0.5  */ ;/**  * A shortcut for decoding the raw content of the message to text with the  * given character encoding. This is useful for text WebSocket messages, or  * otherwise when the payload is expected to contain text.  * @param charset the character encoding  * @since 5.0.5  */ public String getPayloadAsText(Charset charset) {     byte[] bytes = new byte[this.payload.readableByteCount()].     this.payload.read(bytes).     return new String(bytes, charset). }
true;public;0;4;/**  * Retain the data buffer for the message payload, which is useful on  * runtimes (e.g. Netty) with pooled buffers. A shortcut for:  * <pre>  * DataBuffer payload = message.getPayload().  * DataBufferUtils.retain(payload).  * </pre>  * @see DataBufferUtils#retain(DataBuffer)  */ ;/**  * Retain the data buffer for the message payload, which is useful on  * runtimes (e.g. Netty) with pooled buffers. A shortcut for:  * <pre>  * DataBuffer payload = message.getPayload().  * DataBufferUtils.retain(payload).  * </pre>  * @see DataBufferUtils#retain(DataBuffer)  */ public WebSocketMessage retain() {     DataBufferUtils.retain(this.payload).     return this. }
true;public;0;3;/**  * Release the payload {@code DataBuffer} which is useful on runtimes  * (e.g. Netty) with pooled buffers such as Netty. A shortcut for:  * <pre>  * DataBuffer payload = message.getPayload().  * DataBufferUtils.release(payload).  * </pre>  * @see DataBufferUtils#release(DataBuffer)  */ ;/**  * Release the payload {@code DataBuffer} which is useful on runtimes  * (e.g. Netty) with pooled buffers such as Netty. A shortcut for:  * <pre>  * DataBuffer payload = message.getPayload().  * DataBufferUtils.release(payload).  * </pre>  * @see DataBufferUtils#release(DataBuffer)  */ public void release() {     DataBufferUtils.release(this.payload). }
false;public;1;12;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (!(other instanceof WebSocketMessage)) {         return false.     }     WebSocketMessage otherMessage = (WebSocketMessage) other.     return (this.type.equals(otherMessage.type) && ObjectUtils.nullSafeEquals(this.payload, otherMessage.payload)). }
false;public;0;4;;@Override public int hashCode() {     return this.type.hashCode() * 29 + this.payload.hashCode(). }
false;public;0;4;;@Override public String toString() {     return "WebSocket " + this.type.name() + " message (" + this.payload.readableByteCount() + " bytes)". }
