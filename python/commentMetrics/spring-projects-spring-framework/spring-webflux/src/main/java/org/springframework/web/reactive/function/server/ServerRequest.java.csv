commented;modifiers;parameterAmount;loc;comment;code
true;default;0;4;/**  * Get the HTTP method.  * @return the HTTP method as an HttpMethod enum value, or {@code null}  * if not resolvable (e.g. in case of a non-standard HTTP method)  */ ;/**  * Get the HTTP method.  * @return the HTTP method as an HttpMethod enum value, or {@code null}  * if not resolvable (e.g. in case of a non-standard HTTP method)  */ @Nullable default HttpMethod method() {     return HttpMethod.resolve(methodName()). }
true;;0;1;/**  * Get the name of the HTTP method.  * @return the HTTP method as a String  */ ;/**  * Get the name of the HTTP method.  * @return the HTTP method as a String  */ String methodName().
true;;0;1;/**  * Get the request URI.  */ ;/**  * Get the request URI.  */ URI uri().
true;;0;1;/**  * Get a {@code UriBuilderComponents} from the URI associated with this  * {@code ServerRequest}.  * <p><strong>Note:</strong> as of 5.1 this method ignores {@code "Forwarded"}  * and {@code "X-Forwarded-*"} headers that specify the  * client-originated address. Consider using the {@code ForwardedHeaderFilter}  * to extract and use, or to discard such headers.  * @return a URI builder  */ ;/**  * Get a {@code UriBuilderComponents} from the URI associated with this  * {@code ServerRequest}.  * <p><strong>Note:</strong> as of 5.1 this method ignores {@code "Forwarded"}  * and {@code "X-Forwarded-*"} headers that specify the  * client-originated address. Consider using the {@code ForwardedHeaderFilter}  * to extract and use, or to discard such headers.  * @return a URI builder  */ UriBuilder uriBuilder().
true;default;0;3;/**  * Get the request path.  */ ;/**  * Get the request path.  */ default String path() {     return uri().getRawPath(). }
true;default;0;3;/**  * Get the request path as a {@code PathContainer}.  */ ;/**  * Get the request path as a {@code PathContainer}.  */ default PathContainer pathContainer() {     return PathContainer.parsePath(path()). }
true;;0;1;/**  * Get the headers of this request.  */ ;/**  * Get the headers of this request.  */ Headers headers().
true;;0;1;/**  * Get the cookies of this request.  */ ;/**  * Get the cookies of this request.  */ MultiValueMap<String, HttpCookie> cookies().
true;;0;1;/**  * Get the remote address to which this request is connected, if available.  * @since 5.1  */ ;/**  * Get the remote address to which this request is connected, if available.  * @since 5.1  */ Optional<InetSocketAddress> remoteAddress().
true;;0;1;/**  * Get the readers used to convert the body of this request.  * @since 5.1  */ ;/**  * Get the readers used to convert the body of this request.  * @since 5.1  */ List<HttpMessageReader<?>> messageReaders().
true;;1;1;/**  * Extract the body with the given {@code BodyExtractor}.  * @param extractor the {@code BodyExtractor} that reads from the request  * @param <T> the type of the body returned  * @return the extracted body  * @see #body(BodyExtractor, Map)  */ ;/**  * Extract the body with the given {@code BodyExtractor}.  * @param extractor the {@code BodyExtractor} that reads from the request  * @param <T> the type of the body returned  * @return the extracted body  * @see #body(BodyExtractor, Map)  */ <T> T body(BodyExtractor<T, ? super ServerHttpRequest> extractor).
true;;2;1;/**  * Extract the body with the given {@code BodyExtractor} and hints.  * @param extractor the {@code BodyExtractor} that reads from the request  * @param hints the map of hints like {@link Jackson2CodecSupport#JSON_VIEW_HINT}  * to use to customize body extraction  * @param <T> the type of the body returned  * @return the extracted body  */ ;/**  * Extract the body with the given {@code BodyExtractor} and hints.  * @param extractor the {@code BodyExtractor} that reads from the request  * @param hints the map of hints like {@link Jackson2CodecSupport#JSON_VIEW_HINT}  * to use to customize body extraction  * @param <T> the type of the body returned  * @return the extracted body  */ <T> T body(BodyExtractor<T, ? super ServerHttpRequest> extractor, Map<String, Object> hints).
true;;1;1;/**  * Extract the body to a {@code Mono}.  * @param elementClass the class of element in the {@code Mono}  * @param <T> the element type  * @return the body as a mono  */ ;/**  * Extract the body to a {@code Mono}.  * @param elementClass the class of element in the {@code Mono}  * @param <T> the element type  * @return the body as a mono  */ <T> Mono<T> bodyToMono(Class<? extends T> elementClass).
true;;1;1;/**  * Extract the body to a {@code Mono}.  * @param typeReference a type reference describing the expected response request type  * @param <T> the element type  * @return a mono containing the body of the given type {@code T}  */ ;/**  * Extract the body to a {@code Mono}.  * @param typeReference a type reference describing the expected response request type  * @param <T> the element type  * @return a mono containing the body of the given type {@code T}  */ <T> Mono<T> bodyToMono(ParameterizedTypeReference<T> typeReference).
true;;1;1;/**  * Extract the body to a {@code Flux}.  * @param elementClass the class of element in the {@code Flux}  * @param <T> the element type  * @return the body as a flux  */ ;/**  * Extract the body to a {@code Flux}.  * @param elementClass the class of element in the {@code Flux}  * @param <T> the element type  * @return the body as a flux  */ <T> Flux<T> bodyToFlux(Class<? extends T> elementClass).
true;;1;1;/**  * Extract the body to a {@code Flux}.  * @param typeReference a type reference describing the expected request body type  * @param <T> the element type  * @return a flux containing the body of the given type {@code T}  */ ;/**  * Extract the body to a {@code Flux}.  * @param typeReference a type reference describing the expected request body type  * @param <T> the element type  * @return a flux containing the body of the given type {@code T}  */ <T> Flux<T> bodyToFlux(ParameterizedTypeReference<T> typeReference).
true;default;1;3;/**  * Get the request attribute value if present.  * @param name the attribute name  * @return the attribute value  */ ;/**  * Get the request attribute value if present.  * @param name the attribute name  * @return the attribute value  */ default Optional<Object> attribute(String name) {     return Optional.ofNullable(attributes().get(name)). }
true;;0;1;/**  * Get a mutable map of request attributes.  * @return the request attributes  */ ;/**  * Get a mutable map of request attributes.  * @return the request attributes  */ Map<String, Object> attributes().
true;default;1;13;/**  * Get the first query parameter with the given name, if present.  * @param name the parameter name  * @return the parameter value  */ ;/**  * Get the first query parameter with the given name, if present.  * @param name the parameter name  * @return the parameter value  */ default Optional<String> queryParam(String name) {     List<String> queryParamValues = queryParams().get(name).     if (CollectionUtils.isEmpty(queryParamValues)) {         return Optional.empty().     } else {         String value = queryParamValues.get(0).         if (value == null) {             value = "".         }         return Optional.of(value).     } }
true;;0;1;/**  * Get all query parameters for this request.  */ ;/**  * Get all query parameters for this request.  */ MultiValueMap<String, String> queryParams().
true;default;1;9;/**  * Get the path variable with the given name, if present.  * @param name the variable name  * @return the variable value  * @throws IllegalArgumentException if there is no path variable with the given name  */ ;/**  * Get the path variable with the given name, if present.  * @param name the variable name  * @return the variable value  * @throws IllegalArgumentException if there is no path variable with the given name  */ default String pathVariable(String name) {     Map<String, String> pathVariables = pathVariables().     if (pathVariables.containsKey(name)) {         return pathVariables().get(name).     } else {         throw new IllegalArgumentException("No path variable with name \"" + name + "\" available").     } }
true;;0;1;/**  * Get all path variables for this request.  */ ;/**  * Get all path variables for this request.  */ Map<String, String> pathVariables().
true;;0;1;/**  * Get the web session for this request.  * <p>Always guaranteed to return an instance either matching the session id  * requested by the client, or with a new session id either because the client  * did not specify one or because the underlying session had expired.  * <p>Use of this method does not automatically create a session.  */ ;/**  * Get the web session for this request.  * <p>Always guaranteed to return an instance either matching the session id  * requested by the client, or with a new session id either because the client  * did not specify one or because the underlying session had expired.  * <p>Use of this method does not automatically create a session.  */ Mono<WebSession> session().
true;;0;1;/**  * Get the authenticated user for the request, if any.  */ ;/**  * Get the authenticated user for the request, if any.  */ Mono<? extends Principal> principal().
true;;0;1;/**  * Get the form data from the body of the request if the Content-Type is  * {@code "application/x-www-form-urlencoded"} or an empty map otherwise.  * <p><strong>Note:</strong> calling this method causes the request body to  * be read and parsed in full, and the resulting {@code MultiValueMap} is  * cached so that this method is safe to call more than once.  */ ;/**  * Get the form data from the body of the request if the Content-Type is  * {@code "application/x-www-form-urlencoded"} or an empty map otherwise.  * <p><strong>Note:</strong> calling this method causes the request body to  * be read and parsed in full, and the resulting {@code MultiValueMap} is  * cached so that this method is safe to call more than once.  */ Mono<MultiValueMap<String, String>> formData().
true;;0;1;/**  * Get the parts of a multipart request if the Content-Type is  * {@code "multipart/form-data"} or an empty map otherwise.  * <p><strong>Note:</strong> calling this method causes the request body to  * be read and parsed in full, and the resulting {@code MultiValueMap} is  * cached so that this method is safe to call more than once.  */ ;/**  * Get the parts of a multipart request if the Content-Type is  * {@code "multipart/form-data"} or an empty map otherwise.  * <p><strong>Note:</strong> calling this method causes the request body to  * be read and parsed in full, and the resulting {@code MultiValueMap} is  * cached so that this method is safe to call more than once.  */ Mono<MultiValueMap<String, Part>> multipartData().
true;;0;1;/**  * Get the web exchange that this request is based on.  * <p>Note: Manipulating the exchange directly (instead of using the methods provided on  * {@code ServerRequest} and {@code ServerResponse}) can lead to irregular results.  * @since 5.1  */ ;/**  * Get the web exchange that this request is based on.  * <p>Note: Manipulating the exchange directly (instead of using the methods provided on  * {@code ServerRequest} and {@code ServerResponse}) can lead to irregular results.  * @since 5.1  */ ServerWebExchange exchange().
true;static;2;3;/**  * Create a new {@code ServerRequest} based on the given {@code ServerWebExchange} and  * message readers.  * @param exchange the exchange  * @param messageReaders the message readers  * @return the created {@code ServerRequest}  */ ;// Static builder methods /**  * Create a new {@code ServerRequest} based on the given {@code ServerWebExchange} and  * message readers.  * @param exchange the exchange  * @param messageReaders the message readers  * @return the created {@code ServerRequest}  */ static ServerRequest create(ServerWebExchange exchange, List<HttpMessageReader<?>> messageReaders) {     return new DefaultServerRequest(exchange, messageReaders). }
true;static;1;3;/**  * Create a builder with the status, headers, and cookies of the given request.  * @param other the response to copy the status, headers, and cookies from  * @return the created builder  * @since 5.1  */ ;/**  * Create a builder with the status, headers, and cookies of the given request.  * @param other the response to copy the status, headers, and cookies from  * @return the created builder  * @since 5.1  */ static Builder from(ServerRequest other) {     return new DefaultServerRequestBuilder(other). }
true;;0;1;/**  * Get the list of acceptable media types, as specified by the {@code Accept}  * header.  * <p>Returns an empty list if the acceptable media types are unspecified.  */ ;/**  * Get the list of acceptable media types, as specified by the {@code Accept}  * header.  * <p>Returns an empty list if the acceptable media types are unspecified.  */ List<MediaType> accept().
true;;0;1;/**  * Get the list of acceptable charsets, as specified by the  * {@code Accept-Charset} header.  */ ;/**  * Get the list of acceptable charsets, as specified by the  * {@code Accept-Charset} header.  */ List<Charset> acceptCharset().
true;;0;1;/**  * Get the list of acceptable languages, as specified by the  * {@code Accept-Language} header.  */ ;/**  * Get the list of acceptable languages, as specified by the  * {@code Accept-Language} header.  */ List<Locale.LanguageRange> acceptLanguage().
true;;0;1;/**  * Get the length of the body in bytes, as specified by the  * {@code Content-Length} header.  */ ;/**  * Get the length of the body in bytes, as specified by the  * {@code Content-Length} header.  */ OptionalLong contentLength().
true;;0;1;/**  * Get the media type of the body, as specified by the  * {@code Content-Type} header.  */ ;/**  * Get the media type of the body, as specified by the  * {@code Content-Type} header.  */ Optional<MediaType> contentType().
true;;0;2;/**  * Get the value of the {@code Host} header, if available.  * <p>If the header value does not contain a port, the  * {@linkplain InetSocketAddress#getPort() port} in the returned address will  * be {@code 0}.  */ ;/**  * Get the value of the {@code Host} header, if available.  * <p>If the header value does not contain a port, the  * {@linkplain InetSocketAddress#getPort() port} in the returned address will  * be {@code 0}.  */ @Nullable InetSocketAddress host().
true;;0;1;/**  * Get the value of the {@code Range} header.  * <p>Returns an empty list when the range is unknown.  */ ;/**  * Get the value of the {@code Range} header.  * <p>Returns an empty list when the range is unknown.  */ List<HttpRange> range().
true;;1;1;/**  * Get the header value(s), if any, for the header of the given name.  * <p>Returns an empty list if no header values are found.  * @param headerName the header name  */ ;/**  * Get the header value(s), if any, for the header of the given name.  * <p>Returns an empty list if no header values are found.  * @param headerName the header name  */ List<String> header(String headerName).
true;;0;1;/**  * Get the headers as an instance of {@link HttpHeaders}.  */ ;/**  * Get the headers as an instance of {@link HttpHeaders}.  */ HttpHeaders asHttpHeaders().
true;;1;1;/**  * Set the method of the request.  * @param method the new method  * @return this builder  */ ;/**  * Set the method of the request.  * @param method the new method  * @return this builder  */ Builder method(HttpMethod method).
true;;1;1;/**  * Set the URI of the request.  * @param uri the new URI  * @return this builder  */ ;/**  * Set the URI of the request.  * @param uri the new URI  * @return this builder  */ Builder uri(URI uri).
true;;2;1;/**  * Add the given header value(s) under the given name.  * @param headerName the header name  * @param headerValues the header value(s)  * @return this builder  * @see HttpHeaders#add(String, String)  */ ;/**  * Add the given header value(s) under the given name.  * @param headerName the header name  * @param headerValues the header value(s)  * @return this builder  * @see HttpHeaders#add(String, String)  */ Builder header(String headerName, String... headerValues).
true;;1;1;/**  * Manipulate this request's headers with the given consumer.  * <p>The headers provided to the consumer are "live", so that the consumer can be used to  * {@linkplain HttpHeaders#set(String, String) overwrite} existing header values,  * {@linkplain HttpHeaders#remove(Object) remove} values, or use any of the other  * {@link HttpHeaders} methods.  * @param headersConsumer a function that consumes the {@code HttpHeaders}  * @return this builder  */ ;/**  * Manipulate this request's headers with the given consumer.  * <p>The headers provided to the consumer are "live", so that the consumer can be used to  * {@linkplain HttpHeaders#set(String, String) overwrite} existing header values,  * {@linkplain HttpHeaders#remove(Object) remove} values, or use any of the other  * {@link HttpHeaders} methods.  * @param headersConsumer a function that consumes the {@code HttpHeaders}  * @return this builder  */ Builder headers(Consumer<HttpHeaders> headersConsumer).
true;;2;1;/**  * Add a cookie with the given name and value(s).  * @param name the cookie name  * @param values the cookie value(s)  * @return this builder  */ ;/**  * Add a cookie with the given name and value(s).  * @param name the cookie name  * @param values the cookie value(s)  * @return this builder  */ Builder cookie(String name, String... values).
true;;1;1;/**  * Manipulate this request's cookies with the given consumer.  * <p>The map provided to the consumer is "live", so that the consumer can be used to  * {@linkplain MultiValueMap#set(Object, Object) overwrite} existing cookies,  * {@linkplain MultiValueMap#remove(Object) remove} cookies, or use any of the other  * {@link MultiValueMap} methods.  * @param cookiesConsumer a function that consumes the cookies map  * @return this builder  */ ;/**  * Manipulate this request's cookies with the given consumer.  * <p>The map provided to the consumer is "live", so that the consumer can be used to  * {@linkplain MultiValueMap#set(Object, Object) overwrite} existing cookies,  * {@linkplain MultiValueMap#remove(Object) remove} cookies, or use any of the other  * {@link MultiValueMap} methods.  * @param cookiesConsumer a function that consumes the cookies map  * @return this builder  */ Builder cookies(Consumer<MultiValueMap<String, HttpCookie>> cookiesConsumer).
true;;1;1;/**  * Set the body of the request.  * <p>Calling this methods will  * {@linkplain org.springframework.core.io.buffer.DataBufferUtils#release(DataBuffer) release}  * the existing body of the builder.  * @param body the new body  * @return this builder  */ ;/**  * Set the body of the request.  * <p>Calling this methods will  * {@linkplain org.springframework.core.io.buffer.DataBufferUtils#release(DataBuffer) release}  * the existing body of the builder.  * @param body the new body  * @return this builder  */ Builder body(Flux<DataBuffer> body).
true;;1;1;/**  * Set the body of the request to the UTF-8 encoded bytes of the given string.  * <p>Calling this methods will  * {@linkplain org.springframework.core.io.buffer.DataBufferUtils#release(DataBuffer) release}  * the existing body of the builder.  * @param body the new body  * @return this builder  */ ;/**  * Set the body of the request to the UTF-8 encoded bytes of the given string.  * <p>Calling this methods will  * {@linkplain org.springframework.core.io.buffer.DataBufferUtils#release(DataBuffer) release}  * the existing body of the builder.  * @param body the new body  * @return this builder  */ Builder body(String body).
true;;2;1;/**  * Add an attribute with the given name and value.  * @param name the attribute name  * @param value the attribute value  * @return this builder  */ ;/**  * Add an attribute with the given name and value.  * @param name the attribute name  * @param value the attribute value  * @return this builder  */ Builder attribute(String name, Object value).
true;;1;1;/**  * Manipulate this request's attributes with the given consumer.  * <p>The map provided to the consumer is "live", so that the consumer can be used  * to {@linkplain Map#put(Object, Object) overwrite} existing attributes,  * {@linkplain Map#remove(Object) remove} attributes, or use any of the other  * {@link Map} methods.  * @param attributesConsumer a function that consumes the attributes map  * @return this builder  */ ;/**  * Manipulate this request's attributes with the given consumer.  * <p>The map provided to the consumer is "live", so that the consumer can be used  * to {@linkplain Map#put(Object, Object) overwrite} existing attributes,  * {@linkplain Map#remove(Object) remove} attributes, or use any of the other  * {@link Map} methods.  * @param attributesConsumer a function that consumes the attributes map  * @return this builder  */ Builder attributes(Consumer<Map<String, Object>> attributesConsumer).
true;;0;1;/**  * Build the request.  * @return the built request  */ ;/**  * Build the request.  * @return the built request  */ ServerRequest build().
