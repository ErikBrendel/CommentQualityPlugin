# id;timestamp;commentText;codeText;commentWords;codeWords
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1487000643;Return a function that creates new path-matching {@code RequestPredicates} from pattern_Strings using the given {@link PathPatternParser}. This method can be used to specify a_non-default, customized {@code PathPatternParser} when resolving path patterns.__@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves patterns Strings into path-matching_{@code RequestPredicate}s;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "'patternParser' must not be null")__		return pattern -> new PathPatternPredicate(patternParser.parse(pattern))__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,patterns,strings,into,path,matching,code,request,predicate,s;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,pattern,parser,must,not,be,null,return,pattern,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1487070708;Return a function that creates new path-matching {@code RequestPredicates} from pattern_Strings using the given {@link PathPatternParser}. This method can be used to specify a_non-default, customized {@code PathPatternParser} when resolving path patterns.__@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves patterns Strings into path-matching_{@code RequestPredicate}s;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "'patternParser' must not be null")__		return pattern -> {_			synchronized (patternParser) {_				return new PathPatternPredicate(patternParser.parse(pattern))__			}_		}__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,patterns,strings,into,path,matching,code,request,predicate,s;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,pattern,parser,must,not,be,null,return,pattern,synchronized,pattern,parser,return,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1487153168;Return a function that creates new path-matching {@code RequestPredicates} from pattern_Strings using the given {@link PathPatternParser}. This method can be used to specify a_non-default, customized {@code PathPatternParser} when resolving path patterns.__@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves patterns Strings into path-matching_{@code RequestPredicate}s;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "'patternParser' must not be null")__		return pattern -> {_			synchronized (patternParser) {_				return new PathPatternPredicate(patternParser.parse(pattern))__			}_		}__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,patterns,strings,into,path,matching,code,request,predicate,s;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,pattern,parser,must,not,be,null,return,pattern,synchronized,pattern,parser,return,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1487236624;Return a function that creates new path-matching {@code RequestPredicates} from pattern_Strings using the given {@link PathPatternParser}. This method can be used to specify a_non-default, customized {@code PathPatternParser} when resolving path patterns.__@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves patterns Strings into path-matching_{@code RequestPredicate}s;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "'patternParser' must not be null")__		return pattern -> {_			synchronized (patternParser) {_				return new PathPatternPredicate(patternParser.parse(pattern))__			}_		}__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,patterns,strings,into,path,matching,code,request,predicate,s;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,pattern,parser,must,not,be,null,return,pattern,synchronized,pattern,parser,return,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1487584763;Return a function that creates new path-matching {@code RequestPredicates} from pattern_Strings using the given {@link PathPatternParser}. This method can be used to specify a_non-default, customized {@code PathPatternParser} when resolving path patterns.__@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves patterns Strings into path-matching_{@code RequestPredicate}s;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "'patternParser' must not be null")__		return pattern -> {_			synchronized (patternParser) {_				return new PathPatternPredicate(patternParser.parse(pattern))__			}_		}__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,patterns,strings,into,path,matching,code,request,predicate,s;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,pattern,parser,must,not,be,null,return,pattern,synchronized,pattern,parser,return,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1487601624;Return a function that creates new path-matching {@code RequestPredicates} from pattern_Strings using the given {@link PathPatternParser}. This method can be used to specify a_non-default, customized {@code PathPatternParser} when resolving path patterns.__@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves patterns Strings into path-matching_{@code RequestPredicate}s;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "'patternParser' must not be null")__		return pattern -> {_			synchronized (patternParser) {_				return new PathPatternPredicate(patternParser.parse(pattern))__			}_		}__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,patterns,strings,into,path,matching,code,request,predicate,s;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,pattern,parser,must,not,be,null,return,pattern,synchronized,pattern,parser,return,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1487681187;Return a function that creates new path-matching {@code RequestPredicates} from pattern_Strings using the given {@link PathPatternParser}. This method can be used to specify a_non-default, customized {@code PathPatternParser} when resolving path patterns.__@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves patterns Strings into path-matching_{@code RequestPredicate}s;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "'patternParser' must not be null")__		return pattern -> {_			synchronized (patternParser) {_				return new PathPatternPredicate(patternParser.parse(pattern))__			}_		}__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,patterns,strings,into,path,matching,code,request,predicate,s;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,pattern,parser,must,not,be,null,return,pattern,synchronized,pattern,parser,return,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1487687241;Return a function that creates new path-matching {@code RequestPredicates} from pattern_Strings using the given {@link PathPatternParser}. This method can be used to specify a_non-default, customized {@code PathPatternParser} when resolving path patterns._@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves patterns Strings into path-matching_{@code RequestPredicate}s;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "'patternParser' must not be null")__		return pattern -> {_			synchronized (patternParser) {_				return new PathPatternPredicate(patternParser.parse(pattern))__			}_		}__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,patterns,strings,into,path,matching,code,request,predicate,s;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,pattern,parser,must,not,be,null,return,pattern,synchronized,pattern,parser,return,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1491557115;Return a function that creates new path-matching {@code RequestPredicates} from pattern_Strings using the given {@link PathPatternParser}. This method can be used to specify a_non-default, customized {@code PathPatternParser} when resolving path patterns._@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves patterns Strings into path-matching_{@code RequestPredicate}s;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "'patternParser' must not be null")__		return pattern -> {_			synchronized (patternParser) {_				return new PathPatternPredicate(patternParser.parse(pattern))__			}_		}__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,patterns,strings,into,path,matching,code,request,predicate,s;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,pattern,parser,must,not,be,null,return,pattern,synchronized,pattern,parser,return,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1492557464;Return a function that creates new path-matching {@code RequestPredicates} from pattern_Strings using the given {@link PathPatternParser}. This method can be used to specify a_non-default, customized {@code PathPatternParser} when resolving path patterns._@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves patterns Strings into path-matching_{@code RequestPredicate}s;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "'patternParser' must not be null")__		return pattern -> {_			synchronized (patternParser) {_				return new PathPatternPredicate(patternParser.parse(pattern))__			}_		}__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,patterns,strings,into,path,matching,code,request,predicate,s;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,pattern,parser,must,not,be,null,return,pattern,synchronized,pattern,parser,return,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1492591191;Return a function that creates new path-matching {@code RequestPredicates} from pattern_Strings using the given {@link PathPatternParser}. This method can be used to specify a_non-default, customized {@code PathPatternParser} when resolving path patterns._@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves patterns Strings into path-matching_{@code RequestPredicate}s;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "'patternParser' must not be null")__		return pattern -> {_			synchronized (patternParser) {_				return new PathPatternPredicate(patternParser.parse(pattern))__			}_		}__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,patterns,strings,into,path,matching,code,request,predicate,s;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,pattern,parser,must,not,be,null,return,pattern,synchronized,pattern,parser,return,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1494489320;Return a function that creates new path-matching {@code RequestPredicates} from pattern_Strings using the given {@link PathPatternParser}. This method can be used to specify a_non-default, customized {@code PathPatternParser} when resolving path patterns._@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves patterns Strings into path-matching_{@code RequestPredicate}s;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "'patternParser' must not be null")__		return pattern -> new PathPatternPredicate(patternParser.parse(pattern))__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,patterns,strings,into,path,matching,code,request,predicate,s;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,pattern,parser,must,not,be,null,return,pattern,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1494939057;Return a function that creates new path-matching {@code RequestPredicates} from pattern_Strings using the given {@link PathPatternParser}. This method can be used to specify a_non-default, customized {@code PathPatternParser} when resolving path patterns._@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves patterns Strings into path-matching_{@code RequestPredicate}s;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "'patternParser' must not be null")__		return pattern -> new PathPatternPredicate(patternParser.parse(pattern))__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,patterns,strings,into,path,matching,code,request,predicate,s;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,pattern,parser,must,not,be,null,return,pattern,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1495035625;Return a function that creates new path-matching {@code RequestPredicates} from pattern_Strings using the given {@link PathPatternParser}. This method can be used to specify a_non-default, customized {@code PathPatternParser} when resolving path patterns._@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves patterns Strings into path-matching_{@code RequestPredicate}s;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "'patternParser' must not be null")__		return pattern -> new PathPatternPredicate(patternParser.parse(pattern))__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,patterns,strings,into,path,matching,code,request,predicate,s;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,pattern,parser,must,not,be,null,return,pattern,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1496837955;Return a function that creates new path-matching {@code RequestPredicates} from pattern_Strings using the given {@link PathPatternParser}. This method can be used to specify a_non-default, customized {@code PathPatternParser} when resolving path patterns._@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves patterns Strings into path-matching_{@code RequestPredicate}s;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "'patternParser' must not be null")__		return pattern -> new PathPatternPredicate(patternParser.parse(pattern))__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,patterns,strings,into,path,matching,code,request,predicate,s;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,pattern,parser,must,not,be,null,return,pattern,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1498833097;Return a function that creates new path-matching {@code RequestPredicates} from pattern_Strings using the given {@link PathPatternParser}. This method can be used to specify a_non-default, customized {@code PathPatternParser} when resolving path patterns._@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves patterns Strings into path-matching_{@code RequestPredicate}s;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "'patternParser' must not be null")__		return pattern -> new PathPatternPredicate(patternParser.parse(pattern))__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,patterns,strings,into,path,matching,code,request,predicate,s;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,pattern,parser,must,not,be,null,return,pattern,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1498861175;Return a function that creates new path-matching {@code RequestPredicates} from pattern_Strings using the given {@link PathPatternParser}. This method can be used to specify a_non-default, customized {@code PathPatternParser} when resolving path patterns._@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves patterns Strings into path-matching_{@code RequestPredicate}s;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "'patternParser' must not be null")__		return pattern -> new PathPatternPredicate(patternParser.parse(pattern))__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,patterns,strings,into,path,matching,code,request,predicate,s;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,pattern,parser,must,not,be,null,return,pattern,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1499081790;Return a function that creates new path-matching {@code RequestPredicates} from pattern_Strings using the given {@link PathPatternParser}. This method can be used to specify a_non-default, customized {@code PathPatternParser} when resolving path patterns._@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves patterns Strings into path-matching_{@code RequestPredicate}s;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "'patternParser' must not be null")__		return pattern -> new PathPatternPredicate(patternParser.parse(pattern))__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,patterns,strings,into,path,matching,code,request,predicate,s;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,pattern,parser,must,not,be,null,return,pattern,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1499091813;Return a function that creates new path-matching {@code RequestPredicates} from pattern_Strings using the given {@link PathPatternParser}. This method can be used to specify a_non-default, customized {@code PathPatternParser} when resolving path patterns._@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves patterns Strings into path-matching_{@code RequestPredicate}s;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "'patternParser' must not be null")__		return pattern -> new PathPatternPredicate(patternParser.parse(pattern))__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,patterns,strings,into,path,matching,code,request,predicate,s;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,pattern,parser,must,not,be,null,return,pattern,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1499448036;Return a function that creates new path-matching {@code RequestPredicates} from pattern_Strings using the given {@link PathPatternParser}. This method can be used to specify a_non-default, customized {@code PathPatternParser} when resolving path patterns._@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves patterns Strings into path-matching_{@code RequestPredicate}s;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "'patternParser' must not be null")__		return pattern -> new PathPatternPredicate(patternParser.parse(pattern))__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,patterns,strings,into,path,matching,code,request,predicate,s;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,pattern,parser,must,not,be,null,return,pattern,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1499780493;Return a function that creates new path-matching {@code RequestPredicates} from pattern_Strings using the given {@link PathPatternParser}. This method can be used to specify a_non-default, customized {@code PathPatternParser} when resolving path patterns._@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves patterns Strings into path-matching_{@code RequestPredicate}s;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "'patternParser' must not be null")__		return pattern -> new PathPatternPredicate(patternParser.parse(pattern))__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,patterns,strings,into,path,matching,code,request,predicate,s;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,pattern,parser,must,not,be,null,return,pattern,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1500559500;Return a function that creates new path-matching {@code RequestPredicates} from pattern_Strings using the given {@link PathPatternParser}. This method can be used to specify a_non-default, customized {@code PathPatternParser} when resolving path patterns._@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves patterns Strings into path-matching_{@code RequestPredicate}s;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "'patternParser' must not be null")__		return pattern -> new PathPatternPredicate(patternParser.parse(pattern))__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,patterns,strings,into,path,matching,code,request,predicate,s;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,pattern,parser,must,not,be,null,return,pattern,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1501155515;Return a function that creates new path-matching {@code RequestPredicates} from pattern_Strings using the given {@link PathPatternParser}. This method can be used to specify a_non-default, customized {@code PathPatternParser} when resolving path patterns._@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves patterns Strings into path-matching_{@code RequestPredicate}s;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "'patternParser' must not be null")__		return pattern -> new PathPatternPredicate(patternParser.parse(pattern))__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,patterns,strings,into,path,matching,code,request,predicate,s;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,pattern,parser,must,not,be,null,return,pattern,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1501237594;Return a function that creates new path-matching {@code RequestPredicates} from pattern_Strings using the given {@link PathPatternParser}. This method can be used to specify a_non-default, customized {@code PathPatternParser} when resolving path patterns._@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves patterns Strings into path-matching_{@code RequestPredicate}s;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "'patternParser' must not be null")__		return pattern -> new PathPatternPredicate(patternParser.parse(pattern))__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,patterns,strings,into,path,matching,code,request,predicate,s;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,pattern,parser,must,not,be,null,return,pattern,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1501679128;Return a function that creates new path-matching {@code RequestPredicates} from pattern_Strings using the given {@link PathPatternParser}. This method can be used to specify a_non-default, customized {@code PathPatternParser} when resolving path patterns._@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves patterns Strings into path-matching_{@code RequestPredicate}s;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "'patternParser' must not be null")__		return pattern -> new PathPatternPredicate(patternParser.parse(pattern))__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,patterns,strings,into,path,matching,code,request,predicate,s;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,pattern,parser,must,not,be,null,return,pattern,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1501684266;Return a function that creates new path-matching {@code RequestPredicates} from pattern_Strings using the given {@link PathPatternParser}. This method can be used to specify a_non-default, customized {@code PathPatternParser} when resolving path patterns._@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves patterns Strings into path-matching_{@code RequestPredicate}s;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "'patternParser' must not be null")__		return pattern -> new PathPatternPredicate(patternParser.parse(pattern))__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,patterns,strings,into,path,matching,code,request,predicate,s;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,pattern,parser,must,not,be,null,return,pattern,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1505477679;Return a function that creates new path-matching {@code RequestPredicates} from pattern_Strings using the given {@link PathPatternParser}. This method can be used to specify a_non-default, customized {@code PathPatternParser} when resolving path patterns._@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves patterns Strings into path-matching_{@code RequestPredicate}s;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "'patternParser' must not be null")__		return pattern -> new PathPatternPredicate(patternParser.parse(pattern))__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,patterns,strings,into,path,matching,code,request,predicate,s;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,pattern,parser,must,not,be,null,return,pattern,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1506331747;Return a function that creates new path-matching {@code RequestPredicates} from pattern_Strings using the given {@link PathPatternParser}. This method can be used to specify a_non-default, customized {@code PathPatternParser} when resolving path patterns._@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves patterns Strings into path-matching_{@code RequestPredicate}s;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "'patternParser' must not be null")__		return pattern -> new PathPatternPredicate(patternParser.parse(pattern))__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,patterns,strings,into,path,matching,code,request,predicate,s;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,pattern,parser,must,not,be,null,return,pattern,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1521795630;Return a function that creates new path-matching {@code RequestPredicates} from pattern_Strings using the given {@link PathPatternParser}. This method can be used to specify a_non-default, customized {@code PathPatternParser} when resolving path patterns._@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves patterns Strings into path-matching_{@code RequestPredicate}s;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "'patternParser' must not be null")__		return pattern -> new PathPatternPredicate(patternParser.parse(pattern))__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,patterns,strings,into,path,matching,code,request,predicate,s;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,pattern,parser,must,not,be,null,return,pattern,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1523351625;Return a function that creates new path-matching {@code RequestPredicates} from pattern_Strings using the given {@link PathPatternParser}. This method can be used to specify a_non-default, customized {@code PathPatternParser} when resolving path patterns._@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves patterns Strings into path-matching_{@code RequestPredicate}s;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "'patternParser' must not be null")__		return pattern -> new PathPatternPredicate(patternParser.parse(pattern))__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,patterns,strings,into,path,matching,code,request,predicate,s;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,pattern,parser,must,not,be,null,return,pattern,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1524865018;Return a function that creates new path-matching {@code RequestPredicates} from pattern_Strings using the given {@link PathPatternParser}. This method can be used to specify a_non-default, customized {@code PathPatternParser} when resolving path patterns._@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves patterns Strings into path-matching_{@code RequestPredicate}s;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "'patternParser' must not be null")__		return pattern -> new PathPatternPredicate(patternParser.parse(pattern))__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,patterns,strings,into,path,matching,code,request,predicate,s;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,pattern,parser,must,not,be,null,return,pattern,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1525251240;Return a function that creates new path-matching {@code RequestPredicates} from pattern_Strings using the given {@link PathPatternParser}. This method can be used to specify a_non-default, customized {@code PathPatternParser} when resolving path patterns._@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves patterns Strings into path-matching_{@code RequestPredicate}s;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "'patternParser' must not be null")__		return pattern -> new PathPatternPredicate(patternParser.parse(pattern))__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,patterns,strings,into,path,matching,code,request,predicate,s;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,pattern,parser,must,not,be,null,return,pattern,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1525338166;Return a function that creates new path-matching {@code RequestPredicates} from pattern_Strings using the given {@link PathPatternParser}. This method can be used to specify a_non-default, customized {@code PathPatternParser} when resolving path patterns._@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves patterns Strings into path-matching_{@code RequestPredicate}s;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "'patternParser' must not be null")__		return pattern -> new PathPatternPredicate(patternParser.parse(pattern))__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,patterns,strings,into,path,matching,code,request,predicate,s;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,pattern,parser,must,not,be,null,return,pattern,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1526462061;Return a function that creates new path-matching {@code RequestPredicates} from pattern_Strings using the given {@link PathPatternParser}. This method can be used to specify a_non-default, customized {@code PathPatternParser} when resolving path patterns._@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves patterns Strings into path-matching_{@code RequestPredicate}s;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "'patternParser' must not be null")__		return pattern -> new PathPatternPredicate(patternParser.parse(pattern))__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,patterns,strings,into,path,matching,code,request,predicate,s;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,pattern,parser,must,not,be,null,return,pattern,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1526674893;Return a function that creates new path-matching {@code RequestPredicates} from pattern_Strings using the given {@link PathPatternParser}. This method can be used to specify a_non-default, customized {@code PathPatternParser} when resolving path patterns._@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves patterns Strings into path-matching_{@code RequestPredicate}s;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "'patternParser' must not be null")__		return pattern -> new PathPatternPredicate(patternParser.parse(pattern))__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,patterns,strings,into,path,matching,code,request,predicate,s;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,pattern,parser,must,not,be,null,return,pattern,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1529721864;Return a function that creates new path-matching {@code RequestPredicates} from pattern_Strings using the given {@link PathPatternParser}. This method can be used to specify a_non-default, customized {@code PathPatternParser} when resolving path patterns._@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves patterns Strings into path-matching_{@code RequestPredicate}s;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "'patternParser' must not be null")__		return pattern -> new PathPatternPredicate(patternParser.parse(pattern))__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,patterns,strings,into,path,matching,code,request,predicate,s;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,pattern,parser,must,not,be,null,return,pattern,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1530174524;Return a function that creates new path-matching {@code RequestPredicates} from pattern_Strings using the given {@link PathPatternParser}. This method can be used to specify a_non-default, customized {@code PathPatternParser} when resolving path patterns._@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves patterns Strings into path-matching_{@code RequestPredicate}s;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "'patternParser' must not be null")__		return pattern -> new PathPatternPredicate(patternParser.parse(pattern))__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,patterns,strings,into,path,matching,code,request,predicate,s;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,pattern,parser,must,not,be,null,return,pattern,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1530871276;Return a function that creates new path-matching {@code RequestPredicates} from pattern_Strings using the given {@link PathPatternParser}. This method can be used to specify a_non-default, customized {@code PathPatternParser} when resolving path patterns._@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves patterns Strings into path-matching_{@code RequestPredicate}s;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "'patternParser' must not be null")__		return pattern -> new PathPatternPredicate(patternParser.parse(pattern))__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,patterns,strings,into,path,matching,code,request,predicate,s;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,pattern,parser,must,not,be,null,return,pattern,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1530877097;Return a function that creates new path-matching {@code RequestPredicates} from pattern_Strings using the given {@link PathPatternParser}. This method can be used to specify a_non-default, customized {@code PathPatternParser} when resolving path patterns._@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves patterns Strings into path-matching_{@code RequestPredicate}s;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "'patternParser' must not be null")__		return pattern -> new PathPatternPredicate(patternParser.parse(pattern))__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,patterns,strings,into,path,matching,code,request,predicate,s;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,pattern,parser,must,not,be,null,return,pattern,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1532520962;Return a function that creates new path-matching {@code RequestPredicates}_from pattern Strings using the given {@link PathPatternParser}._<p>This method can be used to specify a non-default, customized_{@code PathPatternParser} when resolving path patterns._@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves a pattern String into a path-matching_{@code RequestPredicates} instance;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "PathPatternParser must not be null")__		return pattern -> new PathPatternPredicate(patternParser.parse(pattern))__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,p,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,a,pattern,string,into,a,path,matching,code,request,predicates,instance;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,path,pattern,parser,must,not,be,null,return,pattern,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1537173292;Return a function that creates new path-matching {@code RequestPredicates}_from pattern Strings using the given {@link PathPatternParser}._<p>This method can be used to specify a non-default, customized_{@code PathPatternParser} when resolving path patterns._@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves a pattern String into a path-matching_{@code RequestPredicates} instance;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "PathPatternParser must not be null")__		return pattern -> new PathPatternPredicate(patternParser.parse(pattern))__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,p,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,a,pattern,string,into,a,path,matching,code,request,predicates,instance;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,path,pattern,parser,must,not,be,null,return,pattern,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1537188605;Return a function that creates new path-matching {@code RequestPredicates}_from pattern Strings using the given {@link PathPatternParser}._<p>This method can be used to specify a non-default, customized_{@code PathPatternParser} when resolving path patterns._@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves a pattern String into a path-matching_{@code RequestPredicates} instance;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "PathPatternParser must not be null")__		return pattern -> new PathPatternPredicate(patternParser.parse(pattern))__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,p,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,a,pattern,string,into,a,path,matching,code,request,predicates,instance;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,path,pattern,parser,must,not,be,null,return,pattern,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1538658936;Return a function that creates new path-matching {@code RequestPredicates}_from pattern Strings using the given {@link PathPatternParser}._<p>This method can be used to specify a non-default, customized_{@code PathPatternParser} when resolving path patterns._@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves a pattern String into a path-matching_{@code RequestPredicates} instance;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "PathPatternParser must not be null")__		return pattern -> new PathPatternPredicate(patternParser.parse(pattern))__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,p,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,a,pattern,string,into,a,path,matching,code,request,predicates,instance;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,path,pattern,parser,must,not,be,null,return,pattern,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1539866925;Return a function that creates new path-matching {@code RequestPredicates}_from pattern Strings using the given {@link PathPatternParser}._<p>This method can be used to specify a non-default, customized_{@code PathPatternParser} when resolving path patterns._@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves a pattern String into a path-matching_{@code RequestPredicates} instance;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "PathPatternParser must not be null")__		return pattern -> new PathPatternPredicate(patternParser.parse(pattern))__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,p,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,a,pattern,string,into,a,path,matching,code,request,predicates,instance;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,path,pattern,parser,must,not,be,null,return,pattern,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1542719117;Return a function that creates new path-matching {@code RequestPredicates}_from pattern Strings using the given {@link PathPatternParser}._<p>This method can be used to specify a non-default, customized_{@code PathPatternParser} when resolving path patterns._@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves a pattern String into a path-matching_{@code RequestPredicates} instance;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "PathPatternParser must not be null")__		return pattern -> new PathPatternPredicate(patternParser.parse(pattern))__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,p,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,a,pattern,string,into,a,path,matching,code,request,predicates,instance;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,path,pattern,parser,must,not,be,null,return,pattern,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser);1544625213;Return a function that creates new path-matching {@code RequestPredicates}_from pattern Strings using the given {@link PathPatternParser}._<p>This method can be used to specify a non-default, customized_{@code PathPatternParser} when resolving path patterns._@param patternParser the parser used to parse patterns given to the returned function_@return a function that resolves a pattern String into a path-matching_{@code RequestPredicates} instance;public static Function<String, RequestPredicate> pathPredicates(PathPatternParser patternParser) {_		Assert.notNull(patternParser, "PathPatternParser must not be null")__		return pattern -> new PathPatternPredicate(patternParser.parse(pattern))__	};return,a,function,that,creates,new,path,matching,code,request,predicates,from,pattern,strings,using,the,given,link,path,pattern,parser,p,this,method,can,be,used,to,specify,a,non,default,customized,code,path,pattern,parser,when,resolving,path,patterns,param,pattern,parser,the,parser,used,to,parse,patterns,given,to,the,returned,function,return,a,function,that,resolves,a,pattern,string,into,a,path,matching,code,request,predicates,instance;public,static,function,string,request,predicate,path,predicates,path,pattern,parser,pattern,parser,assert,not,null,pattern,parser,path,pattern,parser,must,not,be,null,return,pattern,new,path,pattern,predicate,pattern,parser,parse,pattern
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1485986572;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types.__@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))__		return headers(headers -> {_			List<MediaType> acceptedMediaTypes = headers.accept()__			MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__			return acceptedMediaTypes.stream()_					.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_							.anyMatch(acceptedMediaType::isCompatibleWith))__		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,headers,list,media,type,accepted,media,types,headers,accept,media,type,sort,by,specificity,and,quality,accepted,media,types,return,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1486634978;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types.__@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))__		return headers(headers -> {_			List<MediaType> acceptedMediaTypes = headers.accept()__			MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__			return acceptedMediaTypes.stream()_					.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_							.anyMatch(acceptedMediaType::isCompatibleWith))__		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,headers,list,media,type,accepted,media,types,headers,accept,media,type,sort,by,specificity,and,quality,accepted,media,types,return,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1486996670;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types.__@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))__		return headers(headers -> {_			List<MediaType> acceptedMediaTypes = headers.accept()__			MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__			return acceptedMediaTypes.stream()_					.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_							.anyMatch(acceptedMediaType::isCompatibleWith))__		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,headers,list,media,type,accepted,media,types,headers,accept,media,type,sort,by,specificity,and,quality,accepted,media,types,return,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1487000643;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types.__@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))__		return headers(headers -> {_			List<MediaType> acceptedMediaTypes = headers.accept()__			MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__			return acceptedMediaTypes.stream()_					.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_							.anyMatch(acceptedMediaType::isCompatibleWith))__		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,headers,list,media,type,accepted,media,types,headers,accept,media,type,sort,by,specificity,and,quality,accepted,media,types,return,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1487070708;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types.__@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))__		return headers(headers -> {_			List<MediaType> acceptedMediaTypes = headers.accept()__			MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__			return acceptedMediaTypes.stream()_					.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_							.anyMatch(acceptedMediaType::isCompatibleWith))__		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,headers,list,media,type,accepted,media,types,headers,accept,media,type,sort,by,specificity,and,quality,accepted,media,types,return,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1487153168;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types.__@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))__		return headers(headers -> {_			List<MediaType> acceptedMediaTypes = headers.accept()__			MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__			return acceptedMediaTypes.stream()_					.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_							.anyMatch(acceptedMediaType::isCompatibleWith))__		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,headers,list,media,type,accepted,media,types,headers,accept,media,type,sort,by,specificity,and,quality,accepted,media,types,return,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1487236624;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types.__@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))__		return headers(headers -> {_			List<MediaType> acceptedMediaTypes = headers.accept()__			MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__			return acceptedMediaTypes.stream()_					.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_							.anyMatch(acceptedMediaType::isCompatibleWith))__		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,headers,list,media,type,accepted,media,types,headers,accept,media,type,sort,by,specificity,and,quality,accepted,media,types,return,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1487584763;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types.__@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))__		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				List<MediaType> acceptedMediaTypes = headers.accept()__				MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__				boolean match = acceptedMediaTypes.stream()_						.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_								.anyMatch(acceptedMediaType::isCompatibleWith))__				traceMatch("Accept", mediaTypeSet, acceptedMediaTypes, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Accept: %s", mediaTypeSet)__			}__		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,list,media,type,accepted,media,types,headers,accept,media,type,sort,by,specificity,and,quality,accepted,media,types,boolean,match,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with,trace,match,accept,media,type,set,accepted,media,types,match,return,match,override,public,string,to,string,return,string,format,accept,s,media,type,set
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1487601624;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types.__@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))__		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				List<MediaType> acceptedMediaTypes = headers.accept()__				if (acceptedMediaTypes.isEmpty()) {_					acceptedMediaTypes = Collections.singletonList(MediaType.ALL)__				}_				else {_					MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__				}_				boolean match = acceptedMediaTypes.stream()_						.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_								.anyMatch(acceptedMediaType::isCompatibleWith))__				traceMatch("Accept", mediaTypeSet, acceptedMediaTypes, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Accept: %s", mediaTypeSet)__			}__		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,list,media,type,accepted,media,types,headers,accept,if,accepted,media,types,is,empty,accepted,media,types,collections,singleton,list,media,type,all,else,media,type,sort,by,specificity,and,quality,accepted,media,types,boolean,match,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with,trace,match,accept,media,type,set,accepted,media,types,match,return,match,override,public,string,to,string,return,string,format,accept,s,media,type,set
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1487681187;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types.__@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))__		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				List<MediaType> acceptedMediaTypes = headers.accept()__				if (acceptedMediaTypes.isEmpty()) {_					acceptedMediaTypes = Collections.singletonList(MediaType.ALL)__				}_				else {_					MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__				}_				boolean match = acceptedMediaTypes.stream()_						.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_								.anyMatch(acceptedMediaType::isCompatibleWith))__				traceMatch("Accept", mediaTypeSet, acceptedMediaTypes, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Accept: %s", mediaTypeSet)__			}__		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,list,media,type,accepted,media,types,headers,accept,if,accepted,media,types,is,empty,accepted,media,types,collections,singleton,list,media,type,all,else,media,type,sort,by,specificity,and,quality,accepted,media,types,boolean,match,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with,trace,match,accept,media,type,set,accepted,media,types,match,return,match,override,public,string,to,string,return,string,format,accept,s,media,type,set
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1487687241;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types._@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				List<MediaType> acceptedMediaTypes = headers.accept()__				if (acceptedMediaTypes.isEmpty()) {_					acceptedMediaTypes = Collections.singletonList(MediaType.ALL)__				}_				else {_					MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__				}_				boolean match = acceptedMediaTypes.stream()_						.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_								.anyMatch(acceptedMediaType::isCompatibleWith))__				traceMatch("Accept", mediaTypeSet, acceptedMediaTypes, match)__				return match__			}_			@Override_			public String toString() {_				return String.format("Accept: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,list,media,type,accepted,media,types,headers,accept,if,accepted,media,types,is,empty,accepted,media,types,collections,singleton,list,media,type,all,else,media,type,sort,by,specificity,and,quality,accepted,media,types,boolean,match,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with,trace,match,accept,media,type,set,accepted,media,types,match,return,match,override,public,string,to,string,return,string,format,accept,s,media,type,set
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1491557115;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types._@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				List<MediaType> acceptedMediaTypes = headers.accept()__				if (acceptedMediaTypes.isEmpty()) {_					acceptedMediaTypes = Collections.singletonList(MediaType.ALL)__				}_				else {_					MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__				}_				boolean match = acceptedMediaTypes.stream()_						.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_								.anyMatch(acceptedMediaType::isCompatibleWith))__				traceMatch("Accept", mediaTypeSet, acceptedMediaTypes, match)__				return match__			}_			@Override_			public String toString() {_				return String.format("Accept: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,list,media,type,accepted,media,types,headers,accept,if,accepted,media,types,is,empty,accepted,media,types,collections,singleton,list,media,type,all,else,media,type,sort,by,specificity,and,quality,accepted,media,types,boolean,match,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with,trace,match,accept,media,type,set,accepted,media,types,match,return,match,override,public,string,to,string,return,string,format,accept,s,media,type,set
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1492557464;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types._@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				List<MediaType> acceptedMediaTypes = headers.accept()__				if (acceptedMediaTypes.isEmpty()) {_					acceptedMediaTypes = Collections.singletonList(MediaType.ALL)__				}_				else {_					MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__				}_				boolean match = acceptedMediaTypes.stream()_						.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_								.anyMatch(acceptedMediaType::isCompatibleWith))__				traceMatch("Accept", mediaTypeSet, acceptedMediaTypes, match)__				return match__			}_			@Override_			public String toString() {_				return String.format("Accept: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,list,media,type,accepted,media,types,headers,accept,if,accepted,media,types,is,empty,accepted,media,types,collections,singleton,list,media,type,all,else,media,type,sort,by,specificity,and,quality,accepted,media,types,boolean,match,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with,trace,match,accept,media,type,set,accepted,media,types,match,return,match,override,public,string,to,string,return,string,format,accept,s,media,type,set
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1492591191;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types._@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				List<MediaType> acceptedMediaTypes = headers.accept()__				if (acceptedMediaTypes.isEmpty()) {_					acceptedMediaTypes = Collections.singletonList(MediaType.ALL)__				}_				else {_					MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__				}_				boolean match = acceptedMediaTypes.stream()_						.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_								.anyMatch(acceptedMediaType::isCompatibleWith))__				traceMatch("Accept", mediaTypeSet, acceptedMediaTypes, match)__				return match__			}_			@Override_			public String toString() {_				return String.format("Accept: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,list,media,type,accepted,media,types,headers,accept,if,accepted,media,types,is,empty,accepted,media,types,collections,singleton,list,media,type,all,else,media,type,sort,by,specificity,and,quality,accepted,media,types,boolean,match,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with,trace,match,accept,media,type,set,accepted,media,types,match,return,match,override,public,string,to,string,return,string,format,accept,s,media,type,set
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1494489320;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types._@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				List<MediaType> acceptedMediaTypes = headers.accept()__				if (acceptedMediaTypes.isEmpty()) {_					acceptedMediaTypes = Collections.singletonList(MediaType.ALL)__				}_				else {_					MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__				}_				boolean match = acceptedMediaTypes.stream()_						.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_								.anyMatch(acceptedMediaType::isCompatibleWith))__				traceMatch("Accept", mediaTypeSet, acceptedMediaTypes, match)__				return match__			}_			@Override_			public String toString() {_				return String.format("Accept: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,list,media,type,accepted,media,types,headers,accept,if,accepted,media,types,is,empty,accepted,media,types,collections,singleton,list,media,type,all,else,media,type,sort,by,specificity,and,quality,accepted,media,types,boolean,match,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with,trace,match,accept,media,type,set,accepted,media,types,match,return,match,override,public,string,to,string,return,string,format,accept,s,media,type,set
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1494939057;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types._@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				List<MediaType> acceptedMediaTypes = headers.accept()__				if (acceptedMediaTypes.isEmpty()) {_					acceptedMediaTypes = Collections.singletonList(MediaType.ALL)__				}_				else {_					MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__				}_				boolean match = acceptedMediaTypes.stream()_						.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_								.anyMatch(acceptedMediaType::isCompatibleWith))__				traceMatch("Accept", mediaTypeSet, acceptedMediaTypes, match)__				return match__			}_			@Override_			public String toString() {_				return String.format("Accept: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,list,media,type,accepted,media,types,headers,accept,if,accepted,media,types,is,empty,accepted,media,types,collections,singleton,list,media,type,all,else,media,type,sort,by,specificity,and,quality,accepted,media,types,boolean,match,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with,trace,match,accept,media,type,set,accepted,media,types,match,return,match,override,public,string,to,string,return,string,format,accept,s,media,type,set
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1495035625;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types._@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				List<MediaType> acceptedMediaTypes = headers.accept()__				if (acceptedMediaTypes.isEmpty()) {_					acceptedMediaTypes = Collections.singletonList(MediaType.ALL)__				}_				else {_					MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__				}_				boolean match = acceptedMediaTypes.stream()_						.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_								.anyMatch(acceptedMediaType::isCompatibleWith))__				traceMatch("Accept", mediaTypeSet, acceptedMediaTypes, match)__				return match__			}_			@Override_			public String toString() {_				return String.format("Accept: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,list,media,type,accepted,media,types,headers,accept,if,accepted,media,types,is,empty,accepted,media,types,collections,singleton,list,media,type,all,else,media,type,sort,by,specificity,and,quality,accepted,media,types,boolean,match,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with,trace,match,accept,media,type,set,accepted,media,types,match,return,match,override,public,string,to,string,return,string,format,accept,s,media,type,set
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1496837955;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types._@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				List<MediaType> acceptedMediaTypes = headers.accept()__				if (acceptedMediaTypes.isEmpty()) {_					acceptedMediaTypes = Collections.singletonList(MediaType.ALL)__				}_				else {_					MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__				}_				boolean match = acceptedMediaTypes.stream()_						.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_								.anyMatch(acceptedMediaType::isCompatibleWith))__				traceMatch("Accept", mediaTypeSet, acceptedMediaTypes, match)__				return match__			}_			@Override_			public String toString() {_				return String.format("Accept: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,list,media,type,accepted,media,types,headers,accept,if,accepted,media,types,is,empty,accepted,media,types,collections,singleton,list,media,type,all,else,media,type,sort,by,specificity,and,quality,accepted,media,types,boolean,match,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with,trace,match,accept,media,type,set,accepted,media,types,match,return,match,override,public,string,to,string,return,string,format,accept,s,media,type,set
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1498833097;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types._@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				List<MediaType> acceptedMediaTypes = headers.accept()__				if (acceptedMediaTypes.isEmpty()) {_					acceptedMediaTypes = Collections.singletonList(MediaType.ALL)__				}_				else {_					MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__				}_				boolean match = acceptedMediaTypes.stream()_						.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_								.anyMatch(acceptedMediaType::isCompatibleWith))__				traceMatch("Accept", mediaTypeSet, acceptedMediaTypes, match)__				return match__			}_			@Override_			public String toString() {_				return String.format("Accept: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,list,media,type,accepted,media,types,headers,accept,if,accepted,media,types,is,empty,accepted,media,types,collections,singleton,list,media,type,all,else,media,type,sort,by,specificity,and,quality,accepted,media,types,boolean,match,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with,trace,match,accept,media,type,set,accepted,media,types,match,return,match,override,public,string,to,string,return,string,format,accept,s,media,type,set
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1498861175;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types._@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				List<MediaType> acceptedMediaTypes = headers.accept()__				if (acceptedMediaTypes.isEmpty()) {_					acceptedMediaTypes = Collections.singletonList(MediaType.ALL)__				}_				else {_					MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__				}_				boolean match = acceptedMediaTypes.stream()_						.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_								.anyMatch(acceptedMediaType::isCompatibleWith))__				traceMatch("Accept", mediaTypeSet, acceptedMediaTypes, match)__				return match__			}_			@Override_			public String toString() {_				return String.format("Accept: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,list,media,type,accepted,media,types,headers,accept,if,accepted,media,types,is,empty,accepted,media,types,collections,singleton,list,media,type,all,else,media,type,sort,by,specificity,and,quality,accepted,media,types,boolean,match,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with,trace,match,accept,media,type,set,accepted,media,types,match,return,match,override,public,string,to,string,return,string,format,accept,s,media,type,set
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1499081790;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types._@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				List<MediaType> acceptedMediaTypes = headers.accept()__				if (acceptedMediaTypes.isEmpty()) {_					acceptedMediaTypes = Collections.singletonList(MediaType.ALL)__				}_				else {_					MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__				}_				boolean match = acceptedMediaTypes.stream()_						.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_								.anyMatch(acceptedMediaType::isCompatibleWith))__				traceMatch("Accept", mediaTypeSet, acceptedMediaTypes, match)__				return match__			}_			@Override_			public String toString() {_				return String.format("Accept: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,list,media,type,accepted,media,types,headers,accept,if,accepted,media,types,is,empty,accepted,media,types,collections,singleton,list,media,type,all,else,media,type,sort,by,specificity,and,quality,accepted,media,types,boolean,match,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with,trace,match,accept,media,type,set,accepted,media,types,match,return,match,override,public,string,to,string,return,string,format,accept,s,media,type,set
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1499091813;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types._@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				List<MediaType> acceptedMediaTypes = headers.accept()__				if (acceptedMediaTypes.isEmpty()) {_					acceptedMediaTypes = Collections.singletonList(MediaType.ALL)__				}_				else {_					MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__				}_				boolean match = acceptedMediaTypes.stream()_						.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_								.anyMatch(acceptedMediaType::isCompatibleWith))__				traceMatch("Accept", mediaTypeSet, acceptedMediaTypes, match)__				return match__			}_			@Override_			public String toString() {_				return String.format("Accept: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,list,media,type,accepted,media,types,headers,accept,if,accepted,media,types,is,empty,accepted,media,types,collections,singleton,list,media,type,all,else,media,type,sort,by,specificity,and,quality,accepted,media,types,boolean,match,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with,trace,match,accept,media,type,set,accepted,media,types,match,return,match,override,public,string,to,string,return,string,format,accept,s,media,type,set
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1499448036;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types._@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				List<MediaType> acceptedMediaTypes = headers.accept()__				if (acceptedMediaTypes.isEmpty()) {_					acceptedMediaTypes = Collections.singletonList(MediaType.ALL)__				}_				else {_					MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__				}_				boolean match = acceptedMediaTypes.stream()_						.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_								.anyMatch(acceptedMediaType::isCompatibleWith))__				traceMatch("Accept", mediaTypeSet, acceptedMediaTypes, match)__				return match__			}_			@Override_			public String toString() {_				return String.format("Accept: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,list,media,type,accepted,media,types,headers,accept,if,accepted,media,types,is,empty,accepted,media,types,collections,singleton,list,media,type,all,else,media,type,sort,by,specificity,and,quality,accepted,media,types,boolean,match,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with,trace,match,accept,media,type,set,accepted,media,types,match,return,match,override,public,string,to,string,return,string,format,accept,s,media,type,set
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1499780493;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types._@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				List<MediaType> acceptedMediaTypes = headers.accept()__				if (acceptedMediaTypes.isEmpty()) {_					acceptedMediaTypes = Collections.singletonList(MediaType.ALL)__				}_				else {_					MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__				}_				boolean match = acceptedMediaTypes.stream()_						.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_								.anyMatch(acceptedMediaType::isCompatibleWith))__				traceMatch("Accept", mediaTypeSet, acceptedMediaTypes, match)__				return match__			}_			@Override_			public String toString() {_				return String.format("Accept: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,list,media,type,accepted,media,types,headers,accept,if,accepted,media,types,is,empty,accepted,media,types,collections,singleton,list,media,type,all,else,media,type,sort,by,specificity,and,quality,accepted,media,types,boolean,match,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with,trace,match,accept,media,type,set,accepted,media,types,match,return,match,override,public,string,to,string,return,string,format,accept,s,media,type,set
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1500559500;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types._@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				List<MediaType> acceptedMediaTypes = headers.accept()__				if (acceptedMediaTypes.isEmpty()) {_					acceptedMediaTypes = Collections.singletonList(MediaType.ALL)__				}_				else {_					MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__				}_				boolean match = acceptedMediaTypes.stream()_						.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_								.anyMatch(acceptedMediaType::isCompatibleWith))__				traceMatch("Accept", mediaTypeSet, acceptedMediaTypes, match)__				return match__			}_			@Override_			public String toString() {_				return String.format("Accept: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,list,media,type,accepted,media,types,headers,accept,if,accepted,media,types,is,empty,accepted,media,types,collections,singleton,list,media,type,all,else,media,type,sort,by,specificity,and,quality,accepted,media,types,boolean,match,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with,trace,match,accept,media,type,set,accepted,media,types,match,return,match,override,public,string,to,string,return,string,format,accept,s,media,type,set
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1501155515;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types._@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				List<MediaType> acceptedMediaTypes = headers.accept()__				if (acceptedMediaTypes.isEmpty()) {_					acceptedMediaTypes = Collections.singletonList(MediaType.ALL)__				}_				else {_					MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__				}_				boolean match = acceptedMediaTypes.stream()_						.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_								.anyMatch(acceptedMediaType::isCompatibleWith))__				traceMatch("Accept", mediaTypeSet, acceptedMediaTypes, match)__				return match__			}_			@Override_			public String toString() {_				return String.format("Accept: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,list,media,type,accepted,media,types,headers,accept,if,accepted,media,types,is,empty,accepted,media,types,collections,singleton,list,media,type,all,else,media,type,sort,by,specificity,and,quality,accepted,media,types,boolean,match,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with,trace,match,accept,media,type,set,accepted,media,types,match,return,match,override,public,string,to,string,return,string,format,accept,s,media,type,set
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1501237594;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types._@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				List<MediaType> acceptedMediaTypes = headers.accept()__				if (acceptedMediaTypes.isEmpty()) {_					acceptedMediaTypes = Collections.singletonList(MediaType.ALL)__				}_				else {_					MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__				}_				boolean match = acceptedMediaTypes.stream()_						.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_								.anyMatch(acceptedMediaType::isCompatibleWith))__				traceMatch("Accept", mediaTypeSet, acceptedMediaTypes, match)__				return match__			}_			@Override_			public String toString() {_				return String.format("Accept: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,list,media,type,accepted,media,types,headers,accept,if,accepted,media,types,is,empty,accepted,media,types,collections,singleton,list,media,type,all,else,media,type,sort,by,specificity,and,quality,accepted,media,types,boolean,match,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with,trace,match,accept,media,type,set,accepted,media,types,match,return,match,override,public,string,to,string,return,string,format,accept,s,media,type,set
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1501679128;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types._@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				List<MediaType> acceptedMediaTypes = headers.accept()__				if (acceptedMediaTypes.isEmpty()) {_					acceptedMediaTypes = Collections.singletonList(MediaType.ALL)__				}_				else {_					MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__				}_				boolean match = acceptedMediaTypes.stream()_						.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_								.anyMatch(acceptedMediaType::isCompatibleWith))__				traceMatch("Accept", mediaTypeSet, acceptedMediaTypes, match)__				return match__			}_			@Override_			public String toString() {_				return String.format("Accept: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,list,media,type,accepted,media,types,headers,accept,if,accepted,media,types,is,empty,accepted,media,types,collections,singleton,list,media,type,all,else,media,type,sort,by,specificity,and,quality,accepted,media,types,boolean,match,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with,trace,match,accept,media,type,set,accepted,media,types,match,return,match,override,public,string,to,string,return,string,format,accept,s,media,type,set
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1501684266;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types._@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				List<MediaType> acceptedMediaTypes = headers.accept()__				if (acceptedMediaTypes.isEmpty()) {_					acceptedMediaTypes = Collections.singletonList(MediaType.ALL)__				}_				else {_					MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__				}_				boolean match = acceptedMediaTypes.stream()_						.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_								.anyMatch(acceptedMediaType::isCompatibleWith))__				traceMatch("Accept", mediaTypeSet, acceptedMediaTypes, match)__				return match__			}_			@Override_			public String toString() {_				return String.format("Accept: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,list,media,type,accepted,media,types,headers,accept,if,accepted,media,types,is,empty,accepted,media,types,collections,singleton,list,media,type,all,else,media,type,sort,by,specificity,and,quality,accepted,media,types,boolean,match,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with,trace,match,accept,media,type,set,accepted,media,types,match,return,match,override,public,string,to,string,return,string,format,accept,s,media,type,set
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1505477679;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types._@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				List<MediaType> acceptedMediaTypes = headers.accept()__				if (acceptedMediaTypes.isEmpty()) {_					acceptedMediaTypes = Collections.singletonList(MediaType.ALL)__				}_				else {_					MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__				}_				boolean match = acceptedMediaTypes.stream()_						.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_								.anyMatch(acceptedMediaType::isCompatibleWith))__				traceMatch("Accept", mediaTypeSet, acceptedMediaTypes, match)__				return match__			}_			@Override_			public String toString() {_				return String.format("Accept: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,list,media,type,accepted,media,types,headers,accept,if,accepted,media,types,is,empty,accepted,media,types,collections,singleton,list,media,type,all,else,media,type,sort,by,specificity,and,quality,accepted,media,types,boolean,match,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with,trace,match,accept,media,type,set,accepted,media,types,match,return,match,override,public,string,to,string,return,string,format,accept,s,media,type,set
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1506331747;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types._@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				List<MediaType> acceptedMediaTypes = headers.accept()__				if (acceptedMediaTypes.isEmpty()) {_					acceptedMediaTypes = Collections.singletonList(MediaType.ALL)__				}_				else {_					MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__				}_				boolean match = acceptedMediaTypes.stream()_						.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_								.anyMatch(acceptedMediaType::isCompatibleWith))__				traceMatch("Accept", mediaTypeSet, acceptedMediaTypes, match)__				return match__			}_			@Override_			public String toString() {_				return String.format("Accept: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,list,media,type,accepted,media,types,headers,accept,if,accepted,media,types,is,empty,accepted,media,types,collections,singleton,list,media,type,all,else,media,type,sort,by,specificity,and,quality,accepted,media,types,boolean,match,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with,trace,match,accept,media,type,set,accepted,media,types,match,return,match,override,public,string,to,string,return,string,format,accept,s,media,type,set
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1521795630;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types._@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				List<MediaType> acceptedMediaTypes = headers.accept()__				if (acceptedMediaTypes.isEmpty()) {_					acceptedMediaTypes = Collections.singletonList(MediaType.ALL)__				}_				else {_					MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__				}_				boolean match = acceptedMediaTypes.stream()_						.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_								.anyMatch(acceptedMediaType::isCompatibleWith))__				traceMatch("Accept", mediaTypeSet, acceptedMediaTypes, match)__				return match__			}_			@Override_			public String toString() {_				return String.format("Accept: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,list,media,type,accepted,media,types,headers,accept,if,accepted,media,types,is,empty,accepted,media,types,collections,singleton,list,media,type,all,else,media,type,sort,by,specificity,and,quality,accepted,media,types,boolean,match,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with,trace,match,accept,media,type,set,accepted,media,types,match,return,match,override,public,string,to,string,return,string,format,accept,s,media,type,set
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1523351625;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types._@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				List<MediaType> acceptedMediaTypes = headers.accept()__				if (acceptedMediaTypes.isEmpty()) {_					acceptedMediaTypes = Collections.singletonList(MediaType.ALL)__				}_				else {_					MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__				}_				boolean match = acceptedMediaTypes.stream()_						.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_								.anyMatch(acceptedMediaType::isCompatibleWith))__				traceMatch("Accept", mediaTypeSet, acceptedMediaTypes, match)__				return match__			}_			@Override_			public String toString() {_				return String.format("Accept: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,list,media,type,accepted,media,types,headers,accept,if,accepted,media,types,is,empty,accepted,media,types,collections,singleton,list,media,type,all,else,media,type,sort,by,specificity,and,quality,accepted,media,types,boolean,match,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with,trace,match,accept,media,type,set,accepted,media,types,match,return,match,override,public,string,to,string,return,string,format,accept,s,media,type,set
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1524865018;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types._@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				List<MediaType> acceptedMediaTypes = headers.accept()__				if (acceptedMediaTypes.isEmpty()) {_					acceptedMediaTypes = Collections.singletonList(MediaType.ALL)__				}_				else {_					MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__				}_				boolean match = acceptedMediaTypes.stream()_						.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_								.anyMatch(acceptedMediaType::isCompatibleWith))__				traceMatch("Accept", mediaTypeSet, acceptedMediaTypes, match)__				return match__			}_			@Override_			public String toString() {_				return String.format("Accept: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,list,media,type,accepted,media,types,headers,accept,if,accepted,media,types,is,empty,accepted,media,types,collections,singleton,list,media,type,all,else,media,type,sort,by,specificity,and,quality,accepted,media,types,boolean,match,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with,trace,match,accept,media,type,set,accepted,media,types,match,return,match,override,public,string,to,string,return,string,format,accept,s,media,type,set
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1525251240;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types._@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				List<MediaType> acceptedMediaTypes = headers.accept()__				if (acceptedMediaTypes.isEmpty()) {_					acceptedMediaTypes = Collections.singletonList(MediaType.ALL)__				}_				else {_					MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__				}_				boolean match = acceptedMediaTypes.stream()_						.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_								.anyMatch(acceptedMediaType::isCompatibleWith))__				traceMatch("Accept", mediaTypeSet, acceptedMediaTypes, match)__				return match__			}_			@Override_			public String toString() {_				return String.format("Accept: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,list,media,type,accepted,media,types,headers,accept,if,accepted,media,types,is,empty,accepted,media,types,collections,singleton,list,media,type,all,else,media,type,sort,by,specificity,and,quality,accepted,media,types,boolean,match,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with,trace,match,accept,media,type,set,accepted,media,types,match,return,match,override,public,string,to,string,return,string,format,accept,s,media,type,set
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1525338166;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types._@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				List<MediaType> acceptedMediaTypes = headers.accept()__				if (acceptedMediaTypes.isEmpty()) {_					acceptedMediaTypes = Collections.singletonList(MediaType.ALL)__				}_				else {_					MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__				}_				boolean match = acceptedMediaTypes.stream()_						.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_								.anyMatch(acceptedMediaType::isCompatibleWith))__				traceMatch("Accept", mediaTypeSet, acceptedMediaTypes, match)__				return match__			}_			@Override_			public String toString() {_				return String.format("Accept: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,list,media,type,accepted,media,types,headers,accept,if,accepted,media,types,is,empty,accepted,media,types,collections,singleton,list,media,type,all,else,media,type,sort,by,specificity,and,quality,accepted,media,types,boolean,match,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with,trace,match,accept,media,type,set,accepted,media,types,match,return,match,override,public,string,to,string,return,string,format,accept,s,media,type,set
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1526462061;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types._@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				List<MediaType> acceptedMediaTypes = headers.accept()__				if (acceptedMediaTypes.isEmpty()) {_					acceptedMediaTypes = Collections.singletonList(MediaType.ALL)__				}_				else {_					MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__				}_				boolean match = acceptedMediaTypes.stream()_						.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_								.anyMatch(acceptedMediaType::isCompatibleWith))__				traceMatch("Accept", mediaTypeSet, acceptedMediaTypes, match)__				return match__			}_			@Override_			public String toString() {_				return String.format("Accept: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,list,media,type,accepted,media,types,headers,accept,if,accepted,media,types,is,empty,accepted,media,types,collections,singleton,list,media,type,all,else,media,type,sort,by,specificity,and,quality,accepted,media,types,boolean,match,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with,trace,match,accept,media,type,set,accepted,media,types,match,return,match,override,public,string,to,string,return,string,format,accept,s,media,type,set
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1526674893;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types._@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				List<MediaType> acceptedMediaTypes = headers.accept()__				if (acceptedMediaTypes.isEmpty()) {_					acceptedMediaTypes = Collections.singletonList(MediaType.ALL)__				}_				else {_					MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__				}_				boolean match = acceptedMediaTypes.stream()_						.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_								.anyMatch(acceptedMediaType::isCompatibleWith))__				traceMatch("Accept", mediaTypeSet, acceptedMediaTypes, match)__				return match__			}_			@Override_			public String toString() {_				return String.format("Accept: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,list,media,type,accepted,media,types,headers,accept,if,accepted,media,types,is,empty,accepted,media,types,collections,singleton,list,media,type,all,else,media,type,sort,by,specificity,and,quality,accepted,media,types,boolean,match,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with,trace,match,accept,media,type,set,accepted,media,types,match,return,match,override,public,string,to,string,return,string,format,accept,s,media,type,set
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1529721864;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types._@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				List<MediaType> acceptedMediaTypes = headers.accept()__				if (acceptedMediaTypes.isEmpty()) {_					acceptedMediaTypes = Collections.singletonList(MediaType.ALL)__				}_				else {_					MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__				}_				boolean match = acceptedMediaTypes.stream()_						.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_								.anyMatch(acceptedMediaType::isCompatibleWith))__				traceMatch("Accept", mediaTypeSet, acceptedMediaTypes, match)__				return match__			}_			@Override_			public String toString() {_				return String.format("Accept: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,list,media,type,accepted,media,types,headers,accept,if,accepted,media,types,is,empty,accepted,media,types,collections,singleton,list,media,type,all,else,media,type,sort,by,specificity,and,quality,accepted,media,types,boolean,match,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with,trace,match,accept,media,type,set,accepted,media,types,match,return,match,override,public,string,to,string,return,string,format,accept,s,media,type,set
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1530174524;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types._@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				List<MediaType> acceptedMediaTypes = headers.accept()__				if (acceptedMediaTypes.isEmpty()) {_					acceptedMediaTypes = Collections.singletonList(MediaType.ALL)__				}_				else {_					MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__				}_				boolean match = acceptedMediaTypes.stream()_						.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_								.anyMatch(acceptedMediaType::isCompatibleWith))__				traceMatch("Accept", mediaTypeSet, acceptedMediaTypes, match)__				return match__			}_			@Override_			public String toString() {_				return String.format("Accept: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,list,media,type,accepted,media,types,headers,accept,if,accepted,media,types,is,empty,accepted,media,types,collections,singleton,list,media,type,all,else,media,type,sort,by,specificity,and,quality,accepted,media,types,boolean,match,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with,trace,match,accept,media,type,set,accepted,media,types,match,return,match,override,public,string,to,string,return,string,format,accept,s,media,type,set
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1530871276;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types._@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				List<MediaType> acceptedMediaTypes = headers.accept()__				if (acceptedMediaTypes.isEmpty()) {_					acceptedMediaTypes = Collections.singletonList(MediaType.ALL)__				}_				else {_					MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__				}_				boolean match = acceptedMediaTypes.stream()_						.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_								.anyMatch(acceptedMediaType::isCompatibleWith))__				traceMatch("Accept", mediaTypeSet, acceptedMediaTypes, match)__				return match__			}_			@Override_			public String toString() {_				return String.format("Accept: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,list,media,type,accepted,media,types,headers,accept,if,accepted,media,types,is,empty,accepted,media,types,collections,singleton,list,media,type,all,else,media,type,sort,by,specificity,and,quality,accepted,media,types,boolean,match,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with,trace,match,accept,media,type,set,accepted,media,types,match,return,match,override,public,string,to,string,return,string,format,accept,s,media,type,set
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1530877097;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types._@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				List<MediaType> acceptedMediaTypes = headers.accept()__				if (acceptedMediaTypes.isEmpty()) {_					acceptedMediaTypes = Collections.singletonList(MediaType.ALL)__				}_				else {_					MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__				}_				boolean match = acceptedMediaTypes.stream()_						.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_								.anyMatch(acceptedMediaType::isCompatibleWith))__				traceMatch("Accept", mediaTypeSet, acceptedMediaTypes, match)__				return match__			}_			@Override_			public String toString() {_				return String.format("Accept: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,list,media,type,accepted,media,types,headers,accept,if,accepted,media,types,is,empty,accepted,media,types,collections,singleton,list,media,type,all,else,media,type,sort,by,specificity,and,quality,accepted,media,types,boolean,match,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with,trace,match,accept,media,type,set,accepted,media,types,match,return,match,override,public,string,to,string,return,string,format,accept,s,media,type,set
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1532520962;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types._@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				List<MediaType> acceptedMediaTypes = headers.accept()__				if (acceptedMediaTypes.isEmpty()) {_					acceptedMediaTypes = Collections.singletonList(MediaType.ALL)__				}_				else {_					MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__				}_				boolean match = acceptedMediaTypes.stream()_						.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_								.anyMatch(acceptedMediaType::isCompatibleWith))__				traceMatch("Accept", mediaTypeSet, acceptedMediaTypes, match)__				return match__			}_			@Override_			public String toString() {_				return String.format("Accept: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,list,media,type,accepted,media,types,headers,accept,if,accepted,media,types,is,empty,accepted,media,types,collections,singleton,list,media,type,all,else,media,type,sort,by,specificity,and,quality,accepted,media,types,boolean,match,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with,trace,match,accept,media,type,set,accepted,media,types,match,return,match,override,public,string,to,string,return,string,format,accept,s,media,type,set
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1537173292;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types._@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				List<MediaType> acceptedMediaTypes = headers.accept()__				if (acceptedMediaTypes.isEmpty()) {_					acceptedMediaTypes = Collections.singletonList(MediaType.ALL)__				}_				else {_					MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__				}_				boolean match = acceptedMediaTypes.stream()_						.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_								.anyMatch(acceptedMediaType::isCompatibleWith))__				traceMatch("Accept", mediaTypeSet, acceptedMediaTypes, match)__				return match__			}_			@Override_			public String toString() {_				return String.format("Accept: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,list,media,type,accepted,media,types,headers,accept,if,accepted,media,types,is,empty,accepted,media,types,collections,singleton,list,media,type,all,else,media,type,sort,by,specificity,and,quality,accepted,media,types,boolean,match,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with,trace,match,accept,media,type,set,accepted,media,types,match,return,match,override,public,string,to,string,return,string,format,accept,s,media,type,set
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1537188605;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types._@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				List<MediaType> acceptedMediaTypes = headers.accept()__				if (acceptedMediaTypes.isEmpty()) {_					acceptedMediaTypes = Collections.singletonList(MediaType.ALL)__				}_				else {_					MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__				}_				boolean match = acceptedMediaTypes.stream()_						.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_								.anyMatch(acceptedMediaType::isCompatibleWith))__				traceMatch("Accept", mediaTypeSet, acceptedMediaTypes, match)__				return match__			}_			@Override_			public String toString() {_				return String.format("Accept: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,list,media,type,accepted,media,types,headers,accept,if,accepted,media,types,is,empty,accepted,media,types,collections,singleton,list,media,type,all,else,media,type,sort,by,specificity,and,quality,accepted,media,types,boolean,match,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with,trace,match,accept,media,type,set,accepted,media,types,match,return,match,override,public,string,to,string,return,string,format,accept,s,media,type,set
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1538658936;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types._@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				List<MediaType> acceptedMediaTypes = headers.accept()__				if (acceptedMediaTypes.isEmpty()) {_					acceptedMediaTypes = Collections.singletonList(MediaType.ALL)__				}_				else {_					MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__				}_				boolean match = acceptedMediaTypes.stream()_						.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_								.anyMatch(acceptedMediaType::isCompatibleWith))__				traceMatch("Accept", mediaTypeSet, acceptedMediaTypes, match)__				return match__			}_			@Override_			public String toString() {_				return String.format("Accept: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,list,media,type,accepted,media,types,headers,accept,if,accepted,media,types,is,empty,accepted,media,types,collections,singleton,list,media,type,all,else,media,type,sort,by,specificity,and,quality,accepted,media,types,boolean,match,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with,trace,match,accept,media,type,set,accepted,media,types,match,return,match,override,public,string,to,string,return,string,format,accept,s,media,type,set
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1539866925;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types._@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				List<MediaType> acceptedMediaTypes = headers.accept()__				if (acceptedMediaTypes.isEmpty()) {_					acceptedMediaTypes = Collections.singletonList(MediaType.ALL)__				}_				else {_					MediaType.sortBySpecificityAndQuality(acceptedMediaTypes)__				}_				boolean match = acceptedMediaTypes.stream()_						.anyMatch(acceptedMediaType -> mediaTypeSet.stream()_								.anyMatch(acceptedMediaType::isCompatibleWith))__				traceMatch("Accept", mediaTypeSet, acceptedMediaTypes, match)__				return match__			}_			@Override_			public String toString() {_				return String.format("Accept: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,list,media,type,accepted,media,types,headers,accept,if,accepted,media,types,is,empty,accepted,media,types,collections,singleton,list,media,type,all,else,media,type,sort,by,specificity,and,quality,accepted,media,types,boolean,match,accepted,media,types,stream,any,match,accepted,media,type,media,type,set,stream,any,match,accepted,media,type,is,compatible,with,trace,match,accept,media,type,set,accepted,media,types,match,return,match,override,public,string,to,string,return,string,format,accept,s,media,type,set
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1542719117;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types._@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		return new AcceptPredicate(mediaTypes)__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,return,new,accept,predicate,media,types
RequestPredicates -> public static RequestPredicate accept(MediaType... mediaTypes);1544625213;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#accept() accept} header is_{@linkplain MediaType#isCompatibleWith(MediaType) compatible} with any of the given media types._@param mediaTypes the media types to match the request's accept header against_@return a predicate that tests the request's accept header against the given media types;public static RequestPredicate accept(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		return new AcceptPredicate(mediaTypes)__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,accept,accept,header,is,linkplain,media,type,is,compatible,with,media,type,compatible,with,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,accept,header,against,return,a,predicate,that,tests,the,request,s,accept,header,against,the,given,media,types;public,static,request,predicate,accept,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,return,new,accept,predicate,media,types
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1485986572;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate.__@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeaderPredicates(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,header,predicates,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1486634978;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate.__@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeaderPredicates(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,header,predicates,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1486996670;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate.__@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1487000643;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate.__@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1487070708;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate.__@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1487153168;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate.__@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1487236624;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate.__@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1487584763;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate.__@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1487601624;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate.__@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1487681187;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate.__@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1487687241;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate._@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1491557115;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate._@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1492557464;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate._@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1492591191;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate._@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1494489320;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate._@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1494939057;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate._@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1495035625;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate._@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1496837955;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate._@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1498833097;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate._@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1498861175;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate._@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1499081790;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate._@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1499091813;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate._@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1499448036;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate._@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1499780493;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate._@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1500559500;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate._@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1501155515;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate._@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1501237594;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate._@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1501679128;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate._@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1501684266;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate._@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1505477679;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate._@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1506331747;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate._@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1521795630;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate._@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1523351625;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate._@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1524865018;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate._@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1525251240;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate._@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1525338166;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate._@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1526462061;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate._@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1526674893;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate._@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1529721864;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate._@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1530174524;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate._@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1530871276;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate._@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1530877097;Return a {@code RequestPredicate} that tests the request's headers against the given headers predicate._@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1532520962;Return a {@code RequestPredicate} that tests the request's headers_against the given headers predicate._@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1537173292;Return a {@code RequestPredicate} that tests the request's headers_against the given headers predicate._@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1537188605;Return a {@code RequestPredicate} that tests the request's headers_against the given headers predicate._@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1538658936;Return a {@code RequestPredicate} that tests the request's headers_against the given headers predicate._@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1539866925;Return a {@code RequestPredicate} that tests the request's headers_against the given headers predicate._@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1542719117;Return a {@code RequestPredicate} that tests the request's headers_against the given headers predicate._@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate);1544625213;Return a {@code RequestPredicate} that tests the request's headers_against the given headers predicate._@param headersPredicate a predicate that tests against the request headers_@return a predicate that tests against the given header predicate;public static RequestPredicate headers(Predicate<ServerRequest.Headers> headersPredicate) {_		return new HeadersPredicate(headersPredicate)__	};return,a,code,request,predicate,that,tests,the,request,s,headers,against,the,given,headers,predicate,param,headers,predicate,a,predicate,that,tests,against,the,request,headers,return,a,predicate,that,tests,against,the,given,header,predicate;public,static,request,predicate,headers,predicate,server,request,headers,headers,predicate,return,new,headers,predicate,headers,predicate
RequestPredicates -> public static RequestPredicate methods(HttpMethod... httpMethods);1530871276;Return a {@code RequestPredicate} that matches if the request's HTTP method is equal to one_the of the given methods._@param httpMethods the HTTP methods to match against_@return a predicate that tests against the given HTTP methods_@since 5.1;public static RequestPredicate methods(HttpMethod... httpMethods) {_		return new HttpMethodPredicate(httpMethods)__	};return,a,code,request,predicate,that,matches,if,the,request,s,http,method,is,equal,to,one,the,of,the,given,methods,param,http,methods,the,http,methods,to,match,against,return,a,predicate,that,tests,against,the,given,http,methods,since,5,1;public,static,request,predicate,methods,http,method,http,methods,return,new,http,method,predicate,http,methods
RequestPredicates -> public static RequestPredicate methods(HttpMethod... httpMethods);1530877097;Return a {@code RequestPredicate} that matches if the request's HTTP method is equal to one_the of the given methods._@param httpMethods the HTTP methods to match against_@return a predicate that tests against the given HTTP methods_@since 5.1;public static RequestPredicate methods(HttpMethod... httpMethods) {_		return new HttpMethodPredicate(httpMethods)__	};return,a,code,request,predicate,that,matches,if,the,request,s,http,method,is,equal,to,one,the,of,the,given,methods,param,http,methods,the,http,methods,to,match,against,return,a,predicate,that,tests,against,the,given,http,methods,since,5,1;public,static,request,predicate,methods,http,method,http,methods,return,new,http,method,predicate,http,methods
RequestPredicates -> public static RequestPredicate methods(HttpMethod... httpMethods);1532520962;Return a {@code RequestPredicate} that matches if the request's_HTTP method is equal to one the of the given methods._@param httpMethods the HTTP methods to match against_@return a predicate that tests against the given HTTP methods_@since 5.1;public static RequestPredicate methods(HttpMethod... httpMethods) {_		return new HttpMethodPredicate(httpMethods)__	};return,a,code,request,predicate,that,matches,if,the,request,s,http,method,is,equal,to,one,the,of,the,given,methods,param,http,methods,the,http,methods,to,match,against,return,a,predicate,that,tests,against,the,given,http,methods,since,5,1;public,static,request,predicate,methods,http,method,http,methods,return,new,http,method,predicate,http,methods
RequestPredicates -> public static RequestPredicate methods(HttpMethod... httpMethods);1537173292;Return a {@code RequestPredicate} that matches if the request's_HTTP method is equal to one the of the given methods._@param httpMethods the HTTP methods to match against_@return a predicate that tests against the given HTTP methods_@since 5.1;public static RequestPredicate methods(HttpMethod... httpMethods) {_		return new HttpMethodPredicate(httpMethods)__	};return,a,code,request,predicate,that,matches,if,the,request,s,http,method,is,equal,to,one,the,of,the,given,methods,param,http,methods,the,http,methods,to,match,against,return,a,predicate,that,tests,against,the,given,http,methods,since,5,1;public,static,request,predicate,methods,http,method,http,methods,return,new,http,method,predicate,http,methods
RequestPredicates -> public static RequestPredicate methods(HttpMethod... httpMethods);1537188605;Return a {@code RequestPredicate} that matches if the request's_HTTP method is equal to one the of the given methods._@param httpMethods the HTTP methods to match against_@return a predicate that tests against the given HTTP methods_@since 5.1;public static RequestPredicate methods(HttpMethod... httpMethods) {_		return new HttpMethodPredicate(httpMethods)__	};return,a,code,request,predicate,that,matches,if,the,request,s,http,method,is,equal,to,one,the,of,the,given,methods,param,http,methods,the,http,methods,to,match,against,return,a,predicate,that,tests,against,the,given,http,methods,since,5,1;public,static,request,predicate,methods,http,method,http,methods,return,new,http,method,predicate,http,methods
RequestPredicates -> public static RequestPredicate methods(HttpMethod... httpMethods);1538658936;Return a {@code RequestPredicate} that matches if the request's_HTTP method is equal to one the of the given methods._@param httpMethods the HTTP methods to match against_@return a predicate that tests against the given HTTP methods_@since 5.1;public static RequestPredicate methods(HttpMethod... httpMethods) {_		return new HttpMethodPredicate(httpMethods)__	};return,a,code,request,predicate,that,matches,if,the,request,s,http,method,is,equal,to,one,the,of,the,given,methods,param,http,methods,the,http,methods,to,match,against,return,a,predicate,that,tests,against,the,given,http,methods,since,5,1;public,static,request,predicate,methods,http,method,http,methods,return,new,http,method,predicate,http,methods
RequestPredicates -> public static RequestPredicate methods(HttpMethod... httpMethods);1539866925;Return a {@code RequestPredicate} that matches if the request's_HTTP method is equal to one the of the given methods._@param httpMethods the HTTP methods to match against_@return a predicate that tests against the given HTTP methods_@since 5.1;public static RequestPredicate methods(HttpMethod... httpMethods) {_		return new HttpMethodPredicate(httpMethods)__	};return,a,code,request,predicate,that,matches,if,the,request,s,http,method,is,equal,to,one,the,of,the,given,methods,param,http,methods,the,http,methods,to,match,against,return,a,predicate,that,tests,against,the,given,http,methods,since,5,1;public,static,request,predicate,methods,http,method,http,methods,return,new,http,method,predicate,http,methods
RequestPredicates -> public static RequestPredicate methods(HttpMethod... httpMethods);1542719117;Return a {@code RequestPredicate} that matches if the request's_HTTP method is equal to one the of the given methods._@param httpMethods the HTTP methods to match against_@return a predicate that tests against the given HTTP methods_@since 5.1;public static RequestPredicate methods(HttpMethod... httpMethods) {_		return new HttpMethodPredicate(httpMethods)__	};return,a,code,request,predicate,that,matches,if,the,request,s,http,method,is,equal,to,one,the,of,the,given,methods,param,http,methods,the,http,methods,to,match,against,return,a,predicate,that,tests,against,the,given,http,methods,since,5,1;public,static,request,predicate,methods,http,method,http,methods,return,new,http,method,predicate,http,methods
RequestPredicates -> public static RequestPredicate methods(HttpMethod... httpMethods);1544625213;Return a {@code RequestPredicate} that matches if the request's_HTTP method is equal to one the of the given methods._@param httpMethods the HTTP methods to match against_@return a predicate that tests against the given HTTP methods_@since 5.1;public static RequestPredicate methods(HttpMethod... httpMethods) {_		return new HttpMethodPredicate(httpMethods)__	};return,a,code,request,predicate,that,matches,if,the,request,s,http,method,is,equal,to,one,the,of,the,given,methods,param,http,methods,the,http,methods,to,match,against,return,a,predicate,that,tests,against,the,given,http,methods,since,5,1;public,static,request,predicate,methods,http,method,http,methods,return,new,http,method,predicate,http,methods
RequestPredicates -> Visitor -> void path(String pattern)_;1542719117;Receive notification of an path predicate._@param pattern the path pattern that makes up the predicate_@see RequestPredicates#path(String);void path(String pattern)_;receive,notification,of,an,path,predicate,param,pattern,the,path,pattern,that,makes,up,the,predicate,see,request,predicates,path,string;void,path,string,pattern
RequestPredicates -> Visitor -> void path(String pattern)_;1544625213;Receive notification of an path predicate._@param pattern the path pattern that makes up the predicate_@see RequestPredicates#path(String);void path(String pattern)_;receive,notification,of,an,path,predicate,param,pattern,the,path,pattern,that,makes,up,the,predicate,see,request,predicates,path,string;void,path,string,pattern
RequestPredicates -> Visitor -> void startNegate()_;1542719117;Receive first notification of a negated predicate._The first subsequent notification will contain the negated predicated, followed_by {@link #endNegate()}._@see RequestPredicate#negate();void startNegate()_;receive,first,notification,of,a,negated,predicate,the,first,subsequent,notification,will,contain,the,negated,predicated,followed,by,link,end,negate,see,request,predicate,negate;void,start,negate
RequestPredicates -> Visitor -> void startNegate()_;1544625213;Receive first notification of a negated predicate._The first subsequent notification will contain the negated predicated, followed_by {@link #endNegate()}._@see RequestPredicate#negate();void startNegate()_;receive,first,notification,of,a,negated,predicate,the,first,subsequent,notification,will,contain,the,negated,predicated,followed,by,link,end,negate,see,request,predicate,negate;void,start,negate
RequestPredicates -> public static RequestPredicate xml();1486996670;Return a {@code RequestPredicate} that matches XML requests. The returned predicate_matches if the request has {@code text/xml} or {@code application/xml} in the {@code Accept}_header, or if the request path has a {@code .xml} file extension.__@return a predicate that matches XML requests_@see #accept(MediaType...)_@see #pathExtension(String);public static RequestPredicate xml() {_		return accept(MediaType.TEXT_XML)_				.or(accept(MediaType.APPLICATION_XML))_				.or(pathExtension("xml"))__	};return,a,code,request,predicate,that,matches,xml,requests,the,returned,predicate,matches,if,the,request,has,code,text,xml,or,code,application,xml,in,the,code,accept,header,or,if,the,request,path,has,a,code,xml,file,extension,return,a,predicate,that,matches,xml,requests,see,accept,media,type,see,path,extension,string;public,static,request,predicate,xml,return,accept,media,type,or,accept,media,type,or,path,extension,xml
RequestPredicates -> public static RequestPredicate xml();1487000643;Return a {@code RequestPredicate} that matches XML requests. The returned predicate_matches if the request has {@code text/xml} or {@code application/xml} in the {@code Accept}_header, or if the request path has a {@code .xml} file extension.__@return a predicate that matches XML requests_@see #accept(MediaType...)_@see #pathExtension(String);public static RequestPredicate xml() {_		return accept(MediaType.TEXT_XML)_				.or(accept(MediaType.APPLICATION_XML))_				.or(pathExtension("xml"))__	};return,a,code,request,predicate,that,matches,xml,requests,the,returned,predicate,matches,if,the,request,has,code,text,xml,or,code,application,xml,in,the,code,accept,header,or,if,the,request,path,has,a,code,xml,file,extension,return,a,predicate,that,matches,xml,requests,see,accept,media,type,see,path,extension,string;public,static,request,predicate,xml,return,accept,media,type,or,accept,media,type,or,path,extension,xml
RequestPredicates -> public static RequestPredicate xml();1487070708;Return a {@code RequestPredicate} that matches XML requests. The returned predicate_matches if the request has {@code text/xml} or {@code application/xml} in the {@code Accept}_header, or if the request path has a {@code .xml} file extension.__@return a predicate that matches XML requests_@see #accept(MediaType...)_@see #pathExtension(String);public static RequestPredicate xml() {_		return accept(MediaType.TEXT_XML)_				.or(accept(MediaType.APPLICATION_XML))_				.or(pathExtension("xml"))__	};return,a,code,request,predicate,that,matches,xml,requests,the,returned,predicate,matches,if,the,request,has,code,text,xml,or,code,application,xml,in,the,code,accept,header,or,if,the,request,path,has,a,code,xml,file,extension,return,a,predicate,that,matches,xml,requests,see,accept,media,type,see,path,extension,string;public,static,request,predicate,xml,return,accept,media,type,or,accept,media,type,or,path,extension,xml
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1486996670;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(extension::equalsIgnoreCase)__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,extension,equals,ignore,case
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1487000643;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(extension::equalsIgnoreCase)__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,extension,equals,ignore,case
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1487070708;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(extension::equalsIgnoreCase)__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,extension,equals,ignore,case
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1487153168;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(extension::equalsIgnoreCase)__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,extension,equals,ignore,case
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1487236624;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(extension::equalsIgnoreCase)__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,extension,equals,ignore,case
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1487584763;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(pathExtension -> {_			boolean match = extension.equalsIgnoreCase(pathExtension)__			traceMatch("Extension", extension, pathExtension, match)__			return match__		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,path,extension,boolean,match,extension,equals,ignore,case,path,extension,trace,match,extension,extension,path,extension,match,return,match
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1487601624;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(pathExtension -> {_			boolean match = extension.equalsIgnoreCase(pathExtension)__			traceMatch("Extension", extension, pathExtension, match)__			return match__		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,path,extension,boolean,match,extension,equals,ignore,case,path,extension,trace,match,extension,extension,path,extension,match,return,match
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1487681187;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(pathExtension -> {_			boolean match = extension.equalsIgnoreCase(pathExtension)__			traceMatch("Extension", extension, pathExtension, match)__			return match__		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,path,extension,boolean,match,extension,equals,ignore,case,path,extension,trace,match,extension,extension,path,extension,match,return,match
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1487687241;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(pathExtension -> {_			boolean match = extension.equalsIgnoreCase(pathExtension)__			traceMatch("Extension", extension, pathExtension, match)__			return match__		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,path,extension,boolean,match,extension,equals,ignore,case,path,extension,trace,match,extension,extension,path,extension,match,return,match
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1491557115;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(pathExtension -> {_			boolean match = extension.equalsIgnoreCase(pathExtension)__			traceMatch("Extension", extension, pathExtension, match)__			return match__		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,path,extension,boolean,match,extension,equals,ignore,case,path,extension,trace,match,extension,extension,path,extension,match,return,match
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1492557464;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(pathExtension -> {_			boolean match = extension.equalsIgnoreCase(pathExtension)__			traceMatch("Extension", extension, pathExtension, match)__			return match__		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,path,extension,boolean,match,extension,equals,ignore,case,path,extension,trace,match,extension,extension,path,extension,match,return,match
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1492591191;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(pathExtension -> {_			boolean match = extension.equalsIgnoreCase(pathExtension)__			traceMatch("Extension", extension, pathExtension, match)__			return match__		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,path,extension,boolean,match,extension,equals,ignore,case,path,extension,trace,match,extension,extension,path,extension,match,return,match
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1494489320;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(pathExtension -> {_			boolean match = extension.equalsIgnoreCase(pathExtension)__			traceMatch("Extension", extension, pathExtension, match)__			return match__		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,path,extension,boolean,match,extension,equals,ignore,case,path,extension,trace,match,extension,extension,path,extension,match,return,match
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1494939057;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(pathExtension -> {_			boolean match = extension.equalsIgnoreCase(pathExtension)__			traceMatch("Extension", extension, pathExtension, match)__			return match__		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,path,extension,boolean,match,extension,equals,ignore,case,path,extension,trace,match,extension,extension,path,extension,match,return,match
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1495035625;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(pathExtension -> {_			boolean match = extension.equalsIgnoreCase(pathExtension)__			traceMatch("Extension", extension, pathExtension, match)__			return match__		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,path,extension,boolean,match,extension,equals,ignore,case,path,extension,trace,match,extension,extension,path,extension,match,return,match
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1496837955;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(pathExtension -> {_			boolean match = extension.equalsIgnoreCase(pathExtension)__			traceMatch("Extension", extension, pathExtension, match)__			return match__		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,path,extension,boolean,match,extension,equals,ignore,case,path,extension,trace,match,extension,extension,path,extension,match,return,match
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1498833097;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(pathExtension -> {_			boolean match = extension.equalsIgnoreCase(pathExtension)__			traceMatch("Extension", extension, pathExtension, match)__			return match__		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,path,extension,boolean,match,extension,equals,ignore,case,path,extension,trace,match,extension,extension,path,extension,match,return,match
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1498861175;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(pathExtension -> {_			boolean match = extension.equalsIgnoreCase(pathExtension)__			traceMatch("Extension", extension, pathExtension, match)__			return match__		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,path,extension,boolean,match,extension,equals,ignore,case,path,extension,trace,match,extension,extension,path,extension,match,return,match
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1499081790;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(pathExtension -> {_			boolean match = extension.equalsIgnoreCase(pathExtension)__			traceMatch("Extension", extension, pathExtension, match)__			return match__		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,path,extension,boolean,match,extension,equals,ignore,case,path,extension,trace,match,extension,extension,path,extension,match,return,match
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1499091813;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(pathExtension -> {_			boolean match = extension.equalsIgnoreCase(pathExtension)__			traceMatch("Extension", extension, pathExtension, match)__			return match__		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,path,extension,boolean,match,extension,equals,ignore,case,path,extension,trace,match,extension,extension,path,extension,match,return,match
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1499448036;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(pathExtension -> {_			boolean match = extension.equalsIgnoreCase(pathExtension)__			traceMatch("Extension", extension, pathExtension, match)__			return match__		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,path,extension,boolean,match,extension,equals,ignore,case,path,extension,trace,match,extension,extension,path,extension,match,return,match
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1499780493;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(pathExtension -> {_			boolean match = extension.equalsIgnoreCase(pathExtension)__			traceMatch("Extension", extension, pathExtension, match)__			return match__		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,path,extension,boolean,match,extension,equals,ignore,case,path,extension,trace,match,extension,extension,path,extension,match,return,match
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1500559500;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(pathExtension -> {_			boolean match = extension.equalsIgnoreCase(pathExtension)__			traceMatch("Extension", extension, pathExtension, match)__			return match__		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,path,extension,boolean,match,extension,equals,ignore,case,path,extension,trace,match,extension,extension,path,extension,match,return,match
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1501155515;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(pathExtension -> {_			boolean match = extension.equalsIgnoreCase(pathExtension)__			traceMatch("Extension", extension, pathExtension, match)__			return match__		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,path,extension,boolean,match,extension,equals,ignore,case,path,extension,trace,match,extension,extension,path,extension,match,return,match
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1501237594;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(pathExtension -> {_			boolean match = extension.equalsIgnoreCase(pathExtension)__			traceMatch("Extension", extension, pathExtension, match)__			return match__		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,path,extension,boolean,match,extension,equals,ignore,case,path,extension,trace,match,extension,extension,path,extension,match,return,match
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1501679128;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(pathExtension -> {_			boolean match = extension.equalsIgnoreCase(pathExtension)__			traceMatch("Extension", extension, pathExtension, match)__			return match__		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,path,extension,boolean,match,extension,equals,ignore,case,path,extension,trace,match,extension,extension,path,extension,match,return,match
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1501684266;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(pathExtension -> {_			boolean match = extension.equalsIgnoreCase(pathExtension)__			traceMatch("Extension", extension, pathExtension, match)__			return match__		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,path,extension,boolean,match,extension,equals,ignore,case,path,extension,trace,match,extension,extension,path,extension,match,return,match
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1505477679;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(pathExtension -> {_			boolean match = extension.equalsIgnoreCase(pathExtension)__			traceMatch("Extension", extension, pathExtension, match)__			return match__		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,path,extension,boolean,match,extension,equals,ignore,case,path,extension,trace,match,extension,extension,path,extension,match,return,match
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1506331747;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(pathExtension -> {_			boolean match = extension.equalsIgnoreCase(pathExtension)__			traceMatch("Extension", extension, pathExtension, match)__			return match__		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,path,extension,boolean,match,extension,equals,ignore,case,path,extension,trace,match,extension,extension,path,extension,match,return,match
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1521795630;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(pathExtension -> {_			boolean match = extension.equalsIgnoreCase(pathExtension)__			traceMatch("Extension", extension, pathExtension, match)__			return match__		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,path,extension,boolean,match,extension,equals,ignore,case,path,extension,trace,match,extension,extension,path,extension,match,return,match
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1523351625;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(pathExtension -> {_			boolean match = extension.equalsIgnoreCase(pathExtension)__			traceMatch("Extension", extension, pathExtension, match)__			return match__		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,path,extension,boolean,match,extension,equals,ignore,case,path,extension,trace,match,extension,extension,path,extension,match,return,match
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1524865018;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(pathExtension -> {_			boolean match = extension.equalsIgnoreCase(pathExtension)__			traceMatch("Extension", extension, pathExtension, match)__			return match__		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,path,extension,boolean,match,extension,equals,ignore,case,path,extension,trace,match,extension,extension,path,extension,match,return,match
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1525251240;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(pathExtension -> {_			boolean match = extension.equalsIgnoreCase(pathExtension)__			traceMatch("Extension", extension, pathExtension, match)__			return match__		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,path,extension,boolean,match,extension,equals,ignore,case,path,extension,trace,match,extension,extension,path,extension,match,return,match
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1525338166;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(pathExtension -> {_			boolean match = extension.equalsIgnoreCase(pathExtension)__			traceMatch("Extension", extension, pathExtension, match)__			return match__		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,path,extension,boolean,match,extension,equals,ignore,case,path,extension,trace,match,extension,extension,path,extension,match,return,match
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1526462061;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(new Predicate<String>() {_			@Override_			public boolean test(String pathExtension) {_				boolean match = extension.equalsIgnoreCase(pathExtension)__				traceMatch("Extension", extension, pathExtension, match)__				return match__			}__			public String toString() {_				return String.format("*.%s", extension)__			}_		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,new,predicate,string,override,public,boolean,test,string,path,extension,boolean,match,extension,equals,ignore,case,path,extension,trace,match,extension,extension,path,extension,match,return,match,public,string,to,string,return,string,format,s,extension
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1526674893;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(new Predicate<String>() {_			@Override_			public boolean test(String pathExtension) {_				boolean match = extension.equalsIgnoreCase(pathExtension)__				traceMatch("Extension", extension, pathExtension, match)__				return match__			}__			public String toString() {_				return String.format("*.%s", extension)__			}_		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,new,predicate,string,override,public,boolean,test,string,path,extension,boolean,match,extension,equals,ignore,case,path,extension,trace,match,extension,extension,path,extension,match,return,match,public,string,to,string,return,string,format,s,extension
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1529721864;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(new Predicate<String>() {_			@Override_			public boolean test(String pathExtension) {_				boolean match = extension.equalsIgnoreCase(pathExtension)__				traceMatch("Extension", extension, pathExtension, match)__				return match__			}__			public String toString() {_				return String.format("*.%s", extension)__			}_		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,new,predicate,string,override,public,boolean,test,string,path,extension,boolean,match,extension,equals,ignore,case,path,extension,trace,match,extension,extension,path,extension,match,return,match,public,string,to,string,return,string,format,s,extension
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1530174524;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(new Predicate<String>() {_			@Override_			public boolean test(String pathExtension) {_				boolean match = extension.equalsIgnoreCase(pathExtension)__				traceMatch("Extension", extension, pathExtension, match)__				return match__			}__			public String toString() {_				return String.format("*.%s", extension)__			}_		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,new,predicate,string,override,public,boolean,test,string,path,extension,boolean,match,extension,equals,ignore,case,path,extension,trace,match,extension,extension,path,extension,match,return,match,public,string,to,string,return,string,format,s,extension
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1530871276;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(new Predicate<String>() {_			@Override_			public boolean test(String pathExtension) {_				boolean match = extension.equalsIgnoreCase(pathExtension)__				traceMatch("Extension", extension, pathExtension, match)__				return match__			}__			public String toString() {_				return String.format("*.%s", extension)__			}_		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,new,predicate,string,override,public,boolean,test,string,path,extension,boolean,match,extension,equals,ignore,case,path,extension,trace,match,extension,extension,path,extension,match,return,match,public,string,to,string,return,string,format,s,extension
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1530877097;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(new Predicate<String>() {_			@Override_			public boolean test(String pathExtension) {_				boolean match = extension.equalsIgnoreCase(pathExtension)__				traceMatch("Extension", extension, pathExtension, match)__				return match__			}__			public String toString() {_				return String.format("*.%s", extension)__			}_		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,new,predicate,string,override,public,boolean,test,string,path,extension,boolean,match,extension,equals,ignore,case,path,extension,trace,match,extension,extension,path,extension,match,return,match,public,string,to,string,return,string,format,s,extension
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1532520962;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(new Predicate<String>() {_			@Override_			public boolean test(String pathExtension) {_				boolean match = extension.equalsIgnoreCase(pathExtension)__				traceMatch("Extension", extension, pathExtension, match)__				return match__			}__			public String toString() {_				return String.format("*.%s", extension)__			}_		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,new,predicate,string,override,public,boolean,test,string,path,extension,boolean,match,extension,equals,ignore,case,path,extension,trace,match,extension,extension,path,extension,match,return,match,public,string,to,string,return,string,format,s,extension
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1537173292;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(new Predicate<String>() {_			@Override_			public boolean test(String pathExtension) {_				boolean match = extension.equalsIgnoreCase(pathExtension)__				traceMatch("Extension", extension, pathExtension, match)__				return match__			}__			public String toString() {_				return String.format("*.%s", extension)__			}_		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,new,predicate,string,override,public,boolean,test,string,path,extension,boolean,match,extension,equals,ignore,case,path,extension,trace,match,extension,extension,path,extension,match,return,match,public,string,to,string,return,string,format,s,extension
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1537188605;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(new Predicate<String>() {_			@Override_			public boolean test(String pathExtension) {_				boolean match = extension.equalsIgnoreCase(pathExtension)__				traceMatch("Extension", extension, pathExtension, match)__				return match__			}__			public String toString() {_				return String.format("*.%s", extension)__			}_		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,new,predicate,string,override,public,boolean,test,string,path,extension,boolean,match,extension,equals,ignore,case,path,extension,trace,match,extension,extension,path,extension,match,return,match,public,string,to,string,return,string,format,s,extension
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1538658936;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(new Predicate<String>() {_			@Override_			public boolean test(String pathExtension) {_				boolean match = extension.equalsIgnoreCase(pathExtension)__				traceMatch("Extension", extension, pathExtension, match)__				return match__			}__			public String toString() {_				return String.format("*.%s", extension)__			}_		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,new,predicate,string,override,public,boolean,test,string,path,extension,boolean,match,extension,equals,ignore,case,path,extension,trace,match,extension,extension,path,extension,match,return,match,public,string,to,string,return,string,format,s,extension
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1539866925;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return pathExtension(new Predicate<String>() {_			@Override_			public boolean test(String pathExtension) {_				boolean match = extension.equalsIgnoreCase(pathExtension)__				traceMatch("Extension", extension, pathExtension, match)__				return match__			}__			public String toString() {_				return String.format("*.%s", extension)__			}_		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,path,extension,new,predicate,string,override,public,boolean,test,string,path,extension,boolean,match,extension,equals,ignore,case,path,extension,trace,match,extension,extension,path,extension,match,return,match,public,string,to,string,return,string,format,s,extension
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1542719117;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return new PathExtensionPredicate(extension)__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,new,path,extension,predicate,extension
RequestPredicates -> public static RequestPredicate pathExtension(String extension);1544625213;Return a {@code RequestPredicate} that matches if the request's path has the given extension._@param extension the path extension to match against, ignoring case_@return a predicate that matches if the request's path has the given file extension;public static RequestPredicate pathExtension(String extension) {_		Assert.notNull(extension, "'extension' must not be null")__		return new PathExtensionPredicate(extension)__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,has,the,given,extension,param,extension,the,path,extension,to,match,against,ignoring,case,return,a,predicate,that,matches,if,the,request,s,path,has,the,given,file,extension;public,static,request,predicate,path,extension,string,extension,assert,not,null,extension,extension,must,not,be,null,return,new,path,extension,predicate,extension
RequestPredicates -> Visitor -> void pathExtension(String extension)_;1542719117;Receive notification of an path extension predicate._@param extension the path extension that makes up the predicate_@see RequestPredicates#pathExtension(String);void pathExtension(String extension)_;receive,notification,of,an,path,extension,predicate,param,extension,the,path,extension,that,makes,up,the,predicate,see,request,predicates,path,extension,string;void,path,extension,string,extension
RequestPredicates -> Visitor -> void pathExtension(String extension)_;1544625213;Receive notification of an path extension predicate._@param extension the path extension that makes up the predicate_@see RequestPredicates#pathExtension(String);void pathExtension(String extension)_;receive,notification,of,an,path,extension,predicate,param,extension,the,path,extension,that,makes,up,the,predicate,see,request,predicates,path,extension,string;void,path,extension,string,extension
RequestPredicates -> public static RequestPredicate GET(String pattern);1485986572;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern matches against the_request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1486634978;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern matches against the_request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1486996670;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern matches against the_request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1487000643;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern matches against the_request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1487070708;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern matches against the_request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1487153168;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern matches against the_request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1487236624;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern matches against the_request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1487584763;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern matches against the_request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1487601624;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern matches against the_request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1487681187;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern matches against the_request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1487687241;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern_matches against the request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1491557115;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern_matches against the request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1492557464;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern_matches against the request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1492591191;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern_matches against the request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1494489320;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern_matches against the request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1494939057;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern_matches against the request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1495035625;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern_matches against the request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1496837955;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern_matches against the request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1498833097;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern_matches against the request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1498861175;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern_matches against the request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1499081790;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern_matches against the request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1499091813;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern_matches against the request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1499448036;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern_matches against the request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1499780493;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern_matches against the request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1500559500;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern_matches against the request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1501155515;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern_matches against the request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1501237594;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern_matches against the request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1501679128;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern_matches against the request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1501684266;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern_matches against the request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1505477679;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern_matches against the request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1506331747;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern_matches against the request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1521795630;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern_matches against the request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1523351625;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern_matches against the request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1524865018;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern_matches against the request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1525251240;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern_matches against the request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1525338166;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern_matches against the request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1526462061;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern_matches against the request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1526674893;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern_matches against the request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1529721864;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern_matches against the request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1530174524;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern_matches against the request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1530871276;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern_matches against the request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1530877097;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern_matches against the request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1532520962;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern_matches against the request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1537173292;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern_matches against the request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1537188605;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern_matches against the request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1538658936;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern_matches against the request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1539866925;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern_matches against the request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1542719117;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern_matches against the request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> public static RequestPredicate GET(String pattern);1544625213;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code GET}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is GET and if the given pattern_matches against the request path;public static RequestPredicate GET(String pattern) {_		return method(HttpMethod.GET).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,get,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,get,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,get,string,pattern,return,method,http,method,get,and,path,pattern
RequestPredicates -> Visitor -> void queryParam(String name, String value)_;1542719117;Receive notification of a query parameter predicate._@param name the name of the query parameter_@param value the desired value of the parameter_@see RequestPredicates#queryParam(String, String);void queryParam(String name, String value)_;receive,notification,of,a,query,parameter,predicate,param,name,the,name,of,the,query,parameter,param,value,the,desired,value,of,the,parameter,see,request,predicates,query,param,string,string;void,query,param,string,name,string,value
RequestPredicates -> Visitor -> void queryParam(String name, String value)_;1544625213;Receive notification of a query parameter predicate._@param name the name of the query parameter_@param value the desired value of the parameter_@see RequestPredicates#queryParam(String, String);void queryParam(String name, String value)_;receive,notification,of,a,query,parameter,predicate,param,name,the,name,of,the,query,parameter,param,value,the,desired,value,of,the,parameter,see,request,predicates,query,param,string,string;void,query,param,string,name,string,value
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1485986572;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern matches against the_request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1486634978;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern matches against the_request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1486996670;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern matches against the_request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1487000643;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern matches against the_request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1487070708;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern matches against the_request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1487153168;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern matches against the_request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1487236624;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern matches against the_request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1487584763;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern matches against the_request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1487601624;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern matches against the_request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1487681187;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern matches against the_request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1487687241;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern_matches against the request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1491557115;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern_matches against the request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1492557464;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern_matches against the request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1492591191;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern_matches against the request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1494489320;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern_matches against the request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1494939057;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern_matches against the request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1495035625;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern_matches against the request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1496837955;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern_matches against the request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1498833097;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern_matches against the request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1498861175;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern_matches against the request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1499081790;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern_matches against the request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1499091813;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern_matches against the request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1499448036;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern_matches against the request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1499780493;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern_matches against the request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1500559500;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern_matches against the request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1501155515;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern_matches against the request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1501237594;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern_matches against the request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1501679128;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern_matches against the request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1501684266;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern_matches against the request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1505477679;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern_matches against the request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1506331747;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern_matches against the request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1521795630;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern_matches against the request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1523351625;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern_matches against the request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1524865018;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern_matches against the request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1525251240;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern_matches against the request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1525338166;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern_matches against the request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1526462061;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern_matches against the request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1526674893;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern_matches against the request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1529721864;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern_matches against the request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1530174524;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern_matches against the request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1530871276;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern_matches against the request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1530877097;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern_matches against the request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1532520962;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern_matches against the request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1537173292;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern_matches against the request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1537188605;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern_matches against the request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1538658936;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern_matches against the request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1539866925;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern_matches against the request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1542719117;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern_matches against the request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate HEAD(String pattern);1544625213;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code HEAD}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is HEAD and if the given pattern_matches against the request path;public static RequestPredicate HEAD(String pattern) {_		return method(HttpMethod.HEAD).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,head,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,head,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,head,string,pattern,return,method,http,method,head,and,path,pattern
RequestPredicates -> public static RequestPredicate json();1486996670;Return a {@code RequestPredicate} that matches JSON requests. The returned predicate_matches if the request has {@code application/json} in the {@code Accept} header, or if the_request path has a {@code .json} file extension.__@return a predicate that matches JSON_@see #accept(MediaType...)_@see #pathExtension(String);public static RequestPredicate json() {_		return accept(MediaType.APPLICATION_JSON)_				.or(pathExtension("json"))__	};return,a,code,request,predicate,that,matches,json,requests,the,returned,predicate,matches,if,the,request,has,code,application,json,in,the,code,accept,header,or,if,the,request,path,has,a,code,json,file,extension,return,a,predicate,that,matches,json,see,accept,media,type,see,path,extension,string;public,static,request,predicate,json,return,accept,media,type,or,path,extension,json
RequestPredicates -> public static RequestPredicate json();1487000643;Return a {@code RequestPredicate} that matches JSON requests. The returned predicate_matches if the request has {@code application/json} in the {@code Accept} header, or if the_request path has a {@code .json} file extension.__@return a predicate that matches JSON_@see #accept(MediaType...)_@see #pathExtension(String);public static RequestPredicate json() {_		return accept(MediaType.APPLICATION_JSON)_				.or(pathExtension("json"))__	};return,a,code,request,predicate,that,matches,json,requests,the,returned,predicate,matches,if,the,request,has,code,application,json,in,the,code,accept,header,or,if,the,request,path,has,a,code,json,file,extension,return,a,predicate,that,matches,json,see,accept,media,type,see,path,extension,string;public,static,request,predicate,json,return,accept,media,type,or,path,extension,json
RequestPredicates -> public static RequestPredicate json();1487070708;Return a {@code RequestPredicate} that matches JSON requests. The returned predicate_matches if the request has {@code application/json} in the {@code Accept} header, or if the_request path has a {@code .json} file extension.__@return a predicate that matches JSON_@see #accept(MediaType...)_@see #pathExtension(String);public static RequestPredicate json() {_		return accept(MediaType.APPLICATION_JSON)_				.or(pathExtension("json"))__	};return,a,code,request,predicate,that,matches,json,requests,the,returned,predicate,matches,if,the,request,has,code,application,json,in,the,code,accept,header,or,if,the,request,path,has,a,code,json,file,extension,return,a,predicate,that,matches,json,see,accept,media,type,see,path,extension,string;public,static,request,predicate,json,return,accept,media,type,or,path,extension,json
RequestPredicates -> Visitor -> void method(Set<HttpMethod> methods)_;1542719117;Receive notification of an HTTP method predicate._@param methods the HTTP methods that make up the predicate_@see RequestPredicates#method(HttpMethod);void method(Set<HttpMethod> methods)_;receive,notification,of,an,http,method,predicate,param,methods,the,http,methods,that,make,up,the,predicate,see,request,predicates,method,http,method;void,method,set,http,method,methods
RequestPredicates -> Visitor -> void method(Set<HttpMethod> methods)_;1544625213;Receive notification of an HTTP method predicate._@param methods the HTTP methods that make up the predicate_@see RequestPredicates#method(HttpMethod);void method(Set<HttpMethod> methods)_;receive,notification,of,an,http,method,predicate,param,methods,the,http,methods,that,make,up,the,predicate,see,request,predicates,method,http,method;void,method,set,http,method,methods
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1485986572;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern matches against the_request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1486634978;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern matches against the_request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1486996670;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern matches against the_request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1487000643;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern matches against the_request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1487070708;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern matches against the_request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1487153168;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern matches against the_request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1487236624;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern matches against the_request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1487584763;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern matches against the_request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1487601624;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern matches against the_request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1487681187;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern matches against the_request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1487687241;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern_matches against the request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1491557115;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern_matches against the request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1492557464;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern_matches against the request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1492591191;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern_matches against the request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1494489320;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern_matches against the request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1494939057;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern_matches against the request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1495035625;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern_matches against the request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1496837955;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern_matches against the request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1498833097;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern_matches against the request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1498861175;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern_matches against the request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1499081790;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern_matches against the request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1499091813;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern_matches against the request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1499448036;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern_matches against the request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1499780493;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern_matches against the request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1500559500;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern_matches against the request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1501155515;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern_matches against the request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1501237594;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern_matches against the request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1501679128;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern_matches against the request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1501684266;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern_matches against the request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1505477679;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern_matches against the request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1506331747;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern_matches against the request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1521795630;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern_matches against the request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1523351625;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern_matches against the request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1524865018;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern_matches against the request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1525251240;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern_matches against the request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1525338166;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern_matches against the request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1526462061;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern_matches against the request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1526674893;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern_matches against the request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1529721864;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern_matches against the request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1530174524;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern_matches against the request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1530871276;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern_matches against the request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1530877097;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern_matches against the request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1532520962;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern_matches against the request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1537173292;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern_matches against the request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1537188605;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern_matches against the request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1538658936;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern_matches against the request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1539866925;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern_matches against the request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1542719117;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern_matches against the request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate OPTIONS(String pattern);1544625213;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code OPTIONS}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is OPTIONS and if the given pattern_matches against the request path;public static RequestPredicate OPTIONS(String pattern) {_		return method(HttpMethod.OPTIONS).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,options,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,options,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,options,string,pattern,return,method,http,method,options,and,path,pattern
RequestPredicates -> public static RequestPredicate all();1485986572;Returns a {@code RequestPredicate} that always matches.__@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};returns,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1486634978;Returns a {@code RequestPredicate} that always matches.__@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};returns,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1486996670;Returns a {@code RequestPredicate} that always matches.__@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};returns,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1487000643;Returns a {@code RequestPredicate} that always matches.__@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};returns,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1487070708;Returns a {@code RequestPredicate} that always matches.__@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};returns,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1487153168;Returns a {@code RequestPredicate} that always matches.__@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};returns,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1487236624;Returns a {@code RequestPredicate} that always matches.__@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};returns,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1487584763;Returns a {@code RequestPredicate} that always matches.__@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};returns,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1487601624;Returns a {@code RequestPredicate} that always matches.__@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};returns,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1487681187;Returns a {@code RequestPredicate} that always matches.__@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};returns,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1487687241;Return a {@code RequestPredicate} that always matches._@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};return,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1491557115;Return a {@code RequestPredicate} that always matches._@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};return,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1492557464;Return a {@code RequestPredicate} that always matches._@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};return,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1492591191;Return a {@code RequestPredicate} that always matches._@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};return,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1494489320;Return a {@code RequestPredicate} that always matches._@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};return,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1494939057;Return a {@code RequestPredicate} that always matches._@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};return,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1495035625;Return a {@code RequestPredicate} that always matches._@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};return,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1496837955;Return a {@code RequestPredicate} that always matches._@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};return,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1498833097;Return a {@code RequestPredicate} that always matches._@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};return,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1498861175;Return a {@code RequestPredicate} that always matches._@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};return,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1499081790;Return a {@code RequestPredicate} that always matches._@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};return,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1499091813;Return a {@code RequestPredicate} that always matches._@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};return,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1499448036;Return a {@code RequestPredicate} that always matches._@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};return,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1499780493;Return a {@code RequestPredicate} that always matches._@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};return,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1500559500;Return a {@code RequestPredicate} that always matches._@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};return,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1501155515;Return a {@code RequestPredicate} that always matches._@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};return,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1501237594;Return a {@code RequestPredicate} that always matches._@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};return,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1501679128;Return a {@code RequestPredicate} that always matches._@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};return,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1501684266;Return a {@code RequestPredicate} that always matches._@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};return,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1505477679;Return a {@code RequestPredicate} that always matches._@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};return,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1506331747;Return a {@code RequestPredicate} that always matches._@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};return,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1521795630;Return a {@code RequestPredicate} that always matches._@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};return,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1523351625;Return a {@code RequestPredicate} that always matches._@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};return,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1524865018;Return a {@code RequestPredicate} that always matches._@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};return,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1525251240;Return a {@code RequestPredicate} that always matches._@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};return,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1525338166;Return a {@code RequestPredicate} that always matches._@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};return,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1526462061;Return a {@code RequestPredicate} that always matches._@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};return,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1526674893;Return a {@code RequestPredicate} that always matches._@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};return,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1529721864;Return a {@code RequestPredicate} that always matches._@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};return,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1530174524;Return a {@code RequestPredicate} that always matches._@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};return,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1530871276;Return a {@code RequestPredicate} that always matches._@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};return,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1530877097;Return a {@code RequestPredicate} that always matches._@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};return,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1532520962;Return a {@code RequestPredicate} that always matches._@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};return,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1537173292;Return a {@code RequestPredicate} that always matches._@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};return,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1537188605;Return a {@code RequestPredicate} that always matches._@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};return,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1538658936;Return a {@code RequestPredicate} that always matches._@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};return,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1539866925;Return a {@code RequestPredicate} that always matches._@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};return,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1542719117;Return a {@code RequestPredicate} that always matches._@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};return,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> public static RequestPredicate all();1544625213;Return a {@code RequestPredicate} that always matches._@return a predicate that always matches;public static RequestPredicate all() {_		return request -> true__	};return,a,code,request,predicate,that,always,matches,return,a,predicate,that,always,matches;public,static,request,predicate,all,return,request,true
RequestPredicates -> Visitor -> void startAnd()_;1542719117;Receive first notification of a logical AND predicate._The first subsequent notification will contain the left-hand side of the AND-predicate__the second notification contains the right-hand side, followed by {@link #endAnd()}._@see RequestPredicate#and(RequestPredicate);void startAnd()_;receive,first,notification,of,a,logical,and,predicate,the,first,subsequent,notification,will,contain,the,left,hand,side,of,the,and,predicate,the,second,notification,contains,the,right,hand,side,followed,by,link,end,and,see,request,predicate,and,request,predicate;void,start,and
RequestPredicates -> Visitor -> void startAnd()_;1544625213;Receive first notification of a logical AND predicate._The first subsequent notification will contain the left-hand side of the AND-predicate__followed by {@link #and()}, followed by the right-hand side, followed by {@link #endAnd()}._@see RequestPredicate#and(RequestPredicate);void startAnd()_;receive,first,notification,of,a,logical,and,predicate,the,first,subsequent,notification,will,contain,the,left,hand,side,of,the,and,predicate,followed,by,link,and,followed,by,the,right,hand,side,followed,by,link,end,and,see,request,predicate,and,request,predicate;void,start,and
RequestPredicates -> Visitor -> void endNegate()_;1542719117;Receive last notification of a negated predicate._@see RequestPredicate#negate();void endNegate()_;receive,last,notification,of,a,negated,predicate,see,request,predicate,negate;void,end,negate
RequestPredicates -> Visitor -> void endNegate()_;1544625213;Receive last notification of a negated predicate._@see RequestPredicate#negate();void endNegate()_;receive,last,notification,of,a,negated,predicate,see,request,predicate,negate;void,end,negate
RequestPredicates -> public static RequestPredicate PUT(String pattern);1485986572;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern matches against the_request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1486634978;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern matches against the_request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1486996670;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern matches against the_request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1487000643;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern matches against the_request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1487070708;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern matches against the_request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1487153168;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern matches against the_request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1487236624;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern matches against the_request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1487584763;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern matches against the_request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1487601624;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern matches against the_request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1487681187;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern matches against the_request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1487687241;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern_matches against the request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1491557115;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern_matches against the request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1492557464;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern_matches against the request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1492591191;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern_matches against the request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1494489320;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern_matches against the request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1494939057;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern_matches against the request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1495035625;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern_matches against the request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1496837955;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern_matches against the request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1498833097;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern_matches against the request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1498861175;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern_matches against the request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1499081790;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern_matches against the request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1499091813;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern_matches against the request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1499448036;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern_matches against the request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1499780493;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern_matches against the request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1500559500;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern_matches against the request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1501155515;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern_matches against the request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1501237594;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern_matches against the request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1501679128;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern_matches against the request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1501684266;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern_matches against the request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1505477679;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern_matches against the request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1506331747;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern_matches against the request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1521795630;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern_matches against the request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1523351625;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern_matches against the request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1524865018;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern_matches against the request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1525251240;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern_matches against the request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1525338166;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern_matches against the request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1526462061;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern_matches against the request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1526674893;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern_matches against the request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1529721864;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern_matches against the request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1530174524;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern_matches against the request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1530871276;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern_matches against the request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1530877097;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern_matches against the request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1532520962;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern_matches against the request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1537173292;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern_matches against the request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1537188605;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern_matches against the request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1538658936;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern_matches against the request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1539866925;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern_matches against the request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1542719117;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern_matches against the request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> public static RequestPredicate PUT(String pattern);1544625213;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PUT}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PUT and if the given pattern_matches against the request path;public static RequestPredicate PUT(String pattern) {_		return method(HttpMethod.PUT).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,put,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,put,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,put,string,pattern,return,method,http,method,put,and,path,pattern
RequestPredicates -> Visitor -> void unknown(RequestPredicate predicate)_;1542719117;Receive first notification of an unknown predicate.;void unknown(RequestPredicate predicate)_;receive,first,notification,of,an,unknown,predicate;void,unknown,request,predicate,predicate
RequestPredicates -> Visitor -> void unknown(RequestPredicate predicate)_;1544625213;Receive first notification of an unknown predicate.;void unknown(RequestPredicate predicate)_;receive,first,notification,of,an,unknown,predicate;void,unknown,request,predicate,predicate
RequestPredicates -> Visitor -> void endAnd()_;1542719117;Receive last notification of a logical AND predicate._@see RequestPredicate#and(RequestPredicate);void endAnd()_;receive,last,notification,of,a,logical,and,predicate,see,request,predicate,and,request,predicate;void,end,and
RequestPredicates -> Visitor -> void endAnd()_;1544625213;Receive last notification of a logical AND predicate._@see RequestPredicate#and(RequestPredicate);void endAnd()_;receive,last,notification,of,a,logical,and,predicate,see,request,predicate,and,request,predicate;void,end,and
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1485986572;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern matches against the_request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1486634978;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern matches against the_request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1486996670;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern matches against the_request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1487000643;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern matches against the_request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1487070708;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern matches against the_request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1487153168;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern matches against the_request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1487236624;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern matches against the_request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1487584763;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern matches against the_request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1487601624;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern matches against the_request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1487681187;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern matches against the_request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1487687241;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern_matches against the request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1491557115;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern_matches against the request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1492557464;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern_matches against the request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1492591191;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern_matches against the request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1494489320;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern_matches against the request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1494939057;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern_matches against the request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1495035625;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern_matches against the request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1496837955;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern_matches against the request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1498833097;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern_matches against the request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1498861175;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern_matches against the request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1499081790;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern_matches against the request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1499091813;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern_matches against the request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1499448036;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern_matches against the request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1499780493;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern_matches against the request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1500559500;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern_matches against the request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1501155515;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern_matches against the request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1501237594;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern_matches against the request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1501679128;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern_matches against the request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1501684266;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern_matches against the request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1505477679;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern_matches against the request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1506331747;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern_matches against the request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1521795630;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern_matches against the request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1523351625;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern_matches against the request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1524865018;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern_matches against the request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1525251240;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern_matches against the request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1525338166;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern_matches against the request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1526462061;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern_matches against the request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1526674893;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern_matches against the request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1529721864;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern_matches against the request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1530174524;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern_matches against the request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1530871276;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern_matches against the request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1530877097;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern_matches against the request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1532520962;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern_matches against the request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1537173292;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern_matches against the request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1537188605;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern_matches against the request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1538658936;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern_matches against the request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1539866925;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern_matches against the request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1542719117;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern_matches against the request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate DELETE(String pattern);1544625213;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code DELETE}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is DELETE and if the given pattern_matches against the request path;public static RequestPredicate DELETE(String pattern) {_		return method(HttpMethod.DELETE).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,delete,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,delete,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,delete,string,pattern,return,method,http,method,delete,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1485986572;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern matches against the_request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1486634978;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern matches against the_request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1486996670;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern matches against the_request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1487000643;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern matches against the_request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1487070708;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern matches against the_request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1487153168;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern matches against the_request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1487236624;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern matches against the_request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1487584763;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern matches against the_request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1487601624;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern matches against the_request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1487681187;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern matches against the_request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1487687241;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern_matches against the request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1491557115;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern_matches against the request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1492557464;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern_matches against the request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1492591191;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern_matches against the request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1494489320;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern_matches against the request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1494939057;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern_matches against the request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1495035625;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern_matches against the request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1496837955;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern_matches against the request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1498833097;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern_matches against the request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1498861175;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern_matches against the request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1499081790;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern_matches against the request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1499091813;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern_matches against the request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1499448036;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern_matches against the request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1499780493;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern_matches against the request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1500559500;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern_matches against the request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1501155515;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern_matches against the request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1501237594;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern_matches against the request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1501679128;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern_matches against the request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1501684266;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern_matches against the request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1505477679;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern_matches against the request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1506331747;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern_matches against the request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1521795630;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern_matches against the request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1523351625;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern_matches against the request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1524865018;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern_matches against the request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1525251240;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern_matches against the request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1525338166;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern_matches against the request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1526462061;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern_matches against the request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1526674893;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern_matches against the request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1529721864;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern_matches against the request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1530174524;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern_matches against the request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1530871276;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern_matches against the request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1530877097;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern_matches against the request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1532520962;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern_matches against the request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1537173292;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern_matches against the request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1537188605;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern_matches against the request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1538658936;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern_matches against the request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1539866925;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern_matches against the request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1542719117;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern_matches against the request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate POST(String pattern);1544625213;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code POST}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is POST and if the given pattern_matches against the request path;public static RequestPredicate POST(String pattern) {_		return method(HttpMethod.POST).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,post,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,post,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,post,string,pattern,return,method,http,method,post,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1485986572;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern matches against the_request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1486634978;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern matches against the_request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1486996670;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern matches against the_request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1487000643;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern matches against the_request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1487070708;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern matches against the_request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1487153168;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern matches against the_request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1487236624;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern matches against the_request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1487584763;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern matches against the_request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1487601624;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern matches against the_request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1487681187;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH} and the given_{@code pattern} matches against the request path.__@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern matches against the_request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1487687241;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern_matches against the request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1491557115;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern_matches against the request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1492557464;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern_matches against the request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1492591191;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern_matches against the request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1494489320;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern_matches against the request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1494939057;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern_matches against the request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1495035625;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern_matches against the request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1496837955;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern_matches against the request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1498833097;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern_matches against the request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1498861175;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern_matches against the request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1499081790;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern_matches against the request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1499091813;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern_matches against the request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1499448036;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern_matches against the request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1499780493;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern_matches against the request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1500559500;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern_matches against the request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1501155515;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern_matches against the request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1501237594;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern_matches against the request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1501679128;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern_matches against the request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1501684266;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern_matches against the request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1505477679;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern_matches against the request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1506331747;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern_matches against the request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1521795630;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern_matches against the request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1523351625;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern_matches against the request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1524865018;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern_matches against the request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1525251240;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern_matches against the request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1525338166;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern_matches against the request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1526462061;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern_matches against the request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1526674893;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern_matches against the request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1529721864;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern_matches against the request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1530174524;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern_matches against the request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1530871276;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern_matches against the request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1530877097;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern_matches against the request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1532520962;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern_matches against the request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1537173292;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern_matches against the request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1537188605;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern_matches against the request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1538658936;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern_matches against the request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1539866925;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern_matches against the request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1542719117;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern_matches against the request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate PATCH(String pattern);1544625213;Return a {@code RequestPredicate} that matches if request's HTTP method is {@code PATCH}_and the given {@code pattern} matches against the request path._@param pattern the path pattern to match against_@return a predicate that matches if the request method is PATCH and if the given pattern_matches against the request path;public static RequestPredicate PATCH(String pattern) {_		return method(HttpMethod.PATCH).and(path(pattern))__	};return,a,code,request,predicate,that,matches,if,request,s,http,method,is,code,patch,and,the,given,code,pattern,matches,against,the,request,path,param,pattern,the,path,pattern,to,match,against,return,a,predicate,that,matches,if,the,request,method,is,patch,and,if,the,given,pattern,matches,against,the,request,path;public,static,request,predicate,patch,string,pattern,return,method,http,method,patch,and,path,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1485986572;Return a {@code RequestPredicate} that tests against the given path pattern.__@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		return path(pattern, DEFAULT_PATH_MATCHER)__	};return,a,code,request,predicate,that,tests,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,return,path,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1486634978;Return a {@code RequestPredicate} that tests against the given path pattern.__@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		return path(pattern, DEFAULT_PATH_MATCHER)__	};return,a,code,request,predicate,that,tests,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,return,path,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1486996670;Return a {@code RequestPredicate} that tests against the given path pattern.__@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		return path(pattern, DEFAULT_PATH_MATCHER)__	};return,a,code,request,predicate,that,tests,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,return,path,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1487000643;Return a {@code RequestPredicate} that tests against the given path pattern.__@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return new PathPatternPredicate(DEFAULT_PATTERN_PARSER.parse(pattern))__	};return,a,code,request,predicate,that,tests,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,new,path,pattern,predicate,parse,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1487070708;Return a {@code RequestPredicate} that tests against the given path pattern.__@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1487153168;Return a {@code RequestPredicate} that tests against the given path pattern.__@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1487236624;Return a {@code RequestPredicate} that tests the request path against the given path pattern.__@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1487584763;Return a {@code RequestPredicate} that tests the request path against the given path pattern.__@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1487601624;Return a {@code RequestPredicate} that tests the request path against the given path pattern.__@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1487681187;Return a {@code RequestPredicate} that tests the request path against the given path pattern.__@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1487687241;Return a {@code RequestPredicate} that tests the request path against the given path pattern._@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1491557115;Return a {@code RequestPredicate} that tests the request path against the given path pattern._@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1492557464;Return a {@code RequestPredicate} that tests the request path against the given path pattern._@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1492591191;Return a {@code RequestPredicate} that tests the request path against the given path pattern._@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1494489320;Return a {@code RequestPredicate} that tests the request path against the given path pattern._@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1494939057;Return a {@code RequestPredicate} that tests the request path against the given path pattern._@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1495035625;Return a {@code RequestPredicate} that tests the request path against the given path pattern._@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1496837955;Return a {@code RequestPredicate} that tests the request path against the given path pattern._@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1498833097;Return a {@code RequestPredicate} that tests the request path against the given path pattern._@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1498861175;Return a {@code RequestPredicate} that tests the request path against the given path pattern._@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1499081790;Return a {@code RequestPredicate} that tests the request path against the given path pattern._@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1499091813;Return a {@code RequestPredicate} that tests the request path against the given path pattern._@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1499448036;Return a {@code RequestPredicate} that tests the request path against the given path pattern._@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1499780493;Return a {@code RequestPredicate} that tests the request path against the given path pattern._@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1500559500;Return a {@code RequestPredicate} that tests the request path against the given path pattern._@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1501155515;Return a {@code RequestPredicate} that tests the request path against the given path pattern._@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1501237594;Return a {@code RequestPredicate} that tests the request path against the given path pattern._@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1501679128;Return a {@code RequestPredicate} that tests the request path against the given path pattern._@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1501684266;Return a {@code RequestPredicate} that tests the request path against the given path pattern._@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1505477679;Return a {@code RequestPredicate} that tests the request path against the given path pattern._@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1506331747;Return a {@code RequestPredicate} that tests the request path against the given path pattern._@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1521795630;Return a {@code RequestPredicate} that tests the request path against the given path pattern._@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1523351625;Return a {@code RequestPredicate} that tests the request path against the given path pattern._@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1524865018;Return a {@code RequestPredicate} that tests the request path against the given path pattern._@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1525251240;Return a {@code RequestPredicate} that tests the request path against the given path pattern._@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1525338166;Return a {@code RequestPredicate} that tests the request path against the given path pattern._@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1526462061;Return a {@code RequestPredicate} that tests the request path against the given path pattern._@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1526674893;Return a {@code RequestPredicate} that tests the request path against the given path pattern._@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1529721864;Return a {@code RequestPredicate} that tests the request path against the given path pattern._@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1530174524;Return a {@code RequestPredicate} that tests the request path against the given path pattern._@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1530871276;Return a {@code RequestPredicate} that tests the request path against the given path pattern._@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1530877097;Return a {@code RequestPredicate} that tests the request path against the given path pattern._@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1532520962;Return a {@code RequestPredicate} that tests the request path_against the given path pattern._@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1537173292;Return a {@code RequestPredicate} that tests the request path_against the given path pattern._@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1537188605;Return a {@code RequestPredicate} that tests the request path_against the given path pattern._@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1538658936;Return a {@code RequestPredicate} that tests the request path_against the given path pattern._@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1539866925;Return a {@code RequestPredicate} that tests the request path_against the given path pattern._@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1542719117;Return a {@code RequestPredicate} that tests the request path_against the given path pattern._@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate path(String pattern);1544625213;Return a {@code RequestPredicate} that tests the request path_against the given path pattern._@param pattern the pattern to match to_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern) {_		Assert.notNull(pattern, "'pattern' must not be null")__		return pathPredicates(DEFAULT_PATTERN_PARSER).apply(pattern)__	};return,a,code,request,predicate,that,tests,the,request,path,against,the,given,path,pattern,param,pattern,the,pattern,to,match,to,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,assert,not,null,pattern,pattern,must,not,be,null,return,path,predicates,apply,pattern
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1485986572;Return a {@code RequestPredicate} that tests against the given HTTP method.__@param httpMethod the HTTP method to match to_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,tests,against,the,given,http,method,param,http,method,the,http,method,to,match,to,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1486634978;Return a {@code RequestPredicate} that tests against the given HTTP method.__@param httpMethod the HTTP method to match to_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,tests,against,the,given,http,method,param,http,method,the,http,method,to,match,to,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1486996670;Return a {@code RequestPredicate} that tests against the given HTTP method.__@param httpMethod the HTTP method to match to_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,tests,against,the,given,http,method,param,http,method,the,http,method,to,match,to,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1487000643;Return a {@code RequestPredicate} that tests against the given HTTP method.__@param httpMethod the HTTP method to match to_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,tests,against,the,given,http,method,param,http,method,the,http,method,to,match,to,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1487070708;Return a {@code RequestPredicate} that tests against the given HTTP method.__@param httpMethod the HTTP method to match to_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,tests,against,the,given,http,method,param,http,method,the,http,method,to,match,to,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1487153168;Return a {@code RequestPredicate} that tests against the given HTTP method.__@param httpMethod the HTTP method to match to_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,tests,against,the,given,http,method,param,http,method,the,http,method,to,match,to,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1487236624;Return a {@code RequestPredicate} that tests against the given HTTP method.__@param httpMethod the HTTP method to match to_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,tests,against,the,given,http,method,param,http,method,the,http,method,to,match,to,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1487584763;Return a {@code RequestPredicate} that tests against the given HTTP method.__@param httpMethod the HTTP method to match to_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,tests,against,the,given,http,method,param,http,method,the,http,method,to,match,to,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1487601624;Return a {@code RequestPredicate} that tests against the given HTTP method.__@param httpMethod the HTTP method to match to_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,tests,against,the,given,http,method,param,http,method,the,http,method,to,match,to,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1487681187;Return a {@code RequestPredicate} that tests against the given HTTP method.__@param httpMethod the HTTP method to match to_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,tests,against,the,given,http,method,param,http,method,the,http,method,to,match,to,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1487687241;Return a {@code RequestPredicate} that tests against the given HTTP method._@param httpMethod the HTTP method to match to_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,tests,against,the,given,http,method,param,http,method,the,http,method,to,match,to,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1491557115;Return a {@code RequestPredicate} that tests against the given HTTP method._@param httpMethod the HTTP method to match to_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,tests,against,the,given,http,method,param,http,method,the,http,method,to,match,to,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1492557464;Return a {@code RequestPredicate} that tests against the given HTTP method._@param httpMethod the HTTP method to match to_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,tests,against,the,given,http,method,param,http,method,the,http,method,to,match,to,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1492591191;Return a {@code RequestPredicate} that tests against the given HTTP method._@param httpMethod the HTTP method to match to_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,tests,against,the,given,http,method,param,http,method,the,http,method,to,match,to,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1494489320;Return a {@code RequestPredicate} that tests against the given HTTP method._@param httpMethod the HTTP method to match to_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,tests,against,the,given,http,method,param,http,method,the,http,method,to,match,to,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1494939057;Return a {@code RequestPredicate} that tests against the given HTTP method._@param httpMethod the HTTP method to match to_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,tests,against,the,given,http,method,param,http,method,the,http,method,to,match,to,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1495035625;Return a {@code RequestPredicate} that tests against the given HTTP method._@param httpMethod the HTTP method to match to_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,tests,against,the,given,http,method,param,http,method,the,http,method,to,match,to,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1496837955;Return a {@code RequestPredicate} that tests against the given HTTP method._@param httpMethod the HTTP method to match to_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,tests,against,the,given,http,method,param,http,method,the,http,method,to,match,to,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1498833097;Return a {@code RequestPredicate} that tests against the given HTTP method._@param httpMethod the HTTP method to match to_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,tests,against,the,given,http,method,param,http,method,the,http,method,to,match,to,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1498861175;Return a {@code RequestPredicate} that tests against the given HTTP method._@param httpMethod the HTTP method to match to_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,tests,against,the,given,http,method,param,http,method,the,http,method,to,match,to,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1499081790;Return a {@code RequestPredicate} that tests against the given HTTP method._@param httpMethod the HTTP method to match to_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,tests,against,the,given,http,method,param,http,method,the,http,method,to,match,to,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1499091813;Return a {@code RequestPredicate} that tests against the given HTTP method._@param httpMethod the HTTP method to match to_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,tests,against,the,given,http,method,param,http,method,the,http,method,to,match,to,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1499448036;Return a {@code RequestPredicate} that tests against the given HTTP method._@param httpMethod the HTTP method to match to_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,tests,against,the,given,http,method,param,http,method,the,http,method,to,match,to,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1499780493;Return a {@code RequestPredicate} that tests against the given HTTP method._@param httpMethod the HTTP method to match to_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,tests,against,the,given,http,method,param,http,method,the,http,method,to,match,to,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1500559500;Return a {@code RequestPredicate} that tests against the given HTTP method._@param httpMethod the HTTP method to match to_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,tests,against,the,given,http,method,param,http,method,the,http,method,to,match,to,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1501155515;Return a {@code RequestPredicate} that tests against the given HTTP method._@param httpMethod the HTTP method to match to_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,tests,against,the,given,http,method,param,http,method,the,http,method,to,match,to,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1501237594;Return a {@code RequestPredicate} that tests against the given HTTP method._@param httpMethod the HTTP method to match to_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,tests,against,the,given,http,method,param,http,method,the,http,method,to,match,to,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1501679128;Return a {@code RequestPredicate} that tests against the given HTTP method._@param httpMethod the HTTP method to match to_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,tests,against,the,given,http,method,param,http,method,the,http,method,to,match,to,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1501684266;Return a {@code RequestPredicate} that tests against the given HTTP method._@param httpMethod the HTTP method to match to_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,tests,against,the,given,http,method,param,http,method,the,http,method,to,match,to,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1505477679;Return a {@code RequestPredicate} that tests against the given HTTP method._@param httpMethod the HTTP method to match to_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,tests,against,the,given,http,method,param,http,method,the,http,method,to,match,to,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1506331747;Return a {@code RequestPredicate} that tests against the given HTTP method._@param httpMethod the HTTP method to match to_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,tests,against,the,given,http,method,param,http,method,the,http,method,to,match,to,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1521795630;Return a {@code RequestPredicate} that tests against the given HTTP method._@param httpMethod the HTTP method to match to_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,tests,against,the,given,http,method,param,http,method,the,http,method,to,match,to,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1523351625;Return a {@code RequestPredicate} that tests against the given HTTP method._@param httpMethod the HTTP method to match to_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,tests,against,the,given,http,method,param,http,method,the,http,method,to,match,to,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1524865018;Return a {@code RequestPredicate} that tests against the given HTTP method._@param httpMethod the HTTP method to match to_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,tests,against,the,given,http,method,param,http,method,the,http,method,to,match,to,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1525251240;Return a {@code RequestPredicate} that tests against the given HTTP method._@param httpMethod the HTTP method to match to_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,tests,against,the,given,http,method,param,http,method,the,http,method,to,match,to,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1525338166;Return a {@code RequestPredicate} that tests against the given HTTP method._@param httpMethod the HTTP method to match to_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,tests,against,the,given,http,method,param,http,method,the,http,method,to,match,to,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1526462061;Return a {@code RequestPredicate} that tests against the given HTTP method._@param httpMethod the HTTP method to match to_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,tests,against,the,given,http,method,param,http,method,the,http,method,to,match,to,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1526674893;Return a {@code RequestPredicate} that tests against the given HTTP method._@param httpMethod the HTTP method to match to_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,tests,against,the,given,http,method,param,http,method,the,http,method,to,match,to,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1529721864;Return a {@code RequestPredicate} that tests against the given HTTP method._@param httpMethod the HTTP method to match to_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,tests,against,the,given,http,method,param,http,method,the,http,method,to,match,to,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1530174524;Return a {@code RequestPredicate} that tests against the given HTTP method._@param httpMethod the HTTP method to match to_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,tests,against,the,given,http,method,param,http,method,the,http,method,to,match,to,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1530871276;Return a {@code RequestPredicate} that matches if the request's HTTP method is equal to the_given method_@param httpMethod the HTTP method to match against_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,matches,if,the,request,s,http,method,is,equal,to,the,given,method,param,http,method,the,http,method,to,match,against,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1530877097;Return a {@code RequestPredicate} that matches if the request's HTTP method is equal to the_given method._@param httpMethod the HTTP method to match against_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,matches,if,the,request,s,http,method,is,equal,to,the,given,method,param,http,method,the,http,method,to,match,against,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1532520962;Return a {@code RequestPredicate} that matches if the request's_HTTP method is equal to the given method._@param httpMethod the HTTP method to match against_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,matches,if,the,request,s,http,method,is,equal,to,the,given,method,param,http,method,the,http,method,to,match,against,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1537173292;Return a {@code RequestPredicate} that matches if the request's_HTTP method is equal to the given method._@param httpMethod the HTTP method to match against_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,matches,if,the,request,s,http,method,is,equal,to,the,given,method,param,http,method,the,http,method,to,match,against,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1537188605;Return a {@code RequestPredicate} that matches if the request's_HTTP method is equal to the given method._@param httpMethod the HTTP method to match against_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,matches,if,the,request,s,http,method,is,equal,to,the,given,method,param,http,method,the,http,method,to,match,against,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1538658936;Return a {@code RequestPredicate} that matches if the request's_HTTP method is equal to the given method._@param httpMethod the HTTP method to match against_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,matches,if,the,request,s,http,method,is,equal,to,the,given,method,param,http,method,the,http,method,to,match,against,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1539866925;Return a {@code RequestPredicate} that matches if the request's_HTTP method is equal to the given method._@param httpMethod the HTTP method to match against_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,matches,if,the,request,s,http,method,is,equal,to,the,given,method,param,http,method,the,http,method,to,match,against,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1542719117;Return a {@code RequestPredicate} that matches if the request's_HTTP method is equal to the given method._@param httpMethod the HTTP method to match against_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,matches,if,the,request,s,http,method,is,equal,to,the,given,method,param,http,method,the,http,method,to,match,against,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate method(HttpMethod httpMethod);1544625213;Return a {@code RequestPredicate} that matches if the request's_HTTP method is equal to the given method._@param httpMethod the HTTP method to match against_@return a predicate that tests against the given HTTP method;public static RequestPredicate method(HttpMethod httpMethod) {_		return new HttpMethodPredicate(httpMethod)__	};return,a,code,request,predicate,that,matches,if,the,request,s,http,method,is,equal,to,the,given,method,param,http,method,the,http,method,to,match,against,return,a,predicate,that,tests,against,the,given,http,method;public,static,request,predicate,method,http,method,http,method,return,new,http,method,predicate,http,method
RequestPredicates -> public static RequestPredicate path(String pattern, PathMatcher pathMatcher);1485986572;Return a {@code RequestPredicate} that tests against the given path pattern using the given matcher.__@param pattern     the pattern to match to_@param pathMatcher the path matcher to use_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern, PathMatcher pathMatcher) {_		return new PathPredicate(pattern, pathMatcher)__	};return,a,code,request,predicate,that,tests,against,the,given,path,pattern,using,the,given,matcher,param,pattern,the,pattern,to,match,to,param,path,matcher,the,path,matcher,to,use,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,path,matcher,path,matcher,return,new,path,predicate,pattern,path,matcher
RequestPredicates -> public static RequestPredicate path(String pattern, PathMatcher pathMatcher);1486634978;Return a {@code RequestPredicate} that tests against the given path pattern using the given matcher.__@param pattern     the pattern to match to_@param pathMatcher the path matcher to use_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern, PathMatcher pathMatcher) {_		return new PathPredicate(pattern, pathMatcher)__	};return,a,code,request,predicate,that,tests,against,the,given,path,pattern,using,the,given,matcher,param,pattern,the,pattern,to,match,to,param,path,matcher,the,path,matcher,to,use,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,path,matcher,path,matcher,return,new,path,predicate,pattern,path,matcher
RequestPredicates -> public static RequestPredicate path(String pattern, PathMatcher pathMatcher);1486996670;Return a {@code RequestPredicate} that tests against the given path pattern using the given matcher.__@param pattern     the pattern to match to_@param pathMatcher the path matcher to use_@return a predicate that tests against the given path pattern;public static RequestPredicate path(String pattern, PathMatcher pathMatcher) {_		Assert.notNull(pattern, "'pattern' must not be null")__		Assert.notNull(pathMatcher, "'pathMatcher' must not be null")___		return new PathMatchingPredicate(pattern, pathMatcher)__	};return,a,code,request,predicate,that,tests,against,the,given,path,pattern,using,the,given,matcher,param,pattern,the,pattern,to,match,to,param,path,matcher,the,path,matcher,to,use,return,a,predicate,that,tests,against,the,given,path,pattern;public,static,request,predicate,path,string,pattern,path,matcher,path,matcher,assert,not,null,pattern,pattern,must,not,be,null,assert,not,null,path,matcher,path,matcher,must,not,be,null,return,new,path,matching,predicate,pattern,path,matcher
RequestPredicates -> public static RequestPredicate pathPrefix(String pathPrefixPattern);1487236624;Return a {@code RequestPredicate} that tests the beginning of the request path against the_given path pattern. This predicate is effectively identical to a_{@linkplain #path(String) standard path predicate} with path {@code pathPrefixPattern + "/**"}._@param pathPrefixPattern the pattern to match against the start of the request path_@return a predicate that matches if the given predicate matches against the beginning of_the request's path;public static RequestPredicate pathPrefix(String pathPrefixPattern) {_		Assert.notNull(pathPrefixPattern, "'pathPrefixPattern' must not be null")___		if (!pathPrefixPattern.endsWith("/**")) {_			pathPrefixPattern += "/**"__		}_		return path(pathPrefixPattern)__	};return,a,code,request,predicate,that,tests,the,beginning,of,the,request,path,against,the,given,path,pattern,this,predicate,is,effectively,identical,to,a,linkplain,path,string,standard,path,predicate,with,path,code,path,prefix,pattern,param,path,prefix,pattern,the,pattern,to,match,against,the,start,of,the,request,path,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,beginning,of,the,request,s,path;public,static,request,predicate,path,prefix,string,path,prefix,pattern,assert,not,null,path,prefix,pattern,path,prefix,pattern,must,not,be,null,if,path,prefix,pattern,ends,with,path,prefix,pattern,return,path,path,prefix,pattern
RequestPredicates -> public static RequestPredicate pathPrefix(String pathPrefixPattern);1487584763;Return a {@code RequestPredicate} that tests the beginning of the request path against the_given path pattern. This predicate is effectively identical to a_{@linkplain #path(String) standard path predicate} with path {@code pathPrefixPattern + "/**"}._@param pathPrefixPattern the pattern to match against the start of the request path_@return a predicate that matches if the given predicate matches against the beginning of_the request's path;public static RequestPredicate pathPrefix(String pathPrefixPattern) {_		Assert.notNull(pathPrefixPattern, "'pathPrefixPattern' must not be null")___		if (!pathPrefixPattern.endsWith("/**")) {_			pathPrefixPattern += "/**"__		}_		return path(pathPrefixPattern)__	};return,a,code,request,predicate,that,tests,the,beginning,of,the,request,path,against,the,given,path,pattern,this,predicate,is,effectively,identical,to,a,linkplain,path,string,standard,path,predicate,with,path,code,path,prefix,pattern,param,path,prefix,pattern,the,pattern,to,match,against,the,start,of,the,request,path,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,beginning,of,the,request,s,path;public,static,request,predicate,path,prefix,string,path,prefix,pattern,assert,not,null,path,prefix,pattern,path,prefix,pattern,must,not,be,null,if,path,prefix,pattern,ends,with,path,prefix,pattern,return,path,path,prefix,pattern
RequestPredicates -> public static RequestPredicate pathPrefix(String pathPrefixPattern);1487601624;Return a {@code RequestPredicate} that tests the beginning of the request path against the_given path pattern. This predicate is effectively identical to a_{@linkplain #path(String) standard path predicate} with path {@code pathPrefixPattern + "/**"}._@param pathPrefixPattern the pattern to match against the start of the request path_@return a predicate that matches if the given predicate matches against the beginning of_the request's path;public static RequestPredicate pathPrefix(String pathPrefixPattern) {_		Assert.notNull(pathPrefixPattern, "'pathPrefixPattern' must not be null")___		if (!pathPrefixPattern.endsWith("/**")) {_			pathPrefixPattern += "/**"__		}_		return path(pathPrefixPattern)__	};return,a,code,request,predicate,that,tests,the,beginning,of,the,request,path,against,the,given,path,pattern,this,predicate,is,effectively,identical,to,a,linkplain,path,string,standard,path,predicate,with,path,code,path,prefix,pattern,param,path,prefix,pattern,the,pattern,to,match,against,the,start,of,the,request,path,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,beginning,of,the,request,s,path;public,static,request,predicate,path,prefix,string,path,prefix,pattern,assert,not,null,path,prefix,pattern,path,prefix,pattern,must,not,be,null,if,path,prefix,pattern,ends,with,path,prefix,pattern,return,path,path,prefix,pattern
RequestPredicates -> public static RequestPredicate pathPrefix(String pathPrefixPattern);1487681187;Return a {@code RequestPredicate} that tests the beginning of the request path against the_given path pattern. This predicate is effectively identical to a_{@linkplain #path(String) standard path predicate} with path {@code pathPrefixPattern + "/**"}._@param pathPrefixPattern the pattern to match against the start of the request path_@return a predicate that matches if the given predicate matches against the beginning of_the request's path;public static RequestPredicate pathPrefix(String pathPrefixPattern) {_		Assert.notNull(pathPrefixPattern, "'pathPrefixPattern' must not be null")___		if (!pathPrefixPattern.endsWith("/**")) {_			pathPrefixPattern += "/**"__		}_		return path(pathPrefixPattern)__	};return,a,code,request,predicate,that,tests,the,beginning,of,the,request,path,against,the,given,path,pattern,this,predicate,is,effectively,identical,to,a,linkplain,path,string,standard,path,predicate,with,path,code,path,prefix,pattern,param,path,prefix,pattern,the,pattern,to,match,against,the,start,of,the,request,path,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,beginning,of,the,request,s,path;public,static,request,predicate,path,prefix,string,path,prefix,pattern,assert,not,null,path,prefix,pattern,path,prefix,pattern,must,not,be,null,if,path,prefix,pattern,ends,with,path,prefix,pattern,return,path,path,prefix,pattern
RequestPredicates -> public static RequestPredicate pathPrefix(String pathPrefixPattern);1487687241;Return a {@code RequestPredicate} that tests the beginning of the request path against the_given path pattern. This predicate is effectively identical to a_{@linkplain #path(String) standard path predicate} with path {@code pathPrefixPattern + "/**"}._@param pathPrefixPattern the pattern to match against the start of the request path_@return a predicate that matches if the given predicate matches against the beginning of_the request's path;public static RequestPredicate pathPrefix(String pathPrefixPattern) {_		Assert.notNull(pathPrefixPattern, "'pathPrefixPattern' must not be null")__		if (!pathPrefixPattern.endsWith("/**")) {_			pathPrefixPattern += "/**"__		}_		return path(pathPrefixPattern)__	};return,a,code,request,predicate,that,tests,the,beginning,of,the,request,path,against,the,given,path,pattern,this,predicate,is,effectively,identical,to,a,linkplain,path,string,standard,path,predicate,with,path,code,path,prefix,pattern,param,path,prefix,pattern,the,pattern,to,match,against,the,start,of,the,request,path,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,beginning,of,the,request,s,path;public,static,request,predicate,path,prefix,string,path,prefix,pattern,assert,not,null,path,prefix,pattern,path,prefix,pattern,must,not,be,null,if,path,prefix,pattern,ends,with,path,prefix,pattern,return,path,path,prefix,pattern
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1486996670;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		Assert.notNull(extensionPredicate, "'extensionPredicate' must not be null")__		return request -> {_			String pathExtension = UriUtils.extractFileExtension(request.path())__			return extensionPredicate.test(pathExtension)__		}__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,assert,not,null,extension,predicate,extension,predicate,must,not,be,null,return,request,string,path,extension,uri,utils,extract,file,extension,request,path,return,extension,predicate,test,path,extension
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1487000643;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		Assert.notNull(extensionPredicate, "'extensionPredicate' must not be null")__		return request -> {_			String pathExtension = UriUtils.extractFileExtension(request.path())__			return extensionPredicate.test(pathExtension)__		}__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,assert,not,null,extension,predicate,extension,predicate,must,not,be,null,return,request,string,path,extension,uri,utils,extract,file,extension,request,path,return,extension,predicate,test,path,extension
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1487070708;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		Assert.notNull(extensionPredicate, "'extensionPredicate' must not be null")__		return request -> {_			String pathExtension = UriUtils.extractFileExtension(request.path())__			return extensionPredicate.test(pathExtension)__		}__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,assert,not,null,extension,predicate,extension,predicate,must,not,be,null,return,request,string,path,extension,uri,utils,extract,file,extension,request,path,return,extension,predicate,test,path,extension
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1487153168;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		Assert.notNull(extensionPredicate, "'extensionPredicate' must not be null")__		return request -> {_			String pathExtension = UriUtils.extractFileExtension(request.path())__			return extensionPredicate.test(pathExtension)__		}__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,assert,not,null,extension,predicate,extension,predicate,must,not,be,null,return,request,string,path,extension,uri,utils,extract,file,extension,request,path,return,extension,predicate,test,path,extension
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1487236624;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		Assert.notNull(extensionPredicate, "'extensionPredicate' must not be null")__		return request -> {_			String pathExtension = UriUtils.extractFileExtension(request.path())__			return extensionPredicate.test(pathExtension)__		}__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,assert,not,null,extension,predicate,extension,predicate,must,not,be,null,return,request,string,path,extension,uri,utils,extract,file,extension,request,path,return,extension,predicate,test,path,extension
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1487584763;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		Assert.notNull(extensionPredicate, "'extensionPredicate' must not be null")__		return request -> {_			String pathExtension = UriUtils.extractFileExtension(request.path())__			return extensionPredicate.test(pathExtension)__		}__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,assert,not,null,extension,predicate,extension,predicate,must,not,be,null,return,request,string,path,extension,uri,utils,extract,file,extension,request,path,return,extension,predicate,test,path,extension
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1487601624;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		Assert.notNull(extensionPredicate, "'extensionPredicate' must not be null")__		return request -> {_			String pathExtension = UriUtils.extractFileExtension(request.path())__			return extensionPredicate.test(pathExtension)__		}__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,assert,not,null,extension,predicate,extension,predicate,must,not,be,null,return,request,string,path,extension,uri,utils,extract,file,extension,request,path,return,extension,predicate,test,path,extension
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1487681187;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		Assert.notNull(extensionPredicate, "'extensionPredicate' must not be null")__		return request -> {_			String pathExtension = UriUtils.extractFileExtension(request.path())__			return extensionPredicate.test(pathExtension)__		}__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,assert,not,null,extension,predicate,extension,predicate,must,not,be,null,return,request,string,path,extension,uri,utils,extract,file,extension,request,path,return,extension,predicate,test,path,extension
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1487687241;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		Assert.notNull(extensionPredicate, "'extensionPredicate' must not be null")__		return request -> {_			String pathExtension = UriUtils.extractFileExtension(request.path())__			return extensionPredicate.test(pathExtension)__		}__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,assert,not,null,extension,predicate,extension,predicate,must,not,be,null,return,request,string,path,extension,uri,utils,extract,file,extension,request,path,return,extension,predicate,test,path,extension
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1491557115;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		Assert.notNull(extensionPredicate, "'extensionPredicate' must not be null")__		return request -> {_			String pathExtension = UriUtils.extractFileExtension(request.path())__			return extensionPredicate.test(pathExtension)__		}__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,assert,not,null,extension,predicate,extension,predicate,must,not,be,null,return,request,string,path,extension,uri,utils,extract,file,extension,request,path,return,extension,predicate,test,path,extension
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1492557464;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		Assert.notNull(extensionPredicate, "'extensionPredicate' must not be null")__		return request -> {_			String pathExtension = UriUtils.extractFileExtension(request.path())__			return extensionPredicate.test(pathExtension)__		}__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,assert,not,null,extension,predicate,extension,predicate,must,not,be,null,return,request,string,path,extension,uri,utils,extract,file,extension,request,path,return,extension,predicate,test,path,extension
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1492591191;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		Assert.notNull(extensionPredicate, "'extensionPredicate' must not be null")__		return request -> {_			String pathExtension = UriUtils.extractFileExtension(request.path())__			return extensionPredicate.test(pathExtension)__		}__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,assert,not,null,extension,predicate,extension,predicate,must,not,be,null,return,request,string,path,extension,uri,utils,extract,file,extension,request,path,return,extension,predicate,test,path,extension
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1494489320;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		Assert.notNull(extensionPredicate, "'extensionPredicate' must not be null")__		return request -> {_			String pathExtension = UriUtils.extractFileExtension(request.path())__			return extensionPredicate.test(pathExtension)__		}__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,assert,not,null,extension,predicate,extension,predicate,must,not,be,null,return,request,string,path,extension,uri,utils,extract,file,extension,request,path,return,extension,predicate,test,path,extension
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1494939057;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		Assert.notNull(extensionPredicate, "'extensionPredicate' must not be null")__		return request -> {_			String pathExtension = UriUtils.extractFileExtension(request.path())__			return extensionPredicate.test(pathExtension)__		}__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,assert,not,null,extension,predicate,extension,predicate,must,not,be,null,return,request,string,path,extension,uri,utils,extract,file,extension,request,path,return,extension,predicate,test,path,extension
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1495035625;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		Assert.notNull(extensionPredicate, "'extensionPredicate' must not be null")__		return request -> {_			String pathExtension = UriUtils.extractFileExtension(request.path())__			return extensionPredicate.test(pathExtension)__		}__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,assert,not,null,extension,predicate,extension,predicate,must,not,be,null,return,request,string,path,extension,uri,utils,extract,file,extension,request,path,return,extension,predicate,test,path,extension
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1496837955;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		Assert.notNull(extensionPredicate, "'extensionPredicate' must not be null")__		return request -> {_			String pathExtension = UriUtils.extractFileExtension(request.path())__			return extensionPredicate.test(pathExtension)__		}__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,assert,not,null,extension,predicate,extension,predicate,must,not,be,null,return,request,string,path,extension,uri,utils,extract,file,extension,request,path,return,extension,predicate,test,path,extension
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1498833097;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		Assert.notNull(extensionPredicate, "'extensionPredicate' must not be null")__		return request -> {_			String pathExtension = UriUtils.extractFileExtension(request.path())__			return extensionPredicate.test(pathExtension)__		}__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,assert,not,null,extension,predicate,extension,predicate,must,not,be,null,return,request,string,path,extension,uri,utils,extract,file,extension,request,path,return,extension,predicate,test,path,extension
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1498861175;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		Assert.notNull(extensionPredicate, "'extensionPredicate' must not be null")__		return request -> {_			String pathExtension = UriUtils.extractFileExtension(request.path())__			return extensionPredicate.test(pathExtension)__		}__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,assert,not,null,extension,predicate,extension,predicate,must,not,be,null,return,request,string,path,extension,uri,utils,extract,file,extension,request,path,return,extension,predicate,test,path,extension
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1499081790;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		Assert.notNull(extensionPredicate, "'extensionPredicate' must not be null")__		return request -> {_			String pathExtension = UriUtils.extractFileExtension(request.path())__			return extensionPredicate.test(pathExtension)__		}__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,assert,not,null,extension,predicate,extension,predicate,must,not,be,null,return,request,string,path,extension,uri,utils,extract,file,extension,request,path,return,extension,predicate,test,path,extension
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1499091813;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		Assert.notNull(extensionPredicate, "'extensionPredicate' must not be null")__		return request -> {_			String pathExtension = UriUtils.extractFileExtension(request.path())__			return extensionPredicate.test(pathExtension)__		}__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,assert,not,null,extension,predicate,extension,predicate,must,not,be,null,return,request,string,path,extension,uri,utils,extract,file,extension,request,path,return,extension,predicate,test,path,extension
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1499448036;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		Assert.notNull(extensionPredicate, "'extensionPredicate' must not be null")__		return request -> {_			String pathExtension = UriUtils.extractFileExtension(request.path())__			return extensionPredicate.test(pathExtension)__		}__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,assert,not,null,extension,predicate,extension,predicate,must,not,be,null,return,request,string,path,extension,uri,utils,extract,file,extension,request,path,return,extension,predicate,test,path,extension
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1499780493;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		Assert.notNull(extensionPredicate, "'extensionPredicate' must not be null")__		return request -> {_			String pathExtension = UriUtils.extractFileExtension(request.path())__			return extensionPredicate.test(pathExtension)__		}__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,assert,not,null,extension,predicate,extension,predicate,must,not,be,null,return,request,string,path,extension,uri,utils,extract,file,extension,request,path,return,extension,predicate,test,path,extension
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1500559500;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		Assert.notNull(extensionPredicate, "'extensionPredicate' must not be null")__		return request -> {_			String pathExtension = UriUtils.extractFileExtension(request.path())__			return extensionPredicate.test(pathExtension)__		}__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,assert,not,null,extension,predicate,extension,predicate,must,not,be,null,return,request,string,path,extension,uri,utils,extract,file,extension,request,path,return,extension,predicate,test,path,extension
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1501155515;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		Assert.notNull(extensionPredicate, "'extensionPredicate' must not be null")__		return request -> {_			String pathExtension = UriUtils.extractFileExtension(request.path())__			return extensionPredicate.test(pathExtension)__		}__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,assert,not,null,extension,predicate,extension,predicate,must,not,be,null,return,request,string,path,extension,uri,utils,extract,file,extension,request,path,return,extension,predicate,test,path,extension
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1501237594;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		Assert.notNull(extensionPredicate, "'extensionPredicate' must not be null")__		return request -> {_			String pathExtension = UriUtils.extractFileExtension(request.path())__			return extensionPredicate.test(pathExtension)__		}__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,assert,not,null,extension,predicate,extension,predicate,must,not,be,null,return,request,string,path,extension,uri,utils,extract,file,extension,request,path,return,extension,predicate,test,path,extension
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1501679128;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		Assert.notNull(extensionPredicate, "'extensionPredicate' must not be null")__		return request -> {_			String pathExtension = UriUtils.extractFileExtension(request.path())__			return extensionPredicate.test(pathExtension)__		}__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,assert,not,null,extension,predicate,extension,predicate,must,not,be,null,return,request,string,path,extension,uri,utils,extract,file,extension,request,path,return,extension,predicate,test,path,extension
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1501684266;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		Assert.notNull(extensionPredicate, "'extensionPredicate' must not be null")__		return request -> {_			String pathExtension = UriUtils.extractFileExtension(request.path())__			return extensionPredicate.test(pathExtension)__		}__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,assert,not,null,extension,predicate,extension,predicate,must,not,be,null,return,request,string,path,extension,uri,utils,extract,file,extension,request,path,return,extension,predicate,test,path,extension
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1505477679;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		Assert.notNull(extensionPredicate, "'extensionPredicate' must not be null")__		return request -> {_			String pathExtension = UriUtils.extractFileExtension(request.path())__			return extensionPredicate.test(pathExtension)__		}__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,assert,not,null,extension,predicate,extension,predicate,must,not,be,null,return,request,string,path,extension,uri,utils,extract,file,extension,request,path,return,extension,predicate,test,path,extension
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1506331747;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		Assert.notNull(extensionPredicate, "'extensionPredicate' must not be null")__		return request -> {_			String pathExtension = UriUtils.extractFileExtension(request.path())__			return extensionPredicate.test(pathExtension)__		}__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,assert,not,null,extension,predicate,extension,predicate,must,not,be,null,return,request,string,path,extension,uri,utils,extract,file,extension,request,path,return,extension,predicate,test,path,extension
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1521795630;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		Assert.notNull(extensionPredicate, "'extensionPredicate' must not be null")__		return request -> {_			String pathExtension = UriUtils.extractFileExtension(request.path())__			return extensionPredicate.test(pathExtension)__		}__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,assert,not,null,extension,predicate,extension,predicate,must,not,be,null,return,request,string,path,extension,uri,utils,extract,file,extension,request,path,return,extension,predicate,test,path,extension
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1523351625;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		Assert.notNull(extensionPredicate, "'extensionPredicate' must not be null")__		return request -> {_			String pathExtension = UriUtils.extractFileExtension(request.path())__			return extensionPredicate.test(pathExtension)__		}__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,assert,not,null,extension,predicate,extension,predicate,must,not,be,null,return,request,string,path,extension,uri,utils,extract,file,extension,request,path,return,extension,predicate,test,path,extension
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1524865018;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		Assert.notNull(extensionPredicate, "'extensionPredicate' must not be null")__		return request -> {_			String pathExtension = UriUtils.extractFileExtension(request.path())__			return extensionPredicate.test(pathExtension)__		}__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,assert,not,null,extension,predicate,extension,predicate,must,not,be,null,return,request,string,path,extension,uri,utils,extract,file,extension,request,path,return,extension,predicate,test,path,extension
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1525251240;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		Assert.notNull(extensionPredicate, "'extensionPredicate' must not be null")__		return request -> {_			String pathExtension = UriUtils.extractFileExtension(request.path())__			return extensionPredicate.test(pathExtension)__		}__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,assert,not,null,extension,predicate,extension,predicate,must,not,be,null,return,request,string,path,extension,uri,utils,extract,file,extension,request,path,return,extension,predicate,test,path,extension
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1525338166;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		Assert.notNull(extensionPredicate, "'extensionPredicate' must not be null")__		return request -> {_			String pathExtension = UriUtils.extractFileExtension(request.path())__			return extensionPredicate.test(pathExtension)__		}__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,assert,not,null,extension,predicate,extension,predicate,must,not,be,null,return,request,string,path,extension,uri,utils,extract,file,extension,request,path,return,extension,predicate,test,path,extension
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1526462061;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		return new PathExtensionPredicate(extensionPredicate)__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,return,new,path,extension,predicate,extension,predicate
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1526674893;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		return new PathExtensionPredicate(extensionPredicate)__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,return,new,path,extension,predicate,extension,predicate
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1529721864;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		return new PathExtensionPredicate(extensionPredicate)__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,return,new,path,extension,predicate,extension,predicate
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1530174524;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		return new PathExtensionPredicate(extensionPredicate)__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,return,new,path,extension,predicate,extension,predicate
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1530871276;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		return new PathExtensionPredicate(extensionPredicate)__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,return,new,path,extension,predicate,extension,predicate
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1530877097;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		return new PathExtensionPredicate(extensionPredicate)__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,return,new,path,extension,predicate,extension,predicate
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1532520962;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		return new PathExtensionPredicate(extensionPredicate)__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,return,new,path,extension,predicate,extension,predicate
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1537173292;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		return new PathExtensionPredicate(extensionPredicate)__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,return,new,path,extension,predicate,extension,predicate
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1537188605;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		return new PathExtensionPredicate(extensionPredicate)__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,return,new,path,extension,predicate,extension,predicate
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1538658936;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		return new PathExtensionPredicate(extensionPredicate)__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,return,new,path,extension,predicate,extension,predicate
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1539866925;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		return new PathExtensionPredicate(extensionPredicate)__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,return,new,path,extension,predicate,extension,predicate
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1542719117;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		return new PathExtensionPredicate(extensionPredicate)__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,return,new,path,extension,predicate,extension,predicate
RequestPredicates -> public static RequestPredicate pathExtension(Predicate<String> extensionPredicate);1544625213;Return a {@code RequestPredicate} that matches if the request's path matches the given_predicate._@param extensionPredicate the predicate to test against the request path extension_@return a predicate that matches if the given predicate matches against the request's path_file extension;public static RequestPredicate pathExtension(Predicate<String> extensionPredicate) {_		return new PathExtensionPredicate(extensionPredicate)__	};return,a,code,request,predicate,that,matches,if,the,request,s,path,matches,the,given,predicate,param,extension,predicate,the,predicate,to,test,against,the,request,path,extension,return,a,predicate,that,matches,if,the,given,predicate,matches,against,the,request,s,path,file,extension;public,static,request,predicate,path,extension,predicate,string,extension,predicate,return,new,path,extension,predicate,extension,predicate
RequestPredicates -> public static RequestPredicate html();1486996670;Return a {@code RequestPredicate} that matches HTML requests. The returned predicate_matches if the request has {@code text/html} in the {@code Accept} header, or if the request_path has a {@code .html} file extension.__@return a predicate that matches HTML requests_@see #accept(MediaType...)_@see #pathExtension(String);public static RequestPredicate html() {_		return accept(MediaType.TEXT_HTML)_				.or(pathExtension("html"))__	};return,a,code,request,predicate,that,matches,html,requests,the,returned,predicate,matches,if,the,request,has,code,text,html,in,the,code,accept,header,or,if,the,request,path,has,a,code,html,file,extension,return,a,predicate,that,matches,html,requests,see,accept,media,type,see,path,extension,string;public,static,request,predicate,html,return,accept,media,type,or,path,extension,html
RequestPredicates -> public static RequestPredicate html();1487000643;Return a {@code RequestPredicate} that matches HTML requests. The returned predicate_matches if the request has {@code text/html} in the {@code Accept} header, or if the request_path has a {@code .html} file extension.__@return a predicate that matches HTML requests_@see #accept(MediaType...)_@see #pathExtension(String);public static RequestPredicate html() {_		return accept(MediaType.TEXT_HTML)_				.or(pathExtension("html"))__	};return,a,code,request,predicate,that,matches,html,requests,the,returned,predicate,matches,if,the,request,has,code,text,html,in,the,code,accept,header,or,if,the,request,path,has,a,code,html,file,extension,return,a,predicate,that,matches,html,requests,see,accept,media,type,see,path,extension,string;public,static,request,predicate,html,return,accept,media,type,or,path,extension,html
RequestPredicates -> public static RequestPredicate html();1487070708;Return a {@code RequestPredicate} that matches HTML requests. The returned predicate_matches if the request has {@code text/html} in the {@code Accept} header, or if the request_path has a {@code .html} file extension.__@return a predicate that matches HTML requests_@see #accept(MediaType...)_@see #pathExtension(String);public static RequestPredicate html() {_		return accept(MediaType.TEXT_HTML)_				.or(pathExtension("html"))__	};return,a,code,request,predicate,that,matches,html,requests,the,returned,predicate,matches,if,the,request,has,code,text,html,in,the,code,accept,header,or,if,the,request,path,has,a,code,html,file,extension,return,a,predicate,that,matches,html,requests,see,accept,media,type,see,path,extension,string;public,static,request,predicate,html,return,accept,media,type,or,path,extension,html
RequestPredicates -> Visitor -> void endOr()_;1542719117;Receive last notification of a logical OR predicate._@see RequestPredicate#or(RequestPredicate);void endOr()_;receive,last,notification,of,a,logical,or,predicate,see,request,predicate,or,request,predicate;void,end,or
RequestPredicates -> Visitor -> void endOr()_;1544625213;Receive last notification of a logical OR predicate._@see RequestPredicate#or(RequestPredicate);void endOr()_;receive,last,notification,of,a,logical,or,predicate,see,request,predicate,or,request,predicate;void,end,or
RequestPredicates -> Visitor -> void startOr()_;1542719117;Receive first notification of a logical OR predicate._The first subsequent notification will contain the left-hand side of the OR-predicate__the second notification contains the right-hand side, followed by {@link #endOr()}._@see RequestPredicate#or(RequestPredicate);void startOr()_;receive,first,notification,of,a,logical,or,predicate,the,first,subsequent,notification,will,contain,the,left,hand,side,of,the,or,predicate,the,second,notification,contains,the,right,hand,side,followed,by,link,end,or,see,request,predicate,or,request,predicate;void,start,or
RequestPredicates -> Visitor -> void startOr()_;1544625213;Receive first notification of a logical OR predicate._The first subsequent notification will contain the left-hand side of the OR-predicate__the second notification contains the right-hand side, followed by {@link #endOr()}._@see RequestPredicate#or(RequestPredicate);void startOr()_;receive,first,notification,of,a,logical,or,predicate,the,first,subsequent,notification,will,contain,the,left,hand,side,of,the,or,predicate,the,second,notification,contains,the,right,hand,side,followed,by,link,end,or,see,request,predicate,or,request,predicate;void,start,or
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1486996670;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given_name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return request -> {_			Optional<String> s = request.queryParam(name)__			return s.filter(predicate).isPresent()__		}__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,request,optional,string,s,request,query,param,name,return,s,filter,predicate,is,present
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1487000643;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given_name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return request -> {_			Optional<String> s = request.queryParam(name)__			return s.filter(predicate).isPresent()__		}__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,request,optional,string,s,request,query,param,name,return,s,filter,predicate,is,present
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1487070708;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given_name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return request -> {_			Optional<String> s = request.queryParam(name)__			return s.filter(predicate).isPresent()__		}__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,request,optional,string,s,request,query,param,name,return,s,filter,predicate,is,present
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1487153168;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given_name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return request -> {_			Optional<String> s = request.queryParam(name)__			return s.filter(predicate).isPresent()__		}__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,request,optional,string,s,request,query,param,name,return,s,filter,predicate,is,present
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1487236624;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given_name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return request -> {_			Optional<String> s = request.queryParam(name)__			return s.filter(predicate).isPresent()__		}__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,request,optional,string,s,request,query,param,name,return,s,filter,predicate,is,present
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1487584763;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given_name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return request -> {_			Optional<String> s = request.queryParam(name)__			return s.filter(predicate).isPresent()__		}__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,request,optional,string,s,request,query,param,name,return,s,filter,predicate,is,present
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1487601624;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given_name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return request -> {_			Optional<String> s = request.queryParam(name)__			return s.filter(predicate).isPresent()__		}__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,request,optional,string,s,request,query,param,name,return,s,filter,predicate,is,present
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1487681187;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given_name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return request -> {_			Optional<String> s = request.queryParam(name)__			return s.filter(predicate).isPresent()__		}__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,request,optional,string,s,request,query,param,name,return,s,filter,predicate,is,present
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1487687241;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return request -> {_			Optional<String> s = request.queryParam(name)__			return s.filter(predicate).isPresent()__		}__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,request,optional,string,s,request,query,param,name,return,s,filter,predicate,is,present
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1491557115;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return request -> {_			Optional<String> s = request.queryParam(name)__			return s.filter(predicate).isPresent()__		}__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,request,optional,string,s,request,query,param,name,return,s,filter,predicate,is,present
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1492557464;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return request -> {_			Optional<String> s = request.queryParam(name)__			return s.filter(predicate).isPresent()__		}__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,request,optional,string,s,request,query,param,name,return,s,filter,predicate,is,present
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1492591191;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return request -> {_			Optional<String> s = request.queryParam(name)__			return s.filter(predicate).isPresent()__		}__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,request,optional,string,s,request,query,param,name,return,s,filter,predicate,is,present
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1494489320;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return request -> {_			Optional<String> s = request.queryParam(name)__			return s.filter(predicate).isPresent()__		}__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,request,optional,string,s,request,query,param,name,return,s,filter,predicate,is,present
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1494939057;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return request -> {_			Optional<String> s = request.queryParam(name)__			return s.filter(predicate).isPresent()__		}__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,request,optional,string,s,request,query,param,name,return,s,filter,predicate,is,present
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1495035625;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return request -> {_			Optional<String> s = request.queryParam(name)__			return s.filter(predicate).isPresent()__		}__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,request,optional,string,s,request,query,param,name,return,s,filter,predicate,is,present
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1496837955;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return request -> {_			Optional<String> s = request.queryParam(name)__			return s.filter(predicate).isPresent()__		}__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,request,optional,string,s,request,query,param,name,return,s,filter,predicate,is,present
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1498833097;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return request -> {_			Optional<String> s = request.queryParam(name)__			return s.filter(predicate).isPresent()__		}__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,request,optional,string,s,request,query,param,name,return,s,filter,predicate,is,present
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1498861175;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return request -> {_			Optional<String> s = request.queryParam(name)__			return s.filter(predicate).isPresent()__		}__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,request,optional,string,s,request,query,param,name,return,s,filter,predicate,is,present
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1499081790;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return request -> {_			Optional<String> s = request.queryParam(name)__			return s.filter(predicate).isPresent()__		}__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,request,optional,string,s,request,query,param,name,return,s,filter,predicate,is,present
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1499091813;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return request -> {_			Optional<String> s = request.queryParam(name)__			return s.filter(predicate).isPresent()__		}__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,request,optional,string,s,request,query,param,name,return,s,filter,predicate,is,present
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1499448036;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return request -> {_			Optional<String> s = request.queryParam(name)__			return s.filter(predicate).isPresent()__		}__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,request,optional,string,s,request,query,param,name,return,s,filter,predicate,is,present
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1499780493;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return request -> {_			Optional<String> s = request.queryParam(name)__			return s.filter(predicate).isPresent()__		}__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,request,optional,string,s,request,query,param,name,return,s,filter,predicate,is,present
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1500559500;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return request -> {_			Optional<String> s = request.queryParam(name)__			return s.filter(predicate).isPresent()__		}__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,request,optional,string,s,request,query,param,name,return,s,filter,predicate,is,present
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1501155515;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return request -> {_			Optional<String> s = request.queryParam(name)__			return s.filter(predicate).isPresent()__		}__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,request,optional,string,s,request,query,param,name,return,s,filter,predicate,is,present
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1501237594;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return request -> {_			Optional<String> s = request.queryParam(name)__			return s.filter(predicate).isPresent()__		}__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,request,optional,string,s,request,query,param,name,return,s,filter,predicate,is,present
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1501679128;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return request -> {_			Optional<String> s = request.queryParam(name)__			return s.filter(predicate).isPresent()__		}__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,request,optional,string,s,request,query,param,name,return,s,filter,predicate,is,present
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1501684266;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return request -> {_			Optional<String> s = request.queryParam(name)__			return s.filter(predicate).isPresent()__		}__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,request,optional,string,s,request,query,param,name,return,s,filter,predicate,is,present
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1505477679;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return request -> {_			Optional<String> s = request.queryParam(name)__			return s.filter(predicate).isPresent()__		}__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,request,optional,string,s,request,query,param,name,return,s,filter,predicate,is,present
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1506331747;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return request -> {_			Optional<String> s = request.queryParam(name)__			return s.filter(predicate).isPresent()__		}__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,request,optional,string,s,request,query,param,name,return,s,filter,predicate,is,present
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1521795630;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return request -> {_			Optional<String> s = request.queryParam(name)__			return s.filter(predicate).isPresent()__		}__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,request,optional,string,s,request,query,param,name,return,s,filter,predicate,is,present
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1523351625;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return request -> {_			Optional<String> s = request.queryParam(name)__			return s.filter(predicate).isPresent()__		}__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,request,optional,string,s,request,query,param,name,return,s,filter,predicate,is,present
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1524865018;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return request -> {_			Optional<String> s = request.queryParam(name)__			return s.filter(predicate).isPresent()__		}__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,request,optional,string,s,request,query,param,name,return,s,filter,predicate,is,present
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1525251240;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return request -> {_			Optional<String> s = request.queryParam(name)__			return s.filter(predicate).isPresent()__		}__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,request,optional,string,s,request,query,param,name,return,s,filter,predicate,is,present
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1525338166;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return request -> {_			Optional<String> s = request.queryParam(name)__			return s.filter(predicate).isPresent()__		}__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,request,optional,string,s,request,query,param,name,return,s,filter,predicate,is,present
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1526462061;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return new QueryParamPredicate(name, predicate)__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,new,query,param,predicate,name,predicate
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1526674893;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return new QueryParamPredicate(name, predicate)__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,new,query,param,predicate,name,predicate
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1529721864;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return new QueryParamPredicate(name, predicate)__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,new,query,param,predicate,name,predicate
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1530174524;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return new QueryParamPredicate(name, predicate)__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,new,query,param,predicate,name,predicate
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1530871276;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return new QueryParamPredicate(name, predicate)__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,new,query,param,predicate,name,predicate
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1530877097;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return new QueryParamPredicate(name, predicate)__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,new,query,param,predicate,name,predicate
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1532520962;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return new QueryParamPredicate(name, predicate)__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,new,query,param,predicate,name,predicate
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1537173292;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return new QueryParamPredicate(name, predicate)__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,new,query,param,predicate,name,predicate
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1537188605;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return new QueryParamPredicate(name, predicate)__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,new,query,param,predicate,name,predicate
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1538658936;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return new QueryParamPredicate(name, predicate)__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,new,query,param,predicate,name,predicate
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1539866925;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return new QueryParamPredicate(name, predicate)__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,new,query,param,predicate,name,predicate
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1542719117;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return new QueryParamPredicate(name, predicate)__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,new,query,param,predicate,name,predicate
RequestPredicates -> public static RequestPredicate queryParam(String name, Predicate<String> predicate);1544625213;Return a {@code RequestPredicate} that tests the request's query parameter of the given name_against the given predicate._@param name the name of the query parameter to test against_@param predicate predicate to test against the query parameter value_@return a predicate that matches the given predicate against the query parameter of the given name_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, Predicate<String> predicate) {_		return new QueryParamPredicate(name, predicate)__	};return,a,code,request,predicate,that,tests,the,request,s,query,parameter,of,the,given,name,against,the,given,predicate,param,name,the,name,of,the,query,parameter,to,test,against,param,predicate,predicate,to,test,against,the,query,parameter,value,return,a,predicate,that,matches,the,given,predicate,against,the,query,parameter,of,the,given,name,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,predicate,string,predicate,return,new,query,param,predicate,name,predicate
RequestPredicates -> public static RequestPredicate queryParam(String name, String value);1526462061;Return a {@code RequestPredicate} that matches if the request's query parameter of the given name_has the given value_@param name the name of the query parameter to test against_@param value the value of the query parameter to test against_@return a predicate that matches if the query parameter has the given value_@see ServerRequest#queryParam(String)_@since 5.0.7;public static RequestPredicate queryParam(String name, String value) {_		return queryParam(name, new Predicate<String>() {_			@Override_			public boolean test(String s) {_				return s.equals(value)__			}__			@Override_			public String toString() {_				return String.format("== %s", value)__			}_		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,query,parameter,of,the,given,name,has,the,given,value,param,name,the,name,of,the,query,parameter,to,test,against,param,value,the,value,of,the,query,parameter,to,test,against,return,a,predicate,that,matches,if,the,query,parameter,has,the,given,value,see,server,request,query,param,string,since,5,0,7;public,static,request,predicate,query,param,string,name,string,value,return,query,param,name,new,predicate,string,override,public,boolean,test,string,s,return,s,equals,value,override,public,string,to,string,return,string,format,s,value
RequestPredicates -> public static RequestPredicate queryParam(String name, String value);1526674893;Return a {@code RequestPredicate} that matches if the request's query parameter of the given name_has the given value_@param name the name of the query parameter to test against_@param value the value of the query parameter to test against_@return a predicate that matches if the query parameter has the given value_@since 5.0.7_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, String value) {_		return queryParam(name, new Predicate<String>() {_			@Override_			public boolean test(String s) {_				return s.equals(value)__			}_			@Override_			public String toString() {_				return String.format("== %s", value)__			}_		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,query,parameter,of,the,given,name,has,the,given,value,param,name,the,name,of,the,query,parameter,to,test,against,param,value,the,value,of,the,query,parameter,to,test,against,return,a,predicate,that,matches,if,the,query,parameter,has,the,given,value,since,5,0,7,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,string,value,return,query,param,name,new,predicate,string,override,public,boolean,test,string,s,return,s,equals,value,override,public,string,to,string,return,string,format,s,value
RequestPredicates -> public static RequestPredicate queryParam(String name, String value);1529721864;Return a {@code RequestPredicate} that matches if the request's query parameter of the given name_has the given value_@param name the name of the query parameter to test against_@param value the value of the query parameter to test against_@return a predicate that matches if the query parameter has the given value_@since 5.0.7_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, String value) {_		return queryParam(name, new Predicate<String>() {_			@Override_			public boolean test(String s) {_				return s.equals(value)__			}_			@Override_			public String toString() {_				return String.format("== %s", value)__			}_		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,query,parameter,of,the,given,name,has,the,given,value,param,name,the,name,of,the,query,parameter,to,test,against,param,value,the,value,of,the,query,parameter,to,test,against,return,a,predicate,that,matches,if,the,query,parameter,has,the,given,value,since,5,0,7,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,string,value,return,query,param,name,new,predicate,string,override,public,boolean,test,string,s,return,s,equals,value,override,public,string,to,string,return,string,format,s,value
RequestPredicates -> public static RequestPredicate queryParam(String name, String value);1530174524;Return a {@code RequestPredicate} that matches if the request's query parameter of the given name_has the given value._@param name the name of the query parameter to test against_@param value the value of the query parameter to test against_@return a predicate that matches if the query parameter has the given value_@since 5.0.7_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, String value) {_		return queryParam(name, new Predicate<String>() {_			@Override_			public boolean test(String s) {_				return s.equals(value)__			}_			@Override_			public String toString() {_				return String.format("== %s", value)__			}_		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,query,parameter,of,the,given,name,has,the,given,value,param,name,the,name,of,the,query,parameter,to,test,against,param,value,the,value,of,the,query,parameter,to,test,against,return,a,predicate,that,matches,if,the,query,parameter,has,the,given,value,since,5,0,7,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,string,value,return,query,param,name,new,predicate,string,override,public,boolean,test,string,s,return,s,equals,value,override,public,string,to,string,return,string,format,s,value
RequestPredicates -> public static RequestPredicate queryParam(String name, String value);1530871276;Return a {@code RequestPredicate} that matches if the request's query parameter of the given name_has the given value._@param name the name of the query parameter to test against_@param value the value of the query parameter to test against_@return a predicate that matches if the query parameter has the given value_@since 5.0.7_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, String value) {_		return queryParam(name, new Predicate<String>() {_			@Override_			public boolean test(String s) {_				return s.equals(value)__			}_			@Override_			public String toString() {_				return String.format("== %s", value)__			}_		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,query,parameter,of,the,given,name,has,the,given,value,param,name,the,name,of,the,query,parameter,to,test,against,param,value,the,value,of,the,query,parameter,to,test,against,return,a,predicate,that,matches,if,the,query,parameter,has,the,given,value,since,5,0,7,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,string,value,return,query,param,name,new,predicate,string,override,public,boolean,test,string,s,return,s,equals,value,override,public,string,to,string,return,string,format,s,value
RequestPredicates -> public static RequestPredicate queryParam(String name, String value);1530877097;Return a {@code RequestPredicate} that matches if the request's query parameter of the given name_has the given value._@param name the name of the query parameter to test against_@param value the value of the query parameter to test against_@return a predicate that matches if the query parameter has the given value_@since 5.0.7_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, String value) {_		return queryParam(name, new Predicate<String>() {_			@Override_			public boolean test(String s) {_				return s.equals(value)__			}_			@Override_			public String toString() {_				return String.format("== %s", value)__			}_		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,query,parameter,of,the,given,name,has,the,given,value,param,name,the,name,of,the,query,parameter,to,test,against,param,value,the,value,of,the,query,parameter,to,test,against,return,a,predicate,that,matches,if,the,query,parameter,has,the,given,value,since,5,0,7,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,string,value,return,query,param,name,new,predicate,string,override,public,boolean,test,string,s,return,s,equals,value,override,public,string,to,string,return,string,format,s,value
RequestPredicates -> public static RequestPredicate queryParam(String name, String value);1532520962;Return a {@code RequestPredicate} that matches if the request's query parameter of the given name_has the given value._@param name the name of the query parameter to test against_@param value the value of the query parameter to test against_@return a predicate that matches if the query parameter has the given value_@since 5.0.7_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, String value) {_		return queryParam(name, new Predicate<String>() {_			@Override_			public boolean test(String s) {_				return s.equals(value)__			}_			@Override_			public String toString() {_				return String.format("== %s", value)__			}_		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,query,parameter,of,the,given,name,has,the,given,value,param,name,the,name,of,the,query,parameter,to,test,against,param,value,the,value,of,the,query,parameter,to,test,against,return,a,predicate,that,matches,if,the,query,parameter,has,the,given,value,since,5,0,7,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,string,value,return,query,param,name,new,predicate,string,override,public,boolean,test,string,s,return,s,equals,value,override,public,string,to,string,return,string,format,s,value
RequestPredicates -> public static RequestPredicate queryParam(String name, String value);1537173292;Return a {@code RequestPredicate} that matches if the request's query parameter of the given name_has the given value._@param name the name of the query parameter to test against_@param value the value of the query parameter to test against_@return a predicate that matches if the query parameter has the given value_@since 5.0.7_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, String value) {_		return queryParam(name, new Predicate<String>() {_			@Override_			public boolean test(String s) {_				return s.equals(value)__			}_			@Override_			public String toString() {_				return String.format("== %s", value)__			}_		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,query,parameter,of,the,given,name,has,the,given,value,param,name,the,name,of,the,query,parameter,to,test,against,param,value,the,value,of,the,query,parameter,to,test,against,return,a,predicate,that,matches,if,the,query,parameter,has,the,given,value,since,5,0,7,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,string,value,return,query,param,name,new,predicate,string,override,public,boolean,test,string,s,return,s,equals,value,override,public,string,to,string,return,string,format,s,value
RequestPredicates -> public static RequestPredicate queryParam(String name, String value);1537188605;Return a {@code RequestPredicate} that matches if the request's query parameter of the given name_has the given value._@param name the name of the query parameter to test against_@param value the value of the query parameter to test against_@return a predicate that matches if the query parameter has the given value_@since 5.0.7_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, String value) {_		return queryParam(name, new Predicate<String>() {_			@Override_			public boolean test(String s) {_				return s.equals(value)__			}_			@Override_			public String toString() {_				return String.format("== %s", value)__			}_		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,query,parameter,of,the,given,name,has,the,given,value,param,name,the,name,of,the,query,parameter,to,test,against,param,value,the,value,of,the,query,parameter,to,test,against,return,a,predicate,that,matches,if,the,query,parameter,has,the,given,value,since,5,0,7,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,string,value,return,query,param,name,new,predicate,string,override,public,boolean,test,string,s,return,s,equals,value,override,public,string,to,string,return,string,format,s,value
RequestPredicates -> public static RequestPredicate queryParam(String name, String value);1538658936;Return a {@code RequestPredicate} that matches if the request's query parameter of the given name_has the given value._@param name the name of the query parameter to test against_@param value the value of the query parameter to test against_@return a predicate that matches if the query parameter has the given value_@since 5.0.7_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, String value) {_		return queryParam(name, new Predicate<String>() {_			@Override_			public boolean test(String s) {_				return s.equals(value)__			}_			@Override_			public String toString() {_				return String.format("== %s", value)__			}_		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,query,parameter,of,the,given,name,has,the,given,value,param,name,the,name,of,the,query,parameter,to,test,against,param,value,the,value,of,the,query,parameter,to,test,against,return,a,predicate,that,matches,if,the,query,parameter,has,the,given,value,since,5,0,7,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,string,value,return,query,param,name,new,predicate,string,override,public,boolean,test,string,s,return,s,equals,value,override,public,string,to,string,return,string,format,s,value
RequestPredicates -> public static RequestPredicate queryParam(String name, String value);1539866925;Return a {@code RequestPredicate} that matches if the request's query parameter of the given name_has the given value._@param name the name of the query parameter to test against_@param value the value of the query parameter to test against_@return a predicate that matches if the query parameter has the given value_@since 5.0.7_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, String value) {_		return queryParam(name, new Predicate<String>() {_			@Override_			public boolean test(String s) {_				return s.equals(value)__			}_			@Override_			public String toString() {_				return String.format("== %s", value)__			}_		})__	};return,a,code,request,predicate,that,matches,if,the,request,s,query,parameter,of,the,given,name,has,the,given,value,param,name,the,name,of,the,query,parameter,to,test,against,param,value,the,value,of,the,query,parameter,to,test,against,return,a,predicate,that,matches,if,the,query,parameter,has,the,given,value,since,5,0,7,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,string,value,return,query,param,name,new,predicate,string,override,public,boolean,test,string,s,return,s,equals,value,override,public,string,to,string,return,string,format,s,value
RequestPredicates -> public static RequestPredicate queryParam(String name, String value);1542719117;Return a {@code RequestPredicate} that matches if the request's query parameter of the given name_has the given value._@param name the name of the query parameter to test against_@param value the value of the query parameter to test against_@return a predicate that matches if the query parameter has the given value_@since 5.0.7_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, String value) {_		return new QueryParamPredicate(name, value)__	};return,a,code,request,predicate,that,matches,if,the,request,s,query,parameter,of,the,given,name,has,the,given,value,param,name,the,name,of,the,query,parameter,to,test,against,param,value,the,value,of,the,query,parameter,to,test,against,return,a,predicate,that,matches,if,the,query,parameter,has,the,given,value,since,5,0,7,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,string,value,return,new,query,param,predicate,name,value
RequestPredicates -> public static RequestPredicate queryParam(String name, String value);1544625213;Return a {@code RequestPredicate} that matches if the request's query parameter of the given name_has the given value._@param name the name of the query parameter to test against_@param value the value of the query parameter to test against_@return a predicate that matches if the query parameter has the given value_@since 5.0.7_@see ServerRequest#queryParam(String);public static RequestPredicate queryParam(String name, String value) {_		return new QueryParamPredicate(name, value)__	};return,a,code,request,predicate,that,matches,if,the,request,s,query,parameter,of,the,given,name,has,the,given,value,param,name,the,name,of,the,query,parameter,to,test,against,param,value,the,value,of,the,query,parameter,to,test,against,return,a,predicate,that,matches,if,the,query,parameter,has,the,given,value,since,5,0,7,see,server,request,query,param,string;public,static,request,predicate,query,param,string,name,string,value,return,new,query,param,predicate,name,value
RequestPredicates -> Visitor -> void header(String name, String value)_;1542719117;Receive notification of a HTTP header predicate._@param name the name of the HTTP header to check_@param value the desired value of the HTTP header_@see RequestPredicates#headers(Predicate)_@see RequestPredicates#contentType(MediaType...)_@see RequestPredicates#accept(MediaType...);void header(String name, String value)_;receive,notification,of,a,http,header,predicate,param,name,the,name,of,the,http,header,to,check,param,value,the,desired,value,of,the,http,header,see,request,predicates,headers,predicate,see,request,predicates,content,type,media,type,see,request,predicates,accept,media,type;void,header,string,name,string,value
RequestPredicates -> Visitor -> void header(String name, String value)_;1544625213;Receive notification of a HTTP header predicate._@param name the name of the HTTP header to check_@param value the desired value of the HTTP header_@see RequestPredicates#headers(Predicate)_@see RequestPredicates#contentType(MediaType...)_@see RequestPredicates#accept(MediaType...);void header(String name, String value)_;receive,notification,of,a,http,header,predicate,param,name,the,name,of,the,http,header,to,check,param,value,the,desired,value,of,the,http,header,see,request,predicates,headers,predicate,see,request,predicates,content,type,media,type,see,request,predicates,accept,media,type;void,header,string,name,string,value
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1485986572;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is {@linkplain MediaType#includes(MediaType) included}_by any of the given media types.__@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))__		return headers(headers -> {_			MediaType contentType = headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__			return mediaTypeSet.stream()_					.anyMatch(mediaType -> mediaType.includes(contentType))___		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,return,media,type,set,stream,any,match,media,type,media,type,includes,content,type
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1486634978;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is {@linkplain MediaType#includes(MediaType) included}_by any of the given media types.__@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))__		return headers(headers -> {_			MediaType contentType = headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__			return mediaTypeSet.stream()_					.anyMatch(mediaType -> mediaType.includes(contentType))___		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,return,media,type,set,stream,any,match,media,type,media,type,includes,content,type
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1486996670;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is {@linkplain MediaType#includes(MediaType) included}_by any of the given media types.__@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))__		return headers(headers -> {_			MediaType contentType = headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__			return mediaTypeSet.stream()_					.anyMatch(mediaType -> mediaType.includes(contentType))___		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,return,media,type,set,stream,any,match,media,type,media,type,includes,content,type
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1487000643;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is {@linkplain MediaType#includes(MediaType) included}_by any of the given media types.__@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))__		return headers(headers -> {_			MediaType contentType = headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__			return mediaTypeSet.stream()_					.anyMatch(mediaType -> mediaType.includes(contentType))___		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,return,media,type,set,stream,any,match,media,type,media,type,includes,content,type
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1487070708;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is {@linkplain MediaType#includes(MediaType) included}_by any of the given media types.__@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))__		return headers(headers -> {_			MediaType contentType = headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__			return mediaTypeSet.stream()_					.anyMatch(mediaType -> mediaType.includes(contentType))___		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,return,media,type,set,stream,any,match,media,type,media,type,includes,content,type
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1487153168;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is {@linkplain MediaType#includes(MediaType) included}_by any of the given media types.__@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))__		return headers(headers -> {_			MediaType contentType = headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__			return mediaTypeSet.stream()_					.anyMatch(mediaType -> mediaType.includes(contentType))___		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,return,media,type,set,stream,any,match,media,type,media,type,includes,content,type
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1487236624;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is {@linkplain MediaType#includes(MediaType) included}_by any of the given media types.__@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))__		return headers(headers -> {_			MediaType contentType = headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__			return mediaTypeSet.stream()_					.anyMatch(mediaType -> mediaType.includes(contentType))___		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,return,media,type,set,stream,any,match,media,type,media,type,includes,content,type
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1487584763;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is {@linkplain MediaType#includes(MediaType) included}_by any of the given media types.__@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))__		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				MediaType contentType =_						headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__				boolean match = mediaTypeSet.stream()_						.anyMatch(mediaType -> mediaType.includes(contentType))__				traceMatch("Content-Type", mediaTypeSet, contentType, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Content-Type: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,boolean,match,media,type,set,stream,any,match,media,type,media,type,includes,content,type,trace,match,content,type,media,type,set,content,type,match,return,match,override,public,string,to,string,return,string,format,content,type,s,media,type,set
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1487601624;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is {@linkplain MediaType#includes(MediaType) included}_by any of the given media types.__@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))__		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				MediaType contentType =_						headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__				boolean match = mediaTypeSet.stream()_						.anyMatch(mediaType -> mediaType.includes(contentType))__				traceMatch("Content-Type", mediaTypeSet, contentType, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Content-Type: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,boolean,match,media,type,set,stream,any,match,media,type,media,type,includes,content,type,trace,match,content,type,media,type,set,content,type,match,return,match,override,public,string,to,string,return,string,format,content,type,s,media,type,set
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1487681187;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is {@linkplain MediaType#includes(MediaType) included}_by any of the given media types.__@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))__		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				MediaType contentType =_						headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__				boolean match = mediaTypeSet.stream()_						.anyMatch(mediaType -> mediaType.includes(contentType))__				traceMatch("Content-Type", mediaTypeSet, contentType, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Content-Type: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,boolean,match,media,type,set,stream,any,match,media,type,media,type,includes,content,type,trace,match,content,type,media,type,set,content,type,match,return,match,override,public,string,to,string,return,string,format,content,type,s,media,type,set
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1487687241;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is_{@linkplain MediaType#includes(MediaType) included} by any of the given media types._@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				MediaType contentType =_						headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__				boolean match = mediaTypeSet.stream()_						.anyMatch(mediaType -> mediaType.includes(contentType))__				traceMatch("Content-Type", mediaTypeSet, contentType, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Content-Type: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,boolean,match,media,type,set,stream,any,match,media,type,media,type,includes,content,type,trace,match,content,type,media,type,set,content,type,match,return,match,override,public,string,to,string,return,string,format,content,type,s,media,type,set
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1491557115;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is_{@linkplain MediaType#includes(MediaType) included} by any of the given media types._@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				MediaType contentType =_						headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__				boolean match = mediaTypeSet.stream()_						.anyMatch(mediaType -> mediaType.includes(contentType))__				traceMatch("Content-Type", mediaTypeSet, contentType, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Content-Type: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,boolean,match,media,type,set,stream,any,match,media,type,media,type,includes,content,type,trace,match,content,type,media,type,set,content,type,match,return,match,override,public,string,to,string,return,string,format,content,type,s,media,type,set
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1492557464;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is_{@linkplain MediaType#includes(MediaType) included} by any of the given media types._@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				MediaType contentType =_						headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__				boolean match = mediaTypeSet.stream()_						.anyMatch(mediaType -> mediaType.includes(contentType))__				traceMatch("Content-Type", mediaTypeSet, contentType, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Content-Type: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,boolean,match,media,type,set,stream,any,match,media,type,media,type,includes,content,type,trace,match,content,type,media,type,set,content,type,match,return,match,override,public,string,to,string,return,string,format,content,type,s,media,type,set
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1492591191;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is_{@linkplain MediaType#includes(MediaType) included} by any of the given media types._@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				MediaType contentType =_						headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__				boolean match = mediaTypeSet.stream()_						.anyMatch(mediaType -> mediaType.includes(contentType))__				traceMatch("Content-Type", mediaTypeSet, contentType, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Content-Type: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,boolean,match,media,type,set,stream,any,match,media,type,media,type,includes,content,type,trace,match,content,type,media,type,set,content,type,match,return,match,override,public,string,to,string,return,string,format,content,type,s,media,type,set
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1494489320;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is_{@linkplain MediaType#includes(MediaType) included} by any of the given media types._@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				MediaType contentType =_						headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__				boolean match = mediaTypeSet.stream()_						.anyMatch(mediaType -> mediaType.includes(contentType))__				traceMatch("Content-Type", mediaTypeSet, contentType, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Content-Type: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,boolean,match,media,type,set,stream,any,match,media,type,media,type,includes,content,type,trace,match,content,type,media,type,set,content,type,match,return,match,override,public,string,to,string,return,string,format,content,type,s,media,type,set
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1494939057;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is_{@linkplain MediaType#includes(MediaType) included} by any of the given media types._@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				MediaType contentType =_						headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__				boolean match = mediaTypeSet.stream()_						.anyMatch(mediaType -> mediaType.includes(contentType))__				traceMatch("Content-Type", mediaTypeSet, contentType, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Content-Type: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,boolean,match,media,type,set,stream,any,match,media,type,media,type,includes,content,type,trace,match,content,type,media,type,set,content,type,match,return,match,override,public,string,to,string,return,string,format,content,type,s,media,type,set
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1495035625;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is_{@linkplain MediaType#includes(MediaType) included} by any of the given media types._@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				MediaType contentType =_						headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__				boolean match = mediaTypeSet.stream()_						.anyMatch(mediaType -> mediaType.includes(contentType))__				traceMatch("Content-Type", mediaTypeSet, contentType, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Content-Type: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,boolean,match,media,type,set,stream,any,match,media,type,media,type,includes,content,type,trace,match,content,type,media,type,set,content,type,match,return,match,override,public,string,to,string,return,string,format,content,type,s,media,type,set
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1496837955;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is_{@linkplain MediaType#includes(MediaType) included} by any of the given media types._@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				MediaType contentType =_						headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__				boolean match = mediaTypeSet.stream()_						.anyMatch(mediaType -> mediaType.includes(contentType))__				traceMatch("Content-Type", mediaTypeSet, contentType, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Content-Type: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,boolean,match,media,type,set,stream,any,match,media,type,media,type,includes,content,type,trace,match,content,type,media,type,set,content,type,match,return,match,override,public,string,to,string,return,string,format,content,type,s,media,type,set
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1498833097;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is_{@linkplain MediaType#includes(MediaType) included} by any of the given media types._@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				MediaType contentType =_						headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__				boolean match = mediaTypeSet.stream()_						.anyMatch(mediaType -> mediaType.includes(contentType))__				traceMatch("Content-Type", mediaTypeSet, contentType, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Content-Type: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,boolean,match,media,type,set,stream,any,match,media,type,media,type,includes,content,type,trace,match,content,type,media,type,set,content,type,match,return,match,override,public,string,to,string,return,string,format,content,type,s,media,type,set
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1498861175;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is_{@linkplain MediaType#includes(MediaType) included} by any of the given media types._@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				MediaType contentType =_						headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__				boolean match = mediaTypeSet.stream()_						.anyMatch(mediaType -> mediaType.includes(contentType))__				traceMatch("Content-Type", mediaTypeSet, contentType, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Content-Type: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,boolean,match,media,type,set,stream,any,match,media,type,media,type,includes,content,type,trace,match,content,type,media,type,set,content,type,match,return,match,override,public,string,to,string,return,string,format,content,type,s,media,type,set
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1499081790;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is_{@linkplain MediaType#includes(MediaType) included} by any of the given media types._@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				MediaType contentType =_						headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__				boolean match = mediaTypeSet.stream()_						.anyMatch(mediaType -> mediaType.includes(contentType))__				traceMatch("Content-Type", mediaTypeSet, contentType, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Content-Type: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,boolean,match,media,type,set,stream,any,match,media,type,media,type,includes,content,type,trace,match,content,type,media,type,set,content,type,match,return,match,override,public,string,to,string,return,string,format,content,type,s,media,type,set
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1499091813;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is_{@linkplain MediaType#includes(MediaType) included} by any of the given media types._@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				MediaType contentType =_						headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__				boolean match = mediaTypeSet.stream()_						.anyMatch(mediaType -> mediaType.includes(contentType))__				traceMatch("Content-Type", mediaTypeSet, contentType, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Content-Type: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,boolean,match,media,type,set,stream,any,match,media,type,media,type,includes,content,type,trace,match,content,type,media,type,set,content,type,match,return,match,override,public,string,to,string,return,string,format,content,type,s,media,type,set
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1499448036;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is_{@linkplain MediaType#includes(MediaType) included} by any of the given media types._@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				MediaType contentType =_						headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__				boolean match = mediaTypeSet.stream()_						.anyMatch(mediaType -> mediaType.includes(contentType))__				traceMatch("Content-Type", mediaTypeSet, contentType, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Content-Type: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,boolean,match,media,type,set,stream,any,match,media,type,media,type,includes,content,type,trace,match,content,type,media,type,set,content,type,match,return,match,override,public,string,to,string,return,string,format,content,type,s,media,type,set
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1499780493;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is_{@linkplain MediaType#includes(MediaType) included} by any of the given media types._@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				MediaType contentType =_						headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__				boolean match = mediaTypeSet.stream()_						.anyMatch(mediaType -> mediaType.includes(contentType))__				traceMatch("Content-Type", mediaTypeSet, contentType, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Content-Type: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,boolean,match,media,type,set,stream,any,match,media,type,media,type,includes,content,type,trace,match,content,type,media,type,set,content,type,match,return,match,override,public,string,to,string,return,string,format,content,type,s,media,type,set
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1500559500;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is_{@linkplain MediaType#includes(MediaType) included} by any of the given media types._@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				MediaType contentType =_						headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__				boolean match = mediaTypeSet.stream()_						.anyMatch(mediaType -> mediaType.includes(contentType))__				traceMatch("Content-Type", mediaTypeSet, contentType, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Content-Type: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,boolean,match,media,type,set,stream,any,match,media,type,media,type,includes,content,type,trace,match,content,type,media,type,set,content,type,match,return,match,override,public,string,to,string,return,string,format,content,type,s,media,type,set
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1501155515;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is_{@linkplain MediaType#includes(MediaType) included} by any of the given media types._@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				MediaType contentType =_						headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__				boolean match = mediaTypeSet.stream()_						.anyMatch(mediaType -> mediaType.includes(contentType))__				traceMatch("Content-Type", mediaTypeSet, contentType, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Content-Type: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,boolean,match,media,type,set,stream,any,match,media,type,media,type,includes,content,type,trace,match,content,type,media,type,set,content,type,match,return,match,override,public,string,to,string,return,string,format,content,type,s,media,type,set
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1501237594;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is_{@linkplain MediaType#includes(MediaType) included} by any of the given media types._@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				MediaType contentType =_						headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__				boolean match = mediaTypeSet.stream()_						.anyMatch(mediaType -> mediaType.includes(contentType))__				traceMatch("Content-Type", mediaTypeSet, contentType, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Content-Type: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,boolean,match,media,type,set,stream,any,match,media,type,media,type,includes,content,type,trace,match,content,type,media,type,set,content,type,match,return,match,override,public,string,to,string,return,string,format,content,type,s,media,type,set
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1501679128;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is_{@linkplain MediaType#includes(MediaType) included} by any of the given media types._@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				MediaType contentType =_						headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__				boolean match = mediaTypeSet.stream()_						.anyMatch(mediaType -> mediaType.includes(contentType))__				traceMatch("Content-Type", mediaTypeSet, contentType, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Content-Type: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,boolean,match,media,type,set,stream,any,match,media,type,media,type,includes,content,type,trace,match,content,type,media,type,set,content,type,match,return,match,override,public,string,to,string,return,string,format,content,type,s,media,type,set
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1501684266;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is_{@linkplain MediaType#includes(MediaType) included} by any of the given media types._@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				MediaType contentType =_						headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__				boolean match = mediaTypeSet.stream()_						.anyMatch(mediaType -> mediaType.includes(contentType))__				traceMatch("Content-Type", mediaTypeSet, contentType, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Content-Type: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,boolean,match,media,type,set,stream,any,match,media,type,media,type,includes,content,type,trace,match,content,type,media,type,set,content,type,match,return,match,override,public,string,to,string,return,string,format,content,type,s,media,type,set
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1505477679;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is_{@linkplain MediaType#includes(MediaType) included} by any of the given media types._@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				MediaType contentType =_						headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__				boolean match = mediaTypeSet.stream()_						.anyMatch(mediaType -> mediaType.includes(contentType))__				traceMatch("Content-Type", mediaTypeSet, contentType, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Content-Type: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,boolean,match,media,type,set,stream,any,match,media,type,media,type,includes,content,type,trace,match,content,type,media,type,set,content,type,match,return,match,override,public,string,to,string,return,string,format,content,type,s,media,type,set
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1506331747;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is_{@linkplain MediaType#includes(MediaType) included} by any of the given media types._@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				MediaType contentType =_						headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__				boolean match = mediaTypeSet.stream()_						.anyMatch(mediaType -> mediaType.includes(contentType))__				traceMatch("Content-Type", mediaTypeSet, contentType, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Content-Type: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,boolean,match,media,type,set,stream,any,match,media,type,media,type,includes,content,type,trace,match,content,type,media,type,set,content,type,match,return,match,override,public,string,to,string,return,string,format,content,type,s,media,type,set
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1521795630;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is_{@linkplain MediaType#includes(MediaType) included} by any of the given media types._@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				MediaType contentType =_						headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__				boolean match = mediaTypeSet.stream()_						.anyMatch(mediaType -> mediaType.includes(contentType))__				traceMatch("Content-Type", mediaTypeSet, contentType, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Content-Type: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,boolean,match,media,type,set,stream,any,match,media,type,media,type,includes,content,type,trace,match,content,type,media,type,set,content,type,match,return,match,override,public,string,to,string,return,string,format,content,type,s,media,type,set
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1523351625;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is_{@linkplain MediaType#includes(MediaType) included} by any of the given media types._@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				MediaType contentType =_						headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__				boolean match = mediaTypeSet.stream()_						.anyMatch(mediaType -> mediaType.includes(contentType))__				traceMatch("Content-Type", mediaTypeSet, contentType, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Content-Type: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,boolean,match,media,type,set,stream,any,match,media,type,media,type,includes,content,type,trace,match,content,type,media,type,set,content,type,match,return,match,override,public,string,to,string,return,string,format,content,type,s,media,type,set
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1524865018;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is_{@linkplain MediaType#includes(MediaType) included} by any of the given media types._@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				MediaType contentType =_						headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__				boolean match = mediaTypeSet.stream()_						.anyMatch(mediaType -> mediaType.includes(contentType))__				traceMatch("Content-Type", mediaTypeSet, contentType, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Content-Type: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,boolean,match,media,type,set,stream,any,match,media,type,media,type,includes,content,type,trace,match,content,type,media,type,set,content,type,match,return,match,override,public,string,to,string,return,string,format,content,type,s,media,type,set
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1525251240;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is_{@linkplain MediaType#includes(MediaType) included} by any of the given media types._@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				MediaType contentType =_						headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__				boolean match = mediaTypeSet.stream()_						.anyMatch(mediaType -> mediaType.includes(contentType))__				traceMatch("Content-Type", mediaTypeSet, contentType, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Content-Type: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,boolean,match,media,type,set,stream,any,match,media,type,media,type,includes,content,type,trace,match,content,type,media,type,set,content,type,match,return,match,override,public,string,to,string,return,string,format,content,type,s,media,type,set
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1525338166;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is_{@linkplain MediaType#includes(MediaType) included} by any of the given media types._@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				MediaType contentType =_						headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__				boolean match = mediaTypeSet.stream()_						.anyMatch(mediaType -> mediaType.includes(contentType))__				traceMatch("Content-Type", mediaTypeSet, contentType, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Content-Type: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,boolean,match,media,type,set,stream,any,match,media,type,media,type,includes,content,type,trace,match,content,type,media,type,set,content,type,match,return,match,override,public,string,to,string,return,string,format,content,type,s,media,type,set
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1526462061;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is_{@linkplain MediaType#includes(MediaType) included} by any of the given media types._@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				MediaType contentType =_						headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__				boolean match = mediaTypeSet.stream()_						.anyMatch(mediaType -> mediaType.includes(contentType))__				traceMatch("Content-Type", mediaTypeSet, contentType, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Content-Type: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,boolean,match,media,type,set,stream,any,match,media,type,media,type,includes,content,type,trace,match,content,type,media,type,set,content,type,match,return,match,override,public,string,to,string,return,string,format,content,type,s,media,type,set
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1526674893;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is_{@linkplain MediaType#includes(MediaType) included} by any of the given media types._@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				MediaType contentType =_						headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__				boolean match = mediaTypeSet.stream()_						.anyMatch(mediaType -> mediaType.includes(contentType))__				traceMatch("Content-Type", mediaTypeSet, contentType, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Content-Type: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,boolean,match,media,type,set,stream,any,match,media,type,media,type,includes,content,type,trace,match,content,type,media,type,set,content,type,match,return,match,override,public,string,to,string,return,string,format,content,type,s,media,type,set
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1529721864;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is_{@linkplain MediaType#includes(MediaType) included} by any of the given media types._@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				MediaType contentType =_						headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__				boolean match = mediaTypeSet.stream()_						.anyMatch(mediaType -> mediaType.includes(contentType))__				traceMatch("Content-Type", mediaTypeSet, contentType, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Content-Type: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,boolean,match,media,type,set,stream,any,match,media,type,media,type,includes,content,type,trace,match,content,type,media,type,set,content,type,match,return,match,override,public,string,to,string,return,string,format,content,type,s,media,type,set
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1530174524;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is_{@linkplain MediaType#includes(MediaType) included} by any of the given media types._@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				MediaType contentType =_						headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__				boolean match = mediaTypeSet.stream()_						.anyMatch(mediaType -> mediaType.includes(contentType))__				traceMatch("Content-Type", mediaTypeSet, contentType, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Content-Type: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,boolean,match,media,type,set,stream,any,match,media,type,media,type,includes,content,type,trace,match,content,type,media,type,set,content,type,match,return,match,override,public,string,to,string,return,string,format,content,type,s,media,type,set
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1530871276;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is_{@linkplain MediaType#includes(MediaType) included} by any of the given media types._@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				MediaType contentType =_						headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__				boolean match = mediaTypeSet.stream()_						.anyMatch(mediaType -> mediaType.includes(contentType))__				traceMatch("Content-Type", mediaTypeSet, contentType, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Content-Type: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,boolean,match,media,type,set,stream,any,match,media,type,media,type,includes,content,type,trace,match,content,type,media,type,set,content,type,match,return,match,override,public,string,to,string,return,string,format,content,type,s,media,type,set
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1530877097;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is_{@linkplain MediaType#includes(MediaType) included} by any of the given media types._@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				MediaType contentType =_						headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__				boolean match = mediaTypeSet.stream()_						.anyMatch(mediaType -> mediaType.includes(contentType))__				traceMatch("Content-Type", mediaTypeSet, contentType, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Content-Type: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,boolean,match,media,type,set,stream,any,match,media,type,media,type,includes,content,type,trace,match,content,type,media,type,set,content,type,match,return,match,override,public,string,to,string,return,string,format,content,type,s,media,type,set
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1532520962;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is_{@linkplain MediaType#includes(MediaType) included} by any of the given media types._@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				MediaType contentType =_						headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__				boolean match = mediaTypeSet.stream()_						.anyMatch(mediaType -> mediaType.includes(contentType))__				traceMatch("Content-Type", mediaTypeSet, contentType, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Content-Type: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,boolean,match,media,type,set,stream,any,match,media,type,media,type,includes,content,type,trace,match,content,type,media,type,set,content,type,match,return,match,override,public,string,to,string,return,string,format,content,type,s,media,type,set
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1537173292;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is_{@linkplain MediaType#includes(MediaType) included} by any of the given media types._@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				MediaType contentType =_						headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__				boolean match = mediaTypeSet.stream()_						.anyMatch(mediaType -> mediaType.includes(contentType))__				traceMatch("Content-Type", mediaTypeSet, contentType, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Content-Type: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,boolean,match,media,type,set,stream,any,match,media,type,media,type,includes,content,type,trace,match,content,type,media,type,set,content,type,match,return,match,override,public,string,to,string,return,string,format,content,type,s,media,type,set
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1537188605;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is_{@linkplain MediaType#includes(MediaType) included} by any of the given media types._@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				MediaType contentType =_						headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__				boolean match = mediaTypeSet.stream()_						.anyMatch(mediaType -> mediaType.includes(contentType))__				traceMatch("Content-Type", mediaTypeSet, contentType, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Content-Type: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,boolean,match,media,type,set,stream,any,match,media,type,media,type,includes,content,type,trace,match,content,type,media,type,set,content,type,match,return,match,override,public,string,to,string,return,string,format,content,type,s,media,type,set
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1538658936;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is_{@linkplain MediaType#includes(MediaType) included} by any of the given media types._@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				MediaType contentType =_						headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__				boolean match = mediaTypeSet.stream()_						.anyMatch(mediaType -> mediaType.includes(contentType))__				traceMatch("Content-Type", mediaTypeSet, contentType, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Content-Type: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,boolean,match,media,type,set,stream,any,match,media,type,media,type,includes,content,type,trace,match,content,type,media,type,set,content,type,match,return,match,override,public,string,to,string,return,string,format,content,type,s,media,type,set
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1539866925;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is_{@linkplain MediaType#includes(MediaType) included} by any of the given media types._@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		Set<MediaType> mediaTypeSet = new HashSet<>(Arrays.asList(mediaTypes))___		return headers(new Predicate<ServerRequest.Headers>() {_			@Override_			public boolean test(ServerRequest.Headers headers) {_				MediaType contentType =_						headers.contentType().orElse(MediaType.APPLICATION_OCTET_STREAM)__				boolean match = mediaTypeSet.stream()_						.anyMatch(mediaType -> mediaType.includes(contentType))__				traceMatch("Content-Type", mediaTypeSet, contentType, match)__				return match__			}__			@Override_			public String toString() {_				return String.format("Content-Type: %s", mediaTypeSet)__			}_		})__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,set,media,type,media,type,set,new,hash,set,arrays,as,list,media,types,return,headers,new,predicate,server,request,headers,override,public,boolean,test,server,request,headers,headers,media,type,content,type,headers,content,type,or,else,media,type,boolean,match,media,type,set,stream,any,match,media,type,media,type,includes,content,type,trace,match,content,type,media,type,set,content,type,match,return,match,override,public,string,to,string,return,string,format,content,type,s,media,type,set
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1542719117;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is_{@linkplain MediaType#includes(MediaType) included} by any of the given media types._@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		return new ContentTypePredicate(mediaTypes)__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,return,new,content,type,predicate,media,types
RequestPredicates -> public static RequestPredicate contentType(MediaType... mediaTypes);1544625213;Return a {@code RequestPredicate} that tests if the request's_{@linkplain ServerRequest.Headers#contentType() content type} is_{@linkplain MediaType#includes(MediaType) included} by any of the given media types._@param mediaTypes the media types to match the request's content type against_@return a predicate that tests the request's content type against the given media types;public static RequestPredicate contentType(MediaType... mediaTypes) {_		Assert.notEmpty(mediaTypes, "'mediaTypes' must not be empty")__		return new ContentTypePredicate(mediaTypes)__	};return,a,code,request,predicate,that,tests,if,the,request,s,linkplain,server,request,headers,content,type,content,type,is,linkplain,media,type,includes,media,type,included,by,any,of,the,given,media,types,param,media,types,the,media,types,to,match,the,request,s,content,type,against,return,a,predicate,that,tests,the,request,s,content,type,against,the,given,media,types;public,static,request,predicate,content,type,media,type,media,types,assert,not,empty,media,types,media,types,must,not,be,empty,return,new,content,type,predicate,media,types
