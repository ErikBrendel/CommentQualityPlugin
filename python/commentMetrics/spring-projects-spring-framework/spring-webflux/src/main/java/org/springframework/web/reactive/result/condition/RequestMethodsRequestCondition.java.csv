commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;3;;private static List<RequestMethod> asList(RequestMethod... requestMethods) {     return (requestMethods != null ? Arrays.asList(requestMethods) : Collections.emptyList()). }
true;public;0;3;/**  * Returns all {@link RequestMethod RequestMethods} contained in this condition.  */ ;/**  * Returns all {@link RequestMethod RequestMethods} contained in this condition.  */ public Set<RequestMethod> getMethods() {     return this.methods. }
false;protected;0;4;;@Override protected Collection<RequestMethod> getContent() {     return this.methods. }
false;protected;0;4;;@Override protected String getToStringInfix() {     return " || ". }
true;public;1;6;/**  * Returns a new instance with a union of the HTTP request methods  * from "this" and the "other" instance.  */ ;/**  * Returns a new instance with a union of the HTTP request methods  * from "this" and the "other" instance.  */ @Override public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other) {     Set<RequestMethod> set = new LinkedHashSet<>(this.methods).     set.addAll(other.methods).     return new RequestMethodsRequestCondition(set). }
true;public;1;14;/**  * Check if any of the HTTP request methods match the given request and  * return an instance that contains the matching HTTP request method only.  * @param exchange the current exchange  * @return the same instance if the condition is empty (unless the request  * method is HTTP OPTIONS), a new condition with the matched request method,  * or {@code null} if there is no match or the condition is empty and the  * request method is OPTIONS.  */ ;/**  * Check if any of the HTTP request methods match the given request and  * return an instance that contains the matching HTTP request method only.  * @param exchange the current exchange  * @return the same instance if the condition is empty (unless the request  * method is HTTP OPTIONS), a new condition with the matched request method,  * or {@code null} if there is no match or the condition is empty and the  * request method is OPTIONS.  */ @Override @Nullable public RequestMethodsRequestCondition getMatchingCondition(ServerWebExchange exchange) {     if (CorsUtils.isPreFlightRequest(exchange.getRequest())) {         return matchPreFlight(exchange.getRequest()).     }     if (getMethods().isEmpty()) {         if (RequestMethod.OPTIONS.name().equals(exchange.getRequest().getMethodValue())) {             // No implicit match for OPTIONS (we handle it)             return null.         }         return this.     }     return matchRequestMethod(exchange.getRequest().getMethod()). }
true;private;1;7;/**  * On a pre-flight request match to the would-be, actual request.  * Hence empty conditions is a match, otherwise try to match to the HTTP  * method in the "Access-Control-Request-Method" header.  */ ;/**  * On a pre-flight request match to the would-be, actual request.  * Hence empty conditions is a match, otherwise try to match to the HTTP  * method in the "Access-Control-Request-Method" header.  */ private RequestMethodsRequestCondition matchPreFlight(ServerHttpRequest request) {     if (getMethods().isEmpty()) {         return this.     }     HttpMethod expectedMethod = request.getHeaders().getAccessControlRequestMethod().     return matchRequestMethod(expectedMethod). }
false;private;1;14;;@Nullable private RequestMethodsRequestCondition matchRequestMethod(@Nullable HttpMethod httpMethod) {     if (httpMethod != null) {         for (RequestMethod method : getMethods()) {             if (httpMethod.matches(method.name())) {                 return new RequestMethodsRequestCondition(method).             }         }         if (httpMethod == HttpMethod.HEAD && getMethods().contains(RequestMethod.GET)) {             return GET_CONDITION.         }     }     return null. }
true;public;2;15;/**  * Returns:  * <ul>  * <li>0 if the two conditions contain the same number of HTTP request methods  * <li>Less than 0 if "this" instance has an HTTP request method but "other" doesn't  * <li>Greater than 0 "other" has an HTTP request method but "this" doesn't  * </ul>  * <p>It is assumed that both instances have been obtained via  * {@link #getMatchingCondition(ServerWebExchange)} and therefore each instance  * contains the matching HTTP request method only or is otherwise empty.  */ ;/**  * Returns:  * <ul>  * <li>0 if the two conditions contain the same number of HTTP request methods  * <li>Less than 0 if "this" instance has an HTTP request method but "other" doesn't  * <li>Greater than 0 "other" has an HTTP request method but "this" doesn't  * </ul>  * <p>It is assumed that both instances have been obtained via  * {@link #getMatchingCondition(ServerWebExchange)} and therefore each instance  * contains the matching HTTP request method only or is otherwise empty.  */ @Override public int compareTo(RequestMethodsRequestCondition other, ServerWebExchange exchange) {     if (other.methods.size() != this.methods.size()) {         return other.methods.size() - this.methods.size().     } else if (this.methods.size() == 1) {         if (this.methods.contains(RequestMethod.HEAD) && other.methods.contains(RequestMethod.GET)) {             return -1.         } else if (this.methods.contains(RequestMethod.GET) && other.methods.contains(RequestMethod.HEAD)) {             return 1.         }     }     return 0. }
