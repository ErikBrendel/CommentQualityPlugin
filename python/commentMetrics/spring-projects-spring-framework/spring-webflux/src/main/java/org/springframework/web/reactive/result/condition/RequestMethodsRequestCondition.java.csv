# id;timestamp;commentText;codeText;commentWords;codeWords
RequestMethodsRequestCondition -> public Set<RequestMethod> getMethods();1485986572;Returns all {@link RequestMethod}s contained in this condition.;public Set<RequestMethod> getMethods() {_		return this.methods__	};returns,all,link,request,method,s,contained,in,this,condition;public,set,request,method,get,methods,return,this,methods
RequestMethodsRequestCondition -> public Set<RequestMethod> getMethods();1495639183;Returns all {@link RequestMethod}s contained in this condition.;public Set<RequestMethod> getMethods() {_		return this.methods__	};returns,all,link,request,method,s,contained,in,this,condition;public,set,request,method,get,methods,return,this,methods
RequestMethodsRequestCondition -> public Set<RequestMethod> getMethods();1496837955;Returns all {@link RequestMethod}s contained in this condition.;public Set<RequestMethod> getMethods() {_		return this.methods__	};returns,all,link,request,method,s,contained,in,this,condition;public,set,request,method,get,methods,return,this,methods
RequestMethodsRequestCondition -> public Set<RequestMethod> getMethods();1502974979;Returns all {@link RequestMethod}s contained in this condition.;public Set<RequestMethod> getMethods() {_		return this.methods__	};returns,all,link,request,method,s,contained,in,this,condition;public,set,request,method,get,methods,return,this,methods
RequestMethodsRequestCondition -> public Set<RequestMethod> getMethods();1530174524;Returns all {@link RequestMethod RequestMethods} contained in this condition.;public Set<RequestMethod> getMethods() {_		return this.methods__	};returns,all,link,request,method,request,methods,contained,in,this,condition;public,set,request,method,get,methods,return,this,methods
RequestMethodsRequestCondition -> public Set<RequestMethod> getMethods();1546438985;Returns all {@link RequestMethod RequestMethods} contained in this condition.;public Set<RequestMethod> getMethods() {_		return this.methods__	};returns,all,link,request,method,request,methods,contained,in,this,condition;public,set,request,method,get,methods,return,this,methods
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other);1485986572;Returns a new instance with a union of the HTTP request methods_from "this" and the "other" instance.;@Override_	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other) {_		Set<RequestMethod> set = new LinkedHashSet<>(this.methods)__		set.addAll(other.methods)__		return new RequestMethodsRequestCondition(set)__	};returns,a,new,instance,with,a,union,of,the,http,request,methods,from,this,and,the,other,instance;override,public,request,methods,request,condition,combine,request,methods,request,condition,other,set,request,method,set,new,linked,hash,set,this,methods,set,add,all,other,methods,return,new,request,methods,request,condition,set
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other);1495639183;Returns a new instance with a union of the HTTP request methods_from "this" and the "other" instance.;@Override_	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other) {_		Set<RequestMethod> set = new LinkedHashSet<>(this.methods)__		set.addAll(other.methods)__		return new RequestMethodsRequestCondition(set)__	};returns,a,new,instance,with,a,union,of,the,http,request,methods,from,this,and,the,other,instance;override,public,request,methods,request,condition,combine,request,methods,request,condition,other,set,request,method,set,new,linked,hash,set,this,methods,set,add,all,other,methods,return,new,request,methods,request,condition,set
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other);1496837955;Returns a new instance with a union of the HTTP request methods_from "this" and the "other" instance.;@Override_	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other) {_		Set<RequestMethod> set = new LinkedHashSet<>(this.methods)__		set.addAll(other.methods)__		return new RequestMethodsRequestCondition(set)__	};returns,a,new,instance,with,a,union,of,the,http,request,methods,from,this,and,the,other,instance;override,public,request,methods,request,condition,combine,request,methods,request,condition,other,set,request,method,set,new,linked,hash,set,this,methods,set,add,all,other,methods,return,new,request,methods,request,condition,set
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other);1502974979;Returns a new instance with a union of the HTTP request methods_from "this" and the "other" instance.;@Override_	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other) {_		Set<RequestMethod> set = new LinkedHashSet<>(this.methods)__		set.addAll(other.methods)__		return new RequestMethodsRequestCondition(set)__	};returns,a,new,instance,with,a,union,of,the,http,request,methods,from,this,and,the,other,instance;override,public,request,methods,request,condition,combine,request,methods,request,condition,other,set,request,method,set,new,linked,hash,set,this,methods,set,add,all,other,methods,return,new,request,methods,request,condition,set
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other);1530174524;Returns a new instance with a union of the HTTP request methods_from "this" and the "other" instance.;@Override_	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other) {_		Set<RequestMethod> set = new LinkedHashSet<>(this.methods)__		set.addAll(other.methods)__		return new RequestMethodsRequestCondition(set)__	};returns,a,new,instance,with,a,union,of,the,http,request,methods,from,this,and,the,other,instance;override,public,request,methods,request,condition,combine,request,methods,request,condition,other,set,request,method,set,new,linked,hash,set,this,methods,set,add,all,other,methods,return,new,request,methods,request,condition,set
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other);1546438985;Returns a new instance with a union of the HTTP request methods_from "this" and the "other" instance.;@Override_	public RequestMethodsRequestCondition combine(RequestMethodsRequestCondition other) {_		Set<RequestMethod> set = new LinkedHashSet<>(this.methods)__		set.addAll(other.methods)__		return new RequestMethodsRequestCondition(set)__	};returns,a,new,instance,with,a,union,of,the,http,request,methods,from,this,and,the,other,instance;override,public,request,methods,request,condition,combine,request,methods,request,condition,other,set,request,method,set,new,linked,hash,set,this,methods,set,add,all,other,methods,return,new,request,methods,request,condition,set
RequestMethodsRequestCondition -> @Override 	@Nullable 	public RequestMethodsRequestCondition getMatchingCondition(ServerWebExchange exchange);1502974979;Check if any of the HTTP request methods match the given request and_return an instance that contains the matching HTTP request method only._@param exchange the current exchange_@return the same instance if the condition is empty (unless the request_method is HTTP OPTIONS), a new condition with the matched request method,_or {@code null} if there is no match or the condition is empty and the_request method is OPTIONS.;@Override_	@Nullable_	public RequestMethodsRequestCondition getMatchingCondition(ServerWebExchange exchange) {_		if (CorsUtils.isPreFlightRequest(exchange.getRequest())) {_			return matchPreFlight(exchange.getRequest())__		}_		if (getMethods().isEmpty()) {_			if (RequestMethod.OPTIONS.name().equals(exchange.getRequest().getMethodValue())) {_				return null_ _			}_			return this__		}_		return matchRequestMethod(exchange.getRequest().getMethod())__	};check,if,any,of,the,http,request,methods,match,the,given,request,and,return,an,instance,that,contains,the,matching,http,request,method,only,param,exchange,the,current,exchange,return,the,same,instance,if,the,condition,is,empty,unless,the,request,method,is,http,options,a,new,condition,with,the,matched,request,method,or,code,null,if,there,is,no,match,or,the,condition,is,empty,and,the,request,method,is,options;override,nullable,public,request,methods,request,condition,get,matching,condition,server,web,exchange,exchange,if,cors,utils,is,pre,flight,request,exchange,get,request,return,match,pre,flight,exchange,get,request,if,get,methods,is,empty,if,request,method,options,name,equals,exchange,get,request,get,method,value,return,null,return,this,return,match,request,method,exchange,get,request,get,method
RequestMethodsRequestCondition -> @Override 	@Nullable 	public RequestMethodsRequestCondition getMatchingCondition(ServerWebExchange exchange);1530174524;Check if any of the HTTP request methods match the given request and_return an instance that contains the matching HTTP request method only._@param exchange the current exchange_@return the same instance if the condition is empty (unless the request_method is HTTP OPTIONS), a new condition with the matched request method,_or {@code null} if there is no match or the condition is empty and the_request method is OPTIONS.;@Override_	@Nullable_	public RequestMethodsRequestCondition getMatchingCondition(ServerWebExchange exchange) {_		if (CorsUtils.isPreFlightRequest(exchange.getRequest())) {_			return matchPreFlight(exchange.getRequest())__		}_		if (getMethods().isEmpty()) {_			if (RequestMethod.OPTIONS.name().equals(exchange.getRequest().getMethodValue())) {_				return null_ _			}_			return this__		}_		return matchRequestMethod(exchange.getRequest().getMethod())__	};check,if,any,of,the,http,request,methods,match,the,given,request,and,return,an,instance,that,contains,the,matching,http,request,method,only,param,exchange,the,current,exchange,return,the,same,instance,if,the,condition,is,empty,unless,the,request,method,is,http,options,a,new,condition,with,the,matched,request,method,or,code,null,if,there,is,no,match,or,the,condition,is,empty,and,the,request,method,is,options;override,nullable,public,request,methods,request,condition,get,matching,condition,server,web,exchange,exchange,if,cors,utils,is,pre,flight,request,exchange,get,request,return,match,pre,flight,exchange,get,request,if,get,methods,is,empty,if,request,method,options,name,equals,exchange,get,request,get,method,value,return,null,return,this,return,match,request,method,exchange,get,request,get,method
RequestMethodsRequestCondition -> @Override 	@Nullable 	public RequestMethodsRequestCondition getMatchingCondition(ServerWebExchange exchange);1546438985;Check if any of the HTTP request methods match the given request and_return an instance that contains the matching HTTP request method only._@param exchange the current exchange_@return the same instance if the condition is empty (unless the request_method is HTTP OPTIONS), a new condition with the matched request method,_or {@code null} if there is no match or the condition is empty and the_request method is OPTIONS.;@Override_	@Nullable_	public RequestMethodsRequestCondition getMatchingCondition(ServerWebExchange exchange) {_		if (CorsUtils.isPreFlightRequest(exchange.getRequest())) {_			return matchPreFlight(exchange.getRequest())__		}_		if (getMethods().isEmpty()) {_			if (RequestMethod.OPTIONS.name().equals(exchange.getRequest().getMethodValue())) {_				return null_ _			}_			return this__		}_		return matchRequestMethod(exchange.getRequest().getMethod())__	};check,if,any,of,the,http,request,methods,match,the,given,request,and,return,an,instance,that,contains,the,matching,http,request,method,only,param,exchange,the,current,exchange,return,the,same,instance,if,the,condition,is,empty,unless,the,request,method,is,http,options,a,new,condition,with,the,matched,request,method,or,code,null,if,there,is,no,match,or,the,condition,is,empty,and,the,request,method,is,options;override,nullable,public,request,methods,request,condition,get,matching,condition,server,web,exchange,exchange,if,cors,utils,is,pre,flight,request,exchange,get,request,return,match,pre,flight,exchange,get,request,if,get,methods,is,empty,if,request,method,options,name,equals,exchange,get,request,get,method,value,return,null,return,this,return,match,request,method,exchange,get,request,get,method
RequestMethodsRequestCondition -> public RequestMethodsRequestCondition(RequestMethod... requestMethods);1485986572;Create a new instance with the given request methods._@param requestMethods 0 or more HTTP request methods__if, 0 the condition will match to every request;public RequestMethodsRequestCondition(RequestMethod... requestMethods) {_		this(asList(requestMethods))__	};create,a,new,instance,with,the,given,request,methods,param,request,methods,0,or,more,http,request,methods,if,0,the,condition,will,match,to,every,request;public,request,methods,request,condition,request,method,request,methods,this,as,list,request,methods
RequestMethodsRequestCondition -> public RequestMethodsRequestCondition(RequestMethod... requestMethods);1495639183;Create a new instance with the given request methods._@param requestMethods 0 or more HTTP request methods__if, 0 the condition will match to every request;public RequestMethodsRequestCondition(RequestMethod... requestMethods) {_		this(asList(requestMethods))__	};create,a,new,instance,with,the,given,request,methods,param,request,methods,0,or,more,http,request,methods,if,0,the,condition,will,match,to,every,request;public,request,methods,request,condition,request,method,request,methods,this,as,list,request,methods
RequestMethodsRequestCondition -> public RequestMethodsRequestCondition(RequestMethod... requestMethods);1496837955;Create a new instance with the given request methods._@param requestMethods 0 or more HTTP request methods__if, 0 the condition will match to every request;public RequestMethodsRequestCondition(RequestMethod... requestMethods) {_		this(asList(requestMethods))__	};create,a,new,instance,with,the,given,request,methods,param,request,methods,0,or,more,http,request,methods,if,0,the,condition,will,match,to,every,request;public,request,methods,request,condition,request,method,request,methods,this,as,list,request,methods
RequestMethodsRequestCondition -> public RequestMethodsRequestCondition(RequestMethod... requestMethods);1502974979;Create a new instance with the given request methods._@param requestMethods 0 or more HTTP request methods__if, 0 the condition will match to every request;public RequestMethodsRequestCondition(RequestMethod... requestMethods) {_		this(asList(requestMethods))__	};create,a,new,instance,with,the,given,request,methods,param,request,methods,0,or,more,http,request,methods,if,0,the,condition,will,match,to,every,request;public,request,methods,request,condition,request,method,request,methods,this,as,list,request,methods
RequestMethodsRequestCondition -> public RequestMethodsRequestCondition(RequestMethod... requestMethods);1530174524;Create a new instance with the given request methods._@param requestMethods 0 or more HTTP request methods__if, 0 the condition will match to every request;public RequestMethodsRequestCondition(RequestMethod... requestMethods) {_		this(asList(requestMethods))__	};create,a,new,instance,with,the,given,request,methods,param,request,methods,0,or,more,http,request,methods,if,0,the,condition,will,match,to,every,request;public,request,methods,request,condition,request,method,request,methods,this,as,list,request,methods
RequestMethodsRequestCondition -> public RequestMethodsRequestCondition(RequestMethod... requestMethods);1546438985;Create a new instance with the given request methods._@param requestMethods 0 or more HTTP request methods__if, 0 the condition will match to every request;public RequestMethodsRequestCondition(RequestMethod... requestMethods) {_		this(asList(requestMethods))__	};create,a,new,instance,with,the,given,request,methods,param,request,methods,0,or,more,http,request,methods,if,0,the,condition,will,match,to,every,request;public,request,methods,request,condition,request,method,request,methods,this,as,list,request,methods
RequestMethodsRequestCondition -> @Override 	public int compareTo(RequestMethodsRequestCondition other, ServerWebExchange exchange);1485986572;Returns:_<ul>_<li>0 if the two conditions contain the same number of HTTP request methods_<li>Less than 0 if "this" instance has an HTTP request method but "other" doesn't_<li>Greater than 0 "other" has an HTTP request method but "this" doesn't_</ul>_<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(ServerWebExchange)} and therefore each instance_contains the matching HTTP request method only or is otherwise empty.;@Override_	public int compareTo(RequestMethodsRequestCondition other, ServerWebExchange exchange) {_		return (other.methods.size() - this.methods.size())__	};returns,ul,li,0,if,the,two,conditions,contain,the,same,number,of,http,request,methods,li,less,than,0,if,this,instance,has,an,http,request,method,but,other,doesn,t,li,greater,than,0,other,has,an,http,request,method,but,this,doesn,t,ul,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,server,web,exchange,and,therefore,each,instance,contains,the,matching,http,request,method,only,or,is,otherwise,empty;override,public,int,compare,to,request,methods,request,condition,other,server,web,exchange,exchange,return,other,methods,size,this,methods,size
RequestMethodsRequestCondition -> @Override 	public int compareTo(RequestMethodsRequestCondition other, ServerWebExchange exchange);1495639183;Returns:_<ul>_<li>0 if the two conditions contain the same number of HTTP request methods_<li>Less than 0 if "this" instance has an HTTP request method but "other" doesn't_<li>Greater than 0 "other" has an HTTP request method but "this" doesn't_</ul>_<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(ServerWebExchange)} and therefore each instance_contains the matching HTTP request method only or is otherwise empty.;@Override_	public int compareTo(RequestMethodsRequestCondition other, ServerWebExchange exchange) {_		return (other.methods.size() - this.methods.size())__	};returns,ul,li,0,if,the,two,conditions,contain,the,same,number,of,http,request,methods,li,less,than,0,if,this,instance,has,an,http,request,method,but,other,doesn,t,li,greater,than,0,other,has,an,http,request,method,but,this,doesn,t,ul,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,server,web,exchange,and,therefore,each,instance,contains,the,matching,http,request,method,only,or,is,otherwise,empty;override,public,int,compare,to,request,methods,request,condition,other,server,web,exchange,exchange,return,other,methods,size,this,methods,size
RequestMethodsRequestCondition -> @Override 	public int compareTo(RequestMethodsRequestCondition other, ServerWebExchange exchange);1496837955;Returns:_<ul>_<li>0 if the two conditions contain the same number of HTTP request methods_<li>Less than 0 if "this" instance has an HTTP request method but "other" doesn't_<li>Greater than 0 "other" has an HTTP request method but "this" doesn't_</ul>_<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(ServerWebExchange)} and therefore each instance_contains the matching HTTP request method only or is otherwise empty.;@Override_	public int compareTo(RequestMethodsRequestCondition other, ServerWebExchange exchange) {_		return (other.methods.size() - this.methods.size())__	};returns,ul,li,0,if,the,two,conditions,contain,the,same,number,of,http,request,methods,li,less,than,0,if,this,instance,has,an,http,request,method,but,other,doesn,t,li,greater,than,0,other,has,an,http,request,method,but,this,doesn,t,ul,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,server,web,exchange,and,therefore,each,instance,contains,the,matching,http,request,method,only,or,is,otherwise,empty;override,public,int,compare,to,request,methods,request,condition,other,server,web,exchange,exchange,return,other,methods,size,this,methods,size
RequestMethodsRequestCondition -> @Override 	public int compareTo(RequestMethodsRequestCondition other, ServerWebExchange exchange);1502974979;Returns:_<ul>_<li>0 if the two conditions contain the same number of HTTP request methods_<li>Less than 0 if "this" instance has an HTTP request method but "other" doesn't_<li>Greater than 0 "other" has an HTTP request method but "this" doesn't_</ul>_<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(ServerWebExchange)} and therefore each instance_contains the matching HTTP request method only or is otherwise empty.;@Override_	public int compareTo(RequestMethodsRequestCondition other, ServerWebExchange exchange) {_		return (other.methods.size() - this.methods.size())__	};returns,ul,li,0,if,the,two,conditions,contain,the,same,number,of,http,request,methods,li,less,than,0,if,this,instance,has,an,http,request,method,but,other,doesn,t,li,greater,than,0,other,has,an,http,request,method,but,this,doesn,t,ul,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,server,web,exchange,and,therefore,each,instance,contains,the,matching,http,request,method,only,or,is,otherwise,empty;override,public,int,compare,to,request,methods,request,condition,other,server,web,exchange,exchange,return,other,methods,size,this,methods,size
RequestMethodsRequestCondition -> @Override 	public int compareTo(RequestMethodsRequestCondition other, ServerWebExchange exchange);1530174524;Returns:_<ul>_<li>0 if the two conditions contain the same number of HTTP request methods_<li>Less than 0 if "this" instance has an HTTP request method but "other" doesn't_<li>Greater than 0 "other" has an HTTP request method but "this" doesn't_</ul>_<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(ServerWebExchange)} and therefore each instance_contains the matching HTTP request method only or is otherwise empty.;@Override_	public int compareTo(RequestMethodsRequestCondition other, ServerWebExchange exchange) {_		return (other.methods.size() - this.methods.size())__	};returns,ul,li,0,if,the,two,conditions,contain,the,same,number,of,http,request,methods,li,less,than,0,if,this,instance,has,an,http,request,method,but,other,doesn,t,li,greater,than,0,other,has,an,http,request,method,but,this,doesn,t,ul,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,server,web,exchange,and,therefore,each,instance,contains,the,matching,http,request,method,only,or,is,otherwise,empty;override,public,int,compare,to,request,methods,request,condition,other,server,web,exchange,exchange,return,other,methods,size,this,methods,size
RequestMethodsRequestCondition -> @Override 	public int compareTo(RequestMethodsRequestCondition other, ServerWebExchange exchange);1546438985;Returns:_<ul>_<li>0 if the two conditions contain the same number of HTTP request methods_<li>Less than 0 if "this" instance has an HTTP request method but "other" doesn't_<li>Greater than 0 "other" has an HTTP request method but "this" doesn't_</ul>_<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(ServerWebExchange)} and therefore each instance_contains the matching HTTP request method only or is otherwise empty.;@Override_	public int compareTo(RequestMethodsRequestCondition other, ServerWebExchange exchange) {_		if (other.methods.size() != this.methods.size()) {_			return other.methods.size() - this.methods.size()__		}_		else if (this.methods.size() == 1) {_			if (this.methods.contains(RequestMethod.HEAD) && other.methods.contains(RequestMethod.GET)) {_				return -1__			}_			else if (this.methods.contains(RequestMethod.GET) && other.methods.contains(RequestMethod.HEAD)) {_				return 1__			}_		}_		return 0__	};returns,ul,li,0,if,the,two,conditions,contain,the,same,number,of,http,request,methods,li,less,than,0,if,this,instance,has,an,http,request,method,but,other,doesn,t,li,greater,than,0,other,has,an,http,request,method,but,this,doesn,t,ul,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,server,web,exchange,and,therefore,each,instance,contains,the,matching,http,request,method,only,or,is,otherwise,empty;override,public,int,compare,to,request,methods,request,condition,other,server,web,exchange,exchange,if,other,methods,size,this,methods,size,return,other,methods,size,this,methods,size,else,if,this,methods,size,1,if,this,methods,contains,request,method,head,other,methods,contains,request,method,get,return,1,else,if,this,methods,contains,request,method,get,other,methods,contains,request,method,head,return,1,return,0
RequestMethodsRequestCondition -> private RequestMethodsRequestCondition matchPreFlight(ServerHttpRequest request);1485986572;On a pre-flight request match to the would-be, actual request._Hence empty conditions is a match, otherwise try to match to the HTTP_method in the "Access-Control-Request-Method" header.;private RequestMethodsRequestCondition matchPreFlight(ServerHttpRequest request) {_		if (getMethods().isEmpty()) {_			return this__		}_		HttpMethod expectedMethod = request.getHeaders().getAccessControlRequestMethod()__		return matchRequestMethod(expectedMethod.name())__	};on,a,pre,flight,request,match,to,the,would,be,actual,request,hence,empty,conditions,is,a,match,otherwise,try,to,match,to,the,http,method,in,the,access,control,request,method,header;private,request,methods,request,condition,match,pre,flight,server,http,request,request,if,get,methods,is,empty,return,this,http,method,expected,method,request,get,headers,get,access,control,request,method,return,match,request,method,expected,method,name
RequestMethodsRequestCondition -> private RequestMethodsRequestCondition matchPreFlight(ServerHttpRequest request);1495639183;On a pre-flight request match to the would-be, actual request._Hence empty conditions is a match, otherwise try to match to the HTTP_method in the "Access-Control-Request-Method" header.;private RequestMethodsRequestCondition matchPreFlight(ServerHttpRequest request) {_		if (getMethods().isEmpty()) {_			return this__		}_		HttpMethod expectedMethod = request.getHeaders().getAccessControlRequestMethod()__		return matchRequestMethod(expectedMethod.name())__	};on,a,pre,flight,request,match,to,the,would,be,actual,request,hence,empty,conditions,is,a,match,otherwise,try,to,match,to,the,http,method,in,the,access,control,request,method,header;private,request,methods,request,condition,match,pre,flight,server,http,request,request,if,get,methods,is,empty,return,this,http,method,expected,method,request,get,headers,get,access,control,request,method,return,match,request,method,expected,method,name
RequestMethodsRequestCondition -> private RequestMethodsRequestCondition matchPreFlight(ServerHttpRequest request);1496837955;On a pre-flight request match to the would-be, actual request._Hence empty conditions is a match, otherwise try to match to the HTTP_method in the "Access-Control-Request-Method" header.;private RequestMethodsRequestCondition matchPreFlight(ServerHttpRequest request) {_		if (getMethods().isEmpty()) {_			return this__		}_		HttpMethod expectedMethod = request.getHeaders().getAccessControlRequestMethod()__		return matchRequestMethod(expectedMethod)__	};on,a,pre,flight,request,match,to,the,would,be,actual,request,hence,empty,conditions,is,a,match,otherwise,try,to,match,to,the,http,method,in,the,access,control,request,method,header;private,request,methods,request,condition,match,pre,flight,server,http,request,request,if,get,methods,is,empty,return,this,http,method,expected,method,request,get,headers,get,access,control,request,method,return,match,request,method,expected,method
RequestMethodsRequestCondition -> private RequestMethodsRequestCondition matchPreFlight(ServerHttpRequest request);1502974979;On a pre-flight request match to the would-be, actual request._Hence empty conditions is a match, otherwise try to match to the HTTP_method in the "Access-Control-Request-Method" header.;private RequestMethodsRequestCondition matchPreFlight(ServerHttpRequest request) {_		if (getMethods().isEmpty()) {_			return this__		}_		HttpMethod expectedMethod = request.getHeaders().getAccessControlRequestMethod()__		return matchRequestMethod(expectedMethod)__	};on,a,pre,flight,request,match,to,the,would,be,actual,request,hence,empty,conditions,is,a,match,otherwise,try,to,match,to,the,http,method,in,the,access,control,request,method,header;private,request,methods,request,condition,match,pre,flight,server,http,request,request,if,get,methods,is,empty,return,this,http,method,expected,method,request,get,headers,get,access,control,request,method,return,match,request,method,expected,method
RequestMethodsRequestCondition -> private RequestMethodsRequestCondition matchPreFlight(ServerHttpRequest request);1530174524;On a pre-flight request match to the would-be, actual request._Hence empty conditions is a match, otherwise try to match to the HTTP_method in the "Access-Control-Request-Method" header.;private RequestMethodsRequestCondition matchPreFlight(ServerHttpRequest request) {_		if (getMethods().isEmpty()) {_			return this__		}_		HttpMethod expectedMethod = request.getHeaders().getAccessControlRequestMethod()__		return matchRequestMethod(expectedMethod)__	};on,a,pre,flight,request,match,to,the,would,be,actual,request,hence,empty,conditions,is,a,match,otherwise,try,to,match,to,the,http,method,in,the,access,control,request,method,header;private,request,methods,request,condition,match,pre,flight,server,http,request,request,if,get,methods,is,empty,return,this,http,method,expected,method,request,get,headers,get,access,control,request,method,return,match,request,method,expected,method
RequestMethodsRequestCondition -> private RequestMethodsRequestCondition matchPreFlight(ServerHttpRequest request);1546438985;On a pre-flight request match to the would-be, actual request._Hence empty conditions is a match, otherwise try to match to the HTTP_method in the "Access-Control-Request-Method" header.;private RequestMethodsRequestCondition matchPreFlight(ServerHttpRequest request) {_		if (getMethods().isEmpty()) {_			return this__		}_		HttpMethod expectedMethod = request.getHeaders().getAccessControlRequestMethod()__		return matchRequestMethod(expectedMethod)__	};on,a,pre,flight,request,match,to,the,would,be,actual,request,hence,empty,conditions,is,a,match,otherwise,try,to,match,to,the,http,method,in,the,access,control,request,method,header;private,request,methods,request,condition,match,pre,flight,server,http,request,request,if,get,methods,is,empty,return,this,http,method,expected,method,request,get,headers,get,access,control,request,method,return,match,request,method,expected,method
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition getMatchingCondition(ServerWebExchange exchange);1485986572;Check if any of the HTTP request methods match the given request and_return an instance that contains the matching HTTP request method only._@param exchange the current exchange_@return the same instance if the condition is empty (unless the request_method is HTTP OPTIONS), a new condition with the matched request method,_or {@code null} if there is no match or the condition is empty and the_request method is OPTIONS.;@Override_	public RequestMethodsRequestCondition getMatchingCondition(ServerWebExchange exchange) {_		if (CorsUtils.isPreFlightRequest(exchange.getRequest())) {_			return matchPreFlight(exchange.getRequest())__		}_		if (getMethods().isEmpty()) {_			if (RequestMethod.OPTIONS.name().equals(exchange.getRequest().getMethod().name())) {_				return null_ _			}_			return this__		}_		return matchRequestMethod(exchange.getRequest().getMethod().name())__	};check,if,any,of,the,http,request,methods,match,the,given,request,and,return,an,instance,that,contains,the,matching,http,request,method,only,param,exchange,the,current,exchange,return,the,same,instance,if,the,condition,is,empty,unless,the,request,method,is,http,options,a,new,condition,with,the,matched,request,method,or,code,null,if,there,is,no,match,or,the,condition,is,empty,and,the,request,method,is,options;override,public,request,methods,request,condition,get,matching,condition,server,web,exchange,exchange,if,cors,utils,is,pre,flight,request,exchange,get,request,return,match,pre,flight,exchange,get,request,if,get,methods,is,empty,if,request,method,options,name,equals,exchange,get,request,get,method,name,return,null,return,this,return,match,request,method,exchange,get,request,get,method,name
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition getMatchingCondition(ServerWebExchange exchange);1495639183;Check if any of the HTTP request methods match the given request and_return an instance that contains the matching HTTP request method only._@param exchange the current exchange_@return the same instance if the condition is empty (unless the request_method is HTTP OPTIONS), a new condition with the matched request method,_or {@code null} if there is no match or the condition is empty and the_request method is OPTIONS.;@Override_	public RequestMethodsRequestCondition getMatchingCondition(ServerWebExchange exchange) {_		if (CorsUtils.isPreFlightRequest(exchange.getRequest())) {_			return matchPreFlight(exchange.getRequest())__		}_		if (getMethods().isEmpty()) {_			if (RequestMethod.OPTIONS.name().equals(exchange.getRequest().getMethodValue())) {_				return null_ _			}_			return this__		}_		return matchRequestMethod(exchange.getRequest().getMethod().name())__	};check,if,any,of,the,http,request,methods,match,the,given,request,and,return,an,instance,that,contains,the,matching,http,request,method,only,param,exchange,the,current,exchange,return,the,same,instance,if,the,condition,is,empty,unless,the,request,method,is,http,options,a,new,condition,with,the,matched,request,method,or,code,null,if,there,is,no,match,or,the,condition,is,empty,and,the,request,method,is,options;override,public,request,methods,request,condition,get,matching,condition,server,web,exchange,exchange,if,cors,utils,is,pre,flight,request,exchange,get,request,return,match,pre,flight,exchange,get,request,if,get,methods,is,empty,if,request,method,options,name,equals,exchange,get,request,get,method,value,return,null,return,this,return,match,request,method,exchange,get,request,get,method,name
RequestMethodsRequestCondition -> @Override 	public RequestMethodsRequestCondition getMatchingCondition(ServerWebExchange exchange);1496837955;Check if any of the HTTP request methods match the given request and_return an instance that contains the matching HTTP request method only._@param exchange the current exchange_@return the same instance if the condition is empty (unless the request_method is HTTP OPTIONS), a new condition with the matched request method,_or {@code null} if there is no match or the condition is empty and the_request method is OPTIONS.;@Override_	public RequestMethodsRequestCondition getMatchingCondition(ServerWebExchange exchange) {_		if (CorsUtils.isPreFlightRequest(exchange.getRequest())) {_			return matchPreFlight(exchange.getRequest())__		}_		if (getMethods().isEmpty()) {_			if (RequestMethod.OPTIONS.name().equals(exchange.getRequest().getMethodValue())) {_				return null_ _			}_			return this__		}_		return matchRequestMethod(exchange.getRequest().getMethod())__	};check,if,any,of,the,http,request,methods,match,the,given,request,and,return,an,instance,that,contains,the,matching,http,request,method,only,param,exchange,the,current,exchange,return,the,same,instance,if,the,condition,is,empty,unless,the,request,method,is,http,options,a,new,condition,with,the,matched,request,method,or,code,null,if,there,is,no,match,or,the,condition,is,empty,and,the,request,method,is,options;override,public,request,methods,request,condition,get,matching,condition,server,web,exchange,exchange,if,cors,utils,is,pre,flight,request,exchange,get,request,return,match,pre,flight,exchange,get,request,if,get,methods,is,empty,if,request,method,options,name,equals,exchange,get,request,get,method,value,return,null,return,this,return,match,request,method,exchange,get,request,get,method
