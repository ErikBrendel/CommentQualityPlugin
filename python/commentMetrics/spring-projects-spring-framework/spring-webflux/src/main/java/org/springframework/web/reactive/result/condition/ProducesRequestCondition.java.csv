# id;timestamp;commentText;codeText;commentWords;codeWords
ProducesRequestCondition -> public boolean isEmpty();1485986572;Whether the condition has any media type expressions.;public boolean isEmpty() {_		return this.expressions.isEmpty()__	};whether,the,condition,has,any,media,type,expressions;public,boolean,is,empty,return,this,expressions,is,empty
ProducesRequestCondition -> public boolean isEmpty();1497039338;Whether the condition has any media type expressions.;public boolean isEmpty() {_		return this.expressions.isEmpty()__	};whether,the,condition,has,any,media,type,expressions;public,boolean,is,empty,return,this,expressions,is,empty
ProducesRequestCondition -> public boolean isEmpty();1502974979;Whether the condition has any media type expressions.;public boolean isEmpty() {_		return this.expressions.isEmpty()__	};whether,the,condition,has,any,media,type,expressions;public,boolean,is,empty,return,this,expressions,is,empty
ProducesRequestCondition -> @Override 	public ProducesRequestCondition combine(ProducesRequestCondition other);1485986572;Returns the "other" instance if it has any expressions_ returns "this"_instance otherwise. Practically that means a method-level "produces"_overrides a type-level "produces" condition.;@Override_	public ProducesRequestCondition combine(ProducesRequestCondition other) {_		return (!other.expressions.isEmpty() ? other : this)__	};returns,the,other,instance,if,it,has,any,expressions,returns,this,instance,otherwise,practically,that,means,a,method,level,produces,overrides,a,type,level,produces,condition;override,public,produces,request,condition,combine,produces,request,condition,other,return,other,expressions,is,empty,other,this
ProducesRequestCondition -> @Override 	public ProducesRequestCondition combine(ProducesRequestCondition other);1497039338;Returns the "other" instance if it has any expressions_ returns "this"_instance otherwise. Practically that means a method-level "produces"_overrides a type-level "produces" condition.;@Override_	public ProducesRequestCondition combine(ProducesRequestCondition other) {_		return (!other.expressions.isEmpty() ? other : this)__	};returns,the,other,instance,if,it,has,any,expressions,returns,this,instance,otherwise,practically,that,means,a,method,level,produces,overrides,a,type,level,produces,condition;override,public,produces,request,condition,combine,produces,request,condition,other,return,other,expressions,is,empty,other,this
ProducesRequestCondition -> @Override 	public ProducesRequestCondition combine(ProducesRequestCondition other);1502974979;Returns the "other" instance if it has any expressions_ returns "this"_instance otherwise. Practically that means a method-level "produces"_overrides a type-level "produces" condition.;@Override_	public ProducesRequestCondition combine(ProducesRequestCondition other) {_		return (!other.expressions.isEmpty() ? other : this)__	};returns,the,other,instance,if,it,has,any,expressions,returns,this,instance,otherwise,practically,that,means,a,method,level,produces,overrides,a,type,level,produces,condition;override,public,produces,request,condition,combine,produces,request,condition,other,return,other,expressions,is,empty,other,this
ProducesRequestCondition -> @Override 	public ProducesRequestCondition combine(ProducesRequestCondition other);1519859718;Returns the "other" instance if it has any expressions_ returns "this"_instance otherwise. Practically that means a method-level "produces"_overrides a type-level "produces" condition.;@Override_	public ProducesRequestCondition combine(ProducesRequestCondition other) {_		return (!other.expressions.isEmpty() ? other : this)__	};returns,the,other,instance,if,it,has,any,expressions,returns,this,instance,otherwise,practically,that,means,a,method,level,produces,overrides,a,type,level,produces,condition;override,public,produces,request,condition,combine,produces,request,condition,other,return,other,expressions,is,empty,other,this
ProducesRequestCondition -> @Override 	public ProducesRequestCondition combine(ProducesRequestCondition other);1519860149;Returns the "other" instance if it has any expressions_ returns "this"_instance otherwise. Practically that means a method-level "produces"_overrides a type-level "produces" condition.;@Override_	public ProducesRequestCondition combine(ProducesRequestCondition other) {_		return (!other.expressions.isEmpty() ? other : this)__	};returns,the,other,instance,if,it,has,any,expressions,returns,this,instance,otherwise,practically,that,means,a,method,level,produces,overrides,a,type,level,produces,condition;override,public,produces,request,condition,combine,produces,request,condition,other,return,other,expressions,is,empty,other,this
ProducesRequestCondition -> @Override 	public ProducesRequestCondition combine(ProducesRequestCondition other);1520528267;Returns the "other" instance if it has any expressions_ returns "this"_instance otherwise. Practically that means a method-level "produces"_overrides a type-level "produces" condition.;@Override_	public ProducesRequestCondition combine(ProducesRequestCondition other) {_		return (!other.expressions.isEmpty() ? other : this)__	};returns,the,other,instance,if,it,has,any,expressions,returns,this,instance,otherwise,practically,that,means,a,method,level,produces,overrides,a,type,level,produces,condition;override,public,produces,request,condition,combine,produces,request,condition,other,return,other,expressions,is,empty,other,this
ProducesRequestCondition -> @Override 	public ProducesRequestCondition combine(ProducesRequestCondition other);1521714971;Returns the "other" instance if it has any expressions_ returns "this"_instance otherwise. Practically that means a method-level "produces"_overrides a type-level "produces" condition.;@Override_	public ProducesRequestCondition combine(ProducesRequestCondition other) {_		return (!other.expressions.isEmpty() ? other : this)__	};returns,the,other,instance,if,it,has,any,expressions,returns,this,instance,otherwise,practically,that,means,a,method,level,produces,overrides,a,type,level,produces,condition;override,public,produces,request,condition,combine,produces,request,condition,other,return,other,expressions,is,empty,other,this
ProducesRequestCondition -> @Override 	public ProducesRequestCondition combine(ProducesRequestCondition other);1522184065;Returns the "other" instance if it has any expressions_ returns "this"_instance otherwise. Practically that means a method-level "produces"_overrides a type-level "produces" condition.;@Override_	public ProducesRequestCondition combine(ProducesRequestCondition other) {_		return (!other.expressions.isEmpty() ? other : this)__	};returns,the,other,instance,if,it,has,any,expressions,returns,this,instance,otherwise,practically,that,means,a,method,level,produces,overrides,a,type,level,produces,condition;override,public,produces,request,condition,combine,produces,request,condition,other,return,other,expressions,is,empty,other,this
ProducesRequestCondition -> @Override 	public ProducesRequestCondition combine(ProducesRequestCondition other);1524852408;Returns the "other" instance if it has any expressions_ returns "this"_instance otherwise. Practically that means a method-level "produces"_overrides a type-level "produces" condition.;@Override_	public ProducesRequestCondition combine(ProducesRequestCondition other) {_		return (!other.expressions.isEmpty() ? other : this)__	};returns,the,other,instance,if,it,has,any,expressions,returns,this,instance,otherwise,practically,that,means,a,method,level,produces,overrides,a,type,level,produces,condition;override,public,produces,request,condition,combine,produces,request,condition,other,return,other,expressions,is,empty,other,this
ProducesRequestCondition -> @Override 	public ProducesRequestCondition combine(ProducesRequestCondition other);1530174524;Returns the "other" instance if it has any expressions_ returns "this"_instance otherwise. Practically that means a method-level "produces"_overrides a type-level "produces" condition.;@Override_	public ProducesRequestCondition combine(ProducesRequestCondition other) {_		return (!other.expressions.isEmpty() ? other : this)__	};returns,the,other,instance,if,it,has,any,expressions,returns,this,instance,otherwise,practically,that,means,a,method,level,produces,overrides,a,type,level,produces,condition;override,public,produces,request,condition,combine,produces,request,condition,other,return,other,expressions,is,empty,other,this
ProducesRequestCondition -> @Override 	public ProducesRequestCondition combine(ProducesRequestCondition other);1530190293;Returns the "other" instance if it has any expressions_ returns "this"_instance otherwise. Practically that means a method-level "produces"_overrides a type-level "produces" condition.;@Override_	public ProducesRequestCondition combine(ProducesRequestCondition other) {_		return (!other.expressions.isEmpty() ? other : this)__	};returns,the,other,instance,if,it,has,any,expressions,returns,this,instance,otherwise,practically,that,means,a,method,level,produces,overrides,a,type,level,produces,condition;override,public,produces,request,condition,combine,produces,request,condition,other,return,other,expressions,is,empty,other,this
ProducesRequestCondition -> @Override 	public ProducesRequestCondition combine(ProducesRequestCondition other);1546457570;Returns the "other" instance if it has any expressions_ returns "this"_instance otherwise. Practically that means a method-level "produces"_overrides a type-level "produces" condition.;@Override_	public ProducesRequestCondition combine(ProducesRequestCondition other) {_		return (!other.expressions.isEmpty() ? other : this)__	};returns,the,other,instance,if,it,has,any,expressions,returns,this,instance,otherwise,practically,that,means,a,method,level,produces,overrides,a,type,level,produces,condition;override,public,produces,request,condition,combine,produces,request,condition,other,return,other,expressions,is,empty,other,this
ProducesRequestCondition -> public Set<MediaTypeExpression> getExpressions();1485986572;Return the contained "produces" expressions.;public Set<MediaTypeExpression> getExpressions() {_		return new LinkedHashSet<>(this.expressions)__	};return,the,contained,produces,expressions;public,set,media,type,expression,get,expressions,return,new,linked,hash,set,this,expressions
ProducesRequestCondition -> public Set<MediaTypeExpression> getExpressions();1497039338;Return the contained "produces" expressions.;public Set<MediaTypeExpression> getExpressions() {_		return new LinkedHashSet<>(this.expressions)__	};return,the,contained,produces,expressions;public,set,media,type,expression,get,expressions,return,new,linked,hash,set,this,expressions
ProducesRequestCondition -> public Set<MediaTypeExpression> getExpressions();1502974979;Return the contained "produces" expressions.;public Set<MediaTypeExpression> getExpressions() {_		return new LinkedHashSet<>(this.expressions)__	};return,the,contained,produces,expressions;public,set,media,type,expression,get,expressions,return,new,linked,hash,set,this,expressions
ProducesRequestCondition -> public Set<MediaTypeExpression> getExpressions();1519859718;Return the contained "produces" expressions.;public Set<MediaTypeExpression> getExpressions() {_		return new LinkedHashSet<>(this.expressions)__	};return,the,contained,produces,expressions;public,set,media,type,expression,get,expressions,return,new,linked,hash,set,this,expressions
ProducesRequestCondition -> public Set<MediaTypeExpression> getExpressions();1519860149;Return the contained "produces" expressions.;public Set<MediaTypeExpression> getExpressions() {_		return new LinkedHashSet<>(this.expressions)__	};return,the,contained,produces,expressions;public,set,media,type,expression,get,expressions,return,new,linked,hash,set,this,expressions
ProducesRequestCondition -> public Set<MediaTypeExpression> getExpressions();1520528267;Return the contained "produces" expressions.;public Set<MediaTypeExpression> getExpressions() {_		return new LinkedHashSet<>(this.expressions)__	};return,the,contained,produces,expressions;public,set,media,type,expression,get,expressions,return,new,linked,hash,set,this,expressions
ProducesRequestCondition -> public Set<MediaTypeExpression> getExpressions();1521714971;Return the contained "produces" expressions.;public Set<MediaTypeExpression> getExpressions() {_		return new LinkedHashSet<>(this.expressions)__	};return,the,contained,produces,expressions;public,set,media,type,expression,get,expressions,return,new,linked,hash,set,this,expressions
ProducesRequestCondition -> public Set<MediaTypeExpression> getExpressions();1522184065;Return the contained "produces" expressions.;public Set<MediaTypeExpression> getExpressions() {_		return new LinkedHashSet<>(this.expressions)__	};return,the,contained,produces,expressions;public,set,media,type,expression,get,expressions,return,new,linked,hash,set,this,expressions
ProducesRequestCondition -> public Set<MediaTypeExpression> getExpressions();1524852408;Return the contained "produces" expressions.;public Set<MediaTypeExpression> getExpressions() {_		return new LinkedHashSet<>(this.expressions)__	};return,the,contained,produces,expressions;public,set,media,type,expression,get,expressions,return,new,linked,hash,set,this,expressions
ProducesRequestCondition -> public Set<MediaTypeExpression> getExpressions();1530174524;Return the contained "produces" expressions.;public Set<MediaTypeExpression> getExpressions() {_		return new LinkedHashSet<>(this.expressions)__	};return,the,contained,produces,expressions;public,set,media,type,expression,get,expressions,return,new,linked,hash,set,this,expressions
ProducesRequestCondition -> public Set<MediaTypeExpression> getExpressions();1530190293;Return the contained "produces" expressions.;public Set<MediaTypeExpression> getExpressions() {_		return new LinkedHashSet<>(this.expressions)__	};return,the,contained,produces,expressions;public,set,media,type,expression,get,expressions,return,new,linked,hash,set,this,expressions
ProducesRequestCondition -> public Set<MediaTypeExpression> getExpressions();1546457570;Return the contained "produces" expressions.;public Set<MediaTypeExpression> getExpressions() {_		return new LinkedHashSet<>(this.expressions)__	};return,the,contained,produces,expressions;public,set,media,type,expression,get,expressions,return,new,linked,hash,set,this,expressions
ProducesRequestCondition -> public ProducesRequestCondition(String... produces);1485986572;Creates a new instance from "produces" expressions. If 0 expressions_are provided in total, this condition will match to any request._@param produces expressions with syntax defined by {@link RequestMapping#produces()};public ProducesRequestCondition(String... produces) {_		this(produces, null)__	};creates,a,new,instance,from,produces,expressions,if,0,expressions,are,provided,in,total,this,condition,will,match,to,any,request,param,produces,expressions,with,syntax,defined,by,link,request,mapping,produces;public,produces,request,condition,string,produces,this,produces,null
ProducesRequestCondition -> public ProducesRequestCondition(String... produces);1497039338;Creates a new instance from "produces" expressions. If 0 expressions_are provided in total, this condition will match to any request._@param produces expressions with syntax defined by {@link RequestMapping#produces()};public ProducesRequestCondition(String... produces) {_		this(produces, null)__	};creates,a,new,instance,from,produces,expressions,if,0,expressions,are,provided,in,total,this,condition,will,match,to,any,request,param,produces,expressions,with,syntax,defined,by,link,request,mapping,produces;public,produces,request,condition,string,produces,this,produces,null
ProducesRequestCondition -> public ProducesRequestCondition(String... produces);1502974979;Creates a new instance from "produces" expressions. If 0 expressions_are provided in total, this condition will match to any request._@param produces expressions with syntax defined by {@link RequestMapping#produces()};public ProducesRequestCondition(String... produces) {_		this(produces, null)__	};creates,a,new,instance,from,produces,expressions,if,0,expressions,are,provided,in,total,this,condition,will,match,to,any,request,param,produces,expressions,with,syntax,defined,by,link,request,mapping,produces;public,produces,request,condition,string,produces,this,produces,null
ProducesRequestCondition -> public ProducesRequestCondition(String... produces);1519859718;Creates a new instance from "produces" expressions. If 0 expressions_are provided in total, this condition will match to any request._@param produces expressions with syntax defined by {@link RequestMapping#produces()};public ProducesRequestCondition(String... produces) {_		this(produces, null)__	};creates,a,new,instance,from,produces,expressions,if,0,expressions,are,provided,in,total,this,condition,will,match,to,any,request,param,produces,expressions,with,syntax,defined,by,link,request,mapping,produces;public,produces,request,condition,string,produces,this,produces,null
ProducesRequestCondition -> public ProducesRequestCondition(String... produces);1519860149;Creates a new instance from "produces" expressions. If 0 expressions_are provided in total, this condition will match to any request._@param produces expressions with syntax defined by {@link RequestMapping#produces()};public ProducesRequestCondition(String... produces) {_		this(produces, null)__	};creates,a,new,instance,from,produces,expressions,if,0,expressions,are,provided,in,total,this,condition,will,match,to,any,request,param,produces,expressions,with,syntax,defined,by,link,request,mapping,produces;public,produces,request,condition,string,produces,this,produces,null
ProducesRequestCondition -> public ProducesRequestCondition(String... produces);1520528267;Creates a new instance from "produces" expressions. If 0 expressions_are provided in total, this condition will match to any request._@param produces expressions with syntax defined by {@link RequestMapping#produces()};public ProducesRequestCondition(String... produces) {_		this(produces, null)__	};creates,a,new,instance,from,produces,expressions,if,0,expressions,are,provided,in,total,this,condition,will,match,to,any,request,param,produces,expressions,with,syntax,defined,by,link,request,mapping,produces;public,produces,request,condition,string,produces,this,produces,null
ProducesRequestCondition -> public ProducesRequestCondition(String... produces);1521714971;Creates a new instance from "produces" expressions. If 0 expressions_are provided in total, this condition will match to any request._@param produces expressions with syntax defined by {@link RequestMapping#produces()};public ProducesRequestCondition(String... produces) {_		this(produces, null)__	};creates,a,new,instance,from,produces,expressions,if,0,expressions,are,provided,in,total,this,condition,will,match,to,any,request,param,produces,expressions,with,syntax,defined,by,link,request,mapping,produces;public,produces,request,condition,string,produces,this,produces,null
ProducesRequestCondition -> public ProducesRequestCondition(String... produces);1522184065;Creates a new instance from "produces" expressions. If 0 expressions_are provided in total, this condition will match to any request._@param produces expressions with syntax defined by {@link RequestMapping#produces()};public ProducesRequestCondition(String... produces) {_		this(produces, null)__	};creates,a,new,instance,from,produces,expressions,if,0,expressions,are,provided,in,total,this,condition,will,match,to,any,request,param,produces,expressions,with,syntax,defined,by,link,request,mapping,produces;public,produces,request,condition,string,produces,this,produces,null
ProducesRequestCondition -> public ProducesRequestCondition(String... produces);1524852408;Creates a new instance from "produces" expressions. If 0 expressions_are provided in total, this condition will match to any request._@param produces expressions with syntax defined by {@link RequestMapping#produces()};public ProducesRequestCondition(String... produces) {_		this(produces, null)__	};creates,a,new,instance,from,produces,expressions,if,0,expressions,are,provided,in,total,this,condition,will,match,to,any,request,param,produces,expressions,with,syntax,defined,by,link,request,mapping,produces;public,produces,request,condition,string,produces,this,produces,null
ProducesRequestCondition -> public ProducesRequestCondition(String... produces);1530174524;Creates a new instance from "produces" expressions. If 0 expressions_are provided in total, this condition will match to any request._@param produces expressions with syntax defined by {@link RequestMapping#produces()};public ProducesRequestCondition(String... produces) {_		this(produces, null)__	};creates,a,new,instance,from,produces,expressions,if,0,expressions,are,provided,in,total,this,condition,will,match,to,any,request,param,produces,expressions,with,syntax,defined,by,link,request,mapping,produces;public,produces,request,condition,string,produces,this,produces,null
ProducesRequestCondition -> public ProducesRequestCondition(String... produces);1530190293;Creates a new instance from "produces" expressions. If 0 expressions_are provided in total, this condition will match to any request._@param produces expressions with syntax defined by {@link RequestMapping#produces()};public ProducesRequestCondition(String... produces) {_		this(produces, null)__	};creates,a,new,instance,from,produces,expressions,if,0,expressions,are,provided,in,total,this,condition,will,match,to,any,request,param,produces,expressions,with,syntax,defined,by,link,request,mapping,produces;public,produces,request,condition,string,produces,this,produces,null
ProducesRequestCondition -> public ProducesRequestCondition(String... produces);1546457570;Creates a new instance from "produces" expressions. If 0 expressions_are provided in total, this condition will match to any request._@param produces expressions with syntax defined by {@link RequestMapping#produces()};public ProducesRequestCondition(String... produces) {_		this(produces, null)__	};creates,a,new,instance,from,produces,expressions,if,0,expressions,are,provided,in,total,this,condition,will,match,to,any,request,param,produces,expressions,with,syntax,defined,by,link,request,mapping,produces;public,produces,request,condition,string,produces,this,produces,null
ProducesRequestCondition -> public ProducesRequestCondition(String[] produces, String[] headers);1485986572;Creates a new instance with "produces" and "header" expressions. "Header"_expressions where the header name is not 'Accept' or have no header value_defined are ignored. If 0 expressions are provided in total, this condition_will match to any request._@param produces expressions with syntax defined by {@link RequestMapping#produces()}_@param headers expressions with syntax defined by {@link RequestMapping#headers()};public ProducesRequestCondition(String[] produces, String[] headers) {_		this(produces, headers, null)__	};creates,a,new,instance,with,produces,and,header,expressions,header,expressions,where,the,header,name,is,not,accept,or,have,no,header,value,defined,are,ignored,if,0,expressions,are,provided,in,total,this,condition,will,match,to,any,request,param,produces,expressions,with,syntax,defined,by,link,request,mapping,produces,param,headers,expressions,with,syntax,defined,by,link,request,mapping,headers;public,produces,request,condition,string,produces,string,headers,this,produces,headers,null
ProducesRequestCondition -> public ProducesRequestCondition(String[] produces, String[] headers);1497039338;Creates a new instance with "produces" and "header" expressions. "Header"_expressions where the header name is not 'Accept' or have no header value_defined are ignored. If 0 expressions are provided in total, this condition_will match to any request._@param produces expressions with syntax defined by {@link RequestMapping#produces()}_@param headers expressions with syntax defined by {@link RequestMapping#headers()};public ProducesRequestCondition(String[] produces, String[] headers) {_		this(produces, headers, null)__	};creates,a,new,instance,with,produces,and,header,expressions,header,expressions,where,the,header,name,is,not,accept,or,have,no,header,value,defined,are,ignored,if,0,expressions,are,provided,in,total,this,condition,will,match,to,any,request,param,produces,expressions,with,syntax,defined,by,link,request,mapping,produces,param,headers,expressions,with,syntax,defined,by,link,request,mapping,headers;public,produces,request,condition,string,produces,string,headers,this,produces,headers,null
ProducesRequestCondition -> public ProducesRequestCondition(String[] produces, String[] headers);1502974979;Creates a new instance with "produces" and "header" expressions. "Header"_expressions where the header name is not 'Accept' or have no header value_defined are ignored. If 0 expressions are provided in total, this condition_will match to any request._@param produces expressions with syntax defined by {@link RequestMapping#produces()}_@param headers expressions with syntax defined by {@link RequestMapping#headers()};public ProducesRequestCondition(String[] produces, String[] headers) {_		this(produces, headers, null)__	};creates,a,new,instance,with,produces,and,header,expressions,header,expressions,where,the,header,name,is,not,accept,or,have,no,header,value,defined,are,ignored,if,0,expressions,are,provided,in,total,this,condition,will,match,to,any,request,param,produces,expressions,with,syntax,defined,by,link,request,mapping,produces,param,headers,expressions,with,syntax,defined,by,link,request,mapping,headers;public,produces,request,condition,string,produces,string,headers,this,produces,headers,null
ProducesRequestCondition -> public ProducesRequestCondition(String[] produces, String[] headers);1519859718;Creates a new instance with "produces" and "header" expressions. "Header"_expressions where the header name is not 'Accept' or have no header value_defined are ignored. If 0 expressions are provided in total, this condition_will match to any request._@param produces expressions with syntax defined by {@link RequestMapping#produces()}_@param headers expressions with syntax defined by {@link RequestMapping#headers()};public ProducesRequestCondition(String[] produces, String[] headers) {_		this(produces, headers, null)__	};creates,a,new,instance,with,produces,and,header,expressions,header,expressions,where,the,header,name,is,not,accept,or,have,no,header,value,defined,are,ignored,if,0,expressions,are,provided,in,total,this,condition,will,match,to,any,request,param,produces,expressions,with,syntax,defined,by,link,request,mapping,produces,param,headers,expressions,with,syntax,defined,by,link,request,mapping,headers;public,produces,request,condition,string,produces,string,headers,this,produces,headers,null
ProducesRequestCondition -> public ProducesRequestCondition(String[] produces, String[] headers);1519860149;Creates a new instance with "produces" and "header" expressions. "Header"_expressions where the header name is not 'Accept' or have no header value_defined are ignored. If 0 expressions are provided in total, this condition_will match to any request._@param produces expressions with syntax defined by {@link RequestMapping#produces()}_@param headers expressions with syntax defined by {@link RequestMapping#headers()};public ProducesRequestCondition(String[] produces, String[] headers) {_		this(produces, headers, null)__	};creates,a,new,instance,with,produces,and,header,expressions,header,expressions,where,the,header,name,is,not,accept,or,have,no,header,value,defined,are,ignored,if,0,expressions,are,provided,in,total,this,condition,will,match,to,any,request,param,produces,expressions,with,syntax,defined,by,link,request,mapping,produces,param,headers,expressions,with,syntax,defined,by,link,request,mapping,headers;public,produces,request,condition,string,produces,string,headers,this,produces,headers,null
ProducesRequestCondition -> public ProducesRequestCondition(String[] produces, String[] headers);1520528267;Creates a new instance with "produces" and "header" expressions. "Header"_expressions where the header name is not 'Accept' or have no header value_defined are ignored. If 0 expressions are provided in total, this condition_will match to any request._@param produces expressions with syntax defined by {@link RequestMapping#produces()}_@param headers expressions with syntax defined by {@link RequestMapping#headers()};public ProducesRequestCondition(String[] produces, String[] headers) {_		this(produces, headers, null)__	};creates,a,new,instance,with,produces,and,header,expressions,header,expressions,where,the,header,name,is,not,accept,or,have,no,header,value,defined,are,ignored,if,0,expressions,are,provided,in,total,this,condition,will,match,to,any,request,param,produces,expressions,with,syntax,defined,by,link,request,mapping,produces,param,headers,expressions,with,syntax,defined,by,link,request,mapping,headers;public,produces,request,condition,string,produces,string,headers,this,produces,headers,null
ProducesRequestCondition -> public ProducesRequestCondition(String[] produces, String[] headers);1521714971;Creates a new instance with "produces" and "header" expressions. "Header"_expressions where the header name is not 'Accept' or have no header value_defined are ignored. If 0 expressions are provided in total, this condition_will match to any request._@param produces expressions with syntax defined by {@link RequestMapping#produces()}_@param headers expressions with syntax defined by {@link RequestMapping#headers()};public ProducesRequestCondition(String[] produces, String[] headers) {_		this(produces, headers, null)__	};creates,a,new,instance,with,produces,and,header,expressions,header,expressions,where,the,header,name,is,not,accept,or,have,no,header,value,defined,are,ignored,if,0,expressions,are,provided,in,total,this,condition,will,match,to,any,request,param,produces,expressions,with,syntax,defined,by,link,request,mapping,produces,param,headers,expressions,with,syntax,defined,by,link,request,mapping,headers;public,produces,request,condition,string,produces,string,headers,this,produces,headers,null
ProducesRequestCondition -> public ProducesRequestCondition(String[] produces, String[] headers);1522184065;Creates a new instance with "produces" and "header" expressions. "Header"_expressions where the header name is not 'Accept' or have no header value_defined are ignored. If 0 expressions are provided in total, this condition_will match to any request._@param produces expressions with syntax defined by {@link RequestMapping#produces()}_@param headers expressions with syntax defined by {@link RequestMapping#headers()};public ProducesRequestCondition(String[] produces, String[] headers) {_		this(produces, headers, null)__	};creates,a,new,instance,with,produces,and,header,expressions,header,expressions,where,the,header,name,is,not,accept,or,have,no,header,value,defined,are,ignored,if,0,expressions,are,provided,in,total,this,condition,will,match,to,any,request,param,produces,expressions,with,syntax,defined,by,link,request,mapping,produces,param,headers,expressions,with,syntax,defined,by,link,request,mapping,headers;public,produces,request,condition,string,produces,string,headers,this,produces,headers,null
ProducesRequestCondition -> public ProducesRequestCondition(String[] produces, String[] headers);1524852408;Creates a new instance with "produces" and "header" expressions. "Header"_expressions where the header name is not 'Accept' or have no header value_defined are ignored. If 0 expressions are provided in total, this condition_will match to any request._@param produces expressions with syntax defined by {@link RequestMapping#produces()}_@param headers expressions with syntax defined by {@link RequestMapping#headers()};public ProducesRequestCondition(String[] produces, String[] headers) {_		this(produces, headers, null)__	};creates,a,new,instance,with,produces,and,header,expressions,header,expressions,where,the,header,name,is,not,accept,or,have,no,header,value,defined,are,ignored,if,0,expressions,are,provided,in,total,this,condition,will,match,to,any,request,param,produces,expressions,with,syntax,defined,by,link,request,mapping,produces,param,headers,expressions,with,syntax,defined,by,link,request,mapping,headers;public,produces,request,condition,string,produces,string,headers,this,produces,headers,null
ProducesRequestCondition -> public ProducesRequestCondition(String[] produces, String[] headers);1530174524;Creates a new instance with "produces" and "header" expressions. "Header"_expressions where the header name is not 'Accept' or have no header value_defined are ignored. If 0 expressions are provided in total, this condition_will match to any request._@param produces expressions with syntax defined by {@link RequestMapping#produces()}_@param headers expressions with syntax defined by {@link RequestMapping#headers()};public ProducesRequestCondition(String[] produces, String[] headers) {_		this(produces, headers, null)__	};creates,a,new,instance,with,produces,and,header,expressions,header,expressions,where,the,header,name,is,not,accept,or,have,no,header,value,defined,are,ignored,if,0,expressions,are,provided,in,total,this,condition,will,match,to,any,request,param,produces,expressions,with,syntax,defined,by,link,request,mapping,produces,param,headers,expressions,with,syntax,defined,by,link,request,mapping,headers;public,produces,request,condition,string,produces,string,headers,this,produces,headers,null
ProducesRequestCondition -> public ProducesRequestCondition(String[] produces, String[] headers);1530190293;Creates a new instance with "produces" and "header" expressions. "Header"_expressions where the header name is not 'Accept' or have no header value_defined are ignored. If 0 expressions are provided in total, this condition_will match to any request._@param produces expressions with syntax defined by {@link RequestMapping#produces()}_@param headers expressions with syntax defined by {@link RequestMapping#headers()};public ProducesRequestCondition(String[] produces, String[] headers) {_		this(produces, headers, null)__	};creates,a,new,instance,with,produces,and,header,expressions,header,expressions,where,the,header,name,is,not,accept,or,have,no,header,value,defined,are,ignored,if,0,expressions,are,provided,in,total,this,condition,will,match,to,any,request,param,produces,expressions,with,syntax,defined,by,link,request,mapping,produces,param,headers,expressions,with,syntax,defined,by,link,request,mapping,headers;public,produces,request,condition,string,produces,string,headers,this,produces,headers,null
ProducesRequestCondition -> public ProducesRequestCondition(String[] produces, String[] headers);1546457570;Creates a new instance with "produces" and "header" expressions. "Header"_expressions where the header name is not 'Accept' or have no header value_defined are ignored. If 0 expressions are provided in total, this condition_will match to any request._@param produces expressions with syntax defined by {@link RequestMapping#produces()}_@param headers expressions with syntax defined by {@link RequestMapping#headers()};public ProducesRequestCondition(String[] produces, String[] headers) {_		this(produces, headers, null)__	};creates,a,new,instance,with,produces,and,header,expressions,header,expressions,where,the,header,name,is,not,accept,or,have,no,header,value,defined,are,ignored,if,0,expressions,are,provided,in,total,this,condition,will,match,to,any,request,param,produces,expressions,with,syntax,defined,by,link,request,mapping,produces,param,headers,expressions,with,syntax,defined,by,link,request,mapping,headers;public,produces,request,condition,string,produces,string,headers,this,produces,headers,null
ProducesRequestCondition -> private List<ProduceMediaTypeExpression> getExpressionsToCompare();1485986572;Return the contained "produces" expressions or if that's empty, a list_with a {@code MediaType_ALL} expression.;private List<ProduceMediaTypeExpression> getExpressionsToCompare() {_		return (this.expressions.isEmpty() ? MEDIA_TYPE_ALL_LIST : this.expressions)__	};return,the,contained,produces,expressions,or,if,that,s,empty,a,list,with,a,code,expression;private,list,produce,media,type,expression,get,expressions,to,compare,return,this,expressions,is,empty,this,expressions
ProducesRequestCondition -> private List<ProduceMediaTypeExpression> getExpressionsToCompare();1497039338;Return the contained "produces" expressions or if that's empty, a list_with a {@code MediaType_ALL} expression.;private List<ProduceMediaTypeExpression> getExpressionsToCompare() {_		return (this.expressions.isEmpty() ? MEDIA_TYPE_ALL_LIST : this.expressions)__	};return,the,contained,produces,expressions,or,if,that,s,empty,a,list,with,a,code,expression;private,list,produce,media,type,expression,get,expressions,to,compare,return,this,expressions,is,empty,this,expressions
ProducesRequestCondition -> private List<ProduceMediaTypeExpression> getExpressionsToCompare();1502974979;Return the contained "produces" expressions or if that's empty, a list_with a {@code MediaType_ALL} expression.;private List<ProduceMediaTypeExpression> getExpressionsToCompare() {_		return (this.expressions.isEmpty() ? MEDIA_TYPE_ALL_LIST : this.expressions)__	};return,the,contained,produces,expressions,or,if,that,s,empty,a,list,with,a,code,expression;private,list,produce,media,type,expression,get,expressions,to,compare,return,this,expressions,is,empty,this,expressions
ProducesRequestCondition -> private List<ProduceMediaTypeExpression> getExpressionsToCompare();1519859718;Return the contained "produces" expressions or if that's empty, a list_with a {@code MediaType_ALL} expression.;private List<ProduceMediaTypeExpression> getExpressionsToCompare() {_		return (this.expressions.isEmpty() ? MEDIA_TYPE_ALL_LIST : this.expressions)__	};return,the,contained,produces,expressions,or,if,that,s,empty,a,list,with,a,code,expression;private,list,produce,media,type,expression,get,expressions,to,compare,return,this,expressions,is,empty,this,expressions
ProducesRequestCondition -> private List<ProduceMediaTypeExpression> getExpressionsToCompare();1519860149;Return the contained "produces" expressions or if that's empty, a list_with a {@code MediaType_ALL} expression.;private List<ProduceMediaTypeExpression> getExpressionsToCompare() {_		return (this.expressions.isEmpty() ? mediaTypeAllList  : this.expressions)__	};return,the,contained,produces,expressions,or,if,that,s,empty,a,list,with,a,code,expression;private,list,produce,media,type,expression,get,expressions,to,compare,return,this,expressions,is,empty,media,type,all,list,this,expressions
ProducesRequestCondition -> private List<ProduceMediaTypeExpression> getExpressionsToCompare();1520528267;Return the contained "produces" expressions or if that's empty, a list_with a {@code MediaType_ALL} expression.;private List<ProduceMediaTypeExpression> getExpressionsToCompare() {_		return (this.expressions.isEmpty() ? mediaTypeAllList  : this.expressions)__	};return,the,contained,produces,expressions,or,if,that,s,empty,a,list,with,a,code,expression;private,list,produce,media,type,expression,get,expressions,to,compare,return,this,expressions,is,empty,media,type,all,list,this,expressions
ProducesRequestCondition -> private List<ProduceMediaTypeExpression> getExpressionsToCompare();1521714971;Return the contained "produces" expressions or if that's empty, a list_with a {@code MediaType_ALL} expression.;private List<ProduceMediaTypeExpression> getExpressionsToCompare() {_		return (this.expressions.isEmpty() ? mediaTypeAllList  : this.expressions)__	};return,the,contained,produces,expressions,or,if,that,s,empty,a,list,with,a,code,expression;private,list,produce,media,type,expression,get,expressions,to,compare,return,this,expressions,is,empty,media,type,all,list,this,expressions
ProducesRequestCondition -> private List<ProduceMediaTypeExpression> getExpressionsToCompare();1522184065;Return the contained "produces" expressions or if that's empty, a list_with a {@code MediaType_ALL} expression.;private List<ProduceMediaTypeExpression> getExpressionsToCompare() {_		return (this.expressions.isEmpty() ? mediaTypeAllList  : this.expressions)__	};return,the,contained,produces,expressions,or,if,that,s,empty,a,list,with,a,code,expression;private,list,produce,media,type,expression,get,expressions,to,compare,return,this,expressions,is,empty,media,type,all,list,this,expressions
ProducesRequestCondition -> private List<ProduceMediaTypeExpression> getExpressionsToCompare();1524852408;Return the contained "produces" expressions or if that's empty, a list_with a {@value MediaType#ALL_VALUE} expression.;private List<ProduceMediaTypeExpression> getExpressionsToCompare() {_		return (this.expressions.isEmpty() ? mediaTypeAllList  : this.expressions)__	};return,the,contained,produces,expressions,or,if,that,s,empty,a,list,with,a,value,media,type,expression;private,list,produce,media,type,expression,get,expressions,to,compare,return,this,expressions,is,empty,media,type,all,list,this,expressions
ProducesRequestCondition -> private List<ProduceMediaTypeExpression> getExpressionsToCompare();1530174524;Return the contained "produces" expressions or if that's empty, a list_with a {@value MediaType#ALL_VALUE} expression.;private List<ProduceMediaTypeExpression> getExpressionsToCompare() {_		return (this.expressions.isEmpty() ? this.mediaTypeAllList  : this.expressions)__	};return,the,contained,produces,expressions,or,if,that,s,empty,a,list,with,a,value,media,type,expression;private,list,produce,media,type,expression,get,expressions,to,compare,return,this,expressions,is,empty,this,media,type,all,list,this,expressions
ProducesRequestCondition -> private List<ProduceMediaTypeExpression> getExpressionsToCompare();1530190293;Return the contained "produces" expressions or if that's empty, a list_with a {@value MediaType#ALL_VALUE} expression.;private List<ProduceMediaTypeExpression> getExpressionsToCompare() {_		return (this.expressions.isEmpty() ? this.mediaTypeAllList  : this.expressions)__	};return,the,contained,produces,expressions,or,if,that,s,empty,a,list,with,a,value,media,type,expression;private,list,produce,media,type,expression,get,expressions,to,compare,return,this,expressions,is,empty,this,media,type,all,list,this,expressions
ProducesRequestCondition -> private List<ProduceMediaTypeExpression> getExpressionsToCompare();1546457570;Return the contained "produces" expressions or if that's empty, a list_with a {@value MediaType#ALL_VALUE} expression.;private List<ProduceMediaTypeExpression> getExpressionsToCompare() {_		return (this.expressions.isEmpty() ? this.mediaTypeAllList  : this.expressions)__	};return,the,contained,produces,expressions,or,if,that,s,empty,a,list,with,a,value,media,type,expression;private,list,produce,media,type,expression,get,expressions,to,compare,return,this,expressions,is,empty,this,media,type,all,list,this,expressions
ProducesRequestCondition -> private ProducesRequestCondition(Collection<ProduceMediaTypeExpression> expressions, 			RequestedContentTypeResolver resolver);1485986572;Private constructor with already parsed media type expressions.;private ProducesRequestCondition(Collection<ProduceMediaTypeExpression> expressions,_			RequestedContentTypeResolver resolver) {__		this.expressions = new ArrayList<>(expressions)__		Collections.sort(this.expressions)__		this.contentTypeResolver = (resolver != null ?_				resolver : new RequestedContentTypeResolverBuilder().build())__	};private,constructor,with,already,parsed,media,type,expressions;private,produces,request,condition,collection,produce,media,type,expression,expressions,requested,content,type,resolver,resolver,this,expressions,new,array,list,expressions,collections,sort,this,expressions,this,content,type,resolver,resolver,null,resolver,new,requested,content,type,resolver,builder,build
ProducesRequestCondition -> private ProducesRequestCondition(Collection<ProduceMediaTypeExpression> expressions, 			RequestedContentTypeResolver resolver);1497039338;Private constructor with already parsed media type expressions.;private ProducesRequestCondition(Collection<ProduceMediaTypeExpression> expressions,_			RequestedContentTypeResolver resolver) {__		this.expressions = new ArrayList<>(expressions)__		Collections.sort(this.expressions)__		this.contentTypeResolver = (resolver != null ? resolver : new RequestedContentTypeResolverBuilder().build())__	};private,constructor,with,already,parsed,media,type,expressions;private,produces,request,condition,collection,produce,media,type,expression,expressions,requested,content,type,resolver,resolver,this,expressions,new,array,list,expressions,collections,sort,this,expressions,this,content,type,resolver,resolver,null,resolver,new,requested,content,type,resolver,builder,build
ProducesRequestCondition -> private ProducesRequestCondition(Collection<ProduceMediaTypeExpression> expressions, 			RequestedContentTypeResolver resolver);1502974979;Private constructor with already parsed media type expressions.;private ProducesRequestCondition(Collection<ProduceMediaTypeExpression> expressions,_			RequestedContentTypeResolver resolver) {__		this.expressions = new ArrayList<>(expressions)__		Collections.sort(this.expressions)__		this.contentTypeResolver = (resolver != null ? resolver : new RequestedContentTypeResolverBuilder().build())__	};private,constructor,with,already,parsed,media,type,expressions;private,produces,request,condition,collection,produce,media,type,expression,expressions,requested,content,type,resolver,resolver,this,expressions,new,array,list,expressions,collections,sort,this,expressions,this,content,type,resolver,resolver,null,resolver,new,requested,content,type,resolver,builder,build
ProducesRequestCondition -> private ProducesRequestCondition(Collection<ProduceMediaTypeExpression> expressions, 			RequestedContentTypeResolver resolver);1519859718;Private constructor with already parsed media type expressions.;private ProducesRequestCondition(Collection<ProduceMediaTypeExpression> expressions,_			RequestedContentTypeResolver resolver) {__		this.expressions = new ArrayList<>(expressions)__		Collections.sort(this.expressions)__		this.contentTypeResolver = (resolver != null ? resolver : new RequestedContentTypeResolverBuilder().build())__	};private,constructor,with,already,parsed,media,type,expressions;private,produces,request,condition,collection,produce,media,type,expression,expressions,requested,content,type,resolver,resolver,this,expressions,new,array,list,expressions,collections,sort,this,expressions,this,content,type,resolver,resolver,null,resolver,new,requested,content,type,resolver,builder,build
ProducesRequestCondition -> private ProducesRequestCondition(Collection<ProduceMediaTypeExpression> expressions, 			RequestedContentTypeResolver resolver);1519860149;Private constructor with already parsed media type expressions.;private ProducesRequestCondition(Collection<ProduceMediaTypeExpression> expressions,_			RequestedContentTypeResolver resolver) {__		this.expressions = new ArrayList<>(expressions)__		Collections.sort(this.expressions)__		this.contentTypeResolver = (resolver != null ? resolver : new RequestedContentTypeResolverBuilder().build())__	};private,constructor,with,already,parsed,media,type,expressions;private,produces,request,condition,collection,produce,media,type,expression,expressions,requested,content,type,resolver,resolver,this,expressions,new,array,list,expressions,collections,sort,this,expressions,this,content,type,resolver,resolver,null,resolver,new,requested,content,type,resolver,builder,build
ProducesRequestCondition -> private ProducesRequestCondition(Collection<ProduceMediaTypeExpression> expressions, 			RequestedContentTypeResolver resolver);1520528267;Private constructor with already parsed media type expressions.;private ProducesRequestCondition(Collection<ProduceMediaTypeExpression> expressions,_			RequestedContentTypeResolver resolver) {__		this.expressions = new ArrayList<>(expressions)__		Collections.sort(this.expressions)__		this.contentTypeResolver = (resolver != null ? resolver : new RequestedContentTypeResolverBuilder().build())__	};private,constructor,with,already,parsed,media,type,expressions;private,produces,request,condition,collection,produce,media,type,expression,expressions,requested,content,type,resolver,resolver,this,expressions,new,array,list,expressions,collections,sort,this,expressions,this,content,type,resolver,resolver,null,resolver,new,requested,content,type,resolver,builder,build
ProducesRequestCondition -> private ProducesRequestCondition(Collection<ProduceMediaTypeExpression> expressions, 			RequestedContentTypeResolver resolver);1521714971;Private constructor with already parsed media type expressions.;private ProducesRequestCondition(Collection<ProduceMediaTypeExpression> expressions,_			RequestedContentTypeResolver resolver) {__		this.expressions = new ArrayList<>(expressions)__		Collections.sort(this.expressions)__		this.contentTypeResolver = (resolver != null ? resolver : new RequestedContentTypeResolverBuilder().build())__	};private,constructor,with,already,parsed,media,type,expressions;private,produces,request,condition,collection,produce,media,type,expression,expressions,requested,content,type,resolver,resolver,this,expressions,new,array,list,expressions,collections,sort,this,expressions,this,content,type,resolver,resolver,null,resolver,new,requested,content,type,resolver,builder,build
ProducesRequestCondition -> private ProducesRequestCondition(Collection<ProduceMediaTypeExpression> expressions, 			RequestedContentTypeResolver resolver);1522184065;Private constructor with already parsed media type expressions.;private ProducesRequestCondition(Collection<ProduceMediaTypeExpression> expressions,_			RequestedContentTypeResolver resolver) {__		this.expressions = new ArrayList<>(expressions)__		Collections.sort(this.expressions)__		this.contentTypeResolver = (resolver != null ? resolver : new RequestedContentTypeResolverBuilder().build())__	};private,constructor,with,already,parsed,media,type,expressions;private,produces,request,condition,collection,produce,media,type,expression,expressions,requested,content,type,resolver,resolver,this,expressions,new,array,list,expressions,collections,sort,this,expressions,this,content,type,resolver,resolver,null,resolver,new,requested,content,type,resolver,builder,build
ProducesRequestCondition -> private ProducesRequestCondition(Collection<ProduceMediaTypeExpression> expressions, 			RequestedContentTypeResolver resolver);1524852408;Private constructor with already parsed media type expressions.;private ProducesRequestCondition(Collection<ProduceMediaTypeExpression> expressions,_			RequestedContentTypeResolver resolver) {__		this.expressions = new ArrayList<>(expressions)__		Collections.sort(this.expressions)__		this.contentTypeResolver = (resolver != null ? resolver : new RequestedContentTypeResolverBuilder().build())__	};private,constructor,with,already,parsed,media,type,expressions;private,produces,request,condition,collection,produce,media,type,expression,expressions,requested,content,type,resolver,resolver,this,expressions,new,array,list,expressions,collections,sort,this,expressions,this,content,type,resolver,resolver,null,resolver,new,requested,content,type,resolver,builder,build
ProducesRequestCondition -> private ProducesRequestCondition(Collection<ProduceMediaTypeExpression> expressions, 			RequestedContentTypeResolver resolver);1530174524;Private constructor with already parsed media type expressions.;private ProducesRequestCondition(Collection<ProduceMediaTypeExpression> expressions,_			RequestedContentTypeResolver resolver) {__		this.expressions = new ArrayList<>(expressions)__		Collections.sort(this.expressions)__		this.contentTypeResolver = (resolver != null ? resolver : new RequestedContentTypeResolverBuilder().build())__	};private,constructor,with,already,parsed,media,type,expressions;private,produces,request,condition,collection,produce,media,type,expression,expressions,requested,content,type,resolver,resolver,this,expressions,new,array,list,expressions,collections,sort,this,expressions,this,content,type,resolver,resolver,null,resolver,new,requested,content,type,resolver,builder,build
ProducesRequestCondition -> private ProducesRequestCondition(Collection<ProduceMediaTypeExpression> expressions, 			RequestedContentTypeResolver resolver);1530190293;Private constructor with already parsed media type expressions.;private ProducesRequestCondition(Collection<ProduceMediaTypeExpression> expressions,_			RequestedContentTypeResolver resolver) {__		this.expressions = new ArrayList<>(expressions)__		Collections.sort(this.expressions)__		this.contentTypeResolver = (resolver != null ? resolver : new RequestedContentTypeResolverBuilder().build())__	};private,constructor,with,already,parsed,media,type,expressions;private,produces,request,condition,collection,produce,media,type,expression,expressions,requested,content,type,resolver,resolver,this,expressions,new,array,list,expressions,collections,sort,this,expressions,this,content,type,resolver,resolver,null,resolver,new,requested,content,type,resolver,builder,build
ProducesRequestCondition -> private ProducesRequestCondition(Collection<ProduceMediaTypeExpression> expressions, 			RequestedContentTypeResolver resolver);1546457570;Private constructor with already parsed media type expressions.;private ProducesRequestCondition(Collection<ProduceMediaTypeExpression> expressions,_			RequestedContentTypeResolver resolver) {__		this.expressions = new ArrayList<>(expressions)__		Collections.sort(this.expressions)__		this.contentTypeResolver = (resolver != null ? resolver : new RequestedContentTypeResolverBuilder().build())__	};private,constructor,with,already,parsed,media,type,expressions;private,produces,request,condition,collection,produce,media,type,expression,expressions,requested,content,type,resolver,resolver,this,expressions,new,array,list,expressions,collections,sort,this,expressions,this,content,type,resolver,resolver,null,resolver,new,requested,content,type,resolver,builder,build
ProducesRequestCondition -> @Override 	public ProducesRequestCondition getMatchingCondition(ServerWebExchange exchange);1485986572;Checks if any of the contained media type expressions match the given_request 'Content-Type' header and returns an instance that is guaranteed_to contain matching expressions only. The match is performed via_{@link MediaType#isCompatibleWith(MediaType)}._@param exchange the current exchange_@return the same instance if there are no expressions__or a new condition with matching expressions__or {@code null} if no expressions match.;@Override_	public ProducesRequestCondition getMatchingCondition(ServerWebExchange exchange) {_		if (CorsUtils.isPreFlightRequest(exchange.getRequest())) {_			return PRE_FLIGHT_MATCH__		}_		if (isEmpty()) {_			return this__		}_		Set<ProduceMediaTypeExpression> result = new LinkedHashSet<>(expressions)__		for (Iterator<ProduceMediaTypeExpression> iterator = result.iterator()_ iterator.hasNext()_) {_			ProduceMediaTypeExpression expression = iterator.next()__			if (!expression.match(exchange)) {_				iterator.remove()__			}_		}_		return (result.isEmpty()) ? null : new ProducesRequestCondition(result, this.contentTypeResolver)__	};checks,if,any,of,the,contained,media,type,expressions,match,the,given,request,content,type,header,and,returns,an,instance,that,is,guaranteed,to,contain,matching,expressions,only,the,match,is,performed,via,link,media,type,is,compatible,with,media,type,param,exchange,the,current,exchange,return,the,same,instance,if,there,are,no,expressions,or,a,new,condition,with,matching,expressions,or,code,null,if,no,expressions,match;override,public,produces,request,condition,get,matching,condition,server,web,exchange,exchange,if,cors,utils,is,pre,flight,request,exchange,get,request,return,if,is,empty,return,this,set,produce,media,type,expression,result,new,linked,hash,set,expressions,for,iterator,produce,media,type,expression,iterator,result,iterator,iterator,has,next,produce,media,type,expression,expression,iterator,next,if,expression,match,exchange,iterator,remove,return,result,is,empty,null,new,produces,request,condition,result,this,content,type,resolver
ProducesRequestCondition -> @Override 	public ProducesRequestCondition getMatchingCondition(ServerWebExchange exchange);1497039338;Checks if any of the contained media type expressions match the given_request 'Content-Type' header and returns an instance that is guaranteed_to contain matching expressions only. The match is performed via_{@link MediaType#isCompatibleWith(MediaType)}._@param exchange the current exchange_@return the same instance if there are no expressions__or a new condition with matching expressions__or {@code null} if no expressions match.;@Override_	public ProducesRequestCondition getMatchingCondition(ServerWebExchange exchange) {_		if (CorsUtils.isPreFlightRequest(exchange.getRequest())) {_			return PRE_FLIGHT_MATCH__		}_		if (isEmpty()) {_			return this__		}_		Set<ProduceMediaTypeExpression> result = new LinkedHashSet<>(expressions)__		for (Iterator<ProduceMediaTypeExpression> iterator = result.iterator()_ iterator.hasNext()_) {_			ProduceMediaTypeExpression expression = iterator.next()__			if (!expression.match(exchange)) {_				iterator.remove()__			}_		}_		return (result.isEmpty()) ? null : new ProducesRequestCondition(result, this.contentTypeResolver)__	};checks,if,any,of,the,contained,media,type,expressions,match,the,given,request,content,type,header,and,returns,an,instance,that,is,guaranteed,to,contain,matching,expressions,only,the,match,is,performed,via,link,media,type,is,compatible,with,media,type,param,exchange,the,current,exchange,return,the,same,instance,if,there,are,no,expressions,or,a,new,condition,with,matching,expressions,or,code,null,if,no,expressions,match;override,public,produces,request,condition,get,matching,condition,server,web,exchange,exchange,if,cors,utils,is,pre,flight,request,exchange,get,request,return,if,is,empty,return,this,set,produce,media,type,expression,result,new,linked,hash,set,expressions,for,iterator,produce,media,type,expression,iterator,result,iterator,iterator,has,next,produce,media,type,expression,expression,iterator,next,if,expression,match,exchange,iterator,remove,return,result,is,empty,null,new,produces,request,condition,result,this,content,type,resolver
ProducesRequestCondition -> public ProducesRequestCondition(String[] produces, String[] headers, RequestedContentTypeResolver resolver);1485986572;Same as {@link #ProducesRequestCondition(String[], String[])} but also_accepting a {@link ContentNegotiationManager}._@param produces expressions with syntax defined by {@link RequestMapping#produces()}_@param headers expressions with syntax defined by {@link RequestMapping#headers()}_@param resolver used to determine requested content type;public ProducesRequestCondition(String[] produces, String[] headers, RequestedContentTypeResolver resolver) {_		this.expressions = new ArrayList<>(parseExpressions(produces, headers))__		Collections.sort(this.expressions)__		this.contentTypeResolver = (resolver != null ? resolver : new HeaderContentTypeResolver())__	};same,as,link,produces,request,condition,string,string,but,also,accepting,a,link,content,negotiation,manager,param,produces,expressions,with,syntax,defined,by,link,request,mapping,produces,param,headers,expressions,with,syntax,defined,by,link,request,mapping,headers,param,resolver,used,to,determine,requested,content,type;public,produces,request,condition,string,produces,string,headers,requested,content,type,resolver,resolver,this,expressions,new,array,list,parse,expressions,produces,headers,collections,sort,this,expressions,this,content,type,resolver,resolver,null,resolver,new,header,content,type,resolver
ProducesRequestCondition -> public ProducesRequestCondition(String[] produces, String[] headers, RequestedContentTypeResolver resolver);1497039338;Same as {@link #ProducesRequestCondition(String[], String[])} but also_accepting a {@link ContentNegotiationManager}._@param produces expressions with syntax defined by {@link RequestMapping#produces()}_@param headers expressions with syntax defined by {@link RequestMapping#headers()}_@param resolver used to determine requested content type;public ProducesRequestCondition(String[] produces, String[] headers, RequestedContentTypeResolver resolver) {_		this.expressions = new ArrayList<>(parseExpressions(produces, headers))__		Collections.sort(this.expressions)__		this.contentTypeResolver = (resolver != null ? resolver : new HeaderContentTypeResolver())__	};same,as,link,produces,request,condition,string,string,but,also,accepting,a,link,content,negotiation,manager,param,produces,expressions,with,syntax,defined,by,link,request,mapping,produces,param,headers,expressions,with,syntax,defined,by,link,request,mapping,headers,param,resolver,used,to,determine,requested,content,type;public,produces,request,condition,string,produces,string,headers,requested,content,type,resolver,resolver,this,expressions,new,array,list,parse,expressions,produces,headers,collections,sort,this,expressions,this,content,type,resolver,resolver,null,resolver,new,header,content,type,resolver
ProducesRequestCondition -> public ProducesRequestCondition(String[] produces, String[] headers, RequestedContentTypeResolver resolver);1502974979;Same as {@link #ProducesRequestCondition(String[], String[])} but also_accepting a {@link ContentNegotiationManager}._@param produces expressions with syntax defined by {@link RequestMapping#produces()}_@param headers expressions with syntax defined by {@link RequestMapping#headers()}_@param resolver used to determine requested content type;public ProducesRequestCondition(String[] produces, String[] headers, RequestedContentTypeResolver resolver) {_		this.expressions = new ArrayList<>(parseExpressions(produces, headers))__		Collections.sort(this.expressions)__		this.contentTypeResolver = (resolver != null ? resolver : new HeaderContentTypeResolver())__	};same,as,link,produces,request,condition,string,string,but,also,accepting,a,link,content,negotiation,manager,param,produces,expressions,with,syntax,defined,by,link,request,mapping,produces,param,headers,expressions,with,syntax,defined,by,link,request,mapping,headers,param,resolver,used,to,determine,requested,content,type;public,produces,request,condition,string,produces,string,headers,requested,content,type,resolver,resolver,this,expressions,new,array,list,parse,expressions,produces,headers,collections,sort,this,expressions,this,content,type,resolver,resolver,null,resolver,new,header,content,type,resolver
ProducesRequestCondition -> public ProducesRequestCondition(String[] produces, String[] headers, RequestedContentTypeResolver resolver);1519859718;Same as {@link #ProducesRequestCondition(String[], String[])} but also_accepting a {@link ContentNegotiationManager}._@param produces expressions with syntax defined by {@link RequestMapping#produces()}_@param headers expressions with syntax defined by {@link RequestMapping#headers()}_@param resolver used to determine requested content type;public ProducesRequestCondition(String[] produces, String[] headers, RequestedContentTypeResolver resolver) {_		this.expressions = new ArrayList<>(parseExpressions(produces, headers))__		Collections.sort(this.expressions)__		this.contentTypeResolver = (resolver != null ? resolver : new HeaderContentTypeResolver())__	};same,as,link,produces,request,condition,string,string,but,also,accepting,a,link,content,negotiation,manager,param,produces,expressions,with,syntax,defined,by,link,request,mapping,produces,param,headers,expressions,with,syntax,defined,by,link,request,mapping,headers,param,resolver,used,to,determine,requested,content,type;public,produces,request,condition,string,produces,string,headers,requested,content,type,resolver,resolver,this,expressions,new,array,list,parse,expressions,produces,headers,collections,sort,this,expressions,this,content,type,resolver,resolver,null,resolver,new,header,content,type,resolver
ProducesRequestCondition -> public ProducesRequestCondition(String[] produces, String[] headers, RequestedContentTypeResolver resolver);1519860149;Same as {@link #ProducesRequestCondition(String[], String[])} but also_accepting a {@link ContentNegotiationManager}._@param produces expressions with syntax defined by {@link RequestMapping#produces()}_@param headers expressions with syntax defined by {@link RequestMapping#headers()}_@param resolver used to determine requested content type;public ProducesRequestCondition(String[] produces, String[] headers, RequestedContentTypeResolver resolver) {_		this.expressions = new ArrayList<>(parseExpressions(produces, headers))__		Collections.sort(this.expressions)__		this.contentTypeResolver = (resolver != null ? resolver : new HeaderContentTypeResolver())__	};same,as,link,produces,request,condition,string,string,but,also,accepting,a,link,content,negotiation,manager,param,produces,expressions,with,syntax,defined,by,link,request,mapping,produces,param,headers,expressions,with,syntax,defined,by,link,request,mapping,headers,param,resolver,used,to,determine,requested,content,type;public,produces,request,condition,string,produces,string,headers,requested,content,type,resolver,resolver,this,expressions,new,array,list,parse,expressions,produces,headers,collections,sort,this,expressions,this,content,type,resolver,resolver,null,resolver,new,header,content,type,resolver
ProducesRequestCondition -> public ProducesRequestCondition(String[] produces, String[] headers, RequestedContentTypeResolver resolver);1520528267;Same as {@link #ProducesRequestCondition(String[], String[])} but also_accepting a {@link ContentNegotiationManager}._@param produces expressions with syntax defined by {@link RequestMapping#produces()}_@param headers expressions with syntax defined by {@link RequestMapping#headers()}_@param resolver used to determine requested content type;public ProducesRequestCondition(String[] produces, String[] headers, RequestedContentTypeResolver resolver) {_		this.expressions = new ArrayList<>(parseExpressions(produces, headers))__		Collections.sort(this.expressions)__		this.contentTypeResolver = (resolver != null ? resolver : new HeaderContentTypeResolver())__	};same,as,link,produces,request,condition,string,string,but,also,accepting,a,link,content,negotiation,manager,param,produces,expressions,with,syntax,defined,by,link,request,mapping,produces,param,headers,expressions,with,syntax,defined,by,link,request,mapping,headers,param,resolver,used,to,determine,requested,content,type;public,produces,request,condition,string,produces,string,headers,requested,content,type,resolver,resolver,this,expressions,new,array,list,parse,expressions,produces,headers,collections,sort,this,expressions,this,content,type,resolver,resolver,null,resolver,new,header,content,type,resolver
ProducesRequestCondition -> public ProducesRequestCondition(String[] produces, String[] headers, RequestedContentTypeResolver resolver);1521714971;Same as {@link #ProducesRequestCondition(String[], String[])} but also_accepting a {@link ContentNegotiationManager}._@param produces expressions with syntax defined by {@link RequestMapping#produces()}_@param headers expressions with syntax defined by {@link RequestMapping#headers()}_@param resolver used to determine requested content type;public ProducesRequestCondition(String[] produces, String[] headers, RequestedContentTypeResolver resolver) {_		this.expressions = new ArrayList<>(parseExpressions(produces, headers))__		Collections.sort(this.expressions)__		this.contentTypeResolver = (resolver != null ? resolver : new HeaderContentTypeResolver())__	};same,as,link,produces,request,condition,string,string,but,also,accepting,a,link,content,negotiation,manager,param,produces,expressions,with,syntax,defined,by,link,request,mapping,produces,param,headers,expressions,with,syntax,defined,by,link,request,mapping,headers,param,resolver,used,to,determine,requested,content,type;public,produces,request,condition,string,produces,string,headers,requested,content,type,resolver,resolver,this,expressions,new,array,list,parse,expressions,produces,headers,collections,sort,this,expressions,this,content,type,resolver,resolver,null,resolver,new,header,content,type,resolver
ProducesRequestCondition -> public ProducesRequestCondition(String[] produces, String[] headers, RequestedContentTypeResolver resolver);1522184065;Same as {@link #ProducesRequestCondition(String[], String[])} but also_accepting a {@link ContentNegotiationManager}._@param produces expressions with syntax defined by {@link RequestMapping#produces()}_@param headers expressions with syntax defined by {@link RequestMapping#headers()}_@param resolver used to determine requested content type;public ProducesRequestCondition(String[] produces, String[] headers, RequestedContentTypeResolver resolver) {_		this.expressions = new ArrayList<>(parseExpressions(produces, headers))__		Collections.sort(this.expressions)__		this.contentTypeResolver = (resolver != null ? resolver : new HeaderContentTypeResolver())__	};same,as,link,produces,request,condition,string,string,but,also,accepting,a,link,content,negotiation,manager,param,produces,expressions,with,syntax,defined,by,link,request,mapping,produces,param,headers,expressions,with,syntax,defined,by,link,request,mapping,headers,param,resolver,used,to,determine,requested,content,type;public,produces,request,condition,string,produces,string,headers,requested,content,type,resolver,resolver,this,expressions,new,array,list,parse,expressions,produces,headers,collections,sort,this,expressions,this,content,type,resolver,resolver,null,resolver,new,header,content,type,resolver
ProducesRequestCondition -> public ProducesRequestCondition(String[] produces, String[] headers, RequestedContentTypeResolver resolver);1524852408;Same as {@link #ProducesRequestCondition(String[], String[])} but also_accepting a {@link ContentNegotiationManager}._@param produces expressions with syntax defined by {@link RequestMapping#produces()}_@param headers expressions with syntax defined by {@link RequestMapping#headers()}_@param resolver used to determine requested content type;public ProducesRequestCondition(String[] produces, String[] headers, RequestedContentTypeResolver resolver) {_		this.expressions = new ArrayList<>(parseExpressions(produces, headers))__		Collections.sort(this.expressions)__		this.contentTypeResolver = (resolver != null ? resolver : new HeaderContentTypeResolver())__	};same,as,link,produces,request,condition,string,string,but,also,accepting,a,link,content,negotiation,manager,param,produces,expressions,with,syntax,defined,by,link,request,mapping,produces,param,headers,expressions,with,syntax,defined,by,link,request,mapping,headers,param,resolver,used,to,determine,requested,content,type;public,produces,request,condition,string,produces,string,headers,requested,content,type,resolver,resolver,this,expressions,new,array,list,parse,expressions,produces,headers,collections,sort,this,expressions,this,content,type,resolver,resolver,null,resolver,new,header,content,type,resolver
ProducesRequestCondition -> public ProducesRequestCondition(String[] produces, String[] headers, RequestedContentTypeResolver resolver);1530174524;Same as {@link #ProducesRequestCondition(String[], String[])} but also_accepting a {@link ContentNegotiationManager}._@param produces expressions with syntax defined by {@link RequestMapping#produces()}_@param headers expressions with syntax defined by {@link RequestMapping#headers()}_@param resolver used to determine requested content type;public ProducesRequestCondition(String[] produces, String[] headers, RequestedContentTypeResolver resolver) {_		this.expressions = new ArrayList<>(parseExpressions(produces, headers))__		Collections.sort(this.expressions)__		this.contentTypeResolver = (resolver != null ? resolver : new HeaderContentTypeResolver())__	};same,as,link,produces,request,condition,string,string,but,also,accepting,a,link,content,negotiation,manager,param,produces,expressions,with,syntax,defined,by,link,request,mapping,produces,param,headers,expressions,with,syntax,defined,by,link,request,mapping,headers,param,resolver,used,to,determine,requested,content,type;public,produces,request,condition,string,produces,string,headers,requested,content,type,resolver,resolver,this,expressions,new,array,list,parse,expressions,produces,headers,collections,sort,this,expressions,this,content,type,resolver,resolver,null,resolver,new,header,content,type,resolver
ProducesRequestCondition -> public ProducesRequestCondition(String[] produces, String[] headers, RequestedContentTypeResolver resolver);1530190293;Same as {@link #ProducesRequestCondition(String[], String[])} but also_accepting a {@link ContentNegotiationManager}._@param produces expressions with syntax defined by {@link RequestMapping#produces()}_@param headers expressions with syntax defined by {@link RequestMapping#headers()}_@param resolver used to determine requested content type;public ProducesRequestCondition(String[] produces, String[] headers, RequestedContentTypeResolver resolver) {_		this.expressions = new ArrayList<>(parseExpressions(produces, headers))__		Collections.sort(this.expressions)__		this.contentTypeResolver = (resolver != null ? resolver : new HeaderContentTypeResolver())__	};same,as,link,produces,request,condition,string,string,but,also,accepting,a,link,content,negotiation,manager,param,produces,expressions,with,syntax,defined,by,link,request,mapping,produces,param,headers,expressions,with,syntax,defined,by,link,request,mapping,headers,param,resolver,used,to,determine,requested,content,type;public,produces,request,condition,string,produces,string,headers,requested,content,type,resolver,resolver,this,expressions,new,array,list,parse,expressions,produces,headers,collections,sort,this,expressions,this,content,type,resolver,resolver,null,resolver,new,header,content,type,resolver
ProducesRequestCondition -> public ProducesRequestCondition(String[] produces, String[] headers, RequestedContentTypeResolver resolver);1546457570;Same as {@link #ProducesRequestCondition(String[], String[])} but also_accepting a {@link ContentNegotiationManager}._@param produces expressions with syntax defined by {@link RequestMapping#produces()}_@param headers expressions with syntax defined by {@link RequestMapping#headers()}_@param resolver used to determine requested content type;public ProducesRequestCondition(String[] produces, String[] headers, RequestedContentTypeResolver resolver) {_		this.expressions = new ArrayList<>(parseExpressions(produces, headers))__		Collections.sort(this.expressions)__		this.contentTypeResolver = (resolver != null ? resolver : new HeaderContentTypeResolver())__	};same,as,link,produces,request,condition,string,string,but,also,accepting,a,link,content,negotiation,manager,param,produces,expressions,with,syntax,defined,by,link,request,mapping,produces,param,headers,expressions,with,syntax,defined,by,link,request,mapping,headers,param,resolver,used,to,determine,requested,content,type;public,produces,request,condition,string,produces,string,headers,requested,content,type,resolver,resolver,this,expressions,new,array,list,parse,expressions,produces,headers,collections,sort,this,expressions,this,content,type,resolver,resolver,null,resolver,new,header,content,type,resolver
ProducesRequestCondition -> @Override 	public boolean isEmpty();1519859718;Whether the condition has any media type expressions.;@Override_	public boolean isEmpty() {_		return this.expressions.isEmpty()__	};whether,the,condition,has,any,media,type,expressions;override,public,boolean,is,empty,return,this,expressions,is,empty
ProducesRequestCondition -> @Override 	public boolean isEmpty();1519860149;Whether the condition has any media type expressions.;@Override_	public boolean isEmpty() {_		return this.expressions.isEmpty()__	};whether,the,condition,has,any,media,type,expressions;override,public,boolean,is,empty,return,this,expressions,is,empty
ProducesRequestCondition -> @Override 	public boolean isEmpty();1520528267;Whether the condition has any media type expressions.;@Override_	public boolean isEmpty() {_		return this.expressions.isEmpty()__	};whether,the,condition,has,any,media,type,expressions;override,public,boolean,is,empty,return,this,expressions,is,empty
ProducesRequestCondition -> @Override 	public boolean isEmpty();1521714971;Whether the condition has any media type expressions.;@Override_	public boolean isEmpty() {_		return this.expressions.isEmpty()__	};whether,the,condition,has,any,media,type,expressions;override,public,boolean,is,empty,return,this,expressions,is,empty
ProducesRequestCondition -> @Override 	public boolean isEmpty();1522184065;Whether the condition has any media type expressions.;@Override_	public boolean isEmpty() {_		return this.expressions.isEmpty()__	};whether,the,condition,has,any,media,type,expressions;override,public,boolean,is,empty,return,this,expressions,is,empty
ProducesRequestCondition -> @Override 	public boolean isEmpty();1524852408;Whether the condition has any media type expressions.;@Override_	public boolean isEmpty() {_		return this.expressions.isEmpty()__	};whether,the,condition,has,any,media,type,expressions;override,public,boolean,is,empty,return,this,expressions,is,empty
ProducesRequestCondition -> @Override 	public boolean isEmpty();1530174524;Whether the condition has any media type expressions.;@Override_	public boolean isEmpty() {_		return this.expressions.isEmpty()__	};whether,the,condition,has,any,media,type,expressions;override,public,boolean,is,empty,return,this,expressions,is,empty
ProducesRequestCondition -> @Override 	public boolean isEmpty();1530190293;Whether the condition has any media type expressions.;@Override_	public boolean isEmpty() {_		return this.expressions.isEmpty()__	};whether,the,condition,has,any,media,type,expressions;override,public,boolean,is,empty,return,this,expressions,is,empty
ProducesRequestCondition -> @Override 	public boolean isEmpty();1546457570;Whether the condition has any media type expressions.;@Override_	public boolean isEmpty() {_		return this.expressions.isEmpty()__	};whether,the,condition,has,any,media,type,expressions;override,public,boolean,is,empty,return,this,expressions,is,empty
ProducesRequestCondition -> @Override 	public int compareTo(ProducesRequestCondition other, ServerWebExchange exchange);1485986572;Compares this and another "produces" condition as follows:_<ol>_<li>Sort 'Accept' header media types by quality value via_{@link MediaType#sortByQualityValue(List)} and iterate the list._<li>Get the first index of matching media types in each "produces"_condition first matching with {@link MediaType#equals(Object)} and_then with {@link MediaType#includes(MediaType)}._<li>If a lower index is found, the condition at that index wins._<li>If both indexes are equal, the media types at the index are_compared further with {@link MediaType#SPECIFICITY_COMPARATOR}._</ol>_<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(ServerWebExchange)} and each instance_contains the matching producible media type expression only or_is otherwise empty.;@Override_	public int compareTo(ProducesRequestCondition other, ServerWebExchange exchange) {_		try {_			List<MediaType> acceptedMediaTypes = getAcceptedMediaTypes(exchange)__			for (MediaType acceptedMediaType : acceptedMediaTypes) {_				int thisIndex = this.indexOfEqualMediaType(acceptedMediaType)__				int otherIndex = other.indexOfEqualMediaType(acceptedMediaType)__				int result = compareMatchingMediaTypes(this, thisIndex, other, otherIndex)__				if (result != 0) {_					return result__				}_				thisIndex = this.indexOfIncludedMediaType(acceptedMediaType)__				otherIndex = other.indexOfIncludedMediaType(acceptedMediaType)__				result = compareMatchingMediaTypes(this, thisIndex, other, otherIndex)__				if (result != 0) {_					return result__				}_			}_			return 0__		}_		catch (NotAcceptableStatusException ex) {_			_			throw new IllegalStateException("Cannot compare without having any requested media types", ex)__		}_	};compares,this,and,another,produces,condition,as,follows,ol,li,sort,accept,header,media,types,by,quality,value,via,link,media,type,sort,by,quality,value,list,and,iterate,the,list,li,get,the,first,index,of,matching,media,types,in,each,produces,condition,first,matching,with,link,media,type,equals,object,and,then,with,link,media,type,includes,media,type,li,if,a,lower,index,is,found,the,condition,at,that,index,wins,li,if,both,indexes,are,equal,the,media,types,at,the,index,are,compared,further,with,link,media,type,ol,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,server,web,exchange,and,each,instance,contains,the,matching,producible,media,type,expression,only,or,is,otherwise,empty;override,public,int,compare,to,produces,request,condition,other,server,web,exchange,exchange,try,list,media,type,accepted,media,types,get,accepted,media,types,exchange,for,media,type,accepted,media,type,accepted,media,types,int,this,index,this,index,of,equal,media,type,accepted,media,type,int,other,index,other,index,of,equal,media,type,accepted,media,type,int,result,compare,matching,media,types,this,this,index,other,other,index,if,result,0,return,result,this,index,this,index,of,included,media,type,accepted,media,type,other,index,other,index,of,included,media,type,accepted,media,type,result,compare,matching,media,types,this,this,index,other,other,index,if,result,0,return,result,return,0,catch,not,acceptable,status,exception,ex,throw,new,illegal,state,exception,cannot,compare,without,having,any,requested,media,types,ex
ProducesRequestCondition -> @Override 	public int compareTo(ProducesRequestCondition other, ServerWebExchange exchange);1497039338;Compares this and another "produces" condition as follows:_<ol>_<li>Sort 'Accept' header media types by quality value via_{@link MediaType#sortByQualityValue(List)} and iterate the list._<li>Get the first index of matching media types in each "produces"_condition first matching with {@link MediaType#equals(Object)} and_then with {@link MediaType#includes(MediaType)}._<li>If a lower index is found, the condition at that index wins._<li>If both indexes are equal, the media types at the index are_compared further with {@link MediaType#SPECIFICITY_COMPARATOR}._</ol>_<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(ServerWebExchange)} and each instance_contains the matching producible media type expression only or_is otherwise empty.;@Override_	public int compareTo(ProducesRequestCondition other, ServerWebExchange exchange) {_		try {_			List<MediaType> acceptedMediaTypes = getAcceptedMediaTypes(exchange)__			for (MediaType acceptedMediaType : acceptedMediaTypes) {_				int thisIndex = this.indexOfEqualMediaType(acceptedMediaType)__				int otherIndex = other.indexOfEqualMediaType(acceptedMediaType)__				int result = compareMatchingMediaTypes(this, thisIndex, other, otherIndex)__				if (result != 0) {_					return result__				}_				thisIndex = this.indexOfIncludedMediaType(acceptedMediaType)__				otherIndex = other.indexOfIncludedMediaType(acceptedMediaType)__				result = compareMatchingMediaTypes(this, thisIndex, other, otherIndex)__				if (result != 0) {_					return result__				}_			}_			return 0__		}_		catch (NotAcceptableStatusException ex) {_			_			throw new IllegalStateException("Cannot compare without having any requested media types", ex)__		}_	};compares,this,and,another,produces,condition,as,follows,ol,li,sort,accept,header,media,types,by,quality,value,via,link,media,type,sort,by,quality,value,list,and,iterate,the,list,li,get,the,first,index,of,matching,media,types,in,each,produces,condition,first,matching,with,link,media,type,equals,object,and,then,with,link,media,type,includes,media,type,li,if,a,lower,index,is,found,the,condition,at,that,index,wins,li,if,both,indexes,are,equal,the,media,types,at,the,index,are,compared,further,with,link,media,type,ol,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,server,web,exchange,and,each,instance,contains,the,matching,producible,media,type,expression,only,or,is,otherwise,empty;override,public,int,compare,to,produces,request,condition,other,server,web,exchange,exchange,try,list,media,type,accepted,media,types,get,accepted,media,types,exchange,for,media,type,accepted,media,type,accepted,media,types,int,this,index,this,index,of,equal,media,type,accepted,media,type,int,other,index,other,index,of,equal,media,type,accepted,media,type,int,result,compare,matching,media,types,this,this,index,other,other,index,if,result,0,return,result,this,index,this,index,of,included,media,type,accepted,media,type,other,index,other,index,of,included,media,type,accepted,media,type,result,compare,matching,media,types,this,this,index,other,other,index,if,result,0,return,result,return,0,catch,not,acceptable,status,exception,ex,throw,new,illegal,state,exception,cannot,compare,without,having,any,requested,media,types,ex
ProducesRequestCondition -> @Override 	public int compareTo(ProducesRequestCondition other, ServerWebExchange exchange);1502974979;Compares this and another "produces" condition as follows:_<ol>_<li>Sort 'Accept' header media types by quality value via_{@link MediaType#sortByQualityValue(List)} and iterate the list._<li>Get the first index of matching media types in each "produces"_condition first matching with {@link MediaType#equals(Object)} and_then with {@link MediaType#includes(MediaType)}._<li>If a lower index is found, the condition at that index wins._<li>If both indexes are equal, the media types at the index are_compared further with {@link MediaType#SPECIFICITY_COMPARATOR}._</ol>_<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(ServerWebExchange)} and each instance_contains the matching producible media type expression only or_is otherwise empty.;@Override_	public int compareTo(ProducesRequestCondition other, ServerWebExchange exchange) {_		try {_			List<MediaType> acceptedMediaTypes = getAcceptedMediaTypes(exchange)__			for (MediaType acceptedMediaType : acceptedMediaTypes) {_				int thisIndex = this.indexOfEqualMediaType(acceptedMediaType)__				int otherIndex = other.indexOfEqualMediaType(acceptedMediaType)__				int result = compareMatchingMediaTypes(this, thisIndex, other, otherIndex)__				if (result != 0) {_					return result__				}_				thisIndex = this.indexOfIncludedMediaType(acceptedMediaType)__				otherIndex = other.indexOfIncludedMediaType(acceptedMediaType)__				result = compareMatchingMediaTypes(this, thisIndex, other, otherIndex)__				if (result != 0) {_					return result__				}_			}_			return 0__		}_		catch (NotAcceptableStatusException ex) {_			_			throw new IllegalStateException("Cannot compare without having any requested media types", ex)__		}_	};compares,this,and,another,produces,condition,as,follows,ol,li,sort,accept,header,media,types,by,quality,value,via,link,media,type,sort,by,quality,value,list,and,iterate,the,list,li,get,the,first,index,of,matching,media,types,in,each,produces,condition,first,matching,with,link,media,type,equals,object,and,then,with,link,media,type,includes,media,type,li,if,a,lower,index,is,found,the,condition,at,that,index,wins,li,if,both,indexes,are,equal,the,media,types,at,the,index,are,compared,further,with,link,media,type,ol,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,server,web,exchange,and,each,instance,contains,the,matching,producible,media,type,expression,only,or,is,otherwise,empty;override,public,int,compare,to,produces,request,condition,other,server,web,exchange,exchange,try,list,media,type,accepted,media,types,get,accepted,media,types,exchange,for,media,type,accepted,media,type,accepted,media,types,int,this,index,this,index,of,equal,media,type,accepted,media,type,int,other,index,other,index,of,equal,media,type,accepted,media,type,int,result,compare,matching,media,types,this,this,index,other,other,index,if,result,0,return,result,this,index,this,index,of,included,media,type,accepted,media,type,other,index,other,index,of,included,media,type,accepted,media,type,result,compare,matching,media,types,this,this,index,other,other,index,if,result,0,return,result,return,0,catch,not,acceptable,status,exception,ex,throw,new,illegal,state,exception,cannot,compare,without,having,any,requested,media,types,ex
ProducesRequestCondition -> @Override 	public int compareTo(ProducesRequestCondition other, ServerWebExchange exchange);1519859718;Compares this and another "produces" condition as follows:_<ol>_<li>Sort 'Accept' header media types by quality value via_{@link MediaType#sortByQualityValue(List)} and iterate the list._<li>Get the first index of matching media types in each "produces"_condition first matching with {@link MediaType#equals(Object)} and_then with {@link MediaType#includes(MediaType)}._<li>If a lower index is found, the condition at that index wins._<li>If both indexes are equal, the media types at the index are_compared further with {@link MediaType#SPECIFICITY_COMPARATOR}._</ol>_<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(ServerWebExchange)} and each instance_contains the matching producible media type expression only or_is otherwise empty.;@Override_	public int compareTo(ProducesRequestCondition other, ServerWebExchange exchange) {_		try {_			List<MediaType> acceptedMediaTypes = getAcceptedMediaTypes(exchange)__			for (MediaType acceptedMediaType : acceptedMediaTypes) {_				int thisIndex = this.indexOfEqualMediaType(acceptedMediaType)__				int otherIndex = other.indexOfEqualMediaType(acceptedMediaType)__				int result = compareMatchingMediaTypes(this, thisIndex, other, otherIndex)__				if (result != 0) {_					return result__				}_				thisIndex = this.indexOfIncludedMediaType(acceptedMediaType)__				otherIndex = other.indexOfIncludedMediaType(acceptedMediaType)__				result = compareMatchingMediaTypes(this, thisIndex, other, otherIndex)__				if (result != 0) {_					return result__				}_			}_			return 0__		}_		catch (NotAcceptableStatusException ex) {_			_			throw new IllegalStateException("Cannot compare without having any requested media types", ex)__		}_	};compares,this,and,another,produces,condition,as,follows,ol,li,sort,accept,header,media,types,by,quality,value,via,link,media,type,sort,by,quality,value,list,and,iterate,the,list,li,get,the,first,index,of,matching,media,types,in,each,produces,condition,first,matching,with,link,media,type,equals,object,and,then,with,link,media,type,includes,media,type,li,if,a,lower,index,is,found,the,condition,at,that,index,wins,li,if,both,indexes,are,equal,the,media,types,at,the,index,are,compared,further,with,link,media,type,ol,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,server,web,exchange,and,each,instance,contains,the,matching,producible,media,type,expression,only,or,is,otherwise,empty;override,public,int,compare,to,produces,request,condition,other,server,web,exchange,exchange,try,list,media,type,accepted,media,types,get,accepted,media,types,exchange,for,media,type,accepted,media,type,accepted,media,types,int,this,index,this,index,of,equal,media,type,accepted,media,type,int,other,index,other,index,of,equal,media,type,accepted,media,type,int,result,compare,matching,media,types,this,this,index,other,other,index,if,result,0,return,result,this,index,this,index,of,included,media,type,accepted,media,type,other,index,other,index,of,included,media,type,accepted,media,type,result,compare,matching,media,types,this,this,index,other,other,index,if,result,0,return,result,return,0,catch,not,acceptable,status,exception,ex,throw,new,illegal,state,exception,cannot,compare,without,having,any,requested,media,types,ex
ProducesRequestCondition -> @Override 	public int compareTo(ProducesRequestCondition other, ServerWebExchange exchange);1519860149;Compares this and another "produces" condition as follows:_<ol>_<li>Sort 'Accept' header media types by quality value via_{@link MediaType#sortByQualityValue(List)} and iterate the list._<li>Get the first index of matching media types in each "produces"_condition first matching with {@link MediaType#equals(Object)} and_then with {@link MediaType#includes(MediaType)}._<li>If a lower index is found, the condition at that index wins._<li>If both indexes are equal, the media types at the index are_compared further with {@link MediaType#SPECIFICITY_COMPARATOR}._</ol>_<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(ServerWebExchange)} and each instance_contains the matching producible media type expression only or_is otherwise empty.;@Override_	public int compareTo(ProducesRequestCondition other, ServerWebExchange exchange) {_		try {_			List<MediaType> acceptedMediaTypes = getAcceptedMediaTypes(exchange)__			for (MediaType acceptedMediaType : acceptedMediaTypes) {_				int thisIndex = this.indexOfEqualMediaType(acceptedMediaType)__				int otherIndex = other.indexOfEqualMediaType(acceptedMediaType)__				int result = compareMatchingMediaTypes(this, thisIndex, other, otherIndex)__				if (result != 0) {_					return result__				}_				thisIndex = this.indexOfIncludedMediaType(acceptedMediaType)__				otherIndex = other.indexOfIncludedMediaType(acceptedMediaType)__				result = compareMatchingMediaTypes(this, thisIndex, other, otherIndex)__				if (result != 0) {_					return result__				}_			}_			return 0__		}_		catch (NotAcceptableStatusException ex) {_			_			throw new IllegalStateException("Cannot compare without having any requested media types", ex)__		}_	};compares,this,and,another,produces,condition,as,follows,ol,li,sort,accept,header,media,types,by,quality,value,via,link,media,type,sort,by,quality,value,list,and,iterate,the,list,li,get,the,first,index,of,matching,media,types,in,each,produces,condition,first,matching,with,link,media,type,equals,object,and,then,with,link,media,type,includes,media,type,li,if,a,lower,index,is,found,the,condition,at,that,index,wins,li,if,both,indexes,are,equal,the,media,types,at,the,index,are,compared,further,with,link,media,type,ol,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,server,web,exchange,and,each,instance,contains,the,matching,producible,media,type,expression,only,or,is,otherwise,empty;override,public,int,compare,to,produces,request,condition,other,server,web,exchange,exchange,try,list,media,type,accepted,media,types,get,accepted,media,types,exchange,for,media,type,accepted,media,type,accepted,media,types,int,this,index,this,index,of,equal,media,type,accepted,media,type,int,other,index,other,index,of,equal,media,type,accepted,media,type,int,result,compare,matching,media,types,this,this,index,other,other,index,if,result,0,return,result,this,index,this,index,of,included,media,type,accepted,media,type,other,index,other,index,of,included,media,type,accepted,media,type,result,compare,matching,media,types,this,this,index,other,other,index,if,result,0,return,result,return,0,catch,not,acceptable,status,exception,ex,throw,new,illegal,state,exception,cannot,compare,without,having,any,requested,media,types,ex
ProducesRequestCondition -> @Override 	public int compareTo(ProducesRequestCondition other, ServerWebExchange exchange);1520528267;Compares this and another "produces" condition as follows:_<ol>_<li>Sort 'Accept' header media types by quality value via_{@link MediaType#sortByQualityValue(List)} and iterate the list._<li>Get the first index of matching media types in each "produces"_condition first matching with {@link MediaType#equals(Object)} and_then with {@link MediaType#includes(MediaType)}._<li>If a lower index is found, the condition at that index wins._<li>If both indexes are equal, the media types at the index are_compared further with {@link MediaType#SPECIFICITY_COMPARATOR}._</ol>_<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(ServerWebExchange)} and each instance_contains the matching producible media type expression only or_is otherwise empty.;@Override_	public int compareTo(ProducesRequestCondition other, ServerWebExchange exchange) {_		try {_			List<MediaType> acceptedMediaTypes = getAcceptedMediaTypes(exchange)__			for (MediaType acceptedMediaType : acceptedMediaTypes) {_				int thisIndex = this.indexOfEqualMediaType(acceptedMediaType)__				int otherIndex = other.indexOfEqualMediaType(acceptedMediaType)__				int result = compareMatchingMediaTypes(this, thisIndex, other, otherIndex)__				if (result != 0) {_					return result__				}_				thisIndex = this.indexOfIncludedMediaType(acceptedMediaType)__				otherIndex = other.indexOfIncludedMediaType(acceptedMediaType)__				result = compareMatchingMediaTypes(this, thisIndex, other, otherIndex)__				if (result != 0) {_					return result__				}_			}_			return 0__		}_		catch (NotAcceptableStatusException ex) {_			_			throw new IllegalStateException("Cannot compare without having any requested media types", ex)__		}_	};compares,this,and,another,produces,condition,as,follows,ol,li,sort,accept,header,media,types,by,quality,value,via,link,media,type,sort,by,quality,value,list,and,iterate,the,list,li,get,the,first,index,of,matching,media,types,in,each,produces,condition,first,matching,with,link,media,type,equals,object,and,then,with,link,media,type,includes,media,type,li,if,a,lower,index,is,found,the,condition,at,that,index,wins,li,if,both,indexes,are,equal,the,media,types,at,the,index,are,compared,further,with,link,media,type,ol,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,server,web,exchange,and,each,instance,contains,the,matching,producible,media,type,expression,only,or,is,otherwise,empty;override,public,int,compare,to,produces,request,condition,other,server,web,exchange,exchange,try,list,media,type,accepted,media,types,get,accepted,media,types,exchange,for,media,type,accepted,media,type,accepted,media,types,int,this,index,this,index,of,equal,media,type,accepted,media,type,int,other,index,other,index,of,equal,media,type,accepted,media,type,int,result,compare,matching,media,types,this,this,index,other,other,index,if,result,0,return,result,this,index,this,index,of,included,media,type,accepted,media,type,other,index,other,index,of,included,media,type,accepted,media,type,result,compare,matching,media,types,this,this,index,other,other,index,if,result,0,return,result,return,0,catch,not,acceptable,status,exception,ex,throw,new,illegal,state,exception,cannot,compare,without,having,any,requested,media,types,ex
ProducesRequestCondition -> @Override 	public int compareTo(ProducesRequestCondition other, ServerWebExchange exchange);1521714971;Compares this and another "produces" condition as follows:_<ol>_<li>Sort 'Accept' header media types by quality value via_{@link MediaType#sortByQualityValue(List)} and iterate the list._<li>Get the first index of matching media types in each "produces"_condition first matching with {@link MediaType#equals(Object)} and_then with {@link MediaType#includes(MediaType)}._<li>If a lower index is found, the condition at that index wins._<li>If both indexes are equal, the media types at the index are_compared further with {@link MediaType#SPECIFICITY_COMPARATOR}._</ol>_<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(ServerWebExchange)} and each instance_contains the matching producible media type expression only or_is otherwise empty.;@Override_	public int compareTo(ProducesRequestCondition other, ServerWebExchange exchange) {_		try {_			List<MediaType> acceptedMediaTypes = getAcceptedMediaTypes(exchange)__			for (MediaType acceptedMediaType : acceptedMediaTypes) {_				int thisIndex = this.indexOfEqualMediaType(acceptedMediaType)__				int otherIndex = other.indexOfEqualMediaType(acceptedMediaType)__				int result = compareMatchingMediaTypes(this, thisIndex, other, otherIndex)__				if (result != 0) {_					return result__				}_				thisIndex = this.indexOfIncludedMediaType(acceptedMediaType)__				otherIndex = other.indexOfIncludedMediaType(acceptedMediaType)__				result = compareMatchingMediaTypes(this, thisIndex, other, otherIndex)__				if (result != 0) {_					return result__				}_			}_			return 0__		}_		catch (NotAcceptableStatusException ex) {_			_			throw new IllegalStateException("Cannot compare without having any requested media types", ex)__		}_	};compares,this,and,another,produces,condition,as,follows,ol,li,sort,accept,header,media,types,by,quality,value,via,link,media,type,sort,by,quality,value,list,and,iterate,the,list,li,get,the,first,index,of,matching,media,types,in,each,produces,condition,first,matching,with,link,media,type,equals,object,and,then,with,link,media,type,includes,media,type,li,if,a,lower,index,is,found,the,condition,at,that,index,wins,li,if,both,indexes,are,equal,the,media,types,at,the,index,are,compared,further,with,link,media,type,ol,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,server,web,exchange,and,each,instance,contains,the,matching,producible,media,type,expression,only,or,is,otherwise,empty;override,public,int,compare,to,produces,request,condition,other,server,web,exchange,exchange,try,list,media,type,accepted,media,types,get,accepted,media,types,exchange,for,media,type,accepted,media,type,accepted,media,types,int,this,index,this,index,of,equal,media,type,accepted,media,type,int,other,index,other,index,of,equal,media,type,accepted,media,type,int,result,compare,matching,media,types,this,this,index,other,other,index,if,result,0,return,result,this,index,this,index,of,included,media,type,accepted,media,type,other,index,other,index,of,included,media,type,accepted,media,type,result,compare,matching,media,types,this,this,index,other,other,index,if,result,0,return,result,return,0,catch,not,acceptable,status,exception,ex,throw,new,illegal,state,exception,cannot,compare,without,having,any,requested,media,types,ex
ProducesRequestCondition -> @Override 	public int compareTo(ProducesRequestCondition other, ServerWebExchange exchange);1522184065;Compares this and another "produces" condition as follows:_<ol>_<li>Sort 'Accept' header media types by quality value via_{@link MediaType#sortByQualityValue(List)} and iterate the list._<li>Get the first index of matching media types in each "produces"_condition first matching with {@link MediaType#equals(Object)} and_then with {@link MediaType#includes(MediaType)}._<li>If a lower index is found, the condition at that index wins._<li>If both indexes are equal, the media types at the index are_compared further with {@link MediaType#SPECIFICITY_COMPARATOR}._</ol>_<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(ServerWebExchange)} and each instance_contains the matching producible media type expression only or_is otherwise empty.;@Override_	public int compareTo(ProducesRequestCondition other, ServerWebExchange exchange) {_		try {_			List<MediaType> acceptedMediaTypes = getAcceptedMediaTypes(exchange)__			for (MediaType acceptedMediaType : acceptedMediaTypes) {_				int thisIndex = this.indexOfEqualMediaType(acceptedMediaType)__				int otherIndex = other.indexOfEqualMediaType(acceptedMediaType)__				int result = compareMatchingMediaTypes(this, thisIndex, other, otherIndex)__				if (result != 0) {_					return result__				}_				thisIndex = this.indexOfIncludedMediaType(acceptedMediaType)__				otherIndex = other.indexOfIncludedMediaType(acceptedMediaType)__				result = compareMatchingMediaTypes(this, thisIndex, other, otherIndex)__				if (result != 0) {_					return result__				}_			}_			return 0__		}_		catch (NotAcceptableStatusException ex) {_			_			throw new IllegalStateException("Cannot compare without having any requested media types", ex)__		}_	};compares,this,and,another,produces,condition,as,follows,ol,li,sort,accept,header,media,types,by,quality,value,via,link,media,type,sort,by,quality,value,list,and,iterate,the,list,li,get,the,first,index,of,matching,media,types,in,each,produces,condition,first,matching,with,link,media,type,equals,object,and,then,with,link,media,type,includes,media,type,li,if,a,lower,index,is,found,the,condition,at,that,index,wins,li,if,both,indexes,are,equal,the,media,types,at,the,index,are,compared,further,with,link,media,type,ol,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,server,web,exchange,and,each,instance,contains,the,matching,producible,media,type,expression,only,or,is,otherwise,empty;override,public,int,compare,to,produces,request,condition,other,server,web,exchange,exchange,try,list,media,type,accepted,media,types,get,accepted,media,types,exchange,for,media,type,accepted,media,type,accepted,media,types,int,this,index,this,index,of,equal,media,type,accepted,media,type,int,other,index,other,index,of,equal,media,type,accepted,media,type,int,result,compare,matching,media,types,this,this,index,other,other,index,if,result,0,return,result,this,index,this,index,of,included,media,type,accepted,media,type,other,index,other,index,of,included,media,type,accepted,media,type,result,compare,matching,media,types,this,this,index,other,other,index,if,result,0,return,result,return,0,catch,not,acceptable,status,exception,ex,throw,new,illegal,state,exception,cannot,compare,without,having,any,requested,media,types,ex
ProducesRequestCondition -> @Override 	public int compareTo(ProducesRequestCondition other, ServerWebExchange exchange);1524852408;Compares this and another "produces" condition as follows:_<ol>_<li>Sort 'Accept' header media types by quality value via_{@link MediaType#sortByQualityValue(List)} and iterate the list._<li>Get the first index of matching media types in each "produces"_condition first matching with {@link MediaType#equals(Object)} and_then with {@link MediaType#includes(MediaType)}._<li>If a lower index is found, the condition at that index wins._<li>If both indexes are equal, the media types at the index are_compared further with {@link MediaType#SPECIFICITY_COMPARATOR}._</ol>_<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(ServerWebExchange)} and each instance_contains the matching producible media type expression only or_is otherwise empty.;@Override_	public int compareTo(ProducesRequestCondition other, ServerWebExchange exchange) {_		try {_			List<MediaType> acceptedMediaTypes = getAcceptedMediaTypes(exchange)__			for (MediaType acceptedMediaType : acceptedMediaTypes) {_				int thisIndex = this.indexOfEqualMediaType(acceptedMediaType)__				int otherIndex = other.indexOfEqualMediaType(acceptedMediaType)__				int result = compareMatchingMediaTypes(this, thisIndex, other, otherIndex)__				if (result != 0) {_					return result__				}_				thisIndex = this.indexOfIncludedMediaType(acceptedMediaType)__				otherIndex = other.indexOfIncludedMediaType(acceptedMediaType)__				result = compareMatchingMediaTypes(this, thisIndex, other, otherIndex)__				if (result != 0) {_					return result__				}_			}_			return 0__		}_		catch (NotAcceptableStatusException ex) {_			_			throw new IllegalStateException("Cannot compare without having any requested media types", ex)__		}_	};compares,this,and,another,produces,condition,as,follows,ol,li,sort,accept,header,media,types,by,quality,value,via,link,media,type,sort,by,quality,value,list,and,iterate,the,list,li,get,the,first,index,of,matching,media,types,in,each,produces,condition,first,matching,with,link,media,type,equals,object,and,then,with,link,media,type,includes,media,type,li,if,a,lower,index,is,found,the,condition,at,that,index,wins,li,if,both,indexes,are,equal,the,media,types,at,the,index,are,compared,further,with,link,media,type,ol,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,server,web,exchange,and,each,instance,contains,the,matching,producible,media,type,expression,only,or,is,otherwise,empty;override,public,int,compare,to,produces,request,condition,other,server,web,exchange,exchange,try,list,media,type,accepted,media,types,get,accepted,media,types,exchange,for,media,type,accepted,media,type,accepted,media,types,int,this,index,this,index,of,equal,media,type,accepted,media,type,int,other,index,other,index,of,equal,media,type,accepted,media,type,int,result,compare,matching,media,types,this,this,index,other,other,index,if,result,0,return,result,this,index,this,index,of,included,media,type,accepted,media,type,other,index,other,index,of,included,media,type,accepted,media,type,result,compare,matching,media,types,this,this,index,other,other,index,if,result,0,return,result,return,0,catch,not,acceptable,status,exception,ex,throw,new,illegal,state,exception,cannot,compare,without,having,any,requested,media,types,ex
ProducesRequestCondition -> @Override 	public int compareTo(ProducesRequestCondition other, ServerWebExchange exchange);1530174524;Compares this and another "produces" condition as follows:_<ol>_<li>Sort 'Accept' header media types by quality value via_{@link MediaType#sortByQualityValue(List)} and iterate the list._<li>Get the first index of matching media types in each "produces"_condition first matching with {@link MediaType#equals(Object)} and_then with {@link MediaType#includes(MediaType)}._<li>If a lower index is found, the condition at that index wins._<li>If both indexes are equal, the media types at the index are_compared further with {@link MediaType#SPECIFICITY_COMPARATOR}._</ol>_<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(ServerWebExchange)} and each instance_contains the matching producible media type expression only or_is otherwise empty.;@Override_	public int compareTo(ProducesRequestCondition other, ServerWebExchange exchange) {_		try {_			List<MediaType> acceptedMediaTypes = getAcceptedMediaTypes(exchange)__			for (MediaType acceptedMediaType : acceptedMediaTypes) {_				int thisIndex = this.indexOfEqualMediaType(acceptedMediaType)__				int otherIndex = other.indexOfEqualMediaType(acceptedMediaType)__				int result = compareMatchingMediaTypes(this, thisIndex, other, otherIndex)__				if (result != 0) {_					return result__				}_				thisIndex = this.indexOfIncludedMediaType(acceptedMediaType)__				otherIndex = other.indexOfIncludedMediaType(acceptedMediaType)__				result = compareMatchingMediaTypes(this, thisIndex, other, otherIndex)__				if (result != 0) {_					return result__				}_			}_			return 0__		}_		catch (NotAcceptableStatusException ex) {_			_			throw new IllegalStateException("Cannot compare without having any requested media types", ex)__		}_	};compares,this,and,another,produces,condition,as,follows,ol,li,sort,accept,header,media,types,by,quality,value,via,link,media,type,sort,by,quality,value,list,and,iterate,the,list,li,get,the,first,index,of,matching,media,types,in,each,produces,condition,first,matching,with,link,media,type,equals,object,and,then,with,link,media,type,includes,media,type,li,if,a,lower,index,is,found,the,condition,at,that,index,wins,li,if,both,indexes,are,equal,the,media,types,at,the,index,are,compared,further,with,link,media,type,ol,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,server,web,exchange,and,each,instance,contains,the,matching,producible,media,type,expression,only,or,is,otherwise,empty;override,public,int,compare,to,produces,request,condition,other,server,web,exchange,exchange,try,list,media,type,accepted,media,types,get,accepted,media,types,exchange,for,media,type,accepted,media,type,accepted,media,types,int,this,index,this,index,of,equal,media,type,accepted,media,type,int,other,index,other,index,of,equal,media,type,accepted,media,type,int,result,compare,matching,media,types,this,this,index,other,other,index,if,result,0,return,result,this,index,this,index,of,included,media,type,accepted,media,type,other,index,other,index,of,included,media,type,accepted,media,type,result,compare,matching,media,types,this,this,index,other,other,index,if,result,0,return,result,return,0,catch,not,acceptable,status,exception,ex,throw,new,illegal,state,exception,cannot,compare,without,having,any,requested,media,types,ex
ProducesRequestCondition -> @Override 	public int compareTo(ProducesRequestCondition other, ServerWebExchange exchange);1530190293;Compares this and another "produces" condition as follows:_<ol>_<li>Sort 'Accept' header media types by quality value via_{@link MediaType#sortByQualityValue(List)} and iterate the list._<li>Get the first index of matching media types in each "produces"_condition first matching with {@link MediaType#equals(Object)} and_then with {@link MediaType#includes(MediaType)}._<li>If a lower index is found, the condition at that index wins._<li>If both indexes are equal, the media types at the index are_compared further with {@link MediaType#SPECIFICITY_COMPARATOR}._</ol>_<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(ServerWebExchange)} and each instance_contains the matching producible media type expression only or_is otherwise empty.;@Override_	public int compareTo(ProducesRequestCondition other, ServerWebExchange exchange) {_		try {_			List<MediaType> acceptedMediaTypes = getAcceptedMediaTypes(exchange)__			for (MediaType acceptedMediaType : acceptedMediaTypes) {_				int thisIndex = this.indexOfEqualMediaType(acceptedMediaType)__				int otherIndex = other.indexOfEqualMediaType(acceptedMediaType)__				int result = compareMatchingMediaTypes(this, thisIndex, other, otherIndex)__				if (result != 0) {_					return result__				}_				thisIndex = this.indexOfIncludedMediaType(acceptedMediaType)__				otherIndex = other.indexOfIncludedMediaType(acceptedMediaType)__				result = compareMatchingMediaTypes(this, thisIndex, other, otherIndex)__				if (result != 0) {_					return result__				}_			}_			return 0__		}_		catch (NotAcceptableStatusException ex) {_			_			throw new IllegalStateException("Cannot compare without having any requested media types", ex)__		}_	};compares,this,and,another,produces,condition,as,follows,ol,li,sort,accept,header,media,types,by,quality,value,via,link,media,type,sort,by,quality,value,list,and,iterate,the,list,li,get,the,first,index,of,matching,media,types,in,each,produces,condition,first,matching,with,link,media,type,equals,object,and,then,with,link,media,type,includes,media,type,li,if,a,lower,index,is,found,the,condition,at,that,index,wins,li,if,both,indexes,are,equal,the,media,types,at,the,index,are,compared,further,with,link,media,type,ol,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,server,web,exchange,and,each,instance,contains,the,matching,producible,media,type,expression,only,or,is,otherwise,empty;override,public,int,compare,to,produces,request,condition,other,server,web,exchange,exchange,try,list,media,type,accepted,media,types,get,accepted,media,types,exchange,for,media,type,accepted,media,type,accepted,media,types,int,this,index,this,index,of,equal,media,type,accepted,media,type,int,other,index,other,index,of,equal,media,type,accepted,media,type,int,result,compare,matching,media,types,this,this,index,other,other,index,if,result,0,return,result,this,index,this,index,of,included,media,type,accepted,media,type,other,index,other,index,of,included,media,type,accepted,media,type,result,compare,matching,media,types,this,this,index,other,other,index,if,result,0,return,result,return,0,catch,not,acceptable,status,exception,ex,throw,new,illegal,state,exception,cannot,compare,without,having,any,requested,media,types,ex
ProducesRequestCondition -> @Override 	public int compareTo(ProducesRequestCondition other, ServerWebExchange exchange);1546457570;Compares this and another "produces" condition as follows:_<ol>_<li>Sort 'Accept' header media types by quality value via_{@link MediaType#sortByQualityValue(List)} and iterate the list._<li>Get the first index of matching media types in each "produces"_condition first matching with {@link MediaType#equals(Object)} and_then with {@link MediaType#includes(MediaType)}._<li>If a lower index is found, the condition at that index wins._<li>If both indexes are equal, the media types at the index are_compared further with {@link MediaType#SPECIFICITY_COMPARATOR}._</ol>_<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(ServerWebExchange)} and each instance_contains the matching producible media type expression only or_is otherwise empty.;@Override_	public int compareTo(ProducesRequestCondition other, ServerWebExchange exchange) {_		try {_			List<MediaType> acceptedMediaTypes = getAcceptedMediaTypes(exchange)__			for (MediaType acceptedMediaType : acceptedMediaTypes) {_				int thisIndex = this.indexOfEqualMediaType(acceptedMediaType)__				int otherIndex = other.indexOfEqualMediaType(acceptedMediaType)__				int result = compareMatchingMediaTypes(this, thisIndex, other, otherIndex)__				if (result != 0) {_					return result__				}_				thisIndex = this.indexOfIncludedMediaType(acceptedMediaType)__				otherIndex = other.indexOfIncludedMediaType(acceptedMediaType)__				result = compareMatchingMediaTypes(this, thisIndex, other, otherIndex)__				if (result != 0) {_					return result__				}_			}_			return 0__		}_		catch (NotAcceptableStatusException ex) {_			_			throw new IllegalStateException("Cannot compare without having any requested media types", ex)__		}_	};compares,this,and,another,produces,condition,as,follows,ol,li,sort,accept,header,media,types,by,quality,value,via,link,media,type,sort,by,quality,value,list,and,iterate,the,list,li,get,the,first,index,of,matching,media,types,in,each,produces,condition,first,matching,with,link,media,type,equals,object,and,then,with,link,media,type,includes,media,type,li,if,a,lower,index,is,found,the,condition,at,that,index,wins,li,if,both,indexes,are,equal,the,media,types,at,the,index,are,compared,further,with,link,media,type,ol,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,server,web,exchange,and,each,instance,contains,the,matching,producible,media,type,expression,only,or,is,otherwise,empty;override,public,int,compare,to,produces,request,condition,other,server,web,exchange,exchange,try,list,media,type,accepted,media,types,get,accepted,media,types,exchange,for,media,type,accepted,media,type,accepted,media,types,int,this,index,this,index,of,equal,media,type,accepted,media,type,int,other,index,other,index,of,equal,media,type,accepted,media,type,int,result,compare,matching,media,types,this,this,index,other,other,index,if,result,0,return,result,this,index,this,index,of,included,media,type,accepted,media,type,other,index,other,index,of,included,media,type,accepted,media,type,result,compare,matching,media,types,this,this,index,other,other,index,if,result,0,return,result,return,0,catch,not,acceptable,status,exception,ex,throw,new,illegal,state,exception,cannot,compare,without,having,any,requested,media,types,ex
ProducesRequestCondition -> public Set<MediaType> getProducibleMediaTypes();1485986572;Return the contained producible media types excluding negated expressions.;public Set<MediaType> getProducibleMediaTypes() {_		Set<MediaType> result = new LinkedHashSet<>()__		for (ProduceMediaTypeExpression expression : this.expressions) {_			if (!expression.isNegated()) {_				result.add(expression.getMediaType())__			}_		}_		return result__	};return,the,contained,producible,media,types,excluding,negated,expressions;public,set,media,type,get,producible,media,types,set,media,type,result,new,linked,hash,set,for,produce,media,type,expression,expression,this,expressions,if,expression,is,negated,result,add,expression,get,media,type,return,result
ProducesRequestCondition -> public Set<MediaType> getProducibleMediaTypes();1497039338;Return the contained producible media types excluding negated expressions.;public Set<MediaType> getProducibleMediaTypes() {_		Set<MediaType> result = new LinkedHashSet<>()__		for (ProduceMediaTypeExpression expression : this.expressions) {_			if (!expression.isNegated()) {_				result.add(expression.getMediaType())__			}_		}_		return result__	};return,the,contained,producible,media,types,excluding,negated,expressions;public,set,media,type,get,producible,media,types,set,media,type,result,new,linked,hash,set,for,produce,media,type,expression,expression,this,expressions,if,expression,is,negated,result,add,expression,get,media,type,return,result
ProducesRequestCondition -> public Set<MediaType> getProducibleMediaTypes();1502974979;Return the contained producible media types excluding negated expressions.;public Set<MediaType> getProducibleMediaTypes() {_		Set<MediaType> result = new LinkedHashSet<>()__		for (ProduceMediaTypeExpression expression : this.expressions) {_			if (!expression.isNegated()) {_				result.add(expression.getMediaType())__			}_		}_		return result__	};return,the,contained,producible,media,types,excluding,negated,expressions;public,set,media,type,get,producible,media,types,set,media,type,result,new,linked,hash,set,for,produce,media,type,expression,expression,this,expressions,if,expression,is,negated,result,add,expression,get,media,type,return,result
ProducesRequestCondition -> public Set<MediaType> getProducibleMediaTypes();1519859718;Return the contained producible media types excluding negated expressions.;public Set<MediaType> getProducibleMediaTypes() {_		Set<MediaType> result = new LinkedHashSet<>()__		for (ProduceMediaTypeExpression expression : this.expressions) {_			if (!expression.isNegated()) {_				result.add(expression.getMediaType())__			}_		}_		return result__	};return,the,contained,producible,media,types,excluding,negated,expressions;public,set,media,type,get,producible,media,types,set,media,type,result,new,linked,hash,set,for,produce,media,type,expression,expression,this,expressions,if,expression,is,negated,result,add,expression,get,media,type,return,result
ProducesRequestCondition -> public Set<MediaType> getProducibleMediaTypes();1519860149;Return the contained producible media types excluding negated expressions.;public Set<MediaType> getProducibleMediaTypes() {_		Set<MediaType> result = new LinkedHashSet<>()__		for (ProduceMediaTypeExpression expression : this.expressions) {_			if (!expression.isNegated()) {_				result.add(expression.getMediaType())__			}_		}_		return result__	};return,the,contained,producible,media,types,excluding,negated,expressions;public,set,media,type,get,producible,media,types,set,media,type,result,new,linked,hash,set,for,produce,media,type,expression,expression,this,expressions,if,expression,is,negated,result,add,expression,get,media,type,return,result
ProducesRequestCondition -> public Set<MediaType> getProducibleMediaTypes();1520528267;Return the contained producible media types excluding negated expressions.;public Set<MediaType> getProducibleMediaTypes() {_		Set<MediaType> result = new LinkedHashSet<>()__		for (ProduceMediaTypeExpression expression : this.expressions) {_			if (!expression.isNegated()) {_				result.add(expression.getMediaType())__			}_		}_		return result__	};return,the,contained,producible,media,types,excluding,negated,expressions;public,set,media,type,get,producible,media,types,set,media,type,result,new,linked,hash,set,for,produce,media,type,expression,expression,this,expressions,if,expression,is,negated,result,add,expression,get,media,type,return,result
ProducesRequestCondition -> public Set<MediaType> getProducibleMediaTypes();1521714971;Return the contained producible media types excluding negated expressions.;public Set<MediaType> getProducibleMediaTypes() {_		Set<MediaType> result = new LinkedHashSet<>()__		for (ProduceMediaTypeExpression expression : this.expressions) {_			if (!expression.isNegated()) {_				result.add(expression.getMediaType())__			}_		}_		return result__	};return,the,contained,producible,media,types,excluding,negated,expressions;public,set,media,type,get,producible,media,types,set,media,type,result,new,linked,hash,set,for,produce,media,type,expression,expression,this,expressions,if,expression,is,negated,result,add,expression,get,media,type,return,result
ProducesRequestCondition -> public Set<MediaType> getProducibleMediaTypes();1522184065;Return the contained producible media types excluding negated expressions.;public Set<MediaType> getProducibleMediaTypes() {_		Set<MediaType> result = new LinkedHashSet<>()__		for (ProduceMediaTypeExpression expression : this.expressions) {_			if (!expression.isNegated()) {_				result.add(expression.getMediaType())__			}_		}_		return result__	};return,the,contained,producible,media,types,excluding,negated,expressions;public,set,media,type,get,producible,media,types,set,media,type,result,new,linked,hash,set,for,produce,media,type,expression,expression,this,expressions,if,expression,is,negated,result,add,expression,get,media,type,return,result
ProducesRequestCondition -> public Set<MediaType> getProducibleMediaTypes();1524852408;Return the contained producible media types excluding negated expressions.;public Set<MediaType> getProducibleMediaTypes() {_		Set<MediaType> result = new LinkedHashSet<>()__		for (ProduceMediaTypeExpression expression : this.expressions) {_			if (!expression.isNegated()) {_				result.add(expression.getMediaType())__			}_		}_		return result__	};return,the,contained,producible,media,types,excluding,negated,expressions;public,set,media,type,get,producible,media,types,set,media,type,result,new,linked,hash,set,for,produce,media,type,expression,expression,this,expressions,if,expression,is,negated,result,add,expression,get,media,type,return,result
ProducesRequestCondition -> public Set<MediaType> getProducibleMediaTypes();1530174524;Return the contained producible media types excluding negated expressions.;public Set<MediaType> getProducibleMediaTypes() {_		Set<MediaType> result = new LinkedHashSet<>()__		for (ProduceMediaTypeExpression expression : this.expressions) {_			if (!expression.isNegated()) {_				result.add(expression.getMediaType())__			}_		}_		return result__	};return,the,contained,producible,media,types,excluding,negated,expressions;public,set,media,type,get,producible,media,types,set,media,type,result,new,linked,hash,set,for,produce,media,type,expression,expression,this,expressions,if,expression,is,negated,result,add,expression,get,media,type,return,result
ProducesRequestCondition -> public Set<MediaType> getProducibleMediaTypes();1530190293;Return the contained producible media types excluding negated expressions.;public Set<MediaType> getProducibleMediaTypes() {_		Set<MediaType> result = new LinkedHashSet<>()__		for (ProduceMediaTypeExpression expression : this.expressions) {_			if (!expression.isNegated()) {_				result.add(expression.getMediaType())__			}_		}_		return result__	};return,the,contained,producible,media,types,excluding,negated,expressions;public,set,media,type,get,producible,media,types,set,media,type,result,new,linked,hash,set,for,produce,media,type,expression,expression,this,expressions,if,expression,is,negated,result,add,expression,get,media,type,return,result
ProducesRequestCondition -> public Set<MediaType> getProducibleMediaTypes();1546457570;Return the contained producible media types excluding negated expressions.;public Set<MediaType> getProducibleMediaTypes() {_		Set<MediaType> result = new LinkedHashSet<>()__		for (ProduceMediaTypeExpression expression : this.expressions) {_			if (!expression.isNegated()) {_				result.add(expression.getMediaType())__			}_		}_		return result__	};return,the,contained,producible,media,types,excluding,negated,expressions;public,set,media,type,get,producible,media,types,set,media,type,result,new,linked,hash,set,for,produce,media,type,expression,expression,this,expressions,if,expression,is,negated,result,add,expression,get,media,type,return,result
ProducesRequestCondition -> @Override 	@Nullable 	public ProducesRequestCondition getMatchingCondition(ServerWebExchange exchange);1502974979;Checks if any of the contained media type expressions match the given_request 'Content-Type' header and returns an instance that is guaranteed_to contain matching expressions only. The match is performed via_{@link MediaType#isCompatibleWith(MediaType)}._@param exchange the current exchange_@return the same instance if there are no expressions__or a new condition with matching expressions__or {@code null} if no expressions match.;@Override_	@Nullable_	public ProducesRequestCondition getMatchingCondition(ServerWebExchange exchange) {_		if (CorsUtils.isPreFlightRequest(exchange.getRequest())) {_			return PRE_FLIGHT_MATCH__		}_		if (isEmpty()) {_			return this__		}_		Set<ProduceMediaTypeExpression> result = new LinkedHashSet<>(expressions)__		for (Iterator<ProduceMediaTypeExpression> iterator = result.iterator()_ iterator.hasNext()_) {_			ProduceMediaTypeExpression expression = iterator.next()__			if (!expression.match(exchange)) {_				iterator.remove()__			}_		}_		return (result.isEmpty()) ? null : new ProducesRequestCondition(result, this.contentTypeResolver)__	};checks,if,any,of,the,contained,media,type,expressions,match,the,given,request,content,type,header,and,returns,an,instance,that,is,guaranteed,to,contain,matching,expressions,only,the,match,is,performed,via,link,media,type,is,compatible,with,media,type,param,exchange,the,current,exchange,return,the,same,instance,if,there,are,no,expressions,or,a,new,condition,with,matching,expressions,or,code,null,if,no,expressions,match;override,nullable,public,produces,request,condition,get,matching,condition,server,web,exchange,exchange,if,cors,utils,is,pre,flight,request,exchange,get,request,return,if,is,empty,return,this,set,produce,media,type,expression,result,new,linked,hash,set,expressions,for,iterator,produce,media,type,expression,iterator,result,iterator,iterator,has,next,produce,media,type,expression,expression,iterator,next,if,expression,match,exchange,iterator,remove,return,result,is,empty,null,new,produces,request,condition,result,this,content,type,resolver
ProducesRequestCondition -> @Override 	@Nullable 	public ProducesRequestCondition getMatchingCondition(ServerWebExchange exchange);1519859718;Checks if any of the contained media type expressions match the given_request 'Content-Type' header and returns an instance that is guaranteed_to contain matching expressions only. The match is performed via_{@link MediaType#isCompatibleWith(MediaType)}._@param exchange the current exchange_@return the same instance if there are no expressions__or a new condition with matching expressions__or {@code null} if no expressions match.;@Override_	@Nullable_	public ProducesRequestCondition getMatchingCondition(ServerWebExchange exchange) {_		if (CorsUtils.isPreFlightRequest(exchange.getRequest())) {_			return PRE_FLIGHT_MATCH__		}_		if (isEmpty()) {_			return this__		}_		Set<ProduceMediaTypeExpression> result = new LinkedHashSet<>(expressions)__		for (Iterator<ProduceMediaTypeExpression> iterator = result.iterator()_ iterator.hasNext()_) {_			ProduceMediaTypeExpression expression = iterator.next()__			if (!expression.match(exchange)) {_				iterator.remove()__			}_		}_		return (result.isEmpty()) ? null : new ProducesRequestCondition(result, this.contentTypeResolver)__	};checks,if,any,of,the,contained,media,type,expressions,match,the,given,request,content,type,header,and,returns,an,instance,that,is,guaranteed,to,contain,matching,expressions,only,the,match,is,performed,via,link,media,type,is,compatible,with,media,type,param,exchange,the,current,exchange,return,the,same,instance,if,there,are,no,expressions,or,a,new,condition,with,matching,expressions,or,code,null,if,no,expressions,match;override,nullable,public,produces,request,condition,get,matching,condition,server,web,exchange,exchange,if,cors,utils,is,pre,flight,request,exchange,get,request,return,if,is,empty,return,this,set,produce,media,type,expression,result,new,linked,hash,set,expressions,for,iterator,produce,media,type,expression,iterator,result,iterator,iterator,has,next,produce,media,type,expression,expression,iterator,next,if,expression,match,exchange,iterator,remove,return,result,is,empty,null,new,produces,request,condition,result,this,content,type,resolver
ProducesRequestCondition -> @Override 	@Nullable 	public ProducesRequestCondition getMatchingCondition(ServerWebExchange exchange);1519860149;Checks if any of the contained media type expressions match the given_request 'Content-Type' header and returns an instance that is guaranteed_to contain matching expressions only. The match is performed via_{@link MediaType#isCompatibleWith(MediaType)}._@param exchange the current exchange_@return the same instance if there are no expressions__or a new condition with matching expressions__or {@code null} if no expressions match.;@Override_	@Nullable_	public ProducesRequestCondition getMatchingCondition(ServerWebExchange exchange) {_		if (CorsUtils.isPreFlightRequest(exchange.getRequest())) {_			return PRE_FLIGHT_MATCH__		}_		if (isEmpty()) {_			return this__		}_		Set<ProduceMediaTypeExpression> result = new LinkedHashSet<>(expressions)__		for (Iterator<ProduceMediaTypeExpression> iterator = result.iterator()_ iterator.hasNext()_) {_			ProduceMediaTypeExpression expression = iterator.next()__			if (!expression.match(exchange)) {_				iterator.remove()__			}_		}_		return (result.isEmpty()) ? null : new ProducesRequestCondition(result, this.contentTypeResolver)__	};checks,if,any,of,the,contained,media,type,expressions,match,the,given,request,content,type,header,and,returns,an,instance,that,is,guaranteed,to,contain,matching,expressions,only,the,match,is,performed,via,link,media,type,is,compatible,with,media,type,param,exchange,the,current,exchange,return,the,same,instance,if,there,are,no,expressions,or,a,new,condition,with,matching,expressions,or,code,null,if,no,expressions,match;override,nullable,public,produces,request,condition,get,matching,condition,server,web,exchange,exchange,if,cors,utils,is,pre,flight,request,exchange,get,request,return,if,is,empty,return,this,set,produce,media,type,expression,result,new,linked,hash,set,expressions,for,iterator,produce,media,type,expression,iterator,result,iterator,iterator,has,next,produce,media,type,expression,expression,iterator,next,if,expression,match,exchange,iterator,remove,return,result,is,empty,null,new,produces,request,condition,result,this,content,type,resolver
ProducesRequestCondition -> @Override 	@Nullable 	public ProducesRequestCondition getMatchingCondition(ServerWebExchange exchange);1520528267;Checks if any of the contained media type expressions match the given_request 'Content-Type' header and returns an instance that is guaranteed_to contain matching expressions only. The match is performed via_{@link MediaType#isCompatibleWith(MediaType)}._@param exchange the current exchange_@return the same instance if there are no expressions__or a new condition with matching expressions__or {@code null} if no expressions match.;@Override_	@Nullable_	public ProducesRequestCondition getMatchingCondition(ServerWebExchange exchange) {_		if (CorsUtils.isPreFlightRequest(exchange.getRequest())) {_			return PRE_FLIGHT_MATCH__		}_		if (isEmpty()) {_			return this__		}_		Set<ProduceMediaTypeExpression> result = new LinkedHashSet<>(expressions)__		for (Iterator<ProduceMediaTypeExpression> iterator = result.iterator()_ iterator.hasNext()_) {_			ProduceMediaTypeExpression expression = iterator.next()__			if (!expression.match(exchange)) {_				iterator.remove()__			}_		}_		return (result.isEmpty()) ? null : new ProducesRequestCondition(result, this.contentTypeResolver)__	};checks,if,any,of,the,contained,media,type,expressions,match,the,given,request,content,type,header,and,returns,an,instance,that,is,guaranteed,to,contain,matching,expressions,only,the,match,is,performed,via,link,media,type,is,compatible,with,media,type,param,exchange,the,current,exchange,return,the,same,instance,if,there,are,no,expressions,or,a,new,condition,with,matching,expressions,or,code,null,if,no,expressions,match;override,nullable,public,produces,request,condition,get,matching,condition,server,web,exchange,exchange,if,cors,utils,is,pre,flight,request,exchange,get,request,return,if,is,empty,return,this,set,produce,media,type,expression,result,new,linked,hash,set,expressions,for,iterator,produce,media,type,expression,iterator,result,iterator,iterator,has,next,produce,media,type,expression,expression,iterator,next,if,expression,match,exchange,iterator,remove,return,result,is,empty,null,new,produces,request,condition,result,this,content,type,resolver
ProducesRequestCondition -> @Override 	@Nullable 	public ProducesRequestCondition getMatchingCondition(ServerWebExchange exchange);1521714971;Checks if any of the contained media type expressions match the given_request 'Content-Type' header and returns an instance that is guaranteed_to contain matching expressions only. The match is performed via_{@link MediaType#isCompatibleWith(MediaType)}._@param exchange the current exchange_@return the same instance if there are no expressions__or a new condition with matching expressions__or {@code null} if no expressions match.;@Override_	@Nullable_	public ProducesRequestCondition getMatchingCondition(ServerWebExchange exchange) {_		if (CorsUtils.isPreFlightRequest(exchange.getRequest())) {_			return PRE_FLIGHT_MATCH__		}_		if (isEmpty()) {_			return this__		}_		Set<ProduceMediaTypeExpression> result = new LinkedHashSet<>(expressions)__		result.removeIf(expression -> !expression.match(exchange))__		return (result.isEmpty()) ? null : new ProducesRequestCondition(result, this.contentTypeResolver)__	};checks,if,any,of,the,contained,media,type,expressions,match,the,given,request,content,type,header,and,returns,an,instance,that,is,guaranteed,to,contain,matching,expressions,only,the,match,is,performed,via,link,media,type,is,compatible,with,media,type,param,exchange,the,current,exchange,return,the,same,instance,if,there,are,no,expressions,or,a,new,condition,with,matching,expressions,or,code,null,if,no,expressions,match;override,nullable,public,produces,request,condition,get,matching,condition,server,web,exchange,exchange,if,cors,utils,is,pre,flight,request,exchange,get,request,return,if,is,empty,return,this,set,produce,media,type,expression,result,new,linked,hash,set,expressions,result,remove,if,expression,expression,match,exchange,return,result,is,empty,null,new,produces,request,condition,result,this,content,type,resolver
ProducesRequestCondition -> @Override 	@Nullable 	public ProducesRequestCondition getMatchingCondition(ServerWebExchange exchange);1522184065;Checks if any of the contained media type expressions match the given_request 'Content-Type' header and returns an instance that is guaranteed_to contain matching expressions only. The match is performed via_{@link MediaType#isCompatibleWith(MediaType)}._@param exchange the current exchange_@return the same instance if there are no expressions__or a new condition with matching expressions__or {@code null} if no expressions match.;@Override_	@Nullable_	public ProducesRequestCondition getMatchingCondition(ServerWebExchange exchange) {_		if (CorsUtils.isPreFlightRequest(exchange.getRequest())) {_			return PRE_FLIGHT_MATCH__		}_		if (isEmpty()) {_			return this__		}_		Set<ProduceMediaTypeExpression> result = new LinkedHashSet<>(expressions)__		result.removeIf(expression -> !expression.match(exchange))__		return (result.isEmpty()) ? null : new ProducesRequestCondition(result, this.contentTypeResolver)__	};checks,if,any,of,the,contained,media,type,expressions,match,the,given,request,content,type,header,and,returns,an,instance,that,is,guaranteed,to,contain,matching,expressions,only,the,match,is,performed,via,link,media,type,is,compatible,with,media,type,param,exchange,the,current,exchange,return,the,same,instance,if,there,are,no,expressions,or,a,new,condition,with,matching,expressions,or,code,null,if,no,expressions,match;override,nullable,public,produces,request,condition,get,matching,condition,server,web,exchange,exchange,if,cors,utils,is,pre,flight,request,exchange,get,request,return,if,is,empty,return,this,set,produce,media,type,expression,result,new,linked,hash,set,expressions,result,remove,if,expression,expression,match,exchange,return,result,is,empty,null,new,produces,request,condition,result,this,content,type,resolver
ProducesRequestCondition -> @Override 	@Nullable 	public ProducesRequestCondition getMatchingCondition(ServerWebExchange exchange);1524852408;Checks if any of the contained media type expressions match the given_request 'Content-Type' header and returns an instance that is guaranteed_to contain matching expressions only. The match is performed via_{@link MediaType#isCompatibleWith(MediaType)}._@param exchange the current exchange_@return the same instance if there are no expressions__or a new condition with matching expressions__or {@code null} if no expressions match.;@Override_	@Nullable_	public ProducesRequestCondition getMatchingCondition(ServerWebExchange exchange) {_		if (CorsUtils.isPreFlightRequest(exchange.getRequest())) {_			return PRE_FLIGHT_MATCH__		}_		if (isEmpty()) {_			return this__		}_		Set<ProduceMediaTypeExpression> result = new LinkedHashSet<>(expressions)__		result.removeIf(expression -> !expression.match(exchange))__		return (result.isEmpty()) ? null : new ProducesRequestCondition(result, this.contentTypeResolver)__	};checks,if,any,of,the,contained,media,type,expressions,match,the,given,request,content,type,header,and,returns,an,instance,that,is,guaranteed,to,contain,matching,expressions,only,the,match,is,performed,via,link,media,type,is,compatible,with,media,type,param,exchange,the,current,exchange,return,the,same,instance,if,there,are,no,expressions,or,a,new,condition,with,matching,expressions,or,code,null,if,no,expressions,match;override,nullable,public,produces,request,condition,get,matching,condition,server,web,exchange,exchange,if,cors,utils,is,pre,flight,request,exchange,get,request,return,if,is,empty,return,this,set,produce,media,type,expression,result,new,linked,hash,set,expressions,result,remove,if,expression,expression,match,exchange,return,result,is,empty,null,new,produces,request,condition,result,this,content,type,resolver
ProducesRequestCondition -> @Override 	@Nullable 	public ProducesRequestCondition getMatchingCondition(ServerWebExchange exchange);1530174524;Checks if any of the contained media type expressions match the given_request 'Content-Type' header and returns an instance that is guaranteed_to contain matching expressions only. The match is performed via_{@link MediaType#isCompatibleWith(MediaType)}._@param exchange the current exchange_@return the same instance if there are no expressions__or a new condition with matching expressions__or {@code null} if no expressions match.;@Override_	@Nullable_	public ProducesRequestCondition getMatchingCondition(ServerWebExchange exchange) {_		if (CorsUtils.isPreFlightRequest(exchange.getRequest())) {_			return PRE_FLIGHT_MATCH__		}_		if (isEmpty()) {_			return this__		}_		Set<ProduceMediaTypeExpression> result = new LinkedHashSet<>(this.expressions)__		result.removeIf(expression -> !expression.match(exchange))__		return (result.isEmpty()) ? null : new ProducesRequestCondition(result, this.contentTypeResolver)__	};checks,if,any,of,the,contained,media,type,expressions,match,the,given,request,content,type,header,and,returns,an,instance,that,is,guaranteed,to,contain,matching,expressions,only,the,match,is,performed,via,link,media,type,is,compatible,with,media,type,param,exchange,the,current,exchange,return,the,same,instance,if,there,are,no,expressions,or,a,new,condition,with,matching,expressions,or,code,null,if,no,expressions,match;override,nullable,public,produces,request,condition,get,matching,condition,server,web,exchange,exchange,if,cors,utils,is,pre,flight,request,exchange,get,request,return,if,is,empty,return,this,set,produce,media,type,expression,result,new,linked,hash,set,this,expressions,result,remove,if,expression,expression,match,exchange,return,result,is,empty,null,new,produces,request,condition,result,this,content,type,resolver
ProducesRequestCondition -> @Override 	@Nullable 	public ProducesRequestCondition getMatchingCondition(ServerWebExchange exchange);1530190293;Checks if any of the contained media type expressions match the given_request 'Content-Type' header and returns an instance that is guaranteed_to contain matching expressions only. The match is performed via_{@link MediaType#isCompatibleWith(MediaType)}._@param exchange the current exchange_@return the same instance if there are no expressions__or a new condition with matching expressions__or {@code null} if no expressions match.;@Override_	@Nullable_	public ProducesRequestCondition getMatchingCondition(ServerWebExchange exchange) {_		if (CorsUtils.isPreFlightRequest(exchange.getRequest())) {_			return PRE_FLIGHT_MATCH__		}_		if (isEmpty()) {_			return this__		}_		Set<ProduceMediaTypeExpression> result = new LinkedHashSet<>(this.expressions)__		result.removeIf(expression -> !expression.match(exchange))__		return (!result.isEmpty() ? new ProducesRequestCondition(result, this.contentTypeResolver) : null)__	};checks,if,any,of,the,contained,media,type,expressions,match,the,given,request,content,type,header,and,returns,an,instance,that,is,guaranteed,to,contain,matching,expressions,only,the,match,is,performed,via,link,media,type,is,compatible,with,media,type,param,exchange,the,current,exchange,return,the,same,instance,if,there,are,no,expressions,or,a,new,condition,with,matching,expressions,or,code,null,if,no,expressions,match;override,nullable,public,produces,request,condition,get,matching,condition,server,web,exchange,exchange,if,cors,utils,is,pre,flight,request,exchange,get,request,return,if,is,empty,return,this,set,produce,media,type,expression,result,new,linked,hash,set,this,expressions,result,remove,if,expression,expression,match,exchange,return,result,is,empty,new,produces,request,condition,result,this,content,type,resolver,null
ProducesRequestCondition -> @Override 	@Nullable 	public ProducesRequestCondition getMatchingCondition(ServerWebExchange exchange);1546457570;Checks if any of the contained media type expressions match the given_request 'Content-Type' header and returns an instance that is guaranteed_to contain matching expressions only. The match is performed via_{@link MediaType#isCompatibleWith(MediaType)}._@param exchange the current exchange_@return the same instance if there are no expressions__or a new condition with matching expressions__or {@code null} if no expressions match.;@Override_	@Nullable_	public ProducesRequestCondition getMatchingCondition(ServerWebExchange exchange) {_		if (CorsUtils.isPreFlightRequest(exchange.getRequest())) {_			return PRE_FLIGHT_MATCH__		}_		if (isEmpty()) {_			return this__		}_		Set<ProduceMediaTypeExpression> result = new LinkedHashSet<>(this.expressions)__		result.removeIf(expression -> !expression.match(exchange))__		if (!result.isEmpty()) {_			return new ProducesRequestCondition(result, this.contentTypeResolver)__		}_		else {_			try {_				if (MediaType.ALL.isPresentIn(getAcceptedMediaTypes(exchange))) {_					return EMPTY_CONDITION__				}_			}_			catch (NotAcceptableStatusException | UnsupportedMediaTypeStatusException ex) {_				_			}_		}_		return null__	};checks,if,any,of,the,contained,media,type,expressions,match,the,given,request,content,type,header,and,returns,an,instance,that,is,guaranteed,to,contain,matching,expressions,only,the,match,is,performed,via,link,media,type,is,compatible,with,media,type,param,exchange,the,current,exchange,return,the,same,instance,if,there,are,no,expressions,or,a,new,condition,with,matching,expressions,or,code,null,if,no,expressions,match;override,nullable,public,produces,request,condition,get,matching,condition,server,web,exchange,exchange,if,cors,utils,is,pre,flight,request,exchange,get,request,return,if,is,empty,return,this,set,produce,media,type,expression,result,new,linked,hash,set,this,expressions,result,remove,if,expression,expression,match,exchange,if,result,is,empty,return,new,produces,request,condition,result,this,content,type,resolver,else,try,if,media,type,all,is,present,in,get,accepted,media,types,exchange,return,catch,not,acceptable,status,exception,unsupported,media,type,status,exception,ex,return,null
