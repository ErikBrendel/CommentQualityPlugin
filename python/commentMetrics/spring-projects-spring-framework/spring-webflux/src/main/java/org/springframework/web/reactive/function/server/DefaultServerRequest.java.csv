commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String methodName() {     return request().getMethodValue(). }
false;public;0;4;;@Override public URI uri() {     return request().getURI(). }
false;public;0;4;;@Override public UriBuilder uriBuilder() {     return UriComponentsBuilder.fromUri(uri()). }
false;public;0;4;;@Override public PathContainer pathContainer() {     return request().getPath(). }
false;public;0;4;;@Override public Headers headers() {     return this.headers. }
false;public;0;4;;@Override public MultiValueMap<String, HttpCookie> cookies() {     return request().getCookies(). }
false;public;0;4;;@Override public Optional<InetSocketAddress> remoteAddress() {     return Optional.ofNullable(request().getRemoteAddress()). }
false;public;0;4;;@Override public List<HttpMessageReader<?>> messageReaders() {     return this.messageReaders. }
false;public;1;4;;@Override public <T> T body(BodyExtractor<T, ? super ServerHttpRequest> extractor) {     return bodyInternal(extractor, Hints.from(Hints.LOG_PREFIX_HINT, exchange().getLogPrefix())). }
false;public;2;5;;@Override public <T> T body(BodyExtractor<T, ? super ServerHttpRequest> extractor, Map<String, Object> hints) {     hints = Hints.merge(hints, Hints.LOG_PREFIX_HINT, exchange().getLogPrefix()).     return bodyInternal(extractor, hints). }
false;public;0;4;;@Override public List<HttpMessageReader<?>> messageReaders() {     return messageReaders. }
false;public;0;4;;@Override public Optional<ServerHttpResponse> serverResponse() {     return Optional.of(exchange().getResponse()). }
false;public;0;4;;@Override public Map<String, Object> hints() {     return hints. }
false;private;2;17;;private <T> T bodyInternal(BodyExtractor<T, ? super ServerHttpRequest> extractor, Map<String, Object> hints) {     return extractor.extract(request(), new BodyExtractor.Context() {          @Override         public List<HttpMessageReader<?>> messageReaders() {             return messageReaders.         }          @Override         public Optional<ServerHttpResponse> serverResponse() {             return Optional.of(exchange().getResponse()).         }          @Override         public Map<String, Object> hints() {             return hints.         }     }). }
false;public;1;6;;@Override public <T> Mono<T> bodyToMono(Class<? extends T> elementClass) {     Mono<T> mono = body(BodyExtractors.toMono(elementClass)).     return mono.onErrorMap(UnsupportedMediaTypeException.class, ERROR_MAPPER).onErrorMap(DecodingException.class, DECODING_MAPPER). }
false;public;1;6;;@Override public <T> Mono<T> bodyToMono(ParameterizedTypeReference<T> typeReference) {     Mono<T> mono = body(BodyExtractors.toMono(typeReference)).     return mono.onErrorMap(UnsupportedMediaTypeException.class, ERROR_MAPPER).onErrorMap(DecodingException.class, DECODING_MAPPER). }
false;public;1;6;;@Override public <T> Flux<T> bodyToFlux(Class<? extends T> elementClass) {     Flux<T> flux = body(BodyExtractors.toFlux(elementClass)).     return flux.onErrorMap(UnsupportedMediaTypeException.class, ERROR_MAPPER).onErrorMap(DecodingException.class, DECODING_MAPPER). }
false;public;1;6;;@Override public <T> Flux<T> bodyToFlux(ParameterizedTypeReference<T> typeReference) {     Flux<T> flux = body(BodyExtractors.toFlux(typeReference)).     return flux.onErrorMap(UnsupportedMediaTypeException.class, ERROR_MAPPER).onErrorMap(DecodingException.class, DECODING_MAPPER). }
false;public;0;4;;@Override public Map<String, Object> attributes() {     return this.exchange.getAttributes(). }
false;public;0;4;;@Override public MultiValueMap<String, String> queryParams() {     return request().getQueryParams(). }
false;public;0;5;;@Override public Map<String, String> pathVariables() {     return this.exchange.getAttributeOrDefault(RouterFunctions.URI_TEMPLATE_VARIABLES_ATTRIBUTE, Collections.emptyMap()). }
false;public;0;4;;@Override public Mono<WebSession> session() {     return this.exchange.getSession(). }
false;public;0;4;;@Override public Mono<? extends Principal> principal() {     return this.exchange.getPrincipal(). }
false;public;0;4;;@Override public Mono<MultiValueMap<String, String>> formData() {     return this.exchange.getFormData(). }
false;public;0;4;;@Override public Mono<MultiValueMap<String, Part>> multipartData() {     return this.exchange.getMultipartData(). }
false;private;0;3;;private ServerHttpRequest request() {     return this.exchange.getRequest(). }
false;public;0;4;;@Override public ServerWebExchange exchange() {     return this.exchange. }
false;public;0;4;;@Override public String toString() {     return String.format("HTTP %s %s", method(), path()). }
false;private;0;3;;private HttpHeaders delegate() {     return request().getHeaders(). }
false;public;0;4;;@Override public List<MediaType> accept() {     return delegate().getAccept(). }
false;public;0;4;;@Override public List<Charset> acceptCharset() {     return delegate().getAcceptCharset(). }
false;public;0;4;;@Override public List<Locale.LanguageRange> acceptLanguage() {     return delegate().getAcceptLanguage(). }
false;public;0;5;;@Override public OptionalLong contentLength() {     long value = delegate().getContentLength().     return (value != -1 ? OptionalLong.of(value) : OptionalLong.empty()). }
false;public;0;4;;@Override public Optional<MediaType> contentType() {     return Optional.ofNullable(delegate().getContentType()). }
false;public;0;4;;@Override public InetSocketAddress host() {     return delegate().getHost(). }
false;public;0;4;;@Override public List<HttpRange> range() {     return delegate().getRange(). }
false;public;1;5;;@Override public List<String> header(String headerName) {     List<String> headerValues = delegate().get(headerName).     return (headerValues != null ? headerValues : Collections.emptyList()). }
false;public;0;4;;@Override public HttpHeaders asHttpHeaders() {     return HttpHeaders.readOnlyHttpHeaders(delegate()). }
false;public;0;4;;@Override public String toString() {     return delegate().toString(). }
