# id;timestamp;commentText;codeText;commentWords;codeWords
InvocableHandlerMethod -> public InvocableHandlerMethod(HandlerMethod handlerMethod);1540931761;Create an instance from a {@code HandlerMethod}.;public InvocableHandlerMethod(HandlerMethod handlerMethod) {_		super(handlerMethod)__	};create,an,instance,from,a,code,handler,method;public,invocable,handler,method,handler,method,handler,method,super,handler,method
InvocableHandlerMethod -> public InvocableHandlerMethod(HandlerMethod handlerMethod);1540934109;Create an instance from a {@code HandlerMethod}.;public InvocableHandlerMethod(HandlerMethod handlerMethod) {_		super(handlerMethod)__	};create,an,instance,from,a,code,handler,method;public,invocable,handler,method,handler,method,handler,method,super,handler,method
InvocableHandlerMethod -> public InvocableHandlerMethod(HandlerMethod handlerMethod);1541096460;Create an instance from a {@code HandlerMethod}.;public InvocableHandlerMethod(HandlerMethod handlerMethod) {_		super(handlerMethod)__	};create,an,instance,from,a,code,handler,method;public,invocable,handler,method,handler,method,handler,method,super,handler,method
InvocableHandlerMethod -> public InvocableHandlerMethod(Object bean, Method method);1540931761;Create an instance from a bean instance and a method.;public InvocableHandlerMethod(Object bean, Method method) {_		super(bean, method)__	};create,an,instance,from,a,bean,instance,and,a,method;public,invocable,handler,method,object,bean,method,method,super,bean,method
InvocableHandlerMethod -> public InvocableHandlerMethod(Object bean, Method method);1540934109;Create an instance from a bean instance and a method.;public InvocableHandlerMethod(Object bean, Method method) {_		super(bean, method)__	};create,an,instance,from,a,bean,instance,and,a,method;public,invocable,handler,method,object,bean,method,method,super,bean,method
InvocableHandlerMethod -> public InvocableHandlerMethod(Object bean, Method method);1541096460;Create an instance from a bean instance and a method.;public InvocableHandlerMethod(Object bean, Method method) {_		super(bean, method)__	};create,an,instance,from,a,bean,instance,and,a,method;public,invocable,handler,method,object,bean,method,method,super,bean,method
InvocableHandlerMethod -> public Mono<HandlerResult> invoke( 			ServerWebExchange exchange, BindingContext bindingContext, Object... providedArgs);1530190293;Invoke the method for the given exchange._@param exchange the current exchange_@param bindingContext the binding context to use_@param providedArgs optional list of argument values to match by type_@return a Mono with a {@link HandlerResult}.;public Mono<HandlerResult> invoke(_			ServerWebExchange exchange, BindingContext bindingContext, Object... providedArgs) {__		return resolveArguments(exchange, bindingContext, providedArgs).flatMap(args -> {_			Object value__			try {_				ReflectionUtils.makeAccessible(getBridgedMethod())__				value = getBridgedMethod().invoke(getBean(), args)__			}_			catch (IllegalArgumentException ex) {_				assertTargetBean(getBridgedMethod(), getBean(), args)__				String text = (ex.getMessage() != null ? ex.getMessage() : "Illegal argument")__				throw new IllegalStateException(formatInvokeError(text, args), ex)__			}_			catch (InvocationTargetException ex) {_				return Mono.error(ex.getTargetException())__			}_			catch (Throwable ex) {_				_				return Mono.error(new IllegalStateException(formatInvokeError("Invocation failure", args), ex))__			}__			HttpStatus status = getResponseStatus()__			if (status != null) {_				exchange.getResponse().setStatusCode(status)__			}__			MethodParameter returnType = getReturnType()__			ReactiveAdapter adapter = this.reactiveAdapterRegistry.getAdapter(returnType.getParameterType())__			boolean asyncVoid = isAsyncVoidReturnType(returnType, adapter)__			if ((value == null || asyncVoid) && isResponseHandled(args, exchange)) {_				return (asyncVoid ? Mono.from(adapter.toPublisher(value)) : Mono.empty())__			}__			HandlerResult result = new HandlerResult(this, value, returnType, bindingContext)__			return Mono.just(result)__		})__	};invoke,the,method,for,the,given,exchange,param,exchange,the,current,exchange,param,binding,context,the,binding,context,to,use,param,provided,args,optional,list,of,argument,values,to,match,by,type,return,a,mono,with,a,link,handler,result;public,mono,handler,result,invoke,server,web,exchange,exchange,binding,context,binding,context,object,provided,args,return,resolve,arguments,exchange,binding,context,provided,args,flat,map,args,object,value,try,reflection,utils,make,accessible,get,bridged,method,value,get,bridged,method,invoke,get,bean,args,catch,illegal,argument,exception,ex,assert,target,bean,get,bridged,method,get,bean,args,string,text,ex,get,message,null,ex,get,message,illegal,argument,throw,new,illegal,state,exception,format,invoke,error,text,args,ex,catch,invocation,target,exception,ex,return,mono,error,ex,get,target,exception,catch,throwable,ex,return,mono,error,new,illegal,state,exception,format,invoke,error,invocation,failure,args,ex,http,status,status,get,response,status,if,status,null,exchange,get,response,set,status,code,status,method,parameter,return,type,get,return,type,reactive,adapter,adapter,this,reactive,adapter,registry,get,adapter,return,type,get,parameter,type,boolean,async,void,is,async,void,return,type,return,type,adapter,if,value,null,async,void,is,response,handled,args,exchange,return,async,void,mono,from,adapter,to,publisher,value,mono,empty,handler,result,result,new,handler,result,this,value,return,type,binding,context,return,mono,just,result
InvocableHandlerMethod -> public Mono<HandlerResult> invoke( 			ServerWebExchange exchange, BindingContext bindingContext, Object... providedArgs);1530793633;Invoke the method for the given exchange._@param exchange the current exchange_@param bindingContext the binding context to use_@param providedArgs optional list of argument values to match by type_@return a Mono with a {@link HandlerResult}.;public Mono<HandlerResult> invoke(_			ServerWebExchange exchange, BindingContext bindingContext, Object... providedArgs) {__		return resolveArguments(exchange, bindingContext, providedArgs).flatMap(args -> {_			Object value__			try {_				ReflectionUtils.makeAccessible(getBridgedMethod())__				value = getBridgedMethod().invoke(getBean(), args)__			}_			catch (IllegalArgumentException ex) {_				assertTargetBean(getBridgedMethod(), getBean(), args)__				String text = (ex.getMessage() != null ? ex.getMessage() : "Illegal argument")__				throw new IllegalStateException(formatInvokeError(text, args), ex)__			}_			catch (InvocationTargetException ex) {_				return Mono.error(ex.getTargetException())__			}_			catch (Throwable ex) {_				_				return Mono.error(new IllegalStateException(formatInvokeError("Invocation failure", args), ex))__			}__			HttpStatus status = getResponseStatus()__			if (status != null) {_				exchange.getResponse().setStatusCode(status)__			}__			MethodParameter returnType = getReturnType()__			ReactiveAdapter adapter = this.reactiveAdapterRegistry.getAdapter(returnType.getParameterType())__			boolean asyncVoid = isAsyncVoidReturnType(returnType, adapter)__			if ((value == null || asyncVoid) && isResponseHandled(args, exchange)) {_				return (asyncVoid ? Mono.from(adapter.toPublisher(value)) : Mono.empty())__			}__			HandlerResult result = new HandlerResult(this, value, returnType, bindingContext)__			return Mono.just(result)__		})__	};invoke,the,method,for,the,given,exchange,param,exchange,the,current,exchange,param,binding,context,the,binding,context,to,use,param,provided,args,optional,list,of,argument,values,to,match,by,type,return,a,mono,with,a,link,handler,result;public,mono,handler,result,invoke,server,web,exchange,exchange,binding,context,binding,context,object,provided,args,return,resolve,arguments,exchange,binding,context,provided,args,flat,map,args,object,value,try,reflection,utils,make,accessible,get,bridged,method,value,get,bridged,method,invoke,get,bean,args,catch,illegal,argument,exception,ex,assert,target,bean,get,bridged,method,get,bean,args,string,text,ex,get,message,null,ex,get,message,illegal,argument,throw,new,illegal,state,exception,format,invoke,error,text,args,ex,catch,invocation,target,exception,ex,return,mono,error,ex,get,target,exception,catch,throwable,ex,return,mono,error,new,illegal,state,exception,format,invoke,error,invocation,failure,args,ex,http,status,status,get,response,status,if,status,null,exchange,get,response,set,status,code,status,method,parameter,return,type,get,return,type,reactive,adapter,adapter,this,reactive,adapter,registry,get,adapter,return,type,get,parameter,type,boolean,async,void,is,async,void,return,type,return,type,adapter,if,value,null,async,void,is,response,handled,args,exchange,return,async,void,mono,from,adapter,to,publisher,value,mono,empty,handler,result,result,new,handler,result,this,value,return,type,binding,context,return,mono,just,result
InvocableHandlerMethod -> public Mono<HandlerResult> invoke( 			ServerWebExchange exchange, BindingContext bindingContext, Object... providedArgs);1540931761;Invoke the method for the given exchange._@param exchange the current exchange_@param bindingContext the binding context to use_@param providedArgs optional list of argument values to match by type_@return a Mono with a {@link HandlerResult}.;public Mono<HandlerResult> invoke(_			ServerWebExchange exchange, BindingContext bindingContext, Object... providedArgs) {__		return getMethodArgumentValues(exchange, bindingContext, providedArgs).flatMap(args -> {_			Object value__			try {_				ReflectionUtils.makeAccessible(getBridgedMethod())__				value = getBridgedMethod().invoke(getBean(), args)__			}_			catch (IllegalArgumentException ex) {_				assertTargetBean(getBridgedMethod(), getBean(), args)__				String text = (ex.getMessage() != null ? ex.getMessage() : "Illegal argument")__				throw new IllegalStateException(formatInvokeError(text, args), ex)__			}_			catch (InvocationTargetException ex) {_				return Mono.error(ex.getTargetException())__			}_			catch (Throwable ex) {_				_				return Mono.error(new IllegalStateException(formatInvokeError("Invocation failure", args), ex))__			}__			HttpStatus status = getResponseStatus()__			if (status != null) {_				exchange.getResponse().setStatusCode(status)__			}__			MethodParameter returnType = getReturnType()__			ReactiveAdapter adapter = this.reactiveAdapterRegistry.getAdapter(returnType.getParameterType())__			boolean asyncVoid = isAsyncVoidReturnType(returnType, adapter)__			if ((value == null || asyncVoid) && isResponseHandled(args, exchange)) {_				return (asyncVoid ? Mono.from(adapter.toPublisher(value)) : Mono.empty())__			}__			HandlerResult result = new HandlerResult(this, value, returnType, bindingContext)__			return Mono.just(result)__		})__	};invoke,the,method,for,the,given,exchange,param,exchange,the,current,exchange,param,binding,context,the,binding,context,to,use,param,provided,args,optional,list,of,argument,values,to,match,by,type,return,a,mono,with,a,link,handler,result;public,mono,handler,result,invoke,server,web,exchange,exchange,binding,context,binding,context,object,provided,args,return,get,method,argument,values,exchange,binding,context,provided,args,flat,map,args,object,value,try,reflection,utils,make,accessible,get,bridged,method,value,get,bridged,method,invoke,get,bean,args,catch,illegal,argument,exception,ex,assert,target,bean,get,bridged,method,get,bean,args,string,text,ex,get,message,null,ex,get,message,illegal,argument,throw,new,illegal,state,exception,format,invoke,error,text,args,ex,catch,invocation,target,exception,ex,return,mono,error,ex,get,target,exception,catch,throwable,ex,return,mono,error,new,illegal,state,exception,format,invoke,error,invocation,failure,args,ex,http,status,status,get,response,status,if,status,null,exchange,get,response,set,status,code,status,method,parameter,return,type,get,return,type,reactive,adapter,adapter,this,reactive,adapter,registry,get,adapter,return,type,get,parameter,type,boolean,async,void,is,async,void,return,type,return,type,adapter,if,value,null,async,void,is,response,handled,args,exchange,return,async,void,mono,from,adapter,to,publisher,value,mono,empty,handler,result,result,new,handler,result,this,value,return,type,binding,context,return,mono,just,result
InvocableHandlerMethod -> public Mono<HandlerResult> invoke( 			ServerWebExchange exchange, BindingContext bindingContext, Object... providedArgs);1540934109;Invoke the method for the given exchange._@param exchange the current exchange_@param bindingContext the binding context to use_@param providedArgs optional list of argument values to match by type_@return a Mono with a {@link HandlerResult}.;public Mono<HandlerResult> invoke(_			ServerWebExchange exchange, BindingContext bindingContext, Object... providedArgs) {__		return getMethodArgumentValues(exchange, bindingContext, providedArgs).flatMap(args -> {_			Object value__			try {_				ReflectionUtils.makeAccessible(getBridgedMethod())__				value = getBridgedMethod().invoke(getBean(), args)__			}_			catch (IllegalArgumentException ex) {_				assertTargetBean(getBridgedMethod(), getBean(), args)__				String text = (ex.getMessage() != null ? ex.getMessage() : "Illegal argument")__				throw new IllegalStateException(formatInvokeError(text, args), ex)__			}_			catch (InvocationTargetException ex) {_				return Mono.error(ex.getTargetException())__			}_			catch (Throwable ex) {_				_				return Mono.error(new IllegalStateException(formatInvokeError("Invocation failure", args), ex))__			}__			HttpStatus status = getResponseStatus()__			if (status != null) {_				exchange.getResponse().setStatusCode(status)__			}__			MethodParameter returnType = getReturnType()__			ReactiveAdapter adapter = this.reactiveAdapterRegistry.getAdapter(returnType.getParameterType())__			boolean asyncVoid = isAsyncVoidReturnType(returnType, adapter)__			if ((value == null || asyncVoid) && isResponseHandled(args, exchange)) {_				return (asyncVoid ? Mono.from(adapter.toPublisher(value)) : Mono.empty())__			}__			HandlerResult result = new HandlerResult(this, value, returnType, bindingContext)__			return Mono.just(result)__		})__	};invoke,the,method,for,the,given,exchange,param,exchange,the,current,exchange,param,binding,context,the,binding,context,to,use,param,provided,args,optional,list,of,argument,values,to,match,by,type,return,a,mono,with,a,link,handler,result;public,mono,handler,result,invoke,server,web,exchange,exchange,binding,context,binding,context,object,provided,args,return,get,method,argument,values,exchange,binding,context,provided,args,flat,map,args,object,value,try,reflection,utils,make,accessible,get,bridged,method,value,get,bridged,method,invoke,get,bean,args,catch,illegal,argument,exception,ex,assert,target,bean,get,bridged,method,get,bean,args,string,text,ex,get,message,null,ex,get,message,illegal,argument,throw,new,illegal,state,exception,format,invoke,error,text,args,ex,catch,invocation,target,exception,ex,return,mono,error,ex,get,target,exception,catch,throwable,ex,return,mono,error,new,illegal,state,exception,format,invoke,error,invocation,failure,args,ex,http,status,status,get,response,status,if,status,null,exchange,get,response,set,status,code,status,method,parameter,return,type,get,return,type,reactive,adapter,adapter,this,reactive,adapter,registry,get,adapter,return,type,get,parameter,type,boolean,async,void,is,async,void,return,type,return,type,adapter,if,value,null,async,void,is,response,handled,args,exchange,return,async,void,mono,from,adapter,to,publisher,value,mono,empty,handler,result,result,new,handler,result,this,value,return,type,binding,context,return,mono,just,result
InvocableHandlerMethod -> public Mono<HandlerResult> invoke( 			ServerWebExchange exchange, BindingContext bindingContext, Object... providedArgs);1541096460;Invoke the method for the given exchange._@param exchange the current exchange_@param bindingContext the binding context to use_@param providedArgs optional list of argument values to match by type_@return a Mono with a {@link HandlerResult}.;public Mono<HandlerResult> invoke(_			ServerWebExchange exchange, BindingContext bindingContext, Object... providedArgs) {__		return getMethodArgumentValues(exchange, bindingContext, providedArgs).flatMap(args -> {_			Object value__			try {_				ReflectionUtils.makeAccessible(getBridgedMethod())__				value = getBridgedMethod().invoke(getBean(), args)__			}_			catch (IllegalArgumentException ex) {_				assertTargetBean(getBridgedMethod(), getBean(), args)__				String text = (ex.getMessage() != null ? ex.getMessage() : "Illegal argument")__				return Mono.error(new IllegalStateException(formatInvokeError(text, args), ex))__			}_			catch (InvocationTargetException ex) {_				return Mono.error(ex.getTargetException())__			}_			catch (Throwable ex) {_				_				return Mono.error(new IllegalStateException(formatInvokeError("Invocation failure", args), ex))__			}__			HttpStatus status = getResponseStatus()__			if (status != null) {_				exchange.getResponse().setStatusCode(status)__			}__			MethodParameter returnType = getReturnType()__			ReactiveAdapter adapter = this.reactiveAdapterRegistry.getAdapter(returnType.getParameterType())__			boolean asyncVoid = isAsyncVoidReturnType(returnType, adapter)__			if ((value == null || asyncVoid) && isResponseHandled(args, exchange)) {_				return (asyncVoid ? Mono.from(adapter.toPublisher(value)) : Mono.empty())__			}__			HandlerResult result = new HandlerResult(this, value, returnType, bindingContext)__			return Mono.just(result)__		})__	};invoke,the,method,for,the,given,exchange,param,exchange,the,current,exchange,param,binding,context,the,binding,context,to,use,param,provided,args,optional,list,of,argument,values,to,match,by,type,return,a,mono,with,a,link,handler,result;public,mono,handler,result,invoke,server,web,exchange,exchange,binding,context,binding,context,object,provided,args,return,get,method,argument,values,exchange,binding,context,provided,args,flat,map,args,object,value,try,reflection,utils,make,accessible,get,bridged,method,value,get,bridged,method,invoke,get,bean,args,catch,illegal,argument,exception,ex,assert,target,bean,get,bridged,method,get,bean,args,string,text,ex,get,message,null,ex,get,message,illegal,argument,return,mono,error,new,illegal,state,exception,format,invoke,error,text,args,ex,catch,invocation,target,exception,ex,return,mono,error,ex,get,target,exception,catch,throwable,ex,return,mono,error,new,illegal,state,exception,format,invoke,error,invocation,failure,args,ex,http,status,status,get,response,status,if,status,null,exchange,get,response,set,status,code,status,method,parameter,return,type,get,return,type,reactive,adapter,adapter,this,reactive,adapter,registry,get,adapter,return,type,get,parameter,type,boolean,async,void,is,async,void,return,type,return,type,adapter,if,value,null,async,void,is,response,handled,args,exchange,return,async,void,mono,from,adapter,to,publisher,value,mono,empty,handler,result,result,new,handler,result,this,value,return,type,binding,context,return,mono,just,result
InvocableHandlerMethod -> public Mono<HandlerResult> invoke(ServerWebExchange exchange, BindingContext bindingContext, 			Object... providedArgs);1485986572;Invoke the method for the given exchange._@param exchange the current exchange_@param bindingContext the binding context to use_@param providedArgs optional list of argument values to match by type_@return Mono with a {@link HandlerResult}.;public Mono<HandlerResult> invoke(ServerWebExchange exchange, BindingContext bindingContext,_			Object... providedArgs) {__		return resolveArguments(exchange, bindingContext, providedArgs).then(args -> {_			try {_				Object value = doInvoke(args)__				HandlerResult result = new HandlerResult(this, value, getReturnType(), bindingContext)__				return Mono.just(result)__			}_			catch (InvocationTargetException ex) {_				return Mono.error(ex.getTargetException())__			}_			catch (Throwable ex) {_				return Mono.error(new IllegalStateException(getInvocationErrorMessage(args)))__			}_		})__	};invoke,the,method,for,the,given,exchange,param,exchange,the,current,exchange,param,binding,context,the,binding,context,to,use,param,provided,args,optional,list,of,argument,values,to,match,by,type,return,mono,with,a,link,handler,result;public,mono,handler,result,invoke,server,web,exchange,exchange,binding,context,binding,context,object,provided,args,return,resolve,arguments,exchange,binding,context,provided,args,then,args,try,object,value,do,invoke,args,handler,result,result,new,handler,result,this,value,get,return,type,binding,context,return,mono,just,result,catch,invocation,target,exception,ex,return,mono,error,ex,get,target,exception,catch,throwable,ex,return,mono,error,new,illegal,state,exception,get,invocation,error,message,args
InvocableHandlerMethod -> public Mono<HandlerResult> invoke(ServerWebExchange exchange, BindingContext bindingContext, 			Object... providedArgs);1486632602;Invoke the method for the given exchange._@param exchange the current exchange_@param bindingContext the binding context to use_@param providedArgs optional list of argument values to match by type_@return Mono with a {@link HandlerResult}.;public Mono<HandlerResult> invoke(ServerWebExchange exchange, BindingContext bindingContext,_			Object... providedArgs) {__		return resolveArguments(exchange, bindingContext, providedArgs).then(args -> {_			try {_				Object value = doInvoke(args)__				HandlerResult result = new HandlerResult(this, value, getReturnType(), bindingContext)__				if (this.responseStatus != null) {_					exchange.getResponse().setStatusCode(this.responseStatus)__				}_				return Mono.just(result)__			}_			catch (InvocationTargetException ex) {_				return Mono.error(ex.getTargetException())__			}_			catch (Throwable ex) {_				return Mono.error(new IllegalStateException(getInvocationErrorMessage(args)))__			}_		})__	};invoke,the,method,for,the,given,exchange,param,exchange,the,current,exchange,param,binding,context,the,binding,context,to,use,param,provided,args,optional,list,of,argument,values,to,match,by,type,return,mono,with,a,link,handler,result;public,mono,handler,result,invoke,server,web,exchange,exchange,binding,context,binding,context,object,provided,args,return,resolve,arguments,exchange,binding,context,provided,args,then,args,try,object,value,do,invoke,args,handler,result,result,new,handler,result,this,value,get,return,type,binding,context,if,this,response,status,null,exchange,get,response,set,status,code,this,response,status,return,mono,just,result,catch,invocation,target,exception,ex,return,mono,error,ex,get,target,exception,catch,throwable,ex,return,mono,error,new,illegal,state,exception,get,invocation,error,message,args
InvocableHandlerMethod -> public Mono<HandlerResult> invoke(ServerWebExchange exchange, BindingContext bindingContext, 			Object... providedArgs);1489433860;Invoke the method for the given exchange._@param exchange the current exchange_@param bindingContext the binding context to use_@param providedArgs optional list of argument values to match by type_@return Mono with a {@link HandlerResult}.;public Mono<HandlerResult> invoke(ServerWebExchange exchange, BindingContext bindingContext,_			Object... providedArgs) {__		return resolveArguments(exchange, bindingContext, providedArgs).then(args -> {_			try {_				Object value = doInvoke(args)__				HandlerResult result = new HandlerResult(this, value, getReturnType(), bindingContext)__				if (this.responseStatus != null) {_					exchange.getResponse().setStatusCode(this.responseStatus)__				}_				return Mono.just(result)__			}_			catch (InvocationTargetException ex) {_				return Mono.error(ex.getTargetException())__			}_			catch (Throwable ex) {_				return Mono.error(new IllegalStateException(getInvocationErrorMessage(args)))__			}_		})__	};invoke,the,method,for,the,given,exchange,param,exchange,the,current,exchange,param,binding,context,the,binding,context,to,use,param,provided,args,optional,list,of,argument,values,to,match,by,type,return,mono,with,a,link,handler,result;public,mono,handler,result,invoke,server,web,exchange,exchange,binding,context,binding,context,object,provided,args,return,resolve,arguments,exchange,binding,context,provided,args,then,args,try,object,value,do,invoke,args,handler,result,result,new,handler,result,this,value,get,return,type,binding,context,if,this,response,status,null,exchange,get,response,set,status,code,this,response,status,return,mono,just,result,catch,invocation,target,exception,ex,return,mono,error,ex,get,target,exception,catch,throwable,ex,return,mono,error,new,illegal,state,exception,get,invocation,error,message,args
InvocableHandlerMethod -> public Mono<HandlerResult> invoke(ServerWebExchange exchange, BindingContext bindingContext, 			Object... providedArgs);1489433883;Invoke the method for the given exchange._@param exchange the current exchange_@param bindingContext the binding context to use_@param providedArgs optional list of argument values to match by type_@return Mono with a {@link HandlerResult}.;public Mono<HandlerResult> invoke(ServerWebExchange exchange, BindingContext bindingContext,_			Object... providedArgs) {__		return resolveArguments(exchange, bindingContext, providedArgs).then(args -> {_			try {_				Object value = doInvoke(args)__				HandlerResult result = new HandlerResult(this, value, getReturnType(), bindingContext)__				if (this.responseStatus != null) {_					exchange.getResponse().setStatusCode(this.responseStatus)__				}_				return Mono.just(result)__			}_			catch (InvocationTargetException ex) {_				return Mono.error(ex.getTargetException())__			}_			catch (Throwable ex) {_				return Mono.error(new IllegalStateException(getInvocationErrorMessage(args)))__			}_		})__	};invoke,the,method,for,the,given,exchange,param,exchange,the,current,exchange,param,binding,context,the,binding,context,to,use,param,provided,args,optional,list,of,argument,values,to,match,by,type,return,mono,with,a,link,handler,result;public,mono,handler,result,invoke,server,web,exchange,exchange,binding,context,binding,context,object,provided,args,return,resolve,arguments,exchange,binding,context,provided,args,then,args,try,object,value,do,invoke,args,handler,result,result,new,handler,result,this,value,get,return,type,binding,context,if,this,response,status,null,exchange,get,response,set,status,code,this,response,status,return,mono,just,result,catch,invocation,target,exception,ex,return,mono,error,ex,get,target,exception,catch,throwable,ex,return,mono,error,new,illegal,state,exception,get,invocation,error,message,args
InvocableHandlerMethod -> public Mono<HandlerResult> invoke(ServerWebExchange exchange, BindingContext bindingContext, 			Object... providedArgs);1491659765;Invoke the method for the given exchange._@param exchange the current exchange_@param bindingContext the binding context to use_@param providedArgs optional list of argument values to match by type_@return Mono with a {@link HandlerResult}.;public Mono<HandlerResult> invoke(ServerWebExchange exchange, BindingContext bindingContext,_			Object... providedArgs) {__		return resolveArguments(exchange, bindingContext, providedArgs).then(args -> {_			try {_				Object value = doInvoke(args)__				HandlerResult result = new HandlerResult(this, value, getReturnType(), bindingContext)__				HttpStatus status = getResponseStatus()__				if (status != null) {_					exchange.getResponse().setStatusCode(status)__				}_				return Mono.just(result)__			}_			catch (InvocationTargetException ex) {_				return Mono.error(ex.getTargetException())__			}_			catch (Throwable ex) {_				return Mono.error(new IllegalStateException(getInvocationErrorMessage(args)))__			}_		})__	};invoke,the,method,for,the,given,exchange,param,exchange,the,current,exchange,param,binding,context,the,binding,context,to,use,param,provided,args,optional,list,of,argument,values,to,match,by,type,return,mono,with,a,link,handler,result;public,mono,handler,result,invoke,server,web,exchange,exchange,binding,context,binding,context,object,provided,args,return,resolve,arguments,exchange,binding,context,provided,args,then,args,try,object,value,do,invoke,args,handler,result,result,new,handler,result,this,value,get,return,type,binding,context,http,status,status,get,response,status,if,status,null,exchange,get,response,set,status,code,status,return,mono,just,result,catch,invocation,target,exception,ex,return,mono,error,ex,get,target,exception,catch,throwable,ex,return,mono,error,new,illegal,state,exception,get,invocation,error,message,args
InvocableHandlerMethod -> public Mono<HandlerResult> invoke(ServerWebExchange exchange, BindingContext bindingContext, 			Object... providedArgs);1491927184;Invoke the method for the given exchange._@param exchange the current exchange_@param bindingContext the binding context to use_@param providedArgs optional list of argument values to match by type_@return Mono with a {@link HandlerResult}.;public Mono<HandlerResult> invoke(ServerWebExchange exchange, BindingContext bindingContext,_			Object... providedArgs) {__		return resolveArguments(exchange, bindingContext, providedArgs).flatMap(args -> {_			try {_				Object value = doInvoke(args)__				HandlerResult result = new HandlerResult(this, value, getReturnType(), bindingContext)__				HttpStatus status = getResponseStatus()__				if (status != null) {_					exchange.getResponse().setStatusCode(status)__				}_				return Mono.just(result)__			}_			catch (InvocationTargetException ex) {_				return Mono.error(ex.getTargetException())__			}_			catch (Throwable ex) {_				return Mono.error(new IllegalStateException(getInvocationErrorMessage(args)))__			}_		})__	};invoke,the,method,for,the,given,exchange,param,exchange,the,current,exchange,param,binding,context,the,binding,context,to,use,param,provided,args,optional,list,of,argument,values,to,match,by,type,return,mono,with,a,link,handler,result;public,mono,handler,result,invoke,server,web,exchange,exchange,binding,context,binding,context,object,provided,args,return,resolve,arguments,exchange,binding,context,provided,args,flat,map,args,try,object,value,do,invoke,args,handler,result,result,new,handler,result,this,value,get,return,type,binding,context,http,status,status,get,response,status,if,status,null,exchange,get,response,set,status,code,status,return,mono,just,result,catch,invocation,target,exception,ex,return,mono,error,ex,get,target,exception,catch,throwable,ex,return,mono,error,new,illegal,state,exception,get,invocation,error,message,args
InvocableHandlerMethod -> public Mono<HandlerResult> invoke(ServerWebExchange exchange, BindingContext bindingContext, 			Object... providedArgs);1496837955;Invoke the method for the given exchange._@param exchange the current exchange_@param bindingContext the binding context to use_@param providedArgs optional list of argument values to match by type_@return Mono with a {@link HandlerResult}.;public Mono<HandlerResult> invoke(ServerWebExchange exchange, BindingContext bindingContext,_			Object... providedArgs) {__		return resolveArguments(exchange, bindingContext, providedArgs).flatMap(args -> {_			try {_				Object value = doInvoke(args)__				HandlerResult result = new HandlerResult(this, value, getReturnType(), bindingContext)__				HttpStatus status = getResponseStatus()__				if (status != null) {_					exchange.getResponse().setStatusCode(status)__				}_				return Mono.just(result)__			}_			catch (InvocationTargetException ex) {_				return Mono.error(ex.getTargetException())__			}_			catch (Throwable ex) {_				return Mono.error(new IllegalStateException(getInvocationErrorMessage(args)))__			}_		})__	};invoke,the,method,for,the,given,exchange,param,exchange,the,current,exchange,param,binding,context,the,binding,context,to,use,param,provided,args,optional,list,of,argument,values,to,match,by,type,return,mono,with,a,link,handler,result;public,mono,handler,result,invoke,server,web,exchange,exchange,binding,context,binding,context,object,provided,args,return,resolve,arguments,exchange,binding,context,provided,args,flat,map,args,try,object,value,do,invoke,args,handler,result,result,new,handler,result,this,value,get,return,type,binding,context,http,status,status,get,response,status,if,status,null,exchange,get,response,set,status,code,status,return,mono,just,result,catch,invocation,target,exception,ex,return,mono,error,ex,get,target,exception,catch,throwable,ex,return,mono,error,new,illegal,state,exception,get,invocation,error,message,args
InvocableHandlerMethod -> public Mono<HandlerResult> invoke(ServerWebExchange exchange, BindingContext bindingContext, 			Object... providedArgs);1503338048;Invoke the method for the given exchange._@param exchange the current exchange_@param bindingContext the binding context to use_@param providedArgs optional list of argument values to match by type_@return Mono with a {@link HandlerResult}.;public Mono<HandlerResult> invoke(ServerWebExchange exchange, BindingContext bindingContext,_			Object... providedArgs) {__		return resolveArguments(exchange, bindingContext, providedArgs).flatMap(args -> {_			try {_				Object value = doInvoke(args)__				HandlerResult result = new HandlerResult(this, value, getReturnType(), bindingContext)__				HttpStatus status = getResponseStatus()__				if (status != null) {_					exchange.getResponse().setStatusCode(status)__				}_				return Mono.just(result)__			}_			catch (InvocationTargetException ex) {_				return Mono.error(ex.getTargetException())__			}_			catch (Throwable ex) {_				return Mono.error(new IllegalStateException(getInvocationErrorMessage(args)))__			}_		})__	};invoke,the,method,for,the,given,exchange,param,exchange,the,current,exchange,param,binding,context,the,binding,context,to,use,param,provided,args,optional,list,of,argument,values,to,match,by,type,return,mono,with,a,link,handler,result;public,mono,handler,result,invoke,server,web,exchange,exchange,binding,context,binding,context,object,provided,args,return,resolve,arguments,exchange,binding,context,provided,args,flat,map,args,try,object,value,do,invoke,args,handler,result,result,new,handler,result,this,value,get,return,type,binding,context,http,status,status,get,response,status,if,status,null,exchange,get,response,set,status,code,status,return,mono,just,result,catch,invocation,target,exception,ex,return,mono,error,ex,get,target,exception,catch,throwable,ex,return,mono,error,new,illegal,state,exception,get,invocation,error,message,args
InvocableHandlerMethod -> public Mono<HandlerResult> invoke(ServerWebExchange exchange, BindingContext bindingContext, 			Object... providedArgs);1508375247;Invoke the method for the given exchange._@param exchange the current exchange_@param bindingContext the binding context to use_@param providedArgs optional list of argument values to match by type_@return Mono with a {@link HandlerResult}.;public Mono<HandlerResult> invoke(ServerWebExchange exchange, BindingContext bindingContext,_			Object... providedArgs) {__		return resolveArguments(exchange, bindingContext, providedArgs).flatMap(args -> {_			try {_				Object value = doInvoke(args)___				HttpStatus status = getResponseStatus()__				if (status != null) {_					exchange.getResponse().setStatusCode(status)__				}__				MethodParameter returnType = getReturnType()__				ReactiveAdapter adapter = this.reactiveAdapterRegistry.getAdapter(returnType.getParameterType())__				boolean asyncVoid = isAsyncVoidReturnType(returnType, adapter)__				if ((value == null || asyncVoid) && isResponseHandled(args, exchange)) {_					logger.debug("Response fully handled in controller method")__					return asyncVoid ? Mono.from(adapter.toPublisher(value)) : Mono.empty()__				}__				HandlerResult result = new HandlerResult(this, value, returnType, bindingContext)__				return Mono.just(result)__			}_			catch (InvocationTargetException ex) {_				return Mono.error(ex.getTargetException())__			}_			catch (Throwable ex) {_				return Mono.error(new IllegalStateException(getInvocationErrorMessage(args)))__			}_		})__	};invoke,the,method,for,the,given,exchange,param,exchange,the,current,exchange,param,binding,context,the,binding,context,to,use,param,provided,args,optional,list,of,argument,values,to,match,by,type,return,mono,with,a,link,handler,result;public,mono,handler,result,invoke,server,web,exchange,exchange,binding,context,binding,context,object,provided,args,return,resolve,arguments,exchange,binding,context,provided,args,flat,map,args,try,object,value,do,invoke,args,http,status,status,get,response,status,if,status,null,exchange,get,response,set,status,code,status,method,parameter,return,type,get,return,type,reactive,adapter,adapter,this,reactive,adapter,registry,get,adapter,return,type,get,parameter,type,boolean,async,void,is,async,void,return,type,return,type,adapter,if,value,null,async,void,is,response,handled,args,exchange,logger,debug,response,fully,handled,in,controller,method,return,async,void,mono,from,adapter,to,publisher,value,mono,empty,handler,result,result,new,handler,result,this,value,return,type,binding,context,return,mono,just,result,catch,invocation,target,exception,ex,return,mono,error,ex,get,target,exception,catch,throwable,ex,return,mono,error,new,illegal,state,exception,get,invocation,error,message,args
InvocableHandlerMethod -> public Mono<HandlerResult> invoke(ServerWebExchange exchange, BindingContext bindingContext, 			Object... providedArgs);1511215342;Invoke the method for the given exchange._@param exchange the current exchange_@param bindingContext the binding context to use_@param providedArgs optional list of argument values to match by type_@return Mono with a {@link HandlerResult}.;public Mono<HandlerResult> invoke(ServerWebExchange exchange, BindingContext bindingContext,_			Object... providedArgs) {__		return resolveArguments(exchange, bindingContext, providedArgs).flatMap(args -> {_			try {_				Object value = doInvoke(args)___				HttpStatus status = getResponseStatus()__				if (status != null) {_					exchange.getResponse().setStatusCode(status)__				}__				MethodParameter returnType = getReturnType()__				ReactiveAdapter adapter = this.reactiveAdapterRegistry.getAdapter(returnType.getParameterType())__				boolean asyncVoid = isAsyncVoidReturnType(returnType, adapter)__				if ((value == null || asyncVoid) && isResponseHandled(args, exchange)) {_					logger.debug("Response fully handled in controller method")__					return asyncVoid ? Mono.from(adapter.toPublisher(value)) : Mono.empty()__				}__				HandlerResult result = new HandlerResult(this, value, returnType, bindingContext)__				return Mono.just(result)__			}_			catch (InvocationTargetException ex) {_				return Mono.error(ex.getTargetException())__			}_			catch (Throwable ex) {_				return Mono.error(new IllegalStateException(getInvocationErrorMessage(args)))__			}_		})__	};invoke,the,method,for,the,given,exchange,param,exchange,the,current,exchange,param,binding,context,the,binding,context,to,use,param,provided,args,optional,list,of,argument,values,to,match,by,type,return,mono,with,a,link,handler,result;public,mono,handler,result,invoke,server,web,exchange,exchange,binding,context,binding,context,object,provided,args,return,resolve,arguments,exchange,binding,context,provided,args,flat,map,args,try,object,value,do,invoke,args,http,status,status,get,response,status,if,status,null,exchange,get,response,set,status,code,status,method,parameter,return,type,get,return,type,reactive,adapter,adapter,this,reactive,adapter,registry,get,adapter,return,type,get,parameter,type,boolean,async,void,is,async,void,return,type,return,type,adapter,if,value,null,async,void,is,response,handled,args,exchange,logger,debug,response,fully,handled,in,controller,method,return,async,void,mono,from,adapter,to,publisher,value,mono,empty,handler,result,result,new,handler,result,this,value,return,type,binding,context,return,mono,just,result,catch,invocation,target,exception,ex,return,mono,error,ex,get,target,exception,catch,throwable,ex,return,mono,error,new,illegal,state,exception,get,invocation,error,message,args
InvocableHandlerMethod -> public Mono<HandlerResult> invoke(ServerWebExchange exchange, BindingContext bindingContext, 			Object... providedArgs);1529721864;Invoke the method for the given exchange._@param exchange the current exchange_@param bindingContext the binding context to use_@param providedArgs optional list of argument values to match by type_@return Mono with a {@link HandlerResult}.;public Mono<HandlerResult> invoke(ServerWebExchange exchange, BindingContext bindingContext,_			Object... providedArgs) {__		return resolveArguments(exchange, bindingContext, providedArgs).flatMap(args -> {_			Object value__			try {_				ReflectionUtils.makeAccessible(getBridgedMethod())__				value = getBridgedMethod().invoke(getBean(), args)__			}_			catch (IllegalArgumentException ex) {_				assertTargetBean(getBridgedMethod(), getBean(), args)__				String text = (ex.getMessage() != null ? ex.getMessage() : "Illegal argument")__				throw new IllegalStateException(formatInvokeError(text, args), ex)__			}_			catch (InvocationTargetException ex) {_				return Mono.error(ex.getTargetException())__			}_			catch (Throwable ex) {_				_				return Mono.error(new IllegalStateException(formatInvokeError("Invocation failure", args), ex))__			}__			HttpStatus status = getResponseStatus()__			if (status != null) {_				exchange.getResponse().setStatusCode(status)__			}__			MethodParameter returnType = getReturnType()__			ReactiveAdapter adapter = this.reactiveAdapterRegistry.getAdapter(returnType.getParameterType())__			boolean asyncVoid = isAsyncVoidReturnType(returnType, adapter)__			if ((value == null || asyncVoid) && isResponseHandled(args, exchange)) {_				return asyncVoid ? Mono.from(adapter.toPublisher(value)) : Mono.empty()__			}__			HandlerResult result = new HandlerResult(this, value, returnType, bindingContext)__			return Mono.just(result)__		})__	};invoke,the,method,for,the,given,exchange,param,exchange,the,current,exchange,param,binding,context,the,binding,context,to,use,param,provided,args,optional,list,of,argument,values,to,match,by,type,return,mono,with,a,link,handler,result;public,mono,handler,result,invoke,server,web,exchange,exchange,binding,context,binding,context,object,provided,args,return,resolve,arguments,exchange,binding,context,provided,args,flat,map,args,object,value,try,reflection,utils,make,accessible,get,bridged,method,value,get,bridged,method,invoke,get,bean,args,catch,illegal,argument,exception,ex,assert,target,bean,get,bridged,method,get,bean,args,string,text,ex,get,message,null,ex,get,message,illegal,argument,throw,new,illegal,state,exception,format,invoke,error,text,args,ex,catch,invocation,target,exception,ex,return,mono,error,ex,get,target,exception,catch,throwable,ex,return,mono,error,new,illegal,state,exception,format,invoke,error,invocation,failure,args,ex,http,status,status,get,response,status,if,status,null,exchange,get,response,set,status,code,status,method,parameter,return,type,get,return,type,reactive,adapter,adapter,this,reactive,adapter,registry,get,adapter,return,type,get,parameter,type,boolean,async,void,is,async,void,return,type,return,type,adapter,if,value,null,async,void,is,response,handled,args,exchange,return,async,void,mono,from,adapter,to,publisher,value,mono,empty,handler,result,result,new,handler,result,this,value,return,type,binding,context,return,mono,just,result
InvocableHandlerMethod -> public Mono<HandlerResult> invoke(ServerWebExchange exchange, BindingContext bindingContext, 			Object... providedArgs);1530174524;Invoke the method for the given exchange._@param exchange the current exchange_@param bindingContext the binding context to use_@param providedArgs optional list of argument values to match by type_@return a Mono with a {@link HandlerResult}.;public Mono<HandlerResult> invoke(ServerWebExchange exchange, BindingContext bindingContext,_			Object... providedArgs) {__		return resolveArguments(exchange, bindingContext, providedArgs).flatMap(args -> {_			Object value__			try {_				ReflectionUtils.makeAccessible(getBridgedMethod())__				value = getBridgedMethod().invoke(getBean(), args)__			}_			catch (IllegalArgumentException ex) {_				assertTargetBean(getBridgedMethod(), getBean(), args)__				String text = (ex.getMessage() != null ? ex.getMessage() : "Illegal argument")__				throw new IllegalStateException(formatInvokeError(text, args), ex)__			}_			catch (InvocationTargetException ex) {_				return Mono.error(ex.getTargetException())__			}_			catch (Throwable ex) {_				_				return Mono.error(new IllegalStateException(formatInvokeError("Invocation failure", args), ex))__			}__			HttpStatus status = getResponseStatus()__			if (status != null) {_				exchange.getResponse().setStatusCode(status)__			}__			MethodParameter returnType = getReturnType()__			ReactiveAdapter adapter = this.reactiveAdapterRegistry.getAdapter(returnType.getParameterType())__			boolean asyncVoid = isAsyncVoidReturnType(returnType, adapter)__			if ((value == null || asyncVoid) && isResponseHandled(args, exchange)) {_				return asyncVoid ? Mono.from(adapter.toPublisher(value)) : Mono.empty()__			}__			HandlerResult result = new HandlerResult(this, value, returnType, bindingContext)__			return Mono.just(result)__		})__	};invoke,the,method,for,the,given,exchange,param,exchange,the,current,exchange,param,binding,context,the,binding,context,to,use,param,provided,args,optional,list,of,argument,values,to,match,by,type,return,a,mono,with,a,link,handler,result;public,mono,handler,result,invoke,server,web,exchange,exchange,binding,context,binding,context,object,provided,args,return,resolve,arguments,exchange,binding,context,provided,args,flat,map,args,object,value,try,reflection,utils,make,accessible,get,bridged,method,value,get,bridged,method,invoke,get,bean,args,catch,illegal,argument,exception,ex,assert,target,bean,get,bridged,method,get,bean,args,string,text,ex,get,message,null,ex,get,message,illegal,argument,throw,new,illegal,state,exception,format,invoke,error,text,args,ex,catch,invocation,target,exception,ex,return,mono,error,ex,get,target,exception,catch,throwable,ex,return,mono,error,new,illegal,state,exception,format,invoke,error,invocation,failure,args,ex,http,status,status,get,response,status,if,status,null,exchange,get,response,set,status,code,status,method,parameter,return,type,get,return,type,reactive,adapter,adapter,this,reactive,adapter,registry,get,adapter,return,type,get,parameter,type,boolean,async,void,is,async,void,return,type,return,type,adapter,if,value,null,async,void,is,response,handled,args,exchange,return,async,void,mono,from,adapter,to,publisher,value,mono,empty,handler,result,result,new,handler,result,this,value,return,type,binding,context,return,mono,just,result
InvocableHandlerMethod -> private void assertTargetBean(Method method, Object targetBean, Object[] args);1529721864;Assert that the target bean class is an instance of the class where the given_method is declared. In some cases the actual controller instance at request-_processing time may be a JDK dynamic proxy (lazy initialization, prototype_beans, and others). {@code @Controller}'s that require proxying should prefer_class-based proxy mechanisms.;private void assertTargetBean(Method method, Object targetBean, Object[] args) {_		Class<?> methodDeclaringClass = method.getDeclaringClass()__		Class<?> targetBeanClass = targetBean.getClass()__		if (!methodDeclaringClass.isAssignableFrom(targetBeanClass)) {_			String text = "The mapped handler method class '" + methodDeclaringClass.getName() +_					"' is not an instance of the actual controller bean class '" +_					targetBeanClass.getName() + "'. If the controller requires proxying " +_					"(e.g. due to @Transactional), please use class-based proxying."__			throw new IllegalStateException(formatInvokeError(text, args))__		}_	};assert,that,the,target,bean,class,is,an,instance,of,the,class,where,the,given,method,is,declared,in,some,cases,the,actual,controller,instance,at,request,processing,time,may,be,a,jdk,dynamic,proxy,lazy,initialization,prototype,beans,and,others,code,controller,s,that,require,proxying,should,prefer,class,based,proxy,mechanisms;private,void,assert,target,bean,method,method,object,target,bean,object,args,class,method,declaring,class,method,get,declaring,class,class,target,bean,class,target,bean,get,class,if,method,declaring,class,is,assignable,from,target,bean,class,string,text,the,mapped,handler,method,class,method,declaring,class,get,name,is,not,an,instance,of,the,actual,controller,bean,class,target,bean,class,get,name,if,the,controller,requires,proxying,e,g,due,to,transactional,please,use,class,based,proxying,throw,new,illegal,state,exception,format,invoke,error,text,args
InvocableHandlerMethod -> private void assertTargetBean(Method method, Object targetBean, Object[] args);1530174524;Assert that the target bean class is an instance of the class where the given_method is declared. In some cases the actual controller instance at request-_processing time may be a JDK dynamic proxy (lazy initialization, prototype_beans, and others). {@code @Controller}'s that require proxying should prefer_class-based proxy mechanisms.;private void assertTargetBean(Method method, Object targetBean, Object[] args) {_		Class<?> methodDeclaringClass = method.getDeclaringClass()__		Class<?> targetBeanClass = targetBean.getClass()__		if (!methodDeclaringClass.isAssignableFrom(targetBeanClass)) {_			String text = "The mapped handler method class '" + methodDeclaringClass.getName() +_					"' is not an instance of the actual controller bean class '" +_					targetBeanClass.getName() + "'. If the controller requires proxying " +_					"(e.g. due to @Transactional), please use class-based proxying."__			throw new IllegalStateException(formatInvokeError(text, args))__		}_	};assert,that,the,target,bean,class,is,an,instance,of,the,class,where,the,given,method,is,declared,in,some,cases,the,actual,controller,instance,at,request,processing,time,may,be,a,jdk,dynamic,proxy,lazy,initialization,prototype,beans,and,others,code,controller,s,that,require,proxying,should,prefer,class,based,proxy,mechanisms;private,void,assert,target,bean,method,method,object,target,bean,object,args,class,method,declaring,class,method,get,declaring,class,class,target,bean,class,target,bean,get,class,if,method,declaring,class,is,assignable,from,target,bean,class,string,text,the,mapped,handler,method,class,method,declaring,class,get,name,is,not,an,instance,of,the,actual,controller,bean,class,target,bean,class,get,name,if,the,controller,requires,proxying,e,g,due,to,transactional,please,use,class,based,proxying,throw,new,illegal,state,exception,format,invoke,error,text,args
InvocableHandlerMethod -> private void assertTargetBean(Method method, Object targetBean, Object[] args);1530190293;Assert that the target bean class is an instance of the class where the given_method is declared. In some cases the actual controller instance at request-_processing time may be a JDK dynamic proxy (lazy initialization, prototype_beans, and others). {@code @Controller}'s that require proxying should prefer_class-based proxy mechanisms.;private void assertTargetBean(Method method, Object targetBean, Object[] args) {_		Class<?> methodDeclaringClass = method.getDeclaringClass()__		Class<?> targetBeanClass = targetBean.getClass()__		if (!methodDeclaringClass.isAssignableFrom(targetBeanClass)) {_			String text = "The mapped handler method class '" + methodDeclaringClass.getName() +_					"' is not an instance of the actual controller bean class '" +_					targetBeanClass.getName() + "'. If the controller requires proxying " +_					"(e.g. due to @Transactional), please use class-based proxying."__			throw new IllegalStateException(formatInvokeError(text, args))__		}_	};assert,that,the,target,bean,class,is,an,instance,of,the,class,where,the,given,method,is,declared,in,some,cases,the,actual,controller,instance,at,request,processing,time,may,be,a,jdk,dynamic,proxy,lazy,initialization,prototype,beans,and,others,code,controller,s,that,require,proxying,should,prefer,class,based,proxy,mechanisms;private,void,assert,target,bean,method,method,object,target,bean,object,args,class,method,declaring,class,method,get,declaring,class,class,target,bean,class,target,bean,get,class,if,method,declaring,class,is,assignable,from,target,bean,class,string,text,the,mapped,handler,method,class,method,declaring,class,get,name,is,not,an,instance,of,the,actual,controller,bean,class,target,bean,class,get,name,if,the,controller,requires,proxying,e,g,due,to,transactional,please,use,class,based,proxying,throw,new,illegal,state,exception,format,invoke,error,text,args
InvocableHandlerMethod -> private void assertTargetBean(Method method, Object targetBean, Object[] args);1530793633;Assert that the target bean class is an instance of the class where the given_method is declared. In some cases the actual controller instance at request-_processing time may be a JDK dynamic proxy (lazy initialization, prototype_beans, and others). {@code @Controller}'s that require proxying should prefer_class-based proxy mechanisms.;private void assertTargetBean(Method method, Object targetBean, Object[] args) {_		Class<?> methodDeclaringClass = method.getDeclaringClass()__		Class<?> targetBeanClass = targetBean.getClass()__		if (!methodDeclaringClass.isAssignableFrom(targetBeanClass)) {_			String text = "The mapped handler method class '" + methodDeclaringClass.getName() +_					"' is not an instance of the actual controller bean class '" +_					targetBeanClass.getName() + "'. If the controller requires proxying " +_					"(e.g. due to @Transactional), please use class-based proxying."__			throw new IllegalStateException(formatInvokeError(text, args))__		}_	};assert,that,the,target,bean,class,is,an,instance,of,the,class,where,the,given,method,is,declared,in,some,cases,the,actual,controller,instance,at,request,processing,time,may,be,a,jdk,dynamic,proxy,lazy,initialization,prototype,beans,and,others,code,controller,s,that,require,proxying,should,prefer,class,based,proxy,mechanisms;private,void,assert,target,bean,method,method,object,target,bean,object,args,class,method,declaring,class,method,get,declaring,class,class,target,bean,class,target,bean,get,class,if,method,declaring,class,is,assignable,from,target,bean,class,string,text,the,mapped,handler,method,class,method,declaring,class,get,name,is,not,an,instance,of,the,actual,controller,bean,class,target,bean,class,get,name,if,the,controller,requires,proxying,e,g,due,to,transactional,please,use,class,based,proxying,throw,new,illegal,state,exception,format,invoke,error,text,args
InvocableHandlerMethod -> private void assertTargetBean(Method method, Object targetBean, Object[] args);1540931761;Assert that the target bean class is an instance of the class where the given_method is declared. In some cases the actual controller instance at request-_processing time may be a JDK dynamic proxy (lazy initialization, prototype_beans, and others). {@code @Controller}'s that require proxying should prefer_class-based proxy mechanisms.;private void assertTargetBean(Method method, Object targetBean, Object[] args) {_		Class<?> methodDeclaringClass = method.getDeclaringClass()__		Class<?> targetBeanClass = targetBean.getClass()__		if (!methodDeclaringClass.isAssignableFrom(targetBeanClass)) {_			String text = "The mapped handler method class '" + methodDeclaringClass.getName() +_					"' is not an instance of the actual controller bean class '" +_					targetBeanClass.getName() + "'. If the controller requires proxying " +_					"(e.g. due to @Transactional), please use class-based proxying."__			throw new IllegalStateException(formatInvokeError(text, args))__		}_	};assert,that,the,target,bean,class,is,an,instance,of,the,class,where,the,given,method,is,declared,in,some,cases,the,actual,controller,instance,at,request,processing,time,may,be,a,jdk,dynamic,proxy,lazy,initialization,prototype,beans,and,others,code,controller,s,that,require,proxying,should,prefer,class,based,proxy,mechanisms;private,void,assert,target,bean,method,method,object,target,bean,object,args,class,method,declaring,class,method,get,declaring,class,class,target,bean,class,target,bean,get,class,if,method,declaring,class,is,assignable,from,target,bean,class,string,text,the,mapped,handler,method,class,method,declaring,class,get,name,is,not,an,instance,of,the,actual,controller,bean,class,target,bean,class,get,name,if,the,controller,requires,proxying,e,g,due,to,transactional,please,use,class,based,proxying,throw,new,illegal,state,exception,format,invoke,error,text,args
InvocableHandlerMethod -> public ParameterNameDiscoverer getParameterNameDiscoverer();1489433860;Return the configured parameter name discoverer.;public ParameterNameDiscoverer getParameterNameDiscoverer() {_		return this.parameterNameDiscoverer__	};return,the,configured,parameter,name,discoverer;public,parameter,name,discoverer,get,parameter,name,discoverer,return,this,parameter,name,discoverer
InvocableHandlerMethod -> public ParameterNameDiscoverer getParameterNameDiscoverer();1489433883;Return the configured parameter name discoverer.;public ParameterNameDiscoverer getParameterNameDiscoverer() {_		return this.parameterNameDiscoverer__	};return,the,configured,parameter,name,discoverer;public,parameter,name,discoverer,get,parameter,name,discoverer,return,this,parameter,name,discoverer
InvocableHandlerMethod -> public ParameterNameDiscoverer getParameterNameDiscoverer();1491659765;Return the configured parameter name discoverer.;public ParameterNameDiscoverer getParameterNameDiscoverer() {_		return this.parameterNameDiscoverer__	};return,the,configured,parameter,name,discoverer;public,parameter,name,discoverer,get,parameter,name,discoverer,return,this,parameter,name,discoverer
InvocableHandlerMethod -> public ParameterNameDiscoverer getParameterNameDiscoverer();1491927184;Return the configured parameter name discoverer.;public ParameterNameDiscoverer getParameterNameDiscoverer() {_		return this.parameterNameDiscoverer__	};return,the,configured,parameter,name,discoverer;public,parameter,name,discoverer,get,parameter,name,discoverer,return,this,parameter,name,discoverer
InvocableHandlerMethod -> public ParameterNameDiscoverer getParameterNameDiscoverer();1496837955;Return the configured parameter name discoverer.;public ParameterNameDiscoverer getParameterNameDiscoverer() {_		return this.parameterNameDiscoverer__	};return,the,configured,parameter,name,discoverer;public,parameter,name,discoverer,get,parameter,name,discoverer,return,this,parameter,name,discoverer
InvocableHandlerMethod -> public ParameterNameDiscoverer getParameterNameDiscoverer();1503338048;Return the configured parameter name discoverer.;public ParameterNameDiscoverer getParameterNameDiscoverer() {_		return this.parameterNameDiscoverer__	};return,the,configured,parameter,name,discoverer;public,parameter,name,discoverer,get,parameter,name,discoverer,return,this,parameter,name,discoverer
InvocableHandlerMethod -> public ParameterNameDiscoverer getParameterNameDiscoverer();1508375247;Return the configured parameter name discoverer.;public ParameterNameDiscoverer getParameterNameDiscoverer() {_		return this.parameterNameDiscoverer__	};return,the,configured,parameter,name,discoverer;public,parameter,name,discoverer,get,parameter,name,discoverer,return,this,parameter,name,discoverer
InvocableHandlerMethod -> public ParameterNameDiscoverer getParameterNameDiscoverer();1511215342;Return the configured parameter name discoverer.;public ParameterNameDiscoverer getParameterNameDiscoverer() {_		return this.parameterNameDiscoverer__	};return,the,configured,parameter,name,discoverer;public,parameter,name,discoverer,get,parameter,name,discoverer,return,this,parameter,name,discoverer
InvocableHandlerMethod -> public ParameterNameDiscoverer getParameterNameDiscoverer();1529721864;Return the configured parameter name discoverer.;public ParameterNameDiscoverer getParameterNameDiscoverer() {_		return this.parameterNameDiscoverer__	};return,the,configured,parameter,name,discoverer;public,parameter,name,discoverer,get,parameter,name,discoverer,return,this,parameter,name,discoverer
InvocableHandlerMethod -> public ParameterNameDiscoverer getParameterNameDiscoverer();1530174524;Return the configured parameter name discoverer.;public ParameterNameDiscoverer getParameterNameDiscoverer() {_		return this.parameterNameDiscoverer__	};return,the,configured,parameter,name,discoverer;public,parameter,name,discoverer,get,parameter,name,discoverer,return,this,parameter,name,discoverer
InvocableHandlerMethod -> public ParameterNameDiscoverer getParameterNameDiscoverer();1530190293;Return the configured parameter name discoverer.;public ParameterNameDiscoverer getParameterNameDiscoverer() {_		return this.parameterNameDiscoverer__	};return,the,configured,parameter,name,discoverer;public,parameter,name,discoverer,get,parameter,name,discoverer,return,this,parameter,name,discoverer
InvocableHandlerMethod -> public ParameterNameDiscoverer getParameterNameDiscoverer();1530793633;Return the configured parameter name discoverer.;public ParameterNameDiscoverer getParameterNameDiscoverer() {_		return this.parameterNameDiscoverer__	};return,the,configured,parameter,name,discoverer;public,parameter,name,discoverer,get,parameter,name,discoverer,return,this,parameter,name,discoverer
InvocableHandlerMethod -> public ParameterNameDiscoverer getParameterNameDiscoverer();1540931761;Return the configured parameter name discoverer.;public ParameterNameDiscoverer getParameterNameDiscoverer() {_		return this.parameterNameDiscoverer__	};return,the,configured,parameter,name,discoverer;public,parameter,name,discoverer,get,parameter,name,discoverer,return,this,parameter,name,discoverer
InvocableHandlerMethod -> public ParameterNameDiscoverer getParameterNameDiscoverer();1540934109;Return the configured parameter name discoverer.;public ParameterNameDiscoverer getParameterNameDiscoverer() {_		return this.parameterNameDiscoverer__	};return,the,configured,parameter,name,discoverer;public,parameter,name,discoverer,get,parameter,name,discoverer,return,this,parameter,name,discoverer
InvocableHandlerMethod -> public ParameterNameDiscoverer getParameterNameDiscoverer();1541096460;Return the configured parameter name discoverer.;public ParameterNameDiscoverer getParameterNameDiscoverer() {_		return this.parameterNameDiscoverer__	};return,the,configured,parameter,name,discoverer;public,parameter,name,discoverer,get,parameter,name,discoverer,return,this,parameter,name,discoverer
InvocableHandlerMethod -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers);1485986572;Configure the argument resolvers to use to use for resolving method_argument values against a {@code ServerWebExchange}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {_		this.resolvers.clear()__		this.resolvers.addAll(resolvers)__	};configure,the,argument,resolvers,to,use,to,use,for,resolving,method,argument,values,against,a,code,server,web,exchange;public,void,set,argument,resolvers,list,handler,method,argument,resolver,resolvers,this,resolvers,clear,this,resolvers,add,all,resolvers
InvocableHandlerMethod -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers);1486632602;Configure the argument resolvers to use to use for resolving method_argument values against a {@code ServerWebExchange}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {_		this.resolvers.clear()__		this.resolvers.addAll(resolvers)__	};configure,the,argument,resolvers,to,use,to,use,for,resolving,method,argument,values,against,a,code,server,web,exchange;public,void,set,argument,resolvers,list,handler,method,argument,resolver,resolvers,this,resolvers,clear,this,resolvers,add,all,resolvers
InvocableHandlerMethod -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers);1489433860;Configure the argument resolvers to use to use for resolving method_argument values against a {@code ServerWebExchange}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {_		this.resolvers.clear()__		this.resolvers.addAll(resolvers)__	};configure,the,argument,resolvers,to,use,to,use,for,resolving,method,argument,values,against,a,code,server,web,exchange;public,void,set,argument,resolvers,list,handler,method,argument,resolver,resolvers,this,resolvers,clear,this,resolvers,add,all,resolvers
InvocableHandlerMethod -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers);1489433883;Configure the argument resolvers to use to use for resolving method_argument values against a {@code ServerWebExchange}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {_		this.resolvers.clear()__		this.resolvers.addAll(resolvers)__	};configure,the,argument,resolvers,to,use,to,use,for,resolving,method,argument,values,against,a,code,server,web,exchange;public,void,set,argument,resolvers,list,handler,method,argument,resolver,resolvers,this,resolvers,clear,this,resolvers,add,all,resolvers
InvocableHandlerMethod -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers);1491659765;Configure the argument resolvers to use to use for resolving method_argument values against a {@code ServerWebExchange}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {_		this.resolvers.clear()__		this.resolvers.addAll(resolvers)__	};configure,the,argument,resolvers,to,use,to,use,for,resolving,method,argument,values,against,a,code,server,web,exchange;public,void,set,argument,resolvers,list,handler,method,argument,resolver,resolvers,this,resolvers,clear,this,resolvers,add,all,resolvers
InvocableHandlerMethod -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers);1491927184;Configure the argument resolvers to use to use for resolving method_argument values against a {@code ServerWebExchange}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {_		this.resolvers.clear()__		this.resolvers.addAll(resolvers)__	};configure,the,argument,resolvers,to,use,to,use,for,resolving,method,argument,values,against,a,code,server,web,exchange;public,void,set,argument,resolvers,list,handler,method,argument,resolver,resolvers,this,resolvers,clear,this,resolvers,add,all,resolvers
InvocableHandlerMethod -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers);1496837955;Configure the argument resolvers to use to use for resolving method_argument values against a {@code ServerWebExchange}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {_		this.resolvers.clear()__		this.resolvers.addAll(resolvers)__	};configure,the,argument,resolvers,to,use,to,use,for,resolving,method,argument,values,against,a,code,server,web,exchange;public,void,set,argument,resolvers,list,handler,method,argument,resolver,resolvers,this,resolvers,clear,this,resolvers,add,all,resolvers
InvocableHandlerMethod -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers);1503338048;Configure the argument resolvers to use to use for resolving method_argument values against a {@code ServerWebExchange}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {_		this.resolvers.clear()__		this.resolvers.addAll(resolvers)__	};configure,the,argument,resolvers,to,use,to,use,for,resolving,method,argument,values,against,a,code,server,web,exchange;public,void,set,argument,resolvers,list,handler,method,argument,resolver,resolvers,this,resolvers,clear,this,resolvers,add,all,resolvers
InvocableHandlerMethod -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers);1508375247;Configure the argument resolvers to use to use for resolving method_argument values against a {@code ServerWebExchange}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {_		this.resolvers.clear()__		this.resolvers.addAll(resolvers)__	};configure,the,argument,resolvers,to,use,to,use,for,resolving,method,argument,values,against,a,code,server,web,exchange;public,void,set,argument,resolvers,list,handler,method,argument,resolver,resolvers,this,resolvers,clear,this,resolvers,add,all,resolvers
InvocableHandlerMethod -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers);1511215342;Configure the argument resolvers to use to use for resolving method_argument values against a {@code ServerWebExchange}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {_		this.resolvers.clear()__		this.resolvers.addAll(resolvers)__	};configure,the,argument,resolvers,to,use,to,use,for,resolving,method,argument,values,against,a,code,server,web,exchange;public,void,set,argument,resolvers,list,handler,method,argument,resolver,resolvers,this,resolvers,clear,this,resolvers,add,all,resolvers
InvocableHandlerMethod -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers);1529721864;Configure the argument resolvers to use to use for resolving method_argument values against a {@code ServerWebExchange}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {_		this.resolvers.clear()__		this.resolvers.addAll(resolvers)__	};configure,the,argument,resolvers,to,use,to,use,for,resolving,method,argument,values,against,a,code,server,web,exchange;public,void,set,argument,resolvers,list,handler,method,argument,resolver,resolvers,this,resolvers,clear,this,resolvers,add,all,resolvers
InvocableHandlerMethod -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers);1530174524;Configure the argument resolvers to use to use for resolving method_argument values against a {@code ServerWebExchange}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {_		this.resolvers.clear()__		this.resolvers.addAll(resolvers)__	};configure,the,argument,resolvers,to,use,to,use,for,resolving,method,argument,values,against,a,code,server,web,exchange;public,void,set,argument,resolvers,list,handler,method,argument,resolver,resolvers,this,resolvers,clear,this,resolvers,add,all,resolvers
InvocableHandlerMethod -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers);1530190293;Configure the argument resolvers to use to use for resolving method_argument values against a {@code ServerWebExchange}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {_		this.resolvers.clear()__		this.resolvers.addAll(resolvers)__	};configure,the,argument,resolvers,to,use,to,use,for,resolving,method,argument,values,against,a,code,server,web,exchange;public,void,set,argument,resolvers,list,handler,method,argument,resolver,resolvers,this,resolvers,clear,this,resolvers,add,all,resolvers
InvocableHandlerMethod -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers);1530793633;Configure the argument resolvers to use to use for resolving method_argument values against a {@code ServerWebExchange}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {_		this.resolvers.clear()__		this.resolvers.addAll(resolvers)__	};configure,the,argument,resolvers,to,use,to,use,for,resolving,method,argument,values,against,a,code,server,web,exchange;public,void,set,argument,resolvers,list,handler,method,argument,resolver,resolvers,this,resolvers,clear,this,resolvers,add,all,resolvers
InvocableHandlerMethod -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers);1540931761;Configure the argument resolvers to use to use for resolving method_argument values against a {@code ServerWebExchange}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {_		this.resolvers.addResolvers(resolvers)__	};configure,the,argument,resolvers,to,use,to,use,for,resolving,method,argument,values,against,a,code,server,web,exchange;public,void,set,argument,resolvers,list,handler,method,argument,resolver,resolvers,this,resolvers,add,resolvers,resolvers
InvocableHandlerMethod -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers);1540934109;Configure the argument resolvers to use to use for resolving method_argument values against a {@code ServerWebExchange}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {_		this.resolvers.addResolvers(resolvers)__	};configure,the,argument,resolvers,to,use,to,use,for,resolving,method,argument,values,against,a,code,server,web,exchange;public,void,set,argument,resolvers,list,handler,method,argument,resolver,resolvers,this,resolvers,add,resolvers,resolvers
InvocableHandlerMethod -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers);1541096460;Configure the argument resolvers to use to use for resolving method_argument values against a {@code ServerWebExchange}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {_		this.resolvers.addResolvers(resolvers)__	};configure,the,argument,resolvers,to,use,to,use,for,resolving,method,argument,values,against,a,code,server,web,exchange;public,void,set,argument,resolvers,list,handler,method,argument,resolver,resolvers,this,resolvers,add,resolvers,resolvers
InvocableHandlerMethod -> public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer);1485986572;Set the ParameterNameDiscoverer for resolving parameter names when needed_(e.g. default request attribute name)._<p>Default is a {@link DefaultParameterNameDiscoverer}.;public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer) {_		this.parameterNameDiscoverer = nameDiscoverer__	};set,the,parameter,name,discoverer,for,resolving,parameter,names,when,needed,e,g,default,request,attribute,name,p,default,is,a,link,default,parameter,name,discoverer;public,void,set,parameter,name,discoverer,parameter,name,discoverer,name,discoverer,this,parameter,name,discoverer,name,discoverer
InvocableHandlerMethod -> public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer);1486632602;Set the ParameterNameDiscoverer for resolving parameter names when needed_(e.g. default request attribute name)._<p>Default is a {@link DefaultParameterNameDiscoverer}.;public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer) {_		this.parameterNameDiscoverer = nameDiscoverer__	};set,the,parameter,name,discoverer,for,resolving,parameter,names,when,needed,e,g,default,request,attribute,name,p,default,is,a,link,default,parameter,name,discoverer;public,void,set,parameter,name,discoverer,parameter,name,discoverer,name,discoverer,this,parameter,name,discoverer,name,discoverer
InvocableHandlerMethod -> public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer);1489433860;Set the ParameterNameDiscoverer for resolving parameter names when needed_(e.g. default request attribute name)._<p>Default is a {@link DefaultParameterNameDiscoverer}.;public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer) {_		this.parameterNameDiscoverer = nameDiscoverer__	};set,the,parameter,name,discoverer,for,resolving,parameter,names,when,needed,e,g,default,request,attribute,name,p,default,is,a,link,default,parameter,name,discoverer;public,void,set,parameter,name,discoverer,parameter,name,discoverer,name,discoverer,this,parameter,name,discoverer,name,discoverer
InvocableHandlerMethod -> public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer);1489433883;Set the ParameterNameDiscoverer for resolving parameter names when needed_(e.g. default request attribute name)._<p>Default is a {@link DefaultParameterNameDiscoverer}.;public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer) {_		this.parameterNameDiscoverer = nameDiscoverer__	};set,the,parameter,name,discoverer,for,resolving,parameter,names,when,needed,e,g,default,request,attribute,name,p,default,is,a,link,default,parameter,name,discoverer;public,void,set,parameter,name,discoverer,parameter,name,discoverer,name,discoverer,this,parameter,name,discoverer,name,discoverer
InvocableHandlerMethod -> public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer);1491659765;Set the ParameterNameDiscoverer for resolving parameter names when needed_(e.g. default request attribute name)._<p>Default is a {@link DefaultParameterNameDiscoverer}.;public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer) {_		this.parameterNameDiscoverer = nameDiscoverer__	};set,the,parameter,name,discoverer,for,resolving,parameter,names,when,needed,e,g,default,request,attribute,name,p,default,is,a,link,default,parameter,name,discoverer;public,void,set,parameter,name,discoverer,parameter,name,discoverer,name,discoverer,this,parameter,name,discoverer,name,discoverer
InvocableHandlerMethod -> public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer);1491927184;Set the ParameterNameDiscoverer for resolving parameter names when needed_(e.g. default request attribute name)._<p>Default is a {@link DefaultParameterNameDiscoverer}.;public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer) {_		this.parameterNameDiscoverer = nameDiscoverer__	};set,the,parameter,name,discoverer,for,resolving,parameter,names,when,needed,e,g,default,request,attribute,name,p,default,is,a,link,default,parameter,name,discoverer;public,void,set,parameter,name,discoverer,parameter,name,discoverer,name,discoverer,this,parameter,name,discoverer,name,discoverer
InvocableHandlerMethod -> public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer);1496837955;Set the ParameterNameDiscoverer for resolving parameter names when needed_(e.g. default request attribute name)._<p>Default is a {@link DefaultParameterNameDiscoverer}.;public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer) {_		this.parameterNameDiscoverer = nameDiscoverer__	};set,the,parameter,name,discoverer,for,resolving,parameter,names,when,needed,e,g,default,request,attribute,name,p,default,is,a,link,default,parameter,name,discoverer;public,void,set,parameter,name,discoverer,parameter,name,discoverer,name,discoverer,this,parameter,name,discoverer,name,discoverer
InvocableHandlerMethod -> public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer);1503338048;Set the ParameterNameDiscoverer for resolving parameter names when needed_(e.g. default request attribute name)._<p>Default is a {@link DefaultParameterNameDiscoverer}.;public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer) {_		this.parameterNameDiscoverer = nameDiscoverer__	};set,the,parameter,name,discoverer,for,resolving,parameter,names,when,needed,e,g,default,request,attribute,name,p,default,is,a,link,default,parameter,name,discoverer;public,void,set,parameter,name,discoverer,parameter,name,discoverer,name,discoverer,this,parameter,name,discoverer,name,discoverer
InvocableHandlerMethod -> public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer);1508375247;Set the ParameterNameDiscoverer for resolving parameter names when needed_(e.g. default request attribute name)._<p>Default is a {@link DefaultParameterNameDiscoverer}.;public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer) {_		this.parameterNameDiscoverer = nameDiscoverer__	};set,the,parameter,name,discoverer,for,resolving,parameter,names,when,needed,e,g,default,request,attribute,name,p,default,is,a,link,default,parameter,name,discoverer;public,void,set,parameter,name,discoverer,parameter,name,discoverer,name,discoverer,this,parameter,name,discoverer,name,discoverer
InvocableHandlerMethod -> public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer);1511215342;Set the ParameterNameDiscoverer for resolving parameter names when needed_(e.g. default request attribute name)._<p>Default is a {@link DefaultParameterNameDiscoverer}.;public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer) {_		this.parameterNameDiscoverer = nameDiscoverer__	};set,the,parameter,name,discoverer,for,resolving,parameter,names,when,needed,e,g,default,request,attribute,name,p,default,is,a,link,default,parameter,name,discoverer;public,void,set,parameter,name,discoverer,parameter,name,discoverer,name,discoverer,this,parameter,name,discoverer,name,discoverer
InvocableHandlerMethod -> public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer);1529721864;Set the ParameterNameDiscoverer for resolving parameter names when needed_(e.g. default request attribute name)._<p>Default is a {@link DefaultParameterNameDiscoverer}.;public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer) {_		this.parameterNameDiscoverer = nameDiscoverer__	};set,the,parameter,name,discoverer,for,resolving,parameter,names,when,needed,e,g,default,request,attribute,name,p,default,is,a,link,default,parameter,name,discoverer;public,void,set,parameter,name,discoverer,parameter,name,discoverer,name,discoverer,this,parameter,name,discoverer,name,discoverer
InvocableHandlerMethod -> public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer);1530174524;Set the ParameterNameDiscoverer for resolving parameter names when needed_(e.g. default request attribute name)._<p>Default is a {@link DefaultParameterNameDiscoverer}.;public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer) {_		this.parameterNameDiscoverer = nameDiscoverer__	};set,the,parameter,name,discoverer,for,resolving,parameter,names,when,needed,e,g,default,request,attribute,name,p,default,is,a,link,default,parameter,name,discoverer;public,void,set,parameter,name,discoverer,parameter,name,discoverer,name,discoverer,this,parameter,name,discoverer,name,discoverer
InvocableHandlerMethod -> public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer);1530190293;Set the ParameterNameDiscoverer for resolving parameter names when needed_(e.g. default request attribute name)._<p>Default is a {@link DefaultParameterNameDiscoverer}.;public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer) {_		this.parameterNameDiscoverer = nameDiscoverer__	};set,the,parameter,name,discoverer,for,resolving,parameter,names,when,needed,e,g,default,request,attribute,name,p,default,is,a,link,default,parameter,name,discoverer;public,void,set,parameter,name,discoverer,parameter,name,discoverer,name,discoverer,this,parameter,name,discoverer,name,discoverer
InvocableHandlerMethod -> public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer);1530793633;Set the ParameterNameDiscoverer for resolving parameter names when needed_(e.g. default request attribute name)._<p>Default is a {@link DefaultParameterNameDiscoverer}.;public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer) {_		this.parameterNameDiscoverer = nameDiscoverer__	};set,the,parameter,name,discoverer,for,resolving,parameter,names,when,needed,e,g,default,request,attribute,name,p,default,is,a,link,default,parameter,name,discoverer;public,void,set,parameter,name,discoverer,parameter,name,discoverer,name,discoverer,this,parameter,name,discoverer,name,discoverer
InvocableHandlerMethod -> public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer);1540931761;Set the ParameterNameDiscoverer for resolving parameter names when needed_(e.g. default request attribute name)._<p>Default is a {@link DefaultParameterNameDiscoverer}.;public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer) {_		this.parameterNameDiscoverer = nameDiscoverer__	};set,the,parameter,name,discoverer,for,resolving,parameter,names,when,needed,e,g,default,request,attribute,name,p,default,is,a,link,default,parameter,name,discoverer;public,void,set,parameter,name,discoverer,parameter,name,discoverer,name,discoverer,this,parameter,name,discoverer,name,discoverer
InvocableHandlerMethod -> public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer);1540934109;Set the ParameterNameDiscoverer for resolving parameter names when needed_(e.g. default request attribute name)._<p>Default is a {@link DefaultParameterNameDiscoverer}.;public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer) {_		this.parameterNameDiscoverer = nameDiscoverer__	};set,the,parameter,name,discoverer,for,resolving,parameter,names,when,needed,e,g,default,request,attribute,name,p,default,is,a,link,default,parameter,name,discoverer;public,void,set,parameter,name,discoverer,parameter,name,discoverer,name,discoverer,this,parameter,name,discoverer,name,discoverer
InvocableHandlerMethod -> public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer);1541096460;Set the ParameterNameDiscoverer for resolving parameter names when needed_(e.g. default request attribute name)._<p>Default is a {@link DefaultParameterNameDiscoverer}.;public void setParameterNameDiscoverer(ParameterNameDiscoverer nameDiscoverer) {_		this.parameterNameDiscoverer = nameDiscoverer__	};set,the,parameter,name,discoverer,for,resolving,parameter,names,when,needed,e,g,default,request,attribute,name,p,default,is,a,link,default,parameter,name,discoverer;public,void,set,parameter,name,discoverer,parameter,name,discoverer,name,discoverer,this,parameter,name,discoverer,name,discoverer
InvocableHandlerMethod -> public List<HandlerMethodArgumentResolver> getResolvers();1489433860;Return the conifgured argument resolvers.;public List<HandlerMethodArgumentResolver> getResolvers() {_		return this.resolvers__	};return,the,conifgured,argument,resolvers;public,list,handler,method,argument,resolver,get,resolvers,return,this,resolvers
InvocableHandlerMethod -> public List<HandlerMethodArgumentResolver> getResolvers();1489433883;Return the configured argument resolvers.;public List<HandlerMethodArgumentResolver> getResolvers() {_		return this.resolvers__	};return,the,configured,argument,resolvers;public,list,handler,method,argument,resolver,get,resolvers,return,this,resolvers
InvocableHandlerMethod -> public List<HandlerMethodArgumentResolver> getResolvers();1491659765;Return the configured argument resolvers.;public List<HandlerMethodArgumentResolver> getResolvers() {_		return this.resolvers__	};return,the,configured,argument,resolvers;public,list,handler,method,argument,resolver,get,resolvers,return,this,resolvers
InvocableHandlerMethod -> public List<HandlerMethodArgumentResolver> getResolvers();1491927184;Return the configured argument resolvers.;public List<HandlerMethodArgumentResolver> getResolvers() {_		return this.resolvers__	};return,the,configured,argument,resolvers;public,list,handler,method,argument,resolver,get,resolvers,return,this,resolvers
InvocableHandlerMethod -> public List<HandlerMethodArgumentResolver> getResolvers();1496837955;Return the configured argument resolvers.;public List<HandlerMethodArgumentResolver> getResolvers() {_		return this.resolvers__	};return,the,configured,argument,resolvers;public,list,handler,method,argument,resolver,get,resolvers,return,this,resolvers
InvocableHandlerMethod -> public List<HandlerMethodArgumentResolver> getResolvers();1503338048;Return the configured argument resolvers.;public List<HandlerMethodArgumentResolver> getResolvers() {_		return this.resolvers__	};return,the,configured,argument,resolvers;public,list,handler,method,argument,resolver,get,resolvers,return,this,resolvers
InvocableHandlerMethod -> public List<HandlerMethodArgumentResolver> getResolvers();1508375247;Return the configured argument resolvers.;public List<HandlerMethodArgumentResolver> getResolvers() {_		return this.resolvers__	};return,the,configured,argument,resolvers;public,list,handler,method,argument,resolver,get,resolvers,return,this,resolvers
InvocableHandlerMethod -> public List<HandlerMethodArgumentResolver> getResolvers();1511215342;Return the configured argument resolvers.;public List<HandlerMethodArgumentResolver> getResolvers() {_		return this.resolvers__	};return,the,configured,argument,resolvers;public,list,handler,method,argument,resolver,get,resolvers,return,this,resolvers
InvocableHandlerMethod -> public List<HandlerMethodArgumentResolver> getResolvers();1529721864;Return the configured argument resolvers.;public List<HandlerMethodArgumentResolver> getResolvers() {_		return this.resolvers__	};return,the,configured,argument,resolvers;public,list,handler,method,argument,resolver,get,resolvers,return,this,resolvers
InvocableHandlerMethod -> public List<HandlerMethodArgumentResolver> getResolvers();1530174524;Return the configured argument resolvers.;public List<HandlerMethodArgumentResolver> getResolvers() {_		return this.resolvers__	};return,the,configured,argument,resolvers;public,list,handler,method,argument,resolver,get,resolvers,return,this,resolvers
InvocableHandlerMethod -> public List<HandlerMethodArgumentResolver> getResolvers();1530190293;Return the configured argument resolvers.;public List<HandlerMethodArgumentResolver> getResolvers() {_		return this.resolvers__	};return,the,configured,argument,resolvers;public,list,handler,method,argument,resolver,get,resolvers,return,this,resolvers
InvocableHandlerMethod -> public List<HandlerMethodArgumentResolver> getResolvers();1530793633;Return the configured argument resolvers.;public List<HandlerMethodArgumentResolver> getResolvers() {_		return this.resolvers__	};return,the,configured,argument,resolvers;public,list,handler,method,argument,resolver,get,resolvers,return,this,resolvers
InvocableHandlerMethod -> public List<HandlerMethodArgumentResolver> getResolvers();1540931761;Return the configured argument resolvers.;public List<HandlerMethodArgumentResolver> getResolvers() {_		return this.resolvers.getResolvers()__	};return,the,configured,argument,resolvers;public,list,handler,method,argument,resolver,get,resolvers,return,this,resolvers,get,resolvers
InvocableHandlerMethod -> public List<HandlerMethodArgumentResolver> getResolvers();1540934109;Return the configured argument resolvers.;public List<HandlerMethodArgumentResolver> getResolvers() {_		return this.resolvers.getResolvers()__	};return,the,configured,argument,resolvers;public,list,handler,method,argument,resolver,get,resolvers,return,this,resolvers,get,resolvers
InvocableHandlerMethod -> public List<HandlerMethodArgumentResolver> getResolvers();1541096460;Return the configured argument resolvers.;public List<HandlerMethodArgumentResolver> getResolvers() {_		return this.resolvers.getResolvers()__	};return,the,configured,argument,resolvers;public,list,handler,method,argument,resolver,get,resolvers,return,this,resolvers,get,resolvers
InvocableHandlerMethod -> public void setReactiveAdapterRegistry(ReactiveAdapterRegistry registry);1508375247;Configure a reactive registry. This is needed for cases where the response_is fully handled within the controller in combination with an async void_return value._<p>By default this is an instance of {@link ReactiveAdapterRegistry} with_default settings._@param registry the registry to use;public void setReactiveAdapterRegistry(ReactiveAdapterRegistry registry) {_		this.reactiveAdapterRegistry = registry__	};configure,a,reactive,registry,this,is,needed,for,cases,where,the,response,is,fully,handled,within,the,controller,in,combination,with,an,async,void,return,value,p,by,default,this,is,an,instance,of,link,reactive,adapter,registry,with,default,settings,param,registry,the,registry,to,use;public,void,set,reactive,adapter,registry,reactive,adapter,registry,registry,this,reactive,adapter,registry,registry
InvocableHandlerMethod -> public void setReactiveAdapterRegistry(ReactiveAdapterRegistry registry);1511215342;Configure a reactive registry. This is needed for cases where the response_is fully handled within the controller in combination with an async void_return value._<p>By default this is an instance of {@link ReactiveAdapterRegistry} with_default settings._@param registry the registry to use;public void setReactiveAdapterRegistry(ReactiveAdapterRegistry registry) {_		this.reactiveAdapterRegistry = registry__	};configure,a,reactive,registry,this,is,needed,for,cases,where,the,response,is,fully,handled,within,the,controller,in,combination,with,an,async,void,return,value,p,by,default,this,is,an,instance,of,link,reactive,adapter,registry,with,default,settings,param,registry,the,registry,to,use;public,void,set,reactive,adapter,registry,reactive,adapter,registry,registry,this,reactive,adapter,registry,registry
InvocableHandlerMethod -> public void setReactiveAdapterRegistry(ReactiveAdapterRegistry registry);1529721864;Configure a reactive registry. This is needed for cases where the response_is fully handled within the controller in combination with an async void_return value._<p>By default this is an instance of {@link ReactiveAdapterRegistry} with_default settings._@param registry the registry to use;public void setReactiveAdapterRegistry(ReactiveAdapterRegistry registry) {_		this.reactiveAdapterRegistry = registry__	};configure,a,reactive,registry,this,is,needed,for,cases,where,the,response,is,fully,handled,within,the,controller,in,combination,with,an,async,void,return,value,p,by,default,this,is,an,instance,of,link,reactive,adapter,registry,with,default,settings,param,registry,the,registry,to,use;public,void,set,reactive,adapter,registry,reactive,adapter,registry,registry,this,reactive,adapter,registry,registry
InvocableHandlerMethod -> public void setReactiveAdapterRegistry(ReactiveAdapterRegistry registry);1530174524;Configure a reactive registry. This is needed for cases where the response_is fully handled within the controller in combination with an async void_return value._<p>By default this is an instance of {@link ReactiveAdapterRegistry} with_default settings._@param registry the registry to use;public void setReactiveAdapterRegistry(ReactiveAdapterRegistry registry) {_		this.reactiveAdapterRegistry = registry__	};configure,a,reactive,registry,this,is,needed,for,cases,where,the,response,is,fully,handled,within,the,controller,in,combination,with,an,async,void,return,value,p,by,default,this,is,an,instance,of,link,reactive,adapter,registry,with,default,settings,param,registry,the,registry,to,use;public,void,set,reactive,adapter,registry,reactive,adapter,registry,registry,this,reactive,adapter,registry,registry
InvocableHandlerMethod -> public void setReactiveAdapterRegistry(ReactiveAdapterRegistry registry);1530190293;Configure a reactive registry. This is needed for cases where the response_is fully handled within the controller in combination with an async void_return value._<p>By default this is an instance of {@link ReactiveAdapterRegistry} with_default settings._@param registry the registry to use;public void setReactiveAdapterRegistry(ReactiveAdapterRegistry registry) {_		this.reactiveAdapterRegistry = registry__	};configure,a,reactive,registry,this,is,needed,for,cases,where,the,response,is,fully,handled,within,the,controller,in,combination,with,an,async,void,return,value,p,by,default,this,is,an,instance,of,link,reactive,adapter,registry,with,default,settings,param,registry,the,registry,to,use;public,void,set,reactive,adapter,registry,reactive,adapter,registry,registry,this,reactive,adapter,registry,registry
InvocableHandlerMethod -> public void setReactiveAdapterRegistry(ReactiveAdapterRegistry registry);1530793633;Configure a reactive registry. This is needed for cases where the response_is fully handled within the controller in combination with an async void_return value._<p>By default this is an instance of {@link ReactiveAdapterRegistry} with_default settings._@param registry the registry to use;public void setReactiveAdapterRegistry(ReactiveAdapterRegistry registry) {_		this.reactiveAdapterRegistry = registry__	};configure,a,reactive,registry,this,is,needed,for,cases,where,the,response,is,fully,handled,within,the,controller,in,combination,with,an,async,void,return,value,p,by,default,this,is,an,instance,of,link,reactive,adapter,registry,with,default,settings,param,registry,the,registry,to,use;public,void,set,reactive,adapter,registry,reactive,adapter,registry,registry,this,reactive,adapter,registry,registry
InvocableHandlerMethod -> public void setReactiveAdapterRegistry(ReactiveAdapterRegistry registry);1540931761;Configure a reactive registry. This is needed for cases where the response_is fully handled within the controller in combination with an async void_return value._<p>By default this is an instance of {@link ReactiveAdapterRegistry} with_default settings._@param registry the registry to use;public void setReactiveAdapterRegistry(ReactiveAdapterRegistry registry) {_		this.reactiveAdapterRegistry = registry__	};configure,a,reactive,registry,this,is,needed,for,cases,where,the,response,is,fully,handled,within,the,controller,in,combination,with,an,async,void,return,value,p,by,default,this,is,an,instance,of,link,reactive,adapter,registry,with,default,settings,param,registry,the,registry,to,use;public,void,set,reactive,adapter,registry,reactive,adapter,registry,registry,this,reactive,adapter,registry,registry
InvocableHandlerMethod -> public void setReactiveAdapterRegistry(ReactiveAdapterRegistry registry);1540934109;Configure a reactive registry. This is needed for cases where the response_is fully handled within the controller in combination with an async void_return value._<p>By default this is an instance of {@link ReactiveAdapterRegistry} with_default settings._@param registry the registry to use;public void setReactiveAdapterRegistry(ReactiveAdapterRegistry registry) {_		this.reactiveAdapterRegistry = registry__	};configure,a,reactive,registry,this,is,needed,for,cases,where,the,response,is,fully,handled,within,the,controller,in,combination,with,an,async,void,return,value,p,by,default,this,is,an,instance,of,link,reactive,adapter,registry,with,default,settings,param,registry,the,registry,to,use;public,void,set,reactive,adapter,registry,reactive,adapter,registry,registry,this,reactive,adapter,registry,registry
InvocableHandlerMethod -> public void setReactiveAdapterRegistry(ReactiveAdapterRegistry registry);1541096460;Configure a reactive registry. This is needed for cases where the response_is fully handled within the controller in combination with an async void_return value._<p>By default this is an instance of {@link ReactiveAdapterRegistry} with_default settings._@param registry the registry to use;public void setReactiveAdapterRegistry(ReactiveAdapterRegistry registry) {_		this.reactiveAdapterRegistry = registry__	};configure,a,reactive,registry,this,is,needed,for,cases,where,the,response,is,fully,handled,within,the,controller,in,combination,with,an,async,void,return,value,p,by,default,this,is,an,instance,of,link,reactive,adapter,registry,with,default,settings,param,registry,the,registry,to,use;public,void,set,reactive,adapter,registry,reactive,adapter,registry,registry,this,reactive,adapter,registry,registry
