commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Return the status code of this response.  */ ;/**  * Return the status code of this response.  */ HttpStatus statusCode().
true;;0;1;/**  * Return the headers of this response.  */ ;/**  * Return the headers of this response.  */ HttpHeaders headers().
true;;0;1;/**  * Return the cookies of this response.  */ ;/**  * Return the cookies of this response.  */ MultiValueMap<String, ResponseCookie> cookies().
true;;2;1;/**  * Write this response to the given web exchange.  * @param exchange the web exchange to write to  * @param context the context to use when writing  * @return {@code Mono<Void>} to indicate when writing is complete  */ ;/**  * Write this response to the given web exchange.  * @param exchange the web exchange to write to  * @param context the context to use when writing  * @return {@code Mono<Void>} to indicate when writing is complete  */ Mono<Void> writeTo(ServerWebExchange exchange, Context context).
true;static;1;3;/**  * Create a builder with the status code and headers of the given response.  * @param other the response to copy the status and headers from  * @return the created builder  */ ;// Static methods /**  * Create a builder with the status code and headers of the given response.  * @param other the response to copy the status and headers from  * @return the created builder  */ static BodyBuilder from(ServerResponse other) {     return new DefaultServerResponseBuilder(other). }
true;static;1;3;/**  * Create a builder with the given HTTP status.  * @param status the response status  * @return the created builder  */ ;/**  * Create a builder with the given HTTP status.  * @param status the response status  * @return the created builder  */ static BodyBuilder status(HttpStatus status) {     return new DefaultServerResponseBuilder(status). }
true;static;1;3;/**  * Create a builder with the given HTTP status.  * @param status the response status  * @return the created builder  * @since 5.0.3  */ ;/**  * Create a builder with the given HTTP status.  * @param status the response status  * @return the created builder  * @since 5.0.3  */ static BodyBuilder status(int status) {     return new DefaultServerResponseBuilder(status). }
true;static;0;3;/**  * Create a builder with the status set to {@linkplain HttpStatus#OK 200 OK}.  * @return the created builder  */ ;/**  * Create a builder with the status set to {@linkplain HttpStatus#OK 200 OK}.  * @return the created builder  */ static BodyBuilder ok() {     return status(HttpStatus.OK). }
true;static;1;4;/**  * Create a new builder with a {@linkplain HttpStatus#CREATED 201 Created} status  * and a location header set to the given URI.  * @param location the location URI  * @return the created builder  */ ;/**  * Create a new builder with a {@linkplain HttpStatus#CREATED 201 Created} status  * and a location header set to the given URI.  * @param location the location URI  * @return the created builder  */ static BodyBuilder created(URI location) {     BodyBuilder builder = status(HttpStatus.CREATED).     return builder.location(location). }
true;static;0;3;/**  * Create a builder with an {@linkplain HttpStatus#ACCEPTED 202 Accepted} status.  * @return the created builder  */ ;/**  * Create a builder with an {@linkplain HttpStatus#ACCEPTED 202 Accepted} status.  * @return the created builder  */ static BodyBuilder accepted() {     return status(HttpStatus.ACCEPTED). }
true;static;0;3;/**  * Create a builder with a {@linkplain HttpStatus#NO_CONTENT 204 No Content} status.  * @return the created builder  */ ;/**  * Create a builder with a {@linkplain HttpStatus#NO_CONTENT 204 No Content} status.  * @return the created builder  */ static HeadersBuilder<?> noContent() {     return status(HttpStatus.NO_CONTENT). }
true;static;1;4;/**  * Create a builder with a {@linkplain HttpStatus#SEE_OTHER 303 See Other}  * status and a location header set to the given URI.  * @param location the location URI  * @return the created builder  */ ;/**  * Create a builder with a {@linkplain HttpStatus#SEE_OTHER 303 See Other}  * status and a location header set to the given URI.  * @param location the location URI  * @return the created builder  */ static BodyBuilder seeOther(URI location) {     BodyBuilder builder = status(HttpStatus.SEE_OTHER).     return builder.location(location). }
true;static;1;4;/**  * Create a builder with a {@linkplain HttpStatus#TEMPORARY_REDIRECT 307 Temporary Redirect}  * status and a location header set to the given URI.  * @param location the location URI  * @return the created builder  */ ;/**  * Create a builder with a {@linkplain HttpStatus#TEMPORARY_REDIRECT 307 Temporary Redirect}  * status and a location header set to the given URI.  * @param location the location URI  * @return the created builder  */ static BodyBuilder temporaryRedirect(URI location) {     BodyBuilder builder = status(HttpStatus.TEMPORARY_REDIRECT).     return builder.location(location). }
true;static;1;4;/**  * Create a builder with a {@linkplain HttpStatus#PERMANENT_REDIRECT 308 Permanent Redirect}  * status and a location header set to the given URI.  * @param location the location URI  * @return the created builder  */ ;/**  * Create a builder with a {@linkplain HttpStatus#PERMANENT_REDIRECT 308 Permanent Redirect}  * status and a location header set to the given URI.  * @param location the location URI  * @return the created builder  */ static BodyBuilder permanentRedirect(URI location) {     BodyBuilder builder = status(HttpStatus.PERMANENT_REDIRECT).     return builder.location(location). }
true;static;0;3;/**  * Create a builder with a {@linkplain HttpStatus#BAD_REQUEST 400 Bad Request} status.  * @return the created builder  */ ;/**  * Create a builder with a {@linkplain HttpStatus#BAD_REQUEST 400 Bad Request} status.  * @return the created builder  */ static BodyBuilder badRequest() {     return status(HttpStatus.BAD_REQUEST). }
true;static;0;3;/**  * Create a builder with a {@linkplain HttpStatus#NOT_FOUND 404 Not Found} status.  * @return the created builder  */ ;/**  * Create a builder with a {@linkplain HttpStatus#NOT_FOUND 404 Not Found} status.  * @return the created builder  */ static HeadersBuilder<?> notFound() {     return status(HttpStatus.NOT_FOUND). }
true;static;0;3;/**  * Create a builder with an  * {@linkplain HttpStatus#UNPROCESSABLE_ENTITY 422 Unprocessable Entity} status.  * @return the created builder  */ ;/**  * Create a builder with an  * {@linkplain HttpStatus#UNPROCESSABLE_ENTITY 422 Unprocessable Entity} status.  * @return the created builder  */ static BodyBuilder unprocessableEntity() {     return status(HttpStatus.UNPROCESSABLE_ENTITY). }
true;;2;1;/**  * Add the given header value(s) under the given name.  * @param headerName   the header name  * @param headerValues the header value(s)  * @return this builder  * @see HttpHeaders#add(String, String)  */ ;/**  * Add the given header value(s) under the given name.  * @param headerName   the header name  * @param headerValues the header value(s)  * @return this builder  * @see HttpHeaders#add(String, String)  */ B header(String headerName, String... headerValues).
true;;1;1;/**  * Manipulate this response's headers with the given consumer. The  * headers provided to the consumer are "live", so that the consumer can be used to  * {@linkplain HttpHeaders#set(String, String) overwrite} existing header values,  * {@linkplain HttpHeaders#remove(Object) remove} values, or use any of the other  * {@link HttpHeaders} methods.  * @param headersConsumer a function that consumes the {@code HttpHeaders}  * @return this builder  */ ;/**  * Manipulate this response's headers with the given consumer. The  * headers provided to the consumer are "live", so that the consumer can be used to  * {@linkplain HttpHeaders#set(String, String) overwrite} existing header values,  * {@linkplain HttpHeaders#remove(Object) remove} values, or use any of the other  * {@link HttpHeaders} methods.  * @param headersConsumer a function that consumes the {@code HttpHeaders}  * @return this builder  */ B headers(Consumer<HttpHeaders> headersConsumer).
true;;1;1;/**  * Add the given cookie to the response.  * @param cookie the cookie to add  * @return this builder  */ ;/**  * Add the given cookie to the response.  * @param cookie the cookie to add  * @return this builder  */ B cookie(ResponseCookie cookie).
true;;1;1;/**  * Manipulate this response's cookies with the given consumer. The  * cookies provided to the consumer are "live", so that the consumer can be used to  * {@linkplain MultiValueMap#set(Object, Object) overwrite} existing cookies,  * {@linkplain MultiValueMap#remove(Object) remove} cookies, or use any of the other  * {@link MultiValueMap} methods.  * @param cookiesConsumer a function that consumes the cookies  * @return this builder  */ ;/**  * Manipulate this response's cookies with the given consumer. The  * cookies provided to the consumer are "live", so that the consumer can be used to  * {@linkplain MultiValueMap#set(Object, Object) overwrite} existing cookies,  * {@linkplain MultiValueMap#remove(Object) remove} cookies, or use any of the other  * {@link MultiValueMap} methods.  * @param cookiesConsumer a function that consumes the cookies  * @return this builder  */ B cookies(Consumer<MultiValueMap<String, ResponseCookie>> cookiesConsumer).
true;;1;1;/**  * Set the set of allowed {@link HttpMethod HTTP methods}, as specified  * by the {@code Allow} header.  *  * @param allowedMethods the allowed methods  * @return this builder  * @see HttpHeaders#setAllow(Set)  */ ;/**  * Set the set of allowed {@link HttpMethod HTTP methods}, as specified  * by the {@code Allow} header.  *  * @param allowedMethods the allowed methods  * @return this builder  * @see HttpHeaders#setAllow(Set)  */ B allow(HttpMethod... allowedMethods).
true;;1;1;/**  * Set the set of allowed {@link HttpMethod HTTP methods}, as specified  * by the {@code Allow} header.  * @param allowedMethods the allowed methods  * @return this builder  * @see HttpHeaders#setAllow(Set)  */ ;/**  * Set the set of allowed {@link HttpMethod HTTP methods}, as specified  * by the {@code Allow} header.  * @param allowedMethods the allowed methods  * @return this builder  * @see HttpHeaders#setAllow(Set)  */ B allow(Set<HttpMethod> allowedMethods).
true;;1;1;/**  * Set the entity tag of the body, as specified by the {@code ETag} header.  * @param eTag the new entity tag  * @return this builder  * @see HttpHeaders#setETag(String)  */ ;/**  * Set the entity tag of the body, as specified by the {@code ETag} header.  * @param eTag the new entity tag  * @return this builder  * @see HttpHeaders#setETag(String)  */ B eTag(String eTag).
true;;1;1;/**  * Set the time the resource was last changed, as specified by the  * {@code Last-Modified} header.  * @param lastModified the last modified date  * @return this builder  * @see HttpHeaders#setLastModified(long)  */ ;/**  * Set the time the resource was last changed, as specified by the  * {@code Last-Modified} header.  * @param lastModified the last modified date  * @return this builder  * @see HttpHeaders#setLastModified(long)  */ B lastModified(ZonedDateTime lastModified).
true;;1;1;/**  * Set the time the resource was last changed, as specified by the  * {@code Last-Modified} header.  * @param lastModified the last modified date  * @return this builder  * @since 5.1.4  * @see HttpHeaders#setLastModified(long)  */ ;/**  * Set the time the resource was last changed, as specified by the  * {@code Last-Modified} header.  * @param lastModified the last modified date  * @return this builder  * @since 5.1.4  * @see HttpHeaders#setLastModified(long)  */ B lastModified(Instant lastModified).
true;;1;1;/**  * Set the location of a resource, as specified by the {@code Location} header.  * @param location the location  * @return this builder  * @see HttpHeaders#setLocation(URI)  */ ;/**  * Set the location of a resource, as specified by the {@code Location} header.  * @param location the location  * @return this builder  * @see HttpHeaders#setLocation(URI)  */ B location(URI location).
true;;1;1;/**  * Set the caching directives for the resource, as specified by the HTTP 1.1  * {@code Cache-Control} header.  * <p>A {@code CacheControl} instance can be built like  * {@code CacheControl.maxAge(3600).cachePublic().noTransform()}.  * @param cacheControl a builder for cache-related HTTP response headers  * @return this builder  * @see <a href="https://tools.ietf.org/html/rfc7234#section-5.2">RFC-7234 Section 5.2</a>  */ ;/**  * Set the caching directives for the resource, as specified by the HTTP 1.1  * {@code Cache-Control} header.  * <p>A {@code CacheControl} instance can be built like  * {@code CacheControl.maxAge(3600).cachePublic().noTransform()}.  * @param cacheControl a builder for cache-related HTTP response headers  * @return this builder  * @see <a href="https://tools.ietf.org/html/rfc7234#section-5.2">RFC-7234 Section 5.2</a>  */ B cacheControl(CacheControl cacheControl).
true;;1;1;/**  * Configure one or more request header names (e.g. "Accept-Language") to  * add to the "Vary" response header to inform clients that the response is  * subject to content negotiation and variances based on the value of the  * given request headers. The configured request header names are added only  * if not already present in the response "Vary" header.  * @param requestHeaders request header names  * @return this builder  */ ;/**  * Configure one or more request header names (e.g. "Accept-Language") to  * add to the "Vary" response header to inform clients that the response is  * subject to content negotiation and variances based on the value of the  * given request headers. The configured request header names are added only  * if not already present in the response "Vary" header.  * @param requestHeaders request header names  * @return this builder  */ B varyBy(String... requestHeaders).
true;;0;1;/**  * Build the response entity with no body.  */ ;/**  * Build the response entity with no body.  */ Mono<ServerResponse> build().
true;;1;1;/**  * Build the response entity with no body.  * The response will be committed when the given {@code voidPublisher} completes.  * @param voidPublisher publisher publisher to indicate when the response should be committed  */ ;/**  * Build the response entity with no body.  * The response will be committed when the given {@code voidPublisher} completes.  * @param voidPublisher publisher publisher to indicate when the response should be committed  */ Mono<ServerResponse> build(Publisher<Void> voidPublisher).
true;;1;1;/**  * Build the response entity with a custom writer function.  * @param writeFunction the function used to write to the {@link ServerWebExchange}  */ ;/**  * Build the response entity with a custom writer function.  * @param writeFunction the function used to write to the {@link ServerWebExchange}  */ Mono<ServerResponse> build(BiFunction<ServerWebExchange, Context, Mono<Void>> writeFunction).
true;;1;1;/**  * Set the length of the body in bytes, as specified by the  * {@code Content-Length} header.  * @param contentLength the content length  * @return this builder  * @see HttpHeaders#setContentLength(long)  */ ;/**  * Set the length of the body in bytes, as specified by the  * {@code Content-Length} header.  * @param contentLength the content length  * @return this builder  * @see HttpHeaders#setContentLength(long)  */ BodyBuilder contentLength(long contentLength).
true;;1;1;/**  * Set the {@linkplain MediaType media type} of the body, as specified by the  * {@code Content-Type} header.  * @param contentType the content type  * @return this builder  * @see HttpHeaders#setContentType(MediaType)  */ ;/**  * Set the {@linkplain MediaType media type} of the body, as specified by the  * {@code Content-Type} header.  * @param contentType the content type  * @return this builder  * @see HttpHeaders#setContentType(MediaType)  */ BodyBuilder contentType(MediaType contentType).
true;;2;1;/**  * Add a serialization hint like {@link Jackson2CodecSupport#JSON_VIEW_HINT}  * to customize how the body will be serialized.  * @param key the hint key  * @param value the hint value  */ ;/**  * Add a serialization hint like {@link Jackson2CodecSupport#JSON_VIEW_HINT}  * to customize how the body will be serialized.  * @param key the hint key  * @param value the hint value  */ BodyBuilder hint(String key, Object value).
true;;2;1;/**  * Set the body of the response to the given asynchronous {@code Publisher} and return it.  * This convenience method combines {@link #body(BodyInserter)} and  * {@link BodyInserters#fromPublisher(Publisher, Class)}.  * @param publisher the {@code Publisher} to write to the response  * @param elementClass the class of elements contained in the publisher  * @param <T> the type of the elements contained in the publisher  * @param <P> the type of the {@code Publisher}  * @return the built response  */ ;/**  * Set the body of the response to the given asynchronous {@code Publisher} and return it.  * This convenience method combines {@link #body(BodyInserter)} and  * {@link BodyInserters#fromPublisher(Publisher, Class)}.  * @param publisher the {@code Publisher} to write to the response  * @param elementClass the class of elements contained in the publisher  * @param <T> the type of the elements contained in the publisher  * @param <P> the type of the {@code Publisher}  * @return the built response  */ <T, P extends Publisher<T>> Mono<ServerResponse> body(P publisher, Class<T> elementClass).
true;;2;2;/**  * Set the body of the response to the given asynchronous {@code Publisher} and return it.  * This convenience method combines {@link #body(BodyInserter)} and  * {@link BodyInserters#fromPublisher(Publisher, Class)}.  * @param publisher the {@code Publisher} to write to the response  * @param typeReference a type reference describing the elements contained in the publisher  * @param <T> the type of the elements contained in the publisher  * @param <P> the type of the {@code Publisher}  * @return the built response  */ ;/**  * Set the body of the response to the given asynchronous {@code Publisher} and return it.  * This convenience method combines {@link #body(BodyInserter)} and  * {@link BodyInserters#fromPublisher(Publisher, Class)}.  * @param publisher the {@code Publisher} to write to the response  * @param typeReference a type reference describing the elements contained in the publisher  * @param <T> the type of the elements contained in the publisher  * @param <P> the type of the {@code Publisher}  * @return the built response  */ <T, P extends Publisher<T>> Mono<ServerResponse> body(P publisher, ParameterizedTypeReference<T> typeReference).
true;;1;1;/**  * Set the body of the response to the given synchronous {@code Object} and return it.  * This convenience method combines {@link #body(BodyInserter)} and  * {@link BodyInserters#fromObject(Object)}.  * @param body the body of the response  * @return the built response  * @throws IllegalArgumentException if {@code body} is a {@link Publisher}, for which  * {@link #body(Publisher, Class)} should be used.  */ ;/**  * Set the body of the response to the given synchronous {@code Object} and return it.  * This convenience method combines {@link #body(BodyInserter)} and  * {@link BodyInserters#fromObject(Object)}.  * @param body the body of the response  * @return the built response  * @throws IllegalArgumentException if {@code body} is a {@link Publisher}, for which  * {@link #body(Publisher, Class)} should be used.  */ Mono<ServerResponse> syncBody(Object body).
true;;1;1;/**  * Set the body of the response to the given {@code BodyInserter} and return it.  * @param inserter the {@code BodyInserter} that writes to the response  * @return the built response  */ ;/**  * Set the body of the response to the given {@code BodyInserter} and return it.  * @param inserter the {@code BodyInserter} that writes to the response  * @return the built response  */ Mono<ServerResponse> body(BodyInserter<?, ? super ServerHttpResponse> inserter).
true;;2;1;/**  * Render the template with the given {@code name} using the given {@code modelAttributes}.  * The model attributes are mapped under a  * {@linkplain org.springframework.core.Conventions#getVariableName generated name}.  * <p><em>Note: Empty {@link Collection Collections} are not added to  * the model when using this method because we cannot correctly determine  * the true convention name.</em>  * @param name the name of the template to be rendered  * @param modelAttributes the modelAttributes used to render the template  * @return the built response  */ ;/**  * Render the template with the given {@code name} using the given {@code modelAttributes}.  * The model attributes are mapped under a  * {@linkplain org.springframework.core.Conventions#getVariableName generated name}.  * <p><em>Note: Empty {@link Collection Collections} are not added to  * the model when using this method because we cannot correctly determine  * the true convention name.</em>  * @param name the name of the template to be rendered  * @param modelAttributes the modelAttributes used to render the template  * @return the built response  */ Mono<ServerResponse> render(String name, Object... modelAttributes).
true;;2;1;/**  * Render the template with the given {@code name} using the given {@code model}.  * @param name the name of the template to be rendered  * @param model the model used to render the template  * @return the built response  */ ;/**  * Render the template with the given {@code name} using the given {@code model}.  * @param name the name of the template to be rendered  * @param model the model used to render the template  * @return the built response  */ Mono<ServerResponse> render(String name, Map<String, ?> model).
true;;0;1;/**  * Return the {@link HttpMessageWriter HttpMessageWriters} to be used for response body conversion.  * @return the list of message writers  */ ;/**  * Return the {@link HttpMessageWriter HttpMessageWriters} to be used for response body conversion.  * @return the list of message writers  */ List<HttpMessageWriter<?>> messageWriters().
true;;0;1;/**  * Return the  {@link ViewResolver ViewResolvers} to be used for view name resolution.  * @return the list of view resolvers  */ ;/**  * Return the  {@link ViewResolver ViewResolvers} to be used for view name resolution.  * @return the list of view resolvers  */ List<ViewResolver> viewResolvers().
