# id;timestamp;commentText;codeText;commentWords;codeWords
ResourceUrlProvider -> public final Mono<String> getForUriString(String uriString, ServerWebExchange exchange);1500498279;Get the public resource URL for the given URI string._<p>The URI string is expected to be a path and if it contains a query or_fragment those will be preserved in the resulting public resource URL._@param uriString the URI string to transform_@param exchange the current exchange_@return the resolved public resource URL path, or empty if unresolved;public final Mono<String> getForUriString(String uriString, ServerWebExchange exchange) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + uriString + "\"")__		}_		ServerHttpRequest request = exchange.getRequest()__		int queryIndex = getQueryIndex(uriString)__		String lookupPath = uriString.substring(0, queryIndex)__		String query = uriString.substring(queryIndex)__		PathContainer parsedLookupPath = PathContainer.parseUrlPath(lookupPath)__		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}_		return resolveResourceUrl(parsedLookupPath).map(resolvedPath ->_				request.getPath().contextPath().value() + resolvedPath + query)__	};get,the,public,resource,url,for,the,given,uri,string,p,the,uri,string,is,expected,to,be,a,path,and,if,it,contains,a,query,or,fragment,those,will,be,preserved,in,the,resulting,public,resource,url,param,uri,string,the,uri,string,to,transform,param,exchange,the,current,exchange,return,the,resolved,public,resource,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,uri,string,string,uri,string,server,web,exchange,exchange,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,uri,string,server,http,request,request,exchange,get,request,int,query,index,get,query,index,uri,string,string,lookup,path,uri,string,substring,0,query,index,string,query,uri,string,substring,query,index,path,container,parsed,lookup,path,path,container,parse,url,path,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,return,resolve,resource,url,parsed,lookup,path,map,resolved,path,request,get,path,context,path,value,resolved,path,query
ResourceUrlProvider -> public final Mono<String> getForUriString(String uriString, ServerWebExchange exchange);1501237594;Get the public resource URL for the given URI string._<p>The URI string is expected to be a path and if it contains a query or_fragment those will be preserved in the resulting public resource URL._@param uriString the URI string to transform_@param exchange the current exchange_@return the resolved public resource URL path, or empty if unresolved;public final Mono<String> getForUriString(String uriString, ServerWebExchange exchange) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + uriString + "\"")__		}_		ServerHttpRequest request = exchange.getRequest()__		int queryIndex = getQueryIndex(uriString)__		String lookupPath = uriString.substring(0, queryIndex)__		String query = uriString.substring(queryIndex)__		PathContainer parsedLookupPath = PathContainer.parseUrlPath(lookupPath)__		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}_		return resolveResourceUrl(parsedLookupPath).map(resolvedPath ->_				request.getPath().contextPath().value() + resolvedPath + query)__	};get,the,public,resource,url,for,the,given,uri,string,p,the,uri,string,is,expected,to,be,a,path,and,if,it,contains,a,query,or,fragment,those,will,be,preserved,in,the,resulting,public,resource,url,param,uri,string,the,uri,string,to,transform,param,exchange,the,current,exchange,return,the,resolved,public,resource,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,uri,string,string,uri,string,server,web,exchange,exchange,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,uri,string,server,http,request,request,exchange,get,request,int,query,index,get,query,index,uri,string,string,lookup,path,uri,string,substring,0,query,index,string,query,uri,string,substring,query,index,path,container,parsed,lookup,path,path,container,parse,url,path,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,return,resolve,resource,url,parsed,lookup,path,map,resolved,path,request,get,path,context,path,value,resolved,path,query
ResourceUrlProvider -> public final Mono<String> getForUriString(String uriString, ServerWebExchange exchange);1501531808;Get the public resource URL for the given URI string._<p>The URI string is expected to be a path and if it contains a query or_fragment those will be preserved in the resulting public resource URL._@param uriString the URI string to transform_@param exchange the current exchange_@return the resolved public resource URL path, or empty if unresolved;public final Mono<String> getForUriString(String uriString, ServerWebExchange exchange) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + uriString + "\"")__		}_		ServerHttpRequest request = exchange.getRequest()__		int queryIndex = getQueryIndex(uriString)__		String lookupPath = uriString.substring(0, queryIndex)__		String query = uriString.substring(queryIndex)__		PathContainer parsedLookupPath = PathContainer.parsePath(lookupPath)__		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}_		return resolveResourceUrl(parsedLookupPath).map(resolvedPath ->_				request.getPath().contextPath().value() + resolvedPath + query)__	};get,the,public,resource,url,for,the,given,uri,string,p,the,uri,string,is,expected,to,be,a,path,and,if,it,contains,a,query,or,fragment,those,will,be,preserved,in,the,resulting,public,resource,url,param,uri,string,the,uri,string,to,transform,param,exchange,the,current,exchange,return,the,resolved,public,resource,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,uri,string,string,uri,string,server,web,exchange,exchange,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,uri,string,server,http,request,request,exchange,get,request,int,query,index,get,query,index,uri,string,string,lookup,path,uri,string,substring,0,query,index,string,query,uri,string,substring,query,index,path,container,parsed,lookup,path,path,container,parse,path,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,return,resolve,resource,url,parsed,lookup,path,map,resolved,path,request,get,path,context,path,value,resolved,path,query
ResourceUrlProvider -> public final Mono<String> getForUriString(String uriString, ServerWebExchange exchange);1501690296;Get the public resource URL for the given URI string._<p>The URI string is expected to be a path and if it contains a query or_fragment those will be preserved in the resulting public resource URL._@param uriString the URI string to transform_@param exchange the current exchange_@return the resolved public resource URL path, or empty if unresolved;public final Mono<String> getForUriString(String uriString, ServerWebExchange exchange) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + uriString + "\"")__		}_		ServerHttpRequest request = exchange.getRequest()__		int queryIndex = getQueryIndex(uriString)__		String lookupPath = uriString.substring(0, queryIndex)__		String query = uriString.substring(queryIndex)__		PathContainer parsedLookupPath = PathContainer.parsePath(lookupPath)__		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}_		return resolveResourceUrl(parsedLookupPath).map(resolvedPath ->_				request.getPath().contextPath().value() + resolvedPath + query)__	};get,the,public,resource,url,for,the,given,uri,string,p,the,uri,string,is,expected,to,be,a,path,and,if,it,contains,a,query,or,fragment,those,will,be,preserved,in,the,resulting,public,resource,url,param,uri,string,the,uri,string,to,transform,param,exchange,the,current,exchange,return,the,resolved,public,resource,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,uri,string,string,uri,string,server,web,exchange,exchange,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,uri,string,server,http,request,request,exchange,get,request,int,query,index,get,query,index,uri,string,string,lookup,path,uri,string,substring,0,query,index,string,query,uri,string,substring,query,index,path,container,parsed,lookup,path,path,container,parse,path,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,return,resolve,resource,url,parsed,lookup,path,map,resolved,path,request,get,path,context,path,value,resolved,path,query
ResourceUrlProvider -> public final Mono<String> getForUriString(String uriString, ServerWebExchange exchange);1508508612;Get the public resource URL for the given URI string._<p>The URI string is expected to be a path and if it contains a query or_fragment those will be preserved in the resulting public resource URL._@param uriString the URI string to transform_@param exchange the current exchange_@return the resolved public resource URL path, or empty if unresolved;public final Mono<String> getForUriString(String uriString, ServerWebExchange exchange) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + uriString + "\"")__		}_		ServerHttpRequest request = exchange.getRequest()__		int queryIndex = getQueryIndex(uriString)__		String lookupPath = uriString.substring(0, queryIndex)__		String query = uriString.substring(queryIndex)__		PathContainer parsedLookupPath = PathContainer.parsePath(lookupPath)__		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}_		return resolveResourceUrl(parsedLookupPath).map(resolvedPath ->_				request.getPath().contextPath().value() + resolvedPath + query)__	};get,the,public,resource,url,for,the,given,uri,string,p,the,uri,string,is,expected,to,be,a,path,and,if,it,contains,a,query,or,fragment,those,will,be,preserved,in,the,resulting,public,resource,url,param,uri,string,the,uri,string,to,transform,param,exchange,the,current,exchange,return,the,resolved,public,resource,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,uri,string,string,uri,string,server,web,exchange,exchange,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,uri,string,server,http,request,request,exchange,get,request,int,query,index,get,query,index,uri,string,string,lookup,path,uri,string,substring,0,query,index,string,query,uri,string,substring,query,index,path,container,parsed,lookup,path,path,container,parse,path,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,return,resolve,resource,url,parsed,lookup,path,map,resolved,path,request,get,path,context,path,value,resolved,path,query
ResourceUrlProvider -> public final Mono<String> getForUriString(String uriString, ServerWebExchange exchange);1519588127;Get the public resource URL for the given URI string._<p>The URI string is expected to be a path and if it contains a query or_fragment those will be preserved in the resulting public resource URL._@param uriString the URI string to transform_@param exchange the current exchange_@return the resolved public resource URL path, or empty if unresolved;public final Mono<String> getForUriString(String uriString, ServerWebExchange exchange) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + uriString + "\"")__		}_		ServerHttpRequest request = exchange.getRequest()__		int queryIndex = getQueryIndex(uriString)__		String lookupPath = uriString.substring(0, queryIndex)__		String query = uriString.substring(queryIndex)__		PathContainer parsedLookupPath = PathContainer.parsePath(lookupPath)__		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}_		return resolveResourceUrl(parsedLookupPath).map(resolvedPath ->_				request.getPath().contextPath().value() + resolvedPath + query)__	};get,the,public,resource,url,for,the,given,uri,string,p,the,uri,string,is,expected,to,be,a,path,and,if,it,contains,a,query,or,fragment,those,will,be,preserved,in,the,resulting,public,resource,url,param,uri,string,the,uri,string,to,transform,param,exchange,the,current,exchange,return,the,resolved,public,resource,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,uri,string,string,uri,string,server,web,exchange,exchange,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,uri,string,server,http,request,request,exchange,get,request,int,query,index,get,query,index,uri,string,string,lookup,path,uri,string,substring,0,query,index,string,query,uri,string,substring,query,index,path,container,parsed,lookup,path,path,container,parse,path,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,return,resolve,resource,url,parsed,lookup,path,map,resolved,path,request,get,path,context,path,value,resolved,path,query
ResourceUrlProvider -> public final Mono<String> getForUriString(String uriString, ServerWebExchange exchange);1520529117;Get the public resource URL for the given URI string._<p>The URI string is expected to be a path and if it contains a query or_fragment those will be preserved in the resulting public resource URL._@param uriString the URI string to transform_@param exchange the current exchange_@return the resolved public resource URL path, or empty if unresolved;public final Mono<String> getForUriString(String uriString, ServerWebExchange exchange) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + uriString + "\"")__		}_		ServerHttpRequest request = exchange.getRequest()__		int queryIndex = getQueryIndex(uriString)__		String lookupPath = uriString.substring(0, queryIndex)__		String query = uriString.substring(queryIndex)__		PathContainer parsedLookupPath = PathContainer.parsePath(lookupPath)__		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}_		return resolveResourceUrl(parsedLookupPath).map(resolvedPath ->_				request.getPath().contextPath().value() + resolvedPath + query)__	};get,the,public,resource,url,for,the,given,uri,string,p,the,uri,string,is,expected,to,be,a,path,and,if,it,contains,a,query,or,fragment,those,will,be,preserved,in,the,resulting,public,resource,url,param,uri,string,the,uri,string,to,transform,param,exchange,the,current,exchange,return,the,resolved,public,resource,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,uri,string,string,uri,string,server,web,exchange,exchange,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,uri,string,server,http,request,request,exchange,get,request,int,query,index,get,query,index,uri,string,string,lookup,path,uri,string,substring,0,query,index,string,query,uri,string,substring,query,index,path,container,parsed,lookup,path,path,container,parse,path,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,return,resolve,resource,url,parsed,lookup,path,map,resolved,path,request,get,path,context,path,value,resolved,path,query
ResourceUrlProvider -> public final Mono<String> getForUriString(String uriString, ServerWebExchange exchange);1520542144;Get the public resource URL for the given URI string._<p>The URI string is expected to be a path and if it contains a query or_fragment those will be preserved in the resulting public resource URL._@param uriString the URI string to transform_@param exchange the current exchange_@return the resolved public resource URL path, or empty if unresolved;public final Mono<String> getForUriString(String uriString, ServerWebExchange exchange) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + uriString + "\"")__		}_		ServerHttpRequest request = exchange.getRequest()__		int queryIndex = getQueryIndex(uriString)__		String lookupPath = uriString.substring(0, queryIndex)__		String query = uriString.substring(queryIndex)__		PathContainer parsedLookupPath = PathContainer.parsePath(lookupPath)__		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}_		return resolveResourceUrl(parsedLookupPath).map(resolvedPath ->_				request.getPath().contextPath().value() + resolvedPath + query)__	};get,the,public,resource,url,for,the,given,uri,string,p,the,uri,string,is,expected,to,be,a,path,and,if,it,contains,a,query,or,fragment,those,will,be,preserved,in,the,resulting,public,resource,url,param,uri,string,the,uri,string,to,transform,param,exchange,the,current,exchange,return,the,resolved,public,resource,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,uri,string,string,uri,string,server,web,exchange,exchange,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,uri,string,server,http,request,request,exchange,get,request,int,query,index,get,query,index,uri,string,string,lookup,path,uri,string,substring,0,query,index,string,query,uri,string,substring,query,index,path,container,parsed,lookup,path,path,container,parse,path,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,return,resolve,resource,url,parsed,lookup,path,map,resolved,path,request,get,path,context,path,value,resolved,path,query
ResourceUrlProvider -> public final Mono<String> getForUriString(String uriString, ServerWebExchange exchange);1529721864;Get the public resource URL for the given URI string._<p>The URI string is expected to be a path and if it contains a query or_fragment those will be preserved in the resulting public resource URL._@param uriString the URI string to transform_@param exchange the current exchange_@return the resolved public resource URL path, or empty if unresolved;public final Mono<String> getForUriString(String uriString, ServerWebExchange exchange) {_		ServerHttpRequest request = exchange.getRequest()__		int queryIndex = getQueryIndex(uriString)__		String lookupPath = uriString.substring(0, queryIndex)__		String query = uriString.substring(queryIndex)__		PathContainer parsedLookupPath = PathContainer.parsePath(lookupPath)__		return resolveResourceUrl(parsedLookupPath).map(resolvedPath ->_				request.getPath().contextPath().value() + resolvedPath + query)__	};get,the,public,resource,url,for,the,given,uri,string,p,the,uri,string,is,expected,to,be,a,path,and,if,it,contains,a,query,or,fragment,those,will,be,preserved,in,the,resulting,public,resource,url,param,uri,string,the,uri,string,to,transform,param,exchange,the,current,exchange,return,the,resolved,public,resource,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,uri,string,string,uri,string,server,web,exchange,exchange,server,http,request,request,exchange,get,request,int,query,index,get,query,index,uri,string,string,lookup,path,uri,string,substring,0,query,index,string,query,uri,string,substring,query,index,path,container,parsed,lookup,path,path,container,parse,path,lookup,path,return,resolve,resource,url,parsed,lookup,path,map,resolved,path,request,get,path,context,path,value,resolved,path,query
ResourceUrlProvider -> public final Mono<String> getForUriString(String uriString, ServerWebExchange exchange);1530174524;Get the public resource URL for the given URI string._<p>The URI string is expected to be a path and if it contains a query or_fragment those will be preserved in the resulting public resource URL._@param uriString the URI string to transform_@param exchange the current exchange_@return the resolved public resource URL path, or empty if unresolved;public final Mono<String> getForUriString(String uriString, ServerWebExchange exchange) {_		ServerHttpRequest request = exchange.getRequest()__		int queryIndex = getQueryIndex(uriString)__		String lookupPath = uriString.substring(0, queryIndex)__		String query = uriString.substring(queryIndex)__		PathContainer parsedLookupPath = PathContainer.parsePath(lookupPath)__		return resolveResourceUrl(parsedLookupPath).map(resolvedPath ->_				request.getPath().contextPath().value() + resolvedPath + query)__	};get,the,public,resource,url,for,the,given,uri,string,p,the,uri,string,is,expected,to,be,a,path,and,if,it,contains,a,query,or,fragment,those,will,be,preserved,in,the,resulting,public,resource,url,param,uri,string,the,uri,string,to,transform,param,exchange,the,current,exchange,return,the,resolved,public,resource,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,uri,string,string,uri,string,server,web,exchange,exchange,server,http,request,request,exchange,get,request,int,query,index,get,query,index,uri,string,string,lookup,path,uri,string,substring,0,query,index,string,query,uri,string,substring,query,index,path,container,parsed,lookup,path,path,container,parse,path,lookup,path,return,resolve,resource,url,parsed,lookup,path,map,resolved,path,request,get,path,context,path,value,resolved,path,query
ResourceUrlProvider -> public final Mono<String> getForUriString(String uriString, ServerWebExchange exchange);1530198749;Get the public resource URL for the given URI string._<p>The URI string is expected to be a path and if it contains a query or_fragment those will be preserved in the resulting public resource URL._@param uriString the URI string to transform_@param exchange the current exchange_@return the resolved public resource URL path, or empty if unresolved;public final Mono<String> getForUriString(String uriString, ServerWebExchange exchange) {_		ServerHttpRequest request = exchange.getRequest()__		int queryIndex = getQueryIndex(uriString)__		String lookupPath = uriString.substring(0, queryIndex)__		String query = uriString.substring(queryIndex)__		PathContainer parsedLookupPath = PathContainer.parsePath(lookupPath)___		return resolveResourceUrl(parsedLookupPath).map(resolvedPath ->_				request.getPath().contextPath().value() + resolvedPath + query)__	};get,the,public,resource,url,for,the,given,uri,string,p,the,uri,string,is,expected,to,be,a,path,and,if,it,contains,a,query,or,fragment,those,will,be,preserved,in,the,resulting,public,resource,url,param,uri,string,the,uri,string,to,transform,param,exchange,the,current,exchange,return,the,resolved,public,resource,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,uri,string,string,uri,string,server,web,exchange,exchange,server,http,request,request,exchange,get,request,int,query,index,get,query,index,uri,string,string,lookup,path,uri,string,substring,0,query,index,string,query,uri,string,substring,query,index,path,container,parsed,lookup,path,path,container,parse,path,lookup,path,return,resolve,resource,url,parsed,lookup,path,map,resolved,path,request,get,path,context,path,value,resolved,path,query
ResourceUrlProvider -> public final Mono<String> getForUriString(String uriString, ServerWebExchange exchange);1530793633;Get the public resource URL for the given URI string._<p>The URI string is expected to be a path and if it contains a query or_fragment those will be preserved in the resulting public resource URL._@param uriString the URI string to transform_@param exchange the current exchange_@return the resolved public resource URL path, or empty if unresolved;public final Mono<String> getForUriString(String uriString, ServerWebExchange exchange) {_		ServerHttpRequest request = exchange.getRequest()__		int queryIndex = getQueryIndex(uriString)__		String lookupPath = uriString.substring(0, queryIndex)__		String query = uriString.substring(queryIndex)__		PathContainer parsedLookupPath = PathContainer.parsePath(lookupPath)___		return resolveResourceUrl(exchange, parsedLookupPath).map(resolvedPath ->_				request.getPath().contextPath().value() + resolvedPath + query)__	};get,the,public,resource,url,for,the,given,uri,string,p,the,uri,string,is,expected,to,be,a,path,and,if,it,contains,a,query,or,fragment,those,will,be,preserved,in,the,resulting,public,resource,url,param,uri,string,the,uri,string,to,transform,param,exchange,the,current,exchange,return,the,resolved,public,resource,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,uri,string,string,uri,string,server,web,exchange,exchange,server,http,request,request,exchange,get,request,int,query,index,get,query,index,uri,string,string,lookup,path,uri,string,substring,0,query,index,string,query,uri,string,substring,query,index,path,container,parsed,lookup,path,path,container,parse,path,lookup,path,return,resolve,resource,url,exchange,parsed,lookup,path,map,resolved,path,request,get,path,context,path,value,resolved,path,query
ResourceUrlProvider -> public final Mono<String> getForUriString(String uriString, ServerWebExchange exchange);1544526735;Get the public resource URL for the given URI string._<p>The URI string is expected to be a path and if it contains a query or_fragment those will be preserved in the resulting public resource URL._@param uriString the URI string to transform_@param exchange the current exchange_@return the resolved public resource URL path, or empty if unresolved;public final Mono<String> getForUriString(String uriString, ServerWebExchange exchange) {_		ServerHttpRequest request = exchange.getRequest()__		int queryIndex = getQueryIndex(uriString)__		String lookupPath = uriString.substring(0, queryIndex)__		String query = uriString.substring(queryIndex)__		PathContainer parsedLookupPath = PathContainer.parsePath(lookupPath)___		return resolveResourceUrl(exchange, parsedLookupPath).map(resolvedPath ->_				request.getPath().contextPath().value() + resolvedPath + query)__	};get,the,public,resource,url,for,the,given,uri,string,p,the,uri,string,is,expected,to,be,a,path,and,if,it,contains,a,query,or,fragment,those,will,be,preserved,in,the,resulting,public,resource,url,param,uri,string,the,uri,string,to,transform,param,exchange,the,current,exchange,return,the,resolved,public,resource,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,uri,string,string,uri,string,server,web,exchange,exchange,server,http,request,request,exchange,get,request,int,query,index,get,query,index,uri,string,string,lookup,path,uri,string,substring,0,query,index,string,query,uri,string,substring,query,index,path,container,parsed,lookup,path,path,container,parse,path,lookup,path,return,resolve,resource,url,exchange,parsed,lookup,path,map,resolved,path,request,get,path,context,path,value,resolved,path,query
ResourceUrlProvider -> public void setHandlerMap(Map<String, ResourceWebHandler> handlerMap);1485986572;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(Map<String, ResourceWebHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,map,string,resource,web,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(Map<String, ResourceWebHandler> handlerMap);1485989424;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(Map<String, ResourceWebHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,map,string,resource,web,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(Map<String, ResourceWebHandler> handlerMap);1486634978;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(Map<String, ResourceWebHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,map,string,resource,web,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(Map<String, ResourceWebHandler> handlerMap);1486674586;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(Map<String, ResourceWebHandler> handlerMap) {_		if (handlerMap != null) {_			this.patternRegistry.clear()__			this.handlerMap.clear()___			handlerMap.forEach((pattern, handler) -> {_				this.patternRegistry_						.register(pattern)_						.forEach(pathPattern -> this.handlerMap.put(pathPattern, handler))__			})__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,map,string,resource,web,handler,handler,map,if,handler,map,null,this,pattern,registry,clear,this,handler,map,clear,handler,map,for,each,pattern,handler,this,pattern,registry,register,pattern,for,each,path,pattern,this,handler,map,put,path,pattern,handler,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(Map<String, ResourceWebHandler> handlerMap);1486747801;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(Map<String, ResourceWebHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,map,string,resource,web,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(Map<String, ResourceWebHandler> handlerMap);1495035625;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(Map<String, ResourceWebHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,map,string,resource,web,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(Map<String, ResourceWebHandler> handlerMap);1495868221;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(Map<String, ResourceWebHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,map,string,resource,web,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(Map<String, ResourceWebHandler> handlerMap);1496334664;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(Map<String, ResourceWebHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,map,string,resource,web,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(Map<String, ResourceWebHandler> handlerMap);1496429194;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(Map<String, ResourceWebHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,map,string,resource,web,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(Map<String, ResourceWebHandler> handlerMap);1496430942;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(Map<String, ResourceWebHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,map,string,resource,web,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public final Mono<String> getForLookupPath(String lookupPath);1485986572;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring uses for_request mapping purposes._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or {@code null} if unresolved;public final Mono<String> getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}__		List<String> matchingPatterns = new ArrayList<>()__		for (String pattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(pattern, lookupPath)) {_				matchingPatterns.add(pattern)__			}_		}__		if (matchingPatterns.isEmpty()) {_			return Mono.empty()__		}__		Comparator<String> patternComparator = getPathMatcher().getPatternComparator(lookupPath)__		Collections.sort(matchingPatterns, patternComparator)___		return Flux.fromIterable(matchingPatterns)_				.concatMap(pattern -> {_					String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__					String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__					if (logger.isTraceEnabled()) {_						logger.trace("Invoking ResourceResolverChain for URL pattern \"" + pattern + "\"")__					}_					ResourceWebHandler handler = this.handlerMap.get(pattern)__					ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__					return chain.resolveUrlPath(pathWithinMapping, handler.getLocations())_							.map(resolvedPath -> {_								if (logger.isTraceEnabled()) {_									logger.trace("Resolved public resource URL path \"" + resolvedPath + "\"")__								}_								return pathMapping + resolvedPath__							})__				})_				.next()__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,uses,for,request,mapping,purposes,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,mono,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,list,string,matching,patterns,new,array,list,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,matching,patterns,add,pattern,if,matching,patterns,is,empty,return,mono,empty,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,lookup,path,collections,sort,matching,patterns,pattern,comparator,return,flux,from,iterable,matching,patterns,concat,map,pattern,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,web,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,return,chain,resolve,url,path,path,within,mapping,handler,get,locations,map,resolved,path,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,path,return,path,mapping,resolved,path,next
ResourceUrlProvider -> public final Mono<String> getForLookupPath(String lookupPath);1485989424;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring uses for_request mapping purposes._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or {@code null} if unresolved;public final Mono<String> getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}__		List<String> matchingPatterns = new ArrayList<>()__		for (String pattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(pattern, lookupPath)) {_				matchingPatterns.add(pattern)__			}_		}__		if (matchingPatterns.isEmpty()) {_			return Mono.empty()__		}__		Comparator<String> patternComparator = getPathMatcher().getPatternComparator(lookupPath)__		Collections.sort(matchingPatterns, patternComparator)___		return Flux.fromIterable(matchingPatterns)_				.concatMap(pattern -> {_					String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__					String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__					if (logger.isTraceEnabled()) {_						logger.trace("Invoking ResourceResolverChain for URL pattern \"" + pattern + "\"")__					}_					ResourceWebHandler handler = this.handlerMap.get(pattern)__					ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__					return chain.resolveUrlPath(pathWithinMapping, handler.getLocations())_							.map(resolvedPath -> {_								if (logger.isTraceEnabled()) {_									logger.trace("Resolved public resource URL path \"" + resolvedPath + "\"")__								}_								return pathMapping + resolvedPath__							})__				})_				.next()__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,uses,for,request,mapping,purposes,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,mono,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,list,string,matching,patterns,new,array,list,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,matching,patterns,add,pattern,if,matching,patterns,is,empty,return,mono,empty,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,lookup,path,collections,sort,matching,patterns,pattern,comparator,return,flux,from,iterable,matching,patterns,concat,map,pattern,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,web,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,return,chain,resolve,url,path,path,within,mapping,handler,get,locations,map,resolved,path,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,path,return,path,mapping,resolved,path,next
ResourceUrlProvider -> public final Mono<String> getForLookupPath(String lookupPath);1486634978;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring uses for_request mapping purposes._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or {@code null} if unresolved;public final Mono<String> getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}__		List<String> matchingPatterns = new ArrayList<>()__		for (String pattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(pattern, lookupPath)) {_				matchingPatterns.add(pattern)__			}_		}__		if (matchingPatterns.isEmpty()) {_			return Mono.empty()__		}__		Comparator<String> patternComparator = getPathMatcher().getPatternComparator(lookupPath)__		Collections.sort(matchingPatterns, patternComparator)___		return Flux.fromIterable(matchingPatterns)_				.concatMap(pattern -> {_					String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__					String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__					if (logger.isTraceEnabled()) {_						logger.trace("Invoking ResourceResolverChain for URL pattern \"" + pattern + "\"")__					}_					ResourceWebHandler handler = this.handlerMap.get(pattern)__					ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__					return chain.resolveUrlPath(pathWithinMapping, handler.getLocations())_							.map(resolvedPath -> {_								if (logger.isTraceEnabled()) {_									logger.trace("Resolved public resource URL path \"" + resolvedPath + "\"")__								}_								return pathMapping + resolvedPath__							})__				})_				.next()__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,uses,for,request,mapping,purposes,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,mono,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,list,string,matching,patterns,new,array,list,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,matching,patterns,add,pattern,if,matching,patterns,is,empty,return,mono,empty,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,lookup,path,collections,sort,matching,patterns,pattern,comparator,return,flux,from,iterable,matching,patterns,concat,map,pattern,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,web,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,return,chain,resolve,url,path,path,within,mapping,handler,get,locations,map,resolved,path,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,path,return,path,mapping,resolved,path,next
ResourceUrlProvider -> public final Mono<String> getForLookupPath(String lookupPath);1486635693;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring uses for_request mapping purposes._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or {@code null} if unresolved;public final Mono<String> getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}__		SortedSet<PathPattern> matches = this.patternRegistry.findMatches(lookupPath)__		if (matches.isEmpty()) {_			return Mono.empty()__		}__		return Flux.fromIterable(matches)_				.concatMap(pattern -> {_					String pathWithinMapping = pattern.extractPathWithinPattern(lookupPath)__					String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__					if (logger.isTraceEnabled()) {_						logger.trace("Invoking ResourceResolverChain for URL pattern \""_								+ pattern.getPatternString() + "\"")__					}_					ResourceWebHandler handler = this.handlerMap.get(pattern)__					ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__					return chain.resolveUrlPath(pathWithinMapping, handler.getLocations())_							.map(resolvedPath -> {_								if (logger.isTraceEnabled()) {_									logger.trace("Resolved public resource URL path \"" + resolvedPath + "\"")__								}_								return pathMapping + resolvedPath__							})__				})_				.next()__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,uses,for,request,mapping,purposes,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,mono,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,sorted,set,path,pattern,matches,this,pattern,registry,find,matches,lookup,path,if,matches,is,empty,return,mono,empty,return,flux,from,iterable,matches,concat,map,pattern,string,path,within,mapping,pattern,extract,path,within,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,get,pattern,string,resource,web,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,return,chain,resolve,url,path,path,within,mapping,handler,get,locations,map,resolved,path,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,path,return,path,mapping,resolved,path,next
ResourceUrlProvider -> public final Mono<String> getForLookupPath(String lookupPath);1486674586;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring uses for_request mapping purposes._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or {@code null} if unresolved;public final Mono<String> getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}__		SortedSet<PathPattern> matches = this.patternRegistry.findMatches(lookupPath)__		if (matches.isEmpty()) {_			return Mono.empty()__		}__		return Flux.fromIterable(matches)_				.concatMap(pattern -> {_					String pathWithinMapping = pattern.extractPathWithinPattern(lookupPath)__					String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__					if (logger.isTraceEnabled()) {_						logger.trace("Invoking ResourceResolverChain for URL pattern \""_								+ pattern.getPatternString() + "\"")__					}_					ResourceWebHandler handler = this.handlerMap.get(pattern)__					ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__					return chain.resolveUrlPath(pathWithinMapping, handler.getLocations())_							.map(resolvedPath -> {_								if (logger.isTraceEnabled()) {_									logger.trace("Resolved public resource URL path \"" + resolvedPath + "\"")__								}_								return pathMapping + resolvedPath__							})__				})_				.next()__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,uses,for,request,mapping,purposes,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,mono,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,sorted,set,path,pattern,matches,this,pattern,registry,find,matches,lookup,path,if,matches,is,empty,return,mono,empty,return,flux,from,iterable,matches,concat,map,pattern,string,path,within,mapping,pattern,extract,path,within,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,get,pattern,string,resource,web,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,return,chain,resolve,url,path,path,within,mapping,handler,get,locations,map,resolved,path,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,path,return,path,mapping,resolved,path,next
ResourceUrlProvider -> public final Mono<String> getForLookupPath(String lookupPath);1486747801;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring uses for_request mapping purposes._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or {@code null} if unresolved;public final Mono<String> getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}__		List<String> matchingPatterns = new ArrayList<>()__		for (String pattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(pattern, lookupPath)) {_				matchingPatterns.add(pattern)__			}_		}__		if (matchingPatterns.isEmpty()) {_			return Mono.empty()__		}__		Comparator<String> patternComparator = getPathMatcher().getPatternComparator(lookupPath)__		Collections.sort(matchingPatterns, patternComparator)___		return Flux.fromIterable(matchingPatterns)_				.concatMap(pattern -> {_					String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__					String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__					if (logger.isTraceEnabled()) {_						logger.trace("Invoking ResourceResolverChain for URL pattern \"" + pattern + "\"")__					}_					ResourceWebHandler handler = this.handlerMap.get(pattern)__					ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__					return chain.resolveUrlPath(pathWithinMapping, handler.getLocations())_							.map(resolvedPath -> {_								if (logger.isTraceEnabled()) {_									logger.trace("Resolved public resource URL path \"" + resolvedPath + "\"")__								}_								return pathMapping + resolvedPath__							})__				})_				.next()__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,uses,for,request,mapping,purposes,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,mono,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,list,string,matching,patterns,new,array,list,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,matching,patterns,add,pattern,if,matching,patterns,is,empty,return,mono,empty,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,lookup,path,collections,sort,matching,patterns,pattern,comparator,return,flux,from,iterable,matching,patterns,concat,map,pattern,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,web,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,return,chain,resolve,url,path,path,within,mapping,handler,get,locations,map,resolved,path,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,path,return,path,mapping,resolved,path,next
ResourceUrlProvider -> public final Mono<String> getForLookupPath(String lookupPath);1495035625;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring uses for_request mapping purposes._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or {@code null} if unresolved;public final Mono<String> getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}__		List<String> matchingPatterns = new ArrayList<>()__		for (String pattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(pattern, lookupPath)) {_				matchingPatterns.add(pattern)__			}_		}__		if (matchingPatterns.isEmpty()) {_			return Mono.empty()__		}__		Comparator<String> patternComparator = getPathMatcher().getPatternComparator(lookupPath)__		Collections.sort(matchingPatterns, patternComparator)___		return Flux.fromIterable(matchingPatterns)_				.concatMap(pattern -> {_					String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__					String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__					if (logger.isTraceEnabled()) {_						logger.trace("Invoking ResourceResolverChain for URL pattern \"" + pattern + "\"")__					}_					ResourceWebHandler handler = this.handlerMap.get(pattern)__					ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__					return chain.resolveUrlPath(pathWithinMapping, handler.getLocations())_							.map(resolvedPath -> {_								if (logger.isTraceEnabled()) {_									logger.trace("Resolved public resource URL path \"" + resolvedPath + "\"")__								}_								return pathMapping + resolvedPath__							})__				})_				.next()__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,uses,for,request,mapping,purposes,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,mono,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,list,string,matching,patterns,new,array,list,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,matching,patterns,add,pattern,if,matching,patterns,is,empty,return,mono,empty,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,lookup,path,collections,sort,matching,patterns,pattern,comparator,return,flux,from,iterable,matching,patterns,concat,map,pattern,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,web,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,return,chain,resolve,url,path,path,within,mapping,handler,get,locations,map,resolved,path,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,path,return,path,mapping,resolved,path,next
ResourceUrlProvider -> public final Mono<String> getForLookupPath(String lookupPath);1495868221;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring uses for_request mapping purposes._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or empty if unresolved;public final Mono<String> getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}__		List<String> matchingPatterns = new ArrayList<>()__		for (String pattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(pattern, lookupPath)) {_				matchingPatterns.add(pattern)__			}_		}__		if (matchingPatterns.isEmpty()) {_			return Mono.empty()__		}__		Comparator<String> patternComparator = getPathMatcher().getPatternComparator(lookupPath)__		Collections.sort(matchingPatterns, patternComparator)___		return Flux.fromIterable(matchingPatterns)_				.concatMap(pattern -> {_					String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__					String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__					if (logger.isTraceEnabled()) {_						logger.trace("Invoking ResourceResolverChain for URL pattern \"" + pattern + "\"")__					}_					ResourceWebHandler handler = this.handlerMap.get(pattern)__					ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__					return chain.resolveUrlPath(pathWithinMapping, handler.getLocations())_							.map(resolvedPath -> {_								if (logger.isTraceEnabled()) {_									logger.trace("Resolved public resource URL path \"" + resolvedPath + "\"")__								}_								return pathMapping + resolvedPath__							})__				})_				.next()__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,uses,for,request,mapping,purposes,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,list,string,matching,patterns,new,array,list,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,matching,patterns,add,pattern,if,matching,patterns,is,empty,return,mono,empty,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,lookup,path,collections,sort,matching,patterns,pattern,comparator,return,flux,from,iterable,matching,patterns,concat,map,pattern,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,web,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,return,chain,resolve,url,path,path,within,mapping,handler,get,locations,map,resolved,path,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,path,return,path,mapping,resolved,path,next
ResourceUrlProvider -> public final Mono<String> getForLookupPath(String lookupPath);1496334664;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring uses for_request mapping purposes._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or empty if unresolved;public final Mono<String> getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}__		List<String> matchingPatterns = new ArrayList<>()__		for (String pattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(pattern, lookupPath)) {_				matchingPatterns.add(pattern)__			}_		}__		if (matchingPatterns.isEmpty()) {_			return Mono.empty()__		}__		Comparator<String> patternComparator = getPathMatcher().getPatternComparator(lookupPath)__		Collections.sort(matchingPatterns, patternComparator)___		return Flux.fromIterable(matchingPatterns)_				.concatMap(pattern -> {_					String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__					String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__					if (logger.isTraceEnabled()) {_						logger.trace("Invoking ResourceResolverChain for URL pattern \"" + pattern + "\"")__					}_					ResourceWebHandler handler = this.handlerMap.get(pattern)__					ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__					return chain.resolveUrlPath(pathWithinMapping, handler.getLocations())_							.map(resolvedPath -> {_								if (logger.isTraceEnabled()) {_									logger.trace("Resolved public resource URL path \"" + resolvedPath + "\"")__								}_								return pathMapping + resolvedPath__							})__				})_				.next()__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,uses,for,request,mapping,purposes,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,list,string,matching,patterns,new,array,list,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,matching,patterns,add,pattern,if,matching,patterns,is,empty,return,mono,empty,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,lookup,path,collections,sort,matching,patterns,pattern,comparator,return,flux,from,iterable,matching,patterns,concat,map,pattern,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,web,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,return,chain,resolve,url,path,path,within,mapping,handler,get,locations,map,resolved,path,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,path,return,path,mapping,resolved,path,next
ResourceUrlProvider -> public final Mono<String> getForLookupPath(String lookupPath);1496429194;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring uses for_request mapping purposes._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or empty if unresolved;public final Mono<String> getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}__		List<String> matchingPatterns = new ArrayList<>()__		for (String pattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(pattern, lookupPath)) {_				matchingPatterns.add(pattern)__			}_		}__		if (matchingPatterns.isEmpty()) {_			return Mono.empty()__		}__		Comparator<String> patternComparator = getPathMatcher().getPatternComparator(lookupPath)__		Collections.sort(matchingPatterns, patternComparator)___		return Flux.fromIterable(matchingPatterns)_				.concatMap(pattern -> {_					String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__					String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__					if (logger.isTraceEnabled()) {_						logger.trace("Invoking ResourceResolverChain for URL pattern \"" + pattern + "\"")__					}_					ResourceWebHandler handler = this.handlerMap.get(pattern)__					ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__					return chain.resolveUrlPath(pathWithinMapping, handler.getLocations())_							.map(resolvedPath -> {_								if (logger.isTraceEnabled()) {_									logger.trace("Resolved public resource URL path \"" + resolvedPath + "\"")__								}_								return pathMapping + resolvedPath__							})__				})_				.next()__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,uses,for,request,mapping,purposes,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,list,string,matching,patterns,new,array,list,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,matching,patterns,add,pattern,if,matching,patterns,is,empty,return,mono,empty,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,lookup,path,collections,sort,matching,patterns,pattern,comparator,return,flux,from,iterable,matching,patterns,concat,map,pattern,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,web,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,return,chain,resolve,url,path,path,within,mapping,handler,get,locations,map,resolved,path,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,path,return,path,mapping,resolved,path,next
ResourceUrlProvider -> public final Mono<String> getForLookupPath(String lookupPath);1496430942;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring uses for_request mapping purposes._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or empty if unresolved;public final Mono<String> getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}__		List<String> matchingPatterns = new ArrayList<>()__		for (String pattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(pattern, lookupPath)) {_				matchingPatterns.add(pattern)__			}_		}__		if (matchingPatterns.isEmpty()) {_			return Mono.empty()__		}__		Comparator<String> patternComparator = getPathMatcher().getPatternComparator(lookupPath)__		Collections.sort(matchingPatterns, patternComparator)___		return Flux.fromIterable(matchingPatterns)_				.concatMap(pattern -> {_					String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__					String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__					if (logger.isTraceEnabled()) {_						logger.trace("Invoking ResourceResolverChain for URL pattern \"" + pattern + "\"")__					}_					ResourceWebHandler handler = this.handlerMap.get(pattern)__					ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__					return chain.resolveUrlPath(pathWithinMapping, handler.getLocations())_							.map(resolvedPath -> {_								if (logger.isTraceEnabled()) {_									logger.trace("Resolved public resource URL path \"" + resolvedPath + "\"")__								}_								return pathMapping + resolvedPath__							})__				})_				.next()__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,uses,for,request,mapping,purposes,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,list,string,matching,patterns,new,array,list,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,matching,patterns,add,pattern,if,matching,patterns,is,empty,return,mono,empty,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,lookup,path,collections,sort,matching,patterns,pattern,comparator,return,flux,from,iterable,matching,patterns,concat,map,pattern,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,web,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,return,chain,resolve,url,path,path,within,mapping,handler,get,locations,map,resolved,path,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,path,return,path,mapping,resolved,path,next
ResourceUrlProvider -> public final Mono<String> getForLookupPath(String lookupPath);1496837955;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring uses for_request mapping purposes._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or empty if unresolved;public final Mono<String> getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}__		List<String> matchingPatterns = new ArrayList<>()__		for (String pattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(pattern, lookupPath)) {_				matchingPatterns.add(pattern)__			}_		}__		if (matchingPatterns.isEmpty()) {_			return Mono.empty()__		}__		Comparator<String> patternComparator = getPathMatcher().getPatternComparator(lookupPath)__		Collections.sort(matchingPatterns, patternComparator)___		return Flux.fromIterable(matchingPatterns)_				.concatMap(pattern -> {_					String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__					String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__					if (logger.isTraceEnabled()) {_						logger.trace("Invoking ResourceResolverChain for URL pattern \"" + pattern + "\"")__					}_					ResourceWebHandler handler = this.handlerMap.get(pattern)__					ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__					return chain.resolveUrlPath(pathWithinMapping, handler.getLocations())_							.map(resolvedPath -> {_								if (logger.isTraceEnabled()) {_									logger.trace("Resolved public resource URL path \"" + resolvedPath + "\"")__								}_								return pathMapping + resolvedPath__							})__				})_				.next()__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,uses,for,request,mapping,purposes,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,list,string,matching,patterns,new,array,list,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,matching,patterns,add,pattern,if,matching,patterns,is,empty,return,mono,empty,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,lookup,path,collections,sort,matching,patterns,pattern,comparator,return,flux,from,iterable,matching,patterns,concat,map,pattern,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,web,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,return,chain,resolve,url,path,path,within,mapping,handler,get,locations,map,resolved,path,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,path,return,path,mapping,resolved,path,next
ResourceUrlProvider -> public final Mono<String> getForLookupPath(String lookupPath);1497039338;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring uses for_request mapping purposes._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or empty if unresolved;public final Mono<String> getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}__		List<String> matchingPatterns = new ArrayList<>()__		for (String pattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(pattern, lookupPath)) {_				matchingPatterns.add(pattern)__			}_		}__		if (matchingPatterns.isEmpty()) {_			return Mono.empty()__		}__		Comparator<String> patternComparator = getPathMatcher().getPatternComparator(lookupPath)__		Collections.sort(matchingPatterns, patternComparator)___		return Flux.fromIterable(matchingPatterns)_				.concatMap(pattern -> {_					String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__					String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__					if (logger.isTraceEnabled()) {_						logger.trace("Invoking ResourceResolverChain for URL pattern \"" + pattern + "\"")__					}_					ResourceWebHandler handler = this.handlerMap.get(pattern)__					ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__					return chain.resolveUrlPath(pathWithinMapping, handler.getLocations())_							.map(resolvedPath -> {_								if (logger.isTraceEnabled()) {_									logger.trace("Resolved public resource URL path \"" + resolvedPath + "\"")__								}_								return pathMapping + resolvedPath__							})__				})_				.next()__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,uses,for,request,mapping,purposes,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,list,string,matching,patterns,new,array,list,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,matching,patterns,add,pattern,if,matching,patterns,is,empty,return,mono,empty,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,lookup,path,collections,sort,matching,patterns,pattern,comparator,return,flux,from,iterable,matching,patterns,concat,map,pattern,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,web,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,return,chain,resolve,url,path,path,within,mapping,handler,get,locations,map,resolved,path,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,path,return,path,mapping,resolved,path,next
ResourceUrlProvider -> public final Mono<String> getForLookupPath(String lookupPath);1497039338;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring uses for_request mapping purposes._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or empty if unresolved;public final Mono<String> getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}__		List<String> matchingPatterns = new ArrayList<>()__		for (String pattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(pattern, lookupPath)) {_				matchingPatterns.add(pattern)__			}_		}__		if (matchingPatterns.isEmpty()) {_			return Mono.empty()__		}__		Comparator<String> patternComparator = getPathMatcher().getPatternComparator(lookupPath)__		Collections.sort(matchingPatterns, patternComparator)___		return Flux.fromIterable(matchingPatterns)_				.concatMap(pattern -> {_					String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__					String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__					if (logger.isTraceEnabled()) {_						logger.trace("Invoking ResourceResolverChain for URL pattern \"" + pattern + "\"")__					}_					ResourceWebHandler handler = this.handlerMap.get(pattern)__					ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__					return chain.resolveUrlPath(pathWithinMapping, handler.getLocations())_							.map(resolvedPath -> {_								if (logger.isTraceEnabled()) {_									logger.trace("Resolved public resource URL path \"" + resolvedPath + "\"")__								}_								return pathMapping + resolvedPath__							})__				})_				.next()__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,uses,for,request,mapping,purposes,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,list,string,matching,patterns,new,array,list,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,matching,patterns,add,pattern,if,matching,patterns,is,empty,return,mono,empty,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,lookup,path,collections,sort,matching,patterns,pattern,comparator,return,flux,from,iterable,matching,patterns,concat,map,pattern,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,web,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,return,chain,resolve,url,path,path,within,mapping,handler,get,locations,map,resolved,path,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,path,return,path,mapping,resolved,path,next
ResourceUrlProvider -> public final Mono<String> getForLookupPath(String lookupPath);1497232764;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring uses for_request mapping purposes._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or empty if unresolved;public final Mono<String> getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}__		List<String> matchingPatterns = new ArrayList<>()__		for (String pattern : this.handlerMap.keySet()) {_			if (getPathMatcher().match(pattern, lookupPath)) {_				matchingPatterns.add(pattern)__			}_		}__		if (matchingPatterns.isEmpty()) {_			return Mono.empty()__		}__		Comparator<String> patternComparator = getPathMatcher().getPatternComparator(lookupPath)__		Collections.sort(matchingPatterns, patternComparator)___		return Flux.fromIterable(matchingPatterns)_				.concatMap(pattern -> {_					String pathWithinMapping = getPathMatcher().extractPathWithinPattern(pattern, lookupPath)__					String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__					if (logger.isTraceEnabled()) {_						logger.trace("Invoking ResourceResolverChain for URL pattern \"" + pattern + "\"")__					}_					ResourceWebHandler handler = this.handlerMap.get(pattern)__					ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__					return chain.resolveUrlPath(pathWithinMapping, handler.getLocations())_							.map(resolvedPath -> {_								if (logger.isTraceEnabled()) {_									logger.trace("Resolved public resource URL path \"" + resolvedPath + "\"")__								}_								return pathMapping + resolvedPath__							})__				})_				.next()__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,uses,for,request,mapping,purposes,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,list,string,matching,patterns,new,array,list,for,string,pattern,this,handler,map,key,set,if,get,path,matcher,match,pattern,lookup,path,matching,patterns,add,pattern,if,matching,patterns,is,empty,return,mono,empty,comparator,string,pattern,comparator,get,path,matcher,get,pattern,comparator,lookup,path,collections,sort,matching,patterns,pattern,comparator,return,flux,from,iterable,matching,patterns,concat,map,pattern,string,path,within,mapping,get,path,matcher,extract,path,within,pattern,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,pattern,resource,web,handler,handler,this,handler,map,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,return,chain,resolve,url,path,path,within,mapping,handler,get,locations,map,resolved,path,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,path,return,path,mapping,resolved,path,next
ResourceUrlProvider -> public final Mono<String> getForLookupPath(String lookupPath);1497286385;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring uses for_request mapping purposes._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or empty if unresolved;public final Mono<String> getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}__		Set<PathMatchResult<ResourceWebHandler>> matchResults = this.patternRegistry.findMatches(lookupPath)___		if (matchResults.isEmpty()) {_			return Mono.empty()__		}__		return Flux.fromIterable(matchResults)_				.concatMap(result -> {_					String pathWithinMapping = result.getPattern().extractPathWithinPattern(lookupPath)__					String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__					if (logger.isTraceEnabled()) {_						logger.trace("Invoking ResourceResolverChain for URL pattern \"" + result.getPattern() + "\"")__					}_					ResourceWebHandler handler = result.getHandler()__					ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__					return chain.resolveUrlPath(pathWithinMapping, handler.getLocations())_							.map(resolvedPath -> {_								if (logger.isTraceEnabled()) {_									logger.trace("Resolved public resource URL path \"" + resolvedPath + "\"")__								}_								return pathMapping + resolvedPath__							})__				})_				.next()__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,uses,for,request,mapping,purposes,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,set,path,match,result,resource,web,handler,match,results,this,pattern,registry,find,matches,lookup,path,if,match,results,is,empty,return,mono,empty,return,flux,from,iterable,match,results,concat,map,result,string,path,within,mapping,result,get,pattern,extract,path,within,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,result,get,pattern,resource,web,handler,handler,result,get,handler,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,return,chain,resolve,url,path,path,within,mapping,handler,get,locations,map,resolved,path,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,path,return,path,mapping,resolved,path,next
ResourceUrlProvider -> public final Mono<String> getForLookupPath(String lookupPath);1497974922;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring uses for_request mapping purposes._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or empty if unresolved;public final Mono<String> getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}__		Set<PathMatchResult<ResourceWebHandler>> matchResults = this.patternRegistry.findMatches(lookupPath)___		if (matchResults.isEmpty()) {_			return Mono.empty()__		}__		return Flux.fromIterable(matchResults)_				.concatMap(result -> {_					String pathWithinMapping = result.getPattern().extractPathWithinPattern(lookupPath)__					String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__					if (logger.isTraceEnabled()) {_						logger.trace("Invoking ResourceResolverChain for URL pattern \"" + result.getPattern() + "\"")__					}_					ResourceWebHandler handler = result.getHandler()__					if (handler == null) {_						throw new IllegalStateException("No handler for URL pattern \"" + result.getPattern() + "\"")__					}_					ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__					return chain.resolveUrlPath(pathWithinMapping, handler.getLocations())_							.map(resolvedPath -> {_								if (logger.isTraceEnabled()) {_									logger.trace("Resolved public resource URL path \"" + resolvedPath + "\"")__								}_								return pathMapping + resolvedPath__							})__				})_				.next()__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,uses,for,request,mapping,purposes,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,set,path,match,result,resource,web,handler,match,results,this,pattern,registry,find,matches,lookup,path,if,match,results,is,empty,return,mono,empty,return,flux,from,iterable,match,results,concat,map,result,string,path,within,mapping,result,get,pattern,extract,path,within,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,result,get,pattern,resource,web,handler,handler,result,get,handler,if,handler,null,throw,new,illegal,state,exception,no,handler,for,url,pattern,result,get,pattern,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,return,chain,resolve,url,path,path,within,mapping,handler,get,locations,map,resolved,path,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,path,return,path,mapping,resolved,path,next
ResourceUrlProvider -> public final Mono<String> getForLookupPath(String lookupPath);1498780456;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring uses for_request mapping purposes._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or empty if unresolved;public final Mono<String> getForLookupPath(String lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}__		Set<PathMatchResult<ResourceWebHandler>> matchResults = this.patternRegistry.findMatches(lookupPath)___		if (matchResults.isEmpty()) {_			return Mono.empty()__		}__		return Flux.fromIterable(matchResults)_				.concatMap(result -> {_					String pathWithinMapping = result.getPattern().extractPathWithinPattern(lookupPath)__					String pathMapping = lookupPath.substring(0, lookupPath.indexOf(pathWithinMapping))__					if (logger.isTraceEnabled()) {_						logger.trace("Invoking ResourceResolverChain for URL pattern \"" + result.getPattern() + "\"")__					}_					ResourceWebHandler handler = result.getHandler()__					ResourceResolverChain chain = new DefaultResourceResolverChain(handler.getResourceResolvers())__					return chain.resolveUrlPath(pathWithinMapping, handler.getLocations())_							.map(resolvedPath -> {_								if (logger.isTraceEnabled()) {_									logger.trace("Resolved public resource URL path \"" + resolvedPath + "\"")__								}_								return pathMapping + resolvedPath__							})__				})_				.next()__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,uses,for,request,mapping,purposes,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,lookup,path,string,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,set,path,match,result,resource,web,handler,match,results,this,pattern,registry,find,matches,lookup,path,if,match,results,is,empty,return,mono,empty,return,flux,from,iterable,match,results,concat,map,result,string,path,within,mapping,result,get,pattern,extract,path,within,pattern,lookup,path,string,path,mapping,lookup,path,substring,0,lookup,path,index,of,path,within,mapping,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,result,get,pattern,resource,web,handler,handler,result,get,handler,resource,resolver,chain,chain,new,default,resource,resolver,chain,handler,get,resource,resolvers,return,chain,resolve,url,path,path,within,mapping,handler,get,locations,map,resolved,path,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,path,return,path,mapping,resolved,path,next
ResourceUrlProvider -> public Map<String, ResourceWebHandler> getHandlerMap();1485986572;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceWebHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,web,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceWebHandler> getHandlerMap();1485989424;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceWebHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,web,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceWebHandler> getHandlerMap();1486634978;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceWebHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,web,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceWebHandler> getHandlerMap();1486747801;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceWebHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,web,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceWebHandler> getHandlerMap();1495035625;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceWebHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,web,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceWebHandler> getHandlerMap();1495868221;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceWebHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,web,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceWebHandler> getHandlerMap();1496334664;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceWebHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,web,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceWebHandler> getHandlerMap();1496429194;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceWebHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,web,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceWebHandler> getHandlerMap();1496430942;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceWebHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,web,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceWebHandler> getHandlerMap();1496837955;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceWebHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,web,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceWebHandler> getHandlerMap();1497039338;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceWebHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,web,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceWebHandler> getHandlerMap();1497039338;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceWebHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,web,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<String, ResourceWebHandler> getHandlerMap();1497232764;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<String, ResourceWebHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,string,resource,web,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public boolean isAutodetect();1485986572;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1485989424;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1486634978;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1486635693;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1486674586;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1486747801;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1495035625;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1495868221;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1496334664;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1496429194;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1496430942;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1496837955;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1497039338;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1497039338;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1497232764;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1497286385;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1497974922;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1498780456;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1499448036;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1499679438;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public boolean isAutodetect();1499763525;Return {@code false} if resource mappings were manually configured,_{@code true} otherwise.;public boolean isAutodetect() {_		return this.autodetect__	};return,code,false,if,resource,mappings,were,manually,configured,code,true,otherwise;public,boolean,is,autodetect,return,this,autodetect
ResourceUrlProvider -> public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl);1485986572;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path and returns the full request URL path to expose for public use._@param exchange the current exchange_@param requestUrl the request URL path to resolve_@return the resolved public URL path, or {@code null} if unresolved;public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + requestUrl + "\"")__		}_		int prefixIndex = getLookupPathIndex(exchange)__		int suffixIndex = getEndPathIndex(requestUrl)__		String prefix = requestUrl.substring(0, prefixIndex)__		String suffix = requestUrl.substring(suffixIndex)__		String lookupPath = requestUrl.substring(prefixIndex, suffixIndex)__		return getForLookupPath(lookupPath).map(resolvedPath -> prefix + resolvedPath + suffix)__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,exchange,the,current,exchange,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,mono,string,get,for,request,url,server,web,exchange,exchange,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,prefix,index,get,lookup,path,index,exchange,int,suffix,index,get,end,path,index,request,url,string,prefix,request,url,substring,0,prefix,index,string,suffix,request,url,substring,suffix,index,string,lookup,path,request,url,substring,prefix,index,suffix,index,return,get,for,lookup,path,lookup,path,map,resolved,path,prefix,resolved,path,suffix
ResourceUrlProvider -> public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl);1485989424;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path and returns the full request URL path to expose for public use._@param exchange the current exchange_@param requestUrl the request URL path to resolve_@return the resolved public URL path, or {@code null} if unresolved;public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + requestUrl + "\"")__		}_		int prefixIndex = getLookupPathIndex(exchange)__		int suffixIndex = getEndPathIndex(requestUrl)__		String prefix = requestUrl.substring(0, prefixIndex)__		String suffix = requestUrl.substring(suffixIndex)__		String lookupPath = requestUrl.substring(prefixIndex, suffixIndex)__		return getForLookupPath(lookupPath).map(resolvedPath -> prefix + resolvedPath + suffix)__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,exchange,the,current,exchange,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,mono,string,get,for,request,url,server,web,exchange,exchange,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,prefix,index,get,lookup,path,index,exchange,int,suffix,index,get,end,path,index,request,url,string,prefix,request,url,substring,0,prefix,index,string,suffix,request,url,substring,suffix,index,string,lookup,path,request,url,substring,prefix,index,suffix,index,return,get,for,lookup,path,lookup,path,map,resolved,path,prefix,resolved,path,suffix
ResourceUrlProvider -> public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl);1486634978;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path and returns the full request URL path to expose for public use._@param exchange the current exchange_@param requestUrl the request URL path to resolve_@return the resolved public URL path, or {@code null} if unresolved;public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + requestUrl + "\"")__		}_		int prefixIndex = getLookupPathIndex(exchange)__		int suffixIndex = getEndPathIndex(requestUrl)__		String prefix = requestUrl.substring(0, prefixIndex)__		String suffix = requestUrl.substring(suffixIndex)__		String lookupPath = requestUrl.substring(prefixIndex, suffixIndex)__		return getForLookupPath(lookupPath).map(resolvedPath -> prefix + resolvedPath + suffix)__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,exchange,the,current,exchange,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,mono,string,get,for,request,url,server,web,exchange,exchange,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,prefix,index,get,lookup,path,index,exchange,int,suffix,index,get,end,path,index,request,url,string,prefix,request,url,substring,0,prefix,index,string,suffix,request,url,substring,suffix,index,string,lookup,path,request,url,substring,prefix,index,suffix,index,return,get,for,lookup,path,lookup,path,map,resolved,path,prefix,resolved,path,suffix
ResourceUrlProvider -> public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl);1486635693;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path and returns the full request URL path to expose for public use._@param exchange the current exchange_@param requestUrl the request URL path to resolve_@return the resolved public URL path, or {@code null} if unresolved;public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + requestUrl + "\"")__		}_		int prefixIndex = getLookupPathIndex(exchange)__		int suffixIndex = getEndPathIndex(requestUrl)__		String prefix = requestUrl.substring(0, prefixIndex)__		String suffix = requestUrl.substring(suffixIndex)__		String lookupPath = requestUrl.substring(prefixIndex, suffixIndex)__		return getForLookupPath(lookupPath).map(resolvedPath -> prefix + resolvedPath + suffix)__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,exchange,the,current,exchange,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,mono,string,get,for,request,url,server,web,exchange,exchange,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,prefix,index,get,lookup,path,index,exchange,int,suffix,index,get,end,path,index,request,url,string,prefix,request,url,substring,0,prefix,index,string,suffix,request,url,substring,suffix,index,string,lookup,path,request,url,substring,prefix,index,suffix,index,return,get,for,lookup,path,lookup,path,map,resolved,path,prefix,resolved,path,suffix
ResourceUrlProvider -> public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl);1486674586;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path and returns the full request URL path to expose for public use._@param exchange the current exchange_@param requestUrl the request URL path to resolve_@return the resolved public URL path, or {@code null} if unresolved;public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + requestUrl + "\"")__		}_		int prefixIndex = getLookupPathIndex(exchange)__		int suffixIndex = getEndPathIndex(requestUrl)__		String prefix = requestUrl.substring(0, prefixIndex)__		String suffix = requestUrl.substring(suffixIndex)__		String lookupPath = requestUrl.substring(prefixIndex, suffixIndex)__		return getForLookupPath(lookupPath).map(resolvedPath -> prefix + resolvedPath + suffix)__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,exchange,the,current,exchange,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,mono,string,get,for,request,url,server,web,exchange,exchange,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,prefix,index,get,lookup,path,index,exchange,int,suffix,index,get,end,path,index,request,url,string,prefix,request,url,substring,0,prefix,index,string,suffix,request,url,substring,suffix,index,string,lookup,path,request,url,substring,prefix,index,suffix,index,return,get,for,lookup,path,lookup,path,map,resolved,path,prefix,resolved,path,suffix
ResourceUrlProvider -> public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl);1486747801;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path and returns the full request URL path to expose for public use._@param exchange the current exchange_@param requestUrl the request URL path to resolve_@return the resolved public URL path, or {@code null} if unresolved;public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + requestUrl + "\"")__		}_		int prefixIndex = getLookupPathIndex(exchange)__		int suffixIndex = getEndPathIndex(requestUrl)__		String prefix = requestUrl.substring(0, prefixIndex)__		String suffix = requestUrl.substring(suffixIndex)__		String lookupPath = requestUrl.substring(prefixIndex, suffixIndex)__		return getForLookupPath(lookupPath).map(resolvedPath -> prefix + resolvedPath + suffix)__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,exchange,the,current,exchange,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,mono,string,get,for,request,url,server,web,exchange,exchange,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,prefix,index,get,lookup,path,index,exchange,int,suffix,index,get,end,path,index,request,url,string,prefix,request,url,substring,0,prefix,index,string,suffix,request,url,substring,suffix,index,string,lookup,path,request,url,substring,prefix,index,suffix,index,return,get,for,lookup,path,lookup,path,map,resolved,path,prefix,resolved,path,suffix
ResourceUrlProvider -> public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl);1495035625;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path and returns the full request URL path to expose for public use._@param exchange the current exchange_@param requestUrl the request URL path to resolve_@return the resolved public URL path, or {@code null} if unresolved;public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + requestUrl + "\"")__		}_		int prefixIndex = getLookupPathIndex(exchange)__		int suffixIndex = getEndPathIndex(requestUrl)__		String prefix = requestUrl.substring(0, prefixIndex)__		String suffix = requestUrl.substring(suffixIndex)__		String lookupPath = requestUrl.substring(prefixIndex, suffixIndex)__		return getForLookupPath(lookupPath).map(resolvedPath -> prefix + resolvedPath + suffix)__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,exchange,the,current,exchange,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,code,null,if,unresolved;public,final,mono,string,get,for,request,url,server,web,exchange,exchange,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,prefix,index,get,lookup,path,index,exchange,int,suffix,index,get,end,path,index,request,url,string,prefix,request,url,substring,0,prefix,index,string,suffix,request,url,substring,suffix,index,string,lookup,path,request,url,substring,prefix,index,suffix,index,return,get,for,lookup,path,lookup,path,map,resolved,path,prefix,resolved,path,suffix
ResourceUrlProvider -> public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl);1495868221;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path and returns the full request URL path to expose for public use._@param exchange the current exchange_@param requestUrl the request URL path to resolve_@return the resolved public URL path, or empty if unresolved;public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + requestUrl + "\"")__		}_		int prefixIndex = getLookupPathIndex(exchange)__		int suffixIndex = getEndPathIndex(requestUrl)__		String prefix = requestUrl.substring(0, prefixIndex)__		String suffix = requestUrl.substring(suffixIndex)__		String lookupPath = requestUrl.substring(prefixIndex, suffixIndex)__		return getForLookupPath(lookupPath).map(resolvedPath -> prefix + resolvedPath + suffix)__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,exchange,the,current,exchange,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,request,url,server,web,exchange,exchange,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,prefix,index,get,lookup,path,index,exchange,int,suffix,index,get,end,path,index,request,url,string,prefix,request,url,substring,0,prefix,index,string,suffix,request,url,substring,suffix,index,string,lookup,path,request,url,substring,prefix,index,suffix,index,return,get,for,lookup,path,lookup,path,map,resolved,path,prefix,resolved,path,suffix
ResourceUrlProvider -> public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl);1496334664;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path and returns the full request URL path to expose for public use._@param exchange the current exchange_@param requestUrl the request URL path to resolve_@return the resolved public URL path, or empty if unresolved;public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + requestUrl + "\"")__		}_		int prefixIndex = getLookupPathIndex(exchange)__		int suffixIndex = getEndPathIndex(requestUrl)__		String prefix = requestUrl.substring(0, prefixIndex)__		String suffix = requestUrl.substring(suffixIndex)__		String lookupPath = requestUrl.substring(prefixIndex, suffixIndex)__		return getForLookupPath(lookupPath).map(resolvedPath -> prefix + resolvedPath + suffix)__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,exchange,the,current,exchange,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,request,url,server,web,exchange,exchange,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,prefix,index,get,lookup,path,index,exchange,int,suffix,index,get,end,path,index,request,url,string,prefix,request,url,substring,0,prefix,index,string,suffix,request,url,substring,suffix,index,string,lookup,path,request,url,substring,prefix,index,suffix,index,return,get,for,lookup,path,lookup,path,map,resolved,path,prefix,resolved,path,suffix
ResourceUrlProvider -> public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl);1496429194;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path and returns the full request URL path to expose for public use._@param exchange the current exchange_@param requestUrl the request URL path to resolve_@return the resolved public URL path, or empty if unresolved;public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + requestUrl + "\"")__		}_		int prefixIndex = getLookupPathIndex(exchange)__		int suffixIndex = getEndPathIndex(requestUrl)__		String prefix = requestUrl.substring(0, prefixIndex)__		String suffix = requestUrl.substring(suffixIndex)__		String lookupPath = requestUrl.substring(prefixIndex, suffixIndex)__		return getForLookupPath(lookupPath).map(resolvedPath -> prefix + resolvedPath + suffix)__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,exchange,the,current,exchange,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,request,url,server,web,exchange,exchange,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,prefix,index,get,lookup,path,index,exchange,int,suffix,index,get,end,path,index,request,url,string,prefix,request,url,substring,0,prefix,index,string,suffix,request,url,substring,suffix,index,string,lookup,path,request,url,substring,prefix,index,suffix,index,return,get,for,lookup,path,lookup,path,map,resolved,path,prefix,resolved,path,suffix
ResourceUrlProvider -> public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl);1496430942;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path and returns the full request URL path to expose for public use._@param exchange the current exchange_@param requestUrl the request URL path to resolve_@return the resolved public URL path, or empty if unresolved;public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + requestUrl + "\"")__		}_		int prefixIndex = getLookupPathIndex(exchange)__		int suffixIndex = getEndPathIndex(requestUrl)__		String prefix = requestUrl.substring(0, prefixIndex)__		String suffix = requestUrl.substring(suffixIndex)__		String lookupPath = requestUrl.substring(prefixIndex, suffixIndex)__		return getForLookupPath(lookupPath).map(resolvedPath -> prefix + resolvedPath + suffix)__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,exchange,the,current,exchange,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,request,url,server,web,exchange,exchange,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,prefix,index,get,lookup,path,index,exchange,int,suffix,index,get,end,path,index,request,url,string,prefix,request,url,substring,0,prefix,index,string,suffix,request,url,substring,suffix,index,string,lookup,path,request,url,substring,prefix,index,suffix,index,return,get,for,lookup,path,lookup,path,map,resolved,path,prefix,resolved,path,suffix
ResourceUrlProvider -> public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl);1496837955;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path and returns the full request URL path to expose for public use._@param exchange the current exchange_@param requestUrl the request URL path to resolve_@return the resolved public URL path, or empty if unresolved;public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + requestUrl + "\"")__		}_		int prefixIndex = getLookupPathIndex(exchange)__		int suffixIndex = getEndPathIndex(requestUrl)__		String prefix = requestUrl.substring(0, prefixIndex)__		String suffix = requestUrl.substring(suffixIndex)__		String lookupPath = requestUrl.substring(prefixIndex, suffixIndex)__		return getForLookupPath(lookupPath).map(resolvedPath -> prefix + resolvedPath + suffix)__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,exchange,the,current,exchange,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,request,url,server,web,exchange,exchange,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,prefix,index,get,lookup,path,index,exchange,int,suffix,index,get,end,path,index,request,url,string,prefix,request,url,substring,0,prefix,index,string,suffix,request,url,substring,suffix,index,string,lookup,path,request,url,substring,prefix,index,suffix,index,return,get,for,lookup,path,lookup,path,map,resolved,path,prefix,resolved,path,suffix
ResourceUrlProvider -> public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl);1497039338;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path and returns the full request URL path to expose for public use._@param exchange the current exchange_@param requestUrl the request URL path to resolve_@return the resolved public URL path, or empty if unresolved;public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + requestUrl + "\"")__		}_		int prefixIndex = getLookupPathIndex(exchange)__		int suffixIndex = getEndPathIndex(requestUrl)__		String prefix = requestUrl.substring(0, prefixIndex)__		String suffix = requestUrl.substring(suffixIndex)__		String lookupPath = requestUrl.substring(prefixIndex, suffixIndex)__		return getForLookupPath(lookupPath).map(resolvedPath -> prefix + resolvedPath + suffix)__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,exchange,the,current,exchange,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,request,url,server,web,exchange,exchange,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,prefix,index,get,lookup,path,index,exchange,int,suffix,index,get,end,path,index,request,url,string,prefix,request,url,substring,0,prefix,index,string,suffix,request,url,substring,suffix,index,string,lookup,path,request,url,substring,prefix,index,suffix,index,return,get,for,lookup,path,lookup,path,map,resolved,path,prefix,resolved,path,suffix
ResourceUrlProvider -> public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl);1497039338;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path and returns the full request URL path to expose for public use._@param exchange the current exchange_@param requestUrl the request URL path to resolve_@return the resolved public URL path, or empty if unresolved;public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + requestUrl + "\"")__		}_		int prefixIndex = getLookupPathIndex(exchange)__		int suffixIndex = getEndPathIndex(requestUrl)__		String prefix = requestUrl.substring(0, prefixIndex)__		String suffix = requestUrl.substring(suffixIndex)__		String lookupPath = requestUrl.substring(prefixIndex, suffixIndex)__		return getForLookupPath(lookupPath).map(resolvedPath -> prefix + resolvedPath + suffix)__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,exchange,the,current,exchange,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,request,url,server,web,exchange,exchange,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,prefix,index,get,lookup,path,index,exchange,int,suffix,index,get,end,path,index,request,url,string,prefix,request,url,substring,0,prefix,index,string,suffix,request,url,substring,suffix,index,string,lookup,path,request,url,substring,prefix,index,suffix,index,return,get,for,lookup,path,lookup,path,map,resolved,path,prefix,resolved,path,suffix
ResourceUrlProvider -> public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl);1497232764;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path and returns the full request URL path to expose for public use._@param exchange the current exchange_@param requestUrl the request URL path to resolve_@return the resolved public URL path, or empty if unresolved;public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + requestUrl + "\"")__		}_		int prefixIndex = getLookupPathIndex(exchange)__		int suffixIndex = getEndPathIndex(requestUrl)__		String prefix = requestUrl.substring(0, prefixIndex)__		String suffix = requestUrl.substring(suffixIndex)__		String lookupPath = requestUrl.substring(prefixIndex, suffixIndex)__		return getForLookupPath(lookupPath).map(resolvedPath -> prefix + resolvedPath + suffix)__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,exchange,the,current,exchange,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,request,url,server,web,exchange,exchange,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,prefix,index,get,lookup,path,index,exchange,int,suffix,index,get,end,path,index,request,url,string,prefix,request,url,substring,0,prefix,index,string,suffix,request,url,substring,suffix,index,string,lookup,path,request,url,substring,prefix,index,suffix,index,return,get,for,lookup,path,lookup,path,map,resolved,path,prefix,resolved,path,suffix
ResourceUrlProvider -> public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl);1497286385;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path and returns the full request URL path to expose for public use._@param exchange the current exchange_@param requestUrl the request URL path to resolve_@return the resolved public URL path, or empty if unresolved;public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + requestUrl + "\"")__		}_		int prefixIndex = getLookupPathIndex(exchange)__		int suffixIndex = getEndPathIndex(requestUrl)__		String prefix = requestUrl.substring(0, prefixIndex)__		String suffix = requestUrl.substring(suffixIndex)__		String lookupPath = requestUrl.substring(prefixIndex, suffixIndex)__		return getForLookupPath(lookupPath).map(resolvedPath -> prefix + resolvedPath + suffix)__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,exchange,the,current,exchange,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,request,url,server,web,exchange,exchange,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,prefix,index,get,lookup,path,index,exchange,int,suffix,index,get,end,path,index,request,url,string,prefix,request,url,substring,0,prefix,index,string,suffix,request,url,substring,suffix,index,string,lookup,path,request,url,substring,prefix,index,suffix,index,return,get,for,lookup,path,lookup,path,map,resolved,path,prefix,resolved,path,suffix
ResourceUrlProvider -> public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl);1497974922;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path and returns the full request URL path to expose for public use._@param exchange the current exchange_@param requestUrl the request URL path to resolve_@return the resolved public URL path, or empty if unresolved;public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + requestUrl + "\"")__		}_		int prefixIndex = getLookupPathIndex(exchange)__		int suffixIndex = getEndPathIndex(requestUrl)__		String prefix = requestUrl.substring(0, prefixIndex)__		String suffix = requestUrl.substring(suffixIndex)__		String lookupPath = requestUrl.substring(prefixIndex, suffixIndex)__		return getForLookupPath(lookupPath).map(resolvedPath -> prefix + resolvedPath + suffix)__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,exchange,the,current,exchange,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,request,url,server,web,exchange,exchange,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,prefix,index,get,lookup,path,index,exchange,int,suffix,index,get,end,path,index,request,url,string,prefix,request,url,substring,0,prefix,index,string,suffix,request,url,substring,suffix,index,string,lookup,path,request,url,substring,prefix,index,suffix,index,return,get,for,lookup,path,lookup,path,map,resolved,path,prefix,resolved,path,suffix
ResourceUrlProvider -> public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl);1498780456;A variation on {@link #getForLookupPath(String)} that accepts a full request_URL path and returns the full request URL path to expose for public use._@param exchange the current exchange_@param requestUrl the request URL path to resolve_@return the resolved public URL path, or empty if unresolved;public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + requestUrl + "\"")__		}_		int prefixIndex = getLookupPathIndex(exchange)__		int suffixIndex = getEndPathIndex(requestUrl)__		String prefix = requestUrl.substring(0, prefixIndex)__		String suffix = requestUrl.substring(suffixIndex)__		String lookupPath = requestUrl.substring(prefixIndex, suffixIndex)__		return getForLookupPath(lookupPath).map(resolvedPath -> prefix + resolvedPath + suffix)__	};a,variation,on,link,get,for,lookup,path,string,that,accepts,a,full,request,url,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,exchange,the,current,exchange,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,request,url,server,web,exchange,exchange,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,int,prefix,index,get,lookup,path,index,exchange,int,suffix,index,get,end,path,index,request,url,string,prefix,request,url,substring,0,prefix,index,string,suffix,request,url,substring,suffix,index,string,lookup,path,request,url,substring,prefix,index,suffix,index,return,get,for,lookup,path,lookup,path,map,resolved,path,prefix,resolved,path,suffix
ResourceUrlProvider -> public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl);1499448036;A variation on {@link #getForLookupPath(PathContainer)} that accepts a_full request URL path and returns the full request URL path to expose_for public use._@param exchange the current exchange_@param requestUrl the request URL path to resolve_@return the resolved public URL path, or empty if unresolved;public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + requestUrl + "\"")__		}_		ServerHttpRequest request = exchange.getRequest()__		int queryIndex = getQueryIndex(requestUrl)__		String lookupPath = requestUrl.substring(0, queryIndex)__		String query = requestUrl.substring(queryIndex)__		PathContainer parsedLookupPath = PathContainer.parse(lookupPath, StandardCharsets.UTF_8)__		return getForLookupPath(parsedLookupPath).map(resolvedPath ->_				request.getPath().contextPath().value() + resolvedPath + query)__	};a,variation,on,link,get,for,lookup,path,path,container,that,accepts,a,full,request,url,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,exchange,the,current,exchange,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,request,url,server,web,exchange,exchange,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,server,http,request,request,exchange,get,request,int,query,index,get,query,index,request,url,string,lookup,path,request,url,substring,0,query,index,string,query,request,url,substring,query,index,path,container,parsed,lookup,path,path,container,parse,lookup,path,standard,charsets,return,get,for,lookup,path,parsed,lookup,path,map,resolved,path,request,get,path,context,path,value,resolved,path,query
ResourceUrlProvider -> public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl);1499679438;A variation on {@link #getForLookupPath(PathContainer)} that accepts a_full request URL path and returns the full request URL path to expose_for public use._@param exchange the current exchange_@param requestUrl the request URL path to resolve_@return the resolved public URL path, or empty if unresolved;public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + requestUrl + "\"")__		}_		ServerHttpRequest request = exchange.getRequest()__		int queryIndex = getQueryIndex(requestUrl)__		String lookupPath = requestUrl.substring(0, queryIndex)__		String query = requestUrl.substring(queryIndex)__		PathContainer parsedLookupPath = PathContainer.parse(lookupPath, StandardCharsets.UTF_8)__		return getForLookupPath(parsedLookupPath).map(resolvedPath ->_				request.getPath().contextPath().value() + resolvedPath + query)__	};a,variation,on,link,get,for,lookup,path,path,container,that,accepts,a,full,request,url,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,exchange,the,current,exchange,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,request,url,server,web,exchange,exchange,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,server,http,request,request,exchange,get,request,int,query,index,get,query,index,request,url,string,lookup,path,request,url,substring,0,query,index,string,query,request,url,substring,query,index,path,container,parsed,lookup,path,path,container,parse,lookup,path,standard,charsets,return,get,for,lookup,path,parsed,lookup,path,map,resolved,path,request,get,path,context,path,value,resolved,path,query
ResourceUrlProvider -> public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl);1499763525;A variation on {@link #getForLookupPath(PathContainer)} that accepts a_full request URL path and returns the full request URL path to expose_for public use._@param exchange the current exchange_@param requestUrl the request URL path to resolve_@return the resolved public URL path, or empty if unresolved;public final Mono<String> getForRequestUrl(ServerWebExchange exchange, String requestUrl) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for request URL \"" + requestUrl + "\"")__		}_		ServerHttpRequest request = exchange.getRequest()__		int queryIndex = getQueryIndex(requestUrl)__		String lookupPath = requestUrl.substring(0, queryIndex)__		String query = requestUrl.substring(queryIndex)__		PathContainer parsedLookupPath = PathContainer.parseUrlPath(lookupPath)__		return getForLookupPath(parsedLookupPath).map(resolvedPath ->_				request.getPath().contextPath().value() + resolvedPath + query)__	};a,variation,on,link,get,for,lookup,path,path,container,that,accepts,a,full,request,url,path,and,returns,the,full,request,url,path,to,expose,for,public,use,param,exchange,the,current,exchange,param,request,url,the,request,url,path,to,resolve,return,the,resolved,public,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,request,url,server,web,exchange,exchange,string,request,url,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,request,url,request,url,server,http,request,request,exchange,get,request,int,query,index,get,query,index,request,url,string,lookup,path,request,url,substring,0,query,index,string,query,request,url,substring,query,index,path,container,parsed,lookup,path,path,container,parse,url,path,lookup,path,return,get,for,lookup,path,parsed,lookup,path,map,resolved,path,request,get,path,context,path,value,resolved,path,query
ResourceUrlProvider -> public void setPathPatternParser(PathPatternParser patternParser);1497286385;Configure a {@code PathPatternParser} to use when comparing target lookup path_against resource mappings.;public void setPathPatternParser(PathPatternParser patternParser) {_		this.patternRegistry = new PathPatternRegistry<>(patternParser)__	};configure,a,code,path,pattern,parser,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,pattern,parser,path,pattern,parser,pattern,parser,this,pattern,registry,new,path,pattern,registry,pattern,parser
ResourceUrlProvider -> public void setPathPatternParser(PathPatternParser patternParser);1497974922;Configure a {@code PathPatternParser} to use when comparing target lookup path_against resource mappings.;public void setPathPatternParser(PathPatternParser patternParser) {_		this.patternRegistry = new PathPatternRegistry<>(patternParser)__	};configure,a,code,path,pattern,parser,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,pattern,parser,path,pattern,parser,pattern,parser,this,pattern,registry,new,path,pattern,registry,pattern,parser
ResourceUrlProvider -> public void setPathPatternParser(PathPatternParser patternParser);1498780456;Configure a {@code PathPatternParser} to use when comparing target lookup path_against resource mappings.;public void setPathPatternParser(PathPatternParser patternParser) {_		this.patternRegistry = new PathPatternRegistry<>(patternParser)__	};configure,a,code,path,pattern,parser,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,pattern,parser,path,pattern,parser,pattern,parser,this,pattern,registry,new,path,pattern,registry,pattern,parser
ResourceUrlProvider -> public void setPathPatternParser(PathPatternParser patternParser);1499448036;Configure a {@code PathPatternParser} to use when comparing target lookup path_against resource mappings.;public void setPathPatternParser(PathPatternParser patternParser) {_		this.patternRegistry = new PathPatternRegistry<>(patternParser)__	};configure,a,code,path,pattern,parser,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,pattern,parser,path,pattern,parser,pattern,parser,this,pattern,registry,new,path,pattern,registry,pattern,parser
ResourceUrlProvider -> public void setHandlerMap(@Nullable Map<String, ResourceWebHandler> handlerMap);1496837955;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(@Nullable Map<String, ResourceWebHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,nullable,map,string,resource,web,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(@Nullable Map<String, ResourceWebHandler> handlerMap);1497039338;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(@Nullable Map<String, ResourceWebHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,nullable,map,string,resource,web,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(@Nullable Map<String, ResourceWebHandler> handlerMap);1497039338;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(@Nullable Map<String, ResourceWebHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,nullable,map,string,resource,web,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(@Nullable Map<String, ResourceWebHandler> handlerMap);1497232764;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(@Nullable Map<String, ResourceWebHandler> handlerMap) {_		if (handlerMap != null) {_			this.handlerMap.clear()__			this.handlerMap.putAll(handlerMap)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,nullable,map,string,resource,web,handler,handler,map,if,handler,map,null,this,handler,map,clear,this,handler,map,put,all,handler,map,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(@Nullable Map<String, ResourceWebHandler> handlerMap);1497286385;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(@Nullable Map<String, ResourceWebHandler> handlerMap) {_		if (handlerMap != null) {_			this.patternRegistry.clear()__			handlerMap.forEach(this.patternRegistry::register)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,nullable,map,string,resource,web,handler,handler,map,if,handler,map,null,this,pattern,registry,clear,handler,map,for,each,this,pattern,registry,register,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(@Nullable Map<String, ResourceWebHandler> handlerMap);1497974922;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(@Nullable Map<String, ResourceWebHandler> handlerMap) {_		if (handlerMap != null) {_			this.patternRegistry.clear()__			handlerMap.forEach(this.patternRegistry::register)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,nullable,map,string,resource,web,handler,handler,map,if,handler,map,null,this,pattern,registry,clear,handler,map,for,each,this,pattern,registry,register,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(@Nullable Map<String, ResourceWebHandler> handlerMap);1498780456;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(@Nullable Map<String, ResourceWebHandler> handlerMap) {_		if (handlerMap != null) {_			this.patternRegistry.clear()__			handlerMap.forEach(this.patternRegistry::register)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,nullable,map,string,resource,web,handler,handler,map,if,handler,map,null,this,pattern,registry,clear,handler,map,for,each,this,pattern,registry,register,this,autodetect,false
ResourceUrlProvider -> public void setHandlerMap(@Nullable Map<String, ResourceWebHandler> handlerMap);1499448036;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void setHandlerMap(@Nullable Map<String, ResourceWebHandler> handlerMap) {_		if (handlerMap != null) {_			this.patternRegistry.clear()__			handlerMap.forEach(this.patternRegistry::register)__			this.autodetect = false__		}_	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,set,handler,map,nullable,map,string,resource,web,handler,handler,map,if,handler,map,null,this,pattern,registry,clear,handler,map,for,each,this,pattern,registry,register,this,autodetect,false
ResourceUrlProvider -> public PathMatcher getPathMatcher();1485986572;Return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1485989424;Return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1486634978;Return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1486747801;Return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1495035625;Return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1495868221;Return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1496334664;Return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1496429194;Return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1496430942;Return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1496837955;Return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1497039338;Return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1497039338;Return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public PathMatcher getPathMatcher();1497232764;Return the configured {@code PathMatcher}.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,configured,code,path,matcher;public,path,matcher,get,path,matcher,return,this,path,matcher
ResourceUrlProvider -> public void setUrlPathHelper(HttpRequestPathHelper urlPathHelper);1485986572;Configure a {@code UrlPathHelper} to use in_{@link #getForRequestUrl(ServerWebExchange, String)}_in order to derive the lookup path for a target request URL path.;public void setUrlPathHelper(HttpRequestPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,for,request,url,server,web,exchange,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,url,path,helper,http,request,path,helper,url,path,helper,this,url,path,helper,url,path,helper
ResourceUrlProvider -> public void setUrlPathHelper(HttpRequestPathHelper urlPathHelper);1485989424;Configure a {@code UrlPathHelper} to use in_{@link #getForRequestUrl(ServerWebExchange, String)}_in order to derive the lookup path for a target request URL path.;public void setUrlPathHelper(HttpRequestPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,for,request,url,server,web,exchange,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,url,path,helper,http,request,path,helper,url,path,helper,this,url,path,helper,url,path,helper
ResourceUrlProvider -> public void setUrlPathHelper(HttpRequestPathHelper urlPathHelper);1486634978;Configure a {@code UrlPathHelper} to use in_{@link #getForRequestUrl(ServerWebExchange, String)}_in order to derive the lookup path for a target request URL path.;public void setUrlPathHelper(HttpRequestPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,for,request,url,server,web,exchange,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,url,path,helper,http,request,path,helper,url,path,helper,this,url,path,helper,url,path,helper
ResourceUrlProvider -> public void setUrlPathHelper(HttpRequestPathHelper urlPathHelper);1486635693;Configure a {@code UrlPathHelper} to use in_{@link #getForRequestUrl(ServerWebExchange, String)}_in order to derive the lookup path for a target request URL path.;public void setUrlPathHelper(HttpRequestPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,for,request,url,server,web,exchange,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,url,path,helper,http,request,path,helper,url,path,helper,this,url,path,helper,url,path,helper
ResourceUrlProvider -> public void setUrlPathHelper(HttpRequestPathHelper urlPathHelper);1486674586;Configure a {@code UrlPathHelper} to use in_{@link #getForRequestUrl(ServerWebExchange, String)}_in order to derive the lookup path for a target request URL path.;public void setUrlPathHelper(HttpRequestPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,for,request,url,server,web,exchange,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,url,path,helper,http,request,path,helper,url,path,helper,this,url,path,helper,url,path,helper
ResourceUrlProvider -> public void setUrlPathHelper(HttpRequestPathHelper urlPathHelper);1486747801;Configure a {@code UrlPathHelper} to use in_{@link #getForRequestUrl(ServerWebExchange, String)}_in order to derive the lookup path for a target request URL path.;public void setUrlPathHelper(HttpRequestPathHelper urlPathHelper) {_		this.urlPathHelper = urlPathHelper__	};configure,a,code,url,path,helper,to,use,in,link,get,for,request,url,server,web,exchange,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,url,path,helper,http,request,path,helper,url,path,helper,this,url,path,helper,url,path,helper
ResourceUrlProvider -> public void registerHandlers(Map<String, ResourceWebHandler> handlerMap);1500498279;Manually configure resource handler mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. If this property is used,_auto-detection is turned off.;public void registerHandlers(Map<String, ResourceWebHandler> handlerMap) {_		this.handlerMap.clear()__		handlerMap.forEach((rawPattern, resourceWebHandler) -> {_			rawPattern = prependLeadingSlash(rawPattern)__			PathPattern pattern = this.patternParser.parse(rawPattern)__			this.handlerMap.put(pattern, resourceWebHandler)__		})__	};manually,configure,resource,handler,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,if,this,property,is,used,auto,detection,is,turned,off;public,void,register,handlers,map,string,resource,web,handler,handler,map,this,handler,map,clear,handler,map,for,each,raw,pattern,resource,web,handler,raw,pattern,prepend,leading,slash,raw,pattern,path,pattern,pattern,this,pattern,parser,parse,raw,pattern,this,handler,map,put,pattern,resource,web,handler
ResourceUrlProvider -> public void registerHandlers(Map<String, ResourceWebHandler> handlerMap);1501237594;Manually configure resource handler mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. If this property is used,_auto-detection is turned off.;public void registerHandlers(Map<String, ResourceWebHandler> handlerMap) {_		this.handlerMap.clear()__		handlerMap.forEach((rawPattern, resourceWebHandler) -> {_			rawPattern = prependLeadingSlash(rawPattern)__			PathPattern pattern = this.patternParser.parse(rawPattern)__			this.handlerMap.put(pattern, resourceWebHandler)__		})__	};manually,configure,resource,handler,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,if,this,property,is,used,auto,detection,is,turned,off;public,void,register,handlers,map,string,resource,web,handler,handler,map,this,handler,map,clear,handler,map,for,each,raw,pattern,resource,web,handler,raw,pattern,prepend,leading,slash,raw,pattern,path,pattern,pattern,this,pattern,parser,parse,raw,pattern,this,handler,map,put,pattern,resource,web,handler
ResourceUrlProvider -> public void registerHandlers(Map<String, ResourceWebHandler> handlerMap);1501531808;Manually configure resource handler mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. If this property is used,_auto-detection is turned off.;public void registerHandlers(Map<String, ResourceWebHandler> handlerMap) {_		this.handlerMap.clear()__		handlerMap.forEach((rawPattern, resourceWebHandler) -> {_			rawPattern = prependLeadingSlash(rawPattern)__			PathPattern pattern = this.patternParser.parse(rawPattern)__			this.handlerMap.put(pattern, resourceWebHandler)__		})__	};manually,configure,resource,handler,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,if,this,property,is,used,auto,detection,is,turned,off;public,void,register,handlers,map,string,resource,web,handler,handler,map,this,handler,map,clear,handler,map,for,each,raw,pattern,resource,web,handler,raw,pattern,prepend,leading,slash,raw,pattern,path,pattern,pattern,this,pattern,parser,parse,raw,pattern,this,handler,map,put,pattern,resource,web,handler
ResourceUrlProvider -> public void registerHandlers(Map<String, ResourceWebHandler> handlerMap);1501690296;Manually configure resource handler mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. If this property is used,_auto-detection is turned off.;public void registerHandlers(Map<String, ResourceWebHandler> handlerMap) {_		this.handlerMap.clear()__		handlerMap.forEach((rawPattern, resourceWebHandler) -> {_			rawPattern = prependLeadingSlash(rawPattern)__			PathPattern pattern = this.patternParser.parse(rawPattern)__			this.handlerMap.put(pattern, resourceWebHandler)__		})__	};manually,configure,resource,handler,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,if,this,property,is,used,auto,detection,is,turned,off;public,void,register,handlers,map,string,resource,web,handler,handler,map,this,handler,map,clear,handler,map,for,each,raw,pattern,resource,web,handler,raw,pattern,prepend,leading,slash,raw,pattern,path,pattern,pattern,this,pattern,parser,parse,raw,pattern,this,handler,map,put,pattern,resource,web,handler
ResourceUrlProvider -> public void registerHandlers(Map<String, ResourceWebHandler> handlerMap);1508508612;Manually configure resource handler mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. If this property is used,_auto-detection is turned off.;public void registerHandlers(Map<String, ResourceWebHandler> handlerMap) {_		this.handlerMap.clear()__		handlerMap.forEach((rawPattern, resourceWebHandler) -> {_			rawPattern = prependLeadingSlash(rawPattern)__			PathPattern pattern = this.patternParser.parse(rawPattern)__			this.handlerMap.put(pattern, resourceWebHandler)__		})__	};manually,configure,resource,handler,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,if,this,property,is,used,auto,detection,is,turned,off;public,void,register,handlers,map,string,resource,web,handler,handler,map,this,handler,map,clear,handler,map,for,each,raw,pattern,resource,web,handler,raw,pattern,prepend,leading,slash,raw,pattern,path,pattern,pattern,this,pattern,parser,parse,raw,pattern,this,handler,map,put,pattern,resource,web,handler
ResourceUrlProvider -> public void registerHandlers(Map<String, ResourceWebHandler> handlerMap);1519588127;Manually configure resource handler mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. If this property is used,_auto-detection is turned off.;public void registerHandlers(Map<String, ResourceWebHandler> handlerMap) {_		this.handlerMap.clear()__		handlerMap.forEach((rawPattern, resourceWebHandler) -> {_			rawPattern = prependLeadingSlash(rawPattern)__			PathPattern pattern = this.patternParser.parse(rawPattern)__			this.handlerMap.put(pattern, resourceWebHandler)__		})__	};manually,configure,resource,handler,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,if,this,property,is,used,auto,detection,is,turned,off;public,void,register,handlers,map,string,resource,web,handler,handler,map,this,handler,map,clear,handler,map,for,each,raw,pattern,resource,web,handler,raw,pattern,prepend,leading,slash,raw,pattern,path,pattern,pattern,this,pattern,parser,parse,raw,pattern,this,handler,map,put,pattern,resource,web,handler
ResourceUrlProvider -> public void registerHandlers(Map<String, ResourceWebHandler> handlerMap);1520529117;Manually configure resource handler mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. If this property is used,_auto-detection is turned off.;public void registerHandlers(Map<String, ResourceWebHandler> handlerMap) {_		this.handlerMap.clear()__		handlerMap.forEach((rawPattern, resourceWebHandler) -> {_			rawPattern = prependLeadingSlash(rawPattern)__			PathPattern pattern = this.patternParser.parse(rawPattern)__			this.handlerMap.put(pattern, resourceWebHandler)__		})__	};manually,configure,resource,handler,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,if,this,property,is,used,auto,detection,is,turned,off;public,void,register,handlers,map,string,resource,web,handler,handler,map,this,handler,map,clear,handler,map,for,each,raw,pattern,resource,web,handler,raw,pattern,prepend,leading,slash,raw,pattern,path,pattern,pattern,this,pattern,parser,parse,raw,pattern,this,handler,map,put,pattern,resource,web,handler
ResourceUrlProvider -> public void registerHandlers(Map<String, ResourceWebHandler> handlerMap);1520542144;Manually configure resource handler mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. If this property is used,_auto-detection is turned off.;public void registerHandlers(Map<String, ResourceWebHandler> handlerMap) {_		this.handlerMap.clear()__		handlerMap.forEach((rawPattern, resourceWebHandler) -> {_			rawPattern = prependLeadingSlash(rawPattern)__			PathPattern pattern = this.patternParser.parse(rawPattern)__			this.handlerMap.put(pattern, resourceWebHandler)__		})__	};manually,configure,resource,handler,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,if,this,property,is,used,auto,detection,is,turned,off;public,void,register,handlers,map,string,resource,web,handler,handler,map,this,handler,map,clear,handler,map,for,each,raw,pattern,resource,web,handler,raw,pattern,prepend,leading,slash,raw,pattern,path,pattern,pattern,this,pattern,parser,parse,raw,pattern,this,handler,map,put,pattern,resource,web,handler
ResourceUrlProvider -> public void registerHandlers(Map<String, ResourceWebHandler> handlerMap);1529721864;Manually configure resource handler mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. If this property is used,_auto-detection is turned off.;public void registerHandlers(Map<String, ResourceWebHandler> handlerMap) {_		this.handlerMap.clear()__		handlerMap.forEach((rawPattern, resourceWebHandler) -> {_			rawPattern = prependLeadingSlash(rawPattern)__			PathPattern pattern = this.patternParser.parse(rawPattern)__			this.handlerMap.put(pattern, resourceWebHandler)__		})__	};manually,configure,resource,handler,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,if,this,property,is,used,auto,detection,is,turned,off;public,void,register,handlers,map,string,resource,web,handler,handler,map,this,handler,map,clear,handler,map,for,each,raw,pattern,resource,web,handler,raw,pattern,prepend,leading,slash,raw,pattern,path,pattern,pattern,this,pattern,parser,parse,raw,pattern,this,handler,map,put,pattern,resource,web,handler
ResourceUrlProvider -> public void registerHandlers(Map<String, ResourceWebHandler> handlerMap);1530174524;Manually configure resource handler mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. If this property is used,_auto-detection is turned off.;public void registerHandlers(Map<String, ResourceWebHandler> handlerMap) {_		this.handlerMap.clear()__		handlerMap.forEach((rawPattern, resourceWebHandler) -> {_			rawPattern = prependLeadingSlash(rawPattern)__			PathPattern pattern = this.patternParser.parse(rawPattern)__			this.handlerMap.put(pattern, resourceWebHandler)__		})__	};manually,configure,resource,handler,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,if,this,property,is,used,auto,detection,is,turned,off;public,void,register,handlers,map,string,resource,web,handler,handler,map,this,handler,map,clear,handler,map,for,each,raw,pattern,resource,web,handler,raw,pattern,prepend,leading,slash,raw,pattern,path,pattern,pattern,this,pattern,parser,parse,raw,pattern,this,handler,map,put,pattern,resource,web,handler
ResourceUrlProvider -> public void registerHandlers(Map<String, ResourceWebHandler> handlerMap);1530198749;Manually configure resource handler mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. If this property is used,_auto-detection is turned off.;public void registerHandlers(Map<String, ResourceWebHandler> handlerMap) {_		this.handlerMap.clear()__		handlerMap.forEach((rawPattern, resourceWebHandler) -> {_			rawPattern = prependLeadingSlash(rawPattern)__			PathPattern pattern = this.patternParser.parse(rawPattern)__			this.handlerMap.put(pattern, resourceWebHandler)__		})__	};manually,configure,resource,handler,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,if,this,property,is,used,auto,detection,is,turned,off;public,void,register,handlers,map,string,resource,web,handler,handler,map,this,handler,map,clear,handler,map,for,each,raw,pattern,resource,web,handler,raw,pattern,prepend,leading,slash,raw,pattern,path,pattern,pattern,this,pattern,parser,parse,raw,pattern,this,handler,map,put,pattern,resource,web,handler
ResourceUrlProvider -> public void registerHandlers(Map<String, ResourceWebHandler> handlerMap);1530793633;Manually configure resource handler mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. If this property is used,_auto-detection is turned off.;public void registerHandlers(Map<String, ResourceWebHandler> handlerMap) {_		this.handlerMap.clear()__		handlerMap.forEach((rawPattern, resourceWebHandler) -> {_			rawPattern = prependLeadingSlash(rawPattern)__			PathPattern pattern = this.patternParser.parse(rawPattern)__			this.handlerMap.put(pattern, resourceWebHandler)__		})__	};manually,configure,resource,handler,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,if,this,property,is,used,auto,detection,is,turned,off;public,void,register,handlers,map,string,resource,web,handler,handler,map,this,handler,map,clear,handler,map,for,each,raw,pattern,resource,web,handler,raw,pattern,prepend,leading,slash,raw,pattern,path,pattern,pattern,this,pattern,parser,parse,raw,pattern,this,handler,map,put,pattern,resource,web,handler
ResourceUrlProvider -> public void registerHandlers(Map<String, ResourceWebHandler> handlerMap);1544526735;Manually configure resource handler mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. If this property is used,_auto-detection is turned off.;public void registerHandlers(Map<String, ResourceWebHandler> handlerMap) {_		this.handlerMap.clear()__		handlerMap.forEach((rawPattern, resourceWebHandler) -> {_			rawPattern = prependLeadingSlash(rawPattern)__			PathPattern pattern = this.patternParser.parse(rawPattern)__			this.handlerMap.put(pattern, resourceWebHandler)__		})__	};manually,configure,resource,handler,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,if,this,property,is,used,auto,detection,is,turned,off;public,void,register,handlers,map,string,resource,web,handler,handler,map,this,handler,map,clear,handler,map,for,each,raw,pattern,resource,web,handler,raw,pattern,prepend,leading,slash,raw,pattern,path,pattern,pattern,this,pattern,parser,parse,raw,pattern,this,handler,map,put,pattern,resource,web,handler
ResourceUrlProvider -> public HttpRequestPathHelper getPathHelper();1495035625;Return the configured {@code HttpRequestPathHelper}.;public HttpRequestPathHelper getPathHelper() {_		return this.pathHelper__	};return,the,configured,code,http,request,path,helper;public,http,request,path,helper,get,path,helper,return,this,path,helper
ResourceUrlProvider -> public HttpRequestPathHelper getPathHelper();1495868221;Return the configured {@code HttpRequestPathHelper}.;public HttpRequestPathHelper getPathHelper() {_		return this.pathHelper__	};return,the,configured,code,http,request,path,helper;public,http,request,path,helper,get,path,helper,return,this,path,helper
ResourceUrlProvider -> public HttpRequestPathHelper getPathHelper();1496334664;Return the configured {@code HttpRequestPathHelper}.;public HttpRequestPathHelper getPathHelper() {_		return this.pathHelper__	};return,the,configured,code,http,request,path,helper;public,http,request,path,helper,get,path,helper,return,this,path,helper
ResourceUrlProvider -> public HttpRequestPathHelper getPathHelper();1496429194;Return the configured {@code HttpRequestPathHelper}.;public HttpRequestPathHelper getPathHelper() {_		return this.pathHelper__	};return,the,configured,code,http,request,path,helper;public,http,request,path,helper,get,path,helper,return,this,path,helper
ResourceUrlProvider -> public HttpRequestPathHelper getPathHelper();1496430942;Return the configured {@code HttpRequestPathHelper}.;public HttpRequestPathHelper getPathHelper() {_		return this.pathHelper__	};return,the,configured,code,http,request,path,helper;public,http,request,path,helper,get,path,helper,return,this,path,helper
ResourceUrlProvider -> public HttpRequestPathHelper getPathHelper();1496837955;Return the configured {@code HttpRequestPathHelper}.;public HttpRequestPathHelper getPathHelper() {_		return this.pathHelper__	};return,the,configured,code,http,request,path,helper;public,http,request,path,helper,get,path,helper,return,this,path,helper
ResourceUrlProvider -> public HttpRequestPathHelper getPathHelper();1497039338;Return the configured {@code HttpRequestPathHelper}.;public HttpRequestPathHelper getPathHelper() {_		return this.pathHelper__	};return,the,configured,code,http,request,path,helper;public,http,request,path,helper,get,path,helper,return,this,path,helper
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1485986572;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1485989424;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1486634978;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1486747801;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1495035625;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1495868221;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1496334664;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1496429194;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1496430942;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1496837955;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1497039338;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1497039338;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathMatcher(PathMatcher pathMatcher);1497232764;Configure a {@code PathMatcher} to use when comparing target lookup path_against resource mappings.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__	};configure,a,code,path,matcher,to,use,when,comparing,target,lookup,path,against,resource,mappings;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher
ResourceUrlProvider -> public void setPathHelper(HttpRequestPathHelper pathHelper);1495035625;Configure a {@code HttpRequestPathHelper} to use in_{@link #getForRequestUrl(ServerWebExchange, String)}_in order to derive the lookup path for a target request URL path.;public void setPathHelper(HttpRequestPathHelper pathHelper) {_		this.pathHelper = pathHelper__	};configure,a,code,http,request,path,helper,to,use,in,link,get,for,request,url,server,web,exchange,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,path,helper,http,request,path,helper,path,helper,this,path,helper,path,helper
ResourceUrlProvider -> public void setPathHelper(HttpRequestPathHelper pathHelper);1495868221;Configure a {@code HttpRequestPathHelper} to use in_{@link #getForRequestUrl(ServerWebExchange, String)}_in order to derive the lookup path for a target request URL path.;public void setPathHelper(HttpRequestPathHelper pathHelper) {_		this.pathHelper = pathHelper__	};configure,a,code,http,request,path,helper,to,use,in,link,get,for,request,url,server,web,exchange,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,path,helper,http,request,path,helper,path,helper,this,path,helper,path,helper
ResourceUrlProvider -> public void setPathHelper(HttpRequestPathHelper pathHelper);1496334664;Configure a {@code HttpRequestPathHelper} to use in_{@link #getForRequestUrl(ServerWebExchange, String)}_in order to derive the lookup path for a target request URL path.;public void setPathHelper(HttpRequestPathHelper pathHelper) {_		this.pathHelper = pathHelper__	};configure,a,code,http,request,path,helper,to,use,in,link,get,for,request,url,server,web,exchange,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,path,helper,http,request,path,helper,path,helper,this,path,helper,path,helper
ResourceUrlProvider -> public void setPathHelper(HttpRequestPathHelper pathHelper);1496429194;Configure a {@code HttpRequestPathHelper} to use in_{@link #getForRequestUrl(ServerWebExchange, String)}_in order to derive the lookup path for a target request URL path.;public void setPathHelper(HttpRequestPathHelper pathHelper) {_		this.pathHelper = pathHelper__	};configure,a,code,http,request,path,helper,to,use,in,link,get,for,request,url,server,web,exchange,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,path,helper,http,request,path,helper,path,helper,this,path,helper,path,helper
ResourceUrlProvider -> public void setPathHelper(HttpRequestPathHelper pathHelper);1496430942;Configure a {@code HttpRequestPathHelper} to use in_{@link #getForRequestUrl(ServerWebExchange, String)}_in order to derive the lookup path for a target request URL path.;public void setPathHelper(HttpRequestPathHelper pathHelper) {_		this.pathHelper = pathHelper__	};configure,a,code,http,request,path,helper,to,use,in,link,get,for,request,url,server,web,exchange,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,path,helper,http,request,path,helper,path,helper,this,path,helper,path,helper
ResourceUrlProvider -> public void setPathHelper(HttpRequestPathHelper pathHelper);1496837955;Configure a {@code HttpRequestPathHelper} to use in_{@link #getForRequestUrl(ServerWebExchange, String)}_in order to derive the lookup path for a target request URL path.;public void setPathHelper(HttpRequestPathHelper pathHelper) {_		this.pathHelper = pathHelper__	};configure,a,code,http,request,path,helper,to,use,in,link,get,for,request,url,server,web,exchange,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,path,helper,http,request,path,helper,path,helper,this,path,helper,path,helper
ResourceUrlProvider -> public void setPathHelper(HttpRequestPathHelper pathHelper);1497039338;Configure a {@code HttpRequestPathHelper} to use in_{@link #getForRequestUrl(ServerWebExchange, String)}_in order to derive the lookup path for a target request URL path.;public void setPathHelper(HttpRequestPathHelper pathHelper) {_		this.pathHelper = pathHelper__	};configure,a,code,http,request,path,helper,to,use,in,link,get,for,request,url,server,web,exchange,string,in,order,to,derive,the,lookup,path,for,a,target,request,url,path;public,void,set,path,helper,http,request,path,helper,path,helper,this,path,helper,path,helper
ResourceUrlProvider -> public final Mono<String> getForLookupPath(PathContainer lookupPath);1499448036;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring uses for_request mapping purposes._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or empty if unresolved;public final Mono<String> getForLookupPath(PathContainer lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}__		Set<PathMatchResult<ResourceWebHandler>> matches = this.patternRegistry.findMatches(lookupPath)___		return Flux.fromIterable(matches).next()_				.flatMap(result -> {_					PathContainer path = result.getPattern().extractPathWithinPattern(lookupPath)__					int endIndex = lookupPath.elements().size() - path.elements().size()__					PathContainer mapping = PathContainer.subPath(lookupPath, 0, endIndex)__					if (logger.isTraceEnabled()) {_						logger.trace("Invoking ResourceResolverChain for URL pattern " +_								"\"" + result.getPattern() + "\"")__					}_					ResourceWebHandler handler = result.getHandler()__					List<ResourceResolver> resolvers = handler.getResourceResolvers()__					ResourceResolverChain chain = new DefaultResourceResolverChain(resolvers)__					return chain.resolveUrlPath(path.value(), handler.getLocations())_							.map(resolvedPath -> {_								if (logger.isTraceEnabled()) {_									logger.trace("Resolved public resource URL path \"" + resolvedPath + "\"")__								}_								return mapping.value() + resolvedPath__							})__				})__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,uses,for,request,mapping,purposes,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,lookup,path,path,container,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,set,path,match,result,resource,web,handler,matches,this,pattern,registry,find,matches,lookup,path,return,flux,from,iterable,matches,next,flat,map,result,path,container,path,result,get,pattern,extract,path,within,pattern,lookup,path,int,end,index,lookup,path,elements,size,path,elements,size,path,container,mapping,path,container,sub,path,lookup,path,0,end,index,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,result,get,pattern,resource,web,handler,handler,result,get,handler,list,resource,resolver,resolvers,handler,get,resource,resolvers,resource,resolver,chain,chain,new,default,resource,resolver,chain,resolvers,return,chain,resolve,url,path,path,value,handler,get,locations,map,resolved,path,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,path,return,mapping,value,resolved,path
ResourceUrlProvider -> public final Mono<String> getForLookupPath(PathContainer lookupPath);1499679438;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring uses for_request mapping purposes._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or empty if unresolved;public final Mono<String> getForLookupPath(PathContainer lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}_		return this.handlerMap.entrySet().stream()_				.filter(entry -> entry.getKey().matches(lookupPath))_				.sorted(Comparator.comparing(Map.Entry::getKey))_				.findFirst()_				.map(entry -> {_					PathContainer path = entry.getKey().extractPathWithinPattern(lookupPath)__					int endIndex = lookupPath.elements().size() - path.elements().size()__					PathContainer mapping = PathContainer.subPath(lookupPath, 0, endIndex)__					if (logger.isTraceEnabled()) {_						logger.trace("Invoking ResourceResolverChain for URL pattern " +_								"\"" + entry.getKey() + "\"")__					}_					ResourceWebHandler handler = entry.getValue()__					List<ResourceResolver> resolvers = handler.getResourceResolvers()__					ResourceResolverChain chain = new DefaultResourceResolverChain(resolvers)__					return chain.resolveUrlPath(path.value(), handler.getLocations())_							.map(resolvedPath -> {_								if (logger.isTraceEnabled()) {_									logger.trace("Resolved public resource URL path \"" + resolvedPath + "\"")__								}_								return mapping.value() + resolvedPath__							})___				})_				.orElse(Mono.empty())__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,uses,for,request,mapping,purposes,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,lookup,path,path,container,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,return,this,handler,map,entry,set,stream,filter,entry,entry,get,key,matches,lookup,path,sorted,comparator,comparing,map,entry,get,key,find,first,map,entry,path,container,path,entry,get,key,extract,path,within,pattern,lookup,path,int,end,index,lookup,path,elements,size,path,elements,size,path,container,mapping,path,container,sub,path,lookup,path,0,end,index,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,entry,get,key,resource,web,handler,handler,entry,get,value,list,resource,resolver,resolvers,handler,get,resource,resolvers,resource,resolver,chain,chain,new,default,resource,resolver,chain,resolvers,return,chain,resolve,url,path,path,value,handler,get,locations,map,resolved,path,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,path,return,mapping,value,resolved,path,or,else,mono,empty
ResourceUrlProvider -> public final Mono<String> getForLookupPath(PathContainer lookupPath);1499763525;Compare the given path against configured resource handler mappings and_if a match is found use the {@code ResourceResolver} chain of the matched_{@code ResourceHttpRequestHandler} to resolve the URL path to expose for_public use._<p>It is expected that the given path is what Spring uses for_request mapping purposes._<p>If several handler mappings match, the handler used will be the one_configured with the most specific pattern._@param lookupPath the lookup path to check_@return the resolved public URL path, or empty if unresolved;public final Mono<String> getForLookupPath(PathContainer lookupPath) {_		if (logger.isTraceEnabled()) {_			logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"")__		}_		return this.handlerMap.entrySet().stream()_				.filter(entry -> entry.getKey().matches(lookupPath))_				.sorted(Comparator.comparing(Map.Entry::getKey))_				.findFirst()_				.map(entry -> {_					PathContainer path = entry.getKey().extractPathWithinPattern(lookupPath)__					int endIndex = lookupPath.elements().size() - path.elements().size()__					PathContainer mapping = lookupPath.subPath(0, endIndex)__					if (logger.isTraceEnabled()) {_						logger.trace("Invoking ResourceResolverChain for URL pattern " +_								"\"" + entry.getKey() + "\"")__					}_					ResourceWebHandler handler = entry.getValue()__					List<ResourceResolver> resolvers = handler.getResourceResolvers()__					ResourceResolverChain chain = new DefaultResourceResolverChain(resolvers)__					return chain.resolveUrlPath(path.value(), handler.getLocations())_							.map(resolvedPath -> {_								if (logger.isTraceEnabled()) {_									logger.trace("Resolved public resource URL path \"" + resolvedPath + "\"")__								}_								return mapping.value() + resolvedPath__							})___				})_				.orElse(Mono.empty())__	};compare,the,given,path,against,configured,resource,handler,mappings,and,if,a,match,is,found,use,the,code,resource,resolver,chain,of,the,matched,code,resource,http,request,handler,to,resolve,the,url,path,to,expose,for,public,use,p,it,is,expected,that,the,given,path,is,what,spring,uses,for,request,mapping,purposes,p,if,several,handler,mappings,match,the,handler,used,will,be,the,one,configured,with,the,most,specific,pattern,param,lookup,path,the,lookup,path,to,check,return,the,resolved,public,url,path,or,empty,if,unresolved;public,final,mono,string,get,for,lookup,path,path,container,lookup,path,if,logger,is,trace,enabled,logger,trace,getting,resource,url,for,lookup,path,lookup,path,return,this,handler,map,entry,set,stream,filter,entry,entry,get,key,matches,lookup,path,sorted,comparator,comparing,map,entry,get,key,find,first,map,entry,path,container,path,entry,get,key,extract,path,within,pattern,lookup,path,int,end,index,lookup,path,elements,size,path,elements,size,path,container,mapping,lookup,path,sub,path,0,end,index,if,logger,is,trace,enabled,logger,trace,invoking,resource,resolver,chain,for,url,pattern,entry,get,key,resource,web,handler,handler,entry,get,value,list,resource,resolver,resolvers,handler,get,resource,resolvers,resource,resolver,chain,chain,new,default,resource,resolver,chain,resolvers,return,chain,resolve,url,path,path,value,handler,get,locations,map,resolved,path,if,logger,is,trace,enabled,logger,trace,resolved,public,resource,url,path,resolved,path,return,mapping,value,resolved,path,or,else,mono,empty
ResourceUrlProvider -> public void registerHandlers(@Nullable Map<String, ResourceWebHandler> handlerMap);1499679438;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void registerHandlers(@Nullable Map<String, ResourceWebHandler> handlerMap) {_		if (handlerMap == null) {_			return__		}_		this.handlerMap.clear()__		handlerMap.forEach((rawPattern, resourceWebHandler) -> {_			rawPattern = prependLeadingSlash(rawPattern)__			PathPattern pattern = this.patternParser.parse(rawPattern)__			this.handlerMap.put(pattern, resourceWebHandler)__		})__		this.autodetect = false__	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,register,handlers,nullable,map,string,resource,web,handler,handler,map,if,handler,map,null,return,this,handler,map,clear,handler,map,for,each,raw,pattern,resource,web,handler,raw,pattern,prepend,leading,slash,raw,pattern,path,pattern,pattern,this,pattern,parser,parse,raw,pattern,this,handler,map,put,pattern,resource,web,handler,this,autodetect,false
ResourceUrlProvider -> public void registerHandlers(@Nullable Map<String, ResourceWebHandler> handlerMap);1499763525;Manually configure the resource mappings._<p><strong>Note:</strong> by default resource mappings are auto-detected_from the Spring {@code ApplicationContext}. However if this property is_used, the auto-detection is turned off.;public void registerHandlers(@Nullable Map<String, ResourceWebHandler> handlerMap) {_		if (handlerMap == null) {_			return__		}_		this.handlerMap.clear()__		handlerMap.forEach((rawPattern, resourceWebHandler) -> {_			rawPattern = prependLeadingSlash(rawPattern)__			PathPattern pattern = this.patternParser.parse(rawPattern)__			this.handlerMap.put(pattern, resourceWebHandler)__		})__		this.autodetect = false__	};manually,configure,the,resource,mappings,p,strong,note,strong,by,default,resource,mappings,are,auto,detected,from,the,spring,code,application,context,however,if,this,property,is,used,the,auto,detection,is,turned,off;public,void,register,handlers,nullable,map,string,resource,web,handler,handler,map,if,handler,map,null,return,this,handler,map,clear,handler,map,for,each,raw,pattern,resource,web,handler,raw,pattern,prepend,leading,slash,raw,pattern,path,pattern,pattern,this,pattern,parser,parse,raw,pattern,this,handler,map,put,pattern,resource,web,handler,this,autodetect,false
ResourceUrlProvider -> public HttpRequestPathHelper getUrlPathHelper();1485986572;Return the configured {@code UrlPathHelper}.;public HttpRequestPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};return,the,configured,code,url,path,helper;public,http,request,path,helper,get,url,path,helper,return,this,url,path,helper
ResourceUrlProvider -> public HttpRequestPathHelper getUrlPathHelper();1485989424;Return the configured {@code UrlPathHelper}.;public HttpRequestPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};return,the,configured,code,url,path,helper;public,http,request,path,helper,get,url,path,helper,return,this,url,path,helper
ResourceUrlProvider -> public HttpRequestPathHelper getUrlPathHelper();1486634978;Return the configured {@code UrlPathHelper}.;public HttpRequestPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};return,the,configured,code,url,path,helper;public,http,request,path,helper,get,url,path,helper,return,this,url,path,helper
ResourceUrlProvider -> public HttpRequestPathHelper getUrlPathHelper();1486635693;Return the configured {@code UrlPathHelper}.;public HttpRequestPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};return,the,configured,code,url,path,helper;public,http,request,path,helper,get,url,path,helper,return,this,url,path,helper
ResourceUrlProvider -> public HttpRequestPathHelper getUrlPathHelper();1486674586;Return the configured {@code UrlPathHelper}.;public HttpRequestPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};return,the,configured,code,url,path,helper;public,http,request,path,helper,get,url,path,helper,return,this,url,path,helper
ResourceUrlProvider -> public HttpRequestPathHelper getUrlPathHelper();1486747801;Return the configured {@code UrlPathHelper}.;public HttpRequestPathHelper getUrlPathHelper() {_		return this.urlPathHelper__	};return,the,configured,code,url,path,helper;public,http,request,path,helper,get,url,path,helper,return,this,url,path,helper
ResourceUrlProvider -> public Map<PathPattern, ResourceWebHandler> getHandlerMap();1486635693;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<PathPattern, ResourceWebHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,path,pattern,resource,web,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<PathPattern, ResourceWebHandler> getHandlerMap();1486674586;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<PathPattern, ResourceWebHandler> getHandlerMap() {_		return this.handlerMap__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,path,pattern,resource,web,handler,get,handler,map,return,this,handler,map
ResourceUrlProvider -> public Map<PathPattern, ResourceWebHandler> getHandlerMap();1497286385;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<PathPattern, ResourceWebHandler> getHandlerMap() {_		return this.patternRegistry.getPatternsMap()__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,path,pattern,resource,web,handler,get,handler,map,return,this,pattern,registry,get,patterns,map
ResourceUrlProvider -> public Map<PathPattern, ResourceWebHandler> getHandlerMap();1497974922;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<PathPattern, ResourceWebHandler> getHandlerMap() {_		return this.patternRegistry.getPatternsMap()__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,path,pattern,resource,web,handler,get,handler,map,return,this,pattern,registry,get,patterns,map
ResourceUrlProvider -> public Map<PathPattern, ResourceWebHandler> getHandlerMap();1498780456;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<PathPattern, ResourceWebHandler> getHandlerMap() {_		return this.patternRegistry.getPatternsMap()__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,path,pattern,resource,web,handler,get,handler,map,return,this,pattern,registry,get,patterns,map
ResourceUrlProvider -> public Map<PathPattern, ResourceWebHandler> getHandlerMap();1499448036;Return the resource mappings, either manually configured or auto-detected_when the Spring {@code ApplicationContext} is refreshed.;public Map<PathPattern, ResourceWebHandler> getHandlerMap() {_		return this.patternRegistry.getPatternsMap()__	};return,the,resource,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,path,pattern,resource,web,handler,get,handler,map,return,this,pattern,registry,get,patterns,map
ResourceUrlProvider -> public Map<PathPattern, ResourceWebHandler> getHandlerMap();1499679438;Return a read-only view of the resource handler mappings either manually_configured or auto-detected when the Spring {@code ApplicationContext}_is refreshed.;public Map<PathPattern, ResourceWebHandler> getHandlerMap() {_		return Collections.unmodifiableMap(this.handlerMap)__	};return,a,read,only,view,of,the,resource,handler,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,path,pattern,resource,web,handler,get,handler,map,return,collections,unmodifiable,map,this,handler,map
ResourceUrlProvider -> public Map<PathPattern, ResourceWebHandler> getHandlerMap();1499763525;Return a read-only view of the resource handler mappings either manually_configured or auto-detected when the Spring {@code ApplicationContext}_is refreshed.;public Map<PathPattern, ResourceWebHandler> getHandlerMap() {_		return Collections.unmodifiableMap(this.handlerMap)__	};return,a,read,only,view,of,the,resource,handler,mappings,either,manually,configured,or,auto,detected,when,the,spring,code,application,context,is,refreshed;public,map,path,pattern,resource,web,handler,get,handler,map,return,collections,unmodifiable,map,this,handler,map
ResourceUrlProvider -> public Map<PathPattern, ResourceWebHandler> getHandlerMap();1500498279;Return a read-only view of the resource handler mappings either manually_configured or auto-detected from Spring configuration.;public Map<PathPattern, ResourceWebHandler> getHandlerMap() {_		return Collections.unmodifiableMap(this.handlerMap)__	};return,a,read,only,view,of,the,resource,handler,mappings,either,manually,configured,or,auto,detected,from,spring,configuration;public,map,path,pattern,resource,web,handler,get,handler,map,return,collections,unmodifiable,map,this,handler,map
ResourceUrlProvider -> public Map<PathPattern, ResourceWebHandler> getHandlerMap();1501237594;Return a read-only view of the resource handler mappings either manually_configured or auto-detected from Spring configuration.;public Map<PathPattern, ResourceWebHandler> getHandlerMap() {_		return Collections.unmodifiableMap(this.handlerMap)__	};return,a,read,only,view,of,the,resource,handler,mappings,either,manually,configured,or,auto,detected,from,spring,configuration;public,map,path,pattern,resource,web,handler,get,handler,map,return,collections,unmodifiable,map,this,handler,map
ResourceUrlProvider -> public Map<PathPattern, ResourceWebHandler> getHandlerMap();1501531808;Return a read-only view of the resource handler mappings either manually_configured or auto-detected from Spring configuration.;public Map<PathPattern, ResourceWebHandler> getHandlerMap() {_		return Collections.unmodifiableMap(this.handlerMap)__	};return,a,read,only,view,of,the,resource,handler,mappings,either,manually,configured,or,auto,detected,from,spring,configuration;public,map,path,pattern,resource,web,handler,get,handler,map,return,collections,unmodifiable,map,this,handler,map
ResourceUrlProvider -> public Map<PathPattern, ResourceWebHandler> getHandlerMap();1501690296;Return a read-only view of the resource handler mappings either manually_configured or auto-detected from Spring configuration.;public Map<PathPattern, ResourceWebHandler> getHandlerMap() {_		return Collections.unmodifiableMap(this.handlerMap)__	};return,a,read,only,view,of,the,resource,handler,mappings,either,manually,configured,or,auto,detected,from,spring,configuration;public,map,path,pattern,resource,web,handler,get,handler,map,return,collections,unmodifiable,map,this,handler,map
ResourceUrlProvider -> public Map<PathPattern, ResourceWebHandler> getHandlerMap();1508508612;Return a read-only view of the resource handler mappings either manually_configured or auto-detected from Spring configuration.;public Map<PathPattern, ResourceWebHandler> getHandlerMap() {_		return Collections.unmodifiableMap(this.handlerMap)__	};return,a,read,only,view,of,the,resource,handler,mappings,either,manually,configured,or,auto,detected,from,spring,configuration;public,map,path,pattern,resource,web,handler,get,handler,map,return,collections,unmodifiable,map,this,handler,map
ResourceUrlProvider -> public Map<PathPattern, ResourceWebHandler> getHandlerMap();1519588127;Return a read-only view of the resource handler mappings either manually_configured or auto-detected from Spring configuration.;public Map<PathPattern, ResourceWebHandler> getHandlerMap() {_		return Collections.unmodifiableMap(this.handlerMap)__	};return,a,read,only,view,of,the,resource,handler,mappings,either,manually,configured,or,auto,detected,from,spring,configuration;public,map,path,pattern,resource,web,handler,get,handler,map,return,collections,unmodifiable,map,this,handler,map
ResourceUrlProvider -> public Map<PathPattern, ResourceWebHandler> getHandlerMap();1520529117;Return a read-only view of the resource handler mappings either manually_configured or auto-detected from Spring configuration.;public Map<PathPattern, ResourceWebHandler> getHandlerMap() {_		return Collections.unmodifiableMap(this.handlerMap)__	};return,a,read,only,view,of,the,resource,handler,mappings,either,manually,configured,or,auto,detected,from,spring,configuration;public,map,path,pattern,resource,web,handler,get,handler,map,return,collections,unmodifiable,map,this,handler,map
ResourceUrlProvider -> public Map<PathPattern, ResourceWebHandler> getHandlerMap();1520542144;Return a read-only view of the resource handler mappings either manually_configured or auto-detected from Spring configuration.;public Map<PathPattern, ResourceWebHandler> getHandlerMap() {_		return Collections.unmodifiableMap(this.handlerMap)__	};return,a,read,only,view,of,the,resource,handler,mappings,either,manually,configured,or,auto,detected,from,spring,configuration;public,map,path,pattern,resource,web,handler,get,handler,map,return,collections,unmodifiable,map,this,handler,map
ResourceUrlProvider -> public Map<PathPattern, ResourceWebHandler> getHandlerMap();1529721864;Return a read-only view of the resource handler mappings either manually_configured or auto-detected from Spring configuration.;public Map<PathPattern, ResourceWebHandler> getHandlerMap() {_		return Collections.unmodifiableMap(this.handlerMap)__	};return,a,read,only,view,of,the,resource,handler,mappings,either,manually,configured,or,auto,detected,from,spring,configuration;public,map,path,pattern,resource,web,handler,get,handler,map,return,collections,unmodifiable,map,this,handler,map
ResourceUrlProvider -> public Map<PathPattern, ResourceWebHandler> getHandlerMap();1530174524;Return a read-only view of the resource handler mappings either manually_configured or auto-detected from Spring configuration.;public Map<PathPattern, ResourceWebHandler> getHandlerMap() {_		return Collections.unmodifiableMap(this.handlerMap)__	};return,a,read,only,view,of,the,resource,handler,mappings,either,manually,configured,or,auto,detected,from,spring,configuration;public,map,path,pattern,resource,web,handler,get,handler,map,return,collections,unmodifiable,map,this,handler,map
ResourceUrlProvider -> public Map<PathPattern, ResourceWebHandler> getHandlerMap();1530198749;Return a read-only view of the resource handler mappings either manually_configured or auto-detected from Spring configuration.;public Map<PathPattern, ResourceWebHandler> getHandlerMap() {_		return Collections.unmodifiableMap(this.handlerMap)__	};return,a,read,only,view,of,the,resource,handler,mappings,either,manually,configured,or,auto,detected,from,spring,configuration;public,map,path,pattern,resource,web,handler,get,handler,map,return,collections,unmodifiable,map,this,handler,map
ResourceUrlProvider -> public Map<PathPattern, ResourceWebHandler> getHandlerMap();1530793633;Return a read-only view of the resource handler mappings either manually_configured or auto-detected from Spring configuration.;public Map<PathPattern, ResourceWebHandler> getHandlerMap() {_		return Collections.unmodifiableMap(this.handlerMap)__	};return,a,read,only,view,of,the,resource,handler,mappings,either,manually,configured,or,auto,detected,from,spring,configuration;public,map,path,pattern,resource,web,handler,get,handler,map,return,collections,unmodifiable,map,this,handler,map
ResourceUrlProvider -> public Map<PathPattern, ResourceWebHandler> getHandlerMap();1544526735;Return a read-only view of the resource handler mappings either manually_configured or auto-detected from Spring configuration.;public Map<PathPattern, ResourceWebHandler> getHandlerMap() {_		return Collections.unmodifiableMap(this.handlerMap)__	};return,a,read,only,view,of,the,resource,handler,mappings,either,manually,configured,or,auto,detected,from,spring,configuration;public,map,path,pattern,resource,web,handler,get,handler,map,return,collections,unmodifiable,map,this,handler,map
