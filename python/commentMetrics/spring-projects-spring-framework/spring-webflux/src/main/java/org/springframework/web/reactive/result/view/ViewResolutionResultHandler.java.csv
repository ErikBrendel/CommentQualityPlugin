# id;timestamp;commentText;codeText;commentWords;codeWords
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> resolvers, 			RequestedContentTypeResolver contentTypeResolver);1485986572;Constructor with {@link ViewResolver}s and a {@link RequestedContentTypeResolver}._@param resolvers the resolver to use_@param contentTypeResolver for resolving the requested content type;public ViewResolutionResultHandler(List<ViewResolver> resolvers,_			RequestedContentTypeResolver contentTypeResolver) {__		this(resolvers, contentTypeResolver, new ReactiveAdapterRegistry())__	};constructor,with,link,view,resolver,s,and,a,link,requested,content,type,resolver,param,resolvers,the,resolver,to,use,param,content,type,resolver,for,resolving,the,requested,content,type;public,view,resolution,result,handler,list,view,resolver,resolvers,requested,content,type,resolver,content,type,resolver,this,resolvers,content,type,resolver,new,reactive,adapter,registry
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> resolvers, 			RequestedContentTypeResolver contentTypeResolver);1486632602;Constructor with {@link ViewResolver}s and a {@link RequestedContentTypeResolver}._@param resolvers the resolver to use_@param contentTypeResolver for resolving the requested content type;public ViewResolutionResultHandler(List<ViewResolver> resolvers,_			RequestedContentTypeResolver contentTypeResolver) {__		this(resolvers, contentTypeResolver, new ReactiveAdapterRegistry())__	};constructor,with,link,view,resolver,s,and,a,link,requested,content,type,resolver,param,resolvers,the,resolver,to,use,param,content,type,resolver,for,resolving,the,requested,content,type;public,view,resolution,result,handler,list,view,resolver,resolvers,requested,content,type,resolver,content,type,resolver,this,resolvers,content,type,resolver,new,reactive,adapter,registry
ViewResolutionResultHandler -> public List<View> getDefaultViews();1485986572;Return the configured default {@code View}'s.;public List<View> getDefaultViews() {_		return this.defaultViews__	};return,the,configured,default,code,view,s;public,list,view,get,default,views,return,this,default,views
ViewResolutionResultHandler -> public List<View> getDefaultViews();1486632602;Return the configured default {@code View}'s.;public List<View> getDefaultViews() {_		return this.defaultViews__	};return,the,configured,default,code,view,s;public,list,view,get,default,views,return,this,default,views
ViewResolutionResultHandler -> public List<View> getDefaultViews();1489433888;Return the configured default {@code View}'s.;public List<View> getDefaultViews() {_		return this.defaultViews__	};return,the,configured,default,code,view,s;public,list,view,get,default,views,return,this,default,views
ViewResolutionResultHandler -> public List<View> getDefaultViews();1489535791;Return the configured default {@code View}'s.;public List<View> getDefaultViews() {_		return this.defaultViews__	};return,the,configured,default,code,view,s;public,list,view,get,default,views,return,this,default,views
ViewResolutionResultHandler -> public List<View> getDefaultViews();1490903325;Return the configured default {@code View}'s.;public List<View> getDefaultViews() {_		return this.defaultViews__	};return,the,configured,default,code,view,s;public,list,view,get,default,views,return,this,default,views
ViewResolutionResultHandler -> public List<View> getDefaultViews();1491502908;Return the configured default {@code View}'s.;public List<View> getDefaultViews() {_		return this.defaultViews__	};return,the,configured,default,code,view,s;public,list,view,get,default,views,return,this,default,views
ViewResolutionResultHandler -> public List<View> getDefaultViews();1491599707;Return the configured default {@code View}'s.;public List<View> getDefaultViews() {_		return this.defaultViews__	};return,the,configured,default,code,view,s;public,list,view,get,default,views,return,this,default,views
ViewResolutionResultHandler -> public List<View> getDefaultViews();1491599707;Return the configured default {@code View}'s.;public List<View> getDefaultViews() {_		return this.defaultViews__	};return,the,configured,default,code,view,s;public,list,view,get,default,views,return,this,default,views
ViewResolutionResultHandler -> public List<View> getDefaultViews();1491909547;Return the configured default {@code View}'s.;public List<View> getDefaultViews() {_		return this.defaultViews__	};return,the,configured,default,code,view,s;public,list,view,get,default,views,return,this,default,views
ViewResolutionResultHandler -> public List<View> getDefaultViews();1491927184;Return the configured default {@code View}'s.;public List<View> getDefaultViews() {_		return this.defaultViews__	};return,the,configured,default,code,view,s;public,list,view,get,default,views,return,this,default,views
ViewResolutionResultHandler -> public List<View> getDefaultViews();1492090594;Return the configured default {@code View}'s.;public List<View> getDefaultViews() {_		return this.defaultViews__	};return,the,configured,default,code,view,s;public,list,view,get,default,views,return,this,default,views
ViewResolutionResultHandler -> public List<View> getDefaultViews();1492570843;Return the configured default {@code View}'s.;public List<View> getDefaultViews() {_		return this.defaultViews__	};return,the,configured,default,code,view,s;public,list,view,get,default,views,return,this,default,views
ViewResolutionResultHandler -> public List<View> getDefaultViews();1492571447;Return the configured default {@code View}'s.;public List<View> getDefaultViews() {_		return this.defaultViews__	};return,the,configured,default,code,view,s;public,list,view,get,default,views,return,this,default,views
ViewResolutionResultHandler -> public List<View> getDefaultViews();1492694378;Return the configured default {@code View}'s.;public List<View> getDefaultViews() {_		return this.defaultViews__	};return,the,configured,default,code,view,s;public,list,view,get,default,views,return,this,default,views
ViewResolutionResultHandler -> public List<View> getDefaultViews();1495569915;Return the configured default {@code View}'s.;public List<View> getDefaultViews() {_		return this.defaultViews__	};return,the,configured,default,code,view,s;public,list,view,get,default,views,return,this,default,views
ViewResolutionResultHandler -> public List<View> getDefaultViews();1495657865;Return the configured default {@code View}'s.;public List<View> getDefaultViews() {_		return this.defaultViews__	};return,the,configured,default,code,view,s;public,list,view,get,default,views,return,this,default,views
ViewResolutionResultHandler -> public List<View> getDefaultViews();1496334664;Return the configured default {@code View}'s.;public List<View> getDefaultViews() {_		return this.defaultViews__	};return,the,configured,default,code,view,s;public,list,view,get,default,views,return,this,default,views
ViewResolutionResultHandler -> public List<View> getDefaultViews();1496429194;Return the configured default {@code View}'s.;public List<View> getDefaultViews() {_		return this.defaultViews__	};return,the,configured,default,code,view,s;public,list,view,get,default,views,return,this,default,views
ViewResolutionResultHandler -> public List<View> getDefaultViews();1496430942;Return the configured default {@code View}'s.;public List<View> getDefaultViews() {_		return this.defaultViews__	};return,the,configured,default,code,view,s;public,list,view,get,default,views,return,this,default,views
ViewResolutionResultHandler -> public List<View> getDefaultViews();1496837955;Return the configured default {@code View}'s.;public List<View> getDefaultViews() {_		return this.defaultViews__	};return,the,configured,default,code,view,s;public,list,view,get,default,views,return,this,default,views
ViewResolutionResultHandler -> public List<View> getDefaultViews();1497039338;Return the configured default {@code View}'s.;public List<View> getDefaultViews() {_		return this.defaultViews__	};return,the,configured,default,code,view,s;public,list,view,get,default,views,return,this,default,views
ViewResolutionResultHandler -> public List<View> getDefaultViews();1497232764;Return the configured default {@code View}'s.;public List<View> getDefaultViews() {_		return this.defaultViews__	};return,the,configured,default,code,view,s;public,list,view,get,default,views,return,this,default,views
ViewResolutionResultHandler -> public List<View> getDefaultViews();1497359418;Return the configured default {@code View}'s.;public List<View> getDefaultViews() {_		return this.defaultViews__	};return,the,configured,default,code,view,s;public,list,view,get,default,views,return,this,default,views
ViewResolutionResultHandler -> public List<View> getDefaultViews();1497974922;Return the configured default {@code View}'s.;public List<View> getDefaultViews() {_		return this.defaultViews__	};return,the,configured,default,code,view,s;public,list,view,get,default,views,return,this,default,views
ViewResolutionResultHandler -> public List<View> getDefaultViews();1511215342;Return the configured default {@code View}'s.;public List<View> getDefaultViews() {_		return this.defaultViews__	};return,the,configured,default,code,view,s;public,list,view,get,default,views,return,this,default,views
ViewResolutionResultHandler -> public List<View> getDefaultViews();1517022854;Return the configured default {@code View}'s.;public List<View> getDefaultViews() {_		return this.defaultViews__	};return,the,configured,default,code,view,s;public,list,view,get,default,views,return,this,default,views
ViewResolutionResultHandler -> public List<View> getDefaultViews();1532520919;Return the configured default {@code View}'s.;public List<View> getDefaultViews() {_		return this.defaultViews__	};return,the,configured,default,code,view,s;public,list,view,get,default,views,return,this,default,views
ViewResolutionResultHandler -> public List<View> getDefaultViews();1533034998;Return the configured default {@code View}'s.;public List<View> getDefaultViews() {_		return this.defaultViews__	};return,the,configured,default,code,view,s;public,list,view,get,default,views,return,this,default,views
ViewResolutionResultHandler -> public List<View> getDefaultViews();1542050977;Return the configured default {@code View}'s.;public List<View> getDefaultViews() {_		return this.defaultViews__	};return,the,configured,default,code,view,s;public,list,view,get,default,views,return,this,default,views
ViewResolutionResultHandler -> public void setDefaultViews(@Nullable List<View> defaultViews);1496837955;Set the default views to consider always when resolving view names and_trying to satisfy the best matching content type.;public void setDefaultViews(@Nullable List<View> defaultViews) {_		this.defaultViews.clear()__		if (defaultViews != null) {_			this.defaultViews.addAll(defaultViews)__		}_	};set,the,default,views,to,consider,always,when,resolving,view,names,and,trying,to,satisfy,the,best,matching,content,type;public,void,set,default,views,nullable,list,view,default,views,this,default,views,clear,if,default,views,null,this,default,views,add,all,default,views
ViewResolutionResultHandler -> public void setDefaultViews(@Nullable List<View> defaultViews);1497039338;Set the default views to consider always when resolving view names and_trying to satisfy the best matching content type.;public void setDefaultViews(@Nullable List<View> defaultViews) {_		this.defaultViews.clear()__		if (defaultViews != null) {_			this.defaultViews.addAll(defaultViews)__		}_	};set,the,default,views,to,consider,always,when,resolving,view,names,and,trying,to,satisfy,the,best,matching,content,type;public,void,set,default,views,nullable,list,view,default,views,this,default,views,clear,if,default,views,null,this,default,views,add,all,default,views
ViewResolutionResultHandler -> public void setDefaultViews(@Nullable List<View> defaultViews);1497232764;Set the default views to consider always when resolving view names and_trying to satisfy the best matching content type.;public void setDefaultViews(@Nullable List<View> defaultViews) {_		this.defaultViews.clear()__		if (defaultViews != null) {_			this.defaultViews.addAll(defaultViews)__		}_	};set,the,default,views,to,consider,always,when,resolving,view,names,and,trying,to,satisfy,the,best,matching,content,type;public,void,set,default,views,nullable,list,view,default,views,this,default,views,clear,if,default,views,null,this,default,views,add,all,default,views
ViewResolutionResultHandler -> public void setDefaultViews(@Nullable List<View> defaultViews);1497359418;Set the default views to consider always when resolving view names and_trying to satisfy the best matching content type.;public void setDefaultViews(@Nullable List<View> defaultViews) {_		this.defaultViews.clear()__		if (defaultViews != null) {_			this.defaultViews.addAll(defaultViews)__		}_	};set,the,default,views,to,consider,always,when,resolving,view,names,and,trying,to,satisfy,the,best,matching,content,type;public,void,set,default,views,nullable,list,view,default,views,this,default,views,clear,if,default,views,null,this,default,views,add,all,default,views
ViewResolutionResultHandler -> public void setDefaultViews(@Nullable List<View> defaultViews);1497974922;Set the default views to consider always when resolving view names and_trying to satisfy the best matching content type.;public void setDefaultViews(@Nullable List<View> defaultViews) {_		this.defaultViews.clear()__		if (defaultViews != null) {_			this.defaultViews.addAll(defaultViews)__		}_	};set,the,default,views,to,consider,always,when,resolving,view,names,and,trying,to,satisfy,the,best,matching,content,type;public,void,set,default,views,nullable,list,view,default,views,this,default,views,clear,if,default,views,null,this,default,views,add,all,default,views
ViewResolutionResultHandler -> public void setDefaultViews(@Nullable List<View> defaultViews);1511215342;Set the default views to consider always when resolving view names and_trying to satisfy the best matching content type.;public void setDefaultViews(@Nullable List<View> defaultViews) {_		this.defaultViews.clear()__		if (defaultViews != null) {_			this.defaultViews.addAll(defaultViews)__		}_	};set,the,default,views,to,consider,always,when,resolving,view,names,and,trying,to,satisfy,the,best,matching,content,type;public,void,set,default,views,nullable,list,view,default,views,this,default,views,clear,if,default,views,null,this,default,views,add,all,default,views
ViewResolutionResultHandler -> public void setDefaultViews(@Nullable List<View> defaultViews);1517022854;Set the default views to consider always when resolving view names and_trying to satisfy the best matching content type.;public void setDefaultViews(@Nullable List<View> defaultViews) {_		this.defaultViews.clear()__		if (defaultViews != null) {_			this.defaultViews.addAll(defaultViews)__		}_	};set,the,default,views,to,consider,always,when,resolving,view,names,and,trying,to,satisfy,the,best,matching,content,type;public,void,set,default,views,nullable,list,view,default,views,this,default,views,clear,if,default,views,null,this,default,views,add,all,default,views
ViewResolutionResultHandler -> public void setDefaultViews(@Nullable List<View> defaultViews);1532520919;Set the default views to consider always when resolving view names and_trying to satisfy the best matching content type.;public void setDefaultViews(@Nullable List<View> defaultViews) {_		this.defaultViews.clear()__		if (defaultViews != null) {_			this.defaultViews.addAll(defaultViews)__		}_	};set,the,default,views,to,consider,always,when,resolving,view,names,and,trying,to,satisfy,the,best,matching,content,type;public,void,set,default,views,nullable,list,view,default,views,this,default,views,clear,if,default,views,null,this,default,views,add,all,default,views
ViewResolutionResultHandler -> public void setDefaultViews(@Nullable List<View> defaultViews);1533034998;Set the default views to consider always when resolving view names and_trying to satisfy the best matching content type.;public void setDefaultViews(@Nullable List<View> defaultViews) {_		this.defaultViews.clear()__		if (defaultViews != null) {_			this.defaultViews.addAll(defaultViews)__		}_	};set,the,default,views,to,consider,always,when,resolving,view,names,and,trying,to,satisfy,the,best,matching,content,type;public,void,set,default,views,nullable,list,view,default,views,this,default,views,clear,if,default,views,null,this,default,views,add,all,default,views
ViewResolutionResultHandler -> public void setDefaultViews(@Nullable List<View> defaultViews);1542050977;Set the default views to consider always when resolving view names and_trying to satisfy the best matching content type.;public void setDefaultViews(@Nullable List<View> defaultViews) {_		this.defaultViews.clear()__		if (defaultViews != null) {_			this.defaultViews.addAll(defaultViews)__		}_	};set,the,default,views,to,consider,always,when,resolving,view,names,and,trying,to,satisfy,the,best,matching,content,type;public,void,set,default,views,nullable,list,view,default,views,this,default,views,clear,if,default,views,null,this,default,views,add,all,default,views
ViewResolutionResultHandler -> protected String getDefaultViewName(HandlerResult result, ServerWebExchange exchange);1485986572;Select a default view name when a controller leaves the view unspecified._The default implementation strips the leading and trailing slash from the_as well as any extension and uses that as the view name.;protected String getDefaultViewName(HandlerResult result, ServerWebExchange exchange) {_		String path = this.pathHelper.getLookupPathForRequest(exchange)__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		if (path.endsWith("/")) {_			path = path.substring(0, path.length() - 1)__		}_		return StringUtils.stripFilenameExtension(path)__	};select,a,default,view,name,when,a,controller,leaves,the,view,unspecified,the,default,implementation,strips,the,leading,and,trailing,slash,from,the,as,well,as,any,extension,and,uses,that,as,the,view,name;protected,string,get,default,view,name,handler,result,result,server,web,exchange,exchange,string,path,this,path,helper,get,lookup,path,for,request,exchange,if,path,starts,with,path,path,substring,1,if,path,ends,with,path,path,substring,0,path,length,1,return,string,utils,strip,filename,extension,path
ViewResolutionResultHandler -> protected String getDefaultViewName(HandlerResult result, ServerWebExchange exchange);1486632602;Select a default view name when a controller leaves the view unspecified._The default implementation strips the leading and trailing slash from the_as well as any extension and uses that as the view name.;protected String getDefaultViewName(HandlerResult result, ServerWebExchange exchange) {_		String path = this.pathHelper.getLookupPathForRequest(exchange)__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		if (path.endsWith("/")) {_			path = path.substring(0, path.length() - 1)__		}_		return StringUtils.stripFilenameExtension(path)__	};select,a,default,view,name,when,a,controller,leaves,the,view,unspecified,the,default,implementation,strips,the,leading,and,trailing,slash,from,the,as,well,as,any,extension,and,uses,that,as,the,view,name;protected,string,get,default,view,name,handler,result,result,server,web,exchange,exchange,string,path,this,path,helper,get,lookup,path,for,request,exchange,if,path,starts,with,path,path,substring,1,if,path,ends,with,path,path,substring,0,path,length,1,return,string,utils,strip,filename,extension,path
ViewResolutionResultHandler -> public void setDefaultViews(List<View> defaultViews);1485986572;Set the default views to consider always when resolving view names and_trying to satisfy the best matching content type.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews.clear()__		if (defaultViews != null) {_			this.defaultViews.addAll(defaultViews)__		}_	};set,the,default,views,to,consider,always,when,resolving,view,names,and,trying,to,satisfy,the,best,matching,content,type;public,void,set,default,views,list,view,default,views,this,default,views,clear,if,default,views,null,this,default,views,add,all,default,views
ViewResolutionResultHandler -> public void setDefaultViews(List<View> defaultViews);1486632602;Set the default views to consider always when resolving view names and_trying to satisfy the best matching content type.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews.clear()__		if (defaultViews != null) {_			this.defaultViews.addAll(defaultViews)__		}_	};set,the,default,views,to,consider,always,when,resolving,view,names,and,trying,to,satisfy,the,best,matching,content,type;public,void,set,default,views,list,view,default,views,this,default,views,clear,if,default,views,null,this,default,views,add,all,default,views
ViewResolutionResultHandler -> public void setDefaultViews(List<View> defaultViews);1489433888;Set the default views to consider always when resolving view names and_trying to satisfy the best matching content type.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews.clear()__		if (defaultViews != null) {_			this.defaultViews.addAll(defaultViews)__		}_	};set,the,default,views,to,consider,always,when,resolving,view,names,and,trying,to,satisfy,the,best,matching,content,type;public,void,set,default,views,list,view,default,views,this,default,views,clear,if,default,views,null,this,default,views,add,all,default,views
ViewResolutionResultHandler -> public void setDefaultViews(List<View> defaultViews);1489535791;Set the default views to consider always when resolving view names and_trying to satisfy the best matching content type.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews.clear()__		if (defaultViews != null) {_			this.defaultViews.addAll(defaultViews)__		}_	};set,the,default,views,to,consider,always,when,resolving,view,names,and,trying,to,satisfy,the,best,matching,content,type;public,void,set,default,views,list,view,default,views,this,default,views,clear,if,default,views,null,this,default,views,add,all,default,views
ViewResolutionResultHandler -> public void setDefaultViews(List<View> defaultViews);1490903325;Set the default views to consider always when resolving view names and_trying to satisfy the best matching content type.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews.clear()__		if (defaultViews != null) {_			this.defaultViews.addAll(defaultViews)__		}_	};set,the,default,views,to,consider,always,when,resolving,view,names,and,trying,to,satisfy,the,best,matching,content,type;public,void,set,default,views,list,view,default,views,this,default,views,clear,if,default,views,null,this,default,views,add,all,default,views
ViewResolutionResultHandler -> public void setDefaultViews(List<View> defaultViews);1491502908;Set the default views to consider always when resolving view names and_trying to satisfy the best matching content type.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews.clear()__		if (defaultViews != null) {_			this.defaultViews.addAll(defaultViews)__		}_	};set,the,default,views,to,consider,always,when,resolving,view,names,and,trying,to,satisfy,the,best,matching,content,type;public,void,set,default,views,list,view,default,views,this,default,views,clear,if,default,views,null,this,default,views,add,all,default,views
ViewResolutionResultHandler -> public void setDefaultViews(List<View> defaultViews);1491599707;Set the default views to consider always when resolving view names and_trying to satisfy the best matching content type.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews.clear()__		if (defaultViews != null) {_			this.defaultViews.addAll(defaultViews)__		}_	};set,the,default,views,to,consider,always,when,resolving,view,names,and,trying,to,satisfy,the,best,matching,content,type;public,void,set,default,views,list,view,default,views,this,default,views,clear,if,default,views,null,this,default,views,add,all,default,views
ViewResolutionResultHandler -> public void setDefaultViews(List<View> defaultViews);1491599707;Set the default views to consider always when resolving view names and_trying to satisfy the best matching content type.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews.clear()__		if (defaultViews != null) {_			this.defaultViews.addAll(defaultViews)__		}_	};set,the,default,views,to,consider,always,when,resolving,view,names,and,trying,to,satisfy,the,best,matching,content,type;public,void,set,default,views,list,view,default,views,this,default,views,clear,if,default,views,null,this,default,views,add,all,default,views
ViewResolutionResultHandler -> public void setDefaultViews(List<View> defaultViews);1491909547;Set the default views to consider always when resolving view names and_trying to satisfy the best matching content type.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews.clear()__		if (defaultViews != null) {_			this.defaultViews.addAll(defaultViews)__		}_	};set,the,default,views,to,consider,always,when,resolving,view,names,and,trying,to,satisfy,the,best,matching,content,type;public,void,set,default,views,list,view,default,views,this,default,views,clear,if,default,views,null,this,default,views,add,all,default,views
ViewResolutionResultHandler -> public void setDefaultViews(List<View> defaultViews);1491927184;Set the default views to consider always when resolving view names and_trying to satisfy the best matching content type.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews.clear()__		if (defaultViews != null) {_			this.defaultViews.addAll(defaultViews)__		}_	};set,the,default,views,to,consider,always,when,resolving,view,names,and,trying,to,satisfy,the,best,matching,content,type;public,void,set,default,views,list,view,default,views,this,default,views,clear,if,default,views,null,this,default,views,add,all,default,views
ViewResolutionResultHandler -> public void setDefaultViews(List<View> defaultViews);1492090594;Set the default views to consider always when resolving view names and_trying to satisfy the best matching content type.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews.clear()__		if (defaultViews != null) {_			this.defaultViews.addAll(defaultViews)__		}_	};set,the,default,views,to,consider,always,when,resolving,view,names,and,trying,to,satisfy,the,best,matching,content,type;public,void,set,default,views,list,view,default,views,this,default,views,clear,if,default,views,null,this,default,views,add,all,default,views
ViewResolutionResultHandler -> public void setDefaultViews(List<View> defaultViews);1492570843;Set the default views to consider always when resolving view names and_trying to satisfy the best matching content type.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews.clear()__		if (defaultViews != null) {_			this.defaultViews.addAll(defaultViews)__		}_	};set,the,default,views,to,consider,always,when,resolving,view,names,and,trying,to,satisfy,the,best,matching,content,type;public,void,set,default,views,list,view,default,views,this,default,views,clear,if,default,views,null,this,default,views,add,all,default,views
ViewResolutionResultHandler -> public void setDefaultViews(List<View> defaultViews);1492571447;Set the default views to consider always when resolving view names and_trying to satisfy the best matching content type.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews.clear()__		if (defaultViews != null) {_			this.defaultViews.addAll(defaultViews)__		}_	};set,the,default,views,to,consider,always,when,resolving,view,names,and,trying,to,satisfy,the,best,matching,content,type;public,void,set,default,views,list,view,default,views,this,default,views,clear,if,default,views,null,this,default,views,add,all,default,views
ViewResolutionResultHandler -> public void setDefaultViews(List<View> defaultViews);1492694378;Set the default views to consider always when resolving view names and_trying to satisfy the best matching content type.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews.clear()__		if (defaultViews != null) {_			this.defaultViews.addAll(defaultViews)__		}_	};set,the,default,views,to,consider,always,when,resolving,view,names,and,trying,to,satisfy,the,best,matching,content,type;public,void,set,default,views,list,view,default,views,this,default,views,clear,if,default,views,null,this,default,views,add,all,default,views
ViewResolutionResultHandler -> public void setDefaultViews(List<View> defaultViews);1495569915;Set the default views to consider always when resolving view names and_trying to satisfy the best matching content type.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews.clear()__		if (defaultViews != null) {_			this.defaultViews.addAll(defaultViews)__		}_	};set,the,default,views,to,consider,always,when,resolving,view,names,and,trying,to,satisfy,the,best,matching,content,type;public,void,set,default,views,list,view,default,views,this,default,views,clear,if,default,views,null,this,default,views,add,all,default,views
ViewResolutionResultHandler -> public void setDefaultViews(List<View> defaultViews);1495657865;Set the default views to consider always when resolving view names and_trying to satisfy the best matching content type.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews.clear()__		if (defaultViews != null) {_			this.defaultViews.addAll(defaultViews)__		}_	};set,the,default,views,to,consider,always,when,resolving,view,names,and,trying,to,satisfy,the,best,matching,content,type;public,void,set,default,views,list,view,default,views,this,default,views,clear,if,default,views,null,this,default,views,add,all,default,views
ViewResolutionResultHandler -> public void setDefaultViews(List<View> defaultViews);1496334664;Set the default views to consider always when resolving view names and_trying to satisfy the best matching content type.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews.clear()__		if (defaultViews != null) {_			this.defaultViews.addAll(defaultViews)__		}_	};set,the,default,views,to,consider,always,when,resolving,view,names,and,trying,to,satisfy,the,best,matching,content,type;public,void,set,default,views,list,view,default,views,this,default,views,clear,if,default,views,null,this,default,views,add,all,default,views
ViewResolutionResultHandler -> public void setDefaultViews(List<View> defaultViews);1496429194;Set the default views to consider always when resolving view names and_trying to satisfy the best matching content type.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews.clear()__		if (defaultViews != null) {_			this.defaultViews.addAll(defaultViews)__		}_	};set,the,default,views,to,consider,always,when,resolving,view,names,and,trying,to,satisfy,the,best,matching,content,type;public,void,set,default,views,list,view,default,views,this,default,views,clear,if,default,views,null,this,default,views,add,all,default,views
ViewResolutionResultHandler -> public void setDefaultViews(List<View> defaultViews);1496430942;Set the default views to consider always when resolving view names and_trying to satisfy the best matching content type.;public void setDefaultViews(List<View> defaultViews) {_		this.defaultViews.clear()__		if (defaultViews != null) {_			this.defaultViews.addAll(defaultViews)__		}_	};set,the,default,views,to,consider,always,when,resolving,view,names,and,trying,to,satisfy,the,best,matching,content,type;public,void,set,default,views,list,view,default,views,this,default,views,clear,if,default,views,null,this,default,views,add,all,default,views
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver);1489433888;Basic constructor with a default {@link ReactiveAdapterRegistry}._@param viewResolvers the resolver to use_@param contentTypeResolver to determine the requested content type;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver) {__		this(viewResolvers, contentTypeResolver, new ReactiveAdapterRegistry())__	};basic,constructor,with,a,default,link,reactive,adapter,registry,param,view,resolvers,the,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,this,view,resolvers,content,type,resolver,new,reactive,adapter,registry
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver);1489535791;Basic constructor with a default {@link ReactiveAdapterRegistry}._@param viewResolvers the resolver to use_@param contentTypeResolver to determine the requested content type;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver) {__		this(viewResolvers, contentTypeResolver, new ReactiveAdapterRegistry())__	};basic,constructor,with,a,default,link,reactive,adapter,registry,param,view,resolvers,the,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,this,view,resolvers,content,type,resolver,new,reactive,adapter,registry
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver);1490903325;Basic constructor with a default {@link ReactiveAdapterRegistry}._@param viewResolvers the resolver to use_@param contentTypeResolver to determine the requested content type;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver) {__		this(viewResolvers, contentTypeResolver, new ReactiveAdapterRegistry())__	};basic,constructor,with,a,default,link,reactive,adapter,registry,param,view,resolvers,the,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,this,view,resolvers,content,type,resolver,new,reactive,adapter,registry
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver);1491502908;Basic constructor with a default {@link ReactiveAdapterRegistry}._@param viewResolvers the resolver to use_@param contentTypeResolver to determine the requested content type;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver) {__		this(viewResolvers, contentTypeResolver, new ReactiveAdapterRegistry())__	};basic,constructor,with,a,default,link,reactive,adapter,registry,param,view,resolvers,the,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,this,view,resolvers,content,type,resolver,new,reactive,adapter,registry
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver);1491599707;Basic constructor with a default {@link ReactiveAdapterRegistry}._@param viewResolvers the resolver to use_@param contentTypeResolver to determine the requested content type;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver) {__		this(viewResolvers, contentTypeResolver, new ReactiveAdapterRegistry())__	};basic,constructor,with,a,default,link,reactive,adapter,registry,param,view,resolvers,the,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,this,view,resolvers,content,type,resolver,new,reactive,adapter,registry
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver);1491599707;Basic constructor with a default {@link ReactiveAdapterRegistry}._@param viewResolvers the resolver to use_@param contentTypeResolver to determine the requested content type;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver) {__		this(viewResolvers, contentTypeResolver, new ReactiveAdapterRegistry())__	};basic,constructor,with,a,default,link,reactive,adapter,registry,param,view,resolvers,the,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,this,view,resolvers,content,type,resolver,new,reactive,adapter,registry
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver);1491909547;Basic constructor with a default {@link ReactiveAdapterRegistry}._@param viewResolvers the resolver to use_@param contentTypeResolver to determine the requested content type;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver) {__		this(viewResolvers, contentTypeResolver, new ReactiveAdapterRegistry())__	};basic,constructor,with,a,default,link,reactive,adapter,registry,param,view,resolvers,the,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,this,view,resolvers,content,type,resolver,new,reactive,adapter,registry
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver);1491927184;Basic constructor with a default {@link ReactiveAdapterRegistry}._@param viewResolvers the resolver to use_@param contentTypeResolver to determine the requested content type;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver) {__		this(viewResolvers, contentTypeResolver, new ReactiveAdapterRegistry())__	};basic,constructor,with,a,default,link,reactive,adapter,registry,param,view,resolvers,the,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,this,view,resolvers,content,type,resolver,new,reactive,adapter,registry
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver);1492090594;Basic constructor with a default {@link ReactiveAdapterRegistry}._@param viewResolvers the resolver to use_@param contentTypeResolver to determine the requested content type;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver) {__		this(viewResolvers, contentTypeResolver, new ReactiveAdapterRegistry())__	};basic,constructor,with,a,default,link,reactive,adapter,registry,param,view,resolvers,the,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,this,view,resolvers,content,type,resolver,new,reactive,adapter,registry
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver);1492570843;Basic constructor with a default {@link ReactiveAdapterRegistry}._@param viewResolvers the resolver to use_@param contentTypeResolver to determine the requested content type;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver) {__		this(viewResolvers, contentTypeResolver, new ReactiveAdapterRegistry())__	};basic,constructor,with,a,default,link,reactive,adapter,registry,param,view,resolvers,the,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,this,view,resolvers,content,type,resolver,new,reactive,adapter,registry
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver);1492571447;Basic constructor with a default {@link ReactiveAdapterRegistry}._@param viewResolvers the resolver to use_@param contentTypeResolver to determine the requested content type;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver) {__		this(viewResolvers, contentTypeResolver, new ReactiveAdapterRegistry())__	};basic,constructor,with,a,default,link,reactive,adapter,registry,param,view,resolvers,the,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,this,view,resolvers,content,type,resolver,new,reactive,adapter,registry
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver);1492694378;Basic constructor with a default {@link ReactiveAdapterRegistry}._@param viewResolvers the resolver to use_@param contentTypeResolver to determine the requested content type;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver) {__		this(viewResolvers, contentTypeResolver, new ReactiveAdapterRegistry())__	};basic,constructor,with,a,default,link,reactive,adapter,registry,param,view,resolvers,the,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,this,view,resolvers,content,type,resolver,new,reactive,adapter,registry
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver);1495569915;Basic constructor with a default {@link ReactiveAdapterRegistry}._@param viewResolvers the resolver to use_@param contentTypeResolver to determine the requested content type;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver) {__		this(viewResolvers, contentTypeResolver, new ReactiveAdapterRegistry())__	};basic,constructor,with,a,default,link,reactive,adapter,registry,param,view,resolvers,the,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,this,view,resolvers,content,type,resolver,new,reactive,adapter,registry
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver);1495657865;Basic constructor with a default {@link ReactiveAdapterRegistry}._@param viewResolvers the resolver to use_@param contentTypeResolver to determine the requested content type;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver) {__		this(viewResolvers, contentTypeResolver, new ReactiveAdapterRegistry())__	};basic,constructor,with,a,default,link,reactive,adapter,registry,param,view,resolvers,the,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,this,view,resolvers,content,type,resolver,new,reactive,adapter,registry
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver);1496334664;Basic constructor with a default {@link ReactiveAdapterRegistry}._@param viewResolvers the resolver to use_@param contentTypeResolver to determine the requested content type;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver) {__		this(viewResolvers, contentTypeResolver, new ReactiveAdapterRegistry())__	};basic,constructor,with,a,default,link,reactive,adapter,registry,param,view,resolvers,the,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,this,view,resolvers,content,type,resolver,new,reactive,adapter,registry
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver);1496429194;Basic constructor with a default {@link ReactiveAdapterRegistry}._@param viewResolvers the resolver to use_@param contentTypeResolver to determine the requested content type;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver) {__		this(viewResolvers, contentTypeResolver, new ReactiveAdapterRegistry())__	};basic,constructor,with,a,default,link,reactive,adapter,registry,param,view,resolvers,the,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,this,view,resolvers,content,type,resolver,new,reactive,adapter,registry
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver);1496430942;Basic constructor with a default {@link ReactiveAdapterRegistry}._@param viewResolvers the resolver to use_@param contentTypeResolver to determine the requested content type;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver) {__		this(viewResolvers, contentTypeResolver, new ReactiveAdapterRegistry())__	};basic,constructor,with,a,default,link,reactive,adapter,registry,param,view,resolvers,the,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,this,view,resolvers,content,type,resolver,new,reactive,adapter,registry
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver);1496837955;Basic constructor with a default {@link ReactiveAdapterRegistry}._@param viewResolvers the resolver to use_@param contentTypeResolver to determine the requested content type;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver) {__		this(viewResolvers, contentTypeResolver, new ReactiveAdapterRegistry())__	};basic,constructor,with,a,default,link,reactive,adapter,registry,param,view,resolvers,the,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,this,view,resolvers,content,type,resolver,new,reactive,adapter,registry
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver);1497039338;Basic constructor with a default {@link ReactiveAdapterRegistry}._@param viewResolvers the resolver to use_@param contentTypeResolver to determine the requested content type;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver) {__		this(viewResolvers, contentTypeResolver, new ReactiveAdapterRegistry())__	};basic,constructor,with,a,default,link,reactive,adapter,registry,param,view,resolvers,the,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,this,view,resolvers,content,type,resolver,new,reactive,adapter,registry
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver);1497232764;Basic constructor with a default {@link ReactiveAdapterRegistry}._@param viewResolvers the resolver to use_@param contentTypeResolver to determine the requested content type;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver) {__		this(viewResolvers, contentTypeResolver, new ReactiveAdapterRegistry())__	};basic,constructor,with,a,default,link,reactive,adapter,registry,param,view,resolvers,the,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,this,view,resolvers,content,type,resolver,new,reactive,adapter,registry
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver);1497359418;Basic constructor with a default {@link ReactiveAdapterRegistry}._@param viewResolvers the resolver to use_@param contentTypeResolver to determine the requested content type;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver) {__		this(viewResolvers, contentTypeResolver, new ReactiveAdapterRegistry())__	};basic,constructor,with,a,default,link,reactive,adapter,registry,param,view,resolvers,the,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,this,view,resolvers,content,type,resolver,new,reactive,adapter,registry
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver);1497974922;Basic constructor with a default {@link ReactiveAdapterRegistry}._@param viewResolvers the resolver to use_@param contentTypeResolver to determine the requested content type;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver) {__		this(viewResolvers, contentTypeResolver, new ReactiveAdapterRegistry())__	};basic,constructor,with,a,default,link,reactive,adapter,registry,param,view,resolvers,the,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,this,view,resolvers,content,type,resolver,new,reactive,adapter,registry
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver);1511215342;Basic constructor with a default {@link ReactiveAdapterRegistry}._@param viewResolvers the resolver to use_@param contentTypeResolver to determine the requested content type;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver) {__		this(viewResolvers, contentTypeResolver, ReactiveAdapterRegistry.getSharedInstance())__	};basic,constructor,with,a,default,link,reactive,adapter,registry,param,view,resolvers,the,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,this,view,resolvers,content,type,resolver,reactive,adapter,registry,get,shared,instance
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver);1517022854;Basic constructor with a default {@link ReactiveAdapterRegistry}._@param viewResolvers the resolver to use_@param contentTypeResolver to determine the requested content type;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver) {__		this(viewResolvers, contentTypeResolver, ReactiveAdapterRegistry.getSharedInstance())__	};basic,constructor,with,a,default,link,reactive,adapter,registry,param,view,resolvers,the,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,this,view,resolvers,content,type,resolver,reactive,adapter,registry,get,shared,instance
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver);1532520919;Basic constructor with a default {@link ReactiveAdapterRegistry}._@param viewResolvers the resolver to use_@param contentTypeResolver to determine the requested content type;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver) {__		this(viewResolvers, contentTypeResolver, ReactiveAdapterRegistry.getSharedInstance())__	};basic,constructor,with,a,default,link,reactive,adapter,registry,param,view,resolvers,the,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,this,view,resolvers,content,type,resolver,reactive,adapter,registry,get,shared,instance
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver);1533034998;Basic constructor with a default {@link ReactiveAdapterRegistry}._@param viewResolvers the resolver to use_@param contentTypeResolver to determine the requested content type;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver) {__		this(viewResolvers, contentTypeResolver, ReactiveAdapterRegistry.getSharedInstance())__	};basic,constructor,with,a,default,link,reactive,adapter,registry,param,view,resolvers,the,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,this,view,resolvers,content,type,resolver,reactive,adapter,registry,get,shared,instance
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver);1542050977;Basic constructor with a default {@link ReactiveAdapterRegistry}._@param viewResolvers the resolver to use_@param contentTypeResolver to determine the requested content type;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver) {__		this(viewResolvers, contentTypeResolver, ReactiveAdapterRegistry.getSharedInstance())__	};basic,constructor,with,a,default,link,reactive,adapter,registry,param,view,resolvers,the,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,this,view,resolvers,content,type,resolver,reactive,adapter,registry,get,shared,instance
ViewResolutionResultHandler -> private String getNameForReturnValue(Class<?> returnValueType, MethodParameter returnType);1485986572;Return the name of a model attribute return value based on the method_{@code @ModelAttribute} annotation, if present, or derived from the type_of the return value otherwise.;private String getNameForReturnValue(Class<?> returnValueType, MethodParameter returnType) {_		ModelAttribute annotation = returnType.getMethodAnnotation(ModelAttribute.class)__		if (annotation != null && StringUtils.hasText(annotation.value())) {_			return annotation.value()__		}_		_		return ClassUtils.getShortNameAsProperty(returnValueType)__	};return,the,name,of,a,model,attribute,return,value,based,on,the,method,code,model,attribute,annotation,if,present,or,derived,from,the,type,of,the,return,value,otherwise;private,string,get,name,for,return,value,class,return,value,type,method,parameter,return,type,model,attribute,annotation,return,type,get,method,annotation,model,attribute,class,if,annotation,null,string,utils,has,text,annotation,value,return,annotation,value,return,class,utils,get,short,name,as,property,return,value,type
ViewResolutionResultHandler -> private String getNameForReturnValue(Class<?> returnValueType, MethodParameter returnType);1486632602;Return the name of a model attribute return value based on the method_{@code @ModelAttribute} annotation, if present, or derived from the type_of the return value otherwise.;private String getNameForReturnValue(Class<?> returnValueType, MethodParameter returnType) {_		ModelAttribute annotation = returnType.getMethodAnnotation(ModelAttribute.class)__		if (annotation != null && StringUtils.hasText(annotation.value())) {_			return annotation.value()__		}_		_		return ClassUtils.getShortNameAsProperty(returnValueType)__	};return,the,name,of,a,model,attribute,return,value,based,on,the,method,code,model,attribute,annotation,if,present,or,derived,from,the,type,of,the,return,value,otherwise;private,string,get,name,for,return,value,class,return,value,type,method,parameter,return,type,model,attribute,annotation,return,type,get,method,annotation,model,attribute,class,if,annotation,null,string,utils,has,text,annotation,value,return,annotation,value,return,class,utils,get,short,name,as,property,return,value,type
ViewResolutionResultHandler -> private String getNameForReturnValue(Class<?> returnValueType, MethodParameter returnType);1489433888;Return the name of a model attribute return value based on the method_{@code @ModelAttribute} annotation, if present, or derived from the type_of the return value otherwise.;private String getNameForReturnValue(Class<?> returnValueType, MethodParameter returnType) {_		ModelAttribute annotation = returnType.getMethodAnnotation(ModelAttribute.class)__		if (annotation != null && StringUtils.hasText(annotation.value())) {_			return annotation.value()__		}_		_		return ClassUtils.getShortNameAsProperty(returnValueType)__	};return,the,name,of,a,model,attribute,return,value,based,on,the,method,code,model,attribute,annotation,if,present,or,derived,from,the,type,of,the,return,value,otherwise;private,string,get,name,for,return,value,class,return,value,type,method,parameter,return,type,model,attribute,annotation,return,type,get,method,annotation,model,attribute,class,if,annotation,null,string,utils,has,text,annotation,value,return,annotation,value,return,class,utils,get,short,name,as,property,return,value,type
ViewResolutionResultHandler -> private String getNameForReturnValue(Class<?> returnValueType, MethodParameter returnType);1489535791;Return the name of a model attribute return value based on the method_{@code @ModelAttribute} annotation, if present, or derived from the type_of the return value otherwise.;private String getNameForReturnValue(Class<?> returnValueType, MethodParameter returnType) {_		ModelAttribute annotation = returnType.getMethodAnnotation(ModelAttribute.class)__		if (annotation != null && StringUtils.hasText(annotation.value())) {_			return annotation.value()__		}_		_		return ClassUtils.getShortNameAsProperty(returnValueType)__	};return,the,name,of,a,model,attribute,return,value,based,on,the,method,code,model,attribute,annotation,if,present,or,derived,from,the,type,of,the,return,value,otherwise;private,string,get,name,for,return,value,class,return,value,type,method,parameter,return,type,model,attribute,annotation,return,type,get,method,annotation,model,attribute,class,if,annotation,null,string,utils,has,text,annotation,value,return,annotation,value,return,class,utils,get,short,name,as,property,return,value,type
ViewResolutionResultHandler -> private String getNameForReturnValue(Class<?> returnValueType, MethodParameter returnType);1490903325;Return the name of a model attribute return value based on the method_{@code @ModelAttribute} annotation, if present, or derived from the type_of the return value otherwise.;private String getNameForReturnValue(Class<?> returnValueType, MethodParameter returnType) {_		ModelAttribute annotation = returnType.getMethodAnnotation(ModelAttribute.class)__		if (annotation != null && StringUtils.hasText(annotation.value())) {_			return annotation.value()__		}_		_		return ClassUtils.getShortNameAsProperty(returnValueType)__	};return,the,name,of,a,model,attribute,return,value,based,on,the,method,code,model,attribute,annotation,if,present,or,derived,from,the,type,of,the,return,value,otherwise;private,string,get,name,for,return,value,class,return,value,type,method,parameter,return,type,model,attribute,annotation,return,type,get,method,annotation,model,attribute,class,if,annotation,null,string,utils,has,text,annotation,value,return,annotation,value,return,class,utils,get,short,name,as,property,return,value,type
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> resolvers, 			RequestedContentTypeResolver contentTypeResolver, 			ReactiveAdapterRegistry adapterRegistry);1485986572;Constructor with {@code ViewResolver}s tand a {@code ConversionService}._@param resolvers the resolver to use_@param contentTypeResolver for resolving the requested content type_@param adapterRegistry for adapting from other reactive types (e.g._rx.Single) to Mono;public ViewResolutionResultHandler(List<ViewResolver> resolvers,_			RequestedContentTypeResolver contentTypeResolver,_			ReactiveAdapterRegistry adapterRegistry) {__		super(contentTypeResolver, adapterRegistry)__		this.viewResolvers.addAll(resolvers)__		AnnotationAwareOrderComparator.sort(this.viewResolvers)__	};constructor,with,code,view,resolver,s,tand,a,code,conversion,service,param,resolvers,the,resolver,to,use,param,content,type,resolver,for,resolving,the,requested,content,type,param,adapter,registry,for,adapting,from,other,reactive,types,e,g,rx,single,to,mono;public,view,resolution,result,handler,list,view,resolver,resolvers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,adapter,registry,super,content,type,resolver,adapter,registry,this,view,resolvers,add,all,resolvers,annotation,aware,order,comparator,sort,this,view,resolvers
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> resolvers, 			RequestedContentTypeResolver contentTypeResolver, 			ReactiveAdapterRegistry adapterRegistry);1486632602;Constructor with {@code ViewResolver}s tand a {@code ConversionService}._@param resolvers the resolver to use_@param contentTypeResolver for resolving the requested content type_@param adapterRegistry for adapting from other reactive types (e.g._rx.Single) to Mono;public ViewResolutionResultHandler(List<ViewResolver> resolvers,_			RequestedContentTypeResolver contentTypeResolver,_			ReactiveAdapterRegistry adapterRegistry) {__		super(contentTypeResolver, adapterRegistry)__		this.viewResolvers.addAll(resolvers)__		AnnotationAwareOrderComparator.sort(this.viewResolvers)__	};constructor,with,code,view,resolver,s,tand,a,code,conversion,service,param,resolvers,the,resolver,to,use,param,content,type,resolver,for,resolving,the,requested,content,type,param,adapter,registry,for,adapting,from,other,reactive,types,e,g,rx,single,to,mono;public,view,resolution,result,handler,list,view,resolver,resolvers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,adapter,registry,super,content,type,resolver,adapter,registry,this,view,resolvers,add,all,resolvers,annotation,aware,order,comparator,sort,this,view,resolvers
ViewResolutionResultHandler -> public List<ViewResolver> getViewResolvers();1485986572;Return a read-only list of view resolvers.;public List<ViewResolver> getViewResolvers() {_		return Collections.unmodifiableList(this.viewResolvers)__	};return,a,read,only,list,of,view,resolvers;public,list,view,resolver,get,view,resolvers,return,collections,unmodifiable,list,this,view,resolvers
ViewResolutionResultHandler -> public List<ViewResolver> getViewResolvers();1486632602;Return a read-only list of view resolvers.;public List<ViewResolver> getViewResolvers() {_		return Collections.unmodifiableList(this.viewResolvers)__	};return,a,read,only,list,of,view,resolvers;public,list,view,resolver,get,view,resolvers,return,collections,unmodifiable,list,this,view,resolvers
ViewResolutionResultHandler -> public List<ViewResolver> getViewResolvers();1489433888;Return a read-only list of view resolvers.;public List<ViewResolver> getViewResolvers() {_		return Collections.unmodifiableList(this.viewResolvers)__	};return,a,read,only,list,of,view,resolvers;public,list,view,resolver,get,view,resolvers,return,collections,unmodifiable,list,this,view,resolvers
ViewResolutionResultHandler -> public List<ViewResolver> getViewResolvers();1489535791;Return a read-only list of view resolvers.;public List<ViewResolver> getViewResolvers() {_		return Collections.unmodifiableList(this.viewResolvers)__	};return,a,read,only,list,of,view,resolvers;public,list,view,resolver,get,view,resolvers,return,collections,unmodifiable,list,this,view,resolvers
ViewResolutionResultHandler -> public List<ViewResolver> getViewResolvers();1490903325;Return a read-only list of view resolvers.;public List<ViewResolver> getViewResolvers() {_		return Collections.unmodifiableList(this.viewResolvers)__	};return,a,read,only,list,of,view,resolvers;public,list,view,resolver,get,view,resolvers,return,collections,unmodifiable,list,this,view,resolvers
ViewResolutionResultHandler -> public List<ViewResolver> getViewResolvers();1491502908;Return a read-only list of view resolvers.;public List<ViewResolver> getViewResolvers() {_		return Collections.unmodifiableList(this.viewResolvers)__	};return,a,read,only,list,of,view,resolvers;public,list,view,resolver,get,view,resolvers,return,collections,unmodifiable,list,this,view,resolvers
ViewResolutionResultHandler -> public List<ViewResolver> getViewResolvers();1491599707;Return a read-only list of view resolvers.;public List<ViewResolver> getViewResolvers() {_		return Collections.unmodifiableList(this.viewResolvers)__	};return,a,read,only,list,of,view,resolvers;public,list,view,resolver,get,view,resolvers,return,collections,unmodifiable,list,this,view,resolvers
ViewResolutionResultHandler -> public List<ViewResolver> getViewResolvers();1491599707;Return a read-only list of view resolvers.;public List<ViewResolver> getViewResolvers() {_		return Collections.unmodifiableList(this.viewResolvers)__	};return,a,read,only,list,of,view,resolvers;public,list,view,resolver,get,view,resolvers,return,collections,unmodifiable,list,this,view,resolvers
ViewResolutionResultHandler -> public List<ViewResolver> getViewResolvers();1491909547;Return a read-only list of view resolvers.;public List<ViewResolver> getViewResolvers() {_		return Collections.unmodifiableList(this.viewResolvers)__	};return,a,read,only,list,of,view,resolvers;public,list,view,resolver,get,view,resolvers,return,collections,unmodifiable,list,this,view,resolvers
ViewResolutionResultHandler -> public List<ViewResolver> getViewResolvers();1491927184;Return a read-only list of view resolvers.;public List<ViewResolver> getViewResolvers() {_		return Collections.unmodifiableList(this.viewResolvers)__	};return,a,read,only,list,of,view,resolvers;public,list,view,resolver,get,view,resolvers,return,collections,unmodifiable,list,this,view,resolvers
ViewResolutionResultHandler -> public List<ViewResolver> getViewResolvers();1492090594;Return a read-only list of view resolvers.;public List<ViewResolver> getViewResolvers() {_		return Collections.unmodifiableList(this.viewResolvers)__	};return,a,read,only,list,of,view,resolvers;public,list,view,resolver,get,view,resolvers,return,collections,unmodifiable,list,this,view,resolvers
ViewResolutionResultHandler -> public List<ViewResolver> getViewResolvers();1492570843;Return a read-only list of view resolvers.;public List<ViewResolver> getViewResolvers() {_		return Collections.unmodifiableList(this.viewResolvers)__	};return,a,read,only,list,of,view,resolvers;public,list,view,resolver,get,view,resolvers,return,collections,unmodifiable,list,this,view,resolvers
ViewResolutionResultHandler -> public List<ViewResolver> getViewResolvers();1492571447;Return a read-only list of view resolvers.;public List<ViewResolver> getViewResolvers() {_		return Collections.unmodifiableList(this.viewResolvers)__	};return,a,read,only,list,of,view,resolvers;public,list,view,resolver,get,view,resolvers,return,collections,unmodifiable,list,this,view,resolvers
ViewResolutionResultHandler -> public List<ViewResolver> getViewResolvers();1492694378;Return a read-only list of view resolvers.;public List<ViewResolver> getViewResolvers() {_		return Collections.unmodifiableList(this.viewResolvers)__	};return,a,read,only,list,of,view,resolvers;public,list,view,resolver,get,view,resolvers,return,collections,unmodifiable,list,this,view,resolvers
ViewResolutionResultHandler -> public List<ViewResolver> getViewResolvers();1495569915;Return a read-only list of view resolvers.;public List<ViewResolver> getViewResolvers() {_		return Collections.unmodifiableList(this.viewResolvers)__	};return,a,read,only,list,of,view,resolvers;public,list,view,resolver,get,view,resolvers,return,collections,unmodifiable,list,this,view,resolvers
ViewResolutionResultHandler -> public List<ViewResolver> getViewResolvers();1495657865;Return a read-only list of view resolvers.;public List<ViewResolver> getViewResolvers() {_		return Collections.unmodifiableList(this.viewResolvers)__	};return,a,read,only,list,of,view,resolvers;public,list,view,resolver,get,view,resolvers,return,collections,unmodifiable,list,this,view,resolvers
ViewResolutionResultHandler -> public List<ViewResolver> getViewResolvers();1496334664;Return a read-only list of view resolvers.;public List<ViewResolver> getViewResolvers() {_		return Collections.unmodifiableList(this.viewResolvers)__	};return,a,read,only,list,of,view,resolvers;public,list,view,resolver,get,view,resolvers,return,collections,unmodifiable,list,this,view,resolvers
ViewResolutionResultHandler -> public List<ViewResolver> getViewResolvers();1496429194;Return a read-only list of view resolvers.;public List<ViewResolver> getViewResolvers() {_		return Collections.unmodifiableList(this.viewResolvers)__	};return,a,read,only,list,of,view,resolvers;public,list,view,resolver,get,view,resolvers,return,collections,unmodifiable,list,this,view,resolvers
ViewResolutionResultHandler -> public List<ViewResolver> getViewResolvers();1496430942;Return a read-only list of view resolvers.;public List<ViewResolver> getViewResolvers() {_		return Collections.unmodifiableList(this.viewResolvers)__	};return,a,read,only,list,of,view,resolvers;public,list,view,resolver,get,view,resolvers,return,collections,unmodifiable,list,this,view,resolvers
ViewResolutionResultHandler -> public List<ViewResolver> getViewResolvers();1496837955;Return a read-only list of view resolvers.;public List<ViewResolver> getViewResolvers() {_		return Collections.unmodifiableList(this.viewResolvers)__	};return,a,read,only,list,of,view,resolvers;public,list,view,resolver,get,view,resolvers,return,collections,unmodifiable,list,this,view,resolvers
ViewResolutionResultHandler -> public List<ViewResolver> getViewResolvers();1497039338;Return a read-only list of view resolvers.;public List<ViewResolver> getViewResolvers() {_		return Collections.unmodifiableList(this.viewResolvers)__	};return,a,read,only,list,of,view,resolvers;public,list,view,resolver,get,view,resolvers,return,collections,unmodifiable,list,this,view,resolvers
ViewResolutionResultHandler -> public List<ViewResolver> getViewResolvers();1497232764;Return a read-only list of view resolvers.;public List<ViewResolver> getViewResolvers() {_		return Collections.unmodifiableList(this.viewResolvers)__	};return,a,read,only,list,of,view,resolvers;public,list,view,resolver,get,view,resolvers,return,collections,unmodifiable,list,this,view,resolvers
ViewResolutionResultHandler -> public List<ViewResolver> getViewResolvers();1497359418;Return a read-only list of view resolvers.;public List<ViewResolver> getViewResolvers() {_		return Collections.unmodifiableList(this.viewResolvers)__	};return,a,read,only,list,of,view,resolvers;public,list,view,resolver,get,view,resolvers,return,collections,unmodifiable,list,this,view,resolvers
ViewResolutionResultHandler -> public List<ViewResolver> getViewResolvers();1497974922;Return a read-only list of view resolvers.;public List<ViewResolver> getViewResolvers() {_		return Collections.unmodifiableList(this.viewResolvers)__	};return,a,read,only,list,of,view,resolvers;public,list,view,resolver,get,view,resolvers,return,collections,unmodifiable,list,this,view,resolvers
ViewResolutionResultHandler -> public List<ViewResolver> getViewResolvers();1511215342;Return a read-only list of view resolvers.;public List<ViewResolver> getViewResolvers() {_		return Collections.unmodifiableList(this.viewResolvers)__	};return,a,read,only,list,of,view,resolvers;public,list,view,resolver,get,view,resolvers,return,collections,unmodifiable,list,this,view,resolvers
ViewResolutionResultHandler -> public List<ViewResolver> getViewResolvers();1517022854;Return a read-only list of view resolvers.;public List<ViewResolver> getViewResolvers() {_		return Collections.unmodifiableList(this.viewResolvers)__	};return,a,read,only,list,of,view,resolvers;public,list,view,resolver,get,view,resolvers,return,collections,unmodifiable,list,this,view,resolvers
ViewResolutionResultHandler -> public List<ViewResolver> getViewResolvers();1532520919;Return a read-only list of view resolvers.;public List<ViewResolver> getViewResolvers() {_		return Collections.unmodifiableList(this.viewResolvers)__	};return,a,read,only,list,of,view,resolvers;public,list,view,resolver,get,view,resolvers,return,collections,unmodifiable,list,this,view,resolvers
ViewResolutionResultHandler -> public List<ViewResolver> getViewResolvers();1533034998;Return a read-only list of view resolvers.;public List<ViewResolver> getViewResolvers() {_		return Collections.unmodifiableList(this.viewResolvers)__	};return,a,read,only,list,of,view,resolvers;public,list,view,resolver,get,view,resolvers,return,collections,unmodifiable,list,this,view,resolvers
ViewResolutionResultHandler -> public List<ViewResolver> getViewResolvers();1542050977;Return a read-only list of view resolvers.;public List<ViewResolver> getViewResolvers() {_		return Collections.unmodifiableList(this.viewResolvers)__	};return,a,read,only,list,of,view,resolvers;public,list,view,resolver,get,view,resolvers,return,collections,unmodifiable,list,this,view,resolvers
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry);1489433888;Constructor with an {@link ReactiveAdapterRegistry} instance._@param viewResolvers the view resolver to use_@param contentTypeResolver to determine the requested content type_@param registry for adaptation to reactive types;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry) {__		super(contentTypeResolver, registry)__		this.viewResolvers.addAll(viewResolvers)__		AnnotationAwareOrderComparator.sort(this.viewResolvers)__	};constructor,with,an,link,reactive,adapter,registry,instance,param,view,resolvers,the,view,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type,param,registry,for,adaptation,to,reactive,types;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,registry,super,content,type,resolver,registry,this,view,resolvers,add,all,view,resolvers,annotation,aware,order,comparator,sort,this,view,resolvers
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry);1489535791;Constructor with an {@link ReactiveAdapterRegistry} instance._@param viewResolvers the view resolver to use_@param contentTypeResolver to determine the requested content type_@param registry for adaptation to reactive types;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry) {__		super(contentTypeResolver, registry)__		this.viewResolvers.addAll(viewResolvers)__		AnnotationAwareOrderComparator.sort(this.viewResolvers)__	};constructor,with,an,link,reactive,adapter,registry,instance,param,view,resolvers,the,view,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type,param,registry,for,adaptation,to,reactive,types;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,registry,super,content,type,resolver,registry,this,view,resolvers,add,all,view,resolvers,annotation,aware,order,comparator,sort,this,view,resolvers
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry);1490903325;Constructor with an {@link ReactiveAdapterRegistry} instance._@param viewResolvers the view resolver to use_@param contentTypeResolver to determine the requested content type_@param registry for adaptation to reactive types;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry) {__		super(contentTypeResolver, registry)__		this.viewResolvers.addAll(viewResolvers)__		AnnotationAwareOrderComparator.sort(this.viewResolvers)__	};constructor,with,an,link,reactive,adapter,registry,instance,param,view,resolvers,the,view,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type,param,registry,for,adaptation,to,reactive,types;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,registry,super,content,type,resolver,registry,this,view,resolvers,add,all,view,resolvers,annotation,aware,order,comparator,sort,this,view,resolvers
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry);1491502908;Constructor with an {@link ReactiveAdapterRegistry} instance._@param viewResolvers the view resolver to use_@param contentTypeResolver to determine the requested content type_@param registry for adaptation to reactive types;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry) {__		super(contentTypeResolver, registry)__		this.viewResolvers.addAll(viewResolvers)__		AnnotationAwareOrderComparator.sort(this.viewResolvers)__	};constructor,with,an,link,reactive,adapter,registry,instance,param,view,resolvers,the,view,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type,param,registry,for,adaptation,to,reactive,types;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,registry,super,content,type,resolver,registry,this,view,resolvers,add,all,view,resolvers,annotation,aware,order,comparator,sort,this,view,resolvers
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry);1491599707;Constructor with an {@link ReactiveAdapterRegistry} instance._@param viewResolvers the view resolver to use_@param contentTypeResolver to determine the requested content type_@param registry for adaptation to reactive types;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry) {__		super(contentTypeResolver, registry)__		this.viewResolvers.addAll(viewResolvers)__		AnnotationAwareOrderComparator.sort(this.viewResolvers)__	};constructor,with,an,link,reactive,adapter,registry,instance,param,view,resolvers,the,view,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type,param,registry,for,adaptation,to,reactive,types;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,registry,super,content,type,resolver,registry,this,view,resolvers,add,all,view,resolvers,annotation,aware,order,comparator,sort,this,view,resolvers
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry);1491599707;Constructor with an {@link ReactiveAdapterRegistry} instance._@param viewResolvers the view resolver to use_@param contentTypeResolver to determine the requested content type_@param registry for adaptation to reactive types;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry) {__		super(contentTypeResolver, registry)__		this.viewResolvers.addAll(viewResolvers)__		AnnotationAwareOrderComparator.sort(this.viewResolvers)__	};constructor,with,an,link,reactive,adapter,registry,instance,param,view,resolvers,the,view,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type,param,registry,for,adaptation,to,reactive,types;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,registry,super,content,type,resolver,registry,this,view,resolvers,add,all,view,resolvers,annotation,aware,order,comparator,sort,this,view,resolvers
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry);1491909547;Constructor with an {@link ReactiveAdapterRegistry} instance._@param viewResolvers the view resolver to use_@param contentTypeResolver to determine the requested content type_@param registry for adaptation to reactive types;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry) {__		super(contentTypeResolver, registry)__		this.viewResolvers.addAll(viewResolvers)__		AnnotationAwareOrderComparator.sort(this.viewResolvers)__	};constructor,with,an,link,reactive,adapter,registry,instance,param,view,resolvers,the,view,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type,param,registry,for,adaptation,to,reactive,types;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,registry,super,content,type,resolver,registry,this,view,resolvers,add,all,view,resolvers,annotation,aware,order,comparator,sort,this,view,resolvers
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry);1491927184;Constructor with an {@link ReactiveAdapterRegistry} instance._@param viewResolvers the view resolver to use_@param contentTypeResolver to determine the requested content type_@param registry for adaptation to reactive types;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry) {__		super(contentTypeResolver, registry)__		this.viewResolvers.addAll(viewResolvers)__		AnnotationAwareOrderComparator.sort(this.viewResolvers)__	};constructor,with,an,link,reactive,adapter,registry,instance,param,view,resolvers,the,view,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type,param,registry,for,adaptation,to,reactive,types;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,registry,super,content,type,resolver,registry,this,view,resolvers,add,all,view,resolvers,annotation,aware,order,comparator,sort,this,view,resolvers
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry);1492090594;Constructor with an {@link ReactiveAdapterRegistry} instance._@param viewResolvers the view resolver to use_@param contentTypeResolver to determine the requested content type_@param registry for adaptation to reactive types;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry) {__		super(contentTypeResolver, registry)__		this.viewResolvers.addAll(viewResolvers)__		AnnotationAwareOrderComparator.sort(this.viewResolvers)__	};constructor,with,an,link,reactive,adapter,registry,instance,param,view,resolvers,the,view,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type,param,registry,for,adaptation,to,reactive,types;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,registry,super,content,type,resolver,registry,this,view,resolvers,add,all,view,resolvers,annotation,aware,order,comparator,sort,this,view,resolvers
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry);1492570843;Constructor with an {@link ReactiveAdapterRegistry} instance._@param viewResolvers the view resolver to use_@param contentTypeResolver to determine the requested content type_@param registry for adaptation to reactive types;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry) {__		super(contentTypeResolver, registry)__		this.viewResolvers.addAll(viewResolvers)__		AnnotationAwareOrderComparator.sort(this.viewResolvers)__	};constructor,with,an,link,reactive,adapter,registry,instance,param,view,resolvers,the,view,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type,param,registry,for,adaptation,to,reactive,types;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,registry,super,content,type,resolver,registry,this,view,resolvers,add,all,view,resolvers,annotation,aware,order,comparator,sort,this,view,resolvers
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry);1492571447;Constructor with an {@link ReactiveAdapterRegistry} instance._@param viewResolvers the view resolver to use_@param contentTypeResolver to determine the requested content type_@param registry for adaptation to reactive types;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry) {__		super(contentTypeResolver, registry)__		this.viewResolvers.addAll(viewResolvers)__		AnnotationAwareOrderComparator.sort(this.viewResolvers)__	};constructor,with,an,link,reactive,adapter,registry,instance,param,view,resolvers,the,view,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type,param,registry,for,adaptation,to,reactive,types;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,registry,super,content,type,resolver,registry,this,view,resolvers,add,all,view,resolvers,annotation,aware,order,comparator,sort,this,view,resolvers
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry);1492694378;Constructor with an {@link ReactiveAdapterRegistry} instance._@param viewResolvers the view resolver to use_@param contentTypeResolver to determine the requested content type_@param registry for adaptation to reactive types;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry) {__		super(contentTypeResolver, registry)__		this.viewResolvers.addAll(viewResolvers)__		AnnotationAwareOrderComparator.sort(this.viewResolvers)__	};constructor,with,an,link,reactive,adapter,registry,instance,param,view,resolvers,the,view,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type,param,registry,for,adaptation,to,reactive,types;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,registry,super,content,type,resolver,registry,this,view,resolvers,add,all,view,resolvers,annotation,aware,order,comparator,sort,this,view,resolvers
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry);1495569915;Constructor with an {@link ReactiveAdapterRegistry} instance._@param viewResolvers the view resolver to use_@param contentTypeResolver to determine the requested content type_@param registry for adaptation to reactive types;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry) {__		super(contentTypeResolver, registry)__		this.viewResolvers.addAll(viewResolvers)__		AnnotationAwareOrderComparator.sort(this.viewResolvers)__	};constructor,with,an,link,reactive,adapter,registry,instance,param,view,resolvers,the,view,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type,param,registry,for,adaptation,to,reactive,types;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,registry,super,content,type,resolver,registry,this,view,resolvers,add,all,view,resolvers,annotation,aware,order,comparator,sort,this,view,resolvers
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry);1495657865;Constructor with an {@link ReactiveAdapterRegistry} instance._@param viewResolvers the view resolver to use_@param contentTypeResolver to determine the requested content type_@param registry for adaptation to reactive types;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry) {__		super(contentTypeResolver, registry)__		this.viewResolvers.addAll(viewResolvers)__		AnnotationAwareOrderComparator.sort(this.viewResolvers)__	};constructor,with,an,link,reactive,adapter,registry,instance,param,view,resolvers,the,view,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type,param,registry,for,adaptation,to,reactive,types;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,registry,super,content,type,resolver,registry,this,view,resolvers,add,all,view,resolvers,annotation,aware,order,comparator,sort,this,view,resolvers
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry);1496334664;Constructor with an {@link ReactiveAdapterRegistry} instance._@param viewResolvers the view resolver to use_@param contentTypeResolver to determine the requested content type_@param registry for adaptation to reactive types;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry) {__		super(contentTypeResolver, registry)__		this.viewResolvers.addAll(viewResolvers)__		AnnotationAwareOrderComparator.sort(this.viewResolvers)__	};constructor,with,an,link,reactive,adapter,registry,instance,param,view,resolvers,the,view,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type,param,registry,for,adaptation,to,reactive,types;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,registry,super,content,type,resolver,registry,this,view,resolvers,add,all,view,resolvers,annotation,aware,order,comparator,sort,this,view,resolvers
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry);1496429194;Constructor with an {@link ReactiveAdapterRegistry} instance._@param viewResolvers the view resolver to use_@param contentTypeResolver to determine the requested content type_@param registry for adaptation to reactive types;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry) {__		super(contentTypeResolver, registry)__		this.viewResolvers.addAll(viewResolvers)__		AnnotationAwareOrderComparator.sort(this.viewResolvers)__	};constructor,with,an,link,reactive,adapter,registry,instance,param,view,resolvers,the,view,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type,param,registry,for,adaptation,to,reactive,types;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,registry,super,content,type,resolver,registry,this,view,resolvers,add,all,view,resolvers,annotation,aware,order,comparator,sort,this,view,resolvers
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry);1496430942;Constructor with an {@link ReactiveAdapterRegistry} instance._@param viewResolvers the view resolver to use_@param contentTypeResolver to determine the requested content type_@param registry for adaptation to reactive types;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry) {__		super(contentTypeResolver, registry)__		this.viewResolvers.addAll(viewResolvers)__		AnnotationAwareOrderComparator.sort(this.viewResolvers)__	};constructor,with,an,link,reactive,adapter,registry,instance,param,view,resolvers,the,view,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type,param,registry,for,adaptation,to,reactive,types;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,registry,super,content,type,resolver,registry,this,view,resolvers,add,all,view,resolvers,annotation,aware,order,comparator,sort,this,view,resolvers
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry);1496837955;Constructor with an {@link ReactiveAdapterRegistry} instance._@param viewResolvers the view resolver to use_@param contentTypeResolver to determine the requested content type_@param registry for adaptation to reactive types;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry) {__		super(contentTypeResolver, registry)__		this.viewResolvers.addAll(viewResolvers)__		AnnotationAwareOrderComparator.sort(this.viewResolvers)__	};constructor,with,an,link,reactive,adapter,registry,instance,param,view,resolvers,the,view,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type,param,registry,for,adaptation,to,reactive,types;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,registry,super,content,type,resolver,registry,this,view,resolvers,add,all,view,resolvers,annotation,aware,order,comparator,sort,this,view,resolvers
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry);1497039338;Constructor with an {@link ReactiveAdapterRegistry} instance._@param viewResolvers the view resolver to use_@param contentTypeResolver to determine the requested content type_@param registry for adaptation to reactive types;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry) {__		super(contentTypeResolver, registry)__		this.viewResolvers.addAll(viewResolvers)__		AnnotationAwareOrderComparator.sort(this.viewResolvers)__	};constructor,with,an,link,reactive,adapter,registry,instance,param,view,resolvers,the,view,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type,param,registry,for,adaptation,to,reactive,types;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,registry,super,content,type,resolver,registry,this,view,resolvers,add,all,view,resolvers,annotation,aware,order,comparator,sort,this,view,resolvers
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry);1497232764;Constructor with an {@link ReactiveAdapterRegistry} instance._@param viewResolvers the view resolver to use_@param contentTypeResolver to determine the requested content type_@param registry for adaptation to reactive types;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry) {__		super(contentTypeResolver, registry)__		this.viewResolvers.addAll(viewResolvers)__		AnnotationAwareOrderComparator.sort(this.viewResolvers)__	};constructor,with,an,link,reactive,adapter,registry,instance,param,view,resolvers,the,view,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type,param,registry,for,adaptation,to,reactive,types;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,registry,super,content,type,resolver,registry,this,view,resolvers,add,all,view,resolvers,annotation,aware,order,comparator,sort,this,view,resolvers
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry);1497359418;Constructor with an {@link ReactiveAdapterRegistry} instance._@param viewResolvers the view resolver to use_@param contentTypeResolver to determine the requested content type_@param registry for adaptation to reactive types;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry) {__		super(contentTypeResolver, registry)__		this.viewResolvers.addAll(viewResolvers)__		AnnotationAwareOrderComparator.sort(this.viewResolvers)__	};constructor,with,an,link,reactive,adapter,registry,instance,param,view,resolvers,the,view,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type,param,registry,for,adaptation,to,reactive,types;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,registry,super,content,type,resolver,registry,this,view,resolvers,add,all,view,resolvers,annotation,aware,order,comparator,sort,this,view,resolvers
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry);1497974922;Constructor with an {@link ReactiveAdapterRegistry} instance._@param viewResolvers the view resolver to use_@param contentTypeResolver to determine the requested content type_@param registry for adaptation to reactive types;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry) {__		super(contentTypeResolver, registry)__		this.viewResolvers.addAll(viewResolvers)__		AnnotationAwareOrderComparator.sort(this.viewResolvers)__	};constructor,with,an,link,reactive,adapter,registry,instance,param,view,resolvers,the,view,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type,param,registry,for,adaptation,to,reactive,types;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,registry,super,content,type,resolver,registry,this,view,resolvers,add,all,view,resolvers,annotation,aware,order,comparator,sort,this,view,resolvers
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry);1511215342;Constructor with an {@link ReactiveAdapterRegistry} instance._@param viewResolvers the view resolver to use_@param contentTypeResolver to determine the requested content type_@param registry for adaptation to reactive types;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry) {__		super(contentTypeResolver, registry)__		this.viewResolvers.addAll(viewResolvers)__		AnnotationAwareOrderComparator.sort(this.viewResolvers)__	};constructor,with,an,link,reactive,adapter,registry,instance,param,view,resolvers,the,view,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type,param,registry,for,adaptation,to,reactive,types;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,registry,super,content,type,resolver,registry,this,view,resolvers,add,all,view,resolvers,annotation,aware,order,comparator,sort,this,view,resolvers
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry);1517022854;Constructor with an {@link ReactiveAdapterRegistry} instance._@param viewResolvers the view resolver to use_@param contentTypeResolver to determine the requested content type_@param registry for adaptation to reactive types;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry) {__		super(contentTypeResolver, registry)__		this.viewResolvers.addAll(viewResolvers)__		AnnotationAwareOrderComparator.sort(this.viewResolvers)__	};constructor,with,an,link,reactive,adapter,registry,instance,param,view,resolvers,the,view,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type,param,registry,for,adaptation,to,reactive,types;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,registry,super,content,type,resolver,registry,this,view,resolvers,add,all,view,resolvers,annotation,aware,order,comparator,sort,this,view,resolvers
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry);1532520919;Constructor with an {@link ReactiveAdapterRegistry} instance._@param viewResolvers the view resolver to use_@param contentTypeResolver to determine the requested content type_@param registry for adaptation to reactive types;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry) {__		super(contentTypeResolver, registry)__		this.viewResolvers.addAll(viewResolvers)__		AnnotationAwareOrderComparator.sort(this.viewResolvers)__	};constructor,with,an,link,reactive,adapter,registry,instance,param,view,resolvers,the,view,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type,param,registry,for,adaptation,to,reactive,types;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,registry,super,content,type,resolver,registry,this,view,resolvers,add,all,view,resolvers,annotation,aware,order,comparator,sort,this,view,resolvers
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry);1533034998;Constructor with an {@link ReactiveAdapterRegistry} instance._@param viewResolvers the view resolver to use_@param contentTypeResolver to determine the requested content type_@param registry for adaptation to reactive types;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry) {__		super(contentTypeResolver, registry)__		this.viewResolvers.addAll(viewResolvers)__		AnnotationAwareOrderComparator.sort(this.viewResolvers)__	};constructor,with,an,link,reactive,adapter,registry,instance,param,view,resolvers,the,view,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type,param,registry,for,adaptation,to,reactive,types;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,registry,super,content,type,resolver,registry,this,view,resolvers,add,all,view,resolvers,annotation,aware,order,comparator,sort,this,view,resolvers
ViewResolutionResultHandler -> public ViewResolutionResultHandler(List<ViewResolver> viewResolvers, 			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry);1542050977;Constructor with an {@link ReactiveAdapterRegistry} instance._@param viewResolvers the view resolver to use_@param contentTypeResolver to determine the requested content type_@param registry for adaptation to reactive types;public ViewResolutionResultHandler(List<ViewResolver> viewResolvers,_			RequestedContentTypeResolver contentTypeResolver, ReactiveAdapterRegistry registry) {__		super(contentTypeResolver, registry)__		this.viewResolvers.addAll(viewResolvers)__		AnnotationAwareOrderComparator.sort(this.viewResolvers)__	};constructor,with,an,link,reactive,adapter,registry,instance,param,view,resolvers,the,view,resolver,to,use,param,content,type,resolver,to,determine,the,requested,content,type,param,registry,for,adaptation,to,reactive,types;public,view,resolution,result,handler,list,view,resolver,view,resolvers,requested,content,type,resolver,content,type,resolver,reactive,adapter,registry,registry,super,content,type,resolver,registry,this,view,resolvers,add,all,view,resolvers,annotation,aware,order,comparator,sort,this,view,resolvers
ViewResolutionResultHandler -> private String getDefaultViewName(ServerWebExchange exchange);1489433888;Select a default view name when a controller did not specify it._Use the request path the leading and trailing slash stripped.;private String getDefaultViewName(ServerWebExchange exchange) {_		String path = this.pathHelper.getLookupPathForRequest(exchange)__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		if (path.endsWith("/")) {_			path = path.substring(0, path.length() - 1)__		}_		return StringUtils.stripFilenameExtension(path)__	};select,a,default,view,name,when,a,controller,did,not,specify,it,use,the,request,path,the,leading,and,trailing,slash,stripped;private,string,get,default,view,name,server,web,exchange,exchange,string,path,this,path,helper,get,lookup,path,for,request,exchange,if,path,starts,with,path,path,substring,1,if,path,ends,with,path,path,substring,0,path,length,1,return,string,utils,strip,filename,extension,path
ViewResolutionResultHandler -> private String getDefaultViewName(ServerWebExchange exchange);1489535791;Select a default view name when a controller did not specify it._Use the request path the leading and trailing slash stripped.;private String getDefaultViewName(ServerWebExchange exchange) {_		String path = this.pathHelper.getLookupPathForRequest(exchange)__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		if (path.endsWith("/")) {_			path = path.substring(0, path.length() - 1)__		}_		return StringUtils.stripFilenameExtension(path)__	};select,a,default,view,name,when,a,controller,did,not,specify,it,use,the,request,path,the,leading,and,trailing,slash,stripped;private,string,get,default,view,name,server,web,exchange,exchange,string,path,this,path,helper,get,lookup,path,for,request,exchange,if,path,starts,with,path,path,substring,1,if,path,ends,with,path,path,substring,0,path,length,1,return,string,utils,strip,filename,extension,path
ViewResolutionResultHandler -> private String getDefaultViewName(ServerWebExchange exchange);1490903325;Select a default view name when a controller did not specify it._Use the request path the leading and trailing slash stripped.;private String getDefaultViewName(ServerWebExchange exchange) {_		String path = this.pathHelper.getLookupPathForRequest(exchange)__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		if (path.endsWith("/")) {_			path = path.substring(0, path.length() - 1)__		}_		return StringUtils.stripFilenameExtension(path)__	};select,a,default,view,name,when,a,controller,did,not,specify,it,use,the,request,path,the,leading,and,trailing,slash,stripped;private,string,get,default,view,name,server,web,exchange,exchange,string,path,this,path,helper,get,lookup,path,for,request,exchange,if,path,starts,with,path,path,substring,1,if,path,ends,with,path,path,substring,0,path,length,1,return,string,utils,strip,filename,extension,path
ViewResolutionResultHandler -> private String getDefaultViewName(ServerWebExchange exchange);1491502908;Select a default view name when a controller did not specify it._Use the request path the leading and trailing slash stripped.;private String getDefaultViewName(ServerWebExchange exchange) {_		String path = this.pathHelper.getLookupPathForRequest(exchange)__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		if (path.endsWith("/")) {_			path = path.substring(0, path.length() - 1)__		}_		return StringUtils.stripFilenameExtension(path)__	};select,a,default,view,name,when,a,controller,did,not,specify,it,use,the,request,path,the,leading,and,trailing,slash,stripped;private,string,get,default,view,name,server,web,exchange,exchange,string,path,this,path,helper,get,lookup,path,for,request,exchange,if,path,starts,with,path,path,substring,1,if,path,ends,with,path,path,substring,0,path,length,1,return,string,utils,strip,filename,extension,path
ViewResolutionResultHandler -> private String getDefaultViewName(ServerWebExchange exchange);1491599707;Select a default view name when a controller did not specify it._Use the request path the leading and trailing slash stripped.;private String getDefaultViewName(ServerWebExchange exchange) {_		String path = this.pathHelper.getLookupPathForRequest(exchange)__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		if (path.endsWith("/")) {_			path = path.substring(0, path.length() - 1)__		}_		return StringUtils.stripFilenameExtension(path)__	};select,a,default,view,name,when,a,controller,did,not,specify,it,use,the,request,path,the,leading,and,trailing,slash,stripped;private,string,get,default,view,name,server,web,exchange,exchange,string,path,this,path,helper,get,lookup,path,for,request,exchange,if,path,starts,with,path,path,substring,1,if,path,ends,with,path,path,substring,0,path,length,1,return,string,utils,strip,filename,extension,path
ViewResolutionResultHandler -> private String getDefaultViewName(ServerWebExchange exchange);1491599707;Select a default view name when a controller did not specify it._Use the request path the leading and trailing slash stripped.;private String getDefaultViewName(ServerWebExchange exchange) {_		String path = this.pathHelper.getLookupPathForRequest(exchange)__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		if (path.endsWith("/")) {_			path = path.substring(0, path.length() - 1)__		}_		return StringUtils.stripFilenameExtension(path)__	};select,a,default,view,name,when,a,controller,did,not,specify,it,use,the,request,path,the,leading,and,trailing,slash,stripped;private,string,get,default,view,name,server,web,exchange,exchange,string,path,this,path,helper,get,lookup,path,for,request,exchange,if,path,starts,with,path,path,substring,1,if,path,ends,with,path,path,substring,0,path,length,1,return,string,utils,strip,filename,extension,path
ViewResolutionResultHandler -> private String getDefaultViewName(ServerWebExchange exchange);1491909547;Select a default view name when a controller did not specify it._Use the request path the leading and trailing slash stripped.;private String getDefaultViewName(ServerWebExchange exchange) {_		String path = this.pathHelper.getLookupPathForRequest(exchange)__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		if (path.endsWith("/")) {_			path = path.substring(0, path.length() - 1)__		}_		return StringUtils.stripFilenameExtension(path)__	};select,a,default,view,name,when,a,controller,did,not,specify,it,use,the,request,path,the,leading,and,trailing,slash,stripped;private,string,get,default,view,name,server,web,exchange,exchange,string,path,this,path,helper,get,lookup,path,for,request,exchange,if,path,starts,with,path,path,substring,1,if,path,ends,with,path,path,substring,0,path,length,1,return,string,utils,strip,filename,extension,path
ViewResolutionResultHandler -> private String getDefaultViewName(ServerWebExchange exchange);1491927184;Select a default view name when a controller did not specify it._Use the request path the leading and trailing slash stripped.;private String getDefaultViewName(ServerWebExchange exchange) {_		String path = this.pathHelper.getLookupPathForRequest(exchange)__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		if (path.endsWith("/")) {_			path = path.substring(0, path.length() - 1)__		}_		return StringUtils.stripFilenameExtension(path)__	};select,a,default,view,name,when,a,controller,did,not,specify,it,use,the,request,path,the,leading,and,trailing,slash,stripped;private,string,get,default,view,name,server,web,exchange,exchange,string,path,this,path,helper,get,lookup,path,for,request,exchange,if,path,starts,with,path,path,substring,1,if,path,ends,with,path,path,substring,0,path,length,1,return,string,utils,strip,filename,extension,path
ViewResolutionResultHandler -> private String getDefaultViewName(ServerWebExchange exchange);1492090594;Select a default view name when a controller did not specify it._Use the request path the leading and trailing slash stripped.;private String getDefaultViewName(ServerWebExchange exchange) {_		String path = this.pathHelper.getLookupPathForRequest(exchange)__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		if (path.endsWith("/")) {_			path = path.substring(0, path.length() - 1)__		}_		return StringUtils.stripFilenameExtension(path)__	};select,a,default,view,name,when,a,controller,did,not,specify,it,use,the,request,path,the,leading,and,trailing,slash,stripped;private,string,get,default,view,name,server,web,exchange,exchange,string,path,this,path,helper,get,lookup,path,for,request,exchange,if,path,starts,with,path,path,substring,1,if,path,ends,with,path,path,substring,0,path,length,1,return,string,utils,strip,filename,extension,path
ViewResolutionResultHandler -> private String getDefaultViewName(ServerWebExchange exchange);1492570843;Select a default view name when a controller did not specify it._Use the request path the leading and trailing slash stripped.;private String getDefaultViewName(ServerWebExchange exchange) {_		String path = this.pathHelper.getLookupPathForRequest(exchange)__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		if (path.endsWith("/")) {_			path = path.substring(0, path.length() - 1)__		}_		return StringUtils.stripFilenameExtension(path)__	};select,a,default,view,name,when,a,controller,did,not,specify,it,use,the,request,path,the,leading,and,trailing,slash,stripped;private,string,get,default,view,name,server,web,exchange,exchange,string,path,this,path,helper,get,lookup,path,for,request,exchange,if,path,starts,with,path,path,substring,1,if,path,ends,with,path,path,substring,0,path,length,1,return,string,utils,strip,filename,extension,path
ViewResolutionResultHandler -> private String getDefaultViewName(ServerWebExchange exchange);1492571447;Select a default view name when a controller did not specify it._Use the request path the leading and trailing slash stripped.;private String getDefaultViewName(ServerWebExchange exchange) {_		String path = this.pathHelper.getLookupPathForRequest(exchange)__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		if (path.endsWith("/")) {_			path = path.substring(0, path.length() - 1)__		}_		return StringUtils.stripFilenameExtension(path)__	};select,a,default,view,name,when,a,controller,did,not,specify,it,use,the,request,path,the,leading,and,trailing,slash,stripped;private,string,get,default,view,name,server,web,exchange,exchange,string,path,this,path,helper,get,lookup,path,for,request,exchange,if,path,starts,with,path,path,substring,1,if,path,ends,with,path,path,substring,0,path,length,1,return,string,utils,strip,filename,extension,path
ViewResolutionResultHandler -> private String getDefaultViewName(ServerWebExchange exchange);1492694378;Select a default view name when a controller did not specify it._Use the request path the leading and trailing slash stripped.;private String getDefaultViewName(ServerWebExchange exchange) {_		String path = this.pathHelper.getLookupPathForRequest(exchange)__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		if (path.endsWith("/")) {_			path = path.substring(0, path.length() - 1)__		}_		return StringUtils.stripFilenameExtension(path)__	};select,a,default,view,name,when,a,controller,did,not,specify,it,use,the,request,path,the,leading,and,trailing,slash,stripped;private,string,get,default,view,name,server,web,exchange,exchange,string,path,this,path,helper,get,lookup,path,for,request,exchange,if,path,starts,with,path,path,substring,1,if,path,ends,with,path,path,substring,0,path,length,1,return,string,utils,strip,filename,extension,path
ViewResolutionResultHandler -> private String getDefaultViewName(ServerWebExchange exchange);1495569915;Select a default view name when a controller did not specify it._Use the request path the leading and trailing slash stripped.;private String getDefaultViewName(ServerWebExchange exchange) {_		String path = this.pathHelper.getLookupPathForRequest(exchange)__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		if (path.endsWith("/")) {_			path = path.substring(0, path.length() - 1)__		}_		return StringUtils.stripFilenameExtension(path)__	};select,a,default,view,name,when,a,controller,did,not,specify,it,use,the,request,path,the,leading,and,trailing,slash,stripped;private,string,get,default,view,name,server,web,exchange,exchange,string,path,this,path,helper,get,lookup,path,for,request,exchange,if,path,starts,with,path,path,substring,1,if,path,ends,with,path,path,substring,0,path,length,1,return,string,utils,strip,filename,extension,path
ViewResolutionResultHandler -> private String getDefaultViewName(ServerWebExchange exchange);1495657865;Select a default view name when a controller did not specify it._Use the request path the leading and trailing slash stripped.;private String getDefaultViewName(ServerWebExchange exchange) {_		String path = this.pathHelper.getLookupPathForRequest(exchange)__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		if (path.endsWith("/")) {_			path = path.substring(0, path.length() - 1)__		}_		return StringUtils.stripFilenameExtension(path)__	};select,a,default,view,name,when,a,controller,did,not,specify,it,use,the,request,path,the,leading,and,trailing,slash,stripped;private,string,get,default,view,name,server,web,exchange,exchange,string,path,this,path,helper,get,lookup,path,for,request,exchange,if,path,starts,with,path,path,substring,1,if,path,ends,with,path,path,substring,0,path,length,1,return,string,utils,strip,filename,extension,path
ViewResolutionResultHandler -> private String getDefaultViewName(ServerWebExchange exchange);1496334664;Select a default view name when a controller did not specify it._Use the request path the leading and trailing slash stripped.;private String getDefaultViewName(ServerWebExchange exchange) {_		String path = exchange.<LookupPath>getAttribute(LookupPath.LOOKUP_PATH_ATTRIBUTE).get().getPath()__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		if (path.endsWith("/")) {_			path = path.substring(0, path.length() - 1)__		}_		return StringUtils.stripFilenameExtension(path)__	};select,a,default,view,name,when,a,controller,did,not,specify,it,use,the,request,path,the,leading,and,trailing,slash,stripped;private,string,get,default,view,name,server,web,exchange,exchange,string,path,exchange,lookup,path,get,attribute,lookup,path,get,get,path,if,path,starts,with,path,path,substring,1,if,path,ends,with,path,path,substring,0,path,length,1,return,string,utils,strip,filename,extension,path
ViewResolutionResultHandler -> private String getDefaultViewName(ServerWebExchange exchange);1496429194;Select a default view name when a controller did not specify it._Use the request path the leading and trailing slash stripped.;private String getDefaultViewName(ServerWebExchange exchange) {_		String path = exchange.<LookupPath>getAttribute(LookupPath.LOOKUP_PATH_ATTRIBUTE)_				.map(LookupPath::getPath)_				.orElseThrow(() -> new IllegalStateException("No LookupPath attribute."))__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		if (path.endsWith("/")) {_			path = path.substring(0, path.length() - 1)__		}_		return StringUtils.stripFilenameExtension(path)__	};select,a,default,view,name,when,a,controller,did,not,specify,it,use,the,request,path,the,leading,and,trailing,slash,stripped;private,string,get,default,view,name,server,web,exchange,exchange,string,path,exchange,lookup,path,get,attribute,lookup,path,map,lookup,path,get,path,or,else,throw,new,illegal,state,exception,no,lookup,path,attribute,if,path,starts,with,path,path,substring,1,if,path,ends,with,path,path,substring,0,path,length,1,return,string,utils,strip,filename,extension,path
ViewResolutionResultHandler -> private String getDefaultViewName(ServerWebExchange exchange);1496430942;Select a default view name when a controller did not specify it._Use the request path the leading and trailing slash stripped.;private String getDefaultViewName(ServerWebExchange exchange) {_		String path = LookupPath.getCurrent(exchange).getPath()__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		if (path.endsWith("/")) {_			path = path.substring(0, path.length() - 1)__		}_		return StringUtils.stripFilenameExtension(path)__	};select,a,default,view,name,when,a,controller,did,not,specify,it,use,the,request,path,the,leading,and,trailing,slash,stripped;private,string,get,default,view,name,server,web,exchange,exchange,string,path,lookup,path,get,current,exchange,get,path,if,path,starts,with,path,path,substring,1,if,path,ends,with,path,path,substring,0,path,length,1,return,string,utils,strip,filename,extension,path
ViewResolutionResultHandler -> private String getDefaultViewName(ServerWebExchange exchange);1496837955;Select a default view name when a controller did not specify it._Use the request path the leading and trailing slash stripped.;private String getDefaultViewName(ServerWebExchange exchange) {_		String path = LookupPath.getCurrent(exchange).getPath()__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		if (path.endsWith("/")) {_			path = path.substring(0, path.length() - 1)__		}_		return StringUtils.stripFilenameExtension(path)__	};select,a,default,view,name,when,a,controller,did,not,specify,it,use,the,request,path,the,leading,and,trailing,slash,stripped;private,string,get,default,view,name,server,web,exchange,exchange,string,path,lookup,path,get,current,exchange,get,path,if,path,starts,with,path,path,substring,1,if,path,ends,with,path,path,substring,0,path,length,1,return,string,utils,strip,filename,extension,path
ViewResolutionResultHandler -> private String getDefaultViewName(ServerWebExchange exchange);1497039338;Select a default view name when a controller did not specify it._Use the request path the leading and trailing slash stripped.;private String getDefaultViewName(ServerWebExchange exchange) {_		String path = exchange.getRequest().getPathWithinApplication()__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		if (path.endsWith("/")) {_			path = path.substring(0, path.length() - 1)__		}_		return StringUtils.stripFilenameExtension(path)__	};select,a,default,view,name,when,a,controller,did,not,specify,it,use,the,request,path,the,leading,and,trailing,slash,stripped;private,string,get,default,view,name,server,web,exchange,exchange,string,path,exchange,get,request,get,path,within,application,if,path,starts,with,path,path,substring,1,if,path,ends,with,path,path,substring,0,path,length,1,return,string,utils,strip,filename,extension,path
ViewResolutionResultHandler -> private String getDefaultViewName(ServerWebExchange exchange);1497232764;Select a default view name when a controller did not specify it._Use the request path the leading and trailing slash stripped.;private String getDefaultViewName(ServerWebExchange exchange) {_		String path = exchange.getRequest().getPath().pathWithinApplication().value()__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		if (path.endsWith("/")) {_			path = path.substring(0, path.length() - 1)__		}_		return StringUtils.stripFilenameExtension(path)__	};select,a,default,view,name,when,a,controller,did,not,specify,it,use,the,request,path,the,leading,and,trailing,slash,stripped;private,string,get,default,view,name,server,web,exchange,exchange,string,path,exchange,get,request,get,path,path,within,application,value,if,path,starts,with,path,path,substring,1,if,path,ends,with,path,path,substring,0,path,length,1,return,string,utils,strip,filename,extension,path
ViewResolutionResultHandler -> private String getDefaultViewName(ServerWebExchange exchange);1497359418;Select a default view name when a controller did not specify it._Use the request path the leading and trailing slash stripped.;private String getDefaultViewName(ServerWebExchange exchange) {_		String path = exchange.getRequest().getPath().pathWithinApplication().value()__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		if (path.endsWith("/")) {_			path = path.substring(0, path.length() - 1)__		}_		return StringUtils.stripFilenameExtension(path)__	};select,a,default,view,name,when,a,controller,did,not,specify,it,use,the,request,path,the,leading,and,trailing,slash,stripped;private,string,get,default,view,name,server,web,exchange,exchange,string,path,exchange,get,request,get,path,path,within,application,value,if,path,starts,with,path,path,substring,1,if,path,ends,with,path,path,substring,0,path,length,1,return,string,utils,strip,filename,extension,path
ViewResolutionResultHandler -> private String getDefaultViewName(ServerWebExchange exchange);1497974922;Select a default view name when a controller did not specify it._Use the request path the leading and trailing slash stripped.;private String getDefaultViewName(ServerWebExchange exchange) {_		String path = exchange.getRequest().getPath().pathWithinApplication().value()__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		if (path.endsWith("/")) {_			path = path.substring(0, path.length() - 1)__		}_		return StringUtils.stripFilenameExtension(path)__	};select,a,default,view,name,when,a,controller,did,not,specify,it,use,the,request,path,the,leading,and,trailing,slash,stripped;private,string,get,default,view,name,server,web,exchange,exchange,string,path,exchange,get,request,get,path,path,within,application,value,if,path,starts,with,path,path,substring,1,if,path,ends,with,path,path,substring,0,path,length,1,return,string,utils,strip,filename,extension,path
ViewResolutionResultHandler -> private String getDefaultViewName(ServerWebExchange exchange);1511215342;Select a default view name when a controller did not specify it._Use the request path the leading and trailing slash stripped.;private String getDefaultViewName(ServerWebExchange exchange) {_		String path = exchange.getRequest().getPath().pathWithinApplication().value()__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		if (path.endsWith("/")) {_			path = path.substring(0, path.length() - 1)__		}_		return StringUtils.stripFilenameExtension(path)__	};select,a,default,view,name,when,a,controller,did,not,specify,it,use,the,request,path,the,leading,and,trailing,slash,stripped;private,string,get,default,view,name,server,web,exchange,exchange,string,path,exchange,get,request,get,path,path,within,application,value,if,path,starts,with,path,path,substring,1,if,path,ends,with,path,path,substring,0,path,length,1,return,string,utils,strip,filename,extension,path
ViewResolutionResultHandler -> private String getDefaultViewName(ServerWebExchange exchange);1517022854;Select a default view name when a controller did not specify it._Use the request path the leading and trailing slash stripped.;private String getDefaultViewName(ServerWebExchange exchange) {_		String path = exchange.getRequest().getPath().pathWithinApplication().value()__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		if (path.endsWith("/")) {_			path = path.substring(0, path.length() - 1)__		}_		return StringUtils.stripFilenameExtension(path)__	};select,a,default,view,name,when,a,controller,did,not,specify,it,use,the,request,path,the,leading,and,trailing,slash,stripped;private,string,get,default,view,name,server,web,exchange,exchange,string,path,exchange,get,request,get,path,path,within,application,value,if,path,starts,with,path,path,substring,1,if,path,ends,with,path,path,substring,0,path,length,1,return,string,utils,strip,filename,extension,path
ViewResolutionResultHandler -> private String getDefaultViewName(ServerWebExchange exchange);1532520919;Select a default view name when a controller did not specify it._Use the request path the leading and trailing slash stripped.;private String getDefaultViewName(ServerWebExchange exchange) {_		String path = exchange.getRequest().getPath().pathWithinApplication().value()__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		if (path.endsWith("/")) {_			path = path.substring(0, path.length() - 1)__		}_		return StringUtils.stripFilenameExtension(path)__	};select,a,default,view,name,when,a,controller,did,not,specify,it,use,the,request,path,the,leading,and,trailing,slash,stripped;private,string,get,default,view,name,server,web,exchange,exchange,string,path,exchange,get,request,get,path,path,within,application,value,if,path,starts,with,path,path,substring,1,if,path,ends,with,path,path,substring,0,path,length,1,return,string,utils,strip,filename,extension,path
ViewResolutionResultHandler -> private String getDefaultViewName(ServerWebExchange exchange);1533034998;Select a default view name when a controller did not specify it._Use the request path the leading and trailing slash stripped.;private String getDefaultViewName(ServerWebExchange exchange) {_		String path = exchange.getRequest().getPath().pathWithinApplication().value()__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		if (path.endsWith("/")) {_			path = path.substring(0, path.length() - 1)__		}_		return StringUtils.stripFilenameExtension(path)__	};select,a,default,view,name,when,a,controller,did,not,specify,it,use,the,request,path,the,leading,and,trailing,slash,stripped;private,string,get,default,view,name,server,web,exchange,exchange,string,path,exchange,get,request,get,path,path,within,application,value,if,path,starts,with,path,path,substring,1,if,path,ends,with,path,path,substring,0,path,length,1,return,string,utils,strip,filename,extension,path
ViewResolutionResultHandler -> private String getDefaultViewName(ServerWebExchange exchange);1542050977;Select a default view name when a controller did not specify it._Use the request path the leading and trailing slash stripped.;private String getDefaultViewName(ServerWebExchange exchange) {_		String path = exchange.getRequest().getPath().pathWithinApplication().value()__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		if (path.endsWith("/")) {_			path = path.substring(0, path.length() - 1)__		}_		return StringUtils.stripFilenameExtension(path)__	};select,a,default,view,name,when,a,controller,did,not,specify,it,use,the,request,path,the,leading,and,trailing,slash,stripped;private,string,get,default,view,name,server,web,exchange,exchange,string,path,exchange,get,request,get,path,path,within,application,value,if,path,starts,with,path,path,substring,1,if,path,ends,with,path,path,substring,0,path,length,1,return,string,utils,strip,filename,extension,path
