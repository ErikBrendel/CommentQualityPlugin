# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractNamedValueArgumentResolver -> @Nullable 	private Object handleNullValue(String name, @Nullable Object value, Class<?> paramType);1496837955;A {@code null} results in a {@code false} value for {@code boolean}s or_an exception for other primitives.;@Nullable_	private Object handleNullValue(String name, @Nullable Object value, Class<?> paramType) {_		if (value == null) {_			if (Boolean.TYPE.equals(paramType)) {_				return Boolean.FALSE__			}_			else if (paramType.isPrimitive()) {_				throw new IllegalStateException("Optional " + paramType.getSimpleName() +_						" parameter '" + name + "' is present but cannot be translated into a" +_						" null value due to being declared as a primitive type. " +_						"Consider declaring it as object wrapper for the corresponding primitive type.")__			}_		}_		return value__	};a,code,null,results,in,a,code,false,value,for,code,boolean,s,or,an,exception,for,other,primitives;nullable,private,object,handle,null,value,string,name,nullable,object,value,class,param,type,if,value,null,if,boolean,type,equals,param,type,return,boolean,false,else,if,param,type,is,primitive,throw,new,illegal,state,exception,optional,param,type,get,simple,name,parameter,name,is,present,but,cannot,be,translated,into,a,null,value,due,to,being,declared,as,a,primitive,type,consider,declaring,it,as,object,wrapper,for,the,corresponding,primitive,type,return,value
AbstractNamedValueArgumentResolver -> @Nullable 	private Object handleNullValue(String name, @Nullable Object value, Class<?> paramType);1498780456;A {@code null} results in a {@code false} value for {@code boolean}s or_an exception for other primitives.;@Nullable_	private Object handleNullValue(String name, @Nullable Object value, Class<?> paramType) {_		if (value == null) {_			if (Boolean.TYPE.equals(paramType)) {_				return Boolean.FALSE__			}_			else if (paramType.isPrimitive()) {_				throw new IllegalStateException("Optional " + paramType.getSimpleName() +_						" parameter '" + name + "' is present but cannot be translated into a" +_						" null value due to being declared as a primitive type. " +_						"Consider declaring it as object wrapper for the corresponding primitive type.")__			}_		}_		return value__	};a,code,null,results,in,a,code,false,value,for,code,boolean,s,or,an,exception,for,other,primitives;nullable,private,object,handle,null,value,string,name,nullable,object,value,class,param,type,if,value,null,if,boolean,type,equals,param,type,return,boolean,false,else,if,param,type,is,primitive,throw,new,illegal,state,exception,optional,param,type,get,simple,name,parameter,name,is,present,but,cannot,be,translated,into,a,null,value,due,to,being,declared,as,a,primitive,type,consider,declaring,it,as,object,wrapper,for,the,corresponding,primitive,type,return,value
AbstractNamedValueArgumentResolver -> @Nullable 	private Object handleNullValue(String name, @Nullable Object value, Class<?> paramType);1508532146;A {@code null} results in a {@code false} value for {@code boolean}s or_an exception for other primitives.;@Nullable_	private Object handleNullValue(String name, @Nullable Object value, Class<?> paramType) {_		if (value == null) {_			if (Boolean.TYPE.equals(paramType)) {_				return Boolean.FALSE__			}_			else if (paramType.isPrimitive()) {_				throw new IllegalStateException("Optional " + paramType.getSimpleName() +_						" parameter '" + name + "' is present but cannot be translated into a" +_						" null value due to being declared as a primitive type. " +_						"Consider declaring it as object wrapper for the corresponding primitive type.")__			}_		}_		return value__	};a,code,null,results,in,a,code,false,value,for,code,boolean,s,or,an,exception,for,other,primitives;nullable,private,object,handle,null,value,string,name,nullable,object,value,class,param,type,if,value,null,if,boolean,type,equals,param,type,return,boolean,false,else,if,param,type,is,primitive,throw,new,illegal,state,exception,optional,param,type,get,simple,name,parameter,name,is,present,but,cannot,be,translated,into,a,null,value,due,to,being,declared,as,a,primitive,type,consider,declaring,it,as,object,wrapper,for,the,corresponding,primitive,type,return,value
AbstractNamedValueArgumentResolver -> @Nullable 	private Object handleNullValue(String name, @Nullable Object value, Class<?> paramType);1530174524;A {@code null} results in a {@code false} value for {@code boolean}s or_an exception for other primitives.;@Nullable_	private Object handleNullValue(String name, @Nullable Object value, Class<?> paramType) {_		if (value == null) {_			if (Boolean.TYPE.equals(paramType)) {_				return Boolean.FALSE__			}_			else if (paramType.isPrimitive()) {_				throw new IllegalStateException("Optional " + paramType.getSimpleName() +_						" parameter '" + name + "' is present but cannot be translated into a" +_						" null value due to being declared as a primitive type. " +_						"Consider declaring it as object wrapper for the corresponding primitive type.")__			}_		}_		return value__	};a,code,null,results,in,a,code,false,value,for,code,boolean,s,or,an,exception,for,other,primitives;nullable,private,object,handle,null,value,string,name,nullable,object,value,class,param,type,if,value,null,if,boolean,type,equals,param,type,return,boolean,false,else,if,param,type,is,primitive,throw,new,illegal,state,exception,optional,param,type,get,simple,name,parameter,name,is,present,but,cannot,be,translated,into,a,null,value,due,to,being,declared,as,a,primitive,type,consider,declaring,it,as,object,wrapper,for,the,corresponding,primitive,type,return,value
AbstractNamedValueArgumentResolver -> @Nullable 	private Object handleNullValue(String name, @Nullable Object value, Class<?> paramType);1531917703;A {@code null} results in a {@code false} value for {@code boolean}s or_an exception for other primitives.;@Nullable_	private Object handleNullValue(String name, @Nullable Object value, Class<?> paramType) {_		if (value == null) {_			if (Boolean.TYPE.equals(paramType)) {_				return Boolean.FALSE__			}_			else if (paramType.isPrimitive()) {_				throw new IllegalStateException("Optional " + paramType.getSimpleName() +_						" parameter '" + name + "' is present but cannot be translated into a" +_						" null value due to being declared as a primitive type. " +_						"Consider declaring it as object wrapper for the corresponding primitive type.")__			}_		}_		return value__	};a,code,null,results,in,a,code,false,value,for,code,boolean,s,or,an,exception,for,other,primitives;nullable,private,object,handle,null,value,string,name,nullable,object,value,class,param,type,if,value,null,if,boolean,type,equals,param,type,return,boolean,false,else,if,param,type,is,primitive,throw,new,illegal,state,exception,optional,param,type,get,simple,name,parameter,name,is,present,but,cannot,be,translated,into,a,null,value,due,to,being,declared,as,a,primitive,type,consider,declaring,it,as,object,wrapper,for,the,corresponding,primitive,type,return,value
AbstractNamedValueArgumentResolver -> @Nullable 	private Object handleNullValue(String name, @Nullable Object value, Class<?> paramType);1538753959;A {@code null} results in a {@code false} value for {@code boolean}s or_an exception for other primitives.;@Nullable_	private Object handleNullValue(String name, @Nullable Object value, Class<?> paramType) {_		if (value == null) {_			if (Boolean.TYPE.equals(paramType)) {_				return Boolean.FALSE__			}_			else if (paramType.isPrimitive()) {_				throw new IllegalStateException("Optional " + paramType.getSimpleName() +_						" parameter '" + name + "' is present but cannot be translated into a" +_						" null value due to being declared as a primitive type. " +_						"Consider declaring it as object wrapper for the corresponding primitive type.")__			}_		}_		return value__	};a,code,null,results,in,a,code,false,value,for,code,boolean,s,or,an,exception,for,other,primitives;nullable,private,object,handle,null,value,string,name,nullable,object,value,class,param,type,if,value,null,if,boolean,type,equals,param,type,return,boolean,false,else,if,param,type,is,primitive,throw,new,illegal,state,exception,optional,param,type,get,simple,name,parameter,name,is,present,but,cannot,be,translated,into,a,null,value,due,to,being,declared,as,a,primitive,type,consider,declaring,it,as,object,wrapper,for,the,corresponding,primitive,type,return,value
AbstractNamedValueArgumentResolver -> private NamedValueInfo getNamedValueInfo(MethodParameter parameter);1485986572;Obtain the named value for the given method parameter.;private NamedValueInfo getNamedValueInfo(MethodParameter parameter) {_		NamedValueInfo namedValueInfo = this.namedValueInfoCache.get(parameter)__		if (namedValueInfo == null) {_			namedValueInfo = createNamedValueInfo(parameter)__			namedValueInfo = updateNamedValueInfo(parameter, namedValueInfo)__			this.namedValueInfoCache.put(parameter, namedValueInfo)__		}_		return namedValueInfo__	};obtain,the,named,value,for,the,given,method,parameter;private,named,value,info,get,named,value,info,method,parameter,parameter,named,value,info,named,value,info,this,named,value,info,cache,get,parameter,if,named,value,info,null,named,value,info,create,named,value,info,parameter,named,value,info,update,named,value,info,parameter,named,value,info,this,named,value,info,cache,put,parameter,named,value,info,return,named,value,info
AbstractNamedValueArgumentResolver -> private NamedValueInfo getNamedValueInfo(MethodParameter parameter);1487760984;Obtain the named value for the given method parameter.;private NamedValueInfo getNamedValueInfo(MethodParameter parameter) {_		NamedValueInfo namedValueInfo = this.namedValueInfoCache.get(parameter)__		if (namedValueInfo == null) {_			namedValueInfo = createNamedValueInfo(parameter)__			namedValueInfo = updateNamedValueInfo(parameter, namedValueInfo)__			this.namedValueInfoCache.put(parameter, namedValueInfo)__		}_		return namedValueInfo__	};obtain,the,named,value,for,the,given,method,parameter;private,named,value,info,get,named,value,info,method,parameter,parameter,named,value,info,named,value,info,this,named,value,info,cache,get,parameter,if,named,value,info,null,named,value,info,create,named,value,info,parameter,named,value,info,update,named,value,info,parameter,named,value,info,this,named,value,info,cache,put,parameter,named,value,info,return,named,value,info
AbstractNamedValueArgumentResolver -> private NamedValueInfo getNamedValueInfo(MethodParameter parameter);1489433860;Obtain the named value for the given method parameter.;private NamedValueInfo getNamedValueInfo(MethodParameter parameter) {_		NamedValueInfo namedValueInfo = this.namedValueInfoCache.get(parameter)__		if (namedValueInfo == null) {_			namedValueInfo = createNamedValueInfo(parameter)__			namedValueInfo = updateNamedValueInfo(parameter, namedValueInfo)__			this.namedValueInfoCache.put(parameter, namedValueInfo)__		}_		return namedValueInfo__	};obtain,the,named,value,for,the,given,method,parameter;private,named,value,info,get,named,value,info,method,parameter,parameter,named,value,info,named,value,info,this,named,value,info,cache,get,parameter,if,named,value,info,null,named,value,info,create,named,value,info,parameter,named,value,info,update,named,value,info,parameter,named,value,info,this,named,value,info,cache,put,parameter,named,value,info,return,named,value,info
AbstractNamedValueArgumentResolver -> private NamedValueInfo getNamedValueInfo(MethodParameter parameter);1489535791;Obtain the named value for the given method parameter.;private NamedValueInfo getNamedValueInfo(MethodParameter parameter) {_		NamedValueInfo namedValueInfo = this.namedValueInfoCache.get(parameter)__		if (namedValueInfo == null) {_			namedValueInfo = createNamedValueInfo(parameter)__			namedValueInfo = updateNamedValueInfo(parameter, namedValueInfo)__			this.namedValueInfoCache.put(parameter, namedValueInfo)__		}_		return namedValueInfo__	};obtain,the,named,value,for,the,given,method,parameter;private,named,value,info,get,named,value,info,method,parameter,parameter,named,value,info,named,value,info,this,named,value,info,cache,get,parameter,if,named,value,info,null,named,value,info,create,named,value,info,parameter,named,value,info,update,named,value,info,parameter,named,value,info,this,named,value,info,cache,put,parameter,named,value,info,return,named,value,info
AbstractNamedValueArgumentResolver -> private NamedValueInfo getNamedValueInfo(MethodParameter parameter);1490354145;Obtain the named value for the given method parameter.;private NamedValueInfo getNamedValueInfo(MethodParameter parameter) {_		NamedValueInfo namedValueInfo = this.namedValueInfoCache.get(parameter)__		if (namedValueInfo == null) {_			namedValueInfo = createNamedValueInfo(parameter)__			namedValueInfo = updateNamedValueInfo(parameter, namedValueInfo)__			this.namedValueInfoCache.put(parameter, namedValueInfo)__		}_		return namedValueInfo__	};obtain,the,named,value,for,the,given,method,parameter;private,named,value,info,get,named,value,info,method,parameter,parameter,named,value,info,named,value,info,this,named,value,info,cache,get,parameter,if,named,value,info,null,named,value,info,create,named,value,info,parameter,named,value,info,update,named,value,info,parameter,named,value,info,this,named,value,info,cache,put,parameter,named,value,info,return,named,value,info
AbstractNamedValueArgumentResolver -> private NamedValueInfo getNamedValueInfo(MethodParameter parameter);1492090594;Obtain the named value for the given method parameter.;private NamedValueInfo getNamedValueInfo(MethodParameter parameter) {_		NamedValueInfo namedValueInfo = this.namedValueInfoCache.get(parameter)__		if (namedValueInfo == null) {_			namedValueInfo = createNamedValueInfo(parameter)__			namedValueInfo = updateNamedValueInfo(parameter, namedValueInfo)__			this.namedValueInfoCache.put(parameter, namedValueInfo)__		}_		return namedValueInfo__	};obtain,the,named,value,for,the,given,method,parameter;private,named,value,info,get,named,value,info,method,parameter,parameter,named,value,info,named,value,info,this,named,value,info,cache,get,parameter,if,named,value,info,null,named,value,info,create,named,value,info,parameter,named,value,info,update,named,value,info,parameter,named,value,info,this,named,value,info,cache,put,parameter,named,value,info,return,named,value,info
AbstractNamedValueArgumentResolver -> private NamedValueInfo getNamedValueInfo(MethodParameter parameter);1495868221;Obtain the named value for the given method parameter.;private NamedValueInfo getNamedValueInfo(MethodParameter parameter) {_		NamedValueInfo namedValueInfo = this.namedValueInfoCache.get(parameter)__		if (namedValueInfo == null) {_			namedValueInfo = createNamedValueInfo(parameter)__			namedValueInfo = updateNamedValueInfo(parameter, namedValueInfo)__			this.namedValueInfoCache.put(parameter, namedValueInfo)__		}_		return namedValueInfo__	};obtain,the,named,value,for,the,given,method,parameter;private,named,value,info,get,named,value,info,method,parameter,parameter,named,value,info,named,value,info,this,named,value,info,cache,get,parameter,if,named,value,info,null,named,value,info,create,named,value,info,parameter,named,value,info,update,named,value,info,parameter,named,value,info,this,named,value,info,cache,put,parameter,named,value,info,return,named,value,info
AbstractNamedValueArgumentResolver -> private NamedValueInfo getNamedValueInfo(MethodParameter parameter);1496837955;Obtain the named value for the given method parameter.;private NamedValueInfo getNamedValueInfo(MethodParameter parameter) {_		NamedValueInfo namedValueInfo = this.namedValueInfoCache.get(parameter)__		if (namedValueInfo == null) {_			namedValueInfo = createNamedValueInfo(parameter)__			namedValueInfo = updateNamedValueInfo(parameter, namedValueInfo)__			this.namedValueInfoCache.put(parameter, namedValueInfo)__		}_		return namedValueInfo__	};obtain,the,named,value,for,the,given,method,parameter;private,named,value,info,get,named,value,info,method,parameter,parameter,named,value,info,named,value,info,this,named,value,info,cache,get,parameter,if,named,value,info,null,named,value,info,create,named,value,info,parameter,named,value,info,update,named,value,info,parameter,named,value,info,this,named,value,info,cache,put,parameter,named,value,info,return,named,value,info
AbstractNamedValueArgumentResolver -> private NamedValueInfo getNamedValueInfo(MethodParameter parameter);1498780456;Obtain the named value for the given method parameter.;private NamedValueInfo getNamedValueInfo(MethodParameter parameter) {_		NamedValueInfo namedValueInfo = this.namedValueInfoCache.get(parameter)__		if (namedValueInfo == null) {_			namedValueInfo = createNamedValueInfo(parameter)__			namedValueInfo = updateNamedValueInfo(parameter, namedValueInfo)__			this.namedValueInfoCache.put(parameter, namedValueInfo)__		}_		return namedValueInfo__	};obtain,the,named,value,for,the,given,method,parameter;private,named,value,info,get,named,value,info,method,parameter,parameter,named,value,info,named,value,info,this,named,value,info,cache,get,parameter,if,named,value,info,null,named,value,info,create,named,value,info,parameter,named,value,info,update,named,value,info,parameter,named,value,info,this,named,value,info,cache,put,parameter,named,value,info,return,named,value,info
AbstractNamedValueArgumentResolver -> private NamedValueInfo getNamedValueInfo(MethodParameter parameter);1508532146;Obtain the named value for the given method parameter.;private NamedValueInfo getNamedValueInfo(MethodParameter parameter) {_		NamedValueInfo namedValueInfo = this.namedValueInfoCache.get(parameter)__		if (namedValueInfo == null) {_			namedValueInfo = createNamedValueInfo(parameter)__			namedValueInfo = updateNamedValueInfo(parameter, namedValueInfo)__			this.namedValueInfoCache.put(parameter, namedValueInfo)__		}_		return namedValueInfo__	};obtain,the,named,value,for,the,given,method,parameter;private,named,value,info,get,named,value,info,method,parameter,parameter,named,value,info,named,value,info,this,named,value,info,cache,get,parameter,if,named,value,info,null,named,value,info,create,named,value,info,parameter,named,value,info,update,named,value,info,parameter,named,value,info,this,named,value,info,cache,put,parameter,named,value,info,return,named,value,info
AbstractNamedValueArgumentResolver -> private NamedValueInfo getNamedValueInfo(MethodParameter parameter);1530174524;Obtain the named value for the given method parameter.;private NamedValueInfo getNamedValueInfo(MethodParameter parameter) {_		NamedValueInfo namedValueInfo = this.namedValueInfoCache.get(parameter)__		if (namedValueInfo == null) {_			namedValueInfo = createNamedValueInfo(parameter)__			namedValueInfo = updateNamedValueInfo(parameter, namedValueInfo)__			this.namedValueInfoCache.put(parameter, namedValueInfo)__		}_		return namedValueInfo__	};obtain,the,named,value,for,the,given,method,parameter;private,named,value,info,get,named,value,info,method,parameter,parameter,named,value,info,named,value,info,this,named,value,info,cache,get,parameter,if,named,value,info,null,named,value,info,create,named,value,info,parameter,named,value,info,update,named,value,info,parameter,named,value,info,this,named,value,info,cache,put,parameter,named,value,info,return,named,value,info
AbstractNamedValueArgumentResolver -> private NamedValueInfo getNamedValueInfo(MethodParameter parameter);1531917703;Obtain the named value for the given method parameter.;private NamedValueInfo getNamedValueInfo(MethodParameter parameter) {_		NamedValueInfo namedValueInfo = this.namedValueInfoCache.get(parameter)__		if (namedValueInfo == null) {_			namedValueInfo = createNamedValueInfo(parameter)__			namedValueInfo = updateNamedValueInfo(parameter, namedValueInfo)__			this.namedValueInfoCache.put(parameter, namedValueInfo)__		}_		return namedValueInfo__	};obtain,the,named,value,for,the,given,method,parameter;private,named,value,info,get,named,value,info,method,parameter,parameter,named,value,info,named,value,info,this,named,value,info,cache,get,parameter,if,named,value,info,null,named,value,info,create,named,value,info,parameter,named,value,info,update,named,value,info,parameter,named,value,info,this,named,value,info,cache,put,parameter,named,value,info,return,named,value,info
AbstractNamedValueArgumentResolver -> private NamedValueInfo getNamedValueInfo(MethodParameter parameter);1538753959;Obtain the named value for the given method parameter.;private NamedValueInfo getNamedValueInfo(MethodParameter parameter) {_		NamedValueInfo namedValueInfo = this.namedValueInfoCache.get(parameter)__		if (namedValueInfo == null) {_			namedValueInfo = createNamedValueInfo(parameter)__			namedValueInfo = updateNamedValueInfo(parameter, namedValueInfo)__			this.namedValueInfoCache.put(parameter, namedValueInfo)__		}_		return namedValueInfo__	};obtain,the,named,value,for,the,given,method,parameter;private,named,value,info,get,named,value,info,method,parameter,parameter,named,value,info,named,value,info,this,named,value,info,cache,get,parameter,if,named,value,info,null,named,value,info,create,named,value,info,parameter,named,value,info,update,named,value,info,parameter,named,value,info,this,named,value,info,cache,put,parameter,named,value,info,return,named,value,info
AbstractNamedValueArgumentResolver -> public AbstractNamedValueArgumentResolver(ConfigurableBeanFactory beanFactory);1485986572;@param beanFactory a bean factory to use for resolving ${...} placeholder_and #{...} SpEL expressions in default values, or {@code null} if default_values are not expected to contain expressions;public AbstractNamedValueArgumentResolver(ConfigurableBeanFactory beanFactory) {_		this.configurableBeanFactory = beanFactory__		this.expressionContext = (beanFactory != null ? new BeanExpressionContext(beanFactory, null) : null)__	};param,bean,factory,a,bean,factory,to,use,for,resolving,placeholder,and,sp,el,expressions,in,default,values,or,code,null,if,default,values,are,not,expected,to,contain,expressions;public,abstract,named,value,argument,resolver,configurable,bean,factory,bean,factory,this,configurable,bean,factory,bean,factory,this,expression,context,bean,factory,null,new,bean,expression,context,bean,factory,null,null
AbstractNamedValueArgumentResolver -> public AbstractNamedValueArgumentResolver(ConfigurableBeanFactory beanFactory);1487760984;@param beanFactory a bean factory to use for resolving ${...} placeholder_and #{...} SpEL expressions in default values, or {@code null} if default_values are not expected to contain expressions;public AbstractNamedValueArgumentResolver(ConfigurableBeanFactory beanFactory) {_		this.configurableBeanFactory = beanFactory__		this.expressionContext = (beanFactory != null ? new BeanExpressionContext(beanFactory, null) : null)__	};param,bean,factory,a,bean,factory,to,use,for,resolving,placeholder,and,sp,el,expressions,in,default,values,or,code,null,if,default,values,are,not,expected,to,contain,expressions;public,abstract,named,value,argument,resolver,configurable,bean,factory,bean,factory,this,configurable,bean,factory,bean,factory,this,expression,context,bean,factory,null,new,bean,expression,context,bean,factory,null,null
AbstractNamedValueArgumentResolver -> public AbstractNamedValueArgumentResolver(ConfigurableBeanFactory beanFactory);1489433860;@param beanFactory a bean factory to use for resolving ${...} placeholder_and #{...} SpEL expressions in default values, or {@code null} if default_values are not expected to contain expressions;public AbstractNamedValueArgumentResolver(ConfigurableBeanFactory beanFactory) {_		this.configurableBeanFactory = beanFactory__		this.expressionContext = (beanFactory != null ? new BeanExpressionContext(beanFactory, null) : null)__	};param,bean,factory,a,bean,factory,to,use,for,resolving,placeholder,and,sp,el,expressions,in,default,values,or,code,null,if,default,values,are,not,expected,to,contain,expressions;public,abstract,named,value,argument,resolver,configurable,bean,factory,bean,factory,this,configurable,bean,factory,bean,factory,this,expression,context,bean,factory,null,new,bean,expression,context,bean,factory,null,null
AbstractNamedValueArgumentResolver -> protected abstract NamedValueInfo createNamedValueInfo(MethodParameter parameter)_;1485986572;Create the {@link NamedValueInfo} object for the given method parameter._Implementations typically retrieve the method annotation by means of_{@link MethodParameter#getParameterAnnotation(Class)}._@param parameter the method parameter_@return the named value information;protected abstract NamedValueInfo createNamedValueInfo(MethodParameter parameter)_;create,the,link,named,value,info,object,for,the,given,method,parameter,implementations,typically,retrieve,the,method,annotation,by,means,of,link,method,parameter,get,parameter,annotation,class,param,parameter,the,method,parameter,return,the,named,value,information;protected,abstract,named,value,info,create,named,value,info,method,parameter,parameter
AbstractNamedValueArgumentResolver -> protected abstract NamedValueInfo createNamedValueInfo(MethodParameter parameter)_;1487760984;Create the {@link NamedValueInfo} object for the given method parameter._Implementations typically retrieve the method annotation by means of_{@link MethodParameter#getParameterAnnotation(Class)}._@param parameter the method parameter_@return the named value information;protected abstract NamedValueInfo createNamedValueInfo(MethodParameter parameter)_;create,the,link,named,value,info,object,for,the,given,method,parameter,implementations,typically,retrieve,the,method,annotation,by,means,of,link,method,parameter,get,parameter,annotation,class,param,parameter,the,method,parameter,return,the,named,value,information;protected,abstract,named,value,info,create,named,value,info,method,parameter,parameter
AbstractNamedValueArgumentResolver -> protected abstract NamedValueInfo createNamedValueInfo(MethodParameter parameter)_;1489433860;Create the {@link NamedValueInfo} object for the given method parameter._Implementations typically retrieve the method annotation by means of_{@link MethodParameter#getParameterAnnotation(Class)}._@param parameter the method parameter_@return the named value information;protected abstract NamedValueInfo createNamedValueInfo(MethodParameter parameter)_;create,the,link,named,value,info,object,for,the,given,method,parameter,implementations,typically,retrieve,the,method,annotation,by,means,of,link,method,parameter,get,parameter,annotation,class,param,parameter,the,method,parameter,return,the,named,value,information;protected,abstract,named,value,info,create,named,value,info,method,parameter,parameter
AbstractNamedValueArgumentResolver -> protected abstract NamedValueInfo createNamedValueInfo(MethodParameter parameter)_;1489535791;Create the {@link NamedValueInfo} object for the given method parameter._Implementations typically retrieve the method annotation by means of_{@link MethodParameter#getParameterAnnotation(Class)}._@param parameter the method parameter_@return the named value information;protected abstract NamedValueInfo createNamedValueInfo(MethodParameter parameter)_;create,the,link,named,value,info,object,for,the,given,method,parameter,implementations,typically,retrieve,the,method,annotation,by,means,of,link,method,parameter,get,parameter,annotation,class,param,parameter,the,method,parameter,return,the,named,value,information;protected,abstract,named,value,info,create,named,value,info,method,parameter,parameter
AbstractNamedValueArgumentResolver -> protected abstract NamedValueInfo createNamedValueInfo(MethodParameter parameter)_;1490354145;Create the {@link NamedValueInfo} object for the given method parameter._Implementations typically retrieve the method annotation by means of_{@link MethodParameter#getParameterAnnotation(Class)}._@param parameter the method parameter_@return the named value information;protected abstract NamedValueInfo createNamedValueInfo(MethodParameter parameter)_;create,the,link,named,value,info,object,for,the,given,method,parameter,implementations,typically,retrieve,the,method,annotation,by,means,of,link,method,parameter,get,parameter,annotation,class,param,parameter,the,method,parameter,return,the,named,value,information;protected,abstract,named,value,info,create,named,value,info,method,parameter,parameter
AbstractNamedValueArgumentResolver -> protected abstract NamedValueInfo createNamedValueInfo(MethodParameter parameter)_;1492090594;Create the {@link NamedValueInfo} object for the given method parameter._Implementations typically retrieve the method annotation by means of_{@link MethodParameter#getParameterAnnotation(Class)}._@param parameter the method parameter_@return the named value information;protected abstract NamedValueInfo createNamedValueInfo(MethodParameter parameter)_;create,the,link,named,value,info,object,for,the,given,method,parameter,implementations,typically,retrieve,the,method,annotation,by,means,of,link,method,parameter,get,parameter,annotation,class,param,parameter,the,method,parameter,return,the,named,value,information;protected,abstract,named,value,info,create,named,value,info,method,parameter,parameter
AbstractNamedValueArgumentResolver -> protected abstract NamedValueInfo createNamedValueInfo(MethodParameter parameter)_;1495868221;Create the {@link NamedValueInfo} object for the given method parameter._Implementations typically retrieve the method annotation by means of_{@link MethodParameter#getParameterAnnotation(Class)}._@param parameter the method parameter_@return the named value information;protected abstract NamedValueInfo createNamedValueInfo(MethodParameter parameter)_;create,the,link,named,value,info,object,for,the,given,method,parameter,implementations,typically,retrieve,the,method,annotation,by,means,of,link,method,parameter,get,parameter,annotation,class,param,parameter,the,method,parameter,return,the,named,value,information;protected,abstract,named,value,info,create,named,value,info,method,parameter,parameter
AbstractNamedValueArgumentResolver -> protected abstract NamedValueInfo createNamedValueInfo(MethodParameter parameter)_;1496837955;Create the {@link NamedValueInfo} object for the given method parameter._Implementations typically retrieve the method annotation by means of_{@link MethodParameter#getParameterAnnotation(Class)}._@param parameter the method parameter_@return the named value information;protected abstract NamedValueInfo createNamedValueInfo(MethodParameter parameter)_;create,the,link,named,value,info,object,for,the,given,method,parameter,implementations,typically,retrieve,the,method,annotation,by,means,of,link,method,parameter,get,parameter,annotation,class,param,parameter,the,method,parameter,return,the,named,value,information;protected,abstract,named,value,info,create,named,value,info,method,parameter,parameter
AbstractNamedValueArgumentResolver -> protected abstract NamedValueInfo createNamedValueInfo(MethodParameter parameter)_;1498780456;Create the {@link NamedValueInfo} object for the given method parameter._Implementations typically retrieve the method annotation by means of_{@link MethodParameter#getParameterAnnotation(Class)}._@param parameter the method parameter_@return the named value information;protected abstract NamedValueInfo createNamedValueInfo(MethodParameter parameter)_;create,the,link,named,value,info,object,for,the,given,method,parameter,implementations,typically,retrieve,the,method,annotation,by,means,of,link,method,parameter,get,parameter,annotation,class,param,parameter,the,method,parameter,return,the,named,value,information;protected,abstract,named,value,info,create,named,value,info,method,parameter,parameter
AbstractNamedValueArgumentResolver -> protected abstract NamedValueInfo createNamedValueInfo(MethodParameter parameter)_;1508532146;Create the {@link NamedValueInfo} object for the given method parameter._Implementations typically retrieve the method annotation by means of_{@link MethodParameter#getParameterAnnotation(Class)}._@param parameter the method parameter_@return the named value information;protected abstract NamedValueInfo createNamedValueInfo(MethodParameter parameter)_;create,the,link,named,value,info,object,for,the,given,method,parameter,implementations,typically,retrieve,the,method,annotation,by,means,of,link,method,parameter,get,parameter,annotation,class,param,parameter,the,method,parameter,return,the,named,value,information;protected,abstract,named,value,info,create,named,value,info,method,parameter,parameter
AbstractNamedValueArgumentResolver -> protected abstract NamedValueInfo createNamedValueInfo(MethodParameter parameter)_;1530174524;Create the {@link NamedValueInfo} object for the given method parameter._Implementations typically retrieve the method annotation by means of_{@link MethodParameter#getParameterAnnotation(Class)}._@param parameter the method parameter_@return the named value information;protected abstract NamedValueInfo createNamedValueInfo(MethodParameter parameter)_;create,the,link,named,value,info,object,for,the,given,method,parameter,implementations,typically,retrieve,the,method,annotation,by,means,of,link,method,parameter,get,parameter,annotation,class,param,parameter,the,method,parameter,return,the,named,value,information;protected,abstract,named,value,info,create,named,value,info,method,parameter,parameter
AbstractNamedValueArgumentResolver -> protected abstract NamedValueInfo createNamedValueInfo(MethodParameter parameter)_;1531917703;Create the {@link NamedValueInfo} object for the given method parameter._Implementations typically retrieve the method annotation by means of_{@link MethodParameter#getParameterAnnotation(Class)}._@param parameter the method parameter_@return the named value information;protected abstract NamedValueInfo createNamedValueInfo(MethodParameter parameter)_;create,the,link,named,value,info,object,for,the,given,method,parameter,implementations,typically,retrieve,the,method,annotation,by,means,of,link,method,parameter,get,parameter,annotation,class,param,parameter,the,method,parameter,return,the,named,value,information;protected,abstract,named,value,info,create,named,value,info,method,parameter,parameter
AbstractNamedValueArgumentResolver -> protected abstract NamedValueInfo createNamedValueInfo(MethodParameter parameter)_;1538753959;Create the {@link NamedValueInfo} object for the given method parameter._Implementations typically retrieve the method annotation by means of_{@link MethodParameter#getParameterAnnotation(Class)}._@param parameter the method parameter_@return the named value information;protected abstract NamedValueInfo createNamedValueInfo(MethodParameter parameter)_;create,the,link,named,value,info,object,for,the,given,method,parameter,implementations,typically,retrieve,the,method,annotation,by,means,of,link,method,parameter,get,parameter,annotation,class,param,parameter,the,method,parameter,return,the,named,value,information;protected,abstract,named,value,info,create,named,value,info,method,parameter,parameter
AbstractNamedValueArgumentResolver -> @SuppressWarnings("UnusedParameters") 	protected void handleMissingValue(String name, MethodParameter parameter, ServerWebExchange exchange);1485986572;Invoked when a named value is required, but_{@link #resolveName(String, MethodParameter, ServerWebExchange)} returned_{@code null} and there is no default value. Subclasses typically throw an_exception in this case._@param name the name for the value_@param parameter the method parameter_@param exchange the current exchange;@SuppressWarnings("UnusedParameters")_	protected void handleMissingValue(String name, MethodParameter parameter, ServerWebExchange exchange) {_		handleMissingValue(name, parameter)__	};invoked,when,a,named,value,is,required,but,link,resolve,name,string,method,parameter,server,web,exchange,returned,code,null,and,there,is,no,default,value,subclasses,typically,throw,an,exception,in,this,case,param,name,the,name,for,the,value,param,parameter,the,method,parameter,param,exchange,the,current,exchange;suppress,warnings,unused,parameters,protected,void,handle,missing,value,string,name,method,parameter,parameter,server,web,exchange,exchange,handle,missing,value,name,parameter
AbstractNamedValueArgumentResolver -> @SuppressWarnings("UnusedParameters") 	protected void handleMissingValue(String name, MethodParameter parameter, ServerWebExchange exchange);1487760984;Invoked when a named value is required, but_{@link #resolveName(String, MethodParameter, ServerWebExchange)} returned_{@code null} and there is no default value. Subclasses typically throw an_exception in this case._@param name the name for the value_@param parameter the method parameter_@param exchange the current exchange;@SuppressWarnings("UnusedParameters")_	protected void handleMissingValue(String name, MethodParameter parameter, ServerWebExchange exchange) {_		handleMissingValue(name, parameter)__	};invoked,when,a,named,value,is,required,but,link,resolve,name,string,method,parameter,server,web,exchange,returned,code,null,and,there,is,no,default,value,subclasses,typically,throw,an,exception,in,this,case,param,name,the,name,for,the,value,param,parameter,the,method,parameter,param,exchange,the,current,exchange;suppress,warnings,unused,parameters,protected,void,handle,missing,value,string,name,method,parameter,parameter,server,web,exchange,exchange,handle,missing,value,name,parameter
AbstractNamedValueArgumentResolver -> @SuppressWarnings("UnusedParameters") 	protected void handleMissingValue(String name, MethodParameter parameter, ServerWebExchange exchange);1489433860;Invoked when a named value is required, but_{@link #resolveName(String, MethodParameter, ServerWebExchange)} returned_{@code null} and there is no default value. Subclasses typically throw an_exception in this case._@param name the name for the value_@param parameter the method parameter_@param exchange the current exchange;@SuppressWarnings("UnusedParameters")_	protected void handleMissingValue(String name, MethodParameter parameter, ServerWebExchange exchange) {_		handleMissingValue(name, parameter)__	};invoked,when,a,named,value,is,required,but,link,resolve,name,string,method,parameter,server,web,exchange,returned,code,null,and,there,is,no,default,value,subclasses,typically,throw,an,exception,in,this,case,param,name,the,name,for,the,value,param,parameter,the,method,parameter,param,exchange,the,current,exchange;suppress,warnings,unused,parameters,protected,void,handle,missing,value,string,name,method,parameter,parameter,server,web,exchange,exchange,handle,missing,value,name,parameter
AbstractNamedValueArgumentResolver -> @SuppressWarnings("UnusedParameters") 	protected void handleMissingValue(String name, MethodParameter parameter, ServerWebExchange exchange);1489535791;Invoked when a named value is required, but_{@link #resolveName(String, MethodParameter, ServerWebExchange)} returned_{@code null} and there is no default value. Subclasses typically throw an_exception in this case._@param name the name for the value_@param parameter the method parameter_@param exchange the current exchange;@SuppressWarnings("UnusedParameters")_	protected void handleMissingValue(String name, MethodParameter parameter, ServerWebExchange exchange) {_		handleMissingValue(name, parameter)__	};invoked,when,a,named,value,is,required,but,link,resolve,name,string,method,parameter,server,web,exchange,returned,code,null,and,there,is,no,default,value,subclasses,typically,throw,an,exception,in,this,case,param,name,the,name,for,the,value,param,parameter,the,method,parameter,param,exchange,the,current,exchange;suppress,warnings,unused,parameters,protected,void,handle,missing,value,string,name,method,parameter,parameter,server,web,exchange,exchange,handle,missing,value,name,parameter
AbstractNamedValueArgumentResolver -> @SuppressWarnings("UnusedParameters") 	protected void handleMissingValue(String name, MethodParameter parameter, ServerWebExchange exchange);1490354145;Invoked when a named value is required, but_{@link #resolveName(String, MethodParameter, ServerWebExchange)} returned_{@code null} and there is no default value. Subclasses typically throw an_exception in this case._@param name the name for the value_@param parameter the method parameter_@param exchange the current exchange;@SuppressWarnings("UnusedParameters")_	protected void handleMissingValue(String name, MethodParameter parameter, ServerWebExchange exchange) {_		handleMissingValue(name, parameter)__	};invoked,when,a,named,value,is,required,but,link,resolve,name,string,method,parameter,server,web,exchange,returned,code,null,and,there,is,no,default,value,subclasses,typically,throw,an,exception,in,this,case,param,name,the,name,for,the,value,param,parameter,the,method,parameter,param,exchange,the,current,exchange;suppress,warnings,unused,parameters,protected,void,handle,missing,value,string,name,method,parameter,parameter,server,web,exchange,exchange,handle,missing,value,name,parameter
AbstractNamedValueArgumentResolver -> @SuppressWarnings("UnusedParameters") 	protected void handleMissingValue(String name, MethodParameter parameter, ServerWebExchange exchange);1492090594;Invoked when a named value is required, but_{@link #resolveName(String, MethodParameter, ServerWebExchange)} returned_{@code null} and there is no default value. Subclasses typically throw an_exception in this case._@param name the name for the value_@param parameter the method parameter_@param exchange the current exchange;@SuppressWarnings("UnusedParameters")_	protected void handleMissingValue(String name, MethodParameter parameter, ServerWebExchange exchange) {_		handleMissingValue(name, parameter)__	};invoked,when,a,named,value,is,required,but,link,resolve,name,string,method,parameter,server,web,exchange,returned,code,null,and,there,is,no,default,value,subclasses,typically,throw,an,exception,in,this,case,param,name,the,name,for,the,value,param,parameter,the,method,parameter,param,exchange,the,current,exchange;suppress,warnings,unused,parameters,protected,void,handle,missing,value,string,name,method,parameter,parameter,server,web,exchange,exchange,handle,missing,value,name,parameter
AbstractNamedValueArgumentResolver -> @SuppressWarnings("UnusedParameters") 	protected void handleMissingValue(String name, MethodParameter parameter, ServerWebExchange exchange);1495868221;Invoked when a named value is required, but_{@link #resolveName(String, MethodParameter, ServerWebExchange)} returned_{@code null} and there is no default value. Subclasses typically throw an_exception in this case._@param name the name for the value_@param parameter the method parameter_@param exchange the current exchange;@SuppressWarnings("UnusedParameters")_	protected void handleMissingValue(String name, MethodParameter parameter, ServerWebExchange exchange) {_		handleMissingValue(name, parameter)__	};invoked,when,a,named,value,is,required,but,link,resolve,name,string,method,parameter,server,web,exchange,returned,code,null,and,there,is,no,default,value,subclasses,typically,throw,an,exception,in,this,case,param,name,the,name,for,the,value,param,parameter,the,method,parameter,param,exchange,the,current,exchange;suppress,warnings,unused,parameters,protected,void,handle,missing,value,string,name,method,parameter,parameter,server,web,exchange,exchange,handle,missing,value,name,parameter
AbstractNamedValueArgumentResolver -> @SuppressWarnings("UnusedParameters") 	protected void handleMissingValue(String name, MethodParameter parameter, ServerWebExchange exchange);1496837955;Invoked when a named value is required, but_{@link #resolveName(String, MethodParameter, ServerWebExchange)} returned_{@code null} and there is no default value. Subclasses typically throw an_exception in this case._@param name the name for the value_@param parameter the method parameter_@param exchange the current exchange;@SuppressWarnings("UnusedParameters")_	protected void handleMissingValue(String name, MethodParameter parameter, ServerWebExchange exchange) {_		handleMissingValue(name, parameter)__	};invoked,when,a,named,value,is,required,but,link,resolve,name,string,method,parameter,server,web,exchange,returned,code,null,and,there,is,no,default,value,subclasses,typically,throw,an,exception,in,this,case,param,name,the,name,for,the,value,param,parameter,the,method,parameter,param,exchange,the,current,exchange;suppress,warnings,unused,parameters,protected,void,handle,missing,value,string,name,method,parameter,parameter,server,web,exchange,exchange,handle,missing,value,name,parameter
AbstractNamedValueArgumentResolver -> @SuppressWarnings("UnusedParameters") 	protected void handleMissingValue(String name, MethodParameter parameter, ServerWebExchange exchange);1498780456;Invoked when a named value is required, but_{@link #resolveName(String, MethodParameter, ServerWebExchange)} returned_{@code null} and there is no default value. Subclasses typically throw an_exception in this case._@param name the name for the value_@param parameter the method parameter_@param exchange the current exchange;@SuppressWarnings("UnusedParameters")_	protected void handleMissingValue(String name, MethodParameter parameter, ServerWebExchange exchange) {_		handleMissingValue(name, parameter)__	};invoked,when,a,named,value,is,required,but,link,resolve,name,string,method,parameter,server,web,exchange,returned,code,null,and,there,is,no,default,value,subclasses,typically,throw,an,exception,in,this,case,param,name,the,name,for,the,value,param,parameter,the,method,parameter,param,exchange,the,current,exchange;suppress,warnings,unused,parameters,protected,void,handle,missing,value,string,name,method,parameter,parameter,server,web,exchange,exchange,handle,missing,value,name,parameter
AbstractNamedValueArgumentResolver -> @SuppressWarnings("UnusedParameters") 	protected void handleMissingValue(String name, MethodParameter parameter, ServerWebExchange exchange);1508532146;Invoked when a named value is required, but_{@link #resolveName(String, MethodParameter, ServerWebExchange)} returned_{@code null} and there is no default value. Subclasses typically throw an_exception in this case._@param name the name for the value_@param parameter the method parameter_@param exchange the current exchange;@SuppressWarnings("UnusedParameters")_	protected void handleMissingValue(String name, MethodParameter parameter, ServerWebExchange exchange) {_		handleMissingValue(name, parameter)__	};invoked,when,a,named,value,is,required,but,link,resolve,name,string,method,parameter,server,web,exchange,returned,code,null,and,there,is,no,default,value,subclasses,typically,throw,an,exception,in,this,case,param,name,the,name,for,the,value,param,parameter,the,method,parameter,param,exchange,the,current,exchange;suppress,warnings,unused,parameters,protected,void,handle,missing,value,string,name,method,parameter,parameter,server,web,exchange,exchange,handle,missing,value,name,parameter
AbstractNamedValueArgumentResolver -> @SuppressWarnings("UnusedParameters") 	protected void handleMissingValue(String name, MethodParameter parameter, ServerWebExchange exchange);1530174524;Invoked when a named value is required, but_{@link #resolveName(String, MethodParameter, ServerWebExchange)} returned_{@code null} and there is no default value. Subclasses typically throw an_exception in this case._@param name the name for the value_@param parameter the method parameter_@param exchange the current exchange;@SuppressWarnings("UnusedParameters")_	protected void handleMissingValue(String name, MethodParameter parameter, ServerWebExchange exchange) {_		handleMissingValue(name, parameter)__	};invoked,when,a,named,value,is,required,but,link,resolve,name,string,method,parameter,server,web,exchange,returned,code,null,and,there,is,no,default,value,subclasses,typically,throw,an,exception,in,this,case,param,name,the,name,for,the,value,param,parameter,the,method,parameter,param,exchange,the,current,exchange;suppress,warnings,unused,parameters,protected,void,handle,missing,value,string,name,method,parameter,parameter,server,web,exchange,exchange,handle,missing,value,name,parameter
AbstractNamedValueArgumentResolver -> @SuppressWarnings("UnusedParameters") 	protected void handleMissingValue(String name, MethodParameter parameter, ServerWebExchange exchange);1531917703;Invoked when a named value is required, but_{@link #resolveName(String, MethodParameter, ServerWebExchange)} returned_{@code null} and there is no default value. Subclasses typically throw an_exception in this case._@param name the name for the value_@param parameter the method parameter_@param exchange the current exchange;@SuppressWarnings("UnusedParameters")_	protected void handleMissingValue(String name, MethodParameter parameter, ServerWebExchange exchange) {_		handleMissingValue(name, parameter)__	};invoked,when,a,named,value,is,required,but,link,resolve,name,string,method,parameter,server,web,exchange,returned,code,null,and,there,is,no,default,value,subclasses,typically,throw,an,exception,in,this,case,param,name,the,name,for,the,value,param,parameter,the,method,parameter,param,exchange,the,current,exchange;suppress,warnings,unused,parameters,protected,void,handle,missing,value,string,name,method,parameter,parameter,server,web,exchange,exchange,handle,missing,value,name,parameter
AbstractNamedValueArgumentResolver -> @SuppressWarnings("UnusedParameters") 	protected void handleMissingValue(String name, MethodParameter parameter, ServerWebExchange exchange);1538753959;Invoked when a named value is required, but_{@link #resolveName(String, MethodParameter, ServerWebExchange)} returned_{@code null} and there is no default value. Subclasses typically throw an_exception in this case._@param name the name for the value_@param parameter the method parameter_@param exchange the current exchange;@SuppressWarnings("UnusedParameters")_	protected void handleMissingValue(String name, MethodParameter parameter, ServerWebExchange exchange) {_		handleMissingValue(name, parameter)__	};invoked,when,a,named,value,is,required,but,link,resolve,name,string,method,parameter,server,web,exchange,returned,code,null,and,there,is,no,default,value,subclasses,typically,throw,an,exception,in,this,case,param,name,the,name,for,the,value,param,parameter,the,method,parameter,param,exchange,the,current,exchange;suppress,warnings,unused,parameters,protected,void,handle,missing,value,string,name,method,parameter,parameter,server,web,exchange,exchange,handle,missing,value,name,parameter
AbstractNamedValueArgumentResolver -> private Object handleNullValue(String name, Object value, Class<?> paramType);1485986572;A {@code null} results in a {@code false} value for {@code boolean}s or_an exception for other primitives.;private Object handleNullValue(String name, Object value, Class<?> paramType) {_		if (value == null) {_			if (Boolean.TYPE.equals(paramType)) {_				return Boolean.FALSE__			}_			else if (paramType.isPrimitive()) {_				throw new IllegalStateException("Optional " + paramType.getSimpleName() +_						" parameter '" + name + "' is present but cannot be translated into a" +_						" null value due to being declared as a primitive type. " +_						"Consider declaring it as object wrapper for the corresponding primitive type.")__			}_		}_		return value__	};a,code,null,results,in,a,code,false,value,for,code,boolean,s,or,an,exception,for,other,primitives;private,object,handle,null,value,string,name,object,value,class,param,type,if,value,null,if,boolean,type,equals,param,type,return,boolean,false,else,if,param,type,is,primitive,throw,new,illegal,state,exception,optional,param,type,get,simple,name,parameter,name,is,present,but,cannot,be,translated,into,a,null,value,due,to,being,declared,as,a,primitive,type,consider,declaring,it,as,object,wrapper,for,the,corresponding,primitive,type,return,value
AbstractNamedValueArgumentResolver -> private Object handleNullValue(String name, Object value, Class<?> paramType);1487760984;A {@code null} results in a {@code false} value for {@code boolean}s or_an exception for other primitives.;private Object handleNullValue(String name, Object value, Class<?> paramType) {_		if (value == null) {_			if (Boolean.TYPE.equals(paramType)) {_				return Boolean.FALSE__			}_			else if (paramType.isPrimitive()) {_				throw new IllegalStateException("Optional " + paramType.getSimpleName() +_						" parameter '" + name + "' is present but cannot be translated into a" +_						" null value due to being declared as a primitive type. " +_						"Consider declaring it as object wrapper for the corresponding primitive type.")__			}_		}_		return value__	};a,code,null,results,in,a,code,false,value,for,code,boolean,s,or,an,exception,for,other,primitives;private,object,handle,null,value,string,name,object,value,class,param,type,if,value,null,if,boolean,type,equals,param,type,return,boolean,false,else,if,param,type,is,primitive,throw,new,illegal,state,exception,optional,param,type,get,simple,name,parameter,name,is,present,but,cannot,be,translated,into,a,null,value,due,to,being,declared,as,a,primitive,type,consider,declaring,it,as,object,wrapper,for,the,corresponding,primitive,type,return,value
AbstractNamedValueArgumentResolver -> private Object handleNullValue(String name, Object value, Class<?> paramType);1489433860;A {@code null} results in a {@code false} value for {@code boolean}s or_an exception for other primitives.;private Object handleNullValue(String name, Object value, Class<?> paramType) {_		if (value == null) {_			if (Boolean.TYPE.equals(paramType)) {_				return Boolean.FALSE__			}_			else if (paramType.isPrimitive()) {_				throw new IllegalStateException("Optional " + paramType.getSimpleName() +_						" parameter '" + name + "' is present but cannot be translated into a" +_						" null value due to being declared as a primitive type. " +_						"Consider declaring it as object wrapper for the corresponding primitive type.")__			}_		}_		return value__	};a,code,null,results,in,a,code,false,value,for,code,boolean,s,or,an,exception,for,other,primitives;private,object,handle,null,value,string,name,object,value,class,param,type,if,value,null,if,boolean,type,equals,param,type,return,boolean,false,else,if,param,type,is,primitive,throw,new,illegal,state,exception,optional,param,type,get,simple,name,parameter,name,is,present,but,cannot,be,translated,into,a,null,value,due,to,being,declared,as,a,primitive,type,consider,declaring,it,as,object,wrapper,for,the,corresponding,primitive,type,return,value
AbstractNamedValueArgumentResolver -> private Object handleNullValue(String name, Object value, Class<?> paramType);1489535791;A {@code null} results in a {@code false} value for {@code boolean}s or_an exception for other primitives.;private Object handleNullValue(String name, Object value, Class<?> paramType) {_		if (value == null) {_			if (Boolean.TYPE.equals(paramType)) {_				return Boolean.FALSE__			}_			else if (paramType.isPrimitive()) {_				throw new IllegalStateException("Optional " + paramType.getSimpleName() +_						" parameter '" + name + "' is present but cannot be translated into a" +_						" null value due to being declared as a primitive type. " +_						"Consider declaring it as object wrapper for the corresponding primitive type.")__			}_		}_		return value__	};a,code,null,results,in,a,code,false,value,for,code,boolean,s,or,an,exception,for,other,primitives;private,object,handle,null,value,string,name,object,value,class,param,type,if,value,null,if,boolean,type,equals,param,type,return,boolean,false,else,if,param,type,is,primitive,throw,new,illegal,state,exception,optional,param,type,get,simple,name,parameter,name,is,present,but,cannot,be,translated,into,a,null,value,due,to,being,declared,as,a,primitive,type,consider,declaring,it,as,object,wrapper,for,the,corresponding,primitive,type,return,value
AbstractNamedValueArgumentResolver -> private Object handleNullValue(String name, Object value, Class<?> paramType);1490354145;A {@code null} results in a {@code false} value for {@code boolean}s or_an exception for other primitives.;private Object handleNullValue(String name, Object value, Class<?> paramType) {_		if (value == null) {_			if (Boolean.TYPE.equals(paramType)) {_				return Boolean.FALSE__			}_			else if (paramType.isPrimitive()) {_				throw new IllegalStateException("Optional " + paramType.getSimpleName() +_						" parameter '" + name + "' is present but cannot be translated into a" +_						" null value due to being declared as a primitive type. " +_						"Consider declaring it as object wrapper for the corresponding primitive type.")__			}_		}_		return value__	};a,code,null,results,in,a,code,false,value,for,code,boolean,s,or,an,exception,for,other,primitives;private,object,handle,null,value,string,name,object,value,class,param,type,if,value,null,if,boolean,type,equals,param,type,return,boolean,false,else,if,param,type,is,primitive,throw,new,illegal,state,exception,optional,param,type,get,simple,name,parameter,name,is,present,but,cannot,be,translated,into,a,null,value,due,to,being,declared,as,a,primitive,type,consider,declaring,it,as,object,wrapper,for,the,corresponding,primitive,type,return,value
AbstractNamedValueArgumentResolver -> private Object handleNullValue(String name, Object value, Class<?> paramType);1492090594;A {@code null} results in a {@code false} value for {@code boolean}s or_an exception for other primitives.;private Object handleNullValue(String name, Object value, Class<?> paramType) {_		if (value == null) {_			if (Boolean.TYPE.equals(paramType)) {_				return Boolean.FALSE__			}_			else if (paramType.isPrimitive()) {_				throw new IllegalStateException("Optional " + paramType.getSimpleName() +_						" parameter '" + name + "' is present but cannot be translated into a" +_						" null value due to being declared as a primitive type. " +_						"Consider declaring it as object wrapper for the corresponding primitive type.")__			}_		}_		return value__	};a,code,null,results,in,a,code,false,value,for,code,boolean,s,or,an,exception,for,other,primitives;private,object,handle,null,value,string,name,object,value,class,param,type,if,value,null,if,boolean,type,equals,param,type,return,boolean,false,else,if,param,type,is,primitive,throw,new,illegal,state,exception,optional,param,type,get,simple,name,parameter,name,is,present,but,cannot,be,translated,into,a,null,value,due,to,being,declared,as,a,primitive,type,consider,declaring,it,as,object,wrapper,for,the,corresponding,primitive,type,return,value
AbstractNamedValueArgumentResolver -> private Mono<Object> getDefaultValue(NamedValueInfo namedValueInfo, MethodParameter parameter, 			BindingContext bindingContext, Model model, ServerWebExchange exchange);1489433860;Resolve the default value, if any.;private Mono<Object> getDefaultValue(NamedValueInfo namedValueInfo, MethodParameter parameter,_			BindingContext bindingContext, Model model, ServerWebExchange exchange) {__		Object value = null__		try {_			if (namedValueInfo.defaultValue != null) {_				value = resolveStringValue(namedValueInfo.defaultValue)__			}_			else if (namedValueInfo.required && !parameter.isOptional()) {_				handleMissingValue(namedValueInfo.name, parameter, exchange)__			}_			value = handleNullValue(namedValueInfo.name, value, parameter.getNestedParameterType())__			value = applyConversion(value, namedValueInfo, parameter, bindingContext, exchange)__			handleResolvedValue(value, namedValueInfo.name, parameter, model, exchange)__			return Mono.justOrEmpty(value)__		}_		catch (Throwable ex) {_			return Mono.error(ex)__		}_	};resolve,the,default,value,if,any;private,mono,object,get,default,value,named,value,info,named,value,info,method,parameter,parameter,binding,context,binding,context,model,model,server,web,exchange,exchange,object,value,null,try,if,named,value,info,default,value,null,value,resolve,string,value,named,value,info,default,value,else,if,named,value,info,required,parameter,is,optional,handle,missing,value,named,value,info,name,parameter,exchange,value,handle,null,value,named,value,info,name,value,parameter,get,nested,parameter,type,value,apply,conversion,value,named,value,info,parameter,binding,context,exchange,handle,resolved,value,value,named,value,info,name,parameter,model,exchange,return,mono,just,or,empty,value,catch,throwable,ex,return,mono,error,ex
AbstractNamedValueArgumentResolver -> private Mono<Object> getDefaultValue(NamedValueInfo namedValueInfo, MethodParameter parameter, 			BindingContext bindingContext, Model model, ServerWebExchange exchange);1489535791;Resolve the default value, if any.;private Mono<Object> getDefaultValue(NamedValueInfo namedValueInfo, MethodParameter parameter,_			BindingContext bindingContext, Model model, ServerWebExchange exchange) {__		Object value = null__		try {_			if (namedValueInfo.defaultValue != null) {_				value = resolveStringValue(namedValueInfo.defaultValue)__			}_			else if (namedValueInfo.required && !parameter.isOptional()) {_				handleMissingValue(namedValueInfo.name, parameter, exchange)__			}_			value = handleNullValue(namedValueInfo.name, value, parameter.getNestedParameterType())__			value = applyConversion(value, namedValueInfo, parameter, bindingContext, exchange)__			handleResolvedValue(value, namedValueInfo.name, parameter, model, exchange)__			return Mono.justOrEmpty(value)__		}_		catch (Throwable ex) {_			return Mono.error(ex)__		}_	};resolve,the,default,value,if,any;private,mono,object,get,default,value,named,value,info,named,value,info,method,parameter,parameter,binding,context,binding,context,model,model,server,web,exchange,exchange,object,value,null,try,if,named,value,info,default,value,null,value,resolve,string,value,named,value,info,default,value,else,if,named,value,info,required,parameter,is,optional,handle,missing,value,named,value,info,name,parameter,exchange,value,handle,null,value,named,value,info,name,value,parameter,get,nested,parameter,type,value,apply,conversion,value,named,value,info,parameter,binding,context,exchange,handle,resolved,value,value,named,value,info,name,parameter,model,exchange,return,mono,just,or,empty,value,catch,throwable,ex,return,mono,error,ex
AbstractNamedValueArgumentResolver -> private Mono<Object> getDefaultValue(NamedValueInfo namedValueInfo, MethodParameter parameter, 			BindingContext bindingContext, Model model, ServerWebExchange exchange);1490354145;Resolve the default value, if any.;private Mono<Object> getDefaultValue(NamedValueInfo namedValueInfo, MethodParameter parameter,_			BindingContext bindingContext, Model model, ServerWebExchange exchange) {__		Object value = null__		try {_			if (namedValueInfo.defaultValue != null) {_				value = resolveStringValue(namedValueInfo.defaultValue)__			}_			else if (namedValueInfo.required && !parameter.isOptional()) {_				handleMissingValue(namedValueInfo.name, parameter, exchange)__			}_			value = handleNullValue(namedValueInfo.name, value, parameter.getNestedParameterType())__			value = applyConversion(value, namedValueInfo, parameter, bindingContext, exchange)__			handleResolvedValue(value, namedValueInfo.name, parameter, model, exchange)__			return Mono.justOrEmpty(value)__		}_		catch (Throwable ex) {_			return Mono.error(ex)__		}_	};resolve,the,default,value,if,any;private,mono,object,get,default,value,named,value,info,named,value,info,method,parameter,parameter,binding,context,binding,context,model,model,server,web,exchange,exchange,object,value,null,try,if,named,value,info,default,value,null,value,resolve,string,value,named,value,info,default,value,else,if,named,value,info,required,parameter,is,optional,handle,missing,value,named,value,info,name,parameter,exchange,value,handle,null,value,named,value,info,name,value,parameter,get,nested,parameter,type,value,apply,conversion,value,named,value,info,parameter,binding,context,exchange,handle,resolved,value,value,named,value,info,name,parameter,model,exchange,return,mono,just,or,empty,value,catch,throwable,ex,return,mono,error,ex
AbstractNamedValueArgumentResolver -> private Mono<Object> getDefaultValue(NamedValueInfo namedValueInfo, MethodParameter parameter, 			BindingContext bindingContext, Model model, ServerWebExchange exchange);1492090594;Resolve the default value, if any.;private Mono<Object> getDefaultValue(NamedValueInfo namedValueInfo, MethodParameter parameter,_			BindingContext bindingContext, Model model, ServerWebExchange exchange) {__		Object value = null__		try {_			if (namedValueInfo.defaultValue != null) {_				value = resolveStringValue(namedValueInfo.defaultValue)__			}_			else if (namedValueInfo.required && !parameter.isOptional()) {_				handleMissingValue(namedValueInfo.name, parameter, exchange)__			}_			value = handleNullValue(namedValueInfo.name, value, parameter.getNestedParameterType())__			value = applyConversion(value, namedValueInfo, parameter, bindingContext, exchange)__			handleResolvedValue(value, namedValueInfo.name, parameter, model, exchange)__			return Mono.justOrEmpty(value)__		}_		catch (Throwable ex) {_			return Mono.error(ex)__		}_	};resolve,the,default,value,if,any;private,mono,object,get,default,value,named,value,info,named,value,info,method,parameter,parameter,binding,context,binding,context,model,model,server,web,exchange,exchange,object,value,null,try,if,named,value,info,default,value,null,value,resolve,string,value,named,value,info,default,value,else,if,named,value,info,required,parameter,is,optional,handle,missing,value,named,value,info,name,parameter,exchange,value,handle,null,value,named,value,info,name,value,parameter,get,nested,parameter,type,value,apply,conversion,value,named,value,info,parameter,binding,context,exchange,handle,resolved,value,value,named,value,info,name,parameter,model,exchange,return,mono,just,or,empty,value,catch,throwable,ex,return,mono,error,ex
AbstractNamedValueArgumentResolver -> private Mono<Object> getDefaultValue(NamedValueInfo namedValueInfo, MethodParameter parameter, 			BindingContext bindingContext, Model model, ServerWebExchange exchange);1495868221;Resolve the default value, if any.;private Mono<Object> getDefaultValue(NamedValueInfo namedValueInfo, MethodParameter parameter,_			BindingContext bindingContext, Model model, ServerWebExchange exchange) {__		Object value = null__		try {_			if (namedValueInfo.defaultValue != null) {_				value = resolveStringValue(namedValueInfo.defaultValue)__			}_			else if (namedValueInfo.required && !parameter.isOptional()) {_				handleMissingValue(namedValueInfo.name, parameter, exchange)__			}_			value = handleNullValue(namedValueInfo.name, value, parameter.getNestedParameterType())__			value = applyConversion(value, namedValueInfo, parameter, bindingContext, exchange)__			handleResolvedValue(value, namedValueInfo.name, parameter, model, exchange)__			return Mono.justOrEmpty(value)__		}_		catch (Throwable ex) {_			return Mono.error(ex)__		}_	};resolve,the,default,value,if,any;private,mono,object,get,default,value,named,value,info,named,value,info,method,parameter,parameter,binding,context,binding,context,model,model,server,web,exchange,exchange,object,value,null,try,if,named,value,info,default,value,null,value,resolve,string,value,named,value,info,default,value,else,if,named,value,info,required,parameter,is,optional,handle,missing,value,named,value,info,name,parameter,exchange,value,handle,null,value,named,value,info,name,value,parameter,get,nested,parameter,type,value,apply,conversion,value,named,value,info,parameter,binding,context,exchange,handle,resolved,value,value,named,value,info,name,parameter,model,exchange,return,mono,just,or,empty,value,catch,throwable,ex,return,mono,error,ex
AbstractNamedValueArgumentResolver -> private Mono<Object> getDefaultValue(NamedValueInfo namedValueInfo, MethodParameter parameter, 			BindingContext bindingContext, Model model, ServerWebExchange exchange);1496837955;Resolve the default value, if any.;private Mono<Object> getDefaultValue(NamedValueInfo namedValueInfo, MethodParameter parameter,_			BindingContext bindingContext, Model model, ServerWebExchange exchange) {__		Object value = null__		try {_			if (namedValueInfo.defaultValue != null) {_				value = resolveStringValue(namedValueInfo.defaultValue)__			}_			else if (namedValueInfo.required && !parameter.isOptional()) {_				handleMissingValue(namedValueInfo.name, parameter, exchange)__			}_			value = handleNullValue(namedValueInfo.name, value, parameter.getNestedParameterType())__			value = applyConversion(value, namedValueInfo, parameter, bindingContext, exchange)__			handleResolvedValue(value, namedValueInfo.name, parameter, model, exchange)__			return Mono.justOrEmpty(value)__		}_		catch (Throwable ex) {_			return Mono.error(ex)__		}_	};resolve,the,default,value,if,any;private,mono,object,get,default,value,named,value,info,named,value,info,method,parameter,parameter,binding,context,binding,context,model,model,server,web,exchange,exchange,object,value,null,try,if,named,value,info,default,value,null,value,resolve,string,value,named,value,info,default,value,else,if,named,value,info,required,parameter,is,optional,handle,missing,value,named,value,info,name,parameter,exchange,value,handle,null,value,named,value,info,name,value,parameter,get,nested,parameter,type,value,apply,conversion,value,named,value,info,parameter,binding,context,exchange,handle,resolved,value,value,named,value,info,name,parameter,model,exchange,return,mono,just,or,empty,value,catch,throwable,ex,return,mono,error,ex
AbstractNamedValueArgumentResolver -> private Mono<Object> getDefaultValue(NamedValueInfo namedValueInfo, MethodParameter parameter, 			BindingContext bindingContext, Model model, ServerWebExchange exchange);1498780456;Resolve the default value, if any.;private Mono<Object> getDefaultValue(NamedValueInfo namedValueInfo, MethodParameter parameter,_			BindingContext bindingContext, Model model, ServerWebExchange exchange) {__		Object value = null__		try {_			if (namedValueInfo.defaultValue != null) {_				value = resolveStringValue(namedValueInfo.defaultValue)__			}_			else if (namedValueInfo.required && !parameter.isOptional()) {_				handleMissingValue(namedValueInfo.name, parameter, exchange)__			}_			value = handleNullValue(namedValueInfo.name, value, parameter.getNestedParameterType())__			value = applyConversion(value, namedValueInfo, parameter, bindingContext, exchange)__			handleResolvedValue(value, namedValueInfo.name, parameter, model, exchange)__			return Mono.justOrEmpty(value)__		}_		catch (Throwable ex) {_			return Mono.error(ex)__		}_	};resolve,the,default,value,if,any;private,mono,object,get,default,value,named,value,info,named,value,info,method,parameter,parameter,binding,context,binding,context,model,model,server,web,exchange,exchange,object,value,null,try,if,named,value,info,default,value,null,value,resolve,string,value,named,value,info,default,value,else,if,named,value,info,required,parameter,is,optional,handle,missing,value,named,value,info,name,parameter,exchange,value,handle,null,value,named,value,info,name,value,parameter,get,nested,parameter,type,value,apply,conversion,value,named,value,info,parameter,binding,context,exchange,handle,resolved,value,value,named,value,info,name,parameter,model,exchange,return,mono,just,or,empty,value,catch,throwable,ex,return,mono,error,ex
AbstractNamedValueArgumentResolver -> private Mono<Object> getDefaultValue(NamedValueInfo namedValueInfo, MethodParameter parameter, 			BindingContext bindingContext, Model model, ServerWebExchange exchange);1508532146;Resolve the default value, if any.;private Mono<Object> getDefaultValue(NamedValueInfo namedValueInfo, MethodParameter parameter,_			BindingContext bindingContext, Model model, ServerWebExchange exchange) {__		Object value = null__		try {_			if (namedValueInfo.defaultValue != null) {_				value = resolveStringValue(namedValueInfo.defaultValue)__			}_			else if (namedValueInfo.required && !parameter.isOptional()) {_				handleMissingValue(namedValueInfo.name, parameter, exchange)__			}_			value = handleNullValue(namedValueInfo.name, value, parameter.getNestedParameterType())__			value = applyConversion(value, namedValueInfo, parameter, bindingContext, exchange)__			handleResolvedValue(value, namedValueInfo.name, parameter, model, exchange)__			return Mono.justOrEmpty(value)__		}_		catch (Throwable ex) {_			return Mono.error(ex)__		}_	};resolve,the,default,value,if,any;private,mono,object,get,default,value,named,value,info,named,value,info,method,parameter,parameter,binding,context,binding,context,model,model,server,web,exchange,exchange,object,value,null,try,if,named,value,info,default,value,null,value,resolve,string,value,named,value,info,default,value,else,if,named,value,info,required,parameter,is,optional,handle,missing,value,named,value,info,name,parameter,exchange,value,handle,null,value,named,value,info,name,value,parameter,get,nested,parameter,type,value,apply,conversion,value,named,value,info,parameter,binding,context,exchange,handle,resolved,value,value,named,value,info,name,parameter,model,exchange,return,mono,just,or,empty,value,catch,throwable,ex,return,mono,error,ex
AbstractNamedValueArgumentResolver -> private Mono<Object> getDefaultValue(NamedValueInfo namedValueInfo, MethodParameter parameter, 			BindingContext bindingContext, Model model, ServerWebExchange exchange);1530174524;Resolve the default value, if any.;private Mono<Object> getDefaultValue(NamedValueInfo namedValueInfo, MethodParameter parameter,_			BindingContext bindingContext, Model model, ServerWebExchange exchange) {__		Object value = null__		try {_			if (namedValueInfo.defaultValue != null) {_				value = resolveStringValue(namedValueInfo.defaultValue)__			}_			else if (namedValueInfo.required && !parameter.isOptional()) {_				handleMissingValue(namedValueInfo.name, parameter, exchange)__			}_			value = handleNullValue(namedValueInfo.name, value, parameter.getNestedParameterType())__			value = applyConversion(value, namedValueInfo, parameter, bindingContext, exchange)__			handleResolvedValue(value, namedValueInfo.name, parameter, model, exchange)__			return Mono.justOrEmpty(value)__		}_		catch (Throwable ex) {_			return Mono.error(ex)__		}_	};resolve,the,default,value,if,any;private,mono,object,get,default,value,named,value,info,named,value,info,method,parameter,parameter,binding,context,binding,context,model,model,server,web,exchange,exchange,object,value,null,try,if,named,value,info,default,value,null,value,resolve,string,value,named,value,info,default,value,else,if,named,value,info,required,parameter,is,optional,handle,missing,value,named,value,info,name,parameter,exchange,value,handle,null,value,named,value,info,name,value,parameter,get,nested,parameter,type,value,apply,conversion,value,named,value,info,parameter,binding,context,exchange,handle,resolved,value,value,named,value,info,name,parameter,model,exchange,return,mono,just,or,empty,value,catch,throwable,ex,return,mono,error,ex
AbstractNamedValueArgumentResolver -> private Mono<Object> getDefaultValue(NamedValueInfo namedValueInfo, MethodParameter parameter, 			BindingContext bindingContext, Model model, ServerWebExchange exchange);1531917703;Resolve the default value, if any.;private Mono<Object> getDefaultValue(NamedValueInfo namedValueInfo, MethodParameter parameter,_			BindingContext bindingContext, Model model, ServerWebExchange exchange) {__		Object value = null__		try {_			if (namedValueInfo.defaultValue != null) {_				value = resolveStringValue(namedValueInfo.defaultValue)__			}_			else if (namedValueInfo.required && !parameter.isOptional()) {_				handleMissingValue(namedValueInfo.name, parameter, exchange)__			}_			value = handleNullValue(namedValueInfo.name, value, parameter.getNestedParameterType())__			value = applyConversion(value, namedValueInfo, parameter, bindingContext, exchange)__			handleResolvedValue(value, namedValueInfo.name, parameter, model, exchange)__			return Mono.justOrEmpty(value)__		}_		catch (Throwable ex) {_			return Mono.error(ex)__		}_	};resolve,the,default,value,if,any;private,mono,object,get,default,value,named,value,info,named,value,info,method,parameter,parameter,binding,context,binding,context,model,model,server,web,exchange,exchange,object,value,null,try,if,named,value,info,default,value,null,value,resolve,string,value,named,value,info,default,value,else,if,named,value,info,required,parameter,is,optional,handle,missing,value,named,value,info,name,parameter,exchange,value,handle,null,value,named,value,info,name,value,parameter,get,nested,parameter,type,value,apply,conversion,value,named,value,info,parameter,binding,context,exchange,handle,resolved,value,value,named,value,info,name,parameter,model,exchange,return,mono,just,or,empty,value,catch,throwable,ex,return,mono,error,ex
AbstractNamedValueArgumentResolver -> private Mono<Object> getDefaultValue(NamedValueInfo namedValueInfo, MethodParameter parameter, 			BindingContext bindingContext, Model model, ServerWebExchange exchange);1538753959;Resolve the default value, if any.;private Mono<Object> getDefaultValue(NamedValueInfo namedValueInfo, MethodParameter parameter,_			BindingContext bindingContext, Model model, ServerWebExchange exchange) {__		return Mono.fromSupplier(() -> {_			Object value = null__			if (namedValueInfo.defaultValue != null) {_				value = resolveStringValue(namedValueInfo.defaultValue)__			}_			else if (namedValueInfo.required && !parameter.isOptional()) {_				handleMissingValue(namedValueInfo.name, parameter, exchange)__			}_			value = handleNullValue(namedValueInfo.name, value, parameter.getNestedParameterType())__			value = applyConversion(value, namedValueInfo, parameter, bindingContext, exchange)__			handleResolvedValue(value, namedValueInfo.name, parameter, model, exchange)__			return value__		})__	};resolve,the,default,value,if,any;private,mono,object,get,default,value,named,value,info,named,value,info,method,parameter,parameter,binding,context,binding,context,model,model,server,web,exchange,exchange,return,mono,from,supplier,object,value,null,if,named,value,info,default,value,null,value,resolve,string,value,named,value,info,default,value,else,if,named,value,info,required,parameter,is,optional,handle,missing,value,named,value,info,name,parameter,exchange,value,handle,null,value,named,value,info,name,value,parameter,get,nested,parameter,type,value,apply,conversion,value,named,value,info,parameter,binding,context,exchange,handle,resolved,value,value,named,value,info,name,parameter,model,exchange,return,value
AbstractNamedValueArgumentResolver -> public AbstractNamedValueArgumentResolver(@Nullable ConfigurableBeanFactory factory, 			ReactiveAdapterRegistry registry);1508532146;@param factory a bean factory to use for resolving ${...} placeholder_and #{...} SpEL expressions in default values, or {@code null} if default_values are not expected to contain expressions_@param registry for checking reactive type wrappers;public AbstractNamedValueArgumentResolver(@Nullable ConfigurableBeanFactory factory,_			ReactiveAdapterRegistry registry) {_		_		super(registry)__		this.configurableBeanFactory = factory__		this.expressionContext = (factory != null ? new BeanExpressionContext(factory, null) : null)__	};param,factory,a,bean,factory,to,use,for,resolving,placeholder,and,sp,el,expressions,in,default,values,or,code,null,if,default,values,are,not,expected,to,contain,expressions,param,registry,for,checking,reactive,type,wrappers;public,abstract,named,value,argument,resolver,nullable,configurable,bean,factory,factory,reactive,adapter,registry,registry,super,registry,this,configurable,bean,factory,factory,this,expression,context,factory,null,new,bean,expression,context,factory,null,null
AbstractNamedValueArgumentResolver -> public AbstractNamedValueArgumentResolver(@Nullable ConfigurableBeanFactory factory, 			ReactiveAdapterRegistry registry);1530174524;Create a new {@link AbstractNamedValueArgumentResolver} instance._@param factory a bean factory to use for resolving {@code ${...}} placeholder_and {@code #{...}} SpEL expressions in default values, or {@code null} if default_values are not expected to contain expressions_@param registry for checking reactive type wrappers;public AbstractNamedValueArgumentResolver(@Nullable ConfigurableBeanFactory factory,_			ReactiveAdapterRegistry registry) {__		super(registry)__		this.configurableBeanFactory = factory__		this.expressionContext = (factory != null ? new BeanExpressionContext(factory, null) : null)__	};create,a,new,link,abstract,named,value,argument,resolver,instance,param,factory,a,bean,factory,to,use,for,resolving,code,placeholder,and,code,sp,el,expressions,in,default,values,or,code,null,if,default,values,are,not,expected,to,contain,expressions,param,registry,for,checking,reactive,type,wrappers;public,abstract,named,value,argument,resolver,nullable,configurable,bean,factory,factory,reactive,adapter,registry,registry,super,registry,this,configurable,bean,factory,factory,this,expression,context,factory,null,new,bean,expression,context,factory,null,null
AbstractNamedValueArgumentResolver -> public AbstractNamedValueArgumentResolver(@Nullable ConfigurableBeanFactory factory, 			ReactiveAdapterRegistry registry);1531917703;Create a new {@link AbstractNamedValueArgumentResolver} instance._@param factory a bean factory to use for resolving {@code ${...}} placeholder_and {@code #{...}} SpEL expressions in default values, or {@code null} if default_values are not expected to contain expressions_@param registry for checking reactive type wrappers;public AbstractNamedValueArgumentResolver(@Nullable ConfigurableBeanFactory factory,_			ReactiveAdapterRegistry registry) {__		super(registry)__		this.configurableBeanFactory = factory__		this.expressionContext = (factory != null ? new BeanExpressionContext(factory, null) : null)__	};create,a,new,link,abstract,named,value,argument,resolver,instance,param,factory,a,bean,factory,to,use,for,resolving,code,placeholder,and,code,sp,el,expressions,in,default,values,or,code,null,if,default,values,are,not,expected,to,contain,expressions,param,registry,for,checking,reactive,type,wrappers;public,abstract,named,value,argument,resolver,nullable,configurable,bean,factory,factory,reactive,adapter,registry,registry,super,registry,this,configurable,bean,factory,factory,this,expression,context,factory,null,new,bean,expression,context,factory,null,null
AbstractNamedValueArgumentResolver -> public AbstractNamedValueArgumentResolver(@Nullable ConfigurableBeanFactory factory, 			ReactiveAdapterRegistry registry);1538753959;Create a new {@link AbstractNamedValueArgumentResolver} instance._@param factory a bean factory to use for resolving {@code ${...}} placeholder_and {@code #{...}} SpEL expressions in default values, or {@code null} if default_values are not expected to contain expressions_@param registry for checking reactive type wrappers;public AbstractNamedValueArgumentResolver(@Nullable ConfigurableBeanFactory factory,_			ReactiveAdapterRegistry registry) {__		super(registry)__		this.configurableBeanFactory = factory__		this.expressionContext = (factory != null ? new BeanExpressionContext(factory, null) : null)__	};create,a,new,link,abstract,named,value,argument,resolver,instance,param,factory,a,bean,factory,to,use,for,resolving,code,placeholder,and,code,sp,el,expressions,in,default,values,or,code,null,if,default,values,are,not,expected,to,contain,expressions,param,registry,for,checking,reactive,type,wrappers;public,abstract,named,value,argument,resolver,nullable,configurable,bean,factory,factory,reactive,adapter,registry,registry,super,registry,this,configurable,bean,factory,factory,this,expression,context,factory,null,new,bean,expression,context,factory,null,null
AbstractNamedValueArgumentResolver -> public AbstractNamedValueArgumentResolver(@Nullable ConfigurableBeanFactory factory, ReactiveAdapterRegistry registry);1495868221;@param factory a bean factory to use for resolving ${...} placeholder_and #{...} SpEL expressions in default values, or {@code null} if default_values are not expected to contain expressions_@param registry for checking reactive type wrappers;public AbstractNamedValueArgumentResolver(@Nullable ConfigurableBeanFactory factory, ReactiveAdapterRegistry registry) {_		super(registry)__		this.configurableBeanFactory = factory__		this.expressionContext = (factory != null ? new BeanExpressionContext(factory, null) : null)__	};param,factory,a,bean,factory,to,use,for,resolving,placeholder,and,sp,el,expressions,in,default,values,or,code,null,if,default,values,are,not,expected,to,contain,expressions,param,registry,for,checking,reactive,type,wrappers;public,abstract,named,value,argument,resolver,nullable,configurable,bean,factory,factory,reactive,adapter,registry,registry,super,registry,this,configurable,bean,factory,factory,this,expression,context,factory,null,new,bean,expression,context,factory,null,null
AbstractNamedValueArgumentResolver -> public AbstractNamedValueArgumentResolver(@Nullable ConfigurableBeanFactory factory, ReactiveAdapterRegistry registry);1496837955;@param factory a bean factory to use for resolving ${...} placeholder_and #{...} SpEL expressions in default values, or {@code null} if default_values are not expected to contain expressions_@param registry for checking reactive type wrappers;public AbstractNamedValueArgumentResolver(@Nullable ConfigurableBeanFactory factory, ReactiveAdapterRegistry registry) {_		super(registry)__		this.configurableBeanFactory = factory__		this.expressionContext = (factory != null ? new BeanExpressionContext(factory, null) : null)__	};param,factory,a,bean,factory,to,use,for,resolving,placeholder,and,sp,el,expressions,in,default,values,or,code,null,if,default,values,are,not,expected,to,contain,expressions,param,registry,for,checking,reactive,type,wrappers;public,abstract,named,value,argument,resolver,nullable,configurable,bean,factory,factory,reactive,adapter,registry,registry,super,registry,this,configurable,bean,factory,factory,this,expression,context,factory,null,new,bean,expression,context,factory,null,null
AbstractNamedValueArgumentResolver -> public AbstractNamedValueArgumentResolver(@Nullable ConfigurableBeanFactory factory, ReactiveAdapterRegistry registry);1498780456;@param factory a bean factory to use for resolving ${...} placeholder_and #{...} SpEL expressions in default values, or {@code null} if default_values are not expected to contain expressions_@param registry for checking reactive type wrappers;public AbstractNamedValueArgumentResolver(@Nullable ConfigurableBeanFactory factory, ReactiveAdapterRegistry registry) {_		super(registry)__		this.configurableBeanFactory = factory__		this.expressionContext = (factory != null ? new BeanExpressionContext(factory, null) : null)__	};param,factory,a,bean,factory,to,use,for,resolving,placeholder,and,sp,el,expressions,in,default,values,or,code,null,if,default,values,are,not,expected,to,contain,expressions,param,registry,for,checking,reactive,type,wrappers;public,abstract,named,value,argument,resolver,nullable,configurable,bean,factory,factory,reactive,adapter,registry,registry,super,registry,this,configurable,bean,factory,factory,this,expression,context,factory,null,new,bean,expression,context,factory,null,null
AbstractNamedValueArgumentResolver -> private Object resolveStringValue(String value);1485986572;Resolve the given annotation-specified value,_potentially containing placeholders and expressions.;private Object resolveStringValue(String value) {_		if (this.configurableBeanFactory == null) {_			return value__		}_		String placeholdersResolved = this.configurableBeanFactory.resolveEmbeddedValue(value)__		BeanExpressionResolver exprResolver = this.configurableBeanFactory.getBeanExpressionResolver()__		if (exprResolver == null) {_			return value__		}_		return exprResolver.evaluate(placeholdersResolved, this.expressionContext)__	};resolve,the,given,annotation,specified,value,potentially,containing,placeholders,and,expressions;private,object,resolve,string,value,string,value,if,this,configurable,bean,factory,null,return,value,string,placeholders,resolved,this,configurable,bean,factory,resolve,embedded,value,value,bean,expression,resolver,expr,resolver,this,configurable,bean,factory,get,bean,expression,resolver,if,expr,resolver,null,return,value,return,expr,resolver,evaluate,placeholders,resolved,this,expression,context
AbstractNamedValueArgumentResolver -> private Object resolveStringValue(String value);1487760984;Resolve the given annotation-specified value,_potentially containing placeholders and expressions.;private Object resolveStringValue(String value) {_		if (this.configurableBeanFactory == null) {_			return value__		}_		String placeholdersResolved = this.configurableBeanFactory.resolveEmbeddedValue(value)__		BeanExpressionResolver exprResolver = this.configurableBeanFactory.getBeanExpressionResolver()__		if (exprResolver == null) {_			return value__		}_		return exprResolver.evaluate(placeholdersResolved, this.expressionContext)__	};resolve,the,given,annotation,specified,value,potentially,containing,placeholders,and,expressions;private,object,resolve,string,value,string,value,if,this,configurable,bean,factory,null,return,value,string,placeholders,resolved,this,configurable,bean,factory,resolve,embedded,value,value,bean,expression,resolver,expr,resolver,this,configurable,bean,factory,get,bean,expression,resolver,if,expr,resolver,null,return,value,return,expr,resolver,evaluate,placeholders,resolved,this,expression,context
AbstractNamedValueArgumentResolver -> private Object resolveStringValue(String value);1489433860;Resolve the given annotation-specified value,_potentially containing placeholders and expressions.;private Object resolveStringValue(String value) {_		if (this.configurableBeanFactory == null) {_			return value__		}_		String placeholdersResolved = this.configurableBeanFactory.resolveEmbeddedValue(value)__		BeanExpressionResolver exprResolver = this.configurableBeanFactory.getBeanExpressionResolver()__		if (exprResolver == null) {_			return value__		}_		return exprResolver.evaluate(placeholdersResolved, this.expressionContext)__	};resolve,the,given,annotation,specified,value,potentially,containing,placeholders,and,expressions;private,object,resolve,string,value,string,value,if,this,configurable,bean,factory,null,return,value,string,placeholders,resolved,this,configurable,bean,factory,resolve,embedded,value,value,bean,expression,resolver,expr,resolver,this,configurable,bean,factory,get,bean,expression,resolver,if,expr,resolver,null,return,value,return,expr,resolver,evaluate,placeholders,resolved,this,expression,context
AbstractNamedValueArgumentResolver -> private Object resolveStringValue(String value);1489535791;Resolve the given annotation-specified value,_potentially containing placeholders and expressions.;private Object resolveStringValue(String value) {_		if (this.configurableBeanFactory == null) {_			return value__		}_		String placeholdersResolved = this.configurableBeanFactory.resolveEmbeddedValue(value)__		BeanExpressionResolver exprResolver = this.configurableBeanFactory.getBeanExpressionResolver()__		if (exprResolver == null) {_			return value__		}_		return exprResolver.evaluate(placeholdersResolved, this.expressionContext)__	};resolve,the,given,annotation,specified,value,potentially,containing,placeholders,and,expressions;private,object,resolve,string,value,string,value,if,this,configurable,bean,factory,null,return,value,string,placeholders,resolved,this,configurable,bean,factory,resolve,embedded,value,value,bean,expression,resolver,expr,resolver,this,configurable,bean,factory,get,bean,expression,resolver,if,expr,resolver,null,return,value,return,expr,resolver,evaluate,placeholders,resolved,this,expression,context
AbstractNamedValueArgumentResolver -> private Object resolveStringValue(String value);1490354145;Resolve the given annotation-specified value,_potentially containing placeholders and expressions.;private Object resolveStringValue(String value) {_		if (this.configurableBeanFactory == null) {_			return value__		}_		String placeholdersResolved = this.configurableBeanFactory.resolveEmbeddedValue(value)__		BeanExpressionResolver exprResolver = this.configurableBeanFactory.getBeanExpressionResolver()__		if (exprResolver == null) {_			return value__		}_		return exprResolver.evaluate(placeholdersResolved, this.expressionContext)__	};resolve,the,given,annotation,specified,value,potentially,containing,placeholders,and,expressions;private,object,resolve,string,value,string,value,if,this,configurable,bean,factory,null,return,value,string,placeholders,resolved,this,configurable,bean,factory,resolve,embedded,value,value,bean,expression,resolver,expr,resolver,this,configurable,bean,factory,get,bean,expression,resolver,if,expr,resolver,null,return,value,return,expr,resolver,evaluate,placeholders,resolved,this,expression,context
AbstractNamedValueArgumentResolver -> private Object resolveStringValue(String value);1492090594;Resolve the given annotation-specified value,_potentially containing placeholders and expressions.;private Object resolveStringValue(String value) {_		if (this.configurableBeanFactory == null) {_			return value__		}_		String placeholdersResolved = this.configurableBeanFactory.resolveEmbeddedValue(value)__		BeanExpressionResolver exprResolver = this.configurableBeanFactory.getBeanExpressionResolver()__		if (exprResolver == null) {_			return value__		}_		return exprResolver.evaluate(placeholdersResolved, this.expressionContext)__	};resolve,the,given,annotation,specified,value,potentially,containing,placeholders,and,expressions;private,object,resolve,string,value,string,value,if,this,configurable,bean,factory,null,return,value,string,placeholders,resolved,this,configurable,bean,factory,resolve,embedded,value,value,bean,expression,resolver,expr,resolver,this,configurable,bean,factory,get,bean,expression,resolver,if,expr,resolver,null,return,value,return,expr,resolver,evaluate,placeholders,resolved,this,expression,context
AbstractNamedValueArgumentResolver -> private Object resolveStringValue(String value);1495868221;Resolve the given annotation-specified value,_potentially containing placeholders and expressions.;private Object resolveStringValue(String value) {_		if (this.configurableBeanFactory == null) {_			return value__		}_		String placeholdersResolved = this.configurableBeanFactory.resolveEmbeddedValue(value)__		BeanExpressionResolver exprResolver = this.configurableBeanFactory.getBeanExpressionResolver()__		if (exprResolver == null) {_			return value__		}_		return exprResolver.evaluate(placeholdersResolved, this.expressionContext)__	};resolve,the,given,annotation,specified,value,potentially,containing,placeholders,and,expressions;private,object,resolve,string,value,string,value,if,this,configurable,bean,factory,null,return,value,string,placeholders,resolved,this,configurable,bean,factory,resolve,embedded,value,value,bean,expression,resolver,expr,resolver,this,configurable,bean,factory,get,bean,expression,resolver,if,expr,resolver,null,return,value,return,expr,resolver,evaluate,placeholders,resolved,this,expression,context
AbstractNamedValueArgumentResolver -> @Nullable 	private Object applyConversion(@Nullable Object value, NamedValueInfo namedValueInfo, MethodParameter parameter, 			BindingContext bindingContext, ServerWebExchange exchange);1496837955;Apply type conversion if necessary.;@Nullable_	private Object applyConversion(@Nullable Object value, NamedValueInfo namedValueInfo, MethodParameter parameter,_			BindingContext bindingContext, ServerWebExchange exchange) {__		WebDataBinder binder = bindingContext.createDataBinder(exchange, namedValueInfo.name)__		try {_			value = binder.convertIfNecessary(value, parameter.getParameterType(), parameter)__		}_		catch (ConversionNotSupportedException ex) {_			throw new ServerErrorException("Conversion not supported.", parameter, ex)__		}_		catch (TypeMismatchException ex) {_			throw new ServerWebInputException("Type mismatch.", parameter, ex)__		}_		return value__	};apply,type,conversion,if,necessary;nullable,private,object,apply,conversion,nullable,object,value,named,value,info,named,value,info,method,parameter,parameter,binding,context,binding,context,server,web,exchange,exchange,web,data,binder,binder,binding,context,create,data,binder,exchange,named,value,info,name,try,value,binder,convert,if,necessary,value,parameter,get,parameter,type,parameter,catch,conversion,not,supported,exception,ex,throw,new,server,error,exception,conversion,not,supported,parameter,ex,catch,type,mismatch,exception,ex,throw,new,server,web,input,exception,type,mismatch,parameter,ex,return,value
AbstractNamedValueArgumentResolver -> @Nullable 	private Object applyConversion(@Nullable Object value, NamedValueInfo namedValueInfo, MethodParameter parameter, 			BindingContext bindingContext, ServerWebExchange exchange);1498780456;Apply type conversion if necessary.;@Nullable_	private Object applyConversion(@Nullable Object value, NamedValueInfo namedValueInfo, MethodParameter parameter,_			BindingContext bindingContext, ServerWebExchange exchange) {__		WebDataBinder binder = bindingContext.createDataBinder(exchange, namedValueInfo.name)__		try {_			value = binder.convertIfNecessary(value, parameter.getParameterType(), parameter)__		}_		catch (ConversionNotSupportedException ex) {_			throw new ServerErrorException("Conversion not supported.", parameter, ex)__		}_		catch (TypeMismatchException ex) {_			throw new ServerWebInputException("Type mismatch.", parameter, ex)__		}_		return value__	};apply,type,conversion,if,necessary;nullable,private,object,apply,conversion,nullable,object,value,named,value,info,named,value,info,method,parameter,parameter,binding,context,binding,context,server,web,exchange,exchange,web,data,binder,binder,binding,context,create,data,binder,exchange,named,value,info,name,try,value,binder,convert,if,necessary,value,parameter,get,parameter,type,parameter,catch,conversion,not,supported,exception,ex,throw,new,server,error,exception,conversion,not,supported,parameter,ex,catch,type,mismatch,exception,ex,throw,new,server,web,input,exception,type,mismatch,parameter,ex,return,value
AbstractNamedValueArgumentResolver -> @Nullable 	private Object applyConversion(@Nullable Object value, NamedValueInfo namedValueInfo, MethodParameter parameter, 			BindingContext bindingContext, ServerWebExchange exchange);1508532146;Apply type conversion if necessary.;@Nullable_	private Object applyConversion(@Nullable Object value, NamedValueInfo namedValueInfo, MethodParameter parameter,_			BindingContext bindingContext, ServerWebExchange exchange) {__		WebDataBinder binder = bindingContext.createDataBinder(exchange, namedValueInfo.name)__		try {_			value = binder.convertIfNecessary(value, parameter.getParameterType(), parameter)__		}_		catch (ConversionNotSupportedException ex) {_			throw new ServerErrorException("Conversion not supported.", parameter, ex)__		}_		catch (TypeMismatchException ex) {_			throw new ServerWebInputException("Type mismatch.", parameter, ex)__		}_		return value__	};apply,type,conversion,if,necessary;nullable,private,object,apply,conversion,nullable,object,value,named,value,info,named,value,info,method,parameter,parameter,binding,context,binding,context,server,web,exchange,exchange,web,data,binder,binder,binding,context,create,data,binder,exchange,named,value,info,name,try,value,binder,convert,if,necessary,value,parameter,get,parameter,type,parameter,catch,conversion,not,supported,exception,ex,throw,new,server,error,exception,conversion,not,supported,parameter,ex,catch,type,mismatch,exception,ex,throw,new,server,web,input,exception,type,mismatch,parameter,ex,return,value
AbstractNamedValueArgumentResolver -> @Nullable 	private Object applyConversion(@Nullable Object value, NamedValueInfo namedValueInfo, MethodParameter parameter, 			BindingContext bindingContext, ServerWebExchange exchange);1530174524;Apply type conversion if necessary.;@Nullable_	private Object applyConversion(@Nullable Object value, NamedValueInfo namedValueInfo, MethodParameter parameter,_			BindingContext bindingContext, ServerWebExchange exchange) {__		WebDataBinder binder = bindingContext.createDataBinder(exchange, namedValueInfo.name)__		try {_			value = binder.convertIfNecessary(value, parameter.getParameterType(), parameter)__		}_		catch (ConversionNotSupportedException ex) {_			throw new ServerErrorException("Conversion not supported.", parameter, ex)__		}_		catch (TypeMismatchException ex) {_			throw new ServerWebInputException("Type mismatch.", parameter, ex)__		}_		return value__	};apply,type,conversion,if,necessary;nullable,private,object,apply,conversion,nullable,object,value,named,value,info,named,value,info,method,parameter,parameter,binding,context,binding,context,server,web,exchange,exchange,web,data,binder,binder,binding,context,create,data,binder,exchange,named,value,info,name,try,value,binder,convert,if,necessary,value,parameter,get,parameter,type,parameter,catch,conversion,not,supported,exception,ex,throw,new,server,error,exception,conversion,not,supported,parameter,ex,catch,type,mismatch,exception,ex,throw,new,server,web,input,exception,type,mismatch,parameter,ex,return,value
AbstractNamedValueArgumentResolver -> @Nullable 	private Object applyConversion(@Nullable Object value, NamedValueInfo namedValueInfo, MethodParameter parameter, 			BindingContext bindingContext, ServerWebExchange exchange);1531917703;Apply type conversion if necessary.;@Nullable_	private Object applyConversion(@Nullable Object value, NamedValueInfo namedValueInfo, MethodParameter parameter,_			BindingContext bindingContext, ServerWebExchange exchange) {__		WebDataBinder binder = bindingContext.createDataBinder(exchange, namedValueInfo.name)__		try {_			value = binder.convertIfNecessary(value, parameter.getParameterType(), parameter)__		}_		catch (ConversionNotSupportedException ex) {_			throw new ServerErrorException("Conversion not supported.", parameter, ex)__		}_		catch (TypeMismatchException ex) {_			throw new ServerWebInputException("Type mismatch.", parameter, ex)__		}_		return value__	};apply,type,conversion,if,necessary;nullable,private,object,apply,conversion,nullable,object,value,named,value,info,named,value,info,method,parameter,parameter,binding,context,binding,context,server,web,exchange,exchange,web,data,binder,binder,binding,context,create,data,binder,exchange,named,value,info,name,try,value,binder,convert,if,necessary,value,parameter,get,parameter,type,parameter,catch,conversion,not,supported,exception,ex,throw,new,server,error,exception,conversion,not,supported,parameter,ex,catch,type,mismatch,exception,ex,throw,new,server,web,input,exception,type,mismatch,parameter,ex,return,value
AbstractNamedValueArgumentResolver -> @Nullable 	private Object applyConversion(@Nullable Object value, NamedValueInfo namedValueInfo, MethodParameter parameter, 			BindingContext bindingContext, ServerWebExchange exchange);1538753959;Apply type conversion if necessary.;@Nullable_	private Object applyConversion(@Nullable Object value, NamedValueInfo namedValueInfo, MethodParameter parameter,_			BindingContext bindingContext, ServerWebExchange exchange) {__		WebDataBinder binder = bindingContext.createDataBinder(exchange, namedValueInfo.name)__		try {_			value = binder.convertIfNecessary(value, parameter.getParameterType(), parameter)__		}_		catch (ConversionNotSupportedException ex) {_			throw new ServerErrorException("Conversion not supported.", parameter, ex)__		}_		catch (TypeMismatchException ex) {_			throw new ServerWebInputException("Type mismatch.", parameter, ex)__		}_		return value__	};apply,type,conversion,if,necessary;nullable,private,object,apply,conversion,nullable,object,value,named,value,info,named,value,info,method,parameter,parameter,binding,context,binding,context,server,web,exchange,exchange,web,data,binder,binder,binding,context,create,data,binder,exchange,named,value,info,name,try,value,binder,convert,if,necessary,value,parameter,get,parameter,type,parameter,catch,conversion,not,supported,exception,ex,throw,new,server,error,exception,conversion,not,supported,parameter,ex,catch,type,mismatch,exception,ex,throw,new,server,web,input,exception,type,mismatch,parameter,ex,return,value
AbstractNamedValueArgumentResolver -> @SuppressWarnings("UnusedParameters") 	protected void handleResolvedValue( 			@Nullable Object arg, String name, MethodParameter parameter, Model model, ServerWebExchange exchange);1496837955;Invoked after a value is resolved._@param arg the resolved argument value_@param name the argument name_@param parameter the argument parameter type_@param model the model_@param exchange the current exchange;@SuppressWarnings("UnusedParameters")_	protected void handleResolvedValue(_			@Nullable Object arg, String name, MethodParameter parameter, Model model, ServerWebExchange exchange) {_	};invoked,after,a,value,is,resolved,param,arg,the,resolved,argument,value,param,name,the,argument,name,param,parameter,the,argument,parameter,type,param,model,the,model,param,exchange,the,current,exchange;suppress,warnings,unused,parameters,protected,void,handle,resolved,value,nullable,object,arg,string,name,method,parameter,parameter,model,model,server,web,exchange,exchange
AbstractNamedValueArgumentResolver -> @SuppressWarnings("UnusedParameters") 	protected void handleResolvedValue( 			@Nullable Object arg, String name, MethodParameter parameter, Model model, ServerWebExchange exchange);1498780456;Invoked after a value is resolved._@param arg the resolved argument value_@param name the argument name_@param parameter the argument parameter type_@param model the model_@param exchange the current exchange;@SuppressWarnings("UnusedParameters")_	protected void handleResolvedValue(_			@Nullable Object arg, String name, MethodParameter parameter, Model model, ServerWebExchange exchange) {_	};invoked,after,a,value,is,resolved,param,arg,the,resolved,argument,value,param,name,the,argument,name,param,parameter,the,argument,parameter,type,param,model,the,model,param,exchange,the,current,exchange;suppress,warnings,unused,parameters,protected,void,handle,resolved,value,nullable,object,arg,string,name,method,parameter,parameter,model,model,server,web,exchange,exchange
AbstractNamedValueArgumentResolver -> @SuppressWarnings("UnusedParameters") 	protected void handleResolvedValue( 			@Nullable Object arg, String name, MethodParameter parameter, Model model, ServerWebExchange exchange);1508532146;Invoked after a value is resolved._@param arg the resolved argument value_@param name the argument name_@param parameter the argument parameter type_@param model the model_@param exchange the current exchange;@SuppressWarnings("UnusedParameters")_	protected void handleResolvedValue(_			@Nullable Object arg, String name, MethodParameter parameter, Model model, ServerWebExchange exchange) {_	};invoked,after,a,value,is,resolved,param,arg,the,resolved,argument,value,param,name,the,argument,name,param,parameter,the,argument,parameter,type,param,model,the,model,param,exchange,the,current,exchange;suppress,warnings,unused,parameters,protected,void,handle,resolved,value,nullable,object,arg,string,name,method,parameter,parameter,model,model,server,web,exchange,exchange
AbstractNamedValueArgumentResolver -> @SuppressWarnings("UnusedParameters") 	protected void handleResolvedValue( 			@Nullable Object arg, String name, MethodParameter parameter, Model model, ServerWebExchange exchange);1530174524;Invoked after a value is resolved._@param arg the resolved argument value_@param name the argument name_@param parameter the argument parameter type_@param model the model_@param exchange the current exchange;@SuppressWarnings("UnusedParameters")_	protected void handleResolvedValue(_			@Nullable Object arg, String name, MethodParameter parameter, Model model, ServerWebExchange exchange) {_	};invoked,after,a,value,is,resolved,param,arg,the,resolved,argument,value,param,name,the,argument,name,param,parameter,the,argument,parameter,type,param,model,the,model,param,exchange,the,current,exchange;suppress,warnings,unused,parameters,protected,void,handle,resolved,value,nullable,object,arg,string,name,method,parameter,parameter,model,model,server,web,exchange,exchange
AbstractNamedValueArgumentResolver -> @SuppressWarnings("UnusedParameters") 	protected void handleResolvedValue( 			@Nullable Object arg, String name, MethodParameter parameter, Model model, ServerWebExchange exchange);1531917703;Invoked after a value is resolved._@param arg the resolved argument value_@param name the argument name_@param parameter the argument parameter type_@param model the model_@param exchange the current exchange;@SuppressWarnings("UnusedParameters")_	protected void handleResolvedValue(_			@Nullable Object arg, String name, MethodParameter parameter, Model model, ServerWebExchange exchange) {_	};invoked,after,a,value,is,resolved,param,arg,the,resolved,argument,value,param,name,the,argument,name,param,parameter,the,argument,parameter,type,param,model,the,model,param,exchange,the,current,exchange;suppress,warnings,unused,parameters,protected,void,handle,resolved,value,nullable,object,arg,string,name,method,parameter,parameter,model,model,server,web,exchange,exchange
AbstractNamedValueArgumentResolver -> @SuppressWarnings("UnusedParameters") 	protected void handleResolvedValue( 			@Nullable Object arg, String name, MethodParameter parameter, Model model, ServerWebExchange exchange);1538753959;Invoked after a value is resolved._@param arg the resolved argument value_@param name the argument name_@param parameter the argument parameter type_@param model the model_@param exchange the current exchange;@SuppressWarnings("UnusedParameters")_	protected void handleResolvedValue(_			@Nullable Object arg, String name, MethodParameter parameter, Model model, ServerWebExchange exchange) {_	};invoked,after,a,value,is,resolved,param,arg,the,resolved,argument,value,param,name,the,argument,name,param,parameter,the,argument,parameter,type,param,model,the,model,param,exchange,the,current,exchange;suppress,warnings,unused,parameters,protected,void,handle,resolved,value,nullable,object,arg,string,name,method,parameter,parameter,model,model,server,web,exchange,exchange
AbstractNamedValueArgumentResolver -> public AbstractNamedValueArgumentResolver(ConfigurableBeanFactory factory, ReactiveAdapterRegistry registry);1490354145;@param factory a bean factory to use for resolving ${...} placeholder_and #{...} SpEL expressions in default values, or {@code null} if default_values are not expected to contain expressions_@param registry for checking reactive type wrappers;public AbstractNamedValueArgumentResolver(ConfigurableBeanFactory factory, ReactiveAdapterRegistry registry) {_		super(registry)__		this.configurableBeanFactory = factory__		this.expressionContext = (factory != null ? new BeanExpressionContext(factory, null) : null)__	};param,factory,a,bean,factory,to,use,for,resolving,placeholder,and,sp,el,expressions,in,default,values,or,code,null,if,default,values,are,not,expected,to,contain,expressions,param,registry,for,checking,reactive,type,wrappers;public,abstract,named,value,argument,resolver,configurable,bean,factory,factory,reactive,adapter,registry,registry,super,registry,this,configurable,bean,factory,factory,this,expression,context,factory,null,new,bean,expression,context,factory,null,null
AbstractNamedValueArgumentResolver -> public AbstractNamedValueArgumentResolver(ConfigurableBeanFactory factory, ReactiveAdapterRegistry registry);1492090594;@param factory a bean factory to use for resolving ${...} placeholder_and #{...} SpEL expressions in default values, or {@code null} if default_values are not expected to contain expressions_@param registry for checking reactive type wrappers;public AbstractNamedValueArgumentResolver(ConfigurableBeanFactory factory, ReactiveAdapterRegistry registry) {_		super(registry)__		this.configurableBeanFactory = factory__		this.expressionContext = (factory != null ? new BeanExpressionContext(factory, null) : null)__	};param,factory,a,bean,factory,to,use,for,resolving,placeholder,and,sp,el,expressions,in,default,values,or,code,null,if,default,values,are,not,expected,to,contain,expressions,param,registry,for,checking,reactive,type,wrappers;public,abstract,named,value,argument,resolver,configurable,bean,factory,factory,reactive,adapter,registry,registry,super,registry,this,configurable,bean,factory,factory,this,expression,context,factory,null,new,bean,expression,context,factory,null,null
AbstractNamedValueArgumentResolver -> protected abstract Mono<Object> resolveName(String name, MethodParameter parameter, ServerWebExchange exchange)_;1490354145;Resolve the given parameter type and value name into an argument value._@param name the name of the value being resolved_@param parameter the method parameter to resolve to an argument value_(pre-nested in case of a {@link java.util.Optional} declaration)_@param exchange the current exchange_@return the resolved argument (may be {@code null});protected abstract Mono<Object> resolveName(String name, MethodParameter parameter, ServerWebExchange exchange)_;resolve,the,given,parameter,type,and,value,name,into,an,argument,value,param,name,the,name,of,the,value,being,resolved,param,parameter,the,method,parameter,to,resolve,to,an,argument,value,pre,nested,in,case,of,a,link,java,util,optional,declaration,param,exchange,the,current,exchange,return,the,resolved,argument,may,be,code,null;protected,abstract,mono,object,resolve,name,string,name,method,parameter,parameter,server,web,exchange,exchange
AbstractNamedValueArgumentResolver -> protected abstract Mono<Object> resolveName(String name, MethodParameter parameter, ServerWebExchange exchange)_;1492090594;Resolve the given parameter type and value name into an argument value._@param name the name of the value being resolved_@param parameter the method parameter to resolve to an argument value_(pre-nested in case of a {@link java.util.Optional} declaration)_@param exchange the current exchange_@return the resolved argument (may be {@code null});protected abstract Mono<Object> resolveName(String name, MethodParameter parameter, ServerWebExchange exchange)_;resolve,the,given,parameter,type,and,value,name,into,an,argument,value,param,name,the,name,of,the,value,being,resolved,param,parameter,the,method,parameter,to,resolve,to,an,argument,value,pre,nested,in,case,of,a,link,java,util,optional,declaration,param,exchange,the,current,exchange,return,the,resolved,argument,may,be,code,null;protected,abstract,mono,object,resolve,name,string,name,method,parameter,parameter,server,web,exchange,exchange
AbstractNamedValueArgumentResolver -> protected abstract Mono<Object> resolveName(String name, MethodParameter parameter, ServerWebExchange exchange)_;1495868221;Resolve the given parameter type and value name into an argument value._@param name the name of the value being resolved_@param parameter the method parameter to resolve to an argument value_(pre-nested in case of a {@link java.util.Optional} declaration)_@param exchange the current exchange_@return the resolved argument (may be empty {@link Mono});protected abstract Mono<Object> resolveName(String name, MethodParameter parameter, ServerWebExchange exchange)_;resolve,the,given,parameter,type,and,value,name,into,an,argument,value,param,name,the,name,of,the,value,being,resolved,param,parameter,the,method,parameter,to,resolve,to,an,argument,value,pre,nested,in,case,of,a,link,java,util,optional,declaration,param,exchange,the,current,exchange,return,the,resolved,argument,may,be,empty,link,mono;protected,abstract,mono,object,resolve,name,string,name,method,parameter,parameter,server,web,exchange,exchange
AbstractNamedValueArgumentResolver -> protected abstract Mono<Object> resolveName(String name, MethodParameter parameter, ServerWebExchange exchange)_;1496837955;Resolve the given parameter type and value name into an argument value._@param name the name of the value being resolved_@param parameter the method parameter to resolve to an argument value_(pre-nested in case of a {@link java.util.Optional} declaration)_@param exchange the current exchange_@return the resolved argument (may be empty {@link Mono});protected abstract Mono<Object> resolveName(String name, MethodParameter parameter, ServerWebExchange exchange)_;resolve,the,given,parameter,type,and,value,name,into,an,argument,value,param,name,the,name,of,the,value,being,resolved,param,parameter,the,method,parameter,to,resolve,to,an,argument,value,pre,nested,in,case,of,a,link,java,util,optional,declaration,param,exchange,the,current,exchange,return,the,resolved,argument,may,be,empty,link,mono;protected,abstract,mono,object,resolve,name,string,name,method,parameter,parameter,server,web,exchange,exchange
AbstractNamedValueArgumentResolver -> protected abstract Mono<Object> resolveName(String name, MethodParameter parameter, ServerWebExchange exchange)_;1498780456;Resolve the given parameter type and value name into an argument value._@param name the name of the value being resolved_@param parameter the method parameter to resolve to an argument value_(pre-nested in case of a {@link java.util.Optional} declaration)_@param exchange the current exchange_@return the resolved argument (may be empty {@link Mono});protected abstract Mono<Object> resolveName(String name, MethodParameter parameter, ServerWebExchange exchange)_;resolve,the,given,parameter,type,and,value,name,into,an,argument,value,param,name,the,name,of,the,value,being,resolved,param,parameter,the,method,parameter,to,resolve,to,an,argument,value,pre,nested,in,case,of,a,link,java,util,optional,declaration,param,exchange,the,current,exchange,return,the,resolved,argument,may,be,empty,link,mono;protected,abstract,mono,object,resolve,name,string,name,method,parameter,parameter,server,web,exchange,exchange
AbstractNamedValueArgumentResolver -> protected abstract Mono<Object> resolveName(String name, MethodParameter parameter, ServerWebExchange exchange)_;1508532146;Resolve the given parameter type and value name into an argument value._@param name the name of the value being resolved_@param parameter the method parameter to resolve to an argument value_(pre-nested in case of a {@link java.util.Optional} declaration)_@param exchange the current exchange_@return the resolved argument (may be empty {@link Mono});protected abstract Mono<Object> resolveName(String name, MethodParameter parameter, ServerWebExchange exchange)_;resolve,the,given,parameter,type,and,value,name,into,an,argument,value,param,name,the,name,of,the,value,being,resolved,param,parameter,the,method,parameter,to,resolve,to,an,argument,value,pre,nested,in,case,of,a,link,java,util,optional,declaration,param,exchange,the,current,exchange,return,the,resolved,argument,may,be,empty,link,mono;protected,abstract,mono,object,resolve,name,string,name,method,parameter,parameter,server,web,exchange,exchange
AbstractNamedValueArgumentResolver -> protected abstract Mono<Object> resolveName(String name, MethodParameter parameter, ServerWebExchange exchange)_;1530174524;Resolve the given parameter type and value name into an argument value._@param name the name of the value being resolved_@param parameter the method parameter to resolve to an argument value_(pre-nested in case of a {@link java.util.Optional} declaration)_@param exchange the current exchange_@return the resolved argument (may be empty {@link Mono});protected abstract Mono<Object> resolveName(String name, MethodParameter parameter, ServerWebExchange exchange)_;resolve,the,given,parameter,type,and,value,name,into,an,argument,value,param,name,the,name,of,the,value,being,resolved,param,parameter,the,method,parameter,to,resolve,to,an,argument,value,pre,nested,in,case,of,a,link,java,util,optional,declaration,param,exchange,the,current,exchange,return,the,resolved,argument,may,be,empty,link,mono;protected,abstract,mono,object,resolve,name,string,name,method,parameter,parameter,server,web,exchange,exchange
AbstractNamedValueArgumentResolver -> protected abstract Mono<Object> resolveName(String name, MethodParameter parameter, ServerWebExchange exchange)_;1531917703;Resolve the given parameter type and value name into an argument value._@param name the name of the value being resolved_@param parameter the method parameter to resolve to an argument value_(pre-nested in case of a {@link java.util.Optional} declaration)_@param exchange the current exchange_@return the resolved argument (may be empty {@link Mono});protected abstract Mono<Object> resolveName(String name, MethodParameter parameter, ServerWebExchange exchange)_;resolve,the,given,parameter,type,and,value,name,into,an,argument,value,param,name,the,name,of,the,value,being,resolved,param,parameter,the,method,parameter,to,resolve,to,an,argument,value,pre,nested,in,case,of,a,link,java,util,optional,declaration,param,exchange,the,current,exchange,return,the,resolved,argument,may,be,empty,link,mono;protected,abstract,mono,object,resolve,name,string,name,method,parameter,parameter,server,web,exchange,exchange
AbstractNamedValueArgumentResolver -> protected abstract Mono<Object> resolveName(String name, MethodParameter parameter, ServerWebExchange exchange)_;1538753959;Resolve the given parameter type and value name into an argument value._@param name the name of the value being resolved_@param parameter the method parameter to resolve to an argument value_(pre-nested in case of a {@link java.util.Optional} declaration)_@param exchange the current exchange_@return the resolved argument (may be empty {@link Mono});protected abstract Mono<Object> resolveName(String name, MethodParameter parameter, ServerWebExchange exchange)_;resolve,the,given,parameter,type,and,value,name,into,an,argument,value,param,name,the,name,of,the,value,being,resolved,param,parameter,the,method,parameter,to,resolve,to,an,argument,value,pre,nested,in,case,of,a,link,java,util,optional,declaration,param,exchange,the,current,exchange,return,the,resolved,argument,may,be,empty,link,mono;protected,abstract,mono,object,resolve,name,string,name,method,parameter,parameter,server,web,exchange,exchange
AbstractNamedValueArgumentResolver -> private Object applyConversion(Object value, NamedValueInfo namedValueInfo, MethodParameter parameter, 			BindingContext bindingContext, ServerWebExchange exchange);1489433860;Apply type conversion if necessary.;private Object applyConversion(Object value, NamedValueInfo namedValueInfo, MethodParameter parameter,_			BindingContext bindingContext, ServerWebExchange exchange) {__		WebDataBinder binder = bindingContext.createDataBinder(exchange, namedValueInfo.name)__		try {_			value = binder.convertIfNecessary(value, parameter.getParameterType(), parameter)__		}_		catch (ConversionNotSupportedException ex) {_			throw new ServerErrorException("Conversion not supported.", parameter, ex)__		}_		catch (TypeMismatchException ex) {_			throw new ServerWebInputException("Type mismatch.", parameter, ex)__		}_		return value__	};apply,type,conversion,if,necessary;private,object,apply,conversion,object,value,named,value,info,named,value,info,method,parameter,parameter,binding,context,binding,context,server,web,exchange,exchange,web,data,binder,binder,binding,context,create,data,binder,exchange,named,value,info,name,try,value,binder,convert,if,necessary,value,parameter,get,parameter,type,parameter,catch,conversion,not,supported,exception,ex,throw,new,server,error,exception,conversion,not,supported,parameter,ex,catch,type,mismatch,exception,ex,throw,new,server,web,input,exception,type,mismatch,parameter,ex,return,value
AbstractNamedValueArgumentResolver -> private Object applyConversion(Object value, NamedValueInfo namedValueInfo, MethodParameter parameter, 			BindingContext bindingContext, ServerWebExchange exchange);1489535791;Apply type conversion if necessary.;private Object applyConversion(Object value, NamedValueInfo namedValueInfo, MethodParameter parameter,_			BindingContext bindingContext, ServerWebExchange exchange) {__		WebDataBinder binder = bindingContext.createDataBinder(exchange, namedValueInfo.name)__		try {_			value = binder.convertIfNecessary(value, parameter.getParameterType(), parameter)__		}_		catch (ConversionNotSupportedException ex) {_			throw new ServerErrorException("Conversion not supported.", parameter, ex)__		}_		catch (TypeMismatchException ex) {_			throw new ServerWebInputException("Type mismatch.", parameter, ex)__		}_		return value__	};apply,type,conversion,if,necessary;private,object,apply,conversion,object,value,named,value,info,named,value,info,method,parameter,parameter,binding,context,binding,context,server,web,exchange,exchange,web,data,binder,binder,binding,context,create,data,binder,exchange,named,value,info,name,try,value,binder,convert,if,necessary,value,parameter,get,parameter,type,parameter,catch,conversion,not,supported,exception,ex,throw,new,server,error,exception,conversion,not,supported,parameter,ex,catch,type,mismatch,exception,ex,throw,new,server,web,input,exception,type,mismatch,parameter,ex,return,value
AbstractNamedValueArgumentResolver -> private Object applyConversion(Object value, NamedValueInfo namedValueInfo, MethodParameter parameter, 			BindingContext bindingContext, ServerWebExchange exchange);1490354145;Apply type conversion if necessary.;private Object applyConversion(Object value, NamedValueInfo namedValueInfo, MethodParameter parameter,_			BindingContext bindingContext, ServerWebExchange exchange) {__		WebDataBinder binder = bindingContext.createDataBinder(exchange, namedValueInfo.name)__		try {_			value = binder.convertIfNecessary(value, parameter.getParameterType(), parameter)__		}_		catch (ConversionNotSupportedException ex) {_			throw new ServerErrorException("Conversion not supported.", parameter, ex)__		}_		catch (TypeMismatchException ex) {_			throw new ServerWebInputException("Type mismatch.", parameter, ex)__		}_		return value__	};apply,type,conversion,if,necessary;private,object,apply,conversion,object,value,named,value,info,named,value,info,method,parameter,parameter,binding,context,binding,context,server,web,exchange,exchange,web,data,binder,binder,binding,context,create,data,binder,exchange,named,value,info,name,try,value,binder,convert,if,necessary,value,parameter,get,parameter,type,parameter,catch,conversion,not,supported,exception,ex,throw,new,server,error,exception,conversion,not,supported,parameter,ex,catch,type,mismatch,exception,ex,throw,new,server,web,input,exception,type,mismatch,parameter,ex,return,value
AbstractNamedValueArgumentResolver -> private Object applyConversion(Object value, NamedValueInfo namedValueInfo, MethodParameter parameter, 			BindingContext bindingContext, ServerWebExchange exchange);1492090594;Apply type conversion if necessary.;private Object applyConversion(Object value, NamedValueInfo namedValueInfo, MethodParameter parameter,_			BindingContext bindingContext, ServerWebExchange exchange) {__		WebDataBinder binder = bindingContext.createDataBinder(exchange, namedValueInfo.name)__		try {_			value = binder.convertIfNecessary(value, parameter.getParameterType(), parameter)__		}_		catch (ConversionNotSupportedException ex) {_			throw new ServerErrorException("Conversion not supported.", parameter, ex)__		}_		catch (TypeMismatchException ex) {_			throw new ServerWebInputException("Type mismatch.", parameter, ex)__		}_		return value__	};apply,type,conversion,if,necessary;private,object,apply,conversion,object,value,named,value,info,named,value,info,method,parameter,parameter,binding,context,binding,context,server,web,exchange,exchange,web,data,binder,binder,binding,context,create,data,binder,exchange,named,value,info,name,try,value,binder,convert,if,necessary,value,parameter,get,parameter,type,parameter,catch,conversion,not,supported,exception,ex,throw,new,server,error,exception,conversion,not,supported,parameter,ex,catch,type,mismatch,exception,ex,throw,new,server,web,input,exception,type,mismatch,parameter,ex,return,value
AbstractNamedValueArgumentResolver -> private Object applyConversion(Object value, NamedValueInfo namedValueInfo, MethodParameter parameter, 			BindingContext bindingContext, ServerWebExchange exchange);1495868221;Apply type conversion if necessary.;private Object applyConversion(Object value, NamedValueInfo namedValueInfo, MethodParameter parameter,_			BindingContext bindingContext, ServerWebExchange exchange) {__		WebDataBinder binder = bindingContext.createDataBinder(exchange, namedValueInfo.name)__		try {_			value = binder.convertIfNecessary(value, parameter.getParameterType(), parameter)__		}_		catch (ConversionNotSupportedException ex) {_			throw new ServerErrorException("Conversion not supported.", parameter, ex)__		}_		catch (TypeMismatchException ex) {_			throw new ServerWebInputException("Type mismatch.", parameter, ex)__		}_		return value__	};apply,type,conversion,if,necessary;private,object,apply,conversion,object,value,named,value,info,named,value,info,method,parameter,parameter,binding,context,binding,context,server,web,exchange,exchange,web,data,binder,binder,binding,context,create,data,binder,exchange,named,value,info,name,try,value,binder,convert,if,necessary,value,parameter,get,parameter,type,parameter,catch,conversion,not,supported,exception,ex,throw,new,server,error,exception,conversion,not,supported,parameter,ex,catch,type,mismatch,exception,ex,throw,new,server,web,input,exception,type,mismatch,parameter,ex,return,value
AbstractNamedValueArgumentResolver -> protected void handleMissingValue(String name, MethodParameter parameter);1485986572;Invoked when a named value is required, but_{@link #resolveName(String, MethodParameter, ServerWebExchange)} returned_{@code null} and there is no default value. Subclasses typically throw an_exception in this case._@param name the name for the value_@param parameter the method parameter;protected void handleMissingValue(String name, MethodParameter parameter) {_		String typeName = parameter.getNestedParameterType().getSimpleName()__		throw new ServerWebInputException("Missing argument '" + name + "' for method " +_				"parameter of type " + typeName, parameter)__	};invoked,when,a,named,value,is,required,but,link,resolve,name,string,method,parameter,server,web,exchange,returned,code,null,and,there,is,no,default,value,subclasses,typically,throw,an,exception,in,this,case,param,name,the,name,for,the,value,param,parameter,the,method,parameter;protected,void,handle,missing,value,string,name,method,parameter,parameter,string,type,name,parameter,get,nested,parameter,type,get,simple,name,throw,new,server,web,input,exception,missing,argument,name,for,method,parameter,of,type,type,name,parameter
AbstractNamedValueArgumentResolver -> protected void handleMissingValue(String name, MethodParameter parameter);1487760984;Invoked when a named value is required, but_{@link #resolveName(String, MethodParameter, ServerWebExchange)} returned_{@code null} and there is no default value. Subclasses typically throw an_exception in this case._@param name the name for the value_@param parameter the method parameter;protected void handleMissingValue(String name, MethodParameter parameter) {_		String typeName = parameter.getNestedParameterType().getSimpleName()__		throw new ServerWebInputException("Missing argument '" + name + "' for method " +_				"parameter of type " + typeName, parameter)__	};invoked,when,a,named,value,is,required,but,link,resolve,name,string,method,parameter,server,web,exchange,returned,code,null,and,there,is,no,default,value,subclasses,typically,throw,an,exception,in,this,case,param,name,the,name,for,the,value,param,parameter,the,method,parameter;protected,void,handle,missing,value,string,name,method,parameter,parameter,string,type,name,parameter,get,nested,parameter,type,get,simple,name,throw,new,server,web,input,exception,missing,argument,name,for,method,parameter,of,type,type,name,parameter
AbstractNamedValueArgumentResolver -> protected void handleMissingValue(String name, MethodParameter parameter);1489433860;Invoked when a named value is required, but_{@link #resolveName(String, MethodParameter, ServerWebExchange)} returned_{@code null} and there is no default value. Subclasses typically throw an_exception in this case._@param name the name for the value_@param parameter the method parameter;protected void handleMissingValue(String name, MethodParameter parameter) {_		String typeName = parameter.getNestedParameterType().getSimpleName()__		throw new ServerWebInputException("Missing argument '" + name + "' for method " +_				"parameter of type " + typeName, parameter)__	};invoked,when,a,named,value,is,required,but,link,resolve,name,string,method,parameter,server,web,exchange,returned,code,null,and,there,is,no,default,value,subclasses,typically,throw,an,exception,in,this,case,param,name,the,name,for,the,value,param,parameter,the,method,parameter;protected,void,handle,missing,value,string,name,method,parameter,parameter,string,type,name,parameter,get,nested,parameter,type,get,simple,name,throw,new,server,web,input,exception,missing,argument,name,for,method,parameter,of,type,type,name,parameter
AbstractNamedValueArgumentResolver -> protected void handleMissingValue(String name, MethodParameter parameter);1489535791;Invoked when a named value is required, but_{@link #resolveName(String, MethodParameter, ServerWebExchange)} returned_{@code null} and there is no default value. Subclasses typically throw an_exception in this case._@param name the name for the value_@param parameter the method parameter;protected void handleMissingValue(String name, MethodParameter parameter) {_		String typeName = parameter.getNestedParameterType().getSimpleName()__		throw new ServerWebInputException("Missing argument '" + name + "' for method " +_				"parameter of type " + typeName, parameter)__	};invoked,when,a,named,value,is,required,but,link,resolve,name,string,method,parameter,server,web,exchange,returned,code,null,and,there,is,no,default,value,subclasses,typically,throw,an,exception,in,this,case,param,name,the,name,for,the,value,param,parameter,the,method,parameter;protected,void,handle,missing,value,string,name,method,parameter,parameter,string,type,name,parameter,get,nested,parameter,type,get,simple,name,throw,new,server,web,input,exception,missing,argument,name,for,method,parameter,of,type,type,name,parameter
AbstractNamedValueArgumentResolver -> protected void handleMissingValue(String name, MethodParameter parameter);1490354145;Invoked when a named value is required, but_{@link #resolveName(String, MethodParameter, ServerWebExchange)} returned_{@code null} and there is no default value. Subclasses typically throw an_exception in this case._@param name the name for the value_@param parameter the method parameter;protected void handleMissingValue(String name, MethodParameter parameter) {_		String typeName = parameter.getNestedParameterType().getSimpleName()__		throw new ServerWebInputException("Missing argument '" + name + "' for method " +_				"parameter of type " + typeName, parameter)__	};invoked,when,a,named,value,is,required,but,link,resolve,name,string,method,parameter,server,web,exchange,returned,code,null,and,there,is,no,default,value,subclasses,typically,throw,an,exception,in,this,case,param,name,the,name,for,the,value,param,parameter,the,method,parameter;protected,void,handle,missing,value,string,name,method,parameter,parameter,string,type,name,parameter,get,nested,parameter,type,get,simple,name,throw,new,server,web,input,exception,missing,argument,name,for,method,parameter,of,type,type,name,parameter
AbstractNamedValueArgumentResolver -> protected void handleMissingValue(String name, MethodParameter parameter);1492090594;Invoked when a named value is required, but_{@link #resolveName(String, MethodParameter, ServerWebExchange)} returned_{@code null} and there is no default value. Subclasses typically throw an_exception in this case._@param name the name for the value_@param parameter the method parameter;protected void handleMissingValue(String name, MethodParameter parameter) {_		String typeName = parameter.getNestedParameterType().getSimpleName()__		throw new ServerWebInputException("Missing argument '" + name + "' for method " +_				"parameter of type " + typeName, parameter)__	};invoked,when,a,named,value,is,required,but,link,resolve,name,string,method,parameter,server,web,exchange,returned,code,null,and,there,is,no,default,value,subclasses,typically,throw,an,exception,in,this,case,param,name,the,name,for,the,value,param,parameter,the,method,parameter;protected,void,handle,missing,value,string,name,method,parameter,parameter,string,type,name,parameter,get,nested,parameter,type,get,simple,name,throw,new,server,web,input,exception,missing,argument,name,for,method,parameter,of,type,type,name,parameter
AbstractNamedValueArgumentResolver -> protected void handleMissingValue(String name, MethodParameter parameter);1495868221;Invoked when a named value is required, but_{@link #resolveName(String, MethodParameter, ServerWebExchange)} returned_{@code null} and there is no default value. Subclasses typically throw an_exception in this case._@param name the name for the value_@param parameter the method parameter;protected void handleMissingValue(String name, MethodParameter parameter) {_		String typeName = parameter.getNestedParameterType().getSimpleName()__		throw new ServerWebInputException("Missing argument '" + name + "' for method " +_				"parameter of type " + typeName, parameter)__	};invoked,when,a,named,value,is,required,but,link,resolve,name,string,method,parameter,server,web,exchange,returned,code,null,and,there,is,no,default,value,subclasses,typically,throw,an,exception,in,this,case,param,name,the,name,for,the,value,param,parameter,the,method,parameter;protected,void,handle,missing,value,string,name,method,parameter,parameter,string,type,name,parameter,get,nested,parameter,type,get,simple,name,throw,new,server,web,input,exception,missing,argument,name,for,method,parameter,of,type,type,name,parameter
AbstractNamedValueArgumentResolver -> protected void handleMissingValue(String name, MethodParameter parameter);1496837955;Invoked when a named value is required, but_{@link #resolveName(String, MethodParameter, ServerWebExchange)} returned_{@code null} and there is no default value. Subclasses typically throw an_exception in this case._@param name the name for the value_@param parameter the method parameter;protected void handleMissingValue(String name, MethodParameter parameter) {_		String typeName = parameter.getNestedParameterType().getSimpleName()__		throw new ServerWebInputException("Missing argument '" + name + "' for method " +_				"parameter of type " + typeName, parameter)__	};invoked,when,a,named,value,is,required,but,link,resolve,name,string,method,parameter,server,web,exchange,returned,code,null,and,there,is,no,default,value,subclasses,typically,throw,an,exception,in,this,case,param,name,the,name,for,the,value,param,parameter,the,method,parameter;protected,void,handle,missing,value,string,name,method,parameter,parameter,string,type,name,parameter,get,nested,parameter,type,get,simple,name,throw,new,server,web,input,exception,missing,argument,name,for,method,parameter,of,type,type,name,parameter
AbstractNamedValueArgumentResolver -> protected void handleMissingValue(String name, MethodParameter parameter);1498780456;Invoked when a named value is required, but_{@link #resolveName(String, MethodParameter, ServerWebExchange)} returned_{@code null} and there is no default value. Subclasses typically throw an_exception in this case._@param name the name for the value_@param parameter the method parameter;protected void handleMissingValue(String name, MethodParameter parameter) {_		String typeName = parameter.getNestedParameterType().getSimpleName()__		throw new ServerWebInputException("Missing argument '" + name + "' for method " +_				"parameter of type " + typeName, parameter)__	};invoked,when,a,named,value,is,required,but,link,resolve,name,string,method,parameter,server,web,exchange,returned,code,null,and,there,is,no,default,value,subclasses,typically,throw,an,exception,in,this,case,param,name,the,name,for,the,value,param,parameter,the,method,parameter;protected,void,handle,missing,value,string,name,method,parameter,parameter,string,type,name,parameter,get,nested,parameter,type,get,simple,name,throw,new,server,web,input,exception,missing,argument,name,for,method,parameter,of,type,type,name,parameter
AbstractNamedValueArgumentResolver -> protected void handleMissingValue(String name, MethodParameter parameter);1508532146;Invoked when a named value is required, but_{@link #resolveName(String, MethodParameter, ServerWebExchange)} returned_{@code null} and there is no default value. Subclasses typically throw an_exception in this case._@param name the name for the value_@param parameter the method parameter;protected void handleMissingValue(String name, MethodParameter parameter) {_		String typeName = parameter.getNestedParameterType().getSimpleName()__		throw new ServerWebInputException("Missing argument '" + name + "' for method " +_				"parameter of type " + typeName, parameter)__	};invoked,when,a,named,value,is,required,but,link,resolve,name,string,method,parameter,server,web,exchange,returned,code,null,and,there,is,no,default,value,subclasses,typically,throw,an,exception,in,this,case,param,name,the,name,for,the,value,param,parameter,the,method,parameter;protected,void,handle,missing,value,string,name,method,parameter,parameter,string,type,name,parameter,get,nested,parameter,type,get,simple,name,throw,new,server,web,input,exception,missing,argument,name,for,method,parameter,of,type,type,name,parameter
AbstractNamedValueArgumentResolver -> protected void handleMissingValue(String name, MethodParameter parameter);1530174524;Invoked when a named value is required, but_{@link #resolveName(String, MethodParameter, ServerWebExchange)} returned_{@code null} and there is no default value. Subclasses typically throw an_exception in this case._@param name the name for the value_@param parameter the method parameter;protected void handleMissingValue(String name, MethodParameter parameter) {_		String typeName = parameter.getNestedParameterType().getSimpleName()__		throw new ServerWebInputException("Missing argument '" + name + "' for method " +_				"parameter of type " + typeName, parameter)__	};invoked,when,a,named,value,is,required,but,link,resolve,name,string,method,parameter,server,web,exchange,returned,code,null,and,there,is,no,default,value,subclasses,typically,throw,an,exception,in,this,case,param,name,the,name,for,the,value,param,parameter,the,method,parameter;protected,void,handle,missing,value,string,name,method,parameter,parameter,string,type,name,parameter,get,nested,parameter,type,get,simple,name,throw,new,server,web,input,exception,missing,argument,name,for,method,parameter,of,type,type,name,parameter
AbstractNamedValueArgumentResolver -> protected void handleMissingValue(String name, MethodParameter parameter);1531917703;Invoked when a named value is required, but_{@link #resolveName(String, MethodParameter, ServerWebExchange)} returned_{@code null} and there is no default value. Subclasses typically throw an_exception in this case._@param name the name for the value_@param parameter the method parameter;protected void handleMissingValue(String name, MethodParameter parameter) {_		String typeName = parameter.getNestedParameterType().getSimpleName()__		throw new ServerWebInputException("Missing argument '" + name + "' for method " +_				"parameter of type " + typeName, parameter)__	};invoked,when,a,named,value,is,required,but,link,resolve,name,string,method,parameter,server,web,exchange,returned,code,null,and,there,is,no,default,value,subclasses,typically,throw,an,exception,in,this,case,param,name,the,name,for,the,value,param,parameter,the,method,parameter;protected,void,handle,missing,value,string,name,method,parameter,parameter,string,type,name,parameter,get,nested,parameter,type,get,simple,name,throw,new,server,web,input,exception,missing,argument,name,for,method,parameter,of,type,type,name,parameter
AbstractNamedValueArgumentResolver -> protected void handleMissingValue(String name, MethodParameter parameter);1538753959;Invoked when a named value is required, but_{@link #resolveName(String, MethodParameter, ServerWebExchange)} returned_{@code null} and there is no default value. Subclasses typically throw an_exception in this case._@param name the name for the value_@param parameter the method parameter;protected void handleMissingValue(String name, MethodParameter parameter) {_		String typeName = parameter.getNestedParameterType().getSimpleName()__		throw new ServerWebInputException("Missing argument '" + name + "' for method " +_				"parameter of type " + typeName, parameter)__	};invoked,when,a,named,value,is,required,but,link,resolve,name,string,method,parameter,server,web,exchange,returned,code,null,and,there,is,no,default,value,subclasses,typically,throw,an,exception,in,this,case,param,name,the,name,for,the,value,param,parameter,the,method,parameter;protected,void,handle,missing,value,string,name,method,parameter,parameter,string,type,name,parameter,get,nested,parameter,type,get,simple,name,throw,new,server,web,input,exception,missing,argument,name,for,method,parameter,of,type,type,name,parameter
AbstractNamedValueArgumentResolver -> @SuppressWarnings("UnusedParameters") 	protected void handleResolvedValue(Object arg, String name, MethodParameter parameter, 			Model model, ServerWebExchange exchange);1485986572;Invoked after a value is resolved._@param arg the resolved argument value_@param name the argument name_@param parameter the argument parameter type_@param model the model_@param exchange the current exchange;@SuppressWarnings("UnusedParameters")_	protected void handleResolvedValue(Object arg, String name, MethodParameter parameter,_			Model model, ServerWebExchange exchange) {_	};invoked,after,a,value,is,resolved,param,arg,the,resolved,argument,value,param,name,the,argument,name,param,parameter,the,argument,parameter,type,param,model,the,model,param,exchange,the,current,exchange;suppress,warnings,unused,parameters,protected,void,handle,resolved,value,object,arg,string,name,method,parameter,parameter,model,model,server,web,exchange,exchange
AbstractNamedValueArgumentResolver -> @SuppressWarnings("UnusedParameters") 	protected void handleResolvedValue(Object arg, String name, MethodParameter parameter, 			Model model, ServerWebExchange exchange);1487760984;Invoked after a value is resolved._@param arg the resolved argument value_@param name the argument name_@param parameter the argument parameter type_@param model the model_@param exchange the current exchange;@SuppressWarnings("UnusedParameters")_	protected void handleResolvedValue(Object arg, String name, MethodParameter parameter,_			Model model, ServerWebExchange exchange) {_	};invoked,after,a,value,is,resolved,param,arg,the,resolved,argument,value,param,name,the,argument,name,param,parameter,the,argument,parameter,type,param,model,the,model,param,exchange,the,current,exchange;suppress,warnings,unused,parameters,protected,void,handle,resolved,value,object,arg,string,name,method,parameter,parameter,model,model,server,web,exchange,exchange
AbstractNamedValueArgumentResolver -> @SuppressWarnings("UnusedParameters") 	protected void handleResolvedValue(Object arg, String name, MethodParameter parameter, 			Model model, ServerWebExchange exchange);1489433860;Invoked after a value is resolved._@param arg the resolved argument value_@param name the argument name_@param parameter the argument parameter type_@param model the model_@param exchange the current exchange;@SuppressWarnings("UnusedParameters")_	protected void handleResolvedValue(Object arg, String name, MethodParameter parameter,_			Model model, ServerWebExchange exchange) {_	};invoked,after,a,value,is,resolved,param,arg,the,resolved,argument,value,param,name,the,argument,name,param,parameter,the,argument,parameter,type,param,model,the,model,param,exchange,the,current,exchange;suppress,warnings,unused,parameters,protected,void,handle,resolved,value,object,arg,string,name,method,parameter,parameter,model,model,server,web,exchange,exchange
AbstractNamedValueArgumentResolver -> @SuppressWarnings("UnusedParameters") 	protected void handleResolvedValue(Object arg, String name, MethodParameter parameter, 			Model model, ServerWebExchange exchange);1489535791;Invoked after a value is resolved._@param arg the resolved argument value_@param name the argument name_@param parameter the argument parameter type_@param model the model_@param exchange the current exchange;@SuppressWarnings("UnusedParameters")_	protected void handleResolvedValue(Object arg, String name, MethodParameter parameter,_			Model model, ServerWebExchange exchange) {_	};invoked,after,a,value,is,resolved,param,arg,the,resolved,argument,value,param,name,the,argument,name,param,parameter,the,argument,parameter,type,param,model,the,model,param,exchange,the,current,exchange;suppress,warnings,unused,parameters,protected,void,handle,resolved,value,object,arg,string,name,method,parameter,parameter,model,model,server,web,exchange,exchange
AbstractNamedValueArgumentResolver -> protected abstract Mono<Object> resolveName(String name, MethodParameter parameter, 			ServerWebExchange exchange)_;1485986572;Resolve the given parameter type and value name into an argument value._@param name the name of the value being resolved_@param parameter the method parameter to resolve to an argument value_(pre-nested in case of a {@link java.util.Optional} declaration)_@param exchange the current exchange_@return the resolved argument (may be {@code null});protected abstract Mono<Object> resolveName(String name, MethodParameter parameter,_			ServerWebExchange exchange)_;resolve,the,given,parameter,type,and,value,name,into,an,argument,value,param,name,the,name,of,the,value,being,resolved,param,parameter,the,method,parameter,to,resolve,to,an,argument,value,pre,nested,in,case,of,a,link,java,util,optional,declaration,param,exchange,the,current,exchange,return,the,resolved,argument,may,be,code,null;protected,abstract,mono,object,resolve,name,string,name,method,parameter,parameter,server,web,exchange,exchange
AbstractNamedValueArgumentResolver -> protected abstract Mono<Object> resolveName(String name, MethodParameter parameter, 			ServerWebExchange exchange)_;1487760984;Resolve the given parameter type and value name into an argument value._@param name the name of the value being resolved_@param parameter the method parameter to resolve to an argument value_(pre-nested in case of a {@link java.util.Optional} declaration)_@param exchange the current exchange_@return the resolved argument (may be {@code null});protected abstract Mono<Object> resolveName(String name, MethodParameter parameter,_			ServerWebExchange exchange)_;resolve,the,given,parameter,type,and,value,name,into,an,argument,value,param,name,the,name,of,the,value,being,resolved,param,parameter,the,method,parameter,to,resolve,to,an,argument,value,pre,nested,in,case,of,a,link,java,util,optional,declaration,param,exchange,the,current,exchange,return,the,resolved,argument,may,be,code,null;protected,abstract,mono,object,resolve,name,string,name,method,parameter,parameter,server,web,exchange,exchange
AbstractNamedValueArgumentResolver -> protected abstract Mono<Object> resolveName(String name, MethodParameter parameter, 			ServerWebExchange exchange)_;1489433860;Resolve the given parameter type and value name into an argument value._@param name the name of the value being resolved_@param parameter the method parameter to resolve to an argument value_(pre-nested in case of a {@link java.util.Optional} declaration)_@param exchange the current exchange_@return the resolved argument (may be {@code null});protected abstract Mono<Object> resolveName(String name, MethodParameter parameter,_			ServerWebExchange exchange)_;resolve,the,given,parameter,type,and,value,name,into,an,argument,value,param,name,the,name,of,the,value,being,resolved,param,parameter,the,method,parameter,to,resolve,to,an,argument,value,pre,nested,in,case,of,a,link,java,util,optional,declaration,param,exchange,the,current,exchange,return,the,resolved,argument,may,be,code,null;protected,abstract,mono,object,resolve,name,string,name,method,parameter,parameter,server,web,exchange,exchange
AbstractNamedValueArgumentResolver -> protected abstract Mono<Object> resolveName(String name, MethodParameter parameter, 			ServerWebExchange exchange)_;1489535791;Resolve the given parameter type and value name into an argument value._@param name the name of the value being resolved_@param parameter the method parameter to resolve to an argument value_(pre-nested in case of a {@link java.util.Optional} declaration)_@param exchange the current exchange_@return the resolved argument (may be {@code null});protected abstract Mono<Object> resolveName(String name, MethodParameter parameter,_			ServerWebExchange exchange)_;resolve,the,given,parameter,type,and,value,name,into,an,argument,value,param,name,the,name,of,the,value,being,resolved,param,parameter,the,method,parameter,to,resolve,to,an,argument,value,pre,nested,in,case,of,a,link,java,util,optional,declaration,param,exchange,the,current,exchange,return,the,resolved,argument,may,be,code,null;protected,abstract,mono,object,resolve,name,string,name,method,parameter,parameter,server,web,exchange,exchange
AbstractNamedValueArgumentResolver -> private NamedValueInfo updateNamedValueInfo(MethodParameter parameter, NamedValueInfo info);1485986572;Create a new NamedValueInfo based on the given NamedValueInfo with_sanitized values.;private NamedValueInfo updateNamedValueInfo(MethodParameter parameter, NamedValueInfo info) {_		String name = info.name__		if (info.name.length() == 0) {_			name = parameter.getParameterName()__			if (name == null) {_				String type = parameter.getNestedParameterType().getName()__				throw new IllegalArgumentException("Name for argument type [" + type + "] not " +_						"available, and parameter name information not found in class file either.")__			}_		}_		String defaultValue = (ValueConstants.DEFAULT_NONE.equals(info.defaultValue) ? null : info.defaultValue)__		return new NamedValueInfo(name, info.required, defaultValue)__	};create,a,new,named,value,info,based,on,the,given,named,value,info,with,sanitized,values;private,named,value,info,update,named,value,info,method,parameter,parameter,named,value,info,info,string,name,info,name,if,info,name,length,0,name,parameter,get,parameter,name,if,name,null,string,type,parameter,get,nested,parameter,type,get,name,throw,new,illegal,argument,exception,name,for,argument,type,type,not,available,and,parameter,name,information,not,found,in,class,file,either,string,default,value,value,constants,equals,info,default,value,null,info,default,value,return,new,named,value,info,name,info,required,default,value
AbstractNamedValueArgumentResolver -> private NamedValueInfo updateNamedValueInfo(MethodParameter parameter, NamedValueInfo info);1487760984;Create a new NamedValueInfo based on the given NamedValueInfo with_sanitized values.;private NamedValueInfo updateNamedValueInfo(MethodParameter parameter, NamedValueInfo info) {_		String name = info.name__		if (info.name.isEmpty()) {_			name = parameter.getParameterName()__			if (name == null) {_				String type = parameter.getNestedParameterType().getName()__				throw new IllegalArgumentException("Name for argument type [" + type + "] not " +_						"available, and parameter name information not found in class file either.")__			}_		}_		String defaultValue = (ValueConstants.DEFAULT_NONE.equals(info.defaultValue) ? null : info.defaultValue)__		return new NamedValueInfo(name, info.required, defaultValue)__	};create,a,new,named,value,info,based,on,the,given,named,value,info,with,sanitized,values;private,named,value,info,update,named,value,info,method,parameter,parameter,named,value,info,info,string,name,info,name,if,info,name,is,empty,name,parameter,get,parameter,name,if,name,null,string,type,parameter,get,nested,parameter,type,get,name,throw,new,illegal,argument,exception,name,for,argument,type,type,not,available,and,parameter,name,information,not,found,in,class,file,either,string,default,value,value,constants,equals,info,default,value,null,info,default,value,return,new,named,value,info,name,info,required,default,value
AbstractNamedValueArgumentResolver -> private NamedValueInfo updateNamedValueInfo(MethodParameter parameter, NamedValueInfo info);1489433860;Create a new NamedValueInfo based on the given NamedValueInfo with_sanitized values.;private NamedValueInfo updateNamedValueInfo(MethodParameter parameter, NamedValueInfo info) {_		String name = info.name__		if (info.name.isEmpty()) {_			name = parameter.getParameterName()__			if (name == null) {_				String type = parameter.getNestedParameterType().getName()__				throw new IllegalArgumentException("Name for argument type [" + type + "] not " +_						"available, and parameter name information not found in class file either.")__			}_		}_		String defaultValue = (ValueConstants.DEFAULT_NONE.equals(info.defaultValue) ? null : info.defaultValue)__		return new NamedValueInfo(name, info.required, defaultValue)__	};create,a,new,named,value,info,based,on,the,given,named,value,info,with,sanitized,values;private,named,value,info,update,named,value,info,method,parameter,parameter,named,value,info,info,string,name,info,name,if,info,name,is,empty,name,parameter,get,parameter,name,if,name,null,string,type,parameter,get,nested,parameter,type,get,name,throw,new,illegal,argument,exception,name,for,argument,type,type,not,available,and,parameter,name,information,not,found,in,class,file,either,string,default,value,value,constants,equals,info,default,value,null,info,default,value,return,new,named,value,info,name,info,required,default,value
AbstractNamedValueArgumentResolver -> private NamedValueInfo updateNamedValueInfo(MethodParameter parameter, NamedValueInfo info);1489535791;Create a new NamedValueInfo based on the given NamedValueInfo with_sanitized values.;private NamedValueInfo updateNamedValueInfo(MethodParameter parameter, NamedValueInfo info) {_		String name = info.name__		if (info.name.isEmpty()) {_			name = parameter.getParameterName()__			if (name == null) {_				String type = parameter.getNestedParameterType().getName()__				throw new IllegalArgumentException("Name for argument type [" + type + "] not " +_						"available, and parameter name information not found in class file either.")__			}_		}_		String defaultValue = (ValueConstants.DEFAULT_NONE.equals(info.defaultValue) ? null : info.defaultValue)__		return new NamedValueInfo(name, info.required, defaultValue)__	};create,a,new,named,value,info,based,on,the,given,named,value,info,with,sanitized,values;private,named,value,info,update,named,value,info,method,parameter,parameter,named,value,info,info,string,name,info,name,if,info,name,is,empty,name,parameter,get,parameter,name,if,name,null,string,type,parameter,get,nested,parameter,type,get,name,throw,new,illegal,argument,exception,name,for,argument,type,type,not,available,and,parameter,name,information,not,found,in,class,file,either,string,default,value,value,constants,equals,info,default,value,null,info,default,value,return,new,named,value,info,name,info,required,default,value
AbstractNamedValueArgumentResolver -> private NamedValueInfo updateNamedValueInfo(MethodParameter parameter, NamedValueInfo info);1490354145;Create a new NamedValueInfo based on the given NamedValueInfo with_sanitized values.;private NamedValueInfo updateNamedValueInfo(MethodParameter parameter, NamedValueInfo info) {_		String name = info.name__		if (info.name.isEmpty()) {_			name = parameter.getParameterName()__			if (name == null) {_				String type = parameter.getNestedParameterType().getName()__				throw new IllegalArgumentException("Name for argument type [" + type + "] not " +_						"available, and parameter name information not found in class file either.")__			}_		}_		String defaultValue = (ValueConstants.DEFAULT_NONE.equals(info.defaultValue) ? null : info.defaultValue)__		return new NamedValueInfo(name, info.required, defaultValue)__	};create,a,new,named,value,info,based,on,the,given,named,value,info,with,sanitized,values;private,named,value,info,update,named,value,info,method,parameter,parameter,named,value,info,info,string,name,info,name,if,info,name,is,empty,name,parameter,get,parameter,name,if,name,null,string,type,parameter,get,nested,parameter,type,get,name,throw,new,illegal,argument,exception,name,for,argument,type,type,not,available,and,parameter,name,information,not,found,in,class,file,either,string,default,value,value,constants,equals,info,default,value,null,info,default,value,return,new,named,value,info,name,info,required,default,value
AbstractNamedValueArgumentResolver -> private NamedValueInfo updateNamedValueInfo(MethodParameter parameter, NamedValueInfo info);1492090594;Create a new NamedValueInfo based on the given NamedValueInfo with_sanitized values.;private NamedValueInfo updateNamedValueInfo(MethodParameter parameter, NamedValueInfo info) {_		String name = info.name__		if (info.name.isEmpty()) {_			name = parameter.getParameterName()__			if (name == null) {_				String type = parameter.getNestedParameterType().getName()__				throw new IllegalArgumentException("Name for argument type [" + type + "] not " +_						"available, and parameter name information not found in class file either.")__			}_		}_		String defaultValue = (ValueConstants.DEFAULT_NONE.equals(info.defaultValue) ? null : info.defaultValue)__		return new NamedValueInfo(name, info.required, defaultValue)__	};create,a,new,named,value,info,based,on,the,given,named,value,info,with,sanitized,values;private,named,value,info,update,named,value,info,method,parameter,parameter,named,value,info,info,string,name,info,name,if,info,name,is,empty,name,parameter,get,parameter,name,if,name,null,string,type,parameter,get,nested,parameter,type,get,name,throw,new,illegal,argument,exception,name,for,argument,type,type,not,available,and,parameter,name,information,not,found,in,class,file,either,string,default,value,value,constants,equals,info,default,value,null,info,default,value,return,new,named,value,info,name,info,required,default,value
AbstractNamedValueArgumentResolver -> private NamedValueInfo updateNamedValueInfo(MethodParameter parameter, NamedValueInfo info);1495868221;Create a new NamedValueInfo based on the given NamedValueInfo with_sanitized values.;private NamedValueInfo updateNamedValueInfo(MethodParameter parameter, NamedValueInfo info) {_		String name = info.name__		if (info.name.isEmpty()) {_			name = parameter.getParameterName()__			if (name == null) {_				String type = parameter.getNestedParameterType().getName()__				throw new IllegalArgumentException("Name for argument type [" + type + "] not " +_						"available, and parameter name information not found in class file either.")__			}_		}_		String defaultValue = (ValueConstants.DEFAULT_NONE.equals(info.defaultValue) ? null : info.defaultValue)__		return new NamedValueInfo(name, info.required, defaultValue)__	};create,a,new,named,value,info,based,on,the,given,named,value,info,with,sanitized,values;private,named,value,info,update,named,value,info,method,parameter,parameter,named,value,info,info,string,name,info,name,if,info,name,is,empty,name,parameter,get,parameter,name,if,name,null,string,type,parameter,get,nested,parameter,type,get,name,throw,new,illegal,argument,exception,name,for,argument,type,type,not,available,and,parameter,name,information,not,found,in,class,file,either,string,default,value,value,constants,equals,info,default,value,null,info,default,value,return,new,named,value,info,name,info,required,default,value
AbstractNamedValueArgumentResolver -> private NamedValueInfo updateNamedValueInfo(MethodParameter parameter, NamedValueInfo info);1496837955;Create a new NamedValueInfo based on the given NamedValueInfo with_sanitized values.;private NamedValueInfo updateNamedValueInfo(MethodParameter parameter, NamedValueInfo info) {_		String name = info.name__		if (info.name.isEmpty()) {_			name = parameter.getParameterName()__			if (name == null) {_				String type = parameter.getNestedParameterType().getName()__				throw new IllegalArgumentException("Name for argument type [" + type + "] not " +_						"available, and parameter name information not found in class file either.")__			}_		}_		String defaultValue = (ValueConstants.DEFAULT_NONE.equals(info.defaultValue) ? null : info.defaultValue)__		return new NamedValueInfo(name, info.required, defaultValue)__	};create,a,new,named,value,info,based,on,the,given,named,value,info,with,sanitized,values;private,named,value,info,update,named,value,info,method,parameter,parameter,named,value,info,info,string,name,info,name,if,info,name,is,empty,name,parameter,get,parameter,name,if,name,null,string,type,parameter,get,nested,parameter,type,get,name,throw,new,illegal,argument,exception,name,for,argument,type,type,not,available,and,parameter,name,information,not,found,in,class,file,either,string,default,value,value,constants,equals,info,default,value,null,info,default,value,return,new,named,value,info,name,info,required,default,value
AbstractNamedValueArgumentResolver -> private NamedValueInfo updateNamedValueInfo(MethodParameter parameter, NamedValueInfo info);1498780456;Create a new NamedValueInfo based on the given NamedValueInfo with_sanitized values.;private NamedValueInfo updateNamedValueInfo(MethodParameter parameter, NamedValueInfo info) {_		String name = info.name__		if (info.name.isEmpty()) {_			name = parameter.getParameterName()__			if (name == null) {_				String type = parameter.getNestedParameterType().getName()__				throw new IllegalArgumentException("Name for argument type [" + type + "] not " +_						"available, and parameter name information not found in class file either.")__			}_		}_		String defaultValue = (ValueConstants.DEFAULT_NONE.equals(info.defaultValue) ? null : info.defaultValue)__		return new NamedValueInfo(name, info.required, defaultValue)__	};create,a,new,named,value,info,based,on,the,given,named,value,info,with,sanitized,values;private,named,value,info,update,named,value,info,method,parameter,parameter,named,value,info,info,string,name,info,name,if,info,name,is,empty,name,parameter,get,parameter,name,if,name,null,string,type,parameter,get,nested,parameter,type,get,name,throw,new,illegal,argument,exception,name,for,argument,type,type,not,available,and,parameter,name,information,not,found,in,class,file,either,string,default,value,value,constants,equals,info,default,value,null,info,default,value,return,new,named,value,info,name,info,required,default,value
AbstractNamedValueArgumentResolver -> private NamedValueInfo updateNamedValueInfo(MethodParameter parameter, NamedValueInfo info);1508532146;Create a new NamedValueInfo based on the given NamedValueInfo with_sanitized values.;private NamedValueInfo updateNamedValueInfo(MethodParameter parameter, NamedValueInfo info) {_		String name = info.name__		if (info.name.isEmpty()) {_			name = parameter.getParameterName()__			if (name == null) {_				String type = parameter.getNestedParameterType().getName()__				throw new IllegalArgumentException("Name for argument type [" + type + "] not " +_						"available, and parameter name information not found in class file either.")__			}_		}_		String defaultValue = (ValueConstants.DEFAULT_NONE.equals(info.defaultValue) ? null : info.defaultValue)__		return new NamedValueInfo(name, info.required, defaultValue)__	};create,a,new,named,value,info,based,on,the,given,named,value,info,with,sanitized,values;private,named,value,info,update,named,value,info,method,parameter,parameter,named,value,info,info,string,name,info,name,if,info,name,is,empty,name,parameter,get,parameter,name,if,name,null,string,type,parameter,get,nested,parameter,type,get,name,throw,new,illegal,argument,exception,name,for,argument,type,type,not,available,and,parameter,name,information,not,found,in,class,file,either,string,default,value,value,constants,equals,info,default,value,null,info,default,value,return,new,named,value,info,name,info,required,default,value
AbstractNamedValueArgumentResolver -> private NamedValueInfo updateNamedValueInfo(MethodParameter parameter, NamedValueInfo info);1530174524;Create a new NamedValueInfo based on the given NamedValueInfo with_sanitized values.;private NamedValueInfo updateNamedValueInfo(MethodParameter parameter, NamedValueInfo info) {_		String name = info.name__		if (info.name.isEmpty()) {_			name = parameter.getParameterName()__			if (name == null) {_				String type = parameter.getNestedParameterType().getName()__				throw new IllegalArgumentException("Name for argument type [" + type + "] not " +_						"available, and parameter name information not found in class file either.")__			}_		}_		String defaultValue = (ValueConstants.DEFAULT_NONE.equals(info.defaultValue) ? null : info.defaultValue)__		return new NamedValueInfo(name, info.required, defaultValue)__	};create,a,new,named,value,info,based,on,the,given,named,value,info,with,sanitized,values;private,named,value,info,update,named,value,info,method,parameter,parameter,named,value,info,info,string,name,info,name,if,info,name,is,empty,name,parameter,get,parameter,name,if,name,null,string,type,parameter,get,nested,parameter,type,get,name,throw,new,illegal,argument,exception,name,for,argument,type,type,not,available,and,parameter,name,information,not,found,in,class,file,either,string,default,value,value,constants,equals,info,default,value,null,info,default,value,return,new,named,value,info,name,info,required,default,value
AbstractNamedValueArgumentResolver -> private NamedValueInfo updateNamedValueInfo(MethodParameter parameter, NamedValueInfo info);1531917703;Create a new NamedValueInfo based on the given NamedValueInfo with_sanitized values.;private NamedValueInfo updateNamedValueInfo(MethodParameter parameter, NamedValueInfo info) {_		String name = info.name__		if (info.name.isEmpty()) {_			name = parameter.getParameterName()__			if (name == null) {_				String type = parameter.getNestedParameterType().getName()__				throw new IllegalArgumentException("Name for argument type [" + type + "] not " +_						"available, and parameter name information not found in class file either.")__			}_		}_		String defaultValue = (ValueConstants.DEFAULT_NONE.equals(info.defaultValue) ? null : info.defaultValue)__		return new NamedValueInfo(name, info.required, defaultValue)__	};create,a,new,named,value,info,based,on,the,given,named,value,info,with,sanitized,values;private,named,value,info,update,named,value,info,method,parameter,parameter,named,value,info,info,string,name,info,name,if,info,name,is,empty,name,parameter,get,parameter,name,if,name,null,string,type,parameter,get,nested,parameter,type,get,name,throw,new,illegal,argument,exception,name,for,argument,type,type,not,available,and,parameter,name,information,not,found,in,class,file,either,string,default,value,value,constants,equals,info,default,value,null,info,default,value,return,new,named,value,info,name,info,required,default,value
AbstractNamedValueArgumentResolver -> private NamedValueInfo updateNamedValueInfo(MethodParameter parameter, NamedValueInfo info);1538753959;Create a new NamedValueInfo based on the given NamedValueInfo with_sanitized values.;private NamedValueInfo updateNamedValueInfo(MethodParameter parameter, NamedValueInfo info) {_		String name = info.name__		if (info.name.isEmpty()) {_			name = parameter.getParameterName()__			if (name == null) {_				String type = parameter.getNestedParameterType().getName()__				throw new IllegalArgumentException("Name for argument type [" + type + "] not " +_						"available, and parameter name information not found in class file either.")__			}_		}_		String defaultValue = (ValueConstants.DEFAULT_NONE.equals(info.defaultValue) ? null : info.defaultValue)__		return new NamedValueInfo(name, info.required, defaultValue)__	};create,a,new,named,value,info,based,on,the,given,named,value,info,with,sanitized,values;private,named,value,info,update,named,value,info,method,parameter,parameter,named,value,info,info,string,name,info,name,if,info,name,is,empty,name,parameter,get,parameter,name,if,name,null,string,type,parameter,get,nested,parameter,type,get,name,throw,new,illegal,argument,exception,name,for,argument,type,type,not,available,and,parameter,name,information,not,found,in,class,file,either,string,default,value,value,constants,equals,info,default,value,null,info,default,value,return,new,named,value,info,name,info,required,default,value
AbstractNamedValueArgumentResolver -> @SuppressWarnings("UnusedParameters") 	protected void handleResolvedValue( 			Object arg, String name, MethodParameter parameter, Model model, ServerWebExchange exchange);1490354145;Invoked after a value is resolved._@param arg the resolved argument value_@param name the argument name_@param parameter the argument parameter type_@param model the model_@param exchange the current exchange;@SuppressWarnings("UnusedParameters")_	protected void handleResolvedValue(_			Object arg, String name, MethodParameter parameter, Model model, ServerWebExchange exchange) {_	};invoked,after,a,value,is,resolved,param,arg,the,resolved,argument,value,param,name,the,argument,name,param,parameter,the,argument,parameter,type,param,model,the,model,param,exchange,the,current,exchange;suppress,warnings,unused,parameters,protected,void,handle,resolved,value,object,arg,string,name,method,parameter,parameter,model,model,server,web,exchange,exchange
AbstractNamedValueArgumentResolver -> @SuppressWarnings("UnusedParameters") 	protected void handleResolvedValue( 			Object arg, String name, MethodParameter parameter, Model model, ServerWebExchange exchange);1492090594;Invoked after a value is resolved._@param arg the resolved argument value_@param name the argument name_@param parameter the argument parameter type_@param model the model_@param exchange the current exchange;@SuppressWarnings("UnusedParameters")_	protected void handleResolvedValue(_			Object arg, String name, MethodParameter parameter, Model model, ServerWebExchange exchange) {_	};invoked,after,a,value,is,resolved,param,arg,the,resolved,argument,value,param,name,the,argument,name,param,parameter,the,argument,parameter,type,param,model,the,model,param,exchange,the,current,exchange;suppress,warnings,unused,parameters,protected,void,handle,resolved,value,object,arg,string,name,method,parameter,parameter,model,model,server,web,exchange,exchange
AbstractNamedValueArgumentResolver -> @SuppressWarnings("UnusedParameters") 	protected void handleResolvedValue( 			Object arg, String name, MethodParameter parameter, Model model, ServerWebExchange exchange);1495868221;Invoked after a value is resolved._@param arg the resolved argument value_@param name the argument name_@param parameter the argument parameter type_@param model the model_@param exchange the current exchange;@SuppressWarnings("UnusedParameters")_	protected void handleResolvedValue(_			Object arg, String name, MethodParameter parameter, Model model, ServerWebExchange exchange) {_	};invoked,after,a,value,is,resolved,param,arg,the,resolved,argument,value,param,name,the,argument,name,param,parameter,the,argument,parameter,type,param,model,the,model,param,exchange,the,current,exchange;suppress,warnings,unused,parameters,protected,void,handle,resolved,value,object,arg,string,name,method,parameter,parameter,model,model,server,web,exchange,exchange
AbstractNamedValueArgumentResolver -> @Nullable 	private Object resolveStringValue(String value);1496837955;Resolve the given annotation-specified value,_potentially containing placeholders and expressions.;@Nullable_	private Object resolveStringValue(String value) {_		if (this.configurableBeanFactory == null) {_			return value__		}_		String placeholdersResolved = this.configurableBeanFactory.resolveEmbeddedValue(value)__		BeanExpressionResolver exprResolver = this.configurableBeanFactory.getBeanExpressionResolver()__		if (exprResolver == null) {_			return value__		}_		return exprResolver.evaluate(placeholdersResolved, this.expressionContext)__	};resolve,the,given,annotation,specified,value,potentially,containing,placeholders,and,expressions;nullable,private,object,resolve,string,value,string,value,if,this,configurable,bean,factory,null,return,value,string,placeholders,resolved,this,configurable,bean,factory,resolve,embedded,value,value,bean,expression,resolver,expr,resolver,this,configurable,bean,factory,get,bean,expression,resolver,if,expr,resolver,null,return,value,return,expr,resolver,evaluate,placeholders,resolved,this,expression,context
AbstractNamedValueArgumentResolver -> @Nullable 	private Object resolveStringValue(String value);1498780456;Resolve the given annotation-specified value,_potentially containing placeholders and expressions.;@Nullable_	private Object resolveStringValue(String value) {_		if (this.configurableBeanFactory == null || this.expressionContext == null) {_			return value__		}_		String placeholdersResolved = this.configurableBeanFactory.resolveEmbeddedValue(value)__		BeanExpressionResolver exprResolver = this.configurableBeanFactory.getBeanExpressionResolver()__		if (exprResolver == null) {_			return value__		}_		return exprResolver.evaluate(placeholdersResolved, this.expressionContext)__	};resolve,the,given,annotation,specified,value,potentially,containing,placeholders,and,expressions;nullable,private,object,resolve,string,value,string,value,if,this,configurable,bean,factory,null,this,expression,context,null,return,value,string,placeholders,resolved,this,configurable,bean,factory,resolve,embedded,value,value,bean,expression,resolver,expr,resolver,this,configurable,bean,factory,get,bean,expression,resolver,if,expr,resolver,null,return,value,return,expr,resolver,evaluate,placeholders,resolved,this,expression,context
AbstractNamedValueArgumentResolver -> @Nullable 	private Object resolveStringValue(String value);1508532146;Resolve the given annotation-specified value,_potentially containing placeholders and expressions.;@Nullable_	private Object resolveStringValue(String value) {_		if (this.configurableBeanFactory == null || this.expressionContext == null) {_			return value__		}_		String placeholdersResolved = this.configurableBeanFactory.resolveEmbeddedValue(value)__		BeanExpressionResolver exprResolver = this.configurableBeanFactory.getBeanExpressionResolver()__		if (exprResolver == null) {_			return value__		}_		return exprResolver.evaluate(placeholdersResolved, this.expressionContext)__	};resolve,the,given,annotation,specified,value,potentially,containing,placeholders,and,expressions;nullable,private,object,resolve,string,value,string,value,if,this,configurable,bean,factory,null,this,expression,context,null,return,value,string,placeholders,resolved,this,configurable,bean,factory,resolve,embedded,value,value,bean,expression,resolver,expr,resolver,this,configurable,bean,factory,get,bean,expression,resolver,if,expr,resolver,null,return,value,return,expr,resolver,evaluate,placeholders,resolved,this,expression,context
AbstractNamedValueArgumentResolver -> @Nullable 	private Object resolveStringValue(String value);1530174524;Resolve the given annotation-specified value,_potentially containing placeholders and expressions.;@Nullable_	private Object resolveStringValue(String value) {_		if (this.configurableBeanFactory == null || this.expressionContext == null) {_			return value__		}_		String placeholdersResolved = this.configurableBeanFactory.resolveEmbeddedValue(value)__		BeanExpressionResolver exprResolver = this.configurableBeanFactory.getBeanExpressionResolver()__		if (exprResolver == null) {_			return value__		}_		return exprResolver.evaluate(placeholdersResolved, this.expressionContext)__	};resolve,the,given,annotation,specified,value,potentially,containing,placeholders,and,expressions;nullable,private,object,resolve,string,value,string,value,if,this,configurable,bean,factory,null,this,expression,context,null,return,value,string,placeholders,resolved,this,configurable,bean,factory,resolve,embedded,value,value,bean,expression,resolver,expr,resolver,this,configurable,bean,factory,get,bean,expression,resolver,if,expr,resolver,null,return,value,return,expr,resolver,evaluate,placeholders,resolved,this,expression,context
AbstractNamedValueArgumentResolver -> @Nullable 	private Object resolveStringValue(String value);1531917703;Resolve the given annotation-specified value,_potentially containing placeholders and expressions.;@Nullable_	private Object resolveStringValue(String value) {_		if (this.configurableBeanFactory == null || this.expressionContext == null) {_			return value__		}_		String placeholdersResolved = this.configurableBeanFactory.resolveEmbeddedValue(value)__		BeanExpressionResolver exprResolver = this.configurableBeanFactory.getBeanExpressionResolver()__		if (exprResolver == null) {_			return value__		}_		return exprResolver.evaluate(placeholdersResolved, this.expressionContext)__	};resolve,the,given,annotation,specified,value,potentially,containing,placeholders,and,expressions;nullable,private,object,resolve,string,value,string,value,if,this,configurable,bean,factory,null,this,expression,context,null,return,value,string,placeholders,resolved,this,configurable,bean,factory,resolve,embedded,value,value,bean,expression,resolver,expr,resolver,this,configurable,bean,factory,get,bean,expression,resolver,if,expr,resolver,null,return,value,return,expr,resolver,evaluate,placeholders,resolved,this,expression,context
AbstractNamedValueArgumentResolver -> @Nullable 	private Object resolveStringValue(String value);1538753959;Resolve the given annotation-specified value,_potentially containing placeholders and expressions.;@Nullable_	private Object resolveStringValue(String value) {_		if (this.configurableBeanFactory == null || this.expressionContext == null) {_			return value__		}_		String placeholdersResolved = this.configurableBeanFactory.resolveEmbeddedValue(value)__		BeanExpressionResolver exprResolver = this.configurableBeanFactory.getBeanExpressionResolver()__		if (exprResolver == null) {_			return value__		}_		return exprResolver.evaluate(placeholdersResolved, this.expressionContext)__	};resolve,the,given,annotation,specified,value,potentially,containing,placeholders,and,expressions;nullable,private,object,resolve,string,value,string,value,if,this,configurable,bean,factory,null,this,expression,context,null,return,value,string,placeholders,resolved,this,configurable,bean,factory,resolve,embedded,value,value,bean,expression,resolver,expr,resolver,this,configurable,bean,factory,get,bean,expression,resolver,if,expr,resolver,null,return,value,return,expr,resolver,evaluate,placeholders,resolved,this,expression,context
