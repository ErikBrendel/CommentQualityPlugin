# id;timestamp;commentText;codeText;commentWords;codeWords
CompositeRequestCondition -> public List<RequestCondition<?>> getConditions();1485986572;Return the underlying conditions, possibly empty but never {@code null}.;public List<RequestCondition<?>> getConditions() {_		return unwrap()__	};return,the,underlying,conditions,possibly,empty,but,never,code,null;public,list,request,condition,get,conditions,return,unwrap
CompositeRequestCondition -> public List<RequestCondition<?>> getConditions();1495868221;Return the underlying conditions, possibly empty but never {@code null}.;public List<RequestCondition<?>> getConditions() {_		return unwrap()__	};return,the,underlying,conditions,possibly,empty,but,never,code,null;public,list,request,condition,get,conditions,return,unwrap
CompositeRequestCondition -> public List<RequestCondition<?>> getConditions();1506097334;Return the underlying conditions, possibly empty but never {@code null}.;public List<RequestCondition<?>> getConditions() {_		return unwrap()__	};return,the,underlying,conditions,possibly,empty,but,never,code,null;public,list,request,condition,get,conditions,return,unwrap
CompositeRequestCondition -> public List<RequestCondition<?>> getConditions();1519859718;Return the underlying conditions, possibly empty but never {@code null}.;public List<RequestCondition<?>> getConditions() {_		return unwrap()__	};return,the,underlying,conditions,possibly,empty,but,never,code,null;public,list,request,condition,get,conditions,return,unwrap
CompositeRequestCondition -> public List<RequestCondition<?>> getConditions();1520075565;Return the underlying conditions, possibly empty but never {@code null}.;public List<RequestCondition<?>> getConditions() {_		return unwrap()__	};return,the,underlying,conditions,possibly,empty,but,never,code,null;public,list,request,condition,get,conditions,return,unwrap
CompositeRequestCondition -> public List<RequestCondition<?>> getConditions();1530190293;Return the underlying conditions, possibly empty but never {@code null}.;public List<RequestCondition<?>> getConditions() {_		return unwrap()__	};return,the,underlying,conditions,possibly,empty,but,never,code,null;public,list,request,condition,get,conditions,return,unwrap
CompositeRequestCondition -> @Override 	public CompositeRequestCondition getMatchingCondition(ServerWebExchange exchange);1485986572;Delegate to <em>all</em> contained conditions to match the request and return the_resulting "matching" condition instances._<p>An empty {@code CompositeRequestCondition} matches to all requests.;@Override_	public CompositeRequestCondition getMatchingCondition(ServerWebExchange exchange) {_		if (isEmpty()) {_			return this__		}_		RequestConditionHolder[] matchingConditions = new RequestConditionHolder[getLength()]__		for (int i = 0_ i < getLength()_ i++) {_			matchingConditions[i] = this.requestConditions[i].getMatchingCondition(exchange)__			if (matchingConditions[i] == null) {_				return null__			}_		}_		return new CompositeRequestCondition(matchingConditions)__	};delegate,to,em,all,em,contained,conditions,to,match,the,request,and,return,the,resulting,matching,condition,instances,p,an,empty,code,composite,request,condition,matches,to,all,requests;override,public,composite,request,condition,get,matching,condition,server,web,exchange,exchange,if,is,empty,return,this,request,condition,holder,matching,conditions,new,request,condition,holder,get,length,for,int,i,0,i,get,length,i,matching,conditions,i,this,request,conditions,i,get,matching,condition,exchange,if,matching,conditions,i,null,return,null,return,new,composite,request,condition,matching,conditions
CompositeRequestCondition -> @Override 	public CompositeRequestCondition getMatchingCondition(ServerWebExchange exchange);1495868221;Delegate to <em>all</em> contained conditions to match the request and return the_resulting "matching" condition instances._<p>An empty {@code CompositeRequestCondition} matches to all requests.;@Override_	public CompositeRequestCondition getMatchingCondition(ServerWebExchange exchange) {_		if (isEmpty()) {_			return this__		}_		RequestConditionHolder[] matchingConditions = new RequestConditionHolder[getLength()]__		for (int i = 0_ i < getLength()_ i++) {_			matchingConditions[i] = this.requestConditions[i].getMatchingCondition(exchange)__			if (matchingConditions[i] == null) {_				return null__			}_		}_		return new CompositeRequestCondition(matchingConditions)__	};delegate,to,em,all,em,contained,conditions,to,match,the,request,and,return,the,resulting,matching,condition,instances,p,an,empty,code,composite,request,condition,matches,to,all,requests;override,public,composite,request,condition,get,matching,condition,server,web,exchange,exchange,if,is,empty,return,this,request,condition,holder,matching,conditions,new,request,condition,holder,get,length,for,int,i,0,i,get,length,i,matching,conditions,i,this,request,conditions,i,get,matching,condition,exchange,if,matching,conditions,i,null,return,null,return,new,composite,request,condition,matching,conditions
CompositeRequestCondition -> @Override 	public CompositeRequestCondition getMatchingCondition(ServerWebExchange exchange);1506097334;Delegate to <em>all</em> contained conditions to match the request and return the_resulting "matching" condition instances._<p>An empty {@code CompositeRequestCondition} matches to all requests.;@Override_	public CompositeRequestCondition getMatchingCondition(ServerWebExchange exchange) {_		if (isEmpty()) {_			return this__		}_		RequestConditionHolder[] matchingConditions = new RequestConditionHolder[getLength()]__		for (int i = 0_ i < getLength()_ i++) {_			matchingConditions[i] = this.requestConditions[i].getMatchingCondition(exchange)__			if (matchingConditions[i] == null) {_				return null__			}_		}_		return new CompositeRequestCondition(matchingConditions)__	};delegate,to,em,all,em,contained,conditions,to,match,the,request,and,return,the,resulting,matching,condition,instances,p,an,empty,code,composite,request,condition,matches,to,all,requests;override,public,composite,request,condition,get,matching,condition,server,web,exchange,exchange,if,is,empty,return,this,request,condition,holder,matching,conditions,new,request,condition,holder,get,length,for,int,i,0,i,get,length,i,matching,conditions,i,this,request,conditions,i,get,matching,condition,exchange,if,matching,conditions,i,null,return,null,return,new,composite,request,condition,matching,conditions
CompositeRequestCondition -> @Override 	public CompositeRequestCondition getMatchingCondition(ServerWebExchange exchange);1519859718;Delegate to <em>all</em> contained conditions to match the request and return the_resulting "matching" condition instances._<p>An empty {@code CompositeRequestCondition} matches to all requests.;@Override_	public CompositeRequestCondition getMatchingCondition(ServerWebExchange exchange) {_		if (isEmpty()) {_			return this__		}_		RequestConditionHolder[] matchingConditions = new RequestConditionHolder[getLength()]__		for (int i = 0_ i < getLength()_ i++) {_			matchingConditions[i] = this.requestConditions[i].getMatchingCondition(exchange)__			if (matchingConditions[i] == null) {_				return null__			}_		}_		return new CompositeRequestCondition(matchingConditions)__	};delegate,to,em,all,em,contained,conditions,to,match,the,request,and,return,the,resulting,matching,condition,instances,p,an,empty,code,composite,request,condition,matches,to,all,requests;override,public,composite,request,condition,get,matching,condition,server,web,exchange,exchange,if,is,empty,return,this,request,condition,holder,matching,conditions,new,request,condition,holder,get,length,for,int,i,0,i,get,length,i,matching,conditions,i,this,request,conditions,i,get,matching,condition,exchange,if,matching,conditions,i,null,return,null,return,new,composite,request,condition,matching,conditions
CompositeRequestCondition -> @Override 	public CompositeRequestCondition getMatchingCondition(ServerWebExchange exchange);1520075565;Delegate to <em>all</em> contained conditions to match the request and return the_resulting "matching" condition instances._<p>An empty {@code CompositeRequestCondition} matches to all requests.;@Override_	public CompositeRequestCondition getMatchingCondition(ServerWebExchange exchange) {_		if (isEmpty()) {_			return this__		}_		RequestConditionHolder[] matchingConditions = new RequestConditionHolder[getLength()]__		for (int i = 0_ i < getLength()_ i++) {_			matchingConditions[i] = this.requestConditions[i].getMatchingCondition(exchange)__			if (matchingConditions[i] == null) {_				return null__			}_		}_		return new CompositeRequestCondition(matchingConditions)__	};delegate,to,em,all,em,contained,conditions,to,match,the,request,and,return,the,resulting,matching,condition,instances,p,an,empty,code,composite,request,condition,matches,to,all,requests;override,public,composite,request,condition,get,matching,condition,server,web,exchange,exchange,if,is,empty,return,this,request,condition,holder,matching,conditions,new,request,condition,holder,get,length,for,int,i,0,i,get,length,i,matching,conditions,i,this,request,conditions,i,get,matching,condition,exchange,if,matching,conditions,i,null,return,null,return,new,composite,request,condition,matching,conditions
CompositeRequestCondition -> @Override 	public CompositeRequestCondition getMatchingCondition(ServerWebExchange exchange);1530190293;Delegate to <em>all</em> contained conditions to match the request and return the_resulting "matching" condition instances._<p>An empty {@code CompositeRequestCondition} matches to all requests.;@Override_	public CompositeRequestCondition getMatchingCondition(ServerWebExchange exchange) {_		if (isEmpty()) {_			return this__		}_		RequestConditionHolder[] matchingConditions = new RequestConditionHolder[getLength()]__		for (int i = 0_ i < getLength()_ i++) {_			matchingConditions[i] = this.requestConditions[i].getMatchingCondition(exchange)__			if (matchingConditions[i] == null) {_				return null__			}_		}_		return new CompositeRequestCondition(matchingConditions)__	};delegate,to,em,all,em,contained,conditions,to,match,the,request,and,return,the,resulting,matching,condition,instances,p,an,empty,code,composite,request,condition,matches,to,all,requests;override,public,composite,request,condition,get,matching,condition,server,web,exchange,exchange,if,is,empty,return,this,request,condition,holder,matching,conditions,new,request,condition,holder,get,length,for,int,i,0,i,get,length,i,matching,conditions,i,this,request,conditions,i,get,matching,condition,exchange,if,matching,conditions,i,null,return,null,return,new,composite,request,condition,matching,conditions
CompositeRequestCondition -> public CompositeRequestCondition(RequestCondition<?>... requestConditions);1485986572;Create an instance with 0 or more {@code RequestCondition} types. It is_important to create {@code CompositeRequestCondition} instances with the_same number of conditions so they may be compared and combined._It is acceptable to provide {@code null} conditions.;public CompositeRequestCondition(RequestCondition<?>... requestConditions) {_		this.requestConditions = wrap(requestConditions)__	};create,an,instance,with,0,or,more,code,request,condition,types,it,is,important,to,create,code,composite,request,condition,instances,with,the,same,number,of,conditions,so,they,may,be,compared,and,combined,it,is,acceptable,to,provide,code,null,conditions;public,composite,request,condition,request,condition,request,conditions,this,request,conditions,wrap,request,conditions
CompositeRequestCondition -> public CompositeRequestCondition(RequestCondition<?>... requestConditions);1506097334;Create an instance with 0 or more {@code RequestCondition} types. It is_important to create {@code CompositeRequestCondition} instances with the_same number of conditions so they may be compared and combined._It is acceptable to provide {@code null} conditions.;public CompositeRequestCondition(RequestCondition<?>... requestConditions) {_		this.requestConditions = wrap(requestConditions)__	};create,an,instance,with,0,or,more,code,request,condition,types,it,is,important,to,create,code,composite,request,condition,instances,with,the,same,number,of,conditions,so,they,may,be,compared,and,combined,it,is,acceptable,to,provide,code,null,conditions;public,composite,request,condition,request,condition,request,conditions,this,request,conditions,wrap,request,conditions
CompositeRequestCondition -> public CompositeRequestCondition(RequestCondition<?>... requestConditions);1519859718;Create an instance with 0 or more {@code RequestCondition} types. It is_important to create {@code CompositeRequestCondition} instances with the_same number of conditions so they may be compared and combined._It is acceptable to provide {@code null} conditions.;public CompositeRequestCondition(RequestCondition<?>... requestConditions) {_		this.requestConditions = wrap(requestConditions)__	};create,an,instance,with,0,or,more,code,request,condition,types,it,is,important,to,create,code,composite,request,condition,instances,with,the,same,number,of,conditions,so,they,may,be,compared,and,combined,it,is,acceptable,to,provide,code,null,conditions;public,composite,request,condition,request,condition,request,conditions,this,request,conditions,wrap,request,conditions
CompositeRequestCondition -> public CompositeRequestCondition(RequestCondition<?>... requestConditions);1520075565;Create an instance with 0 or more {@code RequestCondition} types. It is_important to create {@code CompositeRequestCondition} instances with the_same number of conditions so they may be compared and combined._It is acceptable to provide {@code null} conditions.;public CompositeRequestCondition(RequestCondition<?>... requestConditions) {_		this.requestConditions = wrap(requestConditions)__	};create,an,instance,with,0,or,more,code,request,condition,types,it,is,important,to,create,code,composite,request,condition,instances,with,the,same,number,of,conditions,so,they,may,be,compared,and,combined,it,is,acceptable,to,provide,code,null,conditions;public,composite,request,condition,request,condition,request,conditions,this,request,conditions,wrap,request,conditions
CompositeRequestCondition -> public CompositeRequestCondition(RequestCondition<?>... requestConditions);1530190293;Create an instance with 0 or more {@code RequestCondition} types. It is_important to create {@code CompositeRequestCondition} instances with the_same number of conditions so they may be compared and combined._It is acceptable to provide {@code null} conditions.;public CompositeRequestCondition(RequestCondition<?>... requestConditions) {_		this.requestConditions = wrap(requestConditions)__	};create,an,instance,with,0,or,more,code,request,condition,types,it,is,important,to,create,code,composite,request,condition,instances,with,the,same,number,of,conditions,so,they,may,be,compared,and,combined,it,is,acceptable,to,provide,code,null,conditions;public,composite,request,condition,request,condition,request,conditions,this,request,conditions,wrap,request,conditions
CompositeRequestCondition -> public boolean isEmpty();1485986572;Whether this instance contains 0 conditions or not.;public boolean isEmpty() {_		return ObjectUtils.isEmpty(this.requestConditions)__	};whether,this,instance,contains,0,conditions,or,not;public,boolean,is,empty,return,object,utils,is,empty,this,request,conditions
CompositeRequestCondition -> public boolean isEmpty();1495868221;Whether this instance contains 0 conditions or not.;public boolean isEmpty() {_		return ObjectUtils.isEmpty(this.requestConditions)__	};whether,this,instance,contains,0,conditions,or,not;public,boolean,is,empty,return,object,utils,is,empty,this,request,conditions
CompositeRequestCondition -> public boolean isEmpty();1506097334;Whether this instance contains 0 conditions or not.;public boolean isEmpty() {_		return ObjectUtils.isEmpty(this.requestConditions)__	};whether,this,instance,contains,0,conditions,or,not;public,boolean,is,empty,return,object,utils,is,empty,this,request,conditions
CompositeRequestCondition -> @Override 	public boolean isEmpty();1519859718;Whether this instance contains 0 conditions or not.;@Override_	public boolean isEmpty() {_		return ObjectUtils.isEmpty(this.requestConditions)__	};whether,this,instance,contains,0,conditions,or,not;override,public,boolean,is,empty,return,object,utils,is,empty,this,request,conditions
CompositeRequestCondition -> @Override 	public boolean isEmpty();1520075565;Whether this instance contains 0 conditions or not.;@Override_	public boolean isEmpty() {_		return ObjectUtils.isEmpty(this.requestConditions)__	};whether,this,instance,contains,0,conditions,or,not;override,public,boolean,is,empty,return,object,utils,is,empty,this,request,conditions
CompositeRequestCondition -> @Override 	public boolean isEmpty();1530190293;Whether this instance contains 0 conditions or not.;@Override_	public boolean isEmpty() {_		return ObjectUtils.isEmpty(this.requestConditions)__	};whether,this,instance,contains,0,conditions,or,not;override,public,boolean,is,empty,return,object,utils,is,empty,this,request,conditions
CompositeRequestCondition -> @Override 	public CompositeRequestCondition combine(CompositeRequestCondition other);1485986572;If one instance is empty, return the other._If both instances have conditions, combine the individual conditions_after ensuring they are of the same type and number.;@Override_	public CompositeRequestCondition combine(CompositeRequestCondition other) {_		if (isEmpty() && other.isEmpty()) {_			return this__		}_		else if (other.isEmpty()) {_			return this__		}_		else if (isEmpty()) {_			return other__		}_		else {_			assertNumberOfConditions(other)__			RequestConditionHolder[] combinedConditions = new RequestConditionHolder[getLength()]__			for (int i = 0_ i < getLength()_ i++) {_				combinedConditions[i] = this.requestConditions[i].combine(other.requestConditions[i])__			}_			return new CompositeRequestCondition(combinedConditions)__		}_	};if,one,instance,is,empty,return,the,other,if,both,instances,have,conditions,combine,the,individual,conditions,after,ensuring,they,are,of,the,same,type,and,number;override,public,composite,request,condition,combine,composite,request,condition,other,if,is,empty,other,is,empty,return,this,else,if,other,is,empty,return,this,else,if,is,empty,return,other,else,assert,number,of,conditions,other,request,condition,holder,combined,conditions,new,request,condition,holder,get,length,for,int,i,0,i,get,length,i,combined,conditions,i,this,request,conditions,i,combine,other,request,conditions,i,return,new,composite,request,condition,combined,conditions
CompositeRequestCondition -> @Override 	public CompositeRequestCondition combine(CompositeRequestCondition other);1495868221;If one instance is empty, return the other._If both instances have conditions, combine the individual conditions_after ensuring they are of the same type and number.;@Override_	public CompositeRequestCondition combine(CompositeRequestCondition other) {_		if (isEmpty() && other.isEmpty()) {_			return this__		}_		else if (other.isEmpty()) {_			return this__		}_		else if (isEmpty()) {_			return other__		}_		else {_			assertNumberOfConditions(other)__			RequestConditionHolder[] combinedConditions = new RequestConditionHolder[getLength()]__			for (int i = 0_ i < getLength()_ i++) {_				combinedConditions[i] = this.requestConditions[i].combine(other.requestConditions[i])__			}_			return new CompositeRequestCondition(combinedConditions)__		}_	};if,one,instance,is,empty,return,the,other,if,both,instances,have,conditions,combine,the,individual,conditions,after,ensuring,they,are,of,the,same,type,and,number;override,public,composite,request,condition,combine,composite,request,condition,other,if,is,empty,other,is,empty,return,this,else,if,other,is,empty,return,this,else,if,is,empty,return,other,else,assert,number,of,conditions,other,request,condition,holder,combined,conditions,new,request,condition,holder,get,length,for,int,i,0,i,get,length,i,combined,conditions,i,this,request,conditions,i,combine,other,request,conditions,i,return,new,composite,request,condition,combined,conditions
CompositeRequestCondition -> @Override 	public CompositeRequestCondition combine(CompositeRequestCondition other);1506097334;If one instance is empty, return the other._If both instances have conditions, combine the individual conditions_after ensuring they are of the same type and number.;@Override_	public CompositeRequestCondition combine(CompositeRequestCondition other) {_		if (isEmpty() && other.isEmpty()) {_			return this__		}_		else if (other.isEmpty()) {_			return this__		}_		else if (isEmpty()) {_			return other__		}_		else {_			assertNumberOfConditions(other)__			RequestConditionHolder[] combinedConditions = new RequestConditionHolder[getLength()]__			for (int i = 0_ i < getLength()_ i++) {_				combinedConditions[i] = this.requestConditions[i].combine(other.requestConditions[i])__			}_			return new CompositeRequestCondition(combinedConditions)__		}_	};if,one,instance,is,empty,return,the,other,if,both,instances,have,conditions,combine,the,individual,conditions,after,ensuring,they,are,of,the,same,type,and,number;override,public,composite,request,condition,combine,composite,request,condition,other,if,is,empty,other,is,empty,return,this,else,if,other,is,empty,return,this,else,if,is,empty,return,other,else,assert,number,of,conditions,other,request,condition,holder,combined,conditions,new,request,condition,holder,get,length,for,int,i,0,i,get,length,i,combined,conditions,i,this,request,conditions,i,combine,other,request,conditions,i,return,new,composite,request,condition,combined,conditions
CompositeRequestCondition -> @Override 	public CompositeRequestCondition combine(CompositeRequestCondition other);1519859718;If one instance is empty, return the other._If both instances have conditions, combine the individual conditions_after ensuring they are of the same type and number.;@Override_	public CompositeRequestCondition combine(CompositeRequestCondition other) {_		if (isEmpty() && other.isEmpty()) {_			return this__		}_		else if (other.isEmpty()) {_			return this__		}_		else if (isEmpty()) {_			return other__		}_		else {_			assertNumberOfConditions(other)__			RequestConditionHolder[] combinedConditions = new RequestConditionHolder[getLength()]__			for (int i = 0_ i < getLength()_ i++) {_				combinedConditions[i] = this.requestConditions[i].combine(other.requestConditions[i])__			}_			return new CompositeRequestCondition(combinedConditions)__		}_	};if,one,instance,is,empty,return,the,other,if,both,instances,have,conditions,combine,the,individual,conditions,after,ensuring,they,are,of,the,same,type,and,number;override,public,composite,request,condition,combine,composite,request,condition,other,if,is,empty,other,is,empty,return,this,else,if,other,is,empty,return,this,else,if,is,empty,return,other,else,assert,number,of,conditions,other,request,condition,holder,combined,conditions,new,request,condition,holder,get,length,for,int,i,0,i,get,length,i,combined,conditions,i,this,request,conditions,i,combine,other,request,conditions,i,return,new,composite,request,condition,combined,conditions
CompositeRequestCondition -> @Override 	public CompositeRequestCondition combine(CompositeRequestCondition other);1520075565;If one instance is empty, return the other._If both instances have conditions, combine the individual conditions_after ensuring they are of the same type and number.;@Override_	public CompositeRequestCondition combine(CompositeRequestCondition other) {_		if (isEmpty() && other.isEmpty()) {_			return this__		}_		else if (other.isEmpty()) {_			return this__		}_		else if (isEmpty()) {_			return other__		}_		else {_			assertNumberOfConditions(other)__			RequestConditionHolder[] combinedConditions = new RequestConditionHolder[getLength()]__			for (int i = 0_ i < getLength()_ i++) {_				combinedConditions[i] = this.requestConditions[i].combine(other.requestConditions[i])__			}_			return new CompositeRequestCondition(combinedConditions)__		}_	};if,one,instance,is,empty,return,the,other,if,both,instances,have,conditions,combine,the,individual,conditions,after,ensuring,they,are,of,the,same,type,and,number;override,public,composite,request,condition,combine,composite,request,condition,other,if,is,empty,other,is,empty,return,this,else,if,other,is,empty,return,this,else,if,is,empty,return,other,else,assert,number,of,conditions,other,request,condition,holder,combined,conditions,new,request,condition,holder,get,length,for,int,i,0,i,get,length,i,combined,conditions,i,this,request,conditions,i,combine,other,request,conditions,i,return,new,composite,request,condition,combined,conditions
CompositeRequestCondition -> @Override 	public CompositeRequestCondition combine(CompositeRequestCondition other);1530190293;If one instance is empty, return the other._If both instances have conditions, combine the individual conditions_after ensuring they are of the same type and number.;@Override_	public CompositeRequestCondition combine(CompositeRequestCondition other) {_		if (isEmpty() && other.isEmpty()) {_			return this__		}_		else if (other.isEmpty()) {_			return this__		}_		else if (isEmpty()) {_			return other__		}_		else {_			assertNumberOfConditions(other)__			RequestConditionHolder[] combinedConditions = new RequestConditionHolder[getLength()]__			for (int i = 0_ i < getLength()_ i++) {_				combinedConditions[i] = this.requestConditions[i].combine(other.requestConditions[i])__			}_			return new CompositeRequestCondition(combinedConditions)__		}_	};if,one,instance,is,empty,return,the,other,if,both,instances,have,conditions,combine,the,individual,conditions,after,ensuring,they,are,of,the,same,type,and,number;override,public,composite,request,condition,combine,composite,request,condition,other,if,is,empty,other,is,empty,return,this,else,if,other,is,empty,return,this,else,if,is,empty,return,other,else,assert,number,of,conditions,other,request,condition,holder,combined,conditions,new,request,condition,holder,get,length,for,int,i,0,i,get,length,i,combined,conditions,i,this,request,conditions,i,combine,other,request,conditions,i,return,new,composite,request,condition,combined,conditions
CompositeRequestCondition -> @Override 	public int compareTo(CompositeRequestCondition other, ServerWebExchange exchange);1485986572;If one instance is empty, the other "wins". If both instances have_conditions, compare them in the order in which they were provided.;@Override_	public int compareTo(CompositeRequestCondition other, ServerWebExchange exchange) {_		if (isEmpty() && other.isEmpty()) {_			return 0__		}_		else if (isEmpty()) {_			return 1__		}_		else if (other.isEmpty()) {_			return -1__		}_		else {_			assertNumberOfConditions(other)__			for (int i = 0_ i < getLength()_ i++) {_				int result = this.requestConditions[i].compareTo(other.requestConditions[i], exchange)__				if (result != 0) {_					return result__				}_			}_			return 0__		}_	};if,one,instance,is,empty,the,other,wins,if,both,instances,have,conditions,compare,them,in,the,order,in,which,they,were,provided;override,public,int,compare,to,composite,request,condition,other,server,web,exchange,exchange,if,is,empty,other,is,empty,return,0,else,if,is,empty,return,1,else,if,other,is,empty,return,1,else,assert,number,of,conditions,other,for,int,i,0,i,get,length,i,int,result,this,request,conditions,i,compare,to,other,request,conditions,i,exchange,if,result,0,return,result,return,0
CompositeRequestCondition -> @Override 	public int compareTo(CompositeRequestCondition other, ServerWebExchange exchange);1495868221;If one instance is empty, the other "wins". If both instances have_conditions, compare them in the order in which they were provided.;@Override_	public int compareTo(CompositeRequestCondition other, ServerWebExchange exchange) {_		if (isEmpty() && other.isEmpty()) {_			return 0__		}_		else if (isEmpty()) {_			return 1__		}_		else if (other.isEmpty()) {_			return -1__		}_		else {_			assertNumberOfConditions(other)__			for (int i = 0_ i < getLength()_ i++) {_				int result = this.requestConditions[i].compareTo(other.requestConditions[i], exchange)__				if (result != 0) {_					return result__				}_			}_			return 0__		}_	};if,one,instance,is,empty,the,other,wins,if,both,instances,have,conditions,compare,them,in,the,order,in,which,they,were,provided;override,public,int,compare,to,composite,request,condition,other,server,web,exchange,exchange,if,is,empty,other,is,empty,return,0,else,if,is,empty,return,1,else,if,other,is,empty,return,1,else,assert,number,of,conditions,other,for,int,i,0,i,get,length,i,int,result,this,request,conditions,i,compare,to,other,request,conditions,i,exchange,if,result,0,return,result,return,0
CompositeRequestCondition -> @Override 	public int compareTo(CompositeRequestCondition other, ServerWebExchange exchange);1506097334;If one instance is empty, the other "wins". If both instances have_conditions, compare them in the order in which they were provided.;@Override_	public int compareTo(CompositeRequestCondition other, ServerWebExchange exchange) {_		if (isEmpty() && other.isEmpty()) {_			return 0__		}_		else if (isEmpty()) {_			return 1__		}_		else if (other.isEmpty()) {_			return -1__		}_		else {_			assertNumberOfConditions(other)__			for (int i = 0_ i < getLength()_ i++) {_				int result = this.requestConditions[i].compareTo(other.requestConditions[i], exchange)__				if (result != 0) {_					return result__				}_			}_			return 0__		}_	};if,one,instance,is,empty,the,other,wins,if,both,instances,have,conditions,compare,them,in,the,order,in,which,they,were,provided;override,public,int,compare,to,composite,request,condition,other,server,web,exchange,exchange,if,is,empty,other,is,empty,return,0,else,if,is,empty,return,1,else,if,other,is,empty,return,1,else,assert,number,of,conditions,other,for,int,i,0,i,get,length,i,int,result,this,request,conditions,i,compare,to,other,request,conditions,i,exchange,if,result,0,return,result,return,0
CompositeRequestCondition -> @Override 	public int compareTo(CompositeRequestCondition other, ServerWebExchange exchange);1519859718;If one instance is empty, the other "wins". If both instances have_conditions, compare them in the order in which they were provided.;@Override_	public int compareTo(CompositeRequestCondition other, ServerWebExchange exchange) {_		if (isEmpty() && other.isEmpty()) {_			return 0__		}_		else if (isEmpty()) {_			return 1__		}_		else if (other.isEmpty()) {_			return -1__		}_		else {_			assertNumberOfConditions(other)__			for (int i = 0_ i < getLength()_ i++) {_				int result = this.requestConditions[i].compareTo(other.requestConditions[i], exchange)__				if (result != 0) {_					return result__				}_			}_			return 0__		}_	};if,one,instance,is,empty,the,other,wins,if,both,instances,have,conditions,compare,them,in,the,order,in,which,they,were,provided;override,public,int,compare,to,composite,request,condition,other,server,web,exchange,exchange,if,is,empty,other,is,empty,return,0,else,if,is,empty,return,1,else,if,other,is,empty,return,1,else,assert,number,of,conditions,other,for,int,i,0,i,get,length,i,int,result,this,request,conditions,i,compare,to,other,request,conditions,i,exchange,if,result,0,return,result,return,0
CompositeRequestCondition -> @Override 	public int compareTo(CompositeRequestCondition other, ServerWebExchange exchange);1520075565;If one instance is empty, the other "wins". If both instances have_conditions, compare them in the order in which they were provided.;@Override_	public int compareTo(CompositeRequestCondition other, ServerWebExchange exchange) {_		if (isEmpty() && other.isEmpty()) {_			return 0__		}_		else if (isEmpty()) {_			return 1__		}_		else if (other.isEmpty()) {_			return -1__		}_		else {_			assertNumberOfConditions(other)__			for (int i = 0_ i < getLength()_ i++) {_				int result = this.requestConditions[i].compareTo(other.requestConditions[i], exchange)__				if (result != 0) {_					return result__				}_			}_			return 0__		}_	};if,one,instance,is,empty,the,other,wins,if,both,instances,have,conditions,compare,them,in,the,order,in,which,they,were,provided;override,public,int,compare,to,composite,request,condition,other,server,web,exchange,exchange,if,is,empty,other,is,empty,return,0,else,if,is,empty,return,1,else,if,other,is,empty,return,1,else,assert,number,of,conditions,other,for,int,i,0,i,get,length,i,int,result,this,request,conditions,i,compare,to,other,request,conditions,i,exchange,if,result,0,return,result,return,0
CompositeRequestCondition -> @Override 	public int compareTo(CompositeRequestCondition other, ServerWebExchange exchange);1530190293;If one instance is empty, the other "wins". If both instances have_conditions, compare them in the order in which they were provided.;@Override_	public int compareTo(CompositeRequestCondition other, ServerWebExchange exchange) {_		if (isEmpty() && other.isEmpty()) {_			return 0__		}_		else if (isEmpty()) {_			return 1__		}_		else if (other.isEmpty()) {_			return -1__		}_		else {_			assertNumberOfConditions(other)__			for (int i = 0_ i < getLength()_ i++) {_				int result = this.requestConditions[i].compareTo(other.requestConditions[i], exchange)__				if (result != 0) {_					return result__				}_			}_			return 0__		}_	};if,one,instance,is,empty,the,other,wins,if,both,instances,have,conditions,compare,them,in,the,order,in,which,they,were,provided;override,public,int,compare,to,composite,request,condition,other,server,web,exchange,exchange,if,is,empty,other,is,empty,return,0,else,if,is,empty,return,1,else,if,other,is,empty,return,1,else,assert,number,of,conditions,other,for,int,i,0,i,get,length,i,int,result,this,request,conditions,i,compare,to,other,request,conditions,i,exchange,if,result,0,return,result,return,0
