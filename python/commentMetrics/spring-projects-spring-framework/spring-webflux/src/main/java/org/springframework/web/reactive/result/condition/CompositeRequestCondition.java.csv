commented;modifiers;parameterAmount;loc;comment;code
false;private;1;7;;private RequestConditionHolder[] wrap(RequestCondition<?>... rawConditions) {     RequestConditionHolder[] wrappedConditions = new RequestConditionHolder[rawConditions.length].     for (int i = 0. i < rawConditions.length. i++) {         wrappedConditions[i] = new RequestConditionHolder(rawConditions[i]).     }     return wrappedConditions. }
true;public;0;4;/**  * Whether this instance contains 0 conditions or not.  */ ;/**  * Whether this instance contains 0 conditions or not.  */ @Override public boolean isEmpty() {     return ObjectUtils.isEmpty(this.requestConditions). }
true;public;0;3;/**  * Return the underlying conditions, possibly empty but never {@code null}.  */ ;/**  * Return the underlying conditions, possibly empty but never {@code null}.  */ public List<RequestCondition<?>> getConditions() {     return unwrap(). }
false;private;0;7;;private List<RequestCondition<?>> unwrap() {     List<RequestCondition<?>> result = new ArrayList<>().     for (RequestConditionHolder holder : this.requestConditions) {         result.add(holder.getCondition()).     }     return result. }
false;protected;0;4;;@Override protected Collection<?> getContent() {     return (!isEmpty() ? getConditions() : Collections.emptyList()). }
false;protected;0;4;;@Override protected String getToStringInfix() {     return " && ". }
false;private;0;3;;private int getLength() {     return this.requestConditions.length. }
true;public;1;20;/**  * If one instance is empty, return the other.  * If both instances have conditions, combine the individual conditions  * after ensuring they are of the same type and number.  */ ;/**  * If one instance is empty, return the other.  * If both instances have conditions, combine the individual conditions  * after ensuring they are of the same type and number.  */ @Override public CompositeRequestCondition combine(CompositeRequestCondition other) {     if (isEmpty() && other.isEmpty()) {         return this.     } else if (other.isEmpty()) {         return this.     } else if (isEmpty()) {         return other.     } else {         assertNumberOfConditions(other).         RequestConditionHolder[] combinedConditions = new RequestConditionHolder[getLength()].         for (int i = 0. i < getLength(). i++) {             combinedConditions[i] = this.requestConditions[i].combine(other.requestConditions[i]).         }         return new CompositeRequestCondition(combinedConditions).     } }
false;private;1;6;;private void assertNumberOfConditions(CompositeRequestCondition other) {     Assert.isTrue(getLength() == other.getLength(), "Cannot combine CompositeRequestConditions with a different number of conditions. " + ObjectUtils.nullSafeToString(this.requestConditions) + " and  " + ObjectUtils.nullSafeToString(other.requestConditions)). }
true;public;1;14;/**  * Delegate to <em>all</em> contained conditions to match the request and return the  * resulting "matching" condition instances.  * <p>An empty {@code CompositeRequestCondition} matches to all requests.  */ ;/**  * Delegate to <em>all</em> contained conditions to match the request and return the  * resulting "matching" condition instances.  * <p>An empty {@code CompositeRequestCondition} matches to all requests.  */ @Override public CompositeRequestCondition getMatchingCondition(ServerWebExchange exchange) {     if (isEmpty()) {         return this.     }     RequestConditionHolder[] matchingConditions = new RequestConditionHolder[getLength()].     for (int i = 0. i < getLength(). i++) {         matchingConditions[i] = this.requestConditions[i].getMatchingCondition(exchange).         if (matchingConditions[i] == null) {             return null.         }     }     return new CompositeRequestCondition(matchingConditions). }
true;public;2;22;/**  * If one instance is empty, the other "wins". If both instances have  * conditions, compare them in the order in which they were provided.  */ ;/**  * If one instance is empty, the other "wins". If both instances have  * conditions, compare them in the order in which they were provided.  */ @Override public int compareTo(CompositeRequestCondition other, ServerWebExchange exchange) {     if (isEmpty() && other.isEmpty()) {         return 0.     } else if (isEmpty()) {         return 1.     } else if (other.isEmpty()) {         return -1.     } else {         assertNumberOfConditions(other).         for (int i = 0. i < getLength(). i++) {             int result = this.requestConditions[i].compareTo(other.requestConditions[i], exchange).             if (result != 0) {                 return result.             }         }         return 0.     } }
