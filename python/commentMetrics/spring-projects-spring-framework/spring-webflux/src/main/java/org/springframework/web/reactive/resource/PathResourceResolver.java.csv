# id;timestamp;commentText;codeText;commentWords;codeWords
PathResourceResolver -> public void setAllowedLocations(@Nullable Resource... locations);1500448076;By default when a Resource is found, the path of the resolved resource is_compared to ensure it's under the input location where it was found._However sometimes that may not be the case, e.g. when_{@link CssLinkResourceTransformer}_resolves public URLs of links it contains, the CSS file is the location_and the resources being resolved are css files, images, fonts and others_located in adjacent or parent directories._<p>This property allows configuring a complete list of locations under_which resources must be so that if a resource is not under the location_relative to which it was found, this list may be checked as well._<p>By default {@link ResourceWebHandler} initializes this property_to match its list of locations._@param locations the list of allowed locations;public void setAllowedLocations(@Nullable Resource... locations) {_		this.allowedLocations = locations__	};by,default,when,a,resource,is,found,the,path,of,the,resolved,resource,is,compared,to,ensure,it,s,under,the,input,location,where,it,was,found,however,sometimes,that,may,not,be,the,case,e,g,when,link,css,link,resource,transformer,resolves,public,urls,of,links,it,contains,the,css,file,is,the,location,and,the,resources,being,resolved,are,css,files,images,fonts,and,others,located,in,adjacent,or,parent,directories,p,this,property,allows,configuring,a,complete,list,of,locations,under,which,resources,must,be,so,that,if,a,resource,is,not,under,the,location,relative,to,which,it,was,found,this,list,may,be,checked,as,well,p,by,default,link,resource,web,handler,initializes,this,property,to,match,its,list,of,locations,param,locations,the,list,of,allowed,locations;public,void,set,allowed,locations,nullable,resource,locations,this,allowed,locations,locations
PathResourceResolver -> public void setAllowedLocations(@Nullable Resource... locations);1500495740;By default when a Resource is found, the path of the resolved resource is_compared to ensure it's under the input location where it was found._However sometimes that may not be the case, e.g. when_{@link CssLinkResourceTransformer}_resolves public URLs of links it contains, the CSS file is the location_and the resources being resolved are css files, images, fonts and others_located in adjacent or parent directories._<p>This property allows configuring a complete list of locations under_which resources must be so that if a resource is not under the location_relative to which it was found, this list may be checked as well._<p>By default {@link ResourceWebHandler} initializes this property_to match its list of locations._@param locations the list of allowed locations;public void setAllowedLocations(@Nullable Resource... locations) {_		this.allowedLocations = locations__	};by,default,when,a,resource,is,found,the,path,of,the,resolved,resource,is,compared,to,ensure,it,s,under,the,input,location,where,it,was,found,however,sometimes,that,may,not,be,the,case,e,g,when,link,css,link,resource,transformer,resolves,public,urls,of,links,it,contains,the,css,file,is,the,location,and,the,resources,being,resolved,are,css,files,images,fonts,and,others,located,in,adjacent,or,parent,directories,p,this,property,allows,configuring,a,complete,list,of,locations,under,which,resources,must,be,so,that,if,a,resource,is,not,under,the,location,relative,to,which,it,was,found,this,list,may,be,checked,as,well,p,by,default,link,resource,web,handler,initializes,this,property,to,match,its,list,of,locations,param,locations,the,list,of,allowed,locations;public,void,set,allowed,locations,nullable,resource,locations,this,allowed,locations,locations
PathResourceResolver -> public void setAllowedLocations(@Nullable Resource... locations);1522105242;By default when a Resource is found, the path of the resolved resource is_compared to ensure it's under the input location where it was found._However sometimes that may not be the case, e.g. when_{@link CssLinkResourceTransformer}_resolves public URLs of links it contains, the CSS file is the location_and the resources being resolved are css files, images, fonts and others_located in adjacent or parent directories._<p>This property allows configuring a complete list of locations under_which resources must be so that if a resource is not under the location_relative to which it was found, this list may be checked as well._<p>By default {@link ResourceWebHandler} initializes this property_to match its list of locations._@param locations the list of allowed locations;public void setAllowedLocations(@Nullable Resource... locations) {_		this.allowedLocations = locations__	};by,default,when,a,resource,is,found,the,path,of,the,resolved,resource,is,compared,to,ensure,it,s,under,the,input,location,where,it,was,found,however,sometimes,that,may,not,be,the,case,e,g,when,link,css,link,resource,transformer,resolves,public,urls,of,links,it,contains,the,css,file,is,the,location,and,the,resources,being,resolved,are,css,files,images,fonts,and,others,located,in,adjacent,or,parent,directories,p,this,property,allows,configuring,a,complete,list,of,locations,under,which,resources,must,be,so,that,if,a,resource,is,not,under,the,location,relative,to,which,it,was,found,this,list,may,be,checked,as,well,p,by,default,link,resource,web,handler,initializes,this,property,to,match,its,list,of,locations,param,locations,the,list,of,allowed,locations;public,void,set,allowed,locations,nullable,resource,locations,this,allowed,locations,locations
PathResourceResolver -> public void setAllowedLocations(@Nullable Resource... locations);1522163099;By default when a Resource is found, the path of the resolved resource is_compared to ensure it's under the input location where it was found._However sometimes that may not be the case, e.g. when_{@link CssLinkResourceTransformer}_resolves public URLs of links it contains, the CSS file is the location_and the resources being resolved are css files, images, fonts and others_located in adjacent or parent directories._<p>This property allows configuring a complete list of locations under_which resources must be so that if a resource is not under the location_relative to which it was found, this list may be checked as well._<p>By default {@link ResourceWebHandler} initializes this property_to match its list of locations._@param locations the list of allowed locations;public void setAllowedLocations(@Nullable Resource... locations) {_		this.allowedLocations = locations__	};by,default,when,a,resource,is,found,the,path,of,the,resolved,resource,is,compared,to,ensure,it,s,under,the,input,location,where,it,was,found,however,sometimes,that,may,not,be,the,case,e,g,when,link,css,link,resource,transformer,resolves,public,urls,of,links,it,contains,the,css,file,is,the,location,and,the,resources,being,resolved,are,css,files,images,fonts,and,others,located,in,adjacent,or,parent,directories,p,this,property,allows,configuring,a,complete,list,of,locations,under,which,resources,must,be,so,that,if,a,resource,is,not,under,the,location,relative,to,which,it,was,found,this,list,may,be,checked,as,well,p,by,default,link,resource,web,handler,initializes,this,property,to,match,its,list,of,locations,param,locations,the,list,of,allowed,locations;public,void,set,allowed,locations,nullable,resource,locations,this,allowed,locations,locations
PathResourceResolver -> public void setAllowedLocations(@Nullable Resource... locations);1522332273;By default when a Resource is found, the path of the resolved resource is_compared to ensure it's under the input location where it was found._However sometimes that may not be the case, e.g. when_{@link CssLinkResourceTransformer}_resolves public URLs of links it contains, the CSS file is the location_and the resources being resolved are css files, images, fonts and others_located in adjacent or parent directories._<p>This property allows configuring a complete list of locations under_which resources must be so that if a resource is not under the location_relative to which it was found, this list may be checked as well._<p>By default {@link ResourceWebHandler} initializes this property_to match its list of locations._@param locations the list of allowed locations;public void setAllowedLocations(@Nullable Resource... locations) {_		this.allowedLocations = locations__	};by,default,when,a,resource,is,found,the,path,of,the,resolved,resource,is,compared,to,ensure,it,s,under,the,input,location,where,it,was,found,however,sometimes,that,may,not,be,the,case,e,g,when,link,css,link,resource,transformer,resolves,public,urls,of,links,it,contains,the,css,file,is,the,location,and,the,resources,being,resolved,are,css,files,images,fonts,and,others,located,in,adjacent,or,parent,directories,p,this,property,allows,configuring,a,complete,list,of,locations,under,which,resources,must,be,so,that,if,a,resource,is,not,under,the,location,relative,to,which,it,was,found,this,list,may,be,checked,as,well,p,by,default,link,resource,web,handler,initializes,this,property,to,match,its,list,of,locations,param,locations,the,list,of,allowed,locations;public,void,set,allowed,locations,nullable,resource,locations,this,allowed,locations,locations
PathResourceResolver -> public void setAllowedLocations(@Nullable Resource... locations);1527623253;By default when a Resource is found, the path of the resolved resource is_compared to ensure it's under the input location where it was found._However sometimes that may not be the case, e.g. when_{@link CssLinkResourceTransformer}_resolves public URLs of links it contains, the CSS file is the location_and the resources being resolved are css files, images, fonts and others_located in adjacent or parent directories._<p>This property allows configuring a complete list of locations under_which resources must be so that if a resource is not under the location_relative to which it was found, this list may be checked as well._<p>By default {@link ResourceWebHandler} initializes this property_to match its list of locations._@param locations the list of allowed locations;public void setAllowedLocations(@Nullable Resource... locations) {_		this.allowedLocations = locations__	};by,default,when,a,resource,is,found,the,path,of,the,resolved,resource,is,compared,to,ensure,it,s,under,the,input,location,where,it,was,found,however,sometimes,that,may,not,be,the,case,e,g,when,link,css,link,resource,transformer,resolves,public,urls,of,links,it,contains,the,css,file,is,the,location,and,the,resources,being,resolved,are,css,files,images,fonts,and,others,located,in,adjacent,or,parent,directories,p,this,property,allows,configuring,a,complete,list,of,locations,under,which,resources,must,be,so,that,if,a,resource,is,not,under,the,location,relative,to,which,it,was,found,this,list,may,be,checked,as,well,p,by,default,link,resource,web,handler,initializes,this,property,to,match,its,list,of,locations,param,locations,the,list,of,allowed,locations;public,void,set,allowed,locations,nullable,resource,locations,this,allowed,locations,locations
PathResourceResolver -> public void setAllowedLocations(@Nullable Resource... locations);1529721864;By default when a Resource is found, the path of the resolved resource is_compared to ensure it's under the input location where it was found._However sometimes that may not be the case, e.g. when_{@link CssLinkResourceTransformer}_resolves public URLs of links it contains, the CSS file is the location_and the resources being resolved are css files, images, fonts and others_located in adjacent or parent directories._<p>This property allows configuring a complete list of locations under_which resources must be so that if a resource is not under the location_relative to which it was found, this list may be checked as well._<p>By default {@link ResourceWebHandler} initializes this property_to match its list of locations._@param locations the list of allowed locations;public void setAllowedLocations(@Nullable Resource... locations) {_		this.allowedLocations = locations__	};by,default,when,a,resource,is,found,the,path,of,the,resolved,resource,is,compared,to,ensure,it,s,under,the,input,location,where,it,was,found,however,sometimes,that,may,not,be,the,case,e,g,when,link,css,link,resource,transformer,resolves,public,urls,of,links,it,contains,the,css,file,is,the,location,and,the,resources,being,resolved,are,css,files,images,fonts,and,others,located,in,adjacent,or,parent,directories,p,this,property,allows,configuring,a,complete,list,of,locations,under,which,resources,must,be,so,that,if,a,resource,is,not,under,the,location,relative,to,which,it,was,found,this,list,may,be,checked,as,well,p,by,default,link,resource,web,handler,initializes,this,property,to,match,its,list,of,locations,param,locations,the,list,of,allowed,locations;public,void,set,allowed,locations,nullable,resource,locations,this,allowed,locations,locations
PathResourceResolver -> public void setAllowedLocations(@Nullable Resource... locations);1529948549;By default when a Resource is found, the path of the resolved resource is_compared to ensure it's under the input location where it was found._However sometimes that may not be the case, e.g. when_{@link CssLinkResourceTransformer}_resolves public URLs of links it contains, the CSS file is the location_and the resources being resolved are css files, images, fonts and others_located in adjacent or parent directories._<p>This property allows configuring a complete list of locations under_which resources must be so that if a resource is not under the location_relative to which it was found, this list may be checked as well._<p>By default {@link ResourceWebHandler} initializes this property_to match its list of locations._@param locations the list of allowed locations;public void setAllowedLocations(@Nullable Resource... locations) {_		this.allowedLocations = locations__	};by,default,when,a,resource,is,found,the,path,of,the,resolved,resource,is,compared,to,ensure,it,s,under,the,input,location,where,it,was,found,however,sometimes,that,may,not,be,the,case,e,g,when,link,css,link,resource,transformer,resolves,public,urls,of,links,it,contains,the,css,file,is,the,location,and,the,resources,being,resolved,are,css,files,images,fonts,and,others,located,in,adjacent,or,parent,directories,p,this,property,allows,configuring,a,complete,list,of,locations,under,which,resources,must,be,so,that,if,a,resource,is,not,under,the,location,relative,to,which,it,was,found,this,list,may,be,checked,as,well,p,by,default,link,resource,web,handler,initializes,this,property,to,match,its,list,of,locations,param,locations,the,list,of,allowed,locations;public,void,set,allowed,locations,nullable,resource,locations,this,allowed,locations,locations
PathResourceResolver -> public void setAllowedLocations(Resource... locations);1485986572;By default when a Resource is found, the path of the resolved resource is_compared to ensure it's under the input location where it was found._However sometimes that may not be the case, e.g. when_{@link CssLinkResourceTransformer}_resolves public URLs of links it contains, the CSS file is the location_and the resources being resolved are css files, images, fonts and others_located in adjacent or parent directories._<p>This property allows configuring a complete list of locations under_which resources must be so that if a resource is not under the location_relative to which it was found, this list may be checked as well._<p>By default {@link ResourceWebHandler} initializes this property_to match its list of locations._@param locations the list of allowed locations;public void setAllowedLocations(Resource... locations) {_		this.allowedLocations = locations__	};by,default,when,a,resource,is,found,the,path,of,the,resolved,resource,is,compared,to,ensure,it,s,under,the,input,location,where,it,was,found,however,sometimes,that,may,not,be,the,case,e,g,when,link,css,link,resource,transformer,resolves,public,urls,of,links,it,contains,the,css,file,is,the,location,and,the,resources,being,resolved,are,css,files,images,fonts,and,others,located,in,adjacent,or,parent,directories,p,this,property,allows,configuring,a,complete,list,of,locations,under,which,resources,must,be,so,that,if,a,resource,is,not,under,the,location,relative,to,which,it,was,found,this,list,may,be,checked,as,well,p,by,default,link,resource,web,handler,initializes,this,property,to,match,its,list,of,locations,param,locations,the,list,of,allowed,locations;public,void,set,allowed,locations,resource,locations,this,allowed,locations,locations
PathResourceResolver -> public void setAllowedLocations(Resource... locations);1495868221;By default when a Resource is found, the path of the resolved resource is_compared to ensure it's under the input location where it was found._However sometimes that may not be the case, e.g. when_{@link CssLinkResourceTransformer}_resolves public URLs of links it contains, the CSS file is the location_and the resources being resolved are css files, images, fonts and others_located in adjacent or parent directories._<p>This property allows configuring a complete list of locations under_which resources must be so that if a resource is not under the location_relative to which it was found, this list may be checked as well._<p>By default {@link ResourceWebHandler} initializes this property_to match its list of locations._@param locations the list of allowed locations;public void setAllowedLocations(Resource... locations) {_		this.allowedLocations = locations__	};by,default,when,a,resource,is,found,the,path,of,the,resolved,resource,is,compared,to,ensure,it,s,under,the,input,location,where,it,was,found,however,sometimes,that,may,not,be,the,case,e,g,when,link,css,link,resource,transformer,resolves,public,urls,of,links,it,contains,the,css,file,is,the,location,and,the,resources,being,resolved,are,css,files,images,fonts,and,others,located,in,adjacent,or,parent,directories,p,this,property,allows,configuring,a,complete,list,of,locations,under,which,resources,must,be,so,that,if,a,resource,is,not,under,the,location,relative,to,which,it,was,found,this,list,may,be,checked,as,well,p,by,default,link,resource,web,handler,initializes,this,property,to,match,its,list,of,locations,param,locations,the,list,of,allowed,locations;public,void,set,allowed,locations,resource,locations,this,allowed,locations,locations
PathResourceResolver -> public void setAllowedLocations(Resource... locations);1496837955;By default when a Resource is found, the path of the resolved resource is_compared to ensure it's under the input location where it was found._However sometimes that may not be the case, e.g. when_{@link CssLinkResourceTransformer}_resolves public URLs of links it contains, the CSS file is the location_and the resources being resolved are css files, images, fonts and others_located in adjacent or parent directories._<p>This property allows configuring a complete list of locations under_which resources must be so that if a resource is not under the location_relative to which it was found, this list may be checked as well._<p>By default {@link ResourceWebHandler} initializes this property_to match its list of locations._@param locations the list of allowed locations;public void setAllowedLocations(Resource... locations) {_		this.allowedLocations = locations__	};by,default,when,a,resource,is,found,the,path,of,the,resolved,resource,is,compared,to,ensure,it,s,under,the,input,location,where,it,was,found,however,sometimes,that,may,not,be,the,case,e,g,when,link,css,link,resource,transformer,resolves,public,urls,of,links,it,contains,the,css,file,is,the,location,and,the,resources,being,resolved,are,css,files,images,fonts,and,others,located,in,adjacent,or,parent,directories,p,this,property,allows,configuring,a,complete,list,of,locations,under,which,resources,must,be,so,that,if,a,resource,is,not,under,the,location,relative,to,which,it,was,found,this,list,may,be,checked,as,well,p,by,default,link,resource,web,handler,initializes,this,property,to,match,its,list,of,locations,param,locations,the,list,of,allowed,locations;public,void,set,allowed,locations,resource,locations,this,allowed,locations,locations
PathResourceResolver -> protected Mono<Resource> getResource(String resourcePath, Resource location);1485986572;Find the resource under the given location._<p>The default implementation checks if there is a readable_{@code Resource} for the given path relative to the location._@param resourcePath the path to the resource_@param location the location to check_@return the resource, or {@code null} if none found;protected Mono<Resource> getResource(String resourcePath, Resource location) {_		try {_			Resource resource = location.createRelative(resourcePath)__			if (resource.exists() && resource.isReadable()) {_				if (checkResource(resource, location)) {_					if (logger.isTraceEnabled()) {_						logger.trace("Found match: " + resource)__					}_					return Mono.just(resource)__				}_				else if (logger.isTraceEnabled()) {_					logger.trace("Resource path=\"" + resourcePath + "\" was successfully resolved " +_							"but resource=\"" + resource.getURL() + "\" is neither under the " +_							"current location=\"" + location.getURL() + "\" nor under any of the " +_							"allowed locations=" + Arrays.asList(getAllowedLocations()))__				}_			}_			else if (logger.isTraceEnabled()) {_				logger.trace("No match for location: " + location)__			}_			return Mono.empty()__		}_		catch (IOException ex) {_			if (logger.isTraceEnabled()) {_				logger.trace("Failure checking for relative resource under location + " + location, ex)__			}_			return Mono.error(ex)__		}_	};find,the,resource,under,the,given,location,p,the,default,implementation,checks,if,there,is,a,readable,code,resource,for,the,given,path,relative,to,the,location,param,resource,path,the,path,to,the,resource,param,location,the,location,to,check,return,the,resource,or,code,null,if,none,found;protected,mono,resource,get,resource,string,resource,path,resource,location,try,resource,resource,location,create,relative,resource,path,if,resource,exists,resource,is,readable,if,check,resource,resource,location,if,logger,is,trace,enabled,logger,trace,found,match,resource,return,mono,just,resource,else,if,logger,is,trace,enabled,logger,trace,resource,path,resource,path,was,successfully,resolved,but,resource,resource,get,url,is,neither,under,the,current,location,location,get,url,nor,under,any,of,the,allowed,locations,arrays,as,list,get,allowed,locations,else,if,logger,is,trace,enabled,logger,trace,no,match,for,location,location,return,mono,empty,catch,ioexception,ex,if,logger,is,trace,enabled,logger,trace,failure,checking,for,relative,resource,under,location,location,ex,return,mono,error,ex
PathResourceResolver -> protected Mono<Resource> getResource(String resourcePath, Resource location);1495868221;Find the resource under the given location._<p>The default implementation checks if there is a readable_{@code Resource} for the given path relative to the location._@param resourcePath the path to the resource_@param location the location to check_@return the resource, or empty {@link Mono} if none found;protected Mono<Resource> getResource(String resourcePath, Resource location) {_		try {_			Resource resource = location.createRelative(resourcePath)__			if (resource.exists() && resource.isReadable()) {_				if (checkResource(resource, location)) {_					if (logger.isTraceEnabled()) {_						logger.trace("Found match: " + resource)__					}_					return Mono.just(resource)__				}_				else if (logger.isTraceEnabled()) {_					logger.trace("Resource path=\"" + resourcePath + "\" was successfully resolved " +_							"but resource=\"" + resource.getURL() + "\" is neither under the " +_							"current location=\"" + location.getURL() + "\" nor under any of the " +_							"allowed locations=" + Arrays.asList(getAllowedLocations()))__				}_			}_			else if (logger.isTraceEnabled()) {_				logger.trace("No match for location: " + location)__			}_			return Mono.empty()__		}_		catch (IOException ex) {_			if (logger.isTraceEnabled()) {_				logger.trace("Failure checking for relative resource under location + " + location, ex)__			}_			return Mono.error(ex)__		}_	};find,the,resource,under,the,given,location,p,the,default,implementation,checks,if,there,is,a,readable,code,resource,for,the,given,path,relative,to,the,location,param,resource,path,the,path,to,the,resource,param,location,the,location,to,check,return,the,resource,or,empty,link,mono,if,none,found;protected,mono,resource,get,resource,string,resource,path,resource,location,try,resource,resource,location,create,relative,resource,path,if,resource,exists,resource,is,readable,if,check,resource,resource,location,if,logger,is,trace,enabled,logger,trace,found,match,resource,return,mono,just,resource,else,if,logger,is,trace,enabled,logger,trace,resource,path,resource,path,was,successfully,resolved,but,resource,resource,get,url,is,neither,under,the,current,location,location,get,url,nor,under,any,of,the,allowed,locations,arrays,as,list,get,allowed,locations,else,if,logger,is,trace,enabled,logger,trace,no,match,for,location,location,return,mono,empty,catch,ioexception,ex,if,logger,is,trace,enabled,logger,trace,failure,checking,for,relative,resource,under,location,location,ex,return,mono,error,ex
PathResourceResolver -> protected Mono<Resource> getResource(String resourcePath, Resource location);1496837955;Find the resource under the given location._<p>The default implementation checks if there is a readable_{@code Resource} for the given path relative to the location._@param resourcePath the path to the resource_@param location the location to check_@return the resource, or empty {@link Mono} if none found;protected Mono<Resource> getResource(String resourcePath, Resource location) {_		try {_			Resource resource = location.createRelative(resourcePath)__			if (resource.exists() && resource.isReadable()) {_				if (checkResource(resource, location)) {_					if (logger.isTraceEnabled()) {_						logger.trace("Found match: " + resource)__					}_					return Mono.just(resource)__				}_				else if (logger.isTraceEnabled()) {_					Resource[] allowedLocations = getAllowedLocations()__					logger.trace("Resource path=\"" + resourcePath + "\" was successfully resolved " +_							"but resource=\"" + resource.getURL() + "\" is neither under the " +_							"current location=\"" + location.getURL() + "\" nor under any of the " +_							"allowed locations=" + (allowedLocations != null ? Arrays.asList(allowedLocations) : "[]"))__				}_			}_			else if (logger.isTraceEnabled()) {_				logger.trace("No match for location: " + location)__			}_			return Mono.empty()__		}_		catch (IOException ex) {_			if (logger.isTraceEnabled()) {_				logger.trace("Failure checking for relative resource under location + " + location, ex)__			}_			return Mono.error(ex)__		}_	};find,the,resource,under,the,given,location,p,the,default,implementation,checks,if,there,is,a,readable,code,resource,for,the,given,path,relative,to,the,location,param,resource,path,the,path,to,the,resource,param,location,the,location,to,check,return,the,resource,or,empty,link,mono,if,none,found;protected,mono,resource,get,resource,string,resource,path,resource,location,try,resource,resource,location,create,relative,resource,path,if,resource,exists,resource,is,readable,if,check,resource,resource,location,if,logger,is,trace,enabled,logger,trace,found,match,resource,return,mono,just,resource,else,if,logger,is,trace,enabled,resource,allowed,locations,get,allowed,locations,logger,trace,resource,path,resource,path,was,successfully,resolved,but,resource,resource,get,url,is,neither,under,the,current,location,location,get,url,nor,under,any,of,the,allowed,locations,allowed,locations,null,arrays,as,list,allowed,locations,else,if,logger,is,trace,enabled,logger,trace,no,match,for,location,location,return,mono,empty,catch,ioexception,ex,if,logger,is,trace,enabled,logger,trace,failure,checking,for,relative,resource,under,location,location,ex,return,mono,error,ex
PathResourceResolver -> protected Mono<Resource> getResource(String resourcePath, Resource location);1500448076;Find the resource under the given location._<p>The default implementation checks if there is a readable_{@code Resource} for the given path relative to the location._@param resourcePath the path to the resource_@param location the location to check_@return the resource, or empty {@link Mono} if none found;protected Mono<Resource> getResource(String resourcePath, Resource location) {_		try {_			Resource resource = location.createRelative(resourcePath)__			if (resource.exists() && resource.isReadable()) {_				if (checkResource(resource, location)) {_					if (logger.isTraceEnabled()) {_						logger.trace("Found match: " + resource)__					}_					return Mono.just(resource)__				}_				else if (logger.isTraceEnabled()) {_					Resource[] allowedLocations = getAllowedLocations()__					logger.trace("Resource path=\"" + resourcePath + "\" was successfully resolved " +_							"but resource=\"" + resource.getURL() + "\" is neither under the " +_							"current location=\"" + location.getURL() + "\" nor under any of the " +_							"allowed locations=" + (allowedLocations != null ? Arrays.asList(allowedLocations) : "[]"))__				}_			}_			else if (logger.isTraceEnabled()) {_				logger.trace("No match for location: " + location)__			}_			return Mono.empty()__		}_		catch (IOException ex) {_			if (logger.isTraceEnabled()) {_				logger.trace("Failure checking for relative resource under location + " + location, ex)__			}_			return Mono.error(ex)__		}_	};find,the,resource,under,the,given,location,p,the,default,implementation,checks,if,there,is,a,readable,code,resource,for,the,given,path,relative,to,the,location,param,resource,path,the,path,to,the,resource,param,location,the,location,to,check,return,the,resource,or,empty,link,mono,if,none,found;protected,mono,resource,get,resource,string,resource,path,resource,location,try,resource,resource,location,create,relative,resource,path,if,resource,exists,resource,is,readable,if,check,resource,resource,location,if,logger,is,trace,enabled,logger,trace,found,match,resource,return,mono,just,resource,else,if,logger,is,trace,enabled,resource,allowed,locations,get,allowed,locations,logger,trace,resource,path,resource,path,was,successfully,resolved,but,resource,resource,get,url,is,neither,under,the,current,location,location,get,url,nor,under,any,of,the,allowed,locations,allowed,locations,null,arrays,as,list,allowed,locations,else,if,logger,is,trace,enabled,logger,trace,no,match,for,location,location,return,mono,empty,catch,ioexception,ex,if,logger,is,trace,enabled,logger,trace,failure,checking,for,relative,resource,under,location,location,ex,return,mono,error,ex
PathResourceResolver -> protected Mono<Resource> getResource(String resourcePath, Resource location);1500495740;Find the resource under the given location._<p>The default implementation checks if there is a readable_{@code Resource} for the given path relative to the location._@param resourcePath the path to the resource_@param location the location to check_@return the resource, or empty {@link Mono} if none found;protected Mono<Resource> getResource(String resourcePath, Resource location) {_		try {_			Resource resource = location.createRelative(resourcePath)__			if (resource.exists() && resource.isReadable()) {_				if (checkResource(resource, location)) {_					if (logger.isTraceEnabled()) {_						logger.trace("Found match: " + resource)__					}_					return Mono.just(resource)__				}_				else if (logger.isTraceEnabled()) {_					Resource[] allowedLocations = getAllowedLocations()__					logger.trace("Resource path=\"" + resourcePath + "\" was successfully resolved " +_							"but resource=\"" + resource.getURL() + "\" is neither under the " +_							"current location=\"" + location.getURL() + "\" nor under any of the " +_							"allowed locations=" + (allowedLocations != null ? Arrays.asList(allowedLocations) : "[]"))__				}_			}_			else if (logger.isTraceEnabled()) {_				logger.trace("No match for location: " + location)__			}_			return Mono.empty()__		}_		catch (IOException ex) {_			if (logger.isTraceEnabled()) {_				logger.trace("Failure checking for relative resource under location + " + location, ex)__			}_			return Mono.error(ex)__		}_	};find,the,resource,under,the,given,location,p,the,default,implementation,checks,if,there,is,a,readable,code,resource,for,the,given,path,relative,to,the,location,param,resource,path,the,path,to,the,resource,param,location,the,location,to,check,return,the,resource,or,empty,link,mono,if,none,found;protected,mono,resource,get,resource,string,resource,path,resource,location,try,resource,resource,location,create,relative,resource,path,if,resource,exists,resource,is,readable,if,check,resource,resource,location,if,logger,is,trace,enabled,logger,trace,found,match,resource,return,mono,just,resource,else,if,logger,is,trace,enabled,resource,allowed,locations,get,allowed,locations,logger,trace,resource,path,resource,path,was,successfully,resolved,but,resource,resource,get,url,is,neither,under,the,current,location,location,get,url,nor,under,any,of,the,allowed,locations,allowed,locations,null,arrays,as,list,allowed,locations,else,if,logger,is,trace,enabled,logger,trace,no,match,for,location,location,return,mono,empty,catch,ioexception,ex,if,logger,is,trace,enabled,logger,trace,failure,checking,for,relative,resource,under,location,location,ex,return,mono,error,ex
PathResourceResolver -> protected Mono<Resource> getResource(String resourcePath, Resource location);1522105242;Find the resource under the given location._<p>The default implementation checks if there is a readable_{@code Resource} for the given path relative to the location._@param resourcePath the path to the resource_@param location the location to check_@return the resource, or empty {@link Mono} if none found;protected Mono<Resource> getResource(String resourcePath, Resource location) {_		try {_			Resource resource = location.createRelative(resourcePath)__			if (resource.exists() && resource.isReadable()) {_				if (checkResource(resource, location)) {_					if (logger.isTraceEnabled()) {_						logger.trace("Found match: " + resource)__					}_					return Mono.just(resource)__				}_				else if (logger.isTraceEnabled()) {_					Resource[] allowedLocations = getAllowedLocations()__					logger.trace("Resource path=\"" + resourcePath + "\" was successfully resolved " +_							"but resource=\"" + resource.getURL() + "\" is neither under the " +_							"current location=\"" + location.getURL() + "\" nor under any of the " +_							"allowed locations=" + (allowedLocations != null ? Arrays.asList(allowedLocations) : "[]"))__				}_			}_			else if (logger.isTraceEnabled()) {_				logger.trace("No match for location: " + location)__			}_			return Mono.empty()__		}_		catch (IOException ex) {_			if (logger.isTraceEnabled()) {_				logger.trace("Failure checking for relative resource under location + " + location, ex)__			}_			return Mono.error(ex)__		}_	};find,the,resource,under,the,given,location,p,the,default,implementation,checks,if,there,is,a,readable,code,resource,for,the,given,path,relative,to,the,location,param,resource,path,the,path,to,the,resource,param,location,the,location,to,check,return,the,resource,or,empty,link,mono,if,none,found;protected,mono,resource,get,resource,string,resource,path,resource,location,try,resource,resource,location,create,relative,resource,path,if,resource,exists,resource,is,readable,if,check,resource,resource,location,if,logger,is,trace,enabled,logger,trace,found,match,resource,return,mono,just,resource,else,if,logger,is,trace,enabled,resource,allowed,locations,get,allowed,locations,logger,trace,resource,path,resource,path,was,successfully,resolved,but,resource,resource,get,url,is,neither,under,the,current,location,location,get,url,nor,under,any,of,the,allowed,locations,allowed,locations,null,arrays,as,list,allowed,locations,else,if,logger,is,trace,enabled,logger,trace,no,match,for,location,location,return,mono,empty,catch,ioexception,ex,if,logger,is,trace,enabled,logger,trace,failure,checking,for,relative,resource,under,location,location,ex,return,mono,error,ex
PathResourceResolver -> protected Mono<Resource> getResource(String resourcePath, Resource location);1522163099;Find the resource under the given location._<p>The default implementation checks if there is a readable_{@code Resource} for the given path relative to the location._@param resourcePath the path to the resource_@param location the location to check_@return the resource, or empty {@link Mono} if none found;protected Mono<Resource> getResource(String resourcePath, Resource location) {_		try {_			Resource resource = location.createRelative(resourcePath)__			if (resource.exists() && resource.isReadable()) {_				if (checkResource(resource, location)) {_					if (logger.isTraceEnabled()) {_						logger.trace("Found match: " + resource)__					}_					return Mono.just(resource)__				}_				else if (logger.isTraceEnabled()) {_					Resource[] allowedLocations = getAllowedLocations()__					logger.trace("Resource path=\"" + resourcePath + "\" was successfully resolved " +_							"but resource=\"" + resource.getURL() + "\" is neither under the " +_							"current location=\"" + location.getURL() + "\" nor under any of the " +_							"allowed locations=" + (allowedLocations != null ? Arrays.asList(allowedLocations) : "[]"))__				}_			}_			else if (logger.isTraceEnabled()) {_				logger.trace("No match for location: " + location)__			}_			return Mono.empty()__		}_		catch (IOException ex) {_			if (logger.isTraceEnabled()) {_				logger.trace("Failure checking for relative resource under location + " + location, ex)__			}_			return Mono.error(ex)__		}_	};find,the,resource,under,the,given,location,p,the,default,implementation,checks,if,there,is,a,readable,code,resource,for,the,given,path,relative,to,the,location,param,resource,path,the,path,to,the,resource,param,location,the,location,to,check,return,the,resource,or,empty,link,mono,if,none,found;protected,mono,resource,get,resource,string,resource,path,resource,location,try,resource,resource,location,create,relative,resource,path,if,resource,exists,resource,is,readable,if,check,resource,resource,location,if,logger,is,trace,enabled,logger,trace,found,match,resource,return,mono,just,resource,else,if,logger,is,trace,enabled,resource,allowed,locations,get,allowed,locations,logger,trace,resource,path,resource,path,was,successfully,resolved,but,resource,resource,get,url,is,neither,under,the,current,location,location,get,url,nor,under,any,of,the,allowed,locations,allowed,locations,null,arrays,as,list,allowed,locations,else,if,logger,is,trace,enabled,logger,trace,no,match,for,location,location,return,mono,empty,catch,ioexception,ex,if,logger,is,trace,enabled,logger,trace,failure,checking,for,relative,resource,under,location,location,ex,return,mono,error,ex
PathResourceResolver -> protected Mono<Resource> getResource(String resourcePath, Resource location);1522332273;Find the resource under the given location._<p>The default implementation checks if there is a readable_{@code Resource} for the given path relative to the location._@param resourcePath the path to the resource_@param location the location to check_@return the resource, or empty {@link Mono} if none found;protected Mono<Resource> getResource(String resourcePath, Resource location) {_		try {_			Resource resource = location.createRelative(resourcePath)__			if (resource.exists() && resource.isReadable()) {_				if (checkResource(resource, location)) {_					if (logger.isTraceEnabled()) {_						logger.trace("Found match: " + resource)__					}_					return Mono.just(resource)__				}_				else if (logger.isTraceEnabled()) {_					Resource[] allowedLocations = getAllowedLocations()__					logger.trace("Resource path \"" + resourcePath + "\" was successfully resolved " +_							"but resource \"" + resource.getURL() + "\" is neither under the " +_							"current location \"" + location.getURL() + "\" nor under any of the " +_							"allowed locations " + (allowedLocations != null ? Arrays.asList(allowedLocations) : "[]"))__				}_			}_			else if (logger.isTraceEnabled()) {_				logger.trace("No match for location: " + location)__			}_			return Mono.empty()__		}_		catch (IOException ex) {_			if (logger.isTraceEnabled()) {_				logger.trace("Failure checking for relative resource under location + " + location, ex)__			}_			return Mono.error(ex)__		}_	};find,the,resource,under,the,given,location,p,the,default,implementation,checks,if,there,is,a,readable,code,resource,for,the,given,path,relative,to,the,location,param,resource,path,the,path,to,the,resource,param,location,the,location,to,check,return,the,resource,or,empty,link,mono,if,none,found;protected,mono,resource,get,resource,string,resource,path,resource,location,try,resource,resource,location,create,relative,resource,path,if,resource,exists,resource,is,readable,if,check,resource,resource,location,if,logger,is,trace,enabled,logger,trace,found,match,resource,return,mono,just,resource,else,if,logger,is,trace,enabled,resource,allowed,locations,get,allowed,locations,logger,trace,resource,path,resource,path,was,successfully,resolved,but,resource,resource,get,url,is,neither,under,the,current,location,location,get,url,nor,under,any,of,the,allowed,locations,allowed,locations,null,arrays,as,list,allowed,locations,else,if,logger,is,trace,enabled,logger,trace,no,match,for,location,location,return,mono,empty,catch,ioexception,ex,if,logger,is,trace,enabled,logger,trace,failure,checking,for,relative,resource,under,location,location,ex,return,mono,error,ex
PathResourceResolver -> protected Mono<Resource> getResource(String resourcePath, Resource location);1527623253;Find the resource under the given location._<p>The default implementation checks if there is a readable_{@code Resource} for the given path relative to the location._@param resourcePath the path to the resource_@param location the location to check_@return the resource, or empty {@link Mono} if none found;protected Mono<Resource> getResource(String resourcePath, Resource location) {_		try {_			Resource resource = location.createRelative(resourcePath)__			if (resource.isReadable()) {_				if (checkResource(resource, location)) {_					if (logger.isTraceEnabled()) {_						logger.trace("Found match: " + resource)__					}_					return Mono.just(resource)__				}_				else if (logger.isTraceEnabled()) {_					Resource[] allowedLocations = getAllowedLocations()__					logger.trace("Resource path \"" + resourcePath + "\" was successfully resolved " +_							"but resource \"" + resource.getURL() + "\" is neither under the " +_							"current location \"" + location.getURL() + "\" nor under any of the " +_							"allowed locations " + (allowedLocations != null ? Arrays.asList(allowedLocations) : "[]"))__				}_			}_			else if (logger.isTraceEnabled()) {_				logger.trace("No match for location: " + location)__			}_			return Mono.empty()__		}_		catch (IOException ex) {_			if (logger.isTraceEnabled()) {_				logger.trace("Failure checking for relative resource under location + " + location, ex)__			}_			return Mono.error(ex)__		}_	};find,the,resource,under,the,given,location,p,the,default,implementation,checks,if,there,is,a,readable,code,resource,for,the,given,path,relative,to,the,location,param,resource,path,the,path,to,the,resource,param,location,the,location,to,check,return,the,resource,or,empty,link,mono,if,none,found;protected,mono,resource,get,resource,string,resource,path,resource,location,try,resource,resource,location,create,relative,resource,path,if,resource,is,readable,if,check,resource,resource,location,if,logger,is,trace,enabled,logger,trace,found,match,resource,return,mono,just,resource,else,if,logger,is,trace,enabled,resource,allowed,locations,get,allowed,locations,logger,trace,resource,path,resource,path,was,successfully,resolved,but,resource,resource,get,url,is,neither,under,the,current,location,location,get,url,nor,under,any,of,the,allowed,locations,allowed,locations,null,arrays,as,list,allowed,locations,else,if,logger,is,trace,enabled,logger,trace,no,match,for,location,location,return,mono,empty,catch,ioexception,ex,if,logger,is,trace,enabled,logger,trace,failure,checking,for,relative,resource,under,location,location,ex,return,mono,error,ex
PathResourceResolver -> protected Mono<Resource> getResource(String resourcePath, Resource location);1529721864;Find the resource under the given location._<p>The default implementation checks if there is a readable_{@code Resource} for the given path relative to the location._@param resourcePath the path to the resource_@param location the location to check_@return the resource, or empty {@link Mono} if none found;protected Mono<Resource> getResource(String resourcePath, Resource location) {_		try {_			Resource resource = location.createRelative(resourcePath)__			if (resource.isReadable()) {_				if (checkResource(resource, location)) {_					return Mono.just(resource)__				}_				else if (logger.isWarnEnabled()) {_					Resource[] allowedLocations = getAllowedLocations()__					logger.warn("Resource path \"" + resourcePath + "\" was successfully resolved " +_							"but resource \"" + resource.getURL() + "\" is neither under the " +_							"current location \"" + location.getURL() + "\" nor under any of the " +_							"allowed locations " + (allowedLocations != null ? Arrays.asList(allowedLocations) : "[]"))__				}_			}_			return Mono.empty()__		}_		catch (IOException ex) {_			if (logger.isDebugEnabled() || logger.isTraceEnabled()) {_				String error = "Skip location [" + location + "] due to error"__				if (logger.isTraceEnabled()) {_					logger.trace(error, ex)__				}_				else {_					logger.debug(error + ": " + ex.getMessage())__				}_			}_			return Mono.error(ex)__		}_	};find,the,resource,under,the,given,location,p,the,default,implementation,checks,if,there,is,a,readable,code,resource,for,the,given,path,relative,to,the,location,param,resource,path,the,path,to,the,resource,param,location,the,location,to,check,return,the,resource,or,empty,link,mono,if,none,found;protected,mono,resource,get,resource,string,resource,path,resource,location,try,resource,resource,location,create,relative,resource,path,if,resource,is,readable,if,check,resource,resource,location,return,mono,just,resource,else,if,logger,is,warn,enabled,resource,allowed,locations,get,allowed,locations,logger,warn,resource,path,resource,path,was,successfully,resolved,but,resource,resource,get,url,is,neither,under,the,current,location,location,get,url,nor,under,any,of,the,allowed,locations,allowed,locations,null,arrays,as,list,allowed,locations,return,mono,empty,catch,ioexception,ex,if,logger,is,debug,enabled,logger,is,trace,enabled,string,error,skip,location,location,due,to,error,if,logger,is,trace,enabled,logger,trace,error,ex,else,logger,debug,error,ex,get,message,return,mono,error,ex
PathResourceResolver -> protected Mono<Resource> getResource(String resourcePath, Resource location);1529948549;Find the resource under the given location._<p>The default implementation checks if there is a readable_{@code Resource} for the given path relative to the location._@param resourcePath the path to the resource_@param location the location to check_@return the resource, or empty {@link Mono} if none found;protected Mono<Resource> getResource(String resourcePath, Resource location) {_		try {_			Resource resource = location.createRelative(resourcePath)__			if (resource.isReadable()) {_				if (checkResource(resource, location)) {_					return Mono.just(resource)__				}_				else if (logger.isWarnEnabled()) {_					Resource[] allowedLocations = getAllowedLocations()__					logger.warn("Resource path \"" + resourcePath + "\" was successfully resolved " +_							"but resource \"" + resource.getURL() + "\" is neither under the " +_							"current location \"" + location.getURL() + "\" nor under any of the " +_							"allowed locations " + (allowedLocations != null ? Arrays.asList(allowedLocations) : "[]"))__				}_			}_			return Mono.empty()__		}_		catch (IOException ex) {_			if (logger.isDebugEnabled()) {_				String error = "Skip location [" + location + "] due to error"__				if (logger.isTraceEnabled()) {_					logger.trace(error, ex)__				}_				else {_					logger.debug(error + ": " + ex.getMessage())__				}_			}_			return Mono.error(ex)__		}_	};find,the,resource,under,the,given,location,p,the,default,implementation,checks,if,there,is,a,readable,code,resource,for,the,given,path,relative,to,the,location,param,resource,path,the,path,to,the,resource,param,location,the,location,to,check,return,the,resource,or,empty,link,mono,if,none,found;protected,mono,resource,get,resource,string,resource,path,resource,location,try,resource,resource,location,create,relative,resource,path,if,resource,is,readable,if,check,resource,resource,location,return,mono,just,resource,else,if,logger,is,warn,enabled,resource,allowed,locations,get,allowed,locations,logger,warn,resource,path,resource,path,was,successfully,resolved,but,resource,resource,get,url,is,neither,under,the,current,location,location,get,url,nor,under,any,of,the,allowed,locations,allowed,locations,null,arrays,as,list,allowed,locations,return,mono,empty,catch,ioexception,ex,if,logger,is,debug,enabled,string,error,skip,location,location,due,to,error,if,logger,is,trace,enabled,logger,trace,error,ex,else,logger,debug,error,ex,get,message,return,mono,error,ex
PathResourceResolver -> protected boolean checkResource(Resource resource, Resource location) throws IOException;1485986572;Perform additional checks on a resolved resource beyond checking whether the_resources exists and is readable. The default implementation also verifies_the resource is either under the location relative to which it was found or_is under one of the {@link #setAllowedLocations allowed locations}._@param resource the resource to check_@param location the location relative to which the resource was found_@return "true" if resource is in a valid location, "false" otherwise.;protected boolean checkResource(Resource resource, Resource location) throws IOException {_		if (isResourceUnderLocation(resource, location)) {_			return true__		}_		if (getAllowedLocations() != null) {_			for (Resource current : getAllowedLocations()) {_				if (isResourceUnderLocation(resource, current)) {_					return true__				}_			}_		}_		return false__	};perform,additional,checks,on,a,resolved,resource,beyond,checking,whether,the,resources,exists,and,is,readable,the,default,implementation,also,verifies,the,resource,is,either,under,the,location,relative,to,which,it,was,found,or,is,under,one,of,the,link,set,allowed,locations,allowed,locations,param,resource,the,resource,to,check,param,location,the,location,relative,to,which,the,resource,was,found,return,true,if,resource,is,in,a,valid,location,false,otherwise;protected,boolean,check,resource,resource,resource,resource,location,throws,ioexception,if,is,resource,under,location,resource,location,return,true,if,get,allowed,locations,null,for,resource,current,get,allowed,locations,if,is,resource,under,location,resource,current,return,true,return,false
PathResourceResolver -> protected boolean checkResource(Resource resource, Resource location) throws IOException;1495868221;Perform additional checks on a resolved resource beyond checking whether the_resources exists and is readable. The default implementation also verifies_the resource is either under the location relative to which it was found or_is under one of the {@link #setAllowedLocations allowed locations}._@param resource the resource to check_@param location the location relative to which the resource was found_@return "true" if resource is in a valid location, "false" otherwise.;protected boolean checkResource(Resource resource, Resource location) throws IOException {_		if (isResourceUnderLocation(resource, location)) {_			return true__		}_		if (getAllowedLocations() != null) {_			for (Resource current : getAllowedLocations()) {_				if (isResourceUnderLocation(resource, current)) {_					return true__				}_			}_		}_		return false__	};perform,additional,checks,on,a,resolved,resource,beyond,checking,whether,the,resources,exists,and,is,readable,the,default,implementation,also,verifies,the,resource,is,either,under,the,location,relative,to,which,it,was,found,or,is,under,one,of,the,link,set,allowed,locations,allowed,locations,param,resource,the,resource,to,check,param,location,the,location,relative,to,which,the,resource,was,found,return,true,if,resource,is,in,a,valid,location,false,otherwise;protected,boolean,check,resource,resource,resource,resource,location,throws,ioexception,if,is,resource,under,location,resource,location,return,true,if,get,allowed,locations,null,for,resource,current,get,allowed,locations,if,is,resource,under,location,resource,current,return,true,return,false
PathResourceResolver -> protected boolean checkResource(Resource resource, Resource location) throws IOException;1496837955;Perform additional checks on a resolved resource beyond checking whether the_resources exists and is readable. The default implementation also verifies_the resource is either under the location relative to which it was found or_is under one of the {@link #setAllowedLocations allowed locations}._@param resource the resource to check_@param location the location relative to which the resource was found_@return "true" if resource is in a valid location, "false" otherwise.;protected boolean checkResource(Resource resource, Resource location) throws IOException {_		if (isResourceUnderLocation(resource, location)) {_			return true__		}_		if (getAllowedLocations() != null) {_			for (Resource current : getAllowedLocations()) {_				if (isResourceUnderLocation(resource, current)) {_					return true__				}_			}_		}_		return false__	};perform,additional,checks,on,a,resolved,resource,beyond,checking,whether,the,resources,exists,and,is,readable,the,default,implementation,also,verifies,the,resource,is,either,under,the,location,relative,to,which,it,was,found,or,is,under,one,of,the,link,set,allowed,locations,allowed,locations,param,resource,the,resource,to,check,param,location,the,location,relative,to,which,the,resource,was,found,return,true,if,resource,is,in,a,valid,location,false,otherwise;protected,boolean,check,resource,resource,resource,resource,location,throws,ioexception,if,is,resource,under,location,resource,location,return,true,if,get,allowed,locations,null,for,resource,current,get,allowed,locations,if,is,resource,under,location,resource,current,return,true,return,false
PathResourceResolver -> protected boolean checkResource(Resource resource, Resource location) throws IOException;1500448076;Perform additional checks on a resolved resource beyond checking whether the_resources exists and is readable. The default implementation also verifies_the resource is either under the location relative to which it was found or_is under one of the {@link #setAllowedLocations allowed locations}._@param resource the resource to check_@param location the location relative to which the resource was found_@return "true" if resource is in a valid location, "false" otherwise.;protected boolean checkResource(Resource resource, Resource location) throws IOException {_		if (isResourceUnderLocation(resource, location)) {_			return true__		}_		if (getAllowedLocations() != null) {_			for (Resource current : getAllowedLocations()) {_				if (isResourceUnderLocation(resource, current)) {_					return true__				}_			}_		}_		return false__	};perform,additional,checks,on,a,resolved,resource,beyond,checking,whether,the,resources,exists,and,is,readable,the,default,implementation,also,verifies,the,resource,is,either,under,the,location,relative,to,which,it,was,found,or,is,under,one,of,the,link,set,allowed,locations,allowed,locations,param,resource,the,resource,to,check,param,location,the,location,relative,to,which,the,resource,was,found,return,true,if,resource,is,in,a,valid,location,false,otherwise;protected,boolean,check,resource,resource,resource,resource,location,throws,ioexception,if,is,resource,under,location,resource,location,return,true,if,get,allowed,locations,null,for,resource,current,get,allowed,locations,if,is,resource,under,location,resource,current,return,true,return,false
PathResourceResolver -> protected boolean checkResource(Resource resource, Resource location) throws IOException;1500495740;Perform additional checks on a resolved resource beyond checking whether the_resources exists and is readable. The default implementation also verifies_the resource is either under the location relative to which it was found or_is under one of the {@link #setAllowedLocations allowed locations}._@param resource the resource to check_@param location the location relative to which the resource was found_@return "true" if resource is in a valid location, "false" otherwise.;protected boolean checkResource(Resource resource, Resource location) throws IOException {_		if (isResourceUnderLocation(resource, location)) {_			return true__		}_		if (getAllowedLocations() != null) {_			for (Resource current : getAllowedLocations()) {_				if (isResourceUnderLocation(resource, current)) {_					return true__				}_			}_		}_		return false__	};perform,additional,checks,on,a,resolved,resource,beyond,checking,whether,the,resources,exists,and,is,readable,the,default,implementation,also,verifies,the,resource,is,either,under,the,location,relative,to,which,it,was,found,or,is,under,one,of,the,link,set,allowed,locations,allowed,locations,param,resource,the,resource,to,check,param,location,the,location,relative,to,which,the,resource,was,found,return,true,if,resource,is,in,a,valid,location,false,otherwise;protected,boolean,check,resource,resource,resource,resource,location,throws,ioexception,if,is,resource,under,location,resource,location,return,true,if,get,allowed,locations,null,for,resource,current,get,allowed,locations,if,is,resource,under,location,resource,current,return,true,return,false
PathResourceResolver -> protected boolean checkResource(Resource resource, Resource location) throws IOException;1522105242;Perform additional checks on a resolved resource beyond checking whether the_resources exists and is readable. The default implementation also verifies_the resource is either under the location relative to which it was found or_is under one of the {@link #setAllowedLocations allowed locations}._@param resource the resource to check_@param location the location relative to which the resource was found_@return "true" if resource is in a valid location, "false" otherwise.;protected boolean checkResource(Resource resource, Resource location) throws IOException {_		if (isResourceUnderLocation(resource, location)) {_			return true__		}_		if (getAllowedLocations() != null) {_			for (Resource current : getAllowedLocations()) {_				if (isResourceUnderLocation(resource, current)) {_					return true__				}_			}_		}_		return false__	};perform,additional,checks,on,a,resolved,resource,beyond,checking,whether,the,resources,exists,and,is,readable,the,default,implementation,also,verifies,the,resource,is,either,under,the,location,relative,to,which,it,was,found,or,is,under,one,of,the,link,set,allowed,locations,allowed,locations,param,resource,the,resource,to,check,param,location,the,location,relative,to,which,the,resource,was,found,return,true,if,resource,is,in,a,valid,location,false,otherwise;protected,boolean,check,resource,resource,resource,resource,location,throws,ioexception,if,is,resource,under,location,resource,location,return,true,if,get,allowed,locations,null,for,resource,current,get,allowed,locations,if,is,resource,under,location,resource,current,return,true,return,false
PathResourceResolver -> protected boolean checkResource(Resource resource, Resource location) throws IOException;1522163099;Perform additional checks on a resolved resource beyond checking whether the_resources exists and is readable. The default implementation also verifies_the resource is either under the location relative to which it was found or_is under one of the {@link #setAllowedLocations allowed locations}._@param resource the resource to check_@param location the location relative to which the resource was found_@return "true" if resource is in a valid location, "false" otherwise.;protected boolean checkResource(Resource resource, Resource location) throws IOException {_		if (isResourceUnderLocation(resource, location)) {_			return true__		}_		if (getAllowedLocations() != null) {_			for (Resource current : getAllowedLocations()) {_				if (isResourceUnderLocation(resource, current)) {_					return true__				}_			}_		}_		return false__	};perform,additional,checks,on,a,resolved,resource,beyond,checking,whether,the,resources,exists,and,is,readable,the,default,implementation,also,verifies,the,resource,is,either,under,the,location,relative,to,which,it,was,found,or,is,under,one,of,the,link,set,allowed,locations,allowed,locations,param,resource,the,resource,to,check,param,location,the,location,relative,to,which,the,resource,was,found,return,true,if,resource,is,in,a,valid,location,false,otherwise;protected,boolean,check,resource,resource,resource,resource,location,throws,ioexception,if,is,resource,under,location,resource,location,return,true,if,get,allowed,locations,null,for,resource,current,get,allowed,locations,if,is,resource,under,location,resource,current,return,true,return,false
PathResourceResolver -> protected boolean checkResource(Resource resource, Resource location) throws IOException;1522332273;Perform additional checks on a resolved resource beyond checking whether the_resources exists and is readable. The default implementation also verifies_the resource is either under the location relative to which it was found or_is under one of the {@link #setAllowedLocations allowed locations}._@param resource the resource to check_@param location the location relative to which the resource was found_@return "true" if resource is in a valid location, "false" otherwise.;protected boolean checkResource(Resource resource, Resource location) throws IOException {_		if (isResourceUnderLocation(resource, location)) {_			return true__		}_		if (getAllowedLocations() != null) {_			for (Resource current : getAllowedLocations()) {_				if (isResourceUnderLocation(resource, current)) {_					return true__				}_			}_		}_		return false__	};perform,additional,checks,on,a,resolved,resource,beyond,checking,whether,the,resources,exists,and,is,readable,the,default,implementation,also,verifies,the,resource,is,either,under,the,location,relative,to,which,it,was,found,or,is,under,one,of,the,link,set,allowed,locations,allowed,locations,param,resource,the,resource,to,check,param,location,the,location,relative,to,which,the,resource,was,found,return,true,if,resource,is,in,a,valid,location,false,otherwise;protected,boolean,check,resource,resource,resource,resource,location,throws,ioexception,if,is,resource,under,location,resource,location,return,true,if,get,allowed,locations,null,for,resource,current,get,allowed,locations,if,is,resource,under,location,resource,current,return,true,return,false
PathResourceResolver -> protected boolean checkResource(Resource resource, Resource location) throws IOException;1527623253;Perform additional checks on a resolved resource beyond checking whether the_resources exists and is readable. The default implementation also verifies_the resource is either under the location relative to which it was found or_is under one of the {@link #setAllowedLocations allowed locations}._@param resource the resource to check_@param location the location relative to which the resource was found_@return "true" if resource is in a valid location, "false" otherwise.;protected boolean checkResource(Resource resource, Resource location) throws IOException {_		if (isResourceUnderLocation(resource, location)) {_			return true__		}_		if (getAllowedLocations() != null) {_			for (Resource current : getAllowedLocations()) {_				if (isResourceUnderLocation(resource, current)) {_					return true__				}_			}_		}_		return false__	};perform,additional,checks,on,a,resolved,resource,beyond,checking,whether,the,resources,exists,and,is,readable,the,default,implementation,also,verifies,the,resource,is,either,under,the,location,relative,to,which,it,was,found,or,is,under,one,of,the,link,set,allowed,locations,allowed,locations,param,resource,the,resource,to,check,param,location,the,location,relative,to,which,the,resource,was,found,return,true,if,resource,is,in,a,valid,location,false,otherwise;protected,boolean,check,resource,resource,resource,resource,location,throws,ioexception,if,is,resource,under,location,resource,location,return,true,if,get,allowed,locations,null,for,resource,current,get,allowed,locations,if,is,resource,under,location,resource,current,return,true,return,false
PathResourceResolver -> protected boolean checkResource(Resource resource, Resource location) throws IOException;1529721864;Perform additional checks on a resolved resource beyond checking whether the_resources exists and is readable. The default implementation also verifies_the resource is either under the location relative to which it was found or_is under one of the {@link #setAllowedLocations allowed locations}._@param resource the resource to check_@param location the location relative to which the resource was found_@return "true" if resource is in a valid location, "false" otherwise.;protected boolean checkResource(Resource resource, Resource location) throws IOException {_		if (isResourceUnderLocation(resource, location)) {_			return true__		}_		if (getAllowedLocations() != null) {_			for (Resource current : getAllowedLocations()) {_				if (isResourceUnderLocation(resource, current)) {_					return true__				}_			}_		}_		return false__	};perform,additional,checks,on,a,resolved,resource,beyond,checking,whether,the,resources,exists,and,is,readable,the,default,implementation,also,verifies,the,resource,is,either,under,the,location,relative,to,which,it,was,found,or,is,under,one,of,the,link,set,allowed,locations,allowed,locations,param,resource,the,resource,to,check,param,location,the,location,relative,to,which,the,resource,was,found,return,true,if,resource,is,in,a,valid,location,false,otherwise;protected,boolean,check,resource,resource,resource,resource,location,throws,ioexception,if,is,resource,under,location,resource,location,return,true,if,get,allowed,locations,null,for,resource,current,get,allowed,locations,if,is,resource,under,location,resource,current,return,true,return,false
PathResourceResolver -> protected boolean checkResource(Resource resource, Resource location) throws IOException;1529948549;Perform additional checks on a resolved resource beyond checking whether the_resources exists and is readable. The default implementation also verifies_the resource is either under the location relative to which it was found or_is under one of the {@link #setAllowedLocations allowed locations}._@param resource the resource to check_@param location the location relative to which the resource was found_@return "true" if resource is in a valid location, "false" otherwise.;protected boolean checkResource(Resource resource, Resource location) throws IOException {_		if (isResourceUnderLocation(resource, location)) {_			return true__		}_		if (getAllowedLocations() != null) {_			for (Resource current : getAllowedLocations()) {_				if (isResourceUnderLocation(resource, current)) {_					return true__				}_			}_		}_		return false__	};perform,additional,checks,on,a,resolved,resource,beyond,checking,whether,the,resources,exists,and,is,readable,the,default,implementation,also,verifies,the,resource,is,either,under,the,location,relative,to,which,it,was,found,or,is,under,one,of,the,link,set,allowed,locations,allowed,locations,param,resource,the,resource,to,check,param,location,the,location,relative,to,which,the,resource,was,found,return,true,if,resource,is,in,a,valid,location,false,otherwise;protected,boolean,check,resource,resource,resource,resource,location,throws,ioexception,if,is,resource,under,location,resource,location,return,true,if,get,allowed,locations,null,for,resource,current,get,allowed,locations,if,is,resource,under,location,resource,current,return,true,return,false
