commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public boolean supportsParameter(MethodParameter param) {     return checkAnnotatedParamNoReactiveWrapper(param, CookieValue.class, (annot, type) -> true). }
false;protected;1;6;;@Override protected NamedValueInfo createNamedValueInfo(MethodParameter parameter) {     CookieValue ann = parameter.getParameterAnnotation(CookieValue.class).     Assert.state(ann != null, "No CookieValue annotation").     return new CookieValueNamedValueInfo(ann). }
false;protected;3;9;;@Override protected Object resolveNamedValue(String name, MethodParameter parameter, ServerWebExchange exchange) {     HttpCookie cookie = exchange.getRequest().getCookies().getFirst(name).     Class<?> paramType = parameter.getNestedParameterType().     if (HttpCookie.class.isAssignableFrom(paramType)) {         return cookie.     }     return (cookie != null ? cookie.getValue() : null). }
false;protected;2;6;;@Override protected void handleMissingValue(String name, MethodParameter parameter) {     String type = parameter.getNestedParameterType().getSimpleName().     String reason = "Missing cookie '" + name + "' for method parameter of type " + type.     throw new ServerWebInputException(reason, parameter). }
