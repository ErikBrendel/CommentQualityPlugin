commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public ExchangeStrategies strategies() {     return this.strategies. }
false;public;0;4;;@Override public HttpStatus statusCode() {     return this.response.getStatusCode(). }
false;public;0;4;;@Override public int rawStatusCode() {     return this.response.getRawStatusCode(). }
false;public;0;4;;@Override public Headers headers() {     return this.headers. }
false;public;0;4;;@Override public MultiValueMap<String, ResponseCookie> cookies() {     return this.response.getCookies(). }
false;public;0;4;;@Override public List<HttpMessageReader<?>> messageReaders() {     return strategies.messageReaders(). }
false;public;0;4;;@Override public Optional<ServerHttpResponse> serverResponse() {     return Optional.empty(). }
false;public;0;4;;@Override public Map<String, Object> hints() {     return Hints.from(Hints.LOG_PREFIX_HINT, logPrefix). }
false;public;1;17;;@Override public <T> T body(BodyExtractor<T, ? super ClientHttpResponse> extractor) {     return extractor.extract(this.response, new BodyExtractor.Context() {          @Override         public List<HttpMessageReader<?>> messageReaders() {             return strategies.messageReaders().         }          @Override         public Optional<ServerHttpResponse> serverResponse() {             return Optional.empty().         }          @Override         public Map<String, Object> hints() {             return Hints.from(Hints.LOG_PREFIX_HINT, logPrefix).         }     }). }
false;public;1;4;;@Override public <T> Mono<T> bodyToMono(Class<? extends T> elementClass) {     return body(BodyExtractors.toMono(elementClass)). }
false;public;1;4;;@Override public <T> Mono<T> bodyToMono(ParameterizedTypeReference<T> typeReference) {     return body(BodyExtractors.toMono(typeReference)). }
false;public;1;4;;@Override public <T> Flux<T> bodyToFlux(Class<? extends T> elementClass) {     return body(BodyExtractors.toFlux(elementClass)). }
false;public;1;4;;@Override public <T> Flux<T> bodyToFlux(ParameterizedTypeReference<T> typeReference) {     return body(BodyExtractors.toFlux(typeReference)). }
false;public;1;4;;@Override public <T> Mono<ResponseEntity<T>> toEntity(Class<T> bodyType) {     return toEntityInternal(bodyToMono(bodyType)). }
false;public;1;4;;@Override public <T> Mono<ResponseEntity<T>> toEntity(ParameterizedTypeReference<T> typeReference) {     return toEntityInternal(bodyToMono(typeReference)). }
false;private;1;8;;private <T> Mono<ResponseEntity<T>> toEntityInternal(Mono<T> bodyMono) {     HttpHeaders headers = headers().asHttpHeaders().     int status = rawStatusCode().     return bodyMono.map(body -> createEntity(body, headers, status)).switchIfEmpty(Mono.defer(() -> Mono.just(createEntity(headers, status)))). }
false;public;1;4;;@Override public <T> Mono<ResponseEntity<List<T>>> toEntityList(Class<T> responseType) {     return toEntityListInternal(bodyToFlux(responseType)). }
false;public;1;4;;@Override public <T> Mono<ResponseEntity<List<T>>> toEntityList(ParameterizedTypeReference<T> typeReference) {     return toEntityListInternal(bodyToFlux(typeReference)). }
false;private;1;7;;private <T> Mono<ResponseEntity<List<T>>> toEntityListInternal(Flux<T> bodyFlux) {     HttpHeaders headers = headers().asHttpHeaders().     int status = rawStatusCode().     return bodyFlux.collectList().map(body -> createEntity(body, headers, status)). }
false;private;2;6;;private <T> ResponseEntity<T> createEntity(HttpHeaders headers, int status) {     HttpStatus resolvedStatus = HttpStatus.resolve(status).     return resolvedStatus != null ? new ResponseEntity<>(headers, resolvedStatus) : ResponseEntity.status(status).headers(headers).build(). }
false;private;3;6;;private <T> ResponseEntity<T> createEntity(T body, HttpHeaders headers, int status) {     HttpStatus resolvedStatus = HttpStatus.resolve(status).     return resolvedStatus != null ? new ResponseEntity<>(body, headers, resolvedStatus) : ResponseEntity.status(status).headers(headers).body(body). }
false;private;0;3;;private HttpHeaders delegate() {     return response.getHeaders(). }
false;public;0;4;;@Override public OptionalLong contentLength() {     return toOptionalLong(delegate().getContentLength()). }
false;public;0;4;;@Override public Optional<MediaType> contentType() {     return Optional.ofNullable(delegate().getContentType()). }
false;public;1;5;;@Override public List<String> header(String headerName) {     List<String> headerValues = delegate().get(headerName).     return (headerValues != null ? headerValues : Collections.emptyList()). }
false;public;0;4;;@Override public HttpHeaders asHttpHeaders() {     return HttpHeaders.readOnlyHttpHeaders(delegate()). }
false;private;1;3;;private OptionalLong toOptionalLong(long value) {     return (value != -1 ? OptionalLong.of(value) : OptionalLong.empty()). }
