commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Add one or more resource locations from which to serve static content.  * Each location must point to a valid directory. Multiple locations may  * be specified as a comma-separated list, and the locations will be checked  * for a given resource in the order specified.  *  * <p>For example, {{@code "/"},  * {@code "classpath:/META-INF/public-web-resources/"}} allows resources to  * be served both from the web application root and from any JAR on the  * classpath that contains a {@code /META-INF/public-web-resources/} directory,  * with resources in the web application root taking precedence.  * @return the same {@link ResourceHandlerRegistration} instance, for  * chained method invocation  */ ;/**  * Add one or more resource locations from which to serve static content.  * Each location must point to a valid directory. Multiple locations may  * be specified as a comma-separated list, and the locations will be checked  * for a given resource in the order specified.  *  * <p>For example, {{@code "/"},  * {@code "classpath:/META-INF/public-web-resources/"}} allows resources to  * be served both from the web application root and from any JAR on the  * classpath that contains a {@code /META-INF/public-web-resources/} directory,  * with resources in the web application root taking precedence.  * @return the same {@link ResourceHandlerRegistration} instance, for  * chained method invocation  */ public ResourceHandlerRegistration addResourceLocations(String... resourceLocations) {     this.locationValues.addAll(Arrays.asList(resourceLocations)).     return this. }
true;public;1;4;/**  * Specify the {@link CacheControl} which should be used  * by the resource handler.  * @param cacheControl the CacheControl configuration to use  * @return the same {@link ResourceHandlerRegistration} instance, for  * chained method invocation  */ ;/**  * Specify the {@link CacheControl} which should be used  * by the resource handler.  * @param cacheControl the CacheControl configuration to use  * @return the same {@link ResourceHandlerRegistration} instance, for  * chained method invocation  */ public ResourceHandlerRegistration setCacheControl(CacheControl cacheControl) {     this.cacheControl = cacheControl.     return this. }
true;public;1;4;/**  * Configure a chain of resource resolvers and transformers to use. This  * can be useful, for example, to apply a version strategy to resource URLs.  * <p>If this method is not invoked, by default only a simple  * {@code PathResourceResolver} is used in order to match URL paths to  * resources under the configured locations.  * @param cacheResources whether to cache the result of resource resolution.  * setting this to "true" is recommended for production (and "false" for  * development, especially when applying a version strategy)  * @return the same {@link ResourceHandlerRegistration} instance, for  * chained method invocation  */ ;/**  * Configure a chain of resource resolvers and transformers to use. This  * can be useful, for example, to apply a version strategy to resource URLs.  * <p>If this method is not invoked, by default only a simple  * {@code PathResourceResolver} is used in order to match URL paths to  * resources under the configured locations.  * @param cacheResources whether to cache the result of resource resolution.  * setting this to "true" is recommended for production (and "false" for  * development, especially when applying a version strategy)  * @return the same {@link ResourceHandlerRegistration} instance, for  * chained method invocation  */ public ResourceChainRegistration resourceChain(boolean cacheResources) {     this.resourceChainRegistration = new ResourceChainRegistration(cacheResources).     return this.resourceChainRegistration. }
true;public;2;4;/**  * Configure a chain of resource resolvers and transformers to use. This  * can be useful, for example, to apply a version strategy to resource URLs.  * <p>If this method is not invoked, by default only a simple  * {@code PathResourceResolver} is used in order to match URL paths to  * resources under the configured locations.  * @param cacheResources whether to cache the result of resource resolution.  * setting this to "true" is recommended for production (and "false" for  * development, especially when applying a version strategy  * @param cache the cache to use for storing resolved and transformed resources.  * by default a {@link org.springframework.cache.concurrent.ConcurrentMapCache}  * is used. Since Resources aren't serializable and can be dependent on the  * application host, one should not use a distributed cache but rather an  * in-memory cache.  * @return the same {@link ResourceHandlerRegistration} instance, for chained method invocation  */ ;/**  * Configure a chain of resource resolvers and transformers to use. This  * can be useful, for example, to apply a version strategy to resource URLs.  * <p>If this method is not invoked, by default only a simple  * {@code PathResourceResolver} is used in order to match URL paths to  * resources under the configured locations.  * @param cacheResources whether to cache the result of resource resolution.  * setting this to "true" is recommended for production (and "false" for  * development, especially when applying a version strategy  * @param cache the cache to use for storing resolved and transformed resources.  * by default a {@link org.springframework.cache.concurrent.ConcurrentMapCache}  * is used. Since Resources aren't serializable and can be dependent on the  * application host, one should not use a distributed cache but rather an  * in-memory cache.  * @return the same {@link ResourceHandlerRegistration} instance, for chained method invocation  */ public ResourceChainRegistration resourceChain(boolean cacheResources, Cache cache) {     this.resourceChainRegistration = new ResourceChainRegistration(cacheResources, cache).     return this.resourceChainRegistration. }
true;protected;0;3;/**  * Returns the URL path patterns for the resource handler.  */ ;/**  * Returns the URL path patterns for the resource handler.  */ protected String[] getPathPatterns() {     return this.pathPatterns. }
true;protected;0;13;/**  * Returns a {@link ResourceWebHandler} instance.  */ ;/**  * Returns a {@link ResourceWebHandler} instance.  */ protected ResourceWebHandler getRequestHandler() {     ResourceWebHandler handler = new ResourceWebHandler().     handler.setLocationValues(this.locationValues).     handler.setResourceLoader(this.resourceLoader).     if (this.resourceChainRegistration != null) {         handler.setResourceResolvers(this.resourceChainRegistration.getResourceResolvers()).         handler.setResourceTransformers(this.resourceChainRegistration.getResourceTransformers()).     }     if (this.cacheControl != null) {         handler.setCacheControl(this.cacheControl).     }     return handler. }
