commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public RequestHeadersUriSpec<?> get() {     return methodInternal(HttpMethod.GET). }
false;public;0;4;;@Override public RequestHeadersUriSpec<?> head() {     return methodInternal(HttpMethod.HEAD). }
false;public;0;4;;@Override public RequestBodyUriSpec post() {     return methodInternal(HttpMethod.POST). }
false;public;0;4;;@Override public RequestBodyUriSpec put() {     return methodInternal(HttpMethod.PUT). }
false;public;0;4;;@Override public RequestBodyUriSpec patch() {     return methodInternal(HttpMethod.PATCH). }
false;public;0;4;;@Override public RequestHeadersUriSpec<?> delete() {     return methodInternal(HttpMethod.DELETE). }
false;public;0;4;;@Override public RequestHeadersUriSpec<?> options() {     return methodInternal(HttpMethod.OPTIONS). }
false;public;1;4;;@Override public RequestBodyUriSpec method(HttpMethod httpMethod) {     return methodInternal(httpMethod). }
false;private;1;3;;private RequestBodyUriSpec methodInternal(HttpMethod httpMethod) {     return new DefaultRequestBodyUriSpec(httpMethod). }
false;public;0;4;;@Override public Builder mutate() {     return new DefaultWebClientBuilder(this.builder). }
false;public;2;5;;@Override public RequestBodySpec uri(String uriTemplate, Object... uriVariables) {     attribute(URI_TEMPLATE_ATTRIBUTE, uriTemplate).     return uri(uriBuilderFactory.expand(uriTemplate, uriVariables)). }
false;public;2;5;;@Override public RequestBodySpec uri(String uriTemplate, Map<String, ?> uriVariables) {     attribute(URI_TEMPLATE_ATTRIBUTE, uriTemplate).     return uri(uriBuilderFactory.expand(uriTemplate, uriVariables)). }
false;public;1;4;;@Override public RequestBodySpec uri(Function<UriBuilder, URI> uriFunction) {     return uri(uriFunction.apply(uriBuilderFactory.builder())). }
false;public;1;5;;@Override public RequestBodySpec uri(URI uri) {     this.uri = uri.     return this. }
false;private;0;6;;private HttpHeaders getHeaders() {     if (this.headers == null) {         this.headers = new HttpHeaders().     }     return this.headers. }
false;private;0;6;;private MultiValueMap<String, String> getCookies() {     if (this.cookies == null) {         this.cookies = new LinkedMultiValueMap<>(4).     }     return this.cookies. }
false;public;2;7;;@Override public DefaultRequestBodyUriSpec header(String headerName, String... headerValues) {     for (String headerValue : headerValues) {         getHeaders().add(headerName, headerValue).     }     return this. }
false;public;1;5;;@Override public DefaultRequestBodyUriSpec headers(Consumer<HttpHeaders> headersConsumer) {     headersConsumer.accept(getHeaders()).     return this. }
false;public;2;5;;@Override public RequestBodySpec attribute(String name, Object value) {     this.attributes.put(name, value).     return this. }
false;public;1;5;;@Override public RequestBodySpec attributes(Consumer<Map<String, Object>> attributesConsumer) {     attributesConsumer.accept(this.attributes).     return this. }
false;public;1;5;;@Override public DefaultRequestBodyUriSpec accept(MediaType... acceptableMediaTypes) {     getHeaders().setAccept(Arrays.asList(acceptableMediaTypes)).     return this. }
false;public;1;5;;@Override public DefaultRequestBodyUriSpec acceptCharset(Charset... acceptableCharsets) {     getHeaders().setAcceptCharset(Arrays.asList(acceptableCharsets)).     return this. }
false;public;1;5;;@Override public DefaultRequestBodyUriSpec contentType(MediaType contentType) {     getHeaders().setContentType(contentType).     return this. }
false;public;1;5;;@Override public DefaultRequestBodyUriSpec contentLength(long contentLength) {     getHeaders().setContentLength(contentLength).     return this. }
false;public;2;5;;@Override public DefaultRequestBodyUriSpec cookie(String name, String value) {     getCookies().add(name, value).     return this. }
false;public;1;5;;@Override public DefaultRequestBodyUriSpec cookies(Consumer<MultiValueMap<String, String>> cookiesConsumer) {     cookiesConsumer.accept(getCookies()).     return this. }
false;public;1;5;;@Override public DefaultRequestBodyUriSpec ifModifiedSince(ZonedDateTime ifModifiedSince) {     getHeaders().setIfModifiedSince(ifModifiedSince).     return this. }
false;public;1;5;;@Override public DefaultRequestBodyUriSpec ifNoneMatch(String... ifNoneMatches) {     getHeaders().setIfNoneMatch(Arrays.asList(ifNoneMatches)).     return this. }
false;public;1;5;;@Override public RequestHeadersSpec<?> body(BodyInserter<?, ? super ClientHttpRequest> inserter) {     this.inserter = inserter.     return this. }
false;public;2;7;;@Override public <T, P extends Publisher<T>> RequestHeadersSpec<?> body(P publisher, ParameterizedTypeReference<T> typeReference) {     this.inserter = BodyInserters.fromPublisher(publisher, typeReference).     return this. }
false;public;2;5;;@Override public <T, P extends Publisher<T>> RequestHeadersSpec<?> body(P publisher, Class<T> elementClass) {     this.inserter = BodyInserters.fromPublisher(publisher, elementClass).     return this. }
false;public;1;7;;@Override public RequestHeadersSpec<?> syncBody(Object body) {     Assert.isTrue(!(body instanceof Publisher), "Please specify the element class by using body(Publisher, Class)").     this.inserter = BodyInserters.fromObject(body).     return this. }
false;public;0;8;;@Override public Mono<ClientResponse> exchange() {     ClientRequest request = (this.inserter != null ? initRequestBuilder().body(this.inserter).build() : initRequestBuilder().build()).     return Mono.defer(() -> exchangeFunction.exchange(request)).switchIfEmpty(NO_HTTP_CLIENT_RESPONSE_ERROR). }
false;private;0;9;;private ClientRequest.Builder initRequestBuilder() {     if (defaultRequest != null) {         defaultRequest.accept(this).     }     return ClientRequest.create(this.httpMethod, initUri()).headers(headers -> headers.addAll(initHeaders())).cookies(cookies -> cookies.addAll(initCookies())).attributes(attributes -> attributes.putAll(this.attributes)). }
false;private;0;3;;private URI initUri() {     return (this.uri != null ? this.uri : uriBuilderFactory.expand("")). }
false;private;0;14;;private HttpHeaders initHeaders() {     if (CollectionUtils.isEmpty(this.headers)) {         return (defaultHeaders != null ? defaultHeaders : new HttpHeaders()).     } else if (CollectionUtils.isEmpty(defaultHeaders)) {         return this.headers.     } else {         HttpHeaders result = new HttpHeaders().         result.putAll(defaultHeaders).         result.putAll(this.headers).         return result.     } }
false;private;0;14;;private MultiValueMap<String, String> initCookies() {     if (CollectionUtils.isEmpty(this.cookies)) {         return (defaultCookies != null ? defaultCookies : new LinkedMultiValueMap<>()).     } else if (CollectionUtils.isEmpty(defaultCookies)) {         return this.cookies.     } else {         MultiValueMap<String, String> result = new LinkedMultiValueMap<>().         result.putAll(defaultCookies).         result.putAll(this.cookies).         return result.     } }
false;public;0;4;;@Override public ResponseSpec retrieve() {     return new DefaultResponseSpec(exchange(), this::createRequest). }
false;public;0;4;;@Override public HttpMethod getMethod() {     return httpMethod. }
false;public;0;4;;@Override public String getMethodValue() {     return httpMethod.name(). }
false;public;0;4;;@Override public URI getURI() {     return this.uri. }
false;public;0;4;;@Override public HttpHeaders getHeaders() {     return this.headers. }
false;private;0;23;;private HttpRequest createRequest() {     return new HttpRequest() {          private final URI uri = initUri().          private final HttpHeaders headers = initHeaders().          @Override         public HttpMethod getMethod() {             return httpMethod.         }          @Override         public String getMethodValue() {             return httpMethod.name().         }          @Override         public URI getURI() {             return this.uri.         }          @Override         public HttpHeaders getHeaders() {             return this.headers.         }     }. }
false;public;2;12;;@Override public ResponseSpec onStatus(Predicate<HttpStatus> statusPredicate, Function<ClientResponse, Mono<? extends Throwable>> exceptionFunction) {     if (this.statusHandlers.size() == 1 && this.statusHandlers.get(0) == DEFAULT_STATUS_HANDLER) {         this.statusHandlers.clear().     }     this.statusHandlers.add(new StatusHandler(statusPredicate, (clientResponse, request) -> exceptionFunction.apply(clientResponse))).     return this. }
false;public;1;5;;@Override public <T> Mono<T> bodyToMono(Class<T> bodyType) {     return this.responseMono.flatMap(response -> handleBody(response, response.bodyToMono(bodyType), mono -> mono.flatMap(Mono::error))). }
false;public;1;5;;@Override public <T> Mono<T> bodyToMono(ParameterizedTypeReference<T> bodyType) {     return this.responseMono.flatMap(response -> handleBody(response, response.bodyToMono(bodyType), mono -> mono.flatMap(Mono::error))). }
false;public;1;5;;@Override public <T> Flux<T> bodyToFlux(Class<T> elementType) {     return this.responseMono.flatMapMany(response -> handleBody(response, response.bodyToFlux(elementType), mono -> mono.flatMapMany(Flux::error))). }
false;public;1;5;;@Override public <T> Flux<T> bodyToFlux(ParameterizedTypeReference<T> elementType) {     return this.responseMono.flatMapMany(response -> handleBody(response, response.bodyToFlux(elementType), mono -> mono.flatMapMany(Flux::error))). }
false;private;3;19;;private <T extends Publisher<?>> T handleBody(ClientResponse response, T bodyPublisher, Function<Mono<? extends Throwable>, T> errorFunction) {     if (HttpStatus.resolve(response.rawStatusCode()) != null) {         for (StatusHandler handler : this.statusHandlers) {             if (handler.test(response.statusCode())) {                 HttpRequest request = this.requestSupplier.get().                 Mono<? extends Throwable> exMono = handler.apply(response, request).                 exMono = exMono.flatMap(ex -> drainBody(response, ex)).                 exMono = exMono.onErrorResume(ex -> drainBody(response, ex)).                 return errorFunction.apply(exMono).             }         }         return bodyPublisher.     } else {         return errorFunction.apply(createResponseException(response, this.requestSupplier.get())).     } }
false;private;2;7;;@SuppressWarnings("unchecked") private <T> Mono<T> drainBody(ClientResponse response, Throwable ex) {     // but ignore exception, in case the handler did consume.     return (Mono<T>) response.bodyToMono(Void.class).onErrorResume(ex2 -> Mono.empty()).thenReturn(ex). }
false;private,static;2;34;;private static Mono<WebClientResponseException> createResponseException(ClientResponse response, HttpRequest request) {     return DataBufferUtils.join(response.body(BodyExtractors.toDataBuffers())).map(dataBuffer -> {         byte[] bytes = new byte[dataBuffer.readableByteCount()].         dataBuffer.read(bytes).         DataBufferUtils.release(dataBuffer).         return bytes.     }).defaultIfEmpty(new byte[0]).map(bodyBytes -> {         Charset charset = response.headers().contentType().map(MimeType::getCharset).orElse(StandardCharsets.ISO_8859_1).         if (HttpStatus.resolve(response.rawStatusCode()) != null) {             return WebClientResponseException.create(response.statusCode().value(), response.statusCode().getReasonPhrase(), response.headers().asHttpHeaders(), bodyBytes, charset, request).         } else {             return new UnknownHttpStatusCodeException(response.rawStatusCode(), response.headers().asHttpHeaders(), bodyBytes, charset, request).         }     }). }
false;public;1;3;;public boolean test(HttpStatus status) {     return this.predicate.test(status). }
false;public;2;3;;public Mono<? extends Throwable> apply(ClientResponse response, HttpRequest request) {     return this.exceptionFunction.apply(response, request). }
