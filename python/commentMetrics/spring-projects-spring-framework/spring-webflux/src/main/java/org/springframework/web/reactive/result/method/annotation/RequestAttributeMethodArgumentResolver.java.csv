commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public boolean supportsParameter(MethodParameter param) {     return param.hasParameterAnnotation(RequestAttribute.class). }
false;protected;1;6;;@Override protected NamedValueInfo createNamedValueInfo(MethodParameter parameter) {     RequestAttribute ann = parameter.getParameterAnnotation(RequestAttribute.class).     Assert.state(ann != null, "No RequestAttribute annotation").     return new NamedValueInfo(ann.name(), ann.required(), ValueConstants.DEFAULT_NONE). }
false;protected;3;22;;@Override protected Object resolveNamedValue(String name, MethodParameter parameter, ServerWebExchange exchange) {     Object value = exchange.getAttribute(name).     ReactiveAdapter toAdapter = getAdapterRegistry().getAdapter(parameter.getParameterType()).     if (toAdapter != null) {         if (value == null) {             Assert.isTrue(toAdapter.supportsEmpty(), () -> "No request attribute '" + name + "' and target type " + parameter.getGenericParameterType() + " doesn't support empty values.").             return toAdapter.fromPublisher(Mono.empty()).         }         if (parameter.getParameterType().isAssignableFrom(value.getClass())) {             return value.         }         ReactiveAdapter fromAdapter = getAdapterRegistry().getAdapter(value.getClass()).         Assert.isTrue(fromAdapter != null, () -> getClass().getSimpleName() + " doesn't support " + "reactive type wrapper: " + parameter.getGenericParameterType()).         return toAdapter.fromPublisher(fromAdapter.toPublisher(value)).     }     return value. }
false;protected;2;6;;@Override protected void handleMissingValue(String name, MethodParameter parameter) {     String type = parameter.getNestedParameterType().getSimpleName().     String reason = "Missing request attribute '" + name + "' of type " + type.     throw new ServerWebInputException(reason, parameter). }
