commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return this.name. }
false;public;0;5;;@Override @Nullable public T getValue() {     return this.value. }
false;public;0;4;;@Override public boolean isNegated() {     return this.isNegated. }
false;public,final;1;10;;public final boolean match(ServerWebExchange exchange) {     boolean isMatch.     if (this.value != null) {         isMatch = matchValue(exchange).     } else {         isMatch = matchName(exchange).     }     return this.isNegated != isMatch. }
false;protected,abstract;0;1;;protected abstract boolean isCaseSensitiveName().
false;protected,abstract;1;1;;protected abstract T parseValue(String valueExpression).
false;protected,abstract;1;1;;protected abstract boolean matchName(ServerWebExchange exchange).
false;protected,abstract;1;1;;protected abstract boolean matchValue(ServerWebExchange exchange).
false;public;1;12;;@Override public boolean equals(@Nullable Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     AbstractNameValueExpression<?> that = (AbstractNameValueExpression<?>) other.     return ((isCaseSensitiveName() ? this.name.equals(that.name) : this.name.equalsIgnoreCase(that.name)) && ObjectUtils.nullSafeEquals(this.value, that.value) && this.isNegated == that.isNegated). }
false;public;0;7;;@Override public int hashCode() {     int result = (isCaseSensitiveName() ? this.name : this.name.toLowerCase()).hashCode().     result = 31 * result + ObjectUtils.nullSafeHashCode(this.value).     result = 31 * result + (this.isNegated ? 1 : 0).     return result. }
false;public;0;19;;@Override public String toString() {     StringBuilder builder = new StringBuilder().     if (this.value != null) {         builder.append(this.name).         if (this.isNegated) {             builder.append('!').         }         builder.append('=').         builder.append(this.value).     } else {         if (this.isNegated) {             builder.append('!').         }         builder.append(this.name).     }     return builder.toString(). }
