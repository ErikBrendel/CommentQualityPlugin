# id;timestamp;commentText;codeText;commentWords;codeWords
ConsumesRequestCondition -> private ConsumesRequestCondition(Collection<ConsumeMediaTypeExpression> expressions);1485986572;Private constructor accepting parsed media type expressions.;private ConsumesRequestCondition(Collection<ConsumeMediaTypeExpression> expressions) {_		this.expressions = new ArrayList<>(expressions)__		Collections.sort(this.expressions)__	};private,constructor,accepting,parsed,media,type,expressions;private,consumes,request,condition,collection,consume,media,type,expression,expressions,this,expressions,new,array,list,expressions,collections,sort,this,expressions
ConsumesRequestCondition -> private ConsumesRequestCondition(Collection<ConsumeMediaTypeExpression> expressions);1520528267;Private constructor accepting parsed media type expressions.;private ConsumesRequestCondition(Collection<ConsumeMediaTypeExpression> expressions) {_		this.expressions = new ArrayList<>(expressions)__		Collections.sort(this.expressions)__	};private,constructor,accepting,parsed,media,type,expressions;private,consumes,request,condition,collection,consume,media,type,expression,expressions,this,expressions,new,array,list,expressions,collections,sort,this,expressions
ConsumesRequestCondition -> private ConsumesRequestCondition(Collection<ConsumeMediaTypeExpression> expressions);1521714971;Private constructor accepting parsed media type expressions.;private ConsumesRequestCondition(Collection<ConsumeMediaTypeExpression> expressions) {_		this.expressions = new ArrayList<>(expressions)__		Collections.sort(this.expressions)__	};private,constructor,accepting,parsed,media,type,expressions;private,consumes,request,condition,collection,consume,media,type,expression,expressions,this,expressions,new,array,list,expressions,collections,sort,this,expressions
ConsumesRequestCondition -> private ConsumesRequestCondition(Collection<ConsumeMediaTypeExpression> expressions);1530174524;Private constructor accepting parsed media type expressions.;private ConsumesRequestCondition(Collection<ConsumeMediaTypeExpression> expressions) {_		this.expressions = new ArrayList<>(expressions)__		Collections.sort(this.expressions)__	};private,constructor,accepting,parsed,media,type,expressions;private,consumes,request,condition,collection,consume,media,type,expression,expressions,this,expressions,new,array,list,expressions,collections,sort,this,expressions
ConsumesRequestCondition -> private ConsumesRequestCondition(Collection<ConsumeMediaTypeExpression> expressions);1530190293;Private constructor accepting parsed media type expressions.;private ConsumesRequestCondition(Collection<ConsumeMediaTypeExpression> expressions) {_		this.expressions = new ArrayList<>(expressions)__		Collections.sort(this.expressions)__	};private,constructor,accepting,parsed,media,type,expressions;private,consumes,request,condition,collection,consume,media,type,expression,expressions,this,expressions,new,array,list,expressions,collections,sort,this,expressions
ConsumesRequestCondition -> @Override 	public ConsumesRequestCondition combine(ConsumesRequestCondition other);1485986572;Returns the "other" instance if it has any expressions_ returns "this"_instance otherwise. Practically that means a method-level "consumes"_overrides a type-level "consumes" condition.;@Override_	public ConsumesRequestCondition combine(ConsumesRequestCondition other) {_		return !other.expressions.isEmpty() ? other : this__	};returns,the,other,instance,if,it,has,any,expressions,returns,this,instance,otherwise,practically,that,means,a,method,level,consumes,overrides,a,type,level,consumes,condition;override,public,consumes,request,condition,combine,consumes,request,condition,other,return,other,expressions,is,empty,other,this
ConsumesRequestCondition -> @Override 	public ConsumesRequestCondition combine(ConsumesRequestCondition other);1520528267;Returns the "other" instance if it has any expressions_ returns "this"_instance otherwise. Practically that means a method-level "consumes"_overrides a type-level "consumes" condition.;@Override_	public ConsumesRequestCondition combine(ConsumesRequestCondition other) {_		return !other.expressions.isEmpty() ? other : this__	};returns,the,other,instance,if,it,has,any,expressions,returns,this,instance,otherwise,practically,that,means,a,method,level,consumes,overrides,a,type,level,consumes,condition;override,public,consumes,request,condition,combine,consumes,request,condition,other,return,other,expressions,is,empty,other,this
ConsumesRequestCondition -> @Override 	public ConsumesRequestCondition combine(ConsumesRequestCondition other);1521714971;Returns the "other" instance if it has any expressions_ returns "this"_instance otherwise. Practically that means a method-level "consumes"_overrides a type-level "consumes" condition.;@Override_	public ConsumesRequestCondition combine(ConsumesRequestCondition other) {_		return !other.expressions.isEmpty() ? other : this__	};returns,the,other,instance,if,it,has,any,expressions,returns,this,instance,otherwise,practically,that,means,a,method,level,consumes,overrides,a,type,level,consumes,condition;override,public,consumes,request,condition,combine,consumes,request,condition,other,return,other,expressions,is,empty,other,this
ConsumesRequestCondition -> @Override 	public ConsumesRequestCondition combine(ConsumesRequestCondition other);1530174524;Returns the "other" instance if it has any expressions_ returns "this"_instance otherwise. Practically that means a method-level "consumes"_overrides a type-level "consumes" condition.;@Override_	public ConsumesRequestCondition combine(ConsumesRequestCondition other) {_		return !other.expressions.isEmpty() ? other : this__	};returns,the,other,instance,if,it,has,any,expressions,returns,this,instance,otherwise,practically,that,means,a,method,level,consumes,overrides,a,type,level,consumes,condition;override,public,consumes,request,condition,combine,consumes,request,condition,other,return,other,expressions,is,empty,other,this
ConsumesRequestCondition -> @Override 	public ConsumesRequestCondition combine(ConsumesRequestCondition other);1530190293;Returns the "other" instance if it has any expressions_ returns "this"_instance otherwise. Practically that means a method-level "consumes"_overrides a type-level "consumes" condition.;@Override_	public ConsumesRequestCondition combine(ConsumesRequestCondition other) {_		return (!other.expressions.isEmpty() ? other : this)__	};returns,the,other,instance,if,it,has,any,expressions,returns,this,instance,otherwise,practically,that,means,a,method,level,consumes,overrides,a,type,level,consumes,condition;override,public,consumes,request,condition,combine,consumes,request,condition,other,return,other,expressions,is,empty,other,this
ConsumesRequestCondition -> public ConsumesRequestCondition(String[] consumes, String[] headers);1485986572;Creates a new instance with "consumes" and "header" expressions._"Header" expressions where the header name is not 'Content-Type' or have_no header value defined are ignored. If 0 expressions are provided in_total, the condition will match to every request_@param consumes as described in {@link RequestMapping#consumes()}_@param headers as described in {@link RequestMapping#headers()};public ConsumesRequestCondition(String[] consumes, String[] headers) {_		this(parseExpressions(consumes, headers))__	};creates,a,new,instance,with,consumes,and,header,expressions,header,expressions,where,the,header,name,is,not,content,type,or,have,no,header,value,defined,are,ignored,if,0,expressions,are,provided,in,total,the,condition,will,match,to,every,request,param,consumes,as,described,in,link,request,mapping,consumes,param,headers,as,described,in,link,request,mapping,headers;public,consumes,request,condition,string,consumes,string,headers,this,parse,expressions,consumes,headers
ConsumesRequestCondition -> public ConsumesRequestCondition(String[] consumes, String[] headers);1520528267;Creates a new instance with "consumes" and "header" expressions._"Header" expressions where the header name is not 'Content-Type' or have_no header value defined are ignored. If 0 expressions are provided in_total, the condition will match to every request_@param consumes as described in {@link RequestMapping#consumes()}_@param headers as described in {@link RequestMapping#headers()};public ConsumesRequestCondition(String[] consumes, String[] headers) {_		this(parseExpressions(consumes, headers))__	};creates,a,new,instance,with,consumes,and,header,expressions,header,expressions,where,the,header,name,is,not,content,type,or,have,no,header,value,defined,are,ignored,if,0,expressions,are,provided,in,total,the,condition,will,match,to,every,request,param,consumes,as,described,in,link,request,mapping,consumes,param,headers,as,described,in,link,request,mapping,headers;public,consumes,request,condition,string,consumes,string,headers,this,parse,expressions,consumes,headers
ConsumesRequestCondition -> public ConsumesRequestCondition(String[] consumes, String[] headers);1521714971;Creates a new instance with "consumes" and "header" expressions._"Header" expressions where the header name is not 'Content-Type' or have_no header value defined are ignored. If 0 expressions are provided in_total, the condition will match to every request_@param consumes as described in {@link RequestMapping#consumes()}_@param headers as described in {@link RequestMapping#headers()};public ConsumesRequestCondition(String[] consumes, String[] headers) {_		this(parseExpressions(consumes, headers))__	};creates,a,new,instance,with,consumes,and,header,expressions,header,expressions,where,the,header,name,is,not,content,type,or,have,no,header,value,defined,are,ignored,if,0,expressions,are,provided,in,total,the,condition,will,match,to,every,request,param,consumes,as,described,in,link,request,mapping,consumes,param,headers,as,described,in,link,request,mapping,headers;public,consumes,request,condition,string,consumes,string,headers,this,parse,expressions,consumes,headers
ConsumesRequestCondition -> public ConsumesRequestCondition(String[] consumes, String[] headers);1530174524;Creates a new instance with "consumes" and "header" expressions._"Header" expressions where the header name is not 'Content-Type' or have_no header value defined are ignored. If 0 expressions are provided in_total, the condition will match to every request_@param consumes as described in {@link RequestMapping#consumes()}_@param headers as described in {@link RequestMapping#headers()};public ConsumesRequestCondition(String[] consumes, String[] headers) {_		this(parseExpressions(consumes, headers))__	};creates,a,new,instance,with,consumes,and,header,expressions,header,expressions,where,the,header,name,is,not,content,type,or,have,no,header,value,defined,are,ignored,if,0,expressions,are,provided,in,total,the,condition,will,match,to,every,request,param,consumes,as,described,in,link,request,mapping,consumes,param,headers,as,described,in,link,request,mapping,headers;public,consumes,request,condition,string,consumes,string,headers,this,parse,expressions,consumes,headers
ConsumesRequestCondition -> public ConsumesRequestCondition(String[] consumes, String[] headers);1530190293;Creates a new instance with "consumes" and "header" expressions._"Header" expressions where the header name is not 'Content-Type' or have_no header value defined are ignored. If 0 expressions are provided in_total, the condition will match to every request_@param consumes as described in {@link RequestMapping#consumes()}_@param headers as described in {@link RequestMapping#headers()};public ConsumesRequestCondition(String[] consumes, String[] headers) {_		this(parseExpressions(consumes, headers))__	};creates,a,new,instance,with,consumes,and,header,expressions,header,expressions,where,the,header,name,is,not,content,type,or,have,no,header,value,defined,are,ignored,if,0,expressions,are,provided,in,total,the,condition,will,match,to,every,request,param,consumes,as,described,in,link,request,mapping,consumes,param,headers,as,described,in,link,request,mapping,headers;public,consumes,request,condition,string,consumes,string,headers,this,parse,expressions,consumes,headers
ConsumesRequestCondition -> @Override 	public int compareTo(ConsumesRequestCondition other, ServerWebExchange exchange);1485986572;Returns:_<ul>_<li>0 if the two conditions have the same number of expressions_<li>Less than 0 if "this" has more or more specific media type expressions_<li>Greater than 0 if "other" has more or more specific media type expressions_</ul>_<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(ServerWebExchange)} and each instance contains_the matching consumable media type expression only or is otherwise empty.;@Override_	public int compareTo(ConsumesRequestCondition other, ServerWebExchange exchange) {_		if (this.expressions.isEmpty() && other.expressions.isEmpty()) {_			return 0__		}_		else if (this.expressions.isEmpty()) {_			return 1__		}_		else if (other.expressions.isEmpty()) {_			return -1__		}_		else {_			return this.expressions.get(0).compareTo(other.expressions.get(0))__		}_	};returns,ul,li,0,if,the,two,conditions,have,the,same,number,of,expressions,li,less,than,0,if,this,has,more,or,more,specific,media,type,expressions,li,greater,than,0,if,other,has,more,or,more,specific,media,type,expressions,ul,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,server,web,exchange,and,each,instance,contains,the,matching,consumable,media,type,expression,only,or,is,otherwise,empty;override,public,int,compare,to,consumes,request,condition,other,server,web,exchange,exchange,if,this,expressions,is,empty,other,expressions,is,empty,return,0,else,if,this,expressions,is,empty,return,1,else,if,other,expressions,is,empty,return,1,else,return,this,expressions,get,0,compare,to,other,expressions,get,0
ConsumesRequestCondition -> @Override 	public int compareTo(ConsumesRequestCondition other, ServerWebExchange exchange);1520528267;Returns:_<ul>_<li>0 if the two conditions have the same number of expressions_<li>Less than 0 if "this" has more or more specific media type expressions_<li>Greater than 0 if "other" has more or more specific media type expressions_</ul>_<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(ServerWebExchange)} and each instance contains_the matching consumable media type expression only or is otherwise empty.;@Override_	public int compareTo(ConsumesRequestCondition other, ServerWebExchange exchange) {_		if (this.expressions.isEmpty() && other.expressions.isEmpty()) {_			return 0__		}_		else if (this.expressions.isEmpty()) {_			return 1__		}_		else if (other.expressions.isEmpty()) {_			return -1__		}_		else {_			return this.expressions.get(0).compareTo(other.expressions.get(0))__		}_	};returns,ul,li,0,if,the,two,conditions,have,the,same,number,of,expressions,li,less,than,0,if,this,has,more,or,more,specific,media,type,expressions,li,greater,than,0,if,other,has,more,or,more,specific,media,type,expressions,ul,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,server,web,exchange,and,each,instance,contains,the,matching,consumable,media,type,expression,only,or,is,otherwise,empty;override,public,int,compare,to,consumes,request,condition,other,server,web,exchange,exchange,if,this,expressions,is,empty,other,expressions,is,empty,return,0,else,if,this,expressions,is,empty,return,1,else,if,other,expressions,is,empty,return,1,else,return,this,expressions,get,0,compare,to,other,expressions,get,0
ConsumesRequestCondition -> @Override 	public int compareTo(ConsumesRequestCondition other, ServerWebExchange exchange);1521714971;Returns:_<ul>_<li>0 if the two conditions have the same number of expressions_<li>Less than 0 if "this" has more or more specific media type expressions_<li>Greater than 0 if "other" has more or more specific media type expressions_</ul>_<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(ServerWebExchange)} and each instance contains_the matching consumable media type expression only or is otherwise empty.;@Override_	public int compareTo(ConsumesRequestCondition other, ServerWebExchange exchange) {_		if (this.expressions.isEmpty() && other.expressions.isEmpty()) {_			return 0__		}_		else if (this.expressions.isEmpty()) {_			return 1__		}_		else if (other.expressions.isEmpty()) {_			return -1__		}_		else {_			return this.expressions.get(0).compareTo(other.expressions.get(0))__		}_	};returns,ul,li,0,if,the,two,conditions,have,the,same,number,of,expressions,li,less,than,0,if,this,has,more,or,more,specific,media,type,expressions,li,greater,than,0,if,other,has,more,or,more,specific,media,type,expressions,ul,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,server,web,exchange,and,each,instance,contains,the,matching,consumable,media,type,expression,only,or,is,otherwise,empty;override,public,int,compare,to,consumes,request,condition,other,server,web,exchange,exchange,if,this,expressions,is,empty,other,expressions,is,empty,return,0,else,if,this,expressions,is,empty,return,1,else,if,other,expressions,is,empty,return,1,else,return,this,expressions,get,0,compare,to,other,expressions,get,0
ConsumesRequestCondition -> @Override 	public int compareTo(ConsumesRequestCondition other, ServerWebExchange exchange);1530174524;Returns:_<ul>_<li>0 if the two conditions have the same number of expressions_<li>Less than 0 if "this" has more or more specific media type expressions_<li>Greater than 0 if "other" has more or more specific media type expressions_</ul>_<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(ServerWebExchange)} and each instance contains_the matching consumable media type expression only or is otherwise empty.;@Override_	public int compareTo(ConsumesRequestCondition other, ServerWebExchange exchange) {_		if (this.expressions.isEmpty() && other.expressions.isEmpty()) {_			return 0__		}_		else if (this.expressions.isEmpty()) {_			return 1__		}_		else if (other.expressions.isEmpty()) {_			return -1__		}_		else {_			return this.expressions.get(0).compareTo(other.expressions.get(0))__		}_	};returns,ul,li,0,if,the,two,conditions,have,the,same,number,of,expressions,li,less,than,0,if,this,has,more,or,more,specific,media,type,expressions,li,greater,than,0,if,other,has,more,or,more,specific,media,type,expressions,ul,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,server,web,exchange,and,each,instance,contains,the,matching,consumable,media,type,expression,only,or,is,otherwise,empty;override,public,int,compare,to,consumes,request,condition,other,server,web,exchange,exchange,if,this,expressions,is,empty,other,expressions,is,empty,return,0,else,if,this,expressions,is,empty,return,1,else,if,other,expressions,is,empty,return,1,else,return,this,expressions,get,0,compare,to,other,expressions,get,0
ConsumesRequestCondition -> @Override 	public int compareTo(ConsumesRequestCondition other, ServerWebExchange exchange);1530190293;Returns:_<ul>_<li>0 if the two conditions have the same number of expressions_<li>Less than 0 if "this" has more or more specific media type expressions_<li>Greater than 0 if "other" has more or more specific media type expressions_</ul>_<p>It is assumed that both instances have been obtained via_{@link #getMatchingCondition(ServerWebExchange)} and each instance contains_the matching consumable media type expression only or is otherwise empty.;@Override_	public int compareTo(ConsumesRequestCondition other, ServerWebExchange exchange) {_		if (this.expressions.isEmpty() && other.expressions.isEmpty()) {_			return 0__		}_		else if (this.expressions.isEmpty()) {_			return 1__		}_		else if (other.expressions.isEmpty()) {_			return -1__		}_		else {_			return this.expressions.get(0).compareTo(other.expressions.get(0))__		}_	};returns,ul,li,0,if,the,two,conditions,have,the,same,number,of,expressions,li,less,than,0,if,this,has,more,or,more,specific,media,type,expressions,li,greater,than,0,if,other,has,more,or,more,specific,media,type,expressions,ul,p,it,is,assumed,that,both,instances,have,been,obtained,via,link,get,matching,condition,server,web,exchange,and,each,instance,contains,the,matching,consumable,media,type,expression,only,or,is,otherwise,empty;override,public,int,compare,to,consumes,request,condition,other,server,web,exchange,exchange,if,this,expressions,is,empty,other,expressions,is,empty,return,0,else,if,this,expressions,is,empty,return,1,else,if,other,expressions,is,empty,return,1,else,return,this,expressions,get,0,compare,to,other,expressions,get,0
ConsumesRequestCondition -> @Override 	public ConsumesRequestCondition getMatchingCondition(ServerWebExchange exchange);1485986572;Checks if any of the contained media type expressions match the given_request 'Content-Type' header and returns an instance that is guaranteed_to contain matching expressions only. The match is performed via_{@link MediaType#includes(MediaType)}._@param exchange the current exchange_@return the same instance if the condition contains no expressions__or a new condition with matching expressions only__or {@code null} if no expressions match.;@Override_	public ConsumesRequestCondition getMatchingCondition(ServerWebExchange exchange) {_		if (CorsUtils.isPreFlightRequest(exchange.getRequest())) {_			return PRE_FLIGHT_MATCH__		}_		if (isEmpty()) {_			return this__		}_		Set<ConsumeMediaTypeExpression> result = new LinkedHashSet<>(expressions)__		for (Iterator<ConsumeMediaTypeExpression> iterator = result.iterator()_ iterator.hasNext()_) {_			ConsumeMediaTypeExpression expression = iterator.next()__			if (!expression.match(exchange)) {_				iterator.remove()__			}_		}_		return (result.isEmpty()) ? null : new ConsumesRequestCondition(result)__	};checks,if,any,of,the,contained,media,type,expressions,match,the,given,request,content,type,header,and,returns,an,instance,that,is,guaranteed,to,contain,matching,expressions,only,the,match,is,performed,via,link,media,type,includes,media,type,param,exchange,the,current,exchange,return,the,same,instance,if,the,condition,contains,no,expressions,or,a,new,condition,with,matching,expressions,only,or,code,null,if,no,expressions,match;override,public,consumes,request,condition,get,matching,condition,server,web,exchange,exchange,if,cors,utils,is,pre,flight,request,exchange,get,request,return,if,is,empty,return,this,set,consume,media,type,expression,result,new,linked,hash,set,expressions,for,iterator,consume,media,type,expression,iterator,result,iterator,iterator,has,next,consume,media,type,expression,expression,iterator,next,if,expression,match,exchange,iterator,remove,return,result,is,empty,null,new,consumes,request,condition,result
ConsumesRequestCondition -> @Override 	public ConsumesRequestCondition getMatchingCondition(ServerWebExchange exchange);1520528267;Checks if any of the contained media type expressions match the given_request 'Content-Type' header and returns an instance that is guaranteed_to contain matching expressions only. The match is performed via_{@link MediaType#includes(MediaType)}._@param exchange the current exchange_@return the same instance if the condition contains no expressions__or a new condition with matching expressions only__or {@code null} if no expressions match.;@Override_	public ConsumesRequestCondition getMatchingCondition(ServerWebExchange exchange) {_		if (CorsUtils.isPreFlightRequest(exchange.getRequest())) {_			return PRE_FLIGHT_MATCH__		}_		if (isEmpty()) {_			return this__		}_		Set<ConsumeMediaTypeExpression> result = new LinkedHashSet<>(expressions)__		for (Iterator<ConsumeMediaTypeExpression> iterator = result.iterator()_ iterator.hasNext()_) {_			ConsumeMediaTypeExpression expression = iterator.next()__			if (!expression.match(exchange)) {_				iterator.remove()__			}_		}_		return (result.isEmpty()) ? null : new ConsumesRequestCondition(result)__	};checks,if,any,of,the,contained,media,type,expressions,match,the,given,request,content,type,header,and,returns,an,instance,that,is,guaranteed,to,contain,matching,expressions,only,the,match,is,performed,via,link,media,type,includes,media,type,param,exchange,the,current,exchange,return,the,same,instance,if,the,condition,contains,no,expressions,or,a,new,condition,with,matching,expressions,only,or,code,null,if,no,expressions,match;override,public,consumes,request,condition,get,matching,condition,server,web,exchange,exchange,if,cors,utils,is,pre,flight,request,exchange,get,request,return,if,is,empty,return,this,set,consume,media,type,expression,result,new,linked,hash,set,expressions,for,iterator,consume,media,type,expression,iterator,result,iterator,iterator,has,next,consume,media,type,expression,expression,iterator,next,if,expression,match,exchange,iterator,remove,return,result,is,empty,null,new,consumes,request,condition,result
ConsumesRequestCondition -> @Override 	public ConsumesRequestCondition getMatchingCondition(ServerWebExchange exchange);1521714971;Checks if any of the contained media type expressions match the given_request 'Content-Type' header and returns an instance that is guaranteed_to contain matching expressions only. The match is performed via_{@link MediaType#includes(MediaType)}._@param exchange the current exchange_@return the same instance if the condition contains no expressions__or a new condition with matching expressions only__or {@code null} if no expressions match.;@Override_	public ConsumesRequestCondition getMatchingCondition(ServerWebExchange exchange) {_		if (CorsUtils.isPreFlightRequest(exchange.getRequest())) {_			return PRE_FLIGHT_MATCH__		}_		if (isEmpty()) {_			return this__		}_		Set<ConsumeMediaTypeExpression> result = new LinkedHashSet<>(expressions)__		result.removeIf(expression -> !expression.match(exchange))__		return (result.isEmpty()) ? null : new ConsumesRequestCondition(result)__	};checks,if,any,of,the,contained,media,type,expressions,match,the,given,request,content,type,header,and,returns,an,instance,that,is,guaranteed,to,contain,matching,expressions,only,the,match,is,performed,via,link,media,type,includes,media,type,param,exchange,the,current,exchange,return,the,same,instance,if,the,condition,contains,no,expressions,or,a,new,condition,with,matching,expressions,only,or,code,null,if,no,expressions,match;override,public,consumes,request,condition,get,matching,condition,server,web,exchange,exchange,if,cors,utils,is,pre,flight,request,exchange,get,request,return,if,is,empty,return,this,set,consume,media,type,expression,result,new,linked,hash,set,expressions,result,remove,if,expression,expression,match,exchange,return,result,is,empty,null,new,consumes,request,condition,result
ConsumesRequestCondition -> @Override 	public ConsumesRequestCondition getMatchingCondition(ServerWebExchange exchange);1530174524;Checks if any of the contained media type expressions match the given_request 'Content-Type' header and returns an instance that is guaranteed_to contain matching expressions only. The match is performed via_{@link MediaType#includes(MediaType)}._@param exchange the current exchange_@return the same instance if the condition contains no expressions__or a new condition with matching expressions only__or {@code null} if no expressions match.;@Override_	public ConsumesRequestCondition getMatchingCondition(ServerWebExchange exchange) {_		if (CorsUtils.isPreFlightRequest(exchange.getRequest())) {_			return PRE_FLIGHT_MATCH__		}_		if (isEmpty()) {_			return this__		}_		Set<ConsumeMediaTypeExpression> result = new LinkedHashSet<>(this.expressions)__		result.removeIf(expression -> !expression.match(exchange))__		return (result.isEmpty()) ? null : new ConsumesRequestCondition(result)__	};checks,if,any,of,the,contained,media,type,expressions,match,the,given,request,content,type,header,and,returns,an,instance,that,is,guaranteed,to,contain,matching,expressions,only,the,match,is,performed,via,link,media,type,includes,media,type,param,exchange,the,current,exchange,return,the,same,instance,if,the,condition,contains,no,expressions,or,a,new,condition,with,matching,expressions,only,or,code,null,if,no,expressions,match;override,public,consumes,request,condition,get,matching,condition,server,web,exchange,exchange,if,cors,utils,is,pre,flight,request,exchange,get,request,return,if,is,empty,return,this,set,consume,media,type,expression,result,new,linked,hash,set,this,expressions,result,remove,if,expression,expression,match,exchange,return,result,is,empty,null,new,consumes,request,condition,result
ConsumesRequestCondition -> @Override 	public ConsumesRequestCondition getMatchingCondition(ServerWebExchange exchange);1530190293;Checks if any of the contained media type expressions match the given_request 'Content-Type' header and returns an instance that is guaranteed_to contain matching expressions only. The match is performed via_{@link MediaType#includes(MediaType)}._@param exchange the current exchange_@return the same instance if the condition contains no expressions__or a new condition with matching expressions only__or {@code null} if no expressions match.;@Override_	public ConsumesRequestCondition getMatchingCondition(ServerWebExchange exchange) {_		if (CorsUtils.isPreFlightRequest(exchange.getRequest())) {_			return PRE_FLIGHT_MATCH__		}_		if (isEmpty()) {_			return this__		}_		Set<ConsumeMediaTypeExpression> result = new LinkedHashSet<>(this.expressions)__		result.removeIf(expression -> !expression.match(exchange))__		return (!result.isEmpty() ? new ConsumesRequestCondition(result) : null)__	};checks,if,any,of,the,contained,media,type,expressions,match,the,given,request,content,type,header,and,returns,an,instance,that,is,guaranteed,to,contain,matching,expressions,only,the,match,is,performed,via,link,media,type,includes,media,type,param,exchange,the,current,exchange,return,the,same,instance,if,the,condition,contains,no,expressions,or,a,new,condition,with,matching,expressions,only,or,code,null,if,no,expressions,match;override,public,consumes,request,condition,get,matching,condition,server,web,exchange,exchange,if,cors,utils,is,pre,flight,request,exchange,get,request,return,if,is,empty,return,this,set,consume,media,type,expression,result,new,linked,hash,set,this,expressions,result,remove,if,expression,expression,match,exchange,return,result,is,empty,new,consumes,request,condition,result,null
ConsumesRequestCondition -> public boolean isEmpty();1485986572;Whether the condition has any media type expressions.;public boolean isEmpty() {_		return this.expressions.isEmpty()__	};whether,the,condition,has,any,media,type,expressions;public,boolean,is,empty,return,this,expressions,is,empty
ConsumesRequestCondition -> public boolean isEmpty();1520528267;Whether the condition has any media type expressions.;public boolean isEmpty() {_		return this.expressions.isEmpty()__	};whether,the,condition,has,any,media,type,expressions;public,boolean,is,empty,return,this,expressions,is,empty
ConsumesRequestCondition -> public boolean isEmpty();1521714971;Whether the condition has any media type expressions.;public boolean isEmpty() {_		return this.expressions.isEmpty()__	};whether,the,condition,has,any,media,type,expressions;public,boolean,is,empty,return,this,expressions,is,empty
ConsumesRequestCondition -> public boolean isEmpty();1530174524;Whether the condition has any media type expressions.;public boolean isEmpty() {_		return this.expressions.isEmpty()__	};whether,the,condition,has,any,media,type,expressions;public,boolean,is,empty,return,this,expressions,is,empty
ConsumesRequestCondition -> public boolean isEmpty();1530190293;Whether the condition has any media type expressions.;public boolean isEmpty() {_		return this.expressions.isEmpty()__	};whether,the,condition,has,any,media,type,expressions;public,boolean,is,empty,return,this,expressions,is,empty
ConsumesRequestCondition -> public ConsumesRequestCondition(String... consumes);1485986572;Creates a new instance from 0 or more "consumes" expressions._@param consumes expressions with the syntax described in_{@link RequestMapping#consumes()}_ if 0 expressions are provided,_the condition will match to every request;public ConsumesRequestCondition(String... consumes) {_		this(consumes, null)__	};creates,a,new,instance,from,0,or,more,consumes,expressions,param,consumes,expressions,with,the,syntax,described,in,link,request,mapping,consumes,if,0,expressions,are,provided,the,condition,will,match,to,every,request;public,consumes,request,condition,string,consumes,this,consumes,null
ConsumesRequestCondition -> public ConsumesRequestCondition(String... consumes);1520528267;Creates a new instance from 0 or more "consumes" expressions._@param consumes expressions with the syntax described in_{@link RequestMapping#consumes()}_ if 0 expressions are provided,_the condition will match to every request;public ConsumesRequestCondition(String... consumes) {_		this(consumes, null)__	};creates,a,new,instance,from,0,or,more,consumes,expressions,param,consumes,expressions,with,the,syntax,described,in,link,request,mapping,consumes,if,0,expressions,are,provided,the,condition,will,match,to,every,request;public,consumes,request,condition,string,consumes,this,consumes,null
ConsumesRequestCondition -> public ConsumesRequestCondition(String... consumes);1521714971;Creates a new instance from 0 or more "consumes" expressions._@param consumes expressions with the syntax described in_{@link RequestMapping#consumes()}_ if 0 expressions are provided,_the condition will match to every request;public ConsumesRequestCondition(String... consumes) {_		this(consumes, null)__	};creates,a,new,instance,from,0,or,more,consumes,expressions,param,consumes,expressions,with,the,syntax,described,in,link,request,mapping,consumes,if,0,expressions,are,provided,the,condition,will,match,to,every,request;public,consumes,request,condition,string,consumes,this,consumes,null
ConsumesRequestCondition -> public ConsumesRequestCondition(String... consumes);1530174524;Creates a new instance from 0 or more "consumes" expressions._@param consumes expressions with the syntax described in_{@link RequestMapping#consumes()}_ if 0 expressions are provided,_the condition will match to every request;public ConsumesRequestCondition(String... consumes) {_		this(consumes, null)__	};creates,a,new,instance,from,0,or,more,consumes,expressions,param,consumes,expressions,with,the,syntax,described,in,link,request,mapping,consumes,if,0,expressions,are,provided,the,condition,will,match,to,every,request;public,consumes,request,condition,string,consumes,this,consumes,null
ConsumesRequestCondition -> public ConsumesRequestCondition(String... consumes);1530190293;Creates a new instance from 0 or more "consumes" expressions._@param consumes expressions with the syntax described in_{@link RequestMapping#consumes()}_ if 0 expressions are provided,_the condition will match to every request;public ConsumesRequestCondition(String... consumes) {_		this(consumes, null)__	};creates,a,new,instance,from,0,or,more,consumes,expressions,param,consumes,expressions,with,the,syntax,described,in,link,request,mapping,consumes,if,0,expressions,are,provided,the,condition,will,match,to,every,request;public,consumes,request,condition,string,consumes,this,consumes,null
ConsumesRequestCondition -> public Set<MediaTypeExpression> getExpressions();1485986572;Return the contained MediaType expressions.;public Set<MediaTypeExpression> getExpressions() {_		return new LinkedHashSet<>(this.expressions)__	};return,the,contained,media,type,expressions;public,set,media,type,expression,get,expressions,return,new,linked,hash,set,this,expressions
ConsumesRequestCondition -> public Set<MediaTypeExpression> getExpressions();1520528267;Return the contained MediaType expressions.;public Set<MediaTypeExpression> getExpressions() {_		return new LinkedHashSet<>(this.expressions)__	};return,the,contained,media,type,expressions;public,set,media,type,expression,get,expressions,return,new,linked,hash,set,this,expressions
ConsumesRequestCondition -> public Set<MediaTypeExpression> getExpressions();1521714971;Return the contained MediaType expressions.;public Set<MediaTypeExpression> getExpressions() {_		return new LinkedHashSet<>(this.expressions)__	};return,the,contained,media,type,expressions;public,set,media,type,expression,get,expressions,return,new,linked,hash,set,this,expressions
ConsumesRequestCondition -> public Set<MediaTypeExpression> getExpressions();1530174524;Return the contained MediaType expressions.;public Set<MediaTypeExpression> getExpressions() {_		return new LinkedHashSet<>(this.expressions)__	};return,the,contained,media,type,expressions;public,set,media,type,expression,get,expressions,return,new,linked,hash,set,this,expressions
ConsumesRequestCondition -> public Set<MediaTypeExpression> getExpressions();1530190293;Return the contained MediaType expressions.;public Set<MediaTypeExpression> getExpressions() {_		return new LinkedHashSet<>(this.expressions)__	};return,the,contained,media,type,expressions;public,set,media,type,expression,get,expressions,return,new,linked,hash,set,this,expressions
ConsumesRequestCondition -> public Set<MediaType> getConsumableMediaTypes();1485986572;Returns the media types for this condition excluding negated expressions.;public Set<MediaType> getConsumableMediaTypes() {_		Set<MediaType> result = new LinkedHashSet<>()__		for (ConsumeMediaTypeExpression expression : this.expressions) {_			if (!expression.isNegated()) {_				result.add(expression.getMediaType())__			}_		}_		return result__	};returns,the,media,types,for,this,condition,excluding,negated,expressions;public,set,media,type,get,consumable,media,types,set,media,type,result,new,linked,hash,set,for,consume,media,type,expression,expression,this,expressions,if,expression,is,negated,result,add,expression,get,media,type,return,result
ConsumesRequestCondition -> public Set<MediaType> getConsumableMediaTypes();1520528267;Returns the media types for this condition excluding negated expressions.;public Set<MediaType> getConsumableMediaTypes() {_		Set<MediaType> result = new LinkedHashSet<>()__		for (ConsumeMediaTypeExpression expression : this.expressions) {_			if (!expression.isNegated()) {_				result.add(expression.getMediaType())__			}_		}_		return result__	};returns,the,media,types,for,this,condition,excluding,negated,expressions;public,set,media,type,get,consumable,media,types,set,media,type,result,new,linked,hash,set,for,consume,media,type,expression,expression,this,expressions,if,expression,is,negated,result,add,expression,get,media,type,return,result
ConsumesRequestCondition -> public Set<MediaType> getConsumableMediaTypes();1521714971;Returns the media types for this condition excluding negated expressions.;public Set<MediaType> getConsumableMediaTypes() {_		Set<MediaType> result = new LinkedHashSet<>()__		for (ConsumeMediaTypeExpression expression : this.expressions) {_			if (!expression.isNegated()) {_				result.add(expression.getMediaType())__			}_		}_		return result__	};returns,the,media,types,for,this,condition,excluding,negated,expressions;public,set,media,type,get,consumable,media,types,set,media,type,result,new,linked,hash,set,for,consume,media,type,expression,expression,this,expressions,if,expression,is,negated,result,add,expression,get,media,type,return,result
ConsumesRequestCondition -> public Set<MediaType> getConsumableMediaTypes();1530174524;Returns the media types for this condition excluding negated expressions.;public Set<MediaType> getConsumableMediaTypes() {_		Set<MediaType> result = new LinkedHashSet<>()__		for (ConsumeMediaTypeExpression expression : this.expressions) {_			if (!expression.isNegated()) {_				result.add(expression.getMediaType())__			}_		}_		return result__	};returns,the,media,types,for,this,condition,excluding,negated,expressions;public,set,media,type,get,consumable,media,types,set,media,type,result,new,linked,hash,set,for,consume,media,type,expression,expression,this,expressions,if,expression,is,negated,result,add,expression,get,media,type,return,result
ConsumesRequestCondition -> public Set<MediaType> getConsumableMediaTypes();1530190293;Returns the media types for this condition excluding negated expressions.;public Set<MediaType> getConsumableMediaTypes() {_		Set<MediaType> result = new LinkedHashSet<>()__		for (ConsumeMediaTypeExpression expression : this.expressions) {_			if (!expression.isNegated()) {_				result.add(expression.getMediaType())__			}_		}_		return result__	};returns,the,media,types,for,this,condition,excluding,negated,expressions;public,set,media,type,get,consumable,media,types,set,media,type,result,new,linked,hash,set,for,consume,media,type,expression,expression,this,expressions,if,expression,is,negated,result,add,expression,get,media,type,return,result
