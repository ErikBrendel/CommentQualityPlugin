# id;timestamp;commentText;codeText;commentWords;codeWords
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder parameterName(String parameterName);1485986572;Set the query parameter name to use when {@link #favorParameter} is on._<p>The default parameter name is {@code "format"}.;public RequestedContentTypeResolverBuilder parameterName(String parameterName) {_		Assert.notNull(parameterName, "parameterName is required")__		this.parameterName = parameterName__		return this__	};set,the,query,parameter,name,to,use,when,link,favor,parameter,is,on,p,the,default,parameter,name,is,code,format;public,requested,content,type,resolver,builder,parameter,name,string,parameter,name,assert,not,null,parameter,name,parameter,name,is,required,this,parameter,name,parameter,name,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder parameterName(String parameterName);1490104706;Set the query parameter name to use when {@link #favorParameter} is on._<p>The default parameter name is {@code "format"}.;public RequestedContentTypeResolverBuilder parameterName(String parameterName) {_		Assert.notNull(parameterName, "parameterName is required")__		this.parameterName = parameterName__		return this__	};set,the,query,parameter,name,to,use,when,link,favor,parameter,is,on,p,the,default,parameter,name,is,code,format;public,requested,content,type,resolver,builder,parameter,name,string,parameter,name,assert,not,null,parameter,name,parameter,name,is,required,this,parameter,name,parameter,name,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder parameterName(String parameterName);1490285806;Set the query parameter name to use when {@link #favorParameter} is on._<p>The default parameter name is {@code "format"}.;public RequestedContentTypeResolverBuilder parameterName(String parameterName) {_		Assert.notNull(parameterName, "parameterName is required")__		this.parameterName = parameterName__		return this__	};set,the,query,parameter,name,to,use,when,link,favor,parameter,is,on,p,the,default,parameter,name,is,code,format;public,requested,content,type,resolver,builder,parameter,name,string,parameter,name,assert,not,null,parameter,name,parameter,name,is,required,this,parameter,name,parameter,name,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder parameterName(String parameterName);1491926110;Set the query parameter name to use when {@link #favorParameter} is on._<p>The default parameter name is {@code "format"}.;public RequestedContentTypeResolverBuilder parameterName(String parameterName) {_		Assert.notNull(parameterName, "parameterName is required")__		this.parameterName = parameterName__		return this__	};set,the,query,parameter,name,to,use,when,link,favor,parameter,is,on,p,the,default,parameter,name,is,code,format;public,requested,content,type,resolver,builder,parameter,name,string,parameter,name,assert,not,null,parameter,name,parameter,name,is,required,this,parameter,name,parameter,name,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder parameterName(String parameterName);1497039338;Set the query parameter name to use when {@link #favorParameter} is on._<p>The default parameter name is {@code "format"}.;public RequestedContentTypeResolverBuilder parameterName(String parameterName) {_		Assert.notNull(parameterName, "parameterName is required")__		this.parameterName = parameterName__		return this__	};set,the,query,parameter,name,to,use,when,link,favor,parameter,is,on,p,the,default,parameter,name,is,code,format;public,requested,content,type,resolver,builder,parameter,name,string,parameter,name,assert,not,null,parameter,name,parameter,name,is,required,this,parameter,name,parameter,name,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder defaultContentType(MediaType... contentTypes);1491926110;Set the default content type(s) to use when no content type is requested_in order of priority.__<p>If destinations are present that do not support any of the given media_types, consider appending {@link MediaType#ALL} at the end.__<p>By default this is not set.__@see #defaultContentTypeResolver;public RequestedContentTypeResolverBuilder defaultContentType(MediaType... contentTypes) {_		this.contentTypeResolver = new FixedContentTypeResolver(Arrays.asList(contentTypes))__		return this__	};set,the,default,content,type,s,to,use,when,no,content,type,is,requested,in,order,of,priority,p,if,destinations,are,present,that,do,not,support,any,of,the,given,media,types,consider,appending,link,media,type,all,at,the,end,p,by,default,this,is,not,set,see,default,content,type,resolver;public,requested,content,type,resolver,builder,default,content,type,media,type,content,types,this,content,type,resolver,new,fixed,content,type,resolver,arrays,as,list,content,types,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder defaultContentType(MediaType... contentTypes);1497039338;Set the default content type(s) to use when no content type is requested_in order of priority.__<p>If destinations are present that do not support any of the given media_types, consider appending {@link MediaType#ALL} at the end.__<p>By default this is not set.__@see #defaultContentTypeResolver;public RequestedContentTypeResolverBuilder defaultContentType(MediaType... contentTypes) {_		this.contentTypeResolver = new FixedContentTypeResolver(Arrays.asList(contentTypes))__		return this__	};set,the,default,content,type,s,to,use,when,no,content,type,is,requested,in,order,of,priority,p,if,destinations,are,present,that,do,not,support,any,of,the,given,media,types,consider,appending,link,media,type,all,at,the,end,p,by,default,this,is,not,set,see,default,content,type,resolver;public,requested,content,type,resolver,builder,default,content,type,media,type,content,types,this,content,type,resolver,new,fixed,content,type,resolver,arrays,as,list,content,types,return,this
RequestedContentTypeResolverBuilder -> public void resolver(RequestedContentTypeResolver resolver);1497039338;Add a custom resolver._@param resolver the resolver to add;public void resolver(RequestedContentTypeResolver resolver) {_		this.candidates.add(() -> resolver)__	};add,a,custom,resolver,param,resolver,the,resolver,to,add;public,void,resolver,requested,content,type,resolver,resolver,this,candidates,add,resolver
RequestedContentTypeResolverBuilder -> public void resolver(RequestedContentTypeResolver resolver);1498780456;Add a custom resolver._@param resolver the resolver to add;public void resolver(RequestedContentTypeResolver resolver) {_		this.candidates.add(() -> resolver)__	};add,a,custom,resolver,param,resolver,the,resolver,to,add;public,void,resolver,requested,content,type,resolver,resolver,this,candidates,add,resolver
RequestedContentTypeResolverBuilder -> public void resolver(RequestedContentTypeResolver resolver);1499788456;Add a custom resolver._@param resolver the resolver to add;public void resolver(RequestedContentTypeResolver resolver) {_		this.candidates.add(() -> resolver)__	};add,a,custom,resolver,param,resolver,the,resolver,to,add;public,void,resolver,requested,content,type,resolver,resolver,this,candidates,add,resolver
RequestedContentTypeResolverBuilder -> public void resolver(RequestedContentTypeResolver resolver);1522184065;Add a custom resolver._@param resolver the resolver to add;public void resolver(RequestedContentTypeResolver resolver) {_		this.candidates.add(() -> resolver)__	};add,a,custom,resolver,param,resolver,the,resolver,to,add;public,void,resolver,requested,content,type,resolver,resolver,this,candidates,add,resolver
RequestedContentTypeResolverBuilder -> public void resolver(RequestedContentTypeResolver resolver);1530190293;Add a custom resolver._@param resolver the resolver to add;public void resolver(RequestedContentTypeResolver resolver) {_		this.candidates.add(() -> resolver)__	};add,a,custom,resolver,param,resolver,the,resolver,to,add;public,void,resolver,requested,content,type,resolver,resolver,this,candidates,add,resolver
RequestedContentTypeResolverBuilder -> ParameterResolverConfigurer -> public ParameterResolverConfigurer mediaType(String key, MediaType mediaType);1497039338;Configure a mapping between a lookup key (extracted from a query_parameter value) and a corresponding {@code MediaType}._@param key the lookup key_@param mediaType the MediaType for that key;public ParameterResolverConfigurer mediaType(String key, MediaType mediaType) {_			this.mediaTypes.put(key, mediaType)__			return this__		};configure,a,mapping,between,a,lookup,key,extracted,from,a,query,parameter,value,and,a,corresponding,code,media,type,param,key,the,lookup,key,param,media,type,the,media,type,for,that,key;public,parameter,resolver,configurer,media,type,string,key,media,type,media,type,this,media,types,put,key,media,type,return,this
RequestedContentTypeResolverBuilder -> ParameterResolverConfigurer -> public ParameterResolverConfigurer mediaType(String key, MediaType mediaType);1498780456;Configure a mapping between a lookup key (extracted from a query_parameter value) and a corresponding {@code MediaType}._@param key the lookup key_@param mediaType the MediaType for that key;public ParameterResolverConfigurer mediaType(String key, MediaType mediaType) {_			this.mediaTypes.put(key, mediaType)__			return this__		};configure,a,mapping,between,a,lookup,key,extracted,from,a,query,parameter,value,and,a,corresponding,code,media,type,param,key,the,lookup,key,param,media,type,the,media,type,for,that,key;public,parameter,resolver,configurer,media,type,string,key,media,type,media,type,this,media,types,put,key,media,type,return,this
RequestedContentTypeResolverBuilder -> ParameterResolverConfigurer -> public ParameterResolverConfigurer mediaType(String key, MediaType mediaType);1499788456;Configure a mapping between a lookup key (extracted from a query_parameter value) and a corresponding {@code MediaType}._@param key the lookup key_@param mediaType the MediaType for that key;public ParameterResolverConfigurer mediaType(String key, MediaType mediaType) {_			this.mediaTypes.put(key, mediaType)__			return this__		};configure,a,mapping,between,a,lookup,key,extracted,from,a,query,parameter,value,and,a,corresponding,code,media,type,param,key,the,lookup,key,param,media,type,the,media,type,for,that,key;public,parameter,resolver,configurer,media,type,string,key,media,type,media,type,this,media,types,put,key,media,type,return,this
RequestedContentTypeResolverBuilder -> ParameterResolverConfigurer -> public ParameterResolverConfigurer mediaType(String key, MediaType mediaType);1522184065;Configure a mapping between a lookup key (extracted from a query_parameter value) and a corresponding {@code MediaType}._@param key the lookup key_@param mediaType the MediaType for that key;public ParameterResolverConfigurer mediaType(String key, MediaType mediaType) {_			this.mediaTypes.put(key, mediaType)__			return this__		};configure,a,mapping,between,a,lookup,key,extracted,from,a,query,parameter,value,and,a,corresponding,code,media,type,param,key,the,lookup,key,param,media,type,the,media,type,for,that,key;public,parameter,resolver,configurer,media,type,string,key,media,type,media,type,this,media,types,put,key,media,type,return,this
RequestedContentTypeResolverBuilder -> ParameterResolverConfigurer -> public ParameterResolverConfigurer mediaType(String key, MediaType mediaType);1530190293;Configure a mapping between a lookup key (extracted from a query_parameter value) and a corresponding {@code MediaType}._@param key the lookup key_@param mediaType the MediaType for that key;public ParameterResolverConfigurer mediaType(String key, MediaType mediaType) {_			this.mediaTypes.put(key, mediaType)__			return this__		};configure,a,mapping,between,a,lookup,key,extracted,from,a,query,parameter,value,and,a,corresponding,code,media,type,param,key,the,lookup,key,param,media,type,the,media,type,for,that,key;public,parameter,resolver,configurer,media,type,string,key,media,type,media,type,this,media,types,put,key,media,type,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolver build();1497039338;Build a {@link RequestedContentTypeResolver} that delegates to the list_of resolvers configured through this builder.;public RequestedContentTypeResolver build() {__		List<RequestedContentTypeResolver> resolvers =_				this.candidates.isEmpty() ?_						Collections.singletonList(new HeaderContentTypeResolver()) :_						this.candidates.stream().map(Supplier::get).collect(Collectors.toList())___		return exchange -> {_			for (RequestedContentTypeResolver resolver : resolvers) {_				List<MediaType> type = resolver.resolveMediaTypes(exchange)__				if (type.isEmpty() || (type.size() == 1 && type.contains(MediaType.ALL))) {_					continue__				}_				return type__			}_			return Collections.emptyList()__		}__	};build,a,link,requested,content,type,resolver,that,delegates,to,the,list,of,resolvers,configured,through,this,builder;public,requested,content,type,resolver,build,list,requested,content,type,resolver,resolvers,this,candidates,is,empty,collections,singleton,list,new,header,content,type,resolver,this,candidates,stream,map,supplier,get,collect,collectors,to,list,return,exchange,for,requested,content,type,resolver,resolver,resolvers,list,media,type,type,resolver,resolve,media,types,exchange,if,type,is,empty,type,size,1,type,contains,media,type,all,continue,return,type,return,collections,empty,list
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolver build();1498780456;Build a {@link RequestedContentTypeResolver} that delegates to the list_of resolvers configured through this builder.;public RequestedContentTypeResolver build() {__		List<RequestedContentTypeResolver> resolvers =_				this.candidates.isEmpty() ?_						Collections.singletonList(new HeaderContentTypeResolver()) :_						this.candidates.stream().map(Supplier::get).collect(Collectors.toList())___		return exchange -> {_			for (RequestedContentTypeResolver resolver : resolvers) {_				List<MediaType> type = resolver.resolveMediaTypes(exchange)__				if (type.isEmpty() || (type.size() == 1 && type.contains(MediaType.ALL))) {_					continue__				}_				return type__			}_			return Collections.emptyList()__		}__	};build,a,link,requested,content,type,resolver,that,delegates,to,the,list,of,resolvers,configured,through,this,builder;public,requested,content,type,resolver,build,list,requested,content,type,resolver,resolvers,this,candidates,is,empty,collections,singleton,list,new,header,content,type,resolver,this,candidates,stream,map,supplier,get,collect,collectors,to,list,return,exchange,for,requested,content,type,resolver,resolver,resolvers,list,media,type,type,resolver,resolve,media,types,exchange,if,type,is,empty,type,size,1,type,contains,media,type,all,continue,return,type,return,collections,empty,list
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolver build();1499788456;Build a {@link RequestedContentTypeResolver} that delegates to the list_of resolvers configured through this builder.;public RequestedContentTypeResolver build() {__		List<RequestedContentTypeResolver> resolvers =_				this.candidates.isEmpty() ?_						Collections.singletonList(new HeaderContentTypeResolver()) :_						this.candidates.stream().map(Supplier::get).collect(Collectors.toList())___		return exchange -> {_			for (RequestedContentTypeResolver resolver : resolvers) {_				List<MediaType> type = resolver.resolveMediaTypes(exchange)__				if (type.isEmpty() || (type.size() == 1 && type.contains(MediaType.ALL))) {_					continue__				}_				return type__			}_			return Collections.emptyList()__		}__	};build,a,link,requested,content,type,resolver,that,delegates,to,the,list,of,resolvers,configured,through,this,builder;public,requested,content,type,resolver,build,list,requested,content,type,resolver,resolvers,this,candidates,is,empty,collections,singleton,list,new,header,content,type,resolver,this,candidates,stream,map,supplier,get,collect,collectors,to,list,return,exchange,for,requested,content,type,resolver,resolver,resolvers,list,media,type,type,resolver,resolve,media,types,exchange,if,type,is,empty,type,size,1,type,contains,media,type,all,continue,return,type,return,collections,empty,list
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolver build();1522184065;Build a {@link RequestedContentTypeResolver} that delegates to the list_of resolvers configured through this builder.;public RequestedContentTypeResolver build() {__		List<RequestedContentTypeResolver> resolvers =_				this.candidates.isEmpty() ?_						Collections.singletonList(new HeaderContentTypeResolver()) :_						this.candidates.stream().map(Supplier::get).collect(Collectors.toList())___		return exchange -> {_			for (RequestedContentTypeResolver resolver : resolvers) {_				List<MediaType> mediaTypes = resolver.resolveMediaTypes(exchange)__				if (mediaTypes.equals(RequestedContentTypeResolver.MEDIA_TYPE_ALL_LIST)) {_					continue__				}_				return mediaTypes__			}_			return RequestedContentTypeResolver.MEDIA_TYPE_ALL_LIST__		}__	};build,a,link,requested,content,type,resolver,that,delegates,to,the,list,of,resolvers,configured,through,this,builder;public,requested,content,type,resolver,build,list,requested,content,type,resolver,resolvers,this,candidates,is,empty,collections,singleton,list,new,header,content,type,resolver,this,candidates,stream,map,supplier,get,collect,collectors,to,list,return,exchange,for,requested,content,type,resolver,resolver,resolvers,list,media,type,media,types,resolver,resolve,media,types,exchange,if,media,types,equals,requested,content,type,resolver,continue,return,media,types,return,requested,content,type,resolver
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolver build();1530190293;Build a {@link RequestedContentTypeResolver} that delegates to the list_of resolvers configured through this builder.;public RequestedContentTypeResolver build() {_		List<RequestedContentTypeResolver> resolvers = (!this.candidates.isEmpty() ?_				this.candidates.stream().map(Supplier::get).collect(Collectors.toList()) :_				Collections.singletonList(new HeaderContentTypeResolver()))___		return exchange -> {_			for (RequestedContentTypeResolver resolver : resolvers) {_				List<MediaType> mediaTypes = resolver.resolveMediaTypes(exchange)__				if (mediaTypes.equals(RequestedContentTypeResolver.MEDIA_TYPE_ALL_LIST)) {_					continue__				}_				return mediaTypes__			}_			return RequestedContentTypeResolver.MEDIA_TYPE_ALL_LIST__		}__	};build,a,link,requested,content,type,resolver,that,delegates,to,the,list,of,resolvers,configured,through,this,builder;public,requested,content,type,resolver,build,list,requested,content,type,resolver,resolvers,this,candidates,is,empty,this,candidates,stream,map,supplier,get,collect,collectors,to,list,collections,singleton,list,new,header,content,type,resolver,return,exchange,for,requested,content,type,resolver,resolver,resolvers,list,media,type,media,types,resolver,resolve,media,types,exchange,if,media,types,equals,requested,content,type,resolver,continue,return,media,types,return,requested,content,type,resolver
RequestedContentTypeResolverBuilder -> ParameterResolverConfigurer -> public ParameterResolverConfigurer parameterName(String parameterName);1497039338;Set the name of the parameter to use to determine requested media types._<p>By default this is set to {@literal "format"}.;public ParameterResolverConfigurer parameterName(String parameterName) {_			this.parameterName = parameterName__			return this__		};set,the,name,of,the,parameter,to,use,to,determine,requested,media,types,p,by,default,this,is,set,to,literal,format;public,parameter,resolver,configurer,parameter,name,string,parameter,name,this,parameter,name,parameter,name,return,this
RequestedContentTypeResolverBuilder -> ParameterResolverConfigurer -> public ParameterResolverConfigurer parameterName(String parameterName);1498780456;Set the name of the parameter to use to determine requested media types._<p>By default this is set to {@literal "format"}.;public ParameterResolverConfigurer parameterName(String parameterName) {_			this.parameterName = parameterName__			return this__		};set,the,name,of,the,parameter,to,use,to,determine,requested,media,types,p,by,default,this,is,set,to,literal,format;public,parameter,resolver,configurer,parameter,name,string,parameter,name,this,parameter,name,parameter,name,return,this
RequestedContentTypeResolverBuilder -> ParameterResolverConfigurer -> public ParameterResolverConfigurer parameterName(String parameterName);1499788456;Set the name of the parameter to use to determine requested media types._<p>By default this is set to {@literal "format"}.;public ParameterResolverConfigurer parameterName(String parameterName) {_			this.parameterName = parameterName__			return this__		};set,the,name,of,the,parameter,to,use,to,determine,requested,media,types,p,by,default,this,is,set,to,literal,format;public,parameter,resolver,configurer,parameter,name,string,parameter,name,this,parameter,name,parameter,name,return,this
RequestedContentTypeResolverBuilder -> ParameterResolverConfigurer -> public ParameterResolverConfigurer parameterName(String parameterName);1522184065;Set the name of the parameter to use to determine requested media types._<p>By default this is set to {@literal "format"}.;public ParameterResolverConfigurer parameterName(String parameterName) {_			this.parameterName = parameterName__			return this__		};set,the,name,of,the,parameter,to,use,to,determine,requested,media,types,p,by,default,this,is,set,to,literal,format;public,parameter,resolver,configurer,parameter,name,string,parameter,name,this,parameter,name,parameter,name,return,this
RequestedContentTypeResolverBuilder -> ParameterResolverConfigurer -> public ParameterResolverConfigurer parameterName(String parameterName);1530190293;Set the name of the parameter to use to determine requested media types._<p>By default this is set to {@literal "format"}.;public ParameterResolverConfigurer parameterName(String parameterName) {_			this.parameterName = parameterName__			return this__		};set,the,name,of,the,parameter,to,use,to,determine,requested,media,types,p,by,default,this,is,set,to,literal,format;public,parameter,resolver,configurer,parameter,name,string,parameter,name,this,parameter,name,parameter,name,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder ignoreUnknownPathExtensions(boolean ignore);1485986572;Whether to ignore requests with path extension that cannot be resolved_to any media type. Setting this to {@code false} will result in an_{@link org.springframework.web.HttpMediaTypeNotAcceptableException} if_there is no match._<p>By default this is set to {@code true}.;public RequestedContentTypeResolverBuilder ignoreUnknownPathExtensions(boolean ignore) {_		this.ignoreUnknownPathExtensions = ignore__		return this__	};whether,to,ignore,requests,with,path,extension,that,cannot,be,resolved,to,any,media,type,setting,this,to,code,false,will,result,in,an,link,org,springframework,web,http,media,type,not,acceptable,exception,if,there,is,no,match,p,by,default,this,is,set,to,code,true;public,requested,content,type,resolver,builder,ignore,unknown,path,extensions,boolean,ignore,this,ignore,unknown,path,extensions,ignore,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder ignoreUnknownPathExtensions(boolean ignore);1490104706;Whether to ignore requests with path extension that cannot be resolved_to any media type. Setting this to {@code false} will result in an_{@link org.springframework.web.HttpMediaTypeNotAcceptableException} if_there is no match._<p>By default this is set to {@code true}.;public RequestedContentTypeResolverBuilder ignoreUnknownPathExtensions(boolean ignore) {_		this.ignoreUnknownPathExtensions = ignore__		return this__	};whether,to,ignore,requests,with,path,extension,that,cannot,be,resolved,to,any,media,type,setting,this,to,code,false,will,result,in,an,link,org,springframework,web,http,media,type,not,acceptable,exception,if,there,is,no,match,p,by,default,this,is,set,to,code,true;public,requested,content,type,resolver,builder,ignore,unknown,path,extensions,boolean,ignore,this,ignore,unknown,path,extensions,ignore,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder ignoreUnknownPathExtensions(boolean ignore);1490285806;Whether to ignore requests with path extension that cannot be resolved_to any media type. Setting this to {@code false} will result in an_{@link org.springframework.web.HttpMediaTypeNotAcceptableException} if_there is no match._<p>By default this is set to {@code true}.;public RequestedContentTypeResolverBuilder ignoreUnknownPathExtensions(boolean ignore) {_		this.ignoreUnknownPathExtensions = ignore__		return this__	};whether,to,ignore,requests,with,path,extension,that,cannot,be,resolved,to,any,media,type,setting,this,to,code,false,will,result,in,an,link,org,springframework,web,http,media,type,not,acceptable,exception,if,there,is,no,match,p,by,default,this,is,set,to,code,true;public,requested,content,type,resolver,builder,ignore,unknown,path,extensions,boolean,ignore,this,ignore,unknown,path,extensions,ignore,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder ignoreUnknownPathExtensions(boolean ignore);1491926110;Whether to ignore requests with path extension that cannot be resolved_to any media type. Setting this to {@code false} will result in an_{@link org.springframework.web.HttpMediaTypeNotAcceptableException} if_there is no match._<p>By default this is set to {@code true}.;public RequestedContentTypeResolverBuilder ignoreUnknownPathExtensions(boolean ignore) {_		this.ignoreUnknownPathExtensions = ignore__		return this__	};whether,to,ignore,requests,with,path,extension,that,cannot,be,resolved,to,any,media,type,setting,this,to,code,false,will,result,in,an,link,org,springframework,web,http,media,type,not,acceptable,exception,if,there,is,no,match,p,by,default,this,is,set,to,code,true;public,requested,content,type,resolver,builder,ignore,unknown,path,extensions,boolean,ignore,this,ignore,unknown,path,extensions,ignore,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder mediaTypes(Map<String, MediaType> mediaTypes);1485986572;Add a mapping from a key, extracted from a path extension or a query_parameter, to a MediaType. This is required in order for the parameter_strategy to work. Any extensions explicitly registered here are also_whitelisted for the purpose of Reflected File Download attack detection_(see Spring Framework reference documentation for more details on RFD_attack protection)._<p>The path extension strategy will also try to use JAF (if present) to_resolve path extensions. To change this behavior see {@link #useJaf}._@param mediaTypes media type mappings;public RequestedContentTypeResolverBuilder mediaTypes(Map<String, MediaType> mediaTypes) {_		if (!CollectionUtils.isEmpty(mediaTypes)) {_			for (Map.Entry<String, MediaType> entry : mediaTypes.entrySet()) {_				String extension = entry.getKey().toLowerCase(Locale.ENGLISH)__				this.mediaTypes.put(extension, entry.getValue())__			}_		}_		return this__	};add,a,mapping,from,a,key,extracted,from,a,path,extension,or,a,query,parameter,to,a,media,type,this,is,required,in,order,for,the,parameter,strategy,to,work,any,extensions,explicitly,registered,here,are,also,whitelisted,for,the,purpose,of,reflected,file,download,attack,detection,see,spring,framework,reference,documentation,for,more,details,on,rfd,attack,protection,p,the,path,extension,strategy,will,also,try,to,use,jaf,if,present,to,resolve,path,extensions,to,change,this,behavior,see,link,use,jaf,param,media,types,media,type,mappings;public,requested,content,type,resolver,builder,media,types,map,string,media,type,media,types,if,collection,utils,is,empty,media,types,for,map,entry,string,media,type,entry,media,types,entry,set,string,extension,entry,get,key,to,lower,case,locale,english,this,media,types,put,extension,entry,get,value,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder mediaTypes(Map<String, MediaType> mediaTypes);1490104706;Add a mapping from a key, extracted from a path extension or a query_parameter, to a MediaType. This is required in order for the parameter_strategy to work. Any extensions explicitly registered here are also_whitelisted for the purpose of Reflected File Download attack detection_(see Spring Framework reference documentation for more details on RFD_attack protection)._<p>The path extension strategy will also use the_{@link org.springframework.http.MediaTypeFactory} to resolve path_extensions._@param mediaTypes media type mappings;public RequestedContentTypeResolverBuilder mediaTypes(Map<String, MediaType> mediaTypes) {_		if (!CollectionUtils.isEmpty(mediaTypes)) {_			for (Map.Entry<String, MediaType> entry : mediaTypes.entrySet()) {_				String extension = entry.getKey().toLowerCase(Locale.ENGLISH)__				this.mediaTypes.put(extension, entry.getValue())__			}_		}_		return this__	};add,a,mapping,from,a,key,extracted,from,a,path,extension,or,a,query,parameter,to,a,media,type,this,is,required,in,order,for,the,parameter,strategy,to,work,any,extensions,explicitly,registered,here,are,also,whitelisted,for,the,purpose,of,reflected,file,download,attack,detection,see,spring,framework,reference,documentation,for,more,details,on,rfd,attack,protection,p,the,path,extension,strategy,will,also,use,the,link,org,springframework,http,media,type,factory,to,resolve,path,extensions,param,media,types,media,type,mappings;public,requested,content,type,resolver,builder,media,types,map,string,media,type,media,types,if,collection,utils,is,empty,media,types,for,map,entry,string,media,type,entry,media,types,entry,set,string,extension,entry,get,key,to,lower,case,locale,english,this,media,types,put,extension,entry,get,value,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder mediaTypes(Map<String, MediaType> mediaTypes);1490285806;Add a mapping from a key, extracted from a path extension or a query_parameter, to a MediaType. This is required in order for the parameter_strategy to work. Any extensions explicitly registered here are also_whitelisted for the purpose of Reflected File Download attack detection_(see Spring Framework reference documentation for more details on RFD_attack protection)._<p>The path extension strategy will also use the_{@link org.springframework.http.MediaTypeFactory} to resolve path_extensions._@param mediaTypes media type mappings;public RequestedContentTypeResolverBuilder mediaTypes(Map<String, MediaType> mediaTypes) {_		if (!CollectionUtils.isEmpty(mediaTypes)) {_			for (Map.Entry<String, MediaType> entry : mediaTypes.entrySet()) {_				String extension = entry.getKey().toLowerCase(Locale.ENGLISH)__				this.mediaTypes.put(extension, entry.getValue())__			}_		}_		return this__	};add,a,mapping,from,a,key,extracted,from,a,path,extension,or,a,query,parameter,to,a,media,type,this,is,required,in,order,for,the,parameter,strategy,to,work,any,extensions,explicitly,registered,here,are,also,whitelisted,for,the,purpose,of,reflected,file,download,attack,detection,see,spring,framework,reference,documentation,for,more,details,on,rfd,attack,protection,p,the,path,extension,strategy,will,also,use,the,link,org,springframework,http,media,type,factory,to,resolve,path,extensions,param,media,types,media,type,mappings;public,requested,content,type,resolver,builder,media,types,map,string,media,type,media,types,if,collection,utils,is,empty,media,types,for,map,entry,string,media,type,entry,media,types,entry,set,string,extension,entry,get,key,to,lower,case,locale,english,this,media,types,put,extension,entry,get,value,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder mediaTypes(Map<String, MediaType> mediaTypes);1491926110;Add a mapping from a key, extracted from a path extension or a query_parameter, to a MediaType. This is required in order for the parameter_strategy to work. Any extensions explicitly registered here are also_whitelisted for the purpose of Reflected File Download attack detection_(see Spring Framework reference documentation for more details on RFD_attack protection)._<p>The path extension strategy will also use the_{@link org.springframework.http.MediaTypeFactory} to resolve path_extensions._@param mediaTypes media type mappings;public RequestedContentTypeResolverBuilder mediaTypes(Map<String, MediaType> mediaTypes) {_		if (!CollectionUtils.isEmpty(mediaTypes)) {_			for (Map.Entry<String, MediaType> entry : mediaTypes.entrySet()) {_				String extension = entry.getKey().toLowerCase(Locale.ENGLISH)__				this.mediaTypes.put(extension, entry.getValue())__			}_		}_		return this__	};add,a,mapping,from,a,key,extracted,from,a,path,extension,or,a,query,parameter,to,a,media,type,this,is,required,in,order,for,the,parameter,strategy,to,work,any,extensions,explicitly,registered,here,are,also,whitelisted,for,the,purpose,of,reflected,file,download,attack,detection,see,spring,framework,reference,documentation,for,more,details,on,rfd,attack,protection,p,the,path,extension,strategy,will,also,use,the,link,org,springframework,http,media,type,factory,to,resolve,path,extensions,param,media,types,media,type,mappings;public,requested,content,type,resolver,builder,media,types,map,string,media,type,media,types,if,collection,utils,is,empty,media,types,for,map,entry,string,media,type,entry,media,types,entry,set,string,extension,entry,get,key,to,lower,case,locale,english,this,media,types,put,extension,entry,get,value,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder mediaTypes(Map<String, MediaType> mediaTypes);1497039338;Add a mapping from a key, extracted from a path extension or a query_parameter, to a MediaType. This is required in order for the parameter_strategy to work. Any extensions explicitly registered here are also_whitelisted for the purpose of Reflected File Download attack detection_(see Spring Framework reference documentation for more details on RFD_attack protection)._<p>The path extension strategy will also use the_{@link org.springframework.http.MediaTypeFactory} to resolve path_extensions._@param mediaTypes media type mappings;public RequestedContentTypeResolverBuilder mediaTypes(Map<String, MediaType> mediaTypes) {_		if (!CollectionUtils.isEmpty(mediaTypes)) {_			for (Map.Entry<String, MediaType> entry : mediaTypes.entrySet()) {_				String extension = entry.getKey().toLowerCase(Locale.ENGLISH)__				this.mediaTypes.put(extension, entry.getValue())__			}_		}_		return this__	};add,a,mapping,from,a,key,extracted,from,a,path,extension,or,a,query,parameter,to,a,media,type,this,is,required,in,order,for,the,parameter,strategy,to,work,any,extensions,explicitly,registered,here,are,also,whitelisted,for,the,purpose,of,reflected,file,download,attack,detection,see,spring,framework,reference,documentation,for,more,details,on,rfd,attack,protection,p,the,path,extension,strategy,will,also,use,the,link,org,springframework,http,media,type,factory,to,resolve,path,extensions,param,media,types,media,type,mappings;public,requested,content,type,resolver,builder,media,types,map,string,media,type,media,types,if,collection,utils,is,empty,media,types,for,map,entry,string,media,type,entry,media,types,entry,set,string,extension,entry,get,key,to,lower,case,locale,english,this,media,types,put,extension,entry,get,value,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder favorPathExtension(boolean favorPathExtension);1485986572;Whether the path extension in the URL path should be used to determine_the requested media type._<p>By default this is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the 'Accept' header.;public RequestedContentTypeResolverBuilder favorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__		return this__	};whether,the,path,extension,in,the,url,path,should,be,used,to,determine,the,requested,media,type,p,by,default,this,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,accept,header;public,requested,content,type,resolver,builder,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder favorPathExtension(boolean favorPathExtension);1490104706;Whether the path extension in the URL path should be used to determine_the requested media type._<p>By default this is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the 'Accept' header.;public RequestedContentTypeResolverBuilder favorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__		return this__	};whether,the,path,extension,in,the,url,path,should,be,used,to,determine,the,requested,media,type,p,by,default,this,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,accept,header;public,requested,content,type,resolver,builder,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder favorPathExtension(boolean favorPathExtension);1490285806;Whether the path extension in the URL path should be used to determine_the requested media type._<p>By default this is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the 'Accept' header.;public RequestedContentTypeResolverBuilder favorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__		return this__	};whether,the,path,extension,in,the,url,path,should,be,used,to,determine,the,requested,media,type,p,by,default,this,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,accept,header;public,requested,content,type,resolver,builder,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder favorPathExtension(boolean favorPathExtension);1491926110;Whether the path extension in the URL path should be used to determine_the requested media type._<p>By default this is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the 'Accept' header.;public RequestedContentTypeResolverBuilder favorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__		return this__	};whether,the,path,extension,in,the,url,path,should,be,used,to,determine,the,requested,media,type,p,by,default,this,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,accept,header;public,requested,content,type,resolver,builder,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder favorPathExtension(boolean favorPathExtension);1497039338;Whether the path extension in the URL path should be used to determine_the requested media type._<p>By default this is set to {@code true} in which case a request_for {@code /hotels.pdf} will be interpreted as a request for_{@code "application/pdf"} regardless of the 'Accept' header.;public RequestedContentTypeResolverBuilder favorPathExtension(boolean favorPathExtension) {_		this.favorPathExtension = favorPathExtension__		return this__	};whether,the,path,extension,in,the,url,path,should,be,used,to,determine,the,requested,media,type,p,by,default,this,is,set,to,code,true,in,which,case,a,request,for,code,hotels,pdf,will,be,interpreted,as,a,request,for,code,application,pdf,regardless,of,the,accept,header;public,requested,content,type,resolver,builder,favor,path,extension,boolean,favor,path,extension,this,favor,path,extension,favor,path,extension,return,this
RequestedContentTypeResolverBuilder -> public void headerResolver();1497039338;Add resolver extracting the requested content type from the_{@literal "Accept"} header.;public void headerResolver() {_		this.candidates.add(HeaderContentTypeResolver::new)__	};add,resolver,extracting,the,requested,content,type,from,the,literal,accept,header;public,void,header,resolver,this,candidates,add,header,content,type,resolver,new
RequestedContentTypeResolverBuilder -> public void headerResolver();1498780456;Add resolver extracting the requested content type from the_{@literal "Accept"} header.;public void headerResolver() {_		this.candidates.add(HeaderContentTypeResolver::new)__	};add,resolver,extracting,the,requested,content,type,from,the,literal,accept,header;public,void,header,resolver,this,candidates,add,header,content,type,resolver,new
RequestedContentTypeResolverBuilder -> public void headerResolver();1499788456;Add resolver to get the requested content type from the_{@literal "Accept"} header.;public void headerResolver() {_		this.candidates.add(HeaderContentTypeResolver::new)__	};add,resolver,to,get,the,requested,content,type,from,the,literal,accept,header;public,void,header,resolver,this,candidates,add,header,content,type,resolver,new
RequestedContentTypeResolverBuilder -> public void headerResolver();1522184065;Add resolver to get the requested content type from the_{@literal "Accept"} header.;public void headerResolver() {_		this.candidates.add(HeaderContentTypeResolver::new)__	};add,resolver,to,get,the,requested,content,type,from,the,literal,accept,header;public,void,header,resolver,this,candidates,add,header,content,type,resolver,new
RequestedContentTypeResolverBuilder -> public void headerResolver();1530190293;Add resolver to get the requested content type from the_{@literal "Accept"} header.;public void headerResolver() {_		this.candidates.add(HeaderContentTypeResolver::new)__	};add,resolver,to,get,the,requested,content,type,from,the,literal,accept,header;public,void,header,resolver,this,candidates,add,header,content,type,resolver,new
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder defaultContentType(MediaType contentType);1485986572;Set the default content type to use when no content type is requested._<p>By default this is not set._@see #defaultContentTypeResolver;public RequestedContentTypeResolverBuilder defaultContentType(MediaType contentType) {_		this.contentTypeResolver = new FixedContentTypeResolver(contentType)__		return this__	};set,the,default,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,default,content,type,resolver;public,requested,content,type,resolver,builder,default,content,type,media,type,content,type,this,content,type,resolver,new,fixed,content,type,resolver,content,type,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder defaultContentType(MediaType contentType);1490104706;Set the default content type to use when no content type is requested._<p>By default this is not set._@see #defaultContentTypeResolver;public RequestedContentTypeResolverBuilder defaultContentType(MediaType contentType) {_		this.contentTypeResolver = new FixedContentTypeResolver(contentType)__		return this__	};set,the,default,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,default,content,type,resolver;public,requested,content,type,resolver,builder,default,content,type,media,type,content,type,this,content,type,resolver,new,fixed,content,type,resolver,content,type,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder defaultContentType(MediaType contentType);1490285806;Set the default content type to use when no content type is requested._<p>By default this is not set._@see #defaultContentTypeResolver;public RequestedContentTypeResolverBuilder defaultContentType(MediaType contentType) {_		this.contentTypeResolver = new FixedContentTypeResolver(contentType)__		return this__	};set,the,default,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,default,content,type,resolver;public,requested,content,type,resolver,builder,default,content,type,media,type,content,type,this,content,type,resolver,new,fixed,content,type,resolver,content,type,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder ignoreAcceptHeader(boolean ignoreAcceptHeader);1485986572;Whether to disable checking the 'Accept' request header._<p>By default this value is set to {@code false}.;public RequestedContentTypeResolverBuilder ignoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__		return this__	};whether,to,disable,checking,the,accept,request,header,p,by,default,this,value,is,set,to,code,false;public,requested,content,type,resolver,builder,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder ignoreAcceptHeader(boolean ignoreAcceptHeader);1490104706;Whether to disable checking the 'Accept' request header._<p>By default this value is set to {@code false}.;public RequestedContentTypeResolverBuilder ignoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__		return this__	};whether,to,disable,checking,the,accept,request,header,p,by,default,this,value,is,set,to,code,false;public,requested,content,type,resolver,builder,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder ignoreAcceptHeader(boolean ignoreAcceptHeader);1490285806;Whether to disable checking the 'Accept' request header._<p>By default this value is set to {@code false}.;public RequestedContentTypeResolverBuilder ignoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__		return this__	};whether,to,disable,checking,the,accept,request,header,p,by,default,this,value,is,set,to,code,false;public,requested,content,type,resolver,builder,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder ignoreAcceptHeader(boolean ignoreAcceptHeader);1491926110;Whether to disable checking the 'Accept' request header._<p>By default this value is set to {@code false}.;public RequestedContentTypeResolverBuilder ignoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__		return this__	};whether,to,disable,checking,the,accept,request,header,p,by,default,this,value,is,set,to,code,false;public,requested,content,type,resolver,builder,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder ignoreAcceptHeader(boolean ignoreAcceptHeader);1497039338;Whether to disable checking the 'Accept' request header._<p>By default this value is set to {@code false}.;public RequestedContentTypeResolverBuilder ignoreAcceptHeader(boolean ignoreAcceptHeader) {_		this.ignoreAcceptHeader = ignoreAcceptHeader__		return this__	};whether,to,disable,checking,the,accept,request,header,p,by,default,this,value,is,set,to,code,false;public,requested,content,type,resolver,builder,ignore,accept,header,boolean,ignore,accept,header,this,ignore,accept,header,ignore,accept,header,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder defaultContentTypeResolver(RequestedContentTypeResolver resolver);1485986572;Set a custom {@link RequestedContentTypeResolver} to use to determine_the content type to use when no content type is requested._<p>By default this is not set._@see #defaultContentType;public RequestedContentTypeResolverBuilder defaultContentTypeResolver(RequestedContentTypeResolver resolver) {_		this.contentTypeResolver = resolver__		return this__	};set,a,custom,link,requested,content,type,resolver,to,use,to,determine,the,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,default,content,type;public,requested,content,type,resolver,builder,default,content,type,resolver,requested,content,type,resolver,resolver,this,content,type,resolver,resolver,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder defaultContentTypeResolver(RequestedContentTypeResolver resolver);1490104706;Set a custom {@link RequestedContentTypeResolver} to use to determine_the content type to use when no content type is requested._<p>By default this is not set._@see #defaultContentType;public RequestedContentTypeResolverBuilder defaultContentTypeResolver(RequestedContentTypeResolver resolver) {_		this.contentTypeResolver = resolver__		return this__	};set,a,custom,link,requested,content,type,resolver,to,use,to,determine,the,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,default,content,type;public,requested,content,type,resolver,builder,default,content,type,resolver,requested,content,type,resolver,resolver,this,content,type,resolver,resolver,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder defaultContentTypeResolver(RequestedContentTypeResolver resolver);1490285806;Set a custom {@link RequestedContentTypeResolver} to use to determine_the content type to use when no content type is requested._<p>By default this is not set._@see #defaultContentType;public RequestedContentTypeResolverBuilder defaultContentTypeResolver(RequestedContentTypeResolver resolver) {_		this.contentTypeResolver = resolver__		return this__	};set,a,custom,link,requested,content,type,resolver,to,use,to,determine,the,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,default,content,type;public,requested,content,type,resolver,builder,default,content,type,resolver,requested,content,type,resolver,resolver,this,content,type,resolver,resolver,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder defaultContentTypeResolver(RequestedContentTypeResolver resolver);1491926110;Set a custom {@link RequestedContentTypeResolver} to use to determine_the content type to use when no content type is requested._<p>By default this is not set._@see #defaultContentType;public RequestedContentTypeResolverBuilder defaultContentTypeResolver(RequestedContentTypeResolver resolver) {_		this.contentTypeResolver = resolver__		return this__	};set,a,custom,link,requested,content,type,resolver,to,use,to,determine,the,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,default,content,type;public,requested,content,type,resolver,builder,default,content,type,resolver,requested,content,type,resolver,resolver,this,content,type,resolver,resolver,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder defaultContentTypeResolver(RequestedContentTypeResolver resolver);1497039338;Set a custom {@link RequestedContentTypeResolver} to use to determine_the content type to use when no content type is requested._<p>By default this is not set._@see #defaultContentType;public RequestedContentTypeResolverBuilder defaultContentTypeResolver(RequestedContentTypeResolver resolver) {_		this.contentTypeResolver = resolver__		return this__	};set,a,custom,link,requested,content,type,resolver,to,use,to,determine,the,content,type,to,use,when,no,content,type,is,requested,p,by,default,this,is,not,set,see,default,content,type;public,requested,content,type,resolver,builder,default,content,type,resolver,requested,content,type,resolver,resolver,this,content,type,resolver,resolver,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder favorParameter(boolean favorParameter);1485986572;Whether a request parameter ("format" by default) should be used to_determine the requested media type. For this option to work you must_register {@link #mediaTypes media type mappings}._<p>By default this is set to {@code false}._@see #parameterName;public RequestedContentTypeResolverBuilder favorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__		return this__	};whether,a,request,parameter,format,by,default,should,be,used,to,determine,the,requested,media,type,for,this,option,to,work,you,must,register,link,media,types,media,type,mappings,p,by,default,this,is,set,to,code,false,see,parameter,name;public,requested,content,type,resolver,builder,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder favorParameter(boolean favorParameter);1490104706;Whether a request parameter ("format" by default) should be used to_determine the requested media type. For this option to work you must_register {@link #mediaTypes media type mappings}._<p>By default this is set to {@code false}._@see #parameterName;public RequestedContentTypeResolverBuilder favorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__		return this__	};whether,a,request,parameter,format,by,default,should,be,used,to,determine,the,requested,media,type,for,this,option,to,work,you,must,register,link,media,types,media,type,mappings,p,by,default,this,is,set,to,code,false,see,parameter,name;public,requested,content,type,resolver,builder,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder favorParameter(boolean favorParameter);1490285806;Whether a request parameter ("format" by default) should be used to_determine the requested media type. For this option to work you must_register {@link #mediaTypes media type mappings}._<p>By default this is set to {@code false}._@see #parameterName;public RequestedContentTypeResolverBuilder favorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__		return this__	};whether,a,request,parameter,format,by,default,should,be,used,to,determine,the,requested,media,type,for,this,option,to,work,you,must,register,link,media,types,media,type,mappings,p,by,default,this,is,set,to,code,false,see,parameter,name;public,requested,content,type,resolver,builder,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder favorParameter(boolean favorParameter);1491926110;Whether a request parameter ("format" by default) should be used to_determine the requested media type. For this option to work you must_register {@link #mediaTypes media type mappings}._<p>By default this is set to {@code false}._@see #parameterName;public RequestedContentTypeResolverBuilder favorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__		return this__	};whether,a,request,parameter,format,by,default,should,be,used,to,determine,the,requested,media,type,for,this,option,to,work,you,must,register,link,media,types,media,type,mappings,p,by,default,this,is,set,to,code,false,see,parameter,name;public,requested,content,type,resolver,builder,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder favorParameter(boolean favorParameter);1497039338;Whether a request parameter ("format" by default) should be used to_determine the requested media type. For this option to work you must_register {@link #mediaTypes media type mappings}._<p>By default this is set to {@code false}._@see #parameterName;public RequestedContentTypeResolverBuilder favorParameter(boolean favorParameter) {_		this.favorParameter = favorParameter__		return this__	};whether,a,request,parameter,format,by,default,should,be,used,to,determine,the,requested,media,type,for,this,option,to,work,you,must,register,link,media,types,media,type,mappings,p,by,default,this,is,set,to,code,false,see,parameter,name;public,requested,content,type,resolver,builder,favor,parameter,boolean,favor,parameter,this,favor,parameter,favor,parameter,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder useRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly);1490285806;When {@link #favorPathExtension favorPathExtension} is set, this_property determines whether to use only registered {@code MediaType} mappings_to resolve a path extension to a specific MediaType._<p>By default this is not set in which case_{@code PathExtensionContentNegotiationStrategy} will use defaults if available.;public RequestedContentTypeResolverBuilder useRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly) {_		this.useRegisteredExtensionsOnly = useRegisteredExtensionsOnly__		return this__	};when,link,favor,path,extension,favor,path,extension,is,set,this,property,determines,whether,to,use,only,registered,code,media,type,mappings,to,resolve,a,path,extension,to,a,specific,media,type,p,by,default,this,is,not,set,in,which,case,code,path,extension,content,negotiation,strategy,will,use,defaults,if,available;public,requested,content,type,resolver,builder,use,registered,extensions,only,boolean,use,registered,extensions,only,this,use,registered,extensions,only,use,registered,extensions,only,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder useRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly);1491926110;When {@link #favorPathExtension favorPathExtension} is set, this_property determines whether to use only registered {@code MediaType} mappings_to resolve a path extension to a specific MediaType._<p>By default this is not set in which case_{@code PathExtensionContentNegotiationStrategy} will use defaults if available.;public RequestedContentTypeResolverBuilder useRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly) {_		this.useRegisteredExtensionsOnly = useRegisteredExtensionsOnly__		return this__	};when,link,favor,path,extension,favor,path,extension,is,set,this,property,determines,whether,to,use,only,registered,code,media,type,mappings,to,resolve,a,path,extension,to,a,specific,media,type,p,by,default,this,is,not,set,in,which,case,code,path,extension,content,negotiation,strategy,will,use,defaults,if,available;public,requested,content,type,resolver,builder,use,registered,extensions,only,boolean,use,registered,extensions,only,this,use,registered,extensions,only,use,registered,extensions,only,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder mediaType(String key, MediaType mediaType);1485986572;Alternative to {@link #mediaTypes} to add a single mapping.;public RequestedContentTypeResolverBuilder mediaType(String key, MediaType mediaType) {_		this.mediaTypes.put(key, mediaType)__		return this__	};alternative,to,link,media,types,to,add,a,single,mapping;public,requested,content,type,resolver,builder,media,type,string,key,media,type,media,type,this,media,types,put,key,media,type,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder mediaType(String key, MediaType mediaType);1490104706;Alternative to {@link #mediaTypes} to add a single mapping.;public RequestedContentTypeResolverBuilder mediaType(String key, MediaType mediaType) {_		this.mediaTypes.put(key, mediaType)__		return this__	};alternative,to,link,media,types,to,add,a,single,mapping;public,requested,content,type,resolver,builder,media,type,string,key,media,type,media,type,this,media,types,put,key,media,type,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder mediaType(String key, MediaType mediaType);1490285806;Alternative to {@link #mediaTypes} to add a single mapping.;public RequestedContentTypeResolverBuilder mediaType(String key, MediaType mediaType) {_		this.mediaTypes.put(key, mediaType)__		return this__	};alternative,to,link,media,types,to,add,a,single,mapping;public,requested,content,type,resolver,builder,media,type,string,key,media,type,media,type,this,media,types,put,key,media,type,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder mediaType(String key, MediaType mediaType);1491926110;Alternative to {@link #mediaTypes} to add a single mapping.;public RequestedContentTypeResolverBuilder mediaType(String key, MediaType mediaType) {_		this.mediaTypes.put(key, mediaType)__		return this__	};alternative,to,link,media,types,to,add,a,single,mapping;public,requested,content,type,resolver,builder,media,type,string,key,media,type,media,type,this,media,types,put,key,media,type,return,this
RequestedContentTypeResolverBuilder -> public RequestedContentTypeResolverBuilder mediaType(String key, MediaType mediaType);1497039338;Alternative to {@link #mediaTypes} to add a single mapping.;public RequestedContentTypeResolverBuilder mediaType(String key, MediaType mediaType) {_		this.mediaTypes.put(key, mediaType)__		return this__	};alternative,to,link,media,types,to,add,a,single,mapping;public,requested,content,type,resolver,builder,media,type,string,key,media,type,media,type,this,media,types,put,key,media,type,return,this
RequestedContentTypeResolverBuilder -> ParameterResolverConfigurer -> private RequestedContentTypeResolver createResolver();1499788456;Private factory method to create the resolver.;private RequestedContentTypeResolver createResolver() {_			ParameterContentTypeResolver resolver = new ParameterContentTypeResolver(this.mediaTypes)__			if (this.parameterName != null) {_				resolver.setParameterName(this.parameterName)__			}_			return resolver__		};private,factory,method,to,create,the,resolver;private,requested,content,type,resolver,create,resolver,parameter,content,type,resolver,resolver,new,parameter,content,type,resolver,this,media,types,if,this,parameter,name,null,resolver,set,parameter,name,this,parameter,name,return,resolver
RequestedContentTypeResolverBuilder -> ParameterResolverConfigurer -> private RequestedContentTypeResolver createResolver();1522184065;Private factory method to create the resolver.;private RequestedContentTypeResolver createResolver() {_			ParameterContentTypeResolver resolver = new ParameterContentTypeResolver(this.mediaTypes)__			if (this.parameterName != null) {_				resolver.setParameterName(this.parameterName)__			}_			return resolver__		};private,factory,method,to,create,the,resolver;private,requested,content,type,resolver,create,resolver,parameter,content,type,resolver,resolver,new,parameter,content,type,resolver,this,media,types,if,this,parameter,name,null,resolver,set,parameter,name,this,parameter,name,return,resolver
RequestedContentTypeResolverBuilder -> ParameterResolverConfigurer -> private RequestedContentTypeResolver createResolver();1530190293;Private factory method to create the resolver.;private RequestedContentTypeResolver createResolver() {_			ParameterContentTypeResolver resolver = new ParameterContentTypeResolver(this.mediaTypes)__			if (this.parameterName != null) {_				resolver.setParameterName(this.parameterName)__			}_			return resolver__		};private,factory,method,to,create,the,resolver;private,requested,content,type,resolver,create,resolver,parameter,content,type,resolver,resolver,new,parameter,content,type,resolver,this,media,types,if,this,parameter,name,null,resolver,set,parameter,name,this,parameter,name,return,resolver
RequestedContentTypeResolverBuilder -> ParameterResolverConfigurer -> public ParameterResolverConfigurer mediaType(Map<String, MediaType> mediaTypes);1497039338;Map-based variant of {@link #mediaType(String, MediaType)}._@param mediaTypes the mappings to copy;public ParameterResolverConfigurer mediaType(Map<String, MediaType> mediaTypes) {_			this.mediaTypes.putAll(mediaTypes)__			return this__		};map,based,variant,of,link,media,type,string,media,type,param,media,types,the,mappings,to,copy;public,parameter,resolver,configurer,media,type,map,string,media,type,media,types,this,media,types,put,all,media,types,return,this
RequestedContentTypeResolverBuilder -> ParameterResolverConfigurer -> public ParameterResolverConfigurer mediaType(Map<String, MediaType> mediaTypes);1498780456;Map-based variant of {@link #mediaType(String, MediaType)}._@param mediaTypes the mappings to copy;public ParameterResolverConfigurer mediaType(Map<String, MediaType> mediaTypes) {_			this.mediaTypes.putAll(mediaTypes)__			return this__		};map,based,variant,of,link,media,type,string,media,type,param,media,types,the,mappings,to,copy;public,parameter,resolver,configurer,media,type,map,string,media,type,media,types,this,media,types,put,all,media,types,return,this
RequestedContentTypeResolverBuilder -> ParameterResolverConfigurer -> public ParameterResolverConfigurer mediaType(Map<String, MediaType> mediaTypes);1499788456;Map-based variant of {@link #mediaType(String, MediaType)}._@param mediaTypes the mappings to copy;public ParameterResolverConfigurer mediaType(Map<String, MediaType> mediaTypes) {_			this.mediaTypes.putAll(mediaTypes)__			return this__		};map,based,variant,of,link,media,type,string,media,type,param,media,types,the,mappings,to,copy;public,parameter,resolver,configurer,media,type,map,string,media,type,media,types,this,media,types,put,all,media,types,return,this
RequestedContentTypeResolverBuilder -> ParameterResolverConfigurer -> public ParameterResolverConfigurer mediaType(Map<String, MediaType> mediaTypes);1522184065;Map-based variant of {@link #mediaType(String, MediaType)}._@param mediaTypes the mappings to copy;public ParameterResolverConfigurer mediaType(Map<String, MediaType> mediaTypes) {_			this.mediaTypes.putAll(mediaTypes)__			return this__		};map,based,variant,of,link,media,type,string,media,type,param,media,types,the,mappings,to,copy;public,parameter,resolver,configurer,media,type,map,string,media,type,media,types,this,media,types,put,all,media,types,return,this
RequestedContentTypeResolverBuilder -> ParameterResolverConfigurer -> public ParameterResolverConfigurer mediaType(Map<String, MediaType> mediaTypes);1530190293;Map-based variant of {@link #mediaType(String, MediaType)}._@param mediaTypes the mappings to copy;public ParameterResolverConfigurer mediaType(Map<String, MediaType> mediaTypes) {_			this.mediaTypes.putAll(mediaTypes)__			return this__		};map,based,variant,of,link,media,type,string,media,type,param,media,types,the,mappings,to,copy;public,parameter,resolver,configurer,media,type,map,string,media,type,media,types,this,media,types,put,all,media,types,return,this
RequestedContentTypeResolverBuilder -> public void fixedResolver(MediaType... mediaTypes);1497039338;Add resolver that always returns a fixed set of media types._@param mediaTypes the media types to use;public void fixedResolver(MediaType... mediaTypes) {_		this.candidates.add(() -> new FixedContentTypeResolver(Arrays.asList(mediaTypes)))__	};add,resolver,that,always,returns,a,fixed,set,of,media,types,param,media,types,the,media,types,to,use;public,void,fixed,resolver,media,type,media,types,this,candidates,add,new,fixed,content,type,resolver,arrays,as,list,media,types
RequestedContentTypeResolverBuilder -> public void fixedResolver(MediaType... mediaTypes);1498780456;Add resolver that always returns a fixed set of media types._@param mediaTypes the media types to use;public void fixedResolver(MediaType... mediaTypes) {_		this.candidates.add(() -> new FixedContentTypeResolver(Arrays.asList(mediaTypes)))__	};add,resolver,that,always,returns,a,fixed,set,of,media,types,param,media,types,the,media,types,to,use;public,void,fixed,resolver,media,type,media,types,this,candidates,add,new,fixed,content,type,resolver,arrays,as,list,media,types
RequestedContentTypeResolverBuilder -> public void fixedResolver(MediaType... mediaTypes);1499788456;Add resolver that returns a fixed set of media types._@param mediaTypes the media types to use;public void fixedResolver(MediaType... mediaTypes) {_		this.candidates.add(() -> new FixedContentTypeResolver(Arrays.asList(mediaTypes)))__	};add,resolver,that,returns,a,fixed,set,of,media,types,param,media,types,the,media,types,to,use;public,void,fixed,resolver,media,type,media,types,this,candidates,add,new,fixed,content,type,resolver,arrays,as,list,media,types
RequestedContentTypeResolverBuilder -> public void fixedResolver(MediaType... mediaTypes);1522184065;Add resolver that returns a fixed set of media types._@param mediaTypes the media types to use;public void fixedResolver(MediaType... mediaTypes) {_		this.candidates.add(() -> new FixedContentTypeResolver(Arrays.asList(mediaTypes)))__	};add,resolver,that,returns,a,fixed,set,of,media,types,param,media,types,the,media,types,to,use;public,void,fixed,resolver,media,type,media,types,this,candidates,add,new,fixed,content,type,resolver,arrays,as,list,media,types
RequestedContentTypeResolverBuilder -> public void fixedResolver(MediaType... mediaTypes);1530190293;Add resolver that returns a fixed set of media types._@param mediaTypes the media types to use;public void fixedResolver(MediaType... mediaTypes) {_		this.candidates.add(() -> new FixedContentTypeResolver(Arrays.asList(mediaTypes)))__	};add,resolver,that,returns,a,fixed,set,of,media,types,param,media,types,the,media,types,to,use;public,void,fixed,resolver,media,type,media,types,this,candidates,add,new,fixed,content,type,resolver,arrays,as,list,media,types
RequestedContentTypeResolverBuilder -> public ParameterResolverConfigurer parameterResolver();1497039338;Add resolver extracting the requested content type from a query parameter._By default the expected query parameter name is {@code "format"}.;public ParameterResolverConfigurer parameterResolver() {_		ParameterResolverConfigurer parameterBuilder = new ParameterResolverConfigurer()__		this.candidates.add(parameterBuilder::createResolver)__		return parameterBuilder__	};add,resolver,extracting,the,requested,content,type,from,a,query,parameter,by,default,the,expected,query,parameter,name,is,code,format;public,parameter,resolver,configurer,parameter,resolver,parameter,resolver,configurer,parameter,builder,new,parameter,resolver,configurer,this,candidates,add,parameter,builder,create,resolver,return,parameter,builder
RequestedContentTypeResolverBuilder -> public ParameterResolverConfigurer parameterResolver();1498780456;Add resolver extracting the requested content type from a query parameter._By default the expected query parameter name is {@code "format"}.;public ParameterResolverConfigurer parameterResolver() {_		ParameterResolverConfigurer parameterBuilder = new ParameterResolverConfigurer()__		this.candidates.add(parameterBuilder::createResolver)__		return parameterBuilder__	};add,resolver,extracting,the,requested,content,type,from,a,query,parameter,by,default,the,expected,query,parameter,name,is,code,format;public,parameter,resolver,configurer,parameter,resolver,parameter,resolver,configurer,parameter,builder,new,parameter,resolver,configurer,this,candidates,add,parameter,builder,create,resolver,return,parameter,builder
RequestedContentTypeResolverBuilder -> public ParameterResolverConfigurer parameterResolver();1499788456;Add a resolver to get the requested content type from a query parameter._By default the query parameter name is {@code "format"}.;public ParameterResolverConfigurer parameterResolver() {_		ParameterResolverConfigurer parameterBuilder = new ParameterResolverConfigurer()__		this.candidates.add(parameterBuilder::createResolver)__		return parameterBuilder__	};add,a,resolver,to,get,the,requested,content,type,from,a,query,parameter,by,default,the,query,parameter,name,is,code,format;public,parameter,resolver,configurer,parameter,resolver,parameter,resolver,configurer,parameter,builder,new,parameter,resolver,configurer,this,candidates,add,parameter,builder,create,resolver,return,parameter,builder
RequestedContentTypeResolverBuilder -> public ParameterResolverConfigurer parameterResolver();1522184065;Add a resolver to get the requested content type from a query parameter._By default the query parameter name is {@code "format"}.;public ParameterResolverConfigurer parameterResolver() {_		ParameterResolverConfigurer parameterBuilder = new ParameterResolverConfigurer()__		this.candidates.add(parameterBuilder::createResolver)__		return parameterBuilder__	};add,a,resolver,to,get,the,requested,content,type,from,a,query,parameter,by,default,the,query,parameter,name,is,code,format;public,parameter,resolver,configurer,parameter,resolver,parameter,resolver,configurer,parameter,builder,new,parameter,resolver,configurer,this,candidates,add,parameter,builder,create,resolver,return,parameter,builder
RequestedContentTypeResolverBuilder -> public ParameterResolverConfigurer parameterResolver();1530190293;Add a resolver to get the requested content type from a query parameter._By default the query parameter name is {@code "format"}.;public ParameterResolverConfigurer parameterResolver() {_		ParameterResolverConfigurer parameterBuilder = new ParameterResolverConfigurer()__		this.candidates.add(parameterBuilder::createResolver)__		return parameterBuilder__	};add,a,resolver,to,get,the,requested,content,type,from,a,query,parameter,by,default,the,query,parameter,name,is,code,format;public,parameter,resolver,configurer,parameter,resolver,parameter,resolver,configurer,parameter,builder,new,parameter,resolver,configurer,this,candidates,add,parameter,builder,create,resolver,return,parameter,builder
