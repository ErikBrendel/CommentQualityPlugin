commented;modifiers;parameterAmount;loc;comment;code
true;public;0;5;/**  * Add a resolver to get the requested content type from a query parameter.  * By default the query parameter name is {@code "format"}.  */ ;/**  * Add a resolver to get the requested content type from a query parameter.  * By default the query parameter name is {@code "format"}.  */ public ParameterResolverConfigurer parameterResolver() {     ParameterResolverConfigurer parameterBuilder = new ParameterResolverConfigurer().     this.candidates.add(parameterBuilder::createResolver).     return parameterBuilder. }
true;public;0;3;/**  * Add resolver to get the requested content type from the  * {@literal "Accept"} header.  */ ;/**  * Add resolver to get the requested content type from the  * {@literal "Accept"} header.  */ public void headerResolver() {     this.candidates.add(HeaderContentTypeResolver::new). }
true;public;1;3;/**  * Add resolver that returns a fixed set of media types.  * @param mediaTypes the media types to use  */ ;/**  * Add resolver that returns a fixed set of media types.  * @param mediaTypes the media types to use  */ public void fixedResolver(MediaType... mediaTypes) {     this.candidates.add(() -> new FixedContentTypeResolver(Arrays.asList(mediaTypes))). }
true;public;1;3;/**  * Add a custom resolver.  * @param resolver the resolver to add  */ ;/**  * Add a custom resolver.  * @param resolver the resolver to add  */ public void resolver(RequestedContentTypeResolver resolver) {     this.candidates.add(() -> resolver). }
true;public;0;16;/**  * Build a {@link RequestedContentTypeResolver} that delegates to the list  * of resolvers configured through this builder.  */ ;/**  * Build a {@link RequestedContentTypeResolver} that delegates to the list  * of resolvers configured through this builder.  */ public RequestedContentTypeResolver build() {     List<RequestedContentTypeResolver> resolvers = (!this.candidates.isEmpty() ? this.candidates.stream().map(Supplier::get).collect(Collectors.toList()) : Collections.singletonList(new HeaderContentTypeResolver())).     return exchange -> {         for (RequestedContentTypeResolver resolver : resolvers) {             List<MediaType> mediaTypes = resolver.resolveMediaTypes(exchange).             if (mediaTypes.equals(RequestedContentTypeResolver.MEDIA_TYPE_ALL_LIST)) {                 continue.             }             return mediaTypes.         }         return RequestedContentTypeResolver.MEDIA_TYPE_ALL_LIST.     }. }
true;public;2;4;/**  * Configure a mapping between a lookup key (extracted from a query  * parameter value) and a corresponding {@code MediaType}.  * @param key the lookup key  * @param mediaType the MediaType for that key  */ ;/**  * Configure a mapping between a lookup key (extracted from a query  * parameter value) and a corresponding {@code MediaType}.  * @param key the lookup key  * @param mediaType the MediaType for that key  */ public ParameterResolverConfigurer mediaType(String key, MediaType mediaType) {     this.mediaTypes.put(key, mediaType).     return this. }
true;public;1;4;/**  * Map-based variant of {@link #mediaType(String, MediaType)}.  * @param mediaTypes the mappings to copy  */ ;/**  * Map-based variant of {@link #mediaType(String, MediaType)}.  * @param mediaTypes the mappings to copy  */ public ParameterResolverConfigurer mediaType(Map<String, MediaType> mediaTypes) {     this.mediaTypes.putAll(mediaTypes).     return this. }
true;public;1;4;/**  * Set the name of the parameter to use to determine requested media types.  * <p>By default this is set to {@literal "format"}.  */ ;/**  * Set the name of the parameter to use to determine requested media types.  * <p>By default this is set to {@literal "format"}.  */ public ParameterResolverConfigurer parameterName(String parameterName) {     this.parameterName = parameterName.     return this. }
true;private;0;7;/**  * Private factory method to create the resolver.  */ ;/**  * Private factory method to create the resolver.  */ private RequestedContentTypeResolver createResolver() {     ParameterContentTypeResolver resolver = new ParameterContentTypeResolver(this.mediaTypes).     if (this.parameterName != null) {         resolver.setParameterName(this.parameterName).     }     return resolver. }
