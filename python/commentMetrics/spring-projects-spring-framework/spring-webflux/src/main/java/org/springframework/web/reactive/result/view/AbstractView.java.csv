# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractView -> @Nullable 	protected RequestDataValueProcessor getRequestDataValueProcessor();1495868221;Return the {@link RequestDataValueProcessor} to use._<p>The default implementation looks in the {@link #getApplicationContext()_Spring configuration} for a {@code RequestDataValueProcessor} bean with_the name {@link #REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME}._@return the RequestDataValueProcessor, or null if there is none at the application context.;@Nullable_	protected RequestDataValueProcessor getRequestDataValueProcessor() {_		ApplicationContext context = getApplicationContext()__		if (context != null && context.containsBean(REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME)) {_			return context.getBean(REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME, RequestDataValueProcessor.class)__		}_		return null__	};return,the,link,request,data,value,processor,to,use,p,the,default,implementation,looks,in,the,link,get,application,context,spring,configuration,for,a,code,request,data,value,processor,bean,with,the,name,link,return,the,request,data,value,processor,or,null,if,there,is,none,at,the,application,context;nullable,protected,request,data,value,processor,get,request,data,value,processor,application,context,context,get,application,context,if,context,null,context,contains,bean,return,context,get,bean,request,data,value,processor,class,return,null
AbstractView -> @Nullable 	protected RequestDataValueProcessor getRequestDataValueProcessor();1496242568;Return the {@link RequestDataValueProcessor} to use._<p>The default implementation looks in the {@link #getApplicationContext()_Spring configuration} for a {@code RequestDataValueProcessor} bean with_the name {@link #REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME}._@return the RequestDataValueProcessor, or null if there is none at the application context.;@Nullable_	protected RequestDataValueProcessor getRequestDataValueProcessor() {_		ApplicationContext context = getApplicationContext()__		if (context != null && context.containsBean(REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME)) {_			return context.getBean(REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME, RequestDataValueProcessor.class)__		}_		return null__	};return,the,link,request,data,value,processor,to,use,p,the,default,implementation,looks,in,the,link,get,application,context,spring,configuration,for,a,code,request,data,value,processor,bean,with,the,name,link,return,the,request,data,value,processor,or,null,if,there,is,none,at,the,application,context;nullable,protected,request,data,value,processor,get,request,data,value,processor,application,context,context,get,application,context,if,context,null,context,contains,bean,return,context,get,bean,request,data,value,processor,class,return,null
AbstractView -> @Nullable 	protected RequestDataValueProcessor getRequestDataValueProcessor();1496837955;Return the {@link RequestDataValueProcessor} to use._<p>The default implementation looks in the {@link #getApplicationContext()_Spring configuration} for a {@code RequestDataValueProcessor} bean with_the name {@link #REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME}._@return the RequestDataValueProcessor, or null if there is none at the application context.;@Nullable_	protected RequestDataValueProcessor getRequestDataValueProcessor() {_		ApplicationContext context = getApplicationContext()__		if (context != null && context.containsBean(REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME)) {_			return context.getBean(REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME, RequestDataValueProcessor.class)__		}_		return null__	};return,the,link,request,data,value,processor,to,use,p,the,default,implementation,looks,in,the,link,get,application,context,spring,configuration,for,a,code,request,data,value,processor,bean,with,the,name,link,return,the,request,data,value,processor,or,null,if,there,is,none,at,the,application,context;nullable,protected,request,data,value,processor,get,request,data,value,processor,application,context,context,get,application,context,if,context,null,context,contains,bean,return,context,get,bean,request,data,value,processor,class,return,null
AbstractView -> @Nullable 	protected RequestDataValueProcessor getRequestDataValueProcessor();1498780456;Return the {@link RequestDataValueProcessor} to use._<p>The default implementation looks in the {@link #getApplicationContext()_Spring configuration} for a {@code RequestDataValueProcessor} bean with_the name {@link #REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME}._@return the RequestDataValueProcessor, or null if there is none at the application context.;@Nullable_	protected RequestDataValueProcessor getRequestDataValueProcessor() {_		ApplicationContext context = getApplicationContext()__		if (context != null && context.containsBean(REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME)) {_			return context.getBean(REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME, RequestDataValueProcessor.class)__		}_		return null__	};return,the,link,request,data,value,processor,to,use,p,the,default,implementation,looks,in,the,link,get,application,context,spring,configuration,for,a,code,request,data,value,processor,bean,with,the,name,link,return,the,request,data,value,processor,or,null,if,there,is,none,at,the,application,context;nullable,protected,request,data,value,processor,get,request,data,value,processor,application,context,context,get,application,context,if,context,null,context,contains,bean,return,context,get,bean,request,data,value,processor,class,return,null
AbstractView -> @Nullable 	protected RequestDataValueProcessor getRequestDataValueProcessor();1500448076;Return the {@link RequestDataValueProcessor} to use._<p>The default implementation looks in the {@link #getApplicationContext()_Spring configuration} for a {@code RequestDataValueProcessor} bean with_the name {@link #REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME}._@return the RequestDataValueProcessor, or null if there is none at the application context.;@Nullable_	protected RequestDataValueProcessor getRequestDataValueProcessor() {_		ApplicationContext context = getApplicationContext()__		if (context != null && context.containsBean(REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME)) {_			return context.getBean(REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME, RequestDataValueProcessor.class)__		}_		return null__	};return,the,link,request,data,value,processor,to,use,p,the,default,implementation,looks,in,the,link,get,application,context,spring,configuration,for,a,code,request,data,value,processor,bean,with,the,name,link,return,the,request,data,value,processor,or,null,if,there,is,none,at,the,application,context;nullable,protected,request,data,value,processor,get,request,data,value,processor,application,context,context,get,application,context,if,context,null,context,contains,bean,return,context,get,bean,request,data,value,processor,class,return,null
AbstractView -> @Nullable 	protected RequestDataValueProcessor getRequestDataValueProcessor();1503338048;Return the {@link RequestDataValueProcessor} to use._<p>The default implementation looks in the {@link #getApplicationContext()_Spring configuration} for a {@code RequestDataValueProcessor} bean with_the name {@link #REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME}._@return the RequestDataValueProcessor, or null if there is none at the application context.;@Nullable_	protected RequestDataValueProcessor getRequestDataValueProcessor() {_		ApplicationContext context = getApplicationContext()__		if (context != null && context.containsBean(REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME)) {_			return context.getBean(REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME, RequestDataValueProcessor.class)__		}_		return null__	};return,the,link,request,data,value,processor,to,use,p,the,default,implementation,looks,in,the,link,get,application,context,spring,configuration,for,a,code,request,data,value,processor,bean,with,the,name,link,return,the,request,data,value,processor,or,null,if,there,is,none,at,the,application,context;nullable,protected,request,data,value,processor,get,request,data,value,processor,application,context,context,get,application,context,if,context,null,context,contains,bean,return,context,get,bean,request,data,value,processor,class,return,null
AbstractView -> @Nullable 	protected RequestDataValueProcessor getRequestDataValueProcessor();1504993259;Return the {@link RequestDataValueProcessor} to use._<p>The default implementation looks in the {@link #getApplicationContext()_Spring configuration} for a {@code RequestDataValueProcessor} bean with_the name {@link #REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME}._@return the RequestDataValueProcessor, or null if there is none at the_application context.;@Nullable_	protected RequestDataValueProcessor getRequestDataValueProcessor() {_		ApplicationContext context = getApplicationContext()__		if (context != null && context.containsBean(REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME)) {_			return context.getBean(REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME, RequestDataValueProcessor.class)__		}_		return null__	};return,the,link,request,data,value,processor,to,use,p,the,default,implementation,looks,in,the,link,get,application,context,spring,configuration,for,a,code,request,data,value,processor,bean,with,the,name,link,return,the,request,data,value,processor,or,null,if,there,is,none,at,the,application,context;nullable,protected,request,data,value,processor,get,request,data,value,processor,application,context,context,get,application,context,if,context,null,context,contains,bean,return,context,get,bean,request,data,value,processor,class,return,null
AbstractView -> @Nullable 	protected RequestDataValueProcessor getRequestDataValueProcessor();1511215342;Return the {@link RequestDataValueProcessor} to use._<p>The default implementation looks in the {@link #getApplicationContext()_Spring configuration} for a {@code RequestDataValueProcessor} bean with_the name {@link #REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME}._@return the RequestDataValueProcessor, or null if there is none at the_application context.;@Nullable_	protected RequestDataValueProcessor getRequestDataValueProcessor() {_		ApplicationContext context = getApplicationContext()__		if (context != null && context.containsBean(REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME)) {_			return context.getBean(REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME, RequestDataValueProcessor.class)__		}_		return null__	};return,the,link,request,data,value,processor,to,use,p,the,default,implementation,looks,in,the,link,get,application,context,spring,configuration,for,a,code,request,data,value,processor,bean,with,the,name,link,return,the,request,data,value,processor,or,null,if,there,is,none,at,the,application,context;nullable,protected,request,data,value,processor,get,request,data,value,processor,application,context,context,get,application,context,if,context,null,context,contains,bean,return,context,get,bean,request,data,value,processor,class,return,null
AbstractView -> @Nullable 	protected RequestDataValueProcessor getRequestDataValueProcessor();1522359218;Return the {@link RequestDataValueProcessor} to use._<p>The default implementation looks in the {@link #getApplicationContext()_Spring configuration} for a {@code RequestDataValueProcessor} bean with_the name {@link #REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME}._@return the RequestDataValueProcessor, or null if there is none at the_application context.;@Nullable_	protected RequestDataValueProcessor getRequestDataValueProcessor() {_		ApplicationContext context = getApplicationContext()__		if (context != null && context.containsBean(REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME)) {_			return context.getBean(REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME, RequestDataValueProcessor.class)__		}_		return null__	};return,the,link,request,data,value,processor,to,use,p,the,default,implementation,looks,in,the,link,get,application,context,spring,configuration,for,a,code,request,data,value,processor,bean,with,the,name,link,return,the,request,data,value,processor,or,null,if,there,is,none,at,the,application,context;nullable,protected,request,data,value,processor,get,request,data,value,processor,application,context,context,get,application,context,if,context,null,context,contains,bean,return,context,get,bean,request,data,value,processor,class,return,null
AbstractView -> @Nullable 	protected RequestDataValueProcessor getRequestDataValueProcessor();1522360217;Return the {@link RequestDataValueProcessor} to use._<p>The default implementation looks in the {@link #getApplicationContext()_Spring configuration} for a {@code RequestDataValueProcessor} bean with_the name {@link #REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME}._@return the RequestDataValueProcessor, or null if there is none at the_application context.;@Nullable_	protected RequestDataValueProcessor getRequestDataValueProcessor() {_		ApplicationContext context = getApplicationContext()__		if (context != null && context.containsBean(REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME)) {_			return context.getBean(REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME, RequestDataValueProcessor.class)__		}_		return null__	};return,the,link,request,data,value,processor,to,use,p,the,default,implementation,looks,in,the,link,get,application,context,spring,configuration,for,a,code,request,data,value,processor,bean,with,the,name,link,return,the,request,data,value,processor,or,null,if,there,is,none,at,the,application,context;nullable,protected,request,data,value,processor,get,request,data,value,processor,application,context,context,get,application,context,if,context,null,context,contains,bean,return,context,get,bean,request,data,value,processor,class,return,null
AbstractView -> @Nullable 	protected RequestDataValueProcessor getRequestDataValueProcessor();1529721864;Return the {@link RequestDataValueProcessor} to use._<p>The default implementation looks in the {@link #getApplicationContext()_Spring configuration} for a {@code RequestDataValueProcessor} bean with_the name {@link #REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME}._@return the RequestDataValueProcessor, or null if there is none at the_application context.;@Nullable_	protected RequestDataValueProcessor getRequestDataValueProcessor() {_		ApplicationContext context = getApplicationContext()__		if (context != null && context.containsBean(REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME)) {_			return context.getBean(REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME, RequestDataValueProcessor.class)__		}_		return null__	};return,the,link,request,data,value,processor,to,use,p,the,default,implementation,looks,in,the,link,get,application,context,spring,configuration,for,a,code,request,data,value,processor,bean,with,the,name,link,return,the,request,data,value,processor,or,null,if,there,is,none,at,the,application,context;nullable,protected,request,data,value,processor,get,request,data,value,processor,application,context,context,get,application,context,if,context,null,context,contains,bean,return,context,get,bean,request,data,value,processor,class,return,null
AbstractView -> @Nullable 	protected RequestDataValueProcessor getRequestDataValueProcessor();1530174524;Return the {@link RequestDataValueProcessor} to use._<p>The default implementation looks in the {@link #getApplicationContext()_Spring configuration} for a {@code RequestDataValueProcessor} bean with_the name {@link #REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME}._@return the RequestDataValueProcessor, or null if there is none at the_application context.;@Nullable_	protected RequestDataValueProcessor getRequestDataValueProcessor() {_		ApplicationContext context = getApplicationContext()__		if (context != null && context.containsBean(REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME)) {_			return context.getBean(REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME, RequestDataValueProcessor.class)__		}_		return null__	};return,the,link,request,data,value,processor,to,use,p,the,default,implementation,looks,in,the,link,get,application,context,spring,configuration,for,a,code,request,data,value,processor,bean,with,the,name,link,return,the,request,data,value,processor,or,null,if,there,is,none,at,the,application,context;nullable,protected,request,data,value,processor,get,request,data,value,processor,application,context,context,get,application,context,if,context,null,context,contains,bean,return,context,get,bean,request,data,value,processor,class,return,null
AbstractView -> @Nullable 	protected RequestDataValueProcessor getRequestDataValueProcessor();1530294255;Return the {@link RequestDataValueProcessor} to use._<p>The default implementation looks in the {@link #getApplicationContext()_Spring configuration} for a {@code RequestDataValueProcessor} bean with_the name {@link #REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME}._@return the RequestDataValueProcessor, or null if there is none at the_application context.;@Nullable_	protected RequestDataValueProcessor getRequestDataValueProcessor() {_		ApplicationContext context = getApplicationContext()__		if (context != null && context.containsBean(REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME)) {_			return context.getBean(REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME, RequestDataValueProcessor.class)__		}_		return null__	};return,the,link,request,data,value,processor,to,use,p,the,default,implementation,looks,in,the,link,get,application,context,spring,configuration,for,a,code,request,data,value,processor,bean,with,the,name,link,return,the,request,data,value,processor,or,null,if,there,is,none,at,the,application,context;nullable,protected,request,data,value,processor,get,request,data,value,processor,application,context,context,get,application,context,if,context,null,context,contains,bean,return,context,get,bean,request,data,value,processor,class,return,null
AbstractView -> @Nullable 	protected RequestDataValueProcessor getRequestDataValueProcessor();1530793633;Return the {@link RequestDataValueProcessor} to use._<p>The default implementation looks in the {@link #getApplicationContext()_Spring configuration} for a {@code RequestDataValueProcessor} bean with_the name {@link #REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME}._@return the RequestDataValueProcessor, or null if there is none at the_application context.;@Nullable_	protected RequestDataValueProcessor getRequestDataValueProcessor() {_		ApplicationContext context = getApplicationContext()__		if (context != null && context.containsBean(REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME)) {_			return context.getBean(REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME, RequestDataValueProcessor.class)__		}_		return null__	};return,the,link,request,data,value,processor,to,use,p,the,default,implementation,looks,in,the,link,get,application,context,spring,configuration,for,a,code,request,data,value,processor,bean,with,the,name,link,return,the,request,data,value,processor,or,null,if,there,is,none,at,the,application,context;nullable,protected,request,data,value,processor,get,request,data,value,processor,application,context,context,get,application,context,if,context,null,context,contains,bean,return,context,get,bean,request,data,value,processor,class,return,null
AbstractView -> public Charset getDefaultCharset();1485986572;Return the default charset, used when the_{@linkplain #setSupportedMediaTypes(List) content type} does not contain one.;public Charset getDefaultCharset() {_		return this.defaultCharset__	};return,the,default,charset,used,when,the,linkplain,set,supported,media,types,list,content,type,does,not,contain,one;public,charset,get,default,charset,return,this,default,charset
AbstractView -> public Charset getDefaultCharset();1486720600;Return the default charset, used when the_{@linkplain #setSupportedMediaTypes(List) content type} does not contain one.;public Charset getDefaultCharset() {_		return this.defaultCharset__	};return,the,default,charset,used,when,the,linkplain,set,supported,media,types,list,content,type,does,not,contain,one;public,charset,get,default,charset,return,this,default,charset
AbstractView -> public Charset getDefaultCharset();1490903325;Return the default charset, used when the_{@linkplain #setSupportedMediaTypes(List) content type} does not contain one.;public Charset getDefaultCharset() {_		return this.defaultCharset__	};return,the,default,charset,used,when,the,linkplain,set,supported,media,types,list,content,type,does,not,contain,one;public,charset,get,default,charset,return,this,default,charset
AbstractView -> public Charset getDefaultCharset();1491927184;Return the default charset, used when the_{@linkplain #setSupportedMediaTypes(List) content type} does not contain one.;public Charset getDefaultCharset() {_		return this.defaultCharset__	};return,the,default,charset,used,when,the,linkplain,set,supported,media,types,list,content,type,does,not,contain,one;public,charset,get,default,charset,return,this,default,charset
AbstractView -> public Charset getDefaultCharset();1495868221;Return the default charset, used when the_{@linkplain #setSupportedMediaTypes(List) content type} does not contain one.;public Charset getDefaultCharset() {_		return this.defaultCharset__	};return,the,default,charset,used,when,the,linkplain,set,supported,media,types,list,content,type,does,not,contain,one;public,charset,get,default,charset,return,this,default,charset
AbstractView -> public Charset getDefaultCharset();1496242568;Return the default charset, used when the_{@linkplain #setSupportedMediaTypes(List) content type} does not contain one.;public Charset getDefaultCharset() {_		return this.defaultCharset__	};return,the,default,charset,used,when,the,linkplain,set,supported,media,types,list,content,type,does,not,contain,one;public,charset,get,default,charset,return,this,default,charset
AbstractView -> public Charset getDefaultCharset();1496837955;Return the default charset, used when the_{@linkplain #setSupportedMediaTypes(List) content type} does not contain one.;public Charset getDefaultCharset() {_		return this.defaultCharset__	};return,the,default,charset,used,when,the,linkplain,set,supported,media,types,list,content,type,does,not,contain,one;public,charset,get,default,charset,return,this,default,charset
AbstractView -> public Charset getDefaultCharset();1498780456;Return the default charset, used when the_{@linkplain #setSupportedMediaTypes(List) content type} does not contain one.;public Charset getDefaultCharset() {_		return this.defaultCharset__	};return,the,default,charset,used,when,the,linkplain,set,supported,media,types,list,content,type,does,not,contain,one;public,charset,get,default,charset,return,this,default,charset
AbstractView -> public Charset getDefaultCharset();1500448076;Return the default charset, used when the_{@linkplain #setSupportedMediaTypes(List) content type} does not contain one.;public Charset getDefaultCharset() {_		return this.defaultCharset__	};return,the,default,charset,used,when,the,linkplain,set,supported,media,types,list,content,type,does,not,contain,one;public,charset,get,default,charset,return,this,default,charset
AbstractView -> public Charset getDefaultCharset();1503338048;Return the default charset, used when the_{@linkplain #setSupportedMediaTypes(List) content type} does not contain one.;public Charset getDefaultCharset() {_		return this.defaultCharset__	};return,the,default,charset,used,when,the,linkplain,set,supported,media,types,list,content,type,does,not,contain,one;public,charset,get,default,charset,return,this,default,charset
AbstractView -> public Charset getDefaultCharset();1504993259;Return the default charset, used when the_{@linkplain #setSupportedMediaTypes(List) content type} does not contain one.;public Charset getDefaultCharset() {_		return this.defaultCharset__	};return,the,default,charset,used,when,the,linkplain,set,supported,media,types,list,content,type,does,not,contain,one;public,charset,get,default,charset,return,this,default,charset
AbstractView -> public Charset getDefaultCharset();1511215342;Return the default charset, used when the_{@linkplain #setSupportedMediaTypes(List) content type} does not contain one.;public Charset getDefaultCharset() {_		return this.defaultCharset__	};return,the,default,charset,used,when,the,linkplain,set,supported,media,types,list,content,type,does,not,contain,one;public,charset,get,default,charset,return,this,default,charset
AbstractView -> public Charset getDefaultCharset();1522359218;Return the default charset, used when the_{@linkplain #setSupportedMediaTypes(List) content type} does not contain one.;public Charset getDefaultCharset() {_		return this.defaultCharset__	};return,the,default,charset,used,when,the,linkplain,set,supported,media,types,list,content,type,does,not,contain,one;public,charset,get,default,charset,return,this,default,charset
AbstractView -> public Charset getDefaultCharset();1522360217;Return the default charset, used when the_{@linkplain #setSupportedMediaTypes(List) content type} does not contain one.;public Charset getDefaultCharset() {_		return this.defaultCharset__	};return,the,default,charset,used,when,the,linkplain,set,supported,media,types,list,content,type,does,not,contain,one;public,charset,get,default,charset,return,this,default,charset
AbstractView -> public Charset getDefaultCharset();1529721864;Return the default charset, used when the_{@linkplain #setSupportedMediaTypes(List) content type} does not contain one.;public Charset getDefaultCharset() {_		return this.defaultCharset__	};return,the,default,charset,used,when,the,linkplain,set,supported,media,types,list,content,type,does,not,contain,one;public,charset,get,default,charset,return,this,default,charset
AbstractView -> public Charset getDefaultCharset();1530174524;Return the default charset, used when the_{@linkplain #setSupportedMediaTypes(List) content type} does not contain one.;public Charset getDefaultCharset() {_		return this.defaultCharset__	};return,the,default,charset,used,when,the,linkplain,set,supported,media,types,list,content,type,does,not,contain,one;public,charset,get,default,charset,return,this,default,charset
AbstractView -> public Charset getDefaultCharset();1530294255;Return the default charset, used when the_{@linkplain #setSupportedMediaTypes(List) content type} does not contain one.;public Charset getDefaultCharset() {_		return this.defaultCharset__	};return,the,default,charset,used,when,the,linkplain,set,supported,media,types,list,content,type,does,not,contain,one;public,charset,get,default,charset,return,this,default,charset
AbstractView -> public Charset getDefaultCharset();1530793633;Return the default charset, used when the_{@linkplain #setSupportedMediaTypes(List) content type} does not contain one.;public Charset getDefaultCharset() {_		return this.defaultCharset__	};return,the,default,charset,used,when,the,linkplain,set,supported,media,types,list,content,type,does,not,contain,one;public,charset,get,default,charset,return,this,default,charset
AbstractView -> public void setRequestContextAttribute(@Nullable String requestContextAttribute);1496837955;Set the name of the RequestContext attribute for this view._Default is none.;public void setRequestContextAttribute(@Nullable String requestContextAttribute) {_		this.requestContextAttribute = requestContextAttribute__	};set,the,name,of,the,request,context,attribute,for,this,view,default,is,none;public,void,set,request,context,attribute,nullable,string,request,context,attribute,this,request,context,attribute,request,context,attribute
AbstractView -> public void setRequestContextAttribute(@Nullable String requestContextAttribute);1498780456;Set the name of the RequestContext attribute for this view._Default is none.;public void setRequestContextAttribute(@Nullable String requestContextAttribute) {_		this.requestContextAttribute = requestContextAttribute__	};set,the,name,of,the,request,context,attribute,for,this,view,default,is,none;public,void,set,request,context,attribute,nullable,string,request,context,attribute,this,request,context,attribute,request,context,attribute
AbstractView -> public void setRequestContextAttribute(@Nullable String requestContextAttribute);1500448076;Set the name of the RequestContext attribute for this view._Default is none.;public void setRequestContextAttribute(@Nullable String requestContextAttribute) {_		this.requestContextAttribute = requestContextAttribute__	};set,the,name,of,the,request,context,attribute,for,this,view,default,is,none;public,void,set,request,context,attribute,nullable,string,request,context,attribute,this,request,context,attribute,request,context,attribute
AbstractView -> public void setRequestContextAttribute(@Nullable String requestContextAttribute);1503338048;Set the name of the RequestContext attribute for this view._Default is none.;public void setRequestContextAttribute(@Nullable String requestContextAttribute) {_		this.requestContextAttribute = requestContextAttribute__	};set,the,name,of,the,request,context,attribute,for,this,view,default,is,none;public,void,set,request,context,attribute,nullable,string,request,context,attribute,this,request,context,attribute,request,context,attribute
AbstractView -> public void setRequestContextAttribute(@Nullable String requestContextAttribute);1504993259;Set the name of the RequestContext attribute for this view._Default is none.;public void setRequestContextAttribute(@Nullable String requestContextAttribute) {_		this.requestContextAttribute = requestContextAttribute__	};set,the,name,of,the,request,context,attribute,for,this,view,default,is,none;public,void,set,request,context,attribute,nullable,string,request,context,attribute,this,request,context,attribute,request,context,attribute
AbstractView -> public void setRequestContextAttribute(@Nullable String requestContextAttribute);1511215342;Set the name of the RequestContext attribute for this view._Default is none.;public void setRequestContextAttribute(@Nullable String requestContextAttribute) {_		this.requestContextAttribute = requestContextAttribute__	};set,the,name,of,the,request,context,attribute,for,this,view,default,is,none;public,void,set,request,context,attribute,nullable,string,request,context,attribute,this,request,context,attribute,request,context,attribute
AbstractView -> public void setRequestContextAttribute(@Nullable String requestContextAttribute);1522359218;Set the name of the RequestContext attribute for this view._Default is none.;public void setRequestContextAttribute(@Nullable String requestContextAttribute) {_		this.requestContextAttribute = requestContextAttribute__	};set,the,name,of,the,request,context,attribute,for,this,view,default,is,none;public,void,set,request,context,attribute,nullable,string,request,context,attribute,this,request,context,attribute,request,context,attribute
AbstractView -> public void setRequestContextAttribute(@Nullable String requestContextAttribute);1522360217;Set the name of the RequestContext attribute for this view._Default is none.;public void setRequestContextAttribute(@Nullable String requestContextAttribute) {_		this.requestContextAttribute = requestContextAttribute__	};set,the,name,of,the,request,context,attribute,for,this,view,default,is,none;public,void,set,request,context,attribute,nullable,string,request,context,attribute,this,request,context,attribute,request,context,attribute
AbstractView -> public void setRequestContextAttribute(@Nullable String requestContextAttribute);1529721864;Set the name of the RequestContext attribute for this view._Default is none.;public void setRequestContextAttribute(@Nullable String requestContextAttribute) {_		this.requestContextAttribute = requestContextAttribute__	};set,the,name,of,the,request,context,attribute,for,this,view,default,is,none;public,void,set,request,context,attribute,nullable,string,request,context,attribute,this,request,context,attribute,request,context,attribute
AbstractView -> public void setRequestContextAttribute(@Nullable String requestContextAttribute);1530174524;Set the name of the RequestContext attribute for this view._Default is none.;public void setRequestContextAttribute(@Nullable String requestContextAttribute) {_		this.requestContextAttribute = requestContextAttribute__	};set,the,name,of,the,request,context,attribute,for,this,view,default,is,none;public,void,set,request,context,attribute,nullable,string,request,context,attribute,this,request,context,attribute,request,context,attribute
AbstractView -> public void setRequestContextAttribute(@Nullable String requestContextAttribute);1530294255;Set the name of the RequestContext attribute for this view._Default is none.;public void setRequestContextAttribute(@Nullable String requestContextAttribute) {_		this.requestContextAttribute = requestContextAttribute__	};set,the,name,of,the,request,context,attribute,for,this,view,default,is,none;public,void,set,request,context,attribute,nullable,string,request,context,attribute,this,request,context,attribute,request,context,attribute
AbstractView -> public void setRequestContextAttribute(@Nullable String requestContextAttribute);1530793633;Set the name of the RequestContext attribute for this view._Default is none.;public void setRequestContextAttribute(@Nullable String requestContextAttribute) {_		this.requestContextAttribute = requestContextAttribute__	};set,the,name,of,the,request,context,attribute,for,this,view,default,is,none;public,void,set,request,context,attribute,nullable,string,request,context,attribute,this,request,context,attribute,request,context,attribute
AbstractView -> protected RequestContext createRequestContext(ServerWebExchange exchange, Map<String, Object> model);1485986572;Create a RequestContext to expose under the specified attribute name._<p>The default implementation creates a standard RequestContext instance for the_given request and model. Can be overridden in subclasses for custom instances._@param exchange current exchange_@param model combined output Map (never {@code null}),_with dynamic values taking precedence over static attributes_@return the RequestContext instance_@see #setRequestContextAttribute;protected RequestContext createRequestContext(ServerWebExchange exchange, Map<String, Object> model) {_		return new RequestContext(exchange, model, getApplicationContext(), getRequestDataValueProcessor())__	};create,a,request,context,to,expose,under,the,specified,attribute,name,p,the,default,implementation,creates,a,standard,request,context,instance,for,the,given,request,and,model,can,be,overridden,in,subclasses,for,custom,instances,param,exchange,current,exchange,param,model,combined,output,map,never,code,null,with,dynamic,values,taking,precedence,over,static,attributes,return,the,request,context,instance,see,set,request,context,attribute;protected,request,context,create,request,context,server,web,exchange,exchange,map,string,object,model,return,new,request,context,exchange,model,get,application,context,get,request,data,value,processor
AbstractView -> protected RequestContext createRequestContext(ServerWebExchange exchange, Map<String, Object> model);1486720600;Create a RequestContext to expose under the specified attribute name._<p>The default implementation creates a standard RequestContext instance for the_given request and model. Can be overridden in subclasses for custom instances._@param exchange current exchange_@param model combined output Map (never {@code null}),_with dynamic values taking precedence over static attributes_@return the RequestContext instance_@see #setRequestContextAttribute;protected RequestContext createRequestContext(ServerWebExchange exchange, Map<String, Object> model) {_		return new RequestContext(exchange, model, getApplicationContext(), getRequestDataValueProcessor())__	};create,a,request,context,to,expose,under,the,specified,attribute,name,p,the,default,implementation,creates,a,standard,request,context,instance,for,the,given,request,and,model,can,be,overridden,in,subclasses,for,custom,instances,param,exchange,current,exchange,param,model,combined,output,map,never,code,null,with,dynamic,values,taking,precedence,over,static,attributes,return,the,request,context,instance,see,set,request,context,attribute;protected,request,context,create,request,context,server,web,exchange,exchange,map,string,object,model,return,new,request,context,exchange,model,get,application,context,get,request,data,value,processor
AbstractView -> protected RequestContext createRequestContext(ServerWebExchange exchange, Map<String, Object> model);1490903325;Create a RequestContext to expose under the specified attribute name._<p>The default implementation creates a standard RequestContext instance for the_given request and model. Can be overridden in subclasses for custom instances._@param exchange current exchange_@param model combined output Map (never {@code null}),_with dynamic values taking precedence over static attributes_@return the RequestContext instance_@see #setRequestContextAttribute;protected RequestContext createRequestContext(ServerWebExchange exchange, Map<String, Object> model) {_		return new RequestContext(exchange, model, getApplicationContext(), getRequestDataValueProcessor())__	};create,a,request,context,to,expose,under,the,specified,attribute,name,p,the,default,implementation,creates,a,standard,request,context,instance,for,the,given,request,and,model,can,be,overridden,in,subclasses,for,custom,instances,param,exchange,current,exchange,param,model,combined,output,map,never,code,null,with,dynamic,values,taking,precedence,over,static,attributes,return,the,request,context,instance,see,set,request,context,attribute;protected,request,context,create,request,context,server,web,exchange,exchange,map,string,object,model,return,new,request,context,exchange,model,get,application,context,get,request,data,value,processor
AbstractView -> protected RequestContext createRequestContext(ServerWebExchange exchange, Map<String, Object> model);1491927184;Create a RequestContext to expose under the specified attribute name._<p>The default implementation creates a standard RequestContext instance for the_given request and model. Can be overridden in subclasses for custom instances._@param exchange current exchange_@param model combined output Map (never {@code null}),_with dynamic values taking precedence over static attributes_@return the RequestContext instance_@see #setRequestContextAttribute;protected RequestContext createRequestContext(ServerWebExchange exchange, Map<String, Object> model) {_		return new RequestContext(exchange, model, getApplicationContext(), getRequestDataValueProcessor())__	};create,a,request,context,to,expose,under,the,specified,attribute,name,p,the,default,implementation,creates,a,standard,request,context,instance,for,the,given,request,and,model,can,be,overridden,in,subclasses,for,custom,instances,param,exchange,current,exchange,param,model,combined,output,map,never,code,null,with,dynamic,values,taking,precedence,over,static,attributes,return,the,request,context,instance,see,set,request,context,attribute;protected,request,context,create,request,context,server,web,exchange,exchange,map,string,object,model,return,new,request,context,exchange,model,get,application,context,get,request,data,value,processor
AbstractView -> protected RequestContext createRequestContext(ServerWebExchange exchange, Map<String, Object> model);1495868221;Create a RequestContext to expose under the specified attribute name._<p>The default implementation creates a standard RequestContext instance for the_given request and model. Can be overridden in subclasses for custom instances._@param exchange current exchange_@param model combined output Map (never {@code null}),_with dynamic values taking precedence over static attributes_@return the RequestContext instance_@see #setRequestContextAttribute;protected RequestContext createRequestContext(ServerWebExchange exchange, Map<String, Object> model) {_		return new RequestContext(exchange, model, getApplicationContext(), getRequestDataValueProcessor())__	};create,a,request,context,to,expose,under,the,specified,attribute,name,p,the,default,implementation,creates,a,standard,request,context,instance,for,the,given,request,and,model,can,be,overridden,in,subclasses,for,custom,instances,param,exchange,current,exchange,param,model,combined,output,map,never,code,null,with,dynamic,values,taking,precedence,over,static,attributes,return,the,request,context,instance,see,set,request,context,attribute;protected,request,context,create,request,context,server,web,exchange,exchange,map,string,object,model,return,new,request,context,exchange,model,get,application,context,get,request,data,value,processor
AbstractView -> protected RequestContext createRequestContext(ServerWebExchange exchange, Map<String, Object> model);1496242568;Create a RequestContext to expose under the specified attribute name._<p>The default implementation creates a standard RequestContext instance for the_given request and model. Can be overridden in subclasses for custom instances._@param exchange current exchange_@param model combined output Map (never {@code null}),_with dynamic values taking precedence over static attributes_@return the RequestContext instance_@see #setRequestContextAttribute;protected RequestContext createRequestContext(ServerWebExchange exchange, Map<String, Object> model) {_		return new RequestContext(exchange, model, getApplicationContext(), getRequestDataValueProcessor())__	};create,a,request,context,to,expose,under,the,specified,attribute,name,p,the,default,implementation,creates,a,standard,request,context,instance,for,the,given,request,and,model,can,be,overridden,in,subclasses,for,custom,instances,param,exchange,current,exchange,param,model,combined,output,map,never,code,null,with,dynamic,values,taking,precedence,over,static,attributes,return,the,request,context,instance,see,set,request,context,attribute;protected,request,context,create,request,context,server,web,exchange,exchange,map,string,object,model,return,new,request,context,exchange,model,get,application,context,get,request,data,value,processor
AbstractView -> protected RequestContext createRequestContext(ServerWebExchange exchange, Map<String, Object> model);1496837955;Create a RequestContext to expose under the specified attribute name._<p>The default implementation creates a standard RequestContext instance for the_given request and model. Can be overridden in subclasses for custom instances._@param exchange current exchange_@param model combined output Map (never {@code null}),_with dynamic values taking precedence over static attributes_@return the RequestContext instance_@see #setRequestContextAttribute;protected RequestContext createRequestContext(ServerWebExchange exchange, Map<String, Object> model) {_		return new RequestContext(exchange, model, obtainApplicationContext(), getRequestDataValueProcessor())__	};create,a,request,context,to,expose,under,the,specified,attribute,name,p,the,default,implementation,creates,a,standard,request,context,instance,for,the,given,request,and,model,can,be,overridden,in,subclasses,for,custom,instances,param,exchange,current,exchange,param,model,combined,output,map,never,code,null,with,dynamic,values,taking,precedence,over,static,attributes,return,the,request,context,instance,see,set,request,context,attribute;protected,request,context,create,request,context,server,web,exchange,exchange,map,string,object,model,return,new,request,context,exchange,model,obtain,application,context,get,request,data,value,processor
AbstractView -> protected RequestContext createRequestContext(ServerWebExchange exchange, Map<String, Object> model);1498780456;Create a RequestContext to expose under the specified attribute name._<p>The default implementation creates a standard RequestContext instance for the_given request and model. Can be overridden in subclasses for custom instances._@param exchange current exchange_@param model combined output Map (never {@code null}),_with dynamic values taking precedence over static attributes_@return the RequestContext instance_@see #setRequestContextAttribute;protected RequestContext createRequestContext(ServerWebExchange exchange, Map<String, Object> model) {_		return new RequestContext(exchange, model, obtainApplicationContext(), getRequestDataValueProcessor())__	};create,a,request,context,to,expose,under,the,specified,attribute,name,p,the,default,implementation,creates,a,standard,request,context,instance,for,the,given,request,and,model,can,be,overridden,in,subclasses,for,custom,instances,param,exchange,current,exchange,param,model,combined,output,map,never,code,null,with,dynamic,values,taking,precedence,over,static,attributes,return,the,request,context,instance,see,set,request,context,attribute;protected,request,context,create,request,context,server,web,exchange,exchange,map,string,object,model,return,new,request,context,exchange,model,obtain,application,context,get,request,data,value,processor
AbstractView -> protected RequestContext createRequestContext(ServerWebExchange exchange, Map<String, Object> model);1500448076;Create a RequestContext to expose under the specified attribute name._<p>The default implementation creates a standard RequestContext instance for the_given request and model. Can be overridden in subclasses for custom instances._@param exchange current exchange_@param model combined output Map (never {@code null}),_with dynamic values taking precedence over static attributes_@return the RequestContext instance_@see #setRequestContextAttribute;protected RequestContext createRequestContext(ServerWebExchange exchange, Map<String, Object> model) {_		return new RequestContext(exchange, model, obtainApplicationContext(), getRequestDataValueProcessor())__	};create,a,request,context,to,expose,under,the,specified,attribute,name,p,the,default,implementation,creates,a,standard,request,context,instance,for,the,given,request,and,model,can,be,overridden,in,subclasses,for,custom,instances,param,exchange,current,exchange,param,model,combined,output,map,never,code,null,with,dynamic,values,taking,precedence,over,static,attributes,return,the,request,context,instance,see,set,request,context,attribute;protected,request,context,create,request,context,server,web,exchange,exchange,map,string,object,model,return,new,request,context,exchange,model,obtain,application,context,get,request,data,value,processor
AbstractView -> protected RequestContext createRequestContext(ServerWebExchange exchange, Map<String, Object> model);1503338048;Create a RequestContext to expose under the specified attribute name._<p>The default implementation creates a standard RequestContext instance for the_given request and model. Can be overridden in subclasses for custom instances._@param exchange current exchange_@param model combined output Map (never {@code null}),_with dynamic values taking precedence over static attributes_@return the RequestContext instance_@see #setRequestContextAttribute;protected RequestContext createRequestContext(ServerWebExchange exchange, Map<String, Object> model) {_		return new RequestContext(exchange, model, obtainApplicationContext(), getRequestDataValueProcessor())__	};create,a,request,context,to,expose,under,the,specified,attribute,name,p,the,default,implementation,creates,a,standard,request,context,instance,for,the,given,request,and,model,can,be,overridden,in,subclasses,for,custom,instances,param,exchange,current,exchange,param,model,combined,output,map,never,code,null,with,dynamic,values,taking,precedence,over,static,attributes,return,the,request,context,instance,see,set,request,context,attribute;protected,request,context,create,request,context,server,web,exchange,exchange,map,string,object,model,return,new,request,context,exchange,model,obtain,application,context,get,request,data,value,processor
AbstractView -> protected RequestContext createRequestContext(ServerWebExchange exchange, Map<String, Object> model);1504993259;Create a RequestContext to expose under the specified attribute name._<p>The default implementation creates a standard RequestContext instance_for the given request and model. Can be overridden in subclasses for_custom instances._@param exchange current exchange_@param model combined output Map (never {@code null}),_with dynamic values taking precedence over static attributes_@return the RequestContext instance_@see #setRequestContextAttribute;protected RequestContext createRequestContext(ServerWebExchange exchange, Map<String, Object> model) {_		return new RequestContext(exchange, model, obtainApplicationContext(), getRequestDataValueProcessor())__	};create,a,request,context,to,expose,under,the,specified,attribute,name,p,the,default,implementation,creates,a,standard,request,context,instance,for,the,given,request,and,model,can,be,overridden,in,subclasses,for,custom,instances,param,exchange,current,exchange,param,model,combined,output,map,never,code,null,with,dynamic,values,taking,precedence,over,static,attributes,return,the,request,context,instance,see,set,request,context,attribute;protected,request,context,create,request,context,server,web,exchange,exchange,map,string,object,model,return,new,request,context,exchange,model,obtain,application,context,get,request,data,value,processor
AbstractView -> protected RequestContext createRequestContext(ServerWebExchange exchange, Map<String, Object> model);1511215342;Create a RequestContext to expose under the specified attribute name._<p>The default implementation creates a standard RequestContext instance_for the given request and model. Can be overridden in subclasses for_custom instances._@param exchange current exchange_@param model combined output Map (never {@code null}),_with dynamic values taking precedence over static attributes_@return the RequestContext instance_@see #setRequestContextAttribute;protected RequestContext createRequestContext(ServerWebExchange exchange, Map<String, Object> model) {_		return new RequestContext(exchange, model, obtainApplicationContext(), getRequestDataValueProcessor())__	};create,a,request,context,to,expose,under,the,specified,attribute,name,p,the,default,implementation,creates,a,standard,request,context,instance,for,the,given,request,and,model,can,be,overridden,in,subclasses,for,custom,instances,param,exchange,current,exchange,param,model,combined,output,map,never,code,null,with,dynamic,values,taking,precedence,over,static,attributes,return,the,request,context,instance,see,set,request,context,attribute;protected,request,context,create,request,context,server,web,exchange,exchange,map,string,object,model,return,new,request,context,exchange,model,obtain,application,context,get,request,data,value,processor
AbstractView -> protected RequestContext createRequestContext(ServerWebExchange exchange, Map<String, Object> model);1522359218;Create a RequestContext to expose under the specified attribute name._<p>The default implementation creates a standard RequestContext instance_for the given request and model. Can be overridden in subclasses for_custom instances._@param exchange current exchange_@param model combined output Map (never {@code null}),_with dynamic values taking precedence over static attributes_@return the RequestContext instance_@see #setRequestContextAttribute;protected RequestContext createRequestContext(ServerWebExchange exchange, Map<String, Object> model) {_		return new RequestContext(exchange, model, obtainApplicationContext(), getRequestDataValueProcessor())__	};create,a,request,context,to,expose,under,the,specified,attribute,name,p,the,default,implementation,creates,a,standard,request,context,instance,for,the,given,request,and,model,can,be,overridden,in,subclasses,for,custom,instances,param,exchange,current,exchange,param,model,combined,output,map,never,code,null,with,dynamic,values,taking,precedence,over,static,attributes,return,the,request,context,instance,see,set,request,context,attribute;protected,request,context,create,request,context,server,web,exchange,exchange,map,string,object,model,return,new,request,context,exchange,model,obtain,application,context,get,request,data,value,processor
AbstractView -> protected RequestContext createRequestContext(ServerWebExchange exchange, Map<String, Object> model);1522360217;Create a RequestContext to expose under the specified attribute name._<p>The default implementation creates a standard RequestContext instance_for the given request and model. Can be overridden in subclasses for_custom instances._@param exchange current exchange_@param model combined output Map (never {@code null}),_with dynamic values taking precedence over static attributes_@return the RequestContext instance_@see #setRequestContextAttribute;protected RequestContext createRequestContext(ServerWebExchange exchange, Map<String, Object> model) {_		return new RequestContext(exchange, model, obtainApplicationContext(), getRequestDataValueProcessor())__	};create,a,request,context,to,expose,under,the,specified,attribute,name,p,the,default,implementation,creates,a,standard,request,context,instance,for,the,given,request,and,model,can,be,overridden,in,subclasses,for,custom,instances,param,exchange,current,exchange,param,model,combined,output,map,never,code,null,with,dynamic,values,taking,precedence,over,static,attributes,return,the,request,context,instance,see,set,request,context,attribute;protected,request,context,create,request,context,server,web,exchange,exchange,map,string,object,model,return,new,request,context,exchange,model,obtain,application,context,get,request,data,value,processor
AbstractView -> protected RequestContext createRequestContext(ServerWebExchange exchange, Map<String, Object> model);1529721864;Create a RequestContext to expose under the specified attribute name._<p>The default implementation creates a standard RequestContext instance_for the given request and model. Can be overridden in subclasses for_custom instances._@param exchange current exchange_@param model combined output Map (never {@code null}),_with dynamic values taking precedence over static attributes_@return the RequestContext instance_@see #setRequestContextAttribute;protected RequestContext createRequestContext(ServerWebExchange exchange, Map<String, Object> model) {_		return new RequestContext(exchange, model, obtainApplicationContext(), getRequestDataValueProcessor())__	};create,a,request,context,to,expose,under,the,specified,attribute,name,p,the,default,implementation,creates,a,standard,request,context,instance,for,the,given,request,and,model,can,be,overridden,in,subclasses,for,custom,instances,param,exchange,current,exchange,param,model,combined,output,map,never,code,null,with,dynamic,values,taking,precedence,over,static,attributes,return,the,request,context,instance,see,set,request,context,attribute;protected,request,context,create,request,context,server,web,exchange,exchange,map,string,object,model,return,new,request,context,exchange,model,obtain,application,context,get,request,data,value,processor
AbstractView -> protected RequestContext createRequestContext(ServerWebExchange exchange, Map<String, Object> model);1530174524;Create a RequestContext to expose under the specified attribute name._<p>The default implementation creates a standard RequestContext instance_for the given request and model. Can be overridden in subclasses for_custom instances._@param exchange current exchange_@param model combined output Map (never {@code null}),_with dynamic values taking precedence over static attributes_@return the RequestContext instance_@see #setRequestContextAttribute;protected RequestContext createRequestContext(ServerWebExchange exchange, Map<String, Object> model) {_		return new RequestContext(exchange, model, obtainApplicationContext(), getRequestDataValueProcessor())__	};create,a,request,context,to,expose,under,the,specified,attribute,name,p,the,default,implementation,creates,a,standard,request,context,instance,for,the,given,request,and,model,can,be,overridden,in,subclasses,for,custom,instances,param,exchange,current,exchange,param,model,combined,output,map,never,code,null,with,dynamic,values,taking,precedence,over,static,attributes,return,the,request,context,instance,see,set,request,context,attribute;protected,request,context,create,request,context,server,web,exchange,exchange,map,string,object,model,return,new,request,context,exchange,model,obtain,application,context,get,request,data,value,processor
AbstractView -> protected RequestContext createRequestContext(ServerWebExchange exchange, Map<String, Object> model);1530294255;Create a RequestContext to expose under the specified attribute name._<p>The default implementation creates a standard RequestContext instance_for the given request and model. Can be overridden in subclasses for_custom instances._@param exchange current exchange_@param model combined output Map (never {@code null}),_with dynamic values taking precedence over static attributes_@return the RequestContext instance_@see #setRequestContextAttribute;protected RequestContext createRequestContext(ServerWebExchange exchange, Map<String, Object> model) {_		return new RequestContext(exchange, model, obtainApplicationContext(), getRequestDataValueProcessor())__	};create,a,request,context,to,expose,under,the,specified,attribute,name,p,the,default,implementation,creates,a,standard,request,context,instance,for,the,given,request,and,model,can,be,overridden,in,subclasses,for,custom,instances,param,exchange,current,exchange,param,model,combined,output,map,never,code,null,with,dynamic,values,taking,precedence,over,static,attributes,return,the,request,context,instance,see,set,request,context,attribute;protected,request,context,create,request,context,server,web,exchange,exchange,map,string,object,model,return,new,request,context,exchange,model,obtain,application,context,get,request,data,value,processor
AbstractView -> protected RequestContext createRequestContext(ServerWebExchange exchange, Map<String, Object> model);1530793633;Create a RequestContext to expose under the specified attribute name._<p>The default implementation creates a standard RequestContext instance_for the given request and model. Can be overridden in subclasses for_custom instances._@param exchange current exchange_@param model combined output Map (never {@code null}),_with dynamic values taking precedence over static attributes_@return the RequestContext instance_@see #setRequestContextAttribute;protected RequestContext createRequestContext(ServerWebExchange exchange, Map<String, Object> model) {_		return new RequestContext(exchange, model, obtainApplicationContext(), getRequestDataValueProcessor())__	};create,a,request,context,to,expose,under,the,specified,attribute,name,p,the,default,implementation,creates,a,standard,request,context,instance,for,the,given,request,and,model,can,be,overridden,in,subclasses,for,custom,instances,param,exchange,current,exchange,param,model,combined,output,map,never,code,null,with,dynamic,values,taking,precedence,over,static,attributes,return,the,request,context,instance,see,set,request,context,attribute;protected,request,context,create,request,context,server,web,exchange,exchange,map,string,object,model,return,new,request,context,exchange,model,obtain,application,context,get,request,data,value,processor
AbstractView -> public void setDefaultCharset(Charset defaultCharset);1485986572;Set the default charset for this view, used when the_{@linkplain #setSupportedMediaTypes(List) content type} does not contain one._Default is {@linkplain StandardCharsets#UTF_8 UTF 8}.;public void setDefaultCharset(Charset defaultCharset) {_		Assert.notNull(defaultCharset, "'defaultCharset' must not be null")__		this.defaultCharset = defaultCharset__	};set,the,default,charset,for,this,view,used,when,the,linkplain,set,supported,media,types,list,content,type,does,not,contain,one,default,is,linkplain,standard,charsets,utf,8;public,void,set,default,charset,charset,default,charset,assert,not,null,default,charset,default,charset,must,not,be,null,this,default,charset,default,charset
AbstractView -> public void setDefaultCharset(Charset defaultCharset);1486720600;Set the default charset for this view, used when the_{@linkplain #setSupportedMediaTypes(List) content type} does not contain one._Default is {@linkplain StandardCharsets#UTF_8 UTF 8}.;public void setDefaultCharset(Charset defaultCharset) {_		Assert.notNull(defaultCharset, "'defaultCharset' must not be null")__		this.defaultCharset = defaultCharset__	};set,the,default,charset,for,this,view,used,when,the,linkplain,set,supported,media,types,list,content,type,does,not,contain,one,default,is,linkplain,standard,charsets,utf,8;public,void,set,default,charset,charset,default,charset,assert,not,null,default,charset,default,charset,must,not,be,null,this,default,charset,default,charset
AbstractView -> public void setDefaultCharset(Charset defaultCharset);1490903325;Set the default charset for this view, used when the_{@linkplain #setSupportedMediaTypes(List) content type} does not contain one._Default is {@linkplain StandardCharsets#UTF_8 UTF 8}.;public void setDefaultCharset(Charset defaultCharset) {_		Assert.notNull(defaultCharset, "'defaultCharset' must not be null")__		this.defaultCharset = defaultCharset__	};set,the,default,charset,for,this,view,used,when,the,linkplain,set,supported,media,types,list,content,type,does,not,contain,one,default,is,linkplain,standard,charsets,utf,8;public,void,set,default,charset,charset,default,charset,assert,not,null,default,charset,default,charset,must,not,be,null,this,default,charset,default,charset
AbstractView -> public void setDefaultCharset(Charset defaultCharset);1491927184;Set the default charset for this view, used when the_{@linkplain #setSupportedMediaTypes(List) content type} does not contain one._Default is {@linkplain StandardCharsets#UTF_8 UTF 8}.;public void setDefaultCharset(Charset defaultCharset) {_		Assert.notNull(defaultCharset, "'defaultCharset' must not be null")__		this.defaultCharset = defaultCharset__	};set,the,default,charset,for,this,view,used,when,the,linkplain,set,supported,media,types,list,content,type,does,not,contain,one,default,is,linkplain,standard,charsets,utf,8;public,void,set,default,charset,charset,default,charset,assert,not,null,default,charset,default,charset,must,not,be,null,this,default,charset,default,charset
AbstractView -> public void setDefaultCharset(Charset defaultCharset);1495868221;Set the default charset for this view, used when the_{@linkplain #setSupportedMediaTypes(List) content type} does not contain one._Default is {@linkplain StandardCharsets#UTF_8 UTF 8}.;public void setDefaultCharset(Charset defaultCharset) {_		Assert.notNull(defaultCharset, "'defaultCharset' must not be null")__		this.defaultCharset = defaultCharset__	};set,the,default,charset,for,this,view,used,when,the,linkplain,set,supported,media,types,list,content,type,does,not,contain,one,default,is,linkplain,standard,charsets,utf,8;public,void,set,default,charset,charset,default,charset,assert,not,null,default,charset,default,charset,must,not,be,null,this,default,charset,default,charset
AbstractView -> public void setDefaultCharset(Charset defaultCharset);1496242568;Set the default charset for this view, used when the_{@linkplain #setSupportedMediaTypes(List) content type} does not contain one._Default is {@linkplain StandardCharsets#UTF_8 UTF 8}.;public void setDefaultCharset(Charset defaultCharset) {_		Assert.notNull(defaultCharset, "'defaultCharset' must not be null")__		this.defaultCharset = defaultCharset__	};set,the,default,charset,for,this,view,used,when,the,linkplain,set,supported,media,types,list,content,type,does,not,contain,one,default,is,linkplain,standard,charsets,utf,8;public,void,set,default,charset,charset,default,charset,assert,not,null,default,charset,default,charset,must,not,be,null,this,default,charset,default,charset
AbstractView -> public void setDefaultCharset(Charset defaultCharset);1496837955;Set the default charset for this view, used when the_{@linkplain #setSupportedMediaTypes(List) content type} does not contain one._Default is {@linkplain StandardCharsets#UTF_8 UTF 8}.;public void setDefaultCharset(Charset defaultCharset) {_		Assert.notNull(defaultCharset, "'defaultCharset' must not be null")__		this.defaultCharset = defaultCharset__	};set,the,default,charset,for,this,view,used,when,the,linkplain,set,supported,media,types,list,content,type,does,not,contain,one,default,is,linkplain,standard,charsets,utf,8;public,void,set,default,charset,charset,default,charset,assert,not,null,default,charset,default,charset,must,not,be,null,this,default,charset,default,charset
AbstractView -> public void setDefaultCharset(Charset defaultCharset);1498780456;Set the default charset for this view, used when the_{@linkplain #setSupportedMediaTypes(List) content type} does not contain one._Default is {@linkplain StandardCharsets#UTF_8 UTF 8}.;public void setDefaultCharset(Charset defaultCharset) {_		Assert.notNull(defaultCharset, "'defaultCharset' must not be null")__		this.defaultCharset = defaultCharset__	};set,the,default,charset,for,this,view,used,when,the,linkplain,set,supported,media,types,list,content,type,does,not,contain,one,default,is,linkplain,standard,charsets,utf,8;public,void,set,default,charset,charset,default,charset,assert,not,null,default,charset,default,charset,must,not,be,null,this,default,charset,default,charset
AbstractView -> public void setDefaultCharset(Charset defaultCharset);1500448076;Set the default charset for this view, used when the_{@linkplain #setSupportedMediaTypes(List) content type} does not contain one._Default is {@linkplain StandardCharsets#UTF_8 UTF 8}.;public void setDefaultCharset(Charset defaultCharset) {_		Assert.notNull(defaultCharset, "'defaultCharset' must not be null")__		this.defaultCharset = defaultCharset__	};set,the,default,charset,for,this,view,used,when,the,linkplain,set,supported,media,types,list,content,type,does,not,contain,one,default,is,linkplain,standard,charsets,utf,8;public,void,set,default,charset,charset,default,charset,assert,not,null,default,charset,default,charset,must,not,be,null,this,default,charset,default,charset
AbstractView -> public void setDefaultCharset(Charset defaultCharset);1503338048;Set the default charset for this view, used when the_{@linkplain #setSupportedMediaTypes(List) content type} does not contain one._Default is {@linkplain StandardCharsets#UTF_8 UTF 8}.;public void setDefaultCharset(Charset defaultCharset) {_		Assert.notNull(defaultCharset, "'defaultCharset' must not be null")__		this.defaultCharset = defaultCharset__	};set,the,default,charset,for,this,view,used,when,the,linkplain,set,supported,media,types,list,content,type,does,not,contain,one,default,is,linkplain,standard,charsets,utf,8;public,void,set,default,charset,charset,default,charset,assert,not,null,default,charset,default,charset,must,not,be,null,this,default,charset,default,charset
AbstractView -> public void setDefaultCharset(Charset defaultCharset);1504993259;Set the default charset for this view, used when the_{@linkplain #setSupportedMediaTypes(List) content type} does not contain one._Default is {@linkplain StandardCharsets#UTF_8 UTF 8}.;public void setDefaultCharset(Charset defaultCharset) {_		Assert.notNull(defaultCharset, "'defaultCharset' must not be null")__		this.defaultCharset = defaultCharset__	};set,the,default,charset,for,this,view,used,when,the,linkplain,set,supported,media,types,list,content,type,does,not,contain,one,default,is,linkplain,standard,charsets,utf,8;public,void,set,default,charset,charset,default,charset,assert,not,null,default,charset,default,charset,must,not,be,null,this,default,charset,default,charset
AbstractView -> public void setDefaultCharset(Charset defaultCharset);1511215342;Set the default charset for this view, used when the_{@linkplain #setSupportedMediaTypes(List) content type} does not contain one._Default is {@linkplain StandardCharsets#UTF_8 UTF 8}.;public void setDefaultCharset(Charset defaultCharset) {_		Assert.notNull(defaultCharset, "'defaultCharset' must not be null")__		this.defaultCharset = defaultCharset__	};set,the,default,charset,for,this,view,used,when,the,linkplain,set,supported,media,types,list,content,type,does,not,contain,one,default,is,linkplain,standard,charsets,utf,8;public,void,set,default,charset,charset,default,charset,assert,not,null,default,charset,default,charset,must,not,be,null,this,default,charset,default,charset
AbstractView -> public void setDefaultCharset(Charset defaultCharset);1522359218;Set the default charset for this view, used when the_{@linkplain #setSupportedMediaTypes(List) content type} does not contain one._Default is {@linkplain StandardCharsets#UTF_8 UTF 8}.;public void setDefaultCharset(Charset defaultCharset) {_		Assert.notNull(defaultCharset, "'defaultCharset' must not be null")__		this.defaultCharset = defaultCharset__	};set,the,default,charset,for,this,view,used,when,the,linkplain,set,supported,media,types,list,content,type,does,not,contain,one,default,is,linkplain,standard,charsets,utf,8;public,void,set,default,charset,charset,default,charset,assert,not,null,default,charset,default,charset,must,not,be,null,this,default,charset,default,charset
AbstractView -> public void setDefaultCharset(Charset defaultCharset);1522360217;Set the default charset for this view, used when the_{@linkplain #setSupportedMediaTypes(List) content type} does not contain one._Default is {@linkplain StandardCharsets#UTF_8 UTF 8}.;public void setDefaultCharset(Charset defaultCharset) {_		Assert.notNull(defaultCharset, "'defaultCharset' must not be null")__		this.defaultCharset = defaultCharset__	};set,the,default,charset,for,this,view,used,when,the,linkplain,set,supported,media,types,list,content,type,does,not,contain,one,default,is,linkplain,standard,charsets,utf,8;public,void,set,default,charset,charset,default,charset,assert,not,null,default,charset,default,charset,must,not,be,null,this,default,charset,default,charset
AbstractView -> public void setDefaultCharset(Charset defaultCharset);1529721864;Set the default charset for this view, used when the_{@linkplain #setSupportedMediaTypes(List) content type} does not contain one._Default is {@linkplain StandardCharsets#UTF_8 UTF 8}.;public void setDefaultCharset(Charset defaultCharset) {_		Assert.notNull(defaultCharset, "'defaultCharset' must not be null")__		this.defaultCharset = defaultCharset__	};set,the,default,charset,for,this,view,used,when,the,linkplain,set,supported,media,types,list,content,type,does,not,contain,one,default,is,linkplain,standard,charsets,utf,8;public,void,set,default,charset,charset,default,charset,assert,not,null,default,charset,default,charset,must,not,be,null,this,default,charset,default,charset
AbstractView -> public void setDefaultCharset(Charset defaultCharset);1530174524;Set the default charset for this view, used when the_{@linkplain #setSupportedMediaTypes(List) content type} does not contain one._Default is {@linkplain StandardCharsets#UTF_8 UTF 8}.;public void setDefaultCharset(Charset defaultCharset) {_		Assert.notNull(defaultCharset, "'defaultCharset' must not be null")__		this.defaultCharset = defaultCharset__	};set,the,default,charset,for,this,view,used,when,the,linkplain,set,supported,media,types,list,content,type,does,not,contain,one,default,is,linkplain,standard,charsets,utf,8;public,void,set,default,charset,charset,default,charset,assert,not,null,default,charset,default,charset,must,not,be,null,this,default,charset,default,charset
AbstractView -> public void setDefaultCharset(Charset defaultCharset);1530294255;Set the default charset for this view, used when the_{@linkplain #setSupportedMediaTypes(List) content type} does not contain one._Default is {@linkplain StandardCharsets#UTF_8 UTF 8}.;public void setDefaultCharset(Charset defaultCharset) {_		Assert.notNull(defaultCharset, "'defaultCharset' must not be null")__		this.defaultCharset = defaultCharset__	};set,the,default,charset,for,this,view,used,when,the,linkplain,set,supported,media,types,list,content,type,does,not,contain,one,default,is,linkplain,standard,charsets,utf,8;public,void,set,default,charset,charset,default,charset,assert,not,null,default,charset,default,charset,must,not,be,null,this,default,charset,default,charset
AbstractView -> public void setDefaultCharset(Charset defaultCharset);1530793633;Set the default charset for this view, used when the_{@linkplain #setSupportedMediaTypes(List) content type} does not contain one._Default is {@linkplain StandardCharsets#UTF_8 UTF 8}.;public void setDefaultCharset(Charset defaultCharset) {_		Assert.notNull(defaultCharset, "'defaultCharset' must not be null")__		this.defaultCharset = defaultCharset__	};set,the,default,charset,for,this,view,used,when,the,linkplain,set,supported,media,types,list,content,type,does,not,contain,one,default,is,linkplain,standard,charsets,utf,8;public,void,set,default,charset,charset,default,charset,assert,not,null,default,charset,default,charset,must,not,be,null,this,default,charset,default,charset
AbstractView -> protected Map<String, Object> getModelAttributes(Map<String, ?> model, ServerWebExchange exchange);1485986572;Prepare the model to use for rendering._<p>The default implementation creates a combined output Map that includes_model as well as static attributes with the former taking precedence.;protected Map<String, Object> getModelAttributes(Map<String, ?> model, ServerWebExchange exchange) {_		int size = (model != null ? model.size() : 0)___		Map<String, Object> attributes = new LinkedHashMap<>(size)__		if (model != null) {_			attributes.putAll(model)__		}__		return attributes__	};prepare,the,model,to,use,for,rendering,p,the,default,implementation,creates,a,combined,output,map,that,includes,model,as,well,as,static,attributes,with,the,former,taking,precedence;protected,map,string,object,get,model,attributes,map,string,model,server,web,exchange,exchange,int,size,model,null,model,size,0,map,string,object,attributes,new,linked,hash,map,size,if,model,null,attributes,put,all,model,return,attributes
AbstractView -> protected Map<String, Object> getModelAttributes(Map<String, ?> model, ServerWebExchange exchange);1486720600;Prepare the model to use for rendering._<p>The default implementation creates a combined output Map that includes_model as well as static attributes with the former taking precedence.;protected Map<String, Object> getModelAttributes(Map<String, ?> model, ServerWebExchange exchange) {_		int size = (model != null ? model.size() : 0)___		Map<String, Object> attributes = new LinkedHashMap<>(size)__		if (model != null) {_			attributes.putAll(model)__		}__		return attributes__	};prepare,the,model,to,use,for,rendering,p,the,default,implementation,creates,a,combined,output,map,that,includes,model,as,well,as,static,attributes,with,the,former,taking,precedence;protected,map,string,object,get,model,attributes,map,string,model,server,web,exchange,exchange,int,size,model,null,model,size,0,map,string,object,attributes,new,linked,hash,map,size,if,model,null,attributes,put,all,model,return,attributes
AbstractView -> @Nullable 	public String getRequestContextAttribute();1495868221;Return the name of the RequestContext attribute, if any.;@Nullable_	public String getRequestContextAttribute() {_		return this.requestContextAttribute__	};return,the,name,of,the,request,context,attribute,if,any;nullable,public,string,get,request,context,attribute,return,this,request,context,attribute
AbstractView -> @Nullable 	public String getRequestContextAttribute();1496242568;Return the name of the RequestContext attribute, if any.;@Nullable_	public String getRequestContextAttribute() {_		return this.requestContextAttribute__	};return,the,name,of,the,request,context,attribute,if,any;nullable,public,string,get,request,context,attribute,return,this,request,context,attribute
AbstractView -> @Nullable 	public String getRequestContextAttribute();1496837955;Return the name of the RequestContext attribute, if any.;@Nullable_	public String getRequestContextAttribute() {_		return this.requestContextAttribute__	};return,the,name,of,the,request,context,attribute,if,any;nullable,public,string,get,request,context,attribute,return,this,request,context,attribute
AbstractView -> @Nullable 	public String getRequestContextAttribute();1498780456;Return the name of the RequestContext attribute, if any.;@Nullable_	public String getRequestContextAttribute() {_		return this.requestContextAttribute__	};return,the,name,of,the,request,context,attribute,if,any;nullable,public,string,get,request,context,attribute,return,this,request,context,attribute
AbstractView -> @Nullable 	public String getRequestContextAttribute();1500448076;Return the name of the RequestContext attribute, if any.;@Nullable_	public String getRequestContextAttribute() {_		return this.requestContextAttribute__	};return,the,name,of,the,request,context,attribute,if,any;nullable,public,string,get,request,context,attribute,return,this,request,context,attribute
AbstractView -> @Nullable 	public String getRequestContextAttribute();1503338048;Return the name of the RequestContext attribute, if any.;@Nullable_	public String getRequestContextAttribute() {_		return this.requestContextAttribute__	};return,the,name,of,the,request,context,attribute,if,any;nullable,public,string,get,request,context,attribute,return,this,request,context,attribute
AbstractView -> @Nullable 	public String getRequestContextAttribute();1504993259;Return the name of the RequestContext attribute, if any.;@Nullable_	public String getRequestContextAttribute() {_		return this.requestContextAttribute__	};return,the,name,of,the,request,context,attribute,if,any;nullable,public,string,get,request,context,attribute,return,this,request,context,attribute
AbstractView -> @Nullable 	public String getRequestContextAttribute();1511215342;Return the name of the RequestContext attribute, if any.;@Nullable_	public String getRequestContextAttribute() {_		return this.requestContextAttribute__	};return,the,name,of,the,request,context,attribute,if,any;nullable,public,string,get,request,context,attribute,return,this,request,context,attribute
AbstractView -> @Nullable 	public String getRequestContextAttribute();1522359218;Return the name of the RequestContext attribute, if any.;@Nullable_	public String getRequestContextAttribute() {_		return this.requestContextAttribute__	};return,the,name,of,the,request,context,attribute,if,any;nullable,public,string,get,request,context,attribute,return,this,request,context,attribute
AbstractView -> @Nullable 	public String getRequestContextAttribute();1522360217;Return the name of the RequestContext attribute, if any.;@Nullable_	public String getRequestContextAttribute() {_		return this.requestContextAttribute__	};return,the,name,of,the,request,context,attribute,if,any;nullable,public,string,get,request,context,attribute,return,this,request,context,attribute
AbstractView -> @Nullable 	public String getRequestContextAttribute();1529721864;Return the name of the RequestContext attribute, if any.;@Nullable_	public String getRequestContextAttribute() {_		return this.requestContextAttribute__	};return,the,name,of,the,request,context,attribute,if,any;nullable,public,string,get,request,context,attribute,return,this,request,context,attribute
AbstractView -> @Nullable 	public String getRequestContextAttribute();1530174524;Return the name of the RequestContext attribute, if any.;@Nullable_	public String getRequestContextAttribute() {_		return this.requestContextAttribute__	};return,the,name,of,the,request,context,attribute,if,any;nullable,public,string,get,request,context,attribute,return,this,request,context,attribute
AbstractView -> @Nullable 	public String getRequestContextAttribute();1530294255;Return the name of the RequestContext attribute, if any.;@Nullable_	public String getRequestContextAttribute() {_		return this.requestContextAttribute__	};return,the,name,of,the,request,context,attribute,if,any;nullable,public,string,get,request,context,attribute,return,this,request,context,attribute
AbstractView -> @Nullable 	public String getRequestContextAttribute();1530793633;Return the name of the RequestContext attribute, if any.;@Nullable_	public String getRequestContextAttribute() {_		return this.requestContextAttribute__	};return,the,name,of,the,request,context,attribute,if,any;nullable,public,string,get,request,context,attribute,return,this,request,context,attribute
AbstractView -> protected final ApplicationContext obtainApplicationContext();1496837955;Obtain the ApplicationContext for actual use._@return the ApplicationContext (never {@code null})_@throws IllegalStateException in case of no ApplicationContext set_@since 5.0;protected final ApplicationContext obtainApplicationContext() {_		ApplicationContext applicationContext = getApplicationContext()__		Assert.state(applicationContext != null, "No ApplicationContext")__		return applicationContext__	};obtain,the,application,context,for,actual,use,return,the,application,context,never,code,null,throws,illegal,state,exception,in,case,of,no,application,context,set,since,5,0;protected,final,application,context,obtain,application,context,application,context,application,context,get,application,context,assert,state,application,context,null,no,application,context,return,application,context
AbstractView -> protected final ApplicationContext obtainApplicationContext();1498780456;Obtain the ApplicationContext for actual use._@return the ApplicationContext (never {@code null})_@throws IllegalStateException in case of no ApplicationContext set_@since 5.0;protected final ApplicationContext obtainApplicationContext() {_		ApplicationContext applicationContext = getApplicationContext()__		Assert.state(applicationContext != null, "No ApplicationContext")__		return applicationContext__	};obtain,the,application,context,for,actual,use,return,the,application,context,never,code,null,throws,illegal,state,exception,in,case,of,no,application,context,set,since,5,0;protected,final,application,context,obtain,application,context,application,context,application,context,get,application,context,assert,state,application,context,null,no,application,context,return,application,context
AbstractView -> protected final ApplicationContext obtainApplicationContext();1500448076;Obtain the ApplicationContext for actual use._@return the ApplicationContext (never {@code null})_@throws IllegalStateException in case of no ApplicationContext set_@since 5.0;protected final ApplicationContext obtainApplicationContext() {_		ApplicationContext applicationContext = getApplicationContext()__		Assert.state(applicationContext != null, "No ApplicationContext")__		return applicationContext__	};obtain,the,application,context,for,actual,use,return,the,application,context,never,code,null,throws,illegal,state,exception,in,case,of,no,application,context,set,since,5,0;protected,final,application,context,obtain,application,context,application,context,application,context,get,application,context,assert,state,application,context,null,no,application,context,return,application,context
AbstractView -> protected final ApplicationContext obtainApplicationContext();1503338048;Obtain the ApplicationContext for actual use._@return the ApplicationContext (never {@code null})_@throws IllegalStateException in case of no ApplicationContext set_@since 5.0;protected final ApplicationContext obtainApplicationContext() {_		ApplicationContext applicationContext = getApplicationContext()__		Assert.state(applicationContext != null, "No ApplicationContext")__		return applicationContext__	};obtain,the,application,context,for,actual,use,return,the,application,context,never,code,null,throws,illegal,state,exception,in,case,of,no,application,context,set,since,5,0;protected,final,application,context,obtain,application,context,application,context,application,context,get,application,context,assert,state,application,context,null,no,application,context,return,application,context
AbstractView -> protected final ApplicationContext obtainApplicationContext();1504993259;Obtain the ApplicationContext for actual use._@return the ApplicationContext (never {@code null})_@throws IllegalStateException in case of no ApplicationContext set;protected final ApplicationContext obtainApplicationContext() {_		ApplicationContext applicationContext = getApplicationContext()__		Assert.state(applicationContext != null, "No ApplicationContext")__		return applicationContext__	};obtain,the,application,context,for,actual,use,return,the,application,context,never,code,null,throws,illegal,state,exception,in,case,of,no,application,context,set;protected,final,application,context,obtain,application,context,application,context,application,context,get,application,context,assert,state,application,context,null,no,application,context,return,application,context
AbstractView -> protected final ApplicationContext obtainApplicationContext();1511215342;Obtain the ApplicationContext for actual use._@return the ApplicationContext (never {@code null})_@throws IllegalStateException in case of no ApplicationContext set;protected final ApplicationContext obtainApplicationContext() {_		ApplicationContext applicationContext = getApplicationContext()__		Assert.state(applicationContext != null, "No ApplicationContext")__		return applicationContext__	};obtain,the,application,context,for,actual,use,return,the,application,context,never,code,null,throws,illegal,state,exception,in,case,of,no,application,context,set;protected,final,application,context,obtain,application,context,application,context,application,context,get,application,context,assert,state,application,context,null,no,application,context,return,application,context
AbstractView -> protected final ApplicationContext obtainApplicationContext();1522359218;Obtain the ApplicationContext for actual use._@return the ApplicationContext (never {@code null})_@throws IllegalStateException in case of no ApplicationContext set;protected final ApplicationContext obtainApplicationContext() {_		ApplicationContext applicationContext = getApplicationContext()__		Assert.state(applicationContext != null, "No ApplicationContext")__		return applicationContext__	};obtain,the,application,context,for,actual,use,return,the,application,context,never,code,null,throws,illegal,state,exception,in,case,of,no,application,context,set;protected,final,application,context,obtain,application,context,application,context,application,context,get,application,context,assert,state,application,context,null,no,application,context,return,application,context
AbstractView -> protected final ApplicationContext obtainApplicationContext();1522360217;Obtain the ApplicationContext for actual use._@return the ApplicationContext (never {@code null})_@throws IllegalStateException in case of no ApplicationContext set;protected final ApplicationContext obtainApplicationContext() {_		ApplicationContext applicationContext = getApplicationContext()__		Assert.state(applicationContext != null, "No ApplicationContext")__		return applicationContext__	};obtain,the,application,context,for,actual,use,return,the,application,context,never,code,null,throws,illegal,state,exception,in,case,of,no,application,context,set;protected,final,application,context,obtain,application,context,application,context,application,context,get,application,context,assert,state,application,context,null,no,application,context,return,application,context
AbstractView -> protected final ApplicationContext obtainApplicationContext();1529721864;Obtain the ApplicationContext for actual use._@return the ApplicationContext (never {@code null})_@throws IllegalStateException in case of no ApplicationContext set;protected final ApplicationContext obtainApplicationContext() {_		ApplicationContext applicationContext = getApplicationContext()__		Assert.state(applicationContext != null, "No ApplicationContext")__		return applicationContext__	};obtain,the,application,context,for,actual,use,return,the,application,context,never,code,null,throws,illegal,state,exception,in,case,of,no,application,context,set;protected,final,application,context,obtain,application,context,application,context,application,context,get,application,context,assert,state,application,context,null,no,application,context,return,application,context
AbstractView -> protected final ApplicationContext obtainApplicationContext();1530174524;Obtain the ApplicationContext for actual use._@return the ApplicationContext (never {@code null})_@throws IllegalStateException in case of no ApplicationContext set;protected final ApplicationContext obtainApplicationContext() {_		ApplicationContext applicationContext = getApplicationContext()__		Assert.state(applicationContext != null, "No ApplicationContext")__		return applicationContext__	};obtain,the,application,context,for,actual,use,return,the,application,context,never,code,null,throws,illegal,state,exception,in,case,of,no,application,context,set;protected,final,application,context,obtain,application,context,application,context,application,context,get,application,context,assert,state,application,context,null,no,application,context,return,application,context
AbstractView -> protected final ApplicationContext obtainApplicationContext();1530294255;Obtain the ApplicationContext for actual use._@return the ApplicationContext (never {@code null})_@throws IllegalStateException in case of no ApplicationContext set;protected final ApplicationContext obtainApplicationContext() {_		ApplicationContext applicationContext = getApplicationContext()__		Assert.state(applicationContext != null, "No ApplicationContext")__		return applicationContext__	};obtain,the,application,context,for,actual,use,return,the,application,context,never,code,null,throws,illegal,state,exception,in,case,of,no,application,context,set;protected,final,application,context,obtain,application,context,application,context,application,context,get,application,context,assert,state,application,context,null,no,application,context,return,application,context
AbstractView -> protected final ApplicationContext obtainApplicationContext();1530793633;Obtain the ApplicationContext for actual use._@return the ApplicationContext (never {@code null})_@throws IllegalStateException in case of no ApplicationContext set;protected final ApplicationContext obtainApplicationContext() {_		ApplicationContext applicationContext = getApplicationContext()__		Assert.state(applicationContext != null, "No ApplicationContext")__		return applicationContext__	};obtain,the,application,context,for,actual,use,return,the,application,context,never,code,null,throws,illegal,state,exception,in,case,of,no,application,context,set;protected,final,application,context,obtain,application,context,application,context,application,context,get,application,context,assert,state,application,context,null,no,application,context,return,application,context
AbstractView -> @Nullable 	public String getBeanName();1529721864;Return the view's name. Should never be {@code null}, if the view was_correctly configured.;@Nullable_	public String getBeanName() {_		return this.beanName__	};return,the,view,s,name,should,never,be,code,null,if,the,view,was,correctly,configured;nullable,public,string,get,bean,name,return,this,bean,name
AbstractView -> @Nullable 	public String getBeanName();1530174524;Return the view's name. Should never be {@code null}, if the view was_correctly configured.;@Nullable_	public String getBeanName() {_		return this.beanName__	};return,the,view,s,name,should,never,be,code,null,if,the,view,was,correctly,configured;nullable,public,string,get,bean,name,return,this,bean,name
AbstractView -> @Nullable 	public String getBeanName();1530294255;Return the view's name. Should never be {@code null}, if the view was_correctly configured.;@Nullable_	public String getBeanName() {_		return this.beanName__	};return,the,view,s,name,should,never,be,code,null,if,the,view,was,correctly,configured;nullable,public,string,get,bean,name,return,this,bean,name
AbstractView -> @Nullable 	public String getBeanName();1530793633;Return the view's name. Should never be {@code null}, if the view was_correctly configured.;@Nullable_	public String getBeanName() {_		return this.beanName__	};return,the,view,s,name,should,never,be,code,null,if,the,view,was,correctly,configured;nullable,public,string,get,bean,name,return,this,bean,name
AbstractView -> @Override 	public Mono<Void> render(@Nullable Map<String, ?> model, @Nullable MediaType contentType, 			ServerWebExchange exchange);1496242568;Prepare the model to render._@param model Map with name Strings as keys and corresponding model_objects as values (Map can also be {@code null} in case of empty model)_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange the current exchange_@return {@code Mono} to represent when and if rendering succeeds;@Override_	public Mono<Void> render(@Nullable Map<String, ?> model, @Nullable MediaType contentType,_			ServerWebExchange exchange) {__		if (logger.isTraceEnabled()) {_			logger.trace("Rendering view with model " + model)__		}__		if (contentType != null) {_			exchange.getResponse().getHeaders().setContentType(contentType)__		}__		return getModelAttributes(model, exchange).flatMap(mergedModel -> {_			_			if (this.requestContextAttribute != null) {_				mergedModel.put(this.requestContextAttribute, createRequestContext(exchange, mergedModel))__			}_			return renderInternal(mergedModel, contentType, exchange)__		})__	};prepare,the,model,to,render,param,model,map,with,name,strings,as,keys,and,corresponding,model,objects,as,values,map,can,also,be,code,null,in,case,of,empty,model,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,the,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;override,public,mono,void,render,nullable,map,string,model,nullable,media,type,content,type,server,web,exchange,exchange,if,logger,is,trace,enabled,logger,trace,rendering,view,with,model,model,if,content,type,null,exchange,get,response,get,headers,set,content,type,content,type,return,get,model,attributes,model,exchange,flat,map,merged,model,if,this,request,context,attribute,null,merged,model,put,this,request,context,attribute,create,request,context,exchange,merged,model,return,render,internal,merged,model,content,type,exchange
AbstractView -> @Override 	public Mono<Void> render(@Nullable Map<String, ?> model, @Nullable MediaType contentType, 			ServerWebExchange exchange);1496837955;Prepare the model to render._@param model Map with name Strings as keys and corresponding model_objects as values (Map can also be {@code null} in case of empty model)_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange the current exchange_@return {@code Mono} to represent when and if rendering succeeds;@Override_	public Mono<Void> render(@Nullable Map<String, ?> model, @Nullable MediaType contentType,_			ServerWebExchange exchange) {__		if (logger.isTraceEnabled()) {_			logger.trace("Rendering view with model " + model)__		}__		if (contentType != null) {_			exchange.getResponse().getHeaders().setContentType(contentType)__		}__		return getModelAttributes(model, exchange).flatMap(mergedModel -> {_			_			if (this.requestContextAttribute != null) {_				mergedModel.put(this.requestContextAttribute, createRequestContext(exchange, mergedModel))__			}_			return renderInternal(mergedModel, contentType, exchange)__		})__	};prepare,the,model,to,render,param,model,map,with,name,strings,as,keys,and,corresponding,model,objects,as,values,map,can,also,be,code,null,in,case,of,empty,model,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,the,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;override,public,mono,void,render,nullable,map,string,model,nullable,media,type,content,type,server,web,exchange,exchange,if,logger,is,trace,enabled,logger,trace,rendering,view,with,model,model,if,content,type,null,exchange,get,response,get,headers,set,content,type,content,type,return,get,model,attributes,model,exchange,flat,map,merged,model,if,this,request,context,attribute,null,merged,model,put,this,request,context,attribute,create,request,context,exchange,merged,model,return,render,internal,merged,model,content,type,exchange
AbstractView -> @Override 	public Mono<Void> render(@Nullable Map<String, ?> model, @Nullable MediaType contentType, 			ServerWebExchange exchange);1498780456;Prepare the model to render._@param model Map with name Strings as keys and corresponding model_objects as values (Map can also be {@code null} in case of empty model)_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange the current exchange_@return {@code Mono} to represent when and if rendering succeeds;@Override_	public Mono<Void> render(@Nullable Map<String, ?> model, @Nullable MediaType contentType,_			ServerWebExchange exchange) {__		if (logger.isTraceEnabled()) {_			logger.trace("Rendering view with model " + model)__		}__		if (contentType != null) {_			exchange.getResponse().getHeaders().setContentType(contentType)__		}__		return getModelAttributes(model, exchange).flatMap(mergedModel -> {_			_			if (this.requestContextAttribute != null) {_				mergedModel.put(this.requestContextAttribute, createRequestContext(exchange, mergedModel))__			}_			return renderInternal(mergedModel, contentType, exchange)__		})__	};prepare,the,model,to,render,param,model,map,with,name,strings,as,keys,and,corresponding,model,objects,as,values,map,can,also,be,code,null,in,case,of,empty,model,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,the,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;override,public,mono,void,render,nullable,map,string,model,nullable,media,type,content,type,server,web,exchange,exchange,if,logger,is,trace,enabled,logger,trace,rendering,view,with,model,model,if,content,type,null,exchange,get,response,get,headers,set,content,type,content,type,return,get,model,attributes,model,exchange,flat,map,merged,model,if,this,request,context,attribute,null,merged,model,put,this,request,context,attribute,create,request,context,exchange,merged,model,return,render,internal,merged,model,content,type,exchange
AbstractView -> @Override 	public Mono<Void> render(@Nullable Map<String, ?> model, @Nullable MediaType contentType, 			ServerWebExchange exchange);1500448076;Prepare the model to render._@param model Map with name Strings as keys and corresponding model_objects as values (Map can also be {@code null} in case of empty model)_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange the current exchange_@return {@code Mono} to represent when and if rendering succeeds;@Override_	public Mono<Void> render(@Nullable Map<String, ?> model, @Nullable MediaType contentType,_			ServerWebExchange exchange) {__		if (logger.isTraceEnabled()) {_			logger.trace("Rendering view with model " + model)__		}__		if (contentType != null) {_			exchange.getResponse().getHeaders().setContentType(contentType)__		}__		return getModelAttributes(model, exchange).flatMap(mergedModel -> {_			_			if (this.requestContextAttribute != null) {_				mergedModel.put(this.requestContextAttribute, createRequestContext(exchange, mergedModel))__			}_			return renderInternal(mergedModel, contentType, exchange)__		})__	};prepare,the,model,to,render,param,model,map,with,name,strings,as,keys,and,corresponding,model,objects,as,values,map,can,also,be,code,null,in,case,of,empty,model,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,the,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;override,public,mono,void,render,nullable,map,string,model,nullable,media,type,content,type,server,web,exchange,exchange,if,logger,is,trace,enabled,logger,trace,rendering,view,with,model,model,if,content,type,null,exchange,get,response,get,headers,set,content,type,content,type,return,get,model,attributes,model,exchange,flat,map,merged,model,if,this,request,context,attribute,null,merged,model,put,this,request,context,attribute,create,request,context,exchange,merged,model,return,render,internal,merged,model,content,type,exchange
AbstractView -> @Override 	public Mono<Void> render(@Nullable Map<String, ?> model, @Nullable MediaType contentType, 			ServerWebExchange exchange);1503338048;Prepare the model to render._@param model Map with name Strings as keys and corresponding model_objects as values (Map can also be {@code null} in case of empty model)_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange the current exchange_@return {@code Mono} to represent when and if rendering succeeds;@Override_	public Mono<Void> render(@Nullable Map<String, ?> model, @Nullable MediaType contentType,_			ServerWebExchange exchange) {__		if (logger.isTraceEnabled()) {_			logger.trace("Rendering view with model " + model)__		}__		if (contentType != null) {_			exchange.getResponse().getHeaders().setContentType(contentType)__		}__		return getModelAttributes(model, exchange).flatMap(mergedModel -> {_			_			if (this.requestContextAttribute != null) {_				mergedModel.put(this.requestContextAttribute, createRequestContext(exchange, mergedModel))__			}_			return renderInternal(mergedModel, contentType, exchange)__		})__	};prepare,the,model,to,render,param,model,map,with,name,strings,as,keys,and,corresponding,model,objects,as,values,map,can,also,be,code,null,in,case,of,empty,model,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,the,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;override,public,mono,void,render,nullable,map,string,model,nullable,media,type,content,type,server,web,exchange,exchange,if,logger,is,trace,enabled,logger,trace,rendering,view,with,model,model,if,content,type,null,exchange,get,response,get,headers,set,content,type,content,type,return,get,model,attributes,model,exchange,flat,map,merged,model,if,this,request,context,attribute,null,merged,model,put,this,request,context,attribute,create,request,context,exchange,merged,model,return,render,internal,merged,model,content,type,exchange
AbstractView -> @Override 	public Mono<Void> render(@Nullable Map<String, ?> model, @Nullable MediaType contentType, 			ServerWebExchange exchange);1504993259;Prepare the model to render._@param model Map with name Strings as keys and corresponding model_objects as values (Map can also be {@code null} in case of empty model)_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange the current exchange_@return {@code Mono} to represent when and if rendering succeeds;@Override_	public Mono<Void> render(@Nullable Map<String, ?> model, @Nullable MediaType contentType,_			ServerWebExchange exchange) {__		if (logger.isTraceEnabled()) {_			logger.trace("Rendering view with model " + model)__		}__		if (contentType != null) {_			exchange.getResponse().getHeaders().setContentType(contentType)__		}__		return getModelAttributes(model, exchange).flatMap(mergedModel -> {_			_			if (this.requestContextAttribute != null) {_				mergedModel.put(this.requestContextAttribute, createRequestContext(exchange, mergedModel))__			}_			return renderInternal(mergedModel, contentType, exchange)__		})__	};prepare,the,model,to,render,param,model,map,with,name,strings,as,keys,and,corresponding,model,objects,as,values,map,can,also,be,code,null,in,case,of,empty,model,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,the,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;override,public,mono,void,render,nullable,map,string,model,nullable,media,type,content,type,server,web,exchange,exchange,if,logger,is,trace,enabled,logger,trace,rendering,view,with,model,model,if,content,type,null,exchange,get,response,get,headers,set,content,type,content,type,return,get,model,attributes,model,exchange,flat,map,merged,model,if,this,request,context,attribute,null,merged,model,put,this,request,context,attribute,create,request,context,exchange,merged,model,return,render,internal,merged,model,content,type,exchange
AbstractView -> @Override 	public Mono<Void> render(@Nullable Map<String, ?> model, @Nullable MediaType contentType, 			ServerWebExchange exchange);1511215342;Prepare the model to render._@param model Map with name Strings as keys and corresponding model_objects as values (Map can also be {@code null} in case of empty model)_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange the current exchange_@return {@code Mono} to represent when and if rendering succeeds;@Override_	public Mono<Void> render(@Nullable Map<String, ?> model, @Nullable MediaType contentType,_			ServerWebExchange exchange) {__		if (logger.isTraceEnabled()) {_			logger.trace("Rendering view with model " + model)__		}__		if (contentType != null) {_			exchange.getResponse().getHeaders().setContentType(contentType)__		}__		return getModelAttributes(model, exchange).flatMap(mergedModel -> {_			_			if (this.requestContextAttribute != null) {_				mergedModel.put(this.requestContextAttribute, createRequestContext(exchange, mergedModel))__			}_			return renderInternal(mergedModel, contentType, exchange)__		})__	};prepare,the,model,to,render,param,model,map,with,name,strings,as,keys,and,corresponding,model,objects,as,values,map,can,also,be,code,null,in,case,of,empty,model,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,the,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;override,public,mono,void,render,nullable,map,string,model,nullable,media,type,content,type,server,web,exchange,exchange,if,logger,is,trace,enabled,logger,trace,rendering,view,with,model,model,if,content,type,null,exchange,get,response,get,headers,set,content,type,content,type,return,get,model,attributes,model,exchange,flat,map,merged,model,if,this,request,context,attribute,null,merged,model,put,this,request,context,attribute,create,request,context,exchange,merged,model,return,render,internal,merged,model,content,type,exchange
AbstractView -> @Override 	public Mono<Void> render(@Nullable Map<String, ?> model, @Nullable MediaType contentType, 			ServerWebExchange exchange);1522359218;Prepare the model to render._@param model Map with name Strings as keys and corresponding model_objects as values (Map can also be {@code null} in case of empty model)_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange the current exchange_@return {@code Mono} to represent when and if rendering succeeds;@Override_	public Mono<Void> render(@Nullable Map<String, ?> model, @Nullable MediaType contentType,_			ServerWebExchange exchange) {__		if (logger.isTraceEnabled()) {_			logger.trace("Rendering view with model " + model)__		}__		if (contentType != null) {_			exchange.getResponse().getHeaders().setContentType(contentType)__		}__		return getModelAttributes(model, exchange).flatMap(mergedModel -> {_			_			if (this.requestContextAttribute != null) {_				mergedModel.put(this.requestContextAttribute, createRequestContext(exchange, mergedModel))__			}_			return renderInternal(mergedModel, contentType, exchange)__		})__	};prepare,the,model,to,render,param,model,map,with,name,strings,as,keys,and,corresponding,model,objects,as,values,map,can,also,be,code,null,in,case,of,empty,model,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,the,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;override,public,mono,void,render,nullable,map,string,model,nullable,media,type,content,type,server,web,exchange,exchange,if,logger,is,trace,enabled,logger,trace,rendering,view,with,model,model,if,content,type,null,exchange,get,response,get,headers,set,content,type,content,type,return,get,model,attributes,model,exchange,flat,map,merged,model,if,this,request,context,attribute,null,merged,model,put,this,request,context,attribute,create,request,context,exchange,merged,model,return,render,internal,merged,model,content,type,exchange
AbstractView -> @Override 	public Mono<Void> render(@Nullable Map<String, ?> model, @Nullable MediaType contentType, 			ServerWebExchange exchange);1522360217;Prepare the model to render._@param model Map with name Strings as keys and corresponding model_objects as values (Map can also be {@code null} in case of empty model)_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange the current exchange_@return {@code Mono} to represent when and if rendering succeeds;@Override_	public Mono<Void> render(@Nullable Map<String, ?> model, @Nullable MediaType contentType,_			ServerWebExchange exchange) {__		if (logger.isTraceEnabled()) {_			logger.trace("Rendering view with model " + model)__		}__		if (contentType != null) {_			exchange.getResponse().getHeaders().setContentType(contentType)__		}__		return getModelAttributes(model, exchange).flatMap(mergedModel -> {_			_			if (this.requestContextAttribute != null) {_				mergedModel.put(this.requestContextAttribute, createRequestContext(exchange, mergedModel))__			}_			return renderInternal(mergedModel, contentType, exchange)__		})__	};prepare,the,model,to,render,param,model,map,with,name,strings,as,keys,and,corresponding,model,objects,as,values,map,can,also,be,code,null,in,case,of,empty,model,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,the,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;override,public,mono,void,render,nullable,map,string,model,nullable,media,type,content,type,server,web,exchange,exchange,if,logger,is,trace,enabled,logger,trace,rendering,view,with,model,model,if,content,type,null,exchange,get,response,get,headers,set,content,type,content,type,return,get,model,attributes,model,exchange,flat,map,merged,model,if,this,request,context,attribute,null,merged,model,put,this,request,context,attribute,create,request,context,exchange,merged,model,return,render,internal,merged,model,content,type,exchange
AbstractView -> @Override 	public Mono<Void> render(@Nullable Map<String, ?> model, @Nullable MediaType contentType, 			ServerWebExchange exchange);1529721864;Prepare the model to render._@param model Map with name Strings as keys and corresponding model_objects as values (Map can also be {@code null} in case of empty model)_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange the current exchange_@return {@code Mono} to represent when and if rendering succeeds;@Override_	public Mono<Void> render(@Nullable Map<String, ?> model, @Nullable MediaType contentType,_			ServerWebExchange exchange) {__		if (logger.isDebugEnabled()) {_			logger.debug("View " + formatViewName() +_					", model " + (model != null ? model : Collections.emptyMap()))__		}__		if (contentType != null) {_			exchange.getResponse().getHeaders().setContentType(contentType)__		}__		return getModelAttributes(model, exchange).flatMap(mergedModel -> {_			_			if (this.requestContextAttribute != null) {_				mergedModel.put(this.requestContextAttribute, createRequestContext(exchange, mergedModel))__			}_			return renderInternal(mergedModel, contentType, exchange)__		})__	};prepare,the,model,to,render,param,model,map,with,name,strings,as,keys,and,corresponding,model,objects,as,values,map,can,also,be,code,null,in,case,of,empty,model,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,the,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;override,public,mono,void,render,nullable,map,string,model,nullable,media,type,content,type,server,web,exchange,exchange,if,logger,is,debug,enabled,logger,debug,view,format,view,name,model,model,null,model,collections,empty,map,if,content,type,null,exchange,get,response,get,headers,set,content,type,content,type,return,get,model,attributes,model,exchange,flat,map,merged,model,if,this,request,context,attribute,null,merged,model,put,this,request,context,attribute,create,request,context,exchange,merged,model,return,render,internal,merged,model,content,type,exchange
AbstractView -> @Override 	public Mono<Void> render(@Nullable Map<String, ?> model, @Nullable MediaType contentType, 			ServerWebExchange exchange);1530174524;Prepare the model to render._@param model a Map with name Strings as keys and corresponding model_objects as values (Map can also be {@code null} in case of empty model)_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange the current exchange_@return {@code Mono} to represent when and if rendering succeeds;@Override_	public Mono<Void> render(@Nullable Map<String, ?> model, @Nullable MediaType contentType,_			ServerWebExchange exchange) {__		if (logger.isDebugEnabled()) {_			logger.debug("View " + formatViewName() +_					", model " + (model != null ? model : Collections.emptyMap()))__		}__		if (contentType != null) {_			exchange.getResponse().getHeaders().setContentType(contentType)__		}__		return getModelAttributes(model, exchange).flatMap(mergedModel -> {_			_			if (this.requestContextAttribute != null) {_				mergedModel.put(this.requestContextAttribute, createRequestContext(exchange, mergedModel))__			}_			return renderInternal(mergedModel, contentType, exchange)__		})__	};prepare,the,model,to,render,param,model,a,map,with,name,strings,as,keys,and,corresponding,model,objects,as,values,map,can,also,be,code,null,in,case,of,empty,model,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,the,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;override,public,mono,void,render,nullable,map,string,model,nullable,media,type,content,type,server,web,exchange,exchange,if,logger,is,debug,enabled,logger,debug,view,format,view,name,model,model,null,model,collections,empty,map,if,content,type,null,exchange,get,response,get,headers,set,content,type,content,type,return,get,model,attributes,model,exchange,flat,map,merged,model,if,this,request,context,attribute,null,merged,model,put,this,request,context,attribute,create,request,context,exchange,merged,model,return,render,internal,merged,model,content,type,exchange
AbstractView -> @Override 	public Mono<Void> render(@Nullable Map<String, ?> model, @Nullable MediaType contentType, 			ServerWebExchange exchange);1530294255;Prepare the model to render._@param model a Map with name Strings as keys and corresponding model_objects as values (Map can also be {@code null} in case of empty model)_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange the current exchange_@return {@code Mono} to represent when and if rendering succeeds;@Override_	public Mono<Void> render(@Nullable Map<String, ?> model, @Nullable MediaType contentType,_			ServerWebExchange exchange) {__		if (logger.isDebugEnabled()) {_			logger.debug("View " + formatViewName() +_					", model " + (model != null ? model : Collections.emptyMap()))__		}__		if (contentType != null) {_			exchange.getResponse().getHeaders().setContentType(contentType)__		}__		return getModelAttributes(model, exchange).flatMap(mergedModel -> {_			_			if (this.requestContextAttribute != null) {_				mergedModel.put(this.requestContextAttribute, createRequestContext(exchange, mergedModel))__			}_			return renderInternal(mergedModel, contentType, exchange)__		})__	};prepare,the,model,to,render,param,model,a,map,with,name,strings,as,keys,and,corresponding,model,objects,as,values,map,can,also,be,code,null,in,case,of,empty,model,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,the,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;override,public,mono,void,render,nullable,map,string,model,nullable,media,type,content,type,server,web,exchange,exchange,if,logger,is,debug,enabled,logger,debug,view,format,view,name,model,model,null,model,collections,empty,map,if,content,type,null,exchange,get,response,get,headers,set,content,type,content,type,return,get,model,attributes,model,exchange,flat,map,merged,model,if,this,request,context,attribute,null,merged,model,put,this,request,context,attribute,create,request,context,exchange,merged,model,return,render,internal,merged,model,content,type,exchange
AbstractView -> @Override 	public Mono<Void> render(@Nullable Map<String, ?> model, @Nullable MediaType contentType, 			ServerWebExchange exchange);1530793633;Prepare the model to render._@param model a Map with name Strings as keys and corresponding model_objects as values (Map can also be {@code null} in case of empty model)_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange the current exchange_@return {@code Mono} to represent when and if rendering succeeds;@Override_	public Mono<Void> render(@Nullable Map<String, ?> model, @Nullable MediaType contentType,_			ServerWebExchange exchange) {__		if (logger.isDebugEnabled()) {_			logger.debug(exchange.getLogPrefix() + "View " + formatViewName() +_					", model " + (model != null ? model : Collections.emptyMap()))__		}__		if (contentType != null) {_			exchange.getResponse().getHeaders().setContentType(contentType)__		}__		return getModelAttributes(model, exchange).flatMap(mergedModel -> {_			_			if (this.requestContextAttribute != null) {_				mergedModel.put(this.requestContextAttribute, createRequestContext(exchange, mergedModel))__			}_			return renderInternal(mergedModel, contentType, exchange)__		})__	};prepare,the,model,to,render,param,model,a,map,with,name,strings,as,keys,and,corresponding,model,objects,as,values,map,can,also,be,code,null,in,case,of,empty,model,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,the,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;override,public,mono,void,render,nullable,map,string,model,nullable,media,type,content,type,server,web,exchange,exchange,if,logger,is,debug,enabled,logger,debug,exchange,get,log,prefix,view,format,view,name,model,model,null,model,collections,empty,map,if,content,type,null,exchange,get,response,get,headers,set,content,type,content,type,return,get,model,attributes,model,exchange,flat,map,merged,model,if,this,request,context,attribute,null,merged,model,put,this,request,context,attribute,create,request,context,exchange,merged,model,return,render,internal,merged,model,content,type,exchange
AbstractView -> protected Mono<Map<String, Object>> getModelAttributes(@Nullable Map<String, ?> model, ServerWebExchange exchange);1496837955;Prepare the model to use for rendering._<p>The default implementation creates a combined output Map that includes_model as well as static attributes with the former taking precedence.;protected Mono<Map<String, Object>> getModelAttributes(@Nullable Map<String, ?> model, ServerWebExchange exchange) {_		int size = (model != null ? model.size() : 0)___		Map<String, Object> attributes = new LinkedHashMap<>(size)__		if (model != null) {_			attributes.putAll(model)__		}__		return resolveAsyncAttributes(attributes).then(Mono.just(attributes))__	};prepare,the,model,to,use,for,rendering,p,the,default,implementation,creates,a,combined,output,map,that,includes,model,as,well,as,static,attributes,with,the,former,taking,precedence;protected,mono,map,string,object,get,model,attributes,nullable,map,string,model,server,web,exchange,exchange,int,size,model,null,model,size,0,map,string,object,attributes,new,linked,hash,map,size,if,model,null,attributes,put,all,model,return,resolve,async,attributes,attributes,then,mono,just,attributes
AbstractView -> protected Mono<Map<String, Object>> getModelAttributes(@Nullable Map<String, ?> model, ServerWebExchange exchange);1498780456;Prepare the model to use for rendering._<p>The default implementation creates a combined output Map that includes_model as well as static attributes with the former taking precedence.;protected Mono<Map<String, Object>> getModelAttributes(@Nullable Map<String, ?> model, ServerWebExchange exchange) {_		int size = (model != null ? model.size() : 0)___		Map<String, Object> attributes = new LinkedHashMap<>(size)__		if (model != null) {_			attributes.putAll(model)__		}__		return resolveAsyncAttributes(attributes).then(Mono.just(attributes))__	};prepare,the,model,to,use,for,rendering,p,the,default,implementation,creates,a,combined,output,map,that,includes,model,as,well,as,static,attributes,with,the,former,taking,precedence;protected,mono,map,string,object,get,model,attributes,nullable,map,string,model,server,web,exchange,exchange,int,size,model,null,model,size,0,map,string,object,attributes,new,linked,hash,map,size,if,model,null,attributes,put,all,model,return,resolve,async,attributes,attributes,then,mono,just,attributes
AbstractView -> protected Mono<Map<String, Object>> getModelAttributes(@Nullable Map<String, ?> model, ServerWebExchange exchange);1500448076;Prepare the model to use for rendering._<p>The default implementation creates a combined output Map that includes_model as well as static attributes with the former taking precedence.;protected Mono<Map<String, Object>> getModelAttributes(@Nullable Map<String, ?> model, ServerWebExchange exchange) {_		int size = (model != null ? model.size() : 0)___		Map<String, Object> attributes = new LinkedHashMap<>(size)__		if (model != null) {_			attributes.putAll(model)__		}__		return resolveAsyncAttributes(attributes).then(Mono.just(attributes))__	};prepare,the,model,to,use,for,rendering,p,the,default,implementation,creates,a,combined,output,map,that,includes,model,as,well,as,static,attributes,with,the,former,taking,precedence;protected,mono,map,string,object,get,model,attributes,nullable,map,string,model,server,web,exchange,exchange,int,size,model,null,model,size,0,map,string,object,attributes,new,linked,hash,map,size,if,model,null,attributes,put,all,model,return,resolve,async,attributes,attributes,then,mono,just,attributes
AbstractView -> protected Mono<Map<String, Object>> getModelAttributes(@Nullable Map<String, ?> model, ServerWebExchange exchange);1503338048;Prepare the model to use for rendering._<p>The default implementation creates a combined output Map that includes_model as well as static attributes with the former taking precedence.;protected Mono<Map<String, Object>> getModelAttributes(@Nullable Map<String, ?> model, ServerWebExchange exchange) {_		int size = (model != null ? model.size() : 0)___		Map<String, Object> attributes = new LinkedHashMap<>(size)__		if (model != null) {_			attributes.putAll(model)__		}__		return resolveAsyncAttributes(attributes).then(Mono.just(attributes))__	};prepare,the,model,to,use,for,rendering,p,the,default,implementation,creates,a,combined,output,map,that,includes,model,as,well,as,static,attributes,with,the,former,taking,precedence;protected,mono,map,string,object,get,model,attributes,nullable,map,string,model,server,web,exchange,exchange,int,size,model,null,model,size,0,map,string,object,attributes,new,linked,hash,map,size,if,model,null,attributes,put,all,model,return,resolve,async,attributes,attributes,then,mono,just,attributes
AbstractView -> protected Mono<Map<String, Object>> getModelAttributes(Map<String, ?> model, ServerWebExchange exchange);1490903325;Prepare the model to use for rendering._<p>The default implementation creates a combined output Map that includes_model as well as static attributes with the former taking precedence.;protected Mono<Map<String, Object>> getModelAttributes(Map<String, ?> model, ServerWebExchange exchange) {_		int size = (model != null ? model.size() : 0)___		Map<String, Object> attributes = new LinkedHashMap<>(size)__		if (model != null) {_			attributes.putAll(model)__		}__		return resolveAsyncAttributes(attributes).then(Mono.just(attributes))__	};prepare,the,model,to,use,for,rendering,p,the,default,implementation,creates,a,combined,output,map,that,includes,model,as,well,as,static,attributes,with,the,former,taking,precedence;protected,mono,map,string,object,get,model,attributes,map,string,model,server,web,exchange,exchange,int,size,model,null,model,size,0,map,string,object,attributes,new,linked,hash,map,size,if,model,null,attributes,put,all,model,return,resolve,async,attributes,attributes,then,mono,just,attributes
AbstractView -> protected Mono<Map<String, Object>> getModelAttributes(Map<String, ?> model, ServerWebExchange exchange);1491927184;Prepare the model to use for rendering._<p>The default implementation creates a combined output Map that includes_model as well as static attributes with the former taking precedence.;protected Mono<Map<String, Object>> getModelAttributes(Map<String, ?> model, ServerWebExchange exchange) {_		int size = (model != null ? model.size() : 0)___		Map<String, Object> attributes = new LinkedHashMap<>(size)__		if (model != null) {_			attributes.putAll(model)__		}__		return resolveAsyncAttributes(attributes).then(Mono.just(attributes))__	};prepare,the,model,to,use,for,rendering,p,the,default,implementation,creates,a,combined,output,map,that,includes,model,as,well,as,static,attributes,with,the,former,taking,precedence;protected,mono,map,string,object,get,model,attributes,map,string,model,server,web,exchange,exchange,int,size,model,null,model,size,0,map,string,object,attributes,new,linked,hash,map,size,if,model,null,attributes,put,all,model,return,resolve,async,attributes,attributes,then,mono,just,attributes
AbstractView -> protected Mono<Map<String, Object>> getModelAttributes(Map<String, ?> model, ServerWebExchange exchange);1495868221;Prepare the model to use for rendering._<p>The default implementation creates a combined output Map that includes_model as well as static attributes with the former taking precedence.;protected Mono<Map<String, Object>> getModelAttributes(Map<String, ?> model, ServerWebExchange exchange) {_		int size = (model != null ? model.size() : 0)___		Map<String, Object> attributes = new LinkedHashMap<>(size)__		if (model != null) {_			attributes.putAll(model)__		}__		return resolveAsyncAttributes(attributes).then(Mono.just(attributes))__	};prepare,the,model,to,use,for,rendering,p,the,default,implementation,creates,a,combined,output,map,that,includes,model,as,well,as,static,attributes,with,the,former,taking,precedence;protected,mono,map,string,object,get,model,attributes,map,string,model,server,web,exchange,exchange,int,size,model,null,model,size,0,map,string,object,attributes,new,linked,hash,map,size,if,model,null,attributes,put,all,model,return,resolve,async,attributes,attributes,then,mono,just,attributes
AbstractView -> protected Mono<Map<String, Object>> getModelAttributes(Map<String, ?> model, ServerWebExchange exchange);1496242568;Prepare the model to use for rendering._<p>The default implementation creates a combined output Map that includes_model as well as static attributes with the former taking precedence.;protected Mono<Map<String, Object>> getModelAttributes(Map<String, ?> model, ServerWebExchange exchange) {_		int size = (model != null ? model.size() : 0)___		Map<String, Object> attributes = new LinkedHashMap<>(size)__		if (model != null) {_			attributes.putAll(model)__		}__		return resolveAsyncAttributes(attributes).then(Mono.just(attributes))__	};prepare,the,model,to,use,for,rendering,p,the,default,implementation,creates,a,combined,output,map,that,includes,model,as,well,as,static,attributes,with,the,former,taking,precedence;protected,mono,map,string,object,get,model,attributes,map,string,model,server,web,exchange,exchange,int,size,model,null,model,size,0,map,string,object,attributes,new,linked,hash,map,size,if,model,null,attributes,put,all,model,return,resolve,async,attributes,attributes,then,mono,just,attributes
AbstractView -> public void setSupportedMediaTypes(@Nullable List<MediaType> supportedMediaTypes);1496837955;Set the supported media types for this view._Default is "text/html_charset=UTF-8".;public void setSupportedMediaTypes(@Nullable List<MediaType> supportedMediaTypes) {_		Assert.notEmpty(supportedMediaTypes, "MediaType List must not be empty")__		this.mediaTypes.clear()__		if (supportedMediaTypes != null) {_			this.mediaTypes.addAll(supportedMediaTypes)__		}_	};set,the,supported,media,types,for,this,view,default,is,text,html,charset,utf,8;public,void,set,supported,media,types,nullable,list,media,type,supported,media,types,assert,not,empty,supported,media,types,media,type,list,must,not,be,empty,this,media,types,clear,if,supported,media,types,null,this,media,types,add,all,supported,media,types
AbstractView -> public void setSupportedMediaTypes(@Nullable List<MediaType> supportedMediaTypes);1498780456;Set the supported media types for this view._Default is "text/html_charset=UTF-8".;public void setSupportedMediaTypes(@Nullable List<MediaType> supportedMediaTypes) {_		Assert.notEmpty(supportedMediaTypes, "MediaType List must not be empty")__		this.mediaTypes.clear()__		if (supportedMediaTypes != null) {_			this.mediaTypes.addAll(supportedMediaTypes)__		}_	};set,the,supported,media,types,for,this,view,default,is,text,html,charset,utf,8;public,void,set,supported,media,types,nullable,list,media,type,supported,media,types,assert,not,empty,supported,media,types,media,type,list,must,not,be,empty,this,media,types,clear,if,supported,media,types,null,this,media,types,add,all,supported,media,types
AbstractView -> public void setSupportedMediaTypes(@Nullable List<MediaType> supportedMediaTypes);1500448076;Set the supported media types for this view._Default is "text/html_charset=UTF-8".;public void setSupportedMediaTypes(@Nullable List<MediaType> supportedMediaTypes) {_		Assert.notEmpty(supportedMediaTypes, "MediaType List must not be empty")__		this.mediaTypes.clear()__		if (supportedMediaTypes != null) {_			this.mediaTypes.addAll(supportedMediaTypes)__		}_	};set,the,supported,media,types,for,this,view,default,is,text,html,charset,utf,8;public,void,set,supported,media,types,nullable,list,media,type,supported,media,types,assert,not,empty,supported,media,types,media,type,list,must,not,be,empty,this,media,types,clear,if,supported,media,types,null,this,media,types,add,all,supported,media,types
AbstractView -> public void setSupportedMediaTypes(@Nullable List<MediaType> supportedMediaTypes);1503338048;Set the supported media types for this view._Default is "text/html_charset=UTF-8".;public void setSupportedMediaTypes(@Nullable List<MediaType> supportedMediaTypes) {_		Assert.notEmpty(supportedMediaTypes, "MediaType List must not be empty")__		this.mediaTypes.clear()__		if (supportedMediaTypes != null) {_			this.mediaTypes.addAll(supportedMediaTypes)__		}_	};set,the,supported,media,types,for,this,view,default,is,text,html,charset,utf,8;public,void,set,supported,media,types,nullable,list,media,type,supported,media,types,assert,not,empty,supported,media,types,media,type,list,must,not,be,empty,this,media,types,clear,if,supported,media,types,null,this,media,types,add,all,supported,media,types
AbstractView -> public void setSupportedMediaTypes(@Nullable List<MediaType> supportedMediaTypes);1504993259;Set the supported media types for this view._Default is "text/html_charset=UTF-8".;public void setSupportedMediaTypes(@Nullable List<MediaType> supportedMediaTypes) {_		Assert.notEmpty(supportedMediaTypes, "MediaType List must not be empty")__		this.mediaTypes.clear()__		if (supportedMediaTypes != null) {_			this.mediaTypes.addAll(supportedMediaTypes)__		}_	};set,the,supported,media,types,for,this,view,default,is,text,html,charset,utf,8;public,void,set,supported,media,types,nullable,list,media,type,supported,media,types,assert,not,empty,supported,media,types,media,type,list,must,not,be,empty,this,media,types,clear,if,supported,media,types,null,this,media,types,add,all,supported,media,types
AbstractView -> public void setSupportedMediaTypes(@Nullable List<MediaType> supportedMediaTypes);1511215342;Set the supported media types for this view._Default is "text/html_charset=UTF-8".;public void setSupportedMediaTypes(@Nullable List<MediaType> supportedMediaTypes) {_		Assert.notEmpty(supportedMediaTypes, "MediaType List must not be empty")__		this.mediaTypes.clear()__		if (supportedMediaTypes != null) {_			this.mediaTypes.addAll(supportedMediaTypes)__		}_	};set,the,supported,media,types,for,this,view,default,is,text,html,charset,utf,8;public,void,set,supported,media,types,nullable,list,media,type,supported,media,types,assert,not,empty,supported,media,types,media,type,list,must,not,be,empty,this,media,types,clear,if,supported,media,types,null,this,media,types,add,all,supported,media,types
AbstractView -> public void setSupportedMediaTypes(@Nullable List<MediaType> supportedMediaTypes);1522359218;Set the supported media types for this view._Default is "text/html_charset=UTF-8".;public void setSupportedMediaTypes(@Nullable List<MediaType> supportedMediaTypes) {_		Assert.notEmpty(supportedMediaTypes, "MediaType List must not be empty")__		this.mediaTypes.clear()__		this.mediaTypes.addAll(supportedMediaTypes)__	};set,the,supported,media,types,for,this,view,default,is,text,html,charset,utf,8;public,void,set,supported,media,types,nullable,list,media,type,supported,media,types,assert,not,empty,supported,media,types,media,type,list,must,not,be,empty,this,media,types,clear,this,media,types,add,all,supported,media,types
AbstractView -> @Override 	public List<MediaType> getSupportedMediaTypes();1485986572;Return the configured media types supported by this view.;@Override_	public List<MediaType> getSupportedMediaTypes() {_		return this.mediaTypes__	};return,the,configured,media,types,supported,by,this,view;override,public,list,media,type,get,supported,media,types,return,this,media,types
AbstractView -> @Override 	public List<MediaType> getSupportedMediaTypes();1486720600;Return the configured media types supported by this view.;@Override_	public List<MediaType> getSupportedMediaTypes() {_		return this.mediaTypes__	};return,the,configured,media,types,supported,by,this,view;override,public,list,media,type,get,supported,media,types,return,this,media,types
AbstractView -> @Override 	public List<MediaType> getSupportedMediaTypes();1490903325;Return the configured media types supported by this view.;@Override_	public List<MediaType> getSupportedMediaTypes() {_		return this.mediaTypes__	};return,the,configured,media,types,supported,by,this,view;override,public,list,media,type,get,supported,media,types,return,this,media,types
AbstractView -> @Override 	public List<MediaType> getSupportedMediaTypes();1491927184;Return the configured media types supported by this view.;@Override_	public List<MediaType> getSupportedMediaTypes() {_		return this.mediaTypes__	};return,the,configured,media,types,supported,by,this,view;override,public,list,media,type,get,supported,media,types,return,this,media,types
AbstractView -> @Override 	public List<MediaType> getSupportedMediaTypes();1495868221;Return the configured media types supported by this view.;@Override_	public List<MediaType> getSupportedMediaTypes() {_		return this.mediaTypes__	};return,the,configured,media,types,supported,by,this,view;override,public,list,media,type,get,supported,media,types,return,this,media,types
AbstractView -> @Override 	public List<MediaType> getSupportedMediaTypes();1496242568;Return the configured media types supported by this view.;@Override_	public List<MediaType> getSupportedMediaTypes() {_		return this.mediaTypes__	};return,the,configured,media,types,supported,by,this,view;override,public,list,media,type,get,supported,media,types,return,this,media,types
AbstractView -> @Override 	public List<MediaType> getSupportedMediaTypes();1496837955;Return the configured media types supported by this view.;@Override_	public List<MediaType> getSupportedMediaTypes() {_		return this.mediaTypes__	};return,the,configured,media,types,supported,by,this,view;override,public,list,media,type,get,supported,media,types,return,this,media,types
AbstractView -> @Override 	public List<MediaType> getSupportedMediaTypes();1498780456;Return the configured media types supported by this view.;@Override_	public List<MediaType> getSupportedMediaTypes() {_		return this.mediaTypes__	};return,the,configured,media,types,supported,by,this,view;override,public,list,media,type,get,supported,media,types,return,this,media,types
AbstractView -> @Override 	public List<MediaType> getSupportedMediaTypes();1500448076;Return the configured media types supported by this view.;@Override_	public List<MediaType> getSupportedMediaTypes() {_		return this.mediaTypes__	};return,the,configured,media,types,supported,by,this,view;override,public,list,media,type,get,supported,media,types,return,this,media,types
AbstractView -> @Override 	public List<MediaType> getSupportedMediaTypes();1503338048;Return the configured media types supported by this view.;@Override_	public List<MediaType> getSupportedMediaTypes() {_		return this.mediaTypes__	};return,the,configured,media,types,supported,by,this,view;override,public,list,media,type,get,supported,media,types,return,this,media,types
AbstractView -> @Override 	public List<MediaType> getSupportedMediaTypes();1504993259;Return the configured media types supported by this view.;@Override_	public List<MediaType> getSupportedMediaTypes() {_		return this.mediaTypes__	};return,the,configured,media,types,supported,by,this,view;override,public,list,media,type,get,supported,media,types,return,this,media,types
AbstractView -> @Override 	public List<MediaType> getSupportedMediaTypes();1511215342;Return the configured media types supported by this view.;@Override_	public List<MediaType> getSupportedMediaTypes() {_		return this.mediaTypes__	};return,the,configured,media,types,supported,by,this,view;override,public,list,media,type,get,supported,media,types,return,this,media,types
AbstractView -> @Override 	public List<MediaType> getSupportedMediaTypes();1522359218;Return the configured media types supported by this view.;@Override_	public List<MediaType> getSupportedMediaTypes() {_		return this.mediaTypes__	};return,the,configured,media,types,supported,by,this,view;override,public,list,media,type,get,supported,media,types,return,this,media,types
AbstractView -> @Override 	public List<MediaType> getSupportedMediaTypes();1522360217;Return the configured media types supported by this view.;@Override_	public List<MediaType> getSupportedMediaTypes() {_		return this.mediaTypes__	};return,the,configured,media,types,supported,by,this,view;override,public,list,media,type,get,supported,media,types,return,this,media,types
AbstractView -> @Override 	public List<MediaType> getSupportedMediaTypes();1529721864;Return the configured media types supported by this view.;@Override_	public List<MediaType> getSupportedMediaTypes() {_		return this.mediaTypes__	};return,the,configured,media,types,supported,by,this,view;override,public,list,media,type,get,supported,media,types,return,this,media,types
AbstractView -> @Override 	public List<MediaType> getSupportedMediaTypes();1530174524;Return the configured media types supported by this view.;@Override_	public List<MediaType> getSupportedMediaTypes() {_		return this.mediaTypes__	};return,the,configured,media,types,supported,by,this,view;override,public,list,media,type,get,supported,media,types,return,this,media,types
AbstractView -> @Override 	public List<MediaType> getSupportedMediaTypes();1530294255;Return the configured media types supported by this view.;@Override_	public List<MediaType> getSupportedMediaTypes() {_		return this.mediaTypes__	};return,the,configured,media,types,supported,by,this,view;override,public,list,media,type,get,supported,media,types,return,this,media,types
AbstractView -> @Override 	public List<MediaType> getSupportedMediaTypes();1530793633;Return the configured media types supported by this view.;@Override_	public List<MediaType> getSupportedMediaTypes() {_		return this.mediaTypes__	};return,the,configured,media,types,supported,by,this,view;override,public,list,media,type,get,supported,media,types,return,this,media,types
AbstractView -> protected RequestDataValueProcessor getRequestDataValueProcessor();1485986572;Return the {@link RequestDataValueProcessor} to use._<p>The default implementation looks in the {@link #getApplicationContext()_Spring configuration} for a {@code RequestDataValueProcessor} bean with_the name {@link #REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME}._@return the RequestDataValueProcessor, or null if there is none at the application context.;protected RequestDataValueProcessor getRequestDataValueProcessor() {_		ApplicationContext context = getApplicationContext()__		if (context != null && context.containsBean(REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME)) {_			return context.getBean(REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME, RequestDataValueProcessor.class)__		}_		return null__	};return,the,link,request,data,value,processor,to,use,p,the,default,implementation,looks,in,the,link,get,application,context,spring,configuration,for,a,code,request,data,value,processor,bean,with,the,name,link,return,the,request,data,value,processor,or,null,if,there,is,none,at,the,application,context;protected,request,data,value,processor,get,request,data,value,processor,application,context,context,get,application,context,if,context,null,context,contains,bean,return,context,get,bean,request,data,value,processor,class,return,null
AbstractView -> protected RequestDataValueProcessor getRequestDataValueProcessor();1486720600;Return the {@link RequestDataValueProcessor} to use._<p>The default implementation looks in the {@link #getApplicationContext()_Spring configuration} for a {@code RequestDataValueProcessor} bean with_the name {@link #REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME}._@return the RequestDataValueProcessor, or null if there is none at the application context.;protected RequestDataValueProcessor getRequestDataValueProcessor() {_		ApplicationContext context = getApplicationContext()__		if (context != null && context.containsBean(REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME)) {_			return context.getBean(REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME, RequestDataValueProcessor.class)__		}_		return null__	};return,the,link,request,data,value,processor,to,use,p,the,default,implementation,looks,in,the,link,get,application,context,spring,configuration,for,a,code,request,data,value,processor,bean,with,the,name,link,return,the,request,data,value,processor,or,null,if,there,is,none,at,the,application,context;protected,request,data,value,processor,get,request,data,value,processor,application,context,context,get,application,context,if,context,null,context,contains,bean,return,context,get,bean,request,data,value,processor,class,return,null
AbstractView -> protected RequestDataValueProcessor getRequestDataValueProcessor();1490903325;Return the {@link RequestDataValueProcessor} to use._<p>The default implementation looks in the {@link #getApplicationContext()_Spring configuration} for a {@code RequestDataValueProcessor} bean with_the name {@link #REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME}._@return the RequestDataValueProcessor, or null if there is none at the application context.;protected RequestDataValueProcessor getRequestDataValueProcessor() {_		ApplicationContext context = getApplicationContext()__		if (context != null && context.containsBean(REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME)) {_			return context.getBean(REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME, RequestDataValueProcessor.class)__		}_		return null__	};return,the,link,request,data,value,processor,to,use,p,the,default,implementation,looks,in,the,link,get,application,context,spring,configuration,for,a,code,request,data,value,processor,bean,with,the,name,link,return,the,request,data,value,processor,or,null,if,there,is,none,at,the,application,context;protected,request,data,value,processor,get,request,data,value,processor,application,context,context,get,application,context,if,context,null,context,contains,bean,return,context,get,bean,request,data,value,processor,class,return,null
AbstractView -> protected RequestDataValueProcessor getRequestDataValueProcessor();1491927184;Return the {@link RequestDataValueProcessor} to use._<p>The default implementation looks in the {@link #getApplicationContext()_Spring configuration} for a {@code RequestDataValueProcessor} bean with_the name {@link #REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME}._@return the RequestDataValueProcessor, or null if there is none at the application context.;protected RequestDataValueProcessor getRequestDataValueProcessor() {_		ApplicationContext context = getApplicationContext()__		if (context != null && context.containsBean(REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME)) {_			return context.getBean(REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME, RequestDataValueProcessor.class)__		}_		return null__	};return,the,link,request,data,value,processor,to,use,p,the,default,implementation,looks,in,the,link,get,application,context,spring,configuration,for,a,code,request,data,value,processor,bean,with,the,name,link,return,the,request,data,value,processor,or,null,if,there,is,none,at,the,application,context;protected,request,data,value,processor,get,request,data,value,processor,application,context,context,get,application,context,if,context,null,context,contains,bean,return,context,get,bean,request,data,value,processor,class,return,null
AbstractView -> @Override 	public void setBeanName(@Nullable String beanName);1529721864;Set the view's name. Helpful for traceability._<p>Framework code must call this when constructing views.;@Override_	public void setBeanName(@Nullable String beanName) {_		this.beanName = beanName__	};set,the,view,s,name,helpful,for,traceability,p,framework,code,must,call,this,when,constructing,views;override,public,void,set,bean,name,nullable,string,bean,name,this,bean,name,bean,name
AbstractView -> @Override 	public void setBeanName(@Nullable String beanName);1530174524;Set the view's name. Helpful for traceability._<p>Framework code must call this when constructing views.;@Override_	public void setBeanName(@Nullable String beanName) {_		this.beanName = beanName__	};set,the,view,s,name,helpful,for,traceability,p,framework,code,must,call,this,when,constructing,views;override,public,void,set,bean,name,nullable,string,bean,name,this,bean,name,bean,name
AbstractView -> @Override 	public void setBeanName(@Nullable String beanName);1530294255;Set the view's name. Helpful for traceability._<p>Framework code must call this when constructing views.;@Override_	public void setBeanName(@Nullable String beanName) {_		this.beanName = beanName__	};set,the,view,s,name,helpful,for,traceability,p,framework,code,must,call,this,when,constructing,views;override,public,void,set,bean,name,nullable,string,bean,name,this,bean,name,bean,name
AbstractView -> @Override 	public void setBeanName(@Nullable String beanName);1530793633;Set the view's name. Helpful for traceability._<p>Framework code must call this when constructing views.;@Override_	public void setBeanName(@Nullable String beanName) {_		this.beanName = beanName__	};set,the,view,s,name,helpful,for,traceability,p,framework,code,must,call,this,when,constructing,views;override,public,void,set,bean,name,nullable,string,bean,name,this,bean,name,bean,name
AbstractView -> public String getRequestContextAttribute();1485986572;Return the name of the RequestContext attribute, if any.;public String getRequestContextAttribute() {_		return this.requestContextAttribute__	};return,the,name,of,the,request,context,attribute,if,any;public,string,get,request,context,attribute,return,this,request,context,attribute
AbstractView -> public String getRequestContextAttribute();1486720600;Return the name of the RequestContext attribute, if any.;public String getRequestContextAttribute() {_		return this.requestContextAttribute__	};return,the,name,of,the,request,context,attribute,if,any;public,string,get,request,context,attribute,return,this,request,context,attribute
AbstractView -> public String getRequestContextAttribute();1490903325;Return the name of the RequestContext attribute, if any.;public String getRequestContextAttribute() {_		return this.requestContextAttribute__	};return,the,name,of,the,request,context,attribute,if,any;public,string,get,request,context,attribute,return,this,request,context,attribute
AbstractView -> public String getRequestContextAttribute();1491927184;Return the name of the RequestContext attribute, if any.;public String getRequestContextAttribute() {_		return this.requestContextAttribute__	};return,the,name,of,the,request,context,attribute,if,any;public,string,get,request,context,attribute,return,this,request,context,attribute
AbstractView -> protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes, 			@Nullable MediaType contentType, ServerWebExchange exchange)_;1496837955;Subclasses must implement this method to actually render the view._@param renderAttributes combined output Map (never {@code null}),_with dynamic values taking precedence over static attributes_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange current exchange  @return {@code Mono} to represent when and if rendering succeeds;protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes,_			@Nullable MediaType contentType, ServerWebExchange exchange)_;subclasses,must,implement,this,method,to,actually,render,the,view,param,render,attributes,combined,output,map,never,code,null,with,dynamic,values,taking,precedence,over,static,attributes,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;protected,abstract,mono,void,render,internal,map,string,object,render,attributes,nullable,media,type,content,type,server,web,exchange,exchange
AbstractView -> protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes, 			@Nullable MediaType contentType, ServerWebExchange exchange)_;1498780456;Subclasses must implement this method to actually render the view._@param renderAttributes combined output Map (never {@code null}),_with dynamic values taking precedence over static attributes_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange current exchange  @return {@code Mono} to represent when and if rendering succeeds;protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes,_			@Nullable MediaType contentType, ServerWebExchange exchange)_;subclasses,must,implement,this,method,to,actually,render,the,view,param,render,attributes,combined,output,map,never,code,null,with,dynamic,values,taking,precedence,over,static,attributes,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;protected,abstract,mono,void,render,internal,map,string,object,render,attributes,nullable,media,type,content,type,server,web,exchange,exchange
AbstractView -> protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes, 			@Nullable MediaType contentType, ServerWebExchange exchange)_;1500448076;Subclasses must implement this method to actually render the view._@param renderAttributes combined output Map (never {@code null}),_with dynamic values taking precedence over static attributes_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange current exchange  @return {@code Mono} to represent when and if rendering succeeds;protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes,_			@Nullable MediaType contentType, ServerWebExchange exchange)_;subclasses,must,implement,this,method,to,actually,render,the,view,param,render,attributes,combined,output,map,never,code,null,with,dynamic,values,taking,precedence,over,static,attributes,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;protected,abstract,mono,void,render,internal,map,string,object,render,attributes,nullable,media,type,content,type,server,web,exchange,exchange
AbstractView -> protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes, 			@Nullable MediaType contentType, ServerWebExchange exchange)_;1503338048;Subclasses must implement this method to actually render the view._@param renderAttributes combined output Map (never {@code null}),_with dynamic values taking precedence over static attributes_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange current exchange  @return {@code Mono} to represent when and if rendering succeeds;protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes,_			@Nullable MediaType contentType, ServerWebExchange exchange)_;subclasses,must,implement,this,method,to,actually,render,the,view,param,render,attributes,combined,output,map,never,code,null,with,dynamic,values,taking,precedence,over,static,attributes,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;protected,abstract,mono,void,render,internal,map,string,object,render,attributes,nullable,media,type,content,type,server,web,exchange,exchange
AbstractView -> protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes, 			@Nullable MediaType contentType, ServerWebExchange exchange)_;1504993259;Subclasses must implement this method to actually render the view._@param renderAttributes combined output Map (never {@code null}),_with dynamic values taking precedence over static attributes_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange current exchange  @return {@code Mono} to represent when_and if rendering succeeds;protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes,_			@Nullable MediaType contentType, ServerWebExchange exchange)_;subclasses,must,implement,this,method,to,actually,render,the,view,param,render,attributes,combined,output,map,never,code,null,with,dynamic,values,taking,precedence,over,static,attributes,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;protected,abstract,mono,void,render,internal,map,string,object,render,attributes,nullable,media,type,content,type,server,web,exchange,exchange
AbstractView -> protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes, 			@Nullable MediaType contentType, ServerWebExchange exchange)_;1511215342;Subclasses must implement this method to actually render the view._@param renderAttributes combined output Map (never {@code null}),_with dynamic values taking precedence over static attributes_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange current exchange  @return {@code Mono} to represent when_and if rendering succeeds;protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes,_			@Nullable MediaType contentType, ServerWebExchange exchange)_;subclasses,must,implement,this,method,to,actually,render,the,view,param,render,attributes,combined,output,map,never,code,null,with,dynamic,values,taking,precedence,over,static,attributes,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;protected,abstract,mono,void,render,internal,map,string,object,render,attributes,nullable,media,type,content,type,server,web,exchange,exchange
AbstractView -> protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes, 			@Nullable MediaType contentType, ServerWebExchange exchange)_;1522359218;Subclasses must implement this method to actually render the view._@param renderAttributes combined output Map (never {@code null}),_with dynamic values taking precedence over static attributes_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange current exchange  @return {@code Mono} to represent when_and if rendering succeeds;protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes,_			@Nullable MediaType contentType, ServerWebExchange exchange)_;subclasses,must,implement,this,method,to,actually,render,the,view,param,render,attributes,combined,output,map,never,code,null,with,dynamic,values,taking,precedence,over,static,attributes,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;protected,abstract,mono,void,render,internal,map,string,object,render,attributes,nullable,media,type,content,type,server,web,exchange,exchange
AbstractView -> protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes, 			@Nullable MediaType contentType, ServerWebExchange exchange)_;1522360217;Subclasses must implement this method to actually render the view._@param renderAttributes combined output Map (never {@code null}),_with dynamic values taking precedence over static attributes_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange current exchange  @return {@code Mono} to represent when_and if rendering succeeds;protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes,_			@Nullable MediaType contentType, ServerWebExchange exchange)_;subclasses,must,implement,this,method,to,actually,render,the,view,param,render,attributes,combined,output,map,never,code,null,with,dynamic,values,taking,precedence,over,static,attributes,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;protected,abstract,mono,void,render,internal,map,string,object,render,attributes,nullable,media,type,content,type,server,web,exchange,exchange
AbstractView -> protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes, 			@Nullable MediaType contentType, ServerWebExchange exchange)_;1529721864;Subclasses must implement this method to actually render the view._@param renderAttributes combined output Map (never {@code null}),_with dynamic values taking precedence over static attributes_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange current exchange  @return {@code Mono} to represent when_and if rendering succeeds;protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes,_			@Nullable MediaType contentType, ServerWebExchange exchange)_;subclasses,must,implement,this,method,to,actually,render,the,view,param,render,attributes,combined,output,map,never,code,null,with,dynamic,values,taking,precedence,over,static,attributes,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;protected,abstract,mono,void,render,internal,map,string,object,render,attributes,nullable,media,type,content,type,server,web,exchange,exchange
AbstractView -> protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes, 			@Nullable MediaType contentType, ServerWebExchange exchange)_;1530174524;Subclasses must implement this method to actually render the view._@param renderAttributes combined output Map (never {@code null}),_with dynamic values taking precedence over static attributes_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange current exchange  @return {@code Mono} to represent when_and if rendering succeeds;protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes,_			@Nullable MediaType contentType, ServerWebExchange exchange)_;subclasses,must,implement,this,method,to,actually,render,the,view,param,render,attributes,combined,output,map,never,code,null,with,dynamic,values,taking,precedence,over,static,attributes,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;protected,abstract,mono,void,render,internal,map,string,object,render,attributes,nullable,media,type,content,type,server,web,exchange,exchange
AbstractView -> protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes, 			@Nullable MediaType contentType, ServerWebExchange exchange)_;1530294255;Subclasses must implement this method to actually render the view._@param renderAttributes combined output Map (never {@code null}),_with dynamic values taking precedence over static attributes_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange current exchange  @return {@code Mono} to represent when_and if rendering succeeds;protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes,_			@Nullable MediaType contentType, ServerWebExchange exchange)_;subclasses,must,implement,this,method,to,actually,render,the,view,param,render,attributes,combined,output,map,never,code,null,with,dynamic,values,taking,precedence,over,static,attributes,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;protected,abstract,mono,void,render,internal,map,string,object,render,attributes,nullable,media,type,content,type,server,web,exchange,exchange
AbstractView -> protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes, 			@Nullable MediaType contentType, ServerWebExchange exchange)_;1530793633;Subclasses must implement this method to actually render the view._@param renderAttributes combined output Map (never {@code null}),_with dynamic values taking precedence over static attributes_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange current exchange  @return {@code Mono} to represent when_and if rendering succeeds;protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes,_			@Nullable MediaType contentType, ServerWebExchange exchange)_;subclasses,must,implement,this,method,to,actually,render,the,view,param,render,attributes,combined,output,map,never,code,null,with,dynamic,values,taking,precedence,over,static,attributes,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;protected,abstract,mono,void,render,internal,map,string,object,render,attributes,nullable,media,type,content,type,server,web,exchange,exchange
AbstractView -> public void setRequestContextAttribute(String requestContextAttribute);1485986572;Set the name of the RequestContext attribute for this view._Default is none.;public void setRequestContextAttribute(String requestContextAttribute) {_		this.requestContextAttribute = requestContextAttribute__	};set,the,name,of,the,request,context,attribute,for,this,view,default,is,none;public,void,set,request,context,attribute,string,request,context,attribute,this,request,context,attribute,request,context,attribute
AbstractView -> public void setRequestContextAttribute(String requestContextAttribute);1486720600;Set the name of the RequestContext attribute for this view._Default is none.;public void setRequestContextAttribute(String requestContextAttribute) {_		this.requestContextAttribute = requestContextAttribute__	};set,the,name,of,the,request,context,attribute,for,this,view,default,is,none;public,void,set,request,context,attribute,string,request,context,attribute,this,request,context,attribute,request,context,attribute
AbstractView -> public void setRequestContextAttribute(String requestContextAttribute);1490903325;Set the name of the RequestContext attribute for this view._Default is none.;public void setRequestContextAttribute(String requestContextAttribute) {_		this.requestContextAttribute = requestContextAttribute__	};set,the,name,of,the,request,context,attribute,for,this,view,default,is,none;public,void,set,request,context,attribute,string,request,context,attribute,this,request,context,attribute,request,context,attribute
AbstractView -> public void setRequestContextAttribute(String requestContextAttribute);1491927184;Set the name of the RequestContext attribute for this view._Default is none.;public void setRequestContextAttribute(String requestContextAttribute) {_		this.requestContextAttribute = requestContextAttribute__	};set,the,name,of,the,request,context,attribute,for,this,view,default,is,none;public,void,set,request,context,attribute,string,request,context,attribute,this,request,context,attribute,request,context,attribute
AbstractView -> public void setRequestContextAttribute(String requestContextAttribute);1495868221;Set the name of the RequestContext attribute for this view._Default is none.;public void setRequestContextAttribute(String requestContextAttribute) {_		this.requestContextAttribute = requestContextAttribute__	};set,the,name,of,the,request,context,attribute,for,this,view,default,is,none;public,void,set,request,context,attribute,string,request,context,attribute,this,request,context,attribute,request,context,attribute
AbstractView -> public void setRequestContextAttribute(String requestContextAttribute);1496242568;Set the name of the RequestContext attribute for this view._Default is none.;public void setRequestContextAttribute(String requestContextAttribute) {_		this.requestContextAttribute = requestContextAttribute__	};set,the,name,of,the,request,context,attribute,for,this,view,default,is,none;public,void,set,request,context,attribute,string,request,context,attribute,this,request,context,attribute,request,context,attribute
AbstractView -> protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes, 			MediaType contentType, ServerWebExchange exchange)_;1485986572;Subclasses must implement this method to actually render the view._@param renderAttributes combined output Map (never {@code null}),_with dynamic values taking precedence over static attributes_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange current exchange  @return {@code Mono} to represent when and if rendering succeeds;protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes,_			MediaType contentType, ServerWebExchange exchange)_;subclasses,must,implement,this,method,to,actually,render,the,view,param,render,attributes,combined,output,map,never,code,null,with,dynamic,values,taking,precedence,over,static,attributes,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;protected,abstract,mono,void,render,internal,map,string,object,render,attributes,media,type,content,type,server,web,exchange,exchange
AbstractView -> protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes, 			MediaType contentType, ServerWebExchange exchange)_;1486720600;Subclasses must implement this method to actually render the view._@param renderAttributes combined output Map (never {@code null}),_with dynamic values taking precedence over static attributes_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange current exchange  @return {@code Mono} to represent when and if rendering succeeds;protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes,_			MediaType contentType, ServerWebExchange exchange)_;subclasses,must,implement,this,method,to,actually,render,the,view,param,render,attributes,combined,output,map,never,code,null,with,dynamic,values,taking,precedence,over,static,attributes,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;protected,abstract,mono,void,render,internal,map,string,object,render,attributes,media,type,content,type,server,web,exchange,exchange
AbstractView -> protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes, 			MediaType contentType, ServerWebExchange exchange)_;1490903325;Subclasses must implement this method to actually render the view._@param renderAttributes combined output Map (never {@code null}),_with dynamic values taking precedence over static attributes_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange current exchange  @return {@code Mono} to represent when and if rendering succeeds;protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes,_			MediaType contentType, ServerWebExchange exchange)_;subclasses,must,implement,this,method,to,actually,render,the,view,param,render,attributes,combined,output,map,never,code,null,with,dynamic,values,taking,precedence,over,static,attributes,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;protected,abstract,mono,void,render,internal,map,string,object,render,attributes,media,type,content,type,server,web,exchange,exchange
AbstractView -> protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes, 			MediaType contentType, ServerWebExchange exchange)_;1491927184;Subclasses must implement this method to actually render the view._@param renderAttributes combined output Map (never {@code null}),_with dynamic values taking precedence over static attributes_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange current exchange  @return {@code Mono} to represent when and if rendering succeeds;protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes,_			MediaType contentType, ServerWebExchange exchange)_;subclasses,must,implement,this,method,to,actually,render,the,view,param,render,attributes,combined,output,map,never,code,null,with,dynamic,values,taking,precedence,over,static,attributes,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;protected,abstract,mono,void,render,internal,map,string,object,render,attributes,media,type,content,type,server,web,exchange,exchange
AbstractView -> protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes, 			MediaType contentType, ServerWebExchange exchange)_;1495868221;Subclasses must implement this method to actually render the view._@param renderAttributes combined output Map (never {@code null}),_with dynamic values taking precedence over static attributes_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange current exchange  @return {@code Mono} to represent when and if rendering succeeds;protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes,_			MediaType contentType, ServerWebExchange exchange)_;subclasses,must,implement,this,method,to,actually,render,the,view,param,render,attributes,combined,output,map,never,code,null,with,dynamic,values,taking,precedence,over,static,attributes,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;protected,abstract,mono,void,render,internal,map,string,object,render,attributes,media,type,content,type,server,web,exchange,exchange
AbstractView -> protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes, 			MediaType contentType, ServerWebExchange exchange)_;1496242568;Subclasses must implement this method to actually render the view._@param renderAttributes combined output Map (never {@code null}),_with dynamic values taking precedence over static attributes_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange current exchange  @return {@code Mono} to represent when and if rendering succeeds;protected abstract Mono<Void> renderInternal(Map<String, Object> renderAttributes,_			MediaType contentType, ServerWebExchange exchange)_;subclasses,must,implement,this,method,to,actually,render,the,view,param,render,attributes,combined,output,map,never,code,null,with,dynamic,values,taking,precedence,over,static,attributes,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;protected,abstract,mono,void,render,internal,map,string,object,render,attributes,media,type,content,type,server,web,exchange,exchange
AbstractView -> protected Mono<Void> resolveAsyncAttributes(Map<String, Object> model);1490903325;By default, resolve async attributes supported by the {@link ReactiveAdapterRegistry} to their blocking counterparts._<p>View implementations capable of taking advantage of reactive types can override this method if needed._@return {@code Mono} to represent when the async attributes have been resolved;protected Mono<Void> resolveAsyncAttributes(Map<String, Object> model) {__		List<String> names = new ArrayList<>()__		List<Mono<?>> valueMonos = new ArrayList<>()___		for (Map.Entry<String, ?> entry : model.entrySet()) {_			Object value =  entry.getValue()__			if (value == null) {_				continue__			}_			ReactiveAdapter adapter = this.adapterRegistry.getAdapter(null, value)__			if (adapter != null) {_				names.add(entry.getKey())__				if (adapter.isMultiValue()) {_					Flux<Object> fluxValue = Flux.from(adapter.toPublisher(value))__					valueMonos.add(fluxValue.collectList().defaultIfEmpty(Collections.emptyList()))__				}_				else {_					Mono<Object> monoValue = Mono.from(adapter.toPublisher(value))__					valueMonos.add(monoValue.defaultIfEmpty(NO_VALUE))__				}_			}_		}__		if (names.isEmpty()) {_			return Mono.empty()__		}__		return Mono.when(valueMonos,_				values -> {_					for (int i=0_ i < values.length_ i++) {_						if (values[i] != NO_VALUE) {_							model.put(names.get(i), values[i])__						}_						else {_							model.remove(names.get(i))__						}_					}_					return NO_VALUE__				})_				.then()__	};by,default,resolve,async,attributes,supported,by,the,link,reactive,adapter,registry,to,their,blocking,counterparts,p,view,implementations,capable,of,taking,advantage,of,reactive,types,can,override,this,method,if,needed,return,code,mono,to,represent,when,the,async,attributes,have,been,resolved;protected,mono,void,resolve,async,attributes,map,string,object,model,list,string,names,new,array,list,list,mono,value,monos,new,array,list,for,map,entry,string,entry,model,entry,set,object,value,entry,get,value,if,value,null,continue,reactive,adapter,adapter,this,adapter,registry,get,adapter,null,value,if,adapter,null,names,add,entry,get,key,if,adapter,is,multi,value,flux,object,flux,value,flux,from,adapter,to,publisher,value,value,monos,add,flux,value,collect,list,default,if,empty,collections,empty,list,else,mono,object,mono,value,mono,from,adapter,to,publisher,value,value,monos,add,mono,value,default,if,empty,if,names,is,empty,return,mono,empty,return,mono,when,value,monos,values,for,int,i,0,i,values,length,i,if,values,i,model,put,names,get,i,values,i,else,model,remove,names,get,i,return,then
AbstractView -> protected Mono<Void> resolveAsyncAttributes(Map<String, Object> model);1491927184;By default, resolve async attributes supported by the {@link ReactiveAdapterRegistry} to their blocking counterparts._<p>View implementations capable of taking advantage of reactive types can override this method if needed._@return {@code Mono} to represent when the async attributes have been resolved;protected Mono<Void> resolveAsyncAttributes(Map<String, Object> model) {__		List<String> names = new ArrayList<>()__		List<Mono<?>> valueMonos = new ArrayList<>()___		for (Map.Entry<String, ?> entry : model.entrySet()) {_			Object value =  entry.getValue()__			if (value == null) {_				continue__			}_			ReactiveAdapter adapter = this.adapterRegistry.getAdapter(null, value)__			if (adapter != null) {_				names.add(entry.getKey())__				if (adapter.isMultiValue()) {_					Flux<Object> fluxValue = Flux.from(adapter.toPublisher(value))__					valueMonos.add(fluxValue.collectList().defaultIfEmpty(Collections.emptyList()))__				}_				else {_					Mono<Object> monoValue = Mono.from(adapter.toPublisher(value))__					valueMonos.add(monoValue.defaultIfEmpty(NO_VALUE))__				}_			}_		}__		if (names.isEmpty()) {_			return Mono.empty()__		}__		return Mono.when(valueMonos,_				values -> {_					for (int i=0_ i < values.length_ i++) {_						if (values[i] != NO_VALUE) {_							model.put(names.get(i), values[i])__						}_						else {_							model.remove(names.get(i))__						}_					}_					return NO_VALUE__				})_				.then()__	};by,default,resolve,async,attributes,supported,by,the,link,reactive,adapter,registry,to,their,blocking,counterparts,p,view,implementations,capable,of,taking,advantage,of,reactive,types,can,override,this,method,if,needed,return,code,mono,to,represent,when,the,async,attributes,have,been,resolved;protected,mono,void,resolve,async,attributes,map,string,object,model,list,string,names,new,array,list,list,mono,value,monos,new,array,list,for,map,entry,string,entry,model,entry,set,object,value,entry,get,value,if,value,null,continue,reactive,adapter,adapter,this,adapter,registry,get,adapter,null,value,if,adapter,null,names,add,entry,get,key,if,adapter,is,multi,value,flux,object,flux,value,flux,from,adapter,to,publisher,value,value,monos,add,flux,value,collect,list,default,if,empty,collections,empty,list,else,mono,object,mono,value,mono,from,adapter,to,publisher,value,value,monos,add,mono,value,default,if,empty,if,names,is,empty,return,mono,empty,return,mono,when,value,monos,values,for,int,i,0,i,values,length,i,if,values,i,model,put,names,get,i,values,i,else,model,remove,names,get,i,return,then
AbstractView -> protected Mono<Void> resolveAsyncAttributes(Map<String, Object> model);1495868221;By default, resolve async attributes supported by the {@link ReactiveAdapterRegistry} to their blocking counterparts._<p>View implementations capable of taking advantage of reactive types can override this method if needed._@return {@code Mono} to represent when the async attributes have been resolved;protected Mono<Void> resolveAsyncAttributes(Map<String, Object> model) {__		List<String> names = new ArrayList<>()__		List<Mono<?>> valueMonos = new ArrayList<>()___		for (Map.Entry<String, ?> entry : model.entrySet()) {_			Object value =  entry.getValue()__			if (value == null) {_				continue__			}_			ReactiveAdapter adapter = this.adapterRegistry.getAdapter(null, value)__			if (adapter != null) {_				names.add(entry.getKey())__				if (adapter.isMultiValue()) {_					Flux<Object> fluxValue = Flux.from(adapter.toPublisher(value))__					valueMonos.add(fluxValue.collectList().defaultIfEmpty(Collections.emptyList()))__				}_				else {_					Mono<Object> monoValue = Mono.from(adapter.toPublisher(value))__					valueMonos.add(monoValue.defaultIfEmpty(NO_VALUE))__				}_			}_		}__		if (names.isEmpty()) {_			return Mono.empty()__		}__		return Mono.when(valueMonos,_				values -> {_					for (int i=0_ i < values.length_ i++) {_						if (values[i] != NO_VALUE) {_							model.put(names.get(i), values[i])__						}_						else {_							model.remove(names.get(i))__						}_					}_					return NO_VALUE__				})_				.then()__	};by,default,resolve,async,attributes,supported,by,the,link,reactive,adapter,registry,to,their,blocking,counterparts,p,view,implementations,capable,of,taking,advantage,of,reactive,types,can,override,this,method,if,needed,return,code,mono,to,represent,when,the,async,attributes,have,been,resolved;protected,mono,void,resolve,async,attributes,map,string,object,model,list,string,names,new,array,list,list,mono,value,monos,new,array,list,for,map,entry,string,entry,model,entry,set,object,value,entry,get,value,if,value,null,continue,reactive,adapter,adapter,this,adapter,registry,get,adapter,null,value,if,adapter,null,names,add,entry,get,key,if,adapter,is,multi,value,flux,object,flux,value,flux,from,adapter,to,publisher,value,value,monos,add,flux,value,collect,list,default,if,empty,collections,empty,list,else,mono,object,mono,value,mono,from,adapter,to,publisher,value,value,monos,add,mono,value,default,if,empty,if,names,is,empty,return,mono,empty,return,mono,when,value,monos,values,for,int,i,0,i,values,length,i,if,values,i,model,put,names,get,i,values,i,else,model,remove,names,get,i,return,then
AbstractView -> protected Mono<Void> resolveAsyncAttributes(Map<String, Object> model);1496242568;By default, resolve async attributes supported by the {@link ReactiveAdapterRegistry} to their blocking counterparts._<p>View implementations capable of taking advantage of reactive types can override this method if needed._@return {@code Mono} to represent when the async attributes have been resolved;protected Mono<Void> resolveAsyncAttributes(Map<String, Object> model) {__		List<String> names = new ArrayList<>()__		List<Mono<?>> valueMonos = new ArrayList<>()___		for (Map.Entry<String, ?> entry : model.entrySet()) {_			Object value =  entry.getValue()__			if (value == null) {_				continue__			}_			ReactiveAdapter adapter = this.adapterRegistry.getAdapter(null, value)__			if (adapter != null) {_				names.add(entry.getKey())__				if (adapter.isMultiValue()) {_					Flux<Object> fluxValue = Flux.from(adapter.toPublisher(value))__					valueMonos.add(fluxValue.collectList().defaultIfEmpty(Collections.emptyList()))__				}_				else {_					Mono<Object> monoValue = Mono.from(adapter.toPublisher(value))__					valueMonos.add(monoValue.defaultIfEmpty(NO_VALUE))__				}_			}_		}__		if (names.isEmpty()) {_			return Mono.empty()__		}__		return Mono.when(valueMonos,_				values -> {_					for (int i=0_ i < values.length_ i++) {_						if (values[i] != NO_VALUE) {_							model.put(names.get(i), values[i])__						}_						else {_							model.remove(names.get(i))__						}_					}_					return NO_VALUE__				})_				.then()__	};by,default,resolve,async,attributes,supported,by,the,link,reactive,adapter,registry,to,their,blocking,counterparts,p,view,implementations,capable,of,taking,advantage,of,reactive,types,can,override,this,method,if,needed,return,code,mono,to,represent,when,the,async,attributes,have,been,resolved;protected,mono,void,resolve,async,attributes,map,string,object,model,list,string,names,new,array,list,list,mono,value,monos,new,array,list,for,map,entry,string,entry,model,entry,set,object,value,entry,get,value,if,value,null,continue,reactive,adapter,adapter,this,adapter,registry,get,adapter,null,value,if,adapter,null,names,add,entry,get,key,if,adapter,is,multi,value,flux,object,flux,value,flux,from,adapter,to,publisher,value,value,monos,add,flux,value,collect,list,default,if,empty,collections,empty,list,else,mono,object,mono,value,mono,from,adapter,to,publisher,value,value,monos,add,mono,value,default,if,empty,if,names,is,empty,return,mono,empty,return,mono,when,value,monos,values,for,int,i,0,i,values,length,i,if,values,i,model,put,names,get,i,values,i,else,model,remove,names,get,i,return,then
AbstractView -> protected Mono<Void> resolveAsyncAttributes(Map<String, Object> model);1496837955;By default, resolve async attributes supported by the {@link ReactiveAdapterRegistry} to their blocking counterparts._<p>View implementations capable of taking advantage of reactive types can override this method if needed._@return {@code Mono} to represent when the async attributes have been resolved;protected Mono<Void> resolveAsyncAttributes(Map<String, Object> model) {__		List<String> names = new ArrayList<>()__		List<Mono<?>> valueMonos = new ArrayList<>()___		for (Map.Entry<String, ?> entry : model.entrySet()) {_			Object value =  entry.getValue()__			if (value == null) {_				continue__			}_			ReactiveAdapter adapter = this.adapterRegistry.getAdapter(null, value)__			if (adapter != null) {_				names.add(entry.getKey())__				if (adapter.isMultiValue()) {_					Flux<Object> fluxValue = Flux.from(adapter.toPublisher(value))__					valueMonos.add(fluxValue.collectList().defaultIfEmpty(Collections.emptyList()))__				}_				else {_					Mono<Object> monoValue = Mono.from(adapter.toPublisher(value))__					valueMonos.add(monoValue.defaultIfEmpty(NO_VALUE))__				}_			}_		}__		if (names.isEmpty()) {_			return Mono.empty()__		}__		return Mono.when(valueMonos,_				values -> {_					for (int i=0_ i < values.length_ i++) {_						if (values[i] != NO_VALUE) {_							model.put(names.get(i), values[i])__						}_						else {_							model.remove(names.get(i))__						}_					}_					return NO_VALUE__				})_				.then()__	};by,default,resolve,async,attributes,supported,by,the,link,reactive,adapter,registry,to,their,blocking,counterparts,p,view,implementations,capable,of,taking,advantage,of,reactive,types,can,override,this,method,if,needed,return,code,mono,to,represent,when,the,async,attributes,have,been,resolved;protected,mono,void,resolve,async,attributes,map,string,object,model,list,string,names,new,array,list,list,mono,value,monos,new,array,list,for,map,entry,string,entry,model,entry,set,object,value,entry,get,value,if,value,null,continue,reactive,adapter,adapter,this,adapter,registry,get,adapter,null,value,if,adapter,null,names,add,entry,get,key,if,adapter,is,multi,value,flux,object,flux,value,flux,from,adapter,to,publisher,value,value,monos,add,flux,value,collect,list,default,if,empty,collections,empty,list,else,mono,object,mono,value,mono,from,adapter,to,publisher,value,value,monos,add,mono,value,default,if,empty,if,names,is,empty,return,mono,empty,return,mono,when,value,monos,values,for,int,i,0,i,values,length,i,if,values,i,model,put,names,get,i,values,i,else,model,remove,names,get,i,return,then
AbstractView -> protected Mono<Void> resolveAsyncAttributes(Map<String, Object> model);1498780456;By default, resolve async attributes supported by the {@link ReactiveAdapterRegistry} to their blocking counterparts._<p>View implementations capable of taking advantage of reactive types can override this method if needed._@return {@code Mono} to represent when the async attributes have been resolved;protected Mono<Void> resolveAsyncAttributes(Map<String, Object> model) {__		List<String> names = new ArrayList<>()__		List<Mono<?>> valueMonos = new ArrayList<>()___		for (Map.Entry<String, ?> entry : model.entrySet()) {_			Object value =  entry.getValue()__			if (value == null) {_				continue__			}_			ReactiveAdapter adapter = this.adapterRegistry.getAdapter(null, value)__			if (adapter != null) {_				names.add(entry.getKey())__				if (adapter.isMultiValue()) {_					Flux<Object> fluxValue = Flux.from(adapter.toPublisher(value))__					valueMonos.add(fluxValue.collectList().defaultIfEmpty(Collections.emptyList()))__				}_				else {_					Mono<Object> monoValue = Mono.from(adapter.toPublisher(value))__					valueMonos.add(monoValue.defaultIfEmpty(NO_VALUE))__				}_			}_		}__		if (names.isEmpty()) {_			return Mono.empty()__		}__		return Mono.when(valueMonos,_				values -> {_					for (int i=0_ i < values.length_ i++) {_						if (values[i] != NO_VALUE) {_							model.put(names.get(i), values[i])__						}_						else {_							model.remove(names.get(i))__						}_					}_					return NO_VALUE__				})_				.then()__	};by,default,resolve,async,attributes,supported,by,the,link,reactive,adapter,registry,to,their,blocking,counterparts,p,view,implementations,capable,of,taking,advantage,of,reactive,types,can,override,this,method,if,needed,return,code,mono,to,represent,when,the,async,attributes,have,been,resolved;protected,mono,void,resolve,async,attributes,map,string,object,model,list,string,names,new,array,list,list,mono,value,monos,new,array,list,for,map,entry,string,entry,model,entry,set,object,value,entry,get,value,if,value,null,continue,reactive,adapter,adapter,this,adapter,registry,get,adapter,null,value,if,adapter,null,names,add,entry,get,key,if,adapter,is,multi,value,flux,object,flux,value,flux,from,adapter,to,publisher,value,value,monos,add,flux,value,collect,list,default,if,empty,collections,empty,list,else,mono,object,mono,value,mono,from,adapter,to,publisher,value,value,monos,add,mono,value,default,if,empty,if,names,is,empty,return,mono,empty,return,mono,when,value,monos,values,for,int,i,0,i,values,length,i,if,values,i,model,put,names,get,i,values,i,else,model,remove,names,get,i,return,then
AbstractView -> protected Mono<Void> resolveAsyncAttributes(Map<String, Object> model);1500448076;By default, resolve async attributes supported by the {@link ReactiveAdapterRegistry} to their blocking counterparts._<p>View implementations capable of taking advantage of reactive types can override this method if needed._@return {@code Mono} to represent when the async attributes have been resolved;protected Mono<Void> resolveAsyncAttributes(Map<String, Object> model) {__		List<String> names = new ArrayList<>()__		List<Mono<?>> valueMonos = new ArrayList<>()___		for (Map.Entry<String, ?> entry : model.entrySet()) {_			Object value =  entry.getValue()__			if (value == null) {_				continue__			}_			ReactiveAdapter adapter = this.adapterRegistry.getAdapter(null, value)__			if (adapter != null) {_				names.add(entry.getKey())__				if (adapter.isMultiValue()) {_					Flux<Object> fluxValue = Flux.from(adapter.toPublisher(value))__					valueMonos.add(fluxValue.collectList().defaultIfEmpty(Collections.emptyList()))__				}_				else {_					Mono<Object> monoValue = Mono.from(adapter.toPublisher(value))__					valueMonos.add(monoValue.defaultIfEmpty(NO_VALUE))__				}_			}_		}__		if (names.isEmpty()) {_			return Mono.empty()__		}__		return Mono.when(valueMonos,_				values -> {_					for (int i=0_ i < values.length_ i++) {_						if (values[i] != NO_VALUE) {_							model.put(names.get(i), values[i])__						}_						else {_							model.remove(names.get(i))__						}_					}_					return NO_VALUE__				})_				.then()__	};by,default,resolve,async,attributes,supported,by,the,link,reactive,adapter,registry,to,their,blocking,counterparts,p,view,implementations,capable,of,taking,advantage,of,reactive,types,can,override,this,method,if,needed,return,code,mono,to,represent,when,the,async,attributes,have,been,resolved;protected,mono,void,resolve,async,attributes,map,string,object,model,list,string,names,new,array,list,list,mono,value,monos,new,array,list,for,map,entry,string,entry,model,entry,set,object,value,entry,get,value,if,value,null,continue,reactive,adapter,adapter,this,adapter,registry,get,adapter,null,value,if,adapter,null,names,add,entry,get,key,if,adapter,is,multi,value,flux,object,flux,value,flux,from,adapter,to,publisher,value,value,monos,add,flux,value,collect,list,default,if,empty,collections,empty,list,else,mono,object,mono,value,mono,from,adapter,to,publisher,value,value,monos,add,mono,value,default,if,empty,if,names,is,empty,return,mono,empty,return,mono,when,value,monos,values,for,int,i,0,i,values,length,i,if,values,i,model,put,names,get,i,values,i,else,model,remove,names,get,i,return,then
AbstractView -> protected Mono<Void> resolveAsyncAttributes(Map<String, Object> model);1503338048;By default, resolve async attributes supported by the {@link ReactiveAdapterRegistry} to their blocking counterparts._<p>View implementations capable of taking advantage of reactive types can override this method if needed._@return {@code Mono} to represent when the async attributes have been resolved;protected Mono<Void> resolveAsyncAttributes(Map<String, Object> model) {__		List<String> names = new ArrayList<>()__		List<Mono<?>> valueMonos = new ArrayList<>()___		for (Map.Entry<String, ?> entry : model.entrySet()) {_			Object value =  entry.getValue()__			if (value == null) {_				continue__			}_			ReactiveAdapter adapter = this.adapterRegistry.getAdapter(null, value)__			if (adapter != null) {_				names.add(entry.getKey())__				if (adapter.isMultiValue()) {_					Flux<Object> fluxValue = Flux.from(adapter.toPublisher(value))__					valueMonos.add(fluxValue.collectList().defaultIfEmpty(Collections.emptyList()))__				}_				else {_					Mono<Object> monoValue = Mono.from(adapter.toPublisher(value))__					valueMonos.add(monoValue.defaultIfEmpty(NO_VALUE))__				}_			}_		}__		if (names.isEmpty()) {_			return Mono.empty()__		}__		return Mono.zip(valueMonos,_				values -> {_					for (int i=0_ i < values.length_ i++) {_						if (values[i] != NO_VALUE) {_							model.put(names.get(i), values[i])__						}_						else {_							model.remove(names.get(i))__						}_					}_					return NO_VALUE__				})_				.then()__	};by,default,resolve,async,attributes,supported,by,the,link,reactive,adapter,registry,to,their,blocking,counterparts,p,view,implementations,capable,of,taking,advantage,of,reactive,types,can,override,this,method,if,needed,return,code,mono,to,represent,when,the,async,attributes,have,been,resolved;protected,mono,void,resolve,async,attributes,map,string,object,model,list,string,names,new,array,list,list,mono,value,monos,new,array,list,for,map,entry,string,entry,model,entry,set,object,value,entry,get,value,if,value,null,continue,reactive,adapter,adapter,this,adapter,registry,get,adapter,null,value,if,adapter,null,names,add,entry,get,key,if,adapter,is,multi,value,flux,object,flux,value,flux,from,adapter,to,publisher,value,value,monos,add,flux,value,collect,list,default,if,empty,collections,empty,list,else,mono,object,mono,value,mono,from,adapter,to,publisher,value,value,monos,add,mono,value,default,if,empty,if,names,is,empty,return,mono,empty,return,mono,zip,value,monos,values,for,int,i,0,i,values,length,i,if,values,i,model,put,names,get,i,values,i,else,model,remove,names,get,i,return,then
AbstractView -> protected Mono<Void> resolveAsyncAttributes(Map<String, Object> model);1504993259;By default, resolve async attributes supported by the_{@link ReactiveAdapterRegistry} to their blocking counterparts._<p>View implementations capable of taking advantage of reactive types_can override this method if needed._@return {@code Mono} for the completion of async attributes resolution;protected Mono<Void> resolveAsyncAttributes(Map<String, Object> model) {__		List<String> names = new ArrayList<>()__		List<Mono<?>> valueMonos = new ArrayList<>()___		for (Map.Entry<String, ?> entry : model.entrySet()) {_			Object value =  entry.getValue()__			if (value == null) {_				continue__			}_			ReactiveAdapter adapter = this.adapterRegistry.getAdapter(null, value)__			if (adapter != null) {_				names.add(entry.getKey())__				if (adapter.isMultiValue()) {_					Flux<Object> fluxValue = Flux.from(adapter.toPublisher(value))__					valueMonos.add(fluxValue.collectList().defaultIfEmpty(Collections.emptyList()))__				}_				else {_					Mono<Object> monoValue = Mono.from(adapter.toPublisher(value))__					valueMonos.add(monoValue.defaultIfEmpty(NO_VALUE))__				}_			}_		}__		if (names.isEmpty()) {_			return Mono.empty()__		}__		return Mono.zip(valueMonos,_				values -> {_					for (int i=0_ i < values.length_ i++) {_						if (values[i] != NO_VALUE) {_							model.put(names.get(i), values[i])__						}_						else {_							model.remove(names.get(i))__						}_					}_					return NO_VALUE__				})_				.then()__	};by,default,resolve,async,attributes,supported,by,the,link,reactive,adapter,registry,to,their,blocking,counterparts,p,view,implementations,capable,of,taking,advantage,of,reactive,types,can,override,this,method,if,needed,return,code,mono,for,the,completion,of,async,attributes,resolution;protected,mono,void,resolve,async,attributes,map,string,object,model,list,string,names,new,array,list,list,mono,value,monos,new,array,list,for,map,entry,string,entry,model,entry,set,object,value,entry,get,value,if,value,null,continue,reactive,adapter,adapter,this,adapter,registry,get,adapter,null,value,if,adapter,null,names,add,entry,get,key,if,adapter,is,multi,value,flux,object,flux,value,flux,from,adapter,to,publisher,value,value,monos,add,flux,value,collect,list,default,if,empty,collections,empty,list,else,mono,object,mono,value,mono,from,adapter,to,publisher,value,value,monos,add,mono,value,default,if,empty,if,names,is,empty,return,mono,empty,return,mono,zip,value,monos,values,for,int,i,0,i,values,length,i,if,values,i,model,put,names,get,i,values,i,else,model,remove,names,get,i,return,then
AbstractView -> protected Mono<Void> resolveAsyncAttributes(Map<String, Object> model);1511215342;By default, resolve async attributes supported by the_{@link ReactiveAdapterRegistry} to their blocking counterparts._<p>View implementations capable of taking advantage of reactive types_can override this method if needed._@return {@code Mono} for the completion of async attributes resolution;protected Mono<Void> resolveAsyncAttributes(Map<String, Object> model) {__		List<String> names = new ArrayList<>()__		List<Mono<?>> valueMonos = new ArrayList<>()___		for (Map.Entry<String, ?> entry : model.entrySet()) {_			Object value =  entry.getValue()__			if (value == null) {_				continue__			}_			ReactiveAdapter adapter = this.adapterRegistry.getAdapter(null, value)__			if (adapter != null) {_				names.add(entry.getKey())__				if (adapter.isMultiValue()) {_					Flux<Object> fluxValue = Flux.from(adapter.toPublisher(value))__					valueMonos.add(fluxValue.collectList().defaultIfEmpty(Collections.emptyList()))__				}_				else {_					Mono<Object> monoValue = Mono.from(adapter.toPublisher(value))__					valueMonos.add(monoValue.defaultIfEmpty(NO_VALUE))__				}_			}_		}__		if (names.isEmpty()) {_			return Mono.empty()__		}__		return Mono.zip(valueMonos,_				values -> {_					for (int i=0_ i < values.length_ i++) {_						if (values[i] != NO_VALUE) {_							model.put(names.get(i), values[i])__						}_						else {_							model.remove(names.get(i))__						}_					}_					return NO_VALUE__				})_				.then()__	};by,default,resolve,async,attributes,supported,by,the,link,reactive,adapter,registry,to,their,blocking,counterparts,p,view,implementations,capable,of,taking,advantage,of,reactive,types,can,override,this,method,if,needed,return,code,mono,for,the,completion,of,async,attributes,resolution;protected,mono,void,resolve,async,attributes,map,string,object,model,list,string,names,new,array,list,list,mono,value,monos,new,array,list,for,map,entry,string,entry,model,entry,set,object,value,entry,get,value,if,value,null,continue,reactive,adapter,adapter,this,adapter,registry,get,adapter,null,value,if,adapter,null,names,add,entry,get,key,if,adapter,is,multi,value,flux,object,flux,value,flux,from,adapter,to,publisher,value,value,monos,add,flux,value,collect,list,default,if,empty,collections,empty,list,else,mono,object,mono,value,mono,from,adapter,to,publisher,value,value,monos,add,mono,value,default,if,empty,if,names,is,empty,return,mono,empty,return,mono,zip,value,monos,values,for,int,i,0,i,values,length,i,if,values,i,model,put,names,get,i,values,i,else,model,remove,names,get,i,return,then
AbstractView -> protected Mono<Void> resolveAsyncAttributes(Map<String, Object> model);1522359218;By default, resolve async attributes supported by the_{@link ReactiveAdapterRegistry} to their blocking counterparts._<p>View implementations capable of taking advantage of reactive types_can override this method if needed._@return {@code Mono} for the completion of async attributes resolution;protected Mono<Void> resolveAsyncAttributes(Map<String, Object> model) {__		List<String> names = new ArrayList<>()__		List<Mono<?>> valueMonos = new ArrayList<>()___		for (Map.Entry<String, ?> entry : model.entrySet()) {_			Object value =  entry.getValue()__			if (value == null) {_				continue__			}_			ReactiveAdapter adapter = this.adapterRegistry.getAdapter(null, value)__			if (adapter != null) {_				names.add(entry.getKey())__				if (adapter.isMultiValue()) {_					Flux<Object> fluxValue = Flux.from(adapter.toPublisher(value))__					valueMonos.add(fluxValue.collectList().defaultIfEmpty(Collections.emptyList()))__				}_				else {_					Mono<Object> monoValue = Mono.from(adapter.toPublisher(value))__					valueMonos.add(monoValue.defaultIfEmpty(NO_VALUE))__				}_			}_		}__		if (names.isEmpty()) {_			return Mono.empty()__		}__		return Mono.zip(valueMonos,_				values -> {_					for (int i=0_ i < values.length_ i++) {_						if (values[i] != NO_VALUE) {_							model.put(names.get(i), values[i])__						}_						else {_							model.remove(names.get(i))__						}_					}_					return NO_VALUE__				})_				.then()__	};by,default,resolve,async,attributes,supported,by,the,link,reactive,adapter,registry,to,their,blocking,counterparts,p,view,implementations,capable,of,taking,advantage,of,reactive,types,can,override,this,method,if,needed,return,code,mono,for,the,completion,of,async,attributes,resolution;protected,mono,void,resolve,async,attributes,map,string,object,model,list,string,names,new,array,list,list,mono,value,monos,new,array,list,for,map,entry,string,entry,model,entry,set,object,value,entry,get,value,if,value,null,continue,reactive,adapter,adapter,this,adapter,registry,get,adapter,null,value,if,adapter,null,names,add,entry,get,key,if,adapter,is,multi,value,flux,object,flux,value,flux,from,adapter,to,publisher,value,value,monos,add,flux,value,collect,list,default,if,empty,collections,empty,list,else,mono,object,mono,value,mono,from,adapter,to,publisher,value,value,monos,add,mono,value,default,if,empty,if,names,is,empty,return,mono,empty,return,mono,zip,value,monos,values,for,int,i,0,i,values,length,i,if,values,i,model,put,names,get,i,values,i,else,model,remove,names,get,i,return,then
AbstractView -> protected Mono<Void> resolveAsyncAttributes(Map<String, Object> model);1522360217;By default, resolve async attributes supported by the_{@link ReactiveAdapterRegistry} to their blocking counterparts._<p>View implementations capable of taking advantage of reactive types_can override this method if needed._@return {@code Mono} for the completion of async attributes resolution;protected Mono<Void> resolveAsyncAttributes(Map<String, Object> model) {__		List<String> names = new ArrayList<>()__		List<Mono<?>> valueMonos = new ArrayList<>()___		for (Map.Entry<String, ?> entry : model.entrySet()) {_			Object value =  entry.getValue()__			if (value == null) {_				continue__			}_			ReactiveAdapter adapter = this.adapterRegistry.getAdapter(null, value)__			if (adapter != null) {_				names.add(entry.getKey())__				if (adapter.isMultiValue()) {_					Flux<Object> fluxValue = Flux.from(adapter.toPublisher(value))__					valueMonos.add(fluxValue.collectList().defaultIfEmpty(Collections.emptyList()))__				}_				else {_					Mono<Object> monoValue = Mono.from(adapter.toPublisher(value))__					valueMonos.add(monoValue.defaultIfEmpty(NO_VALUE))__				}_			}_		}__		if (names.isEmpty()) {_			return Mono.empty()__		}__		return Mono.zip(valueMonos,_				values -> {_					for (int i=0_ i < values.length_ i++) {_						if (values[i] != NO_VALUE) {_							model.put(names.get(i), values[i])__						}_						else {_							model.remove(names.get(i))__						}_					}_					return NO_VALUE__				})_				.then()__	};by,default,resolve,async,attributes,supported,by,the,link,reactive,adapter,registry,to,their,blocking,counterparts,p,view,implementations,capable,of,taking,advantage,of,reactive,types,can,override,this,method,if,needed,return,code,mono,for,the,completion,of,async,attributes,resolution;protected,mono,void,resolve,async,attributes,map,string,object,model,list,string,names,new,array,list,list,mono,value,monos,new,array,list,for,map,entry,string,entry,model,entry,set,object,value,entry,get,value,if,value,null,continue,reactive,adapter,adapter,this,adapter,registry,get,adapter,null,value,if,adapter,null,names,add,entry,get,key,if,adapter,is,multi,value,flux,object,flux,value,flux,from,adapter,to,publisher,value,value,monos,add,flux,value,collect,list,default,if,empty,collections,empty,list,else,mono,object,mono,value,mono,from,adapter,to,publisher,value,value,monos,add,mono,value,default,if,empty,if,names,is,empty,return,mono,empty,return,mono,zip,value,monos,values,for,int,i,0,i,values,length,i,if,values,i,model,put,names,get,i,values,i,else,model,remove,names,get,i,return,then
AbstractView -> protected Mono<Void> resolveAsyncAttributes(Map<String, Object> model);1529721864;By default, resolve async attributes supported by the_{@link ReactiveAdapterRegistry} to their blocking counterparts._<p>View implementations capable of taking advantage of reactive types_can override this method if needed._@return {@code Mono} for the completion of async attributes resolution;protected Mono<Void> resolveAsyncAttributes(Map<String, Object> model) {__		List<String> names = new ArrayList<>()__		List<Mono<?>> valueMonos = new ArrayList<>()___		for (Map.Entry<String, ?> entry : model.entrySet()) {_			Object value =  entry.getValue()__			if (value == null) {_				continue__			}_			ReactiveAdapter adapter = this.adapterRegistry.getAdapter(null, value)__			if (adapter != null) {_				names.add(entry.getKey())__				if (adapter.isMultiValue()) {_					Flux<Object> fluxValue = Flux.from(adapter.toPublisher(value))__					valueMonos.add(fluxValue.collectList().defaultIfEmpty(Collections.emptyList()))__				}_				else {_					Mono<Object> monoValue = Mono.from(adapter.toPublisher(value))__					valueMonos.add(monoValue.defaultIfEmpty(NO_VALUE))__				}_			}_		}__		if (names.isEmpty()) {_			return Mono.empty()__		}__		return Mono.zip(valueMonos,_				values -> {_					for (int i=0_ i < values.length_ i++) {_						if (values[i] != NO_VALUE) {_							model.put(names.get(i), values[i])__						}_						else {_							model.remove(names.get(i))__						}_					}_					return NO_VALUE__				})_				.then()__	};by,default,resolve,async,attributes,supported,by,the,link,reactive,adapter,registry,to,their,blocking,counterparts,p,view,implementations,capable,of,taking,advantage,of,reactive,types,can,override,this,method,if,needed,return,code,mono,for,the,completion,of,async,attributes,resolution;protected,mono,void,resolve,async,attributes,map,string,object,model,list,string,names,new,array,list,list,mono,value,monos,new,array,list,for,map,entry,string,entry,model,entry,set,object,value,entry,get,value,if,value,null,continue,reactive,adapter,adapter,this,adapter,registry,get,adapter,null,value,if,adapter,null,names,add,entry,get,key,if,adapter,is,multi,value,flux,object,flux,value,flux,from,adapter,to,publisher,value,value,monos,add,flux,value,collect,list,default,if,empty,collections,empty,list,else,mono,object,mono,value,mono,from,adapter,to,publisher,value,value,monos,add,mono,value,default,if,empty,if,names,is,empty,return,mono,empty,return,mono,zip,value,monos,values,for,int,i,0,i,values,length,i,if,values,i,model,put,names,get,i,values,i,else,model,remove,names,get,i,return,then
AbstractView -> protected Mono<Void> resolveAsyncAttributes(Map<String, Object> model);1530174524;By default, resolve async attributes supported by the_{@link ReactiveAdapterRegistry} to their blocking counterparts._<p>View implementations capable of taking advantage of reactive types_can override this method if needed._@return {@code Mono} for the completion of async attributes resolution;protected Mono<Void> resolveAsyncAttributes(Map<String, Object> model) {__		List<String> names = new ArrayList<>()__		List<Mono<?>> valueMonos = new ArrayList<>()___		for (Map.Entry<String, ?> entry : model.entrySet()) {_			Object value =  entry.getValue()__			if (value == null) {_				continue__			}_			ReactiveAdapter adapter = this.adapterRegistry.getAdapter(null, value)__			if (adapter != null) {_				names.add(entry.getKey())__				if (adapter.isMultiValue()) {_					Flux<Object> fluxValue = Flux.from(adapter.toPublisher(value))__					valueMonos.add(fluxValue.collectList().defaultIfEmpty(Collections.emptyList()))__				}_				else {_					Mono<Object> monoValue = Mono.from(adapter.toPublisher(value))__					valueMonos.add(monoValue.defaultIfEmpty(NO_VALUE))__				}_			}_		}__		if (names.isEmpty()) {_			return Mono.empty()__		}__		return Mono.zip(valueMonos,_				values -> {_					for (int i=0_ i < values.length_ i++) {_						if (values[i] != NO_VALUE) {_							model.put(names.get(i), values[i])__						}_						else {_							model.remove(names.get(i))__						}_					}_					return NO_VALUE__				})_				.then()__	};by,default,resolve,async,attributes,supported,by,the,link,reactive,adapter,registry,to,their,blocking,counterparts,p,view,implementations,capable,of,taking,advantage,of,reactive,types,can,override,this,method,if,needed,return,code,mono,for,the,completion,of,async,attributes,resolution;protected,mono,void,resolve,async,attributes,map,string,object,model,list,string,names,new,array,list,list,mono,value,monos,new,array,list,for,map,entry,string,entry,model,entry,set,object,value,entry,get,value,if,value,null,continue,reactive,adapter,adapter,this,adapter,registry,get,adapter,null,value,if,adapter,null,names,add,entry,get,key,if,adapter,is,multi,value,flux,object,flux,value,flux,from,adapter,to,publisher,value,value,monos,add,flux,value,collect,list,default,if,empty,collections,empty,list,else,mono,object,mono,value,mono,from,adapter,to,publisher,value,value,monos,add,mono,value,default,if,empty,if,names,is,empty,return,mono,empty,return,mono,zip,value,monos,values,for,int,i,0,i,values,length,i,if,values,i,model,put,names,get,i,values,i,else,model,remove,names,get,i,return,then
AbstractView -> protected Mono<Void> resolveAsyncAttributes(Map<String, Object> model);1530294255;By default, resolve async attributes supported by the_{@link ReactiveAdapterRegistry} to their blocking counterparts._<p>View implementations capable of taking advantage of reactive types_can override this method if needed._@return {@code Mono} for the completion of async attributes resolution;protected Mono<Void> resolveAsyncAttributes(Map<String, Object> model) {_		List<String> names = new ArrayList<>()__		List<Mono<?>> valueMonos = new ArrayList<>()___		for (Map.Entry<String, ?> entry : model.entrySet()) {_			Object value =  entry.getValue()__			if (value == null) {_				continue__			}_			ReactiveAdapter adapter = this.reactiveAdapterRegistry.getAdapter(null, value)__			if (adapter != null) {_				names.add(entry.getKey())__				if (adapter.isMultiValue()) {_					Flux<Object> fluxValue = Flux.from(adapter.toPublisher(value))__					valueMonos.add(fluxValue.collectList().defaultIfEmpty(Collections.emptyList()))__				}_				else {_					Mono<Object> monoValue = Mono.from(adapter.toPublisher(value))__					valueMonos.add(monoValue.defaultIfEmpty(NO_VALUE))__				}_			}_		}__		if (names.isEmpty()) {_			return Mono.empty()__		}__		return Mono.zip(valueMonos,_				values -> {_					for (int i=0_ i < values.length_ i++) {_						if (values[i] != NO_VALUE) {_							model.put(names.get(i), values[i])__						}_						else {_							model.remove(names.get(i))__						}_					}_					return NO_VALUE__				})_				.then()__	};by,default,resolve,async,attributes,supported,by,the,link,reactive,adapter,registry,to,their,blocking,counterparts,p,view,implementations,capable,of,taking,advantage,of,reactive,types,can,override,this,method,if,needed,return,code,mono,for,the,completion,of,async,attributes,resolution;protected,mono,void,resolve,async,attributes,map,string,object,model,list,string,names,new,array,list,list,mono,value,monos,new,array,list,for,map,entry,string,entry,model,entry,set,object,value,entry,get,value,if,value,null,continue,reactive,adapter,adapter,this,reactive,adapter,registry,get,adapter,null,value,if,adapter,null,names,add,entry,get,key,if,adapter,is,multi,value,flux,object,flux,value,flux,from,adapter,to,publisher,value,value,monos,add,flux,value,collect,list,default,if,empty,collections,empty,list,else,mono,object,mono,value,mono,from,adapter,to,publisher,value,value,monos,add,mono,value,default,if,empty,if,names,is,empty,return,mono,empty,return,mono,zip,value,monos,values,for,int,i,0,i,values,length,i,if,values,i,model,put,names,get,i,values,i,else,model,remove,names,get,i,return,then
AbstractView -> protected Mono<Void> resolveAsyncAttributes(Map<String, Object> model);1530793633;By default, resolve async attributes supported by the_{@link ReactiveAdapterRegistry} to their blocking counterparts._<p>View implementations capable of taking advantage of reactive types_can override this method if needed._@return {@code Mono} for the completion of async attributes resolution;protected Mono<Void> resolveAsyncAttributes(Map<String, Object> model) {_		List<String> names = new ArrayList<>()__		List<Mono<?>> valueMonos = new ArrayList<>()___		for (Map.Entry<String, ?> entry : model.entrySet()) {_			Object value =  entry.getValue()__			if (value == null) {_				continue__			}_			ReactiveAdapter adapter = this.reactiveAdapterRegistry.getAdapter(null, value)__			if (adapter != null) {_				names.add(entry.getKey())__				if (adapter.isMultiValue()) {_					Flux<Object> fluxValue = Flux.from(adapter.toPublisher(value))__					valueMonos.add(fluxValue.collectList().defaultIfEmpty(Collections.emptyList()))__				}_				else {_					Mono<Object> monoValue = Mono.from(adapter.toPublisher(value))__					valueMonos.add(monoValue.defaultIfEmpty(NO_VALUE))__				}_			}_		}__		if (names.isEmpty()) {_			return Mono.empty()__		}__		return Mono.zip(valueMonos,_				values -> {_					for (int i=0_ i < values.length_ i++) {_						if (values[i] != NO_VALUE) {_							model.put(names.get(i), values[i])__						}_						else {_							model.remove(names.get(i))__						}_					}_					return NO_VALUE__				})_				.then()__	};by,default,resolve,async,attributes,supported,by,the,link,reactive,adapter,registry,to,their,blocking,counterparts,p,view,implementations,capable,of,taking,advantage,of,reactive,types,can,override,this,method,if,needed,return,code,mono,for,the,completion,of,async,attributes,resolution;protected,mono,void,resolve,async,attributes,map,string,object,model,list,string,names,new,array,list,list,mono,value,monos,new,array,list,for,map,entry,string,entry,model,entry,set,object,value,entry,get,value,if,value,null,continue,reactive,adapter,adapter,this,reactive,adapter,registry,get,adapter,null,value,if,adapter,null,names,add,entry,get,key,if,adapter,is,multi,value,flux,object,flux,value,flux,from,adapter,to,publisher,value,value,monos,add,flux,value,collect,list,default,if,empty,collections,empty,list,else,mono,object,mono,value,mono,from,adapter,to,publisher,value,value,monos,add,mono,value,default,if,empty,if,names,is,empty,return,mono,empty,return,mono,zip,value,monos,values,for,int,i,0,i,values,length,i,if,values,i,model,put,names,get,i,values,i,else,model,remove,names,get,i,return,then
AbstractView -> protected Mono<Map<String, Object>> getModelAttributes(@Nullable Map<String, ?> model, 			ServerWebExchange exchange);1504993259;Prepare the model to use for rendering._<p>The default implementation creates a combined output Map that includes_model as well as static attributes with the former taking precedence.;protected Mono<Map<String, Object>> getModelAttributes(@Nullable Map<String, ?> model,_			ServerWebExchange exchange) {__		int size = (model != null ? model.size() : 0)___		Map<String, Object> attributes = new LinkedHashMap<>(size)__		if (model != null) {_			attributes.putAll(model)__		}__		return resolveAsyncAttributes(attributes).then(Mono.just(attributes))__	};prepare,the,model,to,use,for,rendering,p,the,default,implementation,creates,a,combined,output,map,that,includes,model,as,well,as,static,attributes,with,the,former,taking,precedence;protected,mono,map,string,object,get,model,attributes,nullable,map,string,model,server,web,exchange,exchange,int,size,model,null,model,size,0,map,string,object,attributes,new,linked,hash,map,size,if,model,null,attributes,put,all,model,return,resolve,async,attributes,attributes,then,mono,just,attributes
AbstractView -> protected Mono<Map<String, Object>> getModelAttributes(@Nullable Map<String, ?> model, 			ServerWebExchange exchange);1511215342;Prepare the model to use for rendering._<p>The default implementation creates a combined output Map that includes_model as well as static attributes with the former taking precedence.;protected Mono<Map<String, Object>> getModelAttributes(@Nullable Map<String, ?> model,_			ServerWebExchange exchange) {__		int size = (model != null ? model.size() : 0)___		Map<String, Object> attributes = new LinkedHashMap<>(size)__		if (model != null) {_			attributes.putAll(model)__		}__		return resolveAsyncAttributes(attributes).then(Mono.just(attributes))__	};prepare,the,model,to,use,for,rendering,p,the,default,implementation,creates,a,combined,output,map,that,includes,model,as,well,as,static,attributes,with,the,former,taking,precedence;protected,mono,map,string,object,get,model,attributes,nullable,map,string,model,server,web,exchange,exchange,int,size,model,null,model,size,0,map,string,object,attributes,new,linked,hash,map,size,if,model,null,attributes,put,all,model,return,resolve,async,attributes,attributes,then,mono,just,attributes
AbstractView -> protected Mono<Map<String, Object>> getModelAttributes(@Nullable Map<String, ?> model, 			ServerWebExchange exchange);1522359218;Prepare the model to use for rendering._<p>The default implementation creates a combined output Map that includes_model as well as static attributes with the former taking precedence.;protected Mono<Map<String, Object>> getModelAttributes(@Nullable Map<String, ?> model,_			ServerWebExchange exchange) {__		int size = (model != null ? model.size() : 0)___		Map<String, Object> attributes = new LinkedHashMap<>(size)__		if (model != null) {_			attributes.putAll(model)__		}__		return resolveAsyncAttributes(attributes).then(Mono.just(attributes))__	};prepare,the,model,to,use,for,rendering,p,the,default,implementation,creates,a,combined,output,map,that,includes,model,as,well,as,static,attributes,with,the,former,taking,precedence;protected,mono,map,string,object,get,model,attributes,nullable,map,string,model,server,web,exchange,exchange,int,size,model,null,model,size,0,map,string,object,attributes,new,linked,hash,map,size,if,model,null,attributes,put,all,model,return,resolve,async,attributes,attributes,then,mono,just,attributes
AbstractView -> protected Mono<Map<String, Object>> getModelAttributes(@Nullable Map<String, ?> model, 			ServerWebExchange exchange);1522360217;Prepare the model to use for rendering._<p>The default implementation creates a combined output Map that includes_model as well as static attributes with the former taking precedence.;protected Mono<Map<String, Object>> getModelAttributes(@Nullable Map<String, ?> model,_			ServerWebExchange exchange) {__		int size = (model != null ? model.size() : 0)___		Map<String, Object> attributes = new LinkedHashMap<>(size)__		if (model != null) {_			attributes.putAll(model)__		}__		return resolveAsyncAttributes(attributes).then(Mono.just(attributes))__	};prepare,the,model,to,use,for,rendering,p,the,default,implementation,creates,a,combined,output,map,that,includes,model,as,well,as,static,attributes,with,the,former,taking,precedence;protected,mono,map,string,object,get,model,attributes,nullable,map,string,model,server,web,exchange,exchange,int,size,model,null,model,size,0,map,string,object,attributes,new,linked,hash,map,size,if,model,null,attributes,put,all,model,return,resolve,async,attributes,attributes,then,mono,just,attributes
AbstractView -> protected Mono<Map<String, Object>> getModelAttributes(@Nullable Map<String, ?> model, 			ServerWebExchange exchange);1529721864;Prepare the model to use for rendering._<p>The default implementation creates a combined output Map that includes_model as well as static attributes with the former taking precedence.;protected Mono<Map<String, Object>> getModelAttributes(@Nullable Map<String, ?> model,_			ServerWebExchange exchange) {__		int size = (model != null ? model.size() : 0)___		Map<String, Object> attributes = new LinkedHashMap<>(size)__		if (model != null) {_			attributes.putAll(model)__		}__		return resolveAsyncAttributes(attributes).then(Mono.just(attributes))__	};prepare,the,model,to,use,for,rendering,p,the,default,implementation,creates,a,combined,output,map,that,includes,model,as,well,as,static,attributes,with,the,former,taking,precedence;protected,mono,map,string,object,get,model,attributes,nullable,map,string,model,server,web,exchange,exchange,int,size,model,null,model,size,0,map,string,object,attributes,new,linked,hash,map,size,if,model,null,attributes,put,all,model,return,resolve,async,attributes,attributes,then,mono,just,attributes
AbstractView -> protected Mono<Map<String, Object>> getModelAttributes(@Nullable Map<String, ?> model, 			ServerWebExchange exchange);1530174524;Prepare the model to use for rendering._<p>The default implementation creates a combined output Map that includes_model as well as static attributes with the former taking precedence.;protected Mono<Map<String, Object>> getModelAttributes(@Nullable Map<String, ?> model,_			ServerWebExchange exchange) {__		int size = (model != null ? model.size() : 0)___		Map<String, Object> attributes = new LinkedHashMap<>(size)__		if (model != null) {_			attributes.putAll(model)__		}__		return resolveAsyncAttributes(attributes).then(Mono.just(attributes))__	};prepare,the,model,to,use,for,rendering,p,the,default,implementation,creates,a,combined,output,map,that,includes,model,as,well,as,static,attributes,with,the,former,taking,precedence;protected,mono,map,string,object,get,model,attributes,nullable,map,string,model,server,web,exchange,exchange,int,size,model,null,model,size,0,map,string,object,attributes,new,linked,hash,map,size,if,model,null,attributes,put,all,model,return,resolve,async,attributes,attributes,then,mono,just,attributes
AbstractView -> protected Mono<Map<String, Object>> getModelAttributes(@Nullable Map<String, ?> model, 			ServerWebExchange exchange);1530294255;Prepare the model to use for rendering._<p>The default implementation creates a combined output Map that includes_model as well as static attributes with the former taking precedence.;protected Mono<Map<String, Object>> getModelAttributes(@Nullable Map<String, ?> model,_			ServerWebExchange exchange) {__		int size = (model != null ? model.size() : 0)___		Map<String, Object> attributes = new LinkedHashMap<>(size)__		if (model != null) {_			attributes.putAll(model)__		}__		return resolveAsyncAttributes(attributes).then(Mono.just(attributes))__	};prepare,the,model,to,use,for,rendering,p,the,default,implementation,creates,a,combined,output,map,that,includes,model,as,well,as,static,attributes,with,the,former,taking,precedence;protected,mono,map,string,object,get,model,attributes,nullable,map,string,model,server,web,exchange,exchange,int,size,model,null,model,size,0,map,string,object,attributes,new,linked,hash,map,size,if,model,null,attributes,put,all,model,return,resolve,async,attributes,attributes,then,mono,just,attributes
AbstractView -> protected Mono<Map<String, Object>> getModelAttributes(@Nullable Map<String, ?> model, 			ServerWebExchange exchange);1530793633;Prepare the model to use for rendering._<p>The default implementation creates a combined output Map that includes_model as well as static attributes with the former taking precedence.;protected Mono<Map<String, Object>> getModelAttributes(@Nullable Map<String, ?> model,_			ServerWebExchange exchange) {__		int size = (model != null ? model.size() : 0)___		Map<String, Object> attributes = new LinkedHashMap<>(size)__		if (model != null) {_			attributes.putAll(model)__		}__		return resolveAsyncAttributes(attributes).then(Mono.just(attributes))__	};prepare,the,model,to,use,for,rendering,p,the,default,implementation,creates,a,combined,output,map,that,includes,model,as,well,as,static,attributes,with,the,former,taking,precedence;protected,mono,map,string,object,get,model,attributes,nullable,map,string,model,server,web,exchange,exchange,int,size,model,null,model,size,0,map,string,object,attributes,new,linked,hash,map,size,if,model,null,attributes,put,all,model,return,resolve,async,attributes,attributes,then,mono,just,attributes
AbstractView -> public void setSupportedMediaTypes(List<MediaType> supportedMediaTypes);1485986572;Set the supported media types for this view._Default is "text/html_charset=UTF-8".;public void setSupportedMediaTypes(List<MediaType> supportedMediaTypes) {_		Assert.notEmpty(supportedMediaTypes, "'supportedMediaTypes' is required.")__		this.mediaTypes.clear()__		if (supportedMediaTypes != null) {_			this.mediaTypes.addAll(supportedMediaTypes)__		}_	};set,the,supported,media,types,for,this,view,default,is,text,html,charset,utf,8;public,void,set,supported,media,types,list,media,type,supported,media,types,assert,not,empty,supported,media,types,supported,media,types,is,required,this,media,types,clear,if,supported,media,types,null,this,media,types,add,all,supported,media,types
AbstractView -> public void setSupportedMediaTypes(List<MediaType> supportedMediaTypes);1486720600;Set the supported media types for this view._Default is "text/html_charset=UTF-8".;public void setSupportedMediaTypes(List<MediaType> supportedMediaTypes) {_		Assert.notEmpty(supportedMediaTypes, "MediaType List must not be empty")__		this.mediaTypes.clear()__		if (supportedMediaTypes != null) {_			this.mediaTypes.addAll(supportedMediaTypes)__		}_	};set,the,supported,media,types,for,this,view,default,is,text,html,charset,utf,8;public,void,set,supported,media,types,list,media,type,supported,media,types,assert,not,empty,supported,media,types,media,type,list,must,not,be,empty,this,media,types,clear,if,supported,media,types,null,this,media,types,add,all,supported,media,types
AbstractView -> public void setSupportedMediaTypes(List<MediaType> supportedMediaTypes);1490903325;Set the supported media types for this view._Default is "text/html_charset=UTF-8".;public void setSupportedMediaTypes(List<MediaType> supportedMediaTypes) {_		Assert.notEmpty(supportedMediaTypes, "MediaType List must not be empty")__		this.mediaTypes.clear()__		if (supportedMediaTypes != null) {_			this.mediaTypes.addAll(supportedMediaTypes)__		}_	};set,the,supported,media,types,for,this,view,default,is,text,html,charset,utf,8;public,void,set,supported,media,types,list,media,type,supported,media,types,assert,not,empty,supported,media,types,media,type,list,must,not,be,empty,this,media,types,clear,if,supported,media,types,null,this,media,types,add,all,supported,media,types
AbstractView -> public void setSupportedMediaTypes(List<MediaType> supportedMediaTypes);1491927184;Set the supported media types for this view._Default is "text/html_charset=UTF-8".;public void setSupportedMediaTypes(List<MediaType> supportedMediaTypes) {_		Assert.notEmpty(supportedMediaTypes, "MediaType List must not be empty")__		this.mediaTypes.clear()__		if (supportedMediaTypes != null) {_			this.mediaTypes.addAll(supportedMediaTypes)__		}_	};set,the,supported,media,types,for,this,view,default,is,text,html,charset,utf,8;public,void,set,supported,media,types,list,media,type,supported,media,types,assert,not,empty,supported,media,types,media,type,list,must,not,be,empty,this,media,types,clear,if,supported,media,types,null,this,media,types,add,all,supported,media,types
AbstractView -> public void setSupportedMediaTypes(List<MediaType> supportedMediaTypes);1495868221;Set the supported media types for this view._Default is "text/html_charset=UTF-8".;public void setSupportedMediaTypes(List<MediaType> supportedMediaTypes) {_		Assert.notEmpty(supportedMediaTypes, "MediaType List must not be empty")__		this.mediaTypes.clear()__		if (supportedMediaTypes != null) {_			this.mediaTypes.addAll(supportedMediaTypes)__		}_	};set,the,supported,media,types,for,this,view,default,is,text,html,charset,utf,8;public,void,set,supported,media,types,list,media,type,supported,media,types,assert,not,empty,supported,media,types,media,type,list,must,not,be,empty,this,media,types,clear,if,supported,media,types,null,this,media,types,add,all,supported,media,types
AbstractView -> public void setSupportedMediaTypes(List<MediaType> supportedMediaTypes);1496242568;Set the supported media types for this view._Default is "text/html_charset=UTF-8".;public void setSupportedMediaTypes(List<MediaType> supportedMediaTypes) {_		Assert.notEmpty(supportedMediaTypes, "MediaType List must not be empty")__		this.mediaTypes.clear()__		if (supportedMediaTypes != null) {_			this.mediaTypes.addAll(supportedMediaTypes)__		}_	};set,the,supported,media,types,for,this,view,default,is,text,html,charset,utf,8;public,void,set,supported,media,types,list,media,type,supported,media,types,assert,not,empty,supported,media,types,media,type,list,must,not,be,empty,this,media,types,clear,if,supported,media,types,null,this,media,types,add,all,supported,media,types
AbstractView -> public void setSupportedMediaTypes(List<MediaType> supportedMediaTypes);1522360217;Set the supported media types for this view._Default is "text/html_charset=UTF-8".;public void setSupportedMediaTypes(List<MediaType> supportedMediaTypes) {_		Assert.notEmpty(supportedMediaTypes, "MediaType List must not be empty")__		this.mediaTypes.clear()__		this.mediaTypes.addAll(supportedMediaTypes)__	};set,the,supported,media,types,for,this,view,default,is,text,html,charset,utf,8;public,void,set,supported,media,types,list,media,type,supported,media,types,assert,not,empty,supported,media,types,media,type,list,must,not,be,empty,this,media,types,clear,this,media,types,add,all,supported,media,types
AbstractView -> public void setSupportedMediaTypes(List<MediaType> supportedMediaTypes);1529721864;Set the supported media types for this view._Default is "text/html_charset=UTF-8".;public void setSupportedMediaTypes(List<MediaType> supportedMediaTypes) {_		Assert.notEmpty(supportedMediaTypes, "MediaType List must not be empty")__		this.mediaTypes.clear()__		this.mediaTypes.addAll(supportedMediaTypes)__	};set,the,supported,media,types,for,this,view,default,is,text,html,charset,utf,8;public,void,set,supported,media,types,list,media,type,supported,media,types,assert,not,empty,supported,media,types,media,type,list,must,not,be,empty,this,media,types,clear,this,media,types,add,all,supported,media,types
AbstractView -> public void setSupportedMediaTypes(List<MediaType> supportedMediaTypes);1530174524;Set the supported media types for this view._Default is "text/html_charset=UTF-8".;public void setSupportedMediaTypes(List<MediaType> supportedMediaTypes) {_		Assert.notEmpty(supportedMediaTypes, "MediaType List must not be empty")__		this.mediaTypes.clear()__		this.mediaTypes.addAll(supportedMediaTypes)__	};set,the,supported,media,types,for,this,view,default,is,text,html,charset,utf,8;public,void,set,supported,media,types,list,media,type,supported,media,types,assert,not,empty,supported,media,types,media,type,list,must,not,be,empty,this,media,types,clear,this,media,types,add,all,supported,media,types
AbstractView -> public void setSupportedMediaTypes(List<MediaType> supportedMediaTypes);1530294255;Set the supported media types for this view._Default is "text/html_charset=UTF-8".;public void setSupportedMediaTypes(List<MediaType> supportedMediaTypes) {_		Assert.notEmpty(supportedMediaTypes, "MediaType List must not be empty")__		this.mediaTypes.clear()__		this.mediaTypes.addAll(supportedMediaTypes)__	};set,the,supported,media,types,for,this,view,default,is,text,html,charset,utf,8;public,void,set,supported,media,types,list,media,type,supported,media,types,assert,not,empty,supported,media,types,media,type,list,must,not,be,empty,this,media,types,clear,this,media,types,add,all,supported,media,types
AbstractView -> public void setSupportedMediaTypes(List<MediaType> supportedMediaTypes);1530793633;Set the supported media types for this view._Default is "text/html_charset=UTF-8".;public void setSupportedMediaTypes(List<MediaType> supportedMediaTypes) {_		Assert.notEmpty(supportedMediaTypes, "MediaType List must not be empty")__		this.mediaTypes.clear()__		this.mediaTypes.addAll(supportedMediaTypes)__	};set,the,supported,media,types,for,this,view,default,is,text,html,charset,utf,8;public,void,set,supported,media,types,list,media,type,supported,media,types,assert,not,empty,supported,media,types,media,type,list,must,not,be,empty,this,media,types,clear,this,media,types,add,all,supported,media,types
AbstractView -> @Override 	public Mono<Void> render(Map<String, ?> model, MediaType contentType, 			ServerWebExchange exchange);1485986572;Prepare the model to render._@param model Map with name Strings as keys and corresponding model_objects as values (Map can also be {@code null} in case of empty model)_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange the current exchange_@return {@code Mono} to represent when and if rendering succeeds;@Override_	public Mono<Void> render(Map<String, ?> model, MediaType contentType,_			ServerWebExchange exchange) {__		if (logger.isTraceEnabled()) {_			logger.trace("Rendering view with model " + model)__		}__		if (contentType != null) {_			exchange.getResponse().getHeaders().setContentType(contentType)__		}__		Map<String, Object> mergedModel = getModelAttributes(model, exchange)___		_		if (this.requestContextAttribute != null) {_			mergedModel.put(this.requestContextAttribute, createRequestContext(exchange, mergedModel))__		}__		return renderInternal(mergedModel, contentType, exchange)__	};prepare,the,model,to,render,param,model,map,with,name,strings,as,keys,and,corresponding,model,objects,as,values,map,can,also,be,code,null,in,case,of,empty,model,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,the,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;override,public,mono,void,render,map,string,model,media,type,content,type,server,web,exchange,exchange,if,logger,is,trace,enabled,logger,trace,rendering,view,with,model,model,if,content,type,null,exchange,get,response,get,headers,set,content,type,content,type,map,string,object,merged,model,get,model,attributes,model,exchange,if,this,request,context,attribute,null,merged,model,put,this,request,context,attribute,create,request,context,exchange,merged,model,return,render,internal,merged,model,content,type,exchange
AbstractView -> @Override 	public Mono<Void> render(Map<String, ?> model, MediaType contentType, 			ServerWebExchange exchange);1486720600;Prepare the model to render._@param model Map with name Strings as keys and corresponding model_objects as values (Map can also be {@code null} in case of empty model)_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange the current exchange_@return {@code Mono} to represent when and if rendering succeeds;@Override_	public Mono<Void> render(Map<String, ?> model, MediaType contentType,_			ServerWebExchange exchange) {__		if (logger.isTraceEnabled()) {_			logger.trace("Rendering view with model " + model)__		}__		if (contentType != null) {_			exchange.getResponse().getHeaders().setContentType(contentType)__		}__		Map<String, Object> mergedModel = getModelAttributes(model, exchange)___		_		if (this.requestContextAttribute != null) {_			mergedModel.put(this.requestContextAttribute, createRequestContext(exchange, mergedModel))__		}__		return renderInternal(mergedModel, contentType, exchange)__	};prepare,the,model,to,render,param,model,map,with,name,strings,as,keys,and,corresponding,model,objects,as,values,map,can,also,be,code,null,in,case,of,empty,model,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,the,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;override,public,mono,void,render,map,string,model,media,type,content,type,server,web,exchange,exchange,if,logger,is,trace,enabled,logger,trace,rendering,view,with,model,model,if,content,type,null,exchange,get,response,get,headers,set,content,type,content,type,map,string,object,merged,model,get,model,attributes,model,exchange,if,this,request,context,attribute,null,merged,model,put,this,request,context,attribute,create,request,context,exchange,merged,model,return,render,internal,merged,model,content,type,exchange
AbstractView -> @Override 	public Mono<Void> render(Map<String, ?> model, MediaType contentType, 			ServerWebExchange exchange);1490903325;Prepare the model to render._@param model Map with name Strings as keys and corresponding model_objects as values (Map can also be {@code null} in case of empty model)_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange the current exchange_@return {@code Mono} to represent when and if rendering succeeds;@Override_	public Mono<Void> render(Map<String, ?> model, MediaType contentType,_			ServerWebExchange exchange) {__		if (logger.isTraceEnabled()) {_			logger.trace("Rendering view with model " + model)__		}__		if (contentType != null) {_			exchange.getResponse().getHeaders().setContentType(contentType)__		}__		return getModelAttributes(model, exchange).then(mergedModel -> {_			_			if (this.requestContextAttribute != null) {_				mergedModel.put(this.requestContextAttribute, createRequestContext(exchange, mergedModel))__			}_			return renderInternal(mergedModel, contentType, exchange)__		})__	};prepare,the,model,to,render,param,model,map,with,name,strings,as,keys,and,corresponding,model,objects,as,values,map,can,also,be,code,null,in,case,of,empty,model,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,the,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;override,public,mono,void,render,map,string,model,media,type,content,type,server,web,exchange,exchange,if,logger,is,trace,enabled,logger,trace,rendering,view,with,model,model,if,content,type,null,exchange,get,response,get,headers,set,content,type,content,type,return,get,model,attributes,model,exchange,then,merged,model,if,this,request,context,attribute,null,merged,model,put,this,request,context,attribute,create,request,context,exchange,merged,model,return,render,internal,merged,model,content,type,exchange
AbstractView -> @Override 	public Mono<Void> render(Map<String, ?> model, MediaType contentType, 			ServerWebExchange exchange);1491927184;Prepare the model to render._@param model Map with name Strings as keys and corresponding model_objects as values (Map can also be {@code null} in case of empty model)_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange the current exchange_@return {@code Mono} to represent when and if rendering succeeds;@Override_	public Mono<Void> render(Map<String, ?> model, MediaType contentType,_			ServerWebExchange exchange) {__		if (logger.isTraceEnabled()) {_			logger.trace("Rendering view with model " + model)__		}__		if (contentType != null) {_			exchange.getResponse().getHeaders().setContentType(contentType)__		}__		return getModelAttributes(model, exchange).flatMap(mergedModel -> {_			_			if (this.requestContextAttribute != null) {_				mergedModel.put(this.requestContextAttribute, createRequestContext(exchange, mergedModel))__			}_			return renderInternal(mergedModel, contentType, exchange)__		})__	};prepare,the,model,to,render,param,model,map,with,name,strings,as,keys,and,corresponding,model,objects,as,values,map,can,also,be,code,null,in,case,of,empty,model,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,the,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;override,public,mono,void,render,map,string,model,media,type,content,type,server,web,exchange,exchange,if,logger,is,trace,enabled,logger,trace,rendering,view,with,model,model,if,content,type,null,exchange,get,response,get,headers,set,content,type,content,type,return,get,model,attributes,model,exchange,flat,map,merged,model,if,this,request,context,attribute,null,merged,model,put,this,request,context,attribute,create,request,context,exchange,merged,model,return,render,internal,merged,model,content,type,exchange
AbstractView -> @Override 	public Mono<Void> render(Map<String, ?> model, MediaType contentType, 			ServerWebExchange exchange);1495868221;Prepare the model to render._@param model Map with name Strings as keys and corresponding model_objects as values (Map can also be {@code null} in case of empty model)_@param contentType the content type selected to render with which should_match one of the {@link #getSupportedMediaTypes() supported media types}._@param exchange the current exchange_@return {@code Mono} to represent when and if rendering succeeds;@Override_	public Mono<Void> render(Map<String, ?> model, MediaType contentType,_			ServerWebExchange exchange) {__		if (logger.isTraceEnabled()) {_			logger.trace("Rendering view with model " + model)__		}__		if (contentType != null) {_			exchange.getResponse().getHeaders().setContentType(contentType)__		}__		return getModelAttributes(model, exchange).flatMap(mergedModel -> {_			_			if (this.requestContextAttribute != null) {_				mergedModel.put(this.requestContextAttribute, createRequestContext(exchange, mergedModel))__			}_			return renderInternal(mergedModel, contentType, exchange)__		})__	};prepare,the,model,to,render,param,model,map,with,name,strings,as,keys,and,corresponding,model,objects,as,values,map,can,also,be,code,null,in,case,of,empty,model,param,content,type,the,content,type,selected,to,render,with,which,should,match,one,of,the,link,get,supported,media,types,supported,media,types,param,exchange,the,current,exchange,return,code,mono,to,represent,when,and,if,rendering,succeeds;override,public,mono,void,render,map,string,model,media,type,content,type,server,web,exchange,exchange,if,logger,is,trace,enabled,logger,trace,rendering,view,with,model,model,if,content,type,null,exchange,get,response,get,headers,set,content,type,content,type,return,get,model,attributes,model,exchange,flat,map,merged,model,if,this,request,context,attribute,null,merged,model,put,this,request,context,attribute,create,request,context,exchange,merged,model,return,render,internal,merged,model,content,type,exchange
