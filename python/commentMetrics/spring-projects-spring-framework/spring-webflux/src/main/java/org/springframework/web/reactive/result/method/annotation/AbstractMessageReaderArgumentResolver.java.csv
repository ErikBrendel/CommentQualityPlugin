# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractMessageReaderArgumentResolver -> private Object[] extractValidationHints(MethodParameter parameter);1489433888;Check if the given MethodParameter requires validation and if so return_a (possibly empty) Object[] with validation hints. A return value of_{@code null} indicates that validation is not required.;private Object[] extractValidationHints(MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validAnnot = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validAnnot != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validAnnot != null ? validAnnot.value() : AnnotationUtils.getValue(ann))__				return (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__			}_		}_		return null__	};check,if,the,given,method,parameter,requires,validation,and,if,so,return,a,possibly,empty,object,with,validation,hints,a,return,value,of,code,null,indicates,that,validation,is,not,required;private,object,extract,validation,hints,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,valid,annot,annotation,utils,get,annotation,ann,validated,class,if,valid,annot,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,valid,annot,null,valid,annot,value,annotation,utils,get,value,ann,return,hints,instanceof,object,object,hints,new,object,hints,return,null
AbstractMessageReaderArgumentResolver -> private Object[] extractValidationHints(MethodParameter parameter);1489535791;Check if the given MethodParameter requires validation and if so return_a (possibly empty) Object[] with validation hints. A return value of_{@code null} indicates that validation is not required.;private Object[] extractValidationHints(MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validAnnot = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validAnnot != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validAnnot != null ? validAnnot.value() : AnnotationUtils.getValue(ann))__				return (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__			}_		}_		return null__	};check,if,the,given,method,parameter,requires,validation,and,if,so,return,a,possibly,empty,object,with,validation,hints,a,return,value,of,code,null,indicates,that,validation,is,not,required;private,object,extract,validation,hints,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,valid,annot,annotation,utils,get,annotation,ann,validated,class,if,valid,annot,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,valid,annot,null,valid,annot,value,annotation,utils,get,value,ann,return,hints,instanceof,object,object,hints,new,object,hints,return,null
AbstractMessageReaderArgumentResolver -> private Object[] extractValidationHints(MethodParameter parameter);1490109321;Check if the given MethodParameter requires validation and if so return_a (possibly empty) Object[] with validation hints. A return value of_{@code null} indicates that validation is not required.;private Object[] extractValidationHints(MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validAnnot = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validAnnot != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validAnnot != null ? validAnnot.value() : AnnotationUtils.getValue(ann))__				return (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__			}_		}_		return null__	};check,if,the,given,method,parameter,requires,validation,and,if,so,return,a,possibly,empty,object,with,validation,hints,a,return,value,of,code,null,indicates,that,validation,is,not,required;private,object,extract,validation,hints,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,valid,annot,annotation,utils,get,annotation,ann,validated,class,if,valid,annot,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,valid,annot,null,valid,annot,value,annotation,utils,get,value,ann,return,hints,instanceof,object,object,hints,new,object,hints,return,null
AbstractMessageReaderArgumentResolver -> private Object[] extractValidationHints(MethodParameter parameter);1490354145;Check if the given MethodParameter requires validation and if so return_a (possibly empty) Object[] with validation hints. A return value of_{@code null} indicates that validation is not required.;private Object[] extractValidationHints(MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				return (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__			}_		}_		return null__	};check,if,the,given,method,parameter,requires,validation,and,if,so,return,a,possibly,empty,object,with,validation,hints,a,return,value,of,code,null,indicates,that,validation,is,not,required;private,object,extract,validation,hints,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,return,hints,instanceof,object,object,hints,new,object,hints,return,null
AbstractMessageReaderArgumentResolver -> private Object[] extractValidationHints(MethodParameter parameter);1490392946;Check if the given MethodParameter requires validation and if so return_a (possibly empty) Object[] with validation hints. A return value of_{@code null} indicates that validation is not required.;private Object[] extractValidationHints(MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				return (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__			}_		}_		return null__	};check,if,the,given,method,parameter,requires,validation,and,if,so,return,a,possibly,empty,object,with,validation,hints,a,return,value,of,code,null,indicates,that,validation,is,not,required;private,object,extract,validation,hints,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,return,hints,instanceof,object,object,hints,new,object,hints,return,null
AbstractMessageReaderArgumentResolver -> private Object[] extractValidationHints(MethodParameter parameter);1491833276;Check if the given MethodParameter requires validation and if so return_a (possibly empty) Object[] with validation hints. A return value of_{@code null} indicates that validation is not required.;private Object[] extractValidationHints(MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				return (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__			}_		}_		return null__	};check,if,the,given,method,parameter,requires,validation,and,if,so,return,a,possibly,empty,object,with,validation,hints,a,return,value,of,code,null,indicates,that,validation,is,not,required;private,object,extract,validation,hints,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,return,hints,instanceof,object,object,hints,new,object,hints,return,null
AbstractMessageReaderArgumentResolver -> private Object[] extractValidationHints(MethodParameter parameter);1491907149;Check if the given MethodParameter requires validation and if so return_a (possibly empty) Object[] with validation hints. A return value of_{@code null} indicates that validation is not required.;private Object[] extractValidationHints(MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				return (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__			}_		}_		return null__	};check,if,the,given,method,parameter,requires,validation,and,if,so,return,a,possibly,empty,object,with,validation,hints,a,return,value,of,code,null,indicates,that,validation,is,not,required;private,object,extract,validation,hints,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,return,hints,instanceof,object,object,hints,new,object,hints,return,null
AbstractMessageReaderArgumentResolver -> private Object[] extractValidationHints(MethodParameter parameter);1492090594;Check if the given MethodParameter requires validation and if so return_a (possibly empty) Object[] with validation hints. A return value of_{@code null} indicates that validation is not required.;private Object[] extractValidationHints(MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				return (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__			}_		}_		return null__	};check,if,the,given,method,parameter,requires,validation,and,if,so,return,a,possibly,empty,object,with,validation,hints,a,return,value,of,code,null,indicates,that,validation,is,not,required;private,object,extract,validation,hints,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,return,hints,instanceof,object,object,hints,new,object,hints,return,null
AbstractMessageReaderArgumentResolver -> private Object[] extractValidationHints(MethodParameter parameter);1492168700;Check if the given MethodParameter requires validation and if so return_a (possibly empty) Object[] with validation hints. A return value of_{@code null} indicates that validation is not required.;private Object[] extractValidationHints(MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				return (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__			}_		}_		return null__	};check,if,the,given,method,parameter,requires,validation,and,if,so,return,a,possibly,empty,object,with,validation,hints,a,return,value,of,code,null,indicates,that,validation,is,not,required;private,object,extract,validation,hints,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,return,hints,instanceof,object,object,hints,new,object,hints,return,null
AbstractMessageReaderArgumentResolver -> private Object[] extractValidationHints(MethodParameter parameter);1494008983;Check if the given MethodParameter requires validation and if so return_a (possibly empty) Object[] with validation hints. A return value of_{@code null} indicates that validation is not required.;private Object[] extractValidationHints(MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				return (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__			}_		}_		return null__	};check,if,the,given,method,parameter,requires,validation,and,if,so,return,a,possibly,empty,object,with,validation,hints,a,return,value,of,code,null,indicates,that,validation,is,not,required;private,object,extract,validation,hints,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,return,hints,instanceof,object,object,hints,new,object,hints,return,null
AbstractMessageReaderArgumentResolver -> private Object[] extractValidationHints(MethodParameter parameter);1494019148;Check if the given MethodParameter requires validation and if so return_a (possibly empty) Object[] with validation hints. A return value of_{@code null} indicates that validation is not required.;private Object[] extractValidationHints(MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				return (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__			}_		}_		return null__	};check,if,the,given,method,parameter,requires,validation,and,if,so,return,a,possibly,empty,object,with,validation,hints,a,return,value,of,code,null,indicates,that,validation,is,not,required;private,object,extract,validation,hints,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,return,hints,instanceof,object,object,hints,new,object,hints,return,null
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders, 			ReactiveAdapterRegistry adapterRegistry);1485986572;Constructor that also accepts a {@link ReactiveAdapterRegistry}._@param messageReaders readers to convert from the request body_@param adapterRegistry for adapting to other reactive types from Flux and Mono;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders,_			ReactiveAdapterRegistry adapterRegistry) {__		Assert.notEmpty(messageReaders, "At least one HttpMessageReader is required.")__		Assert.notNull(adapterRegistry, "'adapterRegistry' is required")__		this.messageReaders = messageReaders__		this.adapterRegistry = adapterRegistry__		this.supportedMediaTypes = messageReaders.stream()_				.flatMap(converter -> converter.getReadableMediaTypes().stream())_				.collect(Collectors.toList())__	};constructor,that,also,accepts,a,link,reactive,adapter,registry,param,message,readers,readers,to,convert,from,the,request,body,param,adapter,registry,for,adapting,to,other,reactive,types,from,flux,and,mono;protected,abstract,message,reader,argument,resolver,list,http,message,reader,message,readers,reactive,adapter,registry,adapter,registry,assert,not,empty,message,readers,at,least,one,http,message,reader,is,required,assert,not,null,adapter,registry,adapter,registry,is,required,this,message,readers,message,readers,this,adapter,registry,adapter,registry,this,supported,media,types,message,readers,stream,flat,map,converter,converter,get,readable,media,types,stream,collect,collectors,to,list
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders, 			ReactiveAdapterRegistry adapterRegistry);1489433888;Constructor that also accepts a {@link ReactiveAdapterRegistry}._@param messageReaders readers to convert from the request body_@param adapterRegistry for adapting to other reactive types from Flux and Mono;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders,_			ReactiveAdapterRegistry adapterRegistry) {__		Assert.notEmpty(messageReaders, "At least one HttpMessageReader is required.")__		Assert.notNull(adapterRegistry, "'adapterRegistry' is required")__		this.messageReaders = messageReaders__		this.adapterRegistry = adapterRegistry__		this.supportedMediaTypes = messageReaders.stream()_				.flatMap(converter -> converter.getReadableMediaTypes().stream())_				.collect(Collectors.toList())__	};constructor,that,also,accepts,a,link,reactive,adapter,registry,param,message,readers,readers,to,convert,from,the,request,body,param,adapter,registry,for,adapting,to,other,reactive,types,from,flux,and,mono;protected,abstract,message,reader,argument,resolver,list,http,message,reader,message,readers,reactive,adapter,registry,adapter,registry,assert,not,empty,message,readers,at,least,one,http,message,reader,is,required,assert,not,null,adapter,registry,adapter,registry,is,required,this,message,readers,message,readers,this,adapter,registry,adapter,registry,this,supported,media,types,message,readers,stream,flat,map,converter,converter,get,readable,media,types,stream,collect,collectors,to,list
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders, 			ReactiveAdapterRegistry adapterRegistry);1489535791;Constructor that also accepts a {@link ReactiveAdapterRegistry}._@param messageReaders readers to convert from the request body_@param adapterRegistry for adapting to other reactive types from Flux and Mono;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders,_			ReactiveAdapterRegistry adapterRegistry) {__		super(adapterRegistry)__		Assert.notEmpty(messageReaders, "At least one HttpMessageReader is required.")__		Assert.notNull(adapterRegistry, "'adapterRegistry' is required")__		this.messageReaders = messageReaders__		this.supportedMediaTypes = messageReaders.stream()_				.flatMap(converter -> converter.getReadableMediaTypes().stream())_				.collect(Collectors.toList())__	};constructor,that,also,accepts,a,link,reactive,adapter,registry,param,message,readers,readers,to,convert,from,the,request,body,param,adapter,registry,for,adapting,to,other,reactive,types,from,flux,and,mono;protected,abstract,message,reader,argument,resolver,list,http,message,reader,message,readers,reactive,adapter,registry,adapter,registry,super,adapter,registry,assert,not,empty,message,readers,at,least,one,http,message,reader,is,required,assert,not,null,adapter,registry,adapter,registry,is,required,this,message,readers,message,readers,this,supported,media,types,message,readers,stream,flat,map,converter,converter,get,readable,media,types,stream,collect,collectors,to,list
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders, 			ReactiveAdapterRegistry adapterRegistry);1490392946;Constructor that also accepts a {@link ReactiveAdapterRegistry}._@param messageReaders readers to convert from the request body_@param adapterRegistry for adapting to other reactive types from Flux and Mono;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders,_			ReactiveAdapterRegistry adapterRegistry) {__		super(adapterRegistry)__		Assert.notEmpty(messageReaders, "At least one HttpMessageReader is required.")__		Assert.notNull(adapterRegistry, "'adapterRegistry' is required")__		this.messageReaders = messageReaders__		this.supportedMediaTypes = messageReaders.stream()_				.flatMap(converter -> converter.getReadableMediaTypes().stream())_				.collect(Collectors.toList())__	};constructor,that,also,accepts,a,link,reactive,adapter,registry,param,message,readers,readers,to,convert,from,the,request,body,param,adapter,registry,for,adapting,to,other,reactive,types,from,flux,and,mono;protected,abstract,message,reader,argument,resolver,list,http,message,reader,message,readers,reactive,adapter,registry,adapter,registry,super,adapter,registry,assert,not,empty,message,readers,at,least,one,http,message,reader,is,required,assert,not,null,adapter,registry,adapter,registry,is,required,this,message,readers,message,readers,this,supported,media,types,message,readers,stream,flat,map,converter,converter,get,readable,media,types,stream,collect,collectors,to,list
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders, 			ReactiveAdapterRegistry adapterRegistry);1491833276;Constructor that also accepts a {@link ReactiveAdapterRegistry}._@param messageReaders readers to convert from the request body_@param adapterRegistry for adapting to other reactive types from Flux and Mono;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders,_			ReactiveAdapterRegistry adapterRegistry) {__		super(adapterRegistry)__		Assert.notEmpty(messageReaders, "At least one HttpMessageReader is required.")__		Assert.notNull(adapterRegistry, "'adapterRegistry' is required")__		this.messageReaders = messageReaders__		this.supportedMediaTypes = messageReaders.stream()_				.flatMap(converter -> converter.getReadableMediaTypes().stream())_				.collect(Collectors.toList())__	};constructor,that,also,accepts,a,link,reactive,adapter,registry,param,message,readers,readers,to,convert,from,the,request,body,param,adapter,registry,for,adapting,to,other,reactive,types,from,flux,and,mono;protected,abstract,message,reader,argument,resolver,list,http,message,reader,message,readers,reactive,adapter,registry,adapter,registry,super,adapter,registry,assert,not,empty,message,readers,at,least,one,http,message,reader,is,required,assert,not,null,adapter,registry,adapter,registry,is,required,this,message,readers,message,readers,this,supported,media,types,message,readers,stream,flat,map,converter,converter,get,readable,media,types,stream,collect,collectors,to,list
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders, 			ReactiveAdapterRegistry adapterRegistry);1491907149;Constructor that also accepts a {@link ReactiveAdapterRegistry}._@param messageReaders readers to convert from the request body_@param adapterRegistry for adapting to other reactive types from Flux and Mono;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders,_			ReactiveAdapterRegistry adapterRegistry) {__		super(adapterRegistry)__		Assert.notEmpty(messageReaders, "At least one HttpMessageReader is required.")__		Assert.notNull(adapterRegistry, "'adapterRegistry' is required")__		this.messageReaders = messageReaders__		this.supportedMediaTypes = messageReaders.stream()_				.flatMap(converter -> converter.getReadableMediaTypes().stream())_				.collect(Collectors.toList())__	};constructor,that,also,accepts,a,link,reactive,adapter,registry,param,message,readers,readers,to,convert,from,the,request,body,param,adapter,registry,for,adapting,to,other,reactive,types,from,flux,and,mono;protected,abstract,message,reader,argument,resolver,list,http,message,reader,message,readers,reactive,adapter,registry,adapter,registry,super,adapter,registry,assert,not,empty,message,readers,at,least,one,http,message,reader,is,required,assert,not,null,adapter,registry,adapter,registry,is,required,this,message,readers,message,readers,this,supported,media,types,message,readers,stream,flat,map,converter,converter,get,readable,media,types,stream,collect,collectors,to,list
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders, 			ReactiveAdapterRegistry adapterRegistry);1492090594;Constructor that also accepts a {@link ReactiveAdapterRegistry}._@param messageReaders readers to convert from the request body_@param adapterRegistry for adapting to other reactive types from Flux and Mono;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders,_			ReactiveAdapterRegistry adapterRegistry) {__		super(adapterRegistry)__		Assert.notEmpty(messageReaders, "At least one HttpMessageReader is required.")__		Assert.notNull(adapterRegistry, "'adapterRegistry' is required")__		this.messageReaders = messageReaders__		this.supportedMediaTypes = messageReaders.stream()_				.flatMap(converter -> converter.getReadableMediaTypes().stream())_				.collect(Collectors.toList())__	};constructor,that,also,accepts,a,link,reactive,adapter,registry,param,message,readers,readers,to,convert,from,the,request,body,param,adapter,registry,for,adapting,to,other,reactive,types,from,flux,and,mono;protected,abstract,message,reader,argument,resolver,list,http,message,reader,message,readers,reactive,adapter,registry,adapter,registry,super,adapter,registry,assert,not,empty,message,readers,at,least,one,http,message,reader,is,required,assert,not,null,adapter,registry,adapter,registry,is,required,this,message,readers,message,readers,this,supported,media,types,message,readers,stream,flat,map,converter,converter,get,readable,media,types,stream,collect,collectors,to,list
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders, 			ReactiveAdapterRegistry adapterRegistry);1492168700;Constructor that also accepts a {@link ReactiveAdapterRegistry}._@param messageReaders readers to convert from the request body_@param adapterRegistry for adapting to other reactive types from Flux and Mono;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders,_			ReactiveAdapterRegistry adapterRegistry) {__		super(adapterRegistry)__		Assert.notEmpty(messageReaders, "At least one HttpMessageReader is required.")__		Assert.notNull(adapterRegistry, "'adapterRegistry' is required")__		this.messageReaders = messageReaders__		this.supportedMediaTypes = messageReaders.stream()_				.flatMap(converter -> converter.getReadableMediaTypes().stream())_				.collect(Collectors.toList())__	};constructor,that,also,accepts,a,link,reactive,adapter,registry,param,message,readers,readers,to,convert,from,the,request,body,param,adapter,registry,for,adapting,to,other,reactive,types,from,flux,and,mono;protected,abstract,message,reader,argument,resolver,list,http,message,reader,message,readers,reactive,adapter,registry,adapter,registry,super,adapter,registry,assert,not,empty,message,readers,at,least,one,http,message,reader,is,required,assert,not,null,adapter,registry,adapter,registry,is,required,this,message,readers,message,readers,this,supported,media,types,message,readers,stream,flat,map,converter,converter,get,readable,media,types,stream,collect,collectors,to,list
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders, 			ReactiveAdapterRegistry adapterRegistry);1494008983;Constructor that also accepts a {@link ReactiveAdapterRegistry}._@param messageReaders readers to convert from the request body_@param adapterRegistry for adapting to other reactive types from Flux and Mono;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders,_			ReactiveAdapterRegistry adapterRegistry) {__		super(adapterRegistry)__		Assert.notEmpty(messageReaders, "At least one HttpMessageReader is required.")__		Assert.notNull(adapterRegistry, "'adapterRegistry' is required")__		this.messageReaders = messageReaders__		this.supportedMediaTypes = messageReaders.stream()_				.flatMap(converter -> converter.getReadableMediaTypes().stream())_				.collect(Collectors.toList())__	};constructor,that,also,accepts,a,link,reactive,adapter,registry,param,message,readers,readers,to,convert,from,the,request,body,param,adapter,registry,for,adapting,to,other,reactive,types,from,flux,and,mono;protected,abstract,message,reader,argument,resolver,list,http,message,reader,message,readers,reactive,adapter,registry,adapter,registry,super,adapter,registry,assert,not,empty,message,readers,at,least,one,http,message,reader,is,required,assert,not,null,adapter,registry,adapter,registry,is,required,this,message,readers,message,readers,this,supported,media,types,message,readers,stream,flat,map,converter,converter,get,readable,media,types,stream,collect,collectors,to,list
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders, 			ReactiveAdapterRegistry adapterRegistry);1494019148;Constructor that also accepts a {@link ReactiveAdapterRegistry}._@param messageReaders readers to convert from the request body_@param adapterRegistry for adapting to other reactive types from Flux and Mono;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders,_			ReactiveAdapterRegistry adapterRegistry) {__		super(adapterRegistry)__		Assert.notEmpty(messageReaders, "At least one HttpMessageReader is required")__		Assert.notNull(adapterRegistry, "ReactiveAdapterRegistry is required")__		this.messageReaders = messageReaders__		this.supportedMediaTypes = messageReaders.stream()_				.flatMap(converter -> converter.getReadableMediaTypes().stream())_				.collect(Collectors.toList())__	};constructor,that,also,accepts,a,link,reactive,adapter,registry,param,message,readers,readers,to,convert,from,the,request,body,param,adapter,registry,for,adapting,to,other,reactive,types,from,flux,and,mono;protected,abstract,message,reader,argument,resolver,list,http,message,reader,message,readers,reactive,adapter,registry,adapter,registry,super,adapter,registry,assert,not,empty,message,readers,at,least,one,http,message,reader,is,required,assert,not,null,adapter,registry,reactive,adapter,registry,is,required,this,message,readers,message,readers,this,supported,media,types,message,readers,stream,flat,map,converter,converter,get,readable,media,types,stream,collect,collectors,to,list
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders, 			ReactiveAdapterRegistry adapterRegistry);1495868221;Constructor that also accepts a {@link ReactiveAdapterRegistry}._@param messageReaders readers to convert from the request body_@param adapterRegistry for adapting to other reactive types from Flux and Mono;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders,_			ReactiveAdapterRegistry adapterRegistry) {__		super(adapterRegistry)__		Assert.notEmpty(messageReaders, "At least one HttpMessageReader is required")__		Assert.notNull(adapterRegistry, "ReactiveAdapterRegistry is required")__		this.messageReaders = messageReaders__		this.supportedMediaTypes = messageReaders.stream()_				.flatMap(converter -> converter.getReadableMediaTypes().stream())_				.collect(Collectors.toList())__	};constructor,that,also,accepts,a,link,reactive,adapter,registry,param,message,readers,readers,to,convert,from,the,request,body,param,adapter,registry,for,adapting,to,other,reactive,types,from,flux,and,mono;protected,abstract,message,reader,argument,resolver,list,http,message,reader,message,readers,reactive,adapter,registry,adapter,registry,super,adapter,registry,assert,not,empty,message,readers,at,least,one,http,message,reader,is,required,assert,not,null,adapter,registry,reactive,adapter,registry,is,required,this,message,readers,message,readers,this,supported,media,types,message,readers,stream,flat,map,converter,converter,get,readable,media,types,stream,collect,collectors,to,list
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders, 			ReactiveAdapterRegistry adapterRegistry);1496837955;Constructor that also accepts a {@link ReactiveAdapterRegistry}._@param messageReaders readers to convert from the request body_@param adapterRegistry for adapting to other reactive types from Flux and Mono;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders,_			ReactiveAdapterRegistry adapterRegistry) {__		super(adapterRegistry)__		Assert.notEmpty(messageReaders, "At least one HttpMessageReader is required")__		Assert.notNull(adapterRegistry, "ReactiveAdapterRegistry is required")__		this.messageReaders = messageReaders__		this.supportedMediaTypes = messageReaders.stream()_				.flatMap(converter -> converter.getReadableMediaTypes().stream())_				.collect(Collectors.toList())__	};constructor,that,also,accepts,a,link,reactive,adapter,registry,param,message,readers,readers,to,convert,from,the,request,body,param,adapter,registry,for,adapting,to,other,reactive,types,from,flux,and,mono;protected,abstract,message,reader,argument,resolver,list,http,message,reader,message,readers,reactive,adapter,registry,adapter,registry,super,adapter,registry,assert,not,empty,message,readers,at,least,one,http,message,reader,is,required,assert,not,null,adapter,registry,reactive,adapter,registry,is,required,this,message,readers,message,readers,this,supported,media,types,message,readers,stream,flat,map,converter,converter,get,readable,media,types,stream,collect,collectors,to,list
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders, 			ReactiveAdapterRegistry adapterRegistry);1499937094;Constructor that also accepts a {@link ReactiveAdapterRegistry}._@param messageReaders readers to convert from the request body_@param adapterRegistry for adapting to other reactive types from Flux and Mono;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders,_			ReactiveAdapterRegistry adapterRegistry) {__		super(adapterRegistry)__		Assert.notEmpty(messageReaders, "At least one HttpMessageReader is required")__		Assert.notNull(adapterRegistry, "ReactiveAdapterRegistry is required")__		this.messageReaders = messageReaders__		this.supportedMediaTypes = messageReaders.stream()_				.flatMap(converter -> converter.getReadableMediaTypes().stream())_				.collect(Collectors.toList())__	};constructor,that,also,accepts,a,link,reactive,adapter,registry,param,message,readers,readers,to,convert,from,the,request,body,param,adapter,registry,for,adapting,to,other,reactive,types,from,flux,and,mono;protected,abstract,message,reader,argument,resolver,list,http,message,reader,message,readers,reactive,adapter,registry,adapter,registry,super,adapter,registry,assert,not,empty,message,readers,at,least,one,http,message,reader,is,required,assert,not,null,adapter,registry,reactive,adapter,registry,is,required,this,message,readers,message,readers,this,supported,media,types,message,readers,stream,flat,map,converter,converter,get,readable,media,types,stream,collect,collectors,to,list
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders, 			ReactiveAdapterRegistry adapterRegistry);1510841578;Constructor that also accepts a {@link ReactiveAdapterRegistry}._@param messageReaders readers to convert from the request body_@param adapterRegistry for adapting to other reactive types from Flux and Mono;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders,_			ReactiveAdapterRegistry adapterRegistry) {__		super(adapterRegistry)__		Assert.notEmpty(messageReaders, "At least one HttpMessageReader is required")__		Assert.notNull(adapterRegistry, "ReactiveAdapterRegistry is required")__		this.messageReaders = messageReaders__		this.supportedMediaTypes = messageReaders.stream()_				.flatMap(converter -> converter.getReadableMediaTypes().stream())_				.collect(Collectors.toList())__	};constructor,that,also,accepts,a,link,reactive,adapter,registry,param,message,readers,readers,to,convert,from,the,request,body,param,adapter,registry,for,adapting,to,other,reactive,types,from,flux,and,mono;protected,abstract,message,reader,argument,resolver,list,http,message,reader,message,readers,reactive,adapter,registry,adapter,registry,super,adapter,registry,assert,not,empty,message,readers,at,least,one,http,message,reader,is,required,assert,not,null,adapter,registry,reactive,adapter,registry,is,required,this,message,readers,message,readers,this,supported,media,types,message,readers,stream,flat,map,converter,converter,get,readable,media,types,stream,collect,collectors,to,list
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders, 			ReactiveAdapterRegistry adapterRegistry);1511215342;Constructor that also accepts a {@link ReactiveAdapterRegistry}._@param messageReaders readers to convert from the request body_@param adapterRegistry for adapting to other reactive types from Flux and Mono;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders,_			ReactiveAdapterRegistry adapterRegistry) {__		super(adapterRegistry)__		Assert.notEmpty(messageReaders, "At least one HttpMessageReader is required")__		Assert.notNull(adapterRegistry, "ReactiveAdapterRegistry is required")__		this.messageReaders = messageReaders__		this.supportedMediaTypes = messageReaders.stream()_				.flatMap(converter -> converter.getReadableMediaTypes().stream())_				.collect(Collectors.toList())__	};constructor,that,also,accepts,a,link,reactive,adapter,registry,param,message,readers,readers,to,convert,from,the,request,body,param,adapter,registry,for,adapting,to,other,reactive,types,from,flux,and,mono;protected,abstract,message,reader,argument,resolver,list,http,message,reader,message,readers,reactive,adapter,registry,adapter,registry,super,adapter,registry,assert,not,empty,message,readers,at,least,one,http,message,reader,is,required,assert,not,null,adapter,registry,reactive,adapter,registry,is,required,this,message,readers,message,readers,this,supported,media,types,message,readers,stream,flat,map,converter,converter,get,readable,media,types,stream,collect,collectors,to,list
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders, 			ReactiveAdapterRegistry adapterRegistry);1524002283;Constructor that also accepts a {@link ReactiveAdapterRegistry}._@param messageReaders readers to convert from the request body_@param adapterRegistry for adapting to other reactive types from Flux and Mono;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders,_			ReactiveAdapterRegistry adapterRegistry) {__		super(adapterRegistry)__		Assert.notEmpty(messageReaders, "At least one HttpMessageReader is required")__		Assert.notNull(adapterRegistry, "ReactiveAdapterRegistry is required")__		this.messageReaders = messageReaders__		this.supportedMediaTypes = messageReaders.stream()_				.flatMap(converter -> converter.getReadableMediaTypes().stream())_				.collect(Collectors.toList())__	};constructor,that,also,accepts,a,link,reactive,adapter,registry,param,message,readers,readers,to,convert,from,the,request,body,param,adapter,registry,for,adapting,to,other,reactive,types,from,flux,and,mono;protected,abstract,message,reader,argument,resolver,list,http,message,reader,message,readers,reactive,adapter,registry,adapter,registry,super,adapter,registry,assert,not,empty,message,readers,at,least,one,http,message,reader,is,required,assert,not,null,adapter,registry,reactive,adapter,registry,is,required,this,message,readers,message,readers,this,supported,media,types,message,readers,stream,flat,map,converter,converter,get,readable,media,types,stream,collect,collectors,to,list
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders, 			ReactiveAdapterRegistry adapterRegistry);1524002283;Constructor that also accepts a {@link ReactiveAdapterRegistry}._@param messageReaders readers to convert from the request body_@param adapterRegistry for adapting to other reactive types from Flux and Mono;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders,_			ReactiveAdapterRegistry adapterRegistry) {__		super(adapterRegistry)__		Assert.notEmpty(messageReaders, "At least one HttpMessageReader is required")__		Assert.notNull(adapterRegistry, "ReactiveAdapterRegistry is required")__		this.messageReaders = messageReaders__		this.supportedMediaTypes = messageReaders.stream()_				.flatMap(converter -> converter.getReadableMediaTypes().stream())_				.collect(Collectors.toList())__	};constructor,that,also,accepts,a,link,reactive,adapter,registry,param,message,readers,readers,to,convert,from,the,request,body,param,adapter,registry,for,adapting,to,other,reactive,types,from,flux,and,mono;protected,abstract,message,reader,argument,resolver,list,http,message,reader,message,readers,reactive,adapter,registry,adapter,registry,super,adapter,registry,assert,not,empty,message,readers,at,least,one,http,message,reader,is,required,assert,not,null,adapter,registry,reactive,adapter,registry,is,required,this,message,readers,message,readers,this,supported,media,types,message,readers,stream,flat,map,converter,converter,get,readable,media,types,stream,collect,collectors,to,list
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders, 			ReactiveAdapterRegistry adapterRegistry);1524160255;Constructor that also accepts a {@link ReactiveAdapterRegistry}._@param messageReaders readers to convert from the request body_@param adapterRegistry for adapting to other reactive types from Flux and Mono;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders,_			ReactiveAdapterRegistry adapterRegistry) {__		super(adapterRegistry)__		Assert.notEmpty(messageReaders, "At least one HttpMessageReader is required")__		Assert.notNull(adapterRegistry, "ReactiveAdapterRegistry is required")__		this.messageReaders = messageReaders__		this.supportedMediaTypes = messageReaders.stream()_				.flatMap(converter -> converter.getReadableMediaTypes().stream())_				.collect(Collectors.toList())__	};constructor,that,also,accepts,a,link,reactive,adapter,registry,param,message,readers,readers,to,convert,from,the,request,body,param,adapter,registry,for,adapting,to,other,reactive,types,from,flux,and,mono;protected,abstract,message,reader,argument,resolver,list,http,message,reader,message,readers,reactive,adapter,registry,adapter,registry,super,adapter,registry,assert,not,empty,message,readers,at,least,one,http,message,reader,is,required,assert,not,null,adapter,registry,reactive,adapter,registry,is,required,this,message,readers,message,readers,this,supported,media,types,message,readers,stream,flat,map,converter,converter,get,readable,media,types,stream,collect,collectors,to,list
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders, 			ReactiveAdapterRegistry adapterRegistry);1526354196;Constructor that also accepts a {@link ReactiveAdapterRegistry}._@param messageReaders readers to convert from the request body_@param adapterRegistry for adapting to other reactive types from Flux and Mono;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders,_			ReactiveAdapterRegistry adapterRegistry) {__		super(adapterRegistry)__		Assert.notEmpty(messageReaders, "At least one HttpMessageReader is required")__		Assert.notNull(adapterRegistry, "ReactiveAdapterRegistry is required")__		this.messageReaders = messageReaders__		this.supportedMediaTypes = messageReaders.stream()_				.flatMap(converter -> converter.getReadableMediaTypes().stream())_				.collect(Collectors.toList())__	};constructor,that,also,accepts,a,link,reactive,adapter,registry,param,message,readers,readers,to,convert,from,the,request,body,param,adapter,registry,for,adapting,to,other,reactive,types,from,flux,and,mono;protected,abstract,message,reader,argument,resolver,list,http,message,reader,message,readers,reactive,adapter,registry,adapter,registry,super,adapter,registry,assert,not,empty,message,readers,at,least,one,http,message,reader,is,required,assert,not,null,adapter,registry,reactive,adapter,registry,is,required,this,message,readers,message,readers,this,supported,media,types,message,readers,stream,flat,map,converter,converter,get,readable,media,types,stream,collect,collectors,to,list
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders, 			ReactiveAdapterRegistry adapterRegistry);1529721864;Constructor that also accepts a {@link ReactiveAdapterRegistry}._@param messageReaders readers to convert from the request body_@param adapterRegistry for adapting to other reactive types from Flux and Mono;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders,_			ReactiveAdapterRegistry adapterRegistry) {__		super(adapterRegistry)__		Assert.notEmpty(messageReaders, "At least one HttpMessageReader is required")__		Assert.notNull(adapterRegistry, "ReactiveAdapterRegistry is required")__		this.messageReaders = messageReaders__		this.supportedMediaTypes = messageReaders.stream()_				.flatMap(converter -> converter.getReadableMediaTypes().stream())_				.collect(Collectors.toList())__	};constructor,that,also,accepts,a,link,reactive,adapter,registry,param,message,readers,readers,to,convert,from,the,request,body,param,adapter,registry,for,adapting,to,other,reactive,types,from,flux,and,mono;protected,abstract,message,reader,argument,resolver,list,http,message,reader,message,readers,reactive,adapter,registry,adapter,registry,super,adapter,registry,assert,not,empty,message,readers,at,least,one,http,message,reader,is,required,assert,not,null,adapter,registry,reactive,adapter,registry,is,required,this,message,readers,message,readers,this,supported,media,types,message,readers,stream,flat,map,converter,converter,get,readable,media,types,stream,collect,collectors,to,list
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders, 			ReactiveAdapterRegistry adapterRegistry);1530174524;Constructor that also accepts a {@link ReactiveAdapterRegistry}._@param messageReaders readers to convert from the request body_@param adapterRegistry for adapting to other reactive types from Flux and Mono;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> messageReaders,_			ReactiveAdapterRegistry adapterRegistry) {__		super(adapterRegistry)__		Assert.notEmpty(messageReaders, "At least one HttpMessageReader is required")__		Assert.notNull(adapterRegistry, "ReactiveAdapterRegistry is required")__		this.messageReaders = messageReaders__		this.supportedMediaTypes = messageReaders.stream()_				.flatMap(converter -> converter.getReadableMediaTypes().stream())_				.collect(Collectors.toList())__	};constructor,that,also,accepts,a,link,reactive,adapter,registry,param,message,readers,readers,to,convert,from,the,request,body,param,adapter,registry,for,adapting,to,other,reactive,types,from,flux,and,mono;protected,abstract,message,reader,argument,resolver,list,http,message,reader,message,readers,reactive,adapter,registry,adapter,registry,super,adapter,registry,assert,not,empty,message,readers,at,least,one,http,message,reader,is,required,assert,not,null,adapter,registry,reactive,adapter,registry,is,required,this,message,readers,message,readers,this,supported,media,types,message,readers,stream,flat,map,converter,converter,get,readable,media,types,stream,collect,collectors,to,list
AbstractMessageReaderArgumentResolver -> public List<HttpMessageReader<?>> getMessageReaders();1485986572;Return the configured message converters.;public List<HttpMessageReader<?>> getMessageReaders() {_		return this.messageReaders__	};return,the,configured,message,converters;public,list,http,message,reader,get,message,readers,return,this,message,readers
AbstractMessageReaderArgumentResolver -> public List<HttpMessageReader<?>> getMessageReaders();1489433888;Return the configured message converters.;public List<HttpMessageReader<?>> getMessageReaders() {_		return this.messageReaders__	};return,the,configured,message,converters;public,list,http,message,reader,get,message,readers,return,this,message,readers
AbstractMessageReaderArgumentResolver -> public List<HttpMessageReader<?>> getMessageReaders();1489535791;Return the configured message converters.;public List<HttpMessageReader<?>> getMessageReaders() {_		return this.messageReaders__	};return,the,configured,message,converters;public,list,http,message,reader,get,message,readers,return,this,message,readers
AbstractMessageReaderArgumentResolver -> public List<HttpMessageReader<?>> getMessageReaders();1490392946;Return the configured message converters.;public List<HttpMessageReader<?>> getMessageReaders() {_		return this.messageReaders__	};return,the,configured,message,converters;public,list,http,message,reader,get,message,readers,return,this,message,readers
AbstractMessageReaderArgumentResolver -> public List<HttpMessageReader<?>> getMessageReaders();1491833276;Return the configured message converters.;public List<HttpMessageReader<?>> getMessageReaders() {_		return this.messageReaders__	};return,the,configured,message,converters;public,list,http,message,reader,get,message,readers,return,this,message,readers
AbstractMessageReaderArgumentResolver -> public List<HttpMessageReader<?>> getMessageReaders();1491907149;Return the configured message converters.;public List<HttpMessageReader<?>> getMessageReaders() {_		return this.messageReaders__	};return,the,configured,message,converters;public,list,http,message,reader,get,message,readers,return,this,message,readers
AbstractMessageReaderArgumentResolver -> public List<HttpMessageReader<?>> getMessageReaders();1492090594;Return the configured message converters.;public List<HttpMessageReader<?>> getMessageReaders() {_		return this.messageReaders__	};return,the,configured,message,converters;public,list,http,message,reader,get,message,readers,return,this,message,readers
AbstractMessageReaderArgumentResolver -> public List<HttpMessageReader<?>> getMessageReaders();1492168700;Return the configured message converters.;public List<HttpMessageReader<?>> getMessageReaders() {_		return this.messageReaders__	};return,the,configured,message,converters;public,list,http,message,reader,get,message,readers,return,this,message,readers
AbstractMessageReaderArgumentResolver -> public List<HttpMessageReader<?>> getMessageReaders();1494008983;Return the configured message converters.;public List<HttpMessageReader<?>> getMessageReaders() {_		return this.messageReaders__	};return,the,configured,message,converters;public,list,http,message,reader,get,message,readers,return,this,message,readers
AbstractMessageReaderArgumentResolver -> public List<HttpMessageReader<?>> getMessageReaders();1494019148;Return the configured message converters.;public List<HttpMessageReader<?>> getMessageReaders() {_		return this.messageReaders__	};return,the,configured,message,converters;public,list,http,message,reader,get,message,readers,return,this,message,readers
AbstractMessageReaderArgumentResolver -> public List<HttpMessageReader<?>> getMessageReaders();1495868221;Return the configured message converters.;public List<HttpMessageReader<?>> getMessageReaders() {_		return this.messageReaders__	};return,the,configured,message,converters;public,list,http,message,reader,get,message,readers,return,this,message,readers
AbstractMessageReaderArgumentResolver -> public List<HttpMessageReader<?>> getMessageReaders();1496837955;Return the configured message converters.;public List<HttpMessageReader<?>> getMessageReaders() {_		return this.messageReaders__	};return,the,configured,message,converters;public,list,http,message,reader,get,message,readers,return,this,message,readers
AbstractMessageReaderArgumentResolver -> public List<HttpMessageReader<?>> getMessageReaders();1499937094;Return the configured message converters.;public List<HttpMessageReader<?>> getMessageReaders() {_		return this.messageReaders__	};return,the,configured,message,converters;public,list,http,message,reader,get,message,readers,return,this,message,readers
AbstractMessageReaderArgumentResolver -> public List<HttpMessageReader<?>> getMessageReaders();1510841578;Return the configured message converters.;public List<HttpMessageReader<?>> getMessageReaders() {_		return this.messageReaders__	};return,the,configured,message,converters;public,list,http,message,reader,get,message,readers,return,this,message,readers
AbstractMessageReaderArgumentResolver -> public List<HttpMessageReader<?>> getMessageReaders();1511215342;Return the configured message converters.;public List<HttpMessageReader<?>> getMessageReaders() {_		return this.messageReaders__	};return,the,configured,message,converters;public,list,http,message,reader,get,message,readers,return,this,message,readers
AbstractMessageReaderArgumentResolver -> public List<HttpMessageReader<?>> getMessageReaders();1524002283;Return the configured message converters.;public List<HttpMessageReader<?>> getMessageReaders() {_		return this.messageReaders__	};return,the,configured,message,converters;public,list,http,message,reader,get,message,readers,return,this,message,readers
AbstractMessageReaderArgumentResolver -> public List<HttpMessageReader<?>> getMessageReaders();1524002283;Return the configured message converters.;public List<HttpMessageReader<?>> getMessageReaders() {_		return this.messageReaders__	};return,the,configured,message,converters;public,list,http,message,reader,get,message,readers,return,this,message,readers
AbstractMessageReaderArgumentResolver -> public List<HttpMessageReader<?>> getMessageReaders();1524160255;Return the configured message converters.;public List<HttpMessageReader<?>> getMessageReaders() {_		return this.messageReaders__	};return,the,configured,message,converters;public,list,http,message,reader,get,message,readers,return,this,message,readers
AbstractMessageReaderArgumentResolver -> public List<HttpMessageReader<?>> getMessageReaders();1526354196;Return the configured message converters.;public List<HttpMessageReader<?>> getMessageReaders() {_		return this.messageReaders__	};return,the,configured,message,converters;public,list,http,message,reader,get,message,readers,return,this,message,readers
AbstractMessageReaderArgumentResolver -> public List<HttpMessageReader<?>> getMessageReaders();1529721864;Return the configured message converters.;public List<HttpMessageReader<?>> getMessageReaders() {_		return this.messageReaders__	};return,the,configured,message,converters;public,list,http,message,reader,get,message,readers,return,this,message,readers
AbstractMessageReaderArgumentResolver -> public List<HttpMessageReader<?>> getMessageReaders();1530174524;Return the configured message converters.;public List<HttpMessageReader<?>> getMessageReaders() {_		return this.messageReaders__	};return,the,configured,message,converters;public,list,http,message,reader,get,message,readers,return,this,message,readers
AbstractMessageReaderArgumentResolver -> public List<HttpMessageReader<?>> getMessageReaders();1530190293;Return the configured message converters.;public List<HttpMessageReader<?>> getMessageReaders() {_		return this.messageReaders__	};return,the,configured,message,converters;public,list,http,message,reader,get,message,readers,return,this,message,readers
AbstractMessageReaderArgumentResolver -> public List<HttpMessageReader<?>> getMessageReaders();1530793633;Return the configured message converters.;public List<HttpMessageReader<?>> getMessageReaders() {_		return this.messageReaders__	};return,the,configured,message,converters;public,list,http,message,reader,get,message,readers,return,this,message,readers
AbstractMessageReaderArgumentResolver -> public List<HttpMessageReader<?>> getMessageReaders();1530793695;Return the configured message converters.;public List<HttpMessageReader<?>> getMessageReaders() {_		return this.messageReaders__	};return,the,configured,message,converters;public,list,http,message,reader,get,message,readers,return,this,message,readers
AbstractMessageReaderArgumentResolver -> public List<HttpMessageReader<?>> getMessageReaders();1541189993;Return the configured message converters.;public List<HttpMessageReader<?>> getMessageReaders() {_		return this.messageReaders__	};return,the,configured,message,converters;public,list,http,message,reader,get,message,readers,return,this,message,readers
AbstractMessageReaderArgumentResolver -> public List<HttpMessageReader<?>> getMessageReaders();1542829302;Return the configured message converters.;public List<HttpMessageReader<?>> getMessageReaders() {_		return this.messageReaders__	};return,the,configured,message,converters;public,list,http,message,reader,get,message,readers,return,this,message,readers
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<ServerHttpMessageReader<?>> messageReaders, 			ReactiveAdapterRegistry adapterRegistry);1490109321;Constructor that also accepts a {@link ReactiveAdapterRegistry}._@param messageReaders readers to convert from the request body_@param adapterRegistry for adapting to other reactive types from Flux and Mono;protected AbstractMessageReaderArgumentResolver(List<ServerHttpMessageReader<?>> messageReaders,_			ReactiveAdapterRegistry adapterRegistry) {__		super(adapterRegistry)__		Assert.notEmpty(messageReaders, "At least one HttpMessageReader is required.")__		Assert.notNull(adapterRegistry, "'adapterRegistry' is required")__		this.messageReaders = messageReaders__		this.supportedMediaTypes = messageReaders.stream()_				.flatMap(converter -> converter.getReadableMediaTypes().stream())_				.collect(Collectors.toList())__	};constructor,that,also,accepts,a,link,reactive,adapter,registry,param,message,readers,readers,to,convert,from,the,request,body,param,adapter,registry,for,adapting,to,other,reactive,types,from,flux,and,mono;protected,abstract,message,reader,argument,resolver,list,server,http,message,reader,message,readers,reactive,adapter,registry,adapter,registry,super,adapter,registry,assert,not,empty,message,readers,at,least,one,http,message,reader,is,required,assert,not,null,adapter,registry,adapter,registry,is,required,this,message,readers,message,readers,this,supported,media,types,message,readers,stream,flat,map,converter,converter,get,readable,media,types,stream,collect,collectors,to,list
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<ServerHttpMessageReader<?>> messageReaders, 			ReactiveAdapterRegistry adapterRegistry);1490354145;Constructor that also accepts a {@link ReactiveAdapterRegistry}._@param messageReaders readers to convert from the request body_@param adapterRegistry for adapting to other reactive types from Flux and Mono;protected AbstractMessageReaderArgumentResolver(List<ServerHttpMessageReader<?>> messageReaders,_			ReactiveAdapterRegistry adapterRegistry) {__		super(adapterRegistry)__		Assert.notEmpty(messageReaders, "At least one HttpMessageReader is required.")__		Assert.notNull(adapterRegistry, "'adapterRegistry' is required")__		this.messageReaders = messageReaders__		this.supportedMediaTypes = messageReaders.stream()_				.flatMap(converter -> converter.getReadableMediaTypes().stream())_				.collect(Collectors.toList())__	};constructor,that,also,accepts,a,link,reactive,adapter,registry,param,message,readers,readers,to,convert,from,the,request,body,param,adapter,registry,for,adapting,to,other,reactive,types,from,flux,and,mono;protected,abstract,message,reader,argument,resolver,list,server,http,message,reader,message,readers,reactive,adapter,registry,adapter,registry,super,adapter,registry,assert,not,empty,message,readers,at,least,one,http,message,reader,is,required,assert,not,null,adapter,registry,adapter,registry,is,required,this,message,readers,message,readers,this,supported,media,types,message,readers,stream,flat,map,converter,converter,get,readable,media,types,stream,collect,collectors,to,list
AbstractMessageReaderArgumentResolver -> protected Mono<Object> readBody(MethodParameter bodyParameter, boolean isBodyRequired, 			BindingContext bindingContext, ServerWebExchange exchange);1510841578;Read the body from a method argument with {@link HttpMessageReader}._@param bodyParameter the {@link MethodParameter} to read_@param isBodyRequired true if the body is required_@param bindingContext the binding context to use_@param exchange the current exchange_@return the body_@see #readBody(MethodParameter, MethodParameter, boolean, BindingContext, ServerWebExchange);protected Mono<Object> readBody(MethodParameter bodyParameter, boolean isBodyRequired,_			BindingContext bindingContext, ServerWebExchange exchange) {_		return this.readBody(bodyParameter, null, isBodyRequired, bindingContext, exchange)__	};read,the,body,from,a,method,argument,with,link,http,message,reader,param,body,parameter,the,link,method,parameter,to,read,param,is,body,required,true,if,the,body,is,required,param,binding,context,the,binding,context,to,use,param,exchange,the,current,exchange,return,the,body,see,read,body,method,parameter,method,parameter,boolean,binding,context,server,web,exchange;protected,mono,object,read,body,method,parameter,body,parameter,boolean,is,body,required,binding,context,binding,context,server,web,exchange,exchange,return,this,read,body,body,parameter,null,is,body,required,binding,context,exchange
AbstractMessageReaderArgumentResolver -> protected Mono<Object> readBody(MethodParameter bodyParameter, boolean isBodyRequired, 			BindingContext bindingContext, ServerWebExchange exchange);1511215342;Read the body from a method argument with {@link HttpMessageReader}._@param bodyParameter the {@link MethodParameter} to read_@param isBodyRequired true if the body is required_@param bindingContext the binding context to use_@param exchange the current exchange_@return the body_@see #readBody(MethodParameter, MethodParameter, boolean, BindingContext, ServerWebExchange);protected Mono<Object> readBody(MethodParameter bodyParameter, boolean isBodyRequired,_			BindingContext bindingContext, ServerWebExchange exchange) {_		return this.readBody(bodyParameter, null, isBodyRequired, bindingContext, exchange)__	};read,the,body,from,a,method,argument,with,link,http,message,reader,param,body,parameter,the,link,method,parameter,to,read,param,is,body,required,true,if,the,body,is,required,param,binding,context,the,binding,context,to,use,param,exchange,the,current,exchange,return,the,body,see,read,body,method,parameter,method,parameter,boolean,binding,context,server,web,exchange;protected,mono,object,read,body,method,parameter,body,parameter,boolean,is,body,required,binding,context,binding,context,server,web,exchange,exchange,return,this,read,body,body,parameter,null,is,body,required,binding,context,exchange
AbstractMessageReaderArgumentResolver -> protected Mono<Object> readBody(MethodParameter bodyParameter, boolean isBodyRequired, 			BindingContext bindingContext, ServerWebExchange exchange);1524002283;Read the body from a method argument with {@link HttpMessageReader}._@param bodyParameter the {@link MethodParameter} to read_@param isBodyRequired true if the body is required_@param bindingContext the binding context to use_@param exchange the current exchange_@return the body_@see #readBody(MethodParameter, MethodParameter, boolean, BindingContext, ServerWebExchange);protected Mono<Object> readBody(MethodParameter bodyParameter, boolean isBodyRequired,_			BindingContext bindingContext, ServerWebExchange exchange) {_		return this.readBody(bodyParameter, null, isBodyRequired, bindingContext, exchange)__	};read,the,body,from,a,method,argument,with,link,http,message,reader,param,body,parameter,the,link,method,parameter,to,read,param,is,body,required,true,if,the,body,is,required,param,binding,context,the,binding,context,to,use,param,exchange,the,current,exchange,return,the,body,see,read,body,method,parameter,method,parameter,boolean,binding,context,server,web,exchange;protected,mono,object,read,body,method,parameter,body,parameter,boolean,is,body,required,binding,context,binding,context,server,web,exchange,exchange,return,this,read,body,body,parameter,null,is,body,required,binding,context,exchange
AbstractMessageReaderArgumentResolver -> protected Mono<Object> readBody(MethodParameter bodyParameter, boolean isBodyRequired, 			BindingContext bindingContext, ServerWebExchange exchange);1524002283;Read the body from a method argument with {@link HttpMessageReader}._@param bodyParameter the {@link MethodParameter} to read_@param isBodyRequired true if the body is required_@param bindingContext the binding context to use_@param exchange the current exchange_@return the body_@see #readBody(MethodParameter, MethodParameter, boolean, BindingContext, ServerWebExchange);protected Mono<Object> readBody(MethodParameter bodyParameter, boolean isBodyRequired,_			BindingContext bindingContext, ServerWebExchange exchange) {_		return this.readBody(bodyParameter, null, isBodyRequired, bindingContext, exchange)__	};read,the,body,from,a,method,argument,with,link,http,message,reader,param,body,parameter,the,link,method,parameter,to,read,param,is,body,required,true,if,the,body,is,required,param,binding,context,the,binding,context,to,use,param,exchange,the,current,exchange,return,the,body,see,read,body,method,parameter,method,parameter,boolean,binding,context,server,web,exchange;protected,mono,object,read,body,method,parameter,body,parameter,boolean,is,body,required,binding,context,binding,context,server,web,exchange,exchange,return,this,read,body,body,parameter,null,is,body,required,binding,context,exchange
AbstractMessageReaderArgumentResolver -> protected Mono<Object> readBody(MethodParameter bodyParameter, boolean isBodyRequired, 			BindingContext bindingContext, ServerWebExchange exchange);1524160255;Read the body from a method argument with {@link HttpMessageReader}._@param bodyParameter the {@link MethodParameter} to read_@param isBodyRequired true if the body is required_@param bindingContext the binding context to use_@param exchange the current exchange_@return the body_@see #readBody(MethodParameter, MethodParameter, boolean, BindingContext, ServerWebExchange);protected Mono<Object> readBody(MethodParameter bodyParameter, boolean isBodyRequired,_			BindingContext bindingContext, ServerWebExchange exchange) {_		return this.readBody(bodyParameter, null, isBodyRequired, bindingContext, exchange)__	};read,the,body,from,a,method,argument,with,link,http,message,reader,param,body,parameter,the,link,method,parameter,to,read,param,is,body,required,true,if,the,body,is,required,param,binding,context,the,binding,context,to,use,param,exchange,the,current,exchange,return,the,body,see,read,body,method,parameter,method,parameter,boolean,binding,context,server,web,exchange;protected,mono,object,read,body,method,parameter,body,parameter,boolean,is,body,required,binding,context,binding,context,server,web,exchange,exchange,return,this,read,body,body,parameter,null,is,body,required,binding,context,exchange
AbstractMessageReaderArgumentResolver -> protected Mono<Object> readBody(MethodParameter bodyParameter, boolean isBodyRequired, 			BindingContext bindingContext, ServerWebExchange exchange);1526354196;Read the body from a method argument with {@link HttpMessageReader}._@param bodyParameter the {@link MethodParameter} to read_@param isBodyRequired true if the body is required_@param bindingContext the binding context to use_@param exchange the current exchange_@return the body_@see #readBody(MethodParameter, MethodParameter, boolean, BindingContext, ServerWebExchange);protected Mono<Object> readBody(MethodParameter bodyParameter, boolean isBodyRequired,_			BindingContext bindingContext, ServerWebExchange exchange) {_		return this.readBody(bodyParameter, null, isBodyRequired, bindingContext, exchange)__	};read,the,body,from,a,method,argument,with,link,http,message,reader,param,body,parameter,the,link,method,parameter,to,read,param,is,body,required,true,if,the,body,is,required,param,binding,context,the,binding,context,to,use,param,exchange,the,current,exchange,return,the,body,see,read,body,method,parameter,method,parameter,boolean,binding,context,server,web,exchange;protected,mono,object,read,body,method,parameter,body,parameter,boolean,is,body,required,binding,context,binding,context,server,web,exchange,exchange,return,this,read,body,body,parameter,null,is,body,required,binding,context,exchange
AbstractMessageReaderArgumentResolver -> protected Mono<Object> readBody(MethodParameter bodyParameter, boolean isBodyRequired, 			BindingContext bindingContext, ServerWebExchange exchange);1529721864;Read the body from a method argument with {@link HttpMessageReader}._@param bodyParameter the {@link MethodParameter} to read_@param isBodyRequired true if the body is required_@param bindingContext the binding context to use_@param exchange the current exchange_@return the body_@see #readBody(MethodParameter, MethodParameter, boolean, BindingContext, ServerWebExchange);protected Mono<Object> readBody(MethodParameter bodyParameter, boolean isBodyRequired,_			BindingContext bindingContext, ServerWebExchange exchange) {_		return this.readBody(bodyParameter, null, isBodyRequired, bindingContext, exchange)__	};read,the,body,from,a,method,argument,with,link,http,message,reader,param,body,parameter,the,link,method,parameter,to,read,param,is,body,required,true,if,the,body,is,required,param,binding,context,the,binding,context,to,use,param,exchange,the,current,exchange,return,the,body,see,read,body,method,parameter,method,parameter,boolean,binding,context,server,web,exchange;protected,mono,object,read,body,method,parameter,body,parameter,boolean,is,body,required,binding,context,binding,context,server,web,exchange,exchange,return,this,read,body,body,parameter,null,is,body,required,binding,context,exchange
AbstractMessageReaderArgumentResolver -> protected Mono<Object> readBody(MethodParameter bodyParameter, boolean isBodyRequired, 			BindingContext bindingContext, ServerWebExchange exchange);1530174524;Read the body from a method argument with {@link HttpMessageReader}._@param bodyParameter the {@link MethodParameter} to read_@param isBodyRequired true if the body is required_@param bindingContext the binding context to use_@param exchange the current exchange_@return the body_@see #readBody(MethodParameter, MethodParameter, boolean, BindingContext, ServerWebExchange);protected Mono<Object> readBody(MethodParameter bodyParameter, boolean isBodyRequired,_			BindingContext bindingContext, ServerWebExchange exchange) {_		return this.readBody(bodyParameter, null, isBodyRequired, bindingContext, exchange)__	};read,the,body,from,a,method,argument,with,link,http,message,reader,param,body,parameter,the,link,method,parameter,to,read,param,is,body,required,true,if,the,body,is,required,param,binding,context,the,binding,context,to,use,param,exchange,the,current,exchange,return,the,body,see,read,body,method,parameter,method,parameter,boolean,binding,context,server,web,exchange;protected,mono,object,read,body,method,parameter,body,parameter,boolean,is,body,required,binding,context,binding,context,server,web,exchange,exchange,return,this,read,body,body,parameter,null,is,body,required,binding,context,exchange
AbstractMessageReaderArgumentResolver -> protected Mono<Object> readBody(MethodParameter bodyParameter, boolean isBodyRequired, 			BindingContext bindingContext, ServerWebExchange exchange);1530190293;Read the body from a method argument with {@link HttpMessageReader}._@param bodyParameter the {@link MethodParameter} to read_@param isBodyRequired true if the body is required_@param bindingContext the binding context to use_@param exchange the current exchange_@return the body_@see #readBody(MethodParameter, MethodParameter, boolean, BindingContext, ServerWebExchange);protected Mono<Object> readBody(MethodParameter bodyParameter, boolean isBodyRequired,_			BindingContext bindingContext, ServerWebExchange exchange) {__		return this.readBody(bodyParameter, null, isBodyRequired, bindingContext, exchange)__	};read,the,body,from,a,method,argument,with,link,http,message,reader,param,body,parameter,the,link,method,parameter,to,read,param,is,body,required,true,if,the,body,is,required,param,binding,context,the,binding,context,to,use,param,exchange,the,current,exchange,return,the,body,see,read,body,method,parameter,method,parameter,boolean,binding,context,server,web,exchange;protected,mono,object,read,body,method,parameter,body,parameter,boolean,is,body,required,binding,context,binding,context,server,web,exchange,exchange,return,this,read,body,body,parameter,null,is,body,required,binding,context,exchange
AbstractMessageReaderArgumentResolver -> protected Mono<Object> readBody(MethodParameter bodyParameter, boolean isBodyRequired, 			BindingContext bindingContext, ServerWebExchange exchange);1530793633;Read the body from a method argument with {@link HttpMessageReader}._@param bodyParameter the {@link MethodParameter} to read_@param isBodyRequired true if the body is required_@param bindingContext the binding context to use_@param exchange the current exchange_@return the body_@see #readBody(MethodParameter, MethodParameter, boolean, BindingContext, ServerWebExchange);protected Mono<Object> readBody(MethodParameter bodyParameter, boolean isBodyRequired,_			BindingContext bindingContext, ServerWebExchange exchange) {__		return this.readBody(bodyParameter, null, isBodyRequired, bindingContext, exchange)__	};read,the,body,from,a,method,argument,with,link,http,message,reader,param,body,parameter,the,link,method,parameter,to,read,param,is,body,required,true,if,the,body,is,required,param,binding,context,the,binding,context,to,use,param,exchange,the,current,exchange,return,the,body,see,read,body,method,parameter,method,parameter,boolean,binding,context,server,web,exchange;protected,mono,object,read,body,method,parameter,body,parameter,boolean,is,body,required,binding,context,binding,context,server,web,exchange,exchange,return,this,read,body,body,parameter,null,is,body,required,binding,context,exchange
AbstractMessageReaderArgumentResolver -> protected Mono<Object> readBody(MethodParameter bodyParameter, boolean isBodyRequired, 			BindingContext bindingContext, ServerWebExchange exchange);1530793695;Read the body from a method argument with {@link HttpMessageReader}._@param bodyParameter the {@link MethodParameter} to read_@param isBodyRequired true if the body is required_@param bindingContext the binding context to use_@param exchange the current exchange_@return the body_@see #readBody(MethodParameter, MethodParameter, boolean, BindingContext, ServerWebExchange);protected Mono<Object> readBody(MethodParameter bodyParameter, boolean isBodyRequired,_			BindingContext bindingContext, ServerWebExchange exchange) {__		return this.readBody(bodyParameter, null, isBodyRequired, bindingContext, exchange)__	};read,the,body,from,a,method,argument,with,link,http,message,reader,param,body,parameter,the,link,method,parameter,to,read,param,is,body,required,true,if,the,body,is,required,param,binding,context,the,binding,context,to,use,param,exchange,the,current,exchange,return,the,body,see,read,body,method,parameter,method,parameter,boolean,binding,context,server,web,exchange;protected,mono,object,read,body,method,parameter,body,parameter,boolean,is,body,required,binding,context,binding,context,server,web,exchange,exchange,return,this,read,body,body,parameter,null,is,body,required,binding,context,exchange
AbstractMessageReaderArgumentResolver -> protected Mono<Object> readBody(MethodParameter bodyParameter, boolean isBodyRequired, 			BindingContext bindingContext, ServerWebExchange exchange);1541189993;Read the body from a method argument with {@link HttpMessageReader}._@param bodyParameter the {@link MethodParameter} to read_@param isBodyRequired true if the body is required_@param bindingContext the binding context to use_@param exchange the current exchange_@return the body_@see #readBody(MethodParameter, MethodParameter, boolean, BindingContext, ServerWebExchange);protected Mono<Object> readBody(MethodParameter bodyParameter, boolean isBodyRequired,_			BindingContext bindingContext, ServerWebExchange exchange) {__		return this.readBody(bodyParameter, null, isBodyRequired, bindingContext, exchange)__	};read,the,body,from,a,method,argument,with,link,http,message,reader,param,body,parameter,the,link,method,parameter,to,read,param,is,body,required,true,if,the,body,is,required,param,binding,context,the,binding,context,to,use,param,exchange,the,current,exchange,return,the,body,see,read,body,method,parameter,method,parameter,boolean,binding,context,server,web,exchange;protected,mono,object,read,body,method,parameter,body,parameter,boolean,is,body,required,binding,context,binding,context,server,web,exchange,exchange,return,this,read,body,body,parameter,null,is,body,required,binding,context,exchange
AbstractMessageReaderArgumentResolver -> protected Mono<Object> readBody(MethodParameter bodyParameter, boolean isBodyRequired, 			BindingContext bindingContext, ServerWebExchange exchange);1542829302;Read the body from a method argument with {@link HttpMessageReader}._@param bodyParameter the {@link MethodParameter} to read_@param isBodyRequired true if the body is required_@param bindingContext the binding context to use_@param exchange the current exchange_@return the body_@see #readBody(MethodParameter, MethodParameter, boolean, BindingContext, ServerWebExchange);protected Mono<Object> readBody(MethodParameter bodyParameter, boolean isBodyRequired,_			BindingContext bindingContext, ServerWebExchange exchange) {__		return this.readBody(bodyParameter, null, isBodyRequired, bindingContext, exchange)__	};read,the,body,from,a,method,argument,with,link,http,message,reader,param,body,parameter,the,link,method,parameter,to,read,param,is,body,required,true,if,the,body,is,required,param,binding,context,the,binding,context,to,use,param,exchange,the,current,exchange,return,the,body,see,read,body,method,parameter,method,parameter,boolean,binding,context,server,web,exchange;protected,mono,object,read,body,method,parameter,body,parameter,boolean,is,body,required,binding,context,binding,context,server,web,exchange,exchange,return,this,read,body,body,parameter,null,is,body,required,binding,context,exchange
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver( 			List<HttpMessageReader<?>> messageReaders, ReactiveAdapterRegistry adapterRegistry);1530190293;Constructor that also accepts a {@link ReactiveAdapterRegistry}._@param messageReaders readers to convert from the request body_@param adapterRegistry for adapting to other reactive types from Flux and Mono;protected AbstractMessageReaderArgumentResolver(_			List<HttpMessageReader<?>> messageReaders, ReactiveAdapterRegistry adapterRegistry) {__		super(adapterRegistry)__		Assert.notEmpty(messageReaders, "At least one HttpMessageReader is required")__		Assert.notNull(adapterRegistry, "ReactiveAdapterRegistry is required")__		this.messageReaders = messageReaders__		this.supportedMediaTypes = messageReaders.stream()_				.flatMap(converter -> converter.getReadableMediaTypes().stream())_				.collect(Collectors.toList())__	};constructor,that,also,accepts,a,link,reactive,adapter,registry,param,message,readers,readers,to,convert,from,the,request,body,param,adapter,registry,for,adapting,to,other,reactive,types,from,flux,and,mono;protected,abstract,message,reader,argument,resolver,list,http,message,reader,message,readers,reactive,adapter,registry,adapter,registry,super,adapter,registry,assert,not,empty,message,readers,at,least,one,http,message,reader,is,required,assert,not,null,adapter,registry,reactive,adapter,registry,is,required,this,message,readers,message,readers,this,supported,media,types,message,readers,stream,flat,map,converter,converter,get,readable,media,types,stream,collect,collectors,to,list
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver( 			List<HttpMessageReader<?>> messageReaders, ReactiveAdapterRegistry adapterRegistry);1530793633;Constructor that also accepts a {@link ReactiveAdapterRegistry}._@param messageReaders readers to convert from the request body_@param adapterRegistry for adapting to other reactive types from Flux and Mono;protected AbstractMessageReaderArgumentResolver(_			List<HttpMessageReader<?>> messageReaders, ReactiveAdapterRegistry adapterRegistry) {__		super(adapterRegistry)__		Assert.notEmpty(messageReaders, "At least one HttpMessageReader is required")__		Assert.notNull(adapterRegistry, "ReactiveAdapterRegistry is required")__		this.messageReaders = messageReaders__		this.supportedMediaTypes = messageReaders.stream()_				.flatMap(converter -> converter.getReadableMediaTypes().stream())_				.collect(Collectors.toList())__	};constructor,that,also,accepts,a,link,reactive,adapter,registry,param,message,readers,readers,to,convert,from,the,request,body,param,adapter,registry,for,adapting,to,other,reactive,types,from,flux,and,mono;protected,abstract,message,reader,argument,resolver,list,http,message,reader,message,readers,reactive,adapter,registry,adapter,registry,super,adapter,registry,assert,not,empty,message,readers,at,least,one,http,message,reader,is,required,assert,not,null,adapter,registry,reactive,adapter,registry,is,required,this,message,readers,message,readers,this,supported,media,types,message,readers,stream,flat,map,converter,converter,get,readable,media,types,stream,collect,collectors,to,list
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver( 			List<HttpMessageReader<?>> messageReaders, ReactiveAdapterRegistry adapterRegistry);1530793695;Constructor that also accepts a {@link ReactiveAdapterRegistry}._@param messageReaders readers to convert from the request body_@param adapterRegistry for adapting to other reactive types from Flux and Mono;protected AbstractMessageReaderArgumentResolver(_			List<HttpMessageReader<?>> messageReaders, ReactiveAdapterRegistry adapterRegistry) {__		super(adapterRegistry)__		Assert.notEmpty(messageReaders, "At least one HttpMessageReader is required")__		Assert.notNull(adapterRegistry, "ReactiveAdapterRegistry is required")__		this.messageReaders = messageReaders__		this.supportedMediaTypes = messageReaders.stream()_				.flatMap(converter -> converter.getReadableMediaTypes().stream())_				.collect(Collectors.toList())__	};constructor,that,also,accepts,a,link,reactive,adapter,registry,param,message,readers,readers,to,convert,from,the,request,body,param,adapter,registry,for,adapting,to,other,reactive,types,from,flux,and,mono;protected,abstract,message,reader,argument,resolver,list,http,message,reader,message,readers,reactive,adapter,registry,adapter,registry,super,adapter,registry,assert,not,empty,message,readers,at,least,one,http,message,reader,is,required,assert,not,null,adapter,registry,reactive,adapter,registry,is,required,this,message,readers,message,readers,this,supported,media,types,message,readers,stream,flat,map,converter,converter,get,readable,media,types,stream,collect,collectors,to,list
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver( 			List<HttpMessageReader<?>> messageReaders, ReactiveAdapterRegistry adapterRegistry);1541189993;Constructor that also accepts a {@link ReactiveAdapterRegistry}._@param messageReaders readers to convert from the request body_@param adapterRegistry for adapting to other reactive types from Flux and Mono;protected AbstractMessageReaderArgumentResolver(_			List<HttpMessageReader<?>> messageReaders, ReactiveAdapterRegistry adapterRegistry) {__		super(adapterRegistry)__		Assert.notEmpty(messageReaders, "At least one HttpMessageReader is required")__		Assert.notNull(adapterRegistry, "ReactiveAdapterRegistry is required")__		this.messageReaders = messageReaders__		this.supportedMediaTypes = messageReaders.stream()_				.flatMap(converter -> converter.getReadableMediaTypes().stream())_				.collect(Collectors.toList())__	};constructor,that,also,accepts,a,link,reactive,adapter,registry,param,message,readers,readers,to,convert,from,the,request,body,param,adapter,registry,for,adapting,to,other,reactive,types,from,flux,and,mono;protected,abstract,message,reader,argument,resolver,list,http,message,reader,message,readers,reactive,adapter,registry,adapter,registry,super,adapter,registry,assert,not,empty,message,readers,at,least,one,http,message,reader,is,required,assert,not,null,adapter,registry,reactive,adapter,registry,is,required,this,message,readers,message,readers,this,supported,media,types,message,readers,stream,flat,map,converter,converter,get,readable,media,types,stream,collect,collectors,to,list
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver( 			List<HttpMessageReader<?>> messageReaders, ReactiveAdapterRegistry adapterRegistry);1542829302;Constructor that also accepts a {@link ReactiveAdapterRegistry}._@param messageReaders readers to convert from the request body_@param adapterRegistry for adapting to other reactive types from Flux and Mono;protected AbstractMessageReaderArgumentResolver(_			List<HttpMessageReader<?>> messageReaders, ReactiveAdapterRegistry adapterRegistry) {__		super(adapterRegistry)__		Assert.notEmpty(messageReaders, "At least one HttpMessageReader is required")__		Assert.notNull(adapterRegistry, "ReactiveAdapterRegistry is required")__		this.messageReaders = messageReaders__		this.supportedMediaTypes = messageReaders.stream()_				.flatMap(converter -> converter.getReadableMediaTypes().stream())_				.collect(Collectors.toList())__	};constructor,that,also,accepts,a,link,reactive,adapter,registry,param,message,readers,readers,to,convert,from,the,request,body,param,adapter,registry,for,adapting,to,other,reactive,types,from,flux,and,mono;protected,abstract,message,reader,argument,resolver,list,http,message,reader,message,readers,reactive,adapter,registry,adapter,registry,super,adapter,registry,assert,not,empty,message,readers,at,least,one,http,message,reader,is,required,assert,not,null,adapter,registry,reactive,adapter,registry,is,required,this,message,readers,message,readers,this,supported,media,types,message,readers,stream,flat,map,converter,converter,get,readable,media,types,stream,collect,collectors,to,list
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<ServerHttpMessageReader<?>> readers);1490109321;Constructor with {@link ServerHttpMessageReader}'s and a {@link Validator}._@param readers readers to convert from the request body;protected AbstractMessageReaderArgumentResolver(List<ServerHttpMessageReader<?>> readers) {_		this(readers, new ReactiveAdapterRegistry())__	};constructor,with,link,server,http,message,reader,s,and,a,link,validator,param,readers,readers,to,convert,from,the,request,body;protected,abstract,message,reader,argument,resolver,list,server,http,message,reader,readers,this,readers,new,reactive,adapter,registry
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<ServerHttpMessageReader<?>> readers);1490354145;Constructor with {@link ServerHttpMessageReader}'s and a {@link Validator}._@param readers readers to convert from the request body;protected AbstractMessageReaderArgumentResolver(List<ServerHttpMessageReader<?>> readers) {_		this(readers, new ReactiveAdapterRegistry())__	};constructor,with,link,server,http,message,reader,s,and,a,link,validator,param,readers,readers,to,convert,from,the,request,body;protected,abstract,message,reader,argument,resolver,list,server,http,message,reader,readers,this,readers,new,reactive,adapter,registry
AbstractMessageReaderArgumentResolver -> protected Mono<Object> readBody(MethodParameter bodyParameter, @Nullable MethodParameter actualParameter, 			boolean isBodyRequired, BindingContext bindingContext, ServerWebExchange exchange);1510841578;Read the body from a method argument with {@link HttpMessageReader}._@param bodyParameter the {@link MethodParameter} to read_@param actualParameter the actual {@link MethodParameter} to read_ could be different_from {@code bodyParameter} when processing {@code HttpEntity} for example_@param isBodyRequired true if the body is required_@param bindingContext the binding context to use_@param exchange the current exchange_@return the body_@since 5.0.2;protected Mono<Object> readBody(MethodParameter bodyParameter, @Nullable MethodParameter actualParameter,_			boolean isBodyRequired, BindingContext bindingContext, ServerWebExchange exchange) {__		ResolvableType bodyType = ResolvableType.forMethodParameter(bodyParameter)__		ResolvableType actualType = (actualParameter == null ?_				bodyType : ResolvableType.forMethodParameter(actualParameter))__		Class<?> resolvedType = bodyType.resolve()__		ReactiveAdapter adapter = (resolvedType != null ? getAdapterRegistry().getAdapter(resolvedType) : null)__		ResolvableType elementType = (adapter != null ? bodyType.getGeneric() : bodyType)___		ServerHttpRequest request = exchange.getRequest()__		ServerHttpResponse response = exchange.getResponse()___		MediaType contentType = request.getHeaders().getContentType()__		MediaType mediaType = (contentType != null ? contentType : MediaType.APPLICATION_OCTET_STREAM)___		for (HttpMessageReader<?> reader : getMessageReaders()) {_			if (reader.canRead(elementType, mediaType)) {_				Map<String, Object> readHints = Collections.emptyMap()__				if (adapter != null && adapter.isMultiValue()) {_					Flux<?> flux = reader.read(actualType, elementType, request, response, readHints)__					flux = flux.onErrorResume(ex -> Flux.error(handleReadError(bodyParameter, ex)))__					if (isBodyRequired || !adapter.supportsEmpty()) {_						flux = flux.switchIfEmpty(Flux.error(handleMissingBody(bodyParameter)))__					}_					Object[] hints = extractValidationHints(bodyParameter)__					if (hints != null) {_						flux = flux.doOnNext(target ->_								validate(target, hints, bodyParameter, bindingContext, exchange))__					}_					return Mono.just(adapter.fromPublisher(flux))__				}_				else {_					_					Mono<?> mono = reader.readMono(actualType, elementType, request, response, readHints)__					mono = mono.onErrorResume(ex -> Mono.error(handleReadError(bodyParameter, ex)))__					if (isBodyRequired || (adapter != null && !adapter.supportsEmpty())) {_						mono = mono.switchIfEmpty(Mono.error(handleMissingBody(bodyParameter)))__					}_					Object[] hints = extractValidationHints(bodyParameter)__					if (hints != null) {_						mono = mono.doOnNext(target ->_								validate(target, hints, bodyParameter, bindingContext, exchange))__					}_					if (adapter != null) {_						return Mono.just(adapter.fromPublisher(mono))__					}_					else {_						return Mono.from(mono)__					}_				}_			}_		}__		__		HttpMethod method = request.getMethod()__		if (contentType == null && method != null && SUPPORTED_METHODS.contains(method)) {_			Flux<DataBuffer> body = request.getBody().doOnNext(o -> {_				_				throw new UnsupportedMediaTypeStatusException(mediaType, this.supportedMediaTypes)__			})__			if (isBodyRequired || (adapter != null && !adapter.supportsEmpty())) {_				body = body.switchIfEmpty(Mono.error(handleMissingBody(bodyParameter)))__			}_			return (adapter != null ? Mono.just(adapter.fromPublisher(body)) : Mono.from(body))__		}__		return Mono.error(new UnsupportedMediaTypeStatusException(mediaType, this.supportedMediaTypes))__	};read,the,body,from,a,method,argument,with,link,http,message,reader,param,body,parameter,the,link,method,parameter,to,read,param,actual,parameter,the,actual,link,method,parameter,to,read,could,be,different,from,code,body,parameter,when,processing,code,http,entity,for,example,param,is,body,required,true,if,the,body,is,required,param,binding,context,the,binding,context,to,use,param,exchange,the,current,exchange,return,the,body,since,5,0,2;protected,mono,object,read,body,method,parameter,body,parameter,nullable,method,parameter,actual,parameter,boolean,is,body,required,binding,context,binding,context,server,web,exchange,exchange,resolvable,type,body,type,resolvable,type,for,method,parameter,body,parameter,resolvable,type,actual,type,actual,parameter,null,body,type,resolvable,type,for,method,parameter,actual,parameter,class,resolved,type,body,type,resolve,reactive,adapter,adapter,resolved,type,null,get,adapter,registry,get,adapter,resolved,type,null,resolvable,type,element,type,adapter,null,body,type,get,generic,body,type,server,http,request,request,exchange,get,request,server,http,response,response,exchange,get,response,media,type,content,type,request,get,headers,get,content,type,media,type,media,type,content,type,null,content,type,media,type,for,http,message,reader,reader,get,message,readers,if,reader,can,read,element,type,media,type,map,string,object,read,hints,collections,empty,map,if,adapter,null,adapter,is,multi,value,flux,flux,reader,read,actual,type,element,type,request,response,read,hints,flux,flux,on,error,resume,ex,flux,error,handle,read,error,body,parameter,ex,if,is,body,required,adapter,supports,empty,flux,flux,switch,if,empty,flux,error,handle,missing,body,body,parameter,object,hints,extract,validation,hints,body,parameter,if,hints,null,flux,flux,do,on,next,target,validate,target,hints,body,parameter,binding,context,exchange,return,mono,just,adapter,from,publisher,flux,else,mono,mono,reader,read,mono,actual,type,element,type,request,response,read,hints,mono,mono,on,error,resume,ex,mono,error,handle,read,error,body,parameter,ex,if,is,body,required,adapter,null,adapter,supports,empty,mono,mono,switch,if,empty,mono,error,handle,missing,body,body,parameter,object,hints,extract,validation,hints,body,parameter,if,hints,null,mono,mono,do,on,next,target,validate,target,hints,body,parameter,binding,context,exchange,if,adapter,null,return,mono,just,adapter,from,publisher,mono,else,return,mono,from,mono,http,method,method,request,get,method,if,content,type,null,method,null,contains,method,flux,data,buffer,body,request,get,body,do,on,next,o,throw,new,unsupported,media,type,status,exception,media,type,this,supported,media,types,if,is,body,required,adapter,null,adapter,supports,empty,body,body,switch,if,empty,mono,error,handle,missing,body,body,parameter,return,adapter,null,mono,just,adapter,from,publisher,body,mono,from,body,return,mono,error,new,unsupported,media,type,status,exception,media,type,this,supported,media,types
AbstractMessageReaderArgumentResolver -> protected Mono<Object> readBody(MethodParameter bodyParameter, @Nullable MethodParameter actualParameter, 			boolean isBodyRequired, BindingContext bindingContext, ServerWebExchange exchange);1511215342;Read the body from a method argument with {@link HttpMessageReader}._@param bodyParameter the {@link MethodParameter} to read_@param actualParameter the actual {@link MethodParameter} to read_ could be different_from {@code bodyParameter} when processing {@code HttpEntity} for example_@param isBodyRequired true if the body is required_@param bindingContext the binding context to use_@param exchange the current exchange_@return the body_@since 5.0.2;protected Mono<Object> readBody(MethodParameter bodyParameter, @Nullable MethodParameter actualParameter,_			boolean isBodyRequired, BindingContext bindingContext, ServerWebExchange exchange) {__		ResolvableType bodyType = ResolvableType.forMethodParameter(bodyParameter)__		ResolvableType actualType = (actualParameter == null ?_				bodyType : ResolvableType.forMethodParameter(actualParameter))__		Class<?> resolvedType = bodyType.resolve()__		ReactiveAdapter adapter = (resolvedType != null ? getAdapterRegistry().getAdapter(resolvedType) : null)__		ResolvableType elementType = (adapter != null ? bodyType.getGeneric() : bodyType)___		ServerHttpRequest request = exchange.getRequest()__		ServerHttpResponse response = exchange.getResponse()___		MediaType contentType = request.getHeaders().getContentType()__		MediaType mediaType = (contentType != null ? contentType : MediaType.APPLICATION_OCTET_STREAM)___		for (HttpMessageReader<?> reader : getMessageReaders()) {_			if (reader.canRead(elementType, mediaType)) {_				Map<String, Object> readHints = Collections.emptyMap()__				if (adapter != null && adapter.isMultiValue()) {_					Flux<?> flux = reader.read(actualType, elementType, request, response, readHints)__					flux = flux.onErrorResume(ex -> Flux.error(handleReadError(bodyParameter, ex)))__					if (isBodyRequired || !adapter.supportsEmpty()) {_						flux = flux.switchIfEmpty(Flux.error(handleMissingBody(bodyParameter)))__					}_					Object[] hints = extractValidationHints(bodyParameter)__					if (hints != null) {_						flux = flux.doOnNext(target ->_								validate(target, hints, bodyParameter, bindingContext, exchange))__					}_					return Mono.just(adapter.fromPublisher(flux))__				}_				else {_					_					Mono<?> mono = reader.readMono(actualType, elementType, request, response, readHints)__					mono = mono.onErrorResume(ex -> Mono.error(handleReadError(bodyParameter, ex)))__					if (isBodyRequired || (adapter != null && !adapter.supportsEmpty())) {_						mono = mono.switchIfEmpty(Mono.error(handleMissingBody(bodyParameter)))__					}_					Object[] hints = extractValidationHints(bodyParameter)__					if (hints != null) {_						mono = mono.doOnNext(target ->_								validate(target, hints, bodyParameter, bindingContext, exchange))__					}_					if (adapter != null) {_						return Mono.just(adapter.fromPublisher(mono))__					}_					else {_						return Mono.from(mono)__					}_				}_			}_		}__		__		HttpMethod method = request.getMethod()__		if (contentType == null && method != null && SUPPORTED_METHODS.contains(method)) {_			Flux<DataBuffer> body = request.getBody().doOnNext(o -> {_				_				throw new UnsupportedMediaTypeStatusException(mediaType, this.supportedMediaTypes)__			})__			if (isBodyRequired || (adapter != null && !adapter.supportsEmpty())) {_				body = body.switchIfEmpty(Mono.error(handleMissingBody(bodyParameter)))__			}_			return (adapter != null ? Mono.just(adapter.fromPublisher(body)) : Mono.from(body))__		}__		return Mono.error(new UnsupportedMediaTypeStatusException(mediaType, this.supportedMediaTypes))__	};read,the,body,from,a,method,argument,with,link,http,message,reader,param,body,parameter,the,link,method,parameter,to,read,param,actual,parameter,the,actual,link,method,parameter,to,read,could,be,different,from,code,body,parameter,when,processing,code,http,entity,for,example,param,is,body,required,true,if,the,body,is,required,param,binding,context,the,binding,context,to,use,param,exchange,the,current,exchange,return,the,body,since,5,0,2;protected,mono,object,read,body,method,parameter,body,parameter,nullable,method,parameter,actual,parameter,boolean,is,body,required,binding,context,binding,context,server,web,exchange,exchange,resolvable,type,body,type,resolvable,type,for,method,parameter,body,parameter,resolvable,type,actual,type,actual,parameter,null,body,type,resolvable,type,for,method,parameter,actual,parameter,class,resolved,type,body,type,resolve,reactive,adapter,adapter,resolved,type,null,get,adapter,registry,get,adapter,resolved,type,null,resolvable,type,element,type,adapter,null,body,type,get,generic,body,type,server,http,request,request,exchange,get,request,server,http,response,response,exchange,get,response,media,type,content,type,request,get,headers,get,content,type,media,type,media,type,content,type,null,content,type,media,type,for,http,message,reader,reader,get,message,readers,if,reader,can,read,element,type,media,type,map,string,object,read,hints,collections,empty,map,if,adapter,null,adapter,is,multi,value,flux,flux,reader,read,actual,type,element,type,request,response,read,hints,flux,flux,on,error,resume,ex,flux,error,handle,read,error,body,parameter,ex,if,is,body,required,adapter,supports,empty,flux,flux,switch,if,empty,flux,error,handle,missing,body,body,parameter,object,hints,extract,validation,hints,body,parameter,if,hints,null,flux,flux,do,on,next,target,validate,target,hints,body,parameter,binding,context,exchange,return,mono,just,adapter,from,publisher,flux,else,mono,mono,reader,read,mono,actual,type,element,type,request,response,read,hints,mono,mono,on,error,resume,ex,mono,error,handle,read,error,body,parameter,ex,if,is,body,required,adapter,null,adapter,supports,empty,mono,mono,switch,if,empty,mono,error,handle,missing,body,body,parameter,object,hints,extract,validation,hints,body,parameter,if,hints,null,mono,mono,do,on,next,target,validate,target,hints,body,parameter,binding,context,exchange,if,adapter,null,return,mono,just,adapter,from,publisher,mono,else,return,mono,from,mono,http,method,method,request,get,method,if,content,type,null,method,null,contains,method,flux,data,buffer,body,request,get,body,do,on,next,o,throw,new,unsupported,media,type,status,exception,media,type,this,supported,media,types,if,is,body,required,adapter,null,adapter,supports,empty,body,body,switch,if,empty,mono,error,handle,missing,body,body,parameter,return,adapter,null,mono,just,adapter,from,publisher,body,mono,from,body,return,mono,error,new,unsupported,media,type,status,exception,media,type,this,supported,media,types
AbstractMessageReaderArgumentResolver -> protected Mono<Object> readBody(MethodParameter bodyParameter, @Nullable MethodParameter actualParameter, 			boolean isBodyRequired, BindingContext bindingContext, ServerWebExchange exchange);1524002283;Read the body from a method argument with {@link HttpMessageReader}._@param bodyParameter the {@link MethodParameter} to read_@param actualParameter the actual {@link MethodParameter} to read_ could be different_from {@code bodyParameter} when processing {@code HttpEntity} for example_@param isBodyRequired true if the body is required_@param bindingContext the binding context to use_@param exchange the current exchange_@return the body_@since 5.0.2;protected Mono<Object> readBody(MethodParameter bodyParameter, @Nullable MethodParameter actualParameter,_			boolean isBodyRequired, BindingContext bindingContext, ServerWebExchange exchange) {__		ResolvableType bodyType = ResolvableType.forMethodParameter(bodyParameter)__		ResolvableType actualType = (actualParameter == null ?_				bodyType : ResolvableType.forMethodParameter(actualParameter))__		Class<?> resolvedType = bodyType.resolve()__		ReactiveAdapter adapter = (resolvedType != null ? getAdapterRegistry().getAdapter(resolvedType) : null)__		ResolvableType elementType = (adapter != null ? bodyType.getGeneric() : bodyType)___		ServerHttpRequest request = exchange.getRequest()__		ServerHttpResponse response = exchange.getResponse()___		MediaType contentType = request.getHeaders().getContentType()__		MediaType mediaType = (contentType != null ? contentType : MediaType.APPLICATION_OCTET_STREAM)___		Supplier<Throwable> missingBodyError = isBodyRequired || (adapter != null && !adapter.supportsEmpty()) ?_				() -> handleMissingBody(bodyParameter) : null___		for (HttpMessageReader<?> reader : getMessageReaders()) {_			if (reader.canRead(elementType, mediaType)) {_				Map<String, Object> readHints = Collections.emptyMap()__				if (adapter != null && adapter.isMultiValue()) {_					Flux<?> flux = reader.read(actualType, elementType, request, response, readHints)__					flux = flux.onErrorResume(ex -> Flux.error(handleReadError(bodyParameter, ex)))__					if (missingBodyError != null) {_						flux = flux.switchIfEmpty(Flux.error(missingBodyError))__					}_					Object[] hints = extractValidationHints(bodyParameter)__					if (hints != null) {_						flux = flux.doOnNext(target ->_								validate(target, hints, bodyParameter, bindingContext, exchange))__					}_					return Mono.just(adapter.fromPublisher(flux))__				}_				else {_					_					Mono<?> mono = reader.readMono(actualType, elementType, request, response, readHints)__					mono = mono.onErrorResume(ex -> Mono.error(handleReadError(bodyParameter, ex)))__					if (missingBodyError != null) {_						mono = mono.switchIfEmpty(Mono.error(missingBodyError))__					}_					Object[] hints = extractValidationHints(bodyParameter)__					if (hints != null) {_						mono = mono.doOnNext(target ->_								validate(target, hints, bodyParameter, bindingContext, exchange))__					}_					if (adapter != null) {_						return Mono.just(adapter.fromPublisher(mono))__					}_					else {_						return Mono.from(mono)__					}_				}_			}_		}__		__		HttpMethod method = request.getMethod()__		if (contentType == null && method != null && SUPPORTED_METHODS.contains(method)) {_			Flux<DataBuffer> body = request.getBody().doOnNext(o -> {_				_				throw new UnsupportedMediaTypeStatusException(mediaType, this.supportedMediaTypes)__			})__			if (missingBodyError != null) {_				body = body.switchIfEmpty(Mono.error(missingBodyError))__			}_			return (adapter != null ? Mono.just(adapter.fromPublisher(body)) : Mono.from(body))__		}__		return Mono.error(new UnsupportedMediaTypeStatusException(mediaType, this.supportedMediaTypes))__	};read,the,body,from,a,method,argument,with,link,http,message,reader,param,body,parameter,the,link,method,parameter,to,read,param,actual,parameter,the,actual,link,method,parameter,to,read,could,be,different,from,code,body,parameter,when,processing,code,http,entity,for,example,param,is,body,required,true,if,the,body,is,required,param,binding,context,the,binding,context,to,use,param,exchange,the,current,exchange,return,the,body,since,5,0,2;protected,mono,object,read,body,method,parameter,body,parameter,nullable,method,parameter,actual,parameter,boolean,is,body,required,binding,context,binding,context,server,web,exchange,exchange,resolvable,type,body,type,resolvable,type,for,method,parameter,body,parameter,resolvable,type,actual,type,actual,parameter,null,body,type,resolvable,type,for,method,parameter,actual,parameter,class,resolved,type,body,type,resolve,reactive,adapter,adapter,resolved,type,null,get,adapter,registry,get,adapter,resolved,type,null,resolvable,type,element,type,adapter,null,body,type,get,generic,body,type,server,http,request,request,exchange,get,request,server,http,response,response,exchange,get,response,media,type,content,type,request,get,headers,get,content,type,media,type,media,type,content,type,null,content,type,media,type,supplier,throwable,missing,body,error,is,body,required,adapter,null,adapter,supports,empty,handle,missing,body,body,parameter,null,for,http,message,reader,reader,get,message,readers,if,reader,can,read,element,type,media,type,map,string,object,read,hints,collections,empty,map,if,adapter,null,adapter,is,multi,value,flux,flux,reader,read,actual,type,element,type,request,response,read,hints,flux,flux,on,error,resume,ex,flux,error,handle,read,error,body,parameter,ex,if,missing,body,error,null,flux,flux,switch,if,empty,flux,error,missing,body,error,object,hints,extract,validation,hints,body,parameter,if,hints,null,flux,flux,do,on,next,target,validate,target,hints,body,parameter,binding,context,exchange,return,mono,just,adapter,from,publisher,flux,else,mono,mono,reader,read,mono,actual,type,element,type,request,response,read,hints,mono,mono,on,error,resume,ex,mono,error,handle,read,error,body,parameter,ex,if,missing,body,error,null,mono,mono,switch,if,empty,mono,error,missing,body,error,object,hints,extract,validation,hints,body,parameter,if,hints,null,mono,mono,do,on,next,target,validate,target,hints,body,parameter,binding,context,exchange,if,adapter,null,return,mono,just,adapter,from,publisher,mono,else,return,mono,from,mono,http,method,method,request,get,method,if,content,type,null,method,null,contains,method,flux,data,buffer,body,request,get,body,do,on,next,o,throw,new,unsupported,media,type,status,exception,media,type,this,supported,media,types,if,missing,body,error,null,body,body,switch,if,empty,mono,error,missing,body,error,return,adapter,null,mono,just,adapter,from,publisher,body,mono,from,body,return,mono,error,new,unsupported,media,type,status,exception,media,type,this,supported,media,types
AbstractMessageReaderArgumentResolver -> public List<ServerHttpMessageReader<?>> getMessageReaders();1490109321;Return the configured message converters.;public List<ServerHttpMessageReader<?>> getMessageReaders() {_		return this.messageReaders__	};return,the,configured,message,converters;public,list,server,http,message,reader,get,message,readers,return,this,message,readers
AbstractMessageReaderArgumentResolver -> public List<ServerHttpMessageReader<?>> getMessageReaders();1490354145;Return the configured message converters.;public List<ServerHttpMessageReader<?>> getMessageReaders() {_		return this.messageReaders__	};return,the,configured,message,converters;public,list,server,http,message,reader,get,message,readers,return,this,message,readers
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers);1485986572;Constructor with {@link HttpMessageReader}'s and a {@link Validator}._@param readers readers to convert from the request body;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers) {_		this(readers, new ReactiveAdapterRegistry())__	};constructor,with,link,http,message,reader,s,and,a,link,validator,param,readers,readers,to,convert,from,the,request,body;protected,abstract,message,reader,argument,resolver,list,http,message,reader,readers,this,readers,new,reactive,adapter,registry
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers);1489433888;Constructor with {@link HttpMessageReader}'s and a {@link Validator}._@param readers readers to convert from the request body;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers) {_		this(readers, new ReactiveAdapterRegistry())__	};constructor,with,link,http,message,reader,s,and,a,link,validator,param,readers,readers,to,convert,from,the,request,body;protected,abstract,message,reader,argument,resolver,list,http,message,reader,readers,this,readers,new,reactive,adapter,registry
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers);1489535791;Constructor with {@link HttpMessageReader}'s and a {@link Validator}._@param readers readers to convert from the request body;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers) {_		this(readers, new ReactiveAdapterRegistry())__	};constructor,with,link,http,message,reader,s,and,a,link,validator,param,readers,readers,to,convert,from,the,request,body;protected,abstract,message,reader,argument,resolver,list,http,message,reader,readers,this,readers,new,reactive,adapter,registry
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers);1490392946;Constructor with {@link HttpMessageReader}'s and a {@link Validator}._@param readers readers to convert from the request body;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers) {_		this(readers, new ReactiveAdapterRegistry())__	};constructor,with,link,http,message,reader,s,and,a,link,validator,param,readers,readers,to,convert,from,the,request,body;protected,abstract,message,reader,argument,resolver,list,http,message,reader,readers,this,readers,new,reactive,adapter,registry
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers);1491833276;Constructor with {@link HttpMessageReader}'s and a {@link Validator}._@param readers readers to convert from the request body;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers) {_		this(readers, new ReactiveAdapterRegistry())__	};constructor,with,link,http,message,reader,s,and,a,link,validator,param,readers,readers,to,convert,from,the,request,body;protected,abstract,message,reader,argument,resolver,list,http,message,reader,readers,this,readers,new,reactive,adapter,registry
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers);1491907149;Constructor with {@link HttpMessageReader}'s and a {@link Validator}._@param readers readers to convert from the request body;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers) {_		this(readers, new ReactiveAdapterRegistry())__	};constructor,with,link,http,message,reader,s,and,a,link,validator,param,readers,readers,to,convert,from,the,request,body;protected,abstract,message,reader,argument,resolver,list,http,message,reader,readers,this,readers,new,reactive,adapter,registry
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers);1492090594;Constructor with {@link HttpMessageReader}'s and a {@link Validator}._@param readers readers to convert from the request body;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers) {_		this(readers, new ReactiveAdapterRegistry())__	};constructor,with,link,http,message,reader,s,and,a,link,validator,param,readers,readers,to,convert,from,the,request,body;protected,abstract,message,reader,argument,resolver,list,http,message,reader,readers,this,readers,new,reactive,adapter,registry
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers);1492168700;Constructor with {@link HttpMessageReader}'s and a {@link Validator}._@param readers readers to convert from the request body;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers) {_		this(readers, new ReactiveAdapterRegistry())__	};constructor,with,link,http,message,reader,s,and,a,link,validator,param,readers,readers,to,convert,from,the,request,body;protected,abstract,message,reader,argument,resolver,list,http,message,reader,readers,this,readers,new,reactive,adapter,registry
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers);1494008983;Constructor with {@link HttpMessageReader}'s and a {@link Validator}._@param readers readers to convert from the request body;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers) {_		this(readers, new ReactiveAdapterRegistry())__	};constructor,with,link,http,message,reader,s,and,a,link,validator,param,readers,readers,to,convert,from,the,request,body;protected,abstract,message,reader,argument,resolver,list,http,message,reader,readers,this,readers,new,reactive,adapter,registry
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers);1494019148;Constructor with {@link HttpMessageReader}'s and a {@link Validator}._@param readers readers to convert from the request body;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers) {_		this(readers, new ReactiveAdapterRegistry())__	};constructor,with,link,http,message,reader,s,and,a,link,validator,param,readers,readers,to,convert,from,the,request,body;protected,abstract,message,reader,argument,resolver,list,http,message,reader,readers,this,readers,new,reactive,adapter,registry
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers);1495868221;Constructor with {@link HttpMessageReader}'s and a {@link Validator}._@param readers readers to convert from the request body;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers) {_		this(readers, new ReactiveAdapterRegistry())__	};constructor,with,link,http,message,reader,s,and,a,link,validator,param,readers,readers,to,convert,from,the,request,body;protected,abstract,message,reader,argument,resolver,list,http,message,reader,readers,this,readers,new,reactive,adapter,registry
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers);1496837955;Constructor with {@link HttpMessageReader}'s and a {@link Validator}._@param readers readers to convert from the request body;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers) {_		this(readers, new ReactiveAdapterRegistry())__	};constructor,with,link,http,message,reader,s,and,a,link,validator,param,readers,readers,to,convert,from,the,request,body;protected,abstract,message,reader,argument,resolver,list,http,message,reader,readers,this,readers,new,reactive,adapter,registry
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers);1499937094;Constructor with {@link HttpMessageReader}'s and a {@link Validator}._@param readers readers to convert from the request body;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers) {_		this(readers, new ReactiveAdapterRegistry())__	};constructor,with,link,http,message,reader,s,and,a,link,validator,param,readers,readers,to,convert,from,the,request,body;protected,abstract,message,reader,argument,resolver,list,http,message,reader,readers,this,readers,new,reactive,adapter,registry
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers);1510841578;Constructor with {@link HttpMessageReader}'s and a {@link Validator}._@param readers readers to convert from the request body;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers) {_		this(readers, new ReactiveAdapterRegistry())__	};constructor,with,link,http,message,reader,s,and,a,link,validator,param,readers,readers,to,convert,from,the,request,body;protected,abstract,message,reader,argument,resolver,list,http,message,reader,readers,this,readers,new,reactive,adapter,registry
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers);1511215342;Constructor with {@link HttpMessageReader}'s and a {@link Validator}._@param readers readers to convert from the request body;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers) {_		this(readers, ReactiveAdapterRegistry.getSharedInstance())__	};constructor,with,link,http,message,reader,s,and,a,link,validator,param,readers,readers,to,convert,from,the,request,body;protected,abstract,message,reader,argument,resolver,list,http,message,reader,readers,this,readers,reactive,adapter,registry,get,shared,instance
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers);1524002283;Constructor with {@link HttpMessageReader}'s and a {@link Validator}._@param readers readers to convert from the request body;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers) {_		this(readers, ReactiveAdapterRegistry.getSharedInstance())__	};constructor,with,link,http,message,reader,s,and,a,link,validator,param,readers,readers,to,convert,from,the,request,body;protected,abstract,message,reader,argument,resolver,list,http,message,reader,readers,this,readers,reactive,adapter,registry,get,shared,instance
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers);1524002283;Constructor with {@link HttpMessageReader}'s and a {@link Validator}._@param readers readers to convert from the request body;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers) {_		this(readers, ReactiveAdapterRegistry.getSharedInstance())__	};constructor,with,link,http,message,reader,s,and,a,link,validator,param,readers,readers,to,convert,from,the,request,body;protected,abstract,message,reader,argument,resolver,list,http,message,reader,readers,this,readers,reactive,adapter,registry,get,shared,instance
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers);1524160255;Constructor with {@link HttpMessageReader}'s and a {@link Validator}._@param readers readers to convert from the request body;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers) {_		this(readers, ReactiveAdapterRegistry.getSharedInstance())__	};constructor,with,link,http,message,reader,s,and,a,link,validator,param,readers,readers,to,convert,from,the,request,body;protected,abstract,message,reader,argument,resolver,list,http,message,reader,readers,this,readers,reactive,adapter,registry,get,shared,instance
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers);1526354196;Constructor with {@link HttpMessageReader}'s and a {@link Validator}._@param readers readers to convert from the request body;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers) {_		this(readers, ReactiveAdapterRegistry.getSharedInstance())__	};constructor,with,link,http,message,reader,s,and,a,link,validator,param,readers,readers,to,convert,from,the,request,body;protected,abstract,message,reader,argument,resolver,list,http,message,reader,readers,this,readers,reactive,adapter,registry,get,shared,instance
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers);1529721864;Constructor with {@link HttpMessageReader}'s and a {@link Validator}._@param readers readers to convert from the request body;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers) {_		this(readers, ReactiveAdapterRegistry.getSharedInstance())__	};constructor,with,link,http,message,reader,s,and,a,link,validator,param,readers,readers,to,convert,from,the,request,body;protected,abstract,message,reader,argument,resolver,list,http,message,reader,readers,this,readers,reactive,adapter,registry,get,shared,instance
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers);1530174524;Constructor with {@link HttpMessageReader}'s and a {@link Validator}._@param readers readers to convert from the request body;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers) {_		this(readers, ReactiveAdapterRegistry.getSharedInstance())__	};constructor,with,link,http,message,reader,s,and,a,link,validator,param,readers,readers,to,convert,from,the,request,body;protected,abstract,message,reader,argument,resolver,list,http,message,reader,readers,this,readers,reactive,adapter,registry,get,shared,instance
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers);1530190293;Constructor with {@link HttpMessageReader}'s and a {@link Validator}._@param readers readers to convert from the request body;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers) {_		this(readers, ReactiveAdapterRegistry.getSharedInstance())__	};constructor,with,link,http,message,reader,s,and,a,link,validator,param,readers,readers,to,convert,from,the,request,body;protected,abstract,message,reader,argument,resolver,list,http,message,reader,readers,this,readers,reactive,adapter,registry,get,shared,instance
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers);1530793633;Constructor with {@link HttpMessageReader}'s and a {@link Validator}._@param readers readers to convert from the request body;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers) {_		this(readers, ReactiveAdapterRegistry.getSharedInstance())__	};constructor,with,link,http,message,reader,s,and,a,link,validator,param,readers,readers,to,convert,from,the,request,body;protected,abstract,message,reader,argument,resolver,list,http,message,reader,readers,this,readers,reactive,adapter,registry,get,shared,instance
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers);1530793695;Constructor with {@link HttpMessageReader}'s and a {@link Validator}._@param readers readers to convert from the request body;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers) {_		this(readers, ReactiveAdapterRegistry.getSharedInstance())__	};constructor,with,link,http,message,reader,s,and,a,link,validator,param,readers,readers,to,convert,from,the,request,body;protected,abstract,message,reader,argument,resolver,list,http,message,reader,readers,this,readers,reactive,adapter,registry,get,shared,instance
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers);1541189993;Constructor with {@link HttpMessageReader}'s and a {@link Validator}._@param readers readers to convert from the request body;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers) {_		this(readers, ReactiveAdapterRegistry.getSharedInstance())__	};constructor,with,link,http,message,reader,s,and,a,link,validator,param,readers,readers,to,convert,from,the,request,body;protected,abstract,message,reader,argument,resolver,list,http,message,reader,readers,this,readers,reactive,adapter,registry,get,shared,instance
AbstractMessageReaderArgumentResolver -> protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers);1542829302;Constructor with {@link HttpMessageReader}'s and a {@link Validator}._@param readers readers to convert from the request body;protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers) {_		this(readers, ReactiveAdapterRegistry.getSharedInstance())__	};constructor,with,link,http,message,reader,s,and,a,link,validator,param,readers,readers,to,convert,from,the,request,body;protected,abstract,message,reader,argument,resolver,list,http,message,reader,readers,this,readers,reactive,adapter,registry,get,shared,instance
AbstractMessageReaderArgumentResolver -> protected Mono<Object> readBody(MethodParameter bodyParam, @Nullable MethodParameter actualParam, 			boolean isBodyRequired, BindingContext bindingContext, ServerWebExchange exchange);1524002283;Read the body from a method argument with {@link HttpMessageReader}._@param bodyParam the {@link MethodParameter} to read_@param actualParam the actual {@link MethodParameter} to read_ could be different_from {@code bodyParameter} when processing {@code HttpEntity} for example_@param isBodyRequired true if the body is required_@param bindingContext the binding context to use_@param exchange the current exchange_@return the body_@since 5.0.2;protected Mono<Object> readBody(MethodParameter bodyParam, @Nullable MethodParameter actualParam,_			boolean isBodyRequired, BindingContext bindingContext, ServerWebExchange exchange) {__		ResolvableType bodyType = ResolvableType.forMethodParameter(bodyParam)__		ResolvableType actualType = actualParam == null ? bodyType : ResolvableType.forMethodParameter(actualParam)__		Class<?> resolvedType = bodyType.resolve()__		ReactiveAdapter adapter = (resolvedType != null ? getAdapterRegistry().getAdapter(resolvedType) : null)__		ResolvableType elementType = (adapter != null ? bodyType.getGeneric() : bodyType)___		ServerHttpRequest request = exchange.getRequest()__		ServerHttpResponse response = exchange.getResponse()___		MediaType contentType = request.getHeaders().getContentType()__		MediaType mediaType = (contentType != null ? contentType : MediaType.APPLICATION_OCTET_STREAM)___		Supplier<Throwable> missingBodyError = isBodyRequired || (adapter != null && !adapter.supportsEmpty()) ?_				() -> handleMissingBody(bodyParam) : null___		for (HttpMessageReader<?> reader : getMessageReaders()) {_			if (reader.canRead(elementType, mediaType)) {_				Map<String, Object> readHints = Collections.emptyMap()__				if (adapter != null && adapter.isMultiValue()) {_					Flux<?> flux = reader.read(actualType, elementType, request, response, readHints)__					flux = flux.onErrorResume(ex -> Flux.error(handleReadError(bodyParam, ex)))__					if (missingBodyError != null) {_						flux = flux.switchIfEmpty(Flux.error(missingBodyError))__					}_					Object[] hints = extractValidationHints(bodyParam)__					if (hints != null) {_						flux = flux.doOnNext(target ->_								validate(target, hints, bodyParam, bindingContext, exchange))__					}_					return Mono.just(adapter.fromPublisher(flux))__				}_				else {_					_					Mono<?> mono = reader.readMono(actualType, elementType, request, response, readHints)__					mono = mono.onErrorResume(ex -> Mono.error(handleReadError(bodyParam, ex)))__					if (missingBodyError != null) {_						mono = mono.switchIfEmpty(Mono.error(missingBodyError))__					}_					Object[] hints = extractValidationHints(bodyParam)__					if (hints != null) {_						mono = mono.doOnNext(target ->_								validate(target, hints, bodyParam, bindingContext, exchange))__					}_					return adapter != null ? Mono.just(adapter.fromPublisher(mono)) : Mono.from(mono)__				}_			}_		}__		__		HttpMethod method = request.getMethod()__		if (contentType == null && method != null && SUPPORTED_METHODS.contains(method)) {_			Flux<DataBuffer> body = request.getBody().doOnNext(o -> {_				_				throw new UnsupportedMediaTypeStatusException(mediaType, this.supportedMediaTypes)__			})__			if (missingBodyError != null) {_				body = body.switchIfEmpty(Mono.error(missingBodyError))__			}_			return (adapter != null ? Mono.just(adapter.fromPublisher(body)) : Mono.from(body))__		}__		return Mono.error(new UnsupportedMediaTypeStatusException(mediaType, this.supportedMediaTypes))__	};read,the,body,from,a,method,argument,with,link,http,message,reader,param,body,param,the,link,method,parameter,to,read,param,actual,param,the,actual,link,method,parameter,to,read,could,be,different,from,code,body,parameter,when,processing,code,http,entity,for,example,param,is,body,required,true,if,the,body,is,required,param,binding,context,the,binding,context,to,use,param,exchange,the,current,exchange,return,the,body,since,5,0,2;protected,mono,object,read,body,method,parameter,body,param,nullable,method,parameter,actual,param,boolean,is,body,required,binding,context,binding,context,server,web,exchange,exchange,resolvable,type,body,type,resolvable,type,for,method,parameter,body,param,resolvable,type,actual,type,actual,param,null,body,type,resolvable,type,for,method,parameter,actual,param,class,resolved,type,body,type,resolve,reactive,adapter,adapter,resolved,type,null,get,adapter,registry,get,adapter,resolved,type,null,resolvable,type,element,type,adapter,null,body,type,get,generic,body,type,server,http,request,request,exchange,get,request,server,http,response,response,exchange,get,response,media,type,content,type,request,get,headers,get,content,type,media,type,media,type,content,type,null,content,type,media,type,supplier,throwable,missing,body,error,is,body,required,adapter,null,adapter,supports,empty,handle,missing,body,body,param,null,for,http,message,reader,reader,get,message,readers,if,reader,can,read,element,type,media,type,map,string,object,read,hints,collections,empty,map,if,adapter,null,adapter,is,multi,value,flux,flux,reader,read,actual,type,element,type,request,response,read,hints,flux,flux,on,error,resume,ex,flux,error,handle,read,error,body,param,ex,if,missing,body,error,null,flux,flux,switch,if,empty,flux,error,missing,body,error,object,hints,extract,validation,hints,body,param,if,hints,null,flux,flux,do,on,next,target,validate,target,hints,body,param,binding,context,exchange,return,mono,just,adapter,from,publisher,flux,else,mono,mono,reader,read,mono,actual,type,element,type,request,response,read,hints,mono,mono,on,error,resume,ex,mono,error,handle,read,error,body,param,ex,if,missing,body,error,null,mono,mono,switch,if,empty,mono,error,missing,body,error,object,hints,extract,validation,hints,body,param,if,hints,null,mono,mono,do,on,next,target,validate,target,hints,body,param,binding,context,exchange,return,adapter,null,mono,just,adapter,from,publisher,mono,mono,from,mono,http,method,method,request,get,method,if,content,type,null,method,null,contains,method,flux,data,buffer,body,request,get,body,do,on,next,o,throw,new,unsupported,media,type,status,exception,media,type,this,supported,media,types,if,missing,body,error,null,body,body,switch,if,empty,mono,error,missing,body,error,return,adapter,null,mono,just,adapter,from,publisher,body,mono,from,body,return,mono,error,new,unsupported,media,type,status,exception,media,type,this,supported,media,types
AbstractMessageReaderArgumentResolver -> protected Mono<Object> readBody(MethodParameter bodyParam, @Nullable MethodParameter actualParam, 			boolean isBodyRequired, BindingContext bindingContext, ServerWebExchange exchange);1524160255;Read the body from a method argument with {@link HttpMessageReader}._@param bodyParam the {@link MethodParameter} to read_@param actualParam the actual {@link MethodParameter} to read_ could be different_from {@code bodyParameter} when processing {@code HttpEntity} for example_@param isBodyRequired true if the body is required_@param bindingContext the binding context to use_@param exchange the current exchange_@return the body_@since 5.0.2;protected Mono<Object> readBody(MethodParameter bodyParam, @Nullable MethodParameter actualParam,_			boolean isBodyRequired, BindingContext bindingContext, ServerWebExchange exchange) {__		ResolvableType bodyType = ResolvableType.forMethodParameter(bodyParam)__		ResolvableType actualType = actualParam == null ? bodyType : ResolvableType.forMethodParameter(actualParam)__		Class<?> resolvedType = bodyType.resolve()__		ReactiveAdapter adapter = (resolvedType != null ? getAdapterRegistry().getAdapter(resolvedType) : null)__		ResolvableType elementType = (adapter != null ? bodyType.getGeneric() : bodyType)__		isBodyRequired = isBodyRequired || (adapter != null && !adapter.supportsEmpty())___		ServerHttpRequest request = exchange.getRequest()__		ServerHttpResponse response = exchange.getResponse()___		MediaType contentType = request.getHeaders().getContentType()__		MediaType mediaType = (contentType != null ? contentType : MediaType.APPLICATION_OCTET_STREAM)___		for (HttpMessageReader<?> reader : getMessageReaders()) {_			if (reader.canRead(elementType, mediaType)) {_				Map<String, Object> readHints = Collections.emptyMap()__				if (adapter != null && adapter.isMultiValue()) {_					Flux<?> flux = reader.read(actualType, elementType, request, response, readHints)__					flux = flux.onErrorResume(ex -> Flux.error(handleReadError(bodyParam, ex)))__					if (isBodyRequired) {_						flux = flux.switchIfEmpty(Flux.error(() -> handleMissingBody(bodyParam)))__					}_					Object[] hints = extractValidationHints(bodyParam)__					if (hints != null) {_						flux = flux.doOnNext(target ->_								validate(target, hints, bodyParam, bindingContext, exchange))__					}_					return Mono.just(adapter.fromPublisher(flux))__				}_				else {_					_					Mono<?> mono = reader.readMono(actualType, elementType, request, response, readHints)__					mono = mono.onErrorResume(ex -> Mono.error(handleReadError(bodyParam, ex)))__					if (isBodyRequired) {_						mono = mono.switchIfEmpty(Mono.error(() -> handleMissingBody(bodyParam)))__					}_					Object[] hints = extractValidationHints(bodyParam)__					if (hints != null) {_						mono = mono.doOnNext(target ->_								validate(target, hints, bodyParam, bindingContext, exchange))__					}_					return adapter != null ? Mono.just(adapter.fromPublisher(mono)) : Mono.from(mono)__				}_			}_		}__		__		HttpMethod method = request.getMethod()__		if (contentType == null && method != null && SUPPORTED_METHODS.contains(method)) {_			Flux<DataBuffer> body = request.getBody().doOnNext(o -> {_				_				throw new UnsupportedMediaTypeStatusException(mediaType, this.supportedMediaTypes)__			})__			if (isBodyRequired) {_				body = body.switchIfEmpty(Mono.error(() -> handleMissingBody(bodyParam)))__			}_			return (adapter != null ? Mono.just(adapter.fromPublisher(body)) : Mono.from(body))__		}__		return Mono.error(new UnsupportedMediaTypeStatusException(mediaType, this.supportedMediaTypes))__	};read,the,body,from,a,method,argument,with,link,http,message,reader,param,body,param,the,link,method,parameter,to,read,param,actual,param,the,actual,link,method,parameter,to,read,could,be,different,from,code,body,parameter,when,processing,code,http,entity,for,example,param,is,body,required,true,if,the,body,is,required,param,binding,context,the,binding,context,to,use,param,exchange,the,current,exchange,return,the,body,since,5,0,2;protected,mono,object,read,body,method,parameter,body,param,nullable,method,parameter,actual,param,boolean,is,body,required,binding,context,binding,context,server,web,exchange,exchange,resolvable,type,body,type,resolvable,type,for,method,parameter,body,param,resolvable,type,actual,type,actual,param,null,body,type,resolvable,type,for,method,parameter,actual,param,class,resolved,type,body,type,resolve,reactive,adapter,adapter,resolved,type,null,get,adapter,registry,get,adapter,resolved,type,null,resolvable,type,element,type,adapter,null,body,type,get,generic,body,type,is,body,required,is,body,required,adapter,null,adapter,supports,empty,server,http,request,request,exchange,get,request,server,http,response,response,exchange,get,response,media,type,content,type,request,get,headers,get,content,type,media,type,media,type,content,type,null,content,type,media,type,for,http,message,reader,reader,get,message,readers,if,reader,can,read,element,type,media,type,map,string,object,read,hints,collections,empty,map,if,adapter,null,adapter,is,multi,value,flux,flux,reader,read,actual,type,element,type,request,response,read,hints,flux,flux,on,error,resume,ex,flux,error,handle,read,error,body,param,ex,if,is,body,required,flux,flux,switch,if,empty,flux,error,handle,missing,body,body,param,object,hints,extract,validation,hints,body,param,if,hints,null,flux,flux,do,on,next,target,validate,target,hints,body,param,binding,context,exchange,return,mono,just,adapter,from,publisher,flux,else,mono,mono,reader,read,mono,actual,type,element,type,request,response,read,hints,mono,mono,on,error,resume,ex,mono,error,handle,read,error,body,param,ex,if,is,body,required,mono,mono,switch,if,empty,mono,error,handle,missing,body,body,param,object,hints,extract,validation,hints,body,param,if,hints,null,mono,mono,do,on,next,target,validate,target,hints,body,param,binding,context,exchange,return,adapter,null,mono,just,adapter,from,publisher,mono,mono,from,mono,http,method,method,request,get,method,if,content,type,null,method,null,contains,method,flux,data,buffer,body,request,get,body,do,on,next,o,throw,new,unsupported,media,type,status,exception,media,type,this,supported,media,types,if,is,body,required,body,body,switch,if,empty,mono,error,handle,missing,body,body,param,return,adapter,null,mono,just,adapter,from,publisher,body,mono,from,body,return,mono,error,new,unsupported,media,type,status,exception,media,type,this,supported,media,types
AbstractMessageReaderArgumentResolver -> protected Mono<Object> readBody(MethodParameter bodyParam, @Nullable MethodParameter actualParam, 			boolean isBodyRequired, BindingContext bindingContext, ServerWebExchange exchange);1526354196;Read the body from a method argument with {@link HttpMessageReader}._@param bodyParam the {@link MethodParameter} to read_@param actualParam the actual {@link MethodParameter} to read_ could be different_from {@code bodyParameter} when processing {@code HttpEntity} for example_@param isBodyRequired true if the body is required_@param bindingContext the binding context to use_@param exchange the current exchange_@return the body_@since 5.0.2;protected Mono<Object> readBody(MethodParameter bodyParam, @Nullable MethodParameter actualParam,_			boolean isBodyRequired, BindingContext bindingContext, ServerWebExchange exchange) {__		ResolvableType bodyType = ResolvableType.forMethodParameter(bodyParam)__		ResolvableType actualType = actualParam == null ? bodyType : ResolvableType.forMethodParameter(actualParam)__		Class<?> resolvedType = bodyType.resolve()__		ReactiveAdapter adapter = (resolvedType != null ? getAdapterRegistry().getAdapter(resolvedType) : null)__		ResolvableType elementType = (adapter != null ? bodyType.getGeneric() : bodyType)__		isBodyRequired = isBodyRequired || (adapter != null && !adapter.supportsEmpty())___		ServerHttpRequest request = exchange.getRequest()__		ServerHttpResponse response = exchange.getResponse()___		MediaType contentType = request.getHeaders().getContentType()__		MediaType mediaType = (contentType != null ? contentType : MediaType.APPLICATION_OCTET_STREAM)___		for (HttpMessageReader<?> reader : getMessageReaders()) {_			if (reader.canRead(elementType, mediaType)) {_				Map<String, Object> readHints = Collections.emptyMap()__				if (adapter != null && adapter.isMultiValue()) {_					Flux<?> flux = reader.read(actualType, elementType, request, response, readHints)__					flux = flux.onErrorResume(ex -> Flux.error(handleReadError(bodyParam, ex)))__					if (isBodyRequired) {_						flux = flux.switchIfEmpty(Flux.error(() -> handleMissingBody(bodyParam)))__					}_					Object[] hints = extractValidationHints(bodyParam)__					if (hints != null) {_						flux = flux.doOnNext(target ->_								validate(target, hints, bodyParam, bindingContext, exchange))__					}_					return Mono.just(adapter.fromPublisher(flux))__				}_				else {_					_					Mono<?> mono = reader.readMono(actualType, elementType, request, response, readHints)__					mono = mono.onErrorResume(ex -> Mono.error(handleReadError(bodyParam, ex)))__					if (isBodyRequired) {_						mono = mono.switchIfEmpty(Mono.error(() -> handleMissingBody(bodyParam)))__					}_					Object[] hints = extractValidationHints(bodyParam)__					if (hints != null) {_						mono = mono.doOnNext(target ->_								validate(target, hints, bodyParam, bindingContext, exchange))__					}_					return adapter != null ? Mono.just(adapter.fromPublisher(mono)) : Mono.from(mono)__				}_			}_		}__		__		HttpMethod method = request.getMethod()__		if (contentType == null && method != null && SUPPORTED_METHODS.contains(method)) {_			Flux<DataBuffer> body = request.getBody().doOnNext(o -> {_				_				throw new UnsupportedMediaTypeStatusException(mediaType, this.supportedMediaTypes, elementType)__			})__			if (isBodyRequired) {_				body = body.switchIfEmpty(Mono.error(() -> handleMissingBody(bodyParam)))__			}_			return (adapter != null ? Mono.just(adapter.fromPublisher(body)) : Mono.from(body))__		}__		return Mono.error(new UnsupportedMediaTypeStatusException(mediaType, this.supportedMediaTypes, elementType))__	};read,the,body,from,a,method,argument,with,link,http,message,reader,param,body,param,the,link,method,parameter,to,read,param,actual,param,the,actual,link,method,parameter,to,read,could,be,different,from,code,body,parameter,when,processing,code,http,entity,for,example,param,is,body,required,true,if,the,body,is,required,param,binding,context,the,binding,context,to,use,param,exchange,the,current,exchange,return,the,body,since,5,0,2;protected,mono,object,read,body,method,parameter,body,param,nullable,method,parameter,actual,param,boolean,is,body,required,binding,context,binding,context,server,web,exchange,exchange,resolvable,type,body,type,resolvable,type,for,method,parameter,body,param,resolvable,type,actual,type,actual,param,null,body,type,resolvable,type,for,method,parameter,actual,param,class,resolved,type,body,type,resolve,reactive,adapter,adapter,resolved,type,null,get,adapter,registry,get,adapter,resolved,type,null,resolvable,type,element,type,adapter,null,body,type,get,generic,body,type,is,body,required,is,body,required,adapter,null,adapter,supports,empty,server,http,request,request,exchange,get,request,server,http,response,response,exchange,get,response,media,type,content,type,request,get,headers,get,content,type,media,type,media,type,content,type,null,content,type,media,type,for,http,message,reader,reader,get,message,readers,if,reader,can,read,element,type,media,type,map,string,object,read,hints,collections,empty,map,if,adapter,null,adapter,is,multi,value,flux,flux,reader,read,actual,type,element,type,request,response,read,hints,flux,flux,on,error,resume,ex,flux,error,handle,read,error,body,param,ex,if,is,body,required,flux,flux,switch,if,empty,flux,error,handle,missing,body,body,param,object,hints,extract,validation,hints,body,param,if,hints,null,flux,flux,do,on,next,target,validate,target,hints,body,param,binding,context,exchange,return,mono,just,adapter,from,publisher,flux,else,mono,mono,reader,read,mono,actual,type,element,type,request,response,read,hints,mono,mono,on,error,resume,ex,mono,error,handle,read,error,body,param,ex,if,is,body,required,mono,mono,switch,if,empty,mono,error,handle,missing,body,body,param,object,hints,extract,validation,hints,body,param,if,hints,null,mono,mono,do,on,next,target,validate,target,hints,body,param,binding,context,exchange,return,adapter,null,mono,just,adapter,from,publisher,mono,mono,from,mono,http,method,method,request,get,method,if,content,type,null,method,null,contains,method,flux,data,buffer,body,request,get,body,do,on,next,o,throw,new,unsupported,media,type,status,exception,media,type,this,supported,media,types,element,type,if,is,body,required,body,body,switch,if,empty,mono,error,handle,missing,body,body,param,return,adapter,null,mono,just,adapter,from,publisher,body,mono,from,body,return,mono,error,new,unsupported,media,type,status,exception,media,type,this,supported,media,types,element,type
AbstractMessageReaderArgumentResolver -> protected Mono<Object> readBody(MethodParameter bodyParam, @Nullable MethodParameter actualParam, 			boolean isBodyRequired, BindingContext bindingContext, ServerWebExchange exchange);1529721864;Read the body from a method argument with {@link HttpMessageReader}._@param bodyParam the {@link MethodParameter} to read_@param actualParam the actual {@link MethodParameter} to read_ could be different_from {@code bodyParameter} when processing {@code HttpEntity} for example_@param isBodyRequired true if the body is required_@param bindingContext the binding context to use_@param exchange the current exchange_@return the body_@since 5.0.2;protected Mono<Object> readBody(MethodParameter bodyParam, @Nullable MethodParameter actualParam,_			boolean isBodyRequired, BindingContext bindingContext, ServerWebExchange exchange) {__		ResolvableType bodyType = ResolvableType.forMethodParameter(bodyParam)__		ResolvableType actualType = actualParam == null ? bodyType : ResolvableType.forMethodParameter(actualParam)__		Class<?> resolvedType = bodyType.resolve()__		ReactiveAdapter adapter = (resolvedType != null ? getAdapterRegistry().getAdapter(resolvedType) : null)__		ResolvableType elementType = (adapter != null ? bodyType.getGeneric() : bodyType)__		isBodyRequired = isBodyRequired || (adapter != null && !adapter.supportsEmpty())___		ServerHttpRequest request = exchange.getRequest()__		ServerHttpResponse response = exchange.getResponse()___		MediaType contentType = request.getHeaders().getContentType()__		MediaType mediaType = (contentType != null ? contentType : MediaType.APPLICATION_OCTET_STREAM)___		if (logger.isDebugEnabled()) {_			logger.debug(contentType != null ? "Content-Type:" + contentType :_					"No Content-Type, using " + MediaType.APPLICATION_OCTET_STREAM)__		}__		for (HttpMessageReader<?> reader : getMessageReaders()) {_			if (reader.canRead(elementType, mediaType)) {_				Map<String, Object> readHints = Collections.emptyMap()__				if (adapter != null && adapter.isMultiValue()) {_					if (logger.isDebugEnabled()) {_						logger.debug("0..N [" + elementType + "]")__					}_					Flux<?> flux = reader.read(actualType, elementType, request, response, readHints)__					flux = flux.onErrorResume(ex -> Flux.error(handleReadError(bodyParam, ex)))__					if (isBodyRequired) {_						flux = flux.switchIfEmpty(Flux.error(() -> handleMissingBody(bodyParam)))__					}_					Object[] hints = extractValidationHints(bodyParam)__					if (hints != null) {_						flux = flux.doOnNext(target ->_								validate(target, hints, bodyParam, bindingContext, exchange))__					}_					return Mono.just(adapter.fromPublisher(flux))__				}_				else {_					_					if (logger.isDebugEnabled()) {_						logger.debug("0..1 [" + elementType + "]")__					}_					Mono<?> mono = reader.readMono(actualType, elementType, request, response, readHints)__					mono = mono.onErrorResume(ex -> Mono.error(handleReadError(bodyParam, ex)))__					if (isBodyRequired) {_						mono = mono.switchIfEmpty(Mono.error(() -> handleMissingBody(bodyParam)))__					}_					Object[] hints = extractValidationHints(bodyParam)__					if (hints != null) {_						mono = mono.doOnNext(target ->_								validate(target, hints, bodyParam, bindingContext, exchange))__					}_					return adapter != null ? Mono.just(adapter.fromPublisher(mono)) : Mono.from(mono)__				}_			}_		}__		__		HttpMethod method = request.getMethod()__		if (contentType == null && method != null && SUPPORTED_METHODS.contains(method)) {_			Flux<DataBuffer> body = request.getBody().doOnNext(o -> {_				_				throw new UnsupportedMediaTypeStatusException(mediaType, this.supportedMediaTypes, elementType)__			})__			if (isBodyRequired) {_				body = body.switchIfEmpty(Mono.error(() -> handleMissingBody(bodyParam)))__			}_			return (adapter != null ? Mono.just(adapter.fromPublisher(body)) : Mono.from(body))__		}__		return Mono.error(new UnsupportedMediaTypeStatusException(mediaType, this.supportedMediaTypes, elementType))__	};read,the,body,from,a,method,argument,with,link,http,message,reader,param,body,param,the,link,method,parameter,to,read,param,actual,param,the,actual,link,method,parameter,to,read,could,be,different,from,code,body,parameter,when,processing,code,http,entity,for,example,param,is,body,required,true,if,the,body,is,required,param,binding,context,the,binding,context,to,use,param,exchange,the,current,exchange,return,the,body,since,5,0,2;protected,mono,object,read,body,method,parameter,body,param,nullable,method,parameter,actual,param,boolean,is,body,required,binding,context,binding,context,server,web,exchange,exchange,resolvable,type,body,type,resolvable,type,for,method,parameter,body,param,resolvable,type,actual,type,actual,param,null,body,type,resolvable,type,for,method,parameter,actual,param,class,resolved,type,body,type,resolve,reactive,adapter,adapter,resolved,type,null,get,adapter,registry,get,adapter,resolved,type,null,resolvable,type,element,type,adapter,null,body,type,get,generic,body,type,is,body,required,is,body,required,adapter,null,adapter,supports,empty,server,http,request,request,exchange,get,request,server,http,response,response,exchange,get,response,media,type,content,type,request,get,headers,get,content,type,media,type,media,type,content,type,null,content,type,media,type,if,logger,is,debug,enabled,logger,debug,content,type,null,content,type,content,type,no,content,type,using,media,type,for,http,message,reader,reader,get,message,readers,if,reader,can,read,element,type,media,type,map,string,object,read,hints,collections,empty,map,if,adapter,null,adapter,is,multi,value,if,logger,is,debug,enabled,logger,debug,0,n,element,type,flux,flux,reader,read,actual,type,element,type,request,response,read,hints,flux,flux,on,error,resume,ex,flux,error,handle,read,error,body,param,ex,if,is,body,required,flux,flux,switch,if,empty,flux,error,handle,missing,body,body,param,object,hints,extract,validation,hints,body,param,if,hints,null,flux,flux,do,on,next,target,validate,target,hints,body,param,binding,context,exchange,return,mono,just,adapter,from,publisher,flux,else,if,logger,is,debug,enabled,logger,debug,0,1,element,type,mono,mono,reader,read,mono,actual,type,element,type,request,response,read,hints,mono,mono,on,error,resume,ex,mono,error,handle,read,error,body,param,ex,if,is,body,required,mono,mono,switch,if,empty,mono,error,handle,missing,body,body,param,object,hints,extract,validation,hints,body,param,if,hints,null,mono,mono,do,on,next,target,validate,target,hints,body,param,binding,context,exchange,return,adapter,null,mono,just,adapter,from,publisher,mono,mono,from,mono,http,method,method,request,get,method,if,content,type,null,method,null,contains,method,flux,data,buffer,body,request,get,body,do,on,next,o,throw,new,unsupported,media,type,status,exception,media,type,this,supported,media,types,element,type,if,is,body,required,body,body,switch,if,empty,mono,error,handle,missing,body,body,param,return,adapter,null,mono,just,adapter,from,publisher,body,mono,from,body,return,mono,error,new,unsupported,media,type,status,exception,media,type,this,supported,media,types,element,type
AbstractMessageReaderArgumentResolver -> protected Mono<Object> readBody(MethodParameter bodyParam, @Nullable MethodParameter actualParam, 			boolean isBodyRequired, BindingContext bindingContext, ServerWebExchange exchange);1530174524;Read the body from a method argument with {@link HttpMessageReader}._@param bodyParam the {@link MethodParameter} to read_@param actualParam the actual {@link MethodParameter} to read_ could be different_from {@code bodyParameter} when processing {@code HttpEntity} for example_@param isBodyRequired true if the body is required_@param bindingContext the binding context to use_@param exchange the current exchange_@return the body_@since 5.0.2;protected Mono<Object> readBody(MethodParameter bodyParam, @Nullable MethodParameter actualParam,_			boolean isBodyRequired, BindingContext bindingContext, ServerWebExchange exchange) {__		ResolvableType bodyType = ResolvableType.forMethodParameter(bodyParam)__		ResolvableType actualType = actualParam == null ? bodyType : ResolvableType.forMethodParameter(actualParam)__		Class<?> resolvedType = bodyType.resolve()__		ReactiveAdapter adapter = (resolvedType != null ? getAdapterRegistry().getAdapter(resolvedType) : null)__		ResolvableType elementType = (adapter != null ? bodyType.getGeneric() : bodyType)__		isBodyRequired = isBodyRequired || (adapter != null && !adapter.supportsEmpty())___		ServerHttpRequest request = exchange.getRequest()__		ServerHttpResponse response = exchange.getResponse()___		MediaType contentType = request.getHeaders().getContentType()__		MediaType mediaType = (contentType != null ? contentType : MediaType.APPLICATION_OCTET_STREAM)___		if (logger.isDebugEnabled()) {_			logger.debug(contentType != null ? "Content-Type:" + contentType :_					"No Content-Type, using " + MediaType.APPLICATION_OCTET_STREAM)__		}__		for (HttpMessageReader<?> reader : getMessageReaders()) {_			if (reader.canRead(elementType, mediaType)) {_				Map<String, Object> readHints = Collections.emptyMap()__				if (adapter != null && adapter.isMultiValue()) {_					if (logger.isDebugEnabled()) {_						logger.debug("0..N [" + elementType + "]")__					}_					Flux<?> flux = reader.read(actualType, elementType, request, response, readHints)__					flux = flux.onErrorResume(ex -> Flux.error(handleReadError(bodyParam, ex)))__					if (isBodyRequired) {_						flux = flux.switchIfEmpty(Flux.error(() -> handleMissingBody(bodyParam)))__					}_					Object[] hints = extractValidationHints(bodyParam)__					if (hints != null) {_						flux = flux.doOnNext(target ->_								validate(target, hints, bodyParam, bindingContext, exchange))__					}_					return Mono.just(adapter.fromPublisher(flux))__				}_				else {_					_					if (logger.isDebugEnabled()) {_						logger.debug("0..1 [" + elementType + "]")__					}_					Mono<?> mono = reader.readMono(actualType, elementType, request, response, readHints)__					mono = mono.onErrorResume(ex -> Mono.error(handleReadError(bodyParam, ex)))__					if (isBodyRequired) {_						mono = mono.switchIfEmpty(Mono.error(() -> handleMissingBody(bodyParam)))__					}_					Object[] hints = extractValidationHints(bodyParam)__					if (hints != null) {_						mono = mono.doOnNext(target ->_								validate(target, hints, bodyParam, bindingContext, exchange))__					}_					return adapter != null ? Mono.just(adapter.fromPublisher(mono)) : Mono.from(mono)__				}_			}_		}__		__		HttpMethod method = request.getMethod()__		if (contentType == null && method != null && SUPPORTED_METHODS.contains(method)) {_			Flux<DataBuffer> body = request.getBody().doOnNext(o -> {_				_				throw new UnsupportedMediaTypeStatusException(mediaType, this.supportedMediaTypes, elementType)__			})__			if (isBodyRequired) {_				body = body.switchIfEmpty(Mono.error(() -> handleMissingBody(bodyParam)))__			}_			return (adapter != null ? Mono.just(adapter.fromPublisher(body)) : Mono.from(body))__		}__		return Mono.error(new UnsupportedMediaTypeStatusException(mediaType, this.supportedMediaTypes, elementType))__	};read,the,body,from,a,method,argument,with,link,http,message,reader,param,body,param,the,link,method,parameter,to,read,param,actual,param,the,actual,link,method,parameter,to,read,could,be,different,from,code,body,parameter,when,processing,code,http,entity,for,example,param,is,body,required,true,if,the,body,is,required,param,binding,context,the,binding,context,to,use,param,exchange,the,current,exchange,return,the,body,since,5,0,2;protected,mono,object,read,body,method,parameter,body,param,nullable,method,parameter,actual,param,boolean,is,body,required,binding,context,binding,context,server,web,exchange,exchange,resolvable,type,body,type,resolvable,type,for,method,parameter,body,param,resolvable,type,actual,type,actual,param,null,body,type,resolvable,type,for,method,parameter,actual,param,class,resolved,type,body,type,resolve,reactive,adapter,adapter,resolved,type,null,get,adapter,registry,get,adapter,resolved,type,null,resolvable,type,element,type,adapter,null,body,type,get,generic,body,type,is,body,required,is,body,required,adapter,null,adapter,supports,empty,server,http,request,request,exchange,get,request,server,http,response,response,exchange,get,response,media,type,content,type,request,get,headers,get,content,type,media,type,media,type,content,type,null,content,type,media,type,if,logger,is,debug,enabled,logger,debug,content,type,null,content,type,content,type,no,content,type,using,media,type,for,http,message,reader,reader,get,message,readers,if,reader,can,read,element,type,media,type,map,string,object,read,hints,collections,empty,map,if,adapter,null,adapter,is,multi,value,if,logger,is,debug,enabled,logger,debug,0,n,element,type,flux,flux,reader,read,actual,type,element,type,request,response,read,hints,flux,flux,on,error,resume,ex,flux,error,handle,read,error,body,param,ex,if,is,body,required,flux,flux,switch,if,empty,flux,error,handle,missing,body,body,param,object,hints,extract,validation,hints,body,param,if,hints,null,flux,flux,do,on,next,target,validate,target,hints,body,param,binding,context,exchange,return,mono,just,adapter,from,publisher,flux,else,if,logger,is,debug,enabled,logger,debug,0,1,element,type,mono,mono,reader,read,mono,actual,type,element,type,request,response,read,hints,mono,mono,on,error,resume,ex,mono,error,handle,read,error,body,param,ex,if,is,body,required,mono,mono,switch,if,empty,mono,error,handle,missing,body,body,param,object,hints,extract,validation,hints,body,param,if,hints,null,mono,mono,do,on,next,target,validate,target,hints,body,param,binding,context,exchange,return,adapter,null,mono,just,adapter,from,publisher,mono,mono,from,mono,http,method,method,request,get,method,if,content,type,null,method,null,contains,method,flux,data,buffer,body,request,get,body,do,on,next,o,throw,new,unsupported,media,type,status,exception,media,type,this,supported,media,types,element,type,if,is,body,required,body,body,switch,if,empty,mono,error,handle,missing,body,body,param,return,adapter,null,mono,just,adapter,from,publisher,body,mono,from,body,return,mono,error,new,unsupported,media,type,status,exception,media,type,this,supported,media,types,element,type
AbstractMessageReaderArgumentResolver -> protected Mono<Object> readBody(MethodParameter bodyParam, @Nullable MethodParameter actualParam, 			boolean isBodyRequired, BindingContext bindingContext, ServerWebExchange exchange);1530190293;Read the body from a method argument with {@link HttpMessageReader}._@param bodyParam the {@link MethodParameter} to read_@param actualParam the actual {@link MethodParameter} to read_ could be different_from {@code bodyParameter} when processing {@code HttpEntity} for example_@param isBodyRequired true if the body is required_@param bindingContext the binding context to use_@param exchange the current exchange_@return the body_@since 5.0.2;protected Mono<Object> readBody(MethodParameter bodyParam, @Nullable MethodParameter actualParam,_			boolean isBodyRequired, BindingContext bindingContext, ServerWebExchange exchange) {__		ResolvableType bodyType = ResolvableType.forMethodParameter(bodyParam)__		ResolvableType actualType = (actualParam != null ? ResolvableType.forMethodParameter(actualParam) : bodyType)__		Class<?> resolvedType = bodyType.resolve()__		ReactiveAdapter adapter = (resolvedType != null ? getAdapterRegistry().getAdapter(resolvedType) : null)__		ResolvableType elementType = (adapter != null ? bodyType.getGeneric() : bodyType)__		isBodyRequired = isBodyRequired || (adapter != null && !adapter.supportsEmpty())___		ServerHttpRequest request = exchange.getRequest()__		ServerHttpResponse response = exchange.getResponse()___		MediaType contentType = request.getHeaders().getContentType()__		MediaType mediaType = (contentType != null ? contentType : MediaType.APPLICATION_OCTET_STREAM)___		if (logger.isDebugEnabled()) {_			logger.debug(contentType != null ? "Content-Type:" + contentType :_					"No Content-Type, using " + MediaType.APPLICATION_OCTET_STREAM)__		}__		for (HttpMessageReader<?> reader : getMessageReaders()) {_			if (reader.canRead(elementType, mediaType)) {_				Map<String, Object> readHints = Collections.emptyMap()__				if (adapter != null && adapter.isMultiValue()) {_					if (logger.isDebugEnabled()) {_						logger.debug("0..N [" + elementType + "]")__					}_					Flux<?> flux = reader.read(actualType, elementType, request, response, readHints)__					flux = flux.onErrorResume(ex -> Flux.error(handleReadError(bodyParam, ex)))__					if (isBodyRequired) {_						flux = flux.switchIfEmpty(Flux.error(() -> handleMissingBody(bodyParam)))__					}_					Object[] hints = extractValidationHints(bodyParam)__					if (hints != null) {_						flux = flux.doOnNext(target ->_								validate(target, hints, bodyParam, bindingContext, exchange))__					}_					return Mono.just(adapter.fromPublisher(flux))__				}_				else {_					_					if (logger.isDebugEnabled()) {_						logger.debug("0..1 [" + elementType + "]")__					}_					Mono<?> mono = reader.readMono(actualType, elementType, request, response, readHints)__					mono = mono.onErrorResume(ex -> Mono.error(handleReadError(bodyParam, ex)))__					if (isBodyRequired) {_						mono = mono.switchIfEmpty(Mono.error(() -> handleMissingBody(bodyParam)))__					}_					Object[] hints = extractValidationHints(bodyParam)__					if (hints != null) {_						mono = mono.doOnNext(target ->_								validate(target, hints, bodyParam, bindingContext, exchange))__					}_					return (adapter != null ? Mono.just(adapter.fromPublisher(mono)) : Mono.from(mono))__				}_			}_		}__		__		HttpMethod method = request.getMethod()__		if (contentType == null && method != null && SUPPORTED_METHODS.contains(method)) {_			Flux<DataBuffer> body = request.getBody().doOnNext(o -> {_				_				throw new UnsupportedMediaTypeStatusException(mediaType, this.supportedMediaTypes, elementType)__			})__			if (isBodyRequired) {_				body = body.switchIfEmpty(Mono.error(() -> handleMissingBody(bodyParam)))__			}_			return (adapter != null ? Mono.just(adapter.fromPublisher(body)) : Mono.from(body))__		}__		return Mono.error(new UnsupportedMediaTypeStatusException(mediaType, this.supportedMediaTypes, elementType))__	};read,the,body,from,a,method,argument,with,link,http,message,reader,param,body,param,the,link,method,parameter,to,read,param,actual,param,the,actual,link,method,parameter,to,read,could,be,different,from,code,body,parameter,when,processing,code,http,entity,for,example,param,is,body,required,true,if,the,body,is,required,param,binding,context,the,binding,context,to,use,param,exchange,the,current,exchange,return,the,body,since,5,0,2;protected,mono,object,read,body,method,parameter,body,param,nullable,method,parameter,actual,param,boolean,is,body,required,binding,context,binding,context,server,web,exchange,exchange,resolvable,type,body,type,resolvable,type,for,method,parameter,body,param,resolvable,type,actual,type,actual,param,null,resolvable,type,for,method,parameter,actual,param,body,type,class,resolved,type,body,type,resolve,reactive,adapter,adapter,resolved,type,null,get,adapter,registry,get,adapter,resolved,type,null,resolvable,type,element,type,adapter,null,body,type,get,generic,body,type,is,body,required,is,body,required,adapter,null,adapter,supports,empty,server,http,request,request,exchange,get,request,server,http,response,response,exchange,get,response,media,type,content,type,request,get,headers,get,content,type,media,type,media,type,content,type,null,content,type,media,type,if,logger,is,debug,enabled,logger,debug,content,type,null,content,type,content,type,no,content,type,using,media,type,for,http,message,reader,reader,get,message,readers,if,reader,can,read,element,type,media,type,map,string,object,read,hints,collections,empty,map,if,adapter,null,adapter,is,multi,value,if,logger,is,debug,enabled,logger,debug,0,n,element,type,flux,flux,reader,read,actual,type,element,type,request,response,read,hints,flux,flux,on,error,resume,ex,flux,error,handle,read,error,body,param,ex,if,is,body,required,flux,flux,switch,if,empty,flux,error,handle,missing,body,body,param,object,hints,extract,validation,hints,body,param,if,hints,null,flux,flux,do,on,next,target,validate,target,hints,body,param,binding,context,exchange,return,mono,just,adapter,from,publisher,flux,else,if,logger,is,debug,enabled,logger,debug,0,1,element,type,mono,mono,reader,read,mono,actual,type,element,type,request,response,read,hints,mono,mono,on,error,resume,ex,mono,error,handle,read,error,body,param,ex,if,is,body,required,mono,mono,switch,if,empty,mono,error,handle,missing,body,body,param,object,hints,extract,validation,hints,body,param,if,hints,null,mono,mono,do,on,next,target,validate,target,hints,body,param,binding,context,exchange,return,adapter,null,mono,just,adapter,from,publisher,mono,mono,from,mono,http,method,method,request,get,method,if,content,type,null,method,null,contains,method,flux,data,buffer,body,request,get,body,do,on,next,o,throw,new,unsupported,media,type,status,exception,media,type,this,supported,media,types,element,type,if,is,body,required,body,body,switch,if,empty,mono,error,handle,missing,body,body,param,return,adapter,null,mono,just,adapter,from,publisher,body,mono,from,body,return,mono,error,new,unsupported,media,type,status,exception,media,type,this,supported,media,types,element,type
AbstractMessageReaderArgumentResolver -> protected Mono<Object> readBody(MethodParameter bodyParam, @Nullable MethodParameter actualParam, 			boolean isBodyRequired, BindingContext bindingContext, ServerWebExchange exchange);1530793633;Read the body from a method argument with {@link HttpMessageReader}._@param bodyParam the {@link MethodParameter} to read_@param actualParam the actual {@link MethodParameter} to read_ could be different_from {@code bodyParameter} when processing {@code HttpEntity} for example_@param isBodyRequired true if the body is required_@param bindingContext the binding context to use_@param exchange the current exchange_@return the body_@since 5.0.2;protected Mono<Object> readBody(MethodParameter bodyParam, @Nullable MethodParameter actualParam,_			boolean isBodyRequired, BindingContext bindingContext, ServerWebExchange exchange) {__		ResolvableType bodyType = ResolvableType.forMethodParameter(bodyParam)__		ResolvableType actualType = (actualParam != null ? ResolvableType.forMethodParameter(actualParam) : bodyType)__		Class<?> resolvedType = bodyType.resolve()__		ReactiveAdapter adapter = (resolvedType != null ? getAdapterRegistry().getAdapter(resolvedType) : null)__		ResolvableType elementType = (adapter != null ? bodyType.getGeneric() : bodyType)__		isBodyRequired = isBodyRequired || (adapter != null && !adapter.supportsEmpty())___		ServerHttpRequest request = exchange.getRequest()__		ServerHttpResponse response = exchange.getResponse()___		MediaType contentType = request.getHeaders().getContentType()__		MediaType mediaType = (contentType != null ? contentType : MediaType.APPLICATION_OCTET_STREAM)___		if (logger.isDebugEnabled()) {_			logger.debug(exchange.getLogPrefix() + (contentType != null ?_					"Content-Type:" + contentType :_					"No Content-Type, using " + MediaType.APPLICATION_OCTET_STREAM))__		}__		for (HttpMessageReader<?> reader : getMessageReaders()) {_			if (reader.canRead(elementType, mediaType)) {_				Map<String, Object> readHints = Collections.emptyMap()__				if (adapter != null && adapter.isMultiValue()) {_					if (logger.isDebugEnabled()) {_						logger.debug(exchange.getLogPrefix() + "0..N [" + elementType + "]")__					}_					Flux<?> flux = reader.read(actualType, elementType, request, response, readHints)__					flux = flux.onErrorResume(ex -> Flux.error(handleReadError(bodyParam, ex)))__					if (isBodyRequired) {_						flux = flux.switchIfEmpty(Flux.error(() -> handleMissingBody(bodyParam)))__					}_					Object[] hints = extractValidationHints(bodyParam)__					if (hints != null) {_						flux = flux.doOnNext(target ->_								validate(target, hints, bodyParam, bindingContext, exchange))__					}_					return Mono.just(adapter.fromPublisher(flux))__				}_				else {_					_					if (logger.isDebugEnabled()) {_						logger.debug(exchange.getLogPrefix() + "0..1 [" + elementType + "]")__					}_					Mono<?> mono = reader.readMono(actualType, elementType, request, response, readHints)__					mono = mono.onErrorResume(ex -> Mono.error(handleReadError(bodyParam, ex)))__					if (isBodyRequired) {_						mono = mono.switchIfEmpty(Mono.error(() -> handleMissingBody(bodyParam)))__					}_					Object[] hints = extractValidationHints(bodyParam)__					if (hints != null) {_						mono = mono.doOnNext(target ->_								validate(target, hints, bodyParam, bindingContext, exchange))__					}_					return (adapter != null ? Mono.just(adapter.fromPublisher(mono)) : Mono.from(mono))__				}_			}_		}__		__		HttpMethod method = request.getMethod()__		if (contentType == null && method != null && SUPPORTED_METHODS.contains(method)) {_			Flux<DataBuffer> body = request.getBody().doOnNext(o -> {_				_				throw new UnsupportedMediaTypeStatusException(mediaType, this.supportedMediaTypes, elementType)__			})__			if (isBodyRequired) {_				body = body.switchIfEmpty(Mono.error(() -> handleMissingBody(bodyParam)))__			}_			return (adapter != null ? Mono.just(adapter.fromPublisher(body)) : Mono.from(body))__		}__		return Mono.error(new UnsupportedMediaTypeStatusException(mediaType, this.supportedMediaTypes, elementType))__	};read,the,body,from,a,method,argument,with,link,http,message,reader,param,body,param,the,link,method,parameter,to,read,param,actual,param,the,actual,link,method,parameter,to,read,could,be,different,from,code,body,parameter,when,processing,code,http,entity,for,example,param,is,body,required,true,if,the,body,is,required,param,binding,context,the,binding,context,to,use,param,exchange,the,current,exchange,return,the,body,since,5,0,2;protected,mono,object,read,body,method,parameter,body,param,nullable,method,parameter,actual,param,boolean,is,body,required,binding,context,binding,context,server,web,exchange,exchange,resolvable,type,body,type,resolvable,type,for,method,parameter,body,param,resolvable,type,actual,type,actual,param,null,resolvable,type,for,method,parameter,actual,param,body,type,class,resolved,type,body,type,resolve,reactive,adapter,adapter,resolved,type,null,get,adapter,registry,get,adapter,resolved,type,null,resolvable,type,element,type,adapter,null,body,type,get,generic,body,type,is,body,required,is,body,required,adapter,null,adapter,supports,empty,server,http,request,request,exchange,get,request,server,http,response,response,exchange,get,response,media,type,content,type,request,get,headers,get,content,type,media,type,media,type,content,type,null,content,type,media,type,if,logger,is,debug,enabled,logger,debug,exchange,get,log,prefix,content,type,null,content,type,content,type,no,content,type,using,media,type,for,http,message,reader,reader,get,message,readers,if,reader,can,read,element,type,media,type,map,string,object,read,hints,collections,empty,map,if,adapter,null,adapter,is,multi,value,if,logger,is,debug,enabled,logger,debug,exchange,get,log,prefix,0,n,element,type,flux,flux,reader,read,actual,type,element,type,request,response,read,hints,flux,flux,on,error,resume,ex,flux,error,handle,read,error,body,param,ex,if,is,body,required,flux,flux,switch,if,empty,flux,error,handle,missing,body,body,param,object,hints,extract,validation,hints,body,param,if,hints,null,flux,flux,do,on,next,target,validate,target,hints,body,param,binding,context,exchange,return,mono,just,adapter,from,publisher,flux,else,if,logger,is,debug,enabled,logger,debug,exchange,get,log,prefix,0,1,element,type,mono,mono,reader,read,mono,actual,type,element,type,request,response,read,hints,mono,mono,on,error,resume,ex,mono,error,handle,read,error,body,param,ex,if,is,body,required,mono,mono,switch,if,empty,mono,error,handle,missing,body,body,param,object,hints,extract,validation,hints,body,param,if,hints,null,mono,mono,do,on,next,target,validate,target,hints,body,param,binding,context,exchange,return,adapter,null,mono,just,adapter,from,publisher,mono,mono,from,mono,http,method,method,request,get,method,if,content,type,null,method,null,contains,method,flux,data,buffer,body,request,get,body,do,on,next,o,throw,new,unsupported,media,type,status,exception,media,type,this,supported,media,types,element,type,if,is,body,required,body,body,switch,if,empty,mono,error,handle,missing,body,body,param,return,adapter,null,mono,just,adapter,from,publisher,body,mono,from,body,return,mono,error,new,unsupported,media,type,status,exception,media,type,this,supported,media,types,element,type
AbstractMessageReaderArgumentResolver -> protected Mono<Object> readBody(MethodParameter bodyParam, @Nullable MethodParameter actualParam, 			boolean isBodyRequired, BindingContext bindingContext, ServerWebExchange exchange);1530793695;Read the body from a method argument with {@link HttpMessageReader}._@param bodyParam the {@link MethodParameter} to read_@param actualParam the actual {@link MethodParameter} to read_ could be different_from {@code bodyParameter} when processing {@code HttpEntity} for example_@param isBodyRequired true if the body is required_@param bindingContext the binding context to use_@param exchange the current exchange_@return the body_@since 5.0.2;protected Mono<Object> readBody(MethodParameter bodyParam, @Nullable MethodParameter actualParam,_			boolean isBodyRequired, BindingContext bindingContext, ServerWebExchange exchange) {__		ResolvableType bodyType = ResolvableType.forMethodParameter(bodyParam)__		ResolvableType actualType = (actualParam != null ? ResolvableType.forMethodParameter(actualParam) : bodyType)__		Class<?> resolvedType = bodyType.resolve()__		ReactiveAdapter adapter = (resolvedType != null ? getAdapterRegistry().getAdapter(resolvedType) : null)__		ResolvableType elementType = (adapter != null ? bodyType.getGeneric() : bodyType)__		isBodyRequired = isBodyRequired || (adapter != null && !adapter.supportsEmpty())___		ServerHttpRequest request = exchange.getRequest()__		ServerHttpResponse response = exchange.getResponse()___		MediaType contentType = request.getHeaders().getContentType()__		MediaType mediaType = (contentType != null ? contentType : MediaType.APPLICATION_OCTET_STREAM)___		if (logger.isDebugEnabled()) {_			logger.debug(exchange.getLogPrefix() + (contentType != null ?_					"Content-Type:" + contentType :_					"No Content-Type, using " + MediaType.APPLICATION_OCTET_STREAM))__		}__		for (HttpMessageReader<?> reader : getMessageReaders()) {_			if (reader.canRead(elementType, mediaType)) {_				Map<String, Object> readHints = Hints.from(Hints.LOG_PREFIX_HINT, exchange.getLogPrefix())__				if (adapter != null && adapter.isMultiValue()) {_					if (logger.isDebugEnabled()) {_						logger.debug(exchange.getLogPrefix() + "0..N [" + elementType + "]")__					}_					Flux<?> flux = reader.read(actualType, elementType, request, response, readHints)__					flux = flux.onErrorResume(ex -> Flux.error(handleReadError(bodyParam, ex)))__					if (isBodyRequired) {_						flux = flux.switchIfEmpty(Flux.error(() -> handleMissingBody(bodyParam)))__					}_					Object[] hints = extractValidationHints(bodyParam)__					if (hints != null) {_						flux = flux.doOnNext(target ->_								validate(target, hints, bodyParam, bindingContext, exchange))__					}_					return Mono.just(adapter.fromPublisher(flux))__				}_				else {_					_					if (logger.isDebugEnabled()) {_						logger.debug(exchange.getLogPrefix() + "0..1 [" + elementType + "]")__					}_					Mono<?> mono = reader.readMono(actualType, elementType, request, response, readHints)__					mono = mono.onErrorResume(ex -> Mono.error(handleReadError(bodyParam, ex)))__					if (isBodyRequired) {_						mono = mono.switchIfEmpty(Mono.error(() -> handleMissingBody(bodyParam)))__					}_					Object[] hints = extractValidationHints(bodyParam)__					if (hints != null) {_						mono = mono.doOnNext(target ->_								validate(target, hints, bodyParam, bindingContext, exchange))__					}_					return (adapter != null ? Mono.just(adapter.fromPublisher(mono)) : Mono.from(mono))__				}_			}_		}__		__		HttpMethod method = request.getMethod()__		if (contentType == null && method != null && SUPPORTED_METHODS.contains(method)) {_			Flux<DataBuffer> body = request.getBody().doOnNext(o -> {_				_				throw new UnsupportedMediaTypeStatusException(mediaType, this.supportedMediaTypes, elementType)__			})__			if (isBodyRequired) {_				body = body.switchIfEmpty(Mono.error(() -> handleMissingBody(bodyParam)))__			}_			return (adapter != null ? Mono.just(adapter.fromPublisher(body)) : Mono.from(body))__		}__		return Mono.error(new UnsupportedMediaTypeStatusException(mediaType, this.supportedMediaTypes, elementType))__	};read,the,body,from,a,method,argument,with,link,http,message,reader,param,body,param,the,link,method,parameter,to,read,param,actual,param,the,actual,link,method,parameter,to,read,could,be,different,from,code,body,parameter,when,processing,code,http,entity,for,example,param,is,body,required,true,if,the,body,is,required,param,binding,context,the,binding,context,to,use,param,exchange,the,current,exchange,return,the,body,since,5,0,2;protected,mono,object,read,body,method,parameter,body,param,nullable,method,parameter,actual,param,boolean,is,body,required,binding,context,binding,context,server,web,exchange,exchange,resolvable,type,body,type,resolvable,type,for,method,parameter,body,param,resolvable,type,actual,type,actual,param,null,resolvable,type,for,method,parameter,actual,param,body,type,class,resolved,type,body,type,resolve,reactive,adapter,adapter,resolved,type,null,get,adapter,registry,get,adapter,resolved,type,null,resolvable,type,element,type,adapter,null,body,type,get,generic,body,type,is,body,required,is,body,required,adapter,null,adapter,supports,empty,server,http,request,request,exchange,get,request,server,http,response,response,exchange,get,response,media,type,content,type,request,get,headers,get,content,type,media,type,media,type,content,type,null,content,type,media,type,if,logger,is,debug,enabled,logger,debug,exchange,get,log,prefix,content,type,null,content,type,content,type,no,content,type,using,media,type,for,http,message,reader,reader,get,message,readers,if,reader,can,read,element,type,media,type,map,string,object,read,hints,hints,from,hints,exchange,get,log,prefix,if,adapter,null,adapter,is,multi,value,if,logger,is,debug,enabled,logger,debug,exchange,get,log,prefix,0,n,element,type,flux,flux,reader,read,actual,type,element,type,request,response,read,hints,flux,flux,on,error,resume,ex,flux,error,handle,read,error,body,param,ex,if,is,body,required,flux,flux,switch,if,empty,flux,error,handle,missing,body,body,param,object,hints,extract,validation,hints,body,param,if,hints,null,flux,flux,do,on,next,target,validate,target,hints,body,param,binding,context,exchange,return,mono,just,adapter,from,publisher,flux,else,if,logger,is,debug,enabled,logger,debug,exchange,get,log,prefix,0,1,element,type,mono,mono,reader,read,mono,actual,type,element,type,request,response,read,hints,mono,mono,on,error,resume,ex,mono,error,handle,read,error,body,param,ex,if,is,body,required,mono,mono,switch,if,empty,mono,error,handle,missing,body,body,param,object,hints,extract,validation,hints,body,param,if,hints,null,mono,mono,do,on,next,target,validate,target,hints,body,param,binding,context,exchange,return,adapter,null,mono,just,adapter,from,publisher,mono,mono,from,mono,http,method,method,request,get,method,if,content,type,null,method,null,contains,method,flux,data,buffer,body,request,get,body,do,on,next,o,throw,new,unsupported,media,type,status,exception,media,type,this,supported,media,types,element,type,if,is,body,required,body,body,switch,if,empty,mono,error,handle,missing,body,body,param,return,adapter,null,mono,just,adapter,from,publisher,body,mono,from,body,return,mono,error,new,unsupported,media,type,status,exception,media,type,this,supported,media,types,element,type
AbstractMessageReaderArgumentResolver -> protected Mono<Object> readBody(MethodParameter bodyParam, @Nullable MethodParameter actualParam, 			boolean isBodyRequired, BindingContext bindingContext, ServerWebExchange exchange);1541189993;Read the body from a method argument with {@link HttpMessageReader}._@param bodyParam represents the element type for the body_@param actualParam the actual method argument type_ possibly different_from {@code bodyParam}, e.g. for an {@code HttpEntity} argument_@param isBodyRequired true if the body is required_@param bindingContext the binding context to use_@param exchange the current exchange_@return a Mono with the value to use for the method argument_@since 5.0.2;protected Mono<Object> readBody(MethodParameter bodyParam, @Nullable MethodParameter actualParam,_			boolean isBodyRequired, BindingContext bindingContext, ServerWebExchange exchange) {__		ResolvableType bodyType = ResolvableType.forMethodParameter(bodyParam)__		ResolvableType actualType = (actualParam != null ? ResolvableType.forMethodParameter(actualParam) : bodyType)__		Class<?> resolvedType = bodyType.resolve()__		ReactiveAdapter adapter = (resolvedType != null ? getAdapterRegistry().getAdapter(resolvedType) : null)__		ResolvableType elementType = (adapter != null ? bodyType.getGeneric() : bodyType)__		isBodyRequired = isBodyRequired || (adapter != null && !adapter.supportsEmpty())___		ServerHttpRequest request = exchange.getRequest()__		ServerHttpResponse response = exchange.getResponse()___		MediaType contentType = request.getHeaders().getContentType()__		MediaType mediaType = (contentType != null ? contentType : MediaType.APPLICATION_OCTET_STREAM)__		Object[] hints = extractValidationHints(bodyParam)___		if (logger.isDebugEnabled()) {_			logger.debug(exchange.getLogPrefix() + (contentType != null ?_					"Content-Type:" + contentType :_					"No Content-Type, using " + MediaType.APPLICATION_OCTET_STREAM))__		}__		for (HttpMessageReader<?> reader : getMessageReaders()) {_			if (reader.canRead(elementType, mediaType)) {_				Map<String, Object> readHints = Hints.from(Hints.LOG_PREFIX_HINT, exchange.getLogPrefix())__				if (adapter != null && adapter.isMultiValue()) {_					if (logger.isDebugEnabled()) {_						logger.debug(exchange.getLogPrefix() + "0..N [" + elementType + "]")__					}_					Flux<?> flux = reader.read(actualType, elementType, request, response, readHints)__					flux = flux.onErrorResume(ex -> Flux.error(handleReadError(bodyParam, ex)))__					if (isBodyRequired) {_						flux = flux.switchIfEmpty(Flux.error(() -> handleMissingBody(bodyParam)))__					}_					if (hints != null) {_						flux = flux.doOnNext(target ->_								validate(target, hints, bodyParam, bindingContext, exchange))__					}_					return Mono.just(adapter.fromPublisher(flux))__				}_				else {_					_					if (logger.isDebugEnabled()) {_						logger.debug(exchange.getLogPrefix() + "0..1 [" + elementType + "]")__					}_					Mono<?> mono = reader.readMono(actualType, elementType, request, response, readHints)__					mono = mono.onErrorResume(ex -> Mono.error(handleReadError(bodyParam, ex)))__					if (isBodyRequired) {_						mono = mono.switchIfEmpty(Mono.error(() -> handleMissingBody(bodyParam)))__					}_					if (hints != null) {_						mono = mono.doOnNext(target ->_								validate(target, hints, bodyParam, bindingContext, exchange))__					}_					return (adapter != null ? Mono.just(adapter.fromPublisher(mono)) : Mono.from(mono))__				}_			}_		}__		__		HttpMethod method = request.getMethod()__		if (contentType == null && method != null && SUPPORTED_METHODS.contains(method)) {_			Flux<DataBuffer> body = request.getBody().doOnNext(o -> {_				_				throw new UnsupportedMediaTypeStatusException(mediaType, this.supportedMediaTypes, elementType)__			})__			if (isBodyRequired) {_				body = body.switchIfEmpty(Mono.error(() -> handleMissingBody(bodyParam)))__			}_			return (adapter != null ? Mono.just(adapter.fromPublisher(body)) : Mono.from(body))__		}__		return Mono.error(new UnsupportedMediaTypeStatusException(mediaType, this.supportedMediaTypes, elementType))__	};read,the,body,from,a,method,argument,with,link,http,message,reader,param,body,param,represents,the,element,type,for,the,body,param,actual,param,the,actual,method,argument,type,possibly,different,from,code,body,param,e,g,for,an,code,http,entity,argument,param,is,body,required,true,if,the,body,is,required,param,binding,context,the,binding,context,to,use,param,exchange,the,current,exchange,return,a,mono,with,the,value,to,use,for,the,method,argument,since,5,0,2;protected,mono,object,read,body,method,parameter,body,param,nullable,method,parameter,actual,param,boolean,is,body,required,binding,context,binding,context,server,web,exchange,exchange,resolvable,type,body,type,resolvable,type,for,method,parameter,body,param,resolvable,type,actual,type,actual,param,null,resolvable,type,for,method,parameter,actual,param,body,type,class,resolved,type,body,type,resolve,reactive,adapter,adapter,resolved,type,null,get,adapter,registry,get,adapter,resolved,type,null,resolvable,type,element,type,adapter,null,body,type,get,generic,body,type,is,body,required,is,body,required,adapter,null,adapter,supports,empty,server,http,request,request,exchange,get,request,server,http,response,response,exchange,get,response,media,type,content,type,request,get,headers,get,content,type,media,type,media,type,content,type,null,content,type,media,type,object,hints,extract,validation,hints,body,param,if,logger,is,debug,enabled,logger,debug,exchange,get,log,prefix,content,type,null,content,type,content,type,no,content,type,using,media,type,for,http,message,reader,reader,get,message,readers,if,reader,can,read,element,type,media,type,map,string,object,read,hints,hints,from,hints,exchange,get,log,prefix,if,adapter,null,adapter,is,multi,value,if,logger,is,debug,enabled,logger,debug,exchange,get,log,prefix,0,n,element,type,flux,flux,reader,read,actual,type,element,type,request,response,read,hints,flux,flux,on,error,resume,ex,flux,error,handle,read,error,body,param,ex,if,is,body,required,flux,flux,switch,if,empty,flux,error,handle,missing,body,body,param,if,hints,null,flux,flux,do,on,next,target,validate,target,hints,body,param,binding,context,exchange,return,mono,just,adapter,from,publisher,flux,else,if,logger,is,debug,enabled,logger,debug,exchange,get,log,prefix,0,1,element,type,mono,mono,reader,read,mono,actual,type,element,type,request,response,read,hints,mono,mono,on,error,resume,ex,mono,error,handle,read,error,body,param,ex,if,is,body,required,mono,mono,switch,if,empty,mono,error,handle,missing,body,body,param,if,hints,null,mono,mono,do,on,next,target,validate,target,hints,body,param,binding,context,exchange,return,adapter,null,mono,just,adapter,from,publisher,mono,mono,from,mono,http,method,method,request,get,method,if,content,type,null,method,null,contains,method,flux,data,buffer,body,request,get,body,do,on,next,o,throw,new,unsupported,media,type,status,exception,media,type,this,supported,media,types,element,type,if,is,body,required,body,body,switch,if,empty,mono,error,handle,missing,body,body,param,return,adapter,null,mono,just,adapter,from,publisher,body,mono,from,body,return,mono,error,new,unsupported,media,type,status,exception,media,type,this,supported,media,types,element,type
AbstractMessageReaderArgumentResolver -> protected Mono<Object> readBody(MethodParameter bodyParam, @Nullable MethodParameter actualParam, 			boolean isBodyRequired, BindingContext bindingContext, ServerWebExchange exchange);1542829302;Read the body from a method argument with {@link HttpMessageReader}._@param bodyParam represents the element type for the body_@param actualParam the actual method argument type_ possibly different_from {@code bodyParam}, e.g. for an {@code HttpEntity} argument_@param isBodyRequired true if the body is required_@param bindingContext the binding context to use_@param exchange the current exchange_@return a Mono with the value to use for the method argument_@since 5.0.2;protected Mono<Object> readBody(MethodParameter bodyParam, @Nullable MethodParameter actualParam,_			boolean isBodyRequired, BindingContext bindingContext, ServerWebExchange exchange) {__		ResolvableType bodyType = ResolvableType.forMethodParameter(bodyParam)__		ResolvableType actualType = (actualParam != null ? ResolvableType.forMethodParameter(actualParam) : bodyType)__		Class<?> resolvedType = bodyType.resolve()__		ReactiveAdapter adapter = (resolvedType != null ? getAdapterRegistry().getAdapter(resolvedType) : null)__		ResolvableType elementType = (adapter != null ? bodyType.getGeneric() : bodyType)__		isBodyRequired = isBodyRequired || (adapter != null && !adapter.supportsEmpty())___		ServerHttpRequest request = exchange.getRequest()__		ServerHttpResponse response = exchange.getResponse()___		MediaType contentType = request.getHeaders().getContentType()__		MediaType mediaType = (contentType != null ? contentType : MediaType.APPLICATION_OCTET_STREAM)__		Object[] hints = extractValidationHints(bodyParam)___		if (logger.isDebugEnabled()) {_			logger.debug(exchange.getLogPrefix() + (contentType != null ?_					"Content-Type:" + contentType :_					"No Content-Type, using " + MediaType.APPLICATION_OCTET_STREAM))__		}__		for (HttpMessageReader<?> reader : getMessageReaders()) {_			if (reader.canRead(elementType, mediaType)) {_				Map<String, Object> readHints = Hints.from(Hints.LOG_PREFIX_HINT, exchange.getLogPrefix())__				if (adapter != null && adapter.isMultiValue()) {_					if (logger.isDebugEnabled()) {_						logger.debug(exchange.getLogPrefix() + "0..N [" + elementType + "]")__					}_					Flux<?> flux = reader.read(actualType, elementType, request, response, readHints)__					flux = flux.onErrorResume(ex -> Flux.error(handleReadError(bodyParam, ex)))__					if (isBodyRequired) {_						flux = flux.switchIfEmpty(Flux.error(() -> handleMissingBody(bodyParam)))__					}_					if (hints != null) {_						flux = flux.doOnNext(target ->_								validate(target, hints, bodyParam, bindingContext, exchange))__					}_					return Mono.just(adapter.fromPublisher(flux))__				}_				else {_					_					if (logger.isDebugEnabled()) {_						logger.debug(exchange.getLogPrefix() + "0..1 [" + elementType + "]")__					}_					Mono<?> mono = reader.readMono(actualType, elementType, request, response, readHints)__					mono = mono.onErrorResume(ex -> Mono.error(handleReadError(bodyParam, ex)))__					if (isBodyRequired) {_						mono = mono.switchIfEmpty(Mono.error(() -> handleMissingBody(bodyParam)))__					}_					if (hints != null) {_						mono = mono.doOnNext(target ->_								validate(target, hints, bodyParam, bindingContext, exchange))__					}_					return (adapter != null ? Mono.just(adapter.fromPublisher(mono)) : Mono.from(mono))__				}_			}_		}__		__		HttpMethod method = request.getMethod()__		if (contentType == null && method != null && SUPPORTED_METHODS.contains(method)) {_			Flux<DataBuffer> body = request.getBody().doOnNext(o -> {_				_				throw new UnsupportedMediaTypeStatusException(mediaType, this.supportedMediaTypes, elementType)__			})__			if (isBodyRequired) {_				body = body.switchIfEmpty(Mono.error(() -> handleMissingBody(bodyParam)))__			}_			return (adapter != null ? Mono.just(adapter.fromPublisher(body)) : Mono.from(body))__		}__		return Mono.error(new UnsupportedMediaTypeStatusException(mediaType, this.supportedMediaTypes, elementType))__	};read,the,body,from,a,method,argument,with,link,http,message,reader,param,body,param,represents,the,element,type,for,the,body,param,actual,param,the,actual,method,argument,type,possibly,different,from,code,body,param,e,g,for,an,code,http,entity,argument,param,is,body,required,true,if,the,body,is,required,param,binding,context,the,binding,context,to,use,param,exchange,the,current,exchange,return,a,mono,with,the,value,to,use,for,the,method,argument,since,5,0,2;protected,mono,object,read,body,method,parameter,body,param,nullable,method,parameter,actual,param,boolean,is,body,required,binding,context,binding,context,server,web,exchange,exchange,resolvable,type,body,type,resolvable,type,for,method,parameter,body,param,resolvable,type,actual,type,actual,param,null,resolvable,type,for,method,parameter,actual,param,body,type,class,resolved,type,body,type,resolve,reactive,adapter,adapter,resolved,type,null,get,adapter,registry,get,adapter,resolved,type,null,resolvable,type,element,type,adapter,null,body,type,get,generic,body,type,is,body,required,is,body,required,adapter,null,adapter,supports,empty,server,http,request,request,exchange,get,request,server,http,response,response,exchange,get,response,media,type,content,type,request,get,headers,get,content,type,media,type,media,type,content,type,null,content,type,media,type,object,hints,extract,validation,hints,body,param,if,logger,is,debug,enabled,logger,debug,exchange,get,log,prefix,content,type,null,content,type,content,type,no,content,type,using,media,type,for,http,message,reader,reader,get,message,readers,if,reader,can,read,element,type,media,type,map,string,object,read,hints,hints,from,hints,exchange,get,log,prefix,if,adapter,null,adapter,is,multi,value,if,logger,is,debug,enabled,logger,debug,exchange,get,log,prefix,0,n,element,type,flux,flux,reader,read,actual,type,element,type,request,response,read,hints,flux,flux,on,error,resume,ex,flux,error,handle,read,error,body,param,ex,if,is,body,required,flux,flux,switch,if,empty,flux,error,handle,missing,body,body,param,if,hints,null,flux,flux,do,on,next,target,validate,target,hints,body,param,binding,context,exchange,return,mono,just,adapter,from,publisher,flux,else,if,logger,is,debug,enabled,logger,debug,exchange,get,log,prefix,0,1,element,type,mono,mono,reader,read,mono,actual,type,element,type,request,response,read,hints,mono,mono,on,error,resume,ex,mono,error,handle,read,error,body,param,ex,if,is,body,required,mono,mono,switch,if,empty,mono,error,handle,missing,body,body,param,if,hints,null,mono,mono,do,on,next,target,validate,target,hints,body,param,binding,context,exchange,return,adapter,null,mono,just,adapter,from,publisher,mono,mono,from,mono,http,method,method,request,get,method,if,content,type,null,method,null,contains,method,flux,data,buffer,body,request,get,body,do,on,next,o,throw,new,unsupported,media,type,status,exception,media,type,this,supported,media,types,element,type,if,is,body,required,body,body,switch,if,empty,mono,error,handle,missing,body,body,param,return,adapter,null,mono,just,adapter,from,publisher,body,mono,from,body,return,mono,error,new,unsupported,media,type,status,exception,media,type,this,supported,media,types,element,type
AbstractMessageReaderArgumentResolver -> public ReactiveAdapterRegistry getAdapterRegistry();1485986572;Return the configured {@link ReactiveAdapterRegistry}.;public ReactiveAdapterRegistry getAdapterRegistry() {_		return this.adapterRegistry__	};return,the,configured,link,reactive,adapter,registry;public,reactive,adapter,registry,get,adapter,registry,return,this,adapter,registry
AbstractMessageReaderArgumentResolver -> public ReactiveAdapterRegistry getAdapterRegistry();1489433888;Return the configured {@link ReactiveAdapterRegistry}.;public ReactiveAdapterRegistry getAdapterRegistry() {_		return this.adapterRegistry__	};return,the,configured,link,reactive,adapter,registry;public,reactive,adapter,registry,get,adapter,registry,return,this,adapter,registry
AbstractMessageReaderArgumentResolver -> @Nullable 	private Object[] extractValidationHints(MethodParameter parameter);1495868221;Check if the given MethodParameter requires validation and if so return_a (possibly empty) Object[] with validation hints. A return value of_{@code null} indicates that validation is not required.;@Nullable_	private Object[] extractValidationHints(MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				return (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__			}_		}_		return null__	};check,if,the,given,method,parameter,requires,validation,and,if,so,return,a,possibly,empty,object,with,validation,hints,a,return,value,of,code,null,indicates,that,validation,is,not,required;nullable,private,object,extract,validation,hints,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,return,hints,instanceof,object,object,hints,new,object,hints,return,null
AbstractMessageReaderArgumentResolver -> @Nullable 	private Object[] extractValidationHints(MethodParameter parameter);1496837955;Check if the given MethodParameter requires validation and if so return_a (possibly empty) Object[] with validation hints. A return value of_{@code null} indicates that validation is not required.;@Nullable_	private Object[] extractValidationHints(MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				return (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__			}_		}_		return null__	};check,if,the,given,method,parameter,requires,validation,and,if,so,return,a,possibly,empty,object,with,validation,hints,a,return,value,of,code,null,indicates,that,validation,is,not,required;nullable,private,object,extract,validation,hints,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,return,hints,instanceof,object,object,hints,new,object,hints,return,null
AbstractMessageReaderArgumentResolver -> @Nullable 	private Object[] extractValidationHints(MethodParameter parameter);1499937094;Check if the given MethodParameter requires validation and if so return_a (possibly empty) Object[] with validation hints. A return value of_{@code null} indicates that validation is not required.;@Nullable_	private Object[] extractValidationHints(MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				return (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__			}_		}_		return null__	};check,if,the,given,method,parameter,requires,validation,and,if,so,return,a,possibly,empty,object,with,validation,hints,a,return,value,of,code,null,indicates,that,validation,is,not,required;nullable,private,object,extract,validation,hints,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,return,hints,instanceof,object,object,hints,new,object,hints,return,null
AbstractMessageReaderArgumentResolver -> @Nullable 	private Object[] extractValidationHints(MethodParameter parameter);1510841578;Check if the given MethodParameter requires validation and if so return_a (possibly empty) Object[] with validation hints. A return value of_{@code null} indicates that validation is not required.;@Nullable_	private Object[] extractValidationHints(MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				return (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__			}_		}_		return null__	};check,if,the,given,method,parameter,requires,validation,and,if,so,return,a,possibly,empty,object,with,validation,hints,a,return,value,of,code,null,indicates,that,validation,is,not,required;nullable,private,object,extract,validation,hints,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,return,hints,instanceof,object,object,hints,new,object,hints,return,null
AbstractMessageReaderArgumentResolver -> @Nullable 	private Object[] extractValidationHints(MethodParameter parameter);1511215342;Check if the given MethodParameter requires validation and if so return_a (possibly empty) Object[] with validation hints. A return value of_{@code null} indicates that validation is not required.;@Nullable_	private Object[] extractValidationHints(MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				return (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__			}_		}_		return null__	};check,if,the,given,method,parameter,requires,validation,and,if,so,return,a,possibly,empty,object,with,validation,hints,a,return,value,of,code,null,indicates,that,validation,is,not,required;nullable,private,object,extract,validation,hints,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,return,hints,instanceof,object,object,hints,new,object,hints,return,null
AbstractMessageReaderArgumentResolver -> @Nullable 	private Object[] extractValidationHints(MethodParameter parameter);1524002283;Check if the given MethodParameter requires validation and if so return_a (possibly empty) Object[] with validation hints. A return value of_{@code null} indicates that validation is not required.;@Nullable_	private Object[] extractValidationHints(MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				return (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__			}_		}_		return null__	};check,if,the,given,method,parameter,requires,validation,and,if,so,return,a,possibly,empty,object,with,validation,hints,a,return,value,of,code,null,indicates,that,validation,is,not,required;nullable,private,object,extract,validation,hints,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,return,hints,instanceof,object,object,hints,new,object,hints,return,null
AbstractMessageReaderArgumentResolver -> @Nullable 	private Object[] extractValidationHints(MethodParameter parameter);1524002283;Check if the given MethodParameter requires validation and if so return_a (possibly empty) Object[] with validation hints. A return value of_{@code null} indicates that validation is not required.;@Nullable_	private Object[] extractValidationHints(MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				return (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__			}_		}_		return null__	};check,if,the,given,method,parameter,requires,validation,and,if,so,return,a,possibly,empty,object,with,validation,hints,a,return,value,of,code,null,indicates,that,validation,is,not,required;nullable,private,object,extract,validation,hints,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,return,hints,instanceof,object,object,hints,new,object,hints,return,null
AbstractMessageReaderArgumentResolver -> @Nullable 	private Object[] extractValidationHints(MethodParameter parameter);1524160255;Check if the given MethodParameter requires validation and if so return_a (possibly empty) Object[] with validation hints. A return value of_{@code null} indicates that validation is not required.;@Nullable_	private Object[] extractValidationHints(MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				return (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__			}_		}_		return null__	};check,if,the,given,method,parameter,requires,validation,and,if,so,return,a,possibly,empty,object,with,validation,hints,a,return,value,of,code,null,indicates,that,validation,is,not,required;nullable,private,object,extract,validation,hints,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,return,hints,instanceof,object,object,hints,new,object,hints,return,null
AbstractMessageReaderArgumentResolver -> @Nullable 	private Object[] extractValidationHints(MethodParameter parameter);1526354196;Check if the given MethodParameter requires validation and if so return_a (possibly empty) Object[] with validation hints. A return value of_{@code null} indicates that validation is not required.;@Nullable_	private Object[] extractValidationHints(MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				return (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__			}_		}_		return null__	};check,if,the,given,method,parameter,requires,validation,and,if,so,return,a,possibly,empty,object,with,validation,hints,a,return,value,of,code,null,indicates,that,validation,is,not,required;nullable,private,object,extract,validation,hints,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,return,hints,instanceof,object,object,hints,new,object,hints,return,null
AbstractMessageReaderArgumentResolver -> @Nullable 	private Object[] extractValidationHints(MethodParameter parameter);1529721864;Check if the given MethodParameter requires validation and if so return_a (possibly empty) Object[] with validation hints. A return value of_{@code null} indicates that validation is not required.;@Nullable_	private Object[] extractValidationHints(MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				return (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__			}_		}_		return null__	};check,if,the,given,method,parameter,requires,validation,and,if,so,return,a,possibly,empty,object,with,validation,hints,a,return,value,of,code,null,indicates,that,validation,is,not,required;nullable,private,object,extract,validation,hints,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,return,hints,instanceof,object,object,hints,new,object,hints,return,null
AbstractMessageReaderArgumentResolver -> @Nullable 	private Object[] extractValidationHints(MethodParameter parameter);1530174524;Check if the given MethodParameter requires validation and if so return_a (possibly empty) Object[] with validation hints. A return value of_{@code null} indicates that validation is not required.;@Nullable_	private Object[] extractValidationHints(MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				return (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__			}_		}_		return null__	};check,if,the,given,method,parameter,requires,validation,and,if,so,return,a,possibly,empty,object,with,validation,hints,a,return,value,of,code,null,indicates,that,validation,is,not,required;nullable,private,object,extract,validation,hints,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,return,hints,instanceof,object,object,hints,new,object,hints,return,null
AbstractMessageReaderArgumentResolver -> @Nullable 	private Object[] extractValidationHints(MethodParameter parameter);1530190293;Check if the given MethodParameter requires validation and if so return_a (possibly empty) Object[] with validation hints. A return value of_{@code null} indicates that validation is not required.;@Nullable_	private Object[] extractValidationHints(MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				return (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__			}_		}_		return null__	};check,if,the,given,method,parameter,requires,validation,and,if,so,return,a,possibly,empty,object,with,validation,hints,a,return,value,of,code,null,indicates,that,validation,is,not,required;nullable,private,object,extract,validation,hints,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,return,hints,instanceof,object,object,hints,new,object,hints,return,null
AbstractMessageReaderArgumentResolver -> @Nullable 	private Object[] extractValidationHints(MethodParameter parameter);1530793633;Check if the given MethodParameter requires validation and if so return_a (possibly empty) Object[] with validation hints. A return value of_{@code null} indicates that validation is not required.;@Nullable_	private Object[] extractValidationHints(MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				return (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__			}_		}_		return null__	};check,if,the,given,method,parameter,requires,validation,and,if,so,return,a,possibly,empty,object,with,validation,hints,a,return,value,of,code,null,indicates,that,validation,is,not,required;nullable,private,object,extract,validation,hints,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,return,hints,instanceof,object,object,hints,new,object,hints,return,null
AbstractMessageReaderArgumentResolver -> @Nullable 	private Object[] extractValidationHints(MethodParameter parameter);1530793695;Check if the given MethodParameter requires validation and if so return_a (possibly empty) Object[] with validation hints. A return value of_{@code null} indicates that validation is not required.;@Nullable_	private Object[] extractValidationHints(MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				return (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__			}_		}_		return null__	};check,if,the,given,method,parameter,requires,validation,and,if,so,return,a,possibly,empty,object,with,validation,hints,a,return,value,of,code,null,indicates,that,validation,is,not,required;nullable,private,object,extract,validation,hints,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,return,hints,instanceof,object,object,hints,new,object,hints,return,null
AbstractMessageReaderArgumentResolver -> @Nullable 	private Object[] extractValidationHints(MethodParameter parameter);1541189993;Check if the given MethodParameter requires validation and if so return_a (possibly empty) Object[] with validation hints. A return value of_{@code null} indicates that validation is not required.;@Nullable_	private Object[] extractValidationHints(MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				return (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__			}_		}_		return null__	};check,if,the,given,method,parameter,requires,validation,and,if,so,return,a,possibly,empty,object,with,validation,hints,a,return,value,of,code,null,indicates,that,validation,is,not,required;nullable,private,object,extract,validation,hints,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,return,hints,instanceof,object,object,hints,new,object,hints,return,null
AbstractMessageReaderArgumentResolver -> @Nullable 	private Object[] extractValidationHints(MethodParameter parameter);1542829302;Check if the given MethodParameter requires validation and if so return_a (possibly empty) Object[] with validation hints. A return value of_{@code null} indicates that validation is not required.;@Nullable_	private Object[] extractValidationHints(MethodParameter parameter) {_		Annotation[] annotations = parameter.getParameterAnnotations()__		for (Annotation ann : annotations) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				return (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__			}_		}_		return null__	};check,if,the,given,method,parameter,requires,validation,and,if,so,return,a,possibly,empty,object,with,validation,hints,a,return,value,of,code,null,indicates,that,validation,is,not,required;nullable,private,object,extract,validation,hints,method,parameter,parameter,annotation,annotations,parameter,get,parameter,annotations,for,annotation,ann,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,return,hints,instanceof,object,object,hints,new,object,hints,return,null
