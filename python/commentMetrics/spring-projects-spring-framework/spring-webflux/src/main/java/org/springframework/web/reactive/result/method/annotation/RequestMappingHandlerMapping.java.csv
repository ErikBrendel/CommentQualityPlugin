# id;timestamp;commentText;codeText;commentWords;codeWords
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1485986572;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1486635693;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1486747801;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1495868221;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1496334664;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1496429194;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch);1496837955;Whether to match to URLs irrespective of the presence of a trailing slash._If enabled a method mapped to "/users" also matches to "/users/"._<p>The default value is {@code true}.;public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {_		this.useTrailingSlashMatch = useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash,if,enabled,a,method,mapped,to,users,also,matches,to,users,p,the,default,value,is,code,true;public,void,set,use,trailing,slash,match,boolean,use,trailing,slash,match,this,use,trailing,slash,match,use,trailing,slash,match
RequestMappingHandlerMapping -> @SuppressWarnings("UnusedParameters") 	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1485986572;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending_{@link org.springframework.web.reactive.result.condition.AbstractRequestCondition_AbstractRequestCondition} for custom condition types and using_{@link org.springframework.web.reactive.result.condition.CompositeRequestCondition_CompositeRequestCondition} to provide multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};@SuppressWarnings("UnusedParameters")_	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,org,springframework,web,reactive,result,condition,abstract,request,condition,abstract,request,condition,for,custom,condition,types,and,using,link,org,springframework,web,reactive,result,condition,composite,request,condition,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;suppress,warnings,unused,parameters,protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> @SuppressWarnings("UnusedParameters") 	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1486635693;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending_{@link org.springframework.web.reactive.result.condition.AbstractRequestCondition_AbstractRequestCondition} for custom condition types and using_{@link org.springframework.web.reactive.result.condition.CompositeRequestCondition_CompositeRequestCondition} to provide multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};@SuppressWarnings("UnusedParameters")_	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,org,springframework,web,reactive,result,condition,abstract,request,condition,abstract,request,condition,for,custom,condition,types,and,using,link,org,springframework,web,reactive,result,condition,composite,request,condition,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;suppress,warnings,unused,parameters,protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> @SuppressWarnings("UnusedParameters") 	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1486652296;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending_{@link org.springframework.web.reactive.result.condition.AbstractRequestCondition_AbstractRequestCondition} for custom condition types and using_{@link org.springframework.web.reactive.result.condition.CompositeRequestCondition_CompositeRequestCondition} to provide multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};@SuppressWarnings("UnusedParameters")_	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,org,springframework,web,reactive,result,condition,abstract,request,condition,abstract,request,condition,for,custom,condition,types,and,using,link,org,springframework,web,reactive,result,condition,composite,request,condition,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;suppress,warnings,unused,parameters,protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> @SuppressWarnings("UnusedParameters") 	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1486747801;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending_{@link org.springframework.web.reactive.result.condition.AbstractRequestCondition_AbstractRequestCondition} for custom condition types and using_{@link org.springframework.web.reactive.result.condition.CompositeRequestCondition_CompositeRequestCondition} to provide multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};@SuppressWarnings("UnusedParameters")_	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,org,springframework,web,reactive,result,condition,abstract,request,condition,abstract,request,condition,for,custom,condition,types,and,using,link,org,springframework,web,reactive,result,condition,composite,request,condition,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;suppress,warnings,unused,parameters,protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> @SuppressWarnings("UnusedParameters") 	protected RequestCondition<?> getCustomMethodCondition(Method method);1485986572;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending_{@link org.springframework.web.reactive.result.condition.AbstractRequestCondition_AbstractRequestCondition} for custom condition types and using_{@link org.springframework.web.reactive.result.condition.CompositeRequestCondition_CompositeRequestCondition} to provide multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};@SuppressWarnings("UnusedParameters")_	protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,org,springframework,web,reactive,result,condition,abstract,request,condition,abstract,request,condition,for,custom,condition,types,and,using,link,org,springframework,web,reactive,result,condition,composite,request,condition,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;suppress,warnings,unused,parameters,protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> @SuppressWarnings("UnusedParameters") 	protected RequestCondition<?> getCustomMethodCondition(Method method);1486635693;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending_{@link org.springframework.web.reactive.result.condition.AbstractRequestCondition_AbstractRequestCondition} for custom condition types and using_{@link org.springframework.web.reactive.result.condition.CompositeRequestCondition_CompositeRequestCondition} to provide multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};@SuppressWarnings("UnusedParameters")_	protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,org,springframework,web,reactive,result,condition,abstract,request,condition,abstract,request,condition,for,custom,condition,types,and,using,link,org,springframework,web,reactive,result,condition,composite,request,condition,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;suppress,warnings,unused,parameters,protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> @SuppressWarnings("UnusedParameters") 	protected RequestCondition<?> getCustomMethodCondition(Method method);1486652296;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending_{@link org.springframework.web.reactive.result.condition.AbstractRequestCondition_AbstractRequestCondition} for custom condition types and using_{@link org.springframework.web.reactive.result.condition.CompositeRequestCondition_CompositeRequestCondition} to provide multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};@SuppressWarnings("UnusedParameters")_	protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,org,springframework,web,reactive,result,condition,abstract,request,condition,abstract,request,condition,for,custom,condition,types,and,using,link,org,springframework,web,reactive,result,condition,composite,request,condition,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;suppress,warnings,unused,parameters,protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> @SuppressWarnings("UnusedParameters") 	protected RequestCondition<?> getCustomMethodCondition(Method method);1486747801;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending_{@link org.springframework.web.reactive.result.condition.AbstractRequestCondition_AbstractRequestCondition} for custom condition types and using_{@link org.springframework.web.reactive.result.condition.CompositeRequestCondition_CompositeRequestCondition} to provide multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};@SuppressWarnings("UnusedParameters")_	protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,org,springframework,web,reactive,result,condition,abstract,request,condition,abstract,request,condition,for,custom,condition,types,and,using,link,org,springframework,web,reactive,result,condition,composite,request,condition,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;suppress,warnings,unused,parameters,protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> public void setContentTypeResolver(RequestedContentTypeResolver contentTypeResolver);1485986572;Set the {@link RequestedContentTypeResolver} to use to determine requested media types._If not set, the default constructor is used.;public void setContentTypeResolver(RequestedContentTypeResolver contentTypeResolver) {_		Assert.notNull(contentTypeResolver, "'contentTypeResolver' must not be null")__		this.contentTypeResolver = contentTypeResolver__	};set,the,link,requested,content,type,resolver,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,type,resolver,requested,content,type,resolver,content,type,resolver,assert,not,null,content,type,resolver,content,type,resolver,must,not,be,null,this,content,type,resolver,content,type,resolver
RequestMappingHandlerMapping -> public void setContentTypeResolver(RequestedContentTypeResolver contentTypeResolver);1486635693;Set the {@link RequestedContentTypeResolver} to use to determine requested media types._If not set, the default constructor is used.;public void setContentTypeResolver(RequestedContentTypeResolver contentTypeResolver) {_		Assert.notNull(contentTypeResolver, "'contentTypeResolver' must not be null")__		this.contentTypeResolver = contentTypeResolver__	};set,the,link,requested,content,type,resolver,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,type,resolver,requested,content,type,resolver,content,type,resolver,assert,not,null,content,type,resolver,content,type,resolver,must,not,be,null,this,content,type,resolver,content,type,resolver
RequestMappingHandlerMapping -> public void setContentTypeResolver(RequestedContentTypeResolver contentTypeResolver);1486652296;Set the {@link RequestedContentTypeResolver} to use to determine requested media types._If not set, the default constructor is used.;public void setContentTypeResolver(RequestedContentTypeResolver contentTypeResolver) {_		Assert.notNull(contentTypeResolver, "'contentTypeResolver' must not be null")__		this.contentTypeResolver = contentTypeResolver__	};set,the,link,requested,content,type,resolver,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,type,resolver,requested,content,type,resolver,content,type,resolver,assert,not,null,content,type,resolver,content,type,resolver,must,not,be,null,this,content,type,resolver,content,type,resolver
RequestMappingHandlerMapping -> public void setContentTypeResolver(RequestedContentTypeResolver contentTypeResolver);1486747801;Set the {@link RequestedContentTypeResolver} to use to determine requested media types._If not set, the default constructor is used.;public void setContentTypeResolver(RequestedContentTypeResolver contentTypeResolver) {_		Assert.notNull(contentTypeResolver, "'contentTypeResolver' must not be null")__		this.contentTypeResolver = contentTypeResolver__	};set,the,link,requested,content,type,resolver,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,type,resolver,requested,content,type,resolver,content,type,resolver,assert,not,null,content,type,resolver,content,type,resolver,must,not,be,null,this,content,type,resolver,content,type,resolver
RequestMappingHandlerMapping -> public void setContentTypeResolver(RequestedContentTypeResolver contentTypeResolver);1495868221;Set the {@link RequestedContentTypeResolver} to use to determine requested media types._If not set, the default constructor is used.;public void setContentTypeResolver(RequestedContentTypeResolver contentTypeResolver) {_		Assert.notNull(contentTypeResolver, "'contentTypeResolver' must not be null")__		this.contentTypeResolver = contentTypeResolver__	};set,the,link,requested,content,type,resolver,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,type,resolver,requested,content,type,resolver,content,type,resolver,assert,not,null,content,type,resolver,content,type,resolver,must,not,be,null,this,content,type,resolver,content,type,resolver
RequestMappingHandlerMapping -> public void setContentTypeResolver(RequestedContentTypeResolver contentTypeResolver);1496334664;Set the {@link RequestedContentTypeResolver} to use to determine requested media types._If not set, the default constructor is used.;public void setContentTypeResolver(RequestedContentTypeResolver contentTypeResolver) {_		Assert.notNull(contentTypeResolver, "'contentTypeResolver' must not be null")__		this.contentTypeResolver = contentTypeResolver__	};set,the,link,requested,content,type,resolver,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,type,resolver,requested,content,type,resolver,content,type,resolver,assert,not,null,content,type,resolver,content,type,resolver,must,not,be,null,this,content,type,resolver,content,type,resolver
RequestMappingHandlerMapping -> public void setContentTypeResolver(RequestedContentTypeResolver contentTypeResolver);1496429194;Set the {@link RequestedContentTypeResolver} to use to determine requested media types._If not set, the default constructor is used.;public void setContentTypeResolver(RequestedContentTypeResolver contentTypeResolver) {_		Assert.notNull(contentTypeResolver, "'contentTypeResolver' must not be null")__		this.contentTypeResolver = contentTypeResolver__	};set,the,link,requested,content,type,resolver,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,type,resolver,requested,content,type,resolver,content,type,resolver,assert,not,null,content,type,resolver,content,type,resolver,must,not,be,null,this,content,type,resolver,content,type,resolver
RequestMappingHandlerMapping -> public void setContentTypeResolver(RequestedContentTypeResolver contentTypeResolver);1496837955;Set the {@link RequestedContentTypeResolver} to use to determine requested media types._If not set, the default constructor is used.;public void setContentTypeResolver(RequestedContentTypeResolver contentTypeResolver) {_		Assert.notNull(contentTypeResolver, "'contentTypeResolver' must not be null")__		this.contentTypeResolver = contentTypeResolver__	};set,the,link,requested,content,type,resolver,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,type,resolver,requested,content,type,resolver,content,type,resolver,assert,not,null,content,type,resolver,content,type,resolver,must,not,be,null,this,content,type,resolver,content,type,resolver
RequestMappingHandlerMapping -> public void setContentTypeResolver(RequestedContentTypeResolver contentTypeResolver);1497286385;Set the {@link RequestedContentTypeResolver} to use to determine requested media types._If not set, the default constructor is used.;public void setContentTypeResolver(RequestedContentTypeResolver contentTypeResolver) {_		Assert.notNull(contentTypeResolver, "'contentTypeResolver' must not be null")__		this.contentTypeResolver = contentTypeResolver__	};set,the,link,requested,content,type,resolver,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,type,resolver,requested,content,type,resolver,content,type,resolver,assert,not,null,content,type,resolver,content,type,resolver,must,not,be,null,this,content,type,resolver,content,type,resolver
RequestMappingHandlerMapping -> public void setContentTypeResolver(RequestedContentTypeResolver contentTypeResolver);1498780456;Set the {@link RequestedContentTypeResolver} to use to determine requested media types._If not set, the default constructor is used.;public void setContentTypeResolver(RequestedContentTypeResolver contentTypeResolver) {_		Assert.notNull(contentTypeResolver, "'contentTypeResolver' must not be null")__		this.contentTypeResolver = contentTypeResolver__	};set,the,link,requested,content,type,resolver,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,type,resolver,requested,content,type,resolver,content,type,resolver,assert,not,null,content,type,resolver,content,type,resolver,must,not,be,null,this,content,type,resolver,content,type,resolver
RequestMappingHandlerMapping -> public void setContentTypeResolver(RequestedContentTypeResolver contentTypeResolver);1506097334;Set the {@link RequestedContentTypeResolver} to use to determine requested media types._If not set, the default constructor is used.;public void setContentTypeResolver(RequestedContentTypeResolver contentTypeResolver) {_		Assert.notNull(contentTypeResolver, "'contentTypeResolver' must not be null")__		this.contentTypeResolver = contentTypeResolver__	};set,the,link,requested,content,type,resolver,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,type,resolver,requested,content,type,resolver,content,type,resolver,assert,not,null,content,type,resolver,content,type,resolver,must,not,be,null,this,content,type,resolver,content,type,resolver
RequestMappingHandlerMapping -> public void setContentTypeResolver(RequestedContentTypeResolver contentTypeResolver);1528409922;Set the {@link RequestedContentTypeResolver} to use to determine requested media types._If not set, the default constructor is used.;public void setContentTypeResolver(RequestedContentTypeResolver contentTypeResolver) {_		Assert.notNull(contentTypeResolver, "'contentTypeResolver' must not be null")__		this.contentTypeResolver = contentTypeResolver__	};set,the,link,requested,content,type,resolver,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,type,resolver,requested,content,type,resolver,content,type,resolver,assert,not,null,content,type,resolver,content,type,resolver,must,not,be,null,this,content,type,resolver,content,type,resolver
RequestMappingHandlerMapping -> public void setContentTypeResolver(RequestedContentTypeResolver contentTypeResolver);1528486327;Set the {@link RequestedContentTypeResolver} to use to determine requested_media types. If not set, the default constructor is used.;public void setContentTypeResolver(RequestedContentTypeResolver contentTypeResolver) {_		Assert.notNull(contentTypeResolver, "'contentTypeResolver' must not be null")__		this.contentTypeResolver = contentTypeResolver__	};set,the,link,requested,content,type,resolver,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,type,resolver,requested,content,type,resolver,content,type,resolver,assert,not,null,content,type,resolver,content,type,resolver,must,not,be,null,this,content,type,resolver,content,type,resolver
RequestMappingHandlerMapping -> public void setContentTypeResolver(RequestedContentTypeResolver contentTypeResolver);1532520962;Set the {@link RequestedContentTypeResolver} to use to determine requested_media types. If not set, the default constructor is used.;public void setContentTypeResolver(RequestedContentTypeResolver contentTypeResolver) {_		Assert.notNull(contentTypeResolver, "'contentTypeResolver' must not be null")__		this.contentTypeResolver = contentTypeResolver__	};set,the,link,requested,content,type,resolver,to,use,to,determine,requested,media,types,if,not,set,the,default,constructor,is,used;public,void,set,content,type,resolver,requested,content,type,resolver,content,type,resolver,assert,not,null,content,type,resolver,content,type,resolver,must,not,be,null,this,content,type,resolver,content,type,resolver
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo( 			RequestMapping requestMapping, @Nullable RequestCondition<?> customCondition);1496837955;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(_			RequestMapping requestMapping, @Nullable RequestCondition<?> customCondition) {__		RequestMappingInfo.Builder builder = RequestMappingInfo_				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())__		if (customCondition != null) {_			builder.customCondition(customCondition)__		}_		return builder.options(this.config).build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,nullable,request,condition,custom,condition,request,mapping,info,builder,builder,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,if,custom,condition,null,builder,custom,condition,custom,condition,return,builder,options,this,config,build
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo( 			RequestMapping requestMapping, @Nullable RequestCondition<?> customCondition);1497286385;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(_			RequestMapping requestMapping, @Nullable RequestCondition<?> customCondition) {__		RequestMappingInfo.Builder builder = RequestMappingInfo_				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())__		if (customCondition != null) {_			builder.customCondition(customCondition)__		}_		return builder.options(this.config).build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,nullable,request,condition,custom,condition,request,mapping,info,builder,builder,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,if,custom,condition,null,builder,custom,condition,custom,condition,return,builder,options,this,config,build
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo( 			RequestMapping requestMapping, @Nullable RequestCondition<?> customCondition);1498780456;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(_			RequestMapping requestMapping, @Nullable RequestCondition<?> customCondition) {__		RequestMappingInfo.Builder builder = RequestMappingInfo_				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())__		if (customCondition != null) {_			builder.customCondition(customCondition)__		}_		return builder.options(this.config).build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,nullable,request,condition,custom,condition,request,mapping,info,builder,builder,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,if,custom,condition,null,builder,custom,condition,custom,condition,return,builder,options,this,config,build
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo( 			RequestMapping requestMapping, @Nullable RequestCondition<?> customCondition);1506097334;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(_			RequestMapping requestMapping, @Nullable RequestCondition<?> customCondition) {__		RequestMappingInfo.Builder builder = RequestMappingInfo_				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())__		if (customCondition != null) {_			builder.customCondition(customCondition)__		}_		return builder.options(this.config).build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,nullable,request,condition,custom,condition,request,mapping,info,builder,builder,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,if,custom,condition,null,builder,custom,condition,custom,condition,return,builder,options,this,config,build
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo( 			RequestMapping requestMapping, @Nullable RequestCondition<?> customCondition);1528409922;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(_			RequestMapping requestMapping, @Nullable RequestCondition<?> customCondition) {__		RequestMappingInfo.Builder builder = RequestMappingInfo_				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())__		if (customCondition != null) {_			builder.customCondition(customCondition)__		}_		return builder.options(this.config).build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,nullable,request,condition,custom,condition,request,mapping,info,builder,builder,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,if,custom,condition,null,builder,custom,condition,custom,condition,return,builder,options,this,config,build
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo( 			RequestMapping requestMapping, @Nullable RequestCondition<?> customCondition);1528486327;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(_			RequestMapping requestMapping, @Nullable RequestCondition<?> customCondition) {__		RequestMappingInfo.Builder builder = RequestMappingInfo_				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())__		if (customCondition != null) {_			builder.customCondition(customCondition)__		}_		return builder.options(this.config).build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,nullable,request,condition,custom,condition,request,mapping,info,builder,builder,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,if,custom,condition,null,builder,custom,condition,custom,condition,return,builder,options,this,config,build
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo( 			RequestMapping requestMapping, @Nullable RequestCondition<?> customCondition);1532520962;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(_			RequestMapping requestMapping, @Nullable RequestCondition<?> customCondition) {__		RequestMappingInfo.Builder builder = RequestMappingInfo_				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())__		if (customCondition != null) {_			builder.customCondition(customCondition)__		}_		return builder.options(this.config).build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,nullable,request,condition,custom,condition,request,mapping,info,builder,builder,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,if,custom,condition,null,builder,custom,condition,custom,condition,return,builder,options,this,config,build
RequestMappingHandlerMapping -> @Nullable 	private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element);1506097334;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method._@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);@Nullable_	private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {_		RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class)__		RequestCondition<?> condition = (element instanceof Class ?_				getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element))__		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;nullable,private,request,mapping,info,create,request,mapping,info,annotated,element,element,request,mapping,request,mapping,annotated,element,utils,find,merged,annotation,element,request,mapping,class,request,condition,condition,element,instanceof,class,get,custom,type,condition,class,element,get,custom,method,condition,method,element,return,request,mapping,null,create,request,mapping,info,request,mapping,condition,null
RequestMappingHandlerMapping -> @Nullable 	private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element);1528409922;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method._@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);@Nullable_	private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {_		RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class)__		RequestCondition<?> condition = (element instanceof Class ?_				getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element))__		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;nullable,private,request,mapping,info,create,request,mapping,info,annotated,element,element,request,mapping,request,mapping,annotated,element,utils,find,merged,annotation,element,request,mapping,class,request,condition,condition,element,instanceof,class,get,custom,type,condition,class,element,get,custom,method,condition,method,element,return,request,mapping,null,create,request,mapping,info,request,mapping,condition,null
RequestMappingHandlerMapping -> @Nullable 	private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element);1528486327;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method._@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);@Nullable_	private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {_		RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class)__		RequestCondition<?> condition = (element instanceof Class ?_				getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element))__		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;nullable,private,request,mapping,info,create,request,mapping,info,annotated,element,element,request,mapping,request,mapping,annotated,element,utils,find,merged,annotation,element,request,mapping,class,request,condition,condition,element,instanceof,class,get,custom,type,condition,class,element,get,custom,method,condition,method,element,return,request,mapping,null,create,request,mapping,info,request,mapping,condition,null
RequestMappingHandlerMapping -> @Nullable 	private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element);1532520962;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method._@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);@Nullable_	private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {_		RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class)__		RequestCondition<?> condition = (element instanceof Class ?_				getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element))__		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;nullable,private,request,mapping,info,create,request,mapping,info,annotated,element,element,request,mapping,request,mapping,annotated,element,utils,find,merged,annotation,element,request,mapping,class,request,condition,condition,element,instanceof,class,get,custom,type,condition,class,element,get,custom,method,condition,method,element,return,request,mapping,null,create,request,mapping,info,request,mapping,condition,null
RequestMappingHandlerMapping -> @SuppressWarnings("UnusedParameters") 	@Nullable 	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1495868221;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending_{@link org.springframework.web.reactive.result.condition.AbstractRequestCondition_AbstractRequestCondition} for custom condition types and using_{@link org.springframework.web.reactive.result.condition.CompositeRequestCondition_CompositeRequestCondition} to provide multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};@SuppressWarnings("UnusedParameters")_	@Nullable_	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,org,springframework,web,reactive,result,condition,abstract,request,condition,abstract,request,condition,for,custom,condition,types,and,using,link,org,springframework,web,reactive,result,condition,composite,request,condition,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;suppress,warnings,unused,parameters,nullable,protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> @SuppressWarnings("UnusedParameters") 	@Nullable 	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1496334664;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending_{@link org.springframework.web.reactive.result.condition.AbstractRequestCondition_AbstractRequestCondition} for custom condition types and using_{@link org.springframework.web.reactive.result.condition.CompositeRequestCondition_CompositeRequestCondition} to provide multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};@SuppressWarnings("UnusedParameters")_	@Nullable_	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,org,springframework,web,reactive,result,condition,abstract,request,condition,abstract,request,condition,for,custom,condition,types,and,using,link,org,springframework,web,reactive,result,condition,composite,request,condition,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;suppress,warnings,unused,parameters,nullable,protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> @SuppressWarnings("UnusedParameters") 	@Nullable 	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1496429194;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending_{@link org.springframework.web.reactive.result.condition.AbstractRequestCondition_AbstractRequestCondition} for custom condition types and using_{@link org.springframework.web.reactive.result.condition.CompositeRequestCondition_CompositeRequestCondition} to provide multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};@SuppressWarnings("UnusedParameters")_	@Nullable_	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,org,springframework,web,reactive,result,condition,abstract,request,condition,abstract,request,condition,for,custom,condition,types,and,using,link,org,springframework,web,reactive,result,condition,composite,request,condition,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;suppress,warnings,unused,parameters,nullable,protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> @SuppressWarnings("UnusedParameters") 	@Nullable 	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1496837955;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending_{@link org.springframework.web.reactive.result.condition.AbstractRequestCondition_AbstractRequestCondition} for custom condition types and using_{@link org.springframework.web.reactive.result.condition.CompositeRequestCondition_CompositeRequestCondition} to provide multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};@SuppressWarnings("UnusedParameters")_	@Nullable_	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,org,springframework,web,reactive,result,condition,abstract,request,condition,abstract,request,condition,for,custom,condition,types,and,using,link,org,springframework,web,reactive,result,condition,composite,request,condition,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;suppress,warnings,unused,parameters,nullable,protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> @SuppressWarnings("UnusedParameters") 	@Nullable 	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1497286385;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending_{@link org.springframework.web.reactive.result.condition.AbstractRequestCondition_AbstractRequestCondition} for custom condition types and using_{@link org.springframework.web.reactive.result.condition.CompositeRequestCondition_CompositeRequestCondition} to provide multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};@SuppressWarnings("UnusedParameters")_	@Nullable_	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,org,springframework,web,reactive,result,condition,abstract,request,condition,abstract,request,condition,for,custom,condition,types,and,using,link,org,springframework,web,reactive,result,condition,composite,request,condition,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;suppress,warnings,unused,parameters,nullable,protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> @SuppressWarnings("UnusedParameters") 	@Nullable 	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1498780456;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending_{@link org.springframework.web.reactive.result.condition.AbstractRequestCondition_AbstractRequestCondition} for custom condition types and using_{@link org.springframework.web.reactive.result.condition.CompositeRequestCondition_CompositeRequestCondition} to provide multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};@SuppressWarnings("UnusedParameters")_	@Nullable_	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,org,springframework,web,reactive,result,condition,abstract,request,condition,abstract,request,condition,for,custom,condition,types,and,using,link,org,springframework,web,reactive,result,condition,composite,request,condition,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;suppress,warnings,unused,parameters,nullable,protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> @SuppressWarnings("UnusedParameters") 	@Nullable 	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1506097334;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending_{@link org.springframework.web.reactive.result.condition.AbstractRequestCondition_AbstractRequestCondition} for custom condition types and using_{@link org.springframework.web.reactive.result.condition.CompositeRequestCondition_CompositeRequestCondition} to provide multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};@SuppressWarnings("UnusedParameters")_	@Nullable_	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,org,springframework,web,reactive,result,condition,abstract,request,condition,abstract,request,condition,for,custom,condition,types,and,using,link,org,springframework,web,reactive,result,condition,composite,request,condition,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;suppress,warnings,unused,parameters,nullable,protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> @SuppressWarnings("UnusedParameters") 	@Nullable 	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1528409922;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending_{@link org.springframework.web.reactive.result.condition.AbstractRequestCondition_AbstractRequestCondition} for custom condition types and using_{@link org.springframework.web.reactive.result.condition.CompositeRequestCondition_CompositeRequestCondition} to provide multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};@SuppressWarnings("UnusedParameters")_	@Nullable_	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,org,springframework,web,reactive,result,condition,abstract,request,condition,abstract,request,condition,for,custom,condition,types,and,using,link,org,springframework,web,reactive,result,condition,composite,request,condition,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;suppress,warnings,unused,parameters,nullable,protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> @SuppressWarnings("UnusedParameters") 	@Nullable 	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1528486327;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending_{@link org.springframework.web.reactive.result.condition.AbstractRequestCondition_AbstractRequestCondition} for custom condition types and using_{@link org.springframework.web.reactive.result.condition.CompositeRequestCondition_CompositeRequestCondition} to provide multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};@SuppressWarnings("UnusedParameters")_	@Nullable_	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,org,springframework,web,reactive,result,condition,abstract,request,condition,abstract,request,condition,for,custom,condition,types,and,using,link,org,springframework,web,reactive,result,condition,composite,request,condition,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;suppress,warnings,unused,parameters,nullable,protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> @SuppressWarnings("UnusedParameters") 	@Nullable 	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType);1532520962;Provide a custom type-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending_{@link org.springframework.web.reactive.result.condition.AbstractRequestCondition_AbstractRequestCondition} for custom condition types and using_{@link org.springframework.web.reactive.result.condition.CompositeRequestCondition_CompositeRequestCondition} to provide multiple custom conditions._@param handlerType the handler type for which to create the condition_@return the condition, or {@code null};@SuppressWarnings("UnusedParameters")_	@Nullable_	protected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType) {_		return null__	};provide,a,custom,type,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,org,springframework,web,reactive,result,condition,abstract,request,condition,abstract,request,condition,for,custom,condition,types,and,using,link,org,springframework,web,reactive,result,condition,composite,request,condition,composite,request,condition,to,provide,multiple,custom,conditions,param,handler,type,the,handler,type,for,which,to,create,the,condition,return,the,condition,or,code,null;suppress,warnings,unused,parameters,nullable,protected,request,condition,get,custom,type,condition,class,handler,type,return,null
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1485986572;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1486635693;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1486747801;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1495868221;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1496334664;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1496429194;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useTrailingSlashMatch();1496837955;Whether to match to URLs irrespective of the presence of a trailing slash.;public boolean useTrailingSlashMatch() {_		return this.useTrailingSlashMatch__	};whether,to,match,to,urls,irrespective,of,the,presence,of,a,trailing,slash;public,boolean,use,trailing,slash,match,return,this,use,trailing,slash,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1485986572;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1486635693;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1486747801;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1495868221;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1496334664;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1496429194;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useRegisteredSuffixPatternMatch();1496837955;Whether to use registered suffixes for pattern matching.;public boolean useRegisteredSuffixPatternMatch() {_		return this.useRegisteredSuffixPatternMatch__	};whether,to,use,registered,suffixes,for,pattern,matching;public,boolean,use,registered,suffix,pattern,match,return,this,use,registered,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1485986572;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1486635693;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1486747801;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1495868221;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1496334664;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1496429194;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public boolean useSuffixPatternMatch();1496837955;Whether to use suffix pattern matching.;public boolean useSuffixPatternMatch() {_		return this.useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching;public,boolean,use,suffix,pattern,match,return,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element);1485986572;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method._@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {_		RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class)__		RequestCondition<?> condition = (element instanceof Class ?_				getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element))__		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;private,request,mapping,info,create,request,mapping,info,annotated,element,element,request,mapping,request,mapping,annotated,element,utils,find,merged,annotation,element,request,mapping,class,request,condition,condition,element,instanceof,class,get,custom,type,condition,class,element,get,custom,method,condition,method,element,return,request,mapping,null,create,request,mapping,info,request,mapping,condition,null
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element);1486635693;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method._@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {_		RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class)__		RequestCondition<?> condition = (element instanceof Class ?_				getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element))__		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;private,request,mapping,info,create,request,mapping,info,annotated,element,element,request,mapping,request,mapping,annotated,element,utils,find,merged,annotation,element,request,mapping,class,request,condition,condition,element,instanceof,class,get,custom,type,condition,class,element,get,custom,method,condition,method,element,return,request,mapping,null,create,request,mapping,info,request,mapping,condition,null
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element);1486652296;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method._@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {_		RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class)__		RequestCondition<?> condition = (element instanceof Class ?_				getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element))__		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;private,request,mapping,info,create,request,mapping,info,annotated,element,element,request,mapping,request,mapping,annotated,element,utils,find,merged,annotation,element,request,mapping,class,request,condition,condition,element,instanceof,class,get,custom,type,condition,class,element,get,custom,method,condition,method,element,return,request,mapping,null,create,request,mapping,info,request,mapping,condition,null
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element);1486747801;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method._@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {_		RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class)__		RequestCondition<?> condition = (element instanceof Class ?_				getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element))__		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;private,request,mapping,info,create,request,mapping,info,annotated,element,element,request,mapping,request,mapping,annotated,element,utils,find,merged,annotation,element,request,mapping,class,request,condition,condition,element,instanceof,class,get,custom,type,condition,class,element,get,custom,method,condition,method,element,return,request,mapping,null,create,request,mapping,info,request,mapping,condition,null
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element);1495868221;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method._@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {_		RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class)__		RequestCondition<?> condition = (element instanceof Class ?_				getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element))__		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;private,request,mapping,info,create,request,mapping,info,annotated,element,element,request,mapping,request,mapping,annotated,element,utils,find,merged,annotation,element,request,mapping,class,request,condition,condition,element,instanceof,class,get,custom,type,condition,class,element,get,custom,method,condition,method,element,return,request,mapping,null,create,request,mapping,info,request,mapping,condition,null
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element);1496334664;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method._@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {_		RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class)__		RequestCondition<?> condition = (element instanceof Class ?_				getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element))__		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;private,request,mapping,info,create,request,mapping,info,annotated,element,element,request,mapping,request,mapping,annotated,element,utils,find,merged,annotation,element,request,mapping,class,request,condition,condition,element,instanceof,class,get,custom,type,condition,class,element,get,custom,method,condition,method,element,return,request,mapping,null,create,request,mapping,info,request,mapping,condition,null
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element);1496429194;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method._@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {_		RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class)__		RequestCondition<?> condition = (element instanceof Class ?_				getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element))__		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;private,request,mapping,info,create,request,mapping,info,annotated,element,element,request,mapping,request,mapping,annotated,element,utils,find,merged,annotation,element,request,mapping,class,request,condition,condition,element,instanceof,class,get,custom,type,condition,class,element,get,custom,method,condition,method,element,return,request,mapping,null,create,request,mapping,info,request,mapping,condition,null
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element);1496837955;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method._@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {_		RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class)__		RequestCondition<?> condition = (element instanceof Class ?_				getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element))__		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;private,request,mapping,info,create,request,mapping,info,annotated,element,element,request,mapping,request,mapping,annotated,element,utils,find,merged,annotation,element,request,mapping,class,request,condition,condition,element,instanceof,class,get,custom,type,condition,class,element,get,custom,method,condition,method,element,return,request,mapping,null,create,request,mapping,info,request,mapping,condition,null
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element);1497286385;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method._@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {_		RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class)__		RequestCondition<?> condition = (element instanceof Class ?_				getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element))__		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;private,request,mapping,info,create,request,mapping,info,annotated,element,element,request,mapping,request,mapping,annotated,element,utils,find,merged,annotation,element,request,mapping,class,request,condition,condition,element,instanceof,class,get,custom,type,condition,class,element,get,custom,method,condition,method,element,return,request,mapping,null,create,request,mapping,info,request,mapping,condition,null
RequestMappingHandlerMapping -> private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element);1498780456;Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},_supplying the appropriate custom {@link RequestCondition} depending on whether_the supplied {@code annotatedElement} is a class or method._@see #getCustomTypeCondition(Class)_@see #getCustomMethodCondition(Method);private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {_		RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class)__		RequestCondition<?> condition = (element instanceof Class ?_				getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element))__		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null)__	};delegates,to,link,create,request,mapping,info,request,mapping,request,condition,supplying,the,appropriate,custom,link,request,condition,depending,on,whether,the,supplied,code,annotated,element,is,a,class,or,method,see,get,custom,type,condition,class,see,get,custom,method,condition,method;private,request,mapping,info,create,request,mapping,info,annotated,element,element,request,mapping,request,mapping,annotated,element,utils,find,merged,annotation,element,request,mapping,class,request,condition,condition,element,instanceof,class,get,custom,type,condition,class,element,get,custom,method,condition,method,element,return,request,mapping,null,create,request,mapping,info,request,mapping,condition,null
RequestMappingHandlerMapping -> public void setPathPrefixes(Map<String, Predicate<Class<?>>> prefixes);1528486327;Configure path prefixes to apply to controller methods._<p>Prefixes are used to enrich the mappings of every {@code @RequestMapping}_method whose controller type is matched by a corresponding_{@code Predicate} in the map. The prefix for the first matching predicate_is used, assuming the input map has predictable order._<p>Consider using {@link org.springframework.web.method.HandlerTypePredicate_HandlerTypePredicate} to group controllers._@param prefixes a map with path prefixes as key_@since 5.1_@see org.springframework.web.method.HandlerTypePredicate;public void setPathPrefixes(Map<String, Predicate<Class<?>>> prefixes) {_		this.pathPrefixes.clear()__		prefixes.entrySet().stream()_				.filter(entry -> StringUtils.hasText(entry.getKey()))_				.forEach(entry -> this.pathPrefixes.put(entry.getKey(), entry.getValue()))__	};configure,path,prefixes,to,apply,to,controller,methods,p,prefixes,are,used,to,enrich,the,mappings,of,every,code,request,mapping,method,whose,controller,type,is,matched,by,a,corresponding,code,predicate,in,the,map,the,prefix,for,the,first,matching,predicate,is,used,assuming,the,input,map,has,predictable,order,p,consider,using,link,org,springframework,web,method,handler,type,predicate,handler,type,predicate,to,group,controllers,param,prefixes,a,map,with,path,prefixes,as,key,since,5,1,see,org,springframework,web,method,handler,type,predicate;public,void,set,path,prefixes,map,string,predicate,class,prefixes,this,path,prefixes,clear,prefixes,entry,set,stream,filter,entry,string,utils,has,text,entry,get,key,for,each,entry,this,path,prefixes,put,entry,get,key,entry,get,value
RequestMappingHandlerMapping -> public void setPathPrefixes(Map<String, Predicate<Class<?>>> prefixes);1532520962;Configure path prefixes to apply to controller methods._<p>Prefixes are used to enrich the mappings of every {@code @RequestMapping}_method whose controller type is matched by a corresponding_{@code Predicate} in the map. The prefix for the first matching predicate_is used, assuming the input map has predictable order._<p>Consider using {@link org.springframework.web.method.HandlerTypePredicate_HandlerTypePredicate} to group controllers._@param prefixes a map with path prefixes as key_@since 5.1_@see org.springframework.web.method.HandlerTypePredicate;public void setPathPrefixes(Map<String, Predicate<Class<?>>> prefixes) {_		this.pathPrefixes.clear()__		prefixes.entrySet().stream()_				.filter(entry -> StringUtils.hasText(entry.getKey()))_				.forEach(entry -> this.pathPrefixes.put(entry.getKey(), entry.getValue()))__	};configure,path,prefixes,to,apply,to,controller,methods,p,prefixes,are,used,to,enrich,the,mappings,of,every,code,request,mapping,method,whose,controller,type,is,matched,by,a,corresponding,code,predicate,in,the,map,the,prefix,for,the,first,matching,predicate,is,used,assuming,the,input,map,has,predictable,order,p,consider,using,link,org,springframework,web,method,handler,type,predicate,handler,type,predicate,to,group,controllers,param,prefixes,a,map,with,path,prefixes,as,key,since,5,1,see,org,springframework,web,method,handler,type,predicate;public,void,set,path,prefixes,map,string,predicate,class,prefixes,this,path,prefixes,clear,prefixes,entry,set,stream,filter,entry,string,utils,has,text,entry,get,key,for,each,entry,this,path,prefixes,put,entry,get,key,entry,get,value
RequestMappingHandlerMapping -> @SuppressWarnings("UnusedParameters") 	@Nullable 	protected RequestCondition<?> getCustomMethodCondition(Method method);1495868221;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending_{@link org.springframework.web.reactive.result.condition.AbstractRequestCondition_AbstractRequestCondition} for custom condition types and using_{@link org.springframework.web.reactive.result.condition.CompositeRequestCondition_CompositeRequestCondition} to provide multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};@SuppressWarnings("UnusedParameters")_	@Nullable_	protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,org,springframework,web,reactive,result,condition,abstract,request,condition,abstract,request,condition,for,custom,condition,types,and,using,link,org,springframework,web,reactive,result,condition,composite,request,condition,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;suppress,warnings,unused,parameters,nullable,protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> @SuppressWarnings("UnusedParameters") 	@Nullable 	protected RequestCondition<?> getCustomMethodCondition(Method method);1496334664;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending_{@link org.springframework.web.reactive.result.condition.AbstractRequestCondition_AbstractRequestCondition} for custom condition types and using_{@link org.springframework.web.reactive.result.condition.CompositeRequestCondition_CompositeRequestCondition} to provide multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};@SuppressWarnings("UnusedParameters")_	@Nullable_	protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,org,springframework,web,reactive,result,condition,abstract,request,condition,abstract,request,condition,for,custom,condition,types,and,using,link,org,springframework,web,reactive,result,condition,composite,request,condition,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;suppress,warnings,unused,parameters,nullable,protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> @SuppressWarnings("UnusedParameters") 	@Nullable 	protected RequestCondition<?> getCustomMethodCondition(Method method);1496429194;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending_{@link org.springframework.web.reactive.result.condition.AbstractRequestCondition_AbstractRequestCondition} for custom condition types and using_{@link org.springframework.web.reactive.result.condition.CompositeRequestCondition_CompositeRequestCondition} to provide multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};@SuppressWarnings("UnusedParameters")_	@Nullable_	protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,org,springframework,web,reactive,result,condition,abstract,request,condition,abstract,request,condition,for,custom,condition,types,and,using,link,org,springframework,web,reactive,result,condition,composite,request,condition,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;suppress,warnings,unused,parameters,nullable,protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> @SuppressWarnings("UnusedParameters") 	@Nullable 	protected RequestCondition<?> getCustomMethodCondition(Method method);1496837955;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending_{@link org.springframework.web.reactive.result.condition.AbstractRequestCondition_AbstractRequestCondition} for custom condition types and using_{@link org.springframework.web.reactive.result.condition.CompositeRequestCondition_CompositeRequestCondition} to provide multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};@SuppressWarnings("UnusedParameters")_	@Nullable_	protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,org,springframework,web,reactive,result,condition,abstract,request,condition,abstract,request,condition,for,custom,condition,types,and,using,link,org,springframework,web,reactive,result,condition,composite,request,condition,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;suppress,warnings,unused,parameters,nullable,protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> @SuppressWarnings("UnusedParameters") 	@Nullable 	protected RequestCondition<?> getCustomMethodCondition(Method method);1497286385;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending_{@link org.springframework.web.reactive.result.condition.AbstractRequestCondition_AbstractRequestCondition} for custom condition types and using_{@link org.springframework.web.reactive.result.condition.CompositeRequestCondition_CompositeRequestCondition} to provide multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};@SuppressWarnings("UnusedParameters")_	@Nullable_	protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,org,springframework,web,reactive,result,condition,abstract,request,condition,abstract,request,condition,for,custom,condition,types,and,using,link,org,springframework,web,reactive,result,condition,composite,request,condition,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;suppress,warnings,unused,parameters,nullable,protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> @SuppressWarnings("UnusedParameters") 	@Nullable 	protected RequestCondition<?> getCustomMethodCondition(Method method);1498780456;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending_{@link org.springframework.web.reactive.result.condition.AbstractRequestCondition_AbstractRequestCondition} for custom condition types and using_{@link org.springframework.web.reactive.result.condition.CompositeRequestCondition_CompositeRequestCondition} to provide multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};@SuppressWarnings("UnusedParameters")_	@Nullable_	protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,org,springframework,web,reactive,result,condition,abstract,request,condition,abstract,request,condition,for,custom,condition,types,and,using,link,org,springframework,web,reactive,result,condition,composite,request,condition,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;suppress,warnings,unused,parameters,nullable,protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> @SuppressWarnings("UnusedParameters") 	@Nullable 	protected RequestCondition<?> getCustomMethodCondition(Method method);1506097334;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending_{@link org.springframework.web.reactive.result.condition.AbstractRequestCondition_AbstractRequestCondition} for custom condition types and using_{@link org.springframework.web.reactive.result.condition.CompositeRequestCondition_CompositeRequestCondition} to provide multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};@SuppressWarnings("UnusedParameters")_	@Nullable_	protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,org,springframework,web,reactive,result,condition,abstract,request,condition,abstract,request,condition,for,custom,condition,types,and,using,link,org,springframework,web,reactive,result,condition,composite,request,condition,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;suppress,warnings,unused,parameters,nullable,protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> @SuppressWarnings("UnusedParameters") 	@Nullable 	protected RequestCondition<?> getCustomMethodCondition(Method method);1528409922;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending_{@link org.springframework.web.reactive.result.condition.AbstractRequestCondition_AbstractRequestCondition} for custom condition types and using_{@link org.springframework.web.reactive.result.condition.CompositeRequestCondition_CompositeRequestCondition} to provide multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};@SuppressWarnings("UnusedParameters")_	@Nullable_	protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,org,springframework,web,reactive,result,condition,abstract,request,condition,abstract,request,condition,for,custom,condition,types,and,using,link,org,springframework,web,reactive,result,condition,composite,request,condition,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;suppress,warnings,unused,parameters,nullable,protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> @SuppressWarnings("UnusedParameters") 	@Nullable 	protected RequestCondition<?> getCustomMethodCondition(Method method);1528486327;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending_{@link org.springframework.web.reactive.result.condition.AbstractRequestCondition_AbstractRequestCondition} for custom condition types and using_{@link org.springframework.web.reactive.result.condition.CompositeRequestCondition_CompositeRequestCondition} to provide multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};@SuppressWarnings("UnusedParameters")_	@Nullable_	protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,org,springframework,web,reactive,result,condition,abstract,request,condition,abstract,request,condition,for,custom,condition,types,and,using,link,org,springframework,web,reactive,result,condition,composite,request,condition,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;suppress,warnings,unused,parameters,nullable,protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> @SuppressWarnings("UnusedParameters") 	@Nullable 	protected RequestCondition<?> getCustomMethodCondition(Method method);1532520962;Provide a custom method-level request condition._The custom {@link RequestCondition} can be of any type so long as the_same condition type is returned from all calls to this method in order_to ensure custom request conditions can be combined and compared._<p>Consider extending_{@link org.springframework.web.reactive.result.condition.AbstractRequestCondition_AbstractRequestCondition} for custom condition types and using_{@link org.springframework.web.reactive.result.condition.CompositeRequestCondition_CompositeRequestCondition} to provide multiple custom conditions._@param method the handler method for which to create the condition_@return the condition, or {@code null};@SuppressWarnings("UnusedParameters")_	@Nullable_	protected RequestCondition<?> getCustomMethodCondition(Method method) {_		return null__	};provide,a,custom,method,level,request,condition,the,custom,link,request,condition,can,be,of,any,type,so,long,as,the,same,condition,type,is,returned,from,all,calls,to,this,method,in,order,to,ensure,custom,request,conditions,can,be,combined,and,compared,p,consider,extending,link,org,springframework,web,reactive,result,condition,abstract,request,condition,abstract,request,condition,for,custom,condition,types,and,using,link,org,springframework,web,reactive,result,condition,composite,request,condition,composite,request,condition,to,provide,multiple,custom,conditions,param,method,the,handler,method,for,which,to,create,the,condition,return,the,condition,or,code,null;suppress,warnings,unused,parameters,nullable,protected,request,condition,get,custom,method,condition,method,method,return,null
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1485986572;Whether to use suffix pattern matching. If enabled a method mapped to_"/path" also matches to "/path.*"._<p>The default value is {@code true}._<p><strong>Note:</strong> when using suffix pattern matching it's usually_preferable to be explicit about what is and isn't an extension so rather_than setting this property consider using_{@link #setUseRegisteredSuffixPatternMatch} instead.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching,if,enabled,a,method,mapped,to,path,also,matches,to,path,p,the,default,value,is,code,true,p,strong,note,strong,when,using,suffix,pattern,matching,it,s,usually,preferable,to,be,explicit,about,what,is,and,isn,t,an,extension,so,rather,than,setting,this,property,consider,using,link,set,use,registered,suffix,pattern,match,instead;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1486635693;Whether to use suffix pattern matching. If enabled a method mapped to_"/path" also matches to "/path.*"._<p>The default value is {@code true}._<p><strong>Note:</strong> when using suffix pattern matching it's usually_preferable to be explicit about what is and isn't an extension so rather_than setting this property consider using_{@link #setUseRegisteredSuffixPatternMatch} instead.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching,if,enabled,a,method,mapped,to,path,also,matches,to,path,p,the,default,value,is,code,true,p,strong,note,strong,when,using,suffix,pattern,matching,it,s,usually,preferable,to,be,explicit,about,what,is,and,isn,t,an,extension,so,rather,than,setting,this,property,consider,using,link,set,use,registered,suffix,pattern,match,instead;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1486747801;Whether to use suffix pattern matching. If enabled a method mapped to_"/path" also matches to "/path.*"._<p>The default value is {@code true}._<p><strong>Note:</strong> when using suffix pattern matching it's usually_preferable to be explicit about what is and isn't an extension so rather_than setting this property consider using_{@link #setUseRegisteredSuffixPatternMatch} instead.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching,if,enabled,a,method,mapped,to,path,also,matches,to,path,p,the,default,value,is,code,true,p,strong,note,strong,when,using,suffix,pattern,matching,it,s,usually,preferable,to,be,explicit,about,what,is,and,isn,t,an,extension,so,rather,than,setting,this,property,consider,using,link,set,use,registered,suffix,pattern,match,instead;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1495868221;Whether to use suffix pattern matching. If enabled a method mapped to_"/path" also matches to "/path.*"._<p>The default value is {@code true}._<p><strong>Note:</strong> when using suffix pattern matching it's usually_preferable to be explicit about what is and isn't an extension so rather_than setting this property consider using_{@link #setUseRegisteredSuffixPatternMatch} instead.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching,if,enabled,a,method,mapped,to,path,also,matches,to,path,p,the,default,value,is,code,true,p,strong,note,strong,when,using,suffix,pattern,matching,it,s,usually,preferable,to,be,explicit,about,what,is,and,isn,t,an,extension,so,rather,than,setting,this,property,consider,using,link,set,use,registered,suffix,pattern,match,instead;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1496334664;Whether to use suffix pattern matching. If enabled a method mapped to_"/path" also matches to "/path.*"._<p>The default value is {@code true}._<p><strong>Note:</strong> when using suffix pattern matching it's usually_preferable to be explicit about what is and isn't an extension so rather_than setting this property consider using_{@link #setUseRegisteredSuffixPatternMatch} instead.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching,if,enabled,a,method,mapped,to,path,also,matches,to,path,p,the,default,value,is,code,true,p,strong,note,strong,when,using,suffix,pattern,matching,it,s,usually,preferable,to,be,explicit,about,what,is,and,isn,t,an,extension,so,rather,than,setting,this,property,consider,using,link,set,use,registered,suffix,pattern,match,instead;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1496429194;Whether to use suffix pattern matching. If enabled a method mapped to_"/path" also matches to "/path.*"._<p>The default value is {@code true}._<p><strong>Note:</strong> when using suffix pattern matching it's usually_preferable to be explicit about what is and isn't an extension so rather_than setting this property consider using_{@link #setUseRegisteredSuffixPatternMatch} instead.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching,if,enabled,a,method,mapped,to,path,also,matches,to,path,p,the,default,value,is,code,true,p,strong,note,strong,when,using,suffix,pattern,matching,it,s,usually,preferable,to,be,explicit,about,what,is,and,isn,t,an,extension,so,rather,than,setting,this,property,consider,using,link,set,use,registered,suffix,pattern,match,instead;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch);1496837955;Whether to use suffix pattern matching. If enabled a method mapped to_"/path" also matches to "/path.*"._<p>The default value is {@code true}._<p><strong>Note:</strong> when using suffix pattern matching it's usually_preferable to be explicit about what is and isn't an extension so rather_than setting this property consider using_{@link #setUseRegisteredSuffixPatternMatch} instead.;public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {_		this.useSuffixPatternMatch = useSuffixPatternMatch__	};whether,to,use,suffix,pattern,matching,if,enabled,a,method,mapped,to,path,also,matches,to,path,p,the,default,value,is,code,true,p,strong,note,strong,when,using,suffix,pattern,matching,it,s,usually,preferable,to,be,explicit,about,what,is,and,isn,t,an,extension,so,rather,than,setting,this,property,consider,using,link,set,use,registered,suffix,pattern,match,instead;public,void,set,use,suffix,pattern,match,boolean,use,suffix,pattern,match,this,use,suffix,pattern,match,use,suffix,pattern,match
RequestMappingHandlerMapping -> public RequestedContentTypeResolver getContentTypeResolver();1485986572;Return the configured {@link RequestedContentTypeResolver}.;public RequestedContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,requested,content,type,resolver;public,requested,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
RequestMappingHandlerMapping -> public RequestedContentTypeResolver getContentTypeResolver();1486635693;Return the configured {@link RequestedContentTypeResolver}.;public RequestedContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,requested,content,type,resolver;public,requested,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
RequestMappingHandlerMapping -> public RequestedContentTypeResolver getContentTypeResolver();1486652296;Return the configured {@link RequestedContentTypeResolver}.;public RequestedContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,requested,content,type,resolver;public,requested,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
RequestMappingHandlerMapping -> public RequestedContentTypeResolver getContentTypeResolver();1486747801;Return the configured {@link RequestedContentTypeResolver}.;public RequestedContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,requested,content,type,resolver;public,requested,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
RequestMappingHandlerMapping -> public RequestedContentTypeResolver getContentTypeResolver();1495868221;Return the configured {@link RequestedContentTypeResolver}.;public RequestedContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,requested,content,type,resolver;public,requested,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
RequestMappingHandlerMapping -> public RequestedContentTypeResolver getContentTypeResolver();1496334664;Return the configured {@link RequestedContentTypeResolver}.;public RequestedContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,requested,content,type,resolver;public,requested,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
RequestMappingHandlerMapping -> public RequestedContentTypeResolver getContentTypeResolver();1496429194;Return the configured {@link RequestedContentTypeResolver}.;public RequestedContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,requested,content,type,resolver;public,requested,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
RequestMappingHandlerMapping -> public RequestedContentTypeResolver getContentTypeResolver();1496837955;Return the configured {@link RequestedContentTypeResolver}.;public RequestedContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,requested,content,type,resolver;public,requested,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
RequestMappingHandlerMapping -> public RequestedContentTypeResolver getContentTypeResolver();1497286385;Return the configured {@link RequestedContentTypeResolver}.;public RequestedContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,requested,content,type,resolver;public,requested,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
RequestMappingHandlerMapping -> public RequestedContentTypeResolver getContentTypeResolver();1498780456;Return the configured {@link RequestedContentTypeResolver}.;public RequestedContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,requested,content,type,resolver;public,requested,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
RequestMappingHandlerMapping -> public RequestedContentTypeResolver getContentTypeResolver();1506097334;Return the configured {@link RequestedContentTypeResolver}.;public RequestedContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,requested,content,type,resolver;public,requested,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
RequestMappingHandlerMapping -> public RequestedContentTypeResolver getContentTypeResolver();1528409922;Return the configured {@link RequestedContentTypeResolver}.;public RequestedContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,requested,content,type,resolver;public,requested,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
RequestMappingHandlerMapping -> public RequestedContentTypeResolver getContentTypeResolver();1528486327;Return the configured {@link RequestedContentTypeResolver}.;public RequestedContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,requested,content,type,resolver;public,requested,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
RequestMappingHandlerMapping -> public RequestedContentTypeResolver getContentTypeResolver();1532520962;Return the configured {@link RequestedContentTypeResolver}.;public RequestedContentTypeResolver getContentTypeResolver() {_		return this.contentTypeResolver__	};return,the,configured,link,requested,content,type,resolver;public,requested,content,type,resolver,get,content,type,resolver,return,this,content,type,resolver
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo( 			RequestMapping requestMapping, RequestCondition<?> customCondition);1485986572;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(_			RequestMapping requestMapping, RequestCondition<?> customCondition) {__		return RequestMappingInfo_				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())_				.customCondition(customCondition)_				.options(this.config)_				.build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,request,condition,custom,condition,return,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,custom,condition,custom,condition,options,this,config,build
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo( 			RequestMapping requestMapping, RequestCondition<?> customCondition);1486635693;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(_			RequestMapping requestMapping, RequestCondition<?> customCondition) {__		return RequestMappingInfo_				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())_				.customCondition(customCondition)_				.options(this.config)_				.build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,request,condition,custom,condition,return,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,custom,condition,custom,condition,options,this,config,build
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo( 			RequestMapping requestMapping, RequestCondition<?> customCondition);1486652296;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(_			RequestMapping requestMapping, RequestCondition<?> customCondition) {__		return RequestMappingInfo_				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())_				.customCondition(customCondition)_				.options(this.config)_				.build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,request,condition,custom,condition,return,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,custom,condition,custom,condition,options,this,config,build
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo( 			RequestMapping requestMapping, RequestCondition<?> customCondition);1486747801;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(_			RequestMapping requestMapping, RequestCondition<?> customCondition) {__		return RequestMappingInfo_				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())_				.customCondition(customCondition)_				.options(this.config)_				.build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,request,condition,custom,condition,return,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,custom,condition,custom,condition,options,this,config,build
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo( 			RequestMapping requestMapping, RequestCondition<?> customCondition);1495868221;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(_			RequestMapping requestMapping, RequestCondition<?> customCondition) {__		return RequestMappingInfo_				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())_				.customCondition(customCondition)_				.options(this.config)_				.build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,request,condition,custom,condition,return,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,custom,condition,custom,condition,options,this,config,build
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo( 			RequestMapping requestMapping, RequestCondition<?> customCondition);1496334664;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(_			RequestMapping requestMapping, RequestCondition<?> customCondition) {__		return RequestMappingInfo_				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())_				.customCondition(customCondition)_				.options(this.config)_				.build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,request,condition,custom,condition,return,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,custom,condition,custom,condition,options,this,config,build
RequestMappingHandlerMapping -> protected RequestMappingInfo createRequestMappingInfo( 			RequestMapping requestMapping, RequestCondition<?> customCondition);1496429194;Create a {@link RequestMappingInfo} from the supplied_{@link RequestMapping @RequestMapping} annotation, which is either_a directly declared annotation, a meta-annotation, or the synthesized_result of merging annotation attributes within an annotation hierarchy.;protected RequestMappingInfo createRequestMappingInfo(_			RequestMapping requestMapping, RequestCondition<?> customCondition) {__		return RequestMappingInfo_				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))_				.methods(requestMapping.method())_				.params(requestMapping.params())_				.headers(requestMapping.headers())_				.consumes(requestMapping.consumes())_				.produces(requestMapping.produces())_				.mappingName(requestMapping.name())_				.customCondition(customCondition)_				.options(this.config)_				.build()__	};create,a,link,request,mapping,info,from,the,supplied,link,request,mapping,request,mapping,annotation,which,is,either,a,directly,declared,annotation,a,meta,annotation,or,the,synthesized,result,of,merging,annotation,attributes,within,an,annotation,hierarchy;protected,request,mapping,info,create,request,mapping,info,request,mapping,request,mapping,request,condition,custom,condition,return,request,mapping,info,paths,resolve,embedded,values,in,patterns,request,mapping,path,methods,request,mapping,method,params,request,mapping,params,headers,request,mapping,headers,consumes,request,mapping,consumes,produces,request,mapping,produces,mapping,name,request,mapping,name,custom,condition,custom,condition,options,this,config,build
RequestMappingHandlerMapping -> public Set<String> getFileExtensions();1485986572;Return the file extensions to use for suffix pattern matching.;public Set<String> getFileExtensions() {_		return this.config.getFileExtensions()__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,set,string,get,file,extensions,return,this,config,get,file,extensions
RequestMappingHandlerMapping -> public Set<String> getFileExtensions();1486635693;Return the file extensions to use for suffix pattern matching.;public Set<String> getFileExtensions() {_		return this.config.getFileExtensions()__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,set,string,get,file,extensions,return,this,config,get,file,extensions
RequestMappingHandlerMapping -> public Set<String> getFileExtensions();1486747801;Return the file extensions to use for suffix pattern matching.;public Set<String> getFileExtensions() {_		return this.config.getFileExtensions()__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,set,string,get,file,extensions,return,this,config,get,file,extensions
RequestMappingHandlerMapping -> public Set<String> getFileExtensions();1495868221;Return the file extensions to use for suffix pattern matching.;public Set<String> getFileExtensions() {_		return this.config.getFileExtensions()__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,set,string,get,file,extensions,return,this,config,get,file,extensions
RequestMappingHandlerMapping -> public Set<String> getFileExtensions();1496334664;Return the file extensions to use for suffix pattern matching.;public Set<String> getFileExtensions() {_		return this.config.getFileExtensions()__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,set,string,get,file,extensions,return,this,config,get,file,extensions
RequestMappingHandlerMapping -> public Set<String> getFileExtensions();1496429194;Return the file extensions to use for suffix pattern matching.;public Set<String> getFileExtensions() {_		return this.config.getFileExtensions()__	};return,the,file,extensions,to,use,for,suffix,pattern,matching;public,set,string,get,file,extensions,return,this,config,get,file,extensions
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1485986572;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1486635693;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1486652296;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1486747801;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1495868221;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1496334664;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1496429194;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1496837955;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1497286385;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1498780456;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1506097334;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1528409922;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1528486327;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> protected String[] resolveEmbeddedValuesInPatterns(String[] patterns);1532520962;Resolve placeholder values in the given array of patterns._@return a new array with updated patterns;protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {_		if (this.embeddedValueResolver == null) {_			return patterns__		}_		else {_			String[] resolvedPatterns = new String[patterns.length]__			for (int i = 0_ i < patterns.length_ i++) {_				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i])__			}_			return resolvedPatterns__		}_	};resolve,placeholder,values,in,the,given,array,of,patterns,return,a,new,array,with,updated,patterns;protected,string,resolve,embedded,values,in,patterns,string,patterns,if,this,embedded,value,resolver,null,return,patterns,else,string,resolved,patterns,new,string,patterns,length,for,int,i,0,i,patterns,length,i,resolved,patterns,i,this,embedded,value,resolver,resolve,string,value,patterns,i,return,resolved,patterns
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1485986572;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||_				AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotated,element,utils,has,annotation,bean,type,controller,class,annotated,element,utils,has,annotation,bean,type,request,mapping,class
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1486635693;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||_				AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotated,element,utils,has,annotation,bean,type,controller,class,annotated,element,utils,has,annotation,bean,type,request,mapping,class
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1486652296;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||_				AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotated,element,utils,has,annotation,bean,type,controller,class,annotated,element,utils,has,annotation,bean,type,request,mapping,class
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1486747801;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||_				AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotated,element,utils,has,annotation,bean,type,controller,class,annotated,element,utils,has,annotation,bean,type,request,mapping,class
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1495868221;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||_				AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotated,element,utils,has,annotation,bean,type,controller,class,annotated,element,utils,has,annotation,bean,type,request,mapping,class
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1496334664;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||_				AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotated,element,utils,has,annotation,bean,type,controller,class,annotated,element,utils,has,annotation,bean,type,request,mapping,class
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1496429194;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||_				AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotated,element,utils,has,annotation,bean,type,controller,class,annotated,element,utils,has,annotation,bean,type,request,mapping,class
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1496837955;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||_				AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotated,element,utils,has,annotation,bean,type,controller,class,annotated,element,utils,has,annotation,bean,type,request,mapping,class
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1497286385;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||_				AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotated,element,utils,has,annotation,bean,type,controller,class,annotated,element,utils,has,annotation,bean,type,request,mapping,class
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1498780456;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||_				AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotated,element,utils,has,annotation,bean,type,controller,class,annotated,element,utils,has,annotation,bean,type,request,mapping,class
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1506097334;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||_				AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotated,element,utils,has,annotation,bean,type,controller,class,annotated,element,utils,has,annotation,bean,type,request,mapping,class
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1528409922;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||_				AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotated,element,utils,has,annotation,bean,type,controller,class,annotated,element,utils,has,annotation,bean,type,request,mapping,class
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1528486327;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||_				AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotated,element,utils,has,annotation,bean,type,controller,class,annotated,element,utils,has,annotation,bean,type,request,mapping,class
RequestMappingHandlerMapping -> @Override 	protected boolean isHandler(Class<?> beanType);1532520962;{@inheritDoc}_Expects a handler to have a type-level @{@link Controller} annotation.;@Override_	protected boolean isHandler(Class<?> beanType) {_		return (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||_				AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class))__	};inherit,doc,expects,a,handler,to,have,a,type,level,link,controller,annotation;override,protected,boolean,is,handler,class,bean,type,return,annotated,element,utils,has,annotation,bean,type,controller,class,annotated,element,utils,has,annotation,bean,type,request,mapping,class
RequestMappingHandlerMapping -> public Map<String, Predicate<Class<?>>> getPathPrefixes();1528486327;The configured path prefixes as a read-only, possibly empty map._@since 5.1;public Map<String, Predicate<Class<?>>> getPathPrefixes() {_		return Collections.unmodifiableMap(this.pathPrefixes)__	};the,configured,path,prefixes,as,a,read,only,possibly,empty,map,since,5,1;public,map,string,predicate,class,get,path,prefixes,return,collections,unmodifiable,map,this,path,prefixes
RequestMappingHandlerMapping -> public Map<String, Predicate<Class<?>>> getPathPrefixes();1532520962;The configured path prefixes as a read-only, possibly empty map._@since 5.1;public Map<String, Predicate<Class<?>>> getPathPrefixes() {_		return Collections.unmodifiableMap(this.pathPrefixes)__	};the,configured,path,prefixes,as,a,read,only,possibly,empty,map,since,5,1;public,map,string,predicate,class,get,path,prefixes,return,collections,unmodifiable,map,this,path,prefixes
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1485986572;Whether suffix pattern matching should work only against path extensions_explicitly registered with the configured {@link RequestedContentTypeResolver}. This_is generally recommended to reduce ambiguity and to avoid issues such as_when a "." appears in the path for other reasons._<p>By default this is set to "true".;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,suffix,pattern,matching,should,work,only,against,path,extensions,explicitly,registered,with,the,configured,link,requested,content,type,resolver,this,is,generally,recommended,to,reduce,ambiguity,and,to,avoid,issues,such,as,when,a,appears,in,the,path,for,other,reasons,p,by,default,this,is,set,to,true;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1486635693;Whether suffix pattern matching should work only against path extensions_explicitly registered with the configured {@link RequestedContentTypeResolver}. This_is generally recommended to reduce ambiguity and to avoid issues such as_when a "." appears in the path for other reasons._<p>By default this is set to "true".;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,suffix,pattern,matching,should,work,only,against,path,extensions,explicitly,registered,with,the,configured,link,requested,content,type,resolver,this,is,generally,recommended,to,reduce,ambiguity,and,to,avoid,issues,such,as,when,a,appears,in,the,path,for,other,reasons,p,by,default,this,is,set,to,true;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1486747801;Whether suffix pattern matching should work only against path extensions_explicitly registered with the configured {@link RequestedContentTypeResolver}. This_is generally recommended to reduce ambiguity and to avoid issues such as_when a "." appears in the path for other reasons._<p>By default this is set to "true".;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,suffix,pattern,matching,should,work,only,against,path,extensions,explicitly,registered,with,the,configured,link,requested,content,type,resolver,this,is,generally,recommended,to,reduce,ambiguity,and,to,avoid,issues,such,as,when,a,appears,in,the,path,for,other,reasons,p,by,default,this,is,set,to,true;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1495868221;Whether suffix pattern matching should work only against path extensions_explicitly registered with the configured {@link RequestedContentTypeResolver}. This_is generally recommended to reduce ambiguity and to avoid issues such as_when a "." appears in the path for other reasons._<p>By default this is set to "true".;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,suffix,pattern,matching,should,work,only,against,path,extensions,explicitly,registered,with,the,configured,link,requested,content,type,resolver,this,is,generally,recommended,to,reduce,ambiguity,and,to,avoid,issues,such,as,when,a,appears,in,the,path,for,other,reasons,p,by,default,this,is,set,to,true;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1496334664;Whether suffix pattern matching should work only against path extensions_explicitly registered with the configured {@link RequestedContentTypeResolver}. This_is generally recommended to reduce ambiguity and to avoid issues such as_when a "." appears in the path for other reasons._<p>By default this is set to "true".;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,suffix,pattern,matching,should,work,only,against,path,extensions,explicitly,registered,with,the,configured,link,requested,content,type,resolver,this,is,generally,recommended,to,reduce,ambiguity,and,to,avoid,issues,such,as,when,a,appears,in,the,path,for,other,reasons,p,by,default,this,is,set,to,true;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1496429194;Whether suffix pattern matching should work only against path extensions_explicitly registered with the configured {@link RequestedContentTypeResolver}. This_is generally recommended to reduce ambiguity and to avoid issues such as_when a "." appears in the path for other reasons._<p>By default this is set to "true".;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,suffix,pattern,matching,should,work,only,against,path,extensions,explicitly,registered,with,the,configured,link,requested,content,type,resolver,this,is,generally,recommended,to,reduce,ambiguity,and,to,avoid,issues,such,as,when,a,appears,in,the,path,for,other,reasons,p,by,default,this,is,set,to,true;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch);1496837955;Whether suffix pattern matching should work only against path extensions_explicitly registered with the configured {@link RequestedContentTypeResolver}. This_is generally recommended to reduce ambiguity and to avoid issues such as_when a "." appears in the path for other reasons._<p>By default this is set to "true".;public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {_		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch__		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch)__	};whether,suffix,pattern,matching,should,work,only,against,path,extensions,explicitly,registered,with,the,configured,link,requested,content,type,resolver,this,is,generally,recommended,to,reduce,ambiguity,and,to,avoid,issues,such,as,when,a,appears,in,the,path,for,other,reasons,p,by,default,this,is,set,to,true;public,void,set,use,registered,suffix,pattern,match,boolean,use,registered,suffix,pattern,match,this,use,registered,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match,use,registered,suffix,pattern,match,this,use,suffix,pattern,match
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1485986572;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1486635693;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1486652296;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1486747801;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1495868221;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1496334664;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1496429194;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1496837955;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1497286385;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1498780456;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1506097334;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1528409922;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_			for (Map.Entry<String, HandlerTypePredicate> entry : this.pathPrefixes.entrySet()) {_				if (entry.getValue().test(handlerType)) {_					String prefix = entry.getKey()__					if (this.embeddedValueResolver != null) {_						prefix = this.embeddedValueResolver.resolveStringValue(prefix)__					}_					info = RequestMappingInfo.paths(prefix).build().combine(info)__					break__				}_			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,for,map,entry,string,handler,type,predicate,entry,this,path,prefixes,entry,set,if,entry,get,value,test,handler,type,string,prefix,entry,get,key,if,this,embedded,value,resolver,null,prefix,this,embedded,value,resolver,resolve,string,value,prefix,info,request,mapping,info,paths,prefix,build,combine,info,break,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1528486327;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_			for (Map.Entry<String, Predicate<Class<?>>> entry : this.pathPrefixes.entrySet()) {_				if (entry.getValue().test(handlerType)) {_					String prefix = entry.getKey()__					if (this.embeddedValueResolver != null) {_						prefix = this.embeddedValueResolver.resolveStringValue(prefix)__					}_					info = RequestMappingInfo.paths(prefix).build().combine(info)__					break__				}_			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,for,map,entry,string,predicate,class,entry,this,path,prefixes,entry,set,if,entry,get,value,test,handler,type,string,prefix,entry,get,key,if,this,embedded,value,resolver,null,prefix,this,embedded,value,resolver,resolve,string,value,prefix,info,request,mapping,info,paths,prefix,build,combine,info,break,return,info
RequestMappingHandlerMapping -> @Override 	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);1532520962;Uses method and type-level @{@link RequestMapping} annotations to create_the RequestMappingInfo._@return the created RequestMappingInfo, or {@code null} if the method_does not have a {@code @RequestMapping} annotation._@see #getCustomMethodCondition(Method)_@see #getCustomTypeCondition(Class);@Override_	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {_		RequestMappingInfo info = createRequestMappingInfo(method)__		if (info != null) {_			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType)__			if (typeInfo != null) {_				info = typeInfo.combine(info)__			}_			for (Map.Entry<String, Predicate<Class<?>>> entry : this.pathPrefixes.entrySet()) {_				if (entry.getValue().test(handlerType)) {_					String prefix = entry.getKey()__					if (this.embeddedValueResolver != null) {_						prefix = this.embeddedValueResolver.resolveStringValue(prefix)__					}_					info = RequestMappingInfo.paths(prefix).build().combine(info)__					break__				}_			}_		}_		return info__	};uses,method,and,type,level,link,request,mapping,annotations,to,create,the,request,mapping,info,return,the,created,request,mapping,info,or,code,null,if,the,method,does,not,have,a,code,request,mapping,annotation,see,get,custom,method,condition,method,see,get,custom,type,condition,class;override,protected,request,mapping,info,get,mapping,for,method,method,method,class,handler,type,request,mapping,info,info,create,request,mapping,info,method,if,info,null,request,mapping,info,type,info,create,request,mapping,info,handler,type,if,type,info,null,info,type,info,combine,info,for,map,entry,string,predicate,class,entry,this,path,prefixes,entry,set,if,entry,get,value,test,handler,type,string,prefix,entry,get,key,if,this,embedded,value,resolver,null,prefix,this,embedded,value,resolver,resolve,string,value,prefix,info,request,mapping,info,paths,prefix,build,combine,info,break,return,info
