commented;modifiers;parameterAmount;loc;comment;code
true;public;1;5;/**  * Enable cross origin request handling for the specified path pattern.  *  * <p>Exact path mapping URIs (such as {@code "/admin"}) are supported as  * well as Ant-style path patterns (such as {@code "/admin/**"}).  *  * <p>The following defaults are applied to the {@link CorsRegistration}:  * <ul>  *     <li>Allow all origins.</li>  *     <li>Allow "simple" methods {@code GET}, {@code HEAD} and {@code POST}.</li>  *     <li>Allow all headers.</li>  *     <li>Set max age to 1800 seconds (30 minutes).</li>  * </ul>  */ ;/**  * Enable cross origin request handling for the specified path pattern.  *  * <p>Exact path mapping URIs (such as {@code "/admin"}) are supported as  * well as Ant-style path patterns (such as {@code "/admin/**"}).  *  * <p>The following defaults are applied to the {@link CorsRegistration}:  * <ul>  *     <li>Allow all origins.</li>  *     <li>Allow "simple" methods {@code GET}, {@code HEAD} and {@code POST}.</li>  *     <li>Allow all headers.</li>  *     <li>Set max age to 1800 seconds (30 minutes).</li>  * </ul>  */ public CorsRegistration addMapping(String pathPattern) {     CorsRegistration registration = new CorsRegistration(pathPattern).     this.registrations.add(registration).     return registration. }
false;protected;0;7;;protected Map<String, CorsConfiguration> getCorsConfigurations() {     Map<String, CorsConfiguration> configs = new LinkedHashMap<>(this.registrations.size()).     for (CorsRegistration registration : this.registrations) {         configs.put(registration.getPathPattern(), registration.getCorsConfiguration()).     }     return configs. }
