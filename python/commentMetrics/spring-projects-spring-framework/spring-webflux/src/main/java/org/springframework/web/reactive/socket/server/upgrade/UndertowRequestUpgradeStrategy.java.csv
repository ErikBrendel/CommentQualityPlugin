commented;modifiers;parameterAmount;loc;comment;code
false;public;4;25;;@Override public Mono<Void> upgrade(ServerWebExchange exchange, WebSocketHandler handler, @Nullable String subProtocol, Supplier<HandshakeInfo> handshakeInfoFactory) {     ServerHttpRequest request = exchange.getRequest().     Assert.isInstanceOf(AbstractServerHttpRequest.class, request).     HttpServerExchange httpExchange = ((AbstractServerHttpRequest) request).getNativeRequest().     Set<String> protocols = (subProtocol != null ? Collections.singleton(subProtocol) : Collections.emptySet()).     Hybi13Handshake handshake = new Hybi13Handshake(protocols, false).     List<Handshake> handshakes = Collections.singletonList(handshake).     HandshakeInfo handshakeInfo = handshakeInfoFactory.get().     DataBufferFactory bufferFactory = exchange.getResponse().bufferFactory().     try {         DefaultCallback callback = new DefaultCallback(handshakeInfo, handler, bufferFactory).         new WebSocketProtocolHandshakeHandler(handshakes, callback).handleRequest(httpExchange).     } catch (Exception ex) {         return Mono.error(ex).     }     return Mono.empty(). }
false;public;2;10;;@Override public void onConnect(WebSocketHttpExchange httpExchange, WebSocketChannel channel) {     UndertowWebSocketSession session = createSession(channel).     UndertowWebSocketHandlerAdapter adapter = new UndertowWebSocketHandlerAdapter(session).     channel.getReceiveSetter().set(adapter).     channel.resumeReceives().     this.handler.handle(session).subscribe(session). }
false;private;1;3;;private UndertowWebSocketSession createSession(WebSocketChannel channel) {     return new UndertowWebSocketSession(channel, this.handshakeInfo, this.bufferFactory). }
