commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Whether the controller represented by this instance has declared any  * session attributes through an {@link SessionAttributes} annotation.  */ ;/**  * Whether the controller represented by this instance has declared any  * session attributes through an {@link SessionAttributes} annotation.  */ public boolean hasSessionAttributes() {     return (!this.attributeNames.isEmpty() || !this.attributeTypes.isEmpty()). }
true;public;2;10;/**  * Whether the attribute name or type match the names and types specified  * via {@code @SessionAttributes} on the underlying controller.  * <p>Attributes successfully resolved through this method are "remembered"  * and subsequently used in {@link #retrieveAttributes(WebSession)}  * and also {@link #cleanupAttributes(WebSession)}.  * @param attributeName the attribute name to check  * @param attributeType the type for the attribute  */ ;/**  * Whether the attribute name or type match the names and types specified  * via {@code @SessionAttributes} on the underlying controller.  * <p>Attributes successfully resolved through this method are "remembered"  * and subsequently used in {@link #retrieveAttributes(WebSession)}  * and also {@link #cleanupAttributes(WebSession)}.  * @param attributeName the attribute name to check  * @param attributeType the type for the attribute  */ public boolean isHandlerSessionAttribute(String attributeName, Class<?> attributeType) {     Assert.notNull(attributeName, "Attribute name must not be null").     if (this.attributeNames.contains(attributeName) || this.attributeTypes.contains(attributeType)) {         this.knownAttributeNames.add(attributeName).         return true.     } else {         return false.     } }
true;public;1;10;/**  * Retrieve "known" attributes from the session, i.e. attributes listed  * by name in {@code @SessionAttributes} or attributes previously stored  * in the model that matched by type.  * @param session the current session  * @return a map with handler session attributes, possibly empty  */ ;/**  * Retrieve "known" attributes from the session, i.e. attributes listed  * by name in {@code @SessionAttributes} or attributes previously stored  * in the model that matched by type.  * @param session the current session  * @return a map with handler session attributes, possibly empty  */ public Map<String, Object> retrieveAttributes(WebSession session) {     Map<String, Object> attributes = new HashMap<>().     this.knownAttributeNames.forEach(name -> {         Object value = session.getAttribute(name).         if (value != null) {             attributes.put(name, value).         }     }).     return attributes. }
true;public;2;8;/**  * Store a subset of the given attributes in the session. Attributes not  * declared as session attributes via {@code @SessionAttributes} are ignored.  * @param session the current session  * @param attributes candidate attributes for session storage  */ ;/**  * Store a subset of the given attributes in the session. Attributes not  * declared as session attributes via {@code @SessionAttributes} are ignored.  * @param session the current session  * @param attributes candidate attributes for session storage  */ public void storeAttributes(WebSession session, Map<String, ?> attributes) {     attributes.keySet().forEach(name -> {         Object value = attributes.get(name).         if (value != null && isHandlerSessionAttribute(name, value.getClass())) {             session.getAttributes().put(name, value).         }     }). }
true;public;1;3;/**  * Remove "known" attributes from the session, i.e. attributes listed  * by name in {@code @SessionAttributes} or attributes previously stored  * in the model that matched by type.  * @param session the current session  */ ;/**  * Remove "known" attributes from the session, i.e. attributes listed  * by name in {@code @SessionAttributes} or attributes previously stored  * in the model that matched by type.  * @param session the current session  */ public void cleanupAttributes(WebSession session) {     this.knownAttributeNames.forEach(name -> session.getAttributes().remove(name)). }
