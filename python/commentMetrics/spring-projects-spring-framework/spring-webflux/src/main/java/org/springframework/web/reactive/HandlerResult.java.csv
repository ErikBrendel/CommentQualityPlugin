# id;timestamp;commentText;codeText;commentWords;codeWords
HandlerResult -> public Model getModel();1485986572;Return the model used for request handling. This is a shortcut for_{@code getBindingContext().getModel()}.;public Model getModel() {_		return this.bindingContext.getModel()__	};return,the,model,used,for,request,handling,this,is,a,shortcut,for,code,get,binding,context,get,model;public,model,get,model,return,this,binding,context,get,model
HandlerResult -> public Model getModel();1495569915;Return the model used for request handling. This is a shortcut for_{@code getBindingContext().getModel()}.;public Model getModel() {_		return this.bindingContext.getModel()__	};return,the,model,used,for,request,handling,this,is,a,shortcut,for,code,get,binding,context,get,model;public,model,get,model,return,this,binding,context,get,model
HandlerResult -> public Model getModel();1495868221;Return the model used for request handling. This is a shortcut for_{@code getBindingContext().getModel()}.;public Model getModel() {_		return this.bindingContext.getModel()__	};return,the,model,used,for,request,handling,this,is,a,shortcut,for,code,get,binding,context,get,model;public,model,get,model,return,this,binding,context,get,model
HandlerResult -> public Model getModel();1496837955;Return the model used for request handling. This is a shortcut for_{@code getBindingContext().getModel()}.;public Model getModel() {_		return this.bindingContext.getModel()__	};return,the,model,used,for,request,handling,this,is,a,shortcut,for,code,get,binding,context,get,model;public,model,get,model,return,this,binding,context,get,model
HandlerResult -> public Model getModel();1498780456;Return the model used for request handling. This is a shortcut for_{@code getBindingContext().getModel()}.;public Model getModel() {_		return this.bindingContext.getModel()__	};return,the,model,used,for,request,handling,this,is,a,shortcut,for,code,get,binding,context,get,model;public,model,get,model,return,this,binding,context,get,model
HandlerResult -> public Model getModel();1500390564;Return the model used for request handling. This is a shortcut for_{@code getBindingContext().getModel()}.;public Model getModel() {_		return this.bindingContext.getModel()__	};return,the,model,used,for,request,handling,this,is,a,shortcut,for,code,get,binding,context,get,model;public,model,get,model,return,this,binding,context,get,model
HandlerResult -> @Nullable 	public Object getReturnValue();1495868221;Return the value returned from the handler, if any.;@Nullable_	public Object getReturnValue() {_		return this.returnValue__	};return,the,value,returned,from,the,handler,if,any;nullable,public,object,get,return,value,return,this,return,value
HandlerResult -> @Nullable 	public Object getReturnValue();1496837955;Return the value returned from the handler, if any.;@Nullable_	public Object getReturnValue() {_		return this.returnValue__	};return,the,value,returned,from,the,handler,if,any;nullable,public,object,get,return,value,return,this,return,value
HandlerResult -> @Nullable 	public Object getReturnValue();1498780456;Return the value returned from the handler, if any.;@Nullable_	public Object getReturnValue() {_		return this.returnValue__	};return,the,value,returned,from,the,handler,if,any;nullable,public,object,get,return,value,return,this,return,value
HandlerResult -> @Nullable 	public Object getReturnValue();1500390564;Return the value returned from the handler, if any.;@Nullable_	public Object getReturnValue() {_		return this.returnValue__	};return,the,value,returned,from,the,handler,if,any;nullable,public,object,get,return,value,return,this,return,value
HandlerResult -> public ResolvableType getReturnType();1485986572;Return the type of the value returned from the handler.;public ResolvableType getReturnType() {_		return this.returnType__	};return,the,type,of,the,value,returned,from,the,handler;public,resolvable,type,get,return,type,return,this,return,type
HandlerResult -> public ResolvableType getReturnType();1495569915;Return the type of the value returned from the handler.;public ResolvableType getReturnType() {_		return this.returnType__	};return,the,type,of,the,value,returned,from,the,handler;public,resolvable,type,get,return,type,return,this,return,type
HandlerResult -> public ResolvableType getReturnType();1495868221;Return the type of the value returned from the handler.;public ResolvableType getReturnType() {_		return this.returnType__	};return,the,type,of,the,value,returned,from,the,handler;public,resolvable,type,get,return,type,return,this,return,type
HandlerResult -> public ResolvableType getReturnType();1496837955;Return the type of the value returned from the handler.;public ResolvableType getReturnType() {_		return this.returnType__	};return,the,type,of,the,value,returned,from,the,handler;public,resolvable,type,get,return,type,return,this,return,type
HandlerResult -> public ResolvableType getReturnType();1498780456;Return the type of the value returned from the handler.;public ResolvableType getReturnType() {_		return this.returnType__	};return,the,type,of,the,value,returned,from,the,handler;public,resolvable,type,get,return,type,return,this,return,type
HandlerResult -> public ResolvableType getReturnType();1500390564;Return the type of the value returned from the handler -- e.g. the return_type declared on a controller method's signature. Also see_{@link #getReturnTypeSource()} to obtain the underlying_{@link MethodParameter} for the return type.;public ResolvableType getReturnType() {_		return this.returnType__	};return,the,type,of,the,value,returned,from,the,handler,e,g,the,return,type,declared,on,a,controller,method,s,signature,also,see,link,get,return,type,source,to,obtain,the,underlying,link,method,parameter,for,the,return,type;public,resolvable,type,get,return,type,return,this,return,type
HandlerResult -> public HandlerResult setExceptionHandler(Function<Throwable, Mono<HandlerResult>> function);1485986572;Configure an exception handler that may be used to produce an alternative_result when result handling fails. Especially for an async return value_errors may occur after the invocation of the handler._@param function the error handler_@return the current instance;public HandlerResult setExceptionHandler(Function<Throwable, Mono<HandlerResult>> function) {_		this.exceptionHandler = function__		return this__	};configure,an,exception,handler,that,may,be,used,to,produce,an,alternative,result,when,result,handling,fails,especially,for,an,async,return,value,errors,may,occur,after,the,invocation,of,the,handler,param,function,the,error,handler,return,the,current,instance;public,handler,result,set,exception,handler,function,throwable,mono,handler,result,function,this,exception,handler,function,return,this
HandlerResult -> public HandlerResult setExceptionHandler(Function<Throwable, Mono<HandlerResult>> function);1495569915;Configure an exception handler that may be used to produce an alternative_result when result handling fails. Especially for an async return value_errors may occur after the invocation of the handler._@param function the error handler_@return the current instance;public HandlerResult setExceptionHandler(Function<Throwable, Mono<HandlerResult>> function) {_		this.exceptionHandler = function__		return this__	};configure,an,exception,handler,that,may,be,used,to,produce,an,alternative,result,when,result,handling,fails,especially,for,an,async,return,value,errors,may,occur,after,the,invocation,of,the,handler,param,function,the,error,handler,return,the,current,instance;public,handler,result,set,exception,handler,function,throwable,mono,handler,result,function,this,exception,handler,function,return,this
HandlerResult -> public HandlerResult setExceptionHandler(Function<Throwable, Mono<HandlerResult>> function);1495868221;Configure an exception handler that may be used to produce an alternative_result when result handling fails. Especially for an async return value_errors may occur after the invocation of the handler._@param function the error handler_@return the current instance;public HandlerResult setExceptionHandler(Function<Throwable, Mono<HandlerResult>> function) {_		this.exceptionHandler = function__		return this__	};configure,an,exception,handler,that,may,be,used,to,produce,an,alternative,result,when,result,handling,fails,especially,for,an,async,return,value,errors,may,occur,after,the,invocation,of,the,handler,param,function,the,error,handler,return,the,current,instance;public,handler,result,set,exception,handler,function,throwable,mono,handler,result,function,this,exception,handler,function,return,this
HandlerResult -> public HandlerResult setExceptionHandler(Function<Throwable, Mono<HandlerResult>> function);1496837955;Configure an exception handler that may be used to produce an alternative_result when result handling fails. Especially for an async return value_errors may occur after the invocation of the handler._@param function the error handler_@return the current instance;public HandlerResult setExceptionHandler(Function<Throwable, Mono<HandlerResult>> function) {_		this.exceptionHandler = function__		return this__	};configure,an,exception,handler,that,may,be,used,to,produce,an,alternative,result,when,result,handling,fails,especially,for,an,async,return,value,errors,may,occur,after,the,invocation,of,the,handler,param,function,the,error,handler,return,the,current,instance;public,handler,result,set,exception,handler,function,throwable,mono,handler,result,function,this,exception,handler,function,return,this
HandlerResult -> public HandlerResult setExceptionHandler(Function<Throwable, Mono<HandlerResult>> function);1498780456;Configure an exception handler that may be used to produce an alternative_result when result handling fails. Especially for an async return value_errors may occur after the invocation of the handler._@param function the error handler_@return the current instance;public HandlerResult setExceptionHandler(Function<Throwable, Mono<HandlerResult>> function) {_		this.exceptionHandler = function__		return this__	};configure,an,exception,handler,that,may,be,used,to,produce,an,alternative,result,when,result,handling,fails,especially,for,an,async,return,value,errors,may,occur,after,the,invocation,of,the,handler,param,function,the,error,handler,return,the,current,instance;public,handler,result,set,exception,handler,function,throwable,mono,handler,result,function,this,exception,handler,function,return,this
HandlerResult -> public HandlerResult setExceptionHandler(Function<Throwable, Mono<HandlerResult>> function);1500390564;Configure an exception handler that may be used to produce an alternative_result when result handling fails. Especially for an async return value_errors may occur after the invocation of the handler._@param function the error handler_@return the current instance;public HandlerResult setExceptionHandler(Function<Throwable, Mono<HandlerResult>> function) {_		this.exceptionHandler = function__		return this__	};configure,an,exception,handler,that,may,be,used,to,produce,an,alternative,result,when,result,handling,fails,especially,for,an,async,return,value,errors,may,occur,after,the,invocation,of,the,handler,param,function,the,error,handler,return,the,current,instance;public,handler,result,set,exception,handler,function,throwable,mono,handler,result,function,this,exception,handler,function,return,this
HandlerResult -> public HandlerResult(Object handler, Object returnValue, MethodParameter returnType);1485986572;Create a new {@code HandlerResult}._@param handler the handler that handled the request_@param returnValue the return value from the handler possibly {@code null}_@param returnType the return value type;public HandlerResult(Object handler, Object returnValue, MethodParameter returnType) {_		this(handler, returnValue, returnType, null)__	};create,a,new,code,handler,result,param,handler,the,handler,that,handled,the,request,param,return,value,the,return,value,from,the,handler,possibly,code,null,param,return,type,the,return,value,type;public,handler,result,object,handler,object,return,value,method,parameter,return,type,this,handler,return,value,return,type,null
HandlerResult -> public HandlerResult(Object handler, Object returnValue, MethodParameter returnType);1495569915;Create a new {@code HandlerResult}._@param handler the handler that handled the request_@param returnValue the return value from the handler possibly {@code null}_@param returnType the return value type;public HandlerResult(Object handler, Object returnValue, MethodParameter returnType) {_		this(handler, returnValue, returnType, null)__	};create,a,new,code,handler,result,param,handler,the,handler,that,handled,the,request,param,return,value,the,return,value,from,the,handler,possibly,code,null,param,return,type,the,return,value,type;public,handler,result,object,handler,object,return,value,method,parameter,return,type,this,handler,return,value,return,type,null
HandlerResult -> public boolean hasExceptionHandler();1485986572;Whether there is an exception handler.;public boolean hasExceptionHandler() {_		return (this.exceptionHandler != null)__	};whether,there,is,an,exception,handler;public,boolean,has,exception,handler,return,this,exception,handler,null
HandlerResult -> public boolean hasExceptionHandler();1495569915;Whether there is an exception handler.;public boolean hasExceptionHandler() {_		return (this.exceptionHandler != null)__	};whether,there,is,an,exception,handler;public,boolean,has,exception,handler,return,this,exception,handler,null
HandlerResult -> public boolean hasExceptionHandler();1495868221;Whether there is an exception handler.;public boolean hasExceptionHandler() {_		return (this.exceptionHandler != null)__	};whether,there,is,an,exception,handler;public,boolean,has,exception,handler,return,this,exception,handler,null
HandlerResult -> public boolean hasExceptionHandler();1496837955;Whether there is an exception handler.;public boolean hasExceptionHandler() {_		return (this.exceptionHandler != null)__	};whether,there,is,an,exception,handler;public,boolean,has,exception,handler,return,this,exception,handler,null
HandlerResult -> public boolean hasExceptionHandler();1498780456;Whether there is an exception handler.;public boolean hasExceptionHandler() {_		return (this.exceptionHandler != null)__	};whether,there,is,an,exception,handler;public,boolean,has,exception,handler,return,this,exception,handler,null
HandlerResult -> public boolean hasExceptionHandler();1500390564;Whether there is an exception handler.;public boolean hasExceptionHandler() {_		return (this.exceptionHandler != null)__	};whether,there,is,an,exception,handler;public,boolean,has,exception,handler,return,this,exception,handler,null
HandlerResult -> public HandlerResult(Object handler, @Nullable Object returnValue, MethodParameter returnType);1495868221;Create a new {@code HandlerResult}._@param handler the handler that handled the request_@param returnValue the return value from the handler possibly {@code null}_@param returnType the return value type;public HandlerResult(Object handler, @Nullable Object returnValue, MethodParameter returnType) {_		this(handler, returnValue, returnType, null)__	};create,a,new,code,handler,result,param,handler,the,handler,that,handled,the,request,param,return,value,the,return,value,from,the,handler,possibly,code,null,param,return,type,the,return,value,type;public,handler,result,object,handler,nullable,object,return,value,method,parameter,return,type,this,handler,return,value,return,type,null
HandlerResult -> public HandlerResult(Object handler, @Nullable Object returnValue, MethodParameter returnType);1496837955;Create a new {@code HandlerResult}._@param handler the handler that handled the request_@param returnValue the return value from the handler possibly {@code null}_@param returnType the return value type;public HandlerResult(Object handler, @Nullable Object returnValue, MethodParameter returnType) {_		this(handler, returnValue, returnType, null)__	};create,a,new,code,handler,result,param,handler,the,handler,that,handled,the,request,param,return,value,the,return,value,from,the,handler,possibly,code,null,param,return,type,the,return,value,type;public,handler,result,object,handler,nullable,object,return,value,method,parameter,return,type,this,handler,return,value,return,type,null
HandlerResult -> public HandlerResult(Object handler, @Nullable Object returnValue, MethodParameter returnType);1498780456;Create a new {@code HandlerResult}._@param handler the handler that handled the request_@param returnValue the return value from the handler possibly {@code null}_@param returnType the return value type;public HandlerResult(Object handler, @Nullable Object returnValue, MethodParameter returnType) {_		this(handler, returnValue, returnType, null)__	};create,a,new,code,handler,result,param,handler,the,handler,that,handled,the,request,param,return,value,the,return,value,from,the,handler,possibly,code,null,param,return,type,the,return,value,type;public,handler,result,object,handler,nullable,object,return,value,method,parameter,return,type,this,handler,return,value,return,type,null
HandlerResult -> public HandlerResult(Object handler, @Nullable Object returnValue, MethodParameter returnType);1500390564;Create a new {@code HandlerResult}._@param handler the handler that handled the request_@param returnValue the return value from the handler possibly {@code null}_@param returnType the return value type;public HandlerResult(Object handler, @Nullable Object returnValue, MethodParameter returnType) {_		this(handler, returnValue, returnType, null)__	};create,a,new,code,handler,result,param,handler,the,handler,that,handled,the,request,param,return,value,the,return,value,from,the,handler,possibly,code,null,param,return,type,the,return,value,type;public,handler,result,object,handler,nullable,object,return,value,method,parameter,return,type,this,handler,return,value,return,type,null
HandlerResult -> public BindingContext getBindingContext();1485986572;Return the BindingContext used for request handling.;public BindingContext getBindingContext() {_		return this.bindingContext__	};return,the,binding,context,used,for,request,handling;public,binding,context,get,binding,context,return,this,binding,context
HandlerResult -> public BindingContext getBindingContext();1495569915;Return the BindingContext used for request handling.;public BindingContext getBindingContext() {_		return this.bindingContext__	};return,the,binding,context,used,for,request,handling;public,binding,context,get,binding,context,return,this,binding,context
HandlerResult -> public BindingContext getBindingContext();1495868221;Return the BindingContext used for request handling.;public BindingContext getBindingContext() {_		return this.bindingContext__	};return,the,binding,context,used,for,request,handling;public,binding,context,get,binding,context,return,this,binding,context
HandlerResult -> public BindingContext getBindingContext();1496837955;Return the BindingContext used for request handling.;public BindingContext getBindingContext() {_		return this.bindingContext__	};return,the,binding,context,used,for,request,handling;public,binding,context,get,binding,context,return,this,binding,context
HandlerResult -> public BindingContext getBindingContext();1498780456;Return the BindingContext used for request handling.;public BindingContext getBindingContext() {_		return this.bindingContext__	};return,the,binding,context,used,for,request,handling;public,binding,context,get,binding,context,return,this,binding,context
HandlerResult -> public BindingContext getBindingContext();1500390564;Return the BindingContext used for request handling.;public BindingContext getBindingContext() {_		return this.bindingContext__	};return,the,binding,context,used,for,request,handling;public,binding,context,get,binding,context,return,this,binding,context
HandlerResult -> public Mono<HandlerResult> applyExceptionHandler(Throwable failure);1485986572;Apply the exception handler and return the alternative result._@param failure the exception_@return the new result or the same error if there is no exception handler;public Mono<HandlerResult> applyExceptionHandler(Throwable failure) {_		return (hasExceptionHandler() ? this.exceptionHandler.apply(failure) : Mono.error(failure))__	};apply,the,exception,handler,and,return,the,alternative,result,param,failure,the,exception,return,the,new,result,or,the,same,error,if,there,is,no,exception,handler;public,mono,handler,result,apply,exception,handler,throwable,failure,return,has,exception,handler,this,exception,handler,apply,failure,mono,error,failure
HandlerResult -> public Mono<HandlerResult> applyExceptionHandler(Throwable failure);1495569915;Apply the exception handler and return the alternative result._@param failure the exception_@return the new result or the same error if there is no exception handler;public Mono<HandlerResult> applyExceptionHandler(Throwable failure) {_		return (hasExceptionHandler() ? this.exceptionHandler.apply(failure) : Mono.error(failure))__	};apply,the,exception,handler,and,return,the,alternative,result,param,failure,the,exception,return,the,new,result,or,the,same,error,if,there,is,no,exception,handler;public,mono,handler,result,apply,exception,handler,throwable,failure,return,has,exception,handler,this,exception,handler,apply,failure,mono,error,failure
HandlerResult -> public Mono<HandlerResult> applyExceptionHandler(Throwable failure);1495868221;Apply the exception handler and return the alternative result._@param failure the exception_@return the new result or the same error if there is no exception handler;public Mono<HandlerResult> applyExceptionHandler(Throwable failure) {_		return (hasExceptionHandler() ? this.exceptionHandler.apply(failure) : Mono.error(failure))__	};apply,the,exception,handler,and,return,the,alternative,result,param,failure,the,exception,return,the,new,result,or,the,same,error,if,there,is,no,exception,handler;public,mono,handler,result,apply,exception,handler,throwable,failure,return,has,exception,handler,this,exception,handler,apply,failure,mono,error,failure
HandlerResult -> public Mono<HandlerResult> applyExceptionHandler(Throwable failure);1496837955;Apply the exception handler and return the alternative result._@param failure the exception_@return the new result or the same error if there is no exception handler;public Mono<HandlerResult> applyExceptionHandler(Throwable failure) {_		return (hasExceptionHandler() ? this.exceptionHandler.apply(failure) : Mono.error(failure))__	};apply,the,exception,handler,and,return,the,alternative,result,param,failure,the,exception,return,the,new,result,or,the,same,error,if,there,is,no,exception,handler;public,mono,handler,result,apply,exception,handler,throwable,failure,return,has,exception,handler,this,exception,handler,apply,failure,mono,error,failure
HandlerResult -> public Mono<HandlerResult> applyExceptionHandler(Throwable failure);1498780456;Apply the exception handler and return the alternative result._@param failure the exception_@return the new result or the same error if there is no exception handler;public Mono<HandlerResult> applyExceptionHandler(Throwable failure) {_		return (this.exceptionHandler != null ? this.exceptionHandler.apply(failure) : Mono.error(failure))__	};apply,the,exception,handler,and,return,the,alternative,result,param,failure,the,exception,return,the,new,result,or,the,same,error,if,there,is,no,exception,handler;public,mono,handler,result,apply,exception,handler,throwable,failure,return,this,exception,handler,null,this,exception,handler,apply,failure,mono,error,failure
HandlerResult -> public Mono<HandlerResult> applyExceptionHandler(Throwable failure);1500390564;Apply the exception handler and return the alternative result._@param failure the exception_@return the new result or the same error if there is no exception handler;public Mono<HandlerResult> applyExceptionHandler(Throwable failure) {_		return (this.exceptionHandler != null ? this.exceptionHandler.apply(failure) : Mono.error(failure))__	};apply,the,exception,handler,and,return,the,alternative,result,param,failure,the,exception,return,the,new,result,or,the,same,error,if,there,is,no,exception,handler;public,mono,handler,result,apply,exception,handler,throwable,failure,return,this,exception,handler,null,this,exception,handler,apply,failure,mono,error,failure
HandlerResult -> public HandlerResult(Object handler, @Nullable Object returnValue, MethodParameter returnType, 			@Nullable BindingContext context);1496837955;Create a new {@code HandlerResult}._@param handler the handler that handled the request_@param returnValue the return value from the handler possibly {@code null}_@param returnType the return value type_@param context the binding context used for request handling;public HandlerResult(Object handler, @Nullable Object returnValue, MethodParameter returnType,_			@Nullable BindingContext context) {__		Assert.notNull(handler, "'handler' is required")__		Assert.notNull(returnType, "'returnType' is required")__		this.handler = handler__		this.returnValue = returnValue__		this.returnType = ResolvableType.forMethodParameter(returnType)__		this.bindingContext = (context != null ? context : new BindingContext())__	};create,a,new,code,handler,result,param,handler,the,handler,that,handled,the,request,param,return,value,the,return,value,from,the,handler,possibly,code,null,param,return,type,the,return,value,type,param,context,the,binding,context,used,for,request,handling;public,handler,result,object,handler,nullable,object,return,value,method,parameter,return,type,nullable,binding,context,context,assert,not,null,handler,handler,is,required,assert,not,null,return,type,return,type,is,required,this,handler,handler,this,return,value,return,value,this,return,type,resolvable,type,for,method,parameter,return,type,this,binding,context,context,null,context,new,binding,context
HandlerResult -> public HandlerResult(Object handler, @Nullable Object returnValue, MethodParameter returnType, 			@Nullable BindingContext context);1498780456;Create a new {@code HandlerResult}._@param handler the handler that handled the request_@param returnValue the return value from the handler possibly {@code null}_@param returnType the return value type_@param context the binding context used for request handling;public HandlerResult(Object handler, @Nullable Object returnValue, MethodParameter returnType,_			@Nullable BindingContext context) {__		Assert.notNull(handler, "'handler' is required")__		Assert.notNull(returnType, "'returnType' is required")__		this.handler = handler__		this.returnValue = returnValue__		this.returnType = ResolvableType.forMethodParameter(returnType)__		this.bindingContext = (context != null ? context : new BindingContext())__	};create,a,new,code,handler,result,param,handler,the,handler,that,handled,the,request,param,return,value,the,return,value,from,the,handler,possibly,code,null,param,return,type,the,return,value,type,param,context,the,binding,context,used,for,request,handling;public,handler,result,object,handler,nullable,object,return,value,method,parameter,return,type,nullable,binding,context,context,assert,not,null,handler,handler,is,required,assert,not,null,return,type,return,type,is,required,this,handler,handler,this,return,value,return,value,this,return,type,resolvable,type,for,method,parameter,return,type,this,binding,context,context,null,context,new,binding,context
HandlerResult -> public HandlerResult(Object handler, @Nullable Object returnValue, MethodParameter returnType, 			@Nullable BindingContext context);1500390564;Create a new {@code HandlerResult}._@param handler the handler that handled the request_@param returnValue the return value from the handler possibly {@code null}_@param returnType the return value type_@param context the binding context used for request handling;public HandlerResult(Object handler, @Nullable Object returnValue, MethodParameter returnType,_			@Nullable BindingContext context) {__		Assert.notNull(handler, "'handler' is required")__		Assert.notNull(returnType, "'returnType' is required")__		this.handler = handler__		this.returnValue = returnValue__		this.returnType = ResolvableType.forMethodParameter(returnType)__		this.bindingContext = (context != null ? context : new BindingContext())__	};create,a,new,code,handler,result,param,handler,the,handler,that,handled,the,request,param,return,value,the,return,value,from,the,handler,possibly,code,null,param,return,type,the,return,value,type,param,context,the,binding,context,used,for,request,handling;public,handler,result,object,handler,nullable,object,return,value,method,parameter,return,type,nullable,binding,context,context,assert,not,null,handler,handler,is,required,assert,not,null,return,type,return,type,is,required,this,handler,handler,this,return,value,return,value,this,return,type,resolvable,type,for,method,parameter,return,type,this,binding,context,context,null,context,new,binding,context
HandlerResult -> public Object getHandler();1485986572;Return the handler that handled the request.;public Object getHandler() {_		return this.handler__	};return,the,handler,that,handled,the,request;public,object,get,handler,return,this,handler
HandlerResult -> public Object getHandler();1495569915;Return the handler that handled the request.;public Object getHandler() {_		return this.handler__	};return,the,handler,that,handled,the,request;public,object,get,handler,return,this,handler
HandlerResult -> public Object getHandler();1495868221;Return the handler that handled the request.;public Object getHandler() {_		return this.handler__	};return,the,handler,that,handled,the,request;public,object,get,handler,return,this,handler
HandlerResult -> public Object getHandler();1496837955;Return the handler that handled the request.;public Object getHandler() {_		return this.handler__	};return,the,handler,that,handled,the,request;public,object,get,handler,return,this,handler
HandlerResult -> public Object getHandler();1498780456;Return the handler that handled the request.;public Object getHandler() {_		return this.handler__	};return,the,handler,that,handled,the,request;public,object,get,handler,return,this,handler
HandlerResult -> public Object getHandler();1500390564;Return the handler that handled the request.;public Object getHandler() {_		return this.handler__	};return,the,handler,that,handled,the,request;public,object,get,handler,return,this,handler
HandlerResult -> public MethodParameter getReturnTypeSource();1485986572;Return the {@link MethodParameter} from which_{@link #getReturnType() returnType} was created.;public MethodParameter getReturnTypeSource() {_		return (MethodParameter) this.returnType.getSource()__	};return,the,link,method,parameter,from,which,link,get,return,type,return,type,was,created;public,method,parameter,get,return,type,source,return,method,parameter,this,return,type,get,source
HandlerResult -> public MethodParameter getReturnTypeSource();1495569915;Return the {@link MethodParameter} from which_{@link #getReturnType() returnType} was created.;public MethodParameter getReturnTypeSource() {_		return (MethodParameter) this.returnType.getSource()__	};return,the,link,method,parameter,from,which,link,get,return,type,return,type,was,created;public,method,parameter,get,return,type,source,return,method,parameter,this,return,type,get,source
HandlerResult -> public MethodParameter getReturnTypeSource();1495868221;Return the {@link MethodParameter} from which_{@link #getReturnType() returnType} was created.;public MethodParameter getReturnTypeSource() {_		return (MethodParameter) this.returnType.getSource()__	};return,the,link,method,parameter,from,which,link,get,return,type,return,type,was,created;public,method,parameter,get,return,type,source,return,method,parameter,this,return,type,get,source
HandlerResult -> public MethodParameter getReturnTypeSource();1496837955;Return the {@link MethodParameter} from which_{@link #getReturnType() returnType} was created.;public MethodParameter getReturnTypeSource() {_		return (MethodParameter) this.returnType.getSource()__	};return,the,link,method,parameter,from,which,link,get,return,type,return,type,was,created;public,method,parameter,get,return,type,source,return,method,parameter,this,return,type,get,source
HandlerResult -> public MethodParameter getReturnTypeSource();1498780456;Return the {@link MethodParameter} from which_{@link #getReturnType() returnType} was created.;public MethodParameter getReturnTypeSource() {_		return (MethodParameter) this.returnType.getSource()__	};return,the,link,method,parameter,from,which,link,get,return,type,return,type,was,created;public,method,parameter,get,return,type,source,return,method,parameter,this,return,type,get,source
HandlerResult -> public MethodParameter getReturnTypeSource();1500390564;Return the {@link MethodParameter} from which {@link #getReturnType()_returnType} was created.;public MethodParameter getReturnTypeSource() {_		return (MethodParameter) this.returnType.getSource()__	};return,the,link,method,parameter,from,which,link,get,return,type,return,type,was,created;public,method,parameter,get,return,type,source,return,method,parameter,this,return,type,get,source
HandlerResult -> public HandlerResult(Object handler, Object returnValue, MethodParameter returnType, 			BindingContext context);1485986572;Create a new {@code HandlerResult}._@param handler the handler that handled the request_@param returnValue the return value from the handler possibly {@code null}_@param returnType the return value type_@param context the binding context used for request handling;public HandlerResult(Object handler, Object returnValue, MethodParameter returnType,_			BindingContext context) {__		Assert.notNull(handler, "'handler' is required")__		Assert.notNull(returnType, "'returnType' is required")__		this.handler = handler__		this.returnValue = returnValue__		this.returnType = ResolvableType.forMethodParameter(returnType)__		this.bindingContext = (context != null ? context : new BindingContext())__	};create,a,new,code,handler,result,param,handler,the,handler,that,handled,the,request,param,return,value,the,return,value,from,the,handler,possibly,code,null,param,return,type,the,return,value,type,param,context,the,binding,context,used,for,request,handling;public,handler,result,object,handler,object,return,value,method,parameter,return,type,binding,context,context,assert,not,null,handler,handler,is,required,assert,not,null,return,type,return,type,is,required,this,handler,handler,this,return,value,return,value,this,return,type,resolvable,type,for,method,parameter,return,type,this,binding,context,context,null,context,new,binding,context
HandlerResult -> public HandlerResult(Object handler, Object returnValue, MethodParameter returnType, 			BindingContext context);1495569915;Create a new {@code HandlerResult}._@param handler the handler that handled the request_@param returnValue the return value from the handler possibly {@code null}_@param returnType the return value type_@param context the binding context used for request handling;public HandlerResult(Object handler, Object returnValue, MethodParameter returnType,_			BindingContext context) {__		Assert.notNull(handler, "'handler' is required")__		Assert.notNull(returnType, "'returnType' is required")__		this.handler = handler__		this.returnValue = returnValue__		this.returnType = ResolvableType.forMethodParameter(returnType)__		this.bindingContext = (context != null ? context : new BindingContext())__	};create,a,new,code,handler,result,param,handler,the,handler,that,handled,the,request,param,return,value,the,return,value,from,the,handler,possibly,code,null,param,return,type,the,return,value,type,param,context,the,binding,context,used,for,request,handling;public,handler,result,object,handler,object,return,value,method,parameter,return,type,binding,context,context,assert,not,null,handler,handler,is,required,assert,not,null,return,type,return,type,is,required,this,handler,handler,this,return,value,return,value,this,return,type,resolvable,type,for,method,parameter,return,type,this,binding,context,context,null,context,new,binding,context
