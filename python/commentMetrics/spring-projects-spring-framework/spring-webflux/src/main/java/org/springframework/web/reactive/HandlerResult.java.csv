commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the handler that handled the request.  */ ;/**  * Return the handler that handled the request.  */ public Object getHandler() {     return this.handler. }
true;public;0;4;/**  * Return the value returned from the handler, if any.  */ ;/**  * Return the value returned from the handler, if any.  */ @Nullable public Object getReturnValue() {     return this.returnValue. }
true;public;0;3;/**  * Return the type of the value returned from the handler -- e.g. the return  * type declared on a controller method's signature. Also see  * {@link #getReturnTypeSource()} to obtain the underlying  * {@link MethodParameter} for the return type.  */ ;/**  * Return the type of the value returned from the handler -- e.g. the return  * type declared on a controller method's signature. Also see  * {@link #getReturnTypeSource()} to obtain the underlying  * {@link MethodParameter} for the return type.  */ public ResolvableType getReturnType() {     return this.returnType. }
true;public;0;3;/**  * Return the {@link MethodParameter} from which {@link #getReturnType()  * returnType} was created.  */ ;/**  * Return the {@link MethodParameter} from which {@link #getReturnType()  * returnType} was created.  */ public MethodParameter getReturnTypeSource() {     return (MethodParameter) this.returnType.getSource(). }
true;public;0;3;/**  * Return the BindingContext used for request handling.  */ ;/**  * Return the BindingContext used for request handling.  */ public BindingContext getBindingContext() {     return this.bindingContext. }
true;public;0;3;/**  * Return the model used for request handling. This is a shortcut for  * {@code getBindingContext().getModel()}.  */ ;/**  * Return the model used for request handling. This is a shortcut for  * {@code getBindingContext().getModel()}.  */ public Model getModel() {     return this.bindingContext.getModel(). }
true;public;1;4;/**  * Configure an exception handler that may be used to produce an alternative  * result when result handling fails. Especially for an async return value  * errors may occur after the invocation of the handler.  * @param function the error handler  * @return the current instance  */ ;/**  * Configure an exception handler that may be used to produce an alternative  * result when result handling fails. Especially for an async return value  * errors may occur after the invocation of the handler.  * @param function the error handler  * @return the current instance  */ public HandlerResult setExceptionHandler(Function<Throwable, Mono<HandlerResult>> function) {     this.exceptionHandler = function.     return this. }
true;public;0;3;/**  * Whether there is an exception handler.  */ ;/**  * Whether there is an exception handler.  */ public boolean hasExceptionHandler() {     return (this.exceptionHandler != null). }
true;public;1;3;/**  * Apply the exception handler and return the alternative result.  * @param failure the exception  * @return the new result or the same error if there is no exception handler  */ ;/**  * Apply the exception handler and return the alternative result.  * @param failure the exception  * @return the new result or the same error if there is no exception handler  */ public Mono<HandlerResult> applyExceptionHandler(Throwable failure) {     return (this.exceptionHandler != null ? this.exceptionHandler.apply(failure) : Mono.error(failure)). }
