commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Configure HTTP message writers to serialize the request body with.  * <p>By default this is set to {@link ServerCodecConfigurer}'s default writers.  */ ;/**  * Configure HTTP message writers to serialize the request body with.  * <p>By default this is set to {@link ServerCodecConfigurer}'s default writers.  */ public void setMessageWriters(List<HttpMessageWriter<?>> configurer) {     this.messageWriters = configurer. }
false;public;1;3;;public void setViewResolvers(List<ViewResolver> viewResolvers) {     this.viewResolvers = viewResolvers. }
true;public;1;3;/**  * Set the order for this result handler relative to others.  * <p>By default set to 0. It is generally safe to place it early in the  * order as it looks for a concrete return type.  */ ;/**  * Set the order for this result handler relative to others.  * <p>By default set to 0. It is generally safe to place it early in the  * order as it looks for a concrete return type.  */ public void setOrder(int order) {     this.order = order. }
false;public;0;4;;@Override public int getOrder() {     return this.order. }
false;public;0;6;;@Override public void afterPropertiesSet() throws Exception {     if (CollectionUtils.isEmpty(this.messageWriters)) {         throw new IllegalArgumentException("Property 'messageWriters' is required").     } }
false;public;1;4;;@Override public boolean supports(HandlerResult result) {     return (result.getReturnValue() instanceof ServerResponse). }
false;public;0;4;;@Override public List<HttpMessageWriter<?>> messageWriters() {     return messageWriters. }
false;public;0;4;;@Override public List<ViewResolver> viewResolvers() {     return viewResolvers. }
false;public;2;15;;@Override public Mono<Void> handleResult(ServerWebExchange exchange, HandlerResult result) {     ServerResponse response = (ServerResponse) result.getReturnValue().     Assert.state(response != null, "No ServerResponse").     return response.writeTo(exchange, new ServerResponse.Context() {          @Override         public List<HttpMessageWriter<?>> messageWriters() {             return messageWriters.         }          @Override         public List<ViewResolver> viewResolvers() {             return viewResolvers.         }     }). }
