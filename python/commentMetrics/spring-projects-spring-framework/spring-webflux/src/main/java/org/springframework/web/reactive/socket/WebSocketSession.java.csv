commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Return the id for the session.  */ ;/**  * Return the id for the session.  */ String getId().
true;;0;1;/**  * Return information from the handshake request.  */ ;/**  * Return information from the handshake request.  */ HandshakeInfo getHandshakeInfo().
true;;0;1;/**  * Return a {@code DataBuffer} Factory to create message payloads.  * @return the buffer factory for the session  */ ;/**  * Return a {@code DataBuffer} Factory to create message payloads.  * @return the buffer factory for the session  */ DataBufferFactory bufferFactory().
true;;0;1;/**  * Return the map with attributes associated with the WebSocket session.  * @return a Map with the session attributes (never {@code null})  * @since 5.1  */ ;/**  * Return the map with attributes associated with the WebSocket session.  * @return a Map with the session attributes (never {@code null})  * @since 5.1  */ Map<String, Object> getAttributes().
true;;0;1;/**  * Provides access to the stream of inbound messages.  * <p>This stream receives a completion or error signal when the connection  * is closed. In a typical {@link WebSocketHandler} implementation this  * stream is composed into the overall processing flow, so that when the  * connection is closed, handling will end.  *  * <p>See the class-level doc of {@link WebSocketHandler} and the reference  * for more details and examples of how to handle the session.  */ ;/**  * Provides access to the stream of inbound messages.  * <p>This stream receives a completion or error signal when the connection  * is closed. In a typical {@link WebSocketHandler} implementation this  * stream is composed into the overall processing flow, so that when the  * connection is closed, handling will end.  *  * <p>See the class-level doc of {@link WebSocketHandler} and the reference  * for more details and examples of how to handle the session.  */ Flux<WebSocketMessage> receive().
true;;1;1;/**  * Give a source of outgoing messages, write the messages and return a  * {@code Mono<Void>} that completes when the source completes and writing  * is done.  *  * <p>See the class-level doc of {@link WebSocketHandler} and the reference  * for more details and examples of how to handle the session.  */ ;/**  * Give a source of outgoing messages, write the messages and return a  * {@code Mono<Void>} that completes when the source completes and writing  * is done.  *  * <p>See the class-level doc of {@link WebSocketHandler} and the reference  * for more details and examples of how to handle the session.  */ Mono<Void> send(Publisher<WebSocketMessage> messages).
true;default;0;3;/**  * Close the WebSocket session with {@link CloseStatus#NORMAL}.  */ ;/**  * Close the WebSocket session with {@link CloseStatus#NORMAL}.  */ default Mono<Void> close() {     return close(CloseStatus.NORMAL). }
true;;1;1;/**  * Close the WebSocket session with the given status.  * @param status the close status  */ ;/**  * Close the WebSocket session with the given status.  * @param status the close status  */ Mono<Void> close(CloseStatus status).
true;;1;1;/**  * Factory method to create a text {@link WebSocketMessage} using the  * {@link #bufferFactory()} for the session.  */ ;// WebSocketMessage factory methods /**  * Factory method to create a text {@link WebSocketMessage} using the  * {@link #bufferFactory()} for the session.  */ WebSocketMessage textMessage(String payload).
true;;1;1;/**  * Factory method to create a binary WebSocketMessage using the  * {@link #bufferFactory()} for the session.  */ ;/**  * Factory method to create a binary WebSocketMessage using the  * {@link #bufferFactory()} for the session.  */ WebSocketMessage binaryMessage(Function<DataBufferFactory, DataBuffer> payloadFactory).
true;;1;1;/**  * Factory method to create a ping WebSocketMessage using the  * {@link #bufferFactory()} for the session.  */ ;/**  * Factory method to create a ping WebSocketMessage using the  * {@link #bufferFactory()} for the session.  */ WebSocketMessage pingMessage(Function<DataBufferFactory, DataBuffer> payloadFactory).
true;;1;1;/**  * Factory method to create a pong WebSocketMessage using the  * {@link #bufferFactory()} for the session.  */ ;/**  * Factory method to create a pong WebSocketMessage using the  * {@link #bufferFactory()} for the session.  */ WebSocketMessage pongMessage(Function<DataBufferFactory, DataBuffer> payloadFactory).
