# id;timestamp;commentText;codeText;commentWords;codeWords
RequestPredicate -> default Optional<ServerRequest> nest(ServerRequest request);1491557115;Transform the given request into a request used for a nested route. For instance,_a path-based predicate can return a {@code ServerRequest} with a the path remaining after a_match._<p>The default implementation returns an {@code Optional} wrapping the given path if_{@link #test(ServerRequest)} evaluates to {@code true}_ or {@link Optional#empty()} if it_evaluates to {@code false}._@param request the request to be nested_@return the nested request_@see RouterFunctions#nest(RequestPredicate, RouterFunction);default Optional<ServerRequest> nest(ServerRequest request) {_		return test(request) ? Optional.of(request) : Optional.empty()__	};transform,the,given,request,into,a,request,used,for,a,nested,route,for,instance,a,path,based,predicate,can,return,a,code,server,request,with,a,the,path,remaining,after,a,match,p,the,default,implementation,returns,an,code,optional,wrapping,the,given,path,if,link,test,server,request,evaluates,to,code,true,or,link,optional,empty,if,it,evaluates,to,code,false,param,request,the,request,to,be,nested,return,the,nested,request,see,router,functions,nest,request,predicate,router,function;default,optional,server,request,nest,server,request,request,return,test,request,optional,of,request,optional,empty
RequestPredicate -> default Optional<ServerRequest> nest(ServerRequest request);1495569922;Transform the given request into a request used for a nested route. For instance,_a path-based predicate can return a {@code ServerRequest} with a the path remaining_after a match._<p>The default implementation returns an {@code Optional} wrapping the given path if_{@link #test(ServerRequest)} evaluates to {@code true}_ or {@link Optional#empty()}_if it evaluates to {@code false}._@param request the request to be nested_@return the nested request_@see RouterFunctions#nest(RequestPredicate, RouterFunction);default Optional<ServerRequest> nest(ServerRequest request) {_		return (test(request) ? Optional.of(request) : Optional.empty())__	};transform,the,given,request,into,a,request,used,for,a,nested,route,for,instance,a,path,based,predicate,can,return,a,code,server,request,with,a,the,path,remaining,after,a,match,p,the,default,implementation,returns,an,code,optional,wrapping,the,given,path,if,link,test,server,request,evaluates,to,code,true,or,link,optional,empty,if,it,evaluates,to,code,false,param,request,the,request,to,be,nested,return,the,nested,request,see,router,functions,nest,request,predicate,router,function;default,optional,server,request,nest,server,request,request,return,test,request,optional,of,request,optional,empty
RequestPredicate -> default Optional<ServerRequest> nest(ServerRequest request);1520542545;Transform the given request into a request used for a nested route. For instance,_a path-based predicate can return a {@code ServerRequest} with a the path remaining_after a match._<p>The default implementation returns an {@code Optional} wrapping the given path if_{@link #test(ServerRequest)} evaluates to {@code true}_ or {@link Optional#empty()}_if it evaluates to {@code false}._@param request the request to be nested_@return the nested request_@see RouterFunctions#nest(RequestPredicate, RouterFunction);default Optional<ServerRequest> nest(ServerRequest request) {_		return (test(request) ? Optional.of(request) : Optional.empty())__	};transform,the,given,request,into,a,request,used,for,a,nested,route,for,instance,a,path,based,predicate,can,return,a,code,server,request,with,a,the,path,remaining,after,a,match,p,the,default,implementation,returns,an,code,optional,wrapping,the,given,path,if,link,test,server,request,evaluates,to,code,true,or,link,optional,empty,if,it,evaluates,to,code,false,param,request,the,request,to,be,nested,return,the,nested,request,see,router,functions,nest,request,predicate,router,function;default,optional,server,request,nest,server,request,request,return,test,request,optional,of,request,optional,empty
RequestPredicate -> default Optional<ServerRequest> nest(ServerRequest request);1524865018;Transform the given request into a request used for a nested route. For instance,_a path-based predicate can return a {@code ServerRequest} with a the path remaining_after a match._<p>The default implementation returns an {@code Optional} wrapping the given path if_{@link #test(ServerRequest)} evaluates to {@code true}_ or {@link Optional#empty()}_if it evaluates to {@code false}._@param request the request to be nested_@return the nested request_@see RouterFunctions#nest(RequestPredicate, RouterFunction);default Optional<ServerRequest> nest(ServerRequest request) {_		return (test(request) ? Optional.of(request) : Optional.empty())__	};transform,the,given,request,into,a,request,used,for,a,nested,route,for,instance,a,path,based,predicate,can,return,a,code,server,request,with,a,the,path,remaining,after,a,match,p,the,default,implementation,returns,an,code,optional,wrapping,the,given,path,if,link,test,server,request,evaluates,to,code,true,or,link,optional,empty,if,it,evaluates,to,code,false,param,request,the,request,to,be,nested,return,the,nested,request,see,router,functions,nest,request,predicate,router,function;default,optional,server,request,nest,server,request,request,return,test,request,optional,of,request,optional,empty
RequestPredicate -> default Optional<ServerRequest> nest(ServerRequest request);1538658936;Transform the given request into a request used for a nested route. For instance,_a path-based predicate can return a {@code ServerRequest} with a the path remaining_after a match._<p>The default implementation returns an {@code Optional} wrapping the given path if_{@link #test(ServerRequest)} evaluates to {@code true}_ or {@link Optional#empty()}_if it evaluates to {@code false}._@param request the request to be nested_@return the nested request_@see RouterFunctions#nest(RequestPredicate, RouterFunction);default Optional<ServerRequest> nest(ServerRequest request) {_		return (test(request) ? Optional.of(request) : Optional.empty())__	};transform,the,given,request,into,a,request,used,for,a,nested,route,for,instance,a,path,based,predicate,can,return,a,code,server,request,with,a,the,path,remaining,after,a,match,p,the,default,implementation,returns,an,code,optional,wrapping,the,given,path,if,link,test,server,request,evaluates,to,code,true,or,link,optional,empty,if,it,evaluates,to,code,false,param,request,the,request,to,be,nested,return,the,nested,request,see,router,functions,nest,request,predicate,router,function;default,optional,server,request,nest,server,request,request,return,test,request,optional,of,request,optional,empty
RequestPredicate -> default Optional<ServerRequest> nest(ServerRequest request);1542719117;Transform the given request into a request used for a nested route. For instance,_a path-based predicate can return a {@code ServerRequest} with a the path remaining_after a match._<p>The default implementation returns an {@code Optional} wrapping the given path if_{@link #test(ServerRequest)} evaluates to {@code true}_ or {@link Optional#empty()}_if it evaluates to {@code false}._@param request the request to be nested_@return the nested request_@see RouterFunctions#nest(RequestPredicate, RouterFunction);default Optional<ServerRequest> nest(ServerRequest request) {_		return (test(request) ? Optional.of(request) : Optional.empty())__	};transform,the,given,request,into,a,request,used,for,a,nested,route,for,instance,a,path,based,predicate,can,return,a,code,server,request,with,a,the,path,remaining,after,a,match,p,the,default,implementation,returns,an,code,optional,wrapping,the,given,path,if,link,test,server,request,evaluates,to,code,true,or,link,optional,empty,if,it,evaluates,to,code,false,param,request,the,request,to,be,nested,return,the,nested,request,see,router,functions,nest,request,predicate,router,function;default,optional,server,request,nest,server,request,request,return,test,request,optional,of,request,optional,empty
RequestPredicate -> default RequestPredicate negate();1485986572;Return a predicate that represents the logical negation of this predicate.__@return a predicate that represents the logical negation of this predicate;default RequestPredicate negate() {_		return (t) -> !test(t)__	};return,a,predicate,that,represents,the,logical,negation,of,this,predicate,return,a,predicate,that,represents,the,logical,negation,of,this,predicate;default,request,predicate,negate,return,t,test,t
RequestPredicate -> default RequestPredicate negate();1487250745;Return a predicate that represents the logical negation of this predicate.__@return a predicate that represents the logical negation of this predicate;default RequestPredicate negate() {_		return (t) -> !test(t)__	};return,a,predicate,that,represents,the,logical,negation,of,this,predicate,return,a,predicate,that,represents,the,logical,negation,of,this,predicate;default,request,predicate,negate,return,t,test,t
RequestPredicate -> default RequestPredicate negate();1487584763;Return a predicate that represents the logical negation of this predicate.__@return a predicate that represents the logical negation of this predicate;default RequestPredicate negate() {_		return (t) -> !test(t)__	};return,a,predicate,that,represents,the,logical,negation,of,this,predicate,return,a,predicate,that,represents,the,logical,negation,of,this,predicate;default,request,predicate,negate,return,t,test,t
RequestPredicate -> default RequestPredicate negate();1487687241;Return a predicate that represents the logical negation of this predicate._@return a predicate that represents the logical negation of this predicate;default RequestPredicate negate() {_		return (t) -> !test(t)__	};return,a,predicate,that,represents,the,logical,negation,of,this,predicate,return,a,predicate,that,represents,the,logical,negation,of,this,predicate;default,request,predicate,negate,return,t,test,t
RequestPredicate -> default RequestPredicate negate();1491557115;Return a predicate that represents the logical negation of this predicate._@return a predicate that represents the logical negation of this predicate;default RequestPredicate negate() {_		return (t) -> !test(t)__	};return,a,predicate,that,represents,the,logical,negation,of,this,predicate,return,a,predicate,that,represents,the,logical,negation,of,this,predicate;default,request,predicate,negate,return,t,test,t
RequestPredicate -> default RequestPredicate negate();1495569922;Return a predicate that represents the logical negation of this predicate._@return a predicate that represents the logical negation of this predicate;default RequestPredicate negate() {_		return (t) -> !test(t)__	};return,a,predicate,that,represents,the,logical,negation,of,this,predicate,return,a,predicate,that,represents,the,logical,negation,of,this,predicate;default,request,predicate,negate,return,t,test,t
RequestPredicate -> default RequestPredicate negate();1520542545;Return a predicate that represents the logical negation of this predicate._@return a predicate that represents the logical negation of this predicate;default RequestPredicate negate() {_		return t -> !test(t)__	};return,a,predicate,that,represents,the,logical,negation,of,this,predicate,return,a,predicate,that,represents,the,logical,negation,of,this,predicate;default,request,predicate,negate,return,t,test,t
RequestPredicate -> default RequestPredicate negate();1524865018;Return a predicate that represents the logical negation of this predicate._@return a predicate that represents the logical negation of this predicate;default RequestPredicate negate() {_		return t -> !test(t)__	};return,a,predicate,that,represents,the,logical,negation,of,this,predicate,return,a,predicate,that,represents,the,logical,negation,of,this,predicate;default,request,predicate,negate,return,t,test,t
RequestPredicate -> default RequestPredicate negate();1538658936;Return a predicate that represents the logical negation of this predicate._@return a predicate that represents the logical negation of this predicate;default RequestPredicate negate() {_		return new RequestPredicates.NegateRequestPredicate(this)__	};return,a,predicate,that,represents,the,logical,negation,of,this,predicate,return,a,predicate,that,represents,the,logical,negation,of,this,predicate;default,request,predicate,negate,return,new,request,predicates,negate,request,predicate,this
RequestPredicate -> default RequestPredicate negate();1542719117;Return a predicate that represents the logical negation of this predicate._@return a predicate that represents the logical negation of this predicate;default RequestPredicate negate() {_		return new RequestPredicates.NegateRequestPredicate(this)__	};return,a,predicate,that,represents,the,logical,negation,of,this,predicate,return,a,predicate,that,represents,the,logical,negation,of,this,predicate;default,request,predicate,negate,return,new,request,predicates,negate,request,predicate,this
RequestPredicate -> default RequestPredicate and(RequestPredicate other);1485986572;Returns a composed request predicate that tests against both this predicate AND the {@code other} predicate._When evaluating the composed predicate, if this predicate is {@code false}, then the {@code other}_predicate is not evaluated.__@param other a predicate that will be logically-ANDed with this predicate_@return a predicate composed of this predicate AND the {@code other} predicate;default RequestPredicate and(RequestPredicate other) {_		Assert.notNull(other, "'other' must not be null")__		return new RequestPredicate() {_			@Override_			public boolean test(ServerRequest t) {_				return RequestPredicate.this.test(t) && other.test(t)__			}__			@Override_			public ServerRequest subRequest(ServerRequest request) {_				return other.subRequest(RequestPredicate.this.subRequest(request))__			}_		}__	};returns,a,composed,request,predicate,that,tests,against,both,this,predicate,and,the,code,other,predicate,when,evaluating,the,composed,predicate,if,this,predicate,is,code,false,then,the,code,other,predicate,is,not,evaluated,param,other,a,predicate,that,will,be,logically,anded,with,this,predicate,return,a,predicate,composed,of,this,predicate,and,the,code,other,predicate;default,request,predicate,and,request,predicate,other,assert,not,null,other,other,must,not,be,null,return,new,request,predicate,override,public,boolean,test,server,request,t,return,request,predicate,this,test,t,other,test,t,override,public,server,request,sub,request,server,request,request,return,other,sub,request,request,predicate,this,sub,request,request
RequestPredicate -> default RequestPredicate and(RequestPredicate other);1487250745;Returns a composed request predicate that tests against both this predicate AND the {@code other} predicate._When evaluating the composed predicate, if this predicate is {@code false}, then the {@code other}_predicate is not evaluated.__@param other a predicate that will be logically-ANDed with this predicate_@return a predicate composed of this predicate AND the {@code other} predicate;default RequestPredicate and(RequestPredicate other) {_		Assert.notNull(other, "'other' must not be null")__		return new RequestPredicate() {_			@Override_			public boolean test(ServerRequest t) {_				return RequestPredicate.this.test(t) && other.test(t)__			}__			@Override_			public ServerRequest subRequest(ServerRequest request) {_				return other.subRequest(RequestPredicate.this.subRequest(request))__			}_		}__	};returns,a,composed,request,predicate,that,tests,against,both,this,predicate,and,the,code,other,predicate,when,evaluating,the,composed,predicate,if,this,predicate,is,code,false,then,the,code,other,predicate,is,not,evaluated,param,other,a,predicate,that,will,be,logically,anded,with,this,predicate,return,a,predicate,composed,of,this,predicate,and,the,code,other,predicate;default,request,predicate,and,request,predicate,other,assert,not,null,other,other,must,not,be,null,return,new,request,predicate,override,public,boolean,test,server,request,t,return,request,predicate,this,test,t,other,test,t,override,public,server,request,sub,request,server,request,request,return,other,sub,request,request,predicate,this,sub,request,request
RequestPredicate -> default RequestPredicate and(RequestPredicate other);1487584763;Returns a composed request predicate that tests against both this predicate AND the {@code other} predicate._When evaluating the composed predicate, if this predicate is {@code false}, then the {@code other}_predicate is not evaluated.__@param other a predicate that will be logically-ANDed with this predicate_@return a predicate composed of this predicate AND the {@code other} predicate;default RequestPredicate and(RequestPredicate other) {_		Assert.notNull(other, "'other' must not be null")__		return new RequestPredicate() {_			@Override_			public boolean test(ServerRequest t) {_				return RequestPredicate.this.test(t) && other.test(t)__			}__			@Override_			public ServerRequest nestRequest(ServerRequest request) {_				return other.nestRequest(RequestPredicate.this.nestRequest(request))__			}__			@Override_			public String toString() {_				return String.format("(%s && %s)", RequestPredicate.this, other)__			}_		}__	};returns,a,composed,request,predicate,that,tests,against,both,this,predicate,and,the,code,other,predicate,when,evaluating,the,composed,predicate,if,this,predicate,is,code,false,then,the,code,other,predicate,is,not,evaluated,param,other,a,predicate,that,will,be,logically,anded,with,this,predicate,return,a,predicate,composed,of,this,predicate,and,the,code,other,predicate;default,request,predicate,and,request,predicate,other,assert,not,null,other,other,must,not,be,null,return,new,request,predicate,override,public,boolean,test,server,request,t,return,request,predicate,this,test,t,other,test,t,override,public,server,request,nest,request,server,request,request,return,other,nest,request,request,predicate,this,nest,request,request,override,public,string,to,string,return,string,format,s,s,request,predicate,this,other
RequestPredicate -> default RequestPredicate and(RequestPredicate other);1487687241;Return a composed request predicate that tests against both this predicate AND_the {@code other} predicate. When evaluating the composed predicate, if this_predicate is {@code false}, then the {@code other} predicate is not evaluated._@param other a predicate that will be logically-ANDed with this predicate_@return a predicate composed of this predicate AND the {@code other} predicate;default RequestPredicate and(RequestPredicate other) {_		Assert.notNull(other, "'other' must not be null")__		return new RequestPredicate() {_			@Override_			public boolean test(ServerRequest t) {_				return RequestPredicate.this.test(t) && other.test(t)__			}_			@Override_			public ServerRequest nestRequest(ServerRequest request) {_				return other.nestRequest(RequestPredicate.this.nestRequest(request))__			}_			@Override_			public String toString() {_				return String.format("(%s && %s)", RequestPredicate.this, other)__			}_		}__	};return,a,composed,request,predicate,that,tests,against,both,this,predicate,and,the,code,other,predicate,when,evaluating,the,composed,predicate,if,this,predicate,is,code,false,then,the,code,other,predicate,is,not,evaluated,param,other,a,predicate,that,will,be,logically,anded,with,this,predicate,return,a,predicate,composed,of,this,predicate,and,the,code,other,predicate;default,request,predicate,and,request,predicate,other,assert,not,null,other,other,must,not,be,null,return,new,request,predicate,override,public,boolean,test,server,request,t,return,request,predicate,this,test,t,other,test,t,override,public,server,request,nest,request,server,request,request,return,other,nest,request,request,predicate,this,nest,request,request,override,public,string,to,string,return,string,format,s,s,request,predicate,this,other
RequestPredicate -> default RequestPredicate and(RequestPredicate other);1491557115;Return a composed request predicate that tests against both this predicate AND_the {@code other} predicate. When evaluating the composed predicate, if this_predicate is {@code false}, then the {@code other} predicate is not evaluated._@param other a predicate that will be logically-ANDed with this predicate_@return a predicate composed of this predicate AND the {@code other} predicate;default RequestPredicate and(RequestPredicate other) {_		Assert.notNull(other, "'other' must not be null")__		return new RequestPredicates.AndRequestPredicate(this, other)__	};return,a,composed,request,predicate,that,tests,against,both,this,predicate,and,the,code,other,predicate,when,evaluating,the,composed,predicate,if,this,predicate,is,code,false,then,the,code,other,predicate,is,not,evaluated,param,other,a,predicate,that,will,be,logically,anded,with,this,predicate,return,a,predicate,composed,of,this,predicate,and,the,code,other,predicate;default,request,predicate,and,request,predicate,other,assert,not,null,other,other,must,not,be,null,return,new,request,predicates,and,request,predicate,this,other
RequestPredicate -> default RequestPredicate and(RequestPredicate other);1495569922;Return a composed request predicate that tests against both this predicate AND_the {@code other} predicate. When evaluating the composed predicate, if this_predicate is {@code false}, then the {@code other} predicate is not evaluated._@param other a predicate that will be logically-ANDed with this predicate_@return a predicate composed of this predicate AND the {@code other} predicate;default RequestPredicate and(RequestPredicate other) {_		Assert.notNull(other, "'other' must not be null")__		return new RequestPredicates.AndRequestPredicate(this, other)__	};return,a,composed,request,predicate,that,tests,against,both,this,predicate,and,the,code,other,predicate,when,evaluating,the,composed,predicate,if,this,predicate,is,code,false,then,the,code,other,predicate,is,not,evaluated,param,other,a,predicate,that,will,be,logically,anded,with,this,predicate,return,a,predicate,composed,of,this,predicate,and,the,code,other,predicate;default,request,predicate,and,request,predicate,other,assert,not,null,other,other,must,not,be,null,return,new,request,predicates,and,request,predicate,this,other
RequestPredicate -> default RequestPredicate and(RequestPredicate other);1520542545;Return a composed request predicate that tests against both this predicate AND_the {@code other} predicate. When evaluating the composed predicate, if this_predicate is {@code false}, then the {@code other} predicate is not evaluated._@param other a predicate that will be logically-ANDed with this predicate_@return a predicate composed of this predicate AND the {@code other} predicate;default RequestPredicate and(RequestPredicate other) {_		Assert.notNull(other, "'other' must not be null")__		return new RequestPredicates.AndRequestPredicate(this, other)__	};return,a,composed,request,predicate,that,tests,against,both,this,predicate,and,the,code,other,predicate,when,evaluating,the,composed,predicate,if,this,predicate,is,code,false,then,the,code,other,predicate,is,not,evaluated,param,other,a,predicate,that,will,be,logically,anded,with,this,predicate,return,a,predicate,composed,of,this,predicate,and,the,code,other,predicate;default,request,predicate,and,request,predicate,other,assert,not,null,other,other,must,not,be,null,return,new,request,predicates,and,request,predicate,this,other
RequestPredicate -> default RequestPredicate and(RequestPredicate other);1524865018;Return a composed request predicate that tests against both this predicate AND_the {@code other} predicate. When evaluating the composed predicate, if this_predicate is {@code false}, then the {@code other} predicate is not evaluated._@param other a predicate that will be logically-ANDed with this predicate_@return a predicate composed of this predicate AND the {@code other} predicate;default RequestPredicate and(RequestPredicate other) {_		return new RequestPredicates.AndRequestPredicate(this, other)__	};return,a,composed,request,predicate,that,tests,against,both,this,predicate,and,the,code,other,predicate,when,evaluating,the,composed,predicate,if,this,predicate,is,code,false,then,the,code,other,predicate,is,not,evaluated,param,other,a,predicate,that,will,be,logically,anded,with,this,predicate,return,a,predicate,composed,of,this,predicate,and,the,code,other,predicate;default,request,predicate,and,request,predicate,other,return,new,request,predicates,and,request,predicate,this,other
RequestPredicate -> default RequestPredicate and(RequestPredicate other);1538658936;Return a composed request predicate that tests against both this predicate AND_the {@code other} predicate. When evaluating the composed predicate, if this_predicate is {@code false}, then the {@code other} predicate is not evaluated._@param other a predicate that will be logically-ANDed with this predicate_@return a predicate composed of this predicate AND the {@code other} predicate;default RequestPredicate and(RequestPredicate other) {_		return new RequestPredicates.AndRequestPredicate(this, other)__	};return,a,composed,request,predicate,that,tests,against,both,this,predicate,and,the,code,other,predicate,when,evaluating,the,composed,predicate,if,this,predicate,is,code,false,then,the,code,other,predicate,is,not,evaluated,param,other,a,predicate,that,will,be,logically,anded,with,this,predicate,return,a,predicate,composed,of,this,predicate,and,the,code,other,predicate;default,request,predicate,and,request,predicate,other,return,new,request,predicates,and,request,predicate,this,other
RequestPredicate -> default RequestPredicate and(RequestPredicate other);1542719117;Return a composed request predicate that tests against both this predicate AND_the {@code other} predicate. When evaluating the composed predicate, if this_predicate is {@code false}, then the {@code other} predicate is not evaluated._@param other a predicate that will be logically-ANDed with this predicate_@return a predicate composed of this predicate AND the {@code other} predicate;default RequestPredicate and(RequestPredicate other) {_		return new RequestPredicates.AndRequestPredicate(this, other)__	};return,a,composed,request,predicate,that,tests,against,both,this,predicate,and,the,code,other,predicate,when,evaluating,the,composed,predicate,if,this,predicate,is,code,false,then,the,code,other,predicate,is,not,evaluated,param,other,a,predicate,that,will,be,logically,anded,with,this,predicate,return,a,predicate,composed,of,this,predicate,and,the,code,other,predicate;default,request,predicate,and,request,predicate,other,return,new,request,predicates,and,request,predicate,this,other
RequestPredicate -> default RequestPredicate or(RequestPredicate other);1485986572;Returns a composed request predicate that tests against both this predicate OR the {@code other} predicate._When evaluating the composed predicate, if this predicate is {@code true}, then the {@code other} predicate_is not evaluated.__@param other a predicate that will be logically-ORed with this predicate_@return a predicate composed of this predicate OR the {@code other} predicate;default RequestPredicate or(RequestPredicate other) {_		Assert.notNull(other, "'other' must not be null")__		return (t) -> test(t) || other.test(t)__	};returns,a,composed,request,predicate,that,tests,against,both,this,predicate,or,the,code,other,predicate,when,evaluating,the,composed,predicate,if,this,predicate,is,code,true,then,the,code,other,predicate,is,not,evaluated,param,other,a,predicate,that,will,be,logically,ored,with,this,predicate,return,a,predicate,composed,of,this,predicate,or,the,code,other,predicate;default,request,predicate,or,request,predicate,other,assert,not,null,other,other,must,not,be,null,return,t,test,t,other,test,t
RequestPredicate -> default RequestPredicate or(RequestPredicate other);1487250745;Returns a composed request predicate that tests against both this predicate OR the {@code other} predicate._When evaluating the composed predicate, if this predicate is {@code true}, then the {@code other} predicate_is not evaluated.__@param other a predicate that will be logically-ORed with this predicate_@return a predicate composed of this predicate OR the {@code other} predicate;default RequestPredicate or(RequestPredicate other) {_		Assert.notNull(other, "'other' must not be null")__		return (t) -> test(t) || other.test(t)__	};returns,a,composed,request,predicate,that,tests,against,both,this,predicate,or,the,code,other,predicate,when,evaluating,the,composed,predicate,if,this,predicate,is,code,true,then,the,code,other,predicate,is,not,evaluated,param,other,a,predicate,that,will,be,logically,ored,with,this,predicate,return,a,predicate,composed,of,this,predicate,or,the,code,other,predicate;default,request,predicate,or,request,predicate,other,assert,not,null,other,other,must,not,be,null,return,t,test,t,other,test,t
RequestPredicate -> default RequestPredicate or(RequestPredicate other);1487584763;Returns a composed request predicate that tests against both this predicate OR the {@code other} predicate._When evaluating the composed predicate, if this predicate is {@code true}, then the {@code other} predicate_is not evaluated._@param other a predicate that will be logically-ORed with this predicate_@return a predicate composed of this predicate OR the {@code other} predicate;default RequestPredicate or(RequestPredicate other) {_		Assert.notNull(other, "'other' must not be null")__		return new RequestPredicate() {_			@Override_			public boolean test(ServerRequest t) {_				return RequestPredicate.this.test(t) || other.test(t)__			}__			@Override_			public ServerRequest nestRequest(ServerRequest request) {_				if (RequestPredicate.this.test(request)) {_					return RequestPredicate.this.nestRequest(request)__				}_				else if (other.test(request)) {_					return other.nestRequest(request)__				}_				else {_					throw new IllegalStateException("Neither " + RequestPredicate.this.toString() +_							" nor " + other + "matches")__				}_			}__			@Override_			public String toString() {_				return String.format("(%s || %s)", RequestPredicate.this, other)__			}_		}__	};returns,a,composed,request,predicate,that,tests,against,both,this,predicate,or,the,code,other,predicate,when,evaluating,the,composed,predicate,if,this,predicate,is,code,true,then,the,code,other,predicate,is,not,evaluated,param,other,a,predicate,that,will,be,logically,ored,with,this,predicate,return,a,predicate,composed,of,this,predicate,or,the,code,other,predicate;default,request,predicate,or,request,predicate,other,assert,not,null,other,other,must,not,be,null,return,new,request,predicate,override,public,boolean,test,server,request,t,return,request,predicate,this,test,t,other,test,t,override,public,server,request,nest,request,server,request,request,if,request,predicate,this,test,request,return,request,predicate,this,nest,request,request,else,if,other,test,request,return,other,nest,request,request,else,throw,new,illegal,state,exception,neither,request,predicate,this,to,string,nor,other,matches,override,public,string,to,string,return,string,format,s,s,request,predicate,this,other
RequestPredicate -> default RequestPredicate or(RequestPredicate other);1487687241;Return a composed request predicate that tests against both this predicate OR_the {@code other} predicate. When evaluating the composed predicate, if this_predicate is {@code true}, then the {@code other} predicate is not evaluated._@param other a predicate that will be logically-ORed with this predicate_@return a predicate composed of this predicate OR the {@code other} predicate;default RequestPredicate or(RequestPredicate other) {_		Assert.notNull(other, "'other' must not be null")__		return new RequestPredicate() {_			@Override_			public boolean test(ServerRequest t) {_				return RequestPredicate.this.test(t) || other.test(t)__			}_			@Override_			public ServerRequest nestRequest(ServerRequest request) {_				if (RequestPredicate.this.test(request)) {_					return RequestPredicate.this.nestRequest(request)__				}_				else if (other.test(request)) {_					return other.nestRequest(request)__				}_				else {_					throw new IllegalStateException("Neither " + RequestPredicate.this.toString() +_							" nor " + other + "matches")__				}_			}_			@Override_			public String toString() {_				return String.format("(%s || %s)", RequestPredicate.this, other)__			}_		}__	};return,a,composed,request,predicate,that,tests,against,both,this,predicate,or,the,code,other,predicate,when,evaluating,the,composed,predicate,if,this,predicate,is,code,true,then,the,code,other,predicate,is,not,evaluated,param,other,a,predicate,that,will,be,logically,ored,with,this,predicate,return,a,predicate,composed,of,this,predicate,or,the,code,other,predicate;default,request,predicate,or,request,predicate,other,assert,not,null,other,other,must,not,be,null,return,new,request,predicate,override,public,boolean,test,server,request,t,return,request,predicate,this,test,t,other,test,t,override,public,server,request,nest,request,server,request,request,if,request,predicate,this,test,request,return,request,predicate,this,nest,request,request,else,if,other,test,request,return,other,nest,request,request,else,throw,new,illegal,state,exception,neither,request,predicate,this,to,string,nor,other,matches,override,public,string,to,string,return,string,format,s,s,request,predicate,this,other
RequestPredicate -> default RequestPredicate or(RequestPredicate other);1491557115;Return a composed request predicate that tests against both this predicate OR_the {@code other} predicate. When evaluating the composed predicate, if this_predicate is {@code true}, then the {@code other} predicate is not evaluated._@param other a predicate that will be logically-ORed with this predicate_@return a predicate composed of this predicate OR the {@code other} predicate;default RequestPredicate or(RequestPredicate other) {_		Assert.notNull(other, "'other' must not be null")__		return new RequestPredicates.OrRequestPredicate(this, other)__	};return,a,composed,request,predicate,that,tests,against,both,this,predicate,or,the,code,other,predicate,when,evaluating,the,composed,predicate,if,this,predicate,is,code,true,then,the,code,other,predicate,is,not,evaluated,param,other,a,predicate,that,will,be,logically,ored,with,this,predicate,return,a,predicate,composed,of,this,predicate,or,the,code,other,predicate;default,request,predicate,or,request,predicate,other,assert,not,null,other,other,must,not,be,null,return,new,request,predicates,or,request,predicate,this,other
RequestPredicate -> default RequestPredicate or(RequestPredicate other);1495569922;Return a composed request predicate that tests against both this predicate OR_the {@code other} predicate. When evaluating the composed predicate, if this_predicate is {@code true}, then the {@code other} predicate is not evaluated._@param other a predicate that will be logically-ORed with this predicate_@return a predicate composed of this predicate OR the {@code other} predicate;default RequestPredicate or(RequestPredicate other) {_		Assert.notNull(other, "'other' must not be null")__		return new RequestPredicates.OrRequestPredicate(this, other)__	};return,a,composed,request,predicate,that,tests,against,both,this,predicate,or,the,code,other,predicate,when,evaluating,the,composed,predicate,if,this,predicate,is,code,true,then,the,code,other,predicate,is,not,evaluated,param,other,a,predicate,that,will,be,logically,ored,with,this,predicate,return,a,predicate,composed,of,this,predicate,or,the,code,other,predicate;default,request,predicate,or,request,predicate,other,assert,not,null,other,other,must,not,be,null,return,new,request,predicates,or,request,predicate,this,other
RequestPredicate -> default RequestPredicate or(RequestPredicate other);1520542545;Return a composed request predicate that tests against both this predicate OR_the {@code other} predicate. When evaluating the composed predicate, if this_predicate is {@code true}, then the {@code other} predicate is not evaluated._@param other a predicate that will be logically-ORed with this predicate_@return a predicate composed of this predicate OR the {@code other} predicate;default RequestPredicate or(RequestPredicate other) {_		Assert.notNull(other, "'other' must not be null")__		return new RequestPredicates.OrRequestPredicate(this, other)__	};return,a,composed,request,predicate,that,tests,against,both,this,predicate,or,the,code,other,predicate,when,evaluating,the,composed,predicate,if,this,predicate,is,code,true,then,the,code,other,predicate,is,not,evaluated,param,other,a,predicate,that,will,be,logically,ored,with,this,predicate,return,a,predicate,composed,of,this,predicate,or,the,code,other,predicate;default,request,predicate,or,request,predicate,other,assert,not,null,other,other,must,not,be,null,return,new,request,predicates,or,request,predicate,this,other
RequestPredicate -> default RequestPredicate or(RequestPredicate other);1524865018;Return a composed request predicate that tests against both this predicate OR_the {@code other} predicate. When evaluating the composed predicate, if this_predicate is {@code true}, then the {@code other} predicate is not evaluated._@param other a predicate that will be logically-ORed with this predicate_@return a predicate composed of this predicate OR the {@code other} predicate;default RequestPredicate or(RequestPredicate other) {_		return new RequestPredicates.OrRequestPredicate(this, other)__	};return,a,composed,request,predicate,that,tests,against,both,this,predicate,or,the,code,other,predicate,when,evaluating,the,composed,predicate,if,this,predicate,is,code,true,then,the,code,other,predicate,is,not,evaluated,param,other,a,predicate,that,will,be,logically,ored,with,this,predicate,return,a,predicate,composed,of,this,predicate,or,the,code,other,predicate;default,request,predicate,or,request,predicate,other,return,new,request,predicates,or,request,predicate,this,other
RequestPredicate -> default RequestPredicate or(RequestPredicate other);1538658936;Return a composed request predicate that tests against both this predicate OR_the {@code other} predicate. When evaluating the composed predicate, if this_predicate is {@code true}, then the {@code other} predicate is not evaluated._@param other a predicate that will be logically-ORed with this predicate_@return a predicate composed of this predicate OR the {@code other} predicate;default RequestPredicate or(RequestPredicate other) {_		return new RequestPredicates.OrRequestPredicate(this, other)__	};return,a,composed,request,predicate,that,tests,against,both,this,predicate,or,the,code,other,predicate,when,evaluating,the,composed,predicate,if,this,predicate,is,code,true,then,the,code,other,predicate,is,not,evaluated,param,other,a,predicate,that,will,be,logically,ored,with,this,predicate,return,a,predicate,composed,of,this,predicate,or,the,code,other,predicate;default,request,predicate,or,request,predicate,other,return,new,request,predicates,or,request,predicate,this,other
RequestPredicate -> default RequestPredicate or(RequestPredicate other);1542719117;Return a composed request predicate that tests against both this predicate OR_the {@code other} predicate. When evaluating the composed predicate, if this_predicate is {@code true}, then the {@code other} predicate is not evaluated._@param other a predicate that will be logically-ORed with this predicate_@return a predicate composed of this predicate OR the {@code other} predicate;default RequestPredicate or(RequestPredicate other) {_		return new RequestPredicates.OrRequestPredicate(this, other)__	};return,a,composed,request,predicate,that,tests,against,both,this,predicate,or,the,code,other,predicate,when,evaluating,the,composed,predicate,if,this,predicate,is,code,true,then,the,code,other,predicate,is,not,evaluated,param,other,a,predicate,that,will,be,logically,ored,with,this,predicate,return,a,predicate,composed,of,this,predicate,or,the,code,other,predicate;default,request,predicate,or,request,predicate,other,return,new,request,predicates,or,request,predicate,this,other
RequestPredicate -> boolean test(ServerRequest request)_;1485986572;Evaluates this predicate on the given request.___@param request the request to match against_@return {@code true} if the request matches the predicate_ {@code false} otherwise;boolean test(ServerRequest request)_;evaluates,this,predicate,on,the,given,request,param,request,the,request,to,match,against,return,code,true,if,the,request,matches,the,predicate,code,false,otherwise;boolean,test,server,request,request
RequestPredicate -> boolean test(ServerRequest request)_;1487250745;Evaluates this predicate on the given request.___@param request the request to match against_@return {@code true} if the request matches the predicate_ {@code false} otherwise;boolean test(ServerRequest request)_;evaluates,this,predicate,on,the,given,request,param,request,the,request,to,match,against,return,code,true,if,the,request,matches,the,predicate,code,false,otherwise;boolean,test,server,request,request
RequestPredicate -> boolean test(ServerRequest request)_;1487584763;Evaluates this predicate on the given request.___@param request the request to match against_@return {@code true} if the request matches the predicate_ {@code false} otherwise;boolean test(ServerRequest request)_;evaluates,this,predicate,on,the,given,request,param,request,the,request,to,match,against,return,code,true,if,the,request,matches,the,predicate,code,false,otherwise;boolean,test,server,request,request
RequestPredicate -> boolean test(ServerRequest request)_;1487687241;Evaluate this predicate on the given request._@param request the request to match against_@return {@code true} if the request matches the predicate_ {@code false} otherwise;boolean test(ServerRequest request)_;evaluate,this,predicate,on,the,given,request,param,request,the,request,to,match,against,return,code,true,if,the,request,matches,the,predicate,code,false,otherwise;boolean,test,server,request,request
RequestPredicate -> boolean test(ServerRequest request)_;1491557115;Evaluate this predicate on the given request._@param request the request to match against_@return {@code true} if the request matches the predicate_ {@code false} otherwise;boolean test(ServerRequest request)_;evaluate,this,predicate,on,the,given,request,param,request,the,request,to,match,against,return,code,true,if,the,request,matches,the,predicate,code,false,otherwise;boolean,test,server,request,request
RequestPredicate -> boolean test(ServerRequest request)_;1495569922;Evaluate this predicate on the given request._@param request the request to match against_@return {@code true} if the request matches the predicate_ {@code false} otherwise;boolean test(ServerRequest request)_;evaluate,this,predicate,on,the,given,request,param,request,the,request,to,match,against,return,code,true,if,the,request,matches,the,predicate,code,false,otherwise;boolean,test,server,request,request
RequestPredicate -> boolean test(ServerRequest request)_;1520542545;Evaluate this predicate on the given request._@param request the request to match against_@return {@code true} if the request matches the predicate_ {@code false} otherwise;boolean test(ServerRequest request)_;evaluate,this,predicate,on,the,given,request,param,request,the,request,to,match,against,return,code,true,if,the,request,matches,the,predicate,code,false,otherwise;boolean,test,server,request,request
RequestPredicate -> boolean test(ServerRequest request)_;1524865018;Evaluate this predicate on the given request._@param request the request to match against_@return {@code true} if the request matches the predicate_ {@code false} otherwise;boolean test(ServerRequest request)_;evaluate,this,predicate,on,the,given,request,param,request,the,request,to,match,against,return,code,true,if,the,request,matches,the,predicate,code,false,otherwise;boolean,test,server,request,request
RequestPredicate -> boolean test(ServerRequest request)_;1538658936;Evaluate this predicate on the given request._@param request the request to match against_@return {@code true} if the request matches the predicate_ {@code false} otherwise;boolean test(ServerRequest request)_;evaluate,this,predicate,on,the,given,request,param,request,the,request,to,match,against,return,code,true,if,the,request,matches,the,predicate,code,false,otherwise;boolean,test,server,request,request
RequestPredicate -> boolean test(ServerRequest request)_;1542719117;Evaluate this predicate on the given request._@param request the request to match against_@return {@code true} if the request matches the predicate_ {@code false} otherwise;boolean test(ServerRequest request)_;evaluate,this,predicate,on,the,given,request,param,request,the,request,to,match,against,return,code,true,if,the,request,matches,the,predicate,code,false,otherwise;boolean,test,server,request,request
RequestPredicate -> default ServerRequest nestRequest(ServerRequest request);1487584763;Transforms the given request into a request used for a nested route. For instance, a_path-based predicate can return a {@code ServerRequest} with a nested path._<p>Default implementation returns the given path._@param request the request to be nested_@return the nested request_@see RouterFunctions#nest(RequestPredicate, RouterFunction);default ServerRequest nestRequest(ServerRequest request) {_		return request__	};transforms,the,given,request,into,a,request,used,for,a,nested,route,for,instance,a,path,based,predicate,can,return,a,code,server,request,with,a,nested,path,p,default,implementation,returns,the,given,path,param,request,the,request,to,be,nested,return,the,nested,request,see,router,functions,nest,request,predicate,router,function;default,server,request,nest,request,server,request,request,return,request
RequestPredicate -> default ServerRequest nestRequest(ServerRequest request);1487687241;Transform the given request into a request used for a nested route. For instance,_a path-based predicate can return a {@code ServerRequest} with a nested path._<p>The default implementation returns the given path._@param request the request to be nested_@return the nested request_@see RouterFunctions#nest(RequestPredicate, RouterFunction);default ServerRequest nestRequest(ServerRequest request) {_		return request__	};transform,the,given,request,into,a,request,used,for,a,nested,route,for,instance,a,path,based,predicate,can,return,a,code,server,request,with,a,nested,path,p,the,default,implementation,returns,the,given,path,param,request,the,request,to,be,nested,return,the,nested,request,see,router,functions,nest,request,predicate,router,function;default,server,request,nest,request,server,request,request,return,request
