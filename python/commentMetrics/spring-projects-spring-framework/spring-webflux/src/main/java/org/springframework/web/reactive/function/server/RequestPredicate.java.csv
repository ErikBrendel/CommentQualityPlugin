commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Evaluate this predicate on the given request.  * @param request the request to match against  * @return {@code true} if the request matches the predicate. {@code false} otherwise  */ ;/**  * Evaluate this predicate on the given request.  * @param request the request to match against  * @return {@code true} if the request matches the predicate. {@code false} otherwise  */ boolean test(ServerRequest request).
true;default;1;3;/**  * Return a composed request predicate that tests against both this predicate AND  * the {@code other} predicate. When evaluating the composed predicate, if this  * predicate is {@code false}, then the {@code other} predicate is not evaluated.  * @param other a predicate that will be logically-ANDed with this predicate  * @return a predicate composed of this predicate AND the {@code other} predicate  */ ;/**  * Return a composed request predicate that tests against both this predicate AND  * the {@code other} predicate. When evaluating the composed predicate, if this  * predicate is {@code false}, then the {@code other} predicate is not evaluated.  * @param other a predicate that will be logically-ANDed with this predicate  * @return a predicate composed of this predicate AND the {@code other} predicate  */ default RequestPredicate and(RequestPredicate other) {     return new RequestPredicates.AndRequestPredicate(this, other). }
true;default;0;3;/**  * Return a predicate that represents the logical negation of this predicate.  * @return a predicate that represents the logical negation of this predicate  */ ;/**  * Return a predicate that represents the logical negation of this predicate.  * @return a predicate that represents the logical negation of this predicate  */ default RequestPredicate negate() {     return new RequestPredicates.NegateRequestPredicate(this). }
true;default;1;3;/**  * Return a composed request predicate that tests against both this predicate OR  * the {@code other} predicate. When evaluating the composed predicate, if this  * predicate is {@code true}, then the {@code other} predicate is not evaluated.  * @param other a predicate that will be logically-ORed with this predicate  * @return a predicate composed of this predicate OR the {@code other} predicate  */ ;/**  * Return a composed request predicate that tests against both this predicate OR  * the {@code other} predicate. When evaluating the composed predicate, if this  * predicate is {@code true}, then the {@code other} predicate is not evaluated.  * @param other a predicate that will be logically-ORed with this predicate  * @return a predicate composed of this predicate OR the {@code other} predicate  */ default RequestPredicate or(RequestPredicate other) {     return new RequestPredicates.OrRequestPredicate(this, other). }
true;default;1;3;/**  * Transform the given request into a request used for a nested route. For instance,  * a path-based predicate can return a {@code ServerRequest} with a the path remaining  * after a match.  * <p>The default implementation returns an {@code Optional} wrapping the given path if  * {@link #test(ServerRequest)} evaluates to {@code true}. or {@link Optional#empty()}  * if it evaluates to {@code false}.  * @param request the request to be nested  * @return the nested request  * @see RouterFunctions#nest(RequestPredicate, RouterFunction)  */ ;/**  * Transform the given request into a request used for a nested route. For instance,  * a path-based predicate can return a {@code ServerRequest} with a the path remaining  * after a match.  * <p>The default implementation returns an {@code Optional} wrapping the given path if  * {@link #test(ServerRequest)} evaluates to {@code true}. or {@link Optional#empty()}  * if it evaluates to {@code false}.  * @param request the request to be nested  * @return the nested request  * @see RouterFunctions#nest(RequestPredicate, RouterFunction)  */ default Optional<ServerRequest> nest(ServerRequest request) {     return (test(request) ? Optional.of(request) : Optional.empty()). }
true;default;1;3;/**  * Accept the given visitor. Default implementation calls  * {@link RequestPredicates.Visitor#unknown(RequestPredicate)}. composed {@code RequestPredicate}  * implementations are expected to call {@code accept} for all components that make up this  * request predicate.  * @param visitor the visitor to accept  */ ;/**  * Accept the given visitor. Default implementation calls  * {@link RequestPredicates.Visitor#unknown(RequestPredicate)}. composed {@code RequestPredicate}  * implementations are expected to call {@code accept} for all components that make up this  * request predicate.  * @param visitor the visitor to accept  */ default void accept(RequestPredicates.Visitor visitor) {     visitor.unknown(this). }
