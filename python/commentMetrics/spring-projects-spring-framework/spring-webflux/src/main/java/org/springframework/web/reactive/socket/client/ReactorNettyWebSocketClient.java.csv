commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the configured {@link HttpClient}.  */ ;/**  * Return the configured {@link HttpClient}.  */ public HttpClient getHttpClient() {     return this.httpClient. }
false;public;2;4;;@Override public Mono<Void> execute(URI url, WebSocketHandler handler) {     return execute(url, new HttpHeaders(), handler). }
false;public;3;24;;@Override public Mono<Void> execute(URI url, HttpHeaders requestHeaders, WebSocketHandler handler) {     return getHttpClient().headers(nettyHeaders -> setNettyHeaders(requestHeaders, nettyHeaders)).websocket(StringUtils.collectionToCommaDelimitedString(handler.getSubProtocols())).uri(url.toString()).handle((inbound, outbound) -> {         HttpHeaders responseHeaders = toHttpHeaders(inbound).         String protocol = responseHeaders.getFirst("Sec-WebSocket-Protocol").         HandshakeInfo info = new HandshakeInfo(url, responseHeaders, Mono.empty(), protocol).         NettyDataBufferFactory factory = new NettyDataBufferFactory(outbound.alloc()).         WebSocketSession session = new ReactorNettyWebSocketSession(inbound, outbound, info, factory).         if (logger.isDebugEnabled()) {             logger.debug("Started session '" + session.getId() + "' for " + url).         }         return handler.handle(session).     }).doOnRequest(n -> {         if (logger.isDebugEnabled()) {             logger.debug("Connecting to " + url).         }     }).next(). }
false;private;2;3;;private void setNettyHeaders(HttpHeaders httpHeaders, io.netty.handler.codec.http.HttpHeaders nettyHeaders) {     httpHeaders.forEach(nettyHeaders::set). }
false;private;1;9;;private HttpHeaders toHttpHeaders(WebsocketInbound inbound) {     HttpHeaders headers = new HttpHeaders().     io.netty.handler.codec.http.HttpHeaders nettyHeaders = inbound.headers().     nettyHeaders.forEach(entry -> {         String name = entry.getKey().         headers.put(name, nettyHeaders.getAll(name)).     }).     return headers. }
