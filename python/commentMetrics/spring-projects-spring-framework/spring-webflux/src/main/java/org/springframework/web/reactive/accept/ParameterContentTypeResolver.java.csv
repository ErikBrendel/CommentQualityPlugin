commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;3;;private static String formatKey(String key) {     return key.toLowerCase(Locale.ENGLISH). }
true;public;1;4;/**  * Set the name of the parameter to use to determine requested media types.  * <p>By default this is set to {@literal "format"}.  */ ;/**  * Set the name of the parameter to use to determine requested media types.  * <p>By default this is set to {@literal "format"}.  */ public void setParameterName(String parameterName) {     Assert.notNull(parameterName, "'parameterName' is required").     this.parameterName = parameterName. }
false;public;0;3;;public String getParameterName() {     return this.parameterName. }
false;public;1;18;;@Override public List<MediaType> resolveMediaTypes(ServerWebExchange exchange) throws NotAcceptableStatusException {     String key = exchange.getRequest().getQueryParams().getFirst(getParameterName()).     if (!StringUtils.hasText(key)) {         return MEDIA_TYPE_ALL_LIST.     }     key = formatKey(key).     MediaType match = this.mediaTypes.get(key).     if (match == null) {         match = MediaTypeFactory.getMediaType("filename." + key).orElseThrow(() -> {             List<MediaType> supported = new ArrayList<>(this.mediaTypes.values()).             return new NotAcceptableStatusException(supported).         }).     }     this.mediaTypes.putIfAbsent(key, match).     return Collections.singletonList(match). }
