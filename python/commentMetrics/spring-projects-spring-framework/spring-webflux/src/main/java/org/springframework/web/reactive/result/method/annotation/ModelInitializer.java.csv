# id;timestamp;commentText;codeText;commentWords;codeWords
ModelInitializer -> @SuppressWarnings("Convert2MethodRef") 	public Mono<Void> initModel(HandlerMethod handlerMethod, InitBinderBindingContext bindingContext, 			ServerWebExchange exchange);1504993259;Initialize the {@link org.springframework.ui.Model Model} based on a_(type-level) {@code @SessionAttributes} annotation and_{@code @ModelAttribute} methods._@param handlerMethod the target controller method_@param bindingContext the context containing the model_@param exchange the current exchange_@return a {@code Mono} for when the model is populated.;@SuppressWarnings("Convert2MethodRef")_	public Mono<Void> initModel(HandlerMethod handlerMethod, InitBinderBindingContext bindingContext,_			ServerWebExchange exchange) {__		List<InvocableHandlerMethod> modelMethods =_				this.methodResolver.getModelAttributeMethods(handlerMethod)___		SessionAttributesHandler sessionAttributesHandler =_				this.methodResolver.getSessionAttributesHandler(handlerMethod)___		if (!sessionAttributesHandler.hasSessionAttributes()) {_			return invokeModelAttributeMethods(bindingContext, modelMethods, exchange)__		}__		return exchange.getSession()_				.flatMap(session -> {_					Map<String, Object> attributes = sessionAttributesHandler.retrieveAttributes(session)__					bindingContext.getModel().mergeAttributes(attributes)__					bindingContext.setSessionContext(sessionAttributesHandler, session)__					return invokeModelAttributeMethods(bindingContext, modelMethods, exchange)_							.doOnSuccess(aVoid -> {_								findModelAttributes(handlerMethod, sessionAttributesHandler).forEach(name -> {_									if (!bindingContext.getModel().containsAttribute(name)) {_										Object value = session.getRequiredAttribute(name)__										bindingContext.getModel().addAttribute(name, value)__									}_								})__							})__				})__	};initialize,the,link,org,springframework,ui,model,model,based,on,a,type,level,code,session,attributes,annotation,and,code,model,attribute,methods,param,handler,method,the,target,controller,method,param,binding,context,the,context,containing,the,model,param,exchange,the,current,exchange,return,a,code,mono,for,when,the,model,is,populated;suppress,warnings,convert2method,ref,public,mono,void,init,model,handler,method,handler,method,init,binder,binding,context,binding,context,server,web,exchange,exchange,list,invocable,handler,method,model,methods,this,method,resolver,get,model,attribute,methods,handler,method,session,attributes,handler,session,attributes,handler,this,method,resolver,get,session,attributes,handler,handler,method,if,session,attributes,handler,has,session,attributes,return,invoke,model,attribute,methods,binding,context,model,methods,exchange,return,exchange,get,session,flat,map,session,map,string,object,attributes,session,attributes,handler,retrieve,attributes,session,binding,context,get,model,merge,attributes,attributes,binding,context,set,session,context,session,attributes,handler,session,return,invoke,model,attribute,methods,binding,context,model,methods,exchange,do,on,success,a,void,find,model,attributes,handler,method,session,attributes,handler,for,each,name,if,binding,context,get,model,contains,attribute,name,object,value,session,get,required,attribute,name,binding,context,get,model,add,attribute,name,value
ModelInitializer -> @SuppressWarnings("Convert2MethodRef") 	public Mono<Void> initModel(HandlerMethod handlerMethod, InitBinderBindingContext bindingContext, 			ServerWebExchange exchange);1505136703;Initialize the {@link org.springframework.ui.Model Model} based on a_(type-level) {@code @SessionAttributes} annotation and_{@code @ModelAttribute} methods._@param handlerMethod the target controller method_@param bindingContext the context containing the model_@param exchange the current exchange_@return a {@code Mono} for when the model is populated.;@SuppressWarnings("Convert2MethodRef")_	public Mono<Void> initModel(HandlerMethod handlerMethod, InitBinderBindingContext bindingContext,_			ServerWebExchange exchange) {__		List<InvocableHandlerMethod> modelMethods =_				this.methodResolver.getModelAttributeMethods(handlerMethod)___		SessionAttributesHandler sessionAttributesHandler =_				this.methodResolver.getSessionAttributesHandler(handlerMethod)___		if (!sessionAttributesHandler.hasSessionAttributes()) {_			return invokeModelAttributeMethods(bindingContext, modelMethods, exchange)__		}__		return exchange.getSession()_				.flatMap(session -> {_					Map<String, Object> attributes = sessionAttributesHandler.retrieveAttributes(session)__					bindingContext.getModel().mergeAttributes(attributes)__					bindingContext.setSessionContext(sessionAttributesHandler, session)__					return invokeModelAttributeMethods(bindingContext, modelMethods, exchange)_							.doOnSuccess(aVoid -> {_								findModelAttributes(handlerMethod, sessionAttributesHandler).forEach(name -> {_									if (!bindingContext.getModel().containsAttribute(name)) {_										Object value = session.getRequiredAttribute(name)__										bindingContext.getModel().addAttribute(name, value)__									}_								})__							})__				})__	};initialize,the,link,org,springframework,ui,model,model,based,on,a,type,level,code,session,attributes,annotation,and,code,model,attribute,methods,param,handler,method,the,target,controller,method,param,binding,context,the,context,containing,the,model,param,exchange,the,current,exchange,return,a,code,mono,for,when,the,model,is,populated;suppress,warnings,convert2method,ref,public,mono,void,init,model,handler,method,handler,method,init,binder,binding,context,binding,context,server,web,exchange,exchange,list,invocable,handler,method,model,methods,this,method,resolver,get,model,attribute,methods,handler,method,session,attributes,handler,session,attributes,handler,this,method,resolver,get,session,attributes,handler,handler,method,if,session,attributes,handler,has,session,attributes,return,invoke,model,attribute,methods,binding,context,model,methods,exchange,return,exchange,get,session,flat,map,session,map,string,object,attributes,session,attributes,handler,retrieve,attributes,session,binding,context,get,model,merge,attributes,attributes,binding,context,set,session,context,session,attributes,handler,session,return,invoke,model,attribute,methods,binding,context,model,methods,exchange,do,on,success,a,void,find,model,attributes,handler,method,session,attributes,handler,for,each,name,if,binding,context,get,model,contains,attribute,name,object,value,session,get,required,attribute,name,binding,context,get,model,add,attribute,name,value
ModelInitializer -> @SuppressWarnings("Convert2MethodRef") 	public Mono<Void> initModel(HandlerMethod handlerMethod, InitBinderBindingContext bindingContext, 			ServerWebExchange exchange);1520542144;Initialize the {@link org.springframework.ui.Model Model} based on a_(type-level) {@code @SessionAttributes} annotation and_{@code @ModelAttribute} methods._@param handlerMethod the target controller method_@param bindingContext the context containing the model_@param exchange the current exchange_@return a {@code Mono} for when the model is populated.;@SuppressWarnings("Convert2MethodRef")_	public Mono<Void> initModel(HandlerMethod handlerMethod, InitBinderBindingContext bindingContext,_			ServerWebExchange exchange) {__		List<InvocableHandlerMethod> modelMethods =_				this.methodResolver.getModelAttributeMethods(handlerMethod)___		SessionAttributesHandler sessionAttributesHandler =_				this.methodResolver.getSessionAttributesHandler(handlerMethod)___		if (!sessionAttributesHandler.hasSessionAttributes()) {_			return invokeModelAttributeMethods(bindingContext, modelMethods, exchange)__		}__		return exchange.getSession()_				.flatMap(session -> {_					Map<String, Object> attributes = sessionAttributesHandler.retrieveAttributes(session)__					bindingContext.getModel().mergeAttributes(attributes)__					bindingContext.setSessionContext(sessionAttributesHandler, session)__					return invokeModelAttributeMethods(bindingContext, modelMethods, exchange)_							.doOnSuccess(aVoid ->_								findModelAttributes(handlerMethod, sessionAttributesHandler).forEach(name -> {_									if (!bindingContext.getModel().containsAttribute(name)) {_										Object value = session.getRequiredAttribute(name)__										bindingContext.getModel().addAttribute(name, value)__									}_								}))__				})__	};initialize,the,link,org,springframework,ui,model,model,based,on,a,type,level,code,session,attributes,annotation,and,code,model,attribute,methods,param,handler,method,the,target,controller,method,param,binding,context,the,context,containing,the,model,param,exchange,the,current,exchange,return,a,code,mono,for,when,the,model,is,populated;suppress,warnings,convert2method,ref,public,mono,void,init,model,handler,method,handler,method,init,binder,binding,context,binding,context,server,web,exchange,exchange,list,invocable,handler,method,model,methods,this,method,resolver,get,model,attribute,methods,handler,method,session,attributes,handler,session,attributes,handler,this,method,resolver,get,session,attributes,handler,handler,method,if,session,attributes,handler,has,session,attributes,return,invoke,model,attribute,methods,binding,context,model,methods,exchange,return,exchange,get,session,flat,map,session,map,string,object,attributes,session,attributes,handler,retrieve,attributes,session,binding,context,get,model,merge,attributes,attributes,binding,context,set,session,context,session,attributes,handler,session,return,invoke,model,attribute,methods,binding,context,model,methods,exchange,do,on,success,a,void,find,model,attributes,handler,method,session,attributes,handler,for,each,name,if,binding,context,get,model,contains,attribute,name,object,value,session,get,required,attribute,name,binding,context,get,model,add,attribute,name,value
ModelInitializer -> @SuppressWarnings("Convert2MethodRef") 	public Mono<Void> initModel(HandlerMethod handlerMethod, InitBinderBindingContext bindingContext, 			ServerWebExchange exchange);1533034998;Initialize the {@link org.springframework.ui.Model Model} based on a_(type-level) {@code @SessionAttributes} annotation and_{@code @ModelAttribute} methods._@param handlerMethod the target controller method_@param bindingContext the context containing the model_@param exchange the current exchange_@return a {@code Mono} for when the model is populated.;@SuppressWarnings("Convert2MethodRef")_	public Mono<Void> initModel(HandlerMethod handlerMethod, InitBinderBindingContext bindingContext,_			ServerWebExchange exchange) {__		List<InvocableHandlerMethod> modelMethods =_				this.methodResolver.getModelAttributeMethods(handlerMethod)___		SessionAttributesHandler sessionAttributesHandler =_				this.methodResolver.getSessionAttributesHandler(handlerMethod)___		if (!sessionAttributesHandler.hasSessionAttributes()) {_			return invokeModelAttributeMethods(bindingContext, modelMethods, exchange)__		}__		return exchange.getSession()_				.flatMap(session -> {_					Map<String, Object> attributes = sessionAttributesHandler.retrieveAttributes(session)__					bindingContext.getModel().mergeAttributes(attributes)__					bindingContext.setSessionContext(sessionAttributesHandler, session)__					return invokeModelAttributeMethods(bindingContext, modelMethods, exchange)_							.doOnSuccess(aVoid ->_								findModelAttributes(handlerMethod, sessionAttributesHandler).forEach(name -> {_									if (!bindingContext.getModel().containsAttribute(name)) {_										Object value = session.getRequiredAttribute(name)__										bindingContext.getModel().addAttribute(name, value)__									}_								}))__				})__	};initialize,the,link,org,springframework,ui,model,model,based,on,a,type,level,code,session,attributes,annotation,and,code,model,attribute,methods,param,handler,method,the,target,controller,method,param,binding,context,the,context,containing,the,model,param,exchange,the,current,exchange,return,a,code,mono,for,when,the,model,is,populated;suppress,warnings,convert2method,ref,public,mono,void,init,model,handler,method,handler,method,init,binder,binding,context,binding,context,server,web,exchange,exchange,list,invocable,handler,method,model,methods,this,method,resolver,get,model,attribute,methods,handler,method,session,attributes,handler,session,attributes,handler,this,method,resolver,get,session,attributes,handler,handler,method,if,session,attributes,handler,has,session,attributes,return,invoke,model,attribute,methods,binding,context,model,methods,exchange,return,exchange,get,session,flat,map,session,map,string,object,attributes,session,attributes,handler,retrieve,attributes,session,binding,context,get,model,merge,attributes,attributes,binding,context,set,session,context,session,attributes,handler,session,return,invoke,model,attribute,methods,binding,context,model,methods,exchange,do,on,success,a,void,find,model,attributes,handler,method,session,attributes,handler,for,each,name,if,binding,context,get,model,contains,attribute,name,object,value,session,get,required,attribute,name,binding,context,get,model,add,attribute,name,value
ModelInitializer -> @SuppressWarnings("Convert2MethodRef") 	public Mono<Void> initModel(HandlerMethod handlerMethod, InitBinderBindingContext bindingContext, 			ServerWebExchange exchange);1542050977;Initialize the {@link org.springframework.ui.Model Model} based on a_(type-level) {@code @SessionAttributes} annotation and_{@code @ModelAttribute} methods._@param handlerMethod the target controller method_@param bindingContext the context containing the model_@param exchange the current exchange_@return a {@code Mono} for when the model is populated.;@SuppressWarnings("Convert2MethodRef")_	public Mono<Void> initModel(HandlerMethod handlerMethod, InitBinderBindingContext bindingContext,_			ServerWebExchange exchange) {__		List<InvocableHandlerMethod> modelMethods =_				this.methodResolver.getModelAttributeMethods(handlerMethod)___		SessionAttributesHandler sessionAttributesHandler =_				this.methodResolver.getSessionAttributesHandler(handlerMethod)___		if (!sessionAttributesHandler.hasSessionAttributes()) {_			return invokeModelAttributeMethods(bindingContext, modelMethods, exchange)__		}__		return exchange.getSession()_				.flatMap(session -> {_					Map<String, Object> attributes = sessionAttributesHandler.retrieveAttributes(session)__					bindingContext.getModel().mergeAttributes(attributes)__					bindingContext.setSessionContext(sessionAttributesHandler, session)__					return invokeModelAttributeMethods(bindingContext, modelMethods, exchange)_							.doOnSuccess(aVoid ->_								findModelAttributes(handlerMethod, sessionAttributesHandler).forEach(name -> {_									if (!bindingContext.getModel().containsAttribute(name)) {_										Object value = session.getRequiredAttribute(name)__										bindingContext.getModel().addAttribute(name, value)__									}_								}))__				})__	};initialize,the,link,org,springframework,ui,model,model,based,on,a,type,level,code,session,attributes,annotation,and,code,model,attribute,methods,param,handler,method,the,target,controller,method,param,binding,context,the,context,containing,the,model,param,exchange,the,current,exchange,return,a,code,mono,for,when,the,model,is,populated;suppress,warnings,convert2method,ref,public,mono,void,init,model,handler,method,handler,method,init,binder,binding,context,binding,context,server,web,exchange,exchange,list,invocable,handler,method,model,methods,this,method,resolver,get,model,attribute,methods,handler,method,session,attributes,handler,session,attributes,handler,this,method,resolver,get,session,attributes,handler,handler,method,if,session,attributes,handler,has,session,attributes,return,invoke,model,attribute,methods,binding,context,model,methods,exchange,return,exchange,get,session,flat,map,session,map,string,object,attributes,session,attributes,handler,retrieve,attributes,session,binding,context,get,model,merge,attributes,attributes,binding,context,set,session,context,session,attributes,handler,session,return,invoke,model,attribute,methods,binding,context,model,methods,exchange,do,on,success,a,void,find,model,attributes,handler,method,session,attributes,handler,for,each,name,if,binding,context,get,model,contains,attribute,name,object,value,session,get,required,attribute,name,binding,context,get,model,add,attribute,name,value
ModelInitializer -> @SuppressWarnings("Convert2MethodRef") 	public Mono<Void> initModel(BindingContext bindingContext, 			List<InvocableHandlerMethod> attributeMethods, ServerWebExchange exchange);1488409721;Initialize the default model in the given {@code BindingContext} through_the {@code @ModelAttribute} methods and indicate when complete.__<p>This will wait for {@code @ModelAttribute} methods that return_{@code Mono<Void>} since those may be adding attributes asynchronously._However if methods return async attributes, those will be added to the_model as-is and without waiting for them to be resolved.__@param bindingContext the BindingContext with the default model_@param attributeMethods the {@code @ModelAttribute} methods_@param exchange the current exchange__@return a {@code Mono} for when the model is populated.;@SuppressWarnings("Convert2MethodRef")_	public Mono<Void> initModel(BindingContext bindingContext,_			List<InvocableHandlerMethod> attributeMethods, ServerWebExchange exchange) {__		List<Mono<HandlerResult>> resultList = new ArrayList<>()__		attributeMethods.forEach(invocable -> resultList.add(invocable.invoke(exchange, bindingContext)))___		return Mono.when(resultList, objectArray -> {_			return Arrays.stream(objectArray)_					.map(object -> (HandlerResult) object)_					.map(handlerResult -> handleResult(handlerResult, bindingContext))_					.collect(Collectors.toList())__		}).then(completionList -> Mono.when(completionList))__	};initialize,the,default,model,in,the,given,code,binding,context,through,the,code,model,attribute,methods,and,indicate,when,complete,p,this,will,wait,for,code,model,attribute,methods,that,return,code,mono,void,since,those,may,be,adding,attributes,asynchronously,however,if,methods,return,async,attributes,those,will,be,added,to,the,model,as,is,and,without,waiting,for,them,to,be,resolved,param,binding,context,the,binding,context,with,the,default,model,param,attribute,methods,the,code,model,attribute,methods,param,exchange,the,current,exchange,return,a,code,mono,for,when,the,model,is,populated;suppress,warnings,convert2method,ref,public,mono,void,init,model,binding,context,binding,context,list,invocable,handler,method,attribute,methods,server,web,exchange,exchange,list,mono,handler,result,result,list,new,array,list,attribute,methods,for,each,invocable,result,list,add,invocable,invoke,exchange,binding,context,return,mono,when,result,list,object,array,return,arrays,stream,object,array,map,object,handler,result,object,map,handler,result,handle,result,handler,result,binding,context,collect,collectors,to,list,then,completion,list,mono,when,completion,list
ModelInitializer -> @SuppressWarnings("Convert2MethodRef") 	public Mono<Void> initModel(BindingContext bindingContext, 			List<InvocableHandlerMethod> attributeMethods, ServerWebExchange exchange);1490653743;Initialize the default model in the given {@code BindingContext} through_the {@code @ModelAttribute} methods and indicate when complete.__<p>This will wait for {@code @ModelAttribute} methods that return_{@code Mono<Void>} since those may be adding attributes asynchronously._However if methods return async attributes, those will be added to the_model as-is and without waiting for them to be resolved.__@param bindingContext the BindingContext with the default model_@param attributeMethods the {@code @ModelAttribute} methods_@param exchange the current exchange__@return a {@code Mono} for when the model is populated.;@SuppressWarnings("Convert2MethodRef")_	public Mono<Void> initModel(BindingContext bindingContext,_			List<InvocableHandlerMethod> attributeMethods, ServerWebExchange exchange) {__		List<Mono<HandlerResult>> resultList = new ArrayList<>()__		attributeMethods.forEach(invocable -> resultList.add(invocable.invoke(exchange, bindingContext)))___		return Mono.when(resultList, objectArray -> {_			return Arrays.stream(objectArray)_					.map(object -> (HandlerResult) object)_					.map(handlerResult -> handleResult(handlerResult, bindingContext))_					.collect(Collectors.toList())__		}).then(completionList -> Mono.when(completionList))__	};initialize,the,default,model,in,the,given,code,binding,context,through,the,code,model,attribute,methods,and,indicate,when,complete,p,this,will,wait,for,code,model,attribute,methods,that,return,code,mono,void,since,those,may,be,adding,attributes,asynchronously,however,if,methods,return,async,attributes,those,will,be,added,to,the,model,as,is,and,without,waiting,for,them,to,be,resolved,param,binding,context,the,binding,context,with,the,default,model,param,attribute,methods,the,code,model,attribute,methods,param,exchange,the,current,exchange,return,a,code,mono,for,when,the,model,is,populated;suppress,warnings,convert2method,ref,public,mono,void,init,model,binding,context,binding,context,list,invocable,handler,method,attribute,methods,server,web,exchange,exchange,list,mono,handler,result,result,list,new,array,list,attribute,methods,for,each,invocable,result,list,add,invocable,invoke,exchange,binding,context,return,mono,when,result,list,object,array,return,arrays,stream,object,array,map,object,handler,result,object,map,handler,result,handle,result,handler,result,binding,context,collect,collectors,to,list,then,completion,list,mono,when,completion,list
ModelInitializer -> @SuppressWarnings("Convert2MethodRef") 	public Mono<Void> initModel(BindingContext bindingContext, 			List<InvocableHandlerMethod> attributeMethods, ServerWebExchange exchange);1491927184;Initialize the default model in the given {@code BindingContext} through_the {@code @ModelAttribute} methods and indicate when complete.__<p>This will wait for {@code @ModelAttribute} methods that return_{@code Mono<Void>} since those may be adding attributes asynchronously._However if methods return async attributes, those will be added to the_model as-is and without waiting for them to be resolved.__@param bindingContext the BindingContext with the default model_@param attributeMethods the {@code @ModelAttribute} methods_@param exchange the current exchange__@return a {@code Mono} for when the model is populated.;@SuppressWarnings("Convert2MethodRef")_	public Mono<Void> initModel(BindingContext bindingContext,_			List<InvocableHandlerMethod> attributeMethods, ServerWebExchange exchange) {__		List<Mono<HandlerResult>> resultList = new ArrayList<>()__		attributeMethods.forEach(invocable -> resultList.add(invocable.invoke(exchange, bindingContext)))___		return Mono.when(resultList, objectArray -> {_			return Arrays.stream(objectArray)_					.map(object -> (HandlerResult) object)_					.map(handlerResult -> handleResult(handlerResult, bindingContext))_					.collect(Collectors.toList())__		}).flatMap(completionList -> Mono.when(completionList))__	};initialize,the,default,model,in,the,given,code,binding,context,through,the,code,model,attribute,methods,and,indicate,when,complete,p,this,will,wait,for,code,model,attribute,methods,that,return,code,mono,void,since,those,may,be,adding,attributes,asynchronously,however,if,methods,return,async,attributes,those,will,be,added,to,the,model,as,is,and,without,waiting,for,them,to,be,resolved,param,binding,context,the,binding,context,with,the,default,model,param,attribute,methods,the,code,model,attribute,methods,param,exchange,the,current,exchange,return,a,code,mono,for,when,the,model,is,populated;suppress,warnings,convert2method,ref,public,mono,void,init,model,binding,context,binding,context,list,invocable,handler,method,attribute,methods,server,web,exchange,exchange,list,mono,handler,result,result,list,new,array,list,attribute,methods,for,each,invocable,result,list,add,invocable,invoke,exchange,binding,context,return,mono,when,result,list,object,array,return,arrays,stream,object,array,map,object,handler,result,object,map,handler,result,handle,result,handler,result,binding,context,collect,collectors,to,list,flat,map,completion,list,mono,when,completion,list
ModelInitializer -> @SuppressWarnings("Convert2MethodRef") 	public Mono<Void> initModel(BindingContext bindingContext, 			List<InvocableHandlerMethod> attributeMethods, ServerWebExchange exchange);1492570843;Initialize the default model in the given {@code BindingContext} through_the {@code @ModelAttribute} methods and indicate when complete.__<p>This will wait for {@code @ModelAttribute} methods that return_{@code Mono<Void>} since those may be adding attributes asynchronously._However if methods return async attributes, those will be added to the_model as-is and without waiting for them to be resolved.__@param bindingContext the BindingContext with the default model_@param attributeMethods the {@code @ModelAttribute} methods_@param exchange the current exchange__@return a {@code Mono} for when the model is populated.;@SuppressWarnings("Convert2MethodRef")_	public Mono<Void> initModel(BindingContext bindingContext,_			List<InvocableHandlerMethod> attributeMethods, ServerWebExchange exchange) {__		List<Mono<HandlerResult>> resultList = new ArrayList<>()__		attributeMethods.forEach(invocable -> resultList.add(invocable.invoke(exchange, bindingContext)))___		return Mono.when(resultList, objectArray -> {_			return Arrays.stream(objectArray)_					.map(object -> (HandlerResult) object)_					.map(handlerResult -> handleResult(handlerResult, bindingContext))_					.collect(Collectors.toList())__		}).flatMap(completionList -> Mono.when(completionList))__	};initialize,the,default,model,in,the,given,code,binding,context,through,the,code,model,attribute,methods,and,indicate,when,complete,p,this,will,wait,for,code,model,attribute,methods,that,return,code,mono,void,since,those,may,be,adding,attributes,asynchronously,however,if,methods,return,async,attributes,those,will,be,added,to,the,model,as,is,and,without,waiting,for,them,to,be,resolved,param,binding,context,the,binding,context,with,the,default,model,param,attribute,methods,the,code,model,attribute,methods,param,exchange,the,current,exchange,return,a,code,mono,for,when,the,model,is,populated;suppress,warnings,convert2method,ref,public,mono,void,init,model,binding,context,binding,context,list,invocable,handler,method,attribute,methods,server,web,exchange,exchange,list,mono,handler,result,result,list,new,array,list,attribute,methods,for,each,invocable,result,list,add,invocable,invoke,exchange,binding,context,return,mono,when,result,list,object,array,return,arrays,stream,object,array,map,object,handler,result,object,map,handler,result,handle,result,handler,result,binding,context,collect,collectors,to,list,flat,map,completion,list,mono,when,completion,list
ModelInitializer -> @SuppressWarnings("Convert2MethodRef") 	public Mono<Void> initModel(BindingContext bindingContext, 			List<InvocableHandlerMethod> attributeMethods, ServerWebExchange exchange);1492571447;Initialize the default model in the given {@code BindingContext} through_the {@code @ModelAttribute} methods and indicate when complete.__<p>This will wait for {@code @ModelAttribute} methods that return_{@code Mono<Void>} since those may be adding attributes asynchronously._However if methods return async attributes, those will be added to the_model as-is and without waiting for them to be resolved.__@param bindingContext the BindingContext with the default model_@param attributeMethods the {@code @ModelAttribute} methods_@param exchange the current exchange__@return a {@code Mono} for when the model is populated.;@SuppressWarnings("Convert2MethodRef")_	public Mono<Void> initModel(BindingContext bindingContext,_			List<InvocableHandlerMethod> attributeMethods, ServerWebExchange exchange) {__		List<Mono<HandlerResult>> resultList = new ArrayList<>()__		attributeMethods.forEach(invocable -> resultList.add(invocable.invoke(exchange, bindingContext)))___		return Mono.when(resultList, objectArray -> {_			return Arrays.stream(objectArray)_					.map(object -> (HandlerResult) object)_					.map(handlerResult -> handleResult(handlerResult, bindingContext))_					.collect(Collectors.toList())__		}).flatMap(completionList -> Mono.when(completionList))__	};initialize,the,default,model,in,the,given,code,binding,context,through,the,code,model,attribute,methods,and,indicate,when,complete,p,this,will,wait,for,code,model,attribute,methods,that,return,code,mono,void,since,those,may,be,adding,attributes,asynchronously,however,if,methods,return,async,attributes,those,will,be,added,to,the,model,as,is,and,without,waiting,for,them,to,be,resolved,param,binding,context,the,binding,context,with,the,default,model,param,attribute,methods,the,code,model,attribute,methods,param,exchange,the,current,exchange,return,a,code,mono,for,when,the,model,is,populated;suppress,warnings,convert2method,ref,public,mono,void,init,model,binding,context,binding,context,list,invocable,handler,method,attribute,methods,server,web,exchange,exchange,list,mono,handler,result,result,list,new,array,list,attribute,methods,for,each,invocable,result,list,add,invocable,invoke,exchange,binding,context,return,mono,when,result,list,object,array,return,arrays,stream,object,array,map,object,handler,result,object,map,handler,result,handle,result,handler,result,binding,context,collect,collectors,to,list,flat,map,completion,list,mono,when,completion,list
ModelInitializer -> @SuppressWarnings("Convert2MethodRef") 	public Mono<Void> initModel(BindingContext bindingContext, 			List<InvocableHandlerMethod> attributeMethods, ServerWebExchange exchange);1495569915;Initialize the default model in the given {@code BindingContext} through_the {@code @ModelAttribute} methods and indicate when complete._<p>This will wait for {@code @ModelAttribute} methods that return_{@code Mono<Void>} since those may be adding attributes asynchronously._However if methods return async attributes, those will be added to the_model as-is and without waiting for them to be resolved._@param bindingContext the BindingContext with the default model_@param attributeMethods the {@code @ModelAttribute} methods_@param exchange the current exchange_@return a {@code Mono} for when the model is populated.;@SuppressWarnings("Convert2MethodRef")_	public Mono<Void> initModel(BindingContext bindingContext,_			List<InvocableHandlerMethod> attributeMethods, ServerWebExchange exchange) {__		List<Mono<HandlerResult>> resultList = new ArrayList<>()__		attributeMethods.forEach(invocable -> resultList.add(invocable.invoke(exchange, bindingContext)))___		return Mono.when(resultList, objectArray -> {_			return Arrays.stream(objectArray)_					.map(object -> (HandlerResult) object)_					.map(handlerResult -> handleResult(handlerResult, bindingContext))_					.collect(Collectors.toList())__		}).flatMap(completionList -> Mono.when(completionList))__	};initialize,the,default,model,in,the,given,code,binding,context,through,the,code,model,attribute,methods,and,indicate,when,complete,p,this,will,wait,for,code,model,attribute,methods,that,return,code,mono,void,since,those,may,be,adding,attributes,asynchronously,however,if,methods,return,async,attributes,those,will,be,added,to,the,model,as,is,and,without,waiting,for,them,to,be,resolved,param,binding,context,the,binding,context,with,the,default,model,param,attribute,methods,the,code,model,attribute,methods,param,exchange,the,current,exchange,return,a,code,mono,for,when,the,model,is,populated;suppress,warnings,convert2method,ref,public,mono,void,init,model,binding,context,binding,context,list,invocable,handler,method,attribute,methods,server,web,exchange,exchange,list,mono,handler,result,result,list,new,array,list,attribute,methods,for,each,invocable,result,list,add,invocable,invoke,exchange,binding,context,return,mono,when,result,list,object,array,return,arrays,stream,object,array,map,object,handler,result,object,map,handler,result,handle,result,handler,result,binding,context,collect,collectors,to,list,flat,map,completion,list,mono,when,completion,list
ModelInitializer -> @SuppressWarnings("Convert2MethodRef") 	public Mono<Void> initModel(BindingContext bindingContext, 			List<InvocableHandlerMethod> attributeMethods, ServerWebExchange exchange);1496837955;Initialize the default model in the given {@code BindingContext} through_the {@code @ModelAttribute} methods and indicate when complete._<p>This will wait for {@code @ModelAttribute} methods that return_{@code Mono<Void>} since those may be adding attributes asynchronously._However if methods return async attributes, those will be added to the_model as-is and without waiting for them to be resolved._@param bindingContext the BindingContext with the default model_@param attributeMethods the {@code @ModelAttribute} methods_@param exchange the current exchange_@return a {@code Mono} for when the model is populated.;@SuppressWarnings("Convert2MethodRef")_	public Mono<Void> initModel(BindingContext bindingContext,_			List<InvocableHandlerMethod> attributeMethods, ServerWebExchange exchange) {__		List<Mono<HandlerResult>> resultList = new ArrayList<>()__		attributeMethods.forEach(invocable -> resultList.add(invocable.invoke(exchange, bindingContext)))___		return Mono.when(resultList, objectArray -> {_			return Arrays.stream(objectArray)_					.map(object -> (HandlerResult) object)_					.map(handlerResult -> handleResult(handlerResult, bindingContext))_					.collect(Collectors.toList())__		}).flatMap(completionList -> Mono.when(completionList))__	};initialize,the,default,model,in,the,given,code,binding,context,through,the,code,model,attribute,methods,and,indicate,when,complete,p,this,will,wait,for,code,model,attribute,methods,that,return,code,mono,void,since,those,may,be,adding,attributes,asynchronously,however,if,methods,return,async,attributes,those,will,be,added,to,the,model,as,is,and,without,waiting,for,them,to,be,resolved,param,binding,context,the,binding,context,with,the,default,model,param,attribute,methods,the,code,model,attribute,methods,param,exchange,the,current,exchange,return,a,code,mono,for,when,the,model,is,populated;suppress,warnings,convert2method,ref,public,mono,void,init,model,binding,context,binding,context,list,invocable,handler,method,attribute,methods,server,web,exchange,exchange,list,mono,handler,result,result,list,new,array,list,attribute,methods,for,each,invocable,result,list,add,invocable,invoke,exchange,binding,context,return,mono,when,result,list,object,array,return,arrays,stream,object,array,map,object,handler,result,object,map,handler,result,handle,result,handler,result,binding,context,collect,collectors,to,list,flat,map,completion,list,mono,when,completion,list
ModelInitializer -> @SuppressWarnings("Convert2MethodRef") 	public Mono<Void> initModel(BindingContext bindingContext, 			List<InvocableHandlerMethod> attributeMethods, ServerWebExchange exchange);1503338048;Initialize the default model in the given {@code BindingContext} through_the {@code @ModelAttribute} methods and indicate when complete._<p>This will wait for {@code @ModelAttribute} methods that return_{@code Mono<Void>} since those may be adding attributes asynchronously._However if methods return async attributes, those will be added to the_model as-is and without waiting for them to be resolved._@param bindingContext the BindingContext with the default model_@param attributeMethods the {@code @ModelAttribute} methods_@param exchange the current exchange_@return a {@code Mono} for when the model is populated.;@SuppressWarnings("Convert2MethodRef")_	public Mono<Void> initModel(BindingContext bindingContext,_			List<InvocableHandlerMethod> attributeMethods, ServerWebExchange exchange) {__		List<Mono<HandlerResult>> resultList = new ArrayList<>()__		attributeMethods.forEach(invocable -> resultList.add(invocable.invoke(exchange, bindingContext)))___		return Mono.zip(resultList, objectArray -> {_			return Arrays.stream(objectArray)_					.map(object -> (HandlerResult) object)_					.map(handlerResult -> handleResult(handlerResult, bindingContext))_					.collect(Collectors.toList())__		}).flatMap(completionList -> Mono.when(completionList))__	};initialize,the,default,model,in,the,given,code,binding,context,through,the,code,model,attribute,methods,and,indicate,when,complete,p,this,will,wait,for,code,model,attribute,methods,that,return,code,mono,void,since,those,may,be,adding,attributes,asynchronously,however,if,methods,return,async,attributes,those,will,be,added,to,the,model,as,is,and,without,waiting,for,them,to,be,resolved,param,binding,context,the,binding,context,with,the,default,model,param,attribute,methods,the,code,model,attribute,methods,param,exchange,the,current,exchange,return,a,code,mono,for,when,the,model,is,populated;suppress,warnings,convert2method,ref,public,mono,void,init,model,binding,context,binding,context,list,invocable,handler,method,attribute,methods,server,web,exchange,exchange,list,mono,handler,result,result,list,new,array,list,attribute,methods,for,each,invocable,result,list,add,invocable,invoke,exchange,binding,context,return,mono,zip,result,list,object,array,return,arrays,stream,object,array,map,object,handler,result,object,map,handler,result,handle,result,handler,result,binding,context,collect,collectors,to,list,flat,map,completion,list,mono,when,completion,list
ModelInitializer -> @SuppressWarnings("Convert2MethodRef") 	public Mono<Void> initModel(BindingContext bindingContext, 			List<InvocableHandlerMethod> attributeMethods, ServerWebExchange exchange);1504993259;Initialize the default model in the given {@code BindingContext} through_the {@code @ModelAttribute} methods and indicate when complete._<p>This will wait for {@code @ModelAttribute} methods that return_{@code Mono<Void>} since those may be adding attributes asynchronously._However if methods return async attributes, those will be added to the_model as-is and without waiting for them to be resolved._@param bindingContext the BindingContext with the default model_@param attributeMethods the {@code @ModelAttribute} methods_@param exchange the current exchange_@return a {@code Mono} for when the model is populated.;@SuppressWarnings("Convert2MethodRef")_	public Mono<Void> initModel(BindingContext bindingContext,_			List<InvocableHandlerMethod> attributeMethods, ServerWebExchange exchange) {__		List<Mono<HandlerResult>> resultList = new ArrayList<>()__		attributeMethods.forEach(invocable -> resultList.add(invocable.invoke(exchange, bindingContext)))___		return Mono_				.zip(resultList, objectArray -> {_					return Arrays.stream(objectArray)_							.map(object -> handleResult(((HandlerResult) object), bindingContext))_							.collect(Collectors.toList())__				})_				.flatMap(completionList -> Mono.when(completionList))__	};initialize,the,default,model,in,the,given,code,binding,context,through,the,code,model,attribute,methods,and,indicate,when,complete,p,this,will,wait,for,code,model,attribute,methods,that,return,code,mono,void,since,those,may,be,adding,attributes,asynchronously,however,if,methods,return,async,attributes,those,will,be,added,to,the,model,as,is,and,without,waiting,for,them,to,be,resolved,param,binding,context,the,binding,context,with,the,default,model,param,attribute,methods,the,code,model,attribute,methods,param,exchange,the,current,exchange,return,a,code,mono,for,when,the,model,is,populated;suppress,warnings,convert2method,ref,public,mono,void,init,model,binding,context,binding,context,list,invocable,handler,method,attribute,methods,server,web,exchange,exchange,list,mono,handler,result,result,list,new,array,list,attribute,methods,for,each,invocable,result,list,add,invocable,invoke,exchange,binding,context,return,mono,zip,result,list,object,array,return,arrays,stream,object,array,map,object,handle,result,handler,result,object,binding,context,collect,collectors,to,list,flat,map,completion,list,mono,when,completion,list
ModelInitializer -> private List<String> findModelAttributes(HandlerMethod handlerMethod, 			SessionAttributesHandler sessionAttributesHandler);1504993259;Find {@code @ModelAttribute} arguments also listed as {@code @SessionAttributes}.;private List<String> findModelAttributes(HandlerMethod handlerMethod,_			SessionAttributesHandler sessionAttributesHandler) {__		List<String> result = new ArrayList<>()__		for (MethodParameter parameter : handlerMethod.getMethodParameters()) {_			if (parameter.hasParameterAnnotation(ModelAttribute.class)) {_				String name = getNameForParameter(parameter)__				Class<?> paramType = parameter.getParameterType()__				if (sessionAttributesHandler.isHandlerSessionAttribute(name, paramType)) {_					result.add(name)__				}_			}_		}_		return result__	};find,code,model,attribute,arguments,also,listed,as,code,session,attributes;private,list,string,find,model,attributes,handler,method,handler,method,session,attributes,handler,session,attributes,handler,list,string,result,new,array,list,for,method,parameter,parameter,handler,method,get,method,parameters,if,parameter,has,parameter,annotation,model,attribute,class,string,name,get,name,for,parameter,parameter,class,param,type,parameter,get,parameter,type,if,session,attributes,handler,is,handler,session,attribute,name,param,type,result,add,name,return,result
ModelInitializer -> private List<String> findModelAttributes(HandlerMethod handlerMethod, 			SessionAttributesHandler sessionAttributesHandler);1505136703;Find {@code @ModelAttribute} arguments also listed as {@code @SessionAttributes}.;private List<String> findModelAttributes(HandlerMethod handlerMethod,_			SessionAttributesHandler sessionAttributesHandler) {__		List<String> result = new ArrayList<>()__		for (MethodParameter parameter : handlerMethod.getMethodParameters()) {_			if (parameter.hasParameterAnnotation(ModelAttribute.class)) {_				String name = getNameForParameter(parameter)__				Class<?> paramType = parameter.getParameterType()__				if (sessionAttributesHandler.isHandlerSessionAttribute(name, paramType)) {_					result.add(name)__				}_			}_		}_		return result__	};find,code,model,attribute,arguments,also,listed,as,code,session,attributes;private,list,string,find,model,attributes,handler,method,handler,method,session,attributes,handler,session,attributes,handler,list,string,result,new,array,list,for,method,parameter,parameter,handler,method,get,method,parameters,if,parameter,has,parameter,annotation,model,attribute,class,string,name,get,name,for,parameter,parameter,class,param,type,parameter,get,parameter,type,if,session,attributes,handler,is,handler,session,attribute,name,param,type,result,add,name,return,result
ModelInitializer -> private List<String> findModelAttributes(HandlerMethod handlerMethod, 			SessionAttributesHandler sessionAttributesHandler);1520542144;Find {@code @ModelAttribute} arguments also listed as {@code @SessionAttributes}.;private List<String> findModelAttributes(HandlerMethod handlerMethod,_			SessionAttributesHandler sessionAttributesHandler) {__		List<String> result = new ArrayList<>()__		for (MethodParameter parameter : handlerMethod.getMethodParameters()) {_			if (parameter.hasParameterAnnotation(ModelAttribute.class)) {_				String name = getNameForParameter(parameter)__				Class<?> paramType = parameter.getParameterType()__				if (sessionAttributesHandler.isHandlerSessionAttribute(name, paramType)) {_					result.add(name)__				}_			}_		}_		return result__	};find,code,model,attribute,arguments,also,listed,as,code,session,attributes;private,list,string,find,model,attributes,handler,method,handler,method,session,attributes,handler,session,attributes,handler,list,string,result,new,array,list,for,method,parameter,parameter,handler,method,get,method,parameters,if,parameter,has,parameter,annotation,model,attribute,class,string,name,get,name,for,parameter,parameter,class,param,type,parameter,get,parameter,type,if,session,attributes,handler,is,handler,session,attribute,name,param,type,result,add,name,return,result
ModelInitializer -> private List<String> findModelAttributes(HandlerMethod handlerMethod, 			SessionAttributesHandler sessionAttributesHandler);1533034998;Find {@code @ModelAttribute} arguments also listed as {@code @SessionAttributes}.;private List<String> findModelAttributes(HandlerMethod handlerMethod,_			SessionAttributesHandler sessionAttributesHandler) {__		List<String> result = new ArrayList<>()__		for (MethodParameter parameter : handlerMethod.getMethodParameters()) {_			if (parameter.hasParameterAnnotation(ModelAttribute.class)) {_				String name = getNameForParameter(parameter)__				Class<?> paramType = parameter.getParameterType()__				if (sessionAttributesHandler.isHandlerSessionAttribute(name, paramType)) {_					result.add(name)__				}_			}_		}_		return result__	};find,code,model,attribute,arguments,also,listed,as,code,session,attributes;private,list,string,find,model,attributes,handler,method,handler,method,session,attributes,handler,session,attributes,handler,list,string,result,new,array,list,for,method,parameter,parameter,handler,method,get,method,parameters,if,parameter,has,parameter,annotation,model,attribute,class,string,name,get,name,for,parameter,parameter,class,param,type,parameter,get,parameter,type,if,session,attributes,handler,is,handler,session,attribute,name,param,type,result,add,name,return,result
ModelInitializer -> private List<String> findModelAttributes(HandlerMethod handlerMethod, 			SessionAttributesHandler sessionAttributesHandler);1542050977;Find {@code @ModelAttribute} arguments also listed as {@code @SessionAttributes}.;private List<String> findModelAttributes(HandlerMethod handlerMethod,_			SessionAttributesHandler sessionAttributesHandler) {__		List<String> result = new ArrayList<>()__		for (MethodParameter parameter : handlerMethod.getMethodParameters()) {_			if (parameter.hasParameterAnnotation(ModelAttribute.class)) {_				String name = getNameForParameter(parameter)__				Class<?> paramType = parameter.getParameterType()__				if (sessionAttributesHandler.isHandlerSessionAttribute(name, paramType)) {_					result.add(name)__				}_			}_		}_		return result__	};find,code,model,attribute,arguments,also,listed,as,code,session,attributes;private,list,string,find,model,attributes,handler,method,handler,method,session,attributes,handler,session,attributes,handler,list,string,result,new,array,list,for,method,parameter,parameter,handler,method,get,method,parameters,if,parameter,has,parameter,annotation,model,attribute,class,string,name,get,name,for,parameter,parameter,class,param,type,parameter,get,parameter,type,if,session,attributes,handler,is,handler,session,attribute,name,param,type,result,add,name,return,result
ModelInitializer -> public static String getNameForParameter(MethodParameter parameter);1504993259;Derive the model attribute name for the given method parameter based on_a {@code @ModelAttribute} parameter annotation (if present) or falling_back on parameter type based conventions._@param parameter a descriptor for the method parameter_@return the derived name_@see Conventions#getVariableNameForParameter(MethodParameter);public static String getNameForParameter(MethodParameter parameter) {_		ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class)__		String name = (ann != null ? ann.value() : null)__		return (StringUtils.hasText(name) ? name : Conventions.getVariableNameForParameter(parameter))__	};derive,the,model,attribute,name,for,the,given,method,parameter,based,on,a,code,model,attribute,parameter,annotation,if,present,or,falling,back,on,parameter,type,based,conventions,param,parameter,a,descriptor,for,the,method,parameter,return,the,derived,name,see,conventions,get,variable,name,for,parameter,method,parameter;public,static,string,get,name,for,parameter,method,parameter,parameter,model,attribute,ann,parameter,get,parameter,annotation,model,attribute,class,string,name,ann,null,ann,value,null,return,string,utils,has,text,name,name,conventions,get,variable,name,for,parameter,parameter
ModelInitializer -> public static String getNameForParameter(MethodParameter parameter);1505136703;Derive the model attribute name for the given method parameter based on_a {@code @ModelAttribute} parameter annotation (if present) or falling_back on parameter type based conventions._@param parameter a descriptor for the method parameter_@return the derived name_@see Conventions#getVariableNameForParameter(MethodParameter);public static String getNameForParameter(MethodParameter parameter) {_		ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class)__		String name = (ann != null ? ann.value() : null)__		return (StringUtils.hasText(name) ? name : Conventions.getVariableNameForParameter(parameter))__	};derive,the,model,attribute,name,for,the,given,method,parameter,based,on,a,code,model,attribute,parameter,annotation,if,present,or,falling,back,on,parameter,type,based,conventions,param,parameter,a,descriptor,for,the,method,parameter,return,the,derived,name,see,conventions,get,variable,name,for,parameter,method,parameter;public,static,string,get,name,for,parameter,method,parameter,parameter,model,attribute,ann,parameter,get,parameter,annotation,model,attribute,class,string,name,ann,null,ann,value,null,return,string,utils,has,text,name,name,conventions,get,variable,name,for,parameter,parameter
ModelInitializer -> public static String getNameForParameter(MethodParameter parameter);1520542144;Derive the model attribute name for the given method parameter based on_a {@code @ModelAttribute} parameter annotation (if present) or falling_back on parameter type based conventions._@param parameter a descriptor for the method parameter_@return the derived name_@see Conventions#getVariableNameForParameter(MethodParameter);public static String getNameForParameter(MethodParameter parameter) {_		ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class)__		String name = (ann != null ? ann.value() : null)__		return (StringUtils.hasText(name) ? name : Conventions.getVariableNameForParameter(parameter))__	};derive,the,model,attribute,name,for,the,given,method,parameter,based,on,a,code,model,attribute,parameter,annotation,if,present,or,falling,back,on,parameter,type,based,conventions,param,parameter,a,descriptor,for,the,method,parameter,return,the,derived,name,see,conventions,get,variable,name,for,parameter,method,parameter;public,static,string,get,name,for,parameter,method,parameter,parameter,model,attribute,ann,parameter,get,parameter,annotation,model,attribute,class,string,name,ann,null,ann,value,null,return,string,utils,has,text,name,name,conventions,get,variable,name,for,parameter,parameter
ModelInitializer -> public static String getNameForParameter(MethodParameter parameter);1533034998;Derive the model attribute name for the given method parameter based on_a {@code @ModelAttribute} parameter annotation (if present) or falling_back on parameter type based conventions._@param parameter a descriptor for the method parameter_@return the derived name_@see Conventions#getVariableNameForParameter(MethodParameter);public static String getNameForParameter(MethodParameter parameter) {_		ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class)__		String name = (ann != null ? ann.value() : null)__		return (StringUtils.hasText(name) ? name : Conventions.getVariableNameForParameter(parameter))__	};derive,the,model,attribute,name,for,the,given,method,parameter,based,on,a,code,model,attribute,parameter,annotation,if,present,or,falling,back,on,parameter,type,based,conventions,param,parameter,a,descriptor,for,the,method,parameter,return,the,derived,name,see,conventions,get,variable,name,for,parameter,method,parameter;public,static,string,get,name,for,parameter,method,parameter,parameter,model,attribute,ann,parameter,get,parameter,annotation,model,attribute,class,string,name,ann,null,ann,value,null,return,string,utils,has,text,name,name,conventions,get,variable,name,for,parameter,parameter
ModelInitializer -> public static String getNameForParameter(MethodParameter parameter);1542050977;Derive the model attribute name for the given method parameter based on_a {@code @ModelAttribute} parameter annotation (if present) or falling_back on parameter type based conventions._@param parameter a descriptor for the method parameter_@return the derived name_@see Conventions#getVariableNameForParameter(MethodParameter);public static String getNameForParameter(MethodParameter parameter) {_		ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class)__		String name = (ann != null ? ann.value() : null)__		return (StringUtils.hasText(name) ? name : Conventions.getVariableNameForParameter(parameter))__	};derive,the,model,attribute,name,for,the,given,method,parameter,based,on,a,code,model,attribute,parameter,annotation,if,present,or,falling,back,on,parameter,type,based,conventions,param,parameter,a,descriptor,for,the,method,parameter,return,the,derived,name,see,conventions,get,variable,name,for,parameter,method,parameter;public,static,string,get,name,for,parameter,method,parameter,parameter,model,attribute,ann,parameter,get,parameter,annotation,model,attribute,class,string,name,ann,null,ann,value,null,return,string,utils,has,text,name,name,conventions,get,variable,name,for,parameter,parameter
