commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the {@link SessionStatus} instance to use that can be used to  * signal that session processing is complete.  */ ;/**  * Return the {@link SessionStatus} instance to use that can be used to  * signal that session processing is complete.  */ public SessionStatus getSessionStatus() {     return this.sessionStatus. }
false;protected;2;14;;@Override protected WebExchangeDataBinder initDataBinder(WebExchangeDataBinder dataBinder, ServerWebExchange exchange) {     this.binderMethods.stream().filter(binderMethod -> {         InitBinder ann = binderMethod.getMethodAnnotation(InitBinder.class).         Assert.state(ann != null, "No InitBinder annotation").         String[] names = ann.value().         return (ObjectUtils.isEmpty(names) || ObjectUtils.containsElement(names, dataBinder.getObjectName())).     }).forEach(method -> invokeBinderMethod(dataBinder, exchange, method)).     return dataBinder. }
false;private;3;14;;private void invokeBinderMethod(WebExchangeDataBinder dataBinder, ServerWebExchange exchange, SyncInvocableHandlerMethod binderMethod) {     HandlerResult result = binderMethod.invokeForHandlerResult(exchange, this.binderMethodContext, dataBinder).     if (result != null && result.getReturnValue() != null) {         throw new IllegalStateException("@InitBinder methods must not return a value (should be void): " + binderMethod).     }     // Should not happen (no Model argument resolution) ...     if (!this.binderMethodContext.getModel().asMap().isEmpty()) {         throw new IllegalStateException("@InitBinder methods are not allowed to add model attributes: " + binderMethod).     } }
true;public;2;10;/**  * Provide the context required to apply {@link #saveModel()} after the  * controller method has been invoked.  */ ;/**  * Provide the context required to apply {@link #saveModel()} after the  * controller method has been invoked.  */ public void setSessionContext(SessionAttributesHandler attributesHandler, WebSession session) {     this.saveModelOperation = () -> {         if (getSessionStatus().isComplete()) {             attributesHandler.cleanupAttributes(session).         } else {             attributesHandler.storeAttributes(session, getModel().asMap()).         }     }. }
true;public;0;5;/**  * Save model attributes in the session based on a type-level declarations  * in an {@code @SessionAttributes} annotation.  */ ;/**  * Save model attributes in the session based on a type-level declarations  * in an {@code @SessionAttributes} annotation.  */ public void saveModel() {     if (this.saveModelOperation != null) {         this.saveModelOperation.run().     } }
