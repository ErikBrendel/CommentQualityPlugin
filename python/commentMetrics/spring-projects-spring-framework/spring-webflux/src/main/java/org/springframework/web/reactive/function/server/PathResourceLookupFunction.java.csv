commented;modifiers;parameterAmount;loc;comment;code
false;public;1;29;;@Override public Mono<Resource> apply(ServerRequest request) {     PathContainer pathContainer = request.pathContainer().     if (!this.pattern.matches(pathContainer)) {         return Mono.empty().     }     pathContainer = this.pattern.extractPathWithinPattern(pathContainer).     String path = processPath(pathContainer.value()).     if (path.contains("%")) {         path = StringUtils.uriDecode(path, StandardCharsets.UTF_8).     }     if (!StringUtils.hasLength(path) || isInvalidPath(path)) {         return Mono.empty().     }     try {         Resource resource = this.location.createRelative(path).         if (resource.exists() && resource.isReadable() && isResourceUnderLocation(resource)) {             return Mono.just(resource).         } else {             return Mono.empty().         }     } catch (IOException ex) {         throw new UncheckedIOException(ex).     } }
false;private;1;16;;private String processPath(String path) {     boolean slash = false.     for (int i = 0. i < path.length(). i++) {         if (path.charAt(i) == '/') {             slash = true.         } else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {             if (i == 0 || (i == 1 && slash)) {                 return path.             }             path = slash ? "/" + path.substring(i) : path.substring(i).             return path.         }     }     return (slash ? "/" : ""). }
false;private;1;15;;private boolean isInvalidPath(String path) {     if (path.contains("WEB-INF") || path.contains("META-INF")) {         return true.     }     if (path.contains(":/")) {         String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path).         if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {             return true.         }     }     if (path.contains("..") && StringUtils.cleanPath(path).contains("../")) {         return true.     }     return false. }
false;private;1;33;;private boolean isResourceUnderLocation(Resource resource) throws IOException {     if (resource.getClass() != this.location.getClass()) {         return false.     }     String resourcePath.     String locationPath.     if (resource instanceof UrlResource) {         resourcePath = resource.getURL().toExternalForm().         locationPath = StringUtils.cleanPath(this.location.getURL().toString()).     } else if (resource instanceof ClassPathResource) {         resourcePath = ((ClassPathResource) resource).getPath().         locationPath = StringUtils.cleanPath(((ClassPathResource) this.location).getPath()).     } else {         resourcePath = resource.getURL().getPath().         locationPath = StringUtils.cleanPath(this.location.getURL().getPath()).     }     if (locationPath.equals(resourcePath)) {         return true.     }     locationPath = (locationPath.endsWith("/") || locationPath.isEmpty() ? locationPath : locationPath + "/").     if (!resourcePath.startsWith(locationPath)) {         return false.     }     if (resourcePath.contains("%") && StringUtils.uriDecode(resourcePath, StandardCharsets.UTF_8).contains("../")) {         return false.     }     return true. }
false;public;0;4;;@Override public String toString() {     return this.pattern + " -> " + this.location. }
