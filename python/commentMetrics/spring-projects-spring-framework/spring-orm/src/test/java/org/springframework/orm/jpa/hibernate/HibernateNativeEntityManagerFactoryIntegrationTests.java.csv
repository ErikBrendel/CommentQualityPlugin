commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;5;;@Override protected String[] getConfigLocations() {     return new String[] { "/org/springframework/orm/jpa/hibernate/hibernate-manager-native.xml", "/org/springframework/orm/jpa/memdb.xml", "/org/springframework/orm/jpa/inject.xml" }. }
false;public;0;4;;@Test public void testEntityManagerFactoryImplementsEntityManagerFactoryInfo() {     assertFalse("Must not have introduced config interface", entityManagerFactory instanceof EntityManagerFactoryInfo). }
false;public;0;11;;@Test @SuppressWarnings("unchecked") public void testEntityListener() {     String firstName = "Tony".     insertPerson(firstName).     List<Person> people = sharedEntityManager.createQuery("select p from Person as p").getResultList().     assertEquals(1, people.size()).     assertEquals(firstName, people.get(0).getFirstName()).     assertSame(applicationContext, people.get(0).postLoaded). }
false;public;0;12;;@Test @SuppressWarnings({ "unchecked", "rawtypes" }) public void testCurrentSession() {     String firstName = "Tony".     insertPerson(firstName).     Query q = sessionFactory.getCurrentSession().createQuery("select p from Person as p").     List<Person> people = q.getResultList().     assertEquals(1, people.size()).     assertEquals(firstName, people.get(0).getFirstName()).     assertSame(applicationContext, people.get(0).postLoaded). }
false;public;0;11;;// SPR-16956 @Test public void testReadOnly() {     assertSame(FlushMode.AUTO, sessionFactory.getCurrentSession().getHibernateFlushMode()).     assertFalse(sessionFactory.getCurrentSession().isDefaultReadOnly()).     endTransaction().     this.transactionDefinition.setReadOnly(true).     startNewTransaction().     assertSame(FlushMode.MANUAL, sessionFactory.getCurrentSession().getHibernateFlushMode()).     assertTrue(sessionFactory.getCurrentSession().isDefaultReadOnly()). }
