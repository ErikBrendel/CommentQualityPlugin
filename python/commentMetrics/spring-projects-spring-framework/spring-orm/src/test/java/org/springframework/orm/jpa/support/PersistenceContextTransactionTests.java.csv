commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;4;;@Override protected EntityManagerFactory findEntityManagerFactory(@Nullable String unitName, String requestingBeanName) {     return factory. }
false;public;0;26;;@Before public void setup() {     factory = mock(EntityManagerFactory.class).     manager = mock(EntityManager.class).     tx = mock(EntityTransaction.class).     JpaTransactionManager tm = new JpaTransactionManager(factory).     tt = new TransactionTemplate(tm).     given(factory.createEntityManager()).willReturn(manager).     given(manager.getTransaction()).willReturn(tx).     given(manager.isOpen()).willReturn(true).     bean = new EntityManagerHoldingBean().     @SuppressWarnings("serial")     PersistenceAnnotationBeanPostProcessor pabpp = new PersistenceAnnotationBeanPostProcessor() {          @Override         protected EntityManagerFactory findEntityManagerFactory(@Nullable String unitName, String requestingBeanName) {             return factory.         }     }.     pabpp.postProcessProperties(null, bean, "bean").     assertTrue(TransactionSynchronizationManager.getResourceMap().isEmpty()).     assertFalse(TransactionSynchronizationManager.isSynchronizationActive()). }
false;public;0;7;;@After public void clear() {     assertTrue(TransactionSynchronizationManager.getResourceMap().isEmpty()).     assertFalse(TransactionSynchronizationManager.isSynchronizationActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     assertFalse(TransactionSynchronizationManager.isActualTransactionActive()). }
false;public;0;13;;@Test public void testTransactionCommitWithSharedEntityManager() {     given(manager.getTransaction()).willReturn(tx).     tt.execute(status -> {         bean.sharedEntityManager.flush().         return null.     }).     verify(tx).commit().     verify(manager).flush().     verify(manager).close(). }
false;public;0;14;;@Test public void testTransactionCommitWithSharedEntityManagerAndPropagationSupports() {     given(manager.isOpen()).willReturn(true).     tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_SUPPORTS).     tt.execute(status -> {         bean.sharedEntityManager.clear().         return null.     }).     verify(manager).clear().     verify(manager).close(). }
false;public;0;13;;@Test public void testTransactionCommitWithExtendedEntityManager() {     given(manager.getTransaction()).willReturn(tx).     tt.execute(status -> {         bean.extendedEntityManager.flush().         return null.     }).     verify(tx, times(2)).commit().     verify(manager).flush().     verify(manager).close(). }
false;public;0;13;;@Test public void testTransactionCommitWithExtendedEntityManagerAndPropagationSupports() {     given(manager.isOpen()).willReturn(true).     tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_SUPPORTS).     tt.execute(status -> {         bean.extendedEntityManager.flush().         return null.     }).     verify(manager).flush(). }
false;public;0;13;;@Test public void testTransactionCommitWithSharedEntityManagerUnsynchronized() {     given(manager.getTransaction()).willReturn(tx).     tt.execute(status -> {         bean.sharedEntityManagerUnsynchronized.flush().         return null.     }).     verify(tx).commit().     verify(manager).flush().     verify(manager, times(2)).close(). }
false;public;0;14;;@Test public void testTransactionCommitWithSharedEntityManagerUnsynchronizedAndPropagationSupports() {     given(manager.isOpen()).willReturn(true).     tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_SUPPORTS).     tt.execute(status -> {         bean.sharedEntityManagerUnsynchronized.clear().         return null.     }).     verify(manager).clear().     verify(manager).close(). }
false;public;0;13;;@Test public void testTransactionCommitWithExtendedEntityManagerUnsynchronized() {     given(manager.getTransaction()).willReturn(tx).     tt.execute(status -> {         bean.extendedEntityManagerUnsynchronized.flush().         return null.     }).     verify(tx).commit().     verify(manager).flush().     verify(manager).close(). }
false;public;0;13;;@Test public void testTransactionCommitWithExtendedEntityManagerUnsynchronizedAndPropagationSupports() {     given(manager.isOpen()).willReturn(true).     tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_SUPPORTS).     tt.execute(status -> {         bean.extendedEntityManagerUnsynchronized.flush().         return null.     }).     verify(manager).flush(). }
false;public;0;14;;@Test public void testTransactionCommitWithSharedEntityManagerUnsynchronizedJoined() {     given(manager.getTransaction()).willReturn(tx).     tt.execute(status -> {         bean.sharedEntityManagerUnsynchronized.joinTransaction().         bean.sharedEntityManagerUnsynchronized.flush().         return null.     }).     verify(tx).commit().     verify(manager).flush().     verify(manager, times(2)).close(). }
false;public;0;14;;@Test public void testTransactionCommitWithExtendedEntityManagerUnsynchronizedJoined() {     given(manager.getTransaction()).willReturn(tx).     tt.execute(status -> {         bean.extendedEntityManagerUnsynchronized.joinTransaction().         bean.extendedEntityManagerUnsynchronized.flush().         return null.     }).     verify(tx, times(2)).commit().     verify(manager).flush().     verify(manager).close(). }
false;public;0;14;;@Test public void testTransactionCommitWithExtendedEntityManagerUnsynchronizedJoinedAndPropagationSupports() {     given(manager.isOpen()).willReturn(true).     tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_SUPPORTS).     tt.execute(status -> {         bean.extendedEntityManagerUnsynchronized.joinTransaction().         bean.extendedEntityManagerUnsynchronized.flush().         return null.     }).     verify(manager).flush(). }
