commented;modifiers;parameterAmount;loc;comment;code
true;public;0;16;/* 	 * Test method for 	 * 'org.springframework.orm.jpa.EntityManagerFactoryUtils.doGetEntityManager(EntityManagerFactory)' 	 */ ;/* 	 * Test method for 	 * 'org.springframework.orm.jpa.EntityManagerFactoryUtils.doGetEntityManager(EntityManagerFactory)' 	 */ @Test public void testDoGetEntityManager() {     // test null assertion     try {         EntityManagerFactoryUtils.doGetTransactionalEntityManager(null, null).         fail("expected exception").     } catch (IllegalArgumentException ex) {     // it's okay     }     EntityManagerFactory factory = mock(EntityManagerFactory.class).     // no tx active     assertNull(EntityManagerFactoryUtils.doGetTransactionalEntityManager(factory, null)).     assertTrue(TransactionSynchronizationManager.getResourceMap().isEmpty()). }
false;public;0;19;;@Test public void testDoGetEntityManagerWithTx() throws Exception {     try {         EntityManagerFactory factory = mock(EntityManagerFactory.class).         EntityManager manager = mock(EntityManager.class).         TransactionSynchronizationManager.initSynchronization().         given(factory.createEntityManager()).willReturn(manager).         // no tx active         assertSame(manager, EntityManagerFactoryUtils.doGetTransactionalEntityManager(factory, null)).         assertSame(manager, ((EntityManagerHolder) TransactionSynchronizationManager.unbindResource(factory)).getEntityManager()).     } finally {         TransactionSynchronizationManager.clearSynchronization().     }     assertTrue(TransactionSynchronizationManager.getResourceMap().isEmpty()). }
false;public;0;7;;@Test public void testTranslatesIllegalStateException() {     IllegalStateException ise = new IllegalStateException().     DataAccessException dex = EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ise).     assertSame(ise, dex.getCause()).     assertTrue(dex instanceof InvalidDataAccessApiUsageException). }
false;public;0;7;;@Test public void testTranslatesIllegalArgumentException() {     IllegalArgumentException iae = new IllegalArgumentException().     DataAccessException dex = EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(iae).     assertSame(iae, dex.getCause()).     assertTrue(dex instanceof InvalidDataAccessApiUsageException). }
true;public;0;7;/**  * We do not convert unknown exceptions. They may result from user code.  */ ;/**  * We do not convert unknown exceptions. They may result from user code.  */ @Test public void testDoesNotTranslateUnfamiliarException() {     UnsupportedOperationException userRuntimeException = new UnsupportedOperationException().     assertNull("Exception should not be wrapped", EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(userRuntimeException)). }
true;public;0;32;/* 	 * Test method for 	 * 'org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessException(PersistenceException)' 	 */ ;/* 	 * Test method for 	 * 'org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessException(PersistenceException)' 	 */ @Test @SuppressWarnings("serial") public void testConvertJpaPersistenceException() {     EntityNotFoundException entityNotFound = new EntityNotFoundException().     assertSame(JpaObjectRetrievalFailureException.class, EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(entityNotFound).getClass()).     NoResultException noResult = new NoResultException().     assertSame(EmptyResultDataAccessException.class, EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(noResult).getClass()).     NonUniqueResultException nonUniqueResult = new NonUniqueResultException().     assertSame(IncorrectResultSizeDataAccessException.class, EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(nonUniqueResult).getClass()).     OptimisticLockException optimisticLock = new OptimisticLockException().     assertSame(JpaOptimisticLockingFailureException.class, EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(optimisticLock).getClass()).     EntityExistsException entityExists = new EntityExistsException("foo").     assertSame(DataIntegrityViolationException.class, EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(entityExists).getClass()).     TransactionRequiredException transactionRequired = new TransactionRequiredException("foo").     assertSame(InvalidDataAccessApiUsageException.class, EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(transactionRequired).getClass()).     PersistenceException unknown = new PersistenceException() {     }.     assertSame(JpaSystemException.class, EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(unknown).getClass()). }
