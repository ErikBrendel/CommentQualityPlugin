commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Autowired public void setEntityManagerFactory(EntityManagerFactory entityManagerFactory) {     this.entityManagerFactory = entityManagerFactory.     this.sharedEntityManager = SharedEntityManagerCreator.createSharedEntityManager(this.entityManagerFactory). }
false;public;1;4;;@Autowired public void setTransactionManager(PlatformTransactionManager transactionManager) {     this.transactionManager = transactionManager. }
false;public;1;4;;@Autowired public void setDataSource(DataSource dataSource) {     this.jdbcTemplate = new JdbcTemplate(dataSource). }
false;public;0;11;;@Before public void setup() {     if (applicationContext == null) {         applicationContext = new ClassPathXmlApplicationContext(getConfigLocations()).     }     applicationContext.getAutowireCapableBeanFactory().autowireBean(this).     if (this.transactionManager != null && this.transactionDefinition != null) {         startNewTransaction().     } }
false;protected;0;3;;protected String[] getConfigLocations() {     return ECLIPSELINK_CONFIG_LOCATIONS. }
false;public;0;11;;@After public void cleanup() {     if (this.transactionStatus != null && !this.transactionStatus.isCompleted()) {         endTransaction().     }     assertTrue(TransactionSynchronizationManager.getResourceMap().isEmpty()).     assertFalse(TransactionSynchronizationManager.isSynchronizationActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     assertFalse(TransactionSynchronizationManager.isActualTransactionActive()). }
false;public,static;0;7;;@AfterClass public static void closeContext() {     if (applicationContext != null) {         applicationContext.close().         applicationContext = null.     } }
false;protected;0;3;;protected EntityManager createContainerManagedEntityManager() {     return ExtendedEntityManagerCreator.createContainerManagedEntityManager(this.entityManagerFactory). }
false;protected;0;9;;protected void setComplete() {     if (this.transactionManager == null) {         throw new IllegalStateException("No transaction manager set").     }     if (this.zappedTables) {         throw new IllegalStateException("Cannot set complete after deleting tables").     }     this.complete = true. }
false;protected;0;16;;protected void endTransaction() {     final boolean commit = this.complete.     if (this.transactionStatus != null) {         try {             if (commit) {                 this.transactionManager.commit(this.transactionStatus).             } else {                 this.transactionManager.rollback(this.transactionStatus).             }         } finally {             this.transactionStatus = null.         }     } }
false;protected;0;3;;protected void startNewTransaction() throws TransactionException {     this.transactionStatus = this.transactionManager.getTransaction(this.transactionDefinition). }
false;protected;1;6;;protected void deleteFromTables(String... tableNames) {     for (String tableName : tableNames) {         this.jdbcTemplate.update("DELETE FROM " + tableName).     }     this.zappedTables = true. }
false;protected;2;4;;protected int countRowsInTable(EntityManager em, String tableName) {     Query query = em.createNativeQuery("SELECT COUNT(0) FROM " + tableName).     return ((Number) query.getSingleResult()).intValue(). }
false;protected;1;3;;protected int countRowsInTable(String tableName) {     return this.jdbcTemplate.queryForObject("SELECT COUNT(0) FROM " + tableName, Integer.class). }
false;protected;1;4;;protected void executeSqlScript(String sqlResourcePath) throws DataAccessException {     Resource resource = applicationContext.getResource(sqlResourcePath).     new ResourceDatabasePopulator(resource).execute(this.jdbcTemplate.getDataSource()). }
