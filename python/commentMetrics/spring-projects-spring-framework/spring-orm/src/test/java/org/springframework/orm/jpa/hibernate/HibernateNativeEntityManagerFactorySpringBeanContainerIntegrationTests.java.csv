commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected String[] getConfigLocations() {     return new String[] { "/org/springframework/orm/jpa/hibernate/hibernate-manager-native.xml", "/org/springframework/orm/jpa/memdb.xml", "/org/springframework/orm/jpa/inject.xml", "/org/springframework/orm/jpa/hibernate/inject-hibernate-spring-bean-container-tests.xml" }. }
false;private;0;5;;private ManagedBeanRegistry getManagedBeanRegistry() {     SessionFactory sessionFactory = entityManagerFactory.unwrap(SessionFactory.class).     ServiceRegistry serviceRegistry = sessionFactory.getSessionFactoryOptions().getServiceRegistry().     return serviceRegistry.requireService(ManagedBeanRegistry.class). }
false;private;0;3;;private BeanContainer getBeanContainer() {     return getManagedBeanRegistry().getBeanContainer(). }
false;public;0;16;;@Test public void testCanRetrieveBeanByTypeWithJpaCompliantOptions() {     BeanContainer beanContainer = getBeanContainer().     assertNotNull(beanContainer).     ContainedBean<SinglePrototypeInSpringContextTestBean> bean = beanContainer.getBean(SinglePrototypeInSpringContextTestBean.class, JpaLifecycleOptions.INSTANCE, IneffectiveBeanInstanceProducer.INSTANCE).     assertNotNull(bean).     SinglePrototypeInSpringContextTestBean instance = bean.getBeanInstance().     assertNotNull(instance).     assertSame(applicationContext, instance.getApplicationContext()). }
false;public;0;17;;@Test public void testCanRetrieveBeanByNameWithJpaCompliantOptions() {     BeanContainer beanContainer = getBeanContainer().     assertNotNull(beanContainer).     ContainedBean<MultiplePrototypesInSpringContextTestBean> bean = beanContainer.getBean("multiple-1", MultiplePrototypesInSpringContextTestBean.class, JpaLifecycleOptions.INSTANCE, IneffectiveBeanInstanceProducer.INSTANCE).     assertNotNull(bean).     MultiplePrototypesInSpringContextTestBean instance = bean.getBeanInstance().     assertNotNull(instance).     assertEquals("multiple-1", instance.getName()).     assertSame(applicationContext, instance.getApplicationContext()). }
false;public;0;29;;@Test public void testCanRetrieveBeanByTypeWithNativeOptions() {     BeanContainer beanContainer = getBeanContainer().     assertNotNull(beanContainer).     ContainedBean<SinglePrototypeInSpringContextTestBean> bean = beanContainer.getBean(SinglePrototypeInSpringContextTestBean.class, NativeLifecycleOptions.INSTANCE, IneffectiveBeanInstanceProducer.INSTANCE).     assertNotNull(bean).     SinglePrototypeInSpringContextTestBean instance = bean.getBeanInstance().     assertNotNull(instance).     assertEquals("single", instance.getName()).     assertSame(applicationContext, instance.getApplicationContext()).     ContainedBean<SinglePrototypeInSpringContextTestBean> bean2 = beanContainer.getBean(SinglePrototypeInSpringContextTestBean.class, NativeLifecycleOptions.INSTANCE, IneffectiveBeanInstanceProducer.INSTANCE).     assertNotNull(bean2).     SinglePrototypeInSpringContextTestBean instance2 = bean2.getBeanInstance().     assertNotNull(instance2).     // Due to the lifecycle options, and because the bean has the "prototype" scope, we should not return the same instance     assertNotSame(instance, instance2). }
false;public;0;29;;@Test public void testCanRetrieveBeanByNameWithNativeOptions() {     BeanContainer beanContainer = getBeanContainer().     assertNotNull(beanContainer).     ContainedBean<MultiplePrototypesInSpringContextTestBean> bean = beanContainer.getBean("multiple-1", MultiplePrototypesInSpringContextTestBean.class, NativeLifecycleOptions.INSTANCE, IneffectiveBeanInstanceProducer.INSTANCE).     assertNotNull(bean).     MultiplePrototypesInSpringContextTestBean instance = bean.getBeanInstance().     assertNotNull(instance).     assertEquals("multiple-1", instance.getName()).     assertSame(applicationContext, instance.getApplicationContext()).     ContainedBean<MultiplePrototypesInSpringContextTestBean> bean2 = beanContainer.getBean("multiple-1", MultiplePrototypesInSpringContextTestBean.class, NativeLifecycleOptions.INSTANCE, IneffectiveBeanInstanceProducer.INSTANCE).     assertNotNull(bean2).     MultiplePrototypesInSpringContextTestBean instance2 = bean2.getBeanInstance().     assertNotNull(instance2).     // Due to the lifecycle options, and because the bean has the "prototype" scope, we should not return the same instance     assertNotSame(instance, instance2). }
false;public;0;21;;@Test public void testCanRetrieveFallbackBeanByTypeWithJpaCompliantOptions() {     BeanContainer beanContainer = getBeanContainer().     assertNotNull(beanContainer).     NoDefinitionInSpringContextTestBeanInstanceProducer fallbackProducer = new NoDefinitionInSpringContextTestBeanInstanceProducer().     ContainedBean<NoDefinitionInSpringContextTestBean> bean = beanContainer.getBean(NoDefinitionInSpringContextTestBean.class, JpaLifecycleOptions.INSTANCE, fallbackProducer).     assertEquals(1, fallbackProducer.currentUnnamedInstantiationCount()).     assertEquals(0, fallbackProducer.currentNamedInstantiationCount()).     assertNotNull(bean).     NoDefinitionInSpringContextTestBean instance = bean.getBeanInstance().     assertNotNull(instance).     assertEquals(BeanSource.FALLBACK, instance.getSource()).     assertNull(instance.getApplicationContext()). }
false;public;0;22;;@Test public void testCanRetrieveFallbackBeanByNameWithJpaCompliantOptions() {     BeanContainer beanContainer = getBeanContainer().     assertNotNull(beanContainer).     NoDefinitionInSpringContextTestBeanInstanceProducer fallbackProducer = new NoDefinitionInSpringContextTestBeanInstanceProducer().     ContainedBean<NoDefinitionInSpringContextTestBean> bean = beanContainer.getBean("some name", NoDefinitionInSpringContextTestBean.class, JpaLifecycleOptions.INSTANCE, fallbackProducer).     assertEquals(0, fallbackProducer.currentUnnamedInstantiationCount()).     assertEquals(1, fallbackProducer.currentNamedInstantiationCount()).     assertNotNull(bean).     NoDefinitionInSpringContextTestBean instance = bean.getBeanInstance().     assertNotNull(instance).     assertEquals(BeanSource.FALLBACK, instance.getSource()).     assertEquals("some name", instance.getName()).     assertNull(instance.getApplicationContext()). }
false;public;0;21;;@Test public void testCanRetrieveFallbackBeanByTypeWithNativeOptions() {     BeanContainer beanContainer = getBeanContainer().     assertNotNull(beanContainer).     NoDefinitionInSpringContextTestBeanInstanceProducer fallbackProducer = new NoDefinitionInSpringContextTestBeanInstanceProducer().     ContainedBean<NoDefinitionInSpringContextTestBean> bean = beanContainer.getBean(NoDefinitionInSpringContextTestBean.class, NativeLifecycleOptions.INSTANCE, fallbackProducer).     assertEquals(1, fallbackProducer.currentUnnamedInstantiationCount()).     assertEquals(0, fallbackProducer.currentNamedInstantiationCount()).     assertNotNull(bean).     NoDefinitionInSpringContextTestBean instance = bean.getBeanInstance().     assertNotNull(instance).     assertEquals(BeanSource.FALLBACK, instance.getSource()).     assertNull(instance.getApplicationContext()). }
false;public;0;22;;@Test public void testCanRetrieveFallbackBeanByNameWithNativeOptions() {     BeanContainer beanContainer = getBeanContainer().     assertNotNull(beanContainer).     NoDefinitionInSpringContextTestBeanInstanceProducer fallbackProducer = new NoDefinitionInSpringContextTestBeanInstanceProducer().     ContainedBean<NoDefinitionInSpringContextTestBean> bean = beanContainer.getBean("some name", NoDefinitionInSpringContextTestBean.class, NativeLifecycleOptions.INSTANCE, fallbackProducer).     assertEquals(0, fallbackProducer.currentUnnamedInstantiationCount()).     assertEquals(1, fallbackProducer.currentNamedInstantiationCount()).     assertNotNull(bean).     NoDefinitionInSpringContextTestBean instance = bean.getBeanInstance().     assertNotNull(instance).     assertEquals(BeanSource.FALLBACK, instance.getSource()).     assertEquals("some name", instance.getName()).     assertNull(instance.getApplicationContext()). }
false;public;0;4;;@Override public boolean canUseCachedReferences() {     return true. }
false;public;0;4;;@Override public boolean useJpaCompliantCreation() {     return true. }
false;public;0;4;;@Override public boolean canUseCachedReferences() {     return false. }
false;public;0;4;;@Override public boolean useJpaCompliantCreation() {     return false. }
false;public;1;4;;@Override public <B> B produceBeanInstance(Class<B> aClass) {     throw new UnsupportedOperationException("should not be called"). }
false;public;2;4;;@Override public <B> B produceBeanInstance(String s, Class<B> aClass) {     throw new UnsupportedOperationException("should not be called"). }
false;public;1;15;;@Override public <B> B produceBeanInstance(Class<B> beanType) {     try {         ++unnamedInstantiationCount.         /* 				 * We only expect to ever be asked to instantiate this class, so we just cut corners here. 				 * A real-world implementation would obviously be different. 				 */         NoDefinitionInSpringContextTestBean instance = new NoDefinitionInSpringContextTestBean(null, BeanSource.FALLBACK).         return beanType.cast(instance).     } catch (RuntimeException e) {         throw new AssertionError("Unexpected error instantiating a bean by type using reflection", e).     } }
false;public;2;15;;@Override public <B> B produceBeanInstance(String name, Class<B> beanType) {     try {         ++namedInstantiationCount.         /* 				 * We only expect to ever be asked to instantiate this class, so we just cut corners here. 				 * A real-world implementation would obviously be different. 				 */         NoDefinitionInSpringContextTestBean instance = new NoDefinitionInSpringContextTestBean(name, BeanSource.FALLBACK).         return beanType.cast(instance).     } catch (RuntimeException e) {         throw new AssertionError("Unexpected error instantiating a bean by name using reflection", e).     } }
false;private;0;3;;private int currentUnnamedInstantiationCount() {     return unnamedInstantiationCount. }
false;private;0;3;;private int currentNamedInstantiationCount() {     return namedInstantiationCount. }
