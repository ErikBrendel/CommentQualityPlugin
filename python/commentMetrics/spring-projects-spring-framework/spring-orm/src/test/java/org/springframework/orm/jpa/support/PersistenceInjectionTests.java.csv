# id;timestamp;commentText;codeText;commentWords;codeWords
PersistenceInjectionTests -> public void testPropertiesForSharedEntityManager1();1328020251;Binds an EMF to the thread and tests if EM with different properties_generate new EMs or not.;public void testPropertiesForSharedEntityManager1() {_		Properties props = new Properties()__		props.put("foo", "bar")__		MockControl emC = MockControl.createControl(EntityManager.class)__		EntityManager em = (EntityManager) emC.getMock()__		_		emfMc.expectAndReturn(mockEmf.createEntityManager(props), em)__		emC.expectAndReturn(em.getDelegate(), new Object(), 2)__		emC.expectAndReturn(em.isOpen(), true)__		em.close()___		emfMc.replay()__		emC.replay()___		PersistenceAnnotationBeanPostProcessor babpp = new MockPersistenceAnnotationBeanPostProcessor()__		DefaultPrivatePersistenceContextFieldWithProperties transactionalFieldWithProperties =_				new DefaultPrivatePersistenceContextFieldWithProperties()__		DefaultPrivatePersistenceContextField transactionalField = new DefaultPrivatePersistenceContextField()___		babpp.postProcessPropertyValues(null, null, transactionalFieldWithProperties, null)__		babpp.postProcessPropertyValues(null, null, transactionalField, null)___		assertNotNull(transactionalFieldWithProperties.em)__		assertNotNull(transactionalField.em)__		_		assertNotNull(transactionalFieldWithProperties.em.getDelegate())__		_		try {_			TransactionSynchronizationManager.bindResource(mockEmf, new EntityManagerHolder(em))__			assertNotNull(transactionalField.em.getDelegate())__			emfMc.verify()__			emC.verify()__		}_		finally {_			TransactionSynchronizationManager.unbindResource(mockEmf)__		}_	};binds,an,emf,to,the,thread,and,tests,if,em,with,different,properties,generate,new,ems,or,not;public,void,test,properties,for,shared,entity,manager1,properties,props,new,properties,props,put,foo,bar,mock,control,em,c,mock,control,create,control,entity,manager,class,entity,manager,em,entity,manager,em,c,get,mock,emf,mc,expect,and,return,mock,emf,create,entity,manager,props,em,em,c,expect,and,return,em,get,delegate,new,object,2,em,c,expect,and,return,em,is,open,true,em,close,emf,mc,replay,em,c,replay,persistence,annotation,bean,post,processor,babpp,new,mock,persistence,annotation,bean,post,processor,default,private,persistence,context,field,with,properties,transactional,field,with,properties,new,default,private,persistence,context,field,with,properties,default,private,persistence,context,field,transactional,field,new,default,private,persistence,context,field,babpp,post,process,property,values,null,null,transactional,field,with,properties,null,babpp,post,process,property,values,null,null,transactional,field,null,assert,not,null,transactional,field,with,properties,em,assert,not,null,transactional,field,em,assert,not,null,transactional,field,with,properties,em,get,delegate,try,transaction,synchronization,manager,bind,resource,mock,emf,new,entity,manager,holder,em,assert,not,null,transactional,field,em,get,delegate,emf,mc,verify,em,c,verify,finally,transaction,synchronization,manager,unbind,resource,mock,emf
PersistenceInjectionTests -> public void testPropertiesForSharedEntityManager1();1356735495;Binds an EMF to the thread and tests if EM with different properties_generate new EMs or not.;public void testPropertiesForSharedEntityManager1() {_		Properties props = new Properties()__		props.put("foo", "bar")__		MockControl emC = MockControl.createControl(EntityManager.class)__		EntityManager em = (EntityManager) emC.getMock()__		_		emfMc.expectAndReturn(mockEmf.createEntityManager(props), em)__		emC.expectAndReturn(em.getDelegate(), new Object(), 2)__		emC.expectAndReturn(em.isOpen(), true)__		em.close()___		emfMc.replay()__		emC.replay()___		PersistenceAnnotationBeanPostProcessor babpp = new MockPersistenceAnnotationBeanPostProcessor()__		DefaultPrivatePersistenceContextFieldWithProperties transactionalFieldWithProperties =_				new DefaultPrivatePersistenceContextFieldWithProperties()__		DefaultPrivatePersistenceContextField transactionalField = new DefaultPrivatePersistenceContextField()___		babpp.postProcessPropertyValues(null, null, transactionalFieldWithProperties, null)__		babpp.postProcessPropertyValues(null, null, transactionalField, null)___		assertNotNull(transactionalFieldWithProperties.em)__		assertNotNull(transactionalField.em)__		_		assertNotNull(transactionalFieldWithProperties.em.getDelegate())__		_		try {_			TransactionSynchronizationManager.bindResource(mockEmf, new EntityManagerHolder(em))__			assertNotNull(transactionalField.em.getDelegate())__			emfMc.verify()__			emC.verify()__		}_		finally {_			TransactionSynchronizationManager.unbindResource(mockEmf)__		}_	};binds,an,emf,to,the,thread,and,tests,if,em,with,different,properties,generate,new,ems,or,not;public,void,test,properties,for,shared,entity,manager1,properties,props,new,properties,props,put,foo,bar,mock,control,em,c,mock,control,create,control,entity,manager,class,entity,manager,em,entity,manager,em,c,get,mock,emf,mc,expect,and,return,mock,emf,create,entity,manager,props,em,em,c,expect,and,return,em,get,delegate,new,object,2,em,c,expect,and,return,em,is,open,true,em,close,emf,mc,replay,em,c,replay,persistence,annotation,bean,post,processor,babpp,new,mock,persistence,annotation,bean,post,processor,default,private,persistence,context,field,with,properties,transactional,field,with,properties,new,default,private,persistence,context,field,with,properties,default,private,persistence,context,field,transactional,field,new,default,private,persistence,context,field,babpp,post,process,property,values,null,null,transactional,field,with,properties,null,babpp,post,process,property,values,null,null,transactional,field,null,assert,not,null,transactional,field,with,properties,em,assert,not,null,transactional,field,em,assert,not,null,transactional,field,with,properties,em,get,delegate,try,transaction,synchronization,manager,bind,resource,mock,emf,new,entity,manager,holder,em,assert,not,null,transactional,field,em,get,delegate,emf,mc,verify,em,c,verify,finally,transaction,synchronization,manager,unbind,resource,mock,emf
PersistenceInjectionTests -> @Test 	public void testPropertiesForSharedEntityManager1();1362408075;Binds an EMF to the thread and tests if EM with different properties_generate new EMs or not.;@Test_	public void testPropertiesForSharedEntityManager1() {_		Properties props = new Properties()__		props.put("foo", "bar")__		EntityManager em = mock(EntityManager.class)__		_		given(mockEmf.createEntityManager(props)).willReturn(em)__		given(em.getDelegate()).willReturn(new Object())__		given(em.isOpen()).willReturn(true)___		PersistenceAnnotationBeanPostProcessor babpp = new MockPersistenceAnnotationBeanPostProcessor()__		DefaultPrivatePersistenceContextFieldWithProperties transactionalFieldWithProperties =_				new DefaultPrivatePersistenceContextFieldWithProperties()__		DefaultPrivatePersistenceContextField transactionalField = new DefaultPrivatePersistenceContextField()___		babpp.postProcessPropertyValues(null, null, transactionalFieldWithProperties, null)__		babpp.postProcessPropertyValues(null, null, transactionalField, null)___		assertNotNull(transactionalFieldWithProperties.em)__		assertNotNull(transactionalField.em)__		_		assertNotNull(transactionalFieldWithProperties.em.getDelegate())__		_		try {_			TransactionSynchronizationManager.bindResource(mockEmf, new EntityManagerHolder(em))__			assertNotNull(transactionalField.em.getDelegate())__			verify(em).close()__		}_		finally {_			TransactionSynchronizationManager.unbindResource(mockEmf)__		}_	};binds,an,emf,to,the,thread,and,tests,if,em,with,different,properties,generate,new,ems,or,not;test,public,void,test,properties,for,shared,entity,manager1,properties,props,new,properties,props,put,foo,bar,entity,manager,em,mock,entity,manager,class,given,mock,emf,create,entity,manager,props,will,return,em,given,em,get,delegate,will,return,new,object,given,em,is,open,will,return,true,persistence,annotation,bean,post,processor,babpp,new,mock,persistence,annotation,bean,post,processor,default,private,persistence,context,field,with,properties,transactional,field,with,properties,new,default,private,persistence,context,field,with,properties,default,private,persistence,context,field,transactional,field,new,default,private,persistence,context,field,babpp,post,process,property,values,null,null,transactional,field,with,properties,null,babpp,post,process,property,values,null,null,transactional,field,null,assert,not,null,transactional,field,with,properties,em,assert,not,null,transactional,field,em,assert,not,null,transactional,field,with,properties,em,get,delegate,try,transaction,synchronization,manager,bind,resource,mock,emf,new,entity,manager,holder,em,assert,not,null,transactional,field,em,get,delegate,verify,em,close,finally,transaction,synchronization,manager,unbind,resource,mock,emf
PersistenceInjectionTests -> @Test 	public void testPropertiesForSharedEntityManager1();1363208506;Binds an EMF to the thread and tests if EM with different properties_generate new EMs or not.;@Test_	public void testPropertiesForSharedEntityManager1() {_		Properties props = new Properties()__		props.put("foo", "bar")__		EntityManager em = mock(EntityManager.class)__		_		given(mockEmf.createEntityManager(props)).willReturn(em)__		given(em.getDelegate()).willReturn(new Object())__		given(em.isOpen()).willReturn(true)___		PersistenceAnnotationBeanPostProcessor babpp = new MockPersistenceAnnotationBeanPostProcessor()__		DefaultPrivatePersistenceContextFieldWithProperties transactionalFieldWithProperties =_				new DefaultPrivatePersistenceContextFieldWithProperties()__		DefaultPrivatePersistenceContextField transactionalField = new DefaultPrivatePersistenceContextField()___		babpp.postProcessPropertyValues(null, null, transactionalFieldWithProperties, null)__		babpp.postProcessPropertyValues(null, null, transactionalField, null)___		assertNotNull(transactionalFieldWithProperties.em)__		assertNotNull(transactionalField.em)__		_		assertNotNull(transactionalFieldWithProperties.em.getDelegate())__		_		try {_			TransactionSynchronizationManager.bindResource(mockEmf, new EntityManagerHolder(em))__			assertNotNull(transactionalField.em.getDelegate())__			verify(em).close()__		}_		finally {_			TransactionSynchronizationManager.unbindResource(mockEmf)__		}_	};binds,an,emf,to,the,thread,and,tests,if,em,with,different,properties,generate,new,ems,or,not;test,public,void,test,properties,for,shared,entity,manager1,properties,props,new,properties,props,put,foo,bar,entity,manager,em,mock,entity,manager,class,given,mock,emf,create,entity,manager,props,will,return,em,given,em,get,delegate,will,return,new,object,given,em,is,open,will,return,true,persistence,annotation,bean,post,processor,babpp,new,mock,persistence,annotation,bean,post,processor,default,private,persistence,context,field,with,properties,transactional,field,with,properties,new,default,private,persistence,context,field,with,properties,default,private,persistence,context,field,transactional,field,new,default,private,persistence,context,field,babpp,post,process,property,values,null,null,transactional,field,with,properties,null,babpp,post,process,property,values,null,null,transactional,field,null,assert,not,null,transactional,field,with,properties,em,assert,not,null,transactional,field,em,assert,not,null,transactional,field,with,properties,em,get,delegate,try,transaction,synchronization,manager,bind,resource,mock,emf,new,entity,manager,holder,em,assert,not,null,transactional,field,em,get,delegate,verify,em,close,finally,transaction,synchronization,manager,unbind,resource,mock,emf
PersistenceInjectionTests -> @Test 	public void testPropertiesForSharedEntityManager1();1382746898;Binds an EMF to the thread and tests if EM with different properties_generate new EMs or not.;@Test_	public void testPropertiesForSharedEntityManager1() {_		Properties props = new Properties()__		props.put("foo", "bar")__		EntityManager em = mock(EntityManager.class)__		_		given(mockEmf.createEntityManager(props)).willReturn(em)__		given(em.getDelegate()).willReturn(new Object())__		given(em.isOpen()).willReturn(true)___		PersistenceAnnotationBeanPostProcessor babpp = new MockPersistenceAnnotationBeanPostProcessor()__		DefaultPrivatePersistenceContextFieldWithProperties transactionalFieldWithProperties =_				new DefaultPrivatePersistenceContextFieldWithProperties()__		DefaultPrivatePersistenceContextField transactionalField = new DefaultPrivatePersistenceContextField()___		babpp.postProcessPropertyValues(null, null, transactionalFieldWithProperties, "bean1")__		babpp.postProcessPropertyValues(null, null, transactionalField, "bean2")___		assertNotNull(transactionalFieldWithProperties.em)__		assertNotNull(transactionalField.em)__		_		assertNotNull(transactionalFieldWithProperties.em.getDelegate())__		_		try {_			TransactionSynchronizationManager.bindResource(mockEmf, new EntityManagerHolder(em))__			assertNotNull(transactionalField.em.getDelegate())__			verify(em).close()__		}_		finally {_			TransactionSynchronizationManager.unbindResource(mockEmf)__		}_	};binds,an,emf,to,the,thread,and,tests,if,em,with,different,properties,generate,new,ems,or,not;test,public,void,test,properties,for,shared,entity,manager1,properties,props,new,properties,props,put,foo,bar,entity,manager,em,mock,entity,manager,class,given,mock,emf,create,entity,manager,props,will,return,em,given,em,get,delegate,will,return,new,object,given,em,is,open,will,return,true,persistence,annotation,bean,post,processor,babpp,new,mock,persistence,annotation,bean,post,processor,default,private,persistence,context,field,with,properties,transactional,field,with,properties,new,default,private,persistence,context,field,with,properties,default,private,persistence,context,field,transactional,field,new,default,private,persistence,context,field,babpp,post,process,property,values,null,null,transactional,field,with,properties,bean1,babpp,post,process,property,values,null,null,transactional,field,bean2,assert,not,null,transactional,field,with,properties,em,assert,not,null,transactional,field,em,assert,not,null,transactional,field,with,properties,em,get,delegate,try,transaction,synchronization,manager,bind,resource,mock,emf,new,entity,manager,holder,em,assert,not,null,transactional,field,em,get,delegate,verify,em,close,finally,transaction,synchronization,manager,unbind,resource,mock,emf
PersistenceInjectionTests -> @Test 	public void testPropertiesForSharedEntityManager1();1408526091;Binds an EMF to the thread and tests if EM with different properties_generate new EMs or not.;@Test_	public void testPropertiesForSharedEntityManager1() {_		Properties props = new Properties()__		props.put("foo", "bar")__		EntityManager em = mock(EntityManager.class)__		_		given(mockEmf.createEntityManager(props)).willReturn(em)__		given(em.getDelegate()).willReturn(new Object())__		given(em.isOpen()).willReturn(true)___		PersistenceAnnotationBeanPostProcessor babpp = new MockPersistenceAnnotationBeanPostProcessor()__		DefaultPrivatePersistenceContextFieldWithProperties transactionalFieldWithProperties =_				new DefaultPrivatePersistenceContextFieldWithProperties()__		DefaultPrivatePersistenceContextField transactionalField = new DefaultPrivatePersistenceContextField()___		babpp.postProcessPropertyValues(null, null, transactionalFieldWithProperties, "bean1")__		babpp.postProcessPropertyValues(null, null, transactionalField, "bean2")___		assertNotNull(transactionalFieldWithProperties.em)__		assertNotNull(transactionalField.em)__		_		assertNotNull(transactionalFieldWithProperties.em.getDelegate())__		_		try {_			TransactionSynchronizationManager.bindResource(mockEmf, new EntityManagerHolder(em))__			assertNotNull(transactionalField.em.getDelegate())__			verify(em).close()__		}_		finally {_			TransactionSynchronizationManager.unbindResource(mockEmf)__		}_	};binds,an,emf,to,the,thread,and,tests,if,em,with,different,properties,generate,new,ems,or,not;test,public,void,test,properties,for,shared,entity,manager1,properties,props,new,properties,props,put,foo,bar,entity,manager,em,mock,entity,manager,class,given,mock,emf,create,entity,manager,props,will,return,em,given,em,get,delegate,will,return,new,object,given,em,is,open,will,return,true,persistence,annotation,bean,post,processor,babpp,new,mock,persistence,annotation,bean,post,processor,default,private,persistence,context,field,with,properties,transactional,field,with,properties,new,default,private,persistence,context,field,with,properties,default,private,persistence,context,field,transactional,field,new,default,private,persistence,context,field,babpp,post,process,property,values,null,null,transactional,field,with,properties,bean1,babpp,post,process,property,values,null,null,transactional,field,bean2,assert,not,null,transactional,field,with,properties,em,assert,not,null,transactional,field,em,assert,not,null,transactional,field,with,properties,em,get,delegate,try,transaction,synchronization,manager,bind,resource,mock,emf,new,entity,manager,holder,em,assert,not,null,transactional,field,em,get,delegate,verify,em,close,finally,transaction,synchronization,manager,unbind,resource,mock,emf
PersistenceInjectionTests -> @Test 	public void testPropertiesForSharedEntityManager1();1414678671;Binds an EMF to the thread and tests if EM with different properties_generate new EMs or not.;@Test_	public void testPropertiesForSharedEntityManager1() {_		Properties props = new Properties()__		props.put("foo", "bar")__		EntityManager em = mock(EntityManager.class)__		_		given(mockEmf.createEntityManager(props)).willReturn(em)__		given(em.getDelegate()).willReturn(new Object())__		given(em.isOpen()).willReturn(true)___		PersistenceAnnotationBeanPostProcessor pabpp = new MockPersistenceAnnotationBeanPostProcessor()__		DefaultPrivatePersistenceContextFieldWithProperties transactionalFieldWithProperties =_				new DefaultPrivatePersistenceContextFieldWithProperties()__		DefaultPrivatePersistenceContextField transactionalField = new DefaultPrivatePersistenceContextField()___		pabpp.postProcessPropertyValues(null, null, transactionalFieldWithProperties, "bean1")__		pabpp.postProcessPropertyValues(null, null, transactionalField, "bean2")___		assertNotNull(transactionalFieldWithProperties.em)__		assertNotNull(transactionalField.em)__		_		assertNotNull(transactionalFieldWithProperties.em.getDelegate())__		_		try {_			TransactionSynchronizationManager.bindResource(mockEmf, new EntityManagerHolder(em))__			assertNotNull(transactionalField.em.getDelegate())__			verify(em).close()__		}_		finally {_			TransactionSynchronizationManager.unbindResource(mockEmf)__		}_	};binds,an,emf,to,the,thread,and,tests,if,em,with,different,properties,generate,new,ems,or,not;test,public,void,test,properties,for,shared,entity,manager1,properties,props,new,properties,props,put,foo,bar,entity,manager,em,mock,entity,manager,class,given,mock,emf,create,entity,manager,props,will,return,em,given,em,get,delegate,will,return,new,object,given,em,is,open,will,return,true,persistence,annotation,bean,post,processor,pabpp,new,mock,persistence,annotation,bean,post,processor,default,private,persistence,context,field,with,properties,transactional,field,with,properties,new,default,private,persistence,context,field,with,properties,default,private,persistence,context,field,transactional,field,new,default,private,persistence,context,field,pabpp,post,process,property,values,null,null,transactional,field,with,properties,bean1,pabpp,post,process,property,values,null,null,transactional,field,bean2,assert,not,null,transactional,field,with,properties,em,assert,not,null,transactional,field,em,assert,not,null,transactional,field,with,properties,em,get,delegate,try,transaction,synchronization,manager,bind,resource,mock,emf,new,entity,manager,holder,em,assert,not,null,transactional,field,em,get,delegate,verify,em,close,finally,transaction,synchronization,manager,unbind,resource,mock,emf
PersistenceInjectionTests -> @Test 	public void testPropertiesForSharedEntityManager1();1417981895;Binds an EMF to the thread and tests if EM with different properties_generate new EMs or not.;@Test_	public void testPropertiesForSharedEntityManager1() {_		Properties props = new Properties()__		props.put("foo", "bar")__		EntityManager em = mock(EntityManager.class)__		_		given(mockEmf.createEntityManager(props)).willReturn(em)__		given(em.getDelegate()).willReturn(new Object())__		given(em.isOpen()).willReturn(true)___		PersistenceAnnotationBeanPostProcessor pabpp = new MockPersistenceAnnotationBeanPostProcessor()__		DefaultPrivatePersistenceContextFieldWithProperties transactionalFieldWithProperties =_				new DefaultPrivatePersistenceContextFieldWithProperties()__		DefaultPrivatePersistenceContextField transactionalField = new DefaultPrivatePersistenceContextField()___		pabpp.postProcessPropertyValues(null, null, transactionalFieldWithProperties, "bean1")__		pabpp.postProcessPropertyValues(null, null, transactionalField, "bean2")___		assertNotNull(transactionalFieldWithProperties.em)__		assertNotNull(transactionalField.em)__		_		assertNotNull(transactionalFieldWithProperties.em.getDelegate())__		_		try {_			TransactionSynchronizationManager.bindResource(mockEmf, new EntityManagerHolder(em))__			assertNotNull(transactionalField.em.getDelegate())__			verify(em).close()__		}_		finally {_			TransactionSynchronizationManager.unbindResource(mockEmf)__		}_	};binds,an,emf,to,the,thread,and,tests,if,em,with,different,properties,generate,new,ems,or,not;test,public,void,test,properties,for,shared,entity,manager1,properties,props,new,properties,props,put,foo,bar,entity,manager,em,mock,entity,manager,class,given,mock,emf,create,entity,manager,props,will,return,em,given,em,get,delegate,will,return,new,object,given,em,is,open,will,return,true,persistence,annotation,bean,post,processor,pabpp,new,mock,persistence,annotation,bean,post,processor,default,private,persistence,context,field,with,properties,transactional,field,with,properties,new,default,private,persistence,context,field,with,properties,default,private,persistence,context,field,transactional,field,new,default,private,persistence,context,field,pabpp,post,process,property,values,null,null,transactional,field,with,properties,bean1,pabpp,post,process,property,values,null,null,transactional,field,bean2,assert,not,null,transactional,field,with,properties,em,assert,not,null,transactional,field,em,assert,not,null,transactional,field,with,properties,em,get,delegate,try,transaction,synchronization,manager,bind,resource,mock,emf,new,entity,manager,holder,em,assert,not,null,transactional,field,em,get,delegate,verify,em,close,finally,transaction,synchronization,manager,unbind,resource,mock,emf
PersistenceInjectionTests -> @Test 	public void testPropertiesForSharedEntityManager1();1443395967;Binds an EMF to the thread and tests if EM with different properties_generate new EMs or not.;@Test_	public void testPropertiesForSharedEntityManager1() {_		Properties props = new Properties()__		props.put("foo", "bar")__		EntityManager em = mock(EntityManager.class)__		_		given(mockEmf.createEntityManager(props)).willReturn(em)__		given(em.getDelegate()).willReturn(new Object())__		given(em.isOpen()).willReturn(true)___		PersistenceAnnotationBeanPostProcessor pabpp = new MockPersistenceAnnotationBeanPostProcessor()__		DefaultPrivatePersistenceContextFieldWithProperties transactionalFieldWithProperties =_				new DefaultPrivatePersistenceContextFieldWithProperties()__		DefaultPrivatePersistenceContextField transactionalField = new DefaultPrivatePersistenceContextField()___		pabpp.postProcessPropertyValues(null, null, transactionalFieldWithProperties, "bean1")__		pabpp.postProcessPropertyValues(null, null, transactionalField, "bean2")___		assertNotNull(transactionalFieldWithProperties.em)__		assertNotNull(transactionalField.em)__		_		assertNotNull(transactionalFieldWithProperties.em.getDelegate())__		_		try {_			TransactionSynchronizationManager.bindResource(mockEmf, new EntityManagerHolder(em))__			assertNotNull(transactionalField.em.getDelegate())__			verify(em).close()__		}_		finally {_			TransactionSynchronizationManager.unbindResource(mockEmf)__		}_	};binds,an,emf,to,the,thread,and,tests,if,em,with,different,properties,generate,new,ems,or,not;test,public,void,test,properties,for,shared,entity,manager1,properties,props,new,properties,props,put,foo,bar,entity,manager,em,mock,entity,manager,class,given,mock,emf,create,entity,manager,props,will,return,em,given,em,get,delegate,will,return,new,object,given,em,is,open,will,return,true,persistence,annotation,bean,post,processor,pabpp,new,mock,persistence,annotation,bean,post,processor,default,private,persistence,context,field,with,properties,transactional,field,with,properties,new,default,private,persistence,context,field,with,properties,default,private,persistence,context,field,transactional,field,new,default,private,persistence,context,field,pabpp,post,process,property,values,null,null,transactional,field,with,properties,bean1,pabpp,post,process,property,values,null,null,transactional,field,bean2,assert,not,null,transactional,field,with,properties,em,assert,not,null,transactional,field,em,assert,not,null,transactional,field,with,properties,em,get,delegate,try,transaction,synchronization,manager,bind,resource,mock,emf,new,entity,manager,holder,em,assert,not,null,transactional,field,em,get,delegate,verify,em,close,finally,transaction,synchronization,manager,unbind,resource,mock,emf
PersistenceInjectionTests -> @Test 	public void testPropertiesForSharedEntityManager1();1467730834;Binds an EMF to the thread and tests if EM with different properties_generate new EMs or not.;@Test_	public void testPropertiesForSharedEntityManager1() {_		Properties props = new Properties()__		props.put("foo", "bar")__		EntityManager em = mock(EntityManager.class)__		_		given(mockEmf.createEntityManager(props)).willReturn(em)__		given(em.getDelegate()).willReturn(new Object())__		given(em.isOpen()).willReturn(true)___		PersistenceAnnotationBeanPostProcessor pabpp = new MockPersistenceAnnotationBeanPostProcessor()__		DefaultPrivatePersistenceContextFieldWithProperties transactionalFieldWithProperties =_				new DefaultPrivatePersistenceContextFieldWithProperties()__		DefaultPrivatePersistenceContextField transactionalField = new DefaultPrivatePersistenceContextField()___		pabpp.postProcessPropertyValues(null, null, transactionalFieldWithProperties, "bean1")__		pabpp.postProcessPropertyValues(null, null, transactionalField, "bean2")___		assertNotNull(transactionalFieldWithProperties.em)__		assertNotNull(transactionalField.em)__		_		assertNotNull(transactionalFieldWithProperties.em.getDelegate())__		_		try {_			TransactionSynchronizationManager.bindResource(mockEmf, new EntityManagerHolder(em))__			assertNotNull(transactionalField.em.getDelegate())__			verify(em).close()__		}_		finally {_			TransactionSynchronizationManager.unbindResource(mockEmf)__		}_	};binds,an,emf,to,the,thread,and,tests,if,em,with,different,properties,generate,new,ems,or,not;test,public,void,test,properties,for,shared,entity,manager1,properties,props,new,properties,props,put,foo,bar,entity,manager,em,mock,entity,manager,class,given,mock,emf,create,entity,manager,props,will,return,em,given,em,get,delegate,will,return,new,object,given,em,is,open,will,return,true,persistence,annotation,bean,post,processor,pabpp,new,mock,persistence,annotation,bean,post,processor,default,private,persistence,context,field,with,properties,transactional,field,with,properties,new,default,private,persistence,context,field,with,properties,default,private,persistence,context,field,transactional,field,new,default,private,persistence,context,field,pabpp,post,process,property,values,null,null,transactional,field,with,properties,bean1,pabpp,post,process,property,values,null,null,transactional,field,bean2,assert,not,null,transactional,field,with,properties,em,assert,not,null,transactional,field,em,assert,not,null,transactional,field,with,properties,em,get,delegate,try,transaction,synchronization,manager,bind,resource,mock,emf,new,entity,manager,holder,em,assert,not,null,transactional,field,em,get,delegate,verify,em,close,finally,transaction,synchronization,manager,unbind,resource,mock,emf
PersistenceInjectionTests -> @Test 	public void testPropertiesForSharedEntityManager1();1469287209;Binds an EMF to the thread and tests if EM with different properties_generate new EMs or not.;@Test_	public void testPropertiesForSharedEntityManager1() {_		Properties props = new Properties()__		props.put("foo", "bar")__		EntityManager em = mock(EntityManager.class)__		_		given(mockEmf.createEntityManager(props)).willReturn(em)__		given(em.getDelegate()).willReturn(new Object())__		given(em.isOpen()).willReturn(true)___		PersistenceAnnotationBeanPostProcessor pabpp = new MockPersistenceAnnotationBeanPostProcessor()__		DefaultPrivatePersistenceContextFieldWithProperties transactionalFieldWithProperties =_				new DefaultPrivatePersistenceContextFieldWithProperties()__		DefaultPrivatePersistenceContextField transactionalField = new DefaultPrivatePersistenceContextField()___		pabpp.postProcessPropertyValues(null, null, transactionalFieldWithProperties, "bean1")__		pabpp.postProcessPropertyValues(null, null, transactionalField, "bean2")___		assertNotNull(transactionalFieldWithProperties.em)__		assertNotNull(transactionalField.em)__		_		assertNotNull(transactionalFieldWithProperties.em.getDelegate())__		_		try {_			TransactionSynchronizationManager.bindResource(mockEmf, new EntityManagerHolder(em))__			assertNotNull(transactionalField.em.getDelegate())__			verify(em).close()__		}_		finally {_			TransactionSynchronizationManager.unbindResource(mockEmf)__		}_	};binds,an,emf,to,the,thread,and,tests,if,em,with,different,properties,generate,new,ems,or,not;test,public,void,test,properties,for,shared,entity,manager1,properties,props,new,properties,props,put,foo,bar,entity,manager,em,mock,entity,manager,class,given,mock,emf,create,entity,manager,props,will,return,em,given,em,get,delegate,will,return,new,object,given,em,is,open,will,return,true,persistence,annotation,bean,post,processor,pabpp,new,mock,persistence,annotation,bean,post,processor,default,private,persistence,context,field,with,properties,transactional,field,with,properties,new,default,private,persistence,context,field,with,properties,default,private,persistence,context,field,transactional,field,new,default,private,persistence,context,field,pabpp,post,process,property,values,null,null,transactional,field,with,properties,bean1,pabpp,post,process,property,values,null,null,transactional,field,bean2,assert,not,null,transactional,field,with,properties,em,assert,not,null,transactional,field,em,assert,not,null,transactional,field,with,properties,em,get,delegate,try,transaction,synchronization,manager,bind,resource,mock,emf,new,entity,manager,holder,em,assert,not,null,transactional,field,em,get,delegate,verify,em,close,finally,transaction,synchronization,manager,unbind,resource,mock,emf
PersistenceInjectionTests -> @Test 	public void testPropertiesForSharedEntityManager1();1496242568;Binds an EMF to the thread and tests if EM with different properties_generate new EMs or not.;@Test_	public void testPropertiesForSharedEntityManager1() {_		Properties props = new Properties()__		props.put("foo", "bar")__		EntityManager em = mock(EntityManager.class)__		_		given(mockEmf.createEntityManager(props)).willReturn(em)__		given(em.getDelegate()).willReturn(new Object())__		given(em.isOpen()).willReturn(true)___		PersistenceAnnotationBeanPostProcessor pabpp = new MockPersistenceAnnotationBeanPostProcessor()__		DefaultPrivatePersistenceContextFieldWithProperties transactionalFieldWithProperties =_				new DefaultPrivatePersistenceContextFieldWithProperties()__		DefaultPrivatePersistenceContextField transactionalField = new DefaultPrivatePersistenceContextField()___		pabpp.postProcessPropertyValues(null, null, transactionalFieldWithProperties, "bean1")__		pabpp.postProcessPropertyValues(null, null, transactionalField, "bean2")___		assertNotNull(transactionalFieldWithProperties.em)__		assertNotNull(transactionalField.em)__		_		assertNotNull(transactionalFieldWithProperties.em.getDelegate())__		_		try {_			TransactionSynchronizationManager.bindResource(mockEmf, new EntityManagerHolder(em))__			assertNotNull(transactionalField.em.getDelegate())__			verify(em).close()__		}_		finally {_			TransactionSynchronizationManager.unbindResource(mockEmf)__		}_	};binds,an,emf,to,the,thread,and,tests,if,em,with,different,properties,generate,new,ems,or,not;test,public,void,test,properties,for,shared,entity,manager1,properties,props,new,properties,props,put,foo,bar,entity,manager,em,mock,entity,manager,class,given,mock,emf,create,entity,manager,props,will,return,em,given,em,get,delegate,will,return,new,object,given,em,is,open,will,return,true,persistence,annotation,bean,post,processor,pabpp,new,mock,persistence,annotation,bean,post,processor,default,private,persistence,context,field,with,properties,transactional,field,with,properties,new,default,private,persistence,context,field,with,properties,default,private,persistence,context,field,transactional,field,new,default,private,persistence,context,field,pabpp,post,process,property,values,null,null,transactional,field,with,properties,bean1,pabpp,post,process,property,values,null,null,transactional,field,bean2,assert,not,null,transactional,field,with,properties,em,assert,not,null,transactional,field,em,assert,not,null,transactional,field,with,properties,em,get,delegate,try,transaction,synchronization,manager,bind,resource,mock,emf,new,entity,manager,holder,em,assert,not,null,transactional,field,em,get,delegate,verify,em,close,finally,transaction,synchronization,manager,unbind,resource,mock,emf
PersistenceInjectionTests -> @Test 	public void testPropertiesForSharedEntityManager1();1518615840;Binds an EMF to the thread and tests if EM with different properties_generate new EMs or not.;@Test_	public void testPropertiesForSharedEntityManager1() {_		Properties props = new Properties()__		props.put("foo", "bar")__		EntityManager em = mock(EntityManager.class)__		_		given(mockEmf.createEntityManager(props)).willReturn(em)__		given(em.getDelegate()).willReturn(new Object())__		given(em.isOpen()).willReturn(true)___		PersistenceAnnotationBeanPostProcessor pabpp = new MockPersistenceAnnotationBeanPostProcessor()__		DefaultPrivatePersistenceContextFieldWithProperties transactionalFieldWithProperties =_				new DefaultPrivatePersistenceContextFieldWithProperties()__		DefaultPrivatePersistenceContextField transactionalField = new DefaultPrivatePersistenceContextField()___		pabpp.postProcessPropertyValues(null, null, transactionalFieldWithProperties, "bean1")__		pabpp.postProcessPropertyValues(null, null, transactionalField, "bean2")___		assertNotNull(transactionalFieldWithProperties.em)__		assertNotNull(transactionalField.em)__		_		assertNotNull(transactionalFieldWithProperties.em.getDelegate())__		_		try {_			TransactionSynchronizationManager.bindResource(mockEmf, new EntityManagerHolder(em))__			assertNotNull(transactionalField.em.getDelegate())__			verify(em).close()__		}_		finally {_			TransactionSynchronizationManager.unbindResource(mockEmf)__		}_	};binds,an,emf,to,the,thread,and,tests,if,em,with,different,properties,generate,new,ems,or,not;test,public,void,test,properties,for,shared,entity,manager1,properties,props,new,properties,props,put,foo,bar,entity,manager,em,mock,entity,manager,class,given,mock,emf,create,entity,manager,props,will,return,em,given,em,get,delegate,will,return,new,object,given,em,is,open,will,return,true,persistence,annotation,bean,post,processor,pabpp,new,mock,persistence,annotation,bean,post,processor,default,private,persistence,context,field,with,properties,transactional,field,with,properties,new,default,private,persistence,context,field,with,properties,default,private,persistence,context,field,transactional,field,new,default,private,persistence,context,field,pabpp,post,process,property,values,null,null,transactional,field,with,properties,bean1,pabpp,post,process,property,values,null,null,transactional,field,bean2,assert,not,null,transactional,field,with,properties,em,assert,not,null,transactional,field,em,assert,not,null,transactional,field,with,properties,em,get,delegate,try,transaction,synchronization,manager,bind,resource,mock,emf,new,entity,manager,holder,em,assert,not,null,transactional,field,em,get,delegate,verify,em,close,finally,transaction,synchronization,manager,unbind,resource,mock,emf
PersistenceInjectionTests -> @Test 	public void testPropertiesForSharedEntityManager1();1530188116;Binds an EMF to the thread and tests if EM with different properties_generate new EMs or not.;@Test_	public void testPropertiesForSharedEntityManager1() {_		Properties props = new Properties()__		props.put("foo", "bar")__		EntityManager em = mock(EntityManager.class)__		_		given(mockEmf.createEntityManager(props)).willReturn(em)__		given(em.getDelegate()).willReturn(new Object())__		given(em.isOpen()).willReturn(true)___		PersistenceAnnotationBeanPostProcessor pabpp = new MockPersistenceAnnotationBeanPostProcessor()__		DefaultPrivatePersistenceContextFieldWithProperties transactionalFieldWithProperties =_				new DefaultPrivatePersistenceContextFieldWithProperties()__		DefaultPrivatePersistenceContextField transactionalField = new DefaultPrivatePersistenceContextField()___		pabpp.postProcessProperties(null, transactionalFieldWithProperties, "bean1")__		pabpp.postProcessProperties(null, transactionalField, "bean2")___		assertNotNull(transactionalFieldWithProperties.em)__		assertNotNull(transactionalField.em)__		_		assertNotNull(transactionalFieldWithProperties.em.getDelegate())__		_		try {_			TransactionSynchronizationManager.bindResource(mockEmf, new EntityManagerHolder(em))__			assertNotNull(transactionalField.em.getDelegate())__			verify(em).close()__		}_		finally {_			TransactionSynchronizationManager.unbindResource(mockEmf)__		}_	};binds,an,emf,to,the,thread,and,tests,if,em,with,different,properties,generate,new,ems,or,not;test,public,void,test,properties,for,shared,entity,manager1,properties,props,new,properties,props,put,foo,bar,entity,manager,em,mock,entity,manager,class,given,mock,emf,create,entity,manager,props,will,return,em,given,em,get,delegate,will,return,new,object,given,em,is,open,will,return,true,persistence,annotation,bean,post,processor,pabpp,new,mock,persistence,annotation,bean,post,processor,default,private,persistence,context,field,with,properties,transactional,field,with,properties,new,default,private,persistence,context,field,with,properties,default,private,persistence,context,field,transactional,field,new,default,private,persistence,context,field,pabpp,post,process,properties,null,transactional,field,with,properties,bean1,pabpp,post,process,properties,null,transactional,field,bean2,assert,not,null,transactional,field,with,properties,em,assert,not,null,transactional,field,em,assert,not,null,transactional,field,with,properties,em,get,delegate,try,transaction,synchronization,manager,bind,resource,mock,emf,new,entity,manager,holder,em,assert,not,null,transactional,field,em,get,delegate,verify,em,close,finally,transaction,synchronization,manager,unbind,resource,mock,emf
