commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testExceptionTranslationWithDialectFoundOnIntroducedEntityManagerInfo() throws Exception {     doTestExceptionTranslationWithDialectFound(((EntityManagerFactoryInfo) entityManagerFactory).getJpaDialect()). }
false;public;0;5;;@Test public void testExceptionTranslationWithDialectFoundOnEntityManagerFactoryBean() throws Exception {     assertNotNull("Dialect must have been set", entityManagerFactoryBean.getJpaDialect()).     doTestExceptionTranslationWithDialectFound(entityManagerFactoryBean). }
false;protected;1;8;;protected void doTestExceptionTranslationWithDialectFound(PersistenceExceptionTranslator pet) throws Exception {     RuntimeException in1 = new RuntimeException("in1").     PersistenceException in2 = new PersistenceException().     assertNull("No translation here", pet.translateExceptionIfPossible(in1)).     DataAccessException dex = pet.translateExceptionIfPossible(in2).     assertNotNull(dex).     assertSame(in2, dex.getCause()). }
false;public;0;19;;@Test @SuppressWarnings("unchecked") public void testEntityManagerProxyIsProxy() {     EntityManager em = createContainerManagedEntityManager().     assertTrue(Proxy.isProxyClass(em.getClass())).     Query q = em.createQuery("select p from Person as p").     List<Person> people = q.getResultList().     assertTrue(people.isEmpty()).     assertTrue("Should be open to start with", em.isOpen()).     try {         em.close().         fail("Close should not work on container managed EM").     } catch (IllegalStateException ex) {     // OK     }     assertTrue(em.isOpen()). }
true;public;0;10;// This would be legal, at least if not actually _starting_ a tx ;// This would be legal, at least if not actually _starting_ a tx @Test public void testEntityManagerProxyRejectsProgrammaticTxManagement() {     try {         createContainerManagedEntityManager().getTransaction().         fail("Should have thrown an IllegalStateException").     } catch (IllegalStateException ex) {     // expected     } }
true;public;0;4;/* 	 * See comments in spec on EntityManager.joinTransaction(). 	 * We take the view that this is a valid no op. 	 */ ;/* 	 * See comments in spec on EntityManager.joinTransaction(). 	 * We take the view that this is a valid no op. 	 */ @Test public void testContainerEntityManagerProxyAllowsJoinTransactionInTransaction() {     createContainerManagedEntityManager().joinTransaction(). }
false;public;0;12;;@Test public void testContainerEntityManagerProxyRejectsJoinTransactionWithoutTransaction() {     endTransaction().     try {         createContainerManagedEntityManager().joinTransaction().         fail("Should have thrown a TransactionRequiredException").     } catch (TransactionRequiredException ex) {     // expected     } }
false;public;0;5;;@Test public void testInstantiateAndSave() {     EntityManager em = createContainerManagedEntityManager().     doInstantiateAndSave(em). }
false;protected;1;11;;protected void doInstantiateAndSave(EntityManager em) {     assertEquals("Should be no people from previous transactions", 0, countRowsInTable(em, "person")).     Person p = new Person().     p.setFirstName("Tony").     p.setLastName("Blair").     em.persist(p).     em.flush().     assertEquals("1 row must have been inserted", 1, countRowsInTable(em, "person")). }
false;public;0;21;;@Test public void testReuseInNewTransaction() {     EntityManager em = createContainerManagedEntityManager().     doInstantiateAndSave(em).     endTransaction().     // assertFalse(em.getTransaction().isActive()).     startNewTransaction().     // Call any method: should cause automatic tx invocation     assertFalse(em.contains(new Person())).     // assertTrue(em.getTransaction().isActive()).     doInstantiateAndSave(em).     setComplete().     // Should rollback     endTransaction().     assertEquals("Tx must have committed back", 1, countRowsInTable(em, "person")).     // Now clean up the database     deleteFromTables("person"). }
false;public;0;7;;@Test public void testRollbackOccurs() {     EntityManager em = createContainerManagedEntityManager().     doInstantiateAndSave(em).     // Should rollback     endTransaction().     assertEquals("Tx must have been rolled back", 0, countRowsInTable(em, "person")). }
false;public;0;11;;@Test public void testCommitOccurs() {     EntityManager em = createContainerManagedEntityManager().     doInstantiateAndSave(em).     setComplete().     // Should rollback     endTransaction().     assertEquals("Tx must have committed back", 1, countRowsInTable(em, "person")).     // Now clean up the database     deleteFromTables("person"). }
