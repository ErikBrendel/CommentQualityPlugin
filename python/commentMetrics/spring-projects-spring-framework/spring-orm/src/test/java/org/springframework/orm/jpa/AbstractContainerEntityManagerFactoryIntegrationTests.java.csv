commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testEntityManagerFactoryImplementsEntityManagerFactoryInfo() {     assertTrue("Must have introduced config interface", entityManagerFactory instanceof EntityManagerFactoryInfo).     EntityManagerFactoryInfo emfi = (EntityManagerFactoryInfo) entityManagerFactory.     assertEquals("Person", emfi.getPersistenceUnitName()).     assertNotNull("PersistenceUnitInfo must be available", emfi.getPersistenceUnitInfo()).     assertNotNull("Raw EntityManagerFactory must be available", emfi.getNativeEntityManagerFactory()). }
false;public;0;4;;@Test public void testStateClean() {     assertEquals("Should be no people from previous transactions", 0, countRowsInTable("person")). }
false;public;0;4;;@Test public void testJdbcTx1_1() {     testJdbcTx2(). }
false;public;0;4;;@Test public void testJdbcTx1_2() {     testJdbcTx2(). }
false;public;0;4;;@Test public void testJdbcTx1_3() {     testJdbcTx2(). }
false;public;0;5;;@Test public void testJdbcTx2() {     assertEquals("Any previous tx must have been rolled back", 0, countRowsInTable("person")).     executeSqlScript("/org/springframework/orm/jpa/insertPerson.sql"). }
false;public;0;11;;@Test @SuppressWarnings("unchecked") public void testEntityManagerProxyIsProxy() {     assertTrue(Proxy.isProxyClass(sharedEntityManager.getClass())).     Query q = sharedEntityManager.createQuery("select p from Person as p").     q.getResultList().     assertTrue("Should be open to start with", sharedEntityManager.isOpen()).     sharedEntityManager.close().     assertTrue("Close should have been silently ignored", sharedEntityManager.isOpen()). }
false;public;0;12;;@Test public void testBogusQuery() {     try {         Query query = sharedEntityManager.createQuery("It's raining toads").         // required in OpenJPA case         query.executeUpdate().         fail("Should have thrown a RuntimeException").     } catch (RuntimeException ex) {     // expected     } }
false;public;0;14;;@Test public void testGetReferenceWhenNoRow() {     try {         Person notThere = sharedEntityManager.getReference(Person.class, 666).         // We may get here (as with Hibernate). Either behaviour is valid:         // throw exception on first access or on getReference itself.         notThere.getFirstName().         fail("Should have thrown an EntityNotFoundException or ObjectNotFoundException").     } catch (Exception ex) {         assertTrue(ex.getClass().getName().endsWith("NotFoundException")).     } }
false;public;0;25;;@Test public void testLazyLoading() {     try {         Person tony = new Person().         tony.setFirstName("Tony").         tony.setLastName("Blair").         tony.setDriversLicense(new DriversLicense("8439DK")).         sharedEntityManager.persist(tony).         setComplete().         endTransaction().         startNewTransaction().         sharedEntityManager.clear().         Person newTony = entityManagerFactory.createEntityManager().getReference(Person.class, tony.getId()).         assertNotSame(newTony, tony).         endTransaction().         assertNotNull(newTony.getDriversLicense()).         newTony.getDriversLicense().getSerialNumber().     } finally {         deleteFromTables("person", "drivers_license").     } }
false;public;0;14;;@Test @SuppressWarnings("unchecked") public void testMultipleResults() {     // Add with JDBC     String firstName = "Tony".     insertPerson(firstName).     assertTrue(Proxy.isProxyClass(sharedEntityManager.getClass())).     Query q = sharedEntityManager.createQuery("select p from Person as p").     List<Person> people = q.getResultList().     assertEquals(1, people.size()).     assertEquals(firstName, people.get(0).getFirstName()). }
false;protected;1;4;;protected void insertPerson(String firstName) {     String INSERT_PERSON = "INSERT INTO PERSON (ID, FIRST_NAME, LAST_NAME) VALUES (?, ?, ?)".     jdbcTemplate.update(INSERT_PERSON, 1, firstName, "Blair"). }
false;public;0;9;;@Test public void testEntityManagerProxyRejectsProgrammaticTxManagement() {     try {         sharedEntityManager.getTransaction().         fail("Should not be able to create transactions on container managed EntityManager").     } catch (IllegalStateException ex) {     } }
false;public;0;4;;@Test public void testInstantiateAndSaveWithSharedEmProxy() {     testInstantiateAndSave(sharedEntityManager). }
false;protected;1;10;;protected void testInstantiateAndSave(EntityManager em) {     assertEquals("Should be no people from previous transactions", 0, countRowsInTable("person")).     Person p = new Person().     p.setFirstName("Tony").     p.setLastName("Blair").     em.persist(p).     em.flush().     assertEquals("1 row must have been inserted", 1, countRowsInTable("person")). }
false;public;0;15;;@Test @SuppressWarnings("unchecked") public void testQueryNoPersons() {     EntityManager em = entityManagerFactory.createEntityManager().     Query q = em.createQuery("select p from Person as p").     List<Person> people = q.getResultList().     assertEquals(0, people.size()).     try {         assertNull(q.getSingleResult()).         fail("Should have thrown NoResultException").     } catch (NoResultException ex) {     // expected     } }
false;public;0;17;;@Test @SuppressWarnings("unchecked") public void testQueryNoPersonsNotTransactional() {     endTransaction().     EntityManager em = entityManagerFactory.createEntityManager().     Query q = em.createQuery("select p from Person as p").     List<Person> people = q.getResultList().     assertEquals(0, people.size()).     try {         assertNull(q.getSingleResult()).         fail("Should have thrown NoResultException").     } catch (NoResultException ex) {     // expected     } }
false;public;0;15;;@Test @SuppressWarnings("unchecked") public void testQueryNoPersonsShared() {     Query q = this.sharedEntityManager.createQuery("select p from Person as p").     q.setFlushMode(FlushModeType.AUTO).     List<Person> people = q.getResultList().     assertEquals(0, people.size()).     try {         assertNull(q.getSingleResult()).         fail("Should have thrown NoResultException").     } catch (NoResultException ex) {     // expected     } }
false;public;0;29;;@Test @SuppressWarnings("unchecked") public void testQueryNoPersonsSharedNotTransactional() {     endTransaction().     EntityManager em = this.sharedEntityManager.     Query q = em.createQuery("select p from Person as p").     q.setFlushMode(FlushModeType.AUTO).     List<Person> people = q.getResultList().     assertEquals(0, people.size()).     try {         assertNull(q.getSingleResult()).         fail("Should have thrown IllegalStateException").     } catch (Exception ex) {         // We would typically expect an IllegalStateException, but Hibernate throws a         // PersistenceException. So we assert the contents of the exception message instead.         assertTrue(ex.getMessage().contains("closed")).     }     q = em.createQuery("select p from Person as p").     q.setFlushMode(FlushModeType.AUTO).     try {         assertNull(q.getSingleResult()).         fail("Should have thrown NoResultException").     } catch (NoResultException ex) {     // expected     } }
false;public;0;5;;@Test public void testCanSerializeProxies() throws Exception {     assertNotNull(SerializationTestUtils.serializeAndDeserialize(entityManagerFactory)).     assertNotNull(SerializationTestUtils.serializeAndDeserialize(sharedEntityManager)). }
