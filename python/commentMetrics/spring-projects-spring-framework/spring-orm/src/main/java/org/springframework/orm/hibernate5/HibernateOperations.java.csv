# id;timestamp;commentText;codeText;commentWords;codeWords
HibernateOperations -> List<?> findByNamedQueryAndValueBean(String queryName, Object valueBean) throws DataAccessException_;1467668243;Execute a named query, binding the properties of the given bean to_":" named parameters in the query string._<p>A named query is defined in a Hibernate mapping file._@param queryName the name of a Hibernate query in a mapping file_@param valueBean the values of the parameters_@return a {@link List} containing the results of the query execution_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Query#setProperties_@see org.hibernate.Session#getNamedQuery(String);List<?> findByNamedQueryAndValueBean(String queryName, Object valueBean) throws DataAccessException_;execute,a,named,query,binding,the,properties,of,the,given,bean,to,named,parameters,in,the,query,string,p,a,named,query,is,defined,in,a,hibernate,mapping,file,param,query,name,the,name,of,a,hibernate,query,in,a,mapping,file,param,value,bean,the,values,of,the,parameters,return,a,link,list,containing,the,results,of,the,query,execution,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,query,set,properties,see,org,hibernate,session,get,named,query,string;list,find,by,named,query,and,value,bean,string,query,name,object,value,bean,throws,data,access,exception
HibernateOperations -> List<?> findByNamedQueryAndValueBean(String queryName, Object valueBean) throws DataAccessException_;1495868221;Execute a named query, binding the properties of the given bean to_":" named parameters in the query string._<p>A named query is defined in a Hibernate mapping file._@param queryName the name of a Hibernate query in a mapping file_@param valueBean the values of the parameters_@return a {@link List} containing the results of the query execution_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Query#setProperties_@see org.hibernate.Session#getNamedQuery(String);List<?> findByNamedQueryAndValueBean(String queryName, Object valueBean) throws DataAccessException_;execute,a,named,query,binding,the,properties,of,the,given,bean,to,named,parameters,in,the,query,string,p,a,named,query,is,defined,in,a,hibernate,mapping,file,param,query,name,the,name,of,a,hibernate,query,in,a,mapping,file,param,value,bean,the,values,of,the,parameters,return,a,link,list,containing,the,results,of,the,query,execution,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,query,set,properties,see,org,hibernate,session,get,named,query,string;list,find,by,named,query,and,value,bean,string,query,name,object,value,bean,throws,data,access,exception
HibernateOperations -> List<?> findByNamedQueryAndNamedParam(String queryName, String[] paramNames, Object[] values) 			throws DataAccessException_;1467668243;Execute a named query, binding a number of values to ":" named_parameters in the query string._<p>A named query is defined in a Hibernate mapping file._@param queryName the name of a Hibernate query in a mapping file_@param paramNames the names of the parameters_@param values the values of the parameters_@return a {@link List} containing the results of the query execution_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#getNamedQuery(String);List<?> findByNamedQueryAndNamedParam(String queryName, String[] paramNames, Object[] values)_			throws DataAccessException_;execute,a,named,query,binding,a,number,of,values,to,named,parameters,in,the,query,string,p,a,named,query,is,defined,in,a,hibernate,mapping,file,param,query,name,the,name,of,a,hibernate,query,in,a,mapping,file,param,param,names,the,names,of,the,parameters,param,values,the,values,of,the,parameters,return,a,link,list,containing,the,results,of,the,query,execution,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,get,named,query,string;list,find,by,named,query,and,named,param,string,query,name,string,param,names,object,values,throws,data,access,exception
HibernateOperations -> List<?> findByNamedQueryAndNamedParam(String queryName, String[] paramNames, Object[] values) 			throws DataAccessException_;1495868221;Execute a named query, binding a number of values to ":" named_parameters in the query string._<p>A named query is defined in a Hibernate mapping file._@param queryName the name of a Hibernate query in a mapping file_@param paramNames the names of the parameters_@param values the values of the parameters_@return a {@link List} containing the results of the query execution_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#getNamedQuery(String);List<?> findByNamedQueryAndNamedParam(String queryName, String[] paramNames, Object[] values)_			throws DataAccessException_;execute,a,named,query,binding,a,number,of,values,to,named,parameters,in,the,query,string,p,a,named,query,is,defined,in,a,hibernate,mapping,file,param,query,name,the,name,of,a,hibernate,query,in,a,mapping,file,param,param,names,the,names,of,the,parameters,param,values,the,values,of,the,parameters,return,a,link,list,containing,the,results,of,the,query,execution,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,get,named,query,string;list,find,by,named,query,and,named,param,string,query,name,string,param,names,object,values,throws,data,access,exception
HibernateOperations -> Serializable save(Object entity) throws DataAccessException_;1467668243;Persist the given transient instance._@param entity the transient instance to persist_@return the generated identifier_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#save(Object);Serializable save(Object entity) throws DataAccessException_;persist,the,given,transient,instance,param,entity,the,transient,instance,to,persist,return,the,generated,identifier,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,save,object;serializable,save,object,entity,throws,data,access,exception
HibernateOperations -> Serializable save(Object entity) throws DataAccessException_;1495868221;Persist the given transient instance._@param entity the transient instance to persist_@return the generated identifier_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#save(Object);Serializable save(Object entity) throws DataAccessException_;persist,the,given,transient,instance,param,entity,the,transient,instance,to,persist,return,the,generated,identifier,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,save,object;serializable,save,object,entity,throws,data,access,exception
HibernateOperations -> Serializable save(Object entity) throws DataAccessException_;1517247608;Persist the given transient instance._@param entity the transient instance to persist_@return the generated identifier_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#save(Object);Serializable save(Object entity) throws DataAccessException_;persist,the,given,transient,instance,param,entity,the,transient,instance,to,persist,return,the,generated,identifier,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,save,object;serializable,save,object,entity,throws,data,access,exception
HibernateOperations -> List<?> findByValueBean(String queryString, Object valueBean) throws DataAccessException_;1467668243;Execute an HQL query, binding the properties of the given bean to_<i>named</i> parameters in the query string._@param queryString a query expressed in Hibernate's query language_@param valueBean the values of the parameters_@return a {@link List} containing the results of the query execution_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Query#setProperties_@see org.hibernate.Session#createQuery;List<?> findByValueBean(String queryString, Object valueBean) throws DataAccessException_;execute,an,hql,query,binding,the,properties,of,the,given,bean,to,i,named,i,parameters,in,the,query,string,param,query,string,a,query,expressed,in,hibernate,s,query,language,param,value,bean,the,values,of,the,parameters,return,a,link,list,containing,the,results,of,the,query,execution,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,query,set,properties,see,org,hibernate,session,create,query;list,find,by,value,bean,string,query,string,object,value,bean,throws,data,access,exception
HibernateOperations -> List<?> findByValueBean(String queryString, Object valueBean) throws DataAccessException_;1495868221;Execute an HQL query, binding the properties of the given bean to_<i>named</i> parameters in the query string._@param queryString a query expressed in Hibernate's query language_@param valueBean the values of the parameters_@return a {@link List} containing the results of the query execution_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Query#setProperties_@see org.hibernate.Session#createQuery;List<?> findByValueBean(String queryString, Object valueBean) throws DataAccessException_;execute,an,hql,query,binding,the,properties,of,the,given,bean,to,i,named,i,parameters,in,the,query,string,param,query,string,a,query,expressed,in,hibernate,s,query,language,param,value,bean,the,values,of,the,parameters,return,a,link,list,containing,the,results,of,the,query,execution,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,query,set,properties,see,org,hibernate,session,create,query;list,find,by,value,bean,string,query,string,object,value,bean,throws,data,access,exception
HibernateOperations -> void evict(Object entity) throws DataAccessException_;1467668243;Remove the given object from the {@link org.hibernate.Session} cache._@param entity the persistent instance to evict_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#evict;void evict(Object entity) throws DataAccessException_;remove,the,given,object,from,the,link,org,hibernate,session,cache,param,entity,the,persistent,instance,to,evict,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,evict;void,evict,object,entity,throws,data,access,exception
HibernateOperations -> void evict(Object entity) throws DataAccessException_;1495868221;Remove the given object from the {@link org.hibernate.Session} cache._@param entity the persistent instance to evict_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#evict;void evict(Object entity) throws DataAccessException_;remove,the,given,object,from,the,link,org,hibernate,session,cache,param,entity,the,persistent,instance,to,evict,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,evict;void,evict,object,entity,throws,data,access,exception
HibernateOperations -> void evict(Object entity) throws DataAccessException_;1517247608;Remove the given object from the {@link org.hibernate.Session} cache._@param entity the persistent instance to evict_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#evict;void evict(Object entity) throws DataAccessException_;remove,the,given,object,from,the,link,org,hibernate,session,cache,param,entity,the,persistent,instance,to,evict,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,evict;void,evict,object,entity,throws,data,access,exception
HibernateOperations -> @Nullable 	Object get(String entityName, Serializable id) throws DataAccessException_;1495868221;Return the persistent instance of the given entity class_with the given identifier, or {@code null} if not found._<p>This method is a thin wrapper around_{@link org.hibernate.Session#get(String, Serializable)} for convenience._For an explanation of the exact semantics of this method, please do refer to_the Hibernate API documentation in the first instance._@param entityName the name of the persistent entity_@param id the identifier of the persistent instance_@return the persistent instance, or {@code null} if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#get(Class, Serializable);@Nullable_	Object get(String entityName, Serializable id) throws DataAccessException_;return,the,persistent,instance,of,the,given,entity,class,with,the,given,identifier,or,code,null,if,not,found,p,this,method,is,a,thin,wrapper,around,link,org,hibernate,session,get,string,serializable,for,convenience,for,an,explanation,of,the,exact,semantics,of,this,method,please,do,refer,to,the,hibernate,api,documentation,in,the,first,instance,param,entity,name,the,name,of,the,persistent,entity,param,id,the,identifier,of,the,persistent,instance,return,the,persistent,instance,or,code,null,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,get,class,serializable;nullable,object,get,string,entity,name,serializable,id,throws,data,access,exception
HibernateOperations -> @Nullable 	Object get(String entityName, Serializable id) throws DataAccessException_;1517247608;Return the persistent instance of the given entity class_with the given identifier, or {@code null} if not found._<p>This method is a thin wrapper around_{@link org.hibernate.Session#get(String, Serializable)} for convenience._For an explanation of the exact semantics of this method, please do refer to_the Hibernate API documentation in the first instance._@param entityName the name of the persistent entity_@param id the identifier of the persistent instance_@return the persistent instance, or {@code null} if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#get(Class, Serializable);@Nullable_	Object get(String entityName, Serializable id) throws DataAccessException_;return,the,persistent,instance,of,the,given,entity,class,with,the,given,identifier,or,code,null,if,not,found,p,this,method,is,a,thin,wrapper,around,link,org,hibernate,session,get,string,serializable,for,convenience,for,an,explanation,of,the,exact,semantics,of,this,method,please,do,refer,to,the,hibernate,api,documentation,in,the,first,instance,param,entity,name,the,name,of,the,persistent,entity,param,id,the,identifier,of,the,persistent,instance,return,the,persistent,instance,or,code,null,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,get,class,serializable;nullable,object,get,string,entity,name,serializable,id,throws,data,access,exception
HibernateOperations -> List<?> findByNamedParam(String queryString, String[] paramNames, Object[] values) throws DataAccessException_;1467668243;Execute an HQL query, binding a number of values to ":" named_parameters in the query string._@param queryString a query expressed in Hibernate's query language_@param paramNames the names of the parameters_@param values the values of the parameters_@return a {@link List} containing the results of the query execution_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#getNamedQuery(String);List<?> findByNamedParam(String queryString, String[] paramNames, Object[] values) throws DataAccessException_;execute,an,hql,query,binding,a,number,of,values,to,named,parameters,in,the,query,string,param,query,string,a,query,expressed,in,hibernate,s,query,language,param,param,names,the,names,of,the,parameters,param,values,the,values,of,the,parameters,return,a,link,list,containing,the,results,of,the,query,execution,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,get,named,query,string;list,find,by,named,param,string,query,string,string,param,names,object,values,throws,data,access,exception
HibernateOperations -> List<?> findByNamedParam(String queryString, String[] paramNames, Object[] values) throws DataAccessException_;1495868221;Execute an HQL query, binding a number of values to ":" named_parameters in the query string._@param queryString a query expressed in Hibernate's query language_@param paramNames the names of the parameters_@param values the values of the parameters_@return a {@link List} containing the results of the query execution_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#getNamedQuery(String);List<?> findByNamedParam(String queryString, String[] paramNames, Object[] values) throws DataAccessException_;execute,an,hql,query,binding,a,number,of,values,to,named,parameters,in,the,query,string,param,query,string,a,query,expressed,in,hibernate,s,query,language,param,param,names,the,names,of,the,parameters,param,values,the,values,of,the,parameters,return,a,link,list,containing,the,results,of,the,query,execution,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,get,named,query,string;list,find,by,named,param,string,query,string,string,param,names,object,values,throws,data,access,exception
HibernateOperations -> Serializable save(String entityName, Object entity) throws DataAccessException_;1467668243;Persist the given transient instance._@param entityName the name of the persistent entity_@param entity the transient instance to persist_@return the generated identifier_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#save(String, Object);Serializable save(String entityName, Object entity) throws DataAccessException_;persist,the,given,transient,instance,param,entity,name,the,name,of,the,persistent,entity,param,entity,the,transient,instance,to,persist,return,the,generated,identifier,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,save,string,object;serializable,save,string,entity,name,object,entity,throws,data,access,exception
HibernateOperations -> Serializable save(String entityName, Object entity) throws DataAccessException_;1495868221;Persist the given transient instance._@param entityName the name of the persistent entity_@param entity the transient instance to persist_@return the generated identifier_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#save(String, Object);Serializable save(String entityName, Object entity) throws DataAccessException_;persist,the,given,transient,instance,param,entity,name,the,name,of,the,persistent,entity,param,entity,the,transient,instance,to,persist,return,the,generated,identifier,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,save,string,object;serializable,save,string,entity,name,object,entity,throws,data,access,exception
HibernateOperations -> Serializable save(String entityName, Object entity) throws DataAccessException_;1517247608;Persist the given transient instance._@param entityName the name of the persistent entity_@param entity the transient instance to persist_@return the generated identifier_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#save(String, Object);Serializable save(String entityName, Object entity) throws DataAccessException_;persist,the,given,transient,instance,param,entity,name,the,name,of,the,persistent,entity,param,entity,the,transient,instance,to,persist,return,the,generated,identifier,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,save,string,object;serializable,save,string,entity,name,object,entity,throws,data,access,exception
HibernateOperations -> void flush() throws DataAccessException_;1467668243;Flush all pending saves, updates and deletes to the database._<p>Only invoke this for selective eager flushing, for example when_JDBC code needs to see certain changes within the same transaction._Else, it is preferable to rely on auto-flushing at transaction_completion._@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#flush;void flush() throws DataAccessException_;flush,all,pending,saves,updates,and,deletes,to,the,database,p,only,invoke,this,for,selective,eager,flushing,for,example,when,jdbc,code,needs,to,see,certain,changes,within,the,same,transaction,else,it,is,preferable,to,rely,on,auto,flushing,at,transaction,completion,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,flush;void,flush,throws,data,access,exception
HibernateOperations -> void flush() throws DataAccessException_;1495868221;Flush all pending saves, updates and deletes to the database._<p>Only invoke this for selective eager flushing, for example when_JDBC code needs to see certain changes within the same transaction._Else, it is preferable to rely on auto-flushing at transaction_completion._@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#flush;void flush() throws DataAccessException_;flush,all,pending,saves,updates,and,deletes,to,the,database,p,only,invoke,this,for,selective,eager,flushing,for,example,when,jdbc,code,needs,to,see,certain,changes,within,the,same,transaction,else,it,is,preferable,to,rely,on,auto,flushing,at,transaction,completion,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,flush;void,flush,throws,data,access,exception
HibernateOperations -> void flush() throws DataAccessException_;1517247608;Flush all pending saves, updates and deletes to the database._<p>Only invoke this for selective eager flushing, for example when_JDBC code needs to see certain changes within the same transaction._Else, it is preferable to rely on auto-flushing at transaction_completion._@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#flush;void flush() throws DataAccessException_;flush,all,pending,saves,updates,and,deletes,to,the,database,p,only,invoke,this,for,selective,eager,flushing,for,example,when,jdbc,code,needs,to,see,certain,changes,within,the,same,transaction,else,it,is,preferable,to,rely,on,auto,flushing,at,transaction,completion,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,flush;void,flush,throws,data,access,exception
HibernateOperations -> <T> T load(Class<T> entityClass, Serializable id, LockMode lockMode) throws DataAccessException_;1467668243;Return the persistent instance of the given entity class_with the given identifier, throwing an exception if not found._Obtains the specified lock mode if the instance exists._<p>This method is a thin wrapper around_{@link org.hibernate.Session#load(Class, Serializable, LockMode)} for convenience._For an explanation of the exact semantics of this method, please do refer to_the Hibernate API documentation in the first instance._@param entityClass a persistent class_@param id the identifier of the persistent instance_@param lockMode the lock mode to obtain_@return the persistent instance_@throws org.springframework.orm.ObjectRetrievalFailureException if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#load(Class, Serializable);<T> T load(Class<T> entityClass, Serializable id, LockMode lockMode) throws DataAccessException_;return,the,persistent,instance,of,the,given,entity,class,with,the,given,identifier,throwing,an,exception,if,not,found,obtains,the,specified,lock,mode,if,the,instance,exists,p,this,method,is,a,thin,wrapper,around,link,org,hibernate,session,load,class,serializable,lock,mode,for,convenience,for,an,explanation,of,the,exact,semantics,of,this,method,please,do,refer,to,the,hibernate,api,documentation,in,the,first,instance,param,entity,class,a,persistent,class,param,id,the,identifier,of,the,persistent,instance,param,lock,mode,the,lock,mode,to,obtain,return,the,persistent,instance,throws,org,springframework,orm,object,retrieval,failure,exception,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,load,class,serializable;t,t,load,class,t,entity,class,serializable,id,lock,mode,lock,mode,throws,data,access,exception
HibernateOperations -> <T> T load(Class<T> entityClass, Serializable id, LockMode lockMode) throws DataAccessException_;1495868221;Return the persistent instance of the given entity class_with the given identifier, throwing an exception if not found._Obtains the specified lock mode if the instance exists._<p>This method is a thin wrapper around_{@link org.hibernate.Session#load(Class, Serializable, LockMode)} for convenience._For an explanation of the exact semantics of this method, please do refer to_the Hibernate API documentation in the first instance._@param entityClass a persistent class_@param id the identifier of the persistent instance_@param lockMode the lock mode to obtain_@return the persistent instance_@throws org.springframework.orm.ObjectRetrievalFailureException if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#load(Class, Serializable);<T> T load(Class<T> entityClass, Serializable id, LockMode lockMode) throws DataAccessException_;return,the,persistent,instance,of,the,given,entity,class,with,the,given,identifier,throwing,an,exception,if,not,found,obtains,the,specified,lock,mode,if,the,instance,exists,p,this,method,is,a,thin,wrapper,around,link,org,hibernate,session,load,class,serializable,lock,mode,for,convenience,for,an,explanation,of,the,exact,semantics,of,this,method,please,do,refer,to,the,hibernate,api,documentation,in,the,first,instance,param,entity,class,a,persistent,class,param,id,the,identifier,of,the,persistent,instance,param,lock,mode,the,lock,mode,to,obtain,return,the,persistent,instance,throws,org,springframework,orm,object,retrieval,failure,exception,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,load,class,serializable;t,t,load,class,t,entity,class,serializable,id,lock,mode,lock,mode,throws,data,access,exception
HibernateOperations -> <T> T load(Class<T> entityClass, Serializable id, LockMode lockMode) throws DataAccessException_;1517247608;Return the persistent instance of the given entity class_with the given identifier, throwing an exception if not found._Obtains the specified lock mode if the instance exists._<p>This method is a thin wrapper around_{@link org.hibernate.Session#load(Class, Serializable, LockMode)} for convenience._For an explanation of the exact semantics of this method, please do refer to_the Hibernate API documentation in the first instance._@param entityClass a persistent class_@param id the identifier of the persistent instance_@param lockMode the lock mode to obtain_@return the persistent instance_@throws org.springframework.orm.ObjectRetrievalFailureException if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#load(Class, Serializable);<T> T load(Class<T> entityClass, Serializable id, LockMode lockMode) throws DataAccessException_;return,the,persistent,instance,of,the,given,entity,class,with,the,given,identifier,throwing,an,exception,if,not,found,obtains,the,specified,lock,mode,if,the,instance,exists,p,this,method,is,a,thin,wrapper,around,link,org,hibernate,session,load,class,serializable,lock,mode,for,convenience,for,an,explanation,of,the,exact,semantics,of,this,method,please,do,refer,to,the,hibernate,api,documentation,in,the,first,instance,param,entity,class,a,persistent,class,param,id,the,identifier,of,the,persistent,instance,param,lock,mode,the,lock,mode,to,obtain,return,the,persistent,instance,throws,org,springframework,orm,object,retrieval,failure,exception,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,load,class,serializable;t,t,load,class,t,entity,class,serializable,id,lock,mode,lock,mode,throws,data,access,exception
HibernateOperations -> void refresh(Object entity) throws DataAccessException_;1467668243;Re-read the state of the given persistent instance._@param entity the persistent instance to re-read_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#refresh(Object);void refresh(Object entity) throws DataAccessException_;re,read,the,state,of,the,given,persistent,instance,param,entity,the,persistent,instance,to,re,read,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,refresh,object;void,refresh,object,entity,throws,data,access,exception
HibernateOperations -> void refresh(Object entity) throws DataAccessException_;1495868221;Re-read the state of the given persistent instance._@param entity the persistent instance to re-read_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#refresh(Object);void refresh(Object entity) throws DataAccessException_;re,read,the,state,of,the,given,persistent,instance,param,entity,the,persistent,instance,to,re,read,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,refresh,object;void,refresh,object,entity,throws,data,access,exception
HibernateOperations -> void refresh(Object entity) throws DataAccessException_;1517247608;Re-read the state of the given persistent instance._@param entity the persistent instance to re-read_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#refresh(Object);void refresh(Object entity) throws DataAccessException_;re,read,the,state,of,the,given,persistent,instance,param,entity,the,persistent,instance,to,re,read,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,refresh,object;void,refresh,object,entity,throws,data,access,exception
HibernateOperations -> void persist(Object entity) throws DataAccessException_;1467668243;Persist the given transient instance. Follows JSR-220 semantics._<p>Similar to {@code save}, associating the given object_with the current Hibernate {@link org.hibernate.Session}._@param entity the persistent instance to persist_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#persist(Object)_@see #save;void persist(Object entity) throws DataAccessException_;persist,the,given,transient,instance,follows,jsr,220,semantics,p,similar,to,code,save,associating,the,given,object,with,the,current,hibernate,link,org,hibernate,session,param,entity,the,persistent,instance,to,persist,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,persist,object,see,save;void,persist,object,entity,throws,data,access,exception
HibernateOperations -> void persist(Object entity) throws DataAccessException_;1495868221;Persist the given transient instance. Follows JSR-220 semantics._<p>Similar to {@code save}, associating the given object_with the current Hibernate {@link org.hibernate.Session}._@param entity the persistent instance to persist_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#persist(Object)_@see #save;void persist(Object entity) throws DataAccessException_;persist,the,given,transient,instance,follows,jsr,220,semantics,p,similar,to,code,save,associating,the,given,object,with,the,current,hibernate,link,org,hibernate,session,param,entity,the,persistent,instance,to,persist,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,persist,object,see,save;void,persist,object,entity,throws,data,access,exception
HibernateOperations -> void persist(Object entity) throws DataAccessException_;1517247608;Persist the given transient instance. Follows JSR-220 semantics._<p>Similar to {@code save}, associating the given object_with the current Hibernate {@link org.hibernate.Session}._@param entity the persistent instance to persist_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#persist(Object)_@see #save;void persist(Object entity) throws DataAccessException_;persist,the,given,transient,instance,follows,jsr,220,semantics,p,similar,to,code,save,associating,the,given,object,with,the,current,hibernate,link,org,hibernate,session,param,entity,the,persistent,instance,to,persist,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,persist,object,see,save;void,persist,object,entity,throws,data,access,exception
HibernateOperations -> <T> T load(Class<T> entityClass, Serializable id) throws DataAccessException_;1467668243;Return the persistent instance of the given entity class_with the given identifier, throwing an exception if not found._<p>This method is a thin wrapper around_{@link org.hibernate.Session#load(Class, Serializable)} for convenience._For an explanation of the exact semantics of this method, please do refer to_the Hibernate API documentation in the first instance._@param entityClass a persistent class_@param id the identifier of the persistent instance_@return the persistent instance_@throws org.springframework.orm.ObjectRetrievalFailureException if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#load(Class, Serializable);<T> T load(Class<T> entityClass, Serializable id) throws DataAccessException_;return,the,persistent,instance,of,the,given,entity,class,with,the,given,identifier,throwing,an,exception,if,not,found,p,this,method,is,a,thin,wrapper,around,link,org,hibernate,session,load,class,serializable,for,convenience,for,an,explanation,of,the,exact,semantics,of,this,method,please,do,refer,to,the,hibernate,api,documentation,in,the,first,instance,param,entity,class,a,persistent,class,param,id,the,identifier,of,the,persistent,instance,return,the,persistent,instance,throws,org,springframework,orm,object,retrieval,failure,exception,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,load,class,serializable;t,t,load,class,t,entity,class,serializable,id,throws,data,access,exception
HibernateOperations -> <T> T load(Class<T> entityClass, Serializable id) throws DataAccessException_;1495868221;Return the persistent instance of the given entity class_with the given identifier, throwing an exception if not found._<p>This method is a thin wrapper around_{@link org.hibernate.Session#load(Class, Serializable)} for convenience._For an explanation of the exact semantics of this method, please do refer to_the Hibernate API documentation in the first instance._@param entityClass a persistent class_@param id the identifier of the persistent instance_@return the persistent instance_@throws org.springframework.orm.ObjectRetrievalFailureException if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#load(Class, Serializable);<T> T load(Class<T> entityClass, Serializable id) throws DataAccessException_;return,the,persistent,instance,of,the,given,entity,class,with,the,given,identifier,throwing,an,exception,if,not,found,p,this,method,is,a,thin,wrapper,around,link,org,hibernate,session,load,class,serializable,for,convenience,for,an,explanation,of,the,exact,semantics,of,this,method,please,do,refer,to,the,hibernate,api,documentation,in,the,first,instance,param,entity,class,a,persistent,class,param,id,the,identifier,of,the,persistent,instance,return,the,persistent,instance,throws,org,springframework,orm,object,retrieval,failure,exception,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,load,class,serializable;t,t,load,class,t,entity,class,serializable,id,throws,data,access,exception
HibernateOperations -> <T> T load(Class<T> entityClass, Serializable id) throws DataAccessException_;1517247608;Return the persistent instance of the given entity class_with the given identifier, throwing an exception if not found._<p>This method is a thin wrapper around_{@link org.hibernate.Session#load(Class, Serializable)} for convenience._For an explanation of the exact semantics of this method, please do refer to_the Hibernate API documentation in the first instance._@param entityClass a persistent class_@param id the identifier of the persistent instance_@return the persistent instance_@throws org.springframework.orm.ObjectRetrievalFailureException if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#load(Class, Serializable);<T> T load(Class<T> entityClass, Serializable id) throws DataAccessException_;return,the,persistent,instance,of,the,given,entity,class,with,the,given,identifier,throwing,an,exception,if,not,found,p,this,method,is,a,thin,wrapper,around,link,org,hibernate,session,load,class,serializable,for,convenience,for,an,explanation,of,the,exact,semantics,of,this,method,please,do,refer,to,the,hibernate,api,documentation,in,the,first,instance,param,entity,class,a,persistent,class,param,id,the,identifier,of,the,persistent,instance,return,the,persistent,instance,throws,org,springframework,orm,object,retrieval,failure,exception,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,load,class,serializable;t,t,load,class,t,entity,class,serializable,id,throws,data,access,exception
HibernateOperations -> <T> List<T> findByExample(T exampleEntity, int firstResult, int maxResults) throws DataAccessException_;1467668243;Execute a query based on a given example entity object._@param exampleEntity an instance of the desired entity,_serving as example for "query-by-example"_@param firstResult the index of the first result object to be retrieved_(numbered from 0)_@param maxResults the maximum number of result objects to retrieve_(or <=0 for no limit)_@return a {@link List} containing 0 or more persistent instances_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.criterion.Example#create(Object)_@see org.hibernate.Criteria#setFirstResult(int)_@see org.hibernate.Criteria#setMaxResults(int);<T> List<T> findByExample(T exampleEntity, int firstResult, int maxResults) throws DataAccessException_;execute,a,query,based,on,a,given,example,entity,object,param,example,entity,an,instance,of,the,desired,entity,serving,as,example,for,query,by,example,param,first,result,the,index,of,the,first,result,object,to,be,retrieved,numbered,from,0,param,max,results,the,maximum,number,of,result,objects,to,retrieve,or,0,for,no,limit,return,a,link,list,containing,0,or,more,persistent,instances,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,criterion,example,create,object,see,org,hibernate,criteria,set,first,result,int,see,org,hibernate,criteria,set,max,results,int;t,list,t,find,by,example,t,example,entity,int,first,result,int,max,results,throws,data,access,exception
HibernateOperations -> <T> List<T> findByExample(T exampleEntity, int firstResult, int maxResults) throws DataAccessException_;1495868221;Execute a query based on a given example entity object._@param exampleEntity an instance of the desired entity,_serving as example for "query-by-example"_@param firstResult the index of the first result object to be retrieved_(numbered from 0)_@param maxResults the maximum number of result objects to retrieve_(or <=0 for no limit)_@return a {@link List} containing 0 or more persistent instances_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.criterion.Example#create(Object)_@see org.hibernate.Criteria#setFirstResult(int)_@see org.hibernate.Criteria#setMaxResults(int);<T> List<T> findByExample(T exampleEntity, int firstResult, int maxResults) throws DataAccessException_;execute,a,query,based,on,a,given,example,entity,object,param,example,entity,an,instance,of,the,desired,entity,serving,as,example,for,query,by,example,param,first,result,the,index,of,the,first,result,object,to,be,retrieved,numbered,from,0,param,max,results,the,maximum,number,of,result,objects,to,retrieve,or,0,for,no,limit,return,a,link,list,containing,0,or,more,persistent,instances,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,criterion,example,create,object,see,org,hibernate,criteria,set,first,result,int,see,org,hibernate,criteria,set,max,results,int;t,list,t,find,by,example,t,example,entity,int,first,result,int,max,results,throws,data,access,exception
HibernateOperations -> <T> List<T> findByExample(T exampleEntity, int firstResult, int maxResults) throws DataAccessException_;1517247608;Execute a query based on a given example entity object._@param exampleEntity an instance of the desired entity,_serving as example for "query-by-example"_@param firstResult the index of the first result object to be retrieved_(numbered from 0)_@param maxResults the maximum number of result objects to retrieve_(or <=0 for no limit)_@return a {@link List} containing 0 or more persistent instances_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.criterion.Example#create(Object)_@see org.hibernate.Criteria#setFirstResult(int)_@see org.hibernate.Criteria#setMaxResults(int);<T> List<T> findByExample(T exampleEntity, int firstResult, int maxResults) throws DataAccessException_;execute,a,query,based,on,a,given,example,entity,object,param,example,entity,an,instance,of,the,desired,entity,serving,as,example,for,query,by,example,param,first,result,the,index,of,the,first,result,object,to,be,retrieved,numbered,from,0,param,max,results,the,maximum,number,of,result,objects,to,retrieve,or,0,for,no,limit,return,a,link,list,containing,0,or,more,persistent,instances,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,criterion,example,create,object,see,org,hibernate,criteria,set,first,result,int,see,org,hibernate,criteria,set,max,results,int;t,list,t,find,by,example,t,example,entity,int,first,result,int,max,results,throws,data,access,exception
HibernateOperations -> void delete(Object entity) throws DataAccessException_;1467668243;Delete the given persistent instance._@param entity the persistent instance to delete_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#delete(Object);void delete(Object entity) throws DataAccessException_;delete,the,given,persistent,instance,param,entity,the,persistent,instance,to,delete,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,delete,object;void,delete,object,entity,throws,data,access,exception
HibernateOperations -> void delete(Object entity) throws DataAccessException_;1495868221;Delete the given persistent instance._@param entity the persistent instance to delete_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#delete(Object);void delete(Object entity) throws DataAccessException_;delete,the,given,persistent,instance,param,entity,the,persistent,instance,to,delete,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,delete,object;void,delete,object,entity,throws,data,access,exception
HibernateOperations -> void delete(Object entity) throws DataAccessException_;1517247608;Delete the given persistent instance._@param entity the persistent instance to delete_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#delete(Object);void delete(Object entity) throws DataAccessException_;delete,the,given,persistent,instance,param,entity,the,persistent,instance,to,delete,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,delete,object;void,delete,object,entity,throws,data,access,exception
HibernateOperations -> void delete(String entityName, Object entity, LockMode lockMode) throws DataAccessException_;1467668243;Delete the given persistent instance._<p>Obtains the specified lock mode if the instance exists, implicitly_checking whether the corresponding database entry still exists._@param entityName the name of the persistent entity_@param entity the persistent instance to delete_@param lockMode the lock mode to obtain_@throws org.springframework.orm.ObjectOptimisticLockingFailureException if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#delete(Object);void delete(String entityName, Object entity, LockMode lockMode) throws DataAccessException_;delete,the,given,persistent,instance,p,obtains,the,specified,lock,mode,if,the,instance,exists,implicitly,checking,whether,the,corresponding,database,entry,still,exists,param,entity,name,the,name,of,the,persistent,entity,param,entity,the,persistent,instance,to,delete,param,lock,mode,the,lock,mode,to,obtain,throws,org,springframework,orm,object,optimistic,locking,failure,exception,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,delete,object;void,delete,string,entity,name,object,entity,lock,mode,lock,mode,throws,data,access,exception
HibernateOperations -> void delete(String entityName, Object entity, LockMode lockMode) throws DataAccessException_;1495868221;Delete the given persistent instance._<p>Obtains the specified lock mode if the instance exists, implicitly_checking whether the corresponding database entry still exists._@param entityName the name of the persistent entity_@param entity the persistent instance to delete_@param lockMode the lock mode to obtain_@throws org.springframework.orm.ObjectOptimisticLockingFailureException if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#delete(Object);void delete(String entityName, Object entity, LockMode lockMode) throws DataAccessException_;delete,the,given,persistent,instance,p,obtains,the,specified,lock,mode,if,the,instance,exists,implicitly,checking,whether,the,corresponding,database,entry,still,exists,param,entity,name,the,name,of,the,persistent,entity,param,entity,the,persistent,instance,to,delete,param,lock,mode,the,lock,mode,to,obtain,throws,org,springframework,orm,object,optimistic,locking,failure,exception,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,delete,object;void,delete,string,entity,name,object,entity,lock,mode,lock,mode,throws,data,access,exception
HibernateOperations -> void delete(String entityName, Object entity, LockMode lockMode) throws DataAccessException_;1517247608;Delete the given persistent instance._<p>Obtains the specified lock mode if the instance exists, implicitly_checking whether the corresponding database entry still exists._@param entityName the name of the persistent entity_@param entity the persistent instance to delete_@param lockMode the lock mode to obtain_@throws org.springframework.orm.ObjectOptimisticLockingFailureException if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#delete(Object);void delete(String entityName, Object entity, LockMode lockMode) throws DataAccessException_;delete,the,given,persistent,instance,p,obtains,the,specified,lock,mode,if,the,instance,exists,implicitly,checking,whether,the,corresponding,database,entry,still,exists,param,entity,name,the,name,of,the,persistent,entity,param,entity,the,persistent,instance,to,delete,param,lock,mode,the,lock,mode,to,obtain,throws,org,springframework,orm,object,optimistic,locking,failure,exception,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,delete,object;void,delete,string,entity,name,object,entity,lock,mode,lock,mode,throws,data,access,exception
HibernateOperations -> List<?> findByNamedParam(String queryString, String paramName, Object value) throws DataAccessException_;1467668243;Execute an HQL query, binding one value to a ":" named parameter_in the query string._@param queryString a query expressed in Hibernate's query language_@param paramName the name of the parameter_@param value the value of the parameter_@return a {@link List} containing the results of the query execution_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#getNamedQuery(String);List<?> findByNamedParam(String queryString, String paramName, Object value) throws DataAccessException_;execute,an,hql,query,binding,one,value,to,a,named,parameter,in,the,query,string,param,query,string,a,query,expressed,in,hibernate,s,query,language,param,param,name,the,name,of,the,parameter,param,value,the,value,of,the,parameter,return,a,link,list,containing,the,results,of,the,query,execution,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,get,named,query,string;list,find,by,named,param,string,query,string,string,param,name,object,value,throws,data,access,exception
HibernateOperations -> List<?> findByNamedParam(String queryString, String paramName, Object value) throws DataAccessException_;1495868221;Execute an HQL query, binding one value to a ":" named parameter_in the query string._@param queryString a query expressed in Hibernate's query language_@param paramName the name of the parameter_@param value the value of the parameter_@return a {@link List} containing the results of the query execution_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#getNamedQuery(String);List<?> findByNamedParam(String queryString, String paramName, Object value) throws DataAccessException_;execute,an,hql,query,binding,one,value,to,a,named,parameter,in,the,query,string,param,query,string,a,query,expressed,in,hibernate,s,query,language,param,param,name,the,name,of,the,parameter,param,value,the,value,of,the,parameter,return,a,link,list,containing,the,results,of,the,query,execution,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,get,named,query,string;list,find,by,named,param,string,query,string,string,param,name,object,value,throws,data,access,exception
HibernateOperations -> void saveOrUpdate(String entityName, Object entity) throws DataAccessException_;1467668243;Save or update the given persistent instance,_according to its id (matching the configured "unsaved-value"?)._Associates the instance with the current Hibernate {@code Session}._@param entityName the name of the persistent entity_@param entity the persistent instance to save or update_(to be associated with the Hibernate {@code Session})_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#saveOrUpdate(String, Object);void saveOrUpdate(String entityName, Object entity) throws DataAccessException_;save,or,update,the,given,persistent,instance,according,to,its,id,matching,the,configured,unsaved,value,associates,the,instance,with,the,current,hibernate,code,session,param,entity,name,the,name,of,the,persistent,entity,param,entity,the,persistent,instance,to,save,or,update,to,be,associated,with,the,hibernate,code,session,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,save,or,update,string,object;void,save,or,update,string,entity,name,object,entity,throws,data,access,exception
HibernateOperations -> void saveOrUpdate(String entityName, Object entity) throws DataAccessException_;1495868221;Save or update the given persistent instance,_according to its id (matching the configured "unsaved-value"?)._Associates the instance with the current Hibernate {@code Session}._@param entityName the name of the persistent entity_@param entity the persistent instance to save or update_(to be associated with the Hibernate {@code Session})_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#saveOrUpdate(String, Object);void saveOrUpdate(String entityName, Object entity) throws DataAccessException_;save,or,update,the,given,persistent,instance,according,to,its,id,matching,the,configured,unsaved,value,associates,the,instance,with,the,current,hibernate,code,session,param,entity,name,the,name,of,the,persistent,entity,param,entity,the,persistent,instance,to,save,or,update,to,be,associated,with,the,hibernate,code,session,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,save,or,update,string,object;void,save,or,update,string,entity,name,object,entity,throws,data,access,exception
HibernateOperations -> void saveOrUpdate(String entityName, Object entity) throws DataAccessException_;1517247608;Save or update the given persistent instance,_according to its id (matching the configured "unsaved-value"?)._Associates the instance with the current Hibernate {@code Session}._@param entityName the name of the persistent entity_@param entity the persistent instance to save or update_(to be associated with the Hibernate {@code Session})_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#saveOrUpdate(String, Object);void saveOrUpdate(String entityName, Object entity) throws DataAccessException_;save,or,update,the,given,persistent,instance,according,to,its,id,matching,the,configured,unsaved,value,associates,the,instance,with,the,current,hibernate,code,session,param,entity,name,the,name,of,the,persistent,entity,param,entity,the,persistent,instance,to,save,or,update,to,be,associated,with,the,hibernate,code,session,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,save,or,update,string,object;void,save,or,update,string,entity,name,object,entity,throws,data,access,exception
HibernateOperations -> void replicate(String entityName, Object entity, ReplicationMode replicationMode) throws DataAccessException_;1467668243;Persist the state of the given detached instance according to the_given replication mode, reusing the current identifier value._@param entityName the name of the persistent entity_@param entity the persistent object to replicate_@param replicationMode the Hibernate ReplicationMode_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#replicate(String, Object, ReplicationMode);void replicate(String entityName, Object entity, ReplicationMode replicationMode) throws DataAccessException_;persist,the,state,of,the,given,detached,instance,according,to,the,given,replication,mode,reusing,the,current,identifier,value,param,entity,name,the,name,of,the,persistent,entity,param,entity,the,persistent,object,to,replicate,param,replication,mode,the,hibernate,replication,mode,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,replicate,string,object,replication,mode;void,replicate,string,entity,name,object,entity,replication,mode,replication,mode,throws,data,access,exception
HibernateOperations -> void replicate(String entityName, Object entity, ReplicationMode replicationMode) throws DataAccessException_;1495868221;Persist the state of the given detached instance according to the_given replication mode, reusing the current identifier value._@param entityName the name of the persistent entity_@param entity the persistent object to replicate_@param replicationMode the Hibernate ReplicationMode_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#replicate(String, Object, ReplicationMode);void replicate(String entityName, Object entity, ReplicationMode replicationMode) throws DataAccessException_;persist,the,state,of,the,given,detached,instance,according,to,the,given,replication,mode,reusing,the,current,identifier,value,param,entity,name,the,name,of,the,persistent,entity,param,entity,the,persistent,object,to,replicate,param,replication,mode,the,hibernate,replication,mode,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,replicate,string,object,replication,mode;void,replicate,string,entity,name,object,entity,replication,mode,replication,mode,throws,data,access,exception
HibernateOperations -> void replicate(String entityName, Object entity, ReplicationMode replicationMode) throws DataAccessException_;1517247608;Persist the state of the given detached instance according to the_given replication mode, reusing the current identifier value._@param entityName the name of the persistent entity_@param entity the persistent object to replicate_@param replicationMode the Hibernate ReplicationMode_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#replicate(String, Object, ReplicationMode);void replicate(String entityName, Object entity, ReplicationMode replicationMode) throws DataAccessException_;persist,the,state,of,the,given,detached,instance,according,to,the,given,replication,mode,reusing,the,current,identifier,value,param,entity,name,the,name,of,the,persistent,entity,param,entity,the,persistent,object,to,replicate,param,replication,mode,the,hibernate,replication,mode,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,replicate,string,object,replication,mode;void,replicate,string,entity,name,object,entity,replication,mode,replication,mode,throws,data,access,exception
HibernateOperations -> int bulkUpdate(String queryString, Object... values) throws DataAccessException_;1467668243;Update/delete all objects according to the given query, binding a number of_values to "?" parameters in the query string._@param queryString an update/delete query expressed in Hibernate's query language_@param values the values of the parameters_@return the number of instances updated/deleted_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#createQuery_@see org.hibernate.Query#executeUpdate;int bulkUpdate(String queryString, Object... values) throws DataAccessException_;update,delete,all,objects,according,to,the,given,query,binding,a,number,of,values,to,parameters,in,the,query,string,param,query,string,an,update,delete,query,expressed,in,hibernate,s,query,language,param,values,the,values,of,the,parameters,return,the,number,of,instances,updated,deleted,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,create,query,see,org,hibernate,query,execute,update;int,bulk,update,string,query,string,object,values,throws,data,access,exception
HibernateOperations -> int bulkUpdate(String queryString, Object... values) throws DataAccessException_;1495868221;Update/delete all objects according to the given query, binding a number of_values to "?" parameters in the query string._@param queryString an update/delete query expressed in Hibernate's query language_@param values the values of the parameters_@return the number of instances updated/deleted_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#createQuery_@see org.hibernate.Query#executeUpdate;int bulkUpdate(String queryString, Object... values) throws DataAccessException_;update,delete,all,objects,according,to,the,given,query,binding,a,number,of,values,to,parameters,in,the,query,string,param,query,string,an,update,delete,query,expressed,in,hibernate,s,query,language,param,values,the,values,of,the,parameters,return,the,number,of,instances,updated,deleted,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,create,query,see,org,hibernate,query,execute,update;int,bulk,update,string,query,string,object,values,throws,data,access,exception
HibernateOperations -> @Nullable 	Object get(String entityName, Serializable id, LockMode lockMode) throws DataAccessException_;1495868221;Return the persistent instance of the given entity class_with the given identifier, or {@code null} if not found._Obtains the specified lock mode if the instance exists._<p>This method is a thin wrapper around_{@link org.hibernate.Session#get(String, Serializable, LockMode)} for convenience._For an explanation of the exact semantics of this method, please do refer to_the Hibernate API documentation in the first instance._@param entityName the name of the persistent entity_@param id the identifier of the persistent instance_@param lockMode the lock mode to obtain_@return the persistent instance, or {@code null} if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#get(Class, Serializable, LockMode);@Nullable_	Object get(String entityName, Serializable id, LockMode lockMode) throws DataAccessException_;return,the,persistent,instance,of,the,given,entity,class,with,the,given,identifier,or,code,null,if,not,found,obtains,the,specified,lock,mode,if,the,instance,exists,p,this,method,is,a,thin,wrapper,around,link,org,hibernate,session,get,string,serializable,lock,mode,for,convenience,for,an,explanation,of,the,exact,semantics,of,this,method,please,do,refer,to,the,hibernate,api,documentation,in,the,first,instance,param,entity,name,the,name,of,the,persistent,entity,param,id,the,identifier,of,the,persistent,instance,param,lock,mode,the,lock,mode,to,obtain,return,the,persistent,instance,or,code,null,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,get,class,serializable,lock,mode;nullable,object,get,string,entity,name,serializable,id,lock,mode,lock,mode,throws,data,access,exception
HibernateOperations -> @Nullable 	Object get(String entityName, Serializable id, LockMode lockMode) throws DataAccessException_;1517247608;Return the persistent instance of the given entity class_with the given identifier, or {@code null} if not found._Obtains the specified lock mode if the instance exists._<p>This method is a thin wrapper around_{@link org.hibernate.Session#get(String, Serializable, LockMode)} for convenience._For an explanation of the exact semantics of this method, please do refer to_the Hibernate API documentation in the first instance._@param entityName the name of the persistent entity_@param id the identifier of the persistent instance_@param lockMode the lock mode to obtain_@return the persistent instance, or {@code null} if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#get(Class, Serializable, LockMode);@Nullable_	Object get(String entityName, Serializable id, LockMode lockMode) throws DataAccessException_;return,the,persistent,instance,of,the,given,entity,class,with,the,given,identifier,or,code,null,if,not,found,obtains,the,specified,lock,mode,if,the,instance,exists,p,this,method,is,a,thin,wrapper,around,link,org,hibernate,session,get,string,serializable,lock,mode,for,convenience,for,an,explanation,of,the,exact,semantics,of,this,method,please,do,refer,to,the,hibernate,api,documentation,in,the,first,instance,param,entity,name,the,name,of,the,persistent,entity,param,id,the,identifier,of,the,persistent,instance,param,lock,mode,the,lock,mode,to,obtain,return,the,persistent,instance,or,code,null,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,get,class,serializable,lock,mode;nullable,object,get,string,entity,name,serializable,id,lock,mode,lock,mode,throws,data,access,exception
HibernateOperations -> void update(String entityName, Object entity) throws DataAccessException_;1467668243;Update the given persistent instance,_associating it with the current Hibernate {@link org.hibernate.Session}._@param entityName the name of the persistent entity_@param entity the persistent instance to update_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#update(String, Object);void update(String entityName, Object entity) throws DataAccessException_;update,the,given,persistent,instance,associating,it,with,the,current,hibernate,link,org,hibernate,session,param,entity,name,the,name,of,the,persistent,entity,param,entity,the,persistent,instance,to,update,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,update,string,object;void,update,string,entity,name,object,entity,throws,data,access,exception
HibernateOperations -> void update(String entityName, Object entity) throws DataAccessException_;1495868221;Update the given persistent instance,_associating it with the current Hibernate {@link org.hibernate.Session}._@param entityName the name of the persistent entity_@param entity the persistent instance to update_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#update(String, Object);void update(String entityName, Object entity) throws DataAccessException_;update,the,given,persistent,instance,associating,it,with,the,current,hibernate,link,org,hibernate,session,param,entity,name,the,name,of,the,persistent,entity,param,entity,the,persistent,instance,to,update,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,update,string,object;void,update,string,entity,name,object,entity,throws,data,access,exception
HibernateOperations -> void update(String entityName, Object entity) throws DataAccessException_;1517247608;Update the given persistent instance,_associating it with the current Hibernate {@link org.hibernate.Session}._@param entityName the name of the persistent entity_@param entity the persistent instance to update_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#update(String, Object);void update(String entityName, Object entity) throws DataAccessException_;update,the,given,persistent,instance,associating,it,with,the,current,hibernate,link,org,hibernate,session,param,entity,name,the,name,of,the,persistent,entity,param,entity,the,persistent,instance,to,update,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,update,string,object;void,update,string,entity,name,object,entity,throws,data,access,exception
HibernateOperations -> <T> List<T> findByExample(String entityName, T exampleEntity) throws DataAccessException_;1467668243;Execute a query based on the given example entity object._@param entityName the name of the persistent entity_@param exampleEntity an instance of the desired entity,_serving as example for "query-by-example"_@return a {@link List} containing 0 or more persistent instances_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.criterion.Example#create(Object);<T> List<T> findByExample(String entityName, T exampleEntity) throws DataAccessException_;execute,a,query,based,on,the,given,example,entity,object,param,entity,name,the,name,of,the,persistent,entity,param,example,entity,an,instance,of,the,desired,entity,serving,as,example,for,query,by,example,return,a,link,list,containing,0,or,more,persistent,instances,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,criterion,example,create,object;t,list,t,find,by,example,string,entity,name,t,example,entity,throws,data,access,exception
HibernateOperations -> <T> List<T> findByExample(String entityName, T exampleEntity) throws DataAccessException_;1495868221;Execute a query based on the given example entity object._@param entityName the name of the persistent entity_@param exampleEntity an instance of the desired entity,_serving as example for "query-by-example"_@return a {@link List} containing 0 or more persistent instances_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.criterion.Example#create(Object);<T> List<T> findByExample(String entityName, T exampleEntity) throws DataAccessException_;execute,a,query,based,on,the,given,example,entity,object,param,entity,name,the,name,of,the,persistent,entity,param,example,entity,an,instance,of,the,desired,entity,serving,as,example,for,query,by,example,return,a,link,list,containing,0,or,more,persistent,instances,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,criterion,example,create,object;t,list,t,find,by,example,string,entity,name,t,example,entity,throws,data,access,exception
HibernateOperations -> <T> List<T> findByExample(String entityName, T exampleEntity) throws DataAccessException_;1517247608;Execute a query based on the given example entity object._@param entityName the name of the persistent entity_@param exampleEntity an instance of the desired entity,_serving as example for "query-by-example"_@return a {@link List} containing 0 or more persistent instances_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.criterion.Example#create(Object);<T> List<T> findByExample(String entityName, T exampleEntity) throws DataAccessException_;execute,a,query,based,on,the,given,example,entity,object,param,entity,name,the,name,of,the,persistent,entity,param,example,entity,an,instance,of,the,desired,entity,serving,as,example,for,query,by,example,return,a,link,list,containing,0,or,more,persistent,instances,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,criterion,example,create,object;t,list,t,find,by,example,string,entity,name,t,example,entity,throws,data,access,exception
HibernateOperations -> <T> List<T> loadAll(Class<T> entityClass) throws DataAccessException_;1467668243;Return all persistent instances of the given entity class._Note: Use queries or criteria for retrieving a specific subset._@param entityClass a persistent class_@return a {@link List} containing 0 or more persistent instances_@throws DataAccessException if there is a Hibernate error_@see org.hibernate.Session#createCriteria;<T> List<T> loadAll(Class<T> entityClass) throws DataAccessException_;return,all,persistent,instances,of,the,given,entity,class,note,use,queries,or,criteria,for,retrieving,a,specific,subset,param,entity,class,a,persistent,class,return,a,link,list,containing,0,or,more,persistent,instances,throws,data,access,exception,if,there,is,a,hibernate,error,see,org,hibernate,session,create,criteria;t,list,t,load,all,class,t,entity,class,throws,data,access,exception
HibernateOperations -> <T> List<T> loadAll(Class<T> entityClass) throws DataAccessException_;1495868221;Return all persistent instances of the given entity class._Note: Use queries or criteria for retrieving a specific subset._@param entityClass a persistent class_@return a {@link List} containing 0 or more persistent instances_@throws DataAccessException if there is a Hibernate error_@see org.hibernate.Session#createCriteria;<T> List<T> loadAll(Class<T> entityClass) throws DataAccessException_;return,all,persistent,instances,of,the,given,entity,class,note,use,queries,or,criteria,for,retrieving,a,specific,subset,param,entity,class,a,persistent,class,return,a,link,list,containing,0,or,more,persistent,instances,throws,data,access,exception,if,there,is,a,hibernate,error,see,org,hibernate,session,create,criteria;t,list,t,load,all,class,t,entity,class,throws,data,access,exception
HibernateOperations -> <T> List<T> loadAll(Class<T> entityClass) throws DataAccessException_;1517247608;Return all persistent instances of the given entity class._Note: Use queries or criteria for retrieving a specific subset._@param entityClass a persistent class_@return a {@link List} containing 0 or more persistent instances_@throws DataAccessException if there is a Hibernate error_@see org.hibernate.Session#createCriteria;<T> List<T> loadAll(Class<T> entityClass) throws DataAccessException_;return,all,persistent,instances,of,the,given,entity,class,note,use,queries,or,criteria,for,retrieving,a,specific,subset,param,entity,class,a,persistent,class,return,a,link,list,containing,0,or,more,persistent,instances,throws,data,access,exception,if,there,is,a,hibernate,error,see,org,hibernate,session,create,criteria;t,list,t,load,all,class,t,entity,class,throws,data,access,exception
HibernateOperations -> void replicate(Object entity, ReplicationMode replicationMode) throws DataAccessException_;1467668243;Persist the state of the given detached instance according to the_given replication mode, reusing the current identifier value._@param entity the persistent object to replicate_@param replicationMode the Hibernate ReplicationMode_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#replicate(Object, ReplicationMode);void replicate(Object entity, ReplicationMode replicationMode) throws DataAccessException_;persist,the,state,of,the,given,detached,instance,according,to,the,given,replication,mode,reusing,the,current,identifier,value,param,entity,the,persistent,object,to,replicate,param,replication,mode,the,hibernate,replication,mode,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,replicate,object,replication,mode;void,replicate,object,entity,replication,mode,replication,mode,throws,data,access,exception
HibernateOperations -> void replicate(Object entity, ReplicationMode replicationMode) throws DataAccessException_;1495868221;Persist the state of the given detached instance according to the_given replication mode, reusing the current identifier value._@param entity the persistent object to replicate_@param replicationMode the Hibernate ReplicationMode_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#replicate(Object, ReplicationMode);void replicate(Object entity, ReplicationMode replicationMode) throws DataAccessException_;persist,the,state,of,the,given,detached,instance,according,to,the,given,replication,mode,reusing,the,current,identifier,value,param,entity,the,persistent,object,to,replicate,param,replication,mode,the,hibernate,replication,mode,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,replicate,object,replication,mode;void,replicate,object,entity,replication,mode,replication,mode,throws,data,access,exception
HibernateOperations -> void replicate(Object entity, ReplicationMode replicationMode) throws DataAccessException_;1517247608;Persist the state of the given detached instance according to the_given replication mode, reusing the current identifier value._@param entity the persistent object to replicate_@param replicationMode the Hibernate ReplicationMode_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#replicate(Object, ReplicationMode);void replicate(Object entity, ReplicationMode replicationMode) throws DataAccessException_;persist,the,state,of,the,given,detached,instance,according,to,the,given,replication,mode,reusing,the,current,identifier,value,param,entity,the,persistent,object,to,replicate,param,replication,mode,the,hibernate,replication,mode,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,replicate,object,replication,mode;void,replicate,object,entity,replication,mode,replication,mode,throws,data,access,exception
HibernateOperations -> boolean contains(Object entity) throws DataAccessException_;1467668243;Check whether the given object is in the Session cache._@param entity the persistence instance to check_@return whether the given object is in the Session cache_@throws DataAccessException if there is a Hibernate error_@see org.hibernate.Session#contains;boolean contains(Object entity) throws DataAccessException_;check,whether,the,given,object,is,in,the,session,cache,param,entity,the,persistence,instance,to,check,return,whether,the,given,object,is,in,the,session,cache,throws,data,access,exception,if,there,is,a,hibernate,error,see,org,hibernate,session,contains;boolean,contains,object,entity,throws,data,access,exception
HibernateOperations -> boolean contains(Object entity) throws DataAccessException_;1495868221;Check whether the given object is in the Session cache._@param entity the persistence instance to check_@return whether the given object is in the Session cache_@throws DataAccessException if there is a Hibernate error_@see org.hibernate.Session#contains;boolean contains(Object entity) throws DataAccessException_;check,whether,the,given,object,is,in,the,session,cache,param,entity,the,persistence,instance,to,check,return,whether,the,given,object,is,in,the,session,cache,throws,data,access,exception,if,there,is,a,hibernate,error,see,org,hibernate,session,contains;boolean,contains,object,entity,throws,data,access,exception
HibernateOperations -> boolean contains(Object entity) throws DataAccessException_;1517247608;Check whether the given object is in the Session cache._@param entity the persistence instance to check_@return whether the given object is in the Session cache_@throws DataAccessException if there is a Hibernate error_@see org.hibernate.Session#contains;boolean contains(Object entity) throws DataAccessException_;check,whether,the,given,object,is,in,the,session,cache,param,entity,the,persistence,instance,to,check,return,whether,the,given,object,is,in,the,session,cache,throws,data,access,exception,if,there,is,a,hibernate,error,see,org,hibernate,session,contains;boolean,contains,object,entity,throws,data,access,exception
HibernateOperations -> void delete(Object entity, LockMode lockMode) throws DataAccessException_;1467668243;Delete the given persistent instance._<p>Obtains the specified lock mode if the instance exists, implicitly_checking whether the corresponding database entry still exists._@param entity the persistent instance to delete_@param lockMode the lock mode to obtain_@throws org.springframework.orm.ObjectOptimisticLockingFailureException if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#delete(Object);void delete(Object entity, LockMode lockMode) throws DataAccessException_;delete,the,given,persistent,instance,p,obtains,the,specified,lock,mode,if,the,instance,exists,implicitly,checking,whether,the,corresponding,database,entry,still,exists,param,entity,the,persistent,instance,to,delete,param,lock,mode,the,lock,mode,to,obtain,throws,org,springframework,orm,object,optimistic,locking,failure,exception,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,delete,object;void,delete,object,entity,lock,mode,lock,mode,throws,data,access,exception
HibernateOperations -> void delete(Object entity, LockMode lockMode) throws DataAccessException_;1495868221;Delete the given persistent instance._<p>Obtains the specified lock mode if the instance exists, implicitly_checking whether the corresponding database entry still exists._@param entity the persistent instance to delete_@param lockMode the lock mode to obtain_@throws org.springframework.orm.ObjectOptimisticLockingFailureException if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#delete(Object);void delete(Object entity, LockMode lockMode) throws DataAccessException_;delete,the,given,persistent,instance,p,obtains,the,specified,lock,mode,if,the,instance,exists,implicitly,checking,whether,the,corresponding,database,entry,still,exists,param,entity,the,persistent,instance,to,delete,param,lock,mode,the,lock,mode,to,obtain,throws,org,springframework,orm,object,optimistic,locking,failure,exception,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,delete,object;void,delete,object,entity,lock,mode,lock,mode,throws,data,access,exception
HibernateOperations -> void delete(Object entity, LockMode lockMode) throws DataAccessException_;1517247608;Delete the given persistent instance._<p>Obtains the specified lock mode if the instance exists, implicitly_checking whether the corresponding database entry still exists._@param entity the persistent instance to delete_@param lockMode the lock mode to obtain_@throws org.springframework.orm.ObjectOptimisticLockingFailureException if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#delete(Object);void delete(Object entity, LockMode lockMode) throws DataAccessException_;delete,the,given,persistent,instance,p,obtains,the,specified,lock,mode,if,the,instance,exists,implicitly,checking,whether,the,corresponding,database,entry,still,exists,param,entity,the,persistent,instance,to,delete,param,lock,mode,the,lock,mode,to,obtain,throws,org,springframework,orm,object,optimistic,locking,failure,exception,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,delete,object;void,delete,object,entity,lock,mode,lock,mode,throws,data,access,exception
HibernateOperations -> void load(Object entity, Serializable id) throws DataAccessException_;1467668243;Load the persistent instance with the given identifier_into the given object, throwing an exception if not found._<p>This method is a thin wrapper around_{@link org.hibernate.Session#load(Object, Serializable)} for convenience._For an explanation of the exact semantics of this method, please do refer to_the Hibernate API documentation in the first instance._@param entity the object (of the target class) to load into_@param id the identifier of the persistent instance_@throws org.springframework.orm.ObjectRetrievalFailureException if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#load(Object, Serializable);void load(Object entity, Serializable id) throws DataAccessException_;load,the,persistent,instance,with,the,given,identifier,into,the,given,object,throwing,an,exception,if,not,found,p,this,method,is,a,thin,wrapper,around,link,org,hibernate,session,load,object,serializable,for,convenience,for,an,explanation,of,the,exact,semantics,of,this,method,please,do,refer,to,the,hibernate,api,documentation,in,the,first,instance,param,entity,the,object,of,the,target,class,to,load,into,param,id,the,identifier,of,the,persistent,instance,throws,org,springframework,orm,object,retrieval,failure,exception,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,load,object,serializable;void,load,object,entity,serializable,id,throws,data,access,exception
HibernateOperations -> void load(Object entity, Serializable id) throws DataAccessException_;1495868221;Load the persistent instance with the given identifier_into the given object, throwing an exception if not found._<p>This method is a thin wrapper around_{@link org.hibernate.Session#load(Object, Serializable)} for convenience._For an explanation of the exact semantics of this method, please do refer to_the Hibernate API documentation in the first instance._@param entity the object (of the target class) to load into_@param id the identifier of the persistent instance_@throws org.springframework.orm.ObjectRetrievalFailureException if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#load(Object, Serializable);void load(Object entity, Serializable id) throws DataAccessException_;load,the,persistent,instance,with,the,given,identifier,into,the,given,object,throwing,an,exception,if,not,found,p,this,method,is,a,thin,wrapper,around,link,org,hibernate,session,load,object,serializable,for,convenience,for,an,explanation,of,the,exact,semantics,of,this,method,please,do,refer,to,the,hibernate,api,documentation,in,the,first,instance,param,entity,the,object,of,the,target,class,to,load,into,param,id,the,identifier,of,the,persistent,instance,throws,org,springframework,orm,object,retrieval,failure,exception,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,load,object,serializable;void,load,object,entity,serializable,id,throws,data,access,exception
HibernateOperations -> void load(Object entity, Serializable id) throws DataAccessException_;1517247608;Load the persistent instance with the given identifier_into the given object, throwing an exception if not found._<p>This method is a thin wrapper around_{@link org.hibernate.Session#load(Object, Serializable)} for convenience._For an explanation of the exact semantics of this method, please do refer to_the Hibernate API documentation in the first instance._@param entity the object (of the target class) to load into_@param id the identifier of the persistent instance_@throws org.springframework.orm.ObjectRetrievalFailureException if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#load(Object, Serializable);void load(Object entity, Serializable id) throws DataAccessException_;load,the,persistent,instance,with,the,given,identifier,into,the,given,object,throwing,an,exception,if,not,found,p,this,method,is,a,thin,wrapper,around,link,org,hibernate,session,load,object,serializable,for,convenience,for,an,explanation,of,the,exact,semantics,of,this,method,please,do,refer,to,the,hibernate,api,documentation,in,the,first,instance,param,entity,the,object,of,the,target,class,to,load,into,param,id,the,identifier,of,the,persistent,instance,throws,org,springframework,orm,object,retrieval,failure,exception,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,load,object,serializable;void,load,object,entity,serializable,id,throws,data,access,exception
HibernateOperations -> <T> List<T> findByExample(T exampleEntity) throws DataAccessException_;1467668243;Execute a query based on the given example entity object._@param exampleEntity an instance of the desired entity,_serving as example for "query-by-example"_@return a {@link List} containing 0 or more persistent instances_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.criterion.Example#create(Object);<T> List<T> findByExample(T exampleEntity) throws DataAccessException_;execute,a,query,based,on,the,given,example,entity,object,param,example,entity,an,instance,of,the,desired,entity,serving,as,example,for,query,by,example,return,a,link,list,containing,0,or,more,persistent,instances,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,criterion,example,create,object;t,list,t,find,by,example,t,example,entity,throws,data,access,exception
HibernateOperations -> <T> List<T> findByExample(T exampleEntity) throws DataAccessException_;1495868221;Execute a query based on the given example entity object._@param exampleEntity an instance of the desired entity,_serving as example for "query-by-example"_@return a {@link List} containing 0 or more persistent instances_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.criterion.Example#create(Object);<T> List<T> findByExample(T exampleEntity) throws DataAccessException_;execute,a,query,based,on,the,given,example,entity,object,param,example,entity,an,instance,of,the,desired,entity,serving,as,example,for,query,by,example,return,a,link,list,containing,0,or,more,persistent,instances,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,criterion,example,create,object;t,list,t,find,by,example,t,example,entity,throws,data,access,exception
HibernateOperations -> <T> List<T> findByExample(T exampleEntity) throws DataAccessException_;1517247608;Execute a query based on the given example entity object._@param exampleEntity an instance of the desired entity,_serving as example for "query-by-example"_@return a {@link List} containing 0 or more persistent instances_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.criterion.Example#create(Object);<T> List<T> findByExample(T exampleEntity) throws DataAccessException_;execute,a,query,based,on,the,given,example,entity,object,param,example,entity,an,instance,of,the,desired,entity,serving,as,example,for,query,by,example,return,a,link,list,containing,0,or,more,persistent,instances,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,criterion,example,create,object;t,list,t,find,by,example,t,example,entity,throws,data,access,exception
HibernateOperations -> void update(String entityName, Object entity, LockMode lockMode) throws DataAccessException_;1467668243;Update the given persistent instance,_associating it with the current Hibernate {@link org.hibernate.Session}._<p>Obtains the specified lock mode if the instance exists, implicitly_checking whether the corresponding database entry still exists._@param entityName the name of the persistent entity_@param entity the persistent instance to update_@param lockMode the lock mode to obtain_@throws org.springframework.orm.ObjectOptimisticLockingFailureException if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#update(String, Object);void update(String entityName, Object entity, LockMode lockMode) throws DataAccessException_;update,the,given,persistent,instance,associating,it,with,the,current,hibernate,link,org,hibernate,session,p,obtains,the,specified,lock,mode,if,the,instance,exists,implicitly,checking,whether,the,corresponding,database,entry,still,exists,param,entity,name,the,name,of,the,persistent,entity,param,entity,the,persistent,instance,to,update,param,lock,mode,the,lock,mode,to,obtain,throws,org,springframework,orm,object,optimistic,locking,failure,exception,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,update,string,object;void,update,string,entity,name,object,entity,lock,mode,lock,mode,throws,data,access,exception
HibernateOperations -> void update(String entityName, Object entity, LockMode lockMode) throws DataAccessException_;1495868221;Update the given persistent instance,_associating it with the current Hibernate {@link org.hibernate.Session}._<p>Obtains the specified lock mode if the instance exists, implicitly_checking whether the corresponding database entry still exists._@param entityName the name of the persistent entity_@param entity the persistent instance to update_@param lockMode the lock mode to obtain_@throws org.springframework.orm.ObjectOptimisticLockingFailureException if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#update(String, Object);void update(String entityName, Object entity, LockMode lockMode) throws DataAccessException_;update,the,given,persistent,instance,associating,it,with,the,current,hibernate,link,org,hibernate,session,p,obtains,the,specified,lock,mode,if,the,instance,exists,implicitly,checking,whether,the,corresponding,database,entry,still,exists,param,entity,name,the,name,of,the,persistent,entity,param,entity,the,persistent,instance,to,update,param,lock,mode,the,lock,mode,to,obtain,throws,org,springframework,orm,object,optimistic,locking,failure,exception,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,update,string,object;void,update,string,entity,name,object,entity,lock,mode,lock,mode,throws,data,access,exception
HibernateOperations -> void update(String entityName, Object entity, LockMode lockMode) throws DataAccessException_;1517247608;Update the given persistent instance,_associating it with the current Hibernate {@link org.hibernate.Session}._<p>Obtains the specified lock mode if the instance exists, implicitly_checking whether the corresponding database entry still exists._@param entityName the name of the persistent entity_@param entity the persistent instance to update_@param lockMode the lock mode to obtain_@throws org.springframework.orm.ObjectOptimisticLockingFailureException if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#update(String, Object);void update(String entityName, Object entity, LockMode lockMode) throws DataAccessException_;update,the,given,persistent,instance,associating,it,with,the,current,hibernate,link,org,hibernate,session,p,obtains,the,specified,lock,mode,if,the,instance,exists,implicitly,checking,whether,the,corresponding,database,entry,still,exists,param,entity,name,the,name,of,the,persistent,entity,param,entity,the,persistent,instance,to,update,param,lock,mode,the,lock,mode,to,obtain,throws,org,springframework,orm,object,optimistic,locking,failure,exception,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,update,string,object;void,update,string,entity,name,object,entity,lock,mode,lock,mode,throws,data,access,exception
HibernateOperations -> <T> T merge(T entity) throws DataAccessException_;1467668243;Copy the state of the given object onto the persistent object_with the same identifier. Follows JSR-220 semantics._<p>Similar to {@code saveOrUpdate}, but never associates the given_object with the current Hibernate Session. In case of a new entity,_the state will be copied over as well._<p>Note that {@code merge} will <i>not</i> update the identifiers_in the passed-in object graph (in contrast to TopLink)! Consider_registering Spring's {@code IdTransferringMergeEventListener} if_you would like to have newly assigned ids transferred to the original_object graph too._@param entity the object to merge with the corresponding persistence instance_@return the updated, registered persistent instance_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#merge(Object)_@see #saveOrUpdate;<T> T merge(T entity) throws DataAccessException_;copy,the,state,of,the,given,object,onto,the,persistent,object,with,the,same,identifier,follows,jsr,220,semantics,p,similar,to,code,save,or,update,but,never,associates,the,given,object,with,the,current,hibernate,session,in,case,of,a,new,entity,the,state,will,be,copied,over,as,well,p,note,that,code,merge,will,i,not,i,update,the,identifiers,in,the,passed,in,object,graph,in,contrast,to,top,link,consider,registering,spring,s,code,id,transferring,merge,event,listener,if,you,would,like,to,have,newly,assigned,ids,transferred,to,the,original,object,graph,too,param,entity,the,object,to,merge,with,the,corresponding,persistence,instance,return,the,updated,registered,persistent,instance,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,merge,object,see,save,or,update;t,t,merge,t,entity,throws,data,access,exception
HibernateOperations -> <T> T merge(T entity) throws DataAccessException_;1495868221;Copy the state of the given object onto the persistent object_with the same identifier. Follows JSR-220 semantics._<p>Similar to {@code saveOrUpdate}, but never associates the given_object with the current Hibernate Session. In case of a new entity,_the state will be copied over as well._<p>Note that {@code merge} will <i>not</i> update the identifiers_in the passed-in object graph (in contrast to TopLink)! Consider_registering Spring's {@code IdTransferringMergeEventListener} if_you would like to have newly assigned ids transferred to the original_object graph too._@param entity the object to merge with the corresponding persistence instance_@return the updated, registered persistent instance_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#merge(Object)_@see #saveOrUpdate;<T> T merge(T entity) throws DataAccessException_;copy,the,state,of,the,given,object,onto,the,persistent,object,with,the,same,identifier,follows,jsr,220,semantics,p,similar,to,code,save,or,update,but,never,associates,the,given,object,with,the,current,hibernate,session,in,case,of,a,new,entity,the,state,will,be,copied,over,as,well,p,note,that,code,merge,will,i,not,i,update,the,identifiers,in,the,passed,in,object,graph,in,contrast,to,top,link,consider,registering,spring,s,code,id,transferring,merge,event,listener,if,you,would,like,to,have,newly,assigned,ids,transferred,to,the,original,object,graph,too,param,entity,the,object,to,merge,with,the,corresponding,persistence,instance,return,the,updated,registered,persistent,instance,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,merge,object,see,save,or,update;t,t,merge,t,entity,throws,data,access,exception
HibernateOperations -> <T> T merge(T entity) throws DataAccessException_;1517247608;Copy the state of the given object onto the persistent object_with the same identifier. Follows JSR-220 semantics._<p>Similar to {@code saveOrUpdate}, but never associates the given_object with the current Hibernate Session. In case of a new entity,_the state will be copied over as well._<p>Note that {@code merge} will <i>not</i> update the identifiers_in the passed-in object graph (in contrast to TopLink)! Consider_registering Spring's {@code IdTransferringMergeEventListener} if_you would like to have newly assigned ids transferred to the original_object graph too._@param entity the object to merge with the corresponding persistence instance_@return the updated, registered persistent instance_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#merge(Object)_@see #saveOrUpdate;<T> T merge(T entity) throws DataAccessException_;copy,the,state,of,the,given,object,onto,the,persistent,object,with,the,same,identifier,follows,jsr,220,semantics,p,similar,to,code,save,or,update,but,never,associates,the,given,object,with,the,current,hibernate,session,in,case,of,a,new,entity,the,state,will,be,copied,over,as,well,p,note,that,code,merge,will,i,not,i,update,the,identifiers,in,the,passed,in,object,graph,in,contrast,to,top,link,consider,registering,spring,s,code,id,transferring,merge,event,listener,if,you,would,like,to,have,newly,assigned,ids,transferred,to,the,original,object,graph,too,param,entity,the,object,to,merge,with,the,corresponding,persistence,instance,return,the,updated,registered,persistent,instance,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,merge,object,see,save,or,update;t,t,merge,t,entity,throws,data,access,exception
HibernateOperations -> Object load(String entityName, Serializable id) throws DataAccessException_;1467668243;Return the persistent instance of the given entity class_with the given identifier, throwing an exception if not found._<p>This method is a thin wrapper around_{@link org.hibernate.Session#load(String, Serializable)} for convenience._For an explanation of the exact semantics of this method, please do refer to_the Hibernate API documentation in the first instance._@param entityName the name of the persistent entity_@param id the identifier of the persistent instance_@return the persistent instance_@throws org.springframework.orm.ObjectRetrievalFailureException if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#load(Class, Serializable);Object load(String entityName, Serializable id) throws DataAccessException_;return,the,persistent,instance,of,the,given,entity,class,with,the,given,identifier,throwing,an,exception,if,not,found,p,this,method,is,a,thin,wrapper,around,link,org,hibernate,session,load,string,serializable,for,convenience,for,an,explanation,of,the,exact,semantics,of,this,method,please,do,refer,to,the,hibernate,api,documentation,in,the,first,instance,param,entity,name,the,name,of,the,persistent,entity,param,id,the,identifier,of,the,persistent,instance,return,the,persistent,instance,throws,org,springframework,orm,object,retrieval,failure,exception,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,load,class,serializable;object,load,string,entity,name,serializable,id,throws,data,access,exception
HibernateOperations -> Object load(String entityName, Serializable id) throws DataAccessException_;1495868221;Return the persistent instance of the given entity class_with the given identifier, throwing an exception if not found._<p>This method is a thin wrapper around_{@link org.hibernate.Session#load(String, Serializable)} for convenience._For an explanation of the exact semantics of this method, please do refer to_the Hibernate API documentation in the first instance._@param entityName the name of the persistent entity_@param id the identifier of the persistent instance_@return the persistent instance_@throws org.springframework.orm.ObjectRetrievalFailureException if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#load(Class, Serializable);Object load(String entityName, Serializable id) throws DataAccessException_;return,the,persistent,instance,of,the,given,entity,class,with,the,given,identifier,throwing,an,exception,if,not,found,p,this,method,is,a,thin,wrapper,around,link,org,hibernate,session,load,string,serializable,for,convenience,for,an,explanation,of,the,exact,semantics,of,this,method,please,do,refer,to,the,hibernate,api,documentation,in,the,first,instance,param,entity,name,the,name,of,the,persistent,entity,param,id,the,identifier,of,the,persistent,instance,return,the,persistent,instance,throws,org,springframework,orm,object,retrieval,failure,exception,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,load,class,serializable;object,load,string,entity,name,serializable,id,throws,data,access,exception
HibernateOperations -> Object load(String entityName, Serializable id) throws DataAccessException_;1517247608;Return the persistent instance of the given entity class_with the given identifier, throwing an exception if not found._<p>This method is a thin wrapper around_{@link org.hibernate.Session#load(String, Serializable)} for convenience._For an explanation of the exact semantics of this method, please do refer to_the Hibernate API documentation in the first instance._@param entityName the name of the persistent entity_@param id the identifier of the persistent instance_@return the persistent instance_@throws org.springframework.orm.ObjectRetrievalFailureException if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#load(Class, Serializable);Object load(String entityName, Serializable id) throws DataAccessException_;return,the,persistent,instance,of,the,given,entity,class,with,the,given,identifier,throwing,an,exception,if,not,found,p,this,method,is,a,thin,wrapper,around,link,org,hibernate,session,load,string,serializable,for,convenience,for,an,explanation,of,the,exact,semantics,of,this,method,please,do,refer,to,the,hibernate,api,documentation,in,the,first,instance,param,entity,name,the,name,of,the,persistent,entity,param,id,the,identifier,of,the,persistent,instance,return,the,persistent,instance,throws,org,springframework,orm,object,retrieval,failure,exception,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,load,class,serializable;object,load,string,entity,name,serializable,id,throws,data,access,exception
HibernateOperations -> void initialize(Object proxy) throws DataAccessException_;1467668243;Force initialization of a Hibernate proxy or persistent collection._@param proxy a proxy for a persistent object or a persistent collection_@throws DataAccessException if we can't initialize the proxy, for example_because it is not associated with an active Session_@see org.hibernate.Hibernate#initialize;void initialize(Object proxy) throws DataAccessException_;force,initialization,of,a,hibernate,proxy,or,persistent,collection,param,proxy,a,proxy,for,a,persistent,object,or,a,persistent,collection,throws,data,access,exception,if,we,can,t,initialize,the,proxy,for,example,because,it,is,not,associated,with,an,active,session,see,org,hibernate,hibernate,initialize;void,initialize,object,proxy,throws,data,access,exception
HibernateOperations -> void initialize(Object proxy) throws DataAccessException_;1495868221;Force initialization of a Hibernate proxy or persistent collection._@param proxy a proxy for a persistent object or a persistent collection_@throws DataAccessException if we can't initialize the proxy, for example_because it is not associated with an active Session_@see org.hibernate.Hibernate#initialize;void initialize(Object proxy) throws DataAccessException_;force,initialization,of,a,hibernate,proxy,or,persistent,collection,param,proxy,a,proxy,for,a,persistent,object,or,a,persistent,collection,throws,data,access,exception,if,we,can,t,initialize,the,proxy,for,example,because,it,is,not,associated,with,an,active,session,see,org,hibernate,hibernate,initialize;void,initialize,object,proxy,throws,data,access,exception
HibernateOperations -> void initialize(Object proxy) throws DataAccessException_;1517247608;Force initialization of a Hibernate proxy or persistent collection._@param proxy a proxy for a persistent object or a persistent collection_@throws DataAccessException if we can't initialize the proxy, for example_because it is not associated with an active Session_@see org.hibernate.Hibernate#initialize;void initialize(Object proxy) throws DataAccessException_;force,initialization,of,a,hibernate,proxy,or,persistent,collection,param,proxy,a,proxy,for,a,persistent,object,or,a,persistent,collection,throws,data,access,exception,if,we,can,t,initialize,the,proxy,for,example,because,it,is,not,associated,with,an,active,session,see,org,hibernate,hibernate,initialize;void,initialize,object,proxy,throws,data,access,exception
HibernateOperations -> void persist(String entityName, Object entity) throws DataAccessException_;1467668243;Persist the given transient instance. Follows JSR-220 semantics._<p>Similar to {@code save}, associating the given object_with the current Hibernate {@link org.hibernate.Session}._@param entityName the name of the persistent entity_@param entity the persistent instance to persist_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#persist(String, Object)_@see #save;void persist(String entityName, Object entity) throws DataAccessException_;persist,the,given,transient,instance,follows,jsr,220,semantics,p,similar,to,code,save,associating,the,given,object,with,the,current,hibernate,link,org,hibernate,session,param,entity,name,the,name,of,the,persistent,entity,param,entity,the,persistent,instance,to,persist,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,persist,string,object,see,save;void,persist,string,entity,name,object,entity,throws,data,access,exception
HibernateOperations -> void persist(String entityName, Object entity) throws DataAccessException_;1495868221;Persist the given transient instance. Follows JSR-220 semantics._<p>Similar to {@code save}, associating the given object_with the current Hibernate {@link org.hibernate.Session}._@param entityName the name of the persistent entity_@param entity the persistent instance to persist_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#persist(String, Object)_@see #save;void persist(String entityName, Object entity) throws DataAccessException_;persist,the,given,transient,instance,follows,jsr,220,semantics,p,similar,to,code,save,associating,the,given,object,with,the,current,hibernate,link,org,hibernate,session,param,entity,name,the,name,of,the,persistent,entity,param,entity,the,persistent,instance,to,persist,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,persist,string,object,see,save;void,persist,string,entity,name,object,entity,throws,data,access,exception
HibernateOperations -> void persist(String entityName, Object entity) throws DataAccessException_;1517247608;Persist the given transient instance. Follows JSR-220 semantics._<p>Similar to {@code save}, associating the given object_with the current Hibernate {@link org.hibernate.Session}._@param entityName the name of the persistent entity_@param entity the persistent instance to persist_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#persist(String, Object)_@see #save;void persist(String entityName, Object entity) throws DataAccessException_;persist,the,given,transient,instance,follows,jsr,220,semantics,p,similar,to,code,save,associating,the,given,object,with,the,current,hibernate,link,org,hibernate,session,param,entity,name,the,name,of,the,persistent,entity,param,entity,the,persistent,instance,to,persist,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,persist,string,object,see,save;void,persist,string,entity,name,object,entity,throws,data,access,exception
HibernateOperations -> void update(Object entity, LockMode lockMode) throws DataAccessException_;1467668243;Update the given persistent instance,_associating it with the current Hibernate {@link org.hibernate.Session}._<p>Obtains the specified lock mode if the instance exists, implicitly_checking whether the corresponding database entry still exists._@param entity the persistent instance to update_@param lockMode the lock mode to obtain_@throws org.springframework.orm.ObjectOptimisticLockingFailureException if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#update(Object);void update(Object entity, LockMode lockMode) throws DataAccessException_;update,the,given,persistent,instance,associating,it,with,the,current,hibernate,link,org,hibernate,session,p,obtains,the,specified,lock,mode,if,the,instance,exists,implicitly,checking,whether,the,corresponding,database,entry,still,exists,param,entity,the,persistent,instance,to,update,param,lock,mode,the,lock,mode,to,obtain,throws,org,springframework,orm,object,optimistic,locking,failure,exception,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,update,object;void,update,object,entity,lock,mode,lock,mode,throws,data,access,exception
HibernateOperations -> void update(Object entity, LockMode lockMode) throws DataAccessException_;1495868221;Update the given persistent instance,_associating it with the current Hibernate {@link org.hibernate.Session}._<p>Obtains the specified lock mode if the instance exists, implicitly_checking whether the corresponding database entry still exists._@param entity the persistent instance to update_@param lockMode the lock mode to obtain_@throws org.springframework.orm.ObjectOptimisticLockingFailureException if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#update(Object);void update(Object entity, LockMode lockMode) throws DataAccessException_;update,the,given,persistent,instance,associating,it,with,the,current,hibernate,link,org,hibernate,session,p,obtains,the,specified,lock,mode,if,the,instance,exists,implicitly,checking,whether,the,corresponding,database,entry,still,exists,param,entity,the,persistent,instance,to,update,param,lock,mode,the,lock,mode,to,obtain,throws,org,springframework,orm,object,optimistic,locking,failure,exception,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,update,object;void,update,object,entity,lock,mode,lock,mode,throws,data,access,exception
HibernateOperations -> void update(Object entity, LockMode lockMode) throws DataAccessException_;1517247608;Update the given persistent instance,_associating it with the current Hibernate {@link org.hibernate.Session}._<p>Obtains the specified lock mode if the instance exists, implicitly_checking whether the corresponding database entry still exists._@param entity the persistent instance to update_@param lockMode the lock mode to obtain_@throws org.springframework.orm.ObjectOptimisticLockingFailureException if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#update(Object);void update(Object entity, LockMode lockMode) throws DataAccessException_;update,the,given,persistent,instance,associating,it,with,the,current,hibernate,link,org,hibernate,session,p,obtains,the,specified,lock,mode,if,the,instance,exists,implicitly,checking,whether,the,corresponding,database,entry,still,exists,param,entity,the,persistent,instance,to,update,param,lock,mode,the,lock,mode,to,obtain,throws,org,springframework,orm,object,optimistic,locking,failure,exception,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,update,object;void,update,object,entity,lock,mode,lock,mode,throws,data,access,exception
HibernateOperations -> List<?> findByCriteria(DetachedCriteria criteria, int firstResult, int maxResults) throws DataAccessException_;1467668243;Execute a query based on the given Hibernate criteria object._@param criteria the detached Hibernate criteria object._<b>Note: Do not reuse criteria objects! They need to recreated per execution,_due to the suboptimal design of Hibernate's criteria facility.</b>_@param firstResult the index of the first result object to be retrieved_(numbered from 0)_@param maxResults the maximum number of result objects to retrieve_(or <=0 for no limit)_@return a {@link List} containing 0 or more persistent instances_@throws DataAccessException in case of Hibernate errors_@see DetachedCriteria#getExecutableCriteria(org.hibernate.Session)_@see org.hibernate.Criteria#setFirstResult(int)_@see org.hibernate.Criteria#setMaxResults(int);List<?> findByCriteria(DetachedCriteria criteria, int firstResult, int maxResults) throws DataAccessException_;execute,a,query,based,on,the,given,hibernate,criteria,object,param,criteria,the,detached,hibernate,criteria,object,b,note,do,not,reuse,criteria,objects,they,need,to,recreated,per,execution,due,to,the,suboptimal,design,of,hibernate,s,criteria,facility,b,param,first,result,the,index,of,the,first,result,object,to,be,retrieved,numbered,from,0,param,max,results,the,maximum,number,of,result,objects,to,retrieve,or,0,for,no,limit,return,a,link,list,containing,0,or,more,persistent,instances,throws,data,access,exception,in,case,of,hibernate,errors,see,detached,criteria,get,executable,criteria,org,hibernate,session,see,org,hibernate,criteria,set,first,result,int,see,org,hibernate,criteria,set,max,results,int;list,find,by,criteria,detached,criteria,criteria,int,first,result,int,max,results,throws,data,access,exception
HibernateOperations -> List<?> findByCriteria(DetachedCriteria criteria, int firstResult, int maxResults) throws DataAccessException_;1495868221;Execute a query based on the given Hibernate criteria object._@param criteria the detached Hibernate criteria object._<b>Note: Do not reuse criteria objects! They need to recreated per execution,_due to the suboptimal design of Hibernate's criteria facility.</b>_@param firstResult the index of the first result object to be retrieved_(numbered from 0)_@param maxResults the maximum number of result objects to retrieve_(or <=0 for no limit)_@return a {@link List} containing 0 or more persistent instances_@throws DataAccessException in case of Hibernate errors_@see DetachedCriteria#getExecutableCriteria(org.hibernate.Session)_@see org.hibernate.Criteria#setFirstResult(int)_@see org.hibernate.Criteria#setMaxResults(int);List<?> findByCriteria(DetachedCriteria criteria, int firstResult, int maxResults) throws DataAccessException_;execute,a,query,based,on,the,given,hibernate,criteria,object,param,criteria,the,detached,hibernate,criteria,object,b,note,do,not,reuse,criteria,objects,they,need,to,recreated,per,execution,due,to,the,suboptimal,design,of,hibernate,s,criteria,facility,b,param,first,result,the,index,of,the,first,result,object,to,be,retrieved,numbered,from,0,param,max,results,the,maximum,number,of,result,objects,to,retrieve,or,0,for,no,limit,return,a,link,list,containing,0,or,more,persistent,instances,throws,data,access,exception,in,case,of,hibernate,errors,see,detached,criteria,get,executable,criteria,org,hibernate,session,see,org,hibernate,criteria,set,first,result,int,see,org,hibernate,criteria,set,max,results,int;list,find,by,criteria,detached,criteria,criteria,int,first,result,int,max,results,throws,data,access,exception
HibernateOperations -> List<?> findByCriteria(DetachedCriteria criteria, int firstResult, int maxResults) throws DataAccessException_;1517247608;Execute a query based on the given Hibernate criteria object._@param criteria the detached Hibernate criteria object._<b>Note: Do not reuse criteria objects! They need to recreated per execution,_due to the suboptimal design of Hibernate's criteria facility.</b>_@param firstResult the index of the first result object to be retrieved_(numbered from 0)_@param maxResults the maximum number of result objects to retrieve_(or <=0 for no limit)_@return a {@link List} containing 0 or more persistent instances_@throws DataAccessException in case of Hibernate errors_@see DetachedCriteria#getExecutableCriteria(org.hibernate.Session)_@see org.hibernate.Criteria#setFirstResult(int)_@see org.hibernate.Criteria#setMaxResults(int);List<?> findByCriteria(DetachedCriteria criteria, int firstResult, int maxResults) throws DataAccessException_;execute,a,query,based,on,the,given,hibernate,criteria,object,param,criteria,the,detached,hibernate,criteria,object,b,note,do,not,reuse,criteria,objects,they,need,to,recreated,per,execution,due,to,the,suboptimal,design,of,hibernate,s,criteria,facility,b,param,first,result,the,index,of,the,first,result,object,to,be,retrieved,numbered,from,0,param,max,results,the,maximum,number,of,result,objects,to,retrieve,or,0,for,no,limit,return,a,link,list,containing,0,or,more,persistent,instances,throws,data,access,exception,in,case,of,hibernate,errors,see,detached,criteria,get,executable,criteria,org,hibernate,session,see,org,hibernate,criteria,set,first,result,int,see,org,hibernate,criteria,set,max,results,int;list,find,by,criteria,detached,criteria,criteria,int,first,result,int,max,results,throws,data,access,exception
HibernateOperations -> List<?> findByNamedQueryAndNamedParam(String queryName, String paramName, Object value) 			throws DataAccessException_;1467668243;Execute a named query, binding one value to a ":" named parameter_in the query string._<p>A named query is defined in a Hibernate mapping file._@param queryName the name of a Hibernate query in a mapping file_@param paramName the name of parameter_@param value the value of the parameter_@return a {@link List} containing the results of the query execution_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#getNamedQuery(String);List<?> findByNamedQueryAndNamedParam(String queryName, String paramName, Object value)_			throws DataAccessException_;execute,a,named,query,binding,one,value,to,a,named,parameter,in,the,query,string,p,a,named,query,is,defined,in,a,hibernate,mapping,file,param,query,name,the,name,of,a,hibernate,query,in,a,mapping,file,param,param,name,the,name,of,parameter,param,value,the,value,of,the,parameter,return,a,link,list,containing,the,results,of,the,query,execution,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,get,named,query,string;list,find,by,named,query,and,named,param,string,query,name,string,param,name,object,value,throws,data,access,exception
HibernateOperations -> List<?> findByNamedQueryAndNamedParam(String queryName, String paramName, Object value) 			throws DataAccessException_;1495868221;Execute a named query, binding one value to a ":" named parameter_in the query string._<p>A named query is defined in a Hibernate mapping file._@param queryName the name of a Hibernate query in a mapping file_@param paramName the name of parameter_@param value the value of the parameter_@return a {@link List} containing the results of the query execution_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#getNamedQuery(String);List<?> findByNamedQueryAndNamedParam(String queryName, String paramName, Object value)_			throws DataAccessException_;execute,a,named,query,binding,one,value,to,a,named,parameter,in,the,query,string,p,a,named,query,is,defined,in,a,hibernate,mapping,file,param,query,name,the,name,of,a,hibernate,query,in,a,mapping,file,param,param,name,the,name,of,parameter,param,value,the,value,of,the,parameter,return,a,link,list,containing,the,results,of,the,query,execution,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,get,named,query,string;list,find,by,named,query,and,named,param,string,query,name,string,param,name,object,value,throws,data,access,exception
HibernateOperations -> Object load(String entityName, Serializable id, LockMode lockMode) throws DataAccessException_;1467668243;Return the persistent instance of the given entity class_with the given identifier, throwing an exception if not found._<p>Obtains the specified lock mode if the instance exists._<p>This method is a thin wrapper around_{@link org.hibernate.Session#load(String, Serializable, LockMode)} for convenience._For an explanation of the exact semantics of this method, please do refer to_the Hibernate API documentation in the first instance._@param entityName the name of the persistent entity_@param id the identifier of the persistent instance_@param lockMode the lock mode to obtain_@return the persistent instance_@throws org.springframework.orm.ObjectRetrievalFailureException if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#load(Class, Serializable);Object load(String entityName, Serializable id, LockMode lockMode) throws DataAccessException_;return,the,persistent,instance,of,the,given,entity,class,with,the,given,identifier,throwing,an,exception,if,not,found,p,obtains,the,specified,lock,mode,if,the,instance,exists,p,this,method,is,a,thin,wrapper,around,link,org,hibernate,session,load,string,serializable,lock,mode,for,convenience,for,an,explanation,of,the,exact,semantics,of,this,method,please,do,refer,to,the,hibernate,api,documentation,in,the,first,instance,param,entity,name,the,name,of,the,persistent,entity,param,id,the,identifier,of,the,persistent,instance,param,lock,mode,the,lock,mode,to,obtain,return,the,persistent,instance,throws,org,springframework,orm,object,retrieval,failure,exception,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,load,class,serializable;object,load,string,entity,name,serializable,id,lock,mode,lock,mode,throws,data,access,exception
HibernateOperations -> Object load(String entityName, Serializable id, LockMode lockMode) throws DataAccessException_;1495868221;Return the persistent instance of the given entity class_with the given identifier, throwing an exception if not found._<p>Obtains the specified lock mode if the instance exists._<p>This method is a thin wrapper around_{@link org.hibernate.Session#load(String, Serializable, LockMode)} for convenience._For an explanation of the exact semantics of this method, please do refer to_the Hibernate API documentation in the first instance._@param entityName the name of the persistent entity_@param id the identifier of the persistent instance_@param lockMode the lock mode to obtain_@return the persistent instance_@throws org.springframework.orm.ObjectRetrievalFailureException if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#load(Class, Serializable);Object load(String entityName, Serializable id, LockMode lockMode) throws DataAccessException_;return,the,persistent,instance,of,the,given,entity,class,with,the,given,identifier,throwing,an,exception,if,not,found,p,obtains,the,specified,lock,mode,if,the,instance,exists,p,this,method,is,a,thin,wrapper,around,link,org,hibernate,session,load,string,serializable,lock,mode,for,convenience,for,an,explanation,of,the,exact,semantics,of,this,method,please,do,refer,to,the,hibernate,api,documentation,in,the,first,instance,param,entity,name,the,name,of,the,persistent,entity,param,id,the,identifier,of,the,persistent,instance,param,lock,mode,the,lock,mode,to,obtain,return,the,persistent,instance,throws,org,springframework,orm,object,retrieval,failure,exception,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,load,class,serializable;object,load,string,entity,name,serializable,id,lock,mode,lock,mode,throws,data,access,exception
HibernateOperations -> Object load(String entityName, Serializable id, LockMode lockMode) throws DataAccessException_;1517247608;Return the persistent instance of the given entity class_with the given identifier, throwing an exception if not found._<p>Obtains the specified lock mode if the instance exists._<p>This method is a thin wrapper around_{@link org.hibernate.Session#load(String, Serializable, LockMode)} for convenience._For an explanation of the exact semantics of this method, please do refer to_the Hibernate API documentation in the first instance._@param entityName the name of the persistent entity_@param id the identifier of the persistent instance_@param lockMode the lock mode to obtain_@return the persistent instance_@throws org.springframework.orm.ObjectRetrievalFailureException if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#load(Class, Serializable);Object load(String entityName, Serializable id, LockMode lockMode) throws DataAccessException_;return,the,persistent,instance,of,the,given,entity,class,with,the,given,identifier,throwing,an,exception,if,not,found,p,obtains,the,specified,lock,mode,if,the,instance,exists,p,this,method,is,a,thin,wrapper,around,link,org,hibernate,session,load,string,serializable,lock,mode,for,convenience,for,an,explanation,of,the,exact,semantics,of,this,method,please,do,refer,to,the,hibernate,api,documentation,in,the,first,instance,param,entity,name,the,name,of,the,persistent,entity,param,id,the,identifier,of,the,persistent,instance,param,lock,mode,the,lock,mode,to,obtain,return,the,persistent,instance,throws,org,springframework,orm,object,retrieval,failure,exception,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,load,class,serializable;object,load,string,entity,name,serializable,id,lock,mode,lock,mode,throws,data,access,exception
HibernateOperations -> List<?> find(String queryString, Object... values) throws DataAccessException_;1467668243;Execute an HQL query, binding a number of values to "?" parameters_in the query string._@param queryString a query expressed in Hibernate's query language_@param values the values of the parameters_@return a {@link List} containing the results of the query execution_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#createQuery;List<?> find(String queryString, Object... values) throws DataAccessException_;execute,an,hql,query,binding,a,number,of,values,to,parameters,in,the,query,string,param,query,string,a,query,expressed,in,hibernate,s,query,language,param,values,the,values,of,the,parameters,return,a,link,list,containing,the,results,of,the,query,execution,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,create,query;list,find,string,query,string,object,values,throws,data,access,exception
HibernateOperations -> List<?> find(String queryString, Object... values) throws DataAccessException_;1495868221;Execute an HQL query, binding a number of values to "?" parameters_in the query string._@param queryString a query expressed in Hibernate's query language_@param values the values of the parameters_@return a {@link List} containing the results of the query execution_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#createQuery;List<?> find(String queryString, Object... values) throws DataAccessException_;execute,an,hql,query,binding,a,number,of,values,to,parameters,in,the,query,string,param,query,string,a,query,expressed,in,hibernate,s,query,language,param,values,the,values,of,the,parameters,return,a,link,list,containing,the,results,of,the,query,execution,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,create,query;list,find,string,query,string,object,values,throws,data,access,exception
HibernateOperations -> void clear() throws DataAccessException_;1467668243;Remove all objects from the {@link org.hibernate.Session} cache, and_cancel all pending saves, updates and deletes._@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#clear;void clear() throws DataAccessException_;remove,all,objects,from,the,link,org,hibernate,session,cache,and,cancel,all,pending,saves,updates,and,deletes,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,clear;void,clear,throws,data,access,exception
HibernateOperations -> void clear() throws DataAccessException_;1495868221;Remove all objects from the {@link org.hibernate.Session} cache, and_cancel all pending saves, updates and deletes._@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#clear;void clear() throws DataAccessException_;remove,all,objects,from,the,link,org,hibernate,session,cache,and,cancel,all,pending,saves,updates,and,deletes,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,clear;void,clear,throws,data,access,exception
HibernateOperations -> void clear() throws DataAccessException_;1517247608;Remove all objects from the {@link org.hibernate.Session} cache, and_cancel all pending saves, updates and deletes._@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#clear;void clear() throws DataAccessException_;remove,all,objects,from,the,link,org,hibernate,session,cache,and,cancel,all,pending,saves,updates,and,deletes,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,clear;void,clear,throws,data,access,exception
HibernateOperations -> List<?> findByNamedQuery(String queryName, Object... values) throws DataAccessException_;1467668243;Execute a named query binding a number of values to "?" parameters_in the query string._<p>A named query is defined in a Hibernate mapping file._@param queryName the name of a Hibernate query in a mapping file_@param values the values of the parameters_@return a {@link List} containing the results of the query execution_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#getNamedQuery(String);List<?> findByNamedQuery(String queryName, Object... values) throws DataAccessException_;execute,a,named,query,binding,a,number,of,values,to,parameters,in,the,query,string,p,a,named,query,is,defined,in,a,hibernate,mapping,file,param,query,name,the,name,of,a,hibernate,query,in,a,mapping,file,param,values,the,values,of,the,parameters,return,a,link,list,containing,the,results,of,the,query,execution,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,get,named,query,string;list,find,by,named,query,string,query,name,object,values,throws,data,access,exception
HibernateOperations -> List<?> findByNamedQuery(String queryName, Object... values) throws DataAccessException_;1495868221;Execute a named query binding a number of values to "?" parameters_in the query string._<p>A named query is defined in a Hibernate mapping file._@param queryName the name of a Hibernate query in a mapping file_@param values the values of the parameters_@return a {@link List} containing the results of the query execution_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#getNamedQuery(String);List<?> findByNamedQuery(String queryName, Object... values) throws DataAccessException_;execute,a,named,query,binding,a,number,of,values,to,parameters,in,the,query,string,p,a,named,query,is,defined,in,a,hibernate,mapping,file,param,query,name,the,name,of,a,hibernate,query,in,a,mapping,file,param,values,the,values,of,the,parameters,return,a,link,list,containing,the,results,of,the,query,execution,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,get,named,query,string;list,find,by,named,query,string,query,name,object,values,throws,data,access,exception
HibernateOperations -> <T> List<T> findByExample(String entityName, T exampleEntity, int firstResult, int maxResults) 			throws DataAccessException_;1467668243;Execute a query based on a given example entity object._@param entityName the name of the persistent entity_@param exampleEntity an instance of the desired entity,_serving as example for "query-by-example"_@param firstResult the index of the first result object to be retrieved_(numbered from 0)_@param maxResults the maximum number of result objects to retrieve_(or <=0 for no limit)_@return a {@link List} containing 0 or more persistent instances_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.criterion.Example#create(Object)_@see org.hibernate.Criteria#setFirstResult(int)_@see org.hibernate.Criteria#setMaxResults(int);<T> List<T> findByExample(String entityName, T exampleEntity, int firstResult, int maxResults)_			throws DataAccessException_;execute,a,query,based,on,a,given,example,entity,object,param,entity,name,the,name,of,the,persistent,entity,param,example,entity,an,instance,of,the,desired,entity,serving,as,example,for,query,by,example,param,first,result,the,index,of,the,first,result,object,to,be,retrieved,numbered,from,0,param,max,results,the,maximum,number,of,result,objects,to,retrieve,or,0,for,no,limit,return,a,link,list,containing,0,or,more,persistent,instances,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,criterion,example,create,object,see,org,hibernate,criteria,set,first,result,int,see,org,hibernate,criteria,set,max,results,int;t,list,t,find,by,example,string,entity,name,t,example,entity,int,first,result,int,max,results,throws,data,access,exception
HibernateOperations -> <T> List<T> findByExample(String entityName, T exampleEntity, int firstResult, int maxResults) 			throws DataAccessException_;1495868221;Execute a query based on a given example entity object._@param entityName the name of the persistent entity_@param exampleEntity an instance of the desired entity,_serving as example for "query-by-example"_@param firstResult the index of the first result object to be retrieved_(numbered from 0)_@param maxResults the maximum number of result objects to retrieve_(or <=0 for no limit)_@return a {@link List} containing 0 or more persistent instances_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.criterion.Example#create(Object)_@see org.hibernate.Criteria#setFirstResult(int)_@see org.hibernate.Criteria#setMaxResults(int);<T> List<T> findByExample(String entityName, T exampleEntity, int firstResult, int maxResults)_			throws DataAccessException_;execute,a,query,based,on,a,given,example,entity,object,param,entity,name,the,name,of,the,persistent,entity,param,example,entity,an,instance,of,the,desired,entity,serving,as,example,for,query,by,example,param,first,result,the,index,of,the,first,result,object,to,be,retrieved,numbered,from,0,param,max,results,the,maximum,number,of,result,objects,to,retrieve,or,0,for,no,limit,return,a,link,list,containing,0,or,more,persistent,instances,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,criterion,example,create,object,see,org,hibernate,criteria,set,first,result,int,see,org,hibernate,criteria,set,max,results,int;t,list,t,find,by,example,string,entity,name,t,example,entity,int,first,result,int,max,results,throws,data,access,exception
HibernateOperations -> <T> List<T> findByExample(String entityName, T exampleEntity, int firstResult, int maxResults) 			throws DataAccessException_;1517247608;Execute a query based on a given example entity object._@param entityName the name of the persistent entity_@param exampleEntity an instance of the desired entity,_serving as example for "query-by-example"_@param firstResult the index of the first result object to be retrieved_(numbered from 0)_@param maxResults the maximum number of result objects to retrieve_(or <=0 for no limit)_@return a {@link List} containing 0 or more persistent instances_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.criterion.Example#create(Object)_@see org.hibernate.Criteria#setFirstResult(int)_@see org.hibernate.Criteria#setMaxResults(int);<T> List<T> findByExample(String entityName, T exampleEntity, int firstResult, int maxResults)_			throws DataAccessException_;execute,a,query,based,on,a,given,example,entity,object,param,entity,name,the,name,of,the,persistent,entity,param,example,entity,an,instance,of,the,desired,entity,serving,as,example,for,query,by,example,param,first,result,the,index,of,the,first,result,object,to,be,retrieved,numbered,from,0,param,max,results,the,maximum,number,of,result,objects,to,retrieve,or,0,for,no,limit,return,a,link,list,containing,0,or,more,persistent,instances,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,criterion,example,create,object,see,org,hibernate,criteria,set,first,result,int,see,org,hibernate,criteria,set,max,results,int;t,list,t,find,by,example,string,entity,name,t,example,entity,int,first,result,int,max,results,throws,data,access,exception
HibernateOperations -> void lock(String entityName, Object entity, LockMode lockMode) throws DataAccessException_;1467668243;Obtain the specified lock level upon the given object, implicitly_checking whether the corresponding database entry still exists._@param entityName the name of the persistent entity_@param entity the persistent instance to lock_@param lockMode the lock mode to obtain_@throws org.springframework.orm.ObjectOptimisticLockingFailureException if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#lock(String, Object, LockMode);void lock(String entityName, Object entity, LockMode lockMode) throws DataAccessException_;obtain,the,specified,lock,level,upon,the,given,object,implicitly,checking,whether,the,corresponding,database,entry,still,exists,param,entity,name,the,name,of,the,persistent,entity,param,entity,the,persistent,instance,to,lock,param,lock,mode,the,lock,mode,to,obtain,throws,org,springframework,orm,object,optimistic,locking,failure,exception,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,lock,string,object,lock,mode;void,lock,string,entity,name,object,entity,lock,mode,lock,mode,throws,data,access,exception
HibernateOperations -> void lock(String entityName, Object entity, LockMode lockMode) throws DataAccessException_;1495868221;Obtain the specified lock level upon the given object, implicitly_checking whether the corresponding database entry still exists._@param entityName the name of the persistent entity_@param entity the persistent instance to lock_@param lockMode the lock mode to obtain_@throws org.springframework.orm.ObjectOptimisticLockingFailureException if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#lock(String, Object, LockMode);void lock(String entityName, Object entity, LockMode lockMode) throws DataAccessException_;obtain,the,specified,lock,level,upon,the,given,object,implicitly,checking,whether,the,corresponding,database,entry,still,exists,param,entity,name,the,name,of,the,persistent,entity,param,entity,the,persistent,instance,to,lock,param,lock,mode,the,lock,mode,to,obtain,throws,org,springframework,orm,object,optimistic,locking,failure,exception,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,lock,string,object,lock,mode;void,lock,string,entity,name,object,entity,lock,mode,lock,mode,throws,data,access,exception
HibernateOperations -> void lock(String entityName, Object entity, LockMode lockMode) throws DataAccessException_;1517247608;Obtain the specified lock level upon the given object, implicitly_checking whether the corresponding database entry still exists._@param entityName the name of the persistent entity_@param entity the persistent instance to lock_@param lockMode the lock mode to obtain_@throws org.springframework.orm.ObjectOptimisticLockingFailureException if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#lock(String, Object, LockMode);void lock(String entityName, Object entity, LockMode lockMode) throws DataAccessException_;obtain,the,specified,lock,level,upon,the,given,object,implicitly,checking,whether,the,corresponding,database,entry,still,exists,param,entity,name,the,name,of,the,persistent,entity,param,entity,the,persistent,instance,to,lock,param,lock,mode,the,lock,mode,to,obtain,throws,org,springframework,orm,object,optimistic,locking,failure,exception,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,lock,string,object,lock,mode;void,lock,string,entity,name,object,entity,lock,mode,lock,mode,throws,data,access,exception
HibernateOperations -> void update(Object entity) throws DataAccessException_;1467668243;Update the given persistent instance,_associating it with the current Hibernate {@link org.hibernate.Session}._@param entity the persistent instance to update_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#update(Object);void update(Object entity) throws DataAccessException_;update,the,given,persistent,instance,associating,it,with,the,current,hibernate,link,org,hibernate,session,param,entity,the,persistent,instance,to,update,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,update,object;void,update,object,entity,throws,data,access,exception
HibernateOperations -> void update(Object entity) throws DataAccessException_;1495868221;Update the given persistent instance,_associating it with the current Hibernate {@link org.hibernate.Session}._@param entity the persistent instance to update_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#update(Object);void update(Object entity) throws DataAccessException_;update,the,given,persistent,instance,associating,it,with,the,current,hibernate,link,org,hibernate,session,param,entity,the,persistent,instance,to,update,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,update,object;void,update,object,entity,throws,data,access,exception
HibernateOperations -> void update(Object entity) throws DataAccessException_;1517247608;Update the given persistent instance,_associating it with the current Hibernate {@link org.hibernate.Session}._@param entity the persistent instance to update_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#update(Object);void update(Object entity) throws DataAccessException_;update,the,given,persistent,instance,associating,it,with,the,current,hibernate,link,org,hibernate,session,param,entity,the,persistent,instance,to,update,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,update,object;void,update,object,entity,throws,data,access,exception
HibernateOperations -> void saveOrUpdate(Object entity) throws DataAccessException_;1467668243;Save or update the given persistent instance,_according to its id (matching the configured "unsaved-value"?)._Associates the instance with the current Hibernate {@link org.hibernate.Session}._@param entity the persistent instance to save or update_(to be associated with the Hibernate {@code Session})_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#saveOrUpdate(Object);void saveOrUpdate(Object entity) throws DataAccessException_;save,or,update,the,given,persistent,instance,according,to,its,id,matching,the,configured,unsaved,value,associates,the,instance,with,the,current,hibernate,link,org,hibernate,session,param,entity,the,persistent,instance,to,save,or,update,to,be,associated,with,the,hibernate,code,session,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,save,or,update,object;void,save,or,update,object,entity,throws,data,access,exception
HibernateOperations -> void saveOrUpdate(Object entity) throws DataAccessException_;1495868221;Save or update the given persistent instance,_according to its id (matching the configured "unsaved-value"?)._Associates the instance with the current Hibernate {@link org.hibernate.Session}._@param entity the persistent instance to save or update_(to be associated with the Hibernate {@code Session})_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#saveOrUpdate(Object);void saveOrUpdate(Object entity) throws DataAccessException_;save,or,update,the,given,persistent,instance,according,to,its,id,matching,the,configured,unsaved,value,associates,the,instance,with,the,current,hibernate,link,org,hibernate,session,param,entity,the,persistent,instance,to,save,or,update,to,be,associated,with,the,hibernate,code,session,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,save,or,update,object;void,save,or,update,object,entity,throws,data,access,exception
HibernateOperations -> void saveOrUpdate(Object entity) throws DataAccessException_;1517247608;Save or update the given persistent instance,_according to its id (matching the configured "unsaved-value"?)._Associates the instance with the current Hibernate {@link org.hibernate.Session}._@param entity the persistent instance to save or update_(to be associated with the Hibernate {@code Session})_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#saveOrUpdate(Object);void saveOrUpdate(Object entity) throws DataAccessException_;save,or,update,the,given,persistent,instance,according,to,its,id,matching,the,configured,unsaved,value,associates,the,instance,with,the,current,hibernate,link,org,hibernate,session,param,entity,the,persistent,instance,to,save,or,update,to,be,associated,with,the,hibernate,code,session,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,save,or,update,object;void,save,or,update,object,entity,throws,data,access,exception
HibernateOperations -> Filter enableFilter(String filterName) throws IllegalStateException_;1467668243;Return an enabled Hibernate {@link Filter} for the given filter name._The returned {@code Filter} instance can be used to set filter parameters._@param filterName the name of the filter_@return the enabled Hibernate {@code Filter} (either already_enabled or enabled on the fly by this operation)_@throws IllegalStateException if we are not running within a_transactional Session (in which case this operation does not make sense);Filter enableFilter(String filterName) throws IllegalStateException_;return,an,enabled,hibernate,link,filter,for,the,given,filter,name,the,returned,code,filter,instance,can,be,used,to,set,filter,parameters,param,filter,name,the,name,of,the,filter,return,the,enabled,hibernate,code,filter,either,already,enabled,or,enabled,on,the,fly,by,this,operation,throws,illegal,state,exception,if,we,are,not,running,within,a,transactional,session,in,which,case,this,operation,does,not,make,sense;filter,enable,filter,string,filter,name,throws,illegal,state,exception
HibernateOperations -> Filter enableFilter(String filterName) throws IllegalStateException_;1495868221;Return an enabled Hibernate {@link Filter} for the given filter name._The returned {@code Filter} instance can be used to set filter parameters._@param filterName the name of the filter_@return the enabled Hibernate {@code Filter} (either already_enabled or enabled on the fly by this operation)_@throws IllegalStateException if we are not running within a_transactional Session (in which case this operation does not make sense);Filter enableFilter(String filterName) throws IllegalStateException_;return,an,enabled,hibernate,link,filter,for,the,given,filter,name,the,returned,code,filter,instance,can,be,used,to,set,filter,parameters,param,filter,name,the,name,of,the,filter,return,the,enabled,hibernate,code,filter,either,already,enabled,or,enabled,on,the,fly,by,this,operation,throws,illegal,state,exception,if,we,are,not,running,within,a,transactional,session,in,which,case,this,operation,does,not,make,sense;filter,enable,filter,string,filter,name,throws,illegal,state,exception
HibernateOperations -> Filter enableFilter(String filterName) throws IllegalStateException_;1517247608;Return an enabled Hibernate {@link Filter} for the given filter name._The returned {@code Filter} instance can be used to set filter parameters._@param filterName the name of the filter_@return the enabled Hibernate {@code Filter} (either already_enabled or enabled on the fly by this operation)_@throws IllegalStateException if we are not running within a_transactional Session (in which case this operation does not make sense);Filter enableFilter(String filterName) throws IllegalStateException_;return,an,enabled,hibernate,link,filter,for,the,given,filter,name,the,returned,code,filter,instance,can,be,used,to,set,filter,parameters,param,filter,name,the,name,of,the,filter,return,the,enabled,hibernate,code,filter,either,already,enabled,or,enabled,on,the,fly,by,this,operation,throws,illegal,state,exception,if,we,are,not,running,within,a,transactional,session,in,which,case,this,operation,does,not,make,sense;filter,enable,filter,string,filter,name,throws,illegal,state,exception
HibernateOperations -> void refresh(Object entity, LockMode lockMode) throws DataAccessException_;1467668243;Re-read the state of the given persistent instance._Obtains the specified lock mode for the instance._@param entity the persistent instance to re-read_@param lockMode the lock mode to obtain_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#refresh(Object, LockMode);void refresh(Object entity, LockMode lockMode) throws DataAccessException_;re,read,the,state,of,the,given,persistent,instance,obtains,the,specified,lock,mode,for,the,instance,param,entity,the,persistent,instance,to,re,read,param,lock,mode,the,lock,mode,to,obtain,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,refresh,object,lock,mode;void,refresh,object,entity,lock,mode,lock,mode,throws,data,access,exception
HibernateOperations -> void refresh(Object entity, LockMode lockMode) throws DataAccessException_;1495868221;Re-read the state of the given persistent instance._Obtains the specified lock mode for the instance._@param entity the persistent instance to re-read_@param lockMode the lock mode to obtain_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#refresh(Object, LockMode);void refresh(Object entity, LockMode lockMode) throws DataAccessException_;re,read,the,state,of,the,given,persistent,instance,obtains,the,specified,lock,mode,for,the,instance,param,entity,the,persistent,instance,to,re,read,param,lock,mode,the,lock,mode,to,obtain,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,refresh,object,lock,mode;void,refresh,object,entity,lock,mode,lock,mode,throws,data,access,exception
HibernateOperations -> void refresh(Object entity, LockMode lockMode) throws DataAccessException_;1517247608;Re-read the state of the given persistent instance._Obtains the specified lock mode for the instance._@param entity the persistent instance to re-read_@param lockMode the lock mode to obtain_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#refresh(Object, LockMode);void refresh(Object entity, LockMode lockMode) throws DataAccessException_;re,read,the,state,of,the,given,persistent,instance,obtains,the,specified,lock,mode,for,the,instance,param,entity,the,persistent,instance,to,re,read,param,lock,mode,the,lock,mode,to,obtain,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,refresh,object,lock,mode;void,refresh,object,entity,lock,mode,lock,mode,throws,data,access,exception
HibernateOperations -> void delete(String entityName, Object entity) throws DataAccessException_;1467668243;Delete the given persistent instance._@param entityName the name of the persistent entity_@param entity the persistent instance to delete_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#delete(Object);void delete(String entityName, Object entity) throws DataAccessException_;delete,the,given,persistent,instance,param,entity,name,the,name,of,the,persistent,entity,param,entity,the,persistent,instance,to,delete,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,delete,object;void,delete,string,entity,name,object,entity,throws,data,access,exception
HibernateOperations -> void delete(String entityName, Object entity) throws DataAccessException_;1495868221;Delete the given persistent instance._@param entityName the name of the persistent entity_@param entity the persistent instance to delete_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#delete(Object);void delete(String entityName, Object entity) throws DataAccessException_;delete,the,given,persistent,instance,param,entity,name,the,name,of,the,persistent,entity,param,entity,the,persistent,instance,to,delete,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,delete,object;void,delete,string,entity,name,object,entity,throws,data,access,exception
HibernateOperations -> void delete(String entityName, Object entity) throws DataAccessException_;1517247608;Delete the given persistent instance._@param entityName the name of the persistent entity_@param entity the persistent instance to delete_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#delete(Object);void delete(String entityName, Object entity) throws DataAccessException_;delete,the,given,persistent,instance,param,entity,name,the,name,of,the,persistent,entity,param,entity,the,persistent,instance,to,delete,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,delete,object;void,delete,string,entity,name,object,entity,throws,data,access,exception
HibernateOperations -> void closeIterator(Iterator<?> it) throws DataAccessException_;1467668243;Immediately close an {@link Iterator} created by any of the various_{@code iterate(..)} operations, instead of waiting until the_session is closed or disconnected._@param it the {@code Iterator} to close_@throws DataAccessException if the {@code Iterator} could not be closed_@see org.hibernate.Hibernate#close;void closeIterator(Iterator<?> it) throws DataAccessException_;immediately,close,an,link,iterator,created,by,any,of,the,various,code,iterate,operations,instead,of,waiting,until,the,session,is,closed,or,disconnected,param,it,the,code,iterator,to,close,throws,data,access,exception,if,the,code,iterator,could,not,be,closed,see,org,hibernate,hibernate,close;void,close,iterator,iterator,it,throws,data,access,exception
HibernateOperations -> void closeIterator(Iterator<?> it) throws DataAccessException_;1495868221;Immediately close an {@link Iterator} created by any of the various_{@code iterate(..)} operations, instead of waiting until the_session is closed or disconnected._@param it the {@code Iterator} to close_@throws DataAccessException if the {@code Iterator} could not be closed_@see org.hibernate.Hibernate#close;void closeIterator(Iterator<?> it) throws DataAccessException_;immediately,close,an,link,iterator,created,by,any,of,the,various,code,iterate,operations,instead,of,waiting,until,the,session,is,closed,or,disconnected,param,it,the,code,iterator,to,close,throws,data,access,exception,if,the,code,iterator,could,not,be,closed,see,org,hibernate,hibernate,close;void,close,iterator,iterator,it,throws,data,access,exception
HibernateOperations -> List<?> findByCriteria(DetachedCriteria criteria) throws DataAccessException_;1467668243;Execute a query based on a given Hibernate criteria object._@param criteria the detached Hibernate criteria object._<b>Note: Do not reuse criteria objects! They need to recreated per execution,_due to the suboptimal design of Hibernate's criteria facility.</b>_@return a {@link List} containing 0 or more persistent instances_@throws DataAccessException in case of Hibernate errors_@see DetachedCriteria#getExecutableCriteria(org.hibernate.Session);List<?> findByCriteria(DetachedCriteria criteria) throws DataAccessException_;execute,a,query,based,on,a,given,hibernate,criteria,object,param,criteria,the,detached,hibernate,criteria,object,b,note,do,not,reuse,criteria,objects,they,need,to,recreated,per,execution,due,to,the,suboptimal,design,of,hibernate,s,criteria,facility,b,return,a,link,list,containing,0,or,more,persistent,instances,throws,data,access,exception,in,case,of,hibernate,errors,see,detached,criteria,get,executable,criteria,org,hibernate,session;list,find,by,criteria,detached,criteria,criteria,throws,data,access,exception
HibernateOperations -> List<?> findByCriteria(DetachedCriteria criteria) throws DataAccessException_;1495868221;Execute a query based on a given Hibernate criteria object._@param criteria the detached Hibernate criteria object._<b>Note: Do not reuse criteria objects! They need to recreated per execution,_due to the suboptimal design of Hibernate's criteria facility.</b>_@return a {@link List} containing 0 or more persistent instances_@throws DataAccessException in case of Hibernate errors_@see DetachedCriteria#getExecutableCriteria(org.hibernate.Session);List<?> findByCriteria(DetachedCriteria criteria) throws DataAccessException_;execute,a,query,based,on,a,given,hibernate,criteria,object,param,criteria,the,detached,hibernate,criteria,object,b,note,do,not,reuse,criteria,objects,they,need,to,recreated,per,execution,due,to,the,suboptimal,design,of,hibernate,s,criteria,facility,b,return,a,link,list,containing,0,or,more,persistent,instances,throws,data,access,exception,in,case,of,hibernate,errors,see,detached,criteria,get,executable,criteria,org,hibernate,session;list,find,by,criteria,detached,criteria,criteria,throws,data,access,exception
HibernateOperations -> List<?> findByCriteria(DetachedCriteria criteria) throws DataAccessException_;1517247608;Execute a query based on a given Hibernate criteria object._@param criteria the detached Hibernate criteria object._<b>Note: Do not reuse criteria objects! They need to recreated per execution,_due to the suboptimal design of Hibernate's criteria facility.</b>_@return a {@link List} containing 0 or more persistent instances_@throws DataAccessException in case of Hibernate errors_@see DetachedCriteria#getExecutableCriteria(org.hibernate.Session);List<?> findByCriteria(DetachedCriteria criteria) throws DataAccessException_;execute,a,query,based,on,a,given,hibernate,criteria,object,param,criteria,the,detached,hibernate,criteria,object,b,note,do,not,reuse,criteria,objects,they,need,to,recreated,per,execution,due,to,the,suboptimal,design,of,hibernate,s,criteria,facility,b,return,a,link,list,containing,0,or,more,persistent,instances,throws,data,access,exception,in,case,of,hibernate,errors,see,detached,criteria,get,executable,criteria,org,hibernate,session;list,find,by,criteria,detached,criteria,criteria,throws,data,access,exception
HibernateOperations -> Iterator<?> iterate(String queryString, Object... values) throws DataAccessException_;1467668243;Execute a query for persistent instances, binding a number of_values to "?" parameters in the query string._<p>Returns the results as an {@link Iterator}. Entities returned are_initialized on demand. See the Hibernate API documentation for details._@param queryString a query expressed in Hibernate's query language_@param values the values of the parameters_@return an {@link Iterator} containing 0 or more persistent instances_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#createQuery_@see org.hibernate.Query#iterate;Iterator<?> iterate(String queryString, Object... values) throws DataAccessException_;execute,a,query,for,persistent,instances,binding,a,number,of,values,to,parameters,in,the,query,string,p,returns,the,results,as,an,link,iterator,entities,returned,are,initialized,on,demand,see,the,hibernate,api,documentation,for,details,param,query,string,a,query,expressed,in,hibernate,s,query,language,param,values,the,values,of,the,parameters,return,an,link,iterator,containing,0,or,more,persistent,instances,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,create,query,see,org,hibernate,query,iterate;iterator,iterate,string,query,string,object,values,throws,data,access,exception
HibernateOperations -> Iterator<?> iterate(String queryString, Object... values) throws DataAccessException_;1495868221;Execute a query for persistent instances, binding a number of_values to "?" parameters in the query string._<p>Returns the results as an {@link Iterator}. Entities returned are_initialized on demand. See the Hibernate API documentation for details._@param queryString a query expressed in Hibernate's query language_@param values the values of the parameters_@return an {@link Iterator} containing 0 or more persistent instances_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#createQuery_@see org.hibernate.Query#iterate;Iterator<?> iterate(String queryString, Object... values) throws DataAccessException_;execute,a,query,for,persistent,instances,binding,a,number,of,values,to,parameters,in,the,query,string,p,returns,the,results,as,an,link,iterator,entities,returned,are,initialized,on,demand,see,the,hibernate,api,documentation,for,details,param,query,string,a,query,expressed,in,hibernate,s,query,language,param,values,the,values,of,the,parameters,return,an,link,iterator,containing,0,or,more,persistent,instances,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,create,query,see,org,hibernate,query,iterate;iterator,iterate,string,query,string,object,values,throws,data,access,exception
HibernateOperations -> void lock(Object entity, LockMode lockMode) throws DataAccessException_;1467668243;Obtain the specified lock level upon the given object, implicitly_checking whether the corresponding database entry still exists._@param entity the persistent instance to lock_@param lockMode the lock mode to obtain_@throws org.springframework.orm.ObjectOptimisticLockingFailureException if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#lock(Object, LockMode);void lock(Object entity, LockMode lockMode) throws DataAccessException_;obtain,the,specified,lock,level,upon,the,given,object,implicitly,checking,whether,the,corresponding,database,entry,still,exists,param,entity,the,persistent,instance,to,lock,param,lock,mode,the,lock,mode,to,obtain,throws,org,springframework,orm,object,optimistic,locking,failure,exception,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,lock,object,lock,mode;void,lock,object,entity,lock,mode,lock,mode,throws,data,access,exception
HibernateOperations -> void lock(Object entity, LockMode lockMode) throws DataAccessException_;1495868221;Obtain the specified lock level upon the given object, implicitly_checking whether the corresponding database entry still exists._@param entity the persistent instance to lock_@param lockMode the lock mode to obtain_@throws org.springframework.orm.ObjectOptimisticLockingFailureException if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#lock(Object, LockMode);void lock(Object entity, LockMode lockMode) throws DataAccessException_;obtain,the,specified,lock,level,upon,the,given,object,implicitly,checking,whether,the,corresponding,database,entry,still,exists,param,entity,the,persistent,instance,to,lock,param,lock,mode,the,lock,mode,to,obtain,throws,org,springframework,orm,object,optimistic,locking,failure,exception,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,lock,object,lock,mode;void,lock,object,entity,lock,mode,lock,mode,throws,data,access,exception
HibernateOperations -> void lock(Object entity, LockMode lockMode) throws DataAccessException_;1517247608;Obtain the specified lock level upon the given object, implicitly_checking whether the corresponding database entry still exists._@param entity the persistent instance to lock_@param lockMode the lock mode to obtain_@throws org.springframework.orm.ObjectOptimisticLockingFailureException if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#lock(Object, LockMode);void lock(Object entity, LockMode lockMode) throws DataAccessException_;obtain,the,specified,lock,level,upon,the,given,object,implicitly,checking,whether,the,corresponding,database,entry,still,exists,param,entity,the,persistent,instance,to,lock,param,lock,mode,the,lock,mode,to,obtain,throws,org,springframework,orm,object,optimistic,locking,failure,exception,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,lock,object,lock,mode;void,lock,object,entity,lock,mode,lock,mode,throws,data,access,exception
HibernateOperations -> @Nullable 	<T> T get(Class<T> entityClass, Serializable id) throws DataAccessException_;1495868221;Return the persistent instance of the given entity class_with the given identifier, or {@code null} if not found._<p>This method is a thin wrapper around_{@link org.hibernate.Session#get(Class, Serializable)} for convenience._For an explanation of the exact semantics of this method, please do refer to_the Hibernate API documentation in the first instance._@param entityClass a persistent class_@param id the identifier of the persistent instance_@return the persistent instance, or {@code null} if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#get(Class, Serializable);@Nullable_	<T> T get(Class<T> entityClass, Serializable id) throws DataAccessException_;return,the,persistent,instance,of,the,given,entity,class,with,the,given,identifier,or,code,null,if,not,found,p,this,method,is,a,thin,wrapper,around,link,org,hibernate,session,get,class,serializable,for,convenience,for,an,explanation,of,the,exact,semantics,of,this,method,please,do,refer,to,the,hibernate,api,documentation,in,the,first,instance,param,entity,class,a,persistent,class,param,id,the,identifier,of,the,persistent,instance,return,the,persistent,instance,or,code,null,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,get,class,serializable;nullable,t,t,get,class,t,entity,class,serializable,id,throws,data,access,exception
HibernateOperations -> @Nullable 	<T> T get(Class<T> entityClass, Serializable id) throws DataAccessException_;1517247608;Return the persistent instance of the given entity class_with the given identifier, or {@code null} if not found._<p>This method is a thin wrapper around_{@link org.hibernate.Session#get(Class, Serializable)} for convenience._For an explanation of the exact semantics of this method, please do refer to_the Hibernate API documentation in the first instance._@param entityClass a persistent class_@param id the identifier of the persistent instance_@return the persistent instance, or {@code null} if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#get(Class, Serializable);@Nullable_	<T> T get(Class<T> entityClass, Serializable id) throws DataAccessException_;return,the,persistent,instance,of,the,given,entity,class,with,the,given,identifier,or,code,null,if,not,found,p,this,method,is,a,thin,wrapper,around,link,org,hibernate,session,get,class,serializable,for,convenience,for,an,explanation,of,the,exact,semantics,of,this,method,please,do,refer,to,the,hibernate,api,documentation,in,the,first,instance,param,entity,class,a,persistent,class,param,id,the,identifier,of,the,persistent,instance,return,the,persistent,instance,or,code,null,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,get,class,serializable;nullable,t,t,get,class,t,entity,class,serializable,id,throws,data,access,exception
HibernateOperations -> @Nullable 	<T> T execute(HibernateCallback<T> action) throws DataAccessException_;1495868221;Execute the action specified by the given action object within a_{@link org.hibernate.Session}._<p>Application exceptions thrown by the action object get propagated_to the caller (can only be unchecked). Hibernate exceptions are_transformed into appropriate DAO ones. Allows for returning a result_object, that is a domain object or a collection of domain objects._<p>Note: Callback code is not supposed to handle transactions itself!_Use an appropriate transaction manager like_{@link HibernateTransactionManager}. Generally, callback code must not_touch any {@code Session} lifecycle methods, like close,_disconnect, or reconnect, to let the template do its work._@param action callback object that specifies the Hibernate action_@return a result object returned by the action, or {@code null}_@throws DataAccessException in case of Hibernate errors_@see HibernateTransactionManager_@see org.hibernate.Session;@Nullable_	<T> T execute(HibernateCallback<T> action) throws DataAccessException_;execute,the,action,specified,by,the,given,action,object,within,a,link,org,hibernate,session,p,application,exceptions,thrown,by,the,action,object,get,propagated,to,the,caller,can,only,be,unchecked,hibernate,exceptions,are,transformed,into,appropriate,dao,ones,allows,for,returning,a,result,object,that,is,a,domain,object,or,a,collection,of,domain,objects,p,note,callback,code,is,not,supposed,to,handle,transactions,itself,use,an,appropriate,transaction,manager,like,link,hibernate,transaction,manager,generally,callback,code,must,not,touch,any,code,session,lifecycle,methods,like,close,disconnect,or,reconnect,to,let,the,template,do,its,work,param,action,callback,object,that,specifies,the,hibernate,action,return,a,result,object,returned,by,the,action,or,code,null,throws,data,access,exception,in,case,of,hibernate,errors,see,hibernate,transaction,manager,see,org,hibernate,session;nullable,t,t,execute,hibernate,callback,t,action,throws,data,access,exception
HibernateOperations -> @Nullable 	<T> T execute(HibernateCallback<T> action) throws DataAccessException_;1517247608;Execute the action specified by the given action object within a_{@link org.hibernate.Session}._<p>Application exceptions thrown by the action object get propagated_to the caller (can only be unchecked). Hibernate exceptions are_transformed into appropriate DAO ones. Allows for returning a result_object, that is a domain object or a collection of domain objects._<p>Note: Callback code is not supposed to handle transactions itself!_Use an appropriate transaction manager like_{@link HibernateTransactionManager}. Generally, callback code must not_touch any {@code Session} lifecycle methods, like close,_disconnect, or reconnect, to let the template do its work._@param action callback object that specifies the Hibernate action_@return a result object returned by the action, or {@code null}_@throws DataAccessException in case of Hibernate errors_@see HibernateTransactionManager_@see org.hibernate.Session;@Nullable_	<T> T execute(HibernateCallback<T> action) throws DataAccessException_;execute,the,action,specified,by,the,given,action,object,within,a,link,org,hibernate,session,p,application,exceptions,thrown,by,the,action,object,get,propagated,to,the,caller,can,only,be,unchecked,hibernate,exceptions,are,transformed,into,appropriate,dao,ones,allows,for,returning,a,result,object,that,is,a,domain,object,or,a,collection,of,domain,objects,p,note,callback,code,is,not,supposed,to,handle,transactions,itself,use,an,appropriate,transaction,manager,like,link,hibernate,transaction,manager,generally,callback,code,must,not,touch,any,code,session,lifecycle,methods,like,close,disconnect,or,reconnect,to,let,the,template,do,its,work,param,action,callback,object,that,specifies,the,hibernate,action,return,a,result,object,returned,by,the,action,or,code,null,throws,data,access,exception,in,case,of,hibernate,errors,see,hibernate,transaction,manager,see,org,hibernate,session;nullable,t,t,execute,hibernate,callback,t,action,throws,data,access,exception
HibernateOperations -> <T> T merge(String entityName, T entity) throws DataAccessException_;1467668243;Copy the state of the given object onto the persistent object_with the same identifier. Follows JSR-220 semantics._<p>Similar to {@code saveOrUpdate}, but never associates the given_object with the current Hibernate {@link org.hibernate.Session}. In_the case of a new entity, the state will be copied over as well._<p>Note that {@code merge} will <i>not</i> update the identifiers_in the passed-in object graph (in contrast to TopLink)! Consider_registering Spring's {@code IdTransferringMergeEventListener}_if you would like to have newly assigned ids transferred to the_original object graph too._@param entityName the name of the persistent entity_@param entity the object to merge with the corresponding persistence instance_@return the updated, registered persistent instance_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#merge(String, Object)_@see #saveOrUpdate;<T> T merge(String entityName, T entity) throws DataAccessException_;copy,the,state,of,the,given,object,onto,the,persistent,object,with,the,same,identifier,follows,jsr,220,semantics,p,similar,to,code,save,or,update,but,never,associates,the,given,object,with,the,current,hibernate,link,org,hibernate,session,in,the,case,of,a,new,entity,the,state,will,be,copied,over,as,well,p,note,that,code,merge,will,i,not,i,update,the,identifiers,in,the,passed,in,object,graph,in,contrast,to,top,link,consider,registering,spring,s,code,id,transferring,merge,event,listener,if,you,would,like,to,have,newly,assigned,ids,transferred,to,the,original,object,graph,too,param,entity,name,the,name,of,the,persistent,entity,param,entity,the,object,to,merge,with,the,corresponding,persistence,instance,return,the,updated,registered,persistent,instance,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,merge,string,object,see,save,or,update;t,t,merge,string,entity,name,t,entity,throws,data,access,exception
HibernateOperations -> <T> T merge(String entityName, T entity) throws DataAccessException_;1495868221;Copy the state of the given object onto the persistent object_with the same identifier. Follows JSR-220 semantics._<p>Similar to {@code saveOrUpdate}, but never associates the given_object with the current Hibernate {@link org.hibernate.Session}. In_the case of a new entity, the state will be copied over as well._<p>Note that {@code merge} will <i>not</i> update the identifiers_in the passed-in object graph (in contrast to TopLink)! Consider_registering Spring's {@code IdTransferringMergeEventListener}_if you would like to have newly assigned ids transferred to the_original object graph too._@param entityName the name of the persistent entity_@param entity the object to merge with the corresponding persistence instance_@return the updated, registered persistent instance_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#merge(String, Object)_@see #saveOrUpdate;<T> T merge(String entityName, T entity) throws DataAccessException_;copy,the,state,of,the,given,object,onto,the,persistent,object,with,the,same,identifier,follows,jsr,220,semantics,p,similar,to,code,save,or,update,but,never,associates,the,given,object,with,the,current,hibernate,link,org,hibernate,session,in,the,case,of,a,new,entity,the,state,will,be,copied,over,as,well,p,note,that,code,merge,will,i,not,i,update,the,identifiers,in,the,passed,in,object,graph,in,contrast,to,top,link,consider,registering,spring,s,code,id,transferring,merge,event,listener,if,you,would,like,to,have,newly,assigned,ids,transferred,to,the,original,object,graph,too,param,entity,name,the,name,of,the,persistent,entity,param,entity,the,object,to,merge,with,the,corresponding,persistence,instance,return,the,updated,registered,persistent,instance,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,merge,string,object,see,save,or,update;t,t,merge,string,entity,name,t,entity,throws,data,access,exception
HibernateOperations -> <T> T merge(String entityName, T entity) throws DataAccessException_;1517247608;Copy the state of the given object onto the persistent object_with the same identifier. Follows JSR-220 semantics._<p>Similar to {@code saveOrUpdate}, but never associates the given_object with the current Hibernate {@link org.hibernate.Session}. In_the case of a new entity, the state will be copied over as well._<p>Note that {@code merge} will <i>not</i> update the identifiers_in the passed-in object graph (in contrast to TopLink)! Consider_registering Spring's {@code IdTransferringMergeEventListener}_if you would like to have newly assigned ids transferred to the_original object graph too._@param entityName the name of the persistent entity_@param entity the object to merge with the corresponding persistence instance_@return the updated, registered persistent instance_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#merge(String, Object)_@see #saveOrUpdate;<T> T merge(String entityName, T entity) throws DataAccessException_;copy,the,state,of,the,given,object,onto,the,persistent,object,with,the,same,identifier,follows,jsr,220,semantics,p,similar,to,code,save,or,update,but,never,associates,the,given,object,with,the,current,hibernate,link,org,hibernate,session,in,the,case,of,a,new,entity,the,state,will,be,copied,over,as,well,p,note,that,code,merge,will,i,not,i,update,the,identifiers,in,the,passed,in,object,graph,in,contrast,to,top,link,consider,registering,spring,s,code,id,transferring,merge,event,listener,if,you,would,like,to,have,newly,assigned,ids,transferred,to,the,original,object,graph,too,param,entity,name,the,name,of,the,persistent,entity,param,entity,the,object,to,merge,with,the,corresponding,persistence,instance,return,the,updated,registered,persistent,instance,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,merge,string,object,see,save,or,update;t,t,merge,string,entity,name,t,entity,throws,data,access,exception
HibernateOperations -> void deleteAll(Collection<?> entities) throws DataAccessException_;1467668243;Delete all given persistent instances._<p>This can be combined with any of the find methods to delete by query_in two lines of code._@param entities the persistent instances to delete_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#delete(Object);void deleteAll(Collection<?> entities) throws DataAccessException_;delete,all,given,persistent,instances,p,this,can,be,combined,with,any,of,the,find,methods,to,delete,by,query,in,two,lines,of,code,param,entities,the,persistent,instances,to,delete,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,delete,object;void,delete,all,collection,entities,throws,data,access,exception
HibernateOperations -> void deleteAll(Collection<?> entities) throws DataAccessException_;1495868221;Delete all given persistent instances._<p>This can be combined with any of the find methods to delete by query_in two lines of code._@param entities the persistent instances to delete_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#delete(Object);void deleteAll(Collection<?> entities) throws DataAccessException_;delete,all,given,persistent,instances,p,this,can,be,combined,with,any,of,the,find,methods,to,delete,by,query,in,two,lines,of,code,param,entities,the,persistent,instances,to,delete,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,delete,object;void,delete,all,collection,entities,throws,data,access,exception
HibernateOperations -> void deleteAll(Collection<?> entities) throws DataAccessException_;1517247608;Delete all given persistent instances._<p>This can be combined with any of the find methods to delete by query_in two lines of code._@param entities the persistent instances to delete_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#delete(Object);void deleteAll(Collection<?> entities) throws DataAccessException_;delete,all,given,persistent,instances,p,this,can,be,combined,with,any,of,the,find,methods,to,delete,by,query,in,two,lines,of,code,param,entities,the,persistent,instances,to,delete,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,delete,object;void,delete,all,collection,entities,throws,data,access,exception
HibernateOperations -> @Nullable 	<T> T get(Class<T> entityClass, Serializable id, LockMode lockMode) throws DataAccessException_;1495868221;Return the persistent instance of the given entity class_with the given identifier, or {@code null} if not found._<p>Obtains the specified lock mode if the instance exists._<p>This method is a thin wrapper around_{@link org.hibernate.Session#get(Class, Serializable, LockMode)} for convenience._For an explanation of the exact semantics of this method, please do refer to_the Hibernate API documentation in the first instance._@param entityClass a persistent class_@param id the identifier of the persistent instance_@param lockMode the lock mode to obtain_@return the persistent instance, or {@code null} if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#get(Class, Serializable, LockMode);@Nullable_	<T> T get(Class<T> entityClass, Serializable id, LockMode lockMode) throws DataAccessException_;return,the,persistent,instance,of,the,given,entity,class,with,the,given,identifier,or,code,null,if,not,found,p,obtains,the,specified,lock,mode,if,the,instance,exists,p,this,method,is,a,thin,wrapper,around,link,org,hibernate,session,get,class,serializable,lock,mode,for,convenience,for,an,explanation,of,the,exact,semantics,of,this,method,please,do,refer,to,the,hibernate,api,documentation,in,the,first,instance,param,entity,class,a,persistent,class,param,id,the,identifier,of,the,persistent,instance,param,lock,mode,the,lock,mode,to,obtain,return,the,persistent,instance,or,code,null,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,get,class,serializable,lock,mode;nullable,t,t,get,class,t,entity,class,serializable,id,lock,mode,lock,mode,throws,data,access,exception
HibernateOperations -> @Nullable 	<T> T get(Class<T> entityClass, Serializable id, LockMode lockMode) throws DataAccessException_;1517247608;Return the persistent instance of the given entity class_with the given identifier, or {@code null} if not found._<p>Obtains the specified lock mode if the instance exists._<p>This method is a thin wrapper around_{@link org.hibernate.Session#get(Class, Serializable, LockMode)} for convenience._For an explanation of the exact semantics of this method, please do refer to_the Hibernate API documentation in the first instance._@param entityClass a persistent class_@param id the identifier of the persistent instance_@param lockMode the lock mode to obtain_@return the persistent instance, or {@code null} if not found_@throws DataAccessException in case of Hibernate errors_@see org.hibernate.Session#get(Class, Serializable, LockMode);@Nullable_	<T> T get(Class<T> entityClass, Serializable id, LockMode lockMode) throws DataAccessException_;return,the,persistent,instance,of,the,given,entity,class,with,the,given,identifier,or,code,null,if,not,found,p,obtains,the,specified,lock,mode,if,the,instance,exists,p,this,method,is,a,thin,wrapper,around,link,org,hibernate,session,get,class,serializable,lock,mode,for,convenience,for,an,explanation,of,the,exact,semantics,of,this,method,please,do,refer,to,the,hibernate,api,documentation,in,the,first,instance,param,entity,class,a,persistent,class,param,id,the,identifier,of,the,persistent,instance,param,lock,mode,the,lock,mode,to,obtain,return,the,persistent,instance,or,code,null,if,not,found,throws,data,access,exception,in,case,of,hibernate,errors,see,org,hibernate,session,get,class,serializable,lock,mode;nullable,t,t,get,class,t,entity,class,serializable,id,lock,mode,lock,mode,throws,data,access,exception
