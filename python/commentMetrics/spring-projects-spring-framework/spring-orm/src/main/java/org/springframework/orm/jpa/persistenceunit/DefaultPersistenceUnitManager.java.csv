# id;timestamp;commentText;codeText;commentWords;codeWords
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1328020251;Specify the location of the <code>persistence.xml</code> files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml".;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.persistenceXmlLocations = new String[] {persistenceXmlLocation}__	};specify,the,location,of,the,code,persistence,xml,code,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml;public,void,set,persistence,xml,location,string,persistence,xml,location,this,persistence,xml,locations,new,string,persistence,xml,location
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1329142650;Specify the location of the <code>persistence.xml</code> files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml".;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.persistenceXmlLocations = new String[] {persistenceXmlLocation}__	};specify,the,location,of,the,code,persistence,xml,code,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml;public,void,set,persistence,xml,location,string,persistence,xml,location,this,persistence,xml,locations,new,string,persistence,xml,location
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1347282851;Specify the location of the <code>persistence.xml</code> files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml".;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.persistenceXmlLocations = new String[] {persistenceXmlLocation}__	};specify,the,location,of,the,code,persistence,xml,code,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml;public,void,set,persistence,xml,location,string,persistence,xml,location,this,persistence,xml,locations,new,string,persistence,xml,location
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1351648399;Specify the location of the <code>persistence.xml</code> files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml".;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.persistenceXmlLocations = new String[] {persistenceXmlLocation}__	};specify,the,location,of,the,code,persistence,xml,code,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml;public,void,set,persistence,xml,location,string,persistence,xml,location,this,persistence,xml,locations,new,string,persistence,xml,location
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1356735495;Specify the location of the {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml".;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.persistenceXmlLocations = new String[] {persistenceXmlLocation}__	};specify,the,location,of,the,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml;public,void,set,persistence,xml,location,string,persistence,xml,location,this,persistence,xml,locations,new,string,persistence,xml,location
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1357119239;Specify the location of the {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml".;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.persistenceXmlLocations = new String[] {persistenceXmlLocation}__	};specify,the,location,of,the,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml;public,void,set,persistence,xml,location,string,persistence,xml,location,this,persistence,xml,locations,new,string,persistence,xml,location
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1363714444;Specify the location of the {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml".;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.persistenceXmlLocations = new String[] {persistenceXmlLocation}__	};specify,the,location,of,the,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml;public,void,set,persistence,xml,location,string,persistence,xml,location,this,persistence,xml,locations,new,string,persistence,xml,location
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1368482696;Specify the location of the {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml".;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.persistenceXmlLocations = new String[] {persistenceXmlLocation}__	};specify,the,location,of,the,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml;public,void,set,persistence,xml,location,string,persistence,xml,location,this,persistence,xml,locations,new,string,persistence,xml,location
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1375434510;Specify the location of the {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml".;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.persistenceXmlLocations = new String[] {persistenceXmlLocation}__	};specify,the,location,of,the,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml;public,void,set,persistence,xml,location,string,persistence,xml,location,this,persistence,xml,locations,new,string,persistence,xml,location
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1375458214;Specify the location of the {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml".;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.persistenceXmlLocations = new String[] {persistenceXmlLocation}__	};specify,the,location,of,the,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml;public,void,set,persistence,xml,location,string,persistence,xml,location,this,persistence,xml,locations,new,string,persistence,xml,location
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1389648334;Specify the location of the {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml".;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.persistenceXmlLocations = new String[] {persistenceXmlLocation}__	};specify,the,location,of,the,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml;public,void,set,persistence,xml,location,string,persistence,xml,location,this,persistence,xml,locations,new,string,persistence,xml,location
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1390250900;Specify the location of the {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml".;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.persistenceXmlLocations = new String[] {persistenceXmlLocation}__	};specify,the,location,of,the,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml;public,void,set,persistence,xml,location,string,persistence,xml,location,this,persistence,xml,locations,new,string,persistence,xml,location
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1390313076;Specify the location of the {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml".;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.persistenceXmlLocations = new String[] {persistenceXmlLocation}__	};specify,the,location,of,the,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml;public,void,set,persistence,xml,location,string,persistence,xml,location,this,persistence,xml,locations,new,string,persistence,xml,location
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1400140571;Specify the location of the {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml".;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.persistenceXmlLocations = new String[] {persistenceXmlLocation}__	};specify,the,location,of,the,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml;public,void,set,persistence,xml,location,string,persistence,xml,location,this,persistence,xml,locations,new,string,persistence,xml,location
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1403774750;Specify the location of the {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml".;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.persistenceXmlLocations = new String[] {persistenceXmlLocation}__	};specify,the,location,of,the,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml;public,void,set,persistence,xml,location,string,persistence,xml,location,this,persistence,xml,locations,new,string,persistence,xml,location
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1404056186;Specify the location of the {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml".;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.persistenceXmlLocations = new String[] {persistenceXmlLocation}__	};specify,the,location,of,the,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml;public,void,set,persistence,xml,location,string,persistence,xml,location,this,persistence,xml,locations,new,string,persistence,xml,location
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1447323728;Specify the location of the {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml".;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.persistenceXmlLocations = new String[] {persistenceXmlLocation}__	};specify,the,location,of,the,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml;public,void,set,persistence,xml,location,string,persistence,xml,location,this,persistence,xml,locations,new,string,persistence,xml,location
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1464299869;Specify the location of the {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml".;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.persistenceXmlLocations = new String[] {persistenceXmlLocation}__	};specify,the,location,of,the,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml;public,void,set,persistence,xml,location,string,persistence,xml,location,this,persistence,xml,locations,new,string,persistence,xml,location
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1467668243;Specify the location of the {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml".;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.persistenceXmlLocations = new String[] {persistenceXmlLocation}__	};specify,the,location,of,the,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml;public,void,set,persistence,xml,location,string,persistence,xml,location,this,persistence,xml,locations,new,string,persistence,xml,location
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1467730834;Specify the location of the {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml".;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.persistenceXmlLocations = new String[] {persistenceXmlLocation}__	};specify,the,location,of,the,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml;public,void,set,persistence,xml,location,string,persistence,xml,location,this,persistence,xml,locations,new,string,persistence,xml,location
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1471464767;Specify the location of the {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml".;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.persistenceXmlLocations = new String[] {persistenceXmlLocation}__	};specify,the,location,of,the,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml;public,void,set,persistence,xml,location,string,persistence,xml,location,this,persistence,xml,locations,new,string,persistence,xml,location
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1472736647;Specify the location of the {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml".;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.persistenceXmlLocations = new String[] {persistenceXmlLocation}__	};specify,the,location,of,the,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml;public,void,set,persistence,xml,location,string,persistence,xml,location,this,persistence,xml,locations,new,string,persistence,xml,location
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1474895745;Specify the location of the {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml".;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.persistenceXmlLocations = new String[] {persistenceXmlLocation}__	};specify,the,location,of,the,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml;public,void,set,persistence,xml,location,string,persistence,xml,location,this,persistence,xml,locations,new,string,persistence,xml,location
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1495868221;Specify the location of the {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml".;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.persistenceXmlLocations = new String[] {persistenceXmlLocation}__	};specify,the,location,of,the,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml;public,void,set,persistence,xml,location,string,persistence,xml,location,this,persistence,xml,locations,new,string,persistence,xml,location
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1496259743;Specify the location of the {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml".;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.persistenceXmlLocations = new String[] {persistenceXmlLocation}__	};specify,the,location,of,the,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml;public,void,set,persistence,xml,location,string,persistence,xml,location,this,persistence,xml,locations,new,string,persistence,xml,location
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1496837955;Specify the location of the {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml".;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.persistenceXmlLocations = new String[] {persistenceXmlLocation}__	};specify,the,location,of,the,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml;public,void,set,persistence,xml,location,string,persistence,xml,location,this,persistence,xml,locations,new,string,persistence,xml,location
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1498780456;Specify the location of the {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml".;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.persistenceXmlLocations = new String[] {persistenceXmlLocation}__	};specify,the,location,of,the,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml;public,void,set,persistence,xml,location,string,persistence,xml,location,this,persistence,xml,locations,new,string,persistence,xml,location
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1500448076;Specify the location of the {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml".;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.persistenceXmlLocations = new String[] {persistenceXmlLocation}__	};specify,the,location,of,the,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml;public,void,set,persistence,xml,location,string,persistence,xml,location,this,persistence,xml,locations,new,string,persistence,xml,location
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1520528267;Specify the location of the {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml".;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.persistenceXmlLocations = new String[] {persistenceXmlLocation}__	};specify,the,location,of,the,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml;public,void,set,persistence,xml,location,string,persistence,xml,location,this,persistence,xml,locations,new,string,persistence,xml,location
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1528313484;Specify the location of the {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml".;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.persistenceXmlLocations = new String[] {persistenceXmlLocation}__	};specify,the,location,of,the,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml;public,void,set,persistence,xml,location,string,persistence,xml,location,this,persistence,xml,locations,new,string,persistence,xml,location
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1530174524;Specify the location of the {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml".;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.persistenceXmlLocations = new String[] {persistenceXmlLocation}__	};specify,the,location,of,the,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml;public,void,set,persistence,xml,location,string,persistence,xml,location,this,persistence,xml,locations,new,string,persistence,xml,location
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1532091916;Specify the location of the {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml".;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.persistenceXmlLocations = new String[] {persistenceXmlLocation}__	};specify,the,location,of,the,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml;public,void,set,persistence,xml,location,string,persistence,xml,location,this,persistence,xml,locations,new,string,persistence,xml,location
DefaultPersistenceUnitManager -> public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors();1328020251;Return the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager.;public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors() {_		return this.persistenceUnitPostProcessors__	};return,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager;public,persistence,unit,post,processor,get,persistence,unit,post,processors,return,this,persistence,unit,post,processors
DefaultPersistenceUnitManager -> public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors();1329142650;Return the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager.;public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors() {_		return this.persistenceUnitPostProcessors__	};return,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager;public,persistence,unit,post,processor,get,persistence,unit,post,processors,return,this,persistence,unit,post,processors
DefaultPersistenceUnitManager -> public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors();1347282851;Return the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager.;public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors() {_		return this.persistenceUnitPostProcessors__	};return,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager;public,persistence,unit,post,processor,get,persistence,unit,post,processors,return,this,persistence,unit,post,processors
DefaultPersistenceUnitManager -> public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors();1351648399;Return the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager.;public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors() {_		return this.persistenceUnitPostProcessors__	};return,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager;public,persistence,unit,post,processor,get,persistence,unit,post,processors,return,this,persistence,unit,post,processors
DefaultPersistenceUnitManager -> public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors();1356735495;Return the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager.;public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors() {_		return this.persistenceUnitPostProcessors__	};return,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager;public,persistence,unit,post,processor,get,persistence,unit,post,processors,return,this,persistence,unit,post,processors
DefaultPersistenceUnitManager -> public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors();1357119239;Return the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager.;public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors() {_		return this.persistenceUnitPostProcessors__	};return,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager;public,persistence,unit,post,processor,get,persistence,unit,post,processors,return,this,persistence,unit,post,processors
DefaultPersistenceUnitManager -> public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors();1363714444;Return the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager.;public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors() {_		return this.persistenceUnitPostProcessors__	};return,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager;public,persistence,unit,post,processor,get,persistence,unit,post,processors,return,this,persistence,unit,post,processors
DefaultPersistenceUnitManager -> public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors();1368482696;Return the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager.;public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors() {_		return this.persistenceUnitPostProcessors__	};return,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager;public,persistence,unit,post,processor,get,persistence,unit,post,processors,return,this,persistence,unit,post,processors
DefaultPersistenceUnitManager -> public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors();1375434510;Return the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager.;public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors() {_		return this.persistenceUnitPostProcessors__	};return,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager;public,persistence,unit,post,processor,get,persistence,unit,post,processors,return,this,persistence,unit,post,processors
DefaultPersistenceUnitManager -> public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors();1375458214;Return the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager.;public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors() {_		return this.persistenceUnitPostProcessors__	};return,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager;public,persistence,unit,post,processor,get,persistence,unit,post,processors,return,this,persistence,unit,post,processors
DefaultPersistenceUnitManager -> public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors();1389648334;Return the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager.;public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors() {_		return this.persistenceUnitPostProcessors__	};return,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager;public,persistence,unit,post,processor,get,persistence,unit,post,processors,return,this,persistence,unit,post,processors
DefaultPersistenceUnitManager -> public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors();1390250900;Return the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager.;public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors() {_		return this.persistenceUnitPostProcessors__	};return,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager;public,persistence,unit,post,processor,get,persistence,unit,post,processors,return,this,persistence,unit,post,processors
DefaultPersistenceUnitManager -> public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors();1390313076;Return the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager.;public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors() {_		return this.persistenceUnitPostProcessors__	};return,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager;public,persistence,unit,post,processor,get,persistence,unit,post,processors,return,this,persistence,unit,post,processors
DefaultPersistenceUnitManager -> public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors();1400140571;Return the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager.;public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors() {_		return this.persistenceUnitPostProcessors__	};return,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager;public,persistence,unit,post,processor,get,persistence,unit,post,processors,return,this,persistence,unit,post,processors
DefaultPersistenceUnitManager -> public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors();1403774750;Return the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager.;public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors() {_		return this.persistenceUnitPostProcessors__	};return,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager;public,persistence,unit,post,processor,get,persistence,unit,post,processors,return,this,persistence,unit,post,processors
DefaultPersistenceUnitManager -> public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors();1404056186;Return the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager.;public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors() {_		return this.persistenceUnitPostProcessors__	};return,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager;public,persistence,unit,post,processor,get,persistence,unit,post,processors,return,this,persistence,unit,post,processors
DefaultPersistenceUnitManager -> public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors();1447323728;Return the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager.;public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors() {_		return this.persistenceUnitPostProcessors__	};return,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager;public,persistence,unit,post,processor,get,persistence,unit,post,processors,return,this,persistence,unit,post,processors
DefaultPersistenceUnitManager -> public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors();1464299869;Return the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager.;public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors() {_		return this.persistenceUnitPostProcessors__	};return,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager;public,persistence,unit,post,processor,get,persistence,unit,post,processors,return,this,persistence,unit,post,processors
DefaultPersistenceUnitManager -> public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors();1467668243;Return the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager.;public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors() {_		return this.persistenceUnitPostProcessors__	};return,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager;public,persistence,unit,post,processor,get,persistence,unit,post,processors,return,this,persistence,unit,post,processors
DefaultPersistenceUnitManager -> public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors();1467730834;Return the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager.;public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors() {_		return this.persistenceUnitPostProcessors__	};return,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager;public,persistence,unit,post,processor,get,persistence,unit,post,processors,return,this,persistence,unit,post,processors
DefaultPersistenceUnitManager -> public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors();1471464767;Return the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager.;public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors() {_		return this.persistenceUnitPostProcessors__	};return,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager;public,persistence,unit,post,processor,get,persistence,unit,post,processors,return,this,persistence,unit,post,processors
DefaultPersistenceUnitManager -> public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors();1472736647;Return the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager.;public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors() {_		return this.persistenceUnitPostProcessors__	};return,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager;public,persistence,unit,post,processor,get,persistence,unit,post,processors,return,this,persistence,unit,post,processors
DefaultPersistenceUnitManager -> public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors();1474895745;Return the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager.;public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors() {_		return this.persistenceUnitPostProcessors__	};return,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager;public,persistence,unit,post,processor,get,persistence,unit,post,processors,return,this,persistence,unit,post,processors
DefaultPersistenceUnitManager -> public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors();1495868221;Return the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager.;public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors() {_		return this.persistenceUnitPostProcessors__	};return,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager;public,persistence,unit,post,processor,get,persistence,unit,post,processors,return,this,persistence,unit,post,processors
DefaultPersistenceUnitManager -> public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors();1496259743;Return the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager.;public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors() {_		return this.persistenceUnitPostProcessors__	};return,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager;public,persistence,unit,post,processor,get,persistence,unit,post,processors,return,this,persistence,unit,post,processors
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName);1328020251;Specify the name of the default persistence unit, if any. Default is "default"._<p>Primarily applied to a scanned persistence unit without <code>persistence.xml</code>._Also applicable to selecting a default unit from several persistence units available._@see #setPackagesToScan_@see #obtainDefaultPersistenceUnitInfo;public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName) {_		this.defaultPersistenceUnitName = defaultPersistenceUnitName__	};specify,the,name,of,the,default,persistence,unit,if,any,default,is,default,p,primarily,applied,to,a,scanned,persistence,unit,without,code,persistence,xml,code,also,applicable,to,selecting,a,default,unit,from,several,persistence,units,available,see,set,packages,to,scan,see,obtain,default,persistence,unit,info;public,void,set,default,persistence,unit,name,string,default,persistence,unit,name,this,default,persistence,unit,name,default,persistence,unit,name
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName);1329142650;Specify the name of the default persistence unit, if any. Default is "default"._<p>Primarily applied to a scanned persistence unit without <code>persistence.xml</code>._Also applicable to selecting a default unit from several persistence units available._@see #setPackagesToScan_@see #obtainDefaultPersistenceUnitInfo;public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName) {_		this.defaultPersistenceUnitName = defaultPersistenceUnitName__	};specify,the,name,of,the,default,persistence,unit,if,any,default,is,default,p,primarily,applied,to,a,scanned,persistence,unit,without,code,persistence,xml,code,also,applicable,to,selecting,a,default,unit,from,several,persistence,units,available,see,set,packages,to,scan,see,obtain,default,persistence,unit,info;public,void,set,default,persistence,unit,name,string,default,persistence,unit,name,this,default,persistence,unit,name,default,persistence,unit,name
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName);1347282851;Specify the name of the default persistence unit, if any. Default is "default"._<p>Primarily applied to a scanned persistence unit without <code>persistence.xml</code>._Also applicable to selecting a default unit from several persistence units available._@see #setPackagesToScan_@see #obtainDefaultPersistenceUnitInfo;public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName) {_		this.defaultPersistenceUnitName = defaultPersistenceUnitName__	};specify,the,name,of,the,default,persistence,unit,if,any,default,is,default,p,primarily,applied,to,a,scanned,persistence,unit,without,code,persistence,xml,code,also,applicable,to,selecting,a,default,unit,from,several,persistence,units,available,see,set,packages,to,scan,see,obtain,default,persistence,unit,info;public,void,set,default,persistence,unit,name,string,default,persistence,unit,name,this,default,persistence,unit,name,default,persistence,unit,name
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName);1351648399;Specify the name of the default persistence unit, if any. Default is "default"._<p>Primarily applied to a scanned persistence unit without <code>persistence.xml</code>._Also applicable to selecting a default unit from several persistence units available._@see #setPackagesToScan_@see #obtainDefaultPersistenceUnitInfo;public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName) {_		this.defaultPersistenceUnitName = defaultPersistenceUnitName__	};specify,the,name,of,the,default,persistence,unit,if,any,default,is,default,p,primarily,applied,to,a,scanned,persistence,unit,without,code,persistence,xml,code,also,applicable,to,selecting,a,default,unit,from,several,persistence,units,available,see,set,packages,to,scan,see,obtain,default,persistence,unit,info;public,void,set,default,persistence,unit,name,string,default,persistence,unit,name,this,default,persistence,unit,name,default,persistence,unit,name
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName);1356735495;Specify the name of the default persistence unit, if any. Default is "default"._<p>Primarily applied to a scanned persistence unit without {@code persistence.xml}._Also applicable to selecting a default unit from several persistence units available._@see #setPackagesToScan_@see #obtainDefaultPersistenceUnitInfo;public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName) {_		this.defaultPersistenceUnitName = defaultPersistenceUnitName__	};specify,the,name,of,the,default,persistence,unit,if,any,default,is,default,p,primarily,applied,to,a,scanned,persistence,unit,without,code,persistence,xml,also,applicable,to,selecting,a,default,unit,from,several,persistence,units,available,see,set,packages,to,scan,see,obtain,default,persistence,unit,info;public,void,set,default,persistence,unit,name,string,default,persistence,unit,name,this,default,persistence,unit,name,default,persistence,unit,name
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName);1357119239;Specify the name of the default persistence unit, if any. Default is "default"._<p>Primarily applied to a scanned persistence unit without {@code persistence.xml}._Also applicable to selecting a default unit from several persistence units available._@see #setPackagesToScan_@see #obtainDefaultPersistenceUnitInfo;public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName) {_		this.defaultPersistenceUnitName = defaultPersistenceUnitName__	};specify,the,name,of,the,default,persistence,unit,if,any,default,is,default,p,primarily,applied,to,a,scanned,persistence,unit,without,code,persistence,xml,also,applicable,to,selecting,a,default,unit,from,several,persistence,units,available,see,set,packages,to,scan,see,obtain,default,persistence,unit,info;public,void,set,default,persistence,unit,name,string,default,persistence,unit,name,this,default,persistence,unit,name,default,persistence,unit,name
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName);1363714444;Specify the name of the default persistence unit, if any. Default is "default"._<p>Primarily applied to a scanned persistence unit without {@code persistence.xml}._Also applicable to selecting a default unit from several persistence units available._@see #setPackagesToScan_@see #obtainDefaultPersistenceUnitInfo;public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName) {_		this.defaultPersistenceUnitName = defaultPersistenceUnitName__	};specify,the,name,of,the,default,persistence,unit,if,any,default,is,default,p,primarily,applied,to,a,scanned,persistence,unit,without,code,persistence,xml,also,applicable,to,selecting,a,default,unit,from,several,persistence,units,available,see,set,packages,to,scan,see,obtain,default,persistence,unit,info;public,void,set,default,persistence,unit,name,string,default,persistence,unit,name,this,default,persistence,unit,name,default,persistence,unit,name
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName);1368482696;Specify the name of the default persistence unit, if any. Default is "default"._<p>Primarily applied to a scanned persistence unit without {@code persistence.xml}._Also applicable to selecting a default unit from several persistence units available._@see #setPackagesToScan_@see #obtainDefaultPersistenceUnitInfo;public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName) {_		this.defaultPersistenceUnitName = defaultPersistenceUnitName__	};specify,the,name,of,the,default,persistence,unit,if,any,default,is,default,p,primarily,applied,to,a,scanned,persistence,unit,without,code,persistence,xml,also,applicable,to,selecting,a,default,unit,from,several,persistence,units,available,see,set,packages,to,scan,see,obtain,default,persistence,unit,info;public,void,set,default,persistence,unit,name,string,default,persistence,unit,name,this,default,persistence,unit,name,default,persistence,unit,name
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName);1375434510;Specify the name of the default persistence unit, if any. Default is "default"._<p>Primarily applied to a scanned persistence unit without {@code persistence.xml}._Also applicable to selecting a default unit from several persistence units available._@see #setPackagesToScan_@see #obtainDefaultPersistenceUnitInfo;public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName) {_		this.defaultPersistenceUnitName = defaultPersistenceUnitName__	};specify,the,name,of,the,default,persistence,unit,if,any,default,is,default,p,primarily,applied,to,a,scanned,persistence,unit,without,code,persistence,xml,also,applicable,to,selecting,a,default,unit,from,several,persistence,units,available,see,set,packages,to,scan,see,obtain,default,persistence,unit,info;public,void,set,default,persistence,unit,name,string,default,persistence,unit,name,this,default,persistence,unit,name,default,persistence,unit,name
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName);1375458214;Specify the name of the default persistence unit, if any. Default is "default"._<p>Primarily applied to a scanned persistence unit without {@code persistence.xml}._Also applicable to selecting a default unit from several persistence units available._@see #setPackagesToScan_@see #obtainDefaultPersistenceUnitInfo;public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName) {_		this.defaultPersistenceUnitName = defaultPersistenceUnitName__	};specify,the,name,of,the,default,persistence,unit,if,any,default,is,default,p,primarily,applied,to,a,scanned,persistence,unit,without,code,persistence,xml,also,applicable,to,selecting,a,default,unit,from,several,persistence,units,available,see,set,packages,to,scan,see,obtain,default,persistence,unit,info;public,void,set,default,persistence,unit,name,string,default,persistence,unit,name,this,default,persistence,unit,name,default,persistence,unit,name
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName);1389648334;Specify the name of the default persistence unit, if any. Default is "default"._<p>Primarily applied to a scanned persistence unit without {@code persistence.xml}._Also applicable to selecting a default unit from several persistence units available._@see #setPackagesToScan_@see #obtainDefaultPersistenceUnitInfo;public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName) {_		this.defaultPersistenceUnitName = defaultPersistenceUnitName__	};specify,the,name,of,the,default,persistence,unit,if,any,default,is,default,p,primarily,applied,to,a,scanned,persistence,unit,without,code,persistence,xml,also,applicable,to,selecting,a,default,unit,from,several,persistence,units,available,see,set,packages,to,scan,see,obtain,default,persistence,unit,info;public,void,set,default,persistence,unit,name,string,default,persistence,unit,name,this,default,persistence,unit,name,default,persistence,unit,name
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName);1390250900;Specify the name of the default persistence unit, if any. Default is "default"._<p>Primarily applied to a scanned persistence unit without {@code persistence.xml}._Also applicable to selecting a default unit from several persistence units available._@see #setPackagesToScan_@see #obtainDefaultPersistenceUnitInfo;public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName) {_		this.defaultPersistenceUnitName = defaultPersistenceUnitName__	};specify,the,name,of,the,default,persistence,unit,if,any,default,is,default,p,primarily,applied,to,a,scanned,persistence,unit,without,code,persistence,xml,also,applicable,to,selecting,a,default,unit,from,several,persistence,units,available,see,set,packages,to,scan,see,obtain,default,persistence,unit,info;public,void,set,default,persistence,unit,name,string,default,persistence,unit,name,this,default,persistence,unit,name,default,persistence,unit,name
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName);1390313076;Specify the name of the default persistence unit, if any. Default is "default"._<p>Primarily applied to a scanned persistence unit without {@code persistence.xml}._Also applicable to selecting a default unit from several persistence units available._@see #setPackagesToScan_@see #obtainDefaultPersistenceUnitInfo;public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName) {_		this.defaultPersistenceUnitName = defaultPersistenceUnitName__	};specify,the,name,of,the,default,persistence,unit,if,any,default,is,default,p,primarily,applied,to,a,scanned,persistence,unit,without,code,persistence,xml,also,applicable,to,selecting,a,default,unit,from,several,persistence,units,available,see,set,packages,to,scan,see,obtain,default,persistence,unit,info;public,void,set,default,persistence,unit,name,string,default,persistence,unit,name,this,default,persistence,unit,name,default,persistence,unit,name
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName);1400140571;Specify the name of the default persistence unit, if any. Default is "default"._<p>Primarily applied to a scanned persistence unit without {@code persistence.xml}._Also applicable to selecting a default unit from several persistence units available._@see #setPackagesToScan_@see #obtainDefaultPersistenceUnitInfo;public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName) {_		this.defaultPersistenceUnitName = defaultPersistenceUnitName__	};specify,the,name,of,the,default,persistence,unit,if,any,default,is,default,p,primarily,applied,to,a,scanned,persistence,unit,without,code,persistence,xml,also,applicable,to,selecting,a,default,unit,from,several,persistence,units,available,see,set,packages,to,scan,see,obtain,default,persistence,unit,info;public,void,set,default,persistence,unit,name,string,default,persistence,unit,name,this,default,persistence,unit,name,default,persistence,unit,name
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName);1403774750;Specify the name of the default persistence unit, if any. Default is "default"._<p>Primarily applied to a scanned persistence unit without {@code persistence.xml}._Also applicable to selecting a default unit from several persistence units available._@see #setPackagesToScan_@see #obtainDefaultPersistenceUnitInfo;public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName) {_		this.defaultPersistenceUnitName = defaultPersistenceUnitName__	};specify,the,name,of,the,default,persistence,unit,if,any,default,is,default,p,primarily,applied,to,a,scanned,persistence,unit,without,code,persistence,xml,also,applicable,to,selecting,a,default,unit,from,several,persistence,units,available,see,set,packages,to,scan,see,obtain,default,persistence,unit,info;public,void,set,default,persistence,unit,name,string,default,persistence,unit,name,this,default,persistence,unit,name,default,persistence,unit,name
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName);1404056186;Specify the name of the default persistence unit, if any. Default is "default"._<p>Primarily applied to a scanned persistence unit without {@code persistence.xml}._Also applicable to selecting a default unit from several persistence units available._@see #setPackagesToScan_@see #obtainDefaultPersistenceUnitInfo;public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName) {_		this.defaultPersistenceUnitName = defaultPersistenceUnitName__	};specify,the,name,of,the,default,persistence,unit,if,any,default,is,default,p,primarily,applied,to,a,scanned,persistence,unit,without,code,persistence,xml,also,applicable,to,selecting,a,default,unit,from,several,persistence,units,available,see,set,packages,to,scan,see,obtain,default,persistence,unit,info;public,void,set,default,persistence,unit,name,string,default,persistence,unit,name,this,default,persistence,unit,name,default,persistence,unit,name
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName);1447323728;Specify the name of the default persistence unit, if any. Default is "default"._<p>Primarily applied to a scanned persistence unit without {@code persistence.xml}._Also applicable to selecting a default unit from several persistence units available._@see #setPackagesToScan_@see #obtainDefaultPersistenceUnitInfo;public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName) {_		this.defaultPersistenceUnitName = defaultPersistenceUnitName__	};specify,the,name,of,the,default,persistence,unit,if,any,default,is,default,p,primarily,applied,to,a,scanned,persistence,unit,without,code,persistence,xml,also,applicable,to,selecting,a,default,unit,from,several,persistence,units,available,see,set,packages,to,scan,see,obtain,default,persistence,unit,info;public,void,set,default,persistence,unit,name,string,default,persistence,unit,name,this,default,persistence,unit,name,default,persistence,unit,name
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName);1464299869;Specify the name of the default persistence unit, if any. Default is "default"._<p>Primarily applied to a scanned persistence unit without {@code persistence.xml}._Also applicable to selecting a default unit from several persistence units available._@see #setPackagesToScan_@see #obtainDefaultPersistenceUnitInfo;public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName) {_		this.defaultPersistenceUnitName = defaultPersistenceUnitName__	};specify,the,name,of,the,default,persistence,unit,if,any,default,is,default,p,primarily,applied,to,a,scanned,persistence,unit,without,code,persistence,xml,also,applicable,to,selecting,a,default,unit,from,several,persistence,units,available,see,set,packages,to,scan,see,obtain,default,persistence,unit,info;public,void,set,default,persistence,unit,name,string,default,persistence,unit,name,this,default,persistence,unit,name,default,persistence,unit,name
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName);1467668243;Specify the name of the default persistence unit, if any. Default is "default"._<p>Primarily applied to a scanned persistence unit without {@code persistence.xml}._Also applicable to selecting a default unit from several persistence units available._@see #setPackagesToScan_@see #obtainDefaultPersistenceUnitInfo;public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName) {_		this.defaultPersistenceUnitName = defaultPersistenceUnitName__	};specify,the,name,of,the,default,persistence,unit,if,any,default,is,default,p,primarily,applied,to,a,scanned,persistence,unit,without,code,persistence,xml,also,applicable,to,selecting,a,default,unit,from,several,persistence,units,available,see,set,packages,to,scan,see,obtain,default,persistence,unit,info;public,void,set,default,persistence,unit,name,string,default,persistence,unit,name,this,default,persistence,unit,name,default,persistence,unit,name
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName);1467730834;Specify the name of the default persistence unit, if any. Default is "default"._<p>Primarily applied to a scanned persistence unit without {@code persistence.xml}._Also applicable to selecting a default unit from several persistence units available._@see #setPackagesToScan_@see #obtainDefaultPersistenceUnitInfo;public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName) {_		this.defaultPersistenceUnitName = defaultPersistenceUnitName__	};specify,the,name,of,the,default,persistence,unit,if,any,default,is,default,p,primarily,applied,to,a,scanned,persistence,unit,without,code,persistence,xml,also,applicable,to,selecting,a,default,unit,from,several,persistence,units,available,see,set,packages,to,scan,see,obtain,default,persistence,unit,info;public,void,set,default,persistence,unit,name,string,default,persistence,unit,name,this,default,persistence,unit,name,default,persistence,unit,name
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName);1471464767;Specify the name of the default persistence unit, if any. Default is "default"._<p>Primarily applied to a scanned persistence unit without {@code persistence.xml}._Also applicable to selecting a default unit from several persistence units available._@see #setPackagesToScan_@see #obtainDefaultPersistenceUnitInfo;public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName) {_		this.defaultPersistenceUnitName = defaultPersistenceUnitName__	};specify,the,name,of,the,default,persistence,unit,if,any,default,is,default,p,primarily,applied,to,a,scanned,persistence,unit,without,code,persistence,xml,also,applicable,to,selecting,a,default,unit,from,several,persistence,units,available,see,set,packages,to,scan,see,obtain,default,persistence,unit,info;public,void,set,default,persistence,unit,name,string,default,persistence,unit,name,this,default,persistence,unit,name,default,persistence,unit,name
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName);1472736647;Specify the name of the default persistence unit, if any. Default is "default"._<p>Primarily applied to a scanned persistence unit without {@code persistence.xml}._Also applicable to selecting a default unit from several persistence units available._@see #setPackagesToScan_@see #obtainDefaultPersistenceUnitInfo;public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName) {_		this.defaultPersistenceUnitName = defaultPersistenceUnitName__	};specify,the,name,of,the,default,persistence,unit,if,any,default,is,default,p,primarily,applied,to,a,scanned,persistence,unit,without,code,persistence,xml,also,applicable,to,selecting,a,default,unit,from,several,persistence,units,available,see,set,packages,to,scan,see,obtain,default,persistence,unit,info;public,void,set,default,persistence,unit,name,string,default,persistence,unit,name,this,default,persistence,unit,name,default,persistence,unit,name
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName);1474895745;Specify the name of the default persistence unit, if any. Default is "default"._<p>Primarily applied to a scanned persistence unit without {@code persistence.xml}._Also applicable to selecting a default unit from several persistence units available._@see #setPackagesToScan_@see #obtainDefaultPersistenceUnitInfo;public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName) {_		this.defaultPersistenceUnitName = defaultPersistenceUnitName__	};specify,the,name,of,the,default,persistence,unit,if,any,default,is,default,p,primarily,applied,to,a,scanned,persistence,unit,without,code,persistence,xml,also,applicable,to,selecting,a,default,unit,from,several,persistence,units,available,see,set,packages,to,scan,see,obtain,default,persistence,unit,info;public,void,set,default,persistence,unit,name,string,default,persistence,unit,name,this,default,persistence,unit,name,default,persistence,unit,name
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName);1495868221;Specify the name of the default persistence unit, if any. Default is "default"._<p>Primarily applied to a scanned persistence unit without {@code persistence.xml}._Also applicable to selecting a default unit from several persistence units available._@see #setPackagesToScan_@see #obtainDefaultPersistenceUnitInfo;public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName) {_		this.defaultPersistenceUnitName = defaultPersistenceUnitName__	};specify,the,name,of,the,default,persistence,unit,if,any,default,is,default,p,primarily,applied,to,a,scanned,persistence,unit,without,code,persistence,xml,also,applicable,to,selecting,a,default,unit,from,several,persistence,units,available,see,set,packages,to,scan,see,obtain,default,persistence,unit,info;public,void,set,default,persistence,unit,name,string,default,persistence,unit,name,this,default,persistence,unit,name,default,persistence,unit,name
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName);1496259743;Specify the name of the default persistence unit, if any. Default is "default"._<p>Primarily applied to a scanned persistence unit without {@code persistence.xml}._Also applicable to selecting a default unit from several persistence units available._@see #setPackagesToScan_@see #obtainDefaultPersistenceUnitInfo;public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName) {_		this.defaultPersistenceUnitName = defaultPersistenceUnitName__	};specify,the,name,of,the,default,persistence,unit,if,any,default,is,default,p,primarily,applied,to,a,scanned,persistence,unit,without,code,persistence,xml,also,applicable,to,selecting,a,default,unit,from,several,persistence,units,available,see,set,packages,to,scan,see,obtain,default,persistence,unit,info;public,void,set,default,persistence,unit,name,string,default,persistence,unit,name,this,default,persistence,unit,name,default,persistence,unit,name
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName);1496837955;Specify the name of the default persistence unit, if any. Default is "default"._<p>Primarily applied to a scanned persistence unit without {@code persistence.xml}._Also applicable to selecting a default unit from several persistence units available._@see #setPackagesToScan_@see #obtainDefaultPersistenceUnitInfo;public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName) {_		this.defaultPersistenceUnitName = defaultPersistenceUnitName__	};specify,the,name,of,the,default,persistence,unit,if,any,default,is,default,p,primarily,applied,to,a,scanned,persistence,unit,without,code,persistence,xml,also,applicable,to,selecting,a,default,unit,from,several,persistence,units,available,see,set,packages,to,scan,see,obtain,default,persistence,unit,info;public,void,set,default,persistence,unit,name,string,default,persistence,unit,name,this,default,persistence,unit,name,default,persistence,unit,name
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName);1498780456;Specify the name of the default persistence unit, if any. Default is "default"._<p>Primarily applied to a scanned persistence unit without {@code persistence.xml}._Also applicable to selecting a default unit from several persistence units available._@see #setPackagesToScan_@see #obtainDefaultPersistenceUnitInfo;public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName) {_		this.defaultPersistenceUnitName = defaultPersistenceUnitName__	};specify,the,name,of,the,default,persistence,unit,if,any,default,is,default,p,primarily,applied,to,a,scanned,persistence,unit,without,code,persistence,xml,also,applicable,to,selecting,a,default,unit,from,several,persistence,units,available,see,set,packages,to,scan,see,obtain,default,persistence,unit,info;public,void,set,default,persistence,unit,name,string,default,persistence,unit,name,this,default,persistence,unit,name,default,persistence,unit,name
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName);1500448076;Specify the name of the default persistence unit, if any. Default is "default"._<p>Primarily applied to a scanned persistence unit without {@code persistence.xml}._Also applicable to selecting a default unit from several persistence units available._@see #setPackagesToScan_@see #obtainDefaultPersistenceUnitInfo;public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName) {_		this.defaultPersistenceUnitName = defaultPersistenceUnitName__	};specify,the,name,of,the,default,persistence,unit,if,any,default,is,default,p,primarily,applied,to,a,scanned,persistence,unit,without,code,persistence,xml,also,applicable,to,selecting,a,default,unit,from,several,persistence,units,available,see,set,packages,to,scan,see,obtain,default,persistence,unit,info;public,void,set,default,persistence,unit,name,string,default,persistence,unit,name,this,default,persistence,unit,name,default,persistence,unit,name
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName);1520528267;Specify the name of the default persistence unit, if any. Default is "default"._<p>Primarily applied to a scanned persistence unit without {@code persistence.xml}._Also applicable to selecting a default unit from several persistence units available._@see #setPackagesToScan_@see #obtainDefaultPersistenceUnitInfo;public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName) {_		this.defaultPersistenceUnitName = defaultPersistenceUnitName__	};specify,the,name,of,the,default,persistence,unit,if,any,default,is,default,p,primarily,applied,to,a,scanned,persistence,unit,without,code,persistence,xml,also,applicable,to,selecting,a,default,unit,from,several,persistence,units,available,see,set,packages,to,scan,see,obtain,default,persistence,unit,info;public,void,set,default,persistence,unit,name,string,default,persistence,unit,name,this,default,persistence,unit,name,default,persistence,unit,name
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName);1528313484;Specify the name of the default persistence unit, if any. Default is "default"._<p>Primarily applied to a scanned persistence unit without {@code persistence.xml}._Also applicable to selecting a default unit from several persistence units available._@see #setPackagesToScan_@see #obtainDefaultPersistenceUnitInfo;public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName) {_		this.defaultPersistenceUnitName = defaultPersistenceUnitName__	};specify,the,name,of,the,default,persistence,unit,if,any,default,is,default,p,primarily,applied,to,a,scanned,persistence,unit,without,code,persistence,xml,also,applicable,to,selecting,a,default,unit,from,several,persistence,units,available,see,set,packages,to,scan,see,obtain,default,persistence,unit,info;public,void,set,default,persistence,unit,name,string,default,persistence,unit,name,this,default,persistence,unit,name,default,persistence,unit,name
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName);1530174524;Specify the name of the default persistence unit, if any. Default is "default"._<p>Primarily applied to a scanned persistence unit without {@code persistence.xml}._Also applicable to selecting a default unit from several persistence units available._@see #setPackagesToScan_@see #obtainDefaultPersistenceUnitInfo;public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName) {_		this.defaultPersistenceUnitName = defaultPersistenceUnitName__	};specify,the,name,of,the,default,persistence,unit,if,any,default,is,default,p,primarily,applied,to,a,scanned,persistence,unit,without,code,persistence,xml,also,applicable,to,selecting,a,default,unit,from,several,persistence,units,available,see,set,packages,to,scan,see,obtain,default,persistence,unit,info;public,void,set,default,persistence,unit,name,string,default,persistence,unit,name,this,default,persistence,unit,name,default,persistence,unit,name
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName);1532091916;Specify the name of the default persistence unit, if any. Default is "default"._<p>Primarily applied to a scanned persistence unit without {@code persistence.xml}._Also applicable to selecting a default unit from several persistence units available._@see #setPackagesToScan_@see #obtainDefaultPersistenceUnitInfo;public void setDefaultPersistenceUnitName(String defaultPersistenceUnitName) {_		this.defaultPersistenceUnitName = defaultPersistenceUnitName__	};specify,the,name,of,the,default,persistence,unit,if,any,default,is,default,p,primarily,applied,to,a,scanned,persistence,unit,without,code,persistence,xml,also,applicable,to,selecting,a,default,unit,from,several,persistence,units,available,see,set,packages,to,scan,see,obtain,default,persistence,unit,info;public,void,set,default,persistence,unit,name,string,default,persistence,unit,name,this,default,persistence,unit,name,default,persistence,unit,name
DefaultPersistenceUnitManager -> public void setDefaultDataSource(@Nullable DataSource defaultDataSource);1500448076;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates no special transaction setup, i.e. typical resource-local._<p>In JPA speak, a DataSource passed in here will be uses as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource();public void setDefaultDataSource(@Nullable DataSource defaultDataSource) {_		this.defaultDataSource = defaultDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,no,special,transaction,setup,i,e,typical,resource,local,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source;public,void,set,default,data,source,nullable,data,source,default,data,source,this,default,data,source,default,data,source
DefaultPersistenceUnitManager -> public void setDefaultDataSource(@Nullable DataSource defaultDataSource);1520528267;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates no special transaction setup, i.e. typical resource-local._<p>In JPA speak, a DataSource passed in here will be uses as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource();public void setDefaultDataSource(@Nullable DataSource defaultDataSource) {_		this.defaultDataSource = defaultDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,no,special,transaction,setup,i,e,typical,resource,local,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source;public,void,set,default,data,source,nullable,data,source,default,data,source,this,default,data,source,default,data,source
DefaultPersistenceUnitManager -> public void setDefaultDataSource(@Nullable DataSource defaultDataSource);1528313484;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates no special transaction setup, i.e. typical resource-local._<p>In JPA speak, a DataSource passed in here will be uses as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource();public void setDefaultDataSource(@Nullable DataSource defaultDataSource) {_		this.defaultDataSource = defaultDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,no,special,transaction,setup,i,e,typical,resource,local,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source;public,void,set,default,data,source,nullable,data,source,default,data,source,this,default,data,source,default,data,source
DefaultPersistenceUnitManager -> public void setDefaultDataSource(@Nullable DataSource defaultDataSource);1530174524;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates no special transaction setup, i.e. typical resource-local._<p>In JPA speak, a DataSource passed in here will be uses as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource();public void setDefaultDataSource(@Nullable DataSource defaultDataSource) {_		this.defaultDataSource = defaultDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,no,special,transaction,setup,i,e,typical,resource,local,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source;public,void,set,default,data,source,nullable,data,source,default,data,source,this,default,data,source,default,data,source
DefaultPersistenceUnitManager -> public void setDefaultDataSource(@Nullable DataSource defaultDataSource);1532091916;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates no special transaction setup, i.e. typical resource-local._<p>In JPA speak, a DataSource passed in here will be uses as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource();public void setDefaultDataSource(@Nullable DataSource defaultDataSource) {_		this.defaultDataSource = defaultDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,no,special,transaction,setup,i,e,typical,resource,local,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source;public,void,set,default,data,source,nullable,data,source,default,data,source,this,default,data,source,default,data,source
DefaultPersistenceUnitManager -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1356735495;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is not required to specify a LoadTimeWeaver: Most providers will be_able to provide a subset of their functionality without class instrumentation_as well, or operate with their VM agent specified on JVM startup._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._<p><b>NOTE:</b> As of Spring 2.5, the context's default LoadTimeWeaver (defined_as bean with name "loadTimeWeaver") will be picked up automatically, if available,_removing the need for LoadTimeWeaver configuration on each affected target bean.</b>_Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver_@see org.springframework.instrument.classloading.tomcat.TomcatInstrumentableClassLoader;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.loadTimeWeaver = loadTimeWeaver__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,vm,agent,specified,on,jvm,startup,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,p,b,note,b,as,of,spring,2,5,the,context,s,default,load,time,weaver,defined,as,bean,with,name,load,time,weaver,will,be,picked,up,automatically,if,available,removing,the,need,for,load,time,weaver,configuration,on,each,affected,target,bean,b,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver,see,org,springframework,instrument,classloading,tomcat,tomcat,instrumentable,class,loader;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,load,time,weaver,load,time,weaver
DefaultPersistenceUnitManager -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1368482696;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is not required to specify a LoadTimeWeaver: Most providers will be_able to provide a subset of their functionality without class instrumentation_as well, or operate with their VM agent specified on JVM startup._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._<p><b>NOTE:</b> As of Spring 2.5, the context's default LoadTimeWeaver (defined_as bean with name "loadTimeWeaver") will be picked up automatically, if available,_removing the need for LoadTimeWeaver configuration on each affected target bean.</b>_Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver_@see org.springframework.instrument.classloading.tomcat.TomcatInstrumentableClassLoader;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.loadTimeWeaver = loadTimeWeaver__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,vm,agent,specified,on,jvm,startup,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,p,b,note,b,as,of,spring,2,5,the,context,s,default,load,time,weaver,defined,as,bean,with,name,load,time,weaver,will,be,picked,up,automatically,if,available,removing,the,need,for,load,time,weaver,configuration,on,each,affected,target,bean,b,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver,see,org,springframework,instrument,classloading,tomcat,tomcat,instrumentable,class,loader;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,load,time,weaver,load,time,weaver
DefaultPersistenceUnitManager -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1375434510;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is not required to specify a LoadTimeWeaver: Most providers will be_able to provide a subset of their functionality without class instrumentation_as well, or operate with their VM agent specified on JVM startup._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._<p><b>NOTE:</b> As of Spring 2.5, the context's default LoadTimeWeaver (defined_as bean with name "loadTimeWeaver") will be picked up automatically, if available,_removing the need for LoadTimeWeaver configuration on each affected target bean.</b>_Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver_@see org.springframework.instrument.classloading.tomcat.TomcatInstrumentableClassLoader;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.loadTimeWeaver = loadTimeWeaver__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,vm,agent,specified,on,jvm,startup,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,p,b,note,b,as,of,spring,2,5,the,context,s,default,load,time,weaver,defined,as,bean,with,name,load,time,weaver,will,be,picked,up,automatically,if,available,removing,the,need,for,load,time,weaver,configuration,on,each,affected,target,bean,b,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver,see,org,springframework,instrument,classloading,tomcat,tomcat,instrumentable,class,loader;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,load,time,weaver,load,time,weaver
DefaultPersistenceUnitManager -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1375458214;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is not required to specify a LoadTimeWeaver: Most providers will be_able to provide a subset of their functionality without class instrumentation_as well, or operate with their VM agent specified on JVM startup._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver_@see org.springframework.instrument.classloading.tomcat.TomcatInstrumentableClassLoader;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.loadTimeWeaver = loadTimeWeaver__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,vm,agent,specified,on,jvm,startup,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver,see,org,springframework,instrument,classloading,tomcat,tomcat,instrumentable,class,loader;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,load,time,weaver,load,time,weaver
DefaultPersistenceUnitManager -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1389648334;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is not required to specify a LoadTimeWeaver: Most providers will be able_to provide a subset of their functionality without class instrumentation as well,_or operate with their own VM agent specified on JVM startup. Furthermore,_DefaultPersistenceUnitManager falls back to an InstrumentationLoadTimeWeaver_if Spring's agent-based instrumentation is available at runtime._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.loadTimeWeaver = loadTimeWeaver__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,own,vm,agent,specified,on,jvm,startup,furthermore,default,persistence,unit,manager,falls,back,to,an,instrumentation,load,time,weaver,if,spring,s,agent,based,instrumentation,is,available,at,runtime,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,load,time,weaver,load,time,weaver
DefaultPersistenceUnitManager -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1390250900;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is not required to specify a LoadTimeWeaver: Most providers will be able_to provide a subset of their functionality without class instrumentation as well,_or operate with their own VM agent specified on JVM startup. Furthermore,_DefaultPersistenceUnitManager falls back to an InstrumentationLoadTimeWeaver_if Spring's agent-based instrumentation is available at runtime._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.loadTimeWeaver = loadTimeWeaver__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,own,vm,agent,specified,on,jvm,startup,furthermore,default,persistence,unit,manager,falls,back,to,an,instrumentation,load,time,weaver,if,spring,s,agent,based,instrumentation,is,available,at,runtime,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,load,time,weaver,load,time,weaver
DefaultPersistenceUnitManager -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1390313076;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is not required to specify a LoadTimeWeaver: Most providers will be able_to provide a subset of their functionality without class instrumentation as well,_or operate with their own VM agent specified on JVM startup. Furthermore,_DefaultPersistenceUnitManager falls back to an InstrumentationLoadTimeWeaver_if Spring's agent-based instrumentation is available at runtime._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.loadTimeWeaver = loadTimeWeaver__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,own,vm,agent,specified,on,jvm,startup,furthermore,default,persistence,unit,manager,falls,back,to,an,instrumentation,load,time,weaver,if,spring,s,agent,based,instrumentation,is,available,at,runtime,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,load,time,weaver,load,time,weaver
DefaultPersistenceUnitManager -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1400140571;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is not required to specify a LoadTimeWeaver: Most providers will be able_to provide a subset of their functionality without class instrumentation as well,_or operate with their own VM agent specified on JVM startup. Furthermore,_DefaultPersistenceUnitManager falls back to an InstrumentationLoadTimeWeaver_if Spring's agent-based instrumentation is available at runtime._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.loadTimeWeaver = loadTimeWeaver__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,own,vm,agent,specified,on,jvm,startup,furthermore,default,persistence,unit,manager,falls,back,to,an,instrumentation,load,time,weaver,if,spring,s,agent,based,instrumentation,is,available,at,runtime,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,load,time,weaver,load,time,weaver
DefaultPersistenceUnitManager -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1403774750;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is not required to specify a LoadTimeWeaver: Most providers will be able_to provide a subset of their functionality without class instrumentation as well,_or operate with their own VM agent specified on JVM startup. Furthermore,_DefaultPersistenceUnitManager falls back to an InstrumentationLoadTimeWeaver_if Spring's agent-based instrumentation is available at runtime._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.loadTimeWeaver = loadTimeWeaver__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,own,vm,agent,specified,on,jvm,startup,furthermore,default,persistence,unit,manager,falls,back,to,an,instrumentation,load,time,weaver,if,spring,s,agent,based,instrumentation,is,available,at,runtime,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,load,time,weaver,load,time,weaver
DefaultPersistenceUnitManager -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1404056186;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is not required to specify a LoadTimeWeaver: Most providers will be able_to provide a subset of their functionality without class instrumentation as well,_or operate with their own VM agent specified on JVM startup. Furthermore,_DefaultPersistenceUnitManager falls back to an InstrumentationLoadTimeWeaver_if Spring's agent-based instrumentation is available at runtime._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.loadTimeWeaver = loadTimeWeaver__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,own,vm,agent,specified,on,jvm,startup,furthermore,default,persistence,unit,manager,falls,back,to,an,instrumentation,load,time,weaver,if,spring,s,agent,based,instrumentation,is,available,at,runtime,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,load,time,weaver,load,time,weaver
DefaultPersistenceUnitManager -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1447323728;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is not required to specify a LoadTimeWeaver: Most providers will be able_to provide a subset of their functionality without class instrumentation as well,_or operate with their own VM agent specified on JVM startup. Furthermore,_DefaultPersistenceUnitManager falls back to an InstrumentationLoadTimeWeaver_if Spring's agent-based instrumentation is available at runtime._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.loadTimeWeaver = loadTimeWeaver__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,own,vm,agent,specified,on,jvm,startup,furthermore,default,persistence,unit,manager,falls,back,to,an,instrumentation,load,time,weaver,if,spring,s,agent,based,instrumentation,is,available,at,runtime,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,load,time,weaver,load,time,weaver
DefaultPersistenceUnitManager -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1464299869;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is not required to specify a LoadTimeWeaver: Most providers will be able_to provide a subset of their functionality without class instrumentation as well,_or operate with their own VM agent specified on JVM startup. Furthermore,_DefaultPersistenceUnitManager falls back to an InstrumentationLoadTimeWeaver_if Spring's agent-based instrumentation is available at runtime._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.loadTimeWeaver = loadTimeWeaver__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,own,vm,agent,specified,on,jvm,startup,furthermore,default,persistence,unit,manager,falls,back,to,an,instrumentation,load,time,weaver,if,spring,s,agent,based,instrumentation,is,available,at,runtime,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,load,time,weaver,load,time,weaver
DefaultPersistenceUnitManager -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1467668243;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is not required to specify a LoadTimeWeaver: Most providers will be able_to provide a subset of their functionality without class instrumentation as well,_or operate with their own VM agent specified on JVM startup. Furthermore,_DefaultPersistenceUnitManager falls back to an InstrumentationLoadTimeWeaver_if Spring's agent-based instrumentation is available at runtime._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.loadTimeWeaver = loadTimeWeaver__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,own,vm,agent,specified,on,jvm,startup,furthermore,default,persistence,unit,manager,falls,back,to,an,instrumentation,load,time,weaver,if,spring,s,agent,based,instrumentation,is,available,at,runtime,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,load,time,weaver,load,time,weaver
DefaultPersistenceUnitManager -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1467730834;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is not required to specify a LoadTimeWeaver: Most providers will be able_to provide a subset of their functionality without class instrumentation as well,_or operate with their own VM agent specified on JVM startup. Furthermore,_DefaultPersistenceUnitManager falls back to an InstrumentationLoadTimeWeaver_if Spring's agent-based instrumentation is available at runtime._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.loadTimeWeaver = loadTimeWeaver__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,own,vm,agent,specified,on,jvm,startup,furthermore,default,persistence,unit,manager,falls,back,to,an,instrumentation,load,time,weaver,if,spring,s,agent,based,instrumentation,is,available,at,runtime,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,load,time,weaver,load,time,weaver
DefaultPersistenceUnitManager -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1471464767;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is not required to specify a LoadTimeWeaver: Most providers will be able_to provide a subset of their functionality without class instrumentation as well,_or operate with their own VM agent specified on JVM startup. Furthermore,_DefaultPersistenceUnitManager falls back to an InstrumentationLoadTimeWeaver_if Spring's agent-based instrumentation is available at runtime._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.loadTimeWeaver = loadTimeWeaver__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,own,vm,agent,specified,on,jvm,startup,furthermore,default,persistence,unit,manager,falls,back,to,an,instrumentation,load,time,weaver,if,spring,s,agent,based,instrumentation,is,available,at,runtime,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,load,time,weaver,load,time,weaver
DefaultPersistenceUnitManager -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1472736647;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is not required to specify a LoadTimeWeaver: Most providers will be able_to provide a subset of their functionality without class instrumentation as well,_or operate with their own VM agent specified on JVM startup. Furthermore,_DefaultPersistenceUnitManager falls back to an InstrumentationLoadTimeWeaver_if Spring's agent-based instrumentation is available at runtime._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.loadTimeWeaver = loadTimeWeaver__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,own,vm,agent,specified,on,jvm,startup,furthermore,default,persistence,unit,manager,falls,back,to,an,instrumentation,load,time,weaver,if,spring,s,agent,based,instrumentation,is,available,at,runtime,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,load,time,weaver,load,time,weaver
DefaultPersistenceUnitManager -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1474895745;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is not required to specify a LoadTimeWeaver: Most providers will be able_to provide a subset of their functionality without class instrumentation as well,_or operate with their own VM agent specified on JVM startup. Furthermore,_DefaultPersistenceUnitManager falls back to an InstrumentationLoadTimeWeaver_if Spring's agent-based instrumentation is available at runtime._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.loadTimeWeaver = loadTimeWeaver__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,own,vm,agent,specified,on,jvm,startup,furthermore,default,persistence,unit,manager,falls,back,to,an,instrumentation,load,time,weaver,if,spring,s,agent,based,instrumentation,is,available,at,runtime,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,load,time,weaver,load,time,weaver
DefaultPersistenceUnitManager -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1495868221;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is not required to specify a LoadTimeWeaver: Most providers will be able_to provide a subset of their functionality without class instrumentation as well,_or operate with their own VM agent specified on JVM startup. Furthermore,_DefaultPersistenceUnitManager falls back to an InstrumentationLoadTimeWeaver_if Spring's agent-based instrumentation is available at runtime._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.loadTimeWeaver = loadTimeWeaver__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,own,vm,agent,specified,on,jvm,startup,furthermore,default,persistence,unit,manager,falls,back,to,an,instrumentation,load,time,weaver,if,spring,s,agent,based,instrumentation,is,available,at,runtime,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,load,time,weaver,load,time,weaver
DefaultPersistenceUnitManager -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1496259743;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is not required to specify a LoadTimeWeaver: Most providers will be able_to provide a subset of their functionality without class instrumentation as well,_or operate with their own VM agent specified on JVM startup. Furthermore,_DefaultPersistenceUnitManager falls back to an InstrumentationLoadTimeWeaver_if Spring's agent-based instrumentation is available at runtime._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.loadTimeWeaver = loadTimeWeaver__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,own,vm,agent,specified,on,jvm,startup,furthermore,default,persistence,unit,manager,falls,back,to,an,instrumentation,load,time,weaver,if,spring,s,agent,based,instrumentation,is,available,at,runtime,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,load,time,weaver,load,time,weaver
DefaultPersistenceUnitManager -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1496837955;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is not required to specify a LoadTimeWeaver: Most providers will be able_to provide a subset of their functionality without class instrumentation as well,_or operate with their own VM agent specified on JVM startup. Furthermore,_DefaultPersistenceUnitManager falls back to an InstrumentationLoadTimeWeaver_if Spring's agent-based instrumentation is available at runtime._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.loadTimeWeaver = loadTimeWeaver__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,own,vm,agent,specified,on,jvm,startup,furthermore,default,persistence,unit,manager,falls,back,to,an,instrumentation,load,time,weaver,if,spring,s,agent,based,instrumentation,is,available,at,runtime,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,load,time,weaver,load,time,weaver
DefaultPersistenceUnitManager -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1498780456;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is not required to specify a LoadTimeWeaver: Most providers will be able_to provide a subset of their functionality without class instrumentation as well,_or operate with their own VM agent specified on JVM startup. Furthermore,_DefaultPersistenceUnitManager falls back to an InstrumentationLoadTimeWeaver_if Spring's agent-based instrumentation is available at runtime._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.loadTimeWeaver = loadTimeWeaver__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,own,vm,agent,specified,on,jvm,startup,furthermore,default,persistence,unit,manager,falls,back,to,an,instrumentation,load,time,weaver,if,spring,s,agent,based,instrumentation,is,available,at,runtime,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,load,time,weaver,load,time,weaver
DefaultPersistenceUnitManager -> @Nullable 	protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName);1495868221;Return the specified PersistenceUnitInfo from this manager's cache_of processed persistence units, keeping it in the cache (i.e. not_'obtaining' it for use but rather just accessing it for post-processing)._<p>This can be used in {@link #postProcessPersistenceUnitInfo} implementations,_detecting existing persistence units of the same name and potentially merging them._@param persistenceUnitName the name of the desired persistence unit_@return the PersistenceUnitInfo in mutable form, or {@code null} if not available;@Nullable_	protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName) {_		PersistenceUnitInfo pui = this.persistenceUnitInfos.get(persistenceUnitName)__		return (MutablePersistenceUnitInfo) pui__	};return,the,specified,persistence,unit,info,from,this,manager,s,cache,of,processed,persistence,units,keeping,it,in,the,cache,i,e,not,obtaining,it,for,use,but,rather,just,accessing,it,for,post,processing,p,this,can,be,used,in,link,post,process,persistence,unit,info,implementations,detecting,existing,persistence,units,of,the,same,name,and,potentially,merging,them,param,persistence,unit,name,the,name,of,the,desired,persistence,unit,return,the,persistence,unit,info,in,mutable,form,or,code,null,if,not,available;nullable,protected,final,mutable,persistence,unit,info,get,persistence,unit,info,string,persistence,unit,name,persistence,unit,info,pui,this,persistence,unit,infos,get,persistence,unit,name,return,mutable,persistence,unit,info,pui
DefaultPersistenceUnitManager -> @Nullable 	protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName);1496259743;Return the specified PersistenceUnitInfo from this manager's cache_of processed persistence units, keeping it in the cache (i.e. not_'obtaining' it for use but rather just accessing it for post-processing)._<p>This can be used in {@link #postProcessPersistenceUnitInfo} implementations,_detecting existing persistence units of the same name and potentially merging them._@param persistenceUnitName the name of the desired persistence unit_@return the PersistenceUnitInfo in mutable form, or {@code null} if not available;@Nullable_	protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName) {_		PersistenceUnitInfo pui = this.persistenceUnitInfos.get(persistenceUnitName)__		return (MutablePersistenceUnitInfo) pui__	};return,the,specified,persistence,unit,info,from,this,manager,s,cache,of,processed,persistence,units,keeping,it,in,the,cache,i,e,not,obtaining,it,for,use,but,rather,just,accessing,it,for,post,processing,p,this,can,be,used,in,link,post,process,persistence,unit,info,implementations,detecting,existing,persistence,units,of,the,same,name,and,potentially,merging,them,param,persistence,unit,name,the,name,of,the,desired,persistence,unit,return,the,persistence,unit,info,in,mutable,form,or,code,null,if,not,available;nullable,protected,final,mutable,persistence,unit,info,get,persistence,unit,info,string,persistence,unit,name,persistence,unit,info,pui,this,persistence,unit,infos,get,persistence,unit,name,return,mutable,persistence,unit,info,pui
DefaultPersistenceUnitManager -> @Nullable 	protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName);1496837955;Return the specified PersistenceUnitInfo from this manager's cache_of processed persistence units, keeping it in the cache (i.e. not_'obtaining' it for use but rather just accessing it for post-processing)._<p>This can be used in {@link #postProcessPersistenceUnitInfo} implementations,_detecting existing persistence units of the same name and potentially merging them._@param persistenceUnitName the name of the desired persistence unit_@return the PersistenceUnitInfo in mutable form, or {@code null} if not available;@Nullable_	protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName) {_		PersistenceUnitInfo pui = this.persistenceUnitInfos.get(persistenceUnitName)__		return (MutablePersistenceUnitInfo) pui__	};return,the,specified,persistence,unit,info,from,this,manager,s,cache,of,processed,persistence,units,keeping,it,in,the,cache,i,e,not,obtaining,it,for,use,but,rather,just,accessing,it,for,post,processing,p,this,can,be,used,in,link,post,process,persistence,unit,info,implementations,detecting,existing,persistence,units,of,the,same,name,and,potentially,merging,them,param,persistence,unit,name,the,name,of,the,desired,persistence,unit,return,the,persistence,unit,info,in,mutable,form,or,code,null,if,not,available;nullable,protected,final,mutable,persistence,unit,info,get,persistence,unit,info,string,persistence,unit,name,persistence,unit,info,pui,this,persistence,unit,infos,get,persistence,unit,name,return,mutable,persistence,unit,info,pui
DefaultPersistenceUnitManager -> @Nullable 	protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName);1498780456;Return the specified PersistenceUnitInfo from this manager's cache_of processed persistence units, keeping it in the cache (i.e. not_'obtaining' it for use but rather just accessing it for post-processing)._<p>This can be used in {@link #postProcessPersistenceUnitInfo} implementations,_detecting existing persistence units of the same name and potentially merging them._@param persistenceUnitName the name of the desired persistence unit_@return the PersistenceUnitInfo in mutable form, or {@code null} if not available;@Nullable_	protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName) {_		PersistenceUnitInfo pui = this.persistenceUnitInfos.get(persistenceUnitName)__		return (MutablePersistenceUnitInfo) pui__	};return,the,specified,persistence,unit,info,from,this,manager,s,cache,of,processed,persistence,units,keeping,it,in,the,cache,i,e,not,obtaining,it,for,use,but,rather,just,accessing,it,for,post,processing,p,this,can,be,used,in,link,post,process,persistence,unit,info,implementations,detecting,existing,persistence,units,of,the,same,name,and,potentially,merging,them,param,persistence,unit,name,the,name,of,the,desired,persistence,unit,return,the,persistence,unit,info,in,mutable,form,or,code,null,if,not,available;nullable,protected,final,mutable,persistence,unit,info,get,persistence,unit,info,string,persistence,unit,name,persistence,unit,info,pui,this,persistence,unit,infos,get,persistence,unit,name,return,mutable,persistence,unit,info,pui
DefaultPersistenceUnitManager -> @Nullable 	protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName);1500448076;Return the specified PersistenceUnitInfo from this manager's cache_of processed persistence units, keeping it in the cache (i.e. not_'obtaining' it for use but rather just accessing it for post-processing)._<p>This can be used in {@link #postProcessPersistenceUnitInfo} implementations,_detecting existing persistence units of the same name and potentially merging them._@param persistenceUnitName the name of the desired persistence unit_@return the PersistenceUnitInfo in mutable form, or {@code null} if not available;@Nullable_	protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName) {_		PersistenceUnitInfo pui = this.persistenceUnitInfos.get(persistenceUnitName)__		return (MutablePersistenceUnitInfo) pui__	};return,the,specified,persistence,unit,info,from,this,manager,s,cache,of,processed,persistence,units,keeping,it,in,the,cache,i,e,not,obtaining,it,for,use,but,rather,just,accessing,it,for,post,processing,p,this,can,be,used,in,link,post,process,persistence,unit,info,implementations,detecting,existing,persistence,units,of,the,same,name,and,potentially,merging,them,param,persistence,unit,name,the,name,of,the,desired,persistence,unit,return,the,persistence,unit,info,in,mutable,form,or,code,null,if,not,available;nullable,protected,final,mutable,persistence,unit,info,get,persistence,unit,info,string,persistence,unit,name,persistence,unit,info,pui,this,persistence,unit,infos,get,persistence,unit,name,return,mutable,persistence,unit,info,pui
DefaultPersistenceUnitManager -> @Nullable 	protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName);1520528267;Return the specified PersistenceUnitInfo from this manager's cache_of processed persistence units, keeping it in the cache (i.e. not_'obtaining' it for use but rather just accessing it for post-processing)._<p>This can be used in {@link #postProcessPersistenceUnitInfo} implementations,_detecting existing persistence units of the same name and potentially merging them._@param persistenceUnitName the name of the desired persistence unit_@return the PersistenceUnitInfo in mutable form, or {@code null} if not available;@Nullable_	protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName) {_		PersistenceUnitInfo pui = this.persistenceUnitInfos.get(persistenceUnitName)__		return (MutablePersistenceUnitInfo) pui__	};return,the,specified,persistence,unit,info,from,this,manager,s,cache,of,processed,persistence,units,keeping,it,in,the,cache,i,e,not,obtaining,it,for,use,but,rather,just,accessing,it,for,post,processing,p,this,can,be,used,in,link,post,process,persistence,unit,info,implementations,detecting,existing,persistence,units,of,the,same,name,and,potentially,merging,them,param,persistence,unit,name,the,name,of,the,desired,persistence,unit,return,the,persistence,unit,info,in,mutable,form,or,code,null,if,not,available;nullable,protected,final,mutable,persistence,unit,info,get,persistence,unit,info,string,persistence,unit,name,persistence,unit,info,pui,this,persistence,unit,infos,get,persistence,unit,name,return,mutable,persistence,unit,info,pui
DefaultPersistenceUnitManager -> @Nullable 	protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName);1528313484;Return the specified PersistenceUnitInfo from this manager's cache_of processed persistence units, keeping it in the cache (i.e. not_'obtaining' it for use but rather just accessing it for post-processing)._<p>This can be used in {@link #postProcessPersistenceUnitInfo} implementations,_detecting existing persistence units of the same name and potentially merging them._@param persistenceUnitName the name of the desired persistence unit_@return the PersistenceUnitInfo in mutable form, or {@code null} if not available;@Nullable_	protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName) {_		PersistenceUnitInfo pui = this.persistenceUnitInfos.get(persistenceUnitName)__		return (MutablePersistenceUnitInfo) pui__	};return,the,specified,persistence,unit,info,from,this,manager,s,cache,of,processed,persistence,units,keeping,it,in,the,cache,i,e,not,obtaining,it,for,use,but,rather,just,accessing,it,for,post,processing,p,this,can,be,used,in,link,post,process,persistence,unit,info,implementations,detecting,existing,persistence,units,of,the,same,name,and,potentially,merging,them,param,persistence,unit,name,the,name,of,the,desired,persistence,unit,return,the,persistence,unit,info,in,mutable,form,or,code,null,if,not,available;nullable,protected,final,mutable,persistence,unit,info,get,persistence,unit,info,string,persistence,unit,name,persistence,unit,info,pui,this,persistence,unit,infos,get,persistence,unit,name,return,mutable,persistence,unit,info,pui
DefaultPersistenceUnitManager -> @Nullable 	protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName);1530174524;Return the specified PersistenceUnitInfo from this manager's cache_of processed persistence units, keeping it in the cache (i.e. not_'obtaining' it for use but rather just accessing it for post-processing)._<p>This can be used in {@link #postProcessPersistenceUnitInfo} implementations,_detecting existing persistence units of the same name and potentially merging them._@param persistenceUnitName the name of the desired persistence unit_@return the PersistenceUnitInfo in mutable form, or {@code null} if not available;@Nullable_	protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName) {_		PersistenceUnitInfo pui = this.persistenceUnitInfos.get(persistenceUnitName)__		return (MutablePersistenceUnitInfo) pui__	};return,the,specified,persistence,unit,info,from,this,manager,s,cache,of,processed,persistence,units,keeping,it,in,the,cache,i,e,not,obtaining,it,for,use,but,rather,just,accessing,it,for,post,processing,p,this,can,be,used,in,link,post,process,persistence,unit,info,implementations,detecting,existing,persistence,units,of,the,same,name,and,potentially,merging,them,param,persistence,unit,name,the,name,of,the,desired,persistence,unit,return,the,persistence,unit,info,in,mutable,form,or,code,null,if,not,available;nullable,protected,final,mutable,persistence,unit,info,get,persistence,unit,info,string,persistence,unit,name,persistence,unit,info,pui,this,persistence,unit,infos,get,persistence,unit,name,return,mutable,persistence,unit,info,pui
DefaultPersistenceUnitManager -> @Nullable 	protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName);1532091916;Return the specified PersistenceUnitInfo from this manager's cache_of processed persistence units, keeping it in the cache (i.e. not_'obtaining' it for use but rather just accessing it for post-processing)._<p>This can be used in {@link #postProcessPersistenceUnitInfo} implementations,_detecting existing persistence units of the same name and potentially merging them._@param persistenceUnitName the name of the desired persistence unit_@return the PersistenceUnitInfo in mutable form, or {@code null} if not available;@Nullable_	protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName) {_		PersistenceUnitInfo pui = this.persistenceUnitInfos.get(persistenceUnitName)__		return (MutablePersistenceUnitInfo) pui__	};return,the,specified,persistence,unit,info,from,this,manager,s,cache,of,processed,persistence,units,keeping,it,in,the,cache,i,e,not,obtaining,it,for,use,but,rather,just,accessing,it,for,post,processing,p,this,can,be,used,in,link,post,process,persistence,unit,info,implementations,detecting,existing,persistence,units,of,the,same,name,and,potentially,merging,them,param,persistence,unit,name,the,name,of,the,desired,persistence,unit,return,the,persistence,unit,info,in,mutable,form,or,code,null,if,not,available;nullable,protected,final,mutable,persistence,unit,info,get,persistence,unit,info,string,persistence,unit,name,persistence,unit,info,pui,this,persistence,unit,infos,get,persistence,unit,name,return,mutable,persistence,unit,info,pui
DefaultPersistenceUnitManager -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1328020251;Set the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager._<p>Such post-processors can, for example, register further entity_classes and jar files, in addition to the metadata read in from_<code>persistence.xml</code>.;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.persistenceUnitPostProcessors = postProcessors__	};set,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,in,from,code,persistence,xml,code;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,persistence,unit,post,processors,post,processors
DefaultPersistenceUnitManager -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1329142650;Set the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager._<p>Such post-processors can, for example, register further entity_classes and jar files, in addition to the metadata read in from_<code>persistence.xml</code>.;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.persistenceUnitPostProcessors = postProcessors__	};set,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,in,from,code,persistence,xml,code;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,persistence,unit,post,processors,post,processors
DefaultPersistenceUnitManager -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1347282851;Set the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager._<p>Such post-processors can, for example, register further entity_classes and jar files, in addition to the metadata read in from_<code>persistence.xml</code>.;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.persistenceUnitPostProcessors = postProcessors__	};set,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,in,from,code,persistence,xml,code;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,persistence,unit,post,processors,post,processors
DefaultPersistenceUnitManager -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1351648399;Set the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager._<p>Such post-processors can, for example, register further entity classes and_jar files, in addition to the metadata read from <code>persistence.xml</code>.;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.persistenceUnitPostProcessors = postProcessors__	};set,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml,code;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,persistence,unit,post,processors,post,processors
DefaultPersistenceUnitManager -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1356735495;Set the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager._<p>Such post-processors can, for example, register further entity classes and_jar files, in addition to the metadata read from {@code persistence.xml}.;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.persistenceUnitPostProcessors = postProcessors__	};set,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,persistence,unit,post,processors,post,processors
DefaultPersistenceUnitManager -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1357119239;Set the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager._<p>Such post-processors can, for example, register further entity classes and_jar files, in addition to the metadata read from {@code persistence.xml}.;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.persistenceUnitPostProcessors = postProcessors__	};set,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,persistence,unit,post,processors,post,processors
DefaultPersistenceUnitManager -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1363714444;Set the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager._<p>Such post-processors can, for example, register further entity classes and_jar files, in addition to the metadata read from {@code persistence.xml}.;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.persistenceUnitPostProcessors = postProcessors__	};set,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,persistence,unit,post,processors,post,processors
DefaultPersistenceUnitManager -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1368482696;Set the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager._<p>Such post-processors can, for example, register further entity classes and_jar files, in addition to the metadata read from {@code persistence.xml}.;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.persistenceUnitPostProcessors = postProcessors__	};set,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,persistence,unit,post,processors,post,processors
DefaultPersistenceUnitManager -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1375434510;Set the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager._<p>Such post-processors can, for example, register further entity classes and_jar files, in addition to the metadata read from {@code persistence.xml}.;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.persistenceUnitPostProcessors = postProcessors__	};set,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,persistence,unit,post,processors,post,processors
DefaultPersistenceUnitManager -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1375458214;Set the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager._<p>Such post-processors can, for example, register further entity classes and_jar files, in addition to the metadata read from {@code persistence.xml}.;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.persistenceUnitPostProcessors = postProcessors__	};set,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,persistence,unit,post,processors,post,processors
DefaultPersistenceUnitManager -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1389648334;Set the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager._<p>Such post-processors can, for example, register further entity classes and_jar files, in addition to the metadata read from {@code persistence.xml}.;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.persistenceUnitPostProcessors = postProcessors__	};set,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,persistence,unit,post,processors,post,processors
DefaultPersistenceUnitManager -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1390250900;Set the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager._<p>Such post-processors can, for example, register further entity classes and_jar files, in addition to the metadata read from {@code persistence.xml}.;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.persistenceUnitPostProcessors = postProcessors__	};set,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,persistence,unit,post,processors,post,processors
DefaultPersistenceUnitManager -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1390313076;Set the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager._<p>Such post-processors can, for example, register further entity classes and_jar files, in addition to the metadata read from {@code persistence.xml}.;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.persistenceUnitPostProcessors = postProcessors__	};set,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,persistence,unit,post,processors,post,processors
DefaultPersistenceUnitManager -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1400140571;Set the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager._<p>Such post-processors can, for example, register further entity classes and_jar files, in addition to the metadata read from {@code persistence.xml}.;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.persistenceUnitPostProcessors = postProcessors__	};set,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,persistence,unit,post,processors,post,processors
DefaultPersistenceUnitManager -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1403774750;Set the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager._<p>Such post-processors can, for example, register further entity classes and_jar files, in addition to the metadata read from {@code persistence.xml}.;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.persistenceUnitPostProcessors = postProcessors__	};set,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,persistence,unit,post,processors,post,processors
DefaultPersistenceUnitManager -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1404056186;Set the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager._<p>Such post-processors can, for example, register further entity classes and_jar files, in addition to the metadata read from {@code persistence.xml}.;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.persistenceUnitPostProcessors = postProcessors__	};set,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,persistence,unit,post,processors,post,processors
DefaultPersistenceUnitManager -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1447323728;Set the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager._<p>Such post-processors can, for example, register further entity classes and_jar files, in addition to the metadata read from {@code persistence.xml}.;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.persistenceUnitPostProcessors = postProcessors__	};set,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,persistence,unit,post,processors,post,processors
DefaultPersistenceUnitManager -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1464299869;Set the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager._<p>Such post-processors can, for example, register further entity classes and_jar files, in addition to the metadata read from {@code persistence.xml}.;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.persistenceUnitPostProcessors = postProcessors__	};set,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,persistence,unit,post,processors,post,processors
DefaultPersistenceUnitManager -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1467668243;Set the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager._<p>Such post-processors can, for example, register further entity classes and_jar files, in addition to the metadata read from {@code persistence.xml}.;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.persistenceUnitPostProcessors = postProcessors__	};set,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,persistence,unit,post,processors,post,processors
DefaultPersistenceUnitManager -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1467730834;Set the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager._<p>Such post-processors can, for example, register further entity classes and_jar files, in addition to the metadata read from {@code persistence.xml}.;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.persistenceUnitPostProcessors = postProcessors__	};set,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,persistence,unit,post,processors,post,processors
DefaultPersistenceUnitManager -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1471464767;Set the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager._<p>Such post-processors can, for example, register further entity classes and_jar files, in addition to the metadata read from {@code persistence.xml}.;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.persistenceUnitPostProcessors = postProcessors__	};set,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,persistence,unit,post,processors,post,processors
DefaultPersistenceUnitManager -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1472736647;Set the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager._<p>Such post-processors can, for example, register further entity classes and_jar files, in addition to the metadata read from {@code persistence.xml}.;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.persistenceUnitPostProcessors = postProcessors__	};set,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,persistence,unit,post,processors,post,processors
DefaultPersistenceUnitManager -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1474895745;Set the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager._<p>Such post-processors can, for example, register further entity classes and_jar files, in addition to the metadata read from {@code persistence.xml}.;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.persistenceUnitPostProcessors = postProcessors__	};set,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,persistence,unit,post,processors,post,processors
DefaultPersistenceUnitManager -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1495868221;Set the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager._<p>Such post-processors can, for example, register further entity classes and_jar files, in addition to the metadata read from {@code persistence.xml}.;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.persistenceUnitPostProcessors = postProcessors__	};set,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,persistence,unit,post,processors,post,processors
DefaultPersistenceUnitManager -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1496259743;Set the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager._<p>Such post-processors can, for example, register further entity classes and_jar files, in addition to the metadata read from {@code persistence.xml}.;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.persistenceUnitPostProcessors = postProcessors__	};set,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,persistence,unit,post,processors,post,processors
DefaultPersistenceUnitManager -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1496837955;Set the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager._<p>Such post-processors can, for example, register further entity classes and_jar files, in addition to the metadata read from {@code persistence.xml}.;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.persistenceUnitPostProcessors = postProcessors__	};set,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,persistence,unit,post,processors,post,processors
DefaultPersistenceUnitManager -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1498780456;Set the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager._<p>Such post-processors can, for example, register further entity classes and_jar files, in addition to the metadata read from {@code persistence.xml}.;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.persistenceUnitPostProcessors = postProcessors__	};set,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,persistence,unit,post,processors,post,processors
DefaultPersistenceUnitManager -> public void preparePersistenceUnitInfos();1328020251;Prepare the PersistenceUnitInfos according to the configuration_of this manager: scanning for <code>persistence.xml</code> files,_parsing all matching files, configurating and post-processing them._<p>PersistenceUnitInfos cannot be obtained before this preparation_method has been invoked._@see #obtainDefaultPersistenceUnitInfo()_@see #obtainPersistenceUnitInfo(String);public void preparePersistenceUnitInfos() {_		this.persistenceUnitInfoNames.clear()__		this.persistenceUnitInfos.clear()__		List<SpringPersistenceUnitInfo> puis = readPersistenceUnitInfos()__		for (SpringPersistenceUnitInfo pui : puis) {_			if (pui.getPersistenceUnitRootUrl() == null) {_				pui.setPersistenceUnitRootUrl(determineDefaultPersistenceUnitRootUrl())__			}_			if (pui.getNonJtaDataSource() == null) {_				pui.setNonJtaDataSource(this.defaultDataSource)__			}_			if (this.loadTimeWeaver != null) {_				pui.init(this.loadTimeWeaver)__			}_			else {_				pui.init(this.resourcePatternResolver.getClassLoader())__			}_			postProcessPersistenceUnitInfo(pui)__			String name = pui.getPersistenceUnitName()__			if (!this.persistenceUnitInfoNames.add(name) && !isPersistenceUnitOverrideAllowed()) {_				StringBuilder msg = new StringBuilder()__				msg.append("Conflicting persistence unit definitions for name '").append(name).append("': ")__				msg.append(pui.getPersistenceUnitRootUrl()).append(", ")__				msg.append(this.persistenceUnitInfos.get(name).getPersistenceUnitRootUrl())__				throw new IllegalStateException(msg.toString())__			}_			PersistenceUnitInfo puiToStore = pui__			if (jpa2ApiPresent) {_				puiToStore = (PersistenceUnitInfo) Proxy.newProxyInstance(SmartPersistenceUnitInfo.class.getClassLoader(),_						new Class[] {SmartPersistenceUnitInfo.class}, new Jpa2PersistenceUnitInfoDecorator(pui))__			}_			this.persistenceUnitInfos.put(name, puiToStore)__		}_	};prepare,the,persistence,unit,infos,according,to,the,configuration,of,this,manager,scanning,for,code,persistence,xml,code,files,parsing,all,matching,files,configurating,and,post,processing,them,p,persistence,unit,infos,cannot,be,obtained,before,this,preparation,method,has,been,invoked,see,obtain,default,persistence,unit,info,see,obtain,persistence,unit,info,string;public,void,prepare,persistence,unit,infos,this,persistence,unit,info,names,clear,this,persistence,unit,infos,clear,list,spring,persistence,unit,info,puis,read,persistence,unit,infos,for,spring,persistence,unit,info,pui,puis,if,pui,get,persistence,unit,root,url,null,pui,set,persistence,unit,root,url,determine,default,persistence,unit,root,url,if,pui,get,non,jta,data,source,null,pui,set,non,jta,data,source,this,default,data,source,if,this,load,time,weaver,null,pui,init,this,load,time,weaver,else,pui,init,this,resource,pattern,resolver,get,class,loader,post,process,persistence,unit,info,pui,string,name,pui,get,persistence,unit,name,if,this,persistence,unit,info,names,add,name,is,persistence,unit,override,allowed,string,builder,msg,new,string,builder,msg,append,conflicting,persistence,unit,definitions,for,name,append,name,append,msg,append,pui,get,persistence,unit,root,url,append,msg,append,this,persistence,unit,infos,get,name,get,persistence,unit,root,url,throw,new,illegal,state,exception,msg,to,string,persistence,unit,info,pui,to,store,pui,if,jpa2api,present,pui,to,store,persistence,unit,info,proxy,new,proxy,instance,smart,persistence,unit,info,class,get,class,loader,new,class,smart,persistence,unit,info,class,new,jpa2persistence,unit,info,decorator,pui,this,persistence,unit,infos,put,name,pui,to,store
DefaultPersistenceUnitManager -> public void preparePersistenceUnitInfos();1329142650;Prepare the PersistenceUnitInfos according to the configuration_of this manager: scanning for <code>persistence.xml</code> files,_parsing all matching files, configuring and post-processing them._<p>PersistenceUnitInfos cannot be obtained before this preparation_method has been invoked._@see #obtainDefaultPersistenceUnitInfo()_@see #obtainPersistenceUnitInfo(String);public void preparePersistenceUnitInfos() {_		this.persistenceUnitInfoNames.clear()__		this.persistenceUnitInfos.clear()__		List<SpringPersistenceUnitInfo> puis = readPersistenceUnitInfos()__		for (SpringPersistenceUnitInfo pui : puis) {_			if (pui.getPersistenceUnitRootUrl() == null) {_				pui.setPersistenceUnitRootUrl(determineDefaultPersistenceUnitRootUrl())__			}_			if (pui.getNonJtaDataSource() == null) {_				pui.setNonJtaDataSource(this.defaultDataSource)__			}_			if (this.loadTimeWeaver != null) {_				pui.init(this.loadTimeWeaver)__			}_			else {_				pui.init(this.resourcePatternResolver.getClassLoader())__			}_			postProcessPersistenceUnitInfo(pui)__			String name = pui.getPersistenceUnitName()__			if (!this.persistenceUnitInfoNames.add(name) && !isPersistenceUnitOverrideAllowed()) {_				StringBuilder msg = new StringBuilder()__				msg.append("Conflicting persistence unit definitions for name '").append(name).append("': ")__				msg.append(pui.getPersistenceUnitRootUrl()).append(", ")__				msg.append(this.persistenceUnitInfos.get(name).getPersistenceUnitRootUrl())__				throw new IllegalStateException(msg.toString())__			}_			PersistenceUnitInfo puiToStore = pui__			if (jpa2ApiPresent) {_				puiToStore = (PersistenceUnitInfo) Proxy.newProxyInstance(SmartPersistenceUnitInfo.class.getClassLoader(),_						new Class[] {SmartPersistenceUnitInfo.class}, new Jpa2PersistenceUnitInfoDecorator(pui))__			}_			this.persistenceUnitInfos.put(name, puiToStore)__		}_	};prepare,the,persistence,unit,infos,according,to,the,configuration,of,this,manager,scanning,for,code,persistence,xml,code,files,parsing,all,matching,files,configuring,and,post,processing,them,p,persistence,unit,infos,cannot,be,obtained,before,this,preparation,method,has,been,invoked,see,obtain,default,persistence,unit,info,see,obtain,persistence,unit,info,string;public,void,prepare,persistence,unit,infos,this,persistence,unit,info,names,clear,this,persistence,unit,infos,clear,list,spring,persistence,unit,info,puis,read,persistence,unit,infos,for,spring,persistence,unit,info,pui,puis,if,pui,get,persistence,unit,root,url,null,pui,set,persistence,unit,root,url,determine,default,persistence,unit,root,url,if,pui,get,non,jta,data,source,null,pui,set,non,jta,data,source,this,default,data,source,if,this,load,time,weaver,null,pui,init,this,load,time,weaver,else,pui,init,this,resource,pattern,resolver,get,class,loader,post,process,persistence,unit,info,pui,string,name,pui,get,persistence,unit,name,if,this,persistence,unit,info,names,add,name,is,persistence,unit,override,allowed,string,builder,msg,new,string,builder,msg,append,conflicting,persistence,unit,definitions,for,name,append,name,append,msg,append,pui,get,persistence,unit,root,url,append,msg,append,this,persistence,unit,infos,get,name,get,persistence,unit,root,url,throw,new,illegal,state,exception,msg,to,string,persistence,unit,info,pui,to,store,pui,if,jpa2api,present,pui,to,store,persistence,unit,info,proxy,new,proxy,instance,smart,persistence,unit,info,class,get,class,loader,new,class,smart,persistence,unit,info,class,new,jpa2persistence,unit,info,decorator,pui,this,persistence,unit,infos,put,name,pui,to,store
DefaultPersistenceUnitManager -> public void preparePersistenceUnitInfos();1347282851;Prepare the PersistenceUnitInfos according to the configuration_of this manager: scanning for <code>persistence.xml</code> files,_parsing all matching files, configuring and post-processing them._<p>PersistenceUnitInfos cannot be obtained before this preparation_method has been invoked._@see #obtainDefaultPersistenceUnitInfo()_@see #obtainPersistenceUnitInfo(String);public void preparePersistenceUnitInfos() {_		this.persistenceUnitInfoNames.clear()__		this.persistenceUnitInfos.clear()__		List<SpringPersistenceUnitInfo> puis = readPersistenceUnitInfos()__		for (SpringPersistenceUnitInfo pui : puis) {_			if (pui.getPersistenceUnitRootUrl() == null) {_				pui.setPersistenceUnitRootUrl(determineDefaultPersistenceUnitRootUrl())__			}_			if (pui.getNonJtaDataSource() == null) {_				pui.setNonJtaDataSource(this.defaultDataSource)__			}_			if (this.loadTimeWeaver != null) {_				pui.init(this.loadTimeWeaver)__			}_			else {_				pui.init(this.resourcePatternResolver.getClassLoader())__			}_			postProcessPersistenceUnitInfo(pui)__			String name = pui.getPersistenceUnitName()__			if (!this.persistenceUnitInfoNames.add(name) && !isPersistenceUnitOverrideAllowed()) {_				StringBuilder msg = new StringBuilder()__				msg.append("Conflicting persistence unit definitions for name '").append(name).append("': ")__				msg.append(pui.getPersistenceUnitRootUrl()).append(", ")__				msg.append(this.persistenceUnitInfos.get(name).getPersistenceUnitRootUrl())__				throw new IllegalStateException(msg.toString())__			}_			PersistenceUnitInfo puiToStore = pui__			if (jpa2ApiPresent) {_				puiToStore = (PersistenceUnitInfo) Proxy.newProxyInstance(SmartPersistenceUnitInfo.class.getClassLoader(),_						new Class[] {SmartPersistenceUnitInfo.class}, new Jpa2PersistenceUnitInfoDecorator(pui))__			}_			this.persistenceUnitInfos.put(name, puiToStore)__		}_	};prepare,the,persistence,unit,infos,according,to,the,configuration,of,this,manager,scanning,for,code,persistence,xml,code,files,parsing,all,matching,files,configuring,and,post,processing,them,p,persistence,unit,infos,cannot,be,obtained,before,this,preparation,method,has,been,invoked,see,obtain,default,persistence,unit,info,see,obtain,persistence,unit,info,string;public,void,prepare,persistence,unit,infos,this,persistence,unit,info,names,clear,this,persistence,unit,infos,clear,list,spring,persistence,unit,info,puis,read,persistence,unit,infos,for,spring,persistence,unit,info,pui,puis,if,pui,get,persistence,unit,root,url,null,pui,set,persistence,unit,root,url,determine,default,persistence,unit,root,url,if,pui,get,non,jta,data,source,null,pui,set,non,jta,data,source,this,default,data,source,if,this,load,time,weaver,null,pui,init,this,load,time,weaver,else,pui,init,this,resource,pattern,resolver,get,class,loader,post,process,persistence,unit,info,pui,string,name,pui,get,persistence,unit,name,if,this,persistence,unit,info,names,add,name,is,persistence,unit,override,allowed,string,builder,msg,new,string,builder,msg,append,conflicting,persistence,unit,definitions,for,name,append,name,append,msg,append,pui,get,persistence,unit,root,url,append,msg,append,this,persistence,unit,infos,get,name,get,persistence,unit,root,url,throw,new,illegal,state,exception,msg,to,string,persistence,unit,info,pui,to,store,pui,if,jpa2api,present,pui,to,store,persistence,unit,info,proxy,new,proxy,instance,smart,persistence,unit,info,class,get,class,loader,new,class,smart,persistence,unit,info,class,new,jpa2persistence,unit,info,decorator,pui,this,persistence,unit,infos,put,name,pui,to,store
DefaultPersistenceUnitManager -> public void preparePersistenceUnitInfos();1351648399;Prepare the PersistenceUnitInfos according to the configuration_of this manager: scanning for <code>persistence.xml</code> files,_parsing all matching files, configuring and post-processing them._<p>PersistenceUnitInfos cannot be obtained before this preparation_method has been invoked._@see #obtainDefaultPersistenceUnitInfo()_@see #obtainPersistenceUnitInfo(String);public void preparePersistenceUnitInfos() {_		this.persistenceUnitInfoNames.clear()__		this.persistenceUnitInfos.clear()__		List<SpringPersistenceUnitInfo> puis = readPersistenceUnitInfos()__		for (SpringPersistenceUnitInfo pui : puis) {_			if (pui.getPersistenceUnitRootUrl() == null) {_				pui.setPersistenceUnitRootUrl(determineDefaultPersistenceUnitRootUrl())__			}_			if (pui.getJtaDataSource() == null) {_				pui.setJtaDataSource(this.defaultJtaDataSource)__			}_			if (pui.getNonJtaDataSource() == null) {_				pui.setNonJtaDataSource(this.defaultDataSource)__			}_			if (this.loadTimeWeaver != null) {_				pui.init(this.loadTimeWeaver)__			}_			else {_				pui.init(this.resourcePatternResolver.getClassLoader())__			}_			postProcessPersistenceUnitInfo(pui)__			String name = pui.getPersistenceUnitName()__			if (!this.persistenceUnitInfoNames.add(name) && !isPersistenceUnitOverrideAllowed()) {_				StringBuilder msg = new StringBuilder()__				msg.append("Conflicting persistence unit definitions for name '").append(name).append("': ")__				msg.append(pui.getPersistenceUnitRootUrl()).append(", ")__				msg.append(this.persistenceUnitInfos.get(name).getPersistenceUnitRootUrl())__				throw new IllegalStateException(msg.toString())__			}_			PersistenceUnitInfo puiToStore = pui__			if (jpa2ApiPresent) {_				puiToStore = (PersistenceUnitInfo) Proxy.newProxyInstance(SmartPersistenceUnitInfo.class.getClassLoader(),_						new Class[] {SmartPersistenceUnitInfo.class}, new Jpa2PersistenceUnitInfoDecorator(pui))__			}_			this.persistenceUnitInfos.put(name, puiToStore)__		}_	};prepare,the,persistence,unit,infos,according,to,the,configuration,of,this,manager,scanning,for,code,persistence,xml,code,files,parsing,all,matching,files,configuring,and,post,processing,them,p,persistence,unit,infos,cannot,be,obtained,before,this,preparation,method,has,been,invoked,see,obtain,default,persistence,unit,info,see,obtain,persistence,unit,info,string;public,void,prepare,persistence,unit,infos,this,persistence,unit,info,names,clear,this,persistence,unit,infos,clear,list,spring,persistence,unit,info,puis,read,persistence,unit,infos,for,spring,persistence,unit,info,pui,puis,if,pui,get,persistence,unit,root,url,null,pui,set,persistence,unit,root,url,determine,default,persistence,unit,root,url,if,pui,get,jta,data,source,null,pui,set,jta,data,source,this,default,jta,data,source,if,pui,get,non,jta,data,source,null,pui,set,non,jta,data,source,this,default,data,source,if,this,load,time,weaver,null,pui,init,this,load,time,weaver,else,pui,init,this,resource,pattern,resolver,get,class,loader,post,process,persistence,unit,info,pui,string,name,pui,get,persistence,unit,name,if,this,persistence,unit,info,names,add,name,is,persistence,unit,override,allowed,string,builder,msg,new,string,builder,msg,append,conflicting,persistence,unit,definitions,for,name,append,name,append,msg,append,pui,get,persistence,unit,root,url,append,msg,append,this,persistence,unit,infos,get,name,get,persistence,unit,root,url,throw,new,illegal,state,exception,msg,to,string,persistence,unit,info,pui,to,store,pui,if,jpa2api,present,pui,to,store,persistence,unit,info,proxy,new,proxy,instance,smart,persistence,unit,info,class,get,class,loader,new,class,smart,persistence,unit,info,class,new,jpa2persistence,unit,info,decorator,pui,this,persistence,unit,infos,put,name,pui,to,store
DefaultPersistenceUnitManager -> public void preparePersistenceUnitInfos();1356735495;Prepare the PersistenceUnitInfos according to the configuration_of this manager: scanning for {@code persistence.xml} files,_parsing all matching files, configuring and post-processing them._<p>PersistenceUnitInfos cannot be obtained before this preparation_method has been invoked._@see #obtainDefaultPersistenceUnitInfo()_@see #obtainPersistenceUnitInfo(String);public void preparePersistenceUnitInfos() {_		this.persistenceUnitInfoNames.clear()__		this.persistenceUnitInfos.clear()__		List<SpringPersistenceUnitInfo> puis = readPersistenceUnitInfos()__		for (SpringPersistenceUnitInfo pui : puis) {_			if (pui.getPersistenceUnitRootUrl() == null) {_				pui.setPersistenceUnitRootUrl(determineDefaultPersistenceUnitRootUrl())__			}_			if (pui.getJtaDataSource() == null) {_				pui.setJtaDataSource(this.defaultJtaDataSource)__			}_			if (pui.getNonJtaDataSource() == null) {_				pui.setNonJtaDataSource(this.defaultDataSource)__			}_			if (this.loadTimeWeaver != null) {_				pui.init(this.loadTimeWeaver)__			}_			else {_				pui.init(this.resourcePatternResolver.getClassLoader())__			}_			postProcessPersistenceUnitInfo(pui)__			String name = pui.getPersistenceUnitName()__			if (!this.persistenceUnitInfoNames.add(name) && !isPersistenceUnitOverrideAllowed()) {_				StringBuilder msg = new StringBuilder()__				msg.append("Conflicting persistence unit definitions for name '").append(name).append("': ")__				msg.append(pui.getPersistenceUnitRootUrl()).append(", ")__				msg.append(this.persistenceUnitInfos.get(name).getPersistenceUnitRootUrl())__				throw new IllegalStateException(msg.toString())__			}_			PersistenceUnitInfo puiToStore = pui__			if (jpa2ApiPresent) {_				puiToStore = (PersistenceUnitInfo) Proxy.newProxyInstance(SmartPersistenceUnitInfo.class.getClassLoader(),_						new Class[] {SmartPersistenceUnitInfo.class}, new Jpa2PersistenceUnitInfoDecorator(pui))__			}_			this.persistenceUnitInfos.put(name, puiToStore)__		}_	};prepare,the,persistence,unit,infos,according,to,the,configuration,of,this,manager,scanning,for,code,persistence,xml,files,parsing,all,matching,files,configuring,and,post,processing,them,p,persistence,unit,infos,cannot,be,obtained,before,this,preparation,method,has,been,invoked,see,obtain,default,persistence,unit,info,see,obtain,persistence,unit,info,string;public,void,prepare,persistence,unit,infos,this,persistence,unit,info,names,clear,this,persistence,unit,infos,clear,list,spring,persistence,unit,info,puis,read,persistence,unit,infos,for,spring,persistence,unit,info,pui,puis,if,pui,get,persistence,unit,root,url,null,pui,set,persistence,unit,root,url,determine,default,persistence,unit,root,url,if,pui,get,jta,data,source,null,pui,set,jta,data,source,this,default,jta,data,source,if,pui,get,non,jta,data,source,null,pui,set,non,jta,data,source,this,default,data,source,if,this,load,time,weaver,null,pui,init,this,load,time,weaver,else,pui,init,this,resource,pattern,resolver,get,class,loader,post,process,persistence,unit,info,pui,string,name,pui,get,persistence,unit,name,if,this,persistence,unit,info,names,add,name,is,persistence,unit,override,allowed,string,builder,msg,new,string,builder,msg,append,conflicting,persistence,unit,definitions,for,name,append,name,append,msg,append,pui,get,persistence,unit,root,url,append,msg,append,this,persistence,unit,infos,get,name,get,persistence,unit,root,url,throw,new,illegal,state,exception,msg,to,string,persistence,unit,info,pui,to,store,pui,if,jpa2api,present,pui,to,store,persistence,unit,info,proxy,new,proxy,instance,smart,persistence,unit,info,class,get,class,loader,new,class,smart,persistence,unit,info,class,new,jpa2persistence,unit,info,decorator,pui,this,persistence,unit,infos,put,name,pui,to,store
DefaultPersistenceUnitManager -> public void preparePersistenceUnitInfos();1357119239;Prepare the PersistenceUnitInfos according to the configuration_of this manager: scanning for {@code persistence.xml} files,_parsing all matching files, configuring and post-processing them._<p>PersistenceUnitInfos cannot be obtained before this preparation_method has been invoked._@see #obtainDefaultPersistenceUnitInfo()_@see #obtainPersistenceUnitInfo(String);public void preparePersistenceUnitInfos() {_		this.persistenceUnitInfoNames.clear()__		this.persistenceUnitInfos.clear()__		List<SpringPersistenceUnitInfo> puis = readPersistenceUnitInfos()__		for (SpringPersistenceUnitInfo pui : puis) {_			if (pui.getPersistenceUnitRootUrl() == null) {_				pui.setPersistenceUnitRootUrl(determineDefaultPersistenceUnitRootUrl())__			}_			if (pui.getJtaDataSource() == null) {_				pui.setJtaDataSource(this.defaultJtaDataSource)__			}_			if (pui.getNonJtaDataSource() == null) {_				pui.setNonJtaDataSource(this.defaultDataSource)__			}_			if (this.loadTimeWeaver != null) {_				pui.init(this.loadTimeWeaver)__			}_			else {_				pui.init(this.resourcePatternResolver.getClassLoader())__			}_			postProcessPersistenceUnitInfo(pui)__			String name = pui.getPersistenceUnitName()__			if (!this.persistenceUnitInfoNames.add(name) && !isPersistenceUnitOverrideAllowed()) {_				StringBuilder msg = new StringBuilder()__				msg.append("Conflicting persistence unit definitions for name '").append(name).append("': ")__				msg.append(pui.getPersistenceUnitRootUrl()).append(", ")__				msg.append(this.persistenceUnitInfos.get(name).getPersistenceUnitRootUrl())__				throw new IllegalStateException(msg.toString())__			}_			PersistenceUnitInfo puiToStore = pui__			if (jpa2ApiPresent) {_				puiToStore = (PersistenceUnitInfo) Proxy.newProxyInstance(SmartPersistenceUnitInfo.class.getClassLoader(),_						new Class[] {SmartPersistenceUnitInfo.class}, new Jpa2PersistenceUnitInfoDecorator(pui))__			}_			this.persistenceUnitInfos.put(name, puiToStore)__		}_	};prepare,the,persistence,unit,infos,according,to,the,configuration,of,this,manager,scanning,for,code,persistence,xml,files,parsing,all,matching,files,configuring,and,post,processing,them,p,persistence,unit,infos,cannot,be,obtained,before,this,preparation,method,has,been,invoked,see,obtain,default,persistence,unit,info,see,obtain,persistence,unit,info,string;public,void,prepare,persistence,unit,infos,this,persistence,unit,info,names,clear,this,persistence,unit,infos,clear,list,spring,persistence,unit,info,puis,read,persistence,unit,infos,for,spring,persistence,unit,info,pui,puis,if,pui,get,persistence,unit,root,url,null,pui,set,persistence,unit,root,url,determine,default,persistence,unit,root,url,if,pui,get,jta,data,source,null,pui,set,jta,data,source,this,default,jta,data,source,if,pui,get,non,jta,data,source,null,pui,set,non,jta,data,source,this,default,data,source,if,this,load,time,weaver,null,pui,init,this,load,time,weaver,else,pui,init,this,resource,pattern,resolver,get,class,loader,post,process,persistence,unit,info,pui,string,name,pui,get,persistence,unit,name,if,this,persistence,unit,info,names,add,name,is,persistence,unit,override,allowed,string,builder,msg,new,string,builder,msg,append,conflicting,persistence,unit,definitions,for,name,append,name,append,msg,append,pui,get,persistence,unit,root,url,append,msg,append,this,persistence,unit,infos,get,name,get,persistence,unit,root,url,throw,new,illegal,state,exception,msg,to,string,persistence,unit,info,pui,to,store,pui,if,jpa2api,present,pui,to,store,persistence,unit,info,proxy,new,proxy,instance,smart,persistence,unit,info,class,get,class,loader,new,class,smart,persistence,unit,info,class,new,jpa2persistence,unit,info,decorator,pui,this,persistence,unit,infos,put,name,pui,to,store
DefaultPersistenceUnitManager -> public void preparePersistenceUnitInfos();1363714444;Prepare the PersistenceUnitInfos according to the configuration_of this manager: scanning for {@code persistence.xml} files,_parsing all matching files, configuring and post-processing them._<p>PersistenceUnitInfos cannot be obtained before this preparation_method has been invoked._@see #obtainDefaultPersistenceUnitInfo()_@see #obtainPersistenceUnitInfo(String);public void preparePersistenceUnitInfos() {_		this.persistenceUnitInfoNames.clear()__		this.persistenceUnitInfos.clear()__		List<SpringPersistenceUnitInfo> puis = readPersistenceUnitInfos()__		for (SpringPersistenceUnitInfo pui : puis) {_			if (pui.getPersistenceUnitRootUrl() == null) {_				pui.setPersistenceUnitRootUrl(determineDefaultPersistenceUnitRootUrl())__			}_			if (pui.getJtaDataSource() == null) {_				pui.setJtaDataSource(this.defaultJtaDataSource)__			}_			if (pui.getNonJtaDataSource() == null) {_				pui.setNonJtaDataSource(this.defaultDataSource)__			}_			if (this.loadTimeWeaver != null) {_				pui.init(this.loadTimeWeaver)__			}_			else {_				pui.init(this.resourcePatternResolver.getClassLoader())__			}_			postProcessPersistenceUnitInfo(pui)__			String name = pui.getPersistenceUnitName()__			if (!this.persistenceUnitInfoNames.add(name) && !isPersistenceUnitOverrideAllowed()) {_				StringBuilder msg = new StringBuilder()__				msg.append("Conflicting persistence unit definitions for name '").append(name).append("': ")__				msg.append(pui.getPersistenceUnitRootUrl()).append(", ")__				msg.append(this.persistenceUnitInfos.get(name).getPersistenceUnitRootUrl())__				throw new IllegalStateException(msg.toString())__			}_			this.persistenceUnitInfos.put(name, pui)__		}_	};prepare,the,persistence,unit,infos,according,to,the,configuration,of,this,manager,scanning,for,code,persistence,xml,files,parsing,all,matching,files,configuring,and,post,processing,them,p,persistence,unit,infos,cannot,be,obtained,before,this,preparation,method,has,been,invoked,see,obtain,default,persistence,unit,info,see,obtain,persistence,unit,info,string;public,void,prepare,persistence,unit,infos,this,persistence,unit,info,names,clear,this,persistence,unit,infos,clear,list,spring,persistence,unit,info,puis,read,persistence,unit,infos,for,spring,persistence,unit,info,pui,puis,if,pui,get,persistence,unit,root,url,null,pui,set,persistence,unit,root,url,determine,default,persistence,unit,root,url,if,pui,get,jta,data,source,null,pui,set,jta,data,source,this,default,jta,data,source,if,pui,get,non,jta,data,source,null,pui,set,non,jta,data,source,this,default,data,source,if,this,load,time,weaver,null,pui,init,this,load,time,weaver,else,pui,init,this,resource,pattern,resolver,get,class,loader,post,process,persistence,unit,info,pui,string,name,pui,get,persistence,unit,name,if,this,persistence,unit,info,names,add,name,is,persistence,unit,override,allowed,string,builder,msg,new,string,builder,msg,append,conflicting,persistence,unit,definitions,for,name,append,name,append,msg,append,pui,get,persistence,unit,root,url,append,msg,append,this,persistence,unit,infos,get,name,get,persistence,unit,root,url,throw,new,illegal,state,exception,msg,to,string,this,persistence,unit,infos,put,name,pui
DefaultPersistenceUnitManager -> public void preparePersistenceUnitInfos();1368482696;Prepare the PersistenceUnitInfos according to the configuration_of this manager: scanning for {@code persistence.xml} files,_parsing all matching files, configuring and post-processing them._<p>PersistenceUnitInfos cannot be obtained before this preparation_method has been invoked._@see #obtainDefaultPersistenceUnitInfo()_@see #obtainPersistenceUnitInfo(String);public void preparePersistenceUnitInfos() {_		this.persistenceUnitInfoNames.clear()__		this.persistenceUnitInfos.clear()__		List<SpringPersistenceUnitInfo> puis = readPersistenceUnitInfos()__		for (SpringPersistenceUnitInfo pui : puis) {_			if (pui.getPersistenceUnitRootUrl() == null) {_				pui.setPersistenceUnitRootUrl(determineDefaultPersistenceUnitRootUrl())__			}_			if (pui.getJtaDataSource() == null) {_				pui.setJtaDataSource(this.defaultJtaDataSource)__			}_			if (pui.getNonJtaDataSource() == null) {_				pui.setNonJtaDataSource(this.defaultDataSource)__			}_			if (this.loadTimeWeaver != null) {_				pui.init(this.loadTimeWeaver)__			}_			else {_				pui.init(this.resourcePatternResolver.getClassLoader())__			}_			postProcessPersistenceUnitInfo(pui)__			String name = pui.getPersistenceUnitName()__			if (!this.persistenceUnitInfoNames.add(name) && !isPersistenceUnitOverrideAllowed()) {_				StringBuilder msg = new StringBuilder()__				msg.append("Conflicting persistence unit definitions for name '").append(name).append("': ")__				msg.append(pui.getPersistenceUnitRootUrl()).append(", ")__				msg.append(this.persistenceUnitInfos.get(name).getPersistenceUnitRootUrl())__				throw new IllegalStateException(msg.toString())__			}_			this.persistenceUnitInfos.put(name, pui)__		}_	};prepare,the,persistence,unit,infos,according,to,the,configuration,of,this,manager,scanning,for,code,persistence,xml,files,parsing,all,matching,files,configuring,and,post,processing,them,p,persistence,unit,infos,cannot,be,obtained,before,this,preparation,method,has,been,invoked,see,obtain,default,persistence,unit,info,see,obtain,persistence,unit,info,string;public,void,prepare,persistence,unit,infos,this,persistence,unit,info,names,clear,this,persistence,unit,infos,clear,list,spring,persistence,unit,info,puis,read,persistence,unit,infos,for,spring,persistence,unit,info,pui,puis,if,pui,get,persistence,unit,root,url,null,pui,set,persistence,unit,root,url,determine,default,persistence,unit,root,url,if,pui,get,jta,data,source,null,pui,set,jta,data,source,this,default,jta,data,source,if,pui,get,non,jta,data,source,null,pui,set,non,jta,data,source,this,default,data,source,if,this,load,time,weaver,null,pui,init,this,load,time,weaver,else,pui,init,this,resource,pattern,resolver,get,class,loader,post,process,persistence,unit,info,pui,string,name,pui,get,persistence,unit,name,if,this,persistence,unit,info,names,add,name,is,persistence,unit,override,allowed,string,builder,msg,new,string,builder,msg,append,conflicting,persistence,unit,definitions,for,name,append,name,append,msg,append,pui,get,persistence,unit,root,url,append,msg,append,this,persistence,unit,infos,get,name,get,persistence,unit,root,url,throw,new,illegal,state,exception,msg,to,string,this,persistence,unit,infos,put,name,pui
DefaultPersistenceUnitManager -> public void preparePersistenceUnitInfos();1375434510;Prepare the PersistenceUnitInfos according to the configuration_of this manager: scanning for {@code persistence.xml} files,_parsing all matching files, configuring and post-processing them._<p>PersistenceUnitInfos cannot be obtained before this preparation_method has been invoked._@see #obtainDefaultPersistenceUnitInfo()_@see #obtainPersistenceUnitInfo(String);public void preparePersistenceUnitInfos() {_		this.persistenceUnitInfoNames.clear()__		this.persistenceUnitInfos.clear()__		List<SpringPersistenceUnitInfo> puis = readPersistenceUnitInfos()__		for (SpringPersistenceUnitInfo pui : puis) {_			if (pui.getPersistenceUnitRootUrl() == null) {_				pui.setPersistenceUnitRootUrl(determineDefaultPersistenceUnitRootUrl())__			}_			if (pui.getJtaDataSource() == null) {_				pui.setJtaDataSource(this.defaultJtaDataSource)__			}_			if (pui.getNonJtaDataSource() == null) {_				pui.setNonJtaDataSource(this.defaultDataSource)__			}_			if (this.loadTimeWeaver != null) {_				pui.init(this.loadTimeWeaver)__			}_			else {_				pui.init(this.resourcePatternResolver.getClassLoader())__			}_			postProcessPersistenceUnitInfo(pui)__			String name = pui.getPersistenceUnitName()__			if (!this.persistenceUnitInfoNames.add(name) && !isPersistenceUnitOverrideAllowed()) {_				StringBuilder msg = new StringBuilder()__				msg.append("Conflicting persistence unit definitions for name '").append(name).append("': ")__				msg.append(pui.getPersistenceUnitRootUrl()).append(", ")__				msg.append(this.persistenceUnitInfos.get(name).getPersistenceUnitRootUrl())__				throw new IllegalStateException(msg.toString())__			}_			this.persistenceUnitInfos.put(name, pui)__		}_	};prepare,the,persistence,unit,infos,according,to,the,configuration,of,this,manager,scanning,for,code,persistence,xml,files,parsing,all,matching,files,configuring,and,post,processing,them,p,persistence,unit,infos,cannot,be,obtained,before,this,preparation,method,has,been,invoked,see,obtain,default,persistence,unit,info,see,obtain,persistence,unit,info,string;public,void,prepare,persistence,unit,infos,this,persistence,unit,info,names,clear,this,persistence,unit,infos,clear,list,spring,persistence,unit,info,puis,read,persistence,unit,infos,for,spring,persistence,unit,info,pui,puis,if,pui,get,persistence,unit,root,url,null,pui,set,persistence,unit,root,url,determine,default,persistence,unit,root,url,if,pui,get,jta,data,source,null,pui,set,jta,data,source,this,default,jta,data,source,if,pui,get,non,jta,data,source,null,pui,set,non,jta,data,source,this,default,data,source,if,this,load,time,weaver,null,pui,init,this,load,time,weaver,else,pui,init,this,resource,pattern,resolver,get,class,loader,post,process,persistence,unit,info,pui,string,name,pui,get,persistence,unit,name,if,this,persistence,unit,info,names,add,name,is,persistence,unit,override,allowed,string,builder,msg,new,string,builder,msg,append,conflicting,persistence,unit,definitions,for,name,append,name,append,msg,append,pui,get,persistence,unit,root,url,append,msg,append,this,persistence,unit,infos,get,name,get,persistence,unit,root,url,throw,new,illegal,state,exception,msg,to,string,this,persistence,unit,infos,put,name,pui
DefaultPersistenceUnitManager -> public void preparePersistenceUnitInfos();1375458214;Prepare the PersistenceUnitInfos according to the configuration_of this manager: scanning for {@code persistence.xml} files,_parsing all matching files, configuring and post-processing them._<p>PersistenceUnitInfos cannot be obtained before this preparation_method has been invoked._@see #obtainDefaultPersistenceUnitInfo()_@see #obtainPersistenceUnitInfo(String);public void preparePersistenceUnitInfos() {_		this.persistenceUnitInfoNames.clear()__		this.persistenceUnitInfos.clear()__		List<SpringPersistenceUnitInfo> puis = readPersistenceUnitInfos()__		for (SpringPersistenceUnitInfo pui : puis) {_			if (pui.getPersistenceUnitRootUrl() == null) {_				pui.setPersistenceUnitRootUrl(determineDefaultPersistenceUnitRootUrl())__			}_			if (pui.getJtaDataSource() == null) {_				pui.setJtaDataSource(this.defaultJtaDataSource)__			}_			if (pui.getNonJtaDataSource() == null) {_				pui.setNonJtaDataSource(this.defaultDataSource)__			}_			if (this.sharedCacheMode != null) {_				pui.setSharedCacheMode(this.sharedCacheMode)__			}_			if (this.validationMode != null) {_				pui.setValidationMode(this.validationMode)__			}_			if (this.loadTimeWeaver != null) {_				pui.init(this.loadTimeWeaver)__			}_			else {_				pui.init(this.resourcePatternResolver.getClassLoader())__			}_			postProcessPersistenceUnitInfo(pui)__			String name = pui.getPersistenceUnitName()__			if (!this.persistenceUnitInfoNames.add(name) && !isPersistenceUnitOverrideAllowed()) {_				StringBuilder msg = new StringBuilder()__				msg.append("Conflicting persistence unit definitions for name '").append(name).append("': ")__				msg.append(pui.getPersistenceUnitRootUrl()).append(", ")__				msg.append(this.persistenceUnitInfos.get(name).getPersistenceUnitRootUrl())__				throw new IllegalStateException(msg.toString())__			}_			this.persistenceUnitInfos.put(name, pui)__		}_	};prepare,the,persistence,unit,infos,according,to,the,configuration,of,this,manager,scanning,for,code,persistence,xml,files,parsing,all,matching,files,configuring,and,post,processing,them,p,persistence,unit,infos,cannot,be,obtained,before,this,preparation,method,has,been,invoked,see,obtain,default,persistence,unit,info,see,obtain,persistence,unit,info,string;public,void,prepare,persistence,unit,infos,this,persistence,unit,info,names,clear,this,persistence,unit,infos,clear,list,spring,persistence,unit,info,puis,read,persistence,unit,infos,for,spring,persistence,unit,info,pui,puis,if,pui,get,persistence,unit,root,url,null,pui,set,persistence,unit,root,url,determine,default,persistence,unit,root,url,if,pui,get,jta,data,source,null,pui,set,jta,data,source,this,default,jta,data,source,if,pui,get,non,jta,data,source,null,pui,set,non,jta,data,source,this,default,data,source,if,this,shared,cache,mode,null,pui,set,shared,cache,mode,this,shared,cache,mode,if,this,validation,mode,null,pui,set,validation,mode,this,validation,mode,if,this,load,time,weaver,null,pui,init,this,load,time,weaver,else,pui,init,this,resource,pattern,resolver,get,class,loader,post,process,persistence,unit,info,pui,string,name,pui,get,persistence,unit,name,if,this,persistence,unit,info,names,add,name,is,persistence,unit,override,allowed,string,builder,msg,new,string,builder,msg,append,conflicting,persistence,unit,definitions,for,name,append,name,append,msg,append,pui,get,persistence,unit,root,url,append,msg,append,this,persistence,unit,infos,get,name,get,persistence,unit,root,url,throw,new,illegal,state,exception,msg,to,string,this,persistence,unit,infos,put,name,pui
DefaultPersistenceUnitManager -> public void preparePersistenceUnitInfos();1389648334;Prepare the PersistenceUnitInfos according to the configuration_of this manager: scanning for {@code persistence.xml} files,_parsing all matching files, configuring and post-processing them._<p>PersistenceUnitInfos cannot be obtained before this preparation_method has been invoked._@see #obtainDefaultPersistenceUnitInfo()_@see #obtainPersistenceUnitInfo(String);public void preparePersistenceUnitInfos() {_		this.persistenceUnitInfoNames.clear()__		this.persistenceUnitInfos.clear()__		List<SpringPersistenceUnitInfo> puis = readPersistenceUnitInfos()__		for (SpringPersistenceUnitInfo pui : puis) {_			if (pui.getPersistenceUnitRootUrl() == null) {_				pui.setPersistenceUnitRootUrl(determineDefaultPersistenceUnitRootUrl())__			}_			if (pui.getJtaDataSource() == null) {_				pui.setJtaDataSource(this.defaultJtaDataSource)__			}_			if (pui.getNonJtaDataSource() == null) {_				pui.setNonJtaDataSource(this.defaultDataSource)__			}_			if (this.sharedCacheMode != null) {_				pui.setSharedCacheMode(this.sharedCacheMode)__			}_			if (this.validationMode != null) {_				pui.setValidationMode(this.validationMode)__			}_			if (this.loadTimeWeaver != null) {_				pui.init(this.loadTimeWeaver)__			}_			else {_				pui.init(this.resourcePatternResolver.getClassLoader())__			}_			postProcessPersistenceUnitInfo(pui)__			String name = pui.getPersistenceUnitName()__			if (!this.persistenceUnitInfoNames.add(name) && !isPersistenceUnitOverrideAllowed()) {_				StringBuilder msg = new StringBuilder()__				msg.append("Conflicting persistence unit definitions for name '").append(name).append("': ")__				msg.append(pui.getPersistenceUnitRootUrl()).append(", ")__				msg.append(this.persistenceUnitInfos.get(name).getPersistenceUnitRootUrl())__				throw new IllegalStateException(msg.toString())__			}_			this.persistenceUnitInfos.put(name, pui)__		}_	};prepare,the,persistence,unit,infos,according,to,the,configuration,of,this,manager,scanning,for,code,persistence,xml,files,parsing,all,matching,files,configuring,and,post,processing,them,p,persistence,unit,infos,cannot,be,obtained,before,this,preparation,method,has,been,invoked,see,obtain,default,persistence,unit,info,see,obtain,persistence,unit,info,string;public,void,prepare,persistence,unit,infos,this,persistence,unit,info,names,clear,this,persistence,unit,infos,clear,list,spring,persistence,unit,info,puis,read,persistence,unit,infos,for,spring,persistence,unit,info,pui,puis,if,pui,get,persistence,unit,root,url,null,pui,set,persistence,unit,root,url,determine,default,persistence,unit,root,url,if,pui,get,jta,data,source,null,pui,set,jta,data,source,this,default,jta,data,source,if,pui,get,non,jta,data,source,null,pui,set,non,jta,data,source,this,default,data,source,if,this,shared,cache,mode,null,pui,set,shared,cache,mode,this,shared,cache,mode,if,this,validation,mode,null,pui,set,validation,mode,this,validation,mode,if,this,load,time,weaver,null,pui,init,this,load,time,weaver,else,pui,init,this,resource,pattern,resolver,get,class,loader,post,process,persistence,unit,info,pui,string,name,pui,get,persistence,unit,name,if,this,persistence,unit,info,names,add,name,is,persistence,unit,override,allowed,string,builder,msg,new,string,builder,msg,append,conflicting,persistence,unit,definitions,for,name,append,name,append,msg,append,pui,get,persistence,unit,root,url,append,msg,append,this,persistence,unit,infos,get,name,get,persistence,unit,root,url,throw,new,illegal,state,exception,msg,to,string,this,persistence,unit,infos,put,name,pui
DefaultPersistenceUnitManager -> public void preparePersistenceUnitInfos();1390250900;Prepare the PersistenceUnitInfos according to the configuration_of this manager: scanning for {@code persistence.xml} files,_parsing all matching files, configuring and post-processing them._<p>PersistenceUnitInfos cannot be obtained before this preparation_method has been invoked._@see #obtainDefaultPersistenceUnitInfo()_@see #obtainPersistenceUnitInfo(String);public void preparePersistenceUnitInfos() {_		this.persistenceUnitInfoNames.clear()__		this.persistenceUnitInfos.clear()___		List<SpringPersistenceUnitInfo> puis = readPersistenceUnitInfos()__		for (SpringPersistenceUnitInfo pui : puis) {_			if (pui.getPersistenceUnitRootUrl() == null) {_				pui.setPersistenceUnitRootUrl(determineDefaultPersistenceUnitRootUrl())__			}_			if (pui.getJtaDataSource() == null) {_				pui.setJtaDataSource(this.defaultJtaDataSource)__			}_			if (pui.getNonJtaDataSource() == null) {_				pui.setNonJtaDataSource(this.defaultDataSource)__			}_			if (this.sharedCacheMode != null) {_				pui.setSharedCacheMode(this.sharedCacheMode)__			}_			if (this.validationMode != null) {_				pui.setValidationMode(this.validationMode)__			}_			if (this.loadTimeWeaver != null) {_				pui.init(this.loadTimeWeaver)__			}_			else {_				pui.init(this.resourcePatternResolver.getClassLoader())__			}_			postProcessPersistenceUnitInfo(pui)__			String name = pui.getPersistenceUnitName()__			if (!this.persistenceUnitInfoNames.add(name) && !isPersistenceUnitOverrideAllowed()) {_				StringBuilder msg = new StringBuilder()__				msg.append("Conflicting persistence unit definitions for name '").append(name).append("': ")__				msg.append(pui.getPersistenceUnitRootUrl()).append(", ")__				msg.append(this.persistenceUnitInfos.get(name).getPersistenceUnitRootUrl())__				throw new IllegalStateException(msg.toString())__			}_			this.persistenceUnitInfos.put(name, pui)__		}_	};prepare,the,persistence,unit,infos,according,to,the,configuration,of,this,manager,scanning,for,code,persistence,xml,files,parsing,all,matching,files,configuring,and,post,processing,them,p,persistence,unit,infos,cannot,be,obtained,before,this,preparation,method,has,been,invoked,see,obtain,default,persistence,unit,info,see,obtain,persistence,unit,info,string;public,void,prepare,persistence,unit,infos,this,persistence,unit,info,names,clear,this,persistence,unit,infos,clear,list,spring,persistence,unit,info,puis,read,persistence,unit,infos,for,spring,persistence,unit,info,pui,puis,if,pui,get,persistence,unit,root,url,null,pui,set,persistence,unit,root,url,determine,default,persistence,unit,root,url,if,pui,get,jta,data,source,null,pui,set,jta,data,source,this,default,jta,data,source,if,pui,get,non,jta,data,source,null,pui,set,non,jta,data,source,this,default,data,source,if,this,shared,cache,mode,null,pui,set,shared,cache,mode,this,shared,cache,mode,if,this,validation,mode,null,pui,set,validation,mode,this,validation,mode,if,this,load,time,weaver,null,pui,init,this,load,time,weaver,else,pui,init,this,resource,pattern,resolver,get,class,loader,post,process,persistence,unit,info,pui,string,name,pui,get,persistence,unit,name,if,this,persistence,unit,info,names,add,name,is,persistence,unit,override,allowed,string,builder,msg,new,string,builder,msg,append,conflicting,persistence,unit,definitions,for,name,append,name,append,msg,append,pui,get,persistence,unit,root,url,append,msg,append,this,persistence,unit,infos,get,name,get,persistence,unit,root,url,throw,new,illegal,state,exception,msg,to,string,this,persistence,unit,infos,put,name,pui
DefaultPersistenceUnitManager -> public void preparePersistenceUnitInfos();1390313076;Prepare the PersistenceUnitInfos according to the configuration_of this manager: scanning for {@code persistence.xml} files,_parsing all matching files, configuring and post-processing them._<p>PersistenceUnitInfos cannot be obtained before this preparation_method has been invoked._@see #obtainDefaultPersistenceUnitInfo()_@see #obtainPersistenceUnitInfo(String);public void preparePersistenceUnitInfos() {_		this.persistenceUnitInfoNames.clear()__		this.persistenceUnitInfos.clear()___		List<SpringPersistenceUnitInfo> puis = readPersistenceUnitInfos()__		for (SpringPersistenceUnitInfo pui : puis) {_			if (pui.getPersistenceUnitRootUrl() == null) {_				pui.setPersistenceUnitRootUrl(determineDefaultPersistenceUnitRootUrl())__			}_			if (pui.getJtaDataSource() == null) {_				pui.setJtaDataSource(this.defaultJtaDataSource)__			}_			if (pui.getNonJtaDataSource() == null) {_				pui.setNonJtaDataSource(this.defaultDataSource)__			}_			if (this.sharedCacheMode != null) {_				pui.setSharedCacheMode(this.sharedCacheMode)__			}_			if (this.validationMode != null) {_				pui.setValidationMode(this.validationMode)__			}_			if (this.loadTimeWeaver != null) {_				pui.init(this.loadTimeWeaver)__			}_			else {_				pui.init(this.resourcePatternResolver.getClassLoader())__			}_			postProcessPersistenceUnitInfo(pui)__			String name = pui.getPersistenceUnitName()__			if (!this.persistenceUnitInfoNames.add(name) && !isPersistenceUnitOverrideAllowed()) {_				StringBuilder msg = new StringBuilder()__				msg.append("Conflicting persistence unit definitions for name '").append(name).append("': ")__				msg.append(pui.getPersistenceUnitRootUrl()).append(", ")__				msg.append(this.persistenceUnitInfos.get(name).getPersistenceUnitRootUrl())__				throw new IllegalStateException(msg.toString())__			}_			this.persistenceUnitInfos.put(name, pui)__		}_	};prepare,the,persistence,unit,infos,according,to,the,configuration,of,this,manager,scanning,for,code,persistence,xml,files,parsing,all,matching,files,configuring,and,post,processing,them,p,persistence,unit,infos,cannot,be,obtained,before,this,preparation,method,has,been,invoked,see,obtain,default,persistence,unit,info,see,obtain,persistence,unit,info,string;public,void,prepare,persistence,unit,infos,this,persistence,unit,info,names,clear,this,persistence,unit,infos,clear,list,spring,persistence,unit,info,puis,read,persistence,unit,infos,for,spring,persistence,unit,info,pui,puis,if,pui,get,persistence,unit,root,url,null,pui,set,persistence,unit,root,url,determine,default,persistence,unit,root,url,if,pui,get,jta,data,source,null,pui,set,jta,data,source,this,default,jta,data,source,if,pui,get,non,jta,data,source,null,pui,set,non,jta,data,source,this,default,data,source,if,this,shared,cache,mode,null,pui,set,shared,cache,mode,this,shared,cache,mode,if,this,validation,mode,null,pui,set,validation,mode,this,validation,mode,if,this,load,time,weaver,null,pui,init,this,load,time,weaver,else,pui,init,this,resource,pattern,resolver,get,class,loader,post,process,persistence,unit,info,pui,string,name,pui,get,persistence,unit,name,if,this,persistence,unit,info,names,add,name,is,persistence,unit,override,allowed,string,builder,msg,new,string,builder,msg,append,conflicting,persistence,unit,definitions,for,name,append,name,append,msg,append,pui,get,persistence,unit,root,url,append,msg,append,this,persistence,unit,infos,get,name,get,persistence,unit,root,url,throw,new,illegal,state,exception,msg,to,string,this,persistence,unit,infos,put,name,pui
DefaultPersistenceUnitManager -> public void preparePersistenceUnitInfos();1400140571;Prepare the PersistenceUnitInfos according to the configuration_of this manager: scanning for {@code persistence.xml} files,_parsing all matching files, configuring and post-processing them._<p>PersistenceUnitInfos cannot be obtained before this preparation_method has been invoked._@see #obtainDefaultPersistenceUnitInfo()_@see #obtainPersistenceUnitInfo(String);public void preparePersistenceUnitInfos() {_		this.persistenceUnitInfoNames.clear()__		this.persistenceUnitInfos.clear()___		List<SpringPersistenceUnitInfo> puis = readPersistenceUnitInfos()__		for (SpringPersistenceUnitInfo pui : puis) {_			if (pui.getPersistenceUnitRootUrl() == null) {_				pui.setPersistenceUnitRootUrl(determineDefaultPersistenceUnitRootUrl())__			}_			if (pui.getJtaDataSource() == null) {_				pui.setJtaDataSource(this.defaultJtaDataSource)__			}_			if (pui.getNonJtaDataSource() == null) {_				pui.setNonJtaDataSource(this.defaultDataSource)__			}_			if (this.sharedCacheMode != null) {_				pui.setSharedCacheMode(this.sharedCacheMode)__			}_			if (this.validationMode != null) {_				pui.setValidationMode(this.validationMode)__			}_			if (this.loadTimeWeaver != null) {_				pui.init(this.loadTimeWeaver)__			}_			else {_				pui.init(this.resourcePatternResolver.getClassLoader())__			}_			postProcessPersistenceUnitInfo(pui)__			String name = pui.getPersistenceUnitName()__			if (!this.persistenceUnitInfoNames.add(name) && !isPersistenceUnitOverrideAllowed()) {_				StringBuilder msg = new StringBuilder()__				msg.append("Conflicting persistence unit definitions for name '").append(name).append("': ")__				msg.append(pui.getPersistenceUnitRootUrl()).append(", ")__				msg.append(this.persistenceUnitInfos.get(name).getPersistenceUnitRootUrl())__				throw new IllegalStateException(msg.toString())__			}_			this.persistenceUnitInfos.put(name, pui)__		}_	};prepare,the,persistence,unit,infos,according,to,the,configuration,of,this,manager,scanning,for,code,persistence,xml,files,parsing,all,matching,files,configuring,and,post,processing,them,p,persistence,unit,infos,cannot,be,obtained,before,this,preparation,method,has,been,invoked,see,obtain,default,persistence,unit,info,see,obtain,persistence,unit,info,string;public,void,prepare,persistence,unit,infos,this,persistence,unit,info,names,clear,this,persistence,unit,infos,clear,list,spring,persistence,unit,info,puis,read,persistence,unit,infos,for,spring,persistence,unit,info,pui,puis,if,pui,get,persistence,unit,root,url,null,pui,set,persistence,unit,root,url,determine,default,persistence,unit,root,url,if,pui,get,jta,data,source,null,pui,set,jta,data,source,this,default,jta,data,source,if,pui,get,non,jta,data,source,null,pui,set,non,jta,data,source,this,default,data,source,if,this,shared,cache,mode,null,pui,set,shared,cache,mode,this,shared,cache,mode,if,this,validation,mode,null,pui,set,validation,mode,this,validation,mode,if,this,load,time,weaver,null,pui,init,this,load,time,weaver,else,pui,init,this,resource,pattern,resolver,get,class,loader,post,process,persistence,unit,info,pui,string,name,pui,get,persistence,unit,name,if,this,persistence,unit,info,names,add,name,is,persistence,unit,override,allowed,string,builder,msg,new,string,builder,msg,append,conflicting,persistence,unit,definitions,for,name,append,name,append,msg,append,pui,get,persistence,unit,root,url,append,msg,append,this,persistence,unit,infos,get,name,get,persistence,unit,root,url,throw,new,illegal,state,exception,msg,to,string,this,persistence,unit,infos,put,name,pui
DefaultPersistenceUnitManager -> public void preparePersistenceUnitInfos();1403774750;Prepare the PersistenceUnitInfos according to the configuration_of this manager: scanning for {@code persistence.xml} files,_parsing all matching files, configuring and post-processing them._<p>PersistenceUnitInfos cannot be obtained before this preparation_method has been invoked._@see #obtainDefaultPersistenceUnitInfo()_@see #obtainPersistenceUnitInfo(String);public void preparePersistenceUnitInfos() {_		this.persistenceUnitInfoNames.clear()__		this.persistenceUnitInfos.clear()___		List<SpringPersistenceUnitInfo> puis = readPersistenceUnitInfos()__		for (SpringPersistenceUnitInfo pui : puis) {_			if (pui.getPersistenceUnitRootUrl() == null) {_				pui.setPersistenceUnitRootUrl(determineDefaultPersistenceUnitRootUrl())__			}_			if (pui.getJtaDataSource() == null) {_				pui.setJtaDataSource(this.defaultJtaDataSource)__			}_			if (pui.getNonJtaDataSource() == null) {_				pui.setNonJtaDataSource(this.defaultDataSource)__			}_			if (this.sharedCacheMode != null) {_				pui.setSharedCacheMode(this.sharedCacheMode)__			}_			if (this.validationMode != null) {_				pui.setValidationMode(this.validationMode)__			}_			if (this.loadTimeWeaver != null) {_				pui.init(this.loadTimeWeaver)__			}_			else {_				pui.init(this.resourcePatternResolver.getClassLoader())__			}_			postProcessPersistenceUnitInfo(pui)__			String name = pui.getPersistenceUnitName()__			if (!this.persistenceUnitInfoNames.add(name) && !isPersistenceUnitOverrideAllowed()) {_				StringBuilder msg = new StringBuilder()__				msg.append("Conflicting persistence unit definitions for name '").append(name).append("': ")__				msg.append(pui.getPersistenceUnitRootUrl()).append(", ")__				msg.append(this.persistenceUnitInfos.get(name).getPersistenceUnitRootUrl())__				throw new IllegalStateException(msg.toString())__			}_			this.persistenceUnitInfos.put(name, pui)__		}_	};prepare,the,persistence,unit,infos,according,to,the,configuration,of,this,manager,scanning,for,code,persistence,xml,files,parsing,all,matching,files,configuring,and,post,processing,them,p,persistence,unit,infos,cannot,be,obtained,before,this,preparation,method,has,been,invoked,see,obtain,default,persistence,unit,info,see,obtain,persistence,unit,info,string;public,void,prepare,persistence,unit,infos,this,persistence,unit,info,names,clear,this,persistence,unit,infos,clear,list,spring,persistence,unit,info,puis,read,persistence,unit,infos,for,spring,persistence,unit,info,pui,puis,if,pui,get,persistence,unit,root,url,null,pui,set,persistence,unit,root,url,determine,default,persistence,unit,root,url,if,pui,get,jta,data,source,null,pui,set,jta,data,source,this,default,jta,data,source,if,pui,get,non,jta,data,source,null,pui,set,non,jta,data,source,this,default,data,source,if,this,shared,cache,mode,null,pui,set,shared,cache,mode,this,shared,cache,mode,if,this,validation,mode,null,pui,set,validation,mode,this,validation,mode,if,this,load,time,weaver,null,pui,init,this,load,time,weaver,else,pui,init,this,resource,pattern,resolver,get,class,loader,post,process,persistence,unit,info,pui,string,name,pui,get,persistence,unit,name,if,this,persistence,unit,info,names,add,name,is,persistence,unit,override,allowed,string,builder,msg,new,string,builder,msg,append,conflicting,persistence,unit,definitions,for,name,append,name,append,msg,append,pui,get,persistence,unit,root,url,append,msg,append,this,persistence,unit,infos,get,name,get,persistence,unit,root,url,throw,new,illegal,state,exception,msg,to,string,this,persistence,unit,infos,put,name,pui
DefaultPersistenceUnitManager -> public void preparePersistenceUnitInfos();1404056186;Prepare the PersistenceUnitInfos according to the configuration_of this manager: scanning for {@code persistence.xml} files,_parsing all matching files, configuring and post-processing them._<p>PersistenceUnitInfos cannot be obtained before this preparation_method has been invoked._@see #obtainDefaultPersistenceUnitInfo()_@see #obtainPersistenceUnitInfo(String);public void preparePersistenceUnitInfos() {_		this.persistenceUnitInfoNames.clear()__		this.persistenceUnitInfos.clear()___		List<SpringPersistenceUnitInfo> puis = readPersistenceUnitInfos()__		for (SpringPersistenceUnitInfo pui : puis) {_			if (pui.getPersistenceUnitRootUrl() == null) {_				pui.setPersistenceUnitRootUrl(determineDefaultPersistenceUnitRootUrl())__			}_			if (pui.getJtaDataSource() == null) {_				pui.setJtaDataSource(this.defaultJtaDataSource)__			}_			if (pui.getNonJtaDataSource() == null) {_				pui.setNonJtaDataSource(this.defaultDataSource)__			}_			if (this.sharedCacheMode != null) {_				pui.setSharedCacheMode(this.sharedCacheMode)__			}_			if (this.validationMode != null) {_				pui.setValidationMode(this.validationMode)__			}_			if (this.loadTimeWeaver != null) {_				pui.init(this.loadTimeWeaver)__			}_			else {_				pui.init(this.resourcePatternResolver.getClassLoader())__			}_			postProcessPersistenceUnitInfo(pui)__			String name = pui.getPersistenceUnitName()__			if (!this.persistenceUnitInfoNames.add(name) && !isPersistenceUnitOverrideAllowed()) {_				StringBuilder msg = new StringBuilder()__				msg.append("Conflicting persistence unit definitions for name '").append(name).append("': ")__				msg.append(pui.getPersistenceUnitRootUrl()).append(", ")__				msg.append(this.persistenceUnitInfos.get(name).getPersistenceUnitRootUrl())__				throw new IllegalStateException(msg.toString())__			}_			this.persistenceUnitInfos.put(name, pui)__		}_	};prepare,the,persistence,unit,infos,according,to,the,configuration,of,this,manager,scanning,for,code,persistence,xml,files,parsing,all,matching,files,configuring,and,post,processing,them,p,persistence,unit,infos,cannot,be,obtained,before,this,preparation,method,has,been,invoked,see,obtain,default,persistence,unit,info,see,obtain,persistence,unit,info,string;public,void,prepare,persistence,unit,infos,this,persistence,unit,info,names,clear,this,persistence,unit,infos,clear,list,spring,persistence,unit,info,puis,read,persistence,unit,infos,for,spring,persistence,unit,info,pui,puis,if,pui,get,persistence,unit,root,url,null,pui,set,persistence,unit,root,url,determine,default,persistence,unit,root,url,if,pui,get,jta,data,source,null,pui,set,jta,data,source,this,default,jta,data,source,if,pui,get,non,jta,data,source,null,pui,set,non,jta,data,source,this,default,data,source,if,this,shared,cache,mode,null,pui,set,shared,cache,mode,this,shared,cache,mode,if,this,validation,mode,null,pui,set,validation,mode,this,validation,mode,if,this,load,time,weaver,null,pui,init,this,load,time,weaver,else,pui,init,this,resource,pattern,resolver,get,class,loader,post,process,persistence,unit,info,pui,string,name,pui,get,persistence,unit,name,if,this,persistence,unit,info,names,add,name,is,persistence,unit,override,allowed,string,builder,msg,new,string,builder,msg,append,conflicting,persistence,unit,definitions,for,name,append,name,append,msg,append,pui,get,persistence,unit,root,url,append,msg,append,this,persistence,unit,infos,get,name,get,persistence,unit,root,url,throw,new,illegal,state,exception,msg,to,string,this,persistence,unit,infos,put,name,pui
DefaultPersistenceUnitManager -> public void preparePersistenceUnitInfos();1447323728;Prepare the PersistenceUnitInfos according to the configuration_of this manager: scanning for {@code persistence.xml} files,_parsing all matching files, configuring and post-processing them._<p>PersistenceUnitInfos cannot be obtained before this preparation_method has been invoked._@see #obtainDefaultPersistenceUnitInfo()_@see #obtainPersistenceUnitInfo(String);public void preparePersistenceUnitInfos() {_		this.persistenceUnitInfoNames.clear()__		this.persistenceUnitInfos.clear()___		List<SpringPersistenceUnitInfo> puis = readPersistenceUnitInfos()__		for (SpringPersistenceUnitInfo pui : puis) {_			if (pui.getPersistenceUnitRootUrl() == null) {_				pui.setPersistenceUnitRootUrl(determineDefaultPersistenceUnitRootUrl())__			}_			if (pui.getJtaDataSource() == null) {_				pui.setJtaDataSource(this.defaultJtaDataSource)__			}_			if (pui.getNonJtaDataSource() == null) {_				pui.setNonJtaDataSource(this.defaultDataSource)__			}_			if (this.sharedCacheMode != null) {_				pui.setSharedCacheMode(this.sharedCacheMode)__			}_			if (this.validationMode != null) {_				pui.setValidationMode(this.validationMode)__			}_			if (this.loadTimeWeaver != null) {_				pui.init(this.loadTimeWeaver)__			}_			else {_				pui.init(this.resourcePatternResolver.getClassLoader())__			}_			postProcessPersistenceUnitInfo(pui)__			String name = pui.getPersistenceUnitName()__			if (!this.persistenceUnitInfoNames.add(name) && !isPersistenceUnitOverrideAllowed()) {_				StringBuilder msg = new StringBuilder()__				msg.append("Conflicting persistence unit definitions for name '").append(name).append("': ")__				msg.append(pui.getPersistenceUnitRootUrl()).append(", ")__				msg.append(this.persistenceUnitInfos.get(name).getPersistenceUnitRootUrl())__				throw new IllegalStateException(msg.toString())__			}_			this.persistenceUnitInfos.put(name, pui)__		}_	};prepare,the,persistence,unit,infos,according,to,the,configuration,of,this,manager,scanning,for,code,persistence,xml,files,parsing,all,matching,files,configuring,and,post,processing,them,p,persistence,unit,infos,cannot,be,obtained,before,this,preparation,method,has,been,invoked,see,obtain,default,persistence,unit,info,see,obtain,persistence,unit,info,string;public,void,prepare,persistence,unit,infos,this,persistence,unit,info,names,clear,this,persistence,unit,infos,clear,list,spring,persistence,unit,info,puis,read,persistence,unit,infos,for,spring,persistence,unit,info,pui,puis,if,pui,get,persistence,unit,root,url,null,pui,set,persistence,unit,root,url,determine,default,persistence,unit,root,url,if,pui,get,jta,data,source,null,pui,set,jta,data,source,this,default,jta,data,source,if,pui,get,non,jta,data,source,null,pui,set,non,jta,data,source,this,default,data,source,if,this,shared,cache,mode,null,pui,set,shared,cache,mode,this,shared,cache,mode,if,this,validation,mode,null,pui,set,validation,mode,this,validation,mode,if,this,load,time,weaver,null,pui,init,this,load,time,weaver,else,pui,init,this,resource,pattern,resolver,get,class,loader,post,process,persistence,unit,info,pui,string,name,pui,get,persistence,unit,name,if,this,persistence,unit,info,names,add,name,is,persistence,unit,override,allowed,string,builder,msg,new,string,builder,msg,append,conflicting,persistence,unit,definitions,for,name,append,name,append,msg,append,pui,get,persistence,unit,root,url,append,msg,append,this,persistence,unit,infos,get,name,get,persistence,unit,root,url,throw,new,illegal,state,exception,msg,to,string,this,persistence,unit,infos,put,name,pui
DefaultPersistenceUnitManager -> public void preparePersistenceUnitInfos();1464299869;Prepare the PersistenceUnitInfos according to the configuration_of this manager: scanning for {@code persistence.xml} files,_parsing all matching files, configuring and post-processing them._<p>PersistenceUnitInfos cannot be obtained before this preparation_method has been invoked._@see #obtainDefaultPersistenceUnitInfo()_@see #obtainPersistenceUnitInfo(String);public void preparePersistenceUnitInfos() {_		this.persistenceUnitInfoNames.clear()__		this.persistenceUnitInfos.clear()___		List<SpringPersistenceUnitInfo> puis = readPersistenceUnitInfos()__		for (SpringPersistenceUnitInfo pui : puis) {_			if (pui.getPersistenceUnitRootUrl() == null) {_				pui.setPersistenceUnitRootUrl(determineDefaultPersistenceUnitRootUrl())__			}_			if (pui.getJtaDataSource() == null) {_				pui.setJtaDataSource(this.defaultJtaDataSource)__			}_			if (pui.getNonJtaDataSource() == null) {_				pui.setNonJtaDataSource(this.defaultDataSource)__			}_			if (this.sharedCacheMode != null) {_				pui.setSharedCacheMode(this.sharedCacheMode)__			}_			if (this.validationMode != null) {_				pui.setValidationMode(this.validationMode)__			}_			if (this.loadTimeWeaver != null) {_				pui.init(this.loadTimeWeaver)__			}_			else {_				pui.init(this.resourcePatternResolver.getClassLoader())__			}_			postProcessPersistenceUnitInfo(pui)__			String name = pui.getPersistenceUnitName()__			if (!this.persistenceUnitInfoNames.add(name) && !isPersistenceUnitOverrideAllowed()) {_				StringBuilder msg = new StringBuilder()__				msg.append("Conflicting persistence unit definitions for name '").append(name).append("': ")__				msg.append(pui.getPersistenceUnitRootUrl()).append(", ")__				msg.append(this.persistenceUnitInfos.get(name).getPersistenceUnitRootUrl())__				throw new IllegalStateException(msg.toString())__			}_			this.persistenceUnitInfos.put(name, pui)__		}_	};prepare,the,persistence,unit,infos,according,to,the,configuration,of,this,manager,scanning,for,code,persistence,xml,files,parsing,all,matching,files,configuring,and,post,processing,them,p,persistence,unit,infos,cannot,be,obtained,before,this,preparation,method,has,been,invoked,see,obtain,default,persistence,unit,info,see,obtain,persistence,unit,info,string;public,void,prepare,persistence,unit,infos,this,persistence,unit,info,names,clear,this,persistence,unit,infos,clear,list,spring,persistence,unit,info,puis,read,persistence,unit,infos,for,spring,persistence,unit,info,pui,puis,if,pui,get,persistence,unit,root,url,null,pui,set,persistence,unit,root,url,determine,default,persistence,unit,root,url,if,pui,get,jta,data,source,null,pui,set,jta,data,source,this,default,jta,data,source,if,pui,get,non,jta,data,source,null,pui,set,non,jta,data,source,this,default,data,source,if,this,shared,cache,mode,null,pui,set,shared,cache,mode,this,shared,cache,mode,if,this,validation,mode,null,pui,set,validation,mode,this,validation,mode,if,this,load,time,weaver,null,pui,init,this,load,time,weaver,else,pui,init,this,resource,pattern,resolver,get,class,loader,post,process,persistence,unit,info,pui,string,name,pui,get,persistence,unit,name,if,this,persistence,unit,info,names,add,name,is,persistence,unit,override,allowed,string,builder,msg,new,string,builder,msg,append,conflicting,persistence,unit,definitions,for,name,append,name,append,msg,append,pui,get,persistence,unit,root,url,append,msg,append,this,persistence,unit,infos,get,name,get,persistence,unit,root,url,throw,new,illegal,state,exception,msg,to,string,this,persistence,unit,infos,put,name,pui
DefaultPersistenceUnitManager -> public void preparePersistenceUnitInfos();1467668243;Prepare the PersistenceUnitInfos according to the configuration_of this manager: scanning for {@code persistence.xml} files,_parsing all matching files, configuring and post-processing them._<p>PersistenceUnitInfos cannot be obtained before this preparation_method has been invoked._@see #obtainDefaultPersistenceUnitInfo()_@see #obtainPersistenceUnitInfo(String);public void preparePersistenceUnitInfos() {_		this.persistenceUnitInfoNames.clear()__		this.persistenceUnitInfos.clear()___		List<SpringPersistenceUnitInfo> puis = readPersistenceUnitInfos()__		for (SpringPersistenceUnitInfo pui : puis) {_			if (pui.getPersistenceUnitRootUrl() == null) {_				pui.setPersistenceUnitRootUrl(determineDefaultPersistenceUnitRootUrl())__			}_			if (pui.getJtaDataSource() == null) {_				pui.setJtaDataSource(this.defaultJtaDataSource)__			}_			if (pui.getNonJtaDataSource() == null) {_				pui.setNonJtaDataSource(this.defaultDataSource)__			}_			if (this.sharedCacheMode != null) {_				pui.setSharedCacheMode(this.sharedCacheMode)__			}_			if (this.validationMode != null) {_				pui.setValidationMode(this.validationMode)__			}_			if (this.loadTimeWeaver != null) {_				pui.init(this.loadTimeWeaver)__			}_			else {_				pui.init(this.resourcePatternResolver.getClassLoader())__			}_			postProcessPersistenceUnitInfo(pui)__			String name = pui.getPersistenceUnitName()__			if (!this.persistenceUnitInfoNames.add(name) && !isPersistenceUnitOverrideAllowed()) {_				StringBuilder msg = new StringBuilder()__				msg.append("Conflicting persistence unit definitions for name '").append(name).append("': ")__				msg.append(pui.getPersistenceUnitRootUrl()).append(", ")__				msg.append(this.persistenceUnitInfos.get(name).getPersistenceUnitRootUrl())__				throw new IllegalStateException(msg.toString())__			}_			this.persistenceUnitInfos.put(name, pui)__		}_	};prepare,the,persistence,unit,infos,according,to,the,configuration,of,this,manager,scanning,for,code,persistence,xml,files,parsing,all,matching,files,configuring,and,post,processing,them,p,persistence,unit,infos,cannot,be,obtained,before,this,preparation,method,has,been,invoked,see,obtain,default,persistence,unit,info,see,obtain,persistence,unit,info,string;public,void,prepare,persistence,unit,infos,this,persistence,unit,info,names,clear,this,persistence,unit,infos,clear,list,spring,persistence,unit,info,puis,read,persistence,unit,infos,for,spring,persistence,unit,info,pui,puis,if,pui,get,persistence,unit,root,url,null,pui,set,persistence,unit,root,url,determine,default,persistence,unit,root,url,if,pui,get,jta,data,source,null,pui,set,jta,data,source,this,default,jta,data,source,if,pui,get,non,jta,data,source,null,pui,set,non,jta,data,source,this,default,data,source,if,this,shared,cache,mode,null,pui,set,shared,cache,mode,this,shared,cache,mode,if,this,validation,mode,null,pui,set,validation,mode,this,validation,mode,if,this,load,time,weaver,null,pui,init,this,load,time,weaver,else,pui,init,this,resource,pattern,resolver,get,class,loader,post,process,persistence,unit,info,pui,string,name,pui,get,persistence,unit,name,if,this,persistence,unit,info,names,add,name,is,persistence,unit,override,allowed,string,builder,msg,new,string,builder,msg,append,conflicting,persistence,unit,definitions,for,name,append,name,append,msg,append,pui,get,persistence,unit,root,url,append,msg,append,this,persistence,unit,infos,get,name,get,persistence,unit,root,url,throw,new,illegal,state,exception,msg,to,string,this,persistence,unit,infos,put,name,pui
DefaultPersistenceUnitManager -> public void preparePersistenceUnitInfos();1467730834;Prepare the PersistenceUnitInfos according to the configuration_of this manager: scanning for {@code persistence.xml} files,_parsing all matching files, configuring and post-processing them._<p>PersistenceUnitInfos cannot be obtained before this preparation_method has been invoked._@see #obtainDefaultPersistenceUnitInfo()_@see #obtainPersistenceUnitInfo(String);public void preparePersistenceUnitInfos() {_		this.persistenceUnitInfoNames.clear()__		this.persistenceUnitInfos.clear()___		List<SpringPersistenceUnitInfo> puis = readPersistenceUnitInfos()__		for (SpringPersistenceUnitInfo pui : puis) {_			if (pui.getPersistenceUnitRootUrl() == null) {_				pui.setPersistenceUnitRootUrl(determineDefaultPersistenceUnitRootUrl())__			}_			if (pui.getJtaDataSource() == null) {_				pui.setJtaDataSource(this.defaultJtaDataSource)__			}_			if (pui.getNonJtaDataSource() == null) {_				pui.setNonJtaDataSource(this.defaultDataSource)__			}_			if (this.sharedCacheMode != null) {_				pui.setSharedCacheMode(this.sharedCacheMode)__			}_			if (this.validationMode != null) {_				pui.setValidationMode(this.validationMode)__			}_			if (this.loadTimeWeaver != null) {_				pui.init(this.loadTimeWeaver)__			}_			else {_				pui.init(this.resourcePatternResolver.getClassLoader())__			}_			postProcessPersistenceUnitInfo(pui)__			String name = pui.getPersistenceUnitName()__			if (!this.persistenceUnitInfoNames.add(name) && !isPersistenceUnitOverrideAllowed()) {_				StringBuilder msg = new StringBuilder()__				msg.append("Conflicting persistence unit definitions for name '").append(name).append("': ")__				msg.append(pui.getPersistenceUnitRootUrl()).append(", ")__				msg.append(this.persistenceUnitInfos.get(name).getPersistenceUnitRootUrl())__				throw new IllegalStateException(msg.toString())__			}_			this.persistenceUnitInfos.put(name, pui)__		}_	};prepare,the,persistence,unit,infos,according,to,the,configuration,of,this,manager,scanning,for,code,persistence,xml,files,parsing,all,matching,files,configuring,and,post,processing,them,p,persistence,unit,infos,cannot,be,obtained,before,this,preparation,method,has,been,invoked,see,obtain,default,persistence,unit,info,see,obtain,persistence,unit,info,string;public,void,prepare,persistence,unit,infos,this,persistence,unit,info,names,clear,this,persistence,unit,infos,clear,list,spring,persistence,unit,info,puis,read,persistence,unit,infos,for,spring,persistence,unit,info,pui,puis,if,pui,get,persistence,unit,root,url,null,pui,set,persistence,unit,root,url,determine,default,persistence,unit,root,url,if,pui,get,jta,data,source,null,pui,set,jta,data,source,this,default,jta,data,source,if,pui,get,non,jta,data,source,null,pui,set,non,jta,data,source,this,default,data,source,if,this,shared,cache,mode,null,pui,set,shared,cache,mode,this,shared,cache,mode,if,this,validation,mode,null,pui,set,validation,mode,this,validation,mode,if,this,load,time,weaver,null,pui,init,this,load,time,weaver,else,pui,init,this,resource,pattern,resolver,get,class,loader,post,process,persistence,unit,info,pui,string,name,pui,get,persistence,unit,name,if,this,persistence,unit,info,names,add,name,is,persistence,unit,override,allowed,string,builder,msg,new,string,builder,msg,append,conflicting,persistence,unit,definitions,for,name,append,name,append,msg,append,pui,get,persistence,unit,root,url,append,msg,append,this,persistence,unit,infos,get,name,get,persistence,unit,root,url,throw,new,illegal,state,exception,msg,to,string,this,persistence,unit,infos,put,name,pui
DefaultPersistenceUnitManager -> public void preparePersistenceUnitInfos();1471464767;Prepare the PersistenceUnitInfos according to the configuration_of this manager: scanning for {@code persistence.xml} files,_parsing all matching files, configuring and post-processing them._<p>PersistenceUnitInfos cannot be obtained before this preparation_method has been invoked._@see #obtainDefaultPersistenceUnitInfo()_@see #obtainPersistenceUnitInfo(String);public void preparePersistenceUnitInfos() {_		this.persistenceUnitInfoNames.clear()__		this.persistenceUnitInfos.clear()___		List<SpringPersistenceUnitInfo> puis = readPersistenceUnitInfos()__		for (SpringPersistenceUnitInfo pui : puis) {_			if (pui.getPersistenceUnitRootUrl() == null) {_				pui.setPersistenceUnitRootUrl(determineDefaultPersistenceUnitRootUrl())__			}_			if (pui.getJtaDataSource() == null) {_				pui.setJtaDataSource(this.defaultJtaDataSource)__			}_			if (pui.getNonJtaDataSource() == null) {_				pui.setNonJtaDataSource(this.defaultDataSource)__			}_			if (this.sharedCacheMode != null) {_				pui.setSharedCacheMode(this.sharedCacheMode)__			}_			if (this.validationMode != null) {_				pui.setValidationMode(this.validationMode)__			}_			if (this.loadTimeWeaver != null) {_				pui.init(this.loadTimeWeaver)__			}_			else {_				pui.init(this.resourcePatternResolver.getClassLoader())__			}_			postProcessPersistenceUnitInfo(pui)__			String name = pui.getPersistenceUnitName()__			if (!this.persistenceUnitInfoNames.add(name) && !isPersistenceUnitOverrideAllowed()) {_				StringBuilder msg = new StringBuilder()__				msg.append("Conflicting persistence unit definitions for name '").append(name).append("': ")__				msg.append(pui.getPersistenceUnitRootUrl()).append(", ")__				msg.append(this.persistenceUnitInfos.get(name).getPersistenceUnitRootUrl())__				throw new IllegalStateException(msg.toString())__			}_			this.persistenceUnitInfos.put(name, pui)__		}_	};prepare,the,persistence,unit,infos,according,to,the,configuration,of,this,manager,scanning,for,code,persistence,xml,files,parsing,all,matching,files,configuring,and,post,processing,them,p,persistence,unit,infos,cannot,be,obtained,before,this,preparation,method,has,been,invoked,see,obtain,default,persistence,unit,info,see,obtain,persistence,unit,info,string;public,void,prepare,persistence,unit,infos,this,persistence,unit,info,names,clear,this,persistence,unit,infos,clear,list,spring,persistence,unit,info,puis,read,persistence,unit,infos,for,spring,persistence,unit,info,pui,puis,if,pui,get,persistence,unit,root,url,null,pui,set,persistence,unit,root,url,determine,default,persistence,unit,root,url,if,pui,get,jta,data,source,null,pui,set,jta,data,source,this,default,jta,data,source,if,pui,get,non,jta,data,source,null,pui,set,non,jta,data,source,this,default,data,source,if,this,shared,cache,mode,null,pui,set,shared,cache,mode,this,shared,cache,mode,if,this,validation,mode,null,pui,set,validation,mode,this,validation,mode,if,this,load,time,weaver,null,pui,init,this,load,time,weaver,else,pui,init,this,resource,pattern,resolver,get,class,loader,post,process,persistence,unit,info,pui,string,name,pui,get,persistence,unit,name,if,this,persistence,unit,info,names,add,name,is,persistence,unit,override,allowed,string,builder,msg,new,string,builder,msg,append,conflicting,persistence,unit,definitions,for,name,append,name,append,msg,append,pui,get,persistence,unit,root,url,append,msg,append,this,persistence,unit,infos,get,name,get,persistence,unit,root,url,throw,new,illegal,state,exception,msg,to,string,this,persistence,unit,infos,put,name,pui
DefaultPersistenceUnitManager -> public void preparePersistenceUnitInfos();1472736647;Prepare the PersistenceUnitInfos according to the configuration_of this manager: scanning for {@code persistence.xml} files,_parsing all matching files, configuring and post-processing them._<p>PersistenceUnitInfos cannot be obtained before this preparation_method has been invoked._@see #obtainDefaultPersistenceUnitInfo()_@see #obtainPersistenceUnitInfo(String);public void preparePersistenceUnitInfos() {_		this.persistenceUnitInfoNames.clear()__		this.persistenceUnitInfos.clear()___		List<SpringPersistenceUnitInfo> puis = readPersistenceUnitInfos()__		for (SpringPersistenceUnitInfo pui : puis) {_			if (pui.getPersistenceUnitRootUrl() == null) {_				pui.setPersistenceUnitRootUrl(determineDefaultPersistenceUnitRootUrl())__			}_			if (pui.getJtaDataSource() == null) {_				pui.setJtaDataSource(this.defaultJtaDataSource)__			}_			if (pui.getNonJtaDataSource() == null) {_				pui.setNonJtaDataSource(this.defaultDataSource)__			}_			if (this.sharedCacheMode != null) {_				pui.setSharedCacheMode(this.sharedCacheMode)__			}_			if (this.validationMode != null) {_				pui.setValidationMode(this.validationMode)__			}_			if (this.loadTimeWeaver != null) {_				pui.init(this.loadTimeWeaver)__			}_			else {_				pui.init(this.resourcePatternResolver.getClassLoader())__			}_			postProcessPersistenceUnitInfo(pui)__			String name = pui.getPersistenceUnitName()__			if (!this.persistenceUnitInfoNames.add(name) && !isPersistenceUnitOverrideAllowed()) {_				StringBuilder msg = new StringBuilder()__				msg.append("Conflicting persistence unit definitions for name '").append(name).append("': ")__				msg.append(pui.getPersistenceUnitRootUrl()).append(", ")__				msg.append(this.persistenceUnitInfos.get(name).getPersistenceUnitRootUrl())__				throw new IllegalStateException(msg.toString())__			}_			this.persistenceUnitInfos.put(name, pui)__		}_	};prepare,the,persistence,unit,infos,according,to,the,configuration,of,this,manager,scanning,for,code,persistence,xml,files,parsing,all,matching,files,configuring,and,post,processing,them,p,persistence,unit,infos,cannot,be,obtained,before,this,preparation,method,has,been,invoked,see,obtain,default,persistence,unit,info,see,obtain,persistence,unit,info,string;public,void,prepare,persistence,unit,infos,this,persistence,unit,info,names,clear,this,persistence,unit,infos,clear,list,spring,persistence,unit,info,puis,read,persistence,unit,infos,for,spring,persistence,unit,info,pui,puis,if,pui,get,persistence,unit,root,url,null,pui,set,persistence,unit,root,url,determine,default,persistence,unit,root,url,if,pui,get,jta,data,source,null,pui,set,jta,data,source,this,default,jta,data,source,if,pui,get,non,jta,data,source,null,pui,set,non,jta,data,source,this,default,data,source,if,this,shared,cache,mode,null,pui,set,shared,cache,mode,this,shared,cache,mode,if,this,validation,mode,null,pui,set,validation,mode,this,validation,mode,if,this,load,time,weaver,null,pui,init,this,load,time,weaver,else,pui,init,this,resource,pattern,resolver,get,class,loader,post,process,persistence,unit,info,pui,string,name,pui,get,persistence,unit,name,if,this,persistence,unit,info,names,add,name,is,persistence,unit,override,allowed,string,builder,msg,new,string,builder,msg,append,conflicting,persistence,unit,definitions,for,name,append,name,append,msg,append,pui,get,persistence,unit,root,url,append,msg,append,this,persistence,unit,infos,get,name,get,persistence,unit,root,url,throw,new,illegal,state,exception,msg,to,string,this,persistence,unit,infos,put,name,pui
DefaultPersistenceUnitManager -> public void preparePersistenceUnitInfos();1474895745;Prepare the PersistenceUnitInfos according to the configuration_of this manager: scanning for {@code persistence.xml} files,_parsing all matching files, configuring and post-processing them._<p>PersistenceUnitInfos cannot be obtained before this preparation_method has been invoked._@see #obtainDefaultPersistenceUnitInfo()_@see #obtainPersistenceUnitInfo(String);public void preparePersistenceUnitInfos() {_		this.persistenceUnitInfoNames.clear()__		this.persistenceUnitInfos.clear()___		List<SpringPersistenceUnitInfo> puis = readPersistenceUnitInfos()__		for (SpringPersistenceUnitInfo pui : puis) {_			if (pui.getPersistenceUnitRootUrl() == null) {_				pui.setPersistenceUnitRootUrl(determineDefaultPersistenceUnitRootUrl())__			}_			if (pui.getJtaDataSource() == null) {_				pui.setJtaDataSource(this.defaultJtaDataSource)__			}_			if (pui.getNonJtaDataSource() == null) {_				pui.setNonJtaDataSource(this.defaultDataSource)__			}_			if (this.sharedCacheMode != null) {_				pui.setSharedCacheMode(this.sharedCacheMode)__			}_			if (this.validationMode != null) {_				pui.setValidationMode(this.validationMode)__			}_			if (this.loadTimeWeaver != null) {_				pui.init(this.loadTimeWeaver)__			}_			else {_				pui.init(this.resourcePatternResolver.getClassLoader())__			}_			postProcessPersistenceUnitInfo(pui)__			String name = pui.getPersistenceUnitName()__			if (!this.persistenceUnitInfoNames.add(name) && !isPersistenceUnitOverrideAllowed()) {_				StringBuilder msg = new StringBuilder()__				msg.append("Conflicting persistence unit definitions for name '").append(name).append("': ")__				msg.append(pui.getPersistenceUnitRootUrl()).append(", ")__				msg.append(this.persistenceUnitInfos.get(name).getPersistenceUnitRootUrl())__				throw new IllegalStateException(msg.toString())__			}_			this.persistenceUnitInfos.put(name, pui)__		}_	};prepare,the,persistence,unit,infos,according,to,the,configuration,of,this,manager,scanning,for,code,persistence,xml,files,parsing,all,matching,files,configuring,and,post,processing,them,p,persistence,unit,infos,cannot,be,obtained,before,this,preparation,method,has,been,invoked,see,obtain,default,persistence,unit,info,see,obtain,persistence,unit,info,string;public,void,prepare,persistence,unit,infos,this,persistence,unit,info,names,clear,this,persistence,unit,infos,clear,list,spring,persistence,unit,info,puis,read,persistence,unit,infos,for,spring,persistence,unit,info,pui,puis,if,pui,get,persistence,unit,root,url,null,pui,set,persistence,unit,root,url,determine,default,persistence,unit,root,url,if,pui,get,jta,data,source,null,pui,set,jta,data,source,this,default,jta,data,source,if,pui,get,non,jta,data,source,null,pui,set,non,jta,data,source,this,default,data,source,if,this,shared,cache,mode,null,pui,set,shared,cache,mode,this,shared,cache,mode,if,this,validation,mode,null,pui,set,validation,mode,this,validation,mode,if,this,load,time,weaver,null,pui,init,this,load,time,weaver,else,pui,init,this,resource,pattern,resolver,get,class,loader,post,process,persistence,unit,info,pui,string,name,pui,get,persistence,unit,name,if,this,persistence,unit,info,names,add,name,is,persistence,unit,override,allowed,string,builder,msg,new,string,builder,msg,append,conflicting,persistence,unit,definitions,for,name,append,name,append,msg,append,pui,get,persistence,unit,root,url,append,msg,append,this,persistence,unit,infos,get,name,get,persistence,unit,root,url,throw,new,illegal,state,exception,msg,to,string,this,persistence,unit,infos,put,name,pui
DefaultPersistenceUnitManager -> public void preparePersistenceUnitInfos();1495868221;Prepare the PersistenceUnitInfos according to the configuration_of this manager: scanning for {@code persistence.xml} files,_parsing all matching files, configuring and post-processing them._<p>PersistenceUnitInfos cannot be obtained before this preparation_method has been invoked._@see #obtainDefaultPersistenceUnitInfo()_@see #obtainPersistenceUnitInfo(String);public void preparePersistenceUnitInfos() {_		this.persistenceUnitInfoNames.clear()__		this.persistenceUnitInfos.clear()___		List<SpringPersistenceUnitInfo> puis = readPersistenceUnitInfos()__		for (SpringPersistenceUnitInfo pui : puis) {_			if (pui.getPersistenceUnitRootUrl() == null) {_				pui.setPersistenceUnitRootUrl(determineDefaultPersistenceUnitRootUrl())__			}_			if (pui.getJtaDataSource() == null) {_				pui.setJtaDataSource(this.defaultJtaDataSource)__			}_			if (pui.getNonJtaDataSource() == null) {_				pui.setNonJtaDataSource(this.defaultDataSource)__			}_			if (this.sharedCacheMode != null) {_				pui.setSharedCacheMode(this.sharedCacheMode)__			}_			if (this.validationMode != null) {_				pui.setValidationMode(this.validationMode)__			}_			if (this.loadTimeWeaver != null) {_				pui.init(this.loadTimeWeaver)__			}_			else {_				pui.init(this.resourcePatternResolver.getClassLoader())__			}_			postProcessPersistenceUnitInfo(pui)__			String name = pui.getPersistenceUnitName()__			if (!this.persistenceUnitInfoNames.add(name) && !isPersistenceUnitOverrideAllowed()) {_				StringBuilder msg = new StringBuilder()__				msg.append("Conflicting persistence unit definitions for name '").append(name).append("': ")__				msg.append(pui.getPersistenceUnitRootUrl()).append(", ")__				msg.append(this.persistenceUnitInfos.get(name).getPersistenceUnitRootUrl())__				throw new IllegalStateException(msg.toString())__			}_			this.persistenceUnitInfos.put(name, pui)__		}_	};prepare,the,persistence,unit,infos,according,to,the,configuration,of,this,manager,scanning,for,code,persistence,xml,files,parsing,all,matching,files,configuring,and,post,processing,them,p,persistence,unit,infos,cannot,be,obtained,before,this,preparation,method,has,been,invoked,see,obtain,default,persistence,unit,info,see,obtain,persistence,unit,info,string;public,void,prepare,persistence,unit,infos,this,persistence,unit,info,names,clear,this,persistence,unit,infos,clear,list,spring,persistence,unit,info,puis,read,persistence,unit,infos,for,spring,persistence,unit,info,pui,puis,if,pui,get,persistence,unit,root,url,null,pui,set,persistence,unit,root,url,determine,default,persistence,unit,root,url,if,pui,get,jta,data,source,null,pui,set,jta,data,source,this,default,jta,data,source,if,pui,get,non,jta,data,source,null,pui,set,non,jta,data,source,this,default,data,source,if,this,shared,cache,mode,null,pui,set,shared,cache,mode,this,shared,cache,mode,if,this,validation,mode,null,pui,set,validation,mode,this,validation,mode,if,this,load,time,weaver,null,pui,init,this,load,time,weaver,else,pui,init,this,resource,pattern,resolver,get,class,loader,post,process,persistence,unit,info,pui,string,name,pui,get,persistence,unit,name,if,this,persistence,unit,info,names,add,name,is,persistence,unit,override,allowed,string,builder,msg,new,string,builder,msg,append,conflicting,persistence,unit,definitions,for,name,append,name,append,msg,append,pui,get,persistence,unit,root,url,append,msg,append,this,persistence,unit,infos,get,name,get,persistence,unit,root,url,throw,new,illegal,state,exception,msg,to,string,this,persistence,unit,infos,put,name,pui
DefaultPersistenceUnitManager -> public void preparePersistenceUnitInfos();1496259743;Prepare the PersistenceUnitInfos according to the configuration_of this manager: scanning for {@code persistence.xml} files,_parsing all matching files, configuring and post-processing them._<p>PersistenceUnitInfos cannot be obtained before this preparation_method has been invoked._@see #obtainDefaultPersistenceUnitInfo()_@see #obtainPersistenceUnitInfo(String);public void preparePersistenceUnitInfos() {_		this.persistenceUnitInfoNames.clear()__		this.persistenceUnitInfos.clear()___		List<SpringPersistenceUnitInfo> puis = readPersistenceUnitInfos()__		for (SpringPersistenceUnitInfo pui : puis) {_			if (pui.getPersistenceUnitRootUrl() == null) {_				pui.setPersistenceUnitRootUrl(determineDefaultPersistenceUnitRootUrl())__			}_			if (pui.getJtaDataSource() == null) {_				pui.setJtaDataSource(this.defaultJtaDataSource)__			}_			if (pui.getNonJtaDataSource() == null) {_				pui.setNonJtaDataSource(this.defaultDataSource)__			}_			if (this.sharedCacheMode != null) {_				pui.setSharedCacheMode(this.sharedCacheMode)__			}_			if (this.validationMode != null) {_				pui.setValidationMode(this.validationMode)__			}_			if (this.loadTimeWeaver != null) {_				pui.init(this.loadTimeWeaver)__			}_			else {_				pui.init(this.resourcePatternResolver.getClassLoader())__			}_			postProcessPersistenceUnitInfo(pui)__			String name = pui.getPersistenceUnitName()__			if (!this.persistenceUnitInfoNames.add(name) && !isPersistenceUnitOverrideAllowed()) {_				StringBuilder msg = new StringBuilder()__				msg.append("Conflicting persistence unit definitions for name '").append(name).append("': ")__				msg.append(pui.getPersistenceUnitRootUrl()).append(", ")__				msg.append(this.persistenceUnitInfos.get(name).getPersistenceUnitRootUrl())__				throw new IllegalStateException(msg.toString())__			}_			this.persistenceUnitInfos.put(name, pui)__		}_	};prepare,the,persistence,unit,infos,according,to,the,configuration,of,this,manager,scanning,for,code,persistence,xml,files,parsing,all,matching,files,configuring,and,post,processing,them,p,persistence,unit,infos,cannot,be,obtained,before,this,preparation,method,has,been,invoked,see,obtain,default,persistence,unit,info,see,obtain,persistence,unit,info,string;public,void,prepare,persistence,unit,infos,this,persistence,unit,info,names,clear,this,persistence,unit,infos,clear,list,spring,persistence,unit,info,puis,read,persistence,unit,infos,for,spring,persistence,unit,info,pui,puis,if,pui,get,persistence,unit,root,url,null,pui,set,persistence,unit,root,url,determine,default,persistence,unit,root,url,if,pui,get,jta,data,source,null,pui,set,jta,data,source,this,default,jta,data,source,if,pui,get,non,jta,data,source,null,pui,set,non,jta,data,source,this,default,data,source,if,this,shared,cache,mode,null,pui,set,shared,cache,mode,this,shared,cache,mode,if,this,validation,mode,null,pui,set,validation,mode,this,validation,mode,if,this,load,time,weaver,null,pui,init,this,load,time,weaver,else,pui,init,this,resource,pattern,resolver,get,class,loader,post,process,persistence,unit,info,pui,string,name,pui,get,persistence,unit,name,if,this,persistence,unit,info,names,add,name,is,persistence,unit,override,allowed,string,builder,msg,new,string,builder,msg,append,conflicting,persistence,unit,definitions,for,name,append,name,append,msg,append,pui,get,persistence,unit,root,url,append,msg,append,this,persistence,unit,infos,get,name,get,persistence,unit,root,url,throw,new,illegal,state,exception,msg,to,string,this,persistence,unit,infos,put,name,pui
DefaultPersistenceUnitManager -> public void preparePersistenceUnitInfos();1496837955;Prepare the PersistenceUnitInfos according to the configuration_of this manager: scanning for {@code persistence.xml} files,_parsing all matching files, configuring and post-processing them._<p>PersistenceUnitInfos cannot be obtained before this preparation_method has been invoked._@see #obtainDefaultPersistenceUnitInfo()_@see #obtainPersistenceUnitInfo(String);public void preparePersistenceUnitInfos() {_		this.persistenceUnitInfoNames.clear()__		this.persistenceUnitInfos.clear()___		List<SpringPersistenceUnitInfo> puis = readPersistenceUnitInfos()__		for (SpringPersistenceUnitInfo pui : puis) {_			if (pui.getPersistenceUnitRootUrl() == null) {_				pui.setPersistenceUnitRootUrl(determineDefaultPersistenceUnitRootUrl())__			}_			if (pui.getJtaDataSource() == null) {_				pui.setJtaDataSource(this.defaultJtaDataSource)__			}_			if (pui.getNonJtaDataSource() == null) {_				pui.setNonJtaDataSource(this.defaultDataSource)__			}_			if (this.sharedCacheMode != null) {_				pui.setSharedCacheMode(this.sharedCacheMode)__			}_			if (this.validationMode != null) {_				pui.setValidationMode(this.validationMode)__			}_			if (this.loadTimeWeaver != null) {_				pui.init(this.loadTimeWeaver)__			}_			else {_				pui.init(this.resourcePatternResolver.getClassLoader())__			}_			postProcessPersistenceUnitInfo(pui)__			String name = pui.getPersistenceUnitName()__			if (!this.persistenceUnitInfoNames.add(name) && !isPersistenceUnitOverrideAllowed()) {_				StringBuilder msg = new StringBuilder()__				msg.append("Conflicting persistence unit definitions for name '").append(name).append("': ")__				msg.append(pui.getPersistenceUnitRootUrl()).append(", ")__				msg.append(this.persistenceUnitInfos.get(name).getPersistenceUnitRootUrl())__				throw new IllegalStateException(msg.toString())__			}_			this.persistenceUnitInfos.put(name, pui)__		}_	};prepare,the,persistence,unit,infos,according,to,the,configuration,of,this,manager,scanning,for,code,persistence,xml,files,parsing,all,matching,files,configuring,and,post,processing,them,p,persistence,unit,infos,cannot,be,obtained,before,this,preparation,method,has,been,invoked,see,obtain,default,persistence,unit,info,see,obtain,persistence,unit,info,string;public,void,prepare,persistence,unit,infos,this,persistence,unit,info,names,clear,this,persistence,unit,infos,clear,list,spring,persistence,unit,info,puis,read,persistence,unit,infos,for,spring,persistence,unit,info,pui,puis,if,pui,get,persistence,unit,root,url,null,pui,set,persistence,unit,root,url,determine,default,persistence,unit,root,url,if,pui,get,jta,data,source,null,pui,set,jta,data,source,this,default,jta,data,source,if,pui,get,non,jta,data,source,null,pui,set,non,jta,data,source,this,default,data,source,if,this,shared,cache,mode,null,pui,set,shared,cache,mode,this,shared,cache,mode,if,this,validation,mode,null,pui,set,validation,mode,this,validation,mode,if,this,load,time,weaver,null,pui,init,this,load,time,weaver,else,pui,init,this,resource,pattern,resolver,get,class,loader,post,process,persistence,unit,info,pui,string,name,pui,get,persistence,unit,name,if,this,persistence,unit,info,names,add,name,is,persistence,unit,override,allowed,string,builder,msg,new,string,builder,msg,append,conflicting,persistence,unit,definitions,for,name,append,name,append,msg,append,pui,get,persistence,unit,root,url,append,msg,append,this,persistence,unit,infos,get,name,get,persistence,unit,root,url,throw,new,illegal,state,exception,msg,to,string,this,persistence,unit,infos,put,name,pui
DefaultPersistenceUnitManager -> public void preparePersistenceUnitInfos();1498780456;Prepare the PersistenceUnitInfos according to the configuration_of this manager: scanning for {@code persistence.xml} files,_parsing all matching files, configuring and post-processing them._<p>PersistenceUnitInfos cannot be obtained before this preparation_method has been invoked._@see #obtainDefaultPersistenceUnitInfo()_@see #obtainPersistenceUnitInfo(String);public void preparePersistenceUnitInfos() {_		this.persistenceUnitInfoNames.clear()__		this.persistenceUnitInfos.clear()___		List<SpringPersistenceUnitInfo> puis = readPersistenceUnitInfos()__		for (SpringPersistenceUnitInfo pui : puis) {_			if (pui.getPersistenceUnitRootUrl() == null) {_				pui.setPersistenceUnitRootUrl(determineDefaultPersistenceUnitRootUrl())__			}_			if (pui.getJtaDataSource() == null && this.defaultJtaDataSource != null) {_				pui.setJtaDataSource(this.defaultJtaDataSource)__			}_			if (pui.getNonJtaDataSource() == null && this.defaultDataSource != null) {_				pui.setNonJtaDataSource(this.defaultDataSource)__			}_			if (this.sharedCacheMode != null) {_				pui.setSharedCacheMode(this.sharedCacheMode)__			}_			if (this.validationMode != null) {_				pui.setValidationMode(this.validationMode)__			}_			if (this.loadTimeWeaver != null) {_				pui.init(this.loadTimeWeaver)__			}_			else {_				pui.init(this.resourcePatternResolver.getClassLoader())__			}_			postProcessPersistenceUnitInfo(pui)__			String name = pui.getPersistenceUnitName()__			if (!this.persistenceUnitInfoNames.add(name) && !isPersistenceUnitOverrideAllowed()) {_				StringBuilder msg = new StringBuilder()__				msg.append("Conflicting persistence unit definitions for name '").append(name).append("': ")__				msg.append(pui.getPersistenceUnitRootUrl()).append(", ")__				msg.append(this.persistenceUnitInfos.get(name).getPersistenceUnitRootUrl())__				throw new IllegalStateException(msg.toString())__			}_			this.persistenceUnitInfos.put(name, pui)__		}_	};prepare,the,persistence,unit,infos,according,to,the,configuration,of,this,manager,scanning,for,code,persistence,xml,files,parsing,all,matching,files,configuring,and,post,processing,them,p,persistence,unit,infos,cannot,be,obtained,before,this,preparation,method,has,been,invoked,see,obtain,default,persistence,unit,info,see,obtain,persistence,unit,info,string;public,void,prepare,persistence,unit,infos,this,persistence,unit,info,names,clear,this,persistence,unit,infos,clear,list,spring,persistence,unit,info,puis,read,persistence,unit,infos,for,spring,persistence,unit,info,pui,puis,if,pui,get,persistence,unit,root,url,null,pui,set,persistence,unit,root,url,determine,default,persistence,unit,root,url,if,pui,get,jta,data,source,null,this,default,jta,data,source,null,pui,set,jta,data,source,this,default,jta,data,source,if,pui,get,non,jta,data,source,null,this,default,data,source,null,pui,set,non,jta,data,source,this,default,data,source,if,this,shared,cache,mode,null,pui,set,shared,cache,mode,this,shared,cache,mode,if,this,validation,mode,null,pui,set,validation,mode,this,validation,mode,if,this,load,time,weaver,null,pui,init,this,load,time,weaver,else,pui,init,this,resource,pattern,resolver,get,class,loader,post,process,persistence,unit,info,pui,string,name,pui,get,persistence,unit,name,if,this,persistence,unit,info,names,add,name,is,persistence,unit,override,allowed,string,builder,msg,new,string,builder,msg,append,conflicting,persistence,unit,definitions,for,name,append,name,append,msg,append,pui,get,persistence,unit,root,url,append,msg,append,this,persistence,unit,infos,get,name,get,persistence,unit,root,url,throw,new,illegal,state,exception,msg,to,string,this,persistence,unit,infos,put,name,pui
DefaultPersistenceUnitManager -> public void preparePersistenceUnitInfos();1500448076;Prepare the PersistenceUnitInfos according to the configuration_of this manager: scanning for {@code persistence.xml} files,_parsing all matching files, configuring and post-processing them._<p>PersistenceUnitInfos cannot be obtained before this preparation_method has been invoked._@see #obtainDefaultPersistenceUnitInfo()_@see #obtainPersistenceUnitInfo(String);public void preparePersistenceUnitInfos() {_		this.persistenceUnitInfoNames.clear()__		this.persistenceUnitInfos.clear()___		List<SpringPersistenceUnitInfo> puis = readPersistenceUnitInfos()__		for (SpringPersistenceUnitInfo pui : puis) {_			if (pui.getPersistenceUnitRootUrl() == null) {_				pui.setPersistenceUnitRootUrl(determineDefaultPersistenceUnitRootUrl())__			}_			if (pui.getJtaDataSource() == null && this.defaultJtaDataSource != null) {_				pui.setJtaDataSource(this.defaultJtaDataSource)__			}_			if (pui.getNonJtaDataSource() == null && this.defaultDataSource != null) {_				pui.setNonJtaDataSource(this.defaultDataSource)__			}_			if (this.sharedCacheMode != null) {_				pui.setSharedCacheMode(this.sharedCacheMode)__			}_			if (this.validationMode != null) {_				pui.setValidationMode(this.validationMode)__			}_			if (this.loadTimeWeaver != null) {_				pui.init(this.loadTimeWeaver)__			}_			else {_				pui.init(this.resourcePatternResolver.getClassLoader())__			}_			postProcessPersistenceUnitInfo(pui)__			String name = pui.getPersistenceUnitName()__			if (!this.persistenceUnitInfoNames.add(name) && !isPersistenceUnitOverrideAllowed()) {_				StringBuilder msg = new StringBuilder()__				msg.append("Conflicting persistence unit definitions for name '").append(name).append("': ")__				msg.append(pui.getPersistenceUnitRootUrl()).append(", ")__				msg.append(this.persistenceUnitInfos.get(name).getPersistenceUnitRootUrl())__				throw new IllegalStateException(msg.toString())__			}_			this.persistenceUnitInfos.put(name, pui)__		}_	};prepare,the,persistence,unit,infos,according,to,the,configuration,of,this,manager,scanning,for,code,persistence,xml,files,parsing,all,matching,files,configuring,and,post,processing,them,p,persistence,unit,infos,cannot,be,obtained,before,this,preparation,method,has,been,invoked,see,obtain,default,persistence,unit,info,see,obtain,persistence,unit,info,string;public,void,prepare,persistence,unit,infos,this,persistence,unit,info,names,clear,this,persistence,unit,infos,clear,list,spring,persistence,unit,info,puis,read,persistence,unit,infos,for,spring,persistence,unit,info,pui,puis,if,pui,get,persistence,unit,root,url,null,pui,set,persistence,unit,root,url,determine,default,persistence,unit,root,url,if,pui,get,jta,data,source,null,this,default,jta,data,source,null,pui,set,jta,data,source,this,default,jta,data,source,if,pui,get,non,jta,data,source,null,this,default,data,source,null,pui,set,non,jta,data,source,this,default,data,source,if,this,shared,cache,mode,null,pui,set,shared,cache,mode,this,shared,cache,mode,if,this,validation,mode,null,pui,set,validation,mode,this,validation,mode,if,this,load,time,weaver,null,pui,init,this,load,time,weaver,else,pui,init,this,resource,pattern,resolver,get,class,loader,post,process,persistence,unit,info,pui,string,name,pui,get,persistence,unit,name,if,this,persistence,unit,info,names,add,name,is,persistence,unit,override,allowed,string,builder,msg,new,string,builder,msg,append,conflicting,persistence,unit,definitions,for,name,append,name,append,msg,append,pui,get,persistence,unit,root,url,append,msg,append,this,persistence,unit,infos,get,name,get,persistence,unit,root,url,throw,new,illegal,state,exception,msg,to,string,this,persistence,unit,infos,put,name,pui
DefaultPersistenceUnitManager -> public void preparePersistenceUnitInfos();1520528267;Prepare the PersistenceUnitInfos according to the configuration_of this manager: scanning for {@code persistence.xml} files,_parsing all matching files, configuring and post-processing them._<p>PersistenceUnitInfos cannot be obtained before this preparation_method has been invoked._@see #obtainDefaultPersistenceUnitInfo()_@see #obtainPersistenceUnitInfo(String);public void preparePersistenceUnitInfos() {_		this.persistenceUnitInfoNames.clear()__		this.persistenceUnitInfos.clear()___		List<SpringPersistenceUnitInfo> puis = readPersistenceUnitInfos()__		for (SpringPersistenceUnitInfo pui : puis) {_			if (pui.getPersistenceUnitRootUrl() == null) {_				pui.setPersistenceUnitRootUrl(determineDefaultPersistenceUnitRootUrl())__			}_			if (pui.getJtaDataSource() == null && this.defaultJtaDataSource != null) {_				pui.setJtaDataSource(this.defaultJtaDataSource)__			}_			if (pui.getNonJtaDataSource() == null && this.defaultDataSource != null) {_				pui.setNonJtaDataSource(this.defaultDataSource)__			}_			if (this.sharedCacheMode != null) {_				pui.setSharedCacheMode(this.sharedCacheMode)__			}_			if (this.validationMode != null) {_				pui.setValidationMode(this.validationMode)__			}_			if (this.loadTimeWeaver != null) {_				pui.init(this.loadTimeWeaver)__			}_			else {_				pui.init(this.resourcePatternResolver.getClassLoader())__			}_			postProcessPersistenceUnitInfo(pui)__			String name = pui.getPersistenceUnitName()__			if (!this.persistenceUnitInfoNames.add(name) && !isPersistenceUnitOverrideAllowed()) {_				StringBuilder msg = new StringBuilder()__				msg.append("Conflicting persistence unit definitions for name '").append(name).append("': ")__				msg.append(pui.getPersistenceUnitRootUrl()).append(", ")__				msg.append(this.persistenceUnitInfos.get(name).getPersistenceUnitRootUrl())__				throw new IllegalStateException(msg.toString())__			}_			this.persistenceUnitInfos.put(name, pui)__		}_	};prepare,the,persistence,unit,infos,according,to,the,configuration,of,this,manager,scanning,for,code,persistence,xml,files,parsing,all,matching,files,configuring,and,post,processing,them,p,persistence,unit,infos,cannot,be,obtained,before,this,preparation,method,has,been,invoked,see,obtain,default,persistence,unit,info,see,obtain,persistence,unit,info,string;public,void,prepare,persistence,unit,infos,this,persistence,unit,info,names,clear,this,persistence,unit,infos,clear,list,spring,persistence,unit,info,puis,read,persistence,unit,infos,for,spring,persistence,unit,info,pui,puis,if,pui,get,persistence,unit,root,url,null,pui,set,persistence,unit,root,url,determine,default,persistence,unit,root,url,if,pui,get,jta,data,source,null,this,default,jta,data,source,null,pui,set,jta,data,source,this,default,jta,data,source,if,pui,get,non,jta,data,source,null,this,default,data,source,null,pui,set,non,jta,data,source,this,default,data,source,if,this,shared,cache,mode,null,pui,set,shared,cache,mode,this,shared,cache,mode,if,this,validation,mode,null,pui,set,validation,mode,this,validation,mode,if,this,load,time,weaver,null,pui,init,this,load,time,weaver,else,pui,init,this,resource,pattern,resolver,get,class,loader,post,process,persistence,unit,info,pui,string,name,pui,get,persistence,unit,name,if,this,persistence,unit,info,names,add,name,is,persistence,unit,override,allowed,string,builder,msg,new,string,builder,msg,append,conflicting,persistence,unit,definitions,for,name,append,name,append,msg,append,pui,get,persistence,unit,root,url,append,msg,append,this,persistence,unit,infos,get,name,get,persistence,unit,root,url,throw,new,illegal,state,exception,msg,to,string,this,persistence,unit,infos,put,name,pui
DefaultPersistenceUnitManager -> public void preparePersistenceUnitInfos();1528313484;Prepare the PersistenceUnitInfos according to the configuration_of this manager: scanning for {@code persistence.xml} files,_parsing all matching files, configuring and post-processing them._<p>PersistenceUnitInfos cannot be obtained before this preparation_method has been invoked._@see #obtainDefaultPersistenceUnitInfo()_@see #obtainPersistenceUnitInfo(String);public void preparePersistenceUnitInfos() {_		this.persistenceUnitInfoNames.clear()__		this.persistenceUnitInfos.clear()___		List<SpringPersistenceUnitInfo> puis = readPersistenceUnitInfos()__		for (SpringPersistenceUnitInfo pui : puis) {_			if (pui.getPersistenceUnitRootUrl() == null) {_				pui.setPersistenceUnitRootUrl(determineDefaultPersistenceUnitRootUrl())__			}_			if (pui.getJtaDataSource() == null && this.defaultJtaDataSource != null) {_				pui.setJtaDataSource(this.defaultJtaDataSource)__			}_			if (pui.getNonJtaDataSource() == null && this.defaultDataSource != null) {_				pui.setNonJtaDataSource(this.defaultDataSource)__			}_			if (this.sharedCacheMode != null) {_				pui.setSharedCacheMode(this.sharedCacheMode)__			}_			if (this.validationMode != null) {_				pui.setValidationMode(this.validationMode)__			}_			if (this.loadTimeWeaver != null) {_				pui.init(this.loadTimeWeaver)__			}_			else {_				pui.init(this.resourcePatternResolver.getClassLoader())__			}_			postProcessPersistenceUnitInfo(pui)__			String name = pui.getPersistenceUnitName()__			if (!this.persistenceUnitInfoNames.add(name) && !isPersistenceUnitOverrideAllowed()) {_				StringBuilder msg = new StringBuilder()__				msg.append("Conflicting persistence unit definitions for name '").append(name).append("': ")__				msg.append(pui.getPersistenceUnitRootUrl()).append(", ")__				msg.append(this.persistenceUnitInfos.get(name).getPersistenceUnitRootUrl())__				throw new IllegalStateException(msg.toString())__			}_			this.persistenceUnitInfos.put(name, pui)__		}_	};prepare,the,persistence,unit,infos,according,to,the,configuration,of,this,manager,scanning,for,code,persistence,xml,files,parsing,all,matching,files,configuring,and,post,processing,them,p,persistence,unit,infos,cannot,be,obtained,before,this,preparation,method,has,been,invoked,see,obtain,default,persistence,unit,info,see,obtain,persistence,unit,info,string;public,void,prepare,persistence,unit,infos,this,persistence,unit,info,names,clear,this,persistence,unit,infos,clear,list,spring,persistence,unit,info,puis,read,persistence,unit,infos,for,spring,persistence,unit,info,pui,puis,if,pui,get,persistence,unit,root,url,null,pui,set,persistence,unit,root,url,determine,default,persistence,unit,root,url,if,pui,get,jta,data,source,null,this,default,jta,data,source,null,pui,set,jta,data,source,this,default,jta,data,source,if,pui,get,non,jta,data,source,null,this,default,data,source,null,pui,set,non,jta,data,source,this,default,data,source,if,this,shared,cache,mode,null,pui,set,shared,cache,mode,this,shared,cache,mode,if,this,validation,mode,null,pui,set,validation,mode,this,validation,mode,if,this,load,time,weaver,null,pui,init,this,load,time,weaver,else,pui,init,this,resource,pattern,resolver,get,class,loader,post,process,persistence,unit,info,pui,string,name,pui,get,persistence,unit,name,if,this,persistence,unit,info,names,add,name,is,persistence,unit,override,allowed,string,builder,msg,new,string,builder,msg,append,conflicting,persistence,unit,definitions,for,name,append,name,append,msg,append,pui,get,persistence,unit,root,url,append,msg,append,this,persistence,unit,infos,get,name,get,persistence,unit,root,url,throw,new,illegal,state,exception,msg,to,string,this,persistence,unit,infos,put,name,pui
DefaultPersistenceUnitManager -> public void preparePersistenceUnitInfos();1530174524;Prepare the PersistenceUnitInfos according to the configuration_of this manager: scanning for {@code persistence.xml} files,_parsing all matching files, configuring and post-processing them._<p>PersistenceUnitInfos cannot be obtained before this preparation_method has been invoked._@see #obtainDefaultPersistenceUnitInfo()_@see #obtainPersistenceUnitInfo(String);public void preparePersistenceUnitInfos() {_		this.persistenceUnitInfoNames.clear()__		this.persistenceUnitInfos.clear()___		List<SpringPersistenceUnitInfo> puis = readPersistenceUnitInfos()__		for (SpringPersistenceUnitInfo pui : puis) {_			if (pui.getPersistenceUnitRootUrl() == null) {_				pui.setPersistenceUnitRootUrl(determineDefaultPersistenceUnitRootUrl())__			}_			if (pui.getJtaDataSource() == null && this.defaultJtaDataSource != null) {_				pui.setJtaDataSource(this.defaultJtaDataSource)__			}_			if (pui.getNonJtaDataSource() == null && this.defaultDataSource != null) {_				pui.setNonJtaDataSource(this.defaultDataSource)__			}_			if (this.sharedCacheMode != null) {_				pui.setSharedCacheMode(this.sharedCacheMode)__			}_			if (this.validationMode != null) {_				pui.setValidationMode(this.validationMode)__			}_			if (this.loadTimeWeaver != null) {_				pui.init(this.loadTimeWeaver)__			}_			else {_				pui.init(this.resourcePatternResolver.getClassLoader())__			}_			postProcessPersistenceUnitInfo(pui)__			String name = pui.getPersistenceUnitName()__			if (!this.persistenceUnitInfoNames.add(name) && !isPersistenceUnitOverrideAllowed()) {_				StringBuilder msg = new StringBuilder()__				msg.append("Conflicting persistence unit definitions for name '").append(name).append("': ")__				msg.append(pui.getPersistenceUnitRootUrl()).append(", ")__				msg.append(this.persistenceUnitInfos.get(name).getPersistenceUnitRootUrl())__				throw new IllegalStateException(msg.toString())__			}_			this.persistenceUnitInfos.put(name, pui)__		}_	};prepare,the,persistence,unit,infos,according,to,the,configuration,of,this,manager,scanning,for,code,persistence,xml,files,parsing,all,matching,files,configuring,and,post,processing,them,p,persistence,unit,infos,cannot,be,obtained,before,this,preparation,method,has,been,invoked,see,obtain,default,persistence,unit,info,see,obtain,persistence,unit,info,string;public,void,prepare,persistence,unit,infos,this,persistence,unit,info,names,clear,this,persistence,unit,infos,clear,list,spring,persistence,unit,info,puis,read,persistence,unit,infos,for,spring,persistence,unit,info,pui,puis,if,pui,get,persistence,unit,root,url,null,pui,set,persistence,unit,root,url,determine,default,persistence,unit,root,url,if,pui,get,jta,data,source,null,this,default,jta,data,source,null,pui,set,jta,data,source,this,default,jta,data,source,if,pui,get,non,jta,data,source,null,this,default,data,source,null,pui,set,non,jta,data,source,this,default,data,source,if,this,shared,cache,mode,null,pui,set,shared,cache,mode,this,shared,cache,mode,if,this,validation,mode,null,pui,set,validation,mode,this,validation,mode,if,this,load,time,weaver,null,pui,init,this,load,time,weaver,else,pui,init,this,resource,pattern,resolver,get,class,loader,post,process,persistence,unit,info,pui,string,name,pui,get,persistence,unit,name,if,this,persistence,unit,info,names,add,name,is,persistence,unit,override,allowed,string,builder,msg,new,string,builder,msg,append,conflicting,persistence,unit,definitions,for,name,append,name,append,msg,append,pui,get,persistence,unit,root,url,append,msg,append,this,persistence,unit,infos,get,name,get,persistence,unit,root,url,throw,new,illegal,state,exception,msg,to,string,this,persistence,unit,infos,put,name,pui
DefaultPersistenceUnitManager -> public void preparePersistenceUnitInfos();1532091916;Prepare the PersistenceUnitInfos according to the configuration_of this manager: scanning for {@code persistence.xml} files,_parsing all matching files, configuring and post-processing them._<p>PersistenceUnitInfos cannot be obtained before this preparation_method has been invoked._@see #obtainDefaultPersistenceUnitInfo()_@see #obtainPersistenceUnitInfo(String);public void preparePersistenceUnitInfos() {_		this.persistenceUnitInfoNames.clear()__		this.persistenceUnitInfos.clear()___		List<SpringPersistenceUnitInfo> puis = readPersistenceUnitInfos()__		for (SpringPersistenceUnitInfo pui : puis) {_			if (pui.getPersistenceUnitRootUrl() == null) {_				pui.setPersistenceUnitRootUrl(determineDefaultPersistenceUnitRootUrl())__			}_			if (pui.getJtaDataSource() == null && this.defaultJtaDataSource != null) {_				pui.setJtaDataSource(this.defaultJtaDataSource)__			}_			if (pui.getNonJtaDataSource() == null && this.defaultDataSource != null) {_				pui.setNonJtaDataSource(this.defaultDataSource)__			}_			if (this.sharedCacheMode != null) {_				pui.setSharedCacheMode(this.sharedCacheMode)__			}_			if (this.validationMode != null) {_				pui.setValidationMode(this.validationMode)__			}_			if (this.loadTimeWeaver != null) {_				pui.init(this.loadTimeWeaver)__			}_			else {_				pui.init(this.resourcePatternResolver.getClassLoader())__			}_			postProcessPersistenceUnitInfo(pui)__			String name = pui.getPersistenceUnitName()__			if (!this.persistenceUnitInfoNames.add(name) && !isPersistenceUnitOverrideAllowed()) {_				StringBuilder msg = new StringBuilder()__				msg.append("Conflicting persistence unit definitions for name '").append(name).append("': ")__				msg.append(pui.getPersistenceUnitRootUrl()).append(", ")__				msg.append(this.persistenceUnitInfos.get(name).getPersistenceUnitRootUrl())__				throw new IllegalStateException(msg.toString())__			}_			this.persistenceUnitInfos.put(name, pui)__		}_	};prepare,the,persistence,unit,infos,according,to,the,configuration,of,this,manager,scanning,for,code,persistence,xml,files,parsing,all,matching,files,configuring,and,post,processing,them,p,persistence,unit,infos,cannot,be,obtained,before,this,preparation,method,has,been,invoked,see,obtain,default,persistence,unit,info,see,obtain,persistence,unit,info,string;public,void,prepare,persistence,unit,infos,this,persistence,unit,info,names,clear,this,persistence,unit,infos,clear,list,spring,persistence,unit,info,puis,read,persistence,unit,infos,for,spring,persistence,unit,info,pui,puis,if,pui,get,persistence,unit,root,url,null,pui,set,persistence,unit,root,url,determine,default,persistence,unit,root,url,if,pui,get,jta,data,source,null,this,default,jta,data,source,null,pui,set,jta,data,source,this,default,jta,data,source,if,pui,get,non,jta,data,source,null,this,default,data,source,null,pui,set,non,jta,data,source,this,default,data,source,if,this,shared,cache,mode,null,pui,set,shared,cache,mode,this,shared,cache,mode,if,this,validation,mode,null,pui,set,validation,mode,this,validation,mode,if,this,load,time,weaver,null,pui,init,this,load,time,weaver,else,pui,init,this,resource,pattern,resolver,get,class,loader,post,process,persistence,unit,info,pui,string,name,pui,get,persistence,unit,name,if,this,persistence,unit,info,names,add,name,is,persistence,unit,override,allowed,string,builder,msg,new,string,builder,msg,append,conflicting,persistence,unit,definitions,for,name,append,name,append,msg,append,pui,get,persistence,unit,root,url,append,msg,append,this,persistence,unit,infos,get,name,get,persistence,unit,root,url,throw,new,illegal,state,exception,msg,to,string,this,persistence,unit,infos,put,name,pui
DefaultPersistenceUnitManager -> public DataSource getDefaultJtaDataSource();1351648399;Return the JTA-aware DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in <code>persistence.xml</code>.;public DataSource getDefaultJtaDataSource() {_		return this.defaultJtaDataSource__	};return,the,jta,aware,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,code;public,data,source,get,default,jta,data,source,return,this,default,jta,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultJtaDataSource();1356735495;Return the JTA-aware DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultJtaDataSource() {_		return this.defaultJtaDataSource__	};return,the,jta,aware,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,jta,data,source,return,this,default,jta,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultJtaDataSource();1357119239;Return the JTA-aware DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultJtaDataSource() {_		return this.defaultJtaDataSource__	};return,the,jta,aware,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,jta,data,source,return,this,default,jta,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultJtaDataSource();1363714444;Return the JTA-aware DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultJtaDataSource() {_		return this.defaultJtaDataSource__	};return,the,jta,aware,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,jta,data,source,return,this,default,jta,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultJtaDataSource();1368482696;Return the JTA-aware DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultJtaDataSource() {_		return this.defaultJtaDataSource__	};return,the,jta,aware,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,jta,data,source,return,this,default,jta,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultJtaDataSource();1375434510;Return the JTA-aware DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultJtaDataSource() {_		return this.defaultJtaDataSource__	};return,the,jta,aware,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,jta,data,source,return,this,default,jta,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultJtaDataSource();1375458214;Return the JTA-aware DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultJtaDataSource() {_		return this.defaultJtaDataSource__	};return,the,jta,aware,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,jta,data,source,return,this,default,jta,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultJtaDataSource();1389648334;Return the JTA-aware DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultJtaDataSource() {_		return this.defaultJtaDataSource__	};return,the,jta,aware,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,jta,data,source,return,this,default,jta,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultJtaDataSource();1390250900;Return the JTA-aware DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultJtaDataSource() {_		return this.defaultJtaDataSource__	};return,the,jta,aware,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,jta,data,source,return,this,default,jta,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultJtaDataSource();1390313076;Return the JTA-aware DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultJtaDataSource() {_		return this.defaultJtaDataSource__	};return,the,jta,aware,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,jta,data,source,return,this,default,jta,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultJtaDataSource();1400140571;Return the JTA-aware DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultJtaDataSource() {_		return this.defaultJtaDataSource__	};return,the,jta,aware,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,jta,data,source,return,this,default,jta,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultJtaDataSource();1403774750;Return the JTA-aware DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultJtaDataSource() {_		return this.defaultJtaDataSource__	};return,the,jta,aware,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,jta,data,source,return,this,default,jta,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultJtaDataSource();1404056186;Return the JTA-aware DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultJtaDataSource() {_		return this.defaultJtaDataSource__	};return,the,jta,aware,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,jta,data,source,return,this,default,jta,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultJtaDataSource();1447323728;Return the JTA-aware DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultJtaDataSource() {_		return this.defaultJtaDataSource__	};return,the,jta,aware,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,jta,data,source,return,this,default,jta,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultJtaDataSource();1464299869;Return the JTA-aware DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultJtaDataSource() {_		return this.defaultJtaDataSource__	};return,the,jta,aware,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,jta,data,source,return,this,default,jta,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultJtaDataSource();1467668243;Return the JTA-aware DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultJtaDataSource() {_		return this.defaultJtaDataSource__	};return,the,jta,aware,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,jta,data,source,return,this,default,jta,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultJtaDataSource();1467730834;Return the JTA-aware DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultJtaDataSource() {_		return this.defaultJtaDataSource__	};return,the,jta,aware,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,jta,data,source,return,this,default,jta,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultJtaDataSource();1471464767;Return the JTA-aware DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultJtaDataSource() {_		return this.defaultJtaDataSource__	};return,the,jta,aware,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,jta,data,source,return,this,default,jta,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultJtaDataSource();1472736647;Return the JTA-aware DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultJtaDataSource() {_		return this.defaultJtaDataSource__	};return,the,jta,aware,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,jta,data,source,return,this,default,jta,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultJtaDataSource();1474895745;Return the JTA-aware DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultJtaDataSource() {_		return this.defaultJtaDataSource__	};return,the,jta,aware,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,jta,data,source,return,this,default,jta,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultJtaDataSource();1495868221;Return the JTA-aware DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultJtaDataSource() {_		return this.defaultJtaDataSource__	};return,the,jta,aware,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,jta,data,source,return,this,default,jta,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultJtaDataSource();1496259743;Return the JTA-aware DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultJtaDataSource() {_		return this.defaultJtaDataSource__	};return,the,jta,aware,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,jta,data,source,return,this,default,jta,data,source
DefaultPersistenceUnitManager -> private boolean useOrmXmlForDefaultPersistenceUnit();1390313076;Determine whether to register JPA's default "META-INF/orm.xml" with_Spring's default persistence unit, if any._<p>Checks whether a "META-INF/orm.xml" file exists in the classpath and_uses it if it is not co-located with a "META-INF/persistence.xml" file.;private boolean useOrmXmlForDefaultPersistenceUnit() {_		Resource ormXml = this.resourcePatternResolver.getResource(_				this.defaultPersistenceUnitRootLocation + DEFAULT_ORM_XML_RESOURCE)__		if (ormXml.exists()) {_			try {_				Resource persistenceXml = ormXml.createRelative(PERSISTENCE_XML_FILENAME)__				if (!persistenceXml.exists()) {_					return true__				}_			}_			catch (IOException ex) {_				_				return true__			}_		}_		return false__	};determine,whether,to,register,jpa,s,default,meta,inf,orm,xml,with,spring,s,default,persistence,unit,if,any,p,checks,whether,a,meta,inf,orm,xml,file,exists,in,the,classpath,and,uses,it,if,it,is,not,co,located,with,a,meta,inf,persistence,xml,file;private,boolean,use,orm,xml,for,default,persistence,unit,resource,orm,xml,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,if,orm,xml,exists,try,resource,persistence,xml,orm,xml,create,relative,if,persistence,xml,exists,return,true,catch,ioexception,ex,return,true,return,false
DefaultPersistenceUnitManager -> private boolean useOrmXmlForDefaultPersistenceUnit();1400140571;Determine whether to register JPA's default "META-INF/orm.xml" with_Spring's default persistence unit, if any._<p>Checks whether a "META-INF/orm.xml" file exists in the classpath and_uses it if it is not co-located with a "META-INF/persistence.xml" file.;private boolean useOrmXmlForDefaultPersistenceUnit() {_		Resource ormXml = this.resourcePatternResolver.getResource(_				this.defaultPersistenceUnitRootLocation + DEFAULT_ORM_XML_RESOURCE)__		if (ormXml.exists()) {_			try {_				Resource persistenceXml = ormXml.createRelative(PERSISTENCE_XML_FILENAME)__				if (!persistenceXml.exists()) {_					return true__				}_			}_			catch (IOException ex) {_				_				return true__			}_		}_		return false__	};determine,whether,to,register,jpa,s,default,meta,inf,orm,xml,with,spring,s,default,persistence,unit,if,any,p,checks,whether,a,meta,inf,orm,xml,file,exists,in,the,classpath,and,uses,it,if,it,is,not,co,located,with,a,meta,inf,persistence,xml,file;private,boolean,use,orm,xml,for,default,persistence,unit,resource,orm,xml,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,if,orm,xml,exists,try,resource,persistence,xml,orm,xml,create,relative,if,persistence,xml,exists,return,true,catch,ioexception,ex,return,true,return,false
DefaultPersistenceUnitManager -> private boolean useOrmXmlForDefaultPersistenceUnit();1403774750;Determine whether to register JPA's default "META-INF/orm.xml" with_Spring's default persistence unit, if any._<p>Checks whether a "META-INF/orm.xml" file exists in the classpath and_uses it if it is not co-located with a "META-INF/persistence.xml" file.;private boolean useOrmXmlForDefaultPersistenceUnit() {_		Resource ormXml = this.resourcePatternResolver.getResource(_				this.defaultPersistenceUnitRootLocation + DEFAULT_ORM_XML_RESOURCE)__		if (ormXml.exists()) {_			try {_				Resource persistenceXml = ormXml.createRelative(PERSISTENCE_XML_FILENAME)__				if (!persistenceXml.exists()) {_					return true__				}_			}_			catch (IOException ex) {_				_				return true__			}_		}_		return false__	};determine,whether,to,register,jpa,s,default,meta,inf,orm,xml,with,spring,s,default,persistence,unit,if,any,p,checks,whether,a,meta,inf,orm,xml,file,exists,in,the,classpath,and,uses,it,if,it,is,not,co,located,with,a,meta,inf,persistence,xml,file;private,boolean,use,orm,xml,for,default,persistence,unit,resource,orm,xml,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,if,orm,xml,exists,try,resource,persistence,xml,orm,xml,create,relative,if,persistence,xml,exists,return,true,catch,ioexception,ex,return,true,return,false
DefaultPersistenceUnitManager -> private boolean useOrmXmlForDefaultPersistenceUnit();1404056186;Determine whether to register JPA's default "META-INF/orm.xml" with_Spring's default persistence unit, if any._<p>Checks whether a "META-INF/orm.xml" file exists in the classpath and_uses it if it is not co-located with a "META-INF/persistence.xml" file.;private boolean useOrmXmlForDefaultPersistenceUnit() {_		Resource ormXml = this.resourcePatternResolver.getResource(_				this.defaultPersistenceUnitRootLocation + DEFAULT_ORM_XML_RESOURCE)__		if (ormXml.exists()) {_			try {_				Resource persistenceXml = ormXml.createRelative(PERSISTENCE_XML_FILENAME)__				if (!persistenceXml.exists()) {_					return true__				}_			}_			catch (IOException ex) {_				_				return true__			}_		}_		return false__	};determine,whether,to,register,jpa,s,default,meta,inf,orm,xml,with,spring,s,default,persistence,unit,if,any,p,checks,whether,a,meta,inf,orm,xml,file,exists,in,the,classpath,and,uses,it,if,it,is,not,co,located,with,a,meta,inf,persistence,xml,file;private,boolean,use,orm,xml,for,default,persistence,unit,resource,orm,xml,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,if,orm,xml,exists,try,resource,persistence,xml,orm,xml,create,relative,if,persistence,xml,exists,return,true,catch,ioexception,ex,return,true,return,false
DefaultPersistenceUnitManager -> private boolean useOrmXmlForDefaultPersistenceUnit();1447323728;Determine whether to register JPA's default "META-INF/orm.xml" with_Spring's default persistence unit, if any._<p>Checks whether a "META-INF/orm.xml" file exists in the classpath and_uses it if it is not co-located with a "META-INF/persistence.xml" file.;private boolean useOrmXmlForDefaultPersistenceUnit() {_		Resource ormXml = this.resourcePatternResolver.getResource(_				this.defaultPersistenceUnitRootLocation + DEFAULT_ORM_XML_RESOURCE)__		if (ormXml.exists()) {_			try {_				Resource persistenceXml = ormXml.createRelative(PERSISTENCE_XML_FILENAME)__				if (!persistenceXml.exists()) {_					return true__				}_			}_			catch (IOException ex) {_				_				return true__			}_		}_		return false__	};determine,whether,to,register,jpa,s,default,meta,inf,orm,xml,with,spring,s,default,persistence,unit,if,any,p,checks,whether,a,meta,inf,orm,xml,file,exists,in,the,classpath,and,uses,it,if,it,is,not,co,located,with,a,meta,inf,persistence,xml,file;private,boolean,use,orm,xml,for,default,persistence,unit,resource,orm,xml,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,if,orm,xml,exists,try,resource,persistence,xml,orm,xml,create,relative,if,persistence,xml,exists,return,true,catch,ioexception,ex,return,true,return,false
DefaultPersistenceUnitManager -> public void setDefaultJtaDataSource(@Nullable DataSource defaultJtaDataSource);1500448076;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates that JTA is supposed to be used as transaction type._<p>In JPA speak, a DataSource passed in here will be uses as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource();public void setDefaultJtaDataSource(@Nullable DataSource defaultJtaDataSource) {_		this.defaultJtaDataSource = defaultJtaDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,that,jta,is,supposed,to,be,used,as,transaction,type,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source;public,void,set,default,jta,data,source,nullable,data,source,default,jta,data,source,this,default,jta,data,source,default,jta,data,source
DefaultPersistenceUnitManager -> public void setDefaultJtaDataSource(@Nullable DataSource defaultJtaDataSource);1520528267;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates that JTA is supposed to be used as transaction type._<p>In JPA speak, a DataSource passed in here will be uses as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource();public void setDefaultJtaDataSource(@Nullable DataSource defaultJtaDataSource) {_		this.defaultJtaDataSource = defaultJtaDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,that,jta,is,supposed,to,be,used,as,transaction,type,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source;public,void,set,default,jta,data,source,nullable,data,source,default,jta,data,source,this,default,jta,data,source,default,jta,data,source
DefaultPersistenceUnitManager -> public void setDefaultJtaDataSource(@Nullable DataSource defaultJtaDataSource);1528313484;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates that JTA is supposed to be used as transaction type._<p>In JPA speak, a DataSource passed in here will be uses as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource();public void setDefaultJtaDataSource(@Nullable DataSource defaultJtaDataSource) {_		this.defaultJtaDataSource = defaultJtaDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,that,jta,is,supposed,to,be,used,as,transaction,type,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source;public,void,set,default,jta,data,source,nullable,data,source,default,jta,data,source,this,default,jta,data,source,default,jta,data,source
DefaultPersistenceUnitManager -> public void setDefaultJtaDataSource(@Nullable DataSource defaultJtaDataSource);1530174524;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates that JTA is supposed to be used as transaction type._<p>In JPA speak, a DataSource passed in here will be uses as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource();public void setDefaultJtaDataSource(@Nullable DataSource defaultJtaDataSource) {_		this.defaultJtaDataSource = defaultJtaDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,that,jta,is,supposed,to,be,used,as,transaction,type,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source;public,void,set,default,jta,data,source,nullable,data,source,default,jta,data,source,this,default,jta,data,source,default,jta,data,source
DefaultPersistenceUnitManager -> public void setDefaultJtaDataSource(@Nullable DataSource defaultJtaDataSource);1532091916;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates that JTA is supposed to be used as transaction type._<p>In JPA speak, a DataSource passed in here will be uses as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource();public void setDefaultJtaDataSource(@Nullable DataSource defaultJtaDataSource) {_		this.defaultJtaDataSource = defaultJtaDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,that,jta,is,supposed,to,be,used,as,transaction,type,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source;public,void,set,default,jta,data,source,nullable,data,source,default,jta,data,source,this,default,jta,data,source,default,jta,data,source
DefaultPersistenceUnitManager -> public void setDataSources(Map<String, DataSource> dataSources);1328020251;Specify the JDBC DataSources that the JPA persistence provider is supposed_to use for accessing the database, resolving data source names in_<code>persistence.xml</code> against Spring-managed DataSources._<p>The specified Map needs to define data source names for specific DataSource_objects, matching the data source names used in <code>persistence.xml</code>._If not specified, data source names will be resolved as JNDI names instead_(as defined by standard JPA)._@see org.springframework.jdbc.datasource.lookup.MapDataSourceLookup;public void setDataSources(Map<String, DataSource> dataSources) {_		this.dataSourceLookup = new MapDataSourceLookup(dataSources)__	};specify,the,jdbc,data,sources,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,resolving,data,source,names,in,code,persistence,xml,code,against,spring,managed,data,sources,p,the,specified,map,needs,to,define,data,source,names,for,specific,data,source,objects,matching,the,data,source,names,used,in,code,persistence,xml,code,if,not,specified,data,source,names,will,be,resolved,as,jndi,names,instead,as,defined,by,standard,jpa,see,org,springframework,jdbc,datasource,lookup,map,data,source,lookup;public,void,set,data,sources,map,string,data,source,data,sources,this,data,source,lookup,new,map,data,source,lookup,data,sources
DefaultPersistenceUnitManager -> public void setDataSources(Map<String, DataSource> dataSources);1329142650;Specify the JDBC DataSources that the JPA persistence provider is supposed_to use for accessing the database, resolving data source names in_<code>persistence.xml</code> against Spring-managed DataSources._<p>The specified Map needs to define data source names for specific DataSource_objects, matching the data source names used in <code>persistence.xml</code>._If not specified, data source names will be resolved as JNDI names instead_(as defined by standard JPA)._@see org.springframework.jdbc.datasource.lookup.MapDataSourceLookup;public void setDataSources(Map<String, DataSource> dataSources) {_		this.dataSourceLookup = new MapDataSourceLookup(dataSources)__	};specify,the,jdbc,data,sources,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,resolving,data,source,names,in,code,persistence,xml,code,against,spring,managed,data,sources,p,the,specified,map,needs,to,define,data,source,names,for,specific,data,source,objects,matching,the,data,source,names,used,in,code,persistence,xml,code,if,not,specified,data,source,names,will,be,resolved,as,jndi,names,instead,as,defined,by,standard,jpa,see,org,springframework,jdbc,datasource,lookup,map,data,source,lookup;public,void,set,data,sources,map,string,data,source,data,sources,this,data,source,lookup,new,map,data,source,lookup,data,sources
DefaultPersistenceUnitManager -> public void setDataSources(Map<String, DataSource> dataSources);1347282851;Specify the JDBC DataSources that the JPA persistence provider is supposed_to use for accessing the database, resolving data source names in_<code>persistence.xml</code> against Spring-managed DataSources._<p>The specified Map needs to define data source names for specific DataSource_objects, matching the data source names used in <code>persistence.xml</code>._If not specified, data source names will be resolved as JNDI names instead_(as defined by standard JPA)._@see org.springframework.jdbc.datasource.lookup.MapDataSourceLookup;public void setDataSources(Map<String, DataSource> dataSources) {_		this.dataSourceLookup = new MapDataSourceLookup(dataSources)__	};specify,the,jdbc,data,sources,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,resolving,data,source,names,in,code,persistence,xml,code,against,spring,managed,data,sources,p,the,specified,map,needs,to,define,data,source,names,for,specific,data,source,objects,matching,the,data,source,names,used,in,code,persistence,xml,code,if,not,specified,data,source,names,will,be,resolved,as,jndi,names,instead,as,defined,by,standard,jpa,see,org,springframework,jdbc,datasource,lookup,map,data,source,lookup;public,void,set,data,sources,map,string,data,source,data,sources,this,data,source,lookup,new,map,data,source,lookup,data,sources
DefaultPersistenceUnitManager -> public void setDataSources(Map<String, DataSource> dataSources);1351648399;Specify the JDBC DataSources that the JPA persistence provider is supposed_to use for accessing the database, resolving data source names in_<code>persistence.xml</code> against Spring-managed DataSources._<p>The specified Map needs to define data source names for specific DataSource_objects, matching the data source names used in <code>persistence.xml</code>._If not specified, data source names will be resolved as JNDI names instead_(as defined by standard JPA)._@see org.springframework.jdbc.datasource.lookup.MapDataSourceLookup;public void setDataSources(Map<String, DataSource> dataSources) {_		this.dataSourceLookup = new MapDataSourceLookup(dataSources)__	};specify,the,jdbc,data,sources,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,resolving,data,source,names,in,code,persistence,xml,code,against,spring,managed,data,sources,p,the,specified,map,needs,to,define,data,source,names,for,specific,data,source,objects,matching,the,data,source,names,used,in,code,persistence,xml,code,if,not,specified,data,source,names,will,be,resolved,as,jndi,names,instead,as,defined,by,standard,jpa,see,org,springframework,jdbc,datasource,lookup,map,data,source,lookup;public,void,set,data,sources,map,string,data,source,data,sources,this,data,source,lookup,new,map,data,source,lookup,data,sources
DefaultPersistenceUnitManager -> public void setDataSources(Map<String, DataSource> dataSources);1356735495;Specify the JDBC DataSources that the JPA persistence provider is supposed_to use for accessing the database, resolving data source names in_{@code persistence.xml} against Spring-managed DataSources._<p>The specified Map needs to define data source names for specific DataSource_objects, matching the data source names used in {@code persistence.xml}._If not specified, data source names will be resolved as JNDI names instead_(as defined by standard JPA)._@see org.springframework.jdbc.datasource.lookup.MapDataSourceLookup;public void setDataSources(Map<String, DataSource> dataSources) {_		this.dataSourceLookup = new MapDataSourceLookup(dataSources)__	};specify,the,jdbc,data,sources,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,sources,p,the,specified,map,needs,to,define,data,source,names,for,specific,data,source,objects,matching,the,data,source,names,used,in,code,persistence,xml,if,not,specified,data,source,names,will,be,resolved,as,jndi,names,instead,as,defined,by,standard,jpa,see,org,springframework,jdbc,datasource,lookup,map,data,source,lookup;public,void,set,data,sources,map,string,data,source,data,sources,this,data,source,lookup,new,map,data,source,lookup,data,sources
DefaultPersistenceUnitManager -> public void setDataSources(Map<String, DataSource> dataSources);1357119239;Specify the JDBC DataSources that the JPA persistence provider is supposed_to use for accessing the database, resolving data source names in_{@code persistence.xml} against Spring-managed DataSources._<p>The specified Map needs to define data source names for specific DataSource_objects, matching the data source names used in {@code persistence.xml}._If not specified, data source names will be resolved as JNDI names instead_(as defined by standard JPA)._@see org.springframework.jdbc.datasource.lookup.MapDataSourceLookup;public void setDataSources(Map<String, DataSource> dataSources) {_		this.dataSourceLookup = new MapDataSourceLookup(dataSources)__	};specify,the,jdbc,data,sources,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,sources,p,the,specified,map,needs,to,define,data,source,names,for,specific,data,source,objects,matching,the,data,source,names,used,in,code,persistence,xml,if,not,specified,data,source,names,will,be,resolved,as,jndi,names,instead,as,defined,by,standard,jpa,see,org,springframework,jdbc,datasource,lookup,map,data,source,lookup;public,void,set,data,sources,map,string,data,source,data,sources,this,data,source,lookup,new,map,data,source,lookup,data,sources
DefaultPersistenceUnitManager -> public void setDataSources(Map<String, DataSource> dataSources);1363714444;Specify the JDBC DataSources that the JPA persistence provider is supposed_to use for accessing the database, resolving data source names in_{@code persistence.xml} against Spring-managed DataSources._<p>The specified Map needs to define data source names for specific DataSource_objects, matching the data source names used in {@code persistence.xml}._If not specified, data source names will be resolved as JNDI names instead_(as defined by standard JPA)._@see org.springframework.jdbc.datasource.lookup.MapDataSourceLookup;public void setDataSources(Map<String, DataSource> dataSources) {_		this.dataSourceLookup = new MapDataSourceLookup(dataSources)__	};specify,the,jdbc,data,sources,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,sources,p,the,specified,map,needs,to,define,data,source,names,for,specific,data,source,objects,matching,the,data,source,names,used,in,code,persistence,xml,if,not,specified,data,source,names,will,be,resolved,as,jndi,names,instead,as,defined,by,standard,jpa,see,org,springframework,jdbc,datasource,lookup,map,data,source,lookup;public,void,set,data,sources,map,string,data,source,data,sources,this,data,source,lookup,new,map,data,source,lookup,data,sources
DefaultPersistenceUnitManager -> public void setDataSources(Map<String, DataSource> dataSources);1368482696;Specify the JDBC DataSources that the JPA persistence provider is supposed_to use for accessing the database, resolving data source names in_{@code persistence.xml} against Spring-managed DataSources._<p>The specified Map needs to define data source names for specific DataSource_objects, matching the data source names used in {@code persistence.xml}._If not specified, data source names will be resolved as JNDI names instead_(as defined by standard JPA)._@see org.springframework.jdbc.datasource.lookup.MapDataSourceLookup;public void setDataSources(Map<String, DataSource> dataSources) {_		this.dataSourceLookup = new MapDataSourceLookup(dataSources)__	};specify,the,jdbc,data,sources,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,sources,p,the,specified,map,needs,to,define,data,source,names,for,specific,data,source,objects,matching,the,data,source,names,used,in,code,persistence,xml,if,not,specified,data,source,names,will,be,resolved,as,jndi,names,instead,as,defined,by,standard,jpa,see,org,springframework,jdbc,datasource,lookup,map,data,source,lookup;public,void,set,data,sources,map,string,data,source,data,sources,this,data,source,lookup,new,map,data,source,lookup,data,sources
DefaultPersistenceUnitManager -> public void setDataSources(Map<String, DataSource> dataSources);1375434510;Specify the JDBC DataSources that the JPA persistence provider is supposed_to use for accessing the database, resolving data source names in_{@code persistence.xml} against Spring-managed DataSources._<p>The specified Map needs to define data source names for specific DataSource_objects, matching the data source names used in {@code persistence.xml}._If not specified, data source names will be resolved as JNDI names instead_(as defined by standard JPA)._@see org.springframework.jdbc.datasource.lookup.MapDataSourceLookup;public void setDataSources(Map<String, DataSource> dataSources) {_		this.dataSourceLookup = new MapDataSourceLookup(dataSources)__	};specify,the,jdbc,data,sources,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,sources,p,the,specified,map,needs,to,define,data,source,names,for,specific,data,source,objects,matching,the,data,source,names,used,in,code,persistence,xml,if,not,specified,data,source,names,will,be,resolved,as,jndi,names,instead,as,defined,by,standard,jpa,see,org,springframework,jdbc,datasource,lookup,map,data,source,lookup;public,void,set,data,sources,map,string,data,source,data,sources,this,data,source,lookup,new,map,data,source,lookup,data,sources
DefaultPersistenceUnitManager -> public void setDataSources(Map<String, DataSource> dataSources);1375458214;Specify the JDBC DataSources that the JPA persistence provider is supposed_to use for accessing the database, resolving data source names in_{@code persistence.xml} against Spring-managed DataSources._<p>The specified Map needs to define data source names for specific DataSource_objects, matching the data source names used in {@code persistence.xml}._If not specified, data source names will be resolved as JNDI names instead_(as defined by standard JPA)._@see org.springframework.jdbc.datasource.lookup.MapDataSourceLookup;public void setDataSources(Map<String, DataSource> dataSources) {_		this.dataSourceLookup = new MapDataSourceLookup(dataSources)__	};specify,the,jdbc,data,sources,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,sources,p,the,specified,map,needs,to,define,data,source,names,for,specific,data,source,objects,matching,the,data,source,names,used,in,code,persistence,xml,if,not,specified,data,source,names,will,be,resolved,as,jndi,names,instead,as,defined,by,standard,jpa,see,org,springframework,jdbc,datasource,lookup,map,data,source,lookup;public,void,set,data,sources,map,string,data,source,data,sources,this,data,source,lookup,new,map,data,source,lookup,data,sources
DefaultPersistenceUnitManager -> public void setDataSources(Map<String, DataSource> dataSources);1389648334;Specify the JDBC DataSources that the JPA persistence provider is supposed_to use for accessing the database, resolving data source names in_{@code persistence.xml} against Spring-managed DataSources._<p>The specified Map needs to define data source names for specific DataSource_objects, matching the data source names used in {@code persistence.xml}._If not specified, data source names will be resolved as JNDI names instead_(as defined by standard JPA)._@see org.springframework.jdbc.datasource.lookup.MapDataSourceLookup;public void setDataSources(Map<String, DataSource> dataSources) {_		this.dataSourceLookup = new MapDataSourceLookup(dataSources)__	};specify,the,jdbc,data,sources,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,sources,p,the,specified,map,needs,to,define,data,source,names,for,specific,data,source,objects,matching,the,data,source,names,used,in,code,persistence,xml,if,not,specified,data,source,names,will,be,resolved,as,jndi,names,instead,as,defined,by,standard,jpa,see,org,springframework,jdbc,datasource,lookup,map,data,source,lookup;public,void,set,data,sources,map,string,data,source,data,sources,this,data,source,lookup,new,map,data,source,lookup,data,sources
DefaultPersistenceUnitManager -> public void setDataSources(Map<String, DataSource> dataSources);1390250900;Specify the JDBC DataSources that the JPA persistence provider is supposed_to use for accessing the database, resolving data source names in_{@code persistence.xml} against Spring-managed DataSources._<p>The specified Map needs to define data source names for specific DataSource_objects, matching the data source names used in {@code persistence.xml}._If not specified, data source names will be resolved as JNDI names instead_(as defined by standard JPA)._@see org.springframework.jdbc.datasource.lookup.MapDataSourceLookup;public void setDataSources(Map<String, DataSource> dataSources) {_		this.dataSourceLookup = new MapDataSourceLookup(dataSources)__	};specify,the,jdbc,data,sources,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,sources,p,the,specified,map,needs,to,define,data,source,names,for,specific,data,source,objects,matching,the,data,source,names,used,in,code,persistence,xml,if,not,specified,data,source,names,will,be,resolved,as,jndi,names,instead,as,defined,by,standard,jpa,see,org,springframework,jdbc,datasource,lookup,map,data,source,lookup;public,void,set,data,sources,map,string,data,source,data,sources,this,data,source,lookup,new,map,data,source,lookup,data,sources
DefaultPersistenceUnitManager -> public void setDataSources(Map<String, DataSource> dataSources);1390313076;Specify the JDBC DataSources that the JPA persistence provider is supposed_to use for accessing the database, resolving data source names in_{@code persistence.xml} against Spring-managed DataSources._<p>The specified Map needs to define data source names for specific DataSource_objects, matching the data source names used in {@code persistence.xml}._If not specified, data source names will be resolved as JNDI names instead_(as defined by standard JPA)._@see org.springframework.jdbc.datasource.lookup.MapDataSourceLookup;public void setDataSources(Map<String, DataSource> dataSources) {_		this.dataSourceLookup = new MapDataSourceLookup(dataSources)__	};specify,the,jdbc,data,sources,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,sources,p,the,specified,map,needs,to,define,data,source,names,for,specific,data,source,objects,matching,the,data,source,names,used,in,code,persistence,xml,if,not,specified,data,source,names,will,be,resolved,as,jndi,names,instead,as,defined,by,standard,jpa,see,org,springframework,jdbc,datasource,lookup,map,data,source,lookup;public,void,set,data,sources,map,string,data,source,data,sources,this,data,source,lookup,new,map,data,source,lookup,data,sources
DefaultPersistenceUnitManager -> public void setDataSources(Map<String, DataSource> dataSources);1400140571;Specify the JDBC DataSources that the JPA persistence provider is supposed_to use for accessing the database, resolving data source names in_{@code persistence.xml} against Spring-managed DataSources._<p>The specified Map needs to define data source names for specific DataSource_objects, matching the data source names used in {@code persistence.xml}._If not specified, data source names will be resolved as JNDI names instead_(as defined by standard JPA)._@see org.springframework.jdbc.datasource.lookup.MapDataSourceLookup;public void setDataSources(Map<String, DataSource> dataSources) {_		this.dataSourceLookup = new MapDataSourceLookup(dataSources)__	};specify,the,jdbc,data,sources,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,sources,p,the,specified,map,needs,to,define,data,source,names,for,specific,data,source,objects,matching,the,data,source,names,used,in,code,persistence,xml,if,not,specified,data,source,names,will,be,resolved,as,jndi,names,instead,as,defined,by,standard,jpa,see,org,springframework,jdbc,datasource,lookup,map,data,source,lookup;public,void,set,data,sources,map,string,data,source,data,sources,this,data,source,lookup,new,map,data,source,lookup,data,sources
DefaultPersistenceUnitManager -> public void setDataSources(Map<String, DataSource> dataSources);1403774750;Specify the JDBC DataSources that the JPA persistence provider is supposed_to use for accessing the database, resolving data source names in_{@code persistence.xml} against Spring-managed DataSources._<p>The specified Map needs to define data source names for specific DataSource_objects, matching the data source names used in {@code persistence.xml}._If not specified, data source names will be resolved as JNDI names instead_(as defined by standard JPA)._@see org.springframework.jdbc.datasource.lookup.MapDataSourceLookup;public void setDataSources(Map<String, DataSource> dataSources) {_		this.dataSourceLookup = new MapDataSourceLookup(dataSources)__	};specify,the,jdbc,data,sources,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,sources,p,the,specified,map,needs,to,define,data,source,names,for,specific,data,source,objects,matching,the,data,source,names,used,in,code,persistence,xml,if,not,specified,data,source,names,will,be,resolved,as,jndi,names,instead,as,defined,by,standard,jpa,see,org,springframework,jdbc,datasource,lookup,map,data,source,lookup;public,void,set,data,sources,map,string,data,source,data,sources,this,data,source,lookup,new,map,data,source,lookup,data,sources
DefaultPersistenceUnitManager -> public void setDataSources(Map<String, DataSource> dataSources);1404056186;Specify the JDBC DataSources that the JPA persistence provider is supposed_to use for accessing the database, resolving data source names in_{@code persistence.xml} against Spring-managed DataSources._<p>The specified Map needs to define data source names for specific DataSource_objects, matching the data source names used in {@code persistence.xml}._If not specified, data source names will be resolved as JNDI names instead_(as defined by standard JPA)._@see org.springframework.jdbc.datasource.lookup.MapDataSourceLookup;public void setDataSources(Map<String, DataSource> dataSources) {_		this.dataSourceLookup = new MapDataSourceLookup(dataSources)__	};specify,the,jdbc,data,sources,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,sources,p,the,specified,map,needs,to,define,data,source,names,for,specific,data,source,objects,matching,the,data,source,names,used,in,code,persistence,xml,if,not,specified,data,source,names,will,be,resolved,as,jndi,names,instead,as,defined,by,standard,jpa,see,org,springframework,jdbc,datasource,lookup,map,data,source,lookup;public,void,set,data,sources,map,string,data,source,data,sources,this,data,source,lookup,new,map,data,source,lookup,data,sources
DefaultPersistenceUnitManager -> public void setDataSources(Map<String, DataSource> dataSources);1447323728;Specify the JDBC DataSources that the JPA persistence provider is supposed_to use for accessing the database, resolving data source names in_{@code persistence.xml} against Spring-managed DataSources._<p>The specified Map needs to define data source names for specific DataSource_objects, matching the data source names used in {@code persistence.xml}._If not specified, data source names will be resolved as JNDI names instead_(as defined by standard JPA)._@see org.springframework.jdbc.datasource.lookup.MapDataSourceLookup;public void setDataSources(Map<String, DataSource> dataSources) {_		this.dataSourceLookup = new MapDataSourceLookup(dataSources)__	};specify,the,jdbc,data,sources,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,sources,p,the,specified,map,needs,to,define,data,source,names,for,specific,data,source,objects,matching,the,data,source,names,used,in,code,persistence,xml,if,not,specified,data,source,names,will,be,resolved,as,jndi,names,instead,as,defined,by,standard,jpa,see,org,springframework,jdbc,datasource,lookup,map,data,source,lookup;public,void,set,data,sources,map,string,data,source,data,sources,this,data,source,lookup,new,map,data,source,lookup,data,sources
DefaultPersistenceUnitManager -> public void setDataSources(Map<String, DataSource> dataSources);1464299869;Specify the JDBC DataSources that the JPA persistence provider is supposed_to use for accessing the database, resolving data source names in_{@code persistence.xml} against Spring-managed DataSources._<p>The specified Map needs to define data source names for specific DataSource_objects, matching the data source names used in {@code persistence.xml}._If not specified, data source names will be resolved as JNDI names instead_(as defined by standard JPA)._@see org.springframework.jdbc.datasource.lookup.MapDataSourceLookup;public void setDataSources(Map<String, DataSource> dataSources) {_		this.dataSourceLookup = new MapDataSourceLookup(dataSources)__	};specify,the,jdbc,data,sources,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,sources,p,the,specified,map,needs,to,define,data,source,names,for,specific,data,source,objects,matching,the,data,source,names,used,in,code,persistence,xml,if,not,specified,data,source,names,will,be,resolved,as,jndi,names,instead,as,defined,by,standard,jpa,see,org,springframework,jdbc,datasource,lookup,map,data,source,lookup;public,void,set,data,sources,map,string,data,source,data,sources,this,data,source,lookup,new,map,data,source,lookup,data,sources
DefaultPersistenceUnitManager -> public void setDataSources(Map<String, DataSource> dataSources);1467668243;Specify the JDBC DataSources that the JPA persistence provider is supposed_to use for accessing the database, resolving data source names in_{@code persistence.xml} against Spring-managed DataSources._<p>The specified Map needs to define data source names for specific DataSource_objects, matching the data source names used in {@code persistence.xml}._If not specified, data source names will be resolved as JNDI names instead_(as defined by standard JPA)._@see org.springframework.jdbc.datasource.lookup.MapDataSourceLookup;public void setDataSources(Map<String, DataSource> dataSources) {_		this.dataSourceLookup = new MapDataSourceLookup(dataSources)__	};specify,the,jdbc,data,sources,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,sources,p,the,specified,map,needs,to,define,data,source,names,for,specific,data,source,objects,matching,the,data,source,names,used,in,code,persistence,xml,if,not,specified,data,source,names,will,be,resolved,as,jndi,names,instead,as,defined,by,standard,jpa,see,org,springframework,jdbc,datasource,lookup,map,data,source,lookup;public,void,set,data,sources,map,string,data,source,data,sources,this,data,source,lookup,new,map,data,source,lookup,data,sources
DefaultPersistenceUnitManager -> public void setDataSources(Map<String, DataSource> dataSources);1467730834;Specify the JDBC DataSources that the JPA persistence provider is supposed_to use for accessing the database, resolving data source names in_{@code persistence.xml} against Spring-managed DataSources._<p>The specified Map needs to define data source names for specific DataSource_objects, matching the data source names used in {@code persistence.xml}._If not specified, data source names will be resolved as JNDI names instead_(as defined by standard JPA)._@see org.springframework.jdbc.datasource.lookup.MapDataSourceLookup;public void setDataSources(Map<String, DataSource> dataSources) {_		this.dataSourceLookup = new MapDataSourceLookup(dataSources)__	};specify,the,jdbc,data,sources,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,sources,p,the,specified,map,needs,to,define,data,source,names,for,specific,data,source,objects,matching,the,data,source,names,used,in,code,persistence,xml,if,not,specified,data,source,names,will,be,resolved,as,jndi,names,instead,as,defined,by,standard,jpa,see,org,springframework,jdbc,datasource,lookup,map,data,source,lookup;public,void,set,data,sources,map,string,data,source,data,sources,this,data,source,lookup,new,map,data,source,lookup,data,sources
DefaultPersistenceUnitManager -> public void setDataSources(Map<String, DataSource> dataSources);1471464767;Specify the JDBC DataSources that the JPA persistence provider is supposed_to use for accessing the database, resolving data source names in_{@code persistence.xml} against Spring-managed DataSources._<p>The specified Map needs to define data source names for specific DataSource_objects, matching the data source names used in {@code persistence.xml}._If not specified, data source names will be resolved as JNDI names instead_(as defined by standard JPA)._@see org.springframework.jdbc.datasource.lookup.MapDataSourceLookup;public void setDataSources(Map<String, DataSource> dataSources) {_		this.dataSourceLookup = new MapDataSourceLookup(dataSources)__	};specify,the,jdbc,data,sources,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,sources,p,the,specified,map,needs,to,define,data,source,names,for,specific,data,source,objects,matching,the,data,source,names,used,in,code,persistence,xml,if,not,specified,data,source,names,will,be,resolved,as,jndi,names,instead,as,defined,by,standard,jpa,see,org,springframework,jdbc,datasource,lookup,map,data,source,lookup;public,void,set,data,sources,map,string,data,source,data,sources,this,data,source,lookup,new,map,data,source,lookup,data,sources
DefaultPersistenceUnitManager -> public void setDataSources(Map<String, DataSource> dataSources);1472736647;Specify the JDBC DataSources that the JPA persistence provider is supposed_to use for accessing the database, resolving data source names in_{@code persistence.xml} against Spring-managed DataSources._<p>The specified Map needs to define data source names for specific DataSource_objects, matching the data source names used in {@code persistence.xml}._If not specified, data source names will be resolved as JNDI names instead_(as defined by standard JPA)._@see org.springframework.jdbc.datasource.lookup.MapDataSourceLookup;public void setDataSources(Map<String, DataSource> dataSources) {_		this.dataSourceLookup = new MapDataSourceLookup(dataSources)__	};specify,the,jdbc,data,sources,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,sources,p,the,specified,map,needs,to,define,data,source,names,for,specific,data,source,objects,matching,the,data,source,names,used,in,code,persistence,xml,if,not,specified,data,source,names,will,be,resolved,as,jndi,names,instead,as,defined,by,standard,jpa,see,org,springframework,jdbc,datasource,lookup,map,data,source,lookup;public,void,set,data,sources,map,string,data,source,data,sources,this,data,source,lookup,new,map,data,source,lookup,data,sources
DefaultPersistenceUnitManager -> public void setDataSources(Map<String, DataSource> dataSources);1474895745;Specify the JDBC DataSources that the JPA persistence provider is supposed_to use for accessing the database, resolving data source names in_{@code persistence.xml} against Spring-managed DataSources._<p>The specified Map needs to define data source names for specific DataSource_objects, matching the data source names used in {@code persistence.xml}._If not specified, data source names will be resolved as JNDI names instead_(as defined by standard JPA)._@see org.springframework.jdbc.datasource.lookup.MapDataSourceLookup;public void setDataSources(Map<String, DataSource> dataSources) {_		this.dataSourceLookup = new MapDataSourceLookup(dataSources)__	};specify,the,jdbc,data,sources,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,sources,p,the,specified,map,needs,to,define,data,source,names,for,specific,data,source,objects,matching,the,data,source,names,used,in,code,persistence,xml,if,not,specified,data,source,names,will,be,resolved,as,jndi,names,instead,as,defined,by,standard,jpa,see,org,springframework,jdbc,datasource,lookup,map,data,source,lookup;public,void,set,data,sources,map,string,data,source,data,sources,this,data,source,lookup,new,map,data,source,lookup,data,sources
DefaultPersistenceUnitManager -> public void setDataSources(Map<String, DataSource> dataSources);1495868221;Specify the JDBC DataSources that the JPA persistence provider is supposed_to use for accessing the database, resolving data source names in_{@code persistence.xml} against Spring-managed DataSources._<p>The specified Map needs to define data source names for specific DataSource_objects, matching the data source names used in {@code persistence.xml}._If not specified, data source names will be resolved as JNDI names instead_(as defined by standard JPA)._@see org.springframework.jdbc.datasource.lookup.MapDataSourceLookup;public void setDataSources(Map<String, DataSource> dataSources) {_		this.dataSourceLookup = new MapDataSourceLookup(dataSources)__	};specify,the,jdbc,data,sources,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,sources,p,the,specified,map,needs,to,define,data,source,names,for,specific,data,source,objects,matching,the,data,source,names,used,in,code,persistence,xml,if,not,specified,data,source,names,will,be,resolved,as,jndi,names,instead,as,defined,by,standard,jpa,see,org,springframework,jdbc,datasource,lookup,map,data,source,lookup;public,void,set,data,sources,map,string,data,source,data,sources,this,data,source,lookup,new,map,data,source,lookup,data,sources
DefaultPersistenceUnitManager -> public void setDataSources(Map<String, DataSource> dataSources);1496259743;Specify the JDBC DataSources that the JPA persistence provider is supposed_to use for accessing the database, resolving data source names in_{@code persistence.xml} against Spring-managed DataSources._<p>The specified Map needs to define data source names for specific DataSource_objects, matching the data source names used in {@code persistence.xml}._If not specified, data source names will be resolved as JNDI names instead_(as defined by standard JPA)._@see org.springframework.jdbc.datasource.lookup.MapDataSourceLookup;public void setDataSources(Map<String, DataSource> dataSources) {_		this.dataSourceLookup = new MapDataSourceLookup(dataSources)__	};specify,the,jdbc,data,sources,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,sources,p,the,specified,map,needs,to,define,data,source,names,for,specific,data,source,objects,matching,the,data,source,names,used,in,code,persistence,xml,if,not,specified,data,source,names,will,be,resolved,as,jndi,names,instead,as,defined,by,standard,jpa,see,org,springframework,jdbc,datasource,lookup,map,data,source,lookup;public,void,set,data,sources,map,string,data,source,data,sources,this,data,source,lookup,new,map,data,source,lookup,data,sources
DefaultPersistenceUnitManager -> public void setDataSources(Map<String, DataSource> dataSources);1496837955;Specify the JDBC DataSources that the JPA persistence provider is supposed_to use for accessing the database, resolving data source names in_{@code persistence.xml} against Spring-managed DataSources._<p>The specified Map needs to define data source names for specific DataSource_objects, matching the data source names used in {@code persistence.xml}._If not specified, data source names will be resolved as JNDI names instead_(as defined by standard JPA)._@see org.springframework.jdbc.datasource.lookup.MapDataSourceLookup;public void setDataSources(Map<String, DataSource> dataSources) {_		this.dataSourceLookup = new MapDataSourceLookup(dataSources)__	};specify,the,jdbc,data,sources,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,sources,p,the,specified,map,needs,to,define,data,source,names,for,specific,data,source,objects,matching,the,data,source,names,used,in,code,persistence,xml,if,not,specified,data,source,names,will,be,resolved,as,jndi,names,instead,as,defined,by,standard,jpa,see,org,springframework,jdbc,datasource,lookup,map,data,source,lookup;public,void,set,data,sources,map,string,data,source,data,sources,this,data,source,lookup,new,map,data,source,lookup,data,sources
DefaultPersistenceUnitManager -> public void setDataSources(Map<String, DataSource> dataSources);1498780456;Specify the JDBC DataSources that the JPA persistence provider is supposed_to use for accessing the database, resolving data source names in_{@code persistence.xml} against Spring-managed DataSources._<p>The specified Map needs to define data source names for specific DataSource_objects, matching the data source names used in {@code persistence.xml}._If not specified, data source names will be resolved as JNDI names instead_(as defined by standard JPA)._@see org.springframework.jdbc.datasource.lookup.MapDataSourceLookup;public void setDataSources(Map<String, DataSource> dataSources) {_		this.dataSourceLookup = new MapDataSourceLookup(dataSources)__	};specify,the,jdbc,data,sources,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,sources,p,the,specified,map,needs,to,define,data,source,names,for,specific,data,source,objects,matching,the,data,source,names,used,in,code,persistence,xml,if,not,specified,data,source,names,will,be,resolved,as,jndi,names,instead,as,defined,by,standard,jpa,see,org,springframework,jdbc,datasource,lookup,map,data,source,lookup;public,void,set,data,sources,map,string,data,source,data,sources,this,data,source,lookup,new,map,data,source,lookup,data,sources
DefaultPersistenceUnitManager -> public void setDataSources(Map<String, DataSource> dataSources);1500448076;Specify the JDBC DataSources that the JPA persistence provider is supposed_to use for accessing the database, resolving data source names in_{@code persistence.xml} against Spring-managed DataSources._<p>The specified Map needs to define data source names for specific DataSource_objects, matching the data source names used in {@code persistence.xml}._If not specified, data source names will be resolved as JNDI names instead_(as defined by standard JPA)._@see org.springframework.jdbc.datasource.lookup.MapDataSourceLookup;public void setDataSources(Map<String, DataSource> dataSources) {_		this.dataSourceLookup = new MapDataSourceLookup(dataSources)__	};specify,the,jdbc,data,sources,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,sources,p,the,specified,map,needs,to,define,data,source,names,for,specific,data,source,objects,matching,the,data,source,names,used,in,code,persistence,xml,if,not,specified,data,source,names,will,be,resolved,as,jndi,names,instead,as,defined,by,standard,jpa,see,org,springframework,jdbc,datasource,lookup,map,data,source,lookup;public,void,set,data,sources,map,string,data,source,data,sources,this,data,source,lookup,new,map,data,source,lookup,data,sources
DefaultPersistenceUnitManager -> public void setDataSources(Map<String, DataSource> dataSources);1520528267;Specify the JDBC DataSources that the JPA persistence provider is supposed_to use for accessing the database, resolving data source names in_{@code persistence.xml} against Spring-managed DataSources._<p>The specified Map needs to define data source names for specific DataSource_objects, matching the data source names used in {@code persistence.xml}._If not specified, data source names will be resolved as JNDI names instead_(as defined by standard JPA)._@see org.springframework.jdbc.datasource.lookup.MapDataSourceLookup;public void setDataSources(Map<String, DataSource> dataSources) {_		this.dataSourceLookup = new MapDataSourceLookup(dataSources)__	};specify,the,jdbc,data,sources,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,sources,p,the,specified,map,needs,to,define,data,source,names,for,specific,data,source,objects,matching,the,data,source,names,used,in,code,persistence,xml,if,not,specified,data,source,names,will,be,resolved,as,jndi,names,instead,as,defined,by,standard,jpa,see,org,springframework,jdbc,datasource,lookup,map,data,source,lookup;public,void,set,data,sources,map,string,data,source,data,sources,this,data,source,lookup,new,map,data,source,lookup,data,sources
DefaultPersistenceUnitManager -> public void setDataSources(Map<String, DataSource> dataSources);1528313484;Specify the JDBC DataSources that the JPA persistence provider is supposed_to use for accessing the database, resolving data source names in_{@code persistence.xml} against Spring-managed DataSources._<p>The specified Map needs to define data source names for specific DataSource_objects, matching the data source names used in {@code persistence.xml}._If not specified, data source names will be resolved as JNDI names instead_(as defined by standard JPA)._@see org.springframework.jdbc.datasource.lookup.MapDataSourceLookup;public void setDataSources(Map<String, DataSource> dataSources) {_		this.dataSourceLookup = new MapDataSourceLookup(dataSources)__	};specify,the,jdbc,data,sources,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,sources,p,the,specified,map,needs,to,define,data,source,names,for,specific,data,source,objects,matching,the,data,source,names,used,in,code,persistence,xml,if,not,specified,data,source,names,will,be,resolved,as,jndi,names,instead,as,defined,by,standard,jpa,see,org,springframework,jdbc,datasource,lookup,map,data,source,lookup;public,void,set,data,sources,map,string,data,source,data,sources,this,data,source,lookup,new,map,data,source,lookup,data,sources
DefaultPersistenceUnitManager -> public void setDataSources(Map<String, DataSource> dataSources);1530174524;Specify the JDBC DataSources that the JPA persistence provider is supposed_to use for accessing the database, resolving data source names in_{@code persistence.xml} against Spring-managed DataSources._<p>The specified Map needs to define data source names for specific DataSource_objects, matching the data source names used in {@code persistence.xml}._If not specified, data source names will be resolved as JNDI names instead_(as defined by standard JPA)._@see org.springframework.jdbc.datasource.lookup.MapDataSourceLookup;public void setDataSources(Map<String, DataSource> dataSources) {_		this.dataSourceLookup = new MapDataSourceLookup(dataSources)__	};specify,the,jdbc,data,sources,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,sources,p,the,specified,map,needs,to,define,data,source,names,for,specific,data,source,objects,matching,the,data,source,names,used,in,code,persistence,xml,if,not,specified,data,source,names,will,be,resolved,as,jndi,names,instead,as,defined,by,standard,jpa,see,org,springframework,jdbc,datasource,lookup,map,data,source,lookup;public,void,set,data,sources,map,string,data,source,data,sources,this,data,source,lookup,new,map,data,source,lookup,data,sources
DefaultPersistenceUnitManager -> public void setDataSources(Map<String, DataSource> dataSources);1532091916;Specify the JDBC DataSources that the JPA persistence provider is supposed_to use for accessing the database, resolving data source names in_{@code persistence.xml} against Spring-managed DataSources._<p>The specified Map needs to define data source names for specific DataSource_objects, matching the data source names used in {@code persistence.xml}._If not specified, data source names will be resolved as JNDI names instead_(as defined by standard JPA)._@see org.springframework.jdbc.datasource.lookup.MapDataSourceLookup;public void setDataSources(Map<String, DataSource> dataSources) {_		this.dataSourceLookup = new MapDataSourceLookup(dataSources)__	};specify,the,jdbc,data,sources,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,sources,p,the,specified,map,needs,to,define,data,source,names,for,specific,data,source,objects,matching,the,data,source,names,used,in,code,persistence,xml,if,not,specified,data,source,names,will,be,resolved,as,jndi,names,instead,as,defined,by,standard,jpa,see,org,springframework,jdbc,datasource,lookup,map,data,source,lookup;public,void,set,data,sources,map,string,data,source,data,sources,this,data,source,lookup,new,map,data,source,lookup,data,sources
DefaultPersistenceUnitManager -> public DataSource getDefaultDataSource();1328020251;Return the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database if none has been specified in_<code>persistence.xml</code>.;public DataSource getDefaultDataSource() {_		return this.defaultDataSource__	};return,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,code;public,data,source,get,default,data,source,return,this,default,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultDataSource();1329142650;Return the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database if none has been specified in_<code>persistence.xml</code>.;public DataSource getDefaultDataSource() {_		return this.defaultDataSource__	};return,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,code;public,data,source,get,default,data,source,return,this,default,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultDataSource();1347282851;Return the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database if none has been specified in_<code>persistence.xml</code>.;public DataSource getDefaultDataSource() {_		return this.defaultDataSource__	};return,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,code;public,data,source,get,default,data,source,return,this,default,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultDataSource();1351648399;Return the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in <code>persistence.xml</code>.;public DataSource getDefaultDataSource() {_		return this.defaultDataSource__	};return,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,code;public,data,source,get,default,data,source,return,this,default,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultDataSource();1356735495;Return the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultDataSource() {_		return this.defaultDataSource__	};return,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,data,source,return,this,default,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultDataSource();1357119239;Return the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultDataSource() {_		return this.defaultDataSource__	};return,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,data,source,return,this,default,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultDataSource();1363714444;Return the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultDataSource() {_		return this.defaultDataSource__	};return,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,data,source,return,this,default,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultDataSource();1368482696;Return the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultDataSource() {_		return this.defaultDataSource__	};return,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,data,source,return,this,default,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultDataSource();1375434510;Return the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultDataSource() {_		return this.defaultDataSource__	};return,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,data,source,return,this,default,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultDataSource();1375458214;Return the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultDataSource() {_		return this.defaultDataSource__	};return,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,data,source,return,this,default,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultDataSource();1389648334;Return the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultDataSource() {_		return this.defaultDataSource__	};return,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,data,source,return,this,default,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultDataSource();1390250900;Return the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultDataSource() {_		return this.defaultDataSource__	};return,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,data,source,return,this,default,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultDataSource();1390313076;Return the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultDataSource() {_		return this.defaultDataSource__	};return,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,data,source,return,this,default,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultDataSource();1400140571;Return the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultDataSource() {_		return this.defaultDataSource__	};return,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,data,source,return,this,default,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultDataSource();1403774750;Return the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultDataSource() {_		return this.defaultDataSource__	};return,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,data,source,return,this,default,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultDataSource();1404056186;Return the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultDataSource() {_		return this.defaultDataSource__	};return,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,data,source,return,this,default,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultDataSource();1447323728;Return the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultDataSource() {_		return this.defaultDataSource__	};return,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,data,source,return,this,default,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultDataSource();1464299869;Return the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultDataSource() {_		return this.defaultDataSource__	};return,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,data,source,return,this,default,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultDataSource();1467668243;Return the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultDataSource() {_		return this.defaultDataSource__	};return,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,data,source,return,this,default,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultDataSource();1467730834;Return the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultDataSource() {_		return this.defaultDataSource__	};return,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,data,source,return,this,default,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultDataSource();1471464767;Return the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultDataSource() {_		return this.defaultDataSource__	};return,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,data,source,return,this,default,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultDataSource();1472736647;Return the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultDataSource() {_		return this.defaultDataSource__	};return,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,data,source,return,this,default,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultDataSource();1474895745;Return the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultDataSource() {_		return this.defaultDataSource__	};return,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,data,source,return,this,default,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultDataSource();1495868221;Return the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultDataSource() {_		return this.defaultDataSource__	};return,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,data,source,return,this,default,data,source
DefaultPersistenceUnitManager -> public DataSource getDefaultDataSource();1496259743;Return the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;public DataSource getDefaultDataSource() {_		return this.defaultDataSource__	};return,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;public,data,source,get,default,data,source,return,this,default,data,source
DefaultPersistenceUnitManager -> protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName);1328020251;Return the specified PersistenceUnitInfo from this manager's cache_of processed persistence units, keeping it in the cache (i.e. not_'obtaining' it for use but rather just accessing it for post-processing)._<p>This can be used in {@link #postProcessPersistenceUnitInfo} implementations,_detecting existing persistence units of the same name and potentially merging them._@param persistenceUnitName the name of the desired persistence unit_@return the PersistenceUnitInfo in mutable form, or <code>null</code> if not available;protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName) {_		PersistenceUnitInfo pui = this.persistenceUnitInfos.get(persistenceUnitName)__		if (pui != null && Proxy.isProxyClass(pui.getClass())) {_			_			Jpa2PersistenceUnitInfoDecorator dec = (Jpa2PersistenceUnitInfoDecorator) Proxy.getInvocationHandler(pui)__			return dec.getTarget()__		}_		else {_			_			return (MutablePersistenceUnitInfo) pui__		}_	};return,the,specified,persistence,unit,info,from,this,manager,s,cache,of,processed,persistence,units,keeping,it,in,the,cache,i,e,not,obtaining,it,for,use,but,rather,just,accessing,it,for,post,processing,p,this,can,be,used,in,link,post,process,persistence,unit,info,implementations,detecting,existing,persistence,units,of,the,same,name,and,potentially,merging,them,param,persistence,unit,name,the,name,of,the,desired,persistence,unit,return,the,persistence,unit,info,in,mutable,form,or,code,null,code,if,not,available;protected,final,mutable,persistence,unit,info,get,persistence,unit,info,string,persistence,unit,name,persistence,unit,info,pui,this,persistence,unit,infos,get,persistence,unit,name,if,pui,null,proxy,is,proxy,class,pui,get,class,jpa2persistence,unit,info,decorator,dec,jpa2persistence,unit,info,decorator,proxy,get,invocation,handler,pui,return,dec,get,target,else,return,mutable,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName);1329142650;Return the specified PersistenceUnitInfo from this manager's cache_of processed persistence units, keeping it in the cache (i.e. not_'obtaining' it for use but rather just accessing it for post-processing)._<p>This can be used in {@link #postProcessPersistenceUnitInfo} implementations,_detecting existing persistence units of the same name and potentially merging them._@param persistenceUnitName the name of the desired persistence unit_@return the PersistenceUnitInfo in mutable form, or <code>null</code> if not available;protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName) {_		PersistenceUnitInfo pui = this.persistenceUnitInfos.get(persistenceUnitName)__		if (pui != null && Proxy.isProxyClass(pui.getClass())) {_			_			Jpa2PersistenceUnitInfoDecorator dec = (Jpa2PersistenceUnitInfoDecorator) Proxy.getInvocationHandler(pui)__			return dec.getTarget()__		}_		else {_			_			return (MutablePersistenceUnitInfo) pui__		}_	};return,the,specified,persistence,unit,info,from,this,manager,s,cache,of,processed,persistence,units,keeping,it,in,the,cache,i,e,not,obtaining,it,for,use,but,rather,just,accessing,it,for,post,processing,p,this,can,be,used,in,link,post,process,persistence,unit,info,implementations,detecting,existing,persistence,units,of,the,same,name,and,potentially,merging,them,param,persistence,unit,name,the,name,of,the,desired,persistence,unit,return,the,persistence,unit,info,in,mutable,form,or,code,null,code,if,not,available;protected,final,mutable,persistence,unit,info,get,persistence,unit,info,string,persistence,unit,name,persistence,unit,info,pui,this,persistence,unit,infos,get,persistence,unit,name,if,pui,null,proxy,is,proxy,class,pui,get,class,jpa2persistence,unit,info,decorator,dec,jpa2persistence,unit,info,decorator,proxy,get,invocation,handler,pui,return,dec,get,target,else,return,mutable,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName);1347282851;Return the specified PersistenceUnitInfo from this manager's cache_of processed persistence units, keeping it in the cache (i.e. not_'obtaining' it for use but rather just accessing it for post-processing)._<p>This can be used in {@link #postProcessPersistenceUnitInfo} implementations,_detecting existing persistence units of the same name and potentially merging them._@param persistenceUnitName the name of the desired persistence unit_@return the PersistenceUnitInfo in mutable form, or <code>null</code> if not available;protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName) {_		PersistenceUnitInfo pui = this.persistenceUnitInfos.get(persistenceUnitName)__		if (pui != null && Proxy.isProxyClass(pui.getClass())) {_			_			Jpa2PersistenceUnitInfoDecorator dec = (Jpa2PersistenceUnitInfoDecorator) Proxy.getInvocationHandler(pui)__			return dec.getTarget()__		}_		else {_			_			return (MutablePersistenceUnitInfo) pui__		}_	};return,the,specified,persistence,unit,info,from,this,manager,s,cache,of,processed,persistence,units,keeping,it,in,the,cache,i,e,not,obtaining,it,for,use,but,rather,just,accessing,it,for,post,processing,p,this,can,be,used,in,link,post,process,persistence,unit,info,implementations,detecting,existing,persistence,units,of,the,same,name,and,potentially,merging,them,param,persistence,unit,name,the,name,of,the,desired,persistence,unit,return,the,persistence,unit,info,in,mutable,form,or,code,null,code,if,not,available;protected,final,mutable,persistence,unit,info,get,persistence,unit,info,string,persistence,unit,name,persistence,unit,info,pui,this,persistence,unit,infos,get,persistence,unit,name,if,pui,null,proxy,is,proxy,class,pui,get,class,jpa2persistence,unit,info,decorator,dec,jpa2persistence,unit,info,decorator,proxy,get,invocation,handler,pui,return,dec,get,target,else,return,mutable,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName);1351648399;Return the specified PersistenceUnitInfo from this manager's cache_of processed persistence units, keeping it in the cache (i.e. not_'obtaining' it for use but rather just accessing it for post-processing)._<p>This can be used in {@link #postProcessPersistenceUnitInfo} implementations,_detecting existing persistence units of the same name and potentially merging them._@param persistenceUnitName the name of the desired persistence unit_@return the PersistenceUnitInfo in mutable form, or <code>null</code> if not available;protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName) {_		PersistenceUnitInfo pui = this.persistenceUnitInfos.get(persistenceUnitName)__		if (pui != null && Proxy.isProxyClass(pui.getClass())) {_			_			Jpa2PersistenceUnitInfoDecorator dec = (Jpa2PersistenceUnitInfoDecorator) Proxy.getInvocationHandler(pui)__			return dec.getTarget()__		}_		else {_			_			return (MutablePersistenceUnitInfo) pui__		}_	};return,the,specified,persistence,unit,info,from,this,manager,s,cache,of,processed,persistence,units,keeping,it,in,the,cache,i,e,not,obtaining,it,for,use,but,rather,just,accessing,it,for,post,processing,p,this,can,be,used,in,link,post,process,persistence,unit,info,implementations,detecting,existing,persistence,units,of,the,same,name,and,potentially,merging,them,param,persistence,unit,name,the,name,of,the,desired,persistence,unit,return,the,persistence,unit,info,in,mutable,form,or,code,null,code,if,not,available;protected,final,mutable,persistence,unit,info,get,persistence,unit,info,string,persistence,unit,name,persistence,unit,info,pui,this,persistence,unit,infos,get,persistence,unit,name,if,pui,null,proxy,is,proxy,class,pui,get,class,jpa2persistence,unit,info,decorator,dec,jpa2persistence,unit,info,decorator,proxy,get,invocation,handler,pui,return,dec,get,target,else,return,mutable,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName);1356735495;Return the specified PersistenceUnitInfo from this manager's cache_of processed persistence units, keeping it in the cache (i.e. not_'obtaining' it for use but rather just accessing it for post-processing)._<p>This can be used in {@link #postProcessPersistenceUnitInfo} implementations,_detecting existing persistence units of the same name and potentially merging them._@param persistenceUnitName the name of the desired persistence unit_@return the PersistenceUnitInfo in mutable form, or {@code null} if not available;protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName) {_		PersistenceUnitInfo pui = this.persistenceUnitInfos.get(persistenceUnitName)__		if (pui != null && Proxy.isProxyClass(pui.getClass())) {_			_			Jpa2PersistenceUnitInfoDecorator dec = (Jpa2PersistenceUnitInfoDecorator) Proxy.getInvocationHandler(pui)__			return dec.getTarget()__		}_		else {_			_			return (MutablePersistenceUnitInfo) pui__		}_	};return,the,specified,persistence,unit,info,from,this,manager,s,cache,of,processed,persistence,units,keeping,it,in,the,cache,i,e,not,obtaining,it,for,use,but,rather,just,accessing,it,for,post,processing,p,this,can,be,used,in,link,post,process,persistence,unit,info,implementations,detecting,existing,persistence,units,of,the,same,name,and,potentially,merging,them,param,persistence,unit,name,the,name,of,the,desired,persistence,unit,return,the,persistence,unit,info,in,mutable,form,or,code,null,if,not,available;protected,final,mutable,persistence,unit,info,get,persistence,unit,info,string,persistence,unit,name,persistence,unit,info,pui,this,persistence,unit,infos,get,persistence,unit,name,if,pui,null,proxy,is,proxy,class,pui,get,class,jpa2persistence,unit,info,decorator,dec,jpa2persistence,unit,info,decorator,proxy,get,invocation,handler,pui,return,dec,get,target,else,return,mutable,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName);1357119239;Return the specified PersistenceUnitInfo from this manager's cache_of processed persistence units, keeping it in the cache (i.e. not_'obtaining' it for use but rather just accessing it for post-processing)._<p>This can be used in {@link #postProcessPersistenceUnitInfo} implementations,_detecting existing persistence units of the same name and potentially merging them._@param persistenceUnitName the name of the desired persistence unit_@return the PersistenceUnitInfo in mutable form, or {@code null} if not available;protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName) {_		PersistenceUnitInfo pui = this.persistenceUnitInfos.get(persistenceUnitName)__		if (pui != null && Proxy.isProxyClass(pui.getClass())) {_			_			Jpa2PersistenceUnitInfoDecorator dec = (Jpa2PersistenceUnitInfoDecorator) Proxy.getInvocationHandler(pui)__			return dec.getTarget()__		}_		else {_			_			return (MutablePersistenceUnitInfo) pui__		}_	};return,the,specified,persistence,unit,info,from,this,manager,s,cache,of,processed,persistence,units,keeping,it,in,the,cache,i,e,not,obtaining,it,for,use,but,rather,just,accessing,it,for,post,processing,p,this,can,be,used,in,link,post,process,persistence,unit,info,implementations,detecting,existing,persistence,units,of,the,same,name,and,potentially,merging,them,param,persistence,unit,name,the,name,of,the,desired,persistence,unit,return,the,persistence,unit,info,in,mutable,form,or,code,null,if,not,available;protected,final,mutable,persistence,unit,info,get,persistence,unit,info,string,persistence,unit,name,persistence,unit,info,pui,this,persistence,unit,infos,get,persistence,unit,name,if,pui,null,proxy,is,proxy,class,pui,get,class,jpa2persistence,unit,info,decorator,dec,jpa2persistence,unit,info,decorator,proxy,get,invocation,handler,pui,return,dec,get,target,else,return,mutable,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName);1363714444;Return the specified PersistenceUnitInfo from this manager's cache_of processed persistence units, keeping it in the cache (i.e. not_'obtaining' it for use but rather just accessing it for post-processing)._<p>This can be used in {@link #postProcessPersistenceUnitInfo} implementations,_detecting existing persistence units of the same name and potentially merging them._@param persistenceUnitName the name of the desired persistence unit_@return the PersistenceUnitInfo in mutable form, or {@code null} if not available;protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName) {_		PersistenceUnitInfo pui = this.persistenceUnitInfos.get(persistenceUnitName)__		return (MutablePersistenceUnitInfo) pui__	};return,the,specified,persistence,unit,info,from,this,manager,s,cache,of,processed,persistence,units,keeping,it,in,the,cache,i,e,not,obtaining,it,for,use,but,rather,just,accessing,it,for,post,processing,p,this,can,be,used,in,link,post,process,persistence,unit,info,implementations,detecting,existing,persistence,units,of,the,same,name,and,potentially,merging,them,param,persistence,unit,name,the,name,of,the,desired,persistence,unit,return,the,persistence,unit,info,in,mutable,form,or,code,null,if,not,available;protected,final,mutable,persistence,unit,info,get,persistence,unit,info,string,persistence,unit,name,persistence,unit,info,pui,this,persistence,unit,infos,get,persistence,unit,name,return,mutable,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName);1368482696;Return the specified PersistenceUnitInfo from this manager's cache_of processed persistence units, keeping it in the cache (i.e. not_'obtaining' it for use but rather just accessing it for post-processing)._<p>This can be used in {@link #postProcessPersistenceUnitInfo} implementations,_detecting existing persistence units of the same name and potentially merging them._@param persistenceUnitName the name of the desired persistence unit_@return the PersistenceUnitInfo in mutable form, or {@code null} if not available;protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName) {_		PersistenceUnitInfo pui = this.persistenceUnitInfos.get(persistenceUnitName)__		return (MutablePersistenceUnitInfo) pui__	};return,the,specified,persistence,unit,info,from,this,manager,s,cache,of,processed,persistence,units,keeping,it,in,the,cache,i,e,not,obtaining,it,for,use,but,rather,just,accessing,it,for,post,processing,p,this,can,be,used,in,link,post,process,persistence,unit,info,implementations,detecting,existing,persistence,units,of,the,same,name,and,potentially,merging,them,param,persistence,unit,name,the,name,of,the,desired,persistence,unit,return,the,persistence,unit,info,in,mutable,form,or,code,null,if,not,available;protected,final,mutable,persistence,unit,info,get,persistence,unit,info,string,persistence,unit,name,persistence,unit,info,pui,this,persistence,unit,infos,get,persistence,unit,name,return,mutable,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName);1375434510;Return the specified PersistenceUnitInfo from this manager's cache_of processed persistence units, keeping it in the cache (i.e. not_'obtaining' it for use but rather just accessing it for post-processing)._<p>This can be used in {@link #postProcessPersistenceUnitInfo} implementations,_detecting existing persistence units of the same name and potentially merging them._@param persistenceUnitName the name of the desired persistence unit_@return the PersistenceUnitInfo in mutable form, or {@code null} if not available;protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName) {_		PersistenceUnitInfo pui = this.persistenceUnitInfos.get(persistenceUnitName)__		return (MutablePersistenceUnitInfo) pui__	};return,the,specified,persistence,unit,info,from,this,manager,s,cache,of,processed,persistence,units,keeping,it,in,the,cache,i,e,not,obtaining,it,for,use,but,rather,just,accessing,it,for,post,processing,p,this,can,be,used,in,link,post,process,persistence,unit,info,implementations,detecting,existing,persistence,units,of,the,same,name,and,potentially,merging,them,param,persistence,unit,name,the,name,of,the,desired,persistence,unit,return,the,persistence,unit,info,in,mutable,form,or,code,null,if,not,available;protected,final,mutable,persistence,unit,info,get,persistence,unit,info,string,persistence,unit,name,persistence,unit,info,pui,this,persistence,unit,infos,get,persistence,unit,name,return,mutable,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName);1375458214;Return the specified PersistenceUnitInfo from this manager's cache_of processed persistence units, keeping it in the cache (i.e. not_'obtaining' it for use but rather just accessing it for post-processing)._<p>This can be used in {@link #postProcessPersistenceUnitInfo} implementations,_detecting existing persistence units of the same name and potentially merging them._@param persistenceUnitName the name of the desired persistence unit_@return the PersistenceUnitInfo in mutable form, or {@code null} if not available;protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName) {_		PersistenceUnitInfo pui = this.persistenceUnitInfos.get(persistenceUnitName)__		return (MutablePersistenceUnitInfo) pui__	};return,the,specified,persistence,unit,info,from,this,manager,s,cache,of,processed,persistence,units,keeping,it,in,the,cache,i,e,not,obtaining,it,for,use,but,rather,just,accessing,it,for,post,processing,p,this,can,be,used,in,link,post,process,persistence,unit,info,implementations,detecting,existing,persistence,units,of,the,same,name,and,potentially,merging,them,param,persistence,unit,name,the,name,of,the,desired,persistence,unit,return,the,persistence,unit,info,in,mutable,form,or,code,null,if,not,available;protected,final,mutable,persistence,unit,info,get,persistence,unit,info,string,persistence,unit,name,persistence,unit,info,pui,this,persistence,unit,infos,get,persistence,unit,name,return,mutable,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName);1389648334;Return the specified PersistenceUnitInfo from this manager's cache_of processed persistence units, keeping it in the cache (i.e. not_'obtaining' it for use but rather just accessing it for post-processing)._<p>This can be used in {@link #postProcessPersistenceUnitInfo} implementations,_detecting existing persistence units of the same name and potentially merging them._@param persistenceUnitName the name of the desired persistence unit_@return the PersistenceUnitInfo in mutable form, or {@code null} if not available;protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName) {_		PersistenceUnitInfo pui = this.persistenceUnitInfos.get(persistenceUnitName)__		return (MutablePersistenceUnitInfo) pui__	};return,the,specified,persistence,unit,info,from,this,manager,s,cache,of,processed,persistence,units,keeping,it,in,the,cache,i,e,not,obtaining,it,for,use,but,rather,just,accessing,it,for,post,processing,p,this,can,be,used,in,link,post,process,persistence,unit,info,implementations,detecting,existing,persistence,units,of,the,same,name,and,potentially,merging,them,param,persistence,unit,name,the,name,of,the,desired,persistence,unit,return,the,persistence,unit,info,in,mutable,form,or,code,null,if,not,available;protected,final,mutable,persistence,unit,info,get,persistence,unit,info,string,persistence,unit,name,persistence,unit,info,pui,this,persistence,unit,infos,get,persistence,unit,name,return,mutable,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName);1390250900;Return the specified PersistenceUnitInfo from this manager's cache_of processed persistence units, keeping it in the cache (i.e. not_'obtaining' it for use but rather just accessing it for post-processing)._<p>This can be used in {@link #postProcessPersistenceUnitInfo} implementations,_detecting existing persistence units of the same name and potentially merging them._@param persistenceUnitName the name of the desired persistence unit_@return the PersistenceUnitInfo in mutable form, or {@code null} if not available;protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName) {_		PersistenceUnitInfo pui = this.persistenceUnitInfos.get(persistenceUnitName)__		return (MutablePersistenceUnitInfo) pui__	};return,the,specified,persistence,unit,info,from,this,manager,s,cache,of,processed,persistence,units,keeping,it,in,the,cache,i,e,not,obtaining,it,for,use,but,rather,just,accessing,it,for,post,processing,p,this,can,be,used,in,link,post,process,persistence,unit,info,implementations,detecting,existing,persistence,units,of,the,same,name,and,potentially,merging,them,param,persistence,unit,name,the,name,of,the,desired,persistence,unit,return,the,persistence,unit,info,in,mutable,form,or,code,null,if,not,available;protected,final,mutable,persistence,unit,info,get,persistence,unit,info,string,persistence,unit,name,persistence,unit,info,pui,this,persistence,unit,infos,get,persistence,unit,name,return,mutable,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName);1390313076;Return the specified PersistenceUnitInfo from this manager's cache_of processed persistence units, keeping it in the cache (i.e. not_'obtaining' it for use but rather just accessing it for post-processing)._<p>This can be used in {@link #postProcessPersistenceUnitInfo} implementations,_detecting existing persistence units of the same name and potentially merging them._@param persistenceUnitName the name of the desired persistence unit_@return the PersistenceUnitInfo in mutable form, or {@code null} if not available;protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName) {_		PersistenceUnitInfo pui = this.persistenceUnitInfos.get(persistenceUnitName)__		return (MutablePersistenceUnitInfo) pui__	};return,the,specified,persistence,unit,info,from,this,manager,s,cache,of,processed,persistence,units,keeping,it,in,the,cache,i,e,not,obtaining,it,for,use,but,rather,just,accessing,it,for,post,processing,p,this,can,be,used,in,link,post,process,persistence,unit,info,implementations,detecting,existing,persistence,units,of,the,same,name,and,potentially,merging,them,param,persistence,unit,name,the,name,of,the,desired,persistence,unit,return,the,persistence,unit,info,in,mutable,form,or,code,null,if,not,available;protected,final,mutable,persistence,unit,info,get,persistence,unit,info,string,persistence,unit,name,persistence,unit,info,pui,this,persistence,unit,infos,get,persistence,unit,name,return,mutable,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName);1400140571;Return the specified PersistenceUnitInfo from this manager's cache_of processed persistence units, keeping it in the cache (i.e. not_'obtaining' it for use but rather just accessing it for post-processing)._<p>This can be used in {@link #postProcessPersistenceUnitInfo} implementations,_detecting existing persistence units of the same name and potentially merging them._@param persistenceUnitName the name of the desired persistence unit_@return the PersistenceUnitInfo in mutable form, or {@code null} if not available;protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName) {_		PersistenceUnitInfo pui = this.persistenceUnitInfos.get(persistenceUnitName)__		return (MutablePersistenceUnitInfo) pui__	};return,the,specified,persistence,unit,info,from,this,manager,s,cache,of,processed,persistence,units,keeping,it,in,the,cache,i,e,not,obtaining,it,for,use,but,rather,just,accessing,it,for,post,processing,p,this,can,be,used,in,link,post,process,persistence,unit,info,implementations,detecting,existing,persistence,units,of,the,same,name,and,potentially,merging,them,param,persistence,unit,name,the,name,of,the,desired,persistence,unit,return,the,persistence,unit,info,in,mutable,form,or,code,null,if,not,available;protected,final,mutable,persistence,unit,info,get,persistence,unit,info,string,persistence,unit,name,persistence,unit,info,pui,this,persistence,unit,infos,get,persistence,unit,name,return,mutable,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName);1403774750;Return the specified PersistenceUnitInfo from this manager's cache_of processed persistence units, keeping it in the cache (i.e. not_'obtaining' it for use but rather just accessing it for post-processing)._<p>This can be used in {@link #postProcessPersistenceUnitInfo} implementations,_detecting existing persistence units of the same name and potentially merging them._@param persistenceUnitName the name of the desired persistence unit_@return the PersistenceUnitInfo in mutable form, or {@code null} if not available;protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName) {_		PersistenceUnitInfo pui = this.persistenceUnitInfos.get(persistenceUnitName)__		return (MutablePersistenceUnitInfo) pui__	};return,the,specified,persistence,unit,info,from,this,manager,s,cache,of,processed,persistence,units,keeping,it,in,the,cache,i,e,not,obtaining,it,for,use,but,rather,just,accessing,it,for,post,processing,p,this,can,be,used,in,link,post,process,persistence,unit,info,implementations,detecting,existing,persistence,units,of,the,same,name,and,potentially,merging,them,param,persistence,unit,name,the,name,of,the,desired,persistence,unit,return,the,persistence,unit,info,in,mutable,form,or,code,null,if,not,available;protected,final,mutable,persistence,unit,info,get,persistence,unit,info,string,persistence,unit,name,persistence,unit,info,pui,this,persistence,unit,infos,get,persistence,unit,name,return,mutable,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName);1404056186;Return the specified PersistenceUnitInfo from this manager's cache_of processed persistence units, keeping it in the cache (i.e. not_'obtaining' it for use but rather just accessing it for post-processing)._<p>This can be used in {@link #postProcessPersistenceUnitInfo} implementations,_detecting existing persistence units of the same name and potentially merging them._@param persistenceUnitName the name of the desired persistence unit_@return the PersistenceUnitInfo in mutable form, or {@code null} if not available;protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName) {_		PersistenceUnitInfo pui = this.persistenceUnitInfos.get(persistenceUnitName)__		return (MutablePersistenceUnitInfo) pui__	};return,the,specified,persistence,unit,info,from,this,manager,s,cache,of,processed,persistence,units,keeping,it,in,the,cache,i,e,not,obtaining,it,for,use,but,rather,just,accessing,it,for,post,processing,p,this,can,be,used,in,link,post,process,persistence,unit,info,implementations,detecting,existing,persistence,units,of,the,same,name,and,potentially,merging,them,param,persistence,unit,name,the,name,of,the,desired,persistence,unit,return,the,persistence,unit,info,in,mutable,form,or,code,null,if,not,available;protected,final,mutable,persistence,unit,info,get,persistence,unit,info,string,persistence,unit,name,persistence,unit,info,pui,this,persistence,unit,infos,get,persistence,unit,name,return,mutable,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName);1447323728;Return the specified PersistenceUnitInfo from this manager's cache_of processed persistence units, keeping it in the cache (i.e. not_'obtaining' it for use but rather just accessing it for post-processing)._<p>This can be used in {@link #postProcessPersistenceUnitInfo} implementations,_detecting existing persistence units of the same name and potentially merging them._@param persistenceUnitName the name of the desired persistence unit_@return the PersistenceUnitInfo in mutable form, or {@code null} if not available;protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName) {_		PersistenceUnitInfo pui = this.persistenceUnitInfos.get(persistenceUnitName)__		return (MutablePersistenceUnitInfo) pui__	};return,the,specified,persistence,unit,info,from,this,manager,s,cache,of,processed,persistence,units,keeping,it,in,the,cache,i,e,not,obtaining,it,for,use,but,rather,just,accessing,it,for,post,processing,p,this,can,be,used,in,link,post,process,persistence,unit,info,implementations,detecting,existing,persistence,units,of,the,same,name,and,potentially,merging,them,param,persistence,unit,name,the,name,of,the,desired,persistence,unit,return,the,persistence,unit,info,in,mutable,form,or,code,null,if,not,available;protected,final,mutable,persistence,unit,info,get,persistence,unit,info,string,persistence,unit,name,persistence,unit,info,pui,this,persistence,unit,infos,get,persistence,unit,name,return,mutable,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName);1464299869;Return the specified PersistenceUnitInfo from this manager's cache_of processed persistence units, keeping it in the cache (i.e. not_'obtaining' it for use but rather just accessing it for post-processing)._<p>This can be used in {@link #postProcessPersistenceUnitInfo} implementations,_detecting existing persistence units of the same name and potentially merging them._@param persistenceUnitName the name of the desired persistence unit_@return the PersistenceUnitInfo in mutable form, or {@code null} if not available;protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName) {_		PersistenceUnitInfo pui = this.persistenceUnitInfos.get(persistenceUnitName)__		return (MutablePersistenceUnitInfo) pui__	};return,the,specified,persistence,unit,info,from,this,manager,s,cache,of,processed,persistence,units,keeping,it,in,the,cache,i,e,not,obtaining,it,for,use,but,rather,just,accessing,it,for,post,processing,p,this,can,be,used,in,link,post,process,persistence,unit,info,implementations,detecting,existing,persistence,units,of,the,same,name,and,potentially,merging,them,param,persistence,unit,name,the,name,of,the,desired,persistence,unit,return,the,persistence,unit,info,in,mutable,form,or,code,null,if,not,available;protected,final,mutable,persistence,unit,info,get,persistence,unit,info,string,persistence,unit,name,persistence,unit,info,pui,this,persistence,unit,infos,get,persistence,unit,name,return,mutable,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName);1467668243;Return the specified PersistenceUnitInfo from this manager's cache_of processed persistence units, keeping it in the cache (i.e. not_'obtaining' it for use but rather just accessing it for post-processing)._<p>This can be used in {@link #postProcessPersistenceUnitInfo} implementations,_detecting existing persistence units of the same name and potentially merging them._@param persistenceUnitName the name of the desired persistence unit_@return the PersistenceUnitInfo in mutable form, or {@code null} if not available;protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName) {_		PersistenceUnitInfo pui = this.persistenceUnitInfos.get(persistenceUnitName)__		return (MutablePersistenceUnitInfo) pui__	};return,the,specified,persistence,unit,info,from,this,manager,s,cache,of,processed,persistence,units,keeping,it,in,the,cache,i,e,not,obtaining,it,for,use,but,rather,just,accessing,it,for,post,processing,p,this,can,be,used,in,link,post,process,persistence,unit,info,implementations,detecting,existing,persistence,units,of,the,same,name,and,potentially,merging,them,param,persistence,unit,name,the,name,of,the,desired,persistence,unit,return,the,persistence,unit,info,in,mutable,form,or,code,null,if,not,available;protected,final,mutable,persistence,unit,info,get,persistence,unit,info,string,persistence,unit,name,persistence,unit,info,pui,this,persistence,unit,infos,get,persistence,unit,name,return,mutable,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName);1467730834;Return the specified PersistenceUnitInfo from this manager's cache_of processed persistence units, keeping it in the cache (i.e. not_'obtaining' it for use but rather just accessing it for post-processing)._<p>This can be used in {@link #postProcessPersistenceUnitInfo} implementations,_detecting existing persistence units of the same name and potentially merging them._@param persistenceUnitName the name of the desired persistence unit_@return the PersistenceUnitInfo in mutable form, or {@code null} if not available;protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName) {_		PersistenceUnitInfo pui = this.persistenceUnitInfos.get(persistenceUnitName)__		return (MutablePersistenceUnitInfo) pui__	};return,the,specified,persistence,unit,info,from,this,manager,s,cache,of,processed,persistence,units,keeping,it,in,the,cache,i,e,not,obtaining,it,for,use,but,rather,just,accessing,it,for,post,processing,p,this,can,be,used,in,link,post,process,persistence,unit,info,implementations,detecting,existing,persistence,units,of,the,same,name,and,potentially,merging,them,param,persistence,unit,name,the,name,of,the,desired,persistence,unit,return,the,persistence,unit,info,in,mutable,form,or,code,null,if,not,available;protected,final,mutable,persistence,unit,info,get,persistence,unit,info,string,persistence,unit,name,persistence,unit,info,pui,this,persistence,unit,infos,get,persistence,unit,name,return,mutable,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName);1471464767;Return the specified PersistenceUnitInfo from this manager's cache_of processed persistence units, keeping it in the cache (i.e. not_'obtaining' it for use but rather just accessing it for post-processing)._<p>This can be used in {@link #postProcessPersistenceUnitInfo} implementations,_detecting existing persistence units of the same name and potentially merging them._@param persistenceUnitName the name of the desired persistence unit_@return the PersistenceUnitInfo in mutable form, or {@code null} if not available;protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName) {_		PersistenceUnitInfo pui = this.persistenceUnitInfos.get(persistenceUnitName)__		return (MutablePersistenceUnitInfo) pui__	};return,the,specified,persistence,unit,info,from,this,manager,s,cache,of,processed,persistence,units,keeping,it,in,the,cache,i,e,not,obtaining,it,for,use,but,rather,just,accessing,it,for,post,processing,p,this,can,be,used,in,link,post,process,persistence,unit,info,implementations,detecting,existing,persistence,units,of,the,same,name,and,potentially,merging,them,param,persistence,unit,name,the,name,of,the,desired,persistence,unit,return,the,persistence,unit,info,in,mutable,form,or,code,null,if,not,available;protected,final,mutable,persistence,unit,info,get,persistence,unit,info,string,persistence,unit,name,persistence,unit,info,pui,this,persistence,unit,infos,get,persistence,unit,name,return,mutable,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName);1472736647;Return the specified PersistenceUnitInfo from this manager's cache_of processed persistence units, keeping it in the cache (i.e. not_'obtaining' it for use but rather just accessing it for post-processing)._<p>This can be used in {@link #postProcessPersistenceUnitInfo} implementations,_detecting existing persistence units of the same name and potentially merging them._@param persistenceUnitName the name of the desired persistence unit_@return the PersistenceUnitInfo in mutable form, or {@code null} if not available;protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName) {_		PersistenceUnitInfo pui = this.persistenceUnitInfos.get(persistenceUnitName)__		return (MutablePersistenceUnitInfo) pui__	};return,the,specified,persistence,unit,info,from,this,manager,s,cache,of,processed,persistence,units,keeping,it,in,the,cache,i,e,not,obtaining,it,for,use,but,rather,just,accessing,it,for,post,processing,p,this,can,be,used,in,link,post,process,persistence,unit,info,implementations,detecting,existing,persistence,units,of,the,same,name,and,potentially,merging,them,param,persistence,unit,name,the,name,of,the,desired,persistence,unit,return,the,persistence,unit,info,in,mutable,form,or,code,null,if,not,available;protected,final,mutable,persistence,unit,info,get,persistence,unit,info,string,persistence,unit,name,persistence,unit,info,pui,this,persistence,unit,infos,get,persistence,unit,name,return,mutable,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName);1474895745;Return the specified PersistenceUnitInfo from this manager's cache_of processed persistence units, keeping it in the cache (i.e. not_'obtaining' it for use but rather just accessing it for post-processing)._<p>This can be used in {@link #postProcessPersistenceUnitInfo} implementations,_detecting existing persistence units of the same name and potentially merging them._@param persistenceUnitName the name of the desired persistence unit_@return the PersistenceUnitInfo in mutable form, or {@code null} if not available;protected final MutablePersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName) {_		PersistenceUnitInfo pui = this.persistenceUnitInfos.get(persistenceUnitName)__		return (MutablePersistenceUnitInfo) pui__	};return,the,specified,persistence,unit,info,from,this,manager,s,cache,of,processed,persistence,units,keeping,it,in,the,cache,i,e,not,obtaining,it,for,use,but,rather,just,accessing,it,for,post,processing,p,this,can,be,used,in,link,post,process,persistence,unit,info,implementations,detecting,existing,persistence,units,of,the,same,name,and,potentially,merging,them,param,persistence,unit,name,the,name,of,the,desired,persistence,unit,return,the,persistence,unit,info,in,mutable,form,or,code,null,if,not,available;protected,final,mutable,persistence,unit,info,get,persistence,unit,info,string,persistence,unit,name,persistence,unit,info,pui,this,persistence,unit,infos,get,persistence,unit,name,return,mutable,persistence,unit,info,pui
DefaultPersistenceUnitManager -> @Nullable 	private Resource getOrmXmlForDefaultPersistenceUnit();1495868221;Determine JPA's default "META-INF/orm.xml" resource for use with Spring's default_persistence unit, if any._<p>Checks whether a "META-INF/orm.xml" file exists in the classpath and uses it_if it is not co-located with a "META-INF/persistence.xml" file.;@Nullable_	private Resource getOrmXmlForDefaultPersistenceUnit() {_		Resource ormXml = this.resourcePatternResolver.getResource(_				this.defaultPersistenceUnitRootLocation + DEFAULT_ORM_XML_RESOURCE)__		if (ormXml.exists()) {_			try {_				Resource persistenceXml = ormXml.createRelative(PERSISTENCE_XML_FILENAME)__				if (!persistenceXml.exists()) {_					return ormXml__				}_			}_			catch (IOException ex) {_				_				return ormXml__			}_		}_		return null__	};determine,jpa,s,default,meta,inf,orm,xml,resource,for,use,with,spring,s,default,persistence,unit,if,any,p,checks,whether,a,meta,inf,orm,xml,file,exists,in,the,classpath,and,uses,it,if,it,is,not,co,located,with,a,meta,inf,persistence,xml,file;nullable,private,resource,get,orm,xml,for,default,persistence,unit,resource,orm,xml,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,if,orm,xml,exists,try,resource,persistence,xml,orm,xml,create,relative,if,persistence,xml,exists,return,orm,xml,catch,ioexception,ex,return,orm,xml,return,null
DefaultPersistenceUnitManager -> @Nullable 	private Resource getOrmXmlForDefaultPersistenceUnit();1496259743;Determine JPA's default "META-INF/orm.xml" resource for use with Spring's default_persistence unit, if any._<p>Checks whether a "META-INF/orm.xml" file exists in the classpath and uses it_if it is not co-located with a "META-INF/persistence.xml" file.;@Nullable_	private Resource getOrmXmlForDefaultPersistenceUnit() {_		Resource ormXml = this.resourcePatternResolver.getResource(_				this.defaultPersistenceUnitRootLocation + DEFAULT_ORM_XML_RESOURCE)__		if (ormXml.exists()) {_			try {_				Resource persistenceXml = ormXml.createRelative(PERSISTENCE_XML_FILENAME)__				if (!persistenceXml.exists()) {_					return ormXml__				}_			}_			catch (IOException ex) {_				_				return ormXml__			}_		}_		return null__	};determine,jpa,s,default,meta,inf,orm,xml,resource,for,use,with,spring,s,default,persistence,unit,if,any,p,checks,whether,a,meta,inf,orm,xml,file,exists,in,the,classpath,and,uses,it,if,it,is,not,co,located,with,a,meta,inf,persistence,xml,file;nullable,private,resource,get,orm,xml,for,default,persistence,unit,resource,orm,xml,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,if,orm,xml,exists,try,resource,persistence,xml,orm,xml,create,relative,if,persistence,xml,exists,return,orm,xml,catch,ioexception,ex,return,orm,xml,return,null
DefaultPersistenceUnitManager -> @Nullable 	private Resource getOrmXmlForDefaultPersistenceUnit();1496837955;Determine JPA's default "META-INF/orm.xml" resource for use with Spring's default_persistence unit, if any._<p>Checks whether a "META-INF/orm.xml" file exists in the classpath and uses it_if it is not co-located with a "META-INF/persistence.xml" file.;@Nullable_	private Resource getOrmXmlForDefaultPersistenceUnit() {_		Resource ormXml = this.resourcePatternResolver.getResource(_				this.defaultPersistenceUnitRootLocation + DEFAULT_ORM_XML_RESOURCE)__		if (ormXml.exists()) {_			try {_				Resource persistenceXml = ormXml.createRelative(PERSISTENCE_XML_FILENAME)__				if (!persistenceXml.exists()) {_					return ormXml__				}_			}_			catch (IOException ex) {_				_				return ormXml__			}_		}_		return null__	};determine,jpa,s,default,meta,inf,orm,xml,resource,for,use,with,spring,s,default,persistence,unit,if,any,p,checks,whether,a,meta,inf,orm,xml,file,exists,in,the,classpath,and,uses,it,if,it,is,not,co,located,with,a,meta,inf,persistence,xml,file;nullable,private,resource,get,orm,xml,for,default,persistence,unit,resource,orm,xml,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,if,orm,xml,exists,try,resource,persistence,xml,orm,xml,create,relative,if,persistence,xml,exists,return,orm,xml,catch,ioexception,ex,return,orm,xml,return,null
DefaultPersistenceUnitManager -> @Nullable 	private Resource getOrmXmlForDefaultPersistenceUnit();1498780456;Determine JPA's default "META-INF/orm.xml" resource for use with Spring's default_persistence unit, if any._<p>Checks whether a "META-INF/orm.xml" file exists in the classpath and uses it_if it is not co-located with a "META-INF/persistence.xml" file.;@Nullable_	private Resource getOrmXmlForDefaultPersistenceUnit() {_		Resource ormXml = this.resourcePatternResolver.getResource(_				this.defaultPersistenceUnitRootLocation + DEFAULT_ORM_XML_RESOURCE)__		if (ormXml.exists()) {_			try {_				Resource persistenceXml = ormXml.createRelative(PERSISTENCE_XML_FILENAME)__				if (!persistenceXml.exists()) {_					return ormXml__				}_			}_			catch (IOException ex) {_				_				return ormXml__			}_		}_		return null__	};determine,jpa,s,default,meta,inf,orm,xml,resource,for,use,with,spring,s,default,persistence,unit,if,any,p,checks,whether,a,meta,inf,orm,xml,file,exists,in,the,classpath,and,uses,it,if,it,is,not,co,located,with,a,meta,inf,persistence,xml,file;nullable,private,resource,get,orm,xml,for,default,persistence,unit,resource,orm,xml,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,if,orm,xml,exists,try,resource,persistence,xml,orm,xml,create,relative,if,persistence,xml,exists,return,orm,xml,catch,ioexception,ex,return,orm,xml,return,null
DefaultPersistenceUnitManager -> @Nullable 	private Resource getOrmXmlForDefaultPersistenceUnit();1500448076;Determine JPA's default "META-INF/orm.xml" resource for use with Spring's default_persistence unit, if any._<p>Checks whether a "META-INF/orm.xml" file exists in the classpath and uses it_if it is not co-located with a "META-INF/persistence.xml" file.;@Nullable_	private Resource getOrmXmlForDefaultPersistenceUnit() {_		Resource ormXml = this.resourcePatternResolver.getResource(_				this.defaultPersistenceUnitRootLocation + DEFAULT_ORM_XML_RESOURCE)__		if (ormXml.exists()) {_			try {_				Resource persistenceXml = ormXml.createRelative(PERSISTENCE_XML_FILENAME)__				if (!persistenceXml.exists()) {_					return ormXml__				}_			}_			catch (IOException ex) {_				_				return ormXml__			}_		}_		return null__	};determine,jpa,s,default,meta,inf,orm,xml,resource,for,use,with,spring,s,default,persistence,unit,if,any,p,checks,whether,a,meta,inf,orm,xml,file,exists,in,the,classpath,and,uses,it,if,it,is,not,co,located,with,a,meta,inf,persistence,xml,file;nullable,private,resource,get,orm,xml,for,default,persistence,unit,resource,orm,xml,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,if,orm,xml,exists,try,resource,persistence,xml,orm,xml,create,relative,if,persistence,xml,exists,return,orm,xml,catch,ioexception,ex,return,orm,xml,return,null
DefaultPersistenceUnitManager -> @Nullable 	private Resource getOrmXmlForDefaultPersistenceUnit();1520528267;Determine JPA's default "META-INF/orm.xml" resource for use with Spring's default_persistence unit, if any._<p>Checks whether a "META-INF/orm.xml" file exists in the classpath and uses it_if it is not co-located with a "META-INF/persistence.xml" file.;@Nullable_	private Resource getOrmXmlForDefaultPersistenceUnit() {_		Resource ormXml = this.resourcePatternResolver.getResource(_				this.defaultPersistenceUnitRootLocation + DEFAULT_ORM_XML_RESOURCE)__		if (ormXml.exists()) {_			try {_				Resource persistenceXml = ormXml.createRelative(PERSISTENCE_XML_FILENAME)__				if (!persistenceXml.exists()) {_					return ormXml__				}_			}_			catch (IOException ex) {_				_				return ormXml__			}_		}_		return null__	};determine,jpa,s,default,meta,inf,orm,xml,resource,for,use,with,spring,s,default,persistence,unit,if,any,p,checks,whether,a,meta,inf,orm,xml,file,exists,in,the,classpath,and,uses,it,if,it,is,not,co,located,with,a,meta,inf,persistence,xml,file;nullable,private,resource,get,orm,xml,for,default,persistence,unit,resource,orm,xml,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,if,orm,xml,exists,try,resource,persistence,xml,orm,xml,create,relative,if,persistence,xml,exists,return,orm,xml,catch,ioexception,ex,return,orm,xml,return,null
DefaultPersistenceUnitManager -> @Nullable 	private Resource getOrmXmlForDefaultPersistenceUnit();1528313484;Determine JPA's default "META-INF/orm.xml" resource for use with Spring's default_persistence unit, if any._<p>Checks whether a "META-INF/orm.xml" file exists in the classpath and uses it_if it is not co-located with a "META-INF/persistence.xml" file.;@Nullable_	private Resource getOrmXmlForDefaultPersistenceUnit() {_		Resource ormXml = this.resourcePatternResolver.getResource(_				this.defaultPersistenceUnitRootLocation + DEFAULT_ORM_XML_RESOURCE)__		if (ormXml.exists()) {_			try {_				Resource persistenceXml = ormXml.createRelative(PERSISTENCE_XML_FILENAME)__				if (!persistenceXml.exists()) {_					return ormXml__				}_			}_			catch (IOException ex) {_				_				return ormXml__			}_		}_		return null__	};determine,jpa,s,default,meta,inf,orm,xml,resource,for,use,with,spring,s,default,persistence,unit,if,any,p,checks,whether,a,meta,inf,orm,xml,file,exists,in,the,classpath,and,uses,it,if,it,is,not,co,located,with,a,meta,inf,persistence,xml,file;nullable,private,resource,get,orm,xml,for,default,persistence,unit,resource,orm,xml,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,if,orm,xml,exists,try,resource,persistence,xml,orm,xml,create,relative,if,persistence,xml,exists,return,orm,xml,catch,ioexception,ex,return,orm,xml,return,null
DefaultPersistenceUnitManager -> @Nullable 	private Resource getOrmXmlForDefaultPersistenceUnit();1530174524;Determine JPA's default "META-INF/orm.xml" resource for use with Spring's default_persistence unit, if any._<p>Checks whether a "META-INF/orm.xml" file exists in the classpath and uses it_if it is not co-located with a "META-INF/persistence.xml" file.;@Nullable_	private Resource getOrmXmlForDefaultPersistenceUnit() {_		Resource ormXml = this.resourcePatternResolver.getResource(_				this.defaultPersistenceUnitRootLocation + DEFAULT_ORM_XML_RESOURCE)__		if (ormXml.exists()) {_			try {_				Resource persistenceXml = ormXml.createRelative(PERSISTENCE_XML_FILENAME)__				if (!persistenceXml.exists()) {_					return ormXml__				}_			}_			catch (IOException ex) {_				_				return ormXml__			}_		}_		return null__	};determine,jpa,s,default,meta,inf,orm,xml,resource,for,use,with,spring,s,default,persistence,unit,if,any,p,checks,whether,a,meta,inf,orm,xml,file,exists,in,the,classpath,and,uses,it,if,it,is,not,co,located,with,a,meta,inf,persistence,xml,file;nullable,private,resource,get,orm,xml,for,default,persistence,unit,resource,orm,xml,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,if,orm,xml,exists,try,resource,persistence,xml,orm,xml,create,relative,if,persistence,xml,exists,return,orm,xml,catch,ioexception,ex,return,orm,xml,return,null
DefaultPersistenceUnitManager -> @Nullable 	private Resource getOrmXmlForDefaultPersistenceUnit();1532091916;Determine JPA's default "META-INF/orm.xml" resource for use with Spring's default_persistence unit, if any._<p>Checks whether a "META-INF/orm.xml" file exists in the classpath and uses it_if it is not co-located with a "META-INF/persistence.xml" file.;@Nullable_	private Resource getOrmXmlForDefaultPersistenceUnit() {_		Resource ormXml = this.resourcePatternResolver.getResource(_				this.defaultPersistenceUnitRootLocation + DEFAULT_ORM_XML_RESOURCE)__		if (ormXml.exists()) {_			try {_				Resource persistenceXml = ormXml.createRelative(PERSISTENCE_XML_FILENAME)__				if (!persistenceXml.exists()) {_					return ormXml__				}_			}_			catch (IOException ex) {_				_				return ormXml__			}_		}_		return null__	};determine,jpa,s,default,meta,inf,orm,xml,resource,for,use,with,spring,s,default,persistence,unit,if,any,p,checks,whether,a,meta,inf,orm,xml,file,exists,in,the,classpath,and,uses,it,if,it,is,not,co,located,with,a,meta,inf,persistence,xml,file;nullable,private,resource,get,orm,xml,for,default,persistence,unit,resource,orm,xml,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,if,orm,xml,exists,try,resource,persistence,xml,orm,xml,create,relative,if,persistence,xml,exists,return,orm,xml,catch,ioexception,ex,return,orm,xml,return,null
DefaultPersistenceUnitManager -> @Nullable 	public DataSourceLookup getDataSourceLookup();1496837955;Return the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances.;@Nullable_	public DataSourceLookup getDataSourceLookup() {_		return this.dataSourceLookup__	};return,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances;nullable,public,data,source,lookup,get,data,source,lookup,return,this,data,source,lookup
DefaultPersistenceUnitManager -> @Nullable 	public DataSourceLookup getDataSourceLookup();1498780456;Return the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances.;@Nullable_	public DataSourceLookup getDataSourceLookup() {_		return this.dataSourceLookup__	};return,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances;nullable,public,data,source,lookup,get,data,source,lookup,return,this,data,source,lookup
DefaultPersistenceUnitManager -> @Nullable 	public DataSourceLookup getDataSourceLookup();1500448076;Return the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances.;@Nullable_	public DataSourceLookup getDataSourceLookup() {_		return this.dataSourceLookup__	};return,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances;nullable,public,data,source,lookup,get,data,source,lookup,return,this,data,source,lookup
DefaultPersistenceUnitManager -> @Nullable 	public DataSourceLookup getDataSourceLookup();1520528267;Return the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances.;@Nullable_	public DataSourceLookup getDataSourceLookup() {_		return this.dataSourceLookup__	};return,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances;nullable,public,data,source,lookup,get,data,source,lookup,return,this,data,source,lookup
DefaultPersistenceUnitManager -> @Nullable 	public DataSourceLookup getDataSourceLookup();1528313484;Return the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances.;@Nullable_	public DataSourceLookup getDataSourceLookup() {_		return this.dataSourceLookup__	};return,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances;nullable,public,data,source,lookup,get,data,source,lookup,return,this,data,source,lookup
DefaultPersistenceUnitManager -> @Nullable 	public DataSourceLookup getDataSourceLookup();1530174524;Return the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances.;@Nullable_	public DataSourceLookup getDataSourceLookup() {_		return this.dataSourceLookup__	};return,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances;nullable,public,data,source,lookup,get,data,source,lookup,return,this,data,source,lookup
DefaultPersistenceUnitManager -> @Nullable 	public DataSourceLookup getDataSourceLookup();1532091916;Return the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances.;@Nullable_	public DataSourceLookup getDataSourceLookup() {_		return this.dataSourceLookup__	};return,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances;nullable,public,data,source,lookup,get,data,source,lookup,return,this,data,source,lookup
DefaultPersistenceUnitManager -> public void setPersistenceUnitPostProcessors(@Nullable PersistenceUnitPostProcessor... postProcessors);1500448076;Set the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager._<p>Such post-processors can, for example, register further entity classes and_jar files, in addition to the metadata read from {@code persistence.xml}.;public void setPersistenceUnitPostProcessors(@Nullable PersistenceUnitPostProcessor... postProcessors) {_		this.persistenceUnitPostProcessors = postProcessors__	};set,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml;public,void,set,persistence,unit,post,processors,nullable,persistence,unit,post,processor,post,processors,this,persistence,unit,post,processors,post,processors
DefaultPersistenceUnitManager -> public void setPersistenceUnitPostProcessors(@Nullable PersistenceUnitPostProcessor... postProcessors);1520528267;Set the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager._<p>Such post-processors can, for example, register further entity classes and_jar files, in addition to the metadata read from {@code persistence.xml}.;public void setPersistenceUnitPostProcessors(@Nullable PersistenceUnitPostProcessor... postProcessors) {_		this.persistenceUnitPostProcessors = postProcessors__	};set,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml;public,void,set,persistence,unit,post,processors,nullable,persistence,unit,post,processor,post,processors,this,persistence,unit,post,processors,post,processors
DefaultPersistenceUnitManager -> public void setPersistenceUnitPostProcessors(@Nullable PersistenceUnitPostProcessor... postProcessors);1528313484;Set the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager._<p>Such post-processors can, for example, register further entity classes and_jar files, in addition to the metadata read from {@code persistence.xml}.;public void setPersistenceUnitPostProcessors(@Nullable PersistenceUnitPostProcessor... postProcessors) {_		this.persistenceUnitPostProcessors = postProcessors__	};set,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml;public,void,set,persistence,unit,post,processors,nullable,persistence,unit,post,processor,post,processors,this,persistence,unit,post,processors,post,processors
DefaultPersistenceUnitManager -> public void setPersistenceUnitPostProcessors(@Nullable PersistenceUnitPostProcessor... postProcessors);1530174524;Set the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager._<p>Such post-processors can, for example, register further entity classes and_jar files, in addition to the metadata read from {@code persistence.xml}.;public void setPersistenceUnitPostProcessors(@Nullable PersistenceUnitPostProcessor... postProcessors) {_		this.persistenceUnitPostProcessors = postProcessors__	};set,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml;public,void,set,persistence,unit,post,processors,nullable,persistence,unit,post,processor,post,processors,this,persistence,unit,post,processors,post,processors
DefaultPersistenceUnitManager -> public void setPersistenceUnitPostProcessors(@Nullable PersistenceUnitPostProcessor... postProcessors);1532091916;Set the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager._<p>Such post-processors can, for example, register further entity classes and_jar files, in addition to the metadata read from {@code persistence.xml}.;public void setPersistenceUnitPostProcessors(@Nullable PersistenceUnitPostProcessor... postProcessors) {_		this.persistenceUnitPostProcessors = postProcessors__	};set,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml;public,void,set,persistence,unit,post,processors,nullable,persistence,unit,post,processor,post,processors,this,persistence,unit,post,processors,post,processors
DefaultPersistenceUnitManager -> public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1328020251;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is not required to specify a LoadTimeWeaver: Most providers will be_able to provide a subset of their functionality without class instrumentation_as well, or operate with their VM agent specified on JVM startup._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._<p><b>NOTE:</b> As of Spring 2.5, the context's default LoadTimeWeaver (defined_as bean with name "loadTimeWeaver") will be picked up automatically, if available,_removing the need for LoadTimeWeaver configuration on each affected target bean.</b>_Consider using the <code>context:load-time-weaver</code> XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver_@see org.springframework.instrument.classloading.tomcat.TomcatInstrumentableClassLoader;public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.loadTimeWeaver = loadTimeWeaver__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,vm,agent,specified,on,jvm,startup,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,p,b,note,b,as,of,spring,2,5,the,context,s,default,load,time,weaver,defined,as,bean,with,name,load,time,weaver,will,be,picked,up,automatically,if,available,removing,the,need,for,load,time,weaver,configuration,on,each,affected,target,bean,b,consider,using,the,code,context,load,time,weaver,code,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver,see,org,springframework,instrument,classloading,tomcat,tomcat,instrumentable,class,loader;public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,load,time,weaver,load,time,weaver
DefaultPersistenceUnitManager -> public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1329142650;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is not required to specify a LoadTimeWeaver: Most providers will be_able to provide a subset of their functionality without class instrumentation_as well, or operate with their VM agent specified on JVM startup._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._<p><b>NOTE:</b> As of Spring 2.5, the context's default LoadTimeWeaver (defined_as bean with name "loadTimeWeaver") will be picked up automatically, if available,_removing the need for LoadTimeWeaver configuration on each affected target bean.</b>_Consider using the <code>context:load-time-weaver</code> XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver_@see org.springframework.instrument.classloading.tomcat.TomcatInstrumentableClassLoader;public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.loadTimeWeaver = loadTimeWeaver__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,vm,agent,specified,on,jvm,startup,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,p,b,note,b,as,of,spring,2,5,the,context,s,default,load,time,weaver,defined,as,bean,with,name,load,time,weaver,will,be,picked,up,automatically,if,available,removing,the,need,for,load,time,weaver,configuration,on,each,affected,target,bean,b,consider,using,the,code,context,load,time,weaver,code,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver,see,org,springframework,instrument,classloading,tomcat,tomcat,instrumentable,class,loader;public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,load,time,weaver,load,time,weaver
DefaultPersistenceUnitManager -> public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1347282851;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is not required to specify a LoadTimeWeaver: Most providers will be_able to provide a subset of their functionality without class instrumentation_as well, or operate with their VM agent specified on JVM startup._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._<p><b>NOTE:</b> As of Spring 2.5, the context's default LoadTimeWeaver (defined_as bean with name "loadTimeWeaver") will be picked up automatically, if available,_removing the need for LoadTimeWeaver configuration on each affected target bean.</b>_Consider using the <code>context:load-time-weaver</code> XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver_@see org.springframework.instrument.classloading.tomcat.TomcatInstrumentableClassLoader;public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.loadTimeWeaver = loadTimeWeaver__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,vm,agent,specified,on,jvm,startup,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,p,b,note,b,as,of,spring,2,5,the,context,s,default,load,time,weaver,defined,as,bean,with,name,load,time,weaver,will,be,picked,up,automatically,if,available,removing,the,need,for,load,time,weaver,configuration,on,each,affected,target,bean,b,consider,using,the,code,context,load,time,weaver,code,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver,see,org,springframework,instrument,classloading,tomcat,tomcat,instrumentable,class,loader;public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,load,time,weaver,load,time,weaver
DefaultPersistenceUnitManager -> public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1351648399;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is not required to specify a LoadTimeWeaver: Most providers will be_able to provide a subset of their functionality without class instrumentation_as well, or operate with their VM agent specified on JVM startup._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._<p><b>NOTE:</b> As of Spring 2.5, the context's default LoadTimeWeaver (defined_as bean with name "loadTimeWeaver") will be picked up automatically, if available,_removing the need for LoadTimeWeaver configuration on each affected target bean.</b>_Consider using the <code>context:load-time-weaver</code> XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver_@see org.springframework.instrument.classloading.tomcat.TomcatInstrumentableClassLoader;public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.loadTimeWeaver = loadTimeWeaver__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,vm,agent,specified,on,jvm,startup,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,p,b,note,b,as,of,spring,2,5,the,context,s,default,load,time,weaver,defined,as,bean,with,name,load,time,weaver,will,be,picked,up,automatically,if,available,removing,the,need,for,load,time,weaver,configuration,on,each,affected,target,bean,b,consider,using,the,code,context,load,time,weaver,code,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver,see,org,springframework,instrument,classloading,tomcat,tomcat,instrumentable,class,loader;public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,load,time,weaver,load,time,weaver
DefaultPersistenceUnitManager -> public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1357119239;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is not required to specify a LoadTimeWeaver: Most providers will be_able to provide a subset of their functionality without class instrumentation_as well, or operate with their VM agent specified on JVM startup._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._<p><b>NOTE:</b> As of Spring 2.5, the context's default LoadTimeWeaver (defined_as bean with name "loadTimeWeaver") will be picked up automatically, if available,_removing the need for LoadTimeWeaver configuration on each affected target bean.</b>_Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver_@see org.springframework.instrument.classloading.tomcat.TomcatInstrumentableClassLoader;public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.loadTimeWeaver = loadTimeWeaver__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,vm,agent,specified,on,jvm,startup,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,p,b,note,b,as,of,spring,2,5,the,context,s,default,load,time,weaver,defined,as,bean,with,name,load,time,weaver,will,be,picked,up,automatically,if,available,removing,the,need,for,load,time,weaver,configuration,on,each,affected,target,bean,b,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver,see,org,springframework,instrument,classloading,tomcat,tomcat,instrumentable,class,loader;public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,load,time,weaver,load,time,weaver
DefaultPersistenceUnitManager -> public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1363714444;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is not required to specify a LoadTimeWeaver: Most providers will be_able to provide a subset of their functionality without class instrumentation_as well, or operate with their VM agent specified on JVM startup._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._<p><b>NOTE:</b> As of Spring 2.5, the context's default LoadTimeWeaver (defined_as bean with name "loadTimeWeaver") will be picked up automatically, if available,_removing the need for LoadTimeWeaver configuration on each affected target bean.</b>_Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver_@see org.springframework.instrument.classloading.tomcat.TomcatInstrumentableClassLoader;public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.loadTimeWeaver = loadTimeWeaver__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,vm,agent,specified,on,jvm,startup,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,p,b,note,b,as,of,spring,2,5,the,context,s,default,load,time,weaver,defined,as,bean,with,name,load,time,weaver,will,be,picked,up,automatically,if,available,removing,the,need,for,load,time,weaver,configuration,on,each,affected,target,bean,b,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver,see,org,springframework,instrument,classloading,tomcat,tomcat,instrumentable,class,loader;public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,load,time,weaver,load,time,weaver
DefaultPersistenceUnitManager -> @Nullable 	public DataSource getDefaultJtaDataSource();1496837955;Return the JTA-aware DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;@Nullable_	public DataSource getDefaultJtaDataSource() {_		return this.defaultJtaDataSource__	};return,the,jta,aware,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;nullable,public,data,source,get,default,jta,data,source,return,this,default,jta,data,source
DefaultPersistenceUnitManager -> @Nullable 	public DataSource getDefaultJtaDataSource();1498780456;Return the JTA-aware DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;@Nullable_	public DataSource getDefaultJtaDataSource() {_		return this.defaultJtaDataSource__	};return,the,jta,aware,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;nullable,public,data,source,get,default,jta,data,source,return,this,default,jta,data,source
DefaultPersistenceUnitManager -> @Nullable 	public DataSource getDefaultJtaDataSource();1500448076;Return the JTA-aware DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;@Nullable_	public DataSource getDefaultJtaDataSource() {_		return this.defaultJtaDataSource__	};return,the,jta,aware,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;nullable,public,data,source,get,default,jta,data,source,return,this,default,jta,data,source
DefaultPersistenceUnitManager -> @Nullable 	public DataSource getDefaultJtaDataSource();1520528267;Return the JTA-aware DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;@Nullable_	public DataSource getDefaultJtaDataSource() {_		return this.defaultJtaDataSource__	};return,the,jta,aware,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;nullable,public,data,source,get,default,jta,data,source,return,this,default,jta,data,source
DefaultPersistenceUnitManager -> @Nullable 	public DataSource getDefaultJtaDataSource();1528313484;Return the JTA-aware DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;@Nullable_	public DataSource getDefaultJtaDataSource() {_		return this.defaultJtaDataSource__	};return,the,jta,aware,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;nullable,public,data,source,get,default,jta,data,source,return,this,default,jta,data,source
DefaultPersistenceUnitManager -> @Nullable 	public DataSource getDefaultJtaDataSource();1530174524;Return the JTA-aware DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;@Nullable_	public DataSource getDefaultJtaDataSource() {_		return this.defaultJtaDataSource__	};return,the,jta,aware,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;nullable,public,data,source,get,default,jta,data,source,return,this,default,jta,data,source
DefaultPersistenceUnitManager -> @Nullable 	public DataSource getDefaultJtaDataSource();1532091916;Return the JTA-aware DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;@Nullable_	public DataSource getDefaultJtaDataSource() {_		return this.defaultJtaDataSource__	};return,the,jta,aware,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;nullable,public,data,source,get,default,jta,data,source,return,this,default,jta,data,source
DefaultPersistenceUnitManager -> public void setDataSourceLookup(@Nullable DataSourceLookup dataSourceLookup);1496837955;Specify the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances._<p>Default is JndiDataSourceLookup, which resolves DataSource names as_JNDI names (as defined by standard JPA). Specify a BeanFactoryDataSourceLookup_instance if you want DataSource names to be resolved against Spring bean names._<p>Alternatively, consider passing in a map from names to DataSource instances_via the "dataSources" property. If the {@code persistence.xml} file_does not define DataSource names at all, specify a default DataSource_via the "defaultDataSource" property._@see org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup_@see org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup_@see #setDataSources_@see #setDefaultDataSource;public void setDataSourceLookup(@Nullable DataSourceLookup dataSourceLookup) {_		this.dataSourceLookup = (dataSourceLookup != null ? dataSourceLookup : new JndiDataSourceLookup())__	};specify,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances,p,default,is,jndi,data,source,lookup,which,resolves,data,source,names,as,jndi,names,as,defined,by,standard,jpa,specify,a,bean,factory,data,source,lookup,instance,if,you,want,data,source,names,to,be,resolved,against,spring,bean,names,p,alternatively,consider,passing,in,a,map,from,names,to,data,source,instances,via,the,data,sources,property,if,the,code,persistence,xml,file,does,not,define,data,source,names,at,all,specify,a,default,data,source,via,the,default,data,source,property,see,org,springframework,jdbc,datasource,lookup,jndi,data,source,lookup,see,org,springframework,jdbc,datasource,lookup,bean,factory,data,source,lookup,see,set,data,sources,see,set,default,data,source;public,void,set,data,source,lookup,nullable,data,source,lookup,data,source,lookup,this,data,source,lookup,data,source,lookup,null,data,source,lookup,new,jndi,data,source,lookup
DefaultPersistenceUnitManager -> public void setDataSourceLookup(@Nullable DataSourceLookup dataSourceLookup);1498780456;Specify the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances._<p>Default is JndiDataSourceLookup, which resolves DataSource names as_JNDI names (as defined by standard JPA). Specify a BeanFactoryDataSourceLookup_instance if you want DataSource names to be resolved against Spring bean names._<p>Alternatively, consider passing in a map from names to DataSource instances_via the "dataSources" property. If the {@code persistence.xml} file_does not define DataSource names at all, specify a default DataSource_via the "defaultDataSource" property._@see org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup_@see org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup_@see #setDataSources_@see #setDefaultDataSource;public void setDataSourceLookup(@Nullable DataSourceLookup dataSourceLookup) {_		this.dataSourceLookup = (dataSourceLookup != null ? dataSourceLookup : new JndiDataSourceLookup())__	};specify,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances,p,default,is,jndi,data,source,lookup,which,resolves,data,source,names,as,jndi,names,as,defined,by,standard,jpa,specify,a,bean,factory,data,source,lookup,instance,if,you,want,data,source,names,to,be,resolved,against,spring,bean,names,p,alternatively,consider,passing,in,a,map,from,names,to,data,source,instances,via,the,data,sources,property,if,the,code,persistence,xml,file,does,not,define,data,source,names,at,all,specify,a,default,data,source,via,the,default,data,source,property,see,org,springframework,jdbc,datasource,lookup,jndi,data,source,lookup,see,org,springframework,jdbc,datasource,lookup,bean,factory,data,source,lookup,see,set,data,sources,see,set,default,data,source;public,void,set,data,source,lookup,nullable,data,source,lookup,data,source,lookup,this,data,source,lookup,data,source,lookup,null,data,source,lookup,new,jndi,data,source,lookup
DefaultPersistenceUnitManager -> public void setDataSourceLookup(@Nullable DataSourceLookup dataSourceLookup);1500448076;Specify the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances._<p>Default is JndiDataSourceLookup, which resolves DataSource names as_JNDI names (as defined by standard JPA). Specify a BeanFactoryDataSourceLookup_instance if you want DataSource names to be resolved against Spring bean names._<p>Alternatively, consider passing in a map from names to DataSource instances_via the "dataSources" property. If the {@code persistence.xml} file_does not define DataSource names at all, specify a default DataSource_via the "defaultDataSource" property._@see org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup_@see org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup_@see #setDataSources_@see #setDefaultDataSource;public void setDataSourceLookup(@Nullable DataSourceLookup dataSourceLookup) {_		this.dataSourceLookup = (dataSourceLookup != null ? dataSourceLookup : new JndiDataSourceLookup())__	};specify,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances,p,default,is,jndi,data,source,lookup,which,resolves,data,source,names,as,jndi,names,as,defined,by,standard,jpa,specify,a,bean,factory,data,source,lookup,instance,if,you,want,data,source,names,to,be,resolved,against,spring,bean,names,p,alternatively,consider,passing,in,a,map,from,names,to,data,source,instances,via,the,data,sources,property,if,the,code,persistence,xml,file,does,not,define,data,source,names,at,all,specify,a,default,data,source,via,the,default,data,source,property,see,org,springframework,jdbc,datasource,lookup,jndi,data,source,lookup,see,org,springframework,jdbc,datasource,lookup,bean,factory,data,source,lookup,see,set,data,sources,see,set,default,data,source;public,void,set,data,source,lookup,nullable,data,source,lookup,data,source,lookup,this,data,source,lookup,data,source,lookup,null,data,source,lookup,new,jndi,data,source,lookup
DefaultPersistenceUnitManager -> public void setDataSourceLookup(@Nullable DataSourceLookup dataSourceLookup);1520528267;Specify the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances._<p>Default is JndiDataSourceLookup, which resolves DataSource names as_JNDI names (as defined by standard JPA). Specify a BeanFactoryDataSourceLookup_instance if you want DataSource names to be resolved against Spring bean names._<p>Alternatively, consider passing in a map from names to DataSource instances_via the "dataSources" property. If the {@code persistence.xml} file_does not define DataSource names at all, specify a default DataSource_via the "defaultDataSource" property._@see org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup_@see org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup_@see #setDataSources_@see #setDefaultDataSource;public void setDataSourceLookup(@Nullable DataSourceLookup dataSourceLookup) {_		this.dataSourceLookup = (dataSourceLookup != null ? dataSourceLookup : new JndiDataSourceLookup())__	};specify,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances,p,default,is,jndi,data,source,lookup,which,resolves,data,source,names,as,jndi,names,as,defined,by,standard,jpa,specify,a,bean,factory,data,source,lookup,instance,if,you,want,data,source,names,to,be,resolved,against,spring,bean,names,p,alternatively,consider,passing,in,a,map,from,names,to,data,source,instances,via,the,data,sources,property,if,the,code,persistence,xml,file,does,not,define,data,source,names,at,all,specify,a,default,data,source,via,the,default,data,source,property,see,org,springframework,jdbc,datasource,lookup,jndi,data,source,lookup,see,org,springframework,jdbc,datasource,lookup,bean,factory,data,source,lookup,see,set,data,sources,see,set,default,data,source;public,void,set,data,source,lookup,nullable,data,source,lookup,data,source,lookup,this,data,source,lookup,data,source,lookup,null,data,source,lookup,new,jndi,data,source,lookup
DefaultPersistenceUnitManager -> public void setDataSourceLookup(@Nullable DataSourceLookup dataSourceLookup);1528313484;Specify the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances._<p>Default is JndiDataSourceLookup, which resolves DataSource names as_JNDI names (as defined by standard JPA). Specify a BeanFactoryDataSourceLookup_instance if you want DataSource names to be resolved against Spring bean names._<p>Alternatively, consider passing in a map from names to DataSource instances_via the "dataSources" property. If the {@code persistence.xml} file_does not define DataSource names at all, specify a default DataSource_via the "defaultDataSource" property._@see org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup_@see org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup_@see #setDataSources_@see #setDefaultDataSource;public void setDataSourceLookup(@Nullable DataSourceLookup dataSourceLookup) {_		this.dataSourceLookup = (dataSourceLookup != null ? dataSourceLookup : new JndiDataSourceLookup())__	};specify,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances,p,default,is,jndi,data,source,lookup,which,resolves,data,source,names,as,jndi,names,as,defined,by,standard,jpa,specify,a,bean,factory,data,source,lookup,instance,if,you,want,data,source,names,to,be,resolved,against,spring,bean,names,p,alternatively,consider,passing,in,a,map,from,names,to,data,source,instances,via,the,data,sources,property,if,the,code,persistence,xml,file,does,not,define,data,source,names,at,all,specify,a,default,data,source,via,the,default,data,source,property,see,org,springframework,jdbc,datasource,lookup,jndi,data,source,lookup,see,org,springframework,jdbc,datasource,lookup,bean,factory,data,source,lookup,see,set,data,sources,see,set,default,data,source;public,void,set,data,source,lookup,nullable,data,source,lookup,data,source,lookup,this,data,source,lookup,data,source,lookup,null,data,source,lookup,new,jndi,data,source,lookup
DefaultPersistenceUnitManager -> public void setDataSourceLookup(@Nullable DataSourceLookup dataSourceLookup);1530174524;Specify the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances._<p>Default is JndiDataSourceLookup, which resolves DataSource names as_JNDI names (as defined by standard JPA). Specify a BeanFactoryDataSourceLookup_instance if you want DataSource names to be resolved against Spring bean names._<p>Alternatively, consider passing in a map from names to DataSource instances_via the "dataSources" property. If the {@code persistence.xml} file_does not define DataSource names at all, specify a default DataSource_via the "defaultDataSource" property._@see org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup_@see org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup_@see #setDataSources_@see #setDefaultDataSource;public void setDataSourceLookup(@Nullable DataSourceLookup dataSourceLookup) {_		this.dataSourceLookup = (dataSourceLookup != null ? dataSourceLookup : new JndiDataSourceLookup())__	};specify,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances,p,default,is,jndi,data,source,lookup,which,resolves,data,source,names,as,jndi,names,as,defined,by,standard,jpa,specify,a,bean,factory,data,source,lookup,instance,if,you,want,data,source,names,to,be,resolved,against,spring,bean,names,p,alternatively,consider,passing,in,a,map,from,names,to,data,source,instances,via,the,data,sources,property,if,the,code,persistence,xml,file,does,not,define,data,source,names,at,all,specify,a,default,data,source,via,the,default,data,source,property,see,org,springframework,jdbc,datasource,lookup,jndi,data,source,lookup,see,org,springframework,jdbc,datasource,lookup,bean,factory,data,source,lookup,see,set,data,sources,see,set,default,data,source;public,void,set,data,source,lookup,nullable,data,source,lookup,data,source,lookup,this,data,source,lookup,data,source,lookup,null,data,source,lookup,new,jndi,data,source,lookup
DefaultPersistenceUnitManager -> public void setDataSourceLookup(@Nullable DataSourceLookup dataSourceLookup);1532091916;Specify the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances._<p>Default is JndiDataSourceLookup, which resolves DataSource names as_JNDI names (as defined by standard JPA). Specify a BeanFactoryDataSourceLookup_instance if you want DataSource names to be resolved against Spring bean names._<p>Alternatively, consider passing in a map from names to DataSource instances_via the "dataSources" property. If the {@code persistence.xml} file_does not define DataSource names at all, specify a default DataSource_via the "defaultDataSource" property._@see org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup_@see org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup_@see #setDataSources_@see #setDefaultDataSource;public void setDataSourceLookup(@Nullable DataSourceLookup dataSourceLookup) {_		this.dataSourceLookup = (dataSourceLookup != null ? dataSourceLookup : new JndiDataSourceLookup())__	};specify,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances,p,default,is,jndi,data,source,lookup,which,resolves,data,source,names,as,jndi,names,as,defined,by,standard,jpa,specify,a,bean,factory,data,source,lookup,instance,if,you,want,data,source,names,to,be,resolved,against,spring,bean,names,p,alternatively,consider,passing,in,a,map,from,names,to,data,source,instances,via,the,data,sources,property,if,the,code,persistence,xml,file,does,not,define,data,source,names,at,all,specify,a,default,data,source,via,the,default,data,source,property,see,org,springframework,jdbc,datasource,lookup,jndi,data,source,lookup,see,org,springframework,jdbc,datasource,lookup,bean,factory,data,source,lookup,see,set,data,sources,see,set,default,data,source;public,void,set,data,source,lookup,nullable,data,source,lookup,data,source,lookup,this,data,source,lookup,data,source,lookup,null,data,source,lookup,new,jndi,data,source,lookup
DefaultPersistenceUnitManager -> @Nullable 	public LoadTimeWeaver getLoadTimeWeaver();1496837955;Return the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract.;@Nullable_	public LoadTimeWeaver getLoadTimeWeaver() {_		return this.loadTimeWeaver__	};return,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract;nullable,public,load,time,weaver,get,load,time,weaver,return,this,load,time,weaver
DefaultPersistenceUnitManager -> @Nullable 	public LoadTimeWeaver getLoadTimeWeaver();1498780456;Return the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract.;@Nullable_	public LoadTimeWeaver getLoadTimeWeaver() {_		return this.loadTimeWeaver__	};return,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract;nullable,public,load,time,weaver,get,load,time,weaver,return,this,load,time,weaver
DefaultPersistenceUnitManager -> @Nullable 	public LoadTimeWeaver getLoadTimeWeaver();1500448076;Return the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract.;@Nullable_	public LoadTimeWeaver getLoadTimeWeaver() {_		return this.loadTimeWeaver__	};return,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract;nullable,public,load,time,weaver,get,load,time,weaver,return,this,load,time,weaver
DefaultPersistenceUnitManager -> @Nullable 	public LoadTimeWeaver getLoadTimeWeaver();1520528267;Return the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract.;@Nullable_	public LoadTimeWeaver getLoadTimeWeaver() {_		return this.loadTimeWeaver__	};return,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract;nullable,public,load,time,weaver,get,load,time,weaver,return,this,load,time,weaver
DefaultPersistenceUnitManager -> @Nullable 	public LoadTimeWeaver getLoadTimeWeaver();1528313484;Return the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract.;@Nullable_	public LoadTimeWeaver getLoadTimeWeaver() {_		return this.loadTimeWeaver__	};return,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract;nullable,public,load,time,weaver,get,load,time,weaver,return,this,load,time,weaver
DefaultPersistenceUnitManager -> @Nullable 	public LoadTimeWeaver getLoadTimeWeaver();1530174524;Return the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract.;@Nullable_	public LoadTimeWeaver getLoadTimeWeaver() {_		return this.loadTimeWeaver__	};return,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract;nullable,public,load,time,weaver,get,load,time,weaver,return,this,load,time,weaver
DefaultPersistenceUnitManager -> @Nullable 	public LoadTimeWeaver getLoadTimeWeaver();1532091916;Return the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract.;@Nullable_	public LoadTimeWeaver getLoadTimeWeaver() {_		return this.loadTimeWeaver__	};return,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract;nullable,public,load,time,weaver,get,load,time,weaver,return,this,load,time,weaver
DefaultPersistenceUnitManager -> public void setDataSourceLookup(DataSourceLookup dataSourceLookup);1328020251;Specify the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in <code>persistence.xml</code>_against Spring-managed DataSource instances._<p>Default is JndiDataSourceLookup, which resolves DataSource names as_JNDI names (as defined by standard JPA). Specify a BeanFactoryDataSourceLookup_instance if you want DataSource names to be resolved against Spring bean names._<p>Alternatively, consider passing in a map from names to DataSource instances_via the "dataSources" property. If the <code>persistence.xml</code> file_does not define DataSource names at all, specify a default DataSource_via the "defaultDataSource" property._@see org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup_@see org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup_@see #setDataSources_@see #setDefaultDataSource;public void setDataSourceLookup(DataSourceLookup dataSourceLookup) {_		this.dataSourceLookup = (dataSourceLookup != null ? dataSourceLookup : new JndiDataSourceLookup())__	};specify,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,code,against,spring,managed,data,source,instances,p,default,is,jndi,data,source,lookup,which,resolves,data,source,names,as,jndi,names,as,defined,by,standard,jpa,specify,a,bean,factory,data,source,lookup,instance,if,you,want,data,source,names,to,be,resolved,against,spring,bean,names,p,alternatively,consider,passing,in,a,map,from,names,to,data,source,instances,via,the,data,sources,property,if,the,code,persistence,xml,code,file,does,not,define,data,source,names,at,all,specify,a,default,data,source,via,the,default,data,source,property,see,org,springframework,jdbc,datasource,lookup,jndi,data,source,lookup,see,org,springframework,jdbc,datasource,lookup,bean,factory,data,source,lookup,see,set,data,sources,see,set,default,data,source;public,void,set,data,source,lookup,data,source,lookup,data,source,lookup,this,data,source,lookup,data,source,lookup,null,data,source,lookup,new,jndi,data,source,lookup
DefaultPersistenceUnitManager -> public void setDataSourceLookup(DataSourceLookup dataSourceLookup);1329142650;Specify the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in <code>persistence.xml</code>_against Spring-managed DataSource instances._<p>Default is JndiDataSourceLookup, which resolves DataSource names as_JNDI names (as defined by standard JPA). Specify a BeanFactoryDataSourceLookup_instance if you want DataSource names to be resolved against Spring bean names._<p>Alternatively, consider passing in a map from names to DataSource instances_via the "dataSources" property. If the <code>persistence.xml</code> file_does not define DataSource names at all, specify a default DataSource_via the "defaultDataSource" property._@see org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup_@see org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup_@see #setDataSources_@see #setDefaultDataSource;public void setDataSourceLookup(DataSourceLookup dataSourceLookup) {_		this.dataSourceLookup = (dataSourceLookup != null ? dataSourceLookup : new JndiDataSourceLookup())__	};specify,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,code,against,spring,managed,data,source,instances,p,default,is,jndi,data,source,lookup,which,resolves,data,source,names,as,jndi,names,as,defined,by,standard,jpa,specify,a,bean,factory,data,source,lookup,instance,if,you,want,data,source,names,to,be,resolved,against,spring,bean,names,p,alternatively,consider,passing,in,a,map,from,names,to,data,source,instances,via,the,data,sources,property,if,the,code,persistence,xml,code,file,does,not,define,data,source,names,at,all,specify,a,default,data,source,via,the,default,data,source,property,see,org,springframework,jdbc,datasource,lookup,jndi,data,source,lookup,see,org,springframework,jdbc,datasource,lookup,bean,factory,data,source,lookup,see,set,data,sources,see,set,default,data,source;public,void,set,data,source,lookup,data,source,lookup,data,source,lookup,this,data,source,lookup,data,source,lookup,null,data,source,lookup,new,jndi,data,source,lookup
DefaultPersistenceUnitManager -> public void setDataSourceLookup(DataSourceLookup dataSourceLookup);1347282851;Specify the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in <code>persistence.xml</code>_against Spring-managed DataSource instances._<p>Default is JndiDataSourceLookup, which resolves DataSource names as_JNDI names (as defined by standard JPA). Specify a BeanFactoryDataSourceLookup_instance if you want DataSource names to be resolved against Spring bean names._<p>Alternatively, consider passing in a map from names to DataSource instances_via the "dataSources" property. If the <code>persistence.xml</code> file_does not define DataSource names at all, specify a default DataSource_via the "defaultDataSource" property._@see org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup_@see org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup_@see #setDataSources_@see #setDefaultDataSource;public void setDataSourceLookup(DataSourceLookup dataSourceLookup) {_		this.dataSourceLookup = (dataSourceLookup != null ? dataSourceLookup : new JndiDataSourceLookup())__	};specify,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,code,against,spring,managed,data,source,instances,p,default,is,jndi,data,source,lookup,which,resolves,data,source,names,as,jndi,names,as,defined,by,standard,jpa,specify,a,bean,factory,data,source,lookup,instance,if,you,want,data,source,names,to,be,resolved,against,spring,bean,names,p,alternatively,consider,passing,in,a,map,from,names,to,data,source,instances,via,the,data,sources,property,if,the,code,persistence,xml,code,file,does,not,define,data,source,names,at,all,specify,a,default,data,source,via,the,default,data,source,property,see,org,springframework,jdbc,datasource,lookup,jndi,data,source,lookup,see,org,springframework,jdbc,datasource,lookup,bean,factory,data,source,lookup,see,set,data,sources,see,set,default,data,source;public,void,set,data,source,lookup,data,source,lookup,data,source,lookup,this,data,source,lookup,data,source,lookup,null,data,source,lookup,new,jndi,data,source,lookup
DefaultPersistenceUnitManager -> public void setDataSourceLookup(DataSourceLookup dataSourceLookup);1351648399;Specify the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in <code>persistence.xml</code>_against Spring-managed DataSource instances._<p>Default is JndiDataSourceLookup, which resolves DataSource names as_JNDI names (as defined by standard JPA). Specify a BeanFactoryDataSourceLookup_instance if you want DataSource names to be resolved against Spring bean names._<p>Alternatively, consider passing in a map from names to DataSource instances_via the "dataSources" property. If the <code>persistence.xml</code> file_does not define DataSource names at all, specify a default DataSource_via the "defaultDataSource" property._@see org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup_@see org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup_@see #setDataSources_@see #setDefaultDataSource;public void setDataSourceLookup(DataSourceLookup dataSourceLookup) {_		this.dataSourceLookup = (dataSourceLookup != null ? dataSourceLookup : new JndiDataSourceLookup())__	};specify,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,code,against,spring,managed,data,source,instances,p,default,is,jndi,data,source,lookup,which,resolves,data,source,names,as,jndi,names,as,defined,by,standard,jpa,specify,a,bean,factory,data,source,lookup,instance,if,you,want,data,source,names,to,be,resolved,against,spring,bean,names,p,alternatively,consider,passing,in,a,map,from,names,to,data,source,instances,via,the,data,sources,property,if,the,code,persistence,xml,code,file,does,not,define,data,source,names,at,all,specify,a,default,data,source,via,the,default,data,source,property,see,org,springframework,jdbc,datasource,lookup,jndi,data,source,lookup,see,org,springframework,jdbc,datasource,lookup,bean,factory,data,source,lookup,see,set,data,sources,see,set,default,data,source;public,void,set,data,source,lookup,data,source,lookup,data,source,lookup,this,data,source,lookup,data,source,lookup,null,data,source,lookup,new,jndi,data,source,lookup
DefaultPersistenceUnitManager -> public void setDataSourceLookup(DataSourceLookup dataSourceLookup);1356735495;Specify the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances._<p>Default is JndiDataSourceLookup, which resolves DataSource names as_JNDI names (as defined by standard JPA). Specify a BeanFactoryDataSourceLookup_instance if you want DataSource names to be resolved against Spring bean names._<p>Alternatively, consider passing in a map from names to DataSource instances_via the "dataSources" property. If the {@code persistence.xml} file_does not define DataSource names at all, specify a default DataSource_via the "defaultDataSource" property._@see org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup_@see org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup_@see #setDataSources_@see #setDefaultDataSource;public void setDataSourceLookup(DataSourceLookup dataSourceLookup) {_		this.dataSourceLookup = (dataSourceLookup != null ? dataSourceLookup : new JndiDataSourceLookup())__	};specify,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances,p,default,is,jndi,data,source,lookup,which,resolves,data,source,names,as,jndi,names,as,defined,by,standard,jpa,specify,a,bean,factory,data,source,lookup,instance,if,you,want,data,source,names,to,be,resolved,against,spring,bean,names,p,alternatively,consider,passing,in,a,map,from,names,to,data,source,instances,via,the,data,sources,property,if,the,code,persistence,xml,file,does,not,define,data,source,names,at,all,specify,a,default,data,source,via,the,default,data,source,property,see,org,springframework,jdbc,datasource,lookup,jndi,data,source,lookup,see,org,springframework,jdbc,datasource,lookup,bean,factory,data,source,lookup,see,set,data,sources,see,set,default,data,source;public,void,set,data,source,lookup,data,source,lookup,data,source,lookup,this,data,source,lookup,data,source,lookup,null,data,source,lookup,new,jndi,data,source,lookup
DefaultPersistenceUnitManager -> public void setDataSourceLookup(DataSourceLookup dataSourceLookup);1357119239;Specify the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances._<p>Default is JndiDataSourceLookup, which resolves DataSource names as_JNDI names (as defined by standard JPA). Specify a BeanFactoryDataSourceLookup_instance if you want DataSource names to be resolved against Spring bean names._<p>Alternatively, consider passing in a map from names to DataSource instances_via the "dataSources" property. If the {@code persistence.xml} file_does not define DataSource names at all, specify a default DataSource_via the "defaultDataSource" property._@see org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup_@see org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup_@see #setDataSources_@see #setDefaultDataSource;public void setDataSourceLookup(DataSourceLookup dataSourceLookup) {_		this.dataSourceLookup = (dataSourceLookup != null ? dataSourceLookup : new JndiDataSourceLookup())__	};specify,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances,p,default,is,jndi,data,source,lookup,which,resolves,data,source,names,as,jndi,names,as,defined,by,standard,jpa,specify,a,bean,factory,data,source,lookup,instance,if,you,want,data,source,names,to,be,resolved,against,spring,bean,names,p,alternatively,consider,passing,in,a,map,from,names,to,data,source,instances,via,the,data,sources,property,if,the,code,persistence,xml,file,does,not,define,data,source,names,at,all,specify,a,default,data,source,via,the,default,data,source,property,see,org,springframework,jdbc,datasource,lookup,jndi,data,source,lookup,see,org,springframework,jdbc,datasource,lookup,bean,factory,data,source,lookup,see,set,data,sources,see,set,default,data,source;public,void,set,data,source,lookup,data,source,lookup,data,source,lookup,this,data,source,lookup,data,source,lookup,null,data,source,lookup,new,jndi,data,source,lookup
DefaultPersistenceUnitManager -> public void setDataSourceLookup(DataSourceLookup dataSourceLookup);1363714444;Specify the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances._<p>Default is JndiDataSourceLookup, which resolves DataSource names as_JNDI names (as defined by standard JPA). Specify a BeanFactoryDataSourceLookup_instance if you want DataSource names to be resolved against Spring bean names._<p>Alternatively, consider passing in a map from names to DataSource instances_via the "dataSources" property. If the {@code persistence.xml} file_does not define DataSource names at all, specify a default DataSource_via the "defaultDataSource" property._@see org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup_@see org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup_@see #setDataSources_@see #setDefaultDataSource;public void setDataSourceLookup(DataSourceLookup dataSourceLookup) {_		this.dataSourceLookup = (dataSourceLookup != null ? dataSourceLookup : new JndiDataSourceLookup())__	};specify,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances,p,default,is,jndi,data,source,lookup,which,resolves,data,source,names,as,jndi,names,as,defined,by,standard,jpa,specify,a,bean,factory,data,source,lookup,instance,if,you,want,data,source,names,to,be,resolved,against,spring,bean,names,p,alternatively,consider,passing,in,a,map,from,names,to,data,source,instances,via,the,data,sources,property,if,the,code,persistence,xml,file,does,not,define,data,source,names,at,all,specify,a,default,data,source,via,the,default,data,source,property,see,org,springframework,jdbc,datasource,lookup,jndi,data,source,lookup,see,org,springframework,jdbc,datasource,lookup,bean,factory,data,source,lookup,see,set,data,sources,see,set,default,data,source;public,void,set,data,source,lookup,data,source,lookup,data,source,lookup,this,data,source,lookup,data,source,lookup,null,data,source,lookup,new,jndi,data,source,lookup
DefaultPersistenceUnitManager -> public void setDataSourceLookup(DataSourceLookup dataSourceLookup);1368482696;Specify the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances._<p>Default is JndiDataSourceLookup, which resolves DataSource names as_JNDI names (as defined by standard JPA). Specify a BeanFactoryDataSourceLookup_instance if you want DataSource names to be resolved against Spring bean names._<p>Alternatively, consider passing in a map from names to DataSource instances_via the "dataSources" property. If the {@code persistence.xml} file_does not define DataSource names at all, specify a default DataSource_via the "defaultDataSource" property._@see org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup_@see org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup_@see #setDataSources_@see #setDefaultDataSource;public void setDataSourceLookup(DataSourceLookup dataSourceLookup) {_		this.dataSourceLookup = (dataSourceLookup != null ? dataSourceLookup : new JndiDataSourceLookup())__	};specify,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances,p,default,is,jndi,data,source,lookup,which,resolves,data,source,names,as,jndi,names,as,defined,by,standard,jpa,specify,a,bean,factory,data,source,lookup,instance,if,you,want,data,source,names,to,be,resolved,against,spring,bean,names,p,alternatively,consider,passing,in,a,map,from,names,to,data,source,instances,via,the,data,sources,property,if,the,code,persistence,xml,file,does,not,define,data,source,names,at,all,specify,a,default,data,source,via,the,default,data,source,property,see,org,springframework,jdbc,datasource,lookup,jndi,data,source,lookup,see,org,springframework,jdbc,datasource,lookup,bean,factory,data,source,lookup,see,set,data,sources,see,set,default,data,source;public,void,set,data,source,lookup,data,source,lookup,data,source,lookup,this,data,source,lookup,data,source,lookup,null,data,source,lookup,new,jndi,data,source,lookup
DefaultPersistenceUnitManager -> public void setDataSourceLookup(DataSourceLookup dataSourceLookup);1375434510;Specify the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances._<p>Default is JndiDataSourceLookup, which resolves DataSource names as_JNDI names (as defined by standard JPA). Specify a BeanFactoryDataSourceLookup_instance if you want DataSource names to be resolved against Spring bean names._<p>Alternatively, consider passing in a map from names to DataSource instances_via the "dataSources" property. If the {@code persistence.xml} file_does not define DataSource names at all, specify a default DataSource_via the "defaultDataSource" property._@see org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup_@see org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup_@see #setDataSources_@see #setDefaultDataSource;public void setDataSourceLookup(DataSourceLookup dataSourceLookup) {_		this.dataSourceLookup = (dataSourceLookup != null ? dataSourceLookup : new JndiDataSourceLookup())__	};specify,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances,p,default,is,jndi,data,source,lookup,which,resolves,data,source,names,as,jndi,names,as,defined,by,standard,jpa,specify,a,bean,factory,data,source,lookup,instance,if,you,want,data,source,names,to,be,resolved,against,spring,bean,names,p,alternatively,consider,passing,in,a,map,from,names,to,data,source,instances,via,the,data,sources,property,if,the,code,persistence,xml,file,does,not,define,data,source,names,at,all,specify,a,default,data,source,via,the,default,data,source,property,see,org,springframework,jdbc,datasource,lookup,jndi,data,source,lookup,see,org,springframework,jdbc,datasource,lookup,bean,factory,data,source,lookup,see,set,data,sources,see,set,default,data,source;public,void,set,data,source,lookup,data,source,lookup,data,source,lookup,this,data,source,lookup,data,source,lookup,null,data,source,lookup,new,jndi,data,source,lookup
DefaultPersistenceUnitManager -> public void setDataSourceLookup(DataSourceLookup dataSourceLookup);1375458214;Specify the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances._<p>Default is JndiDataSourceLookup, which resolves DataSource names as_JNDI names (as defined by standard JPA). Specify a BeanFactoryDataSourceLookup_instance if you want DataSource names to be resolved against Spring bean names._<p>Alternatively, consider passing in a map from names to DataSource instances_via the "dataSources" property. If the {@code persistence.xml} file_does not define DataSource names at all, specify a default DataSource_via the "defaultDataSource" property._@see org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup_@see org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup_@see #setDataSources_@see #setDefaultDataSource;public void setDataSourceLookup(DataSourceLookup dataSourceLookup) {_		this.dataSourceLookup = (dataSourceLookup != null ? dataSourceLookup : new JndiDataSourceLookup())__	};specify,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances,p,default,is,jndi,data,source,lookup,which,resolves,data,source,names,as,jndi,names,as,defined,by,standard,jpa,specify,a,bean,factory,data,source,lookup,instance,if,you,want,data,source,names,to,be,resolved,against,spring,bean,names,p,alternatively,consider,passing,in,a,map,from,names,to,data,source,instances,via,the,data,sources,property,if,the,code,persistence,xml,file,does,not,define,data,source,names,at,all,specify,a,default,data,source,via,the,default,data,source,property,see,org,springframework,jdbc,datasource,lookup,jndi,data,source,lookup,see,org,springframework,jdbc,datasource,lookup,bean,factory,data,source,lookup,see,set,data,sources,see,set,default,data,source;public,void,set,data,source,lookup,data,source,lookup,data,source,lookup,this,data,source,lookup,data,source,lookup,null,data,source,lookup,new,jndi,data,source,lookup
DefaultPersistenceUnitManager -> public void setDataSourceLookup(DataSourceLookup dataSourceLookup);1389648334;Specify the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances._<p>Default is JndiDataSourceLookup, which resolves DataSource names as_JNDI names (as defined by standard JPA). Specify a BeanFactoryDataSourceLookup_instance if you want DataSource names to be resolved against Spring bean names._<p>Alternatively, consider passing in a map from names to DataSource instances_via the "dataSources" property. If the {@code persistence.xml} file_does not define DataSource names at all, specify a default DataSource_via the "defaultDataSource" property._@see org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup_@see org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup_@see #setDataSources_@see #setDefaultDataSource;public void setDataSourceLookup(DataSourceLookup dataSourceLookup) {_		this.dataSourceLookup = (dataSourceLookup != null ? dataSourceLookup : new JndiDataSourceLookup())__	};specify,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances,p,default,is,jndi,data,source,lookup,which,resolves,data,source,names,as,jndi,names,as,defined,by,standard,jpa,specify,a,bean,factory,data,source,lookup,instance,if,you,want,data,source,names,to,be,resolved,against,spring,bean,names,p,alternatively,consider,passing,in,a,map,from,names,to,data,source,instances,via,the,data,sources,property,if,the,code,persistence,xml,file,does,not,define,data,source,names,at,all,specify,a,default,data,source,via,the,default,data,source,property,see,org,springframework,jdbc,datasource,lookup,jndi,data,source,lookup,see,org,springframework,jdbc,datasource,lookup,bean,factory,data,source,lookup,see,set,data,sources,see,set,default,data,source;public,void,set,data,source,lookup,data,source,lookup,data,source,lookup,this,data,source,lookup,data,source,lookup,null,data,source,lookup,new,jndi,data,source,lookup
DefaultPersistenceUnitManager -> public void setDataSourceLookup(DataSourceLookup dataSourceLookup);1390250900;Specify the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances._<p>Default is JndiDataSourceLookup, which resolves DataSource names as_JNDI names (as defined by standard JPA). Specify a BeanFactoryDataSourceLookup_instance if you want DataSource names to be resolved against Spring bean names._<p>Alternatively, consider passing in a map from names to DataSource instances_via the "dataSources" property. If the {@code persistence.xml} file_does not define DataSource names at all, specify a default DataSource_via the "defaultDataSource" property._@see org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup_@see org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup_@see #setDataSources_@see #setDefaultDataSource;public void setDataSourceLookup(DataSourceLookup dataSourceLookup) {_		this.dataSourceLookup = (dataSourceLookup != null ? dataSourceLookup : new JndiDataSourceLookup())__	};specify,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances,p,default,is,jndi,data,source,lookup,which,resolves,data,source,names,as,jndi,names,as,defined,by,standard,jpa,specify,a,bean,factory,data,source,lookup,instance,if,you,want,data,source,names,to,be,resolved,against,spring,bean,names,p,alternatively,consider,passing,in,a,map,from,names,to,data,source,instances,via,the,data,sources,property,if,the,code,persistence,xml,file,does,not,define,data,source,names,at,all,specify,a,default,data,source,via,the,default,data,source,property,see,org,springframework,jdbc,datasource,lookup,jndi,data,source,lookup,see,org,springframework,jdbc,datasource,lookup,bean,factory,data,source,lookup,see,set,data,sources,see,set,default,data,source;public,void,set,data,source,lookup,data,source,lookup,data,source,lookup,this,data,source,lookup,data,source,lookup,null,data,source,lookup,new,jndi,data,source,lookup
DefaultPersistenceUnitManager -> public void setDataSourceLookup(DataSourceLookup dataSourceLookup);1390313076;Specify the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances._<p>Default is JndiDataSourceLookup, which resolves DataSource names as_JNDI names (as defined by standard JPA). Specify a BeanFactoryDataSourceLookup_instance if you want DataSource names to be resolved against Spring bean names._<p>Alternatively, consider passing in a map from names to DataSource instances_via the "dataSources" property. If the {@code persistence.xml} file_does not define DataSource names at all, specify a default DataSource_via the "defaultDataSource" property._@see org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup_@see org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup_@see #setDataSources_@see #setDefaultDataSource;public void setDataSourceLookup(DataSourceLookup dataSourceLookup) {_		this.dataSourceLookup = (dataSourceLookup != null ? dataSourceLookup : new JndiDataSourceLookup())__	};specify,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances,p,default,is,jndi,data,source,lookup,which,resolves,data,source,names,as,jndi,names,as,defined,by,standard,jpa,specify,a,bean,factory,data,source,lookup,instance,if,you,want,data,source,names,to,be,resolved,against,spring,bean,names,p,alternatively,consider,passing,in,a,map,from,names,to,data,source,instances,via,the,data,sources,property,if,the,code,persistence,xml,file,does,not,define,data,source,names,at,all,specify,a,default,data,source,via,the,default,data,source,property,see,org,springframework,jdbc,datasource,lookup,jndi,data,source,lookup,see,org,springframework,jdbc,datasource,lookup,bean,factory,data,source,lookup,see,set,data,sources,see,set,default,data,source;public,void,set,data,source,lookup,data,source,lookup,data,source,lookup,this,data,source,lookup,data,source,lookup,null,data,source,lookup,new,jndi,data,source,lookup
DefaultPersistenceUnitManager -> public void setDataSourceLookup(DataSourceLookup dataSourceLookup);1400140571;Specify the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances._<p>Default is JndiDataSourceLookup, which resolves DataSource names as_JNDI names (as defined by standard JPA). Specify a BeanFactoryDataSourceLookup_instance if you want DataSource names to be resolved against Spring bean names._<p>Alternatively, consider passing in a map from names to DataSource instances_via the "dataSources" property. If the {@code persistence.xml} file_does not define DataSource names at all, specify a default DataSource_via the "defaultDataSource" property._@see org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup_@see org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup_@see #setDataSources_@see #setDefaultDataSource;public void setDataSourceLookup(DataSourceLookup dataSourceLookup) {_		this.dataSourceLookup = (dataSourceLookup != null ? dataSourceLookup : new JndiDataSourceLookup())__	};specify,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances,p,default,is,jndi,data,source,lookup,which,resolves,data,source,names,as,jndi,names,as,defined,by,standard,jpa,specify,a,bean,factory,data,source,lookup,instance,if,you,want,data,source,names,to,be,resolved,against,spring,bean,names,p,alternatively,consider,passing,in,a,map,from,names,to,data,source,instances,via,the,data,sources,property,if,the,code,persistence,xml,file,does,not,define,data,source,names,at,all,specify,a,default,data,source,via,the,default,data,source,property,see,org,springframework,jdbc,datasource,lookup,jndi,data,source,lookup,see,org,springframework,jdbc,datasource,lookup,bean,factory,data,source,lookup,see,set,data,sources,see,set,default,data,source;public,void,set,data,source,lookup,data,source,lookup,data,source,lookup,this,data,source,lookup,data,source,lookup,null,data,source,lookup,new,jndi,data,source,lookup
DefaultPersistenceUnitManager -> public void setDataSourceLookup(DataSourceLookup dataSourceLookup);1403774750;Specify the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances._<p>Default is JndiDataSourceLookup, which resolves DataSource names as_JNDI names (as defined by standard JPA). Specify a BeanFactoryDataSourceLookup_instance if you want DataSource names to be resolved against Spring bean names._<p>Alternatively, consider passing in a map from names to DataSource instances_via the "dataSources" property. If the {@code persistence.xml} file_does not define DataSource names at all, specify a default DataSource_via the "defaultDataSource" property._@see org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup_@see org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup_@see #setDataSources_@see #setDefaultDataSource;public void setDataSourceLookup(DataSourceLookup dataSourceLookup) {_		this.dataSourceLookup = (dataSourceLookup != null ? dataSourceLookup : new JndiDataSourceLookup())__	};specify,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances,p,default,is,jndi,data,source,lookup,which,resolves,data,source,names,as,jndi,names,as,defined,by,standard,jpa,specify,a,bean,factory,data,source,lookup,instance,if,you,want,data,source,names,to,be,resolved,against,spring,bean,names,p,alternatively,consider,passing,in,a,map,from,names,to,data,source,instances,via,the,data,sources,property,if,the,code,persistence,xml,file,does,not,define,data,source,names,at,all,specify,a,default,data,source,via,the,default,data,source,property,see,org,springframework,jdbc,datasource,lookup,jndi,data,source,lookup,see,org,springframework,jdbc,datasource,lookup,bean,factory,data,source,lookup,see,set,data,sources,see,set,default,data,source;public,void,set,data,source,lookup,data,source,lookup,data,source,lookup,this,data,source,lookup,data,source,lookup,null,data,source,lookup,new,jndi,data,source,lookup
DefaultPersistenceUnitManager -> public void setDataSourceLookup(DataSourceLookup dataSourceLookup);1404056186;Specify the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances._<p>Default is JndiDataSourceLookup, which resolves DataSource names as_JNDI names (as defined by standard JPA). Specify a BeanFactoryDataSourceLookup_instance if you want DataSource names to be resolved against Spring bean names._<p>Alternatively, consider passing in a map from names to DataSource instances_via the "dataSources" property. If the {@code persistence.xml} file_does not define DataSource names at all, specify a default DataSource_via the "defaultDataSource" property._@see org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup_@see org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup_@see #setDataSources_@see #setDefaultDataSource;public void setDataSourceLookup(DataSourceLookup dataSourceLookup) {_		this.dataSourceLookup = (dataSourceLookup != null ? dataSourceLookup : new JndiDataSourceLookup())__	};specify,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances,p,default,is,jndi,data,source,lookup,which,resolves,data,source,names,as,jndi,names,as,defined,by,standard,jpa,specify,a,bean,factory,data,source,lookup,instance,if,you,want,data,source,names,to,be,resolved,against,spring,bean,names,p,alternatively,consider,passing,in,a,map,from,names,to,data,source,instances,via,the,data,sources,property,if,the,code,persistence,xml,file,does,not,define,data,source,names,at,all,specify,a,default,data,source,via,the,default,data,source,property,see,org,springframework,jdbc,datasource,lookup,jndi,data,source,lookup,see,org,springframework,jdbc,datasource,lookup,bean,factory,data,source,lookup,see,set,data,sources,see,set,default,data,source;public,void,set,data,source,lookup,data,source,lookup,data,source,lookup,this,data,source,lookup,data,source,lookup,null,data,source,lookup,new,jndi,data,source,lookup
DefaultPersistenceUnitManager -> public void setDataSourceLookup(DataSourceLookup dataSourceLookup);1447323728;Specify the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances._<p>Default is JndiDataSourceLookup, which resolves DataSource names as_JNDI names (as defined by standard JPA). Specify a BeanFactoryDataSourceLookup_instance if you want DataSource names to be resolved against Spring bean names._<p>Alternatively, consider passing in a map from names to DataSource instances_via the "dataSources" property. If the {@code persistence.xml} file_does not define DataSource names at all, specify a default DataSource_via the "defaultDataSource" property._@see org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup_@see org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup_@see #setDataSources_@see #setDefaultDataSource;public void setDataSourceLookup(DataSourceLookup dataSourceLookup) {_		this.dataSourceLookup = (dataSourceLookup != null ? dataSourceLookup : new JndiDataSourceLookup())__	};specify,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances,p,default,is,jndi,data,source,lookup,which,resolves,data,source,names,as,jndi,names,as,defined,by,standard,jpa,specify,a,bean,factory,data,source,lookup,instance,if,you,want,data,source,names,to,be,resolved,against,spring,bean,names,p,alternatively,consider,passing,in,a,map,from,names,to,data,source,instances,via,the,data,sources,property,if,the,code,persistence,xml,file,does,not,define,data,source,names,at,all,specify,a,default,data,source,via,the,default,data,source,property,see,org,springframework,jdbc,datasource,lookup,jndi,data,source,lookup,see,org,springframework,jdbc,datasource,lookup,bean,factory,data,source,lookup,see,set,data,sources,see,set,default,data,source;public,void,set,data,source,lookup,data,source,lookup,data,source,lookup,this,data,source,lookup,data,source,lookup,null,data,source,lookup,new,jndi,data,source,lookup
DefaultPersistenceUnitManager -> public void setDataSourceLookup(DataSourceLookup dataSourceLookup);1464299869;Specify the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances._<p>Default is JndiDataSourceLookup, which resolves DataSource names as_JNDI names (as defined by standard JPA). Specify a BeanFactoryDataSourceLookup_instance if you want DataSource names to be resolved against Spring bean names._<p>Alternatively, consider passing in a map from names to DataSource instances_via the "dataSources" property. If the {@code persistence.xml} file_does not define DataSource names at all, specify a default DataSource_via the "defaultDataSource" property._@see org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup_@see org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup_@see #setDataSources_@see #setDefaultDataSource;public void setDataSourceLookup(DataSourceLookup dataSourceLookup) {_		this.dataSourceLookup = (dataSourceLookup != null ? dataSourceLookup : new JndiDataSourceLookup())__	};specify,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances,p,default,is,jndi,data,source,lookup,which,resolves,data,source,names,as,jndi,names,as,defined,by,standard,jpa,specify,a,bean,factory,data,source,lookup,instance,if,you,want,data,source,names,to,be,resolved,against,spring,bean,names,p,alternatively,consider,passing,in,a,map,from,names,to,data,source,instances,via,the,data,sources,property,if,the,code,persistence,xml,file,does,not,define,data,source,names,at,all,specify,a,default,data,source,via,the,default,data,source,property,see,org,springframework,jdbc,datasource,lookup,jndi,data,source,lookup,see,org,springframework,jdbc,datasource,lookup,bean,factory,data,source,lookup,see,set,data,sources,see,set,default,data,source;public,void,set,data,source,lookup,data,source,lookup,data,source,lookup,this,data,source,lookup,data,source,lookup,null,data,source,lookup,new,jndi,data,source,lookup
DefaultPersistenceUnitManager -> public void setDataSourceLookup(DataSourceLookup dataSourceLookup);1467668243;Specify the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances._<p>Default is JndiDataSourceLookup, which resolves DataSource names as_JNDI names (as defined by standard JPA). Specify a BeanFactoryDataSourceLookup_instance if you want DataSource names to be resolved against Spring bean names._<p>Alternatively, consider passing in a map from names to DataSource instances_via the "dataSources" property. If the {@code persistence.xml} file_does not define DataSource names at all, specify a default DataSource_via the "defaultDataSource" property._@see org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup_@see org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup_@see #setDataSources_@see #setDefaultDataSource;public void setDataSourceLookup(DataSourceLookup dataSourceLookup) {_		this.dataSourceLookup = (dataSourceLookup != null ? dataSourceLookup : new JndiDataSourceLookup())__	};specify,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances,p,default,is,jndi,data,source,lookup,which,resolves,data,source,names,as,jndi,names,as,defined,by,standard,jpa,specify,a,bean,factory,data,source,lookup,instance,if,you,want,data,source,names,to,be,resolved,against,spring,bean,names,p,alternatively,consider,passing,in,a,map,from,names,to,data,source,instances,via,the,data,sources,property,if,the,code,persistence,xml,file,does,not,define,data,source,names,at,all,specify,a,default,data,source,via,the,default,data,source,property,see,org,springframework,jdbc,datasource,lookup,jndi,data,source,lookup,see,org,springframework,jdbc,datasource,lookup,bean,factory,data,source,lookup,see,set,data,sources,see,set,default,data,source;public,void,set,data,source,lookup,data,source,lookup,data,source,lookup,this,data,source,lookup,data,source,lookup,null,data,source,lookup,new,jndi,data,source,lookup
DefaultPersistenceUnitManager -> public void setDataSourceLookup(DataSourceLookup dataSourceLookup);1467730834;Specify the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances._<p>Default is JndiDataSourceLookup, which resolves DataSource names as_JNDI names (as defined by standard JPA). Specify a BeanFactoryDataSourceLookup_instance if you want DataSource names to be resolved against Spring bean names._<p>Alternatively, consider passing in a map from names to DataSource instances_via the "dataSources" property. If the {@code persistence.xml} file_does not define DataSource names at all, specify a default DataSource_via the "defaultDataSource" property._@see org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup_@see org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup_@see #setDataSources_@see #setDefaultDataSource;public void setDataSourceLookup(DataSourceLookup dataSourceLookup) {_		this.dataSourceLookup = (dataSourceLookup != null ? dataSourceLookup : new JndiDataSourceLookup())__	};specify,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances,p,default,is,jndi,data,source,lookup,which,resolves,data,source,names,as,jndi,names,as,defined,by,standard,jpa,specify,a,bean,factory,data,source,lookup,instance,if,you,want,data,source,names,to,be,resolved,against,spring,bean,names,p,alternatively,consider,passing,in,a,map,from,names,to,data,source,instances,via,the,data,sources,property,if,the,code,persistence,xml,file,does,not,define,data,source,names,at,all,specify,a,default,data,source,via,the,default,data,source,property,see,org,springframework,jdbc,datasource,lookup,jndi,data,source,lookup,see,org,springframework,jdbc,datasource,lookup,bean,factory,data,source,lookup,see,set,data,sources,see,set,default,data,source;public,void,set,data,source,lookup,data,source,lookup,data,source,lookup,this,data,source,lookup,data,source,lookup,null,data,source,lookup,new,jndi,data,source,lookup
DefaultPersistenceUnitManager -> public void setDataSourceLookup(DataSourceLookup dataSourceLookup);1471464767;Specify the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances._<p>Default is JndiDataSourceLookup, which resolves DataSource names as_JNDI names (as defined by standard JPA). Specify a BeanFactoryDataSourceLookup_instance if you want DataSource names to be resolved against Spring bean names._<p>Alternatively, consider passing in a map from names to DataSource instances_via the "dataSources" property. If the {@code persistence.xml} file_does not define DataSource names at all, specify a default DataSource_via the "defaultDataSource" property._@see org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup_@see org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup_@see #setDataSources_@see #setDefaultDataSource;public void setDataSourceLookup(DataSourceLookup dataSourceLookup) {_		this.dataSourceLookup = (dataSourceLookup != null ? dataSourceLookup : new JndiDataSourceLookup())__	};specify,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances,p,default,is,jndi,data,source,lookup,which,resolves,data,source,names,as,jndi,names,as,defined,by,standard,jpa,specify,a,bean,factory,data,source,lookup,instance,if,you,want,data,source,names,to,be,resolved,against,spring,bean,names,p,alternatively,consider,passing,in,a,map,from,names,to,data,source,instances,via,the,data,sources,property,if,the,code,persistence,xml,file,does,not,define,data,source,names,at,all,specify,a,default,data,source,via,the,default,data,source,property,see,org,springframework,jdbc,datasource,lookup,jndi,data,source,lookup,see,org,springframework,jdbc,datasource,lookup,bean,factory,data,source,lookup,see,set,data,sources,see,set,default,data,source;public,void,set,data,source,lookup,data,source,lookup,data,source,lookup,this,data,source,lookup,data,source,lookup,null,data,source,lookup,new,jndi,data,source,lookup
DefaultPersistenceUnitManager -> public void setDataSourceLookup(DataSourceLookup dataSourceLookup);1472736647;Specify the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances._<p>Default is JndiDataSourceLookup, which resolves DataSource names as_JNDI names (as defined by standard JPA). Specify a BeanFactoryDataSourceLookup_instance if you want DataSource names to be resolved against Spring bean names._<p>Alternatively, consider passing in a map from names to DataSource instances_via the "dataSources" property. If the {@code persistence.xml} file_does not define DataSource names at all, specify a default DataSource_via the "defaultDataSource" property._@see org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup_@see org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup_@see #setDataSources_@see #setDefaultDataSource;public void setDataSourceLookup(DataSourceLookup dataSourceLookup) {_		this.dataSourceLookup = (dataSourceLookup != null ? dataSourceLookup : new JndiDataSourceLookup())__	};specify,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances,p,default,is,jndi,data,source,lookup,which,resolves,data,source,names,as,jndi,names,as,defined,by,standard,jpa,specify,a,bean,factory,data,source,lookup,instance,if,you,want,data,source,names,to,be,resolved,against,spring,bean,names,p,alternatively,consider,passing,in,a,map,from,names,to,data,source,instances,via,the,data,sources,property,if,the,code,persistence,xml,file,does,not,define,data,source,names,at,all,specify,a,default,data,source,via,the,default,data,source,property,see,org,springframework,jdbc,datasource,lookup,jndi,data,source,lookup,see,org,springframework,jdbc,datasource,lookup,bean,factory,data,source,lookup,see,set,data,sources,see,set,default,data,source;public,void,set,data,source,lookup,data,source,lookup,data,source,lookup,this,data,source,lookup,data,source,lookup,null,data,source,lookup,new,jndi,data,source,lookup
DefaultPersistenceUnitManager -> public void setDataSourceLookup(DataSourceLookup dataSourceLookup);1474895745;Specify the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances._<p>Default is JndiDataSourceLookup, which resolves DataSource names as_JNDI names (as defined by standard JPA). Specify a BeanFactoryDataSourceLookup_instance if you want DataSource names to be resolved against Spring bean names._<p>Alternatively, consider passing in a map from names to DataSource instances_via the "dataSources" property. If the {@code persistence.xml} file_does not define DataSource names at all, specify a default DataSource_via the "defaultDataSource" property._@see org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup_@see org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup_@see #setDataSources_@see #setDefaultDataSource;public void setDataSourceLookup(DataSourceLookup dataSourceLookup) {_		this.dataSourceLookup = (dataSourceLookup != null ? dataSourceLookup : new JndiDataSourceLookup())__	};specify,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances,p,default,is,jndi,data,source,lookup,which,resolves,data,source,names,as,jndi,names,as,defined,by,standard,jpa,specify,a,bean,factory,data,source,lookup,instance,if,you,want,data,source,names,to,be,resolved,against,spring,bean,names,p,alternatively,consider,passing,in,a,map,from,names,to,data,source,instances,via,the,data,sources,property,if,the,code,persistence,xml,file,does,not,define,data,source,names,at,all,specify,a,default,data,source,via,the,default,data,source,property,see,org,springframework,jdbc,datasource,lookup,jndi,data,source,lookup,see,org,springframework,jdbc,datasource,lookup,bean,factory,data,source,lookup,see,set,data,sources,see,set,default,data,source;public,void,set,data,source,lookup,data,source,lookup,data,source,lookup,this,data,source,lookup,data,source,lookup,null,data,source,lookup,new,jndi,data,source,lookup
DefaultPersistenceUnitManager -> public void setDataSourceLookup(DataSourceLookup dataSourceLookup);1495868221;Specify the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances._<p>Default is JndiDataSourceLookup, which resolves DataSource names as_JNDI names (as defined by standard JPA). Specify a BeanFactoryDataSourceLookup_instance if you want DataSource names to be resolved against Spring bean names._<p>Alternatively, consider passing in a map from names to DataSource instances_via the "dataSources" property. If the {@code persistence.xml} file_does not define DataSource names at all, specify a default DataSource_via the "defaultDataSource" property._@see org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup_@see org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup_@see #setDataSources_@see #setDefaultDataSource;public void setDataSourceLookup(DataSourceLookup dataSourceLookup) {_		this.dataSourceLookup = (dataSourceLookup != null ? dataSourceLookup : new JndiDataSourceLookup())__	};specify,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances,p,default,is,jndi,data,source,lookup,which,resolves,data,source,names,as,jndi,names,as,defined,by,standard,jpa,specify,a,bean,factory,data,source,lookup,instance,if,you,want,data,source,names,to,be,resolved,against,spring,bean,names,p,alternatively,consider,passing,in,a,map,from,names,to,data,source,instances,via,the,data,sources,property,if,the,code,persistence,xml,file,does,not,define,data,source,names,at,all,specify,a,default,data,source,via,the,default,data,source,property,see,org,springframework,jdbc,datasource,lookup,jndi,data,source,lookup,see,org,springframework,jdbc,datasource,lookup,bean,factory,data,source,lookup,see,set,data,sources,see,set,default,data,source;public,void,set,data,source,lookup,data,source,lookup,data,source,lookup,this,data,source,lookup,data,source,lookup,null,data,source,lookup,new,jndi,data,source,lookup
DefaultPersistenceUnitManager -> public void setDataSourceLookup(DataSourceLookup dataSourceLookup);1496259743;Specify the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances._<p>Default is JndiDataSourceLookup, which resolves DataSource names as_JNDI names (as defined by standard JPA). Specify a BeanFactoryDataSourceLookup_instance if you want DataSource names to be resolved against Spring bean names._<p>Alternatively, consider passing in a map from names to DataSource instances_via the "dataSources" property. If the {@code persistence.xml} file_does not define DataSource names at all, specify a default DataSource_via the "defaultDataSource" property._@see org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup_@see org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup_@see #setDataSources_@see #setDefaultDataSource;public void setDataSourceLookup(DataSourceLookup dataSourceLookup) {_		this.dataSourceLookup = (dataSourceLookup != null ? dataSourceLookup : new JndiDataSourceLookup())__	};specify,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances,p,default,is,jndi,data,source,lookup,which,resolves,data,source,names,as,jndi,names,as,defined,by,standard,jpa,specify,a,bean,factory,data,source,lookup,instance,if,you,want,data,source,names,to,be,resolved,against,spring,bean,names,p,alternatively,consider,passing,in,a,map,from,names,to,data,source,instances,via,the,data,sources,property,if,the,code,persistence,xml,file,does,not,define,data,source,names,at,all,specify,a,default,data,source,via,the,default,data,source,property,see,org,springframework,jdbc,datasource,lookup,jndi,data,source,lookup,see,org,springframework,jdbc,datasource,lookup,bean,factory,data,source,lookup,see,set,data,sources,see,set,default,data,source;public,void,set,data,source,lookup,data,source,lookup,data,source,lookup,this,data,source,lookup,data,source,lookup,null,data,source,lookup,new,jndi,data,source,lookup
DefaultPersistenceUnitManager -> @Override 	public void setLoadTimeWeaver(@Nullable LoadTimeWeaver loadTimeWeaver);1500448076;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is not required to specify a LoadTimeWeaver: Most providers will be able_to provide a subset of their functionality without class instrumentation as well,_or operate with their own VM agent specified on JVM startup. Furthermore,_DefaultPersistenceUnitManager falls back to an InstrumentationLoadTimeWeaver_if Spring's agent-based instrumentation is available at runtime._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;@Override_	public void setLoadTimeWeaver(@Nullable LoadTimeWeaver loadTimeWeaver) {_		this.loadTimeWeaver = loadTimeWeaver__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,own,vm,agent,specified,on,jvm,startup,furthermore,default,persistence,unit,manager,falls,back,to,an,instrumentation,load,time,weaver,if,spring,s,agent,based,instrumentation,is,available,at,runtime,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver;override,public,void,set,load,time,weaver,nullable,load,time,weaver,load,time,weaver,this,load,time,weaver,load,time,weaver
DefaultPersistenceUnitManager -> @Override 	public void setLoadTimeWeaver(@Nullable LoadTimeWeaver loadTimeWeaver);1520528267;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is not required to specify a LoadTimeWeaver: Most providers will be able_to provide a subset of their functionality without class instrumentation as well,_or operate with their own VM agent specified on JVM startup. Furthermore,_DefaultPersistenceUnitManager falls back to an InstrumentationLoadTimeWeaver_if Spring's agent-based instrumentation is available at runtime._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;@Override_	public void setLoadTimeWeaver(@Nullable LoadTimeWeaver loadTimeWeaver) {_		this.loadTimeWeaver = loadTimeWeaver__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,own,vm,agent,specified,on,jvm,startup,furthermore,default,persistence,unit,manager,falls,back,to,an,instrumentation,load,time,weaver,if,spring,s,agent,based,instrumentation,is,available,at,runtime,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver;override,public,void,set,load,time,weaver,nullable,load,time,weaver,load,time,weaver,this,load,time,weaver,load,time,weaver
DefaultPersistenceUnitManager -> @Override 	public void setLoadTimeWeaver(@Nullable LoadTimeWeaver loadTimeWeaver);1528313484;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is not required to specify a LoadTimeWeaver: Most providers will be able_to provide a subset of their functionality without class instrumentation as well,_or operate with their own VM agent specified on JVM startup. Furthermore,_DefaultPersistenceUnitManager falls back to an InstrumentationLoadTimeWeaver_if Spring's agent-based instrumentation is available at runtime._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;@Override_	public void setLoadTimeWeaver(@Nullable LoadTimeWeaver loadTimeWeaver) {_		this.loadTimeWeaver = loadTimeWeaver__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,own,vm,agent,specified,on,jvm,startup,furthermore,default,persistence,unit,manager,falls,back,to,an,instrumentation,load,time,weaver,if,spring,s,agent,based,instrumentation,is,available,at,runtime,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver;override,public,void,set,load,time,weaver,nullable,load,time,weaver,load,time,weaver,this,load,time,weaver,load,time,weaver
DefaultPersistenceUnitManager -> @Override 	public void setLoadTimeWeaver(@Nullable LoadTimeWeaver loadTimeWeaver);1530174524;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is not required to specify a LoadTimeWeaver: Most providers will be able_to provide a subset of their functionality without class instrumentation as well,_or operate with their own VM agent specified on JVM startup. Furthermore,_DefaultPersistenceUnitManager falls back to an InstrumentationLoadTimeWeaver_if Spring's agent-based instrumentation is available at runtime._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;@Override_	public void setLoadTimeWeaver(@Nullable LoadTimeWeaver loadTimeWeaver) {_		this.loadTimeWeaver = loadTimeWeaver__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,own,vm,agent,specified,on,jvm,startup,furthermore,default,persistence,unit,manager,falls,back,to,an,instrumentation,load,time,weaver,if,spring,s,agent,based,instrumentation,is,available,at,runtime,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver;override,public,void,set,load,time,weaver,nullable,load,time,weaver,load,time,weaver,this,load,time,weaver,load,time,weaver
DefaultPersistenceUnitManager -> @Override 	public void setLoadTimeWeaver(@Nullable LoadTimeWeaver loadTimeWeaver);1532091916;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is not required to specify a LoadTimeWeaver: Most providers will be able_to provide a subset of their functionality without class instrumentation as well,_or operate with their own VM agent specified on JVM startup. Furthermore,_DefaultPersistenceUnitManager falls back to an InstrumentationLoadTimeWeaver_if Spring's agent-based instrumentation is available at runtime._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;@Override_	public void setLoadTimeWeaver(@Nullable LoadTimeWeaver loadTimeWeaver) {_		this.loadTimeWeaver = loadTimeWeaver__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,own,vm,agent,specified,on,jvm,startup,furthermore,default,persistence,unit,manager,falls,back,to,an,instrumentation,load,time,weaver,if,spring,s,agent,based,instrumentation,is,available,at,runtime,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver;override,public,void,set,load,time,weaver,nullable,load,time,weaver,load,time,weaver,this,load,time,weaver,load,time,weaver
DefaultPersistenceUnitManager -> public void setValidationMode(ValidationMode validationMode);1375458214;Specify the JPA 2.0 validation mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode();public void setValidationMode(ValidationMode validationMode) {_		this.validationMode = validationMode__	};specify,the,jpa,2,0,validation,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,see,javax,persistence,spi,persistence,unit,info,get,validation,mode;public,void,set,validation,mode,validation,mode,validation,mode,this,validation,mode,validation,mode
DefaultPersistenceUnitManager -> public void setValidationMode(ValidationMode validationMode);1389648334;Specify the JPA 2.0 validation mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode();public void setValidationMode(ValidationMode validationMode) {_		this.validationMode = validationMode__	};specify,the,jpa,2,0,validation,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,see,javax,persistence,spi,persistence,unit,info,get,validation,mode;public,void,set,validation,mode,validation,mode,validation,mode,this,validation,mode,validation,mode
DefaultPersistenceUnitManager -> public void setValidationMode(ValidationMode validationMode);1390250900;Specify the JPA 2.0 validation mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode();public void setValidationMode(ValidationMode validationMode) {_		this.validationMode = validationMode__	};specify,the,jpa,2,0,validation,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,see,javax,persistence,spi,persistence,unit,info,get,validation,mode;public,void,set,validation,mode,validation,mode,validation,mode,this,validation,mode,validation,mode
DefaultPersistenceUnitManager -> public void setValidationMode(ValidationMode validationMode);1390313076;Specify the JPA 2.0 validation mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode();public void setValidationMode(ValidationMode validationMode) {_		this.validationMode = validationMode__	};specify,the,jpa,2,0,validation,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,see,javax,persistence,spi,persistence,unit,info,get,validation,mode;public,void,set,validation,mode,validation,mode,validation,mode,this,validation,mode,validation,mode
DefaultPersistenceUnitManager -> public void setValidationMode(ValidationMode validationMode);1400140571;Specify the JPA 2.0 validation mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode();public void setValidationMode(ValidationMode validationMode) {_		this.validationMode = validationMode__	};specify,the,jpa,2,0,validation,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,see,javax,persistence,spi,persistence,unit,info,get,validation,mode;public,void,set,validation,mode,validation,mode,validation,mode,this,validation,mode,validation,mode
DefaultPersistenceUnitManager -> public void setValidationMode(ValidationMode validationMode);1403774750;Specify the JPA 2.0 validation mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode();public void setValidationMode(ValidationMode validationMode) {_		this.validationMode = validationMode__	};specify,the,jpa,2,0,validation,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,see,javax,persistence,spi,persistence,unit,info,get,validation,mode;public,void,set,validation,mode,validation,mode,validation,mode,this,validation,mode,validation,mode
DefaultPersistenceUnitManager -> public void setValidationMode(ValidationMode validationMode);1404056186;Specify the JPA 2.0 validation mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode();public void setValidationMode(ValidationMode validationMode) {_		this.validationMode = validationMode__	};specify,the,jpa,2,0,validation,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,see,javax,persistence,spi,persistence,unit,info,get,validation,mode;public,void,set,validation,mode,validation,mode,validation,mode,this,validation,mode,validation,mode
DefaultPersistenceUnitManager -> public void setValidationMode(ValidationMode validationMode);1447323728;Specify the JPA 2.0 validation mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode();public void setValidationMode(ValidationMode validationMode) {_		this.validationMode = validationMode__	};specify,the,jpa,2,0,validation,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,see,javax,persistence,spi,persistence,unit,info,get,validation,mode;public,void,set,validation,mode,validation,mode,validation,mode,this,validation,mode,validation,mode
DefaultPersistenceUnitManager -> public void setValidationMode(ValidationMode validationMode);1464299869;Specify the JPA 2.0 validation mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode();public void setValidationMode(ValidationMode validationMode) {_		this.validationMode = validationMode__	};specify,the,jpa,2,0,validation,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,see,javax,persistence,spi,persistence,unit,info,get,validation,mode;public,void,set,validation,mode,validation,mode,validation,mode,this,validation,mode,validation,mode
DefaultPersistenceUnitManager -> public void setValidationMode(ValidationMode validationMode);1467668243;Specify the JPA 2.0 validation mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode();public void setValidationMode(ValidationMode validationMode) {_		this.validationMode = validationMode__	};specify,the,jpa,2,0,validation,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,see,javax,persistence,spi,persistence,unit,info,get,validation,mode;public,void,set,validation,mode,validation,mode,validation,mode,this,validation,mode,validation,mode
DefaultPersistenceUnitManager -> public void setValidationMode(ValidationMode validationMode);1467730834;Specify the JPA 2.0 validation mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode();public void setValidationMode(ValidationMode validationMode) {_		this.validationMode = validationMode__	};specify,the,jpa,2,0,validation,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,see,javax,persistence,spi,persistence,unit,info,get,validation,mode;public,void,set,validation,mode,validation,mode,validation,mode,this,validation,mode,validation,mode
DefaultPersistenceUnitManager -> public void setValidationMode(ValidationMode validationMode);1471464767;Specify the JPA 2.0 validation mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode();public void setValidationMode(ValidationMode validationMode) {_		this.validationMode = validationMode__	};specify,the,jpa,2,0,validation,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,validation,mode;public,void,set,validation,mode,validation,mode,validation,mode,this,validation,mode,validation,mode
DefaultPersistenceUnitManager -> public void setValidationMode(ValidationMode validationMode);1472736647;Specify the JPA 2.0 validation mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode();public void setValidationMode(ValidationMode validationMode) {_		this.validationMode = validationMode__	};specify,the,jpa,2,0,validation,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,validation,mode;public,void,set,validation,mode,validation,mode,validation,mode,this,validation,mode,validation,mode
DefaultPersistenceUnitManager -> public void setValidationMode(ValidationMode validationMode);1474895745;Specify the JPA 2.0 validation mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode();public void setValidationMode(ValidationMode validationMode) {_		this.validationMode = validationMode__	};specify,the,jpa,2,0,validation,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,validation,mode;public,void,set,validation,mode,validation,mode,validation,mode,this,validation,mode,validation,mode
DefaultPersistenceUnitManager -> public void setValidationMode(ValidationMode validationMode);1495868221;Specify the JPA 2.0 validation mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode();public void setValidationMode(ValidationMode validationMode) {_		this.validationMode = validationMode__	};specify,the,jpa,2,0,validation,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,validation,mode;public,void,set,validation,mode,validation,mode,validation,mode,this,validation,mode,validation,mode
DefaultPersistenceUnitManager -> public void setValidationMode(ValidationMode validationMode);1496259743;Specify the JPA 2.0 validation mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode();public void setValidationMode(ValidationMode validationMode) {_		this.validationMode = validationMode__	};specify,the,jpa,2,0,validation,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,validation,mode;public,void,set,validation,mode,validation,mode,validation,mode,this,validation,mode,validation,mode
DefaultPersistenceUnitManager -> public void setValidationMode(ValidationMode validationMode);1496837955;Specify the JPA 2.0 validation mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode();public void setValidationMode(ValidationMode validationMode) {_		this.validationMode = validationMode__	};specify,the,jpa,2,0,validation,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,validation,mode;public,void,set,validation,mode,validation,mode,validation,mode,this,validation,mode,validation,mode
DefaultPersistenceUnitManager -> public void setValidationMode(ValidationMode validationMode);1498780456;Specify the JPA 2.0 validation mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode();public void setValidationMode(ValidationMode validationMode) {_		this.validationMode = validationMode__	};specify,the,jpa,2,0,validation,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,validation,mode;public,void,set,validation,mode,validation,mode,validation,mode,this,validation,mode,validation,mode
DefaultPersistenceUnitManager -> public void setValidationMode(ValidationMode validationMode);1500448076;Specify the JPA 2.0 validation mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode();public void setValidationMode(ValidationMode validationMode) {_		this.validationMode = validationMode__	};specify,the,jpa,2,0,validation,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,validation,mode;public,void,set,validation,mode,validation,mode,validation,mode,this,validation,mode,validation,mode
DefaultPersistenceUnitManager -> public void setValidationMode(ValidationMode validationMode);1520528267;Specify the JPA 2.0 validation mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode();public void setValidationMode(ValidationMode validationMode) {_		this.validationMode = validationMode__	};specify,the,jpa,2,0,validation,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,validation,mode;public,void,set,validation,mode,validation,mode,validation,mode,this,validation,mode,validation,mode
DefaultPersistenceUnitManager -> public void setValidationMode(ValidationMode validationMode);1528313484;Specify the JPA 2.0 validation mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode();public void setValidationMode(ValidationMode validationMode) {_		this.validationMode = validationMode__	};specify,the,jpa,2,0,validation,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,validation,mode;public,void,set,validation,mode,validation,mode,validation,mode,this,validation,mode,validation,mode
DefaultPersistenceUnitManager -> public void setValidationMode(ValidationMode validationMode);1530174524;Specify the JPA 2.0 validation mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode();public void setValidationMode(ValidationMode validationMode) {_		this.validationMode = validationMode__	};specify,the,jpa,2,0,validation,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,validation,mode;public,void,set,validation,mode,validation,mode,validation,mode,this,validation,mode,validation,mode
DefaultPersistenceUnitManager -> public void setValidationMode(ValidationMode validationMode);1532091916;Specify the JPA 2.0 validation mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode();public void setValidationMode(ValidationMode validationMode) {_		this.validationMode = validationMode__	};specify,the,jpa,2,0,validation,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,validation,mode;public,void,set,validation,mode,validation,mode,validation,mode,this,validation,mode,validation,mode
DefaultPersistenceUnitManager -> protected boolean isPersistenceUnitOverrideAllowed();1328020251;Return whether an override of a same-named persistence unit is allowed._<p>Default is <code>false</code>. May be overridden to return <code>true</code>,_for example if {@link #postProcessPersistenceUnitInfo} is able to handle that case.;protected boolean isPersistenceUnitOverrideAllowed() {_		return false__	};return,whether,an,override,of,a,same,named,persistence,unit,is,allowed,p,default,is,code,false,code,may,be,overridden,to,return,code,true,code,for,example,if,link,post,process,persistence,unit,info,is,able,to,handle,that,case;protected,boolean,is,persistence,unit,override,allowed,return,false
DefaultPersistenceUnitManager -> protected boolean isPersistenceUnitOverrideAllowed();1329142650;Return whether an override of a same-named persistence unit is allowed._<p>Default is <code>false</code>. May be overridden to return <code>true</code>,_for example if {@link #postProcessPersistenceUnitInfo} is able to handle that case.;protected boolean isPersistenceUnitOverrideAllowed() {_		return false__	};return,whether,an,override,of,a,same,named,persistence,unit,is,allowed,p,default,is,code,false,code,may,be,overridden,to,return,code,true,code,for,example,if,link,post,process,persistence,unit,info,is,able,to,handle,that,case;protected,boolean,is,persistence,unit,override,allowed,return,false
DefaultPersistenceUnitManager -> protected boolean isPersistenceUnitOverrideAllowed();1347282851;Return whether an override of a same-named persistence unit is allowed._<p>Default is <code>false</code>. May be overridden to return <code>true</code>,_for example if {@link #postProcessPersistenceUnitInfo} is able to handle that case.;protected boolean isPersistenceUnitOverrideAllowed() {_		return false__	};return,whether,an,override,of,a,same,named,persistence,unit,is,allowed,p,default,is,code,false,code,may,be,overridden,to,return,code,true,code,for,example,if,link,post,process,persistence,unit,info,is,able,to,handle,that,case;protected,boolean,is,persistence,unit,override,allowed,return,false
DefaultPersistenceUnitManager -> protected boolean isPersistenceUnitOverrideAllowed();1351648399;Return whether an override of a same-named persistence unit is allowed._<p>Default is <code>false</code>. May be overridden to return <code>true</code>,_for example if {@link #postProcessPersistenceUnitInfo} is able to handle that case.;protected boolean isPersistenceUnitOverrideAllowed() {_		return false__	};return,whether,an,override,of,a,same,named,persistence,unit,is,allowed,p,default,is,code,false,code,may,be,overridden,to,return,code,true,code,for,example,if,link,post,process,persistence,unit,info,is,able,to,handle,that,case;protected,boolean,is,persistence,unit,override,allowed,return,false
DefaultPersistenceUnitManager -> protected boolean isPersistenceUnitOverrideAllowed();1356735495;Return whether an override of a same-named persistence unit is allowed._<p>Default is {@code false}. May be overridden to return {@code true},_for example if {@link #postProcessPersistenceUnitInfo} is able to handle that case.;protected boolean isPersistenceUnitOverrideAllowed() {_		return false__	};return,whether,an,override,of,a,same,named,persistence,unit,is,allowed,p,default,is,code,false,may,be,overridden,to,return,code,true,for,example,if,link,post,process,persistence,unit,info,is,able,to,handle,that,case;protected,boolean,is,persistence,unit,override,allowed,return,false
DefaultPersistenceUnitManager -> protected boolean isPersistenceUnitOverrideAllowed();1357119239;Return whether an override of a same-named persistence unit is allowed._<p>Default is {@code false}. May be overridden to return {@code true},_for example if {@link #postProcessPersistenceUnitInfo} is able to handle that case.;protected boolean isPersistenceUnitOverrideAllowed() {_		return false__	};return,whether,an,override,of,a,same,named,persistence,unit,is,allowed,p,default,is,code,false,may,be,overridden,to,return,code,true,for,example,if,link,post,process,persistence,unit,info,is,able,to,handle,that,case;protected,boolean,is,persistence,unit,override,allowed,return,false
DefaultPersistenceUnitManager -> protected boolean isPersistenceUnitOverrideAllowed();1363714444;Return whether an override of a same-named persistence unit is allowed._<p>Default is {@code false}. May be overridden to return {@code true},_for example if {@link #postProcessPersistenceUnitInfo} is able to handle that case.;protected boolean isPersistenceUnitOverrideAllowed() {_		return false__	};return,whether,an,override,of,a,same,named,persistence,unit,is,allowed,p,default,is,code,false,may,be,overridden,to,return,code,true,for,example,if,link,post,process,persistence,unit,info,is,able,to,handle,that,case;protected,boolean,is,persistence,unit,override,allowed,return,false
DefaultPersistenceUnitManager -> protected boolean isPersistenceUnitOverrideAllowed();1368482696;Return whether an override of a same-named persistence unit is allowed._<p>Default is {@code false}. May be overridden to return {@code true},_for example if {@link #postProcessPersistenceUnitInfo} is able to handle that case.;protected boolean isPersistenceUnitOverrideAllowed() {_		return false__	};return,whether,an,override,of,a,same,named,persistence,unit,is,allowed,p,default,is,code,false,may,be,overridden,to,return,code,true,for,example,if,link,post,process,persistence,unit,info,is,able,to,handle,that,case;protected,boolean,is,persistence,unit,override,allowed,return,false
DefaultPersistenceUnitManager -> protected boolean isPersistenceUnitOverrideAllowed();1375434510;Return whether an override of a same-named persistence unit is allowed._<p>Default is {@code false}. May be overridden to return {@code true},_for example if {@link #postProcessPersistenceUnitInfo} is able to handle that case.;protected boolean isPersistenceUnitOverrideAllowed() {_		return false__	};return,whether,an,override,of,a,same,named,persistence,unit,is,allowed,p,default,is,code,false,may,be,overridden,to,return,code,true,for,example,if,link,post,process,persistence,unit,info,is,able,to,handle,that,case;protected,boolean,is,persistence,unit,override,allowed,return,false
DefaultPersistenceUnitManager -> protected boolean isPersistenceUnitOverrideAllowed();1375458214;Return whether an override of a same-named persistence unit is allowed._<p>Default is {@code false}. May be overridden to return {@code true},_for example if {@link #postProcessPersistenceUnitInfo} is able to handle that case.;protected boolean isPersistenceUnitOverrideAllowed() {_		return false__	};return,whether,an,override,of,a,same,named,persistence,unit,is,allowed,p,default,is,code,false,may,be,overridden,to,return,code,true,for,example,if,link,post,process,persistence,unit,info,is,able,to,handle,that,case;protected,boolean,is,persistence,unit,override,allowed,return,false
DefaultPersistenceUnitManager -> protected boolean isPersistenceUnitOverrideAllowed();1389648334;Return whether an override of a same-named persistence unit is allowed._<p>Default is {@code false}. May be overridden to return {@code true},_for example if {@link #postProcessPersistenceUnitInfo} is able to handle that case.;protected boolean isPersistenceUnitOverrideAllowed() {_		return false__	};return,whether,an,override,of,a,same,named,persistence,unit,is,allowed,p,default,is,code,false,may,be,overridden,to,return,code,true,for,example,if,link,post,process,persistence,unit,info,is,able,to,handle,that,case;protected,boolean,is,persistence,unit,override,allowed,return,false
DefaultPersistenceUnitManager -> protected boolean isPersistenceUnitOverrideAllowed();1390250900;Return whether an override of a same-named persistence unit is allowed._<p>Default is {@code false}. May be overridden to return {@code true},_for example if {@link #postProcessPersistenceUnitInfo} is able to handle that case.;protected boolean isPersistenceUnitOverrideAllowed() {_		return false__	};return,whether,an,override,of,a,same,named,persistence,unit,is,allowed,p,default,is,code,false,may,be,overridden,to,return,code,true,for,example,if,link,post,process,persistence,unit,info,is,able,to,handle,that,case;protected,boolean,is,persistence,unit,override,allowed,return,false
DefaultPersistenceUnitManager -> protected boolean isPersistenceUnitOverrideAllowed();1390313076;Return whether an override of a same-named persistence unit is allowed._<p>Default is {@code false}. May be overridden to return {@code true},_for example if {@link #postProcessPersistenceUnitInfo} is able to handle that case.;protected boolean isPersistenceUnitOverrideAllowed() {_		return false__	};return,whether,an,override,of,a,same,named,persistence,unit,is,allowed,p,default,is,code,false,may,be,overridden,to,return,code,true,for,example,if,link,post,process,persistence,unit,info,is,able,to,handle,that,case;protected,boolean,is,persistence,unit,override,allowed,return,false
DefaultPersistenceUnitManager -> protected boolean isPersistenceUnitOverrideAllowed();1400140571;Return whether an override of a same-named persistence unit is allowed._<p>Default is {@code false}. May be overridden to return {@code true},_for example if {@link #postProcessPersistenceUnitInfo} is able to handle that case.;protected boolean isPersistenceUnitOverrideAllowed() {_		return false__	};return,whether,an,override,of,a,same,named,persistence,unit,is,allowed,p,default,is,code,false,may,be,overridden,to,return,code,true,for,example,if,link,post,process,persistence,unit,info,is,able,to,handle,that,case;protected,boolean,is,persistence,unit,override,allowed,return,false
DefaultPersistenceUnitManager -> protected boolean isPersistenceUnitOverrideAllowed();1403774750;Return whether an override of a same-named persistence unit is allowed._<p>Default is {@code false}. May be overridden to return {@code true},_for example if {@link #postProcessPersistenceUnitInfo} is able to handle that case.;protected boolean isPersistenceUnitOverrideAllowed() {_		return false__	};return,whether,an,override,of,a,same,named,persistence,unit,is,allowed,p,default,is,code,false,may,be,overridden,to,return,code,true,for,example,if,link,post,process,persistence,unit,info,is,able,to,handle,that,case;protected,boolean,is,persistence,unit,override,allowed,return,false
DefaultPersistenceUnitManager -> protected boolean isPersistenceUnitOverrideAllowed();1404056186;Return whether an override of a same-named persistence unit is allowed._<p>Default is {@code false}. May be overridden to return {@code true},_for example if {@link #postProcessPersistenceUnitInfo} is able to handle that case.;protected boolean isPersistenceUnitOverrideAllowed() {_		return false__	};return,whether,an,override,of,a,same,named,persistence,unit,is,allowed,p,default,is,code,false,may,be,overridden,to,return,code,true,for,example,if,link,post,process,persistence,unit,info,is,able,to,handle,that,case;protected,boolean,is,persistence,unit,override,allowed,return,false
DefaultPersistenceUnitManager -> protected boolean isPersistenceUnitOverrideAllowed();1447323728;Return whether an override of a same-named persistence unit is allowed._<p>Default is {@code false}. May be overridden to return {@code true},_for example if {@link #postProcessPersistenceUnitInfo} is able to handle that case.;protected boolean isPersistenceUnitOverrideAllowed() {_		return false__	};return,whether,an,override,of,a,same,named,persistence,unit,is,allowed,p,default,is,code,false,may,be,overridden,to,return,code,true,for,example,if,link,post,process,persistence,unit,info,is,able,to,handle,that,case;protected,boolean,is,persistence,unit,override,allowed,return,false
DefaultPersistenceUnitManager -> protected boolean isPersistenceUnitOverrideAllowed();1464299869;Return whether an override of a same-named persistence unit is allowed._<p>Default is {@code false}. May be overridden to return {@code true},_for example if {@link #postProcessPersistenceUnitInfo} is able to handle that case.;protected boolean isPersistenceUnitOverrideAllowed() {_		return false__	};return,whether,an,override,of,a,same,named,persistence,unit,is,allowed,p,default,is,code,false,may,be,overridden,to,return,code,true,for,example,if,link,post,process,persistence,unit,info,is,able,to,handle,that,case;protected,boolean,is,persistence,unit,override,allowed,return,false
DefaultPersistenceUnitManager -> protected boolean isPersistenceUnitOverrideAllowed();1467668243;Return whether an override of a same-named persistence unit is allowed._<p>Default is {@code false}. May be overridden to return {@code true},_for example if {@link #postProcessPersistenceUnitInfo} is able to handle that case.;protected boolean isPersistenceUnitOverrideAllowed() {_		return false__	};return,whether,an,override,of,a,same,named,persistence,unit,is,allowed,p,default,is,code,false,may,be,overridden,to,return,code,true,for,example,if,link,post,process,persistence,unit,info,is,able,to,handle,that,case;protected,boolean,is,persistence,unit,override,allowed,return,false
DefaultPersistenceUnitManager -> protected boolean isPersistenceUnitOverrideAllowed();1467730834;Return whether an override of a same-named persistence unit is allowed._<p>Default is {@code false}. May be overridden to return {@code true},_for example if {@link #postProcessPersistenceUnitInfo} is able to handle that case.;protected boolean isPersistenceUnitOverrideAllowed() {_		return false__	};return,whether,an,override,of,a,same,named,persistence,unit,is,allowed,p,default,is,code,false,may,be,overridden,to,return,code,true,for,example,if,link,post,process,persistence,unit,info,is,able,to,handle,that,case;protected,boolean,is,persistence,unit,override,allowed,return,false
DefaultPersistenceUnitManager -> protected boolean isPersistenceUnitOverrideAllowed();1471464767;Return whether an override of a same-named persistence unit is allowed._<p>Default is {@code false}. May be overridden to return {@code true},_for example if {@link #postProcessPersistenceUnitInfo} is able to handle that case.;protected boolean isPersistenceUnitOverrideAllowed() {_		return false__	};return,whether,an,override,of,a,same,named,persistence,unit,is,allowed,p,default,is,code,false,may,be,overridden,to,return,code,true,for,example,if,link,post,process,persistence,unit,info,is,able,to,handle,that,case;protected,boolean,is,persistence,unit,override,allowed,return,false
DefaultPersistenceUnitManager -> protected boolean isPersistenceUnitOverrideAllowed();1472736647;Return whether an override of a same-named persistence unit is allowed._<p>Default is {@code false}. May be overridden to return {@code true},_for example if {@link #postProcessPersistenceUnitInfo} is able to handle that case.;protected boolean isPersistenceUnitOverrideAllowed() {_		return false__	};return,whether,an,override,of,a,same,named,persistence,unit,is,allowed,p,default,is,code,false,may,be,overridden,to,return,code,true,for,example,if,link,post,process,persistence,unit,info,is,able,to,handle,that,case;protected,boolean,is,persistence,unit,override,allowed,return,false
DefaultPersistenceUnitManager -> protected boolean isPersistenceUnitOverrideAllowed();1474895745;Return whether an override of a same-named persistence unit is allowed._<p>Default is {@code false}. May be overridden to return {@code true},_for example if {@link #postProcessPersistenceUnitInfo} is able to handle that case.;protected boolean isPersistenceUnitOverrideAllowed() {_		return false__	};return,whether,an,override,of,a,same,named,persistence,unit,is,allowed,p,default,is,code,false,may,be,overridden,to,return,code,true,for,example,if,link,post,process,persistence,unit,info,is,able,to,handle,that,case;protected,boolean,is,persistence,unit,override,allowed,return,false
DefaultPersistenceUnitManager -> protected boolean isPersistenceUnitOverrideAllowed();1495868221;Return whether an override of a same-named persistence unit is allowed._<p>Default is {@code false}. May be overridden to return {@code true},_for example if {@link #postProcessPersistenceUnitInfo} is able to handle that case.;protected boolean isPersistenceUnitOverrideAllowed() {_		return false__	};return,whether,an,override,of,a,same,named,persistence,unit,is,allowed,p,default,is,code,false,may,be,overridden,to,return,code,true,for,example,if,link,post,process,persistence,unit,info,is,able,to,handle,that,case;protected,boolean,is,persistence,unit,override,allowed,return,false
DefaultPersistenceUnitManager -> protected boolean isPersistenceUnitOverrideAllowed();1496259743;Return whether an override of a same-named persistence unit is allowed._<p>Default is {@code false}. May be overridden to return {@code true},_for example if {@link #postProcessPersistenceUnitInfo} is able to handle that case.;protected boolean isPersistenceUnitOverrideAllowed() {_		return false__	};return,whether,an,override,of,a,same,named,persistence,unit,is,allowed,p,default,is,code,false,may,be,overridden,to,return,code,true,for,example,if,link,post,process,persistence,unit,info,is,able,to,handle,that,case;protected,boolean,is,persistence,unit,override,allowed,return,false
DefaultPersistenceUnitManager -> protected boolean isPersistenceUnitOverrideAllowed();1496837955;Return whether an override of a same-named persistence unit is allowed._<p>Default is {@code false}. May be overridden to return {@code true},_for example if {@link #postProcessPersistenceUnitInfo} is able to handle that case.;protected boolean isPersistenceUnitOverrideAllowed() {_		return false__	};return,whether,an,override,of,a,same,named,persistence,unit,is,allowed,p,default,is,code,false,may,be,overridden,to,return,code,true,for,example,if,link,post,process,persistence,unit,info,is,able,to,handle,that,case;protected,boolean,is,persistence,unit,override,allowed,return,false
DefaultPersistenceUnitManager -> protected boolean isPersistenceUnitOverrideAllowed();1498780456;Return whether an override of a same-named persistence unit is allowed._<p>Default is {@code false}. May be overridden to return {@code true},_for example if {@link #postProcessPersistenceUnitInfo} is able to handle that case.;protected boolean isPersistenceUnitOverrideAllowed() {_		return false__	};return,whether,an,override,of,a,same,named,persistence,unit,is,allowed,p,default,is,code,false,may,be,overridden,to,return,code,true,for,example,if,link,post,process,persistence,unit,info,is,able,to,handle,that,case;protected,boolean,is,persistence,unit,override,allowed,return,false
DefaultPersistenceUnitManager -> protected boolean isPersistenceUnitOverrideAllowed();1500448076;Return whether an override of a same-named persistence unit is allowed._<p>Default is {@code false}. May be overridden to return {@code true},_for example if {@link #postProcessPersistenceUnitInfo} is able to handle that case.;protected boolean isPersistenceUnitOverrideAllowed() {_		return false__	};return,whether,an,override,of,a,same,named,persistence,unit,is,allowed,p,default,is,code,false,may,be,overridden,to,return,code,true,for,example,if,link,post,process,persistence,unit,info,is,able,to,handle,that,case;protected,boolean,is,persistence,unit,override,allowed,return,false
DefaultPersistenceUnitManager -> protected boolean isPersistenceUnitOverrideAllowed();1520528267;Return whether an override of a same-named persistence unit is allowed._<p>Default is {@code false}. May be overridden to return {@code true},_for example if {@link #postProcessPersistenceUnitInfo} is able to handle that case.;protected boolean isPersistenceUnitOverrideAllowed() {_		return false__	};return,whether,an,override,of,a,same,named,persistence,unit,is,allowed,p,default,is,code,false,may,be,overridden,to,return,code,true,for,example,if,link,post,process,persistence,unit,info,is,able,to,handle,that,case;protected,boolean,is,persistence,unit,override,allowed,return,false
DefaultPersistenceUnitManager -> protected boolean isPersistenceUnitOverrideAllowed();1528313484;Return whether an override of a same-named persistence unit is allowed._<p>Default is {@code false}. May be overridden to return {@code true},_for example if {@link #postProcessPersistenceUnitInfo} is able to handle that case.;protected boolean isPersistenceUnitOverrideAllowed() {_		return false__	};return,whether,an,override,of,a,same,named,persistence,unit,is,allowed,p,default,is,code,false,may,be,overridden,to,return,code,true,for,example,if,link,post,process,persistence,unit,info,is,able,to,handle,that,case;protected,boolean,is,persistence,unit,override,allowed,return,false
DefaultPersistenceUnitManager -> protected boolean isPersistenceUnitOverrideAllowed();1530174524;Return whether an override of a same-named persistence unit is allowed._<p>Default is {@code false}. May be overridden to return {@code true},_for example if {@link #postProcessPersistenceUnitInfo} is able to handle that case.;protected boolean isPersistenceUnitOverrideAllowed() {_		return false__	};return,whether,an,override,of,a,same,named,persistence,unit,is,allowed,p,default,is,code,false,may,be,overridden,to,return,code,true,for,example,if,link,post,process,persistence,unit,info,is,able,to,handle,that,case;protected,boolean,is,persistence,unit,override,allowed,return,false
DefaultPersistenceUnitManager -> protected boolean isPersistenceUnitOverrideAllowed();1532091916;Return whether an override of a same-named persistence unit is allowed._<p>Default is {@code false}. May be overridden to return {@code true},_for example if {@link #postProcessPersistenceUnitInfo} is able to handle that case.;protected boolean isPersistenceUnitOverrideAllowed() {_		return false__	};return,whether,an,override,of,a,same,named,persistence,unit,is,allowed,p,default,is,code,false,may,be,overridden,to,return,code,true,for,example,if,link,post,process,persistence,unit,info,is,able,to,handle,that,case;protected,boolean,is,persistence,unit,override,allowed,return,false
DefaultPersistenceUnitManager -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1375458214;Specify the JPA 2.0 shared cache mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode();public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.sharedCacheMode = sharedCacheMode__	};specify,the,jpa,2,0,shared,cache,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,shared,cache,mode,shared,cache,mode
DefaultPersistenceUnitManager -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1389648334;Specify the JPA 2.0 shared cache mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode();public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.sharedCacheMode = sharedCacheMode__	};specify,the,jpa,2,0,shared,cache,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,shared,cache,mode,shared,cache,mode
DefaultPersistenceUnitManager -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1390250900;Specify the JPA 2.0 shared cache mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode();public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.sharedCacheMode = sharedCacheMode__	};specify,the,jpa,2,0,shared,cache,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,shared,cache,mode,shared,cache,mode
DefaultPersistenceUnitManager -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1390313076;Specify the JPA 2.0 shared cache mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode();public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.sharedCacheMode = sharedCacheMode__	};specify,the,jpa,2,0,shared,cache,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,shared,cache,mode,shared,cache,mode
DefaultPersistenceUnitManager -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1400140571;Specify the JPA 2.0 shared cache mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode();public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.sharedCacheMode = sharedCacheMode__	};specify,the,jpa,2,0,shared,cache,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,shared,cache,mode,shared,cache,mode
DefaultPersistenceUnitManager -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1403774750;Specify the JPA 2.0 shared cache mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode();public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.sharedCacheMode = sharedCacheMode__	};specify,the,jpa,2,0,shared,cache,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,shared,cache,mode,shared,cache,mode
DefaultPersistenceUnitManager -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1404056186;Specify the JPA 2.0 shared cache mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode();public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.sharedCacheMode = sharedCacheMode__	};specify,the,jpa,2,0,shared,cache,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,shared,cache,mode,shared,cache,mode
DefaultPersistenceUnitManager -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1447323728;Specify the JPA 2.0 shared cache mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode();public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.sharedCacheMode = sharedCacheMode__	};specify,the,jpa,2,0,shared,cache,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,shared,cache,mode,shared,cache,mode
DefaultPersistenceUnitManager -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1464299869;Specify the JPA 2.0 shared cache mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode();public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.sharedCacheMode = sharedCacheMode__	};specify,the,jpa,2,0,shared,cache,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,shared,cache,mode,shared,cache,mode
DefaultPersistenceUnitManager -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1467668243;Specify the JPA 2.0 shared cache mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode();public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.sharedCacheMode = sharedCacheMode__	};specify,the,jpa,2,0,shared,cache,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,shared,cache,mode,shared,cache,mode
DefaultPersistenceUnitManager -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1467730834;Specify the JPA 2.0 shared cache mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode();public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.sharedCacheMode = sharedCacheMode__	};specify,the,jpa,2,0,shared,cache,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,shared,cache,mode,shared,cache,mode
DefaultPersistenceUnitManager -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1471464767;Specify the JPA 2.0 shared cache mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode();public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.sharedCacheMode = sharedCacheMode__	};specify,the,jpa,2,0,shared,cache,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,shared,cache,mode,shared,cache,mode
DefaultPersistenceUnitManager -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1472736647;Specify the JPA 2.0 shared cache mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode();public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.sharedCacheMode = sharedCacheMode__	};specify,the,jpa,2,0,shared,cache,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,shared,cache,mode,shared,cache,mode
DefaultPersistenceUnitManager -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1474895745;Specify the JPA 2.0 shared cache mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode();public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.sharedCacheMode = sharedCacheMode__	};specify,the,jpa,2,0,shared,cache,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,shared,cache,mode,shared,cache,mode
DefaultPersistenceUnitManager -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1495868221;Specify the JPA 2.0 shared cache mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode();public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.sharedCacheMode = sharedCacheMode__	};specify,the,jpa,2,0,shared,cache,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,shared,cache,mode,shared,cache,mode
DefaultPersistenceUnitManager -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1496259743;Specify the JPA 2.0 shared cache mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode();public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.sharedCacheMode = sharedCacheMode__	};specify,the,jpa,2,0,shared,cache,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,shared,cache,mode,shared,cache,mode
DefaultPersistenceUnitManager -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1496837955;Specify the JPA 2.0 shared cache mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode();public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.sharedCacheMode = sharedCacheMode__	};specify,the,jpa,2,0,shared,cache,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,shared,cache,mode,shared,cache,mode
DefaultPersistenceUnitManager -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1498780456;Specify the JPA 2.0 shared cache mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode();public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.sharedCacheMode = sharedCacheMode__	};specify,the,jpa,2,0,shared,cache,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,shared,cache,mode,shared,cache,mode
DefaultPersistenceUnitManager -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1500448076;Specify the JPA 2.0 shared cache mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode();public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.sharedCacheMode = sharedCacheMode__	};specify,the,jpa,2,0,shared,cache,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,shared,cache,mode,shared,cache,mode
DefaultPersistenceUnitManager -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1520528267;Specify the JPA 2.0 shared cache mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode();public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.sharedCacheMode = sharedCacheMode__	};specify,the,jpa,2,0,shared,cache,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,shared,cache,mode,shared,cache,mode
DefaultPersistenceUnitManager -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1528313484;Specify the JPA 2.0 shared cache mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode();public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.sharedCacheMode = sharedCacheMode__	};specify,the,jpa,2,0,shared,cache,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,shared,cache,mode,shared,cache,mode
DefaultPersistenceUnitManager -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1530174524;Specify the JPA 2.0 shared cache mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode();public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.sharedCacheMode = sharedCacheMode__	};specify,the,jpa,2,0,shared,cache,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,shared,cache,mode,shared,cache,mode
DefaultPersistenceUnitManager -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1532091916;Specify the JPA 2.0 shared cache mode for all of this manager's persistence_units, overriding any value in {@code persistence.xml} if set._@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode();public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.sharedCacheMode = sharedCacheMode__	};specify,the,jpa,2,0,shared,cache,mode,for,all,of,this,manager,s,persistence,units,overriding,any,value,in,code,persistence,xml,if,set,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,shared,cache,mode,shared,cache,mode
DefaultPersistenceUnitManager -> @Nullable 	private URL determineDefaultPersistenceUnitRootUrl();1495868221;Try to determine the persistence unit root URL based on the given_"defaultPersistenceUnitRootLocation"._@return the persistence unit root URL to pass to the JPA PersistenceProvider_@see #setDefaultPersistenceUnitRootLocation;@Nullable_	private URL determineDefaultPersistenceUnitRootUrl() {_		if (this.defaultPersistenceUnitRootLocation == null) {_			return null__		}_		try {_			URL url = this.resourcePatternResolver.getResource(this.defaultPersistenceUnitRootLocation).getURL()__			return (ResourceUtils.isJarURL(url) ? ResourceUtils.extractJarFileURL(url) : url)__		}_		catch (IOException ex) {_			throw new PersistenceException("Unable to resolve persistence unit root URL", ex)__		}_	};try,to,determine,the,persistence,unit,root,url,based,on,the,given,default,persistence,unit,root,location,return,the,persistence,unit,root,url,to,pass,to,the,jpa,persistence,provider,see,set,default,persistence,unit,root,location;nullable,private,url,determine,default,persistence,unit,root,url,if,this,default,persistence,unit,root,location,null,return,null,try,url,url,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,get,url,return,resource,utils,is,jar,url,url,resource,utils,extract,jar,file,url,url,url,catch,ioexception,ex,throw,new,persistence,exception,unable,to,resolve,persistence,unit,root,url,ex
DefaultPersistenceUnitManager -> @Nullable 	private URL determineDefaultPersistenceUnitRootUrl();1496259743;Try to determine the persistence unit root URL based on the given_"defaultPersistenceUnitRootLocation"._@return the persistence unit root URL to pass to the JPA PersistenceProvider_@see #setDefaultPersistenceUnitRootLocation;@Nullable_	private URL determineDefaultPersistenceUnitRootUrl() {_		if (this.defaultPersistenceUnitRootLocation == null) {_			return null__		}_		try {_			URL url = this.resourcePatternResolver.getResource(this.defaultPersistenceUnitRootLocation).getURL()__			return (ResourceUtils.isJarURL(url) ? ResourceUtils.extractJarFileURL(url) : url)__		}_		catch (IOException ex) {_			throw new PersistenceException("Unable to resolve persistence unit root URL", ex)__		}_	};try,to,determine,the,persistence,unit,root,url,based,on,the,given,default,persistence,unit,root,location,return,the,persistence,unit,root,url,to,pass,to,the,jpa,persistence,provider,see,set,default,persistence,unit,root,location;nullable,private,url,determine,default,persistence,unit,root,url,if,this,default,persistence,unit,root,location,null,return,null,try,url,url,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,get,url,return,resource,utils,is,jar,url,url,resource,utils,extract,jar,file,url,url,url,catch,ioexception,ex,throw,new,persistence,exception,unable,to,resolve,persistence,unit,root,url,ex
DefaultPersistenceUnitManager -> @Nullable 	private URL determineDefaultPersistenceUnitRootUrl();1496837955;Try to determine the persistence unit root URL based on the given_"defaultPersistenceUnitRootLocation"._@return the persistence unit root URL to pass to the JPA PersistenceProvider_@see #setDefaultPersistenceUnitRootLocation;@Nullable_	private URL determineDefaultPersistenceUnitRootUrl() {_		if (this.defaultPersistenceUnitRootLocation == null) {_			return null__		}_		try {_			URL url = this.resourcePatternResolver.getResource(this.defaultPersistenceUnitRootLocation).getURL()__			return (ResourceUtils.isJarURL(url) ? ResourceUtils.extractJarFileURL(url) : url)__		}_		catch (IOException ex) {_			throw new PersistenceException("Unable to resolve persistence unit root URL", ex)__		}_	};try,to,determine,the,persistence,unit,root,url,based,on,the,given,default,persistence,unit,root,location,return,the,persistence,unit,root,url,to,pass,to,the,jpa,persistence,provider,see,set,default,persistence,unit,root,location;nullable,private,url,determine,default,persistence,unit,root,url,if,this,default,persistence,unit,root,location,null,return,null,try,url,url,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,get,url,return,resource,utils,is,jar,url,url,resource,utils,extract,jar,file,url,url,url,catch,ioexception,ex,throw,new,persistence,exception,unable,to,resolve,persistence,unit,root,url,ex
DefaultPersistenceUnitManager -> @Nullable 	private URL determineDefaultPersistenceUnitRootUrl();1498780456;Try to determine the persistence unit root URL based on the given_"defaultPersistenceUnitRootLocation"._@return the persistence unit root URL to pass to the JPA PersistenceProvider_@see #setDefaultPersistenceUnitRootLocation;@Nullable_	private URL determineDefaultPersistenceUnitRootUrl() {_		if (this.defaultPersistenceUnitRootLocation == null) {_			return null__		}_		try {_			URL url = this.resourcePatternResolver.getResource(this.defaultPersistenceUnitRootLocation).getURL()__			return (ResourceUtils.isJarURL(url) ? ResourceUtils.extractJarFileURL(url) : url)__		}_		catch (IOException ex) {_			throw new PersistenceException("Unable to resolve persistence unit root URL", ex)__		}_	};try,to,determine,the,persistence,unit,root,url,based,on,the,given,default,persistence,unit,root,location,return,the,persistence,unit,root,url,to,pass,to,the,jpa,persistence,provider,see,set,default,persistence,unit,root,location;nullable,private,url,determine,default,persistence,unit,root,url,if,this,default,persistence,unit,root,location,null,return,null,try,url,url,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,get,url,return,resource,utils,is,jar,url,url,resource,utils,extract,jar,file,url,url,url,catch,ioexception,ex,throw,new,persistence,exception,unable,to,resolve,persistence,unit,root,url,ex
DefaultPersistenceUnitManager -> @Nullable 	private URL determineDefaultPersistenceUnitRootUrl();1500448076;Try to determine the persistence unit root URL based on the given_"defaultPersistenceUnitRootLocation"._@return the persistence unit root URL to pass to the JPA PersistenceProvider_@see #setDefaultPersistenceUnitRootLocation;@Nullable_	private URL determineDefaultPersistenceUnitRootUrl() {_		if (this.defaultPersistenceUnitRootLocation == null) {_			return null__		}_		try {_			URL url = this.resourcePatternResolver.getResource(this.defaultPersistenceUnitRootLocation).getURL()__			return (ResourceUtils.isJarURL(url) ? ResourceUtils.extractJarFileURL(url) : url)__		}_		catch (IOException ex) {_			throw new PersistenceException("Unable to resolve persistence unit root URL", ex)__		}_	};try,to,determine,the,persistence,unit,root,url,based,on,the,given,default,persistence,unit,root,location,return,the,persistence,unit,root,url,to,pass,to,the,jpa,persistence,provider,see,set,default,persistence,unit,root,location;nullable,private,url,determine,default,persistence,unit,root,url,if,this,default,persistence,unit,root,location,null,return,null,try,url,url,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,get,url,return,resource,utils,is,jar,url,url,resource,utils,extract,jar,file,url,url,url,catch,ioexception,ex,throw,new,persistence,exception,unable,to,resolve,persistence,unit,root,url,ex
DefaultPersistenceUnitManager -> @Nullable 	private URL determineDefaultPersistenceUnitRootUrl();1520528267;Try to determine the persistence unit root URL based on the given_"defaultPersistenceUnitRootLocation"._@return the persistence unit root URL to pass to the JPA PersistenceProvider_@see #setDefaultPersistenceUnitRootLocation;@Nullable_	private URL determineDefaultPersistenceUnitRootUrl() {_		if (this.defaultPersistenceUnitRootLocation == null) {_			return null__		}_		try {_			URL url = this.resourcePatternResolver.getResource(this.defaultPersistenceUnitRootLocation).getURL()__			return (ResourceUtils.isJarURL(url) ? ResourceUtils.extractJarFileURL(url) : url)__		}_		catch (IOException ex) {_			throw new PersistenceException("Unable to resolve persistence unit root URL", ex)__		}_	};try,to,determine,the,persistence,unit,root,url,based,on,the,given,default,persistence,unit,root,location,return,the,persistence,unit,root,url,to,pass,to,the,jpa,persistence,provider,see,set,default,persistence,unit,root,location;nullable,private,url,determine,default,persistence,unit,root,url,if,this,default,persistence,unit,root,location,null,return,null,try,url,url,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,get,url,return,resource,utils,is,jar,url,url,resource,utils,extract,jar,file,url,url,url,catch,ioexception,ex,throw,new,persistence,exception,unable,to,resolve,persistence,unit,root,url,ex
DefaultPersistenceUnitManager -> @Nullable 	private URL determineDefaultPersistenceUnitRootUrl();1528313484;Try to determine the persistence unit root URL based on the given_"defaultPersistenceUnitRootLocation"._@return the persistence unit root URL to pass to the JPA PersistenceProvider_@see #setDefaultPersistenceUnitRootLocation;@Nullable_	private URL determineDefaultPersistenceUnitRootUrl() {_		if (this.defaultPersistenceUnitRootLocation == null) {_			return null__		}_		try {_			URL url = this.resourcePatternResolver.getResource(this.defaultPersistenceUnitRootLocation).getURL()__			return (ResourceUtils.isJarURL(url) ? ResourceUtils.extractJarFileURL(url) : url)__		}_		catch (IOException ex) {_			throw new PersistenceException("Unable to resolve persistence unit root URL", ex)__		}_	};try,to,determine,the,persistence,unit,root,url,based,on,the,given,default,persistence,unit,root,location,return,the,persistence,unit,root,url,to,pass,to,the,jpa,persistence,provider,see,set,default,persistence,unit,root,location;nullable,private,url,determine,default,persistence,unit,root,url,if,this,default,persistence,unit,root,location,null,return,null,try,url,url,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,get,url,return,resource,utils,is,jar,url,url,resource,utils,extract,jar,file,url,url,url,catch,ioexception,ex,throw,new,persistence,exception,unable,to,resolve,persistence,unit,root,url,ex
DefaultPersistenceUnitManager -> @Nullable 	private URL determineDefaultPersistenceUnitRootUrl();1530174524;Try to determine the persistence unit root URL based on the given_"defaultPersistenceUnitRootLocation"._@return the persistence unit root URL to pass to the JPA PersistenceProvider_@see #setDefaultPersistenceUnitRootLocation;@Nullable_	private URL determineDefaultPersistenceUnitRootUrl() {_		if (this.defaultPersistenceUnitRootLocation == null) {_			return null__		}_		try {_			URL url = this.resourcePatternResolver.getResource(this.defaultPersistenceUnitRootLocation).getURL()__			return (ResourceUtils.isJarURL(url) ? ResourceUtils.extractJarFileURL(url) : url)__		}_		catch (IOException ex) {_			throw new PersistenceException("Unable to resolve persistence unit root URL", ex)__		}_	};try,to,determine,the,persistence,unit,root,url,based,on,the,given,default,persistence,unit,root,location,return,the,persistence,unit,root,url,to,pass,to,the,jpa,persistence,provider,see,set,default,persistence,unit,root,location;nullable,private,url,determine,default,persistence,unit,root,url,if,this,default,persistence,unit,root,location,null,return,null,try,url,url,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,get,url,return,resource,utils,is,jar,url,url,resource,utils,extract,jar,file,url,url,url,catch,ioexception,ex,throw,new,persistence,exception,unable,to,resolve,persistence,unit,root,url,ex
DefaultPersistenceUnitManager -> @Nullable 	private URL determineDefaultPersistenceUnitRootUrl();1532091916;Try to determine the persistence unit root URL based on the given_"defaultPersistenceUnitRootLocation"._@return the persistence unit root URL to pass to the JPA PersistenceProvider_@see #setDefaultPersistenceUnitRootLocation;@Nullable_	private URL determineDefaultPersistenceUnitRootUrl() {_		if (this.defaultPersistenceUnitRootLocation == null) {_			return null__		}_		try {_			URL url = this.resourcePatternResolver.getResource(this.defaultPersistenceUnitRootLocation).getURL()__			return (ResourceUtils.isJarURL(url) ? ResourceUtils.extractJarFileURL(url) : url)__		}_		catch (IOException ex) {_			throw new PersistenceException("Unable to resolve persistence unit root URL", ex)__		}_	};try,to,determine,the,persistence,unit,root,url,based,on,the,given,default,persistence,unit,root,location,return,the,persistence,unit,root,url,to,pass,to,the,jpa,persistence,provider,see,set,default,persistence,unit,root,location;nullable,private,url,determine,default,persistence,unit,root,url,if,this,default,persistence,unit,root,location,null,return,null,try,url,url,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,get,url,return,resource,utils,is,jar,url,url,resource,utils,extract,jar,file,url,url,url,catch,ioexception,ex,throw,new,persistence,exception,unable,to,resolve,persistence,unit,root,url,ex
DefaultPersistenceUnitManager -> private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos();1328020251;Read all persistence unit infos from <code>persistence.xml</code>,_as defined in the JPA specification.;private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos() {_		PersistenceUnitReader reader = new PersistenceUnitReader(this.resourcePatternResolver, this.dataSourceLookup)__		List<SpringPersistenceUnitInfo> infos = new LinkedList<SpringPersistenceUnitInfo>()__		infos.addAll(Arrays.asList(reader.readPersistenceUnitInfos(this.persistenceXmlLocations)))__		if (this.packagesToScan != null || this.mappingResources != null) {_			infos.add(buildDefaultPersistenceUnitInfo())__		}_		return infos__	};read,all,persistence,unit,infos,from,code,persistence,xml,code,as,defined,in,the,jpa,specification;private,list,spring,persistence,unit,info,read,persistence,unit,infos,persistence,unit,reader,reader,new,persistence,unit,reader,this,resource,pattern,resolver,this,data,source,lookup,list,spring,persistence,unit,info,infos,new,linked,list,spring,persistence,unit,info,infos,add,all,arrays,as,list,reader,read,persistence,unit,infos,this,persistence,xml,locations,if,this,packages,to,scan,null,this,mapping,resources,null,infos,add,build,default,persistence,unit,info,return,infos
DefaultPersistenceUnitManager -> private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos();1329142650;Read all persistence unit infos from <code>persistence.xml</code>,_as defined in the JPA specification.;private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos() {_		PersistenceUnitReader reader = new PersistenceUnitReader(this.resourcePatternResolver, this.dataSourceLookup)__		List<SpringPersistenceUnitInfo> infos = new LinkedList<SpringPersistenceUnitInfo>()__		infos.addAll(Arrays.asList(reader.readPersistenceUnitInfos(this.persistenceXmlLocations)))__		if (this.packagesToScan != null || this.mappingResources != null) {_			infos.add(buildDefaultPersistenceUnitInfo())__		}_		return infos__	};read,all,persistence,unit,infos,from,code,persistence,xml,code,as,defined,in,the,jpa,specification;private,list,spring,persistence,unit,info,read,persistence,unit,infos,persistence,unit,reader,reader,new,persistence,unit,reader,this,resource,pattern,resolver,this,data,source,lookup,list,spring,persistence,unit,info,infos,new,linked,list,spring,persistence,unit,info,infos,add,all,arrays,as,list,reader,read,persistence,unit,infos,this,persistence,xml,locations,if,this,packages,to,scan,null,this,mapping,resources,null,infos,add,build,default,persistence,unit,info,return,infos
DefaultPersistenceUnitManager -> private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos();1347282851;Read all persistence unit infos from <code>persistence.xml</code>,_as defined in the JPA specification.;private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos() {_		List<SpringPersistenceUnitInfo> infos = new LinkedList<SpringPersistenceUnitInfo>()__		boolean buildDefaultUnit = (this.packagesToScan != null || this.mappingResources != null)__		PersistenceUnitReader reader = new PersistenceUnitReader(this.resourcePatternResolver, this.dataSourceLookup)__		SpringPersistenceUnitInfo[] readInfos = reader.readPersistenceUnitInfos(this.persistenceXmlLocations)__		for (SpringPersistenceUnitInfo readInfo : readInfos) {_			infos.add(readInfo)__			if (this.defaultPersistenceUnitName != null &&_					this.defaultPersistenceUnitName.equals(readInfo.getPersistenceUnitName())) {_				buildDefaultUnit = false__			}_		}_		if (buildDefaultUnit) {_			infos.add(buildDefaultPersistenceUnitInfo())__		}_		return infos__	};read,all,persistence,unit,infos,from,code,persistence,xml,code,as,defined,in,the,jpa,specification;private,list,spring,persistence,unit,info,read,persistence,unit,infos,list,spring,persistence,unit,info,infos,new,linked,list,spring,persistence,unit,info,boolean,build,default,unit,this,packages,to,scan,null,this,mapping,resources,null,persistence,unit,reader,reader,new,persistence,unit,reader,this,resource,pattern,resolver,this,data,source,lookup,spring,persistence,unit,info,read,infos,reader,read,persistence,unit,infos,this,persistence,xml,locations,for,spring,persistence,unit,info,read,info,read,infos,infos,add,read,info,if,this,default,persistence,unit,name,null,this,default,persistence,unit,name,equals,read,info,get,persistence,unit,name,build,default,unit,false,if,build,default,unit,infos,add,build,default,persistence,unit,info,return,infos
DefaultPersistenceUnitManager -> private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos();1351648399;Read all persistence unit infos from <code>persistence.xml</code>,_as defined in the JPA specification.;private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos() {_		List<SpringPersistenceUnitInfo> infos = new LinkedList<SpringPersistenceUnitInfo>()__		boolean buildDefaultUnit = (this.packagesToScan != null || this.mappingResources != null)__		PersistenceUnitReader reader = new PersistenceUnitReader(this.resourcePatternResolver, this.dataSourceLookup)__		SpringPersistenceUnitInfo[] readInfos = reader.readPersistenceUnitInfos(this.persistenceXmlLocations)__		for (SpringPersistenceUnitInfo readInfo : readInfos) {_			infos.add(readInfo)__			if (this.defaultPersistenceUnitName != null &&_					this.defaultPersistenceUnitName.equals(readInfo.getPersistenceUnitName())) {_				buildDefaultUnit = false__			}_		}_		if (buildDefaultUnit) {_			infos.add(buildDefaultPersistenceUnitInfo())__		}_		return infos__	};read,all,persistence,unit,infos,from,code,persistence,xml,code,as,defined,in,the,jpa,specification;private,list,spring,persistence,unit,info,read,persistence,unit,infos,list,spring,persistence,unit,info,infos,new,linked,list,spring,persistence,unit,info,boolean,build,default,unit,this,packages,to,scan,null,this,mapping,resources,null,persistence,unit,reader,reader,new,persistence,unit,reader,this,resource,pattern,resolver,this,data,source,lookup,spring,persistence,unit,info,read,infos,reader,read,persistence,unit,infos,this,persistence,xml,locations,for,spring,persistence,unit,info,read,info,read,infos,infos,add,read,info,if,this,default,persistence,unit,name,null,this,default,persistence,unit,name,equals,read,info,get,persistence,unit,name,build,default,unit,false,if,build,default,unit,infos,add,build,default,persistence,unit,info,return,infos
DefaultPersistenceUnitManager -> private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos();1356735495;Read all persistence unit infos from {@code persistence.xml},_as defined in the JPA specification.;private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos() {_		List<SpringPersistenceUnitInfo> infos = new LinkedList<SpringPersistenceUnitInfo>()__		boolean buildDefaultUnit = (this.packagesToScan != null || this.mappingResources != null)__		PersistenceUnitReader reader = new PersistenceUnitReader(this.resourcePatternResolver, this.dataSourceLookup)__		SpringPersistenceUnitInfo[] readInfos = reader.readPersistenceUnitInfos(this.persistenceXmlLocations)__		for (SpringPersistenceUnitInfo readInfo : readInfos) {_			infos.add(readInfo)__			if (this.defaultPersistenceUnitName != null &&_					this.defaultPersistenceUnitName.equals(readInfo.getPersistenceUnitName())) {_				buildDefaultUnit = false__			}_		}_		if (buildDefaultUnit) {_			infos.add(buildDefaultPersistenceUnitInfo())__		}_		return infos__	};read,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification;private,list,spring,persistence,unit,info,read,persistence,unit,infos,list,spring,persistence,unit,info,infos,new,linked,list,spring,persistence,unit,info,boolean,build,default,unit,this,packages,to,scan,null,this,mapping,resources,null,persistence,unit,reader,reader,new,persistence,unit,reader,this,resource,pattern,resolver,this,data,source,lookup,spring,persistence,unit,info,read,infos,reader,read,persistence,unit,infos,this,persistence,xml,locations,for,spring,persistence,unit,info,read,info,read,infos,infos,add,read,info,if,this,default,persistence,unit,name,null,this,default,persistence,unit,name,equals,read,info,get,persistence,unit,name,build,default,unit,false,if,build,default,unit,infos,add,build,default,persistence,unit,info,return,infos
DefaultPersistenceUnitManager -> private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos();1357119239;Read all persistence unit infos from {@code persistence.xml},_as defined in the JPA specification.;private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos() {_		List<SpringPersistenceUnitInfo> infos = new LinkedList<SpringPersistenceUnitInfo>()__		boolean buildDefaultUnit = (this.packagesToScan != null || this.mappingResources != null)__		PersistenceUnitReader reader = new PersistenceUnitReader(this.resourcePatternResolver, this.dataSourceLookup)__		SpringPersistenceUnitInfo[] readInfos = reader.readPersistenceUnitInfos(this.persistenceXmlLocations)__		for (SpringPersistenceUnitInfo readInfo : readInfos) {_			infos.add(readInfo)__			if (this.defaultPersistenceUnitName != null &&_					this.defaultPersistenceUnitName.equals(readInfo.getPersistenceUnitName())) {_				buildDefaultUnit = false__			}_		}_		if (buildDefaultUnit) {_			infos.add(buildDefaultPersistenceUnitInfo())__		}_		return infos__	};read,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification;private,list,spring,persistence,unit,info,read,persistence,unit,infos,list,spring,persistence,unit,info,infos,new,linked,list,spring,persistence,unit,info,boolean,build,default,unit,this,packages,to,scan,null,this,mapping,resources,null,persistence,unit,reader,reader,new,persistence,unit,reader,this,resource,pattern,resolver,this,data,source,lookup,spring,persistence,unit,info,read,infos,reader,read,persistence,unit,infos,this,persistence,xml,locations,for,spring,persistence,unit,info,read,info,read,infos,infos,add,read,info,if,this,default,persistence,unit,name,null,this,default,persistence,unit,name,equals,read,info,get,persistence,unit,name,build,default,unit,false,if,build,default,unit,infos,add,build,default,persistence,unit,info,return,infos
DefaultPersistenceUnitManager -> private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos();1363714444;Read all persistence unit infos from {@code persistence.xml},_as defined in the JPA specification.;private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos() {_		List<SpringPersistenceUnitInfo> infos = new LinkedList<SpringPersistenceUnitInfo>()__		boolean buildDefaultUnit = (this.packagesToScan != null || this.mappingResources != null)__		PersistenceUnitReader reader = new PersistenceUnitReader(this.resourcePatternResolver, this.dataSourceLookup)__		SpringPersistenceUnitInfo[] readInfos = reader.readPersistenceUnitInfos(this.persistenceXmlLocations)__		for (SpringPersistenceUnitInfo readInfo : readInfos) {_			infos.add(readInfo)__			if (this.defaultPersistenceUnitName != null &&_					this.defaultPersistenceUnitName.equals(readInfo.getPersistenceUnitName())) {_				buildDefaultUnit = false__			}_		}_		if (buildDefaultUnit) {_			infos.add(buildDefaultPersistenceUnitInfo())__		}_		return infos__	};read,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification;private,list,spring,persistence,unit,info,read,persistence,unit,infos,list,spring,persistence,unit,info,infos,new,linked,list,spring,persistence,unit,info,boolean,build,default,unit,this,packages,to,scan,null,this,mapping,resources,null,persistence,unit,reader,reader,new,persistence,unit,reader,this,resource,pattern,resolver,this,data,source,lookup,spring,persistence,unit,info,read,infos,reader,read,persistence,unit,infos,this,persistence,xml,locations,for,spring,persistence,unit,info,read,info,read,infos,infos,add,read,info,if,this,default,persistence,unit,name,null,this,default,persistence,unit,name,equals,read,info,get,persistence,unit,name,build,default,unit,false,if,build,default,unit,infos,add,build,default,persistence,unit,info,return,infos
DefaultPersistenceUnitManager -> private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos();1368482696;Read all persistence unit infos from {@code persistence.xml},_as defined in the JPA specification.;private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos() {_		List<SpringPersistenceUnitInfo> infos = new LinkedList<SpringPersistenceUnitInfo>()__		boolean buildDefaultUnit = (this.packagesToScan != null || this.mappingResources != null)__		PersistenceUnitReader reader = new PersistenceUnitReader(this.resourcePatternResolver, this.dataSourceLookup)__		SpringPersistenceUnitInfo[] readInfos = reader.readPersistenceUnitInfos(this.persistenceXmlLocations)__		for (SpringPersistenceUnitInfo readInfo : readInfos) {_			infos.add(readInfo)__			if (this.defaultPersistenceUnitName != null &&_					this.defaultPersistenceUnitName.equals(readInfo.getPersistenceUnitName())) {_				buildDefaultUnit = false__			}_		}_		if (buildDefaultUnit) {_			infos.add(buildDefaultPersistenceUnitInfo())__		}_		return infos__	};read,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification;private,list,spring,persistence,unit,info,read,persistence,unit,infos,list,spring,persistence,unit,info,infos,new,linked,list,spring,persistence,unit,info,boolean,build,default,unit,this,packages,to,scan,null,this,mapping,resources,null,persistence,unit,reader,reader,new,persistence,unit,reader,this,resource,pattern,resolver,this,data,source,lookup,spring,persistence,unit,info,read,infos,reader,read,persistence,unit,infos,this,persistence,xml,locations,for,spring,persistence,unit,info,read,info,read,infos,infos,add,read,info,if,this,default,persistence,unit,name,null,this,default,persistence,unit,name,equals,read,info,get,persistence,unit,name,build,default,unit,false,if,build,default,unit,infos,add,build,default,persistence,unit,info,return,infos
DefaultPersistenceUnitManager -> private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos();1375434510;Read all persistence unit infos from {@code persistence.xml},_as defined in the JPA specification.;private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos() {_		List<SpringPersistenceUnitInfo> infos = new LinkedList<SpringPersistenceUnitInfo>()__		boolean buildDefaultUnit = (this.packagesToScan != null || this.mappingResources != null)__		PersistenceUnitReader reader = new PersistenceUnitReader(this.resourcePatternResolver, this.dataSourceLookup)__		SpringPersistenceUnitInfo[] readInfos = reader.readPersistenceUnitInfos(this.persistenceXmlLocations)__		for (SpringPersistenceUnitInfo readInfo : readInfos) {_			infos.add(readInfo)__			if (this.defaultPersistenceUnitName != null &&_					this.defaultPersistenceUnitName.equals(readInfo.getPersistenceUnitName())) {_				buildDefaultUnit = false__			}_		}_		if (buildDefaultUnit) {_			infos.add(buildDefaultPersistenceUnitInfo())__		}_		return infos__	};read,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification;private,list,spring,persistence,unit,info,read,persistence,unit,infos,list,spring,persistence,unit,info,infos,new,linked,list,spring,persistence,unit,info,boolean,build,default,unit,this,packages,to,scan,null,this,mapping,resources,null,persistence,unit,reader,reader,new,persistence,unit,reader,this,resource,pattern,resolver,this,data,source,lookup,spring,persistence,unit,info,read,infos,reader,read,persistence,unit,infos,this,persistence,xml,locations,for,spring,persistence,unit,info,read,info,read,infos,infos,add,read,info,if,this,default,persistence,unit,name,null,this,default,persistence,unit,name,equals,read,info,get,persistence,unit,name,build,default,unit,false,if,build,default,unit,infos,add,build,default,persistence,unit,info,return,infos
DefaultPersistenceUnitManager -> private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos();1375458214;Read all persistence unit infos from {@code persistence.xml},_as defined in the JPA specification.;private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos() {_		List<SpringPersistenceUnitInfo> infos = new LinkedList<SpringPersistenceUnitInfo>()__		boolean buildDefaultUnit = (this.packagesToScan != null || this.mappingResources != null)__		PersistenceUnitReader reader = new PersistenceUnitReader(this.resourcePatternResolver, this.dataSourceLookup)__		SpringPersistenceUnitInfo[] readInfos = reader.readPersistenceUnitInfos(this.persistenceXmlLocations)__		for (SpringPersistenceUnitInfo readInfo : readInfos) {_			infos.add(readInfo)__			if (this.defaultPersistenceUnitName != null &&_					this.defaultPersistenceUnitName.equals(readInfo.getPersistenceUnitName())) {_				buildDefaultUnit = false__			}_		}_		if (buildDefaultUnit) {_			infos.add(buildDefaultPersistenceUnitInfo())__		}_		return infos__	};read,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification;private,list,spring,persistence,unit,info,read,persistence,unit,infos,list,spring,persistence,unit,info,infos,new,linked,list,spring,persistence,unit,info,boolean,build,default,unit,this,packages,to,scan,null,this,mapping,resources,null,persistence,unit,reader,reader,new,persistence,unit,reader,this,resource,pattern,resolver,this,data,source,lookup,spring,persistence,unit,info,read,infos,reader,read,persistence,unit,infos,this,persistence,xml,locations,for,spring,persistence,unit,info,read,info,read,infos,infos,add,read,info,if,this,default,persistence,unit,name,null,this,default,persistence,unit,name,equals,read,info,get,persistence,unit,name,build,default,unit,false,if,build,default,unit,infos,add,build,default,persistence,unit,info,return,infos
DefaultPersistenceUnitManager -> private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos();1389648334;Read all persistence unit infos from {@code persistence.xml},_as defined in the JPA specification.;private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos() {_		List<SpringPersistenceUnitInfo> infos = new LinkedList<SpringPersistenceUnitInfo>()__		boolean buildDefaultUnit = (this.packagesToScan != null || this.mappingResources != null)__		PersistenceUnitReader reader = new PersistenceUnitReader(this.resourcePatternResolver, this.dataSourceLookup)__		SpringPersistenceUnitInfo[] readInfos = reader.readPersistenceUnitInfos(this.persistenceXmlLocations)__		for (SpringPersistenceUnitInfo readInfo : readInfos) {_			infos.add(readInfo)__			if (this.defaultPersistenceUnitName != null &&_					this.defaultPersistenceUnitName.equals(readInfo.getPersistenceUnitName())) {_				buildDefaultUnit = false__			}_		}_		if (buildDefaultUnit) {_			infos.add(buildDefaultPersistenceUnitInfo())__		}_		return infos__	};read,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification;private,list,spring,persistence,unit,info,read,persistence,unit,infos,list,spring,persistence,unit,info,infos,new,linked,list,spring,persistence,unit,info,boolean,build,default,unit,this,packages,to,scan,null,this,mapping,resources,null,persistence,unit,reader,reader,new,persistence,unit,reader,this,resource,pattern,resolver,this,data,source,lookup,spring,persistence,unit,info,read,infos,reader,read,persistence,unit,infos,this,persistence,xml,locations,for,spring,persistence,unit,info,read,info,read,infos,infos,add,read,info,if,this,default,persistence,unit,name,null,this,default,persistence,unit,name,equals,read,info,get,persistence,unit,name,build,default,unit,false,if,build,default,unit,infos,add,build,default,persistence,unit,info,return,infos
DefaultPersistenceUnitManager -> private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos();1390250900;Read all persistence unit infos from {@code persistence.xml},_as defined in the JPA specification.;private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos() {_		List<SpringPersistenceUnitInfo> infos = new LinkedList<SpringPersistenceUnitInfo>()__		String defaultName = this.defaultPersistenceUnitName__		boolean buildDefaultUnit = (this.packagesToScan != null || this.mappingResources != null)__		boolean foundDefaultUnit = false___		PersistenceUnitReader reader = new PersistenceUnitReader(this.resourcePatternResolver, this.dataSourceLookup)__		SpringPersistenceUnitInfo[] readInfos = reader.readPersistenceUnitInfos(this.persistenceXmlLocations)__		for (SpringPersistenceUnitInfo readInfo : readInfos) {_			infos.add(readInfo)__			if (defaultName != null && defaultName.equals(readInfo.getPersistenceUnitName())) {_				foundDefaultUnit = true__			}_		}__		if (buildDefaultUnit) {_			if (foundDefaultUnit) {_				if (logger.isInfoEnabled()) {_					logger.info("Found explicit default unit with name '" + defaultName + "' in persistence.xml - " +_							"overriding local default unit settings ('packagesToScan'/'mappingResources')")__				}_			}_			else {_				infos.add(buildDefaultPersistenceUnitInfo())__			}_		}_		return infos__	};read,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification;private,list,spring,persistence,unit,info,read,persistence,unit,infos,list,spring,persistence,unit,info,infos,new,linked,list,spring,persistence,unit,info,string,default,name,this,default,persistence,unit,name,boolean,build,default,unit,this,packages,to,scan,null,this,mapping,resources,null,boolean,found,default,unit,false,persistence,unit,reader,reader,new,persistence,unit,reader,this,resource,pattern,resolver,this,data,source,lookup,spring,persistence,unit,info,read,infos,reader,read,persistence,unit,infos,this,persistence,xml,locations,for,spring,persistence,unit,info,read,info,read,infos,infos,add,read,info,if,default,name,null,default,name,equals,read,info,get,persistence,unit,name,found,default,unit,true,if,build,default,unit,if,found,default,unit,if,logger,is,info,enabled,logger,info,found,explicit,default,unit,with,name,default,name,in,persistence,xml,overriding,local,default,unit,settings,packages,to,scan,mapping,resources,else,infos,add,build,default,persistence,unit,info,return,infos
DefaultPersistenceUnitManager -> private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos();1390313076;Read all persistence unit infos from {@code persistence.xml},_as defined in the JPA specification.;private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos() {_		List<SpringPersistenceUnitInfo> infos = new LinkedList<SpringPersistenceUnitInfo>()__		String defaultName = this.defaultPersistenceUnitName__		boolean buildDefaultUnit = (this.packagesToScan != null || this.mappingResources != null)__		boolean foundDefaultUnit = false___		PersistenceUnitReader reader = new PersistenceUnitReader(this.resourcePatternResolver, this.dataSourceLookup)__		SpringPersistenceUnitInfo[] readInfos = reader.readPersistenceUnitInfos(this.persistenceXmlLocations)__		for (SpringPersistenceUnitInfo readInfo : readInfos) {_			infos.add(readInfo)__			if (defaultName != null && defaultName.equals(readInfo.getPersistenceUnitName())) {_				foundDefaultUnit = true__			}_		}__		if (buildDefaultUnit) {_			if (foundDefaultUnit) {_				if (logger.isInfoEnabled()) {_					logger.info("Found explicit default unit with name '" + defaultName + "' in persistence.xml - " +_							"overriding local default unit settings ('packagesToScan'/'mappingResources')")__				}_			}_			else {_				infos.add(buildDefaultPersistenceUnitInfo())__			}_		}_		return infos__	};read,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification;private,list,spring,persistence,unit,info,read,persistence,unit,infos,list,spring,persistence,unit,info,infos,new,linked,list,spring,persistence,unit,info,string,default,name,this,default,persistence,unit,name,boolean,build,default,unit,this,packages,to,scan,null,this,mapping,resources,null,boolean,found,default,unit,false,persistence,unit,reader,reader,new,persistence,unit,reader,this,resource,pattern,resolver,this,data,source,lookup,spring,persistence,unit,info,read,infos,reader,read,persistence,unit,infos,this,persistence,xml,locations,for,spring,persistence,unit,info,read,info,read,infos,infos,add,read,info,if,default,name,null,default,name,equals,read,info,get,persistence,unit,name,found,default,unit,true,if,build,default,unit,if,found,default,unit,if,logger,is,info,enabled,logger,info,found,explicit,default,unit,with,name,default,name,in,persistence,xml,overriding,local,default,unit,settings,packages,to,scan,mapping,resources,else,infos,add,build,default,persistence,unit,info,return,infos
DefaultPersistenceUnitManager -> private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos();1400140571;Read all persistence unit infos from {@code persistence.xml},_as defined in the JPA specification.;private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos() {_		List<SpringPersistenceUnitInfo> infos = new LinkedList<SpringPersistenceUnitInfo>()__		String defaultName = this.defaultPersistenceUnitName__		boolean buildDefaultUnit = (this.packagesToScan != null || this.mappingResources != null)__		boolean foundDefaultUnit = false___		PersistenceUnitReader reader = new PersistenceUnitReader(this.resourcePatternResolver, this.dataSourceLookup)__		SpringPersistenceUnitInfo[] readInfos = reader.readPersistenceUnitInfos(this.persistenceXmlLocations)__		for (SpringPersistenceUnitInfo readInfo : readInfos) {_			infos.add(readInfo)__			if (defaultName != null && defaultName.equals(readInfo.getPersistenceUnitName())) {_				foundDefaultUnit = true__			}_		}__		if (buildDefaultUnit) {_			if (foundDefaultUnit) {_				if (logger.isInfoEnabled()) {_					logger.info("Found explicit default unit with name '" + defaultName + "' in persistence.xml - " +_							"overriding local default unit settings ('packagesToScan'/'mappingResources')")__				}_			}_			else {_				infos.add(buildDefaultPersistenceUnitInfo())__			}_		}_		return infos__	};read,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification;private,list,spring,persistence,unit,info,read,persistence,unit,infos,list,spring,persistence,unit,info,infos,new,linked,list,spring,persistence,unit,info,string,default,name,this,default,persistence,unit,name,boolean,build,default,unit,this,packages,to,scan,null,this,mapping,resources,null,boolean,found,default,unit,false,persistence,unit,reader,reader,new,persistence,unit,reader,this,resource,pattern,resolver,this,data,source,lookup,spring,persistence,unit,info,read,infos,reader,read,persistence,unit,infos,this,persistence,xml,locations,for,spring,persistence,unit,info,read,info,read,infos,infos,add,read,info,if,default,name,null,default,name,equals,read,info,get,persistence,unit,name,found,default,unit,true,if,build,default,unit,if,found,default,unit,if,logger,is,info,enabled,logger,info,found,explicit,default,unit,with,name,default,name,in,persistence,xml,overriding,local,default,unit,settings,packages,to,scan,mapping,resources,else,infos,add,build,default,persistence,unit,info,return,infos
DefaultPersistenceUnitManager -> private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos();1403774750;Read all persistence unit infos from {@code persistence.xml},_as defined in the JPA specification.;private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos() {_		List<SpringPersistenceUnitInfo> infos = new LinkedList<SpringPersistenceUnitInfo>()__		String defaultName = this.defaultPersistenceUnitName__		boolean buildDefaultUnit = (this.packagesToScan != null || this.mappingResources != null)__		boolean foundDefaultUnit = false___		PersistenceUnitReader reader = new PersistenceUnitReader(this.resourcePatternResolver, this.dataSourceLookup)__		SpringPersistenceUnitInfo[] readInfos = reader.readPersistenceUnitInfos(this.persistenceXmlLocations)__		for (SpringPersistenceUnitInfo readInfo : readInfos) {_			infos.add(readInfo)__			if (defaultName != null && defaultName.equals(readInfo.getPersistenceUnitName())) {_				foundDefaultUnit = true__			}_		}__		if (buildDefaultUnit) {_			if (foundDefaultUnit) {_				if (logger.isInfoEnabled()) {_					logger.info("Found explicit default unit with name '" + defaultName + "' in persistence.xml - " +_							"overriding local default unit settings ('packagesToScan'/'mappingResources')")__				}_			}_			else {_				infos.add(buildDefaultPersistenceUnitInfo())__			}_		}_		return infos__	};read,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification;private,list,spring,persistence,unit,info,read,persistence,unit,infos,list,spring,persistence,unit,info,infos,new,linked,list,spring,persistence,unit,info,string,default,name,this,default,persistence,unit,name,boolean,build,default,unit,this,packages,to,scan,null,this,mapping,resources,null,boolean,found,default,unit,false,persistence,unit,reader,reader,new,persistence,unit,reader,this,resource,pattern,resolver,this,data,source,lookup,spring,persistence,unit,info,read,infos,reader,read,persistence,unit,infos,this,persistence,xml,locations,for,spring,persistence,unit,info,read,info,read,infos,infos,add,read,info,if,default,name,null,default,name,equals,read,info,get,persistence,unit,name,found,default,unit,true,if,build,default,unit,if,found,default,unit,if,logger,is,info,enabled,logger,info,found,explicit,default,unit,with,name,default,name,in,persistence,xml,overriding,local,default,unit,settings,packages,to,scan,mapping,resources,else,infos,add,build,default,persistence,unit,info,return,infos
DefaultPersistenceUnitManager -> private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos();1404056186;Read all persistence unit infos from {@code persistence.xml},_as defined in the JPA specification.;private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos() {_		List<SpringPersistenceUnitInfo> infos = new LinkedList<SpringPersistenceUnitInfo>()__		String defaultName = this.defaultPersistenceUnitName__		boolean buildDefaultUnit = (this.packagesToScan != null || this.mappingResources != null)__		boolean foundDefaultUnit = false___		PersistenceUnitReader reader = new PersistenceUnitReader(this.resourcePatternResolver, this.dataSourceLookup)__		SpringPersistenceUnitInfo[] readInfos = reader.readPersistenceUnitInfos(this.persistenceXmlLocations)__		for (SpringPersistenceUnitInfo readInfo : readInfos) {_			infos.add(readInfo)__			if (defaultName != null && defaultName.equals(readInfo.getPersistenceUnitName())) {_				foundDefaultUnit = true__			}_		}__		if (buildDefaultUnit) {_			if (foundDefaultUnit) {_				if (logger.isInfoEnabled()) {_					logger.info("Found explicit default unit with name '" + defaultName + "' in persistence.xml - " +_							"overriding local default unit settings ('packagesToScan'/'mappingResources')")__				}_			}_			else {_				infos.add(buildDefaultPersistenceUnitInfo())__			}_		}_		return infos__	};read,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification;private,list,spring,persistence,unit,info,read,persistence,unit,infos,list,spring,persistence,unit,info,infos,new,linked,list,spring,persistence,unit,info,string,default,name,this,default,persistence,unit,name,boolean,build,default,unit,this,packages,to,scan,null,this,mapping,resources,null,boolean,found,default,unit,false,persistence,unit,reader,reader,new,persistence,unit,reader,this,resource,pattern,resolver,this,data,source,lookup,spring,persistence,unit,info,read,infos,reader,read,persistence,unit,infos,this,persistence,xml,locations,for,spring,persistence,unit,info,read,info,read,infos,infos,add,read,info,if,default,name,null,default,name,equals,read,info,get,persistence,unit,name,found,default,unit,true,if,build,default,unit,if,found,default,unit,if,logger,is,info,enabled,logger,info,found,explicit,default,unit,with,name,default,name,in,persistence,xml,overriding,local,default,unit,settings,packages,to,scan,mapping,resources,else,infos,add,build,default,persistence,unit,info,return,infos
DefaultPersistenceUnitManager -> private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos();1447323728;Read all persistence unit infos from {@code persistence.xml},_as defined in the JPA specification.;private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos() {_		List<SpringPersistenceUnitInfo> infos = new LinkedList<SpringPersistenceUnitInfo>()__		String defaultName = this.defaultPersistenceUnitName__		boolean buildDefaultUnit = (this.packagesToScan != null || this.mappingResources != null)__		boolean foundDefaultUnit = false___		PersistenceUnitReader reader = new PersistenceUnitReader(this.resourcePatternResolver, this.dataSourceLookup)__		SpringPersistenceUnitInfo[] readInfos = reader.readPersistenceUnitInfos(this.persistenceXmlLocations)__		for (SpringPersistenceUnitInfo readInfo : readInfos) {_			infos.add(readInfo)__			if (defaultName != null && defaultName.equals(readInfo.getPersistenceUnitName())) {_				foundDefaultUnit = true__			}_		}__		if (buildDefaultUnit) {_			if (foundDefaultUnit) {_				if (logger.isInfoEnabled()) {_					logger.info("Found explicit default unit with name '" + defaultName + "' in persistence.xml - " +_							"overriding local default unit settings ('packagesToScan'/'mappingResources')")__				}_			}_			else {_				infos.add(buildDefaultPersistenceUnitInfo())__			}_		}_		return infos__	};read,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification;private,list,spring,persistence,unit,info,read,persistence,unit,infos,list,spring,persistence,unit,info,infos,new,linked,list,spring,persistence,unit,info,string,default,name,this,default,persistence,unit,name,boolean,build,default,unit,this,packages,to,scan,null,this,mapping,resources,null,boolean,found,default,unit,false,persistence,unit,reader,reader,new,persistence,unit,reader,this,resource,pattern,resolver,this,data,source,lookup,spring,persistence,unit,info,read,infos,reader,read,persistence,unit,infos,this,persistence,xml,locations,for,spring,persistence,unit,info,read,info,read,infos,infos,add,read,info,if,default,name,null,default,name,equals,read,info,get,persistence,unit,name,found,default,unit,true,if,build,default,unit,if,found,default,unit,if,logger,is,info,enabled,logger,info,found,explicit,default,unit,with,name,default,name,in,persistence,xml,overriding,local,default,unit,settings,packages,to,scan,mapping,resources,else,infos,add,build,default,persistence,unit,info,return,infos
DefaultPersistenceUnitManager -> private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos();1464299869;Read all persistence unit infos from {@code persistence.xml},_as defined in the JPA specification.;private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos() {_		List<SpringPersistenceUnitInfo> infos = new LinkedList<SpringPersistenceUnitInfo>()__		String defaultName = this.defaultPersistenceUnitName__		boolean buildDefaultUnit = (this.packagesToScan != null || this.mappingResources != null)__		boolean foundDefaultUnit = false___		PersistenceUnitReader reader = new PersistenceUnitReader(this.resourcePatternResolver, this.dataSourceLookup)__		SpringPersistenceUnitInfo[] readInfos = reader.readPersistenceUnitInfos(this.persistenceXmlLocations)__		for (SpringPersistenceUnitInfo readInfo : readInfos) {_			infos.add(readInfo)__			if (defaultName != null && defaultName.equals(readInfo.getPersistenceUnitName())) {_				foundDefaultUnit = true__			}_		}__		if (buildDefaultUnit) {_			if (foundDefaultUnit) {_				if (logger.isInfoEnabled()) {_					logger.info("Found explicit default unit with name '" + defaultName + "' in persistence.xml - " +_							"overriding local default unit settings ('packagesToScan'/'mappingResources')")__				}_			}_			else {_				infos.add(buildDefaultPersistenceUnitInfo())__			}_		}_		return infos__	};read,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification;private,list,spring,persistence,unit,info,read,persistence,unit,infos,list,spring,persistence,unit,info,infos,new,linked,list,spring,persistence,unit,info,string,default,name,this,default,persistence,unit,name,boolean,build,default,unit,this,packages,to,scan,null,this,mapping,resources,null,boolean,found,default,unit,false,persistence,unit,reader,reader,new,persistence,unit,reader,this,resource,pattern,resolver,this,data,source,lookup,spring,persistence,unit,info,read,infos,reader,read,persistence,unit,infos,this,persistence,xml,locations,for,spring,persistence,unit,info,read,info,read,infos,infos,add,read,info,if,default,name,null,default,name,equals,read,info,get,persistence,unit,name,found,default,unit,true,if,build,default,unit,if,found,default,unit,if,logger,is,info,enabled,logger,info,found,explicit,default,unit,with,name,default,name,in,persistence,xml,overriding,local,default,unit,settings,packages,to,scan,mapping,resources,else,infos,add,build,default,persistence,unit,info,return,infos
DefaultPersistenceUnitManager -> private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos();1467668243;Read all persistence unit infos from {@code persistence.xml},_as defined in the JPA specification.;private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos() {_		List<SpringPersistenceUnitInfo> infos = new LinkedList<SpringPersistenceUnitInfo>()__		String defaultName = this.defaultPersistenceUnitName__		boolean buildDefaultUnit = (this.packagesToScan != null || this.mappingResources != null)__		boolean foundDefaultUnit = false___		PersistenceUnitReader reader = new PersistenceUnitReader(this.resourcePatternResolver, this.dataSourceLookup)__		SpringPersistenceUnitInfo[] readInfos = reader.readPersistenceUnitInfos(this.persistenceXmlLocations)__		for (SpringPersistenceUnitInfo readInfo : readInfos) {_			infos.add(readInfo)__			if (defaultName != null && defaultName.equals(readInfo.getPersistenceUnitName())) {_				foundDefaultUnit = true__			}_		}__		if (buildDefaultUnit) {_			if (foundDefaultUnit) {_				if (logger.isInfoEnabled()) {_					logger.info("Found explicit default unit with name '" + defaultName + "' in persistence.xml - " +_							"overriding local default unit settings ('packagesToScan'/'mappingResources')")__				}_			}_			else {_				infos.add(buildDefaultPersistenceUnitInfo())__			}_		}_		return infos__	};read,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification;private,list,spring,persistence,unit,info,read,persistence,unit,infos,list,spring,persistence,unit,info,infos,new,linked,list,spring,persistence,unit,info,string,default,name,this,default,persistence,unit,name,boolean,build,default,unit,this,packages,to,scan,null,this,mapping,resources,null,boolean,found,default,unit,false,persistence,unit,reader,reader,new,persistence,unit,reader,this,resource,pattern,resolver,this,data,source,lookup,spring,persistence,unit,info,read,infos,reader,read,persistence,unit,infos,this,persistence,xml,locations,for,spring,persistence,unit,info,read,info,read,infos,infos,add,read,info,if,default,name,null,default,name,equals,read,info,get,persistence,unit,name,found,default,unit,true,if,build,default,unit,if,found,default,unit,if,logger,is,info,enabled,logger,info,found,explicit,default,unit,with,name,default,name,in,persistence,xml,overriding,local,default,unit,settings,packages,to,scan,mapping,resources,else,infos,add,build,default,persistence,unit,info,return,infos
DefaultPersistenceUnitManager -> private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos();1467730834;Read all persistence unit infos from {@code persistence.xml},_as defined in the JPA specification.;private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos() {_		List<SpringPersistenceUnitInfo> infos = new LinkedList<>()__		String defaultName = this.defaultPersistenceUnitName__		boolean buildDefaultUnit = (this.packagesToScan != null || this.mappingResources != null)__		boolean foundDefaultUnit = false___		PersistenceUnitReader reader = new PersistenceUnitReader(this.resourcePatternResolver, this.dataSourceLookup)__		SpringPersistenceUnitInfo[] readInfos = reader.readPersistenceUnitInfos(this.persistenceXmlLocations)__		for (SpringPersistenceUnitInfo readInfo : readInfos) {_			infos.add(readInfo)__			if (defaultName != null && defaultName.equals(readInfo.getPersistenceUnitName())) {_				foundDefaultUnit = true__			}_		}__		if (buildDefaultUnit) {_			if (foundDefaultUnit) {_				if (logger.isInfoEnabled()) {_					logger.info("Found explicit default unit with name '" + defaultName + "' in persistence.xml - " +_							"overriding local default unit settings ('packagesToScan'/'mappingResources')")__				}_			}_			else {_				infos.add(buildDefaultPersistenceUnitInfo())__			}_		}_		return infos__	};read,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification;private,list,spring,persistence,unit,info,read,persistence,unit,infos,list,spring,persistence,unit,info,infos,new,linked,list,string,default,name,this,default,persistence,unit,name,boolean,build,default,unit,this,packages,to,scan,null,this,mapping,resources,null,boolean,found,default,unit,false,persistence,unit,reader,reader,new,persistence,unit,reader,this,resource,pattern,resolver,this,data,source,lookup,spring,persistence,unit,info,read,infos,reader,read,persistence,unit,infos,this,persistence,xml,locations,for,spring,persistence,unit,info,read,info,read,infos,infos,add,read,info,if,default,name,null,default,name,equals,read,info,get,persistence,unit,name,found,default,unit,true,if,build,default,unit,if,found,default,unit,if,logger,is,info,enabled,logger,info,found,explicit,default,unit,with,name,default,name,in,persistence,xml,overriding,local,default,unit,settings,packages,to,scan,mapping,resources,else,infos,add,build,default,persistence,unit,info,return,infos
DefaultPersistenceUnitManager -> private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos();1471464767;Read all persistence unit infos from {@code persistence.xml},_as defined in the JPA specification.;private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos() {_		List<SpringPersistenceUnitInfo> infos = new LinkedList<>()__		String defaultName = this.defaultPersistenceUnitName__		boolean buildDefaultUnit = (this.packagesToScan != null || this.mappingResources != null)__		boolean foundDefaultUnit = false___		PersistenceUnitReader reader = new PersistenceUnitReader(this.resourcePatternResolver, this.dataSourceLookup)__		SpringPersistenceUnitInfo[] readInfos = reader.readPersistenceUnitInfos(this.persistenceXmlLocations)__		for (SpringPersistenceUnitInfo readInfo : readInfos) {_			infos.add(readInfo)__			if (defaultName != null && defaultName.equals(readInfo.getPersistenceUnitName())) {_				foundDefaultUnit = true__			}_		}__		if (buildDefaultUnit) {_			if (foundDefaultUnit) {_				if (logger.isInfoEnabled()) {_					logger.info("Found explicit default unit with name '" + defaultName + "' in persistence.xml - " +_							"overriding local default unit settings ('packagesToScan'/'mappingResources')")__				}_			}_			else {_				infos.add(buildDefaultPersistenceUnitInfo())__			}_		}_		return infos__	};read,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification;private,list,spring,persistence,unit,info,read,persistence,unit,infos,list,spring,persistence,unit,info,infos,new,linked,list,string,default,name,this,default,persistence,unit,name,boolean,build,default,unit,this,packages,to,scan,null,this,mapping,resources,null,boolean,found,default,unit,false,persistence,unit,reader,reader,new,persistence,unit,reader,this,resource,pattern,resolver,this,data,source,lookup,spring,persistence,unit,info,read,infos,reader,read,persistence,unit,infos,this,persistence,xml,locations,for,spring,persistence,unit,info,read,info,read,infos,infos,add,read,info,if,default,name,null,default,name,equals,read,info,get,persistence,unit,name,found,default,unit,true,if,build,default,unit,if,found,default,unit,if,logger,is,info,enabled,logger,info,found,explicit,default,unit,with,name,default,name,in,persistence,xml,overriding,local,default,unit,settings,packages,to,scan,mapping,resources,else,infos,add,build,default,persistence,unit,info,return,infos
DefaultPersistenceUnitManager -> private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos();1472736647;Read all persistence unit infos from {@code persistence.xml},_as defined in the JPA specification.;private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos() {_		List<SpringPersistenceUnitInfo> infos = new LinkedList<>()__		String defaultName = this.defaultPersistenceUnitName__		boolean buildDefaultUnit = (this.packagesToScan != null || this.mappingResources != null)__		boolean foundDefaultUnit = false___		PersistenceUnitReader reader = new PersistenceUnitReader(this.resourcePatternResolver, this.dataSourceLookup)__		SpringPersistenceUnitInfo[] readInfos = reader.readPersistenceUnitInfos(this.persistenceXmlLocations)__		for (SpringPersistenceUnitInfo readInfo : readInfos) {_			infos.add(readInfo)__			if (defaultName != null && defaultName.equals(readInfo.getPersistenceUnitName())) {_				foundDefaultUnit = true__			}_		}__		if (buildDefaultUnit) {_			if (foundDefaultUnit) {_				if (logger.isInfoEnabled()) {_					logger.info("Found explicit default unit with name '" + defaultName + "' in persistence.xml - " +_							"overriding local default unit settings ('packagesToScan'/'mappingResources')")__				}_			}_			else {_				infos.add(buildDefaultPersistenceUnitInfo())__			}_		}_		return infos__	};read,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification;private,list,spring,persistence,unit,info,read,persistence,unit,infos,list,spring,persistence,unit,info,infos,new,linked,list,string,default,name,this,default,persistence,unit,name,boolean,build,default,unit,this,packages,to,scan,null,this,mapping,resources,null,boolean,found,default,unit,false,persistence,unit,reader,reader,new,persistence,unit,reader,this,resource,pattern,resolver,this,data,source,lookup,spring,persistence,unit,info,read,infos,reader,read,persistence,unit,infos,this,persistence,xml,locations,for,spring,persistence,unit,info,read,info,read,infos,infos,add,read,info,if,default,name,null,default,name,equals,read,info,get,persistence,unit,name,found,default,unit,true,if,build,default,unit,if,found,default,unit,if,logger,is,info,enabled,logger,info,found,explicit,default,unit,with,name,default,name,in,persistence,xml,overriding,local,default,unit,settings,packages,to,scan,mapping,resources,else,infos,add,build,default,persistence,unit,info,return,infos
DefaultPersistenceUnitManager -> private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos();1474895745;Read all persistence unit infos from {@code persistence.xml},_as defined in the JPA specification.;private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos() {_		List<SpringPersistenceUnitInfo> infos = new LinkedList<>()__		String defaultName = this.defaultPersistenceUnitName__		boolean buildDefaultUnit = (this.packagesToScan != null || this.mappingResources != null)__		boolean foundDefaultUnit = false___		PersistenceUnitReader reader = new PersistenceUnitReader(this.resourcePatternResolver, this.dataSourceLookup)__		SpringPersistenceUnitInfo[] readInfos = reader.readPersistenceUnitInfos(this.persistenceXmlLocations)__		for (SpringPersistenceUnitInfo readInfo : readInfos) {_			infos.add(readInfo)__			if (defaultName != null && defaultName.equals(readInfo.getPersistenceUnitName())) {_				foundDefaultUnit = true__			}_		}__		if (buildDefaultUnit) {_			if (foundDefaultUnit) {_				if (logger.isInfoEnabled()) {_					logger.info("Found explicit default unit with name '" + defaultName + "' in persistence.xml - " +_							"overriding local default unit settings ('packagesToScan'/'mappingResources')")__				}_			}_			else {_				infos.add(buildDefaultPersistenceUnitInfo())__			}_		}_		return infos__	};read,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification;private,list,spring,persistence,unit,info,read,persistence,unit,infos,list,spring,persistence,unit,info,infos,new,linked,list,string,default,name,this,default,persistence,unit,name,boolean,build,default,unit,this,packages,to,scan,null,this,mapping,resources,null,boolean,found,default,unit,false,persistence,unit,reader,reader,new,persistence,unit,reader,this,resource,pattern,resolver,this,data,source,lookup,spring,persistence,unit,info,read,infos,reader,read,persistence,unit,infos,this,persistence,xml,locations,for,spring,persistence,unit,info,read,info,read,infos,infos,add,read,info,if,default,name,null,default,name,equals,read,info,get,persistence,unit,name,found,default,unit,true,if,build,default,unit,if,found,default,unit,if,logger,is,info,enabled,logger,info,found,explicit,default,unit,with,name,default,name,in,persistence,xml,overriding,local,default,unit,settings,packages,to,scan,mapping,resources,else,infos,add,build,default,persistence,unit,info,return,infos
DefaultPersistenceUnitManager -> private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos();1495868221;Read all persistence unit infos from {@code persistence.xml},_as defined in the JPA specification.;private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos() {_		List<SpringPersistenceUnitInfo> infos = new LinkedList<>()__		String defaultName = this.defaultPersistenceUnitName__		boolean buildDefaultUnit = (this.packagesToScan != null || this.mappingResources != null)__		boolean foundDefaultUnit = false___		PersistenceUnitReader reader = new PersistenceUnitReader(this.resourcePatternResolver, this.dataSourceLookup)__		SpringPersistenceUnitInfo[] readInfos = reader.readPersistenceUnitInfos(this.persistenceXmlLocations)__		for (SpringPersistenceUnitInfo readInfo : readInfos) {_			infos.add(readInfo)__			if (defaultName != null && defaultName.equals(readInfo.getPersistenceUnitName())) {_				foundDefaultUnit = true__			}_		}__		if (buildDefaultUnit) {_			if (foundDefaultUnit) {_				if (logger.isInfoEnabled()) {_					logger.info("Found explicit default unit with name '" + defaultName + "' in persistence.xml - " +_							"overriding local default unit settings ('packagesToScan'/'mappingResources')")__				}_			}_			else {_				infos.add(buildDefaultPersistenceUnitInfo())__			}_		}_		return infos__	};read,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification;private,list,spring,persistence,unit,info,read,persistence,unit,infos,list,spring,persistence,unit,info,infos,new,linked,list,string,default,name,this,default,persistence,unit,name,boolean,build,default,unit,this,packages,to,scan,null,this,mapping,resources,null,boolean,found,default,unit,false,persistence,unit,reader,reader,new,persistence,unit,reader,this,resource,pattern,resolver,this,data,source,lookup,spring,persistence,unit,info,read,infos,reader,read,persistence,unit,infos,this,persistence,xml,locations,for,spring,persistence,unit,info,read,info,read,infos,infos,add,read,info,if,default,name,null,default,name,equals,read,info,get,persistence,unit,name,found,default,unit,true,if,build,default,unit,if,found,default,unit,if,logger,is,info,enabled,logger,info,found,explicit,default,unit,with,name,default,name,in,persistence,xml,overriding,local,default,unit,settings,packages,to,scan,mapping,resources,else,infos,add,build,default,persistence,unit,info,return,infos
DefaultPersistenceUnitManager -> private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos();1496259743;Read all persistence unit infos from {@code persistence.xml},_as defined in the JPA specification.;private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos() {_		List<SpringPersistenceUnitInfo> infos = new LinkedList<>()__		String defaultName = this.defaultPersistenceUnitName__		boolean buildDefaultUnit = (this.packagesToScan != null || this.mappingResources != null)__		boolean foundDefaultUnit = false___		PersistenceUnitReader reader = new PersistenceUnitReader(this.resourcePatternResolver, this.dataSourceLookup)__		SpringPersistenceUnitInfo[] readInfos = reader.readPersistenceUnitInfos(this.persistenceXmlLocations)__		for (SpringPersistenceUnitInfo readInfo : readInfos) {_			infos.add(readInfo)__			if (defaultName != null && defaultName.equals(readInfo.getPersistenceUnitName())) {_				foundDefaultUnit = true__			}_		}__		if (buildDefaultUnit) {_			if (foundDefaultUnit) {_				if (logger.isInfoEnabled()) {_					logger.info("Found explicit default unit with name '" + defaultName + "' in persistence.xml - " +_							"overriding local default unit settings ('packagesToScan'/'mappingResources')")__				}_			}_			else {_				infos.add(buildDefaultPersistenceUnitInfo())__			}_		}_		return infos__	};read,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification;private,list,spring,persistence,unit,info,read,persistence,unit,infos,list,spring,persistence,unit,info,infos,new,linked,list,string,default,name,this,default,persistence,unit,name,boolean,build,default,unit,this,packages,to,scan,null,this,mapping,resources,null,boolean,found,default,unit,false,persistence,unit,reader,reader,new,persistence,unit,reader,this,resource,pattern,resolver,this,data,source,lookup,spring,persistence,unit,info,read,infos,reader,read,persistence,unit,infos,this,persistence,xml,locations,for,spring,persistence,unit,info,read,info,read,infos,infos,add,read,info,if,default,name,null,default,name,equals,read,info,get,persistence,unit,name,found,default,unit,true,if,build,default,unit,if,found,default,unit,if,logger,is,info,enabled,logger,info,found,explicit,default,unit,with,name,default,name,in,persistence,xml,overriding,local,default,unit,settings,packages,to,scan,mapping,resources,else,infos,add,build,default,persistence,unit,info,return,infos
DefaultPersistenceUnitManager -> private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos();1496837955;Read all persistence unit infos from {@code persistence.xml},_as defined in the JPA specification.;private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos() {_		List<SpringPersistenceUnitInfo> infos = new LinkedList<>()__		String defaultName = this.defaultPersistenceUnitName__		boolean buildDefaultUnit = (this.packagesToScan != null || this.mappingResources != null)__		boolean foundDefaultUnit = false___		PersistenceUnitReader reader = new PersistenceUnitReader(this.resourcePatternResolver, this.dataSourceLookup)__		SpringPersistenceUnitInfo[] readInfos = reader.readPersistenceUnitInfos(this.persistenceXmlLocations)__		for (SpringPersistenceUnitInfo readInfo : readInfos) {_			infos.add(readInfo)__			if (defaultName != null && defaultName.equals(readInfo.getPersistenceUnitName())) {_				foundDefaultUnit = true__			}_		}__		if (buildDefaultUnit) {_			if (foundDefaultUnit) {_				if (logger.isInfoEnabled()) {_					logger.info("Found explicit default unit with name '" + defaultName + "' in persistence.xml - " +_							"overriding local default unit settings ('packagesToScan'/'mappingResources')")__				}_			}_			else {_				infos.add(buildDefaultPersistenceUnitInfo())__			}_		}_		return infos__	};read,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification;private,list,spring,persistence,unit,info,read,persistence,unit,infos,list,spring,persistence,unit,info,infos,new,linked,list,string,default,name,this,default,persistence,unit,name,boolean,build,default,unit,this,packages,to,scan,null,this,mapping,resources,null,boolean,found,default,unit,false,persistence,unit,reader,reader,new,persistence,unit,reader,this,resource,pattern,resolver,this,data,source,lookup,spring,persistence,unit,info,read,infos,reader,read,persistence,unit,infos,this,persistence,xml,locations,for,spring,persistence,unit,info,read,info,read,infos,infos,add,read,info,if,default,name,null,default,name,equals,read,info,get,persistence,unit,name,found,default,unit,true,if,build,default,unit,if,found,default,unit,if,logger,is,info,enabled,logger,info,found,explicit,default,unit,with,name,default,name,in,persistence,xml,overriding,local,default,unit,settings,packages,to,scan,mapping,resources,else,infos,add,build,default,persistence,unit,info,return,infos
DefaultPersistenceUnitManager -> private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos();1498780456;Read all persistence unit infos from {@code persistence.xml},_as defined in the JPA specification.;private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos() {_		List<SpringPersistenceUnitInfo> infos = new LinkedList<>()__		String defaultName = this.defaultPersistenceUnitName__		boolean buildDefaultUnit = (this.packagesToScan != null || this.mappingResources != null)__		boolean foundDefaultUnit = false___		PersistenceUnitReader reader = new PersistenceUnitReader(this.resourcePatternResolver, this.dataSourceLookup)__		SpringPersistenceUnitInfo[] readInfos = reader.readPersistenceUnitInfos(this.persistenceXmlLocations)__		for (SpringPersistenceUnitInfo readInfo : readInfos) {_			infos.add(readInfo)__			if (defaultName != null && defaultName.equals(readInfo.getPersistenceUnitName())) {_				foundDefaultUnit = true__			}_		}__		if (buildDefaultUnit) {_			if (foundDefaultUnit) {_				if (logger.isInfoEnabled()) {_					logger.info("Found explicit default unit with name '" + defaultName + "' in persistence.xml - " +_							"overriding local default unit settings ('packagesToScan'/'mappingResources')")__				}_			}_			else {_				infos.add(buildDefaultPersistenceUnitInfo())__			}_		}_		return infos__	};read,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification;private,list,spring,persistence,unit,info,read,persistence,unit,infos,list,spring,persistence,unit,info,infos,new,linked,list,string,default,name,this,default,persistence,unit,name,boolean,build,default,unit,this,packages,to,scan,null,this,mapping,resources,null,boolean,found,default,unit,false,persistence,unit,reader,reader,new,persistence,unit,reader,this,resource,pattern,resolver,this,data,source,lookup,spring,persistence,unit,info,read,infos,reader,read,persistence,unit,infos,this,persistence,xml,locations,for,spring,persistence,unit,info,read,info,read,infos,infos,add,read,info,if,default,name,null,default,name,equals,read,info,get,persistence,unit,name,found,default,unit,true,if,build,default,unit,if,found,default,unit,if,logger,is,info,enabled,logger,info,found,explicit,default,unit,with,name,default,name,in,persistence,xml,overriding,local,default,unit,settings,packages,to,scan,mapping,resources,else,infos,add,build,default,persistence,unit,info,return,infos
DefaultPersistenceUnitManager -> private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos();1500448076;Read all persistence unit infos from {@code persistence.xml},_as defined in the JPA specification.;private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos() {_		List<SpringPersistenceUnitInfo> infos = new LinkedList<>()__		String defaultName = this.defaultPersistenceUnitName__		boolean buildDefaultUnit = (this.packagesToScan != null || this.mappingResources != null)__		boolean foundDefaultUnit = false___		PersistenceUnitReader reader = new PersistenceUnitReader(this.resourcePatternResolver, this.dataSourceLookup)__		SpringPersistenceUnitInfo[] readInfos = reader.readPersistenceUnitInfos(this.persistenceXmlLocations)__		for (SpringPersistenceUnitInfo readInfo : readInfos) {_			infos.add(readInfo)__			if (defaultName != null && defaultName.equals(readInfo.getPersistenceUnitName())) {_				foundDefaultUnit = true__			}_		}__		if (buildDefaultUnit) {_			if (foundDefaultUnit) {_				if (logger.isInfoEnabled()) {_					logger.info("Found explicit default unit with name '" + defaultName + "' in persistence.xml - " +_							"overriding local default unit settings ('packagesToScan'/'mappingResources')")__				}_			}_			else {_				infos.add(buildDefaultPersistenceUnitInfo())__			}_		}_		return infos__	};read,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification;private,list,spring,persistence,unit,info,read,persistence,unit,infos,list,spring,persistence,unit,info,infos,new,linked,list,string,default,name,this,default,persistence,unit,name,boolean,build,default,unit,this,packages,to,scan,null,this,mapping,resources,null,boolean,found,default,unit,false,persistence,unit,reader,reader,new,persistence,unit,reader,this,resource,pattern,resolver,this,data,source,lookup,spring,persistence,unit,info,read,infos,reader,read,persistence,unit,infos,this,persistence,xml,locations,for,spring,persistence,unit,info,read,info,read,infos,infos,add,read,info,if,default,name,null,default,name,equals,read,info,get,persistence,unit,name,found,default,unit,true,if,build,default,unit,if,found,default,unit,if,logger,is,info,enabled,logger,info,found,explicit,default,unit,with,name,default,name,in,persistence,xml,overriding,local,default,unit,settings,packages,to,scan,mapping,resources,else,infos,add,build,default,persistence,unit,info,return,infos
DefaultPersistenceUnitManager -> private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos();1520528267;Read all persistence unit infos from {@code persistence.xml},_as defined in the JPA specification.;private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos() {_		List<SpringPersistenceUnitInfo> infos = new LinkedList<>()__		String defaultName = this.defaultPersistenceUnitName__		boolean buildDefaultUnit = (this.packagesToScan != null || this.mappingResources != null)__		boolean foundDefaultUnit = false___		PersistenceUnitReader reader = new PersistenceUnitReader(this.resourcePatternResolver, this.dataSourceLookup)__		SpringPersistenceUnitInfo[] readInfos = reader.readPersistenceUnitInfos(this.persistenceXmlLocations)__		for (SpringPersistenceUnitInfo readInfo : readInfos) {_			infos.add(readInfo)__			if (defaultName != null && defaultName.equals(readInfo.getPersistenceUnitName())) {_				foundDefaultUnit = true__			}_		}__		if (buildDefaultUnit) {_			if (foundDefaultUnit) {_				if (logger.isInfoEnabled()) {_					logger.info("Found explicit default unit with name '" + defaultName + "' in persistence.xml - " +_							"overriding local default unit settings ('packagesToScan'/'mappingResources')")__				}_			}_			else {_				infos.add(buildDefaultPersistenceUnitInfo())__			}_		}_		return infos__	};read,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification;private,list,spring,persistence,unit,info,read,persistence,unit,infos,list,spring,persistence,unit,info,infos,new,linked,list,string,default,name,this,default,persistence,unit,name,boolean,build,default,unit,this,packages,to,scan,null,this,mapping,resources,null,boolean,found,default,unit,false,persistence,unit,reader,reader,new,persistence,unit,reader,this,resource,pattern,resolver,this,data,source,lookup,spring,persistence,unit,info,read,infos,reader,read,persistence,unit,infos,this,persistence,xml,locations,for,spring,persistence,unit,info,read,info,read,infos,infos,add,read,info,if,default,name,null,default,name,equals,read,info,get,persistence,unit,name,found,default,unit,true,if,build,default,unit,if,found,default,unit,if,logger,is,info,enabled,logger,info,found,explicit,default,unit,with,name,default,name,in,persistence,xml,overriding,local,default,unit,settings,packages,to,scan,mapping,resources,else,infos,add,build,default,persistence,unit,info,return,infos
DefaultPersistenceUnitManager -> private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos();1528313484;Read all persistence unit infos from {@code persistence.xml},_as defined in the JPA specification.;private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos() {_		List<SpringPersistenceUnitInfo> infos = new LinkedList<>()__		String defaultName = this.defaultPersistenceUnitName__		boolean buildDefaultUnit = (this.packagesToScan != null || this.mappingResources != null)__		boolean foundDefaultUnit = false___		PersistenceUnitReader reader = new PersistenceUnitReader(this.resourcePatternResolver, this.dataSourceLookup)__		SpringPersistenceUnitInfo[] readInfos = reader.readPersistenceUnitInfos(this.persistenceXmlLocations)__		for (SpringPersistenceUnitInfo readInfo : readInfos) {_			infos.add(readInfo)__			if (defaultName != null && defaultName.equals(readInfo.getPersistenceUnitName())) {_				foundDefaultUnit = true__			}_		}__		if (buildDefaultUnit) {_			if (foundDefaultUnit) {_				if (logger.isInfoEnabled()) {_					logger.info("Found explicit default unit with name '" + defaultName + "' in persistence.xml - " +_							"overriding local default unit settings ('packagesToScan'/'mappingResources')")__				}_			}_			else {_				infos.add(buildDefaultPersistenceUnitInfo())__			}_		}_		return infos__	};read,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification;private,list,spring,persistence,unit,info,read,persistence,unit,infos,list,spring,persistence,unit,info,infos,new,linked,list,string,default,name,this,default,persistence,unit,name,boolean,build,default,unit,this,packages,to,scan,null,this,mapping,resources,null,boolean,found,default,unit,false,persistence,unit,reader,reader,new,persistence,unit,reader,this,resource,pattern,resolver,this,data,source,lookup,spring,persistence,unit,info,read,infos,reader,read,persistence,unit,infos,this,persistence,xml,locations,for,spring,persistence,unit,info,read,info,read,infos,infos,add,read,info,if,default,name,null,default,name,equals,read,info,get,persistence,unit,name,found,default,unit,true,if,build,default,unit,if,found,default,unit,if,logger,is,info,enabled,logger,info,found,explicit,default,unit,with,name,default,name,in,persistence,xml,overriding,local,default,unit,settings,packages,to,scan,mapping,resources,else,infos,add,build,default,persistence,unit,info,return,infos
DefaultPersistenceUnitManager -> private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos();1530174524;Read all persistence unit infos from {@code persistence.xml},_as defined in the JPA specification.;private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos() {_		List<SpringPersistenceUnitInfo> infos = new LinkedList<>()__		String defaultName = this.defaultPersistenceUnitName__		boolean buildDefaultUnit = (this.packagesToScan != null || this.mappingResources != null)__		boolean foundDefaultUnit = false___		PersistenceUnitReader reader = new PersistenceUnitReader(this.resourcePatternResolver, this.dataSourceLookup)__		SpringPersistenceUnitInfo[] readInfos = reader.readPersistenceUnitInfos(this.persistenceXmlLocations)__		for (SpringPersistenceUnitInfo readInfo : readInfos) {_			infos.add(readInfo)__			if (defaultName != null && defaultName.equals(readInfo.getPersistenceUnitName())) {_				foundDefaultUnit = true__			}_		}__		if (buildDefaultUnit) {_			if (foundDefaultUnit) {_				if (logger.isInfoEnabled()) {_					logger.info("Found explicit default unit with name '" + defaultName + "' in persistence.xml - " +_							"overriding local default unit settings ('packagesToScan'/'mappingResources')")__				}_			}_			else {_				infos.add(buildDefaultPersistenceUnitInfo())__			}_		}_		return infos__	};read,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification;private,list,spring,persistence,unit,info,read,persistence,unit,infos,list,spring,persistence,unit,info,infos,new,linked,list,string,default,name,this,default,persistence,unit,name,boolean,build,default,unit,this,packages,to,scan,null,this,mapping,resources,null,boolean,found,default,unit,false,persistence,unit,reader,reader,new,persistence,unit,reader,this,resource,pattern,resolver,this,data,source,lookup,spring,persistence,unit,info,read,infos,reader,read,persistence,unit,infos,this,persistence,xml,locations,for,spring,persistence,unit,info,read,info,read,infos,infos,add,read,info,if,default,name,null,default,name,equals,read,info,get,persistence,unit,name,found,default,unit,true,if,build,default,unit,if,found,default,unit,if,logger,is,info,enabled,logger,info,found,explicit,default,unit,with,name,default,name,in,persistence,xml,overriding,local,default,unit,settings,packages,to,scan,mapping,resources,else,infos,add,build,default,persistence,unit,info,return,infos
DefaultPersistenceUnitManager -> private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos();1532091916;Read all persistence unit infos from {@code persistence.xml},_as defined in the JPA specification.;private List<SpringPersistenceUnitInfo> readPersistenceUnitInfos() {_		List<SpringPersistenceUnitInfo> infos = new LinkedList<>()__		String defaultName = this.defaultPersistenceUnitName__		boolean buildDefaultUnit = (this.packagesToScan != null || this.mappingResources != null)__		boolean foundDefaultUnit = false___		PersistenceUnitReader reader = new PersistenceUnitReader(this.resourcePatternResolver, this.dataSourceLookup)__		SpringPersistenceUnitInfo[] readInfos = reader.readPersistenceUnitInfos(this.persistenceXmlLocations)__		for (SpringPersistenceUnitInfo readInfo : readInfos) {_			infos.add(readInfo)__			if (defaultName != null && defaultName.equals(readInfo.getPersistenceUnitName())) {_				foundDefaultUnit = true__			}_		}__		if (buildDefaultUnit) {_			if (foundDefaultUnit) {_				if (logger.isDebugEnabled()) {_					logger.debug("Found explicit default unit with name '" + defaultName + "' in persistence.xml - " +_							"overriding local default unit settings ('packagesToScan'/'mappingResources')")__				}_			}_			else {_				infos.add(buildDefaultPersistenceUnitInfo())__			}_		}_		return infos__	};read,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification;private,list,spring,persistence,unit,info,read,persistence,unit,infos,list,spring,persistence,unit,info,infos,new,linked,list,string,default,name,this,default,persistence,unit,name,boolean,build,default,unit,this,packages,to,scan,null,this,mapping,resources,null,boolean,found,default,unit,false,persistence,unit,reader,reader,new,persistence,unit,reader,this,resource,pattern,resolver,this,data,source,lookup,spring,persistence,unit,info,read,infos,reader,read,persistence,unit,infos,this,persistence,xml,locations,for,spring,persistence,unit,info,read,info,read,infos,infos,add,read,info,if,default,name,null,default,name,equals,read,info,get,persistence,unit,name,found,default,unit,true,if,build,default,unit,if,found,default,unit,if,logger,is,debug,enabled,logger,debug,found,explicit,default,unit,with,name,default,name,in,persistence,xml,overriding,local,default,unit,settings,packages,to,scan,mapping,resources,else,infos,add,build,default,persistence,unit,info,return,infos
DefaultPersistenceUnitManager -> private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo();1328020251;Perform Spring-based scanning for entity classes._@see #setPackagesToScan;private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() {_		SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()__		scannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName)__		scannedUnit.setExcludeUnlistedClasses(true)__		if (this.packagesToScan != null) {_			for (String pkg : this.packagesToScan) {_				try {_					String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +_							ClassUtils.convertClassNameToResourcePath(pkg) + ENTITY_CLASS_RESOURCE_PATTERN__					Resource[] resources = this.resourcePatternResolver.getResources(pattern)__					MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)__					for (Resource resource : resources) {_						if (resource.isReadable()) {_							MetadataReader reader = readerFactory.getMetadataReader(resource)__							String className = reader.getClassMetadata().getClassName()__							if (matchesFilter(reader, readerFactory)) {_								scannedUnit.addManagedClassName(className)__							}_						}_					}_				}_				catch (IOException ex) {_					throw new PersistenceException("Failed to scan classpath for unlisted classes", ex)__				}_			}_		}_		if (this.mappingResources != null) {_			for (String mappingFileName : this.mappingResources) {_				scannedUnit.addMappingFileName(mappingFileName)__			}_		}_		return scannedUnit__	};perform,spring,based,scanning,for,entity,classes,see,set,packages,to,scan;private,spring,persistence,unit,info,build,default,persistence,unit,info,spring,persistence,unit,info,scanned,unit,new,spring,persistence,unit,info,scanned,unit,set,persistence,unit,name,this,default,persistence,unit,name,scanned,unit,set,exclude,unlisted,classes,true,if,this,packages,to,scan,null,for,string,pkg,this,packages,to,scan,try,string,pattern,resource,pattern,resolver,class,utils,convert,class,name,to,resource,path,pkg,resource,resources,this,resource,pattern,resolver,get,resources,pattern,metadata,reader,factory,reader,factory,new,caching,metadata,reader,factory,this,resource,pattern,resolver,for,resource,resource,resources,if,resource,is,readable,metadata,reader,reader,reader,factory,get,metadata,reader,resource,string,class,name,reader,get,class,metadata,get,class,name,if,matches,filter,reader,reader,factory,scanned,unit,add,managed,class,name,class,name,catch,ioexception,ex,throw,new,persistence,exception,failed,to,scan,classpath,for,unlisted,classes,ex,if,this,mapping,resources,null,for,string,mapping,file,name,this,mapping,resources,scanned,unit,add,mapping,file,name,mapping,file,name,return,scanned,unit
DefaultPersistenceUnitManager -> private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo();1329142650;Perform Spring-based scanning for entity classes._@see #setPackagesToScan;private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() {_		SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()__		scannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName)__		scannedUnit.setExcludeUnlistedClasses(true)__		if (this.packagesToScan != null) {_			for (String pkg : this.packagesToScan) {_				try {_					String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +_							ClassUtils.convertClassNameToResourcePath(pkg) + ENTITY_CLASS_RESOURCE_PATTERN__					Resource[] resources = this.resourcePatternResolver.getResources(pattern)__					MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)__					for (Resource resource : resources) {_						if (resource.isReadable()) {_							MetadataReader reader = readerFactory.getMetadataReader(resource)__							String className = reader.getClassMetadata().getClassName()__							if (matchesFilter(reader, readerFactory)) {_								scannedUnit.addManagedClassName(className)__								if (scannedUnit.getPersistenceUnitRootUrl() == null) {_									URL url = resource.getURL()__									if (ResourceUtils.isJarURL(url)) {_										scannedUnit.setPersistenceUnitRootUrl(ResourceUtils.extractJarFileURL(url))__									}_								}_							}_						}_					}_				}_				catch (IOException ex) {_					throw new PersistenceException("Failed to scan classpath for unlisted classes", ex)__				}_			}_		}_		if (this.mappingResources != null) {_			for (String mappingFileName : this.mappingResources) {_				scannedUnit.addMappingFileName(mappingFileName)__			}_		}_		return scannedUnit__	};perform,spring,based,scanning,for,entity,classes,see,set,packages,to,scan;private,spring,persistence,unit,info,build,default,persistence,unit,info,spring,persistence,unit,info,scanned,unit,new,spring,persistence,unit,info,scanned,unit,set,persistence,unit,name,this,default,persistence,unit,name,scanned,unit,set,exclude,unlisted,classes,true,if,this,packages,to,scan,null,for,string,pkg,this,packages,to,scan,try,string,pattern,resource,pattern,resolver,class,utils,convert,class,name,to,resource,path,pkg,resource,resources,this,resource,pattern,resolver,get,resources,pattern,metadata,reader,factory,reader,factory,new,caching,metadata,reader,factory,this,resource,pattern,resolver,for,resource,resource,resources,if,resource,is,readable,metadata,reader,reader,reader,factory,get,metadata,reader,resource,string,class,name,reader,get,class,metadata,get,class,name,if,matches,filter,reader,reader,factory,scanned,unit,add,managed,class,name,class,name,if,scanned,unit,get,persistence,unit,root,url,null,url,url,resource,get,url,if,resource,utils,is,jar,url,url,scanned,unit,set,persistence,unit,root,url,resource,utils,extract,jar,file,url,url,catch,ioexception,ex,throw,new,persistence,exception,failed,to,scan,classpath,for,unlisted,classes,ex,if,this,mapping,resources,null,for,string,mapping,file,name,this,mapping,resources,scanned,unit,add,mapping,file,name,mapping,file,name,return,scanned,unit
DefaultPersistenceUnitManager -> private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo();1347282851;Perform Spring-based scanning for entity classes._@see #setPackagesToScan;private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() {_		SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()__		scannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName)__		scannedUnit.setExcludeUnlistedClasses(true)__		if (this.packagesToScan != null) {_			for (String pkg : this.packagesToScan) {_				try {_					String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +_							ClassUtils.convertClassNameToResourcePath(pkg) + ENTITY_CLASS_RESOURCE_PATTERN__					Resource[] resources = this.resourcePatternResolver.getResources(pattern)__					MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)__					for (Resource resource : resources) {_						if (resource.isReadable()) {_							MetadataReader reader = readerFactory.getMetadataReader(resource)__							String className = reader.getClassMetadata().getClassName()__							if (matchesFilter(reader, readerFactory)) {_								scannedUnit.addManagedClassName(className)__								if (scannedUnit.getPersistenceUnitRootUrl() == null) {_									URL url = resource.getURL()__									if (ResourceUtils.isJarURL(url)) {_										scannedUnit.setPersistenceUnitRootUrl(ResourceUtils.extractJarFileURL(url))__									}_								}_							}_						}_					}_				}_				catch (IOException ex) {_					throw new PersistenceException("Failed to scan classpath for unlisted classes", ex)__				}_			}_		}_		if (this.mappingResources != null) {_			for (String mappingFileName : this.mappingResources) {_				scannedUnit.addMappingFileName(mappingFileName)__			}_		}_		return scannedUnit__	};perform,spring,based,scanning,for,entity,classes,see,set,packages,to,scan;private,spring,persistence,unit,info,build,default,persistence,unit,info,spring,persistence,unit,info,scanned,unit,new,spring,persistence,unit,info,scanned,unit,set,persistence,unit,name,this,default,persistence,unit,name,scanned,unit,set,exclude,unlisted,classes,true,if,this,packages,to,scan,null,for,string,pkg,this,packages,to,scan,try,string,pattern,resource,pattern,resolver,class,utils,convert,class,name,to,resource,path,pkg,resource,resources,this,resource,pattern,resolver,get,resources,pattern,metadata,reader,factory,reader,factory,new,caching,metadata,reader,factory,this,resource,pattern,resolver,for,resource,resource,resources,if,resource,is,readable,metadata,reader,reader,reader,factory,get,metadata,reader,resource,string,class,name,reader,get,class,metadata,get,class,name,if,matches,filter,reader,reader,factory,scanned,unit,add,managed,class,name,class,name,if,scanned,unit,get,persistence,unit,root,url,null,url,url,resource,get,url,if,resource,utils,is,jar,url,url,scanned,unit,set,persistence,unit,root,url,resource,utils,extract,jar,file,url,url,catch,ioexception,ex,throw,new,persistence,exception,failed,to,scan,classpath,for,unlisted,classes,ex,if,this,mapping,resources,null,for,string,mapping,file,name,this,mapping,resources,scanned,unit,add,mapping,file,name,mapping,file,name,return,scanned,unit
DefaultPersistenceUnitManager -> private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo();1351648399;Perform Spring-based scanning for entity classes._@see #setPackagesToScan;private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() {_		SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()__		scannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName)__		scannedUnit.setExcludeUnlistedClasses(true)__		if (this.packagesToScan != null) {_			for (String pkg : this.packagesToScan) {_				try {_					String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +_							ClassUtils.convertClassNameToResourcePath(pkg) + ENTITY_CLASS_RESOURCE_PATTERN__					Resource[] resources = this.resourcePatternResolver.getResources(pattern)__					MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)__					for (Resource resource : resources) {_						if (resource.isReadable()) {_							MetadataReader reader = readerFactory.getMetadataReader(resource)__							String className = reader.getClassMetadata().getClassName()__							if (matchesFilter(reader, readerFactory)) {_								scannedUnit.addManagedClassName(className)__								if (scannedUnit.getPersistenceUnitRootUrl() == null) {_									URL url = resource.getURL()__									if (ResourceUtils.isJarURL(url)) {_										scannedUnit.setPersistenceUnitRootUrl(ResourceUtils.extractJarFileURL(url))__									}_								}_							}_						}_					}_				}_				catch (IOException ex) {_					throw new PersistenceException("Failed to scan classpath for unlisted classes", ex)__				}_			}_		}_		if (this.mappingResources != null) {_			for (String mappingFileName : this.mappingResources) {_				scannedUnit.addMappingFileName(mappingFileName)__			}_		}_		return scannedUnit__	};perform,spring,based,scanning,for,entity,classes,see,set,packages,to,scan;private,spring,persistence,unit,info,build,default,persistence,unit,info,spring,persistence,unit,info,scanned,unit,new,spring,persistence,unit,info,scanned,unit,set,persistence,unit,name,this,default,persistence,unit,name,scanned,unit,set,exclude,unlisted,classes,true,if,this,packages,to,scan,null,for,string,pkg,this,packages,to,scan,try,string,pattern,resource,pattern,resolver,class,utils,convert,class,name,to,resource,path,pkg,resource,resources,this,resource,pattern,resolver,get,resources,pattern,metadata,reader,factory,reader,factory,new,caching,metadata,reader,factory,this,resource,pattern,resolver,for,resource,resource,resources,if,resource,is,readable,metadata,reader,reader,reader,factory,get,metadata,reader,resource,string,class,name,reader,get,class,metadata,get,class,name,if,matches,filter,reader,reader,factory,scanned,unit,add,managed,class,name,class,name,if,scanned,unit,get,persistence,unit,root,url,null,url,url,resource,get,url,if,resource,utils,is,jar,url,url,scanned,unit,set,persistence,unit,root,url,resource,utils,extract,jar,file,url,url,catch,ioexception,ex,throw,new,persistence,exception,failed,to,scan,classpath,for,unlisted,classes,ex,if,this,mapping,resources,null,for,string,mapping,file,name,this,mapping,resources,scanned,unit,add,mapping,file,name,mapping,file,name,return,scanned,unit
DefaultPersistenceUnitManager -> private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo();1356735495;Perform Spring-based scanning for entity classes._@see #setPackagesToScan;private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() {_		SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()__		scannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName)__		scannedUnit.setExcludeUnlistedClasses(true)__		if (this.packagesToScan != null) {_			for (String pkg : this.packagesToScan) {_				try {_					String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +_							ClassUtils.convertClassNameToResourcePath(pkg) + ENTITY_CLASS_RESOURCE_PATTERN__					Resource[] resources = this.resourcePatternResolver.getResources(pattern)__					MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)__					for (Resource resource : resources) {_						if (resource.isReadable()) {_							MetadataReader reader = readerFactory.getMetadataReader(resource)__							String className = reader.getClassMetadata().getClassName()__							if (matchesFilter(reader, readerFactory)) {_								scannedUnit.addManagedClassName(className)__								if (scannedUnit.getPersistenceUnitRootUrl() == null) {_									URL url = resource.getURL()__									if (ResourceUtils.isJarURL(url)) {_										scannedUnit.setPersistenceUnitRootUrl(ResourceUtils.extractJarFileURL(url))__									}_								}_							}_						}_					}_				}_				catch (IOException ex) {_					throw new PersistenceException("Failed to scan classpath for unlisted classes", ex)__				}_			}_		}_		if (this.mappingResources != null) {_			for (String mappingFileName : this.mappingResources) {_				scannedUnit.addMappingFileName(mappingFileName)__			}_		}_		return scannedUnit__	};perform,spring,based,scanning,for,entity,classes,see,set,packages,to,scan;private,spring,persistence,unit,info,build,default,persistence,unit,info,spring,persistence,unit,info,scanned,unit,new,spring,persistence,unit,info,scanned,unit,set,persistence,unit,name,this,default,persistence,unit,name,scanned,unit,set,exclude,unlisted,classes,true,if,this,packages,to,scan,null,for,string,pkg,this,packages,to,scan,try,string,pattern,resource,pattern,resolver,class,utils,convert,class,name,to,resource,path,pkg,resource,resources,this,resource,pattern,resolver,get,resources,pattern,metadata,reader,factory,reader,factory,new,caching,metadata,reader,factory,this,resource,pattern,resolver,for,resource,resource,resources,if,resource,is,readable,metadata,reader,reader,reader,factory,get,metadata,reader,resource,string,class,name,reader,get,class,metadata,get,class,name,if,matches,filter,reader,reader,factory,scanned,unit,add,managed,class,name,class,name,if,scanned,unit,get,persistence,unit,root,url,null,url,url,resource,get,url,if,resource,utils,is,jar,url,url,scanned,unit,set,persistence,unit,root,url,resource,utils,extract,jar,file,url,url,catch,ioexception,ex,throw,new,persistence,exception,failed,to,scan,classpath,for,unlisted,classes,ex,if,this,mapping,resources,null,for,string,mapping,file,name,this,mapping,resources,scanned,unit,add,mapping,file,name,mapping,file,name,return,scanned,unit
DefaultPersistenceUnitManager -> private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo();1357119239;Perform Spring-based scanning for entity classes._@see #setPackagesToScan;private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() {_		SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()__		scannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName)__		scannedUnit.setExcludeUnlistedClasses(true)__		if (this.packagesToScan != null) {_			for (String pkg : this.packagesToScan) {_				try {_					String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +_							ClassUtils.convertClassNameToResourcePath(pkg) + ENTITY_CLASS_RESOURCE_PATTERN__					Resource[] resources = this.resourcePatternResolver.getResources(pattern)__					MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)__					for (Resource resource : resources) {_						if (resource.isReadable()) {_							MetadataReader reader = readerFactory.getMetadataReader(resource)__							String className = reader.getClassMetadata().getClassName()__							if (matchesFilter(reader, readerFactory)) {_								scannedUnit.addManagedClassName(className)__								if (scannedUnit.getPersistenceUnitRootUrl() == null) {_									URL url = resource.getURL()__									if (ResourceUtils.isJarURL(url)) {_										scannedUnit.setPersistenceUnitRootUrl(ResourceUtils.extractJarFileURL(url))__									}_								}_							}_						}_					}_				}_				catch (IOException ex) {_					throw new PersistenceException("Failed to scan classpath for unlisted classes", ex)__				}_			}_		}_		if (this.mappingResources != null) {_			for (String mappingFileName : this.mappingResources) {_				scannedUnit.addMappingFileName(mappingFileName)__			}_		}_		return scannedUnit__	};perform,spring,based,scanning,for,entity,classes,see,set,packages,to,scan;private,spring,persistence,unit,info,build,default,persistence,unit,info,spring,persistence,unit,info,scanned,unit,new,spring,persistence,unit,info,scanned,unit,set,persistence,unit,name,this,default,persistence,unit,name,scanned,unit,set,exclude,unlisted,classes,true,if,this,packages,to,scan,null,for,string,pkg,this,packages,to,scan,try,string,pattern,resource,pattern,resolver,class,utils,convert,class,name,to,resource,path,pkg,resource,resources,this,resource,pattern,resolver,get,resources,pattern,metadata,reader,factory,reader,factory,new,caching,metadata,reader,factory,this,resource,pattern,resolver,for,resource,resource,resources,if,resource,is,readable,metadata,reader,reader,reader,factory,get,metadata,reader,resource,string,class,name,reader,get,class,metadata,get,class,name,if,matches,filter,reader,reader,factory,scanned,unit,add,managed,class,name,class,name,if,scanned,unit,get,persistence,unit,root,url,null,url,url,resource,get,url,if,resource,utils,is,jar,url,url,scanned,unit,set,persistence,unit,root,url,resource,utils,extract,jar,file,url,url,catch,ioexception,ex,throw,new,persistence,exception,failed,to,scan,classpath,for,unlisted,classes,ex,if,this,mapping,resources,null,for,string,mapping,file,name,this,mapping,resources,scanned,unit,add,mapping,file,name,mapping,file,name,return,scanned,unit
DefaultPersistenceUnitManager -> private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo();1363714444;Perform Spring-based scanning for entity classes._@see #setPackagesToScan;private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() {_		SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()__		scannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName)__		scannedUnit.setExcludeUnlistedClasses(true)__		if (this.packagesToScan != null) {_			for (String pkg : this.packagesToScan) {_				try {_					String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +_							ClassUtils.convertClassNameToResourcePath(pkg) + ENTITY_CLASS_RESOURCE_PATTERN__					Resource[] resources = this.resourcePatternResolver.getResources(pattern)__					MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)__					for (Resource resource : resources) {_						if (resource.isReadable()) {_							MetadataReader reader = readerFactory.getMetadataReader(resource)__							String className = reader.getClassMetadata().getClassName()__							if (matchesFilter(reader, readerFactory)) {_								scannedUnit.addManagedClassName(className)__								if (scannedUnit.getPersistenceUnitRootUrl() == null) {_									URL url = resource.getURL()__									if (ResourceUtils.isJarURL(url)) {_										scannedUnit.setPersistenceUnitRootUrl(ResourceUtils.extractJarFileURL(url))__									}_								}_							}_						}_					}_				}_				catch (IOException ex) {_					throw new PersistenceException("Failed to scan classpath for unlisted classes", ex)__				}_			}_		}_		if (this.mappingResources != null) {_			for (String mappingFileName : this.mappingResources) {_				scannedUnit.addMappingFileName(mappingFileName)__			}_		}_		return scannedUnit__	};perform,spring,based,scanning,for,entity,classes,see,set,packages,to,scan;private,spring,persistence,unit,info,build,default,persistence,unit,info,spring,persistence,unit,info,scanned,unit,new,spring,persistence,unit,info,scanned,unit,set,persistence,unit,name,this,default,persistence,unit,name,scanned,unit,set,exclude,unlisted,classes,true,if,this,packages,to,scan,null,for,string,pkg,this,packages,to,scan,try,string,pattern,resource,pattern,resolver,class,utils,convert,class,name,to,resource,path,pkg,resource,resources,this,resource,pattern,resolver,get,resources,pattern,metadata,reader,factory,reader,factory,new,caching,metadata,reader,factory,this,resource,pattern,resolver,for,resource,resource,resources,if,resource,is,readable,metadata,reader,reader,reader,factory,get,metadata,reader,resource,string,class,name,reader,get,class,metadata,get,class,name,if,matches,filter,reader,reader,factory,scanned,unit,add,managed,class,name,class,name,if,scanned,unit,get,persistence,unit,root,url,null,url,url,resource,get,url,if,resource,utils,is,jar,url,url,scanned,unit,set,persistence,unit,root,url,resource,utils,extract,jar,file,url,url,catch,ioexception,ex,throw,new,persistence,exception,failed,to,scan,classpath,for,unlisted,classes,ex,if,this,mapping,resources,null,for,string,mapping,file,name,this,mapping,resources,scanned,unit,add,mapping,file,name,mapping,file,name,return,scanned,unit
DefaultPersistenceUnitManager -> private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo();1368482696;Perform Spring-based scanning for entity classes._@see #setPackagesToScan;private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() {_		SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()__		scannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName)__		scannedUnit.setExcludeUnlistedClasses(true)__		if (this.packagesToScan != null) {_			for (String pkg : this.packagesToScan) {_				try {_					String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +_							ClassUtils.convertClassNameToResourcePath(pkg) + ENTITY_CLASS_RESOURCE_PATTERN__					Resource[] resources = this.resourcePatternResolver.getResources(pattern)__					MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)__					for (Resource resource : resources) {_						if (resource.isReadable()) {_							MetadataReader reader = readerFactory.getMetadataReader(resource)__							String className = reader.getClassMetadata().getClassName()__							if (matchesFilter(reader, readerFactory)) {_								scannedUnit.addManagedClassName(className)__								if (scannedUnit.getPersistenceUnitRootUrl() == null) {_									URL url = resource.getURL()__									if (ResourceUtils.isJarURL(url)) {_										scannedUnit.setPersistenceUnitRootUrl(ResourceUtils.extractJarFileURL(url))__									}_								}_							}_						}_					}_				}_				catch (IOException ex) {_					throw new PersistenceException("Failed to scan classpath for unlisted classes", ex)__				}_			}_		}_		if (this.mappingResources != null) {_			for (String mappingFileName : this.mappingResources) {_				scannedUnit.addMappingFileName(mappingFileName)__			}_		}_		return scannedUnit__	};perform,spring,based,scanning,for,entity,classes,see,set,packages,to,scan;private,spring,persistence,unit,info,build,default,persistence,unit,info,spring,persistence,unit,info,scanned,unit,new,spring,persistence,unit,info,scanned,unit,set,persistence,unit,name,this,default,persistence,unit,name,scanned,unit,set,exclude,unlisted,classes,true,if,this,packages,to,scan,null,for,string,pkg,this,packages,to,scan,try,string,pattern,resource,pattern,resolver,class,utils,convert,class,name,to,resource,path,pkg,resource,resources,this,resource,pattern,resolver,get,resources,pattern,metadata,reader,factory,reader,factory,new,caching,metadata,reader,factory,this,resource,pattern,resolver,for,resource,resource,resources,if,resource,is,readable,metadata,reader,reader,reader,factory,get,metadata,reader,resource,string,class,name,reader,get,class,metadata,get,class,name,if,matches,filter,reader,reader,factory,scanned,unit,add,managed,class,name,class,name,if,scanned,unit,get,persistence,unit,root,url,null,url,url,resource,get,url,if,resource,utils,is,jar,url,url,scanned,unit,set,persistence,unit,root,url,resource,utils,extract,jar,file,url,url,catch,ioexception,ex,throw,new,persistence,exception,failed,to,scan,classpath,for,unlisted,classes,ex,if,this,mapping,resources,null,for,string,mapping,file,name,this,mapping,resources,scanned,unit,add,mapping,file,name,mapping,file,name,return,scanned,unit
DefaultPersistenceUnitManager -> private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo();1375434510;Perform Spring-based scanning for entity classes._@see #setPackagesToScan;private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() {_		SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()__		scannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName)__		scannedUnit.setExcludeUnlistedClasses(true)__		if (this.packagesToScan != null) {_			for (String pkg : this.packagesToScan) {_				try {_					String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +_							ClassUtils.convertClassNameToResourcePath(pkg) + ENTITY_CLASS_RESOURCE_PATTERN__					Resource[] resources = this.resourcePatternResolver.getResources(pattern)__					MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)__					for (Resource resource : resources) {_						if (resource.isReadable()) {_							MetadataReader reader = readerFactory.getMetadataReader(resource)__							String className = reader.getClassMetadata().getClassName()__							if (matchesFilter(reader, readerFactory)) {_								scannedUnit.addManagedClassName(className)__								if (scannedUnit.getPersistenceUnitRootUrl() == null) {_									URL url = resource.getURL()__									if (ResourceUtils.isJarURL(url)) {_										scannedUnit.setPersistenceUnitRootUrl(ResourceUtils.extractJarFileURL(url))__									}_								}_							}_						}_					}_				}_				catch (IOException ex) {_					throw new PersistenceException("Failed to scan classpath for unlisted classes", ex)__				}_			}_		}_		if (this.mappingResources != null) {_			for (String mappingFileName : this.mappingResources) {_				scannedUnit.addMappingFileName(mappingFileName)__			}_		}_		return scannedUnit__	};perform,spring,based,scanning,for,entity,classes,see,set,packages,to,scan;private,spring,persistence,unit,info,build,default,persistence,unit,info,spring,persistence,unit,info,scanned,unit,new,spring,persistence,unit,info,scanned,unit,set,persistence,unit,name,this,default,persistence,unit,name,scanned,unit,set,exclude,unlisted,classes,true,if,this,packages,to,scan,null,for,string,pkg,this,packages,to,scan,try,string,pattern,resource,pattern,resolver,class,utils,convert,class,name,to,resource,path,pkg,resource,resources,this,resource,pattern,resolver,get,resources,pattern,metadata,reader,factory,reader,factory,new,caching,metadata,reader,factory,this,resource,pattern,resolver,for,resource,resource,resources,if,resource,is,readable,metadata,reader,reader,reader,factory,get,metadata,reader,resource,string,class,name,reader,get,class,metadata,get,class,name,if,matches,filter,reader,reader,factory,scanned,unit,add,managed,class,name,class,name,if,scanned,unit,get,persistence,unit,root,url,null,url,url,resource,get,url,if,resource,utils,is,jar,url,url,scanned,unit,set,persistence,unit,root,url,resource,utils,extract,jar,file,url,url,catch,ioexception,ex,throw,new,persistence,exception,failed,to,scan,classpath,for,unlisted,classes,ex,if,this,mapping,resources,null,for,string,mapping,file,name,this,mapping,resources,scanned,unit,add,mapping,file,name,mapping,file,name,return,scanned,unit
DefaultPersistenceUnitManager -> private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo();1375458214;Perform Spring-based scanning for entity classes._@see #setPackagesToScan;private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() {_		SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()__		scannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName)__		scannedUnit.setExcludeUnlistedClasses(true)__		if (this.packagesToScan != null) {_			for (String pkg : this.packagesToScan) {_				try {_					String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +_							ClassUtils.convertClassNameToResourcePath(pkg) + ENTITY_CLASS_RESOURCE_PATTERN__					Resource[] resources = this.resourcePatternResolver.getResources(pattern)__					MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)__					for (Resource resource : resources) {_						if (resource.isReadable()) {_							MetadataReader reader = readerFactory.getMetadataReader(resource)__							String className = reader.getClassMetadata().getClassName()__							if (matchesFilter(reader, readerFactory)) {_								scannedUnit.addManagedClassName(className)__								if (scannedUnit.getPersistenceUnitRootUrl() == null) {_									URL url = resource.getURL()__									if (ResourceUtils.isJarURL(url)) {_										scannedUnit.setPersistenceUnitRootUrl(ResourceUtils.extractJarFileURL(url))__									}_								}_							}_						}_					}_				}_				catch (IOException ex) {_					throw new PersistenceException("Failed to scan classpath for unlisted classes", ex)__				}_			}_		}_		if (this.mappingResources != null) {_			for (String mappingFileName : this.mappingResources) {_				scannedUnit.addMappingFileName(mappingFileName)__			}_		}_		return scannedUnit__	};perform,spring,based,scanning,for,entity,classes,see,set,packages,to,scan;private,spring,persistence,unit,info,build,default,persistence,unit,info,spring,persistence,unit,info,scanned,unit,new,spring,persistence,unit,info,scanned,unit,set,persistence,unit,name,this,default,persistence,unit,name,scanned,unit,set,exclude,unlisted,classes,true,if,this,packages,to,scan,null,for,string,pkg,this,packages,to,scan,try,string,pattern,resource,pattern,resolver,class,utils,convert,class,name,to,resource,path,pkg,resource,resources,this,resource,pattern,resolver,get,resources,pattern,metadata,reader,factory,reader,factory,new,caching,metadata,reader,factory,this,resource,pattern,resolver,for,resource,resource,resources,if,resource,is,readable,metadata,reader,reader,reader,factory,get,metadata,reader,resource,string,class,name,reader,get,class,metadata,get,class,name,if,matches,filter,reader,reader,factory,scanned,unit,add,managed,class,name,class,name,if,scanned,unit,get,persistence,unit,root,url,null,url,url,resource,get,url,if,resource,utils,is,jar,url,url,scanned,unit,set,persistence,unit,root,url,resource,utils,extract,jar,file,url,url,catch,ioexception,ex,throw,new,persistence,exception,failed,to,scan,classpath,for,unlisted,classes,ex,if,this,mapping,resources,null,for,string,mapping,file,name,this,mapping,resources,scanned,unit,add,mapping,file,name,mapping,file,name,return,scanned,unit
DefaultPersistenceUnitManager -> private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo();1389648334;Perform Spring-based scanning for entity classes._@see #setPackagesToScan;private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() {_		SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()__		scannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName)__		scannedUnit.setExcludeUnlistedClasses(true)__		if (this.packagesToScan != null) {_			for (String pkg : this.packagesToScan) {_				try {_					String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +_							ClassUtils.convertClassNameToResourcePath(pkg) + ENTITY_CLASS_RESOURCE_PATTERN__					Resource[] resources = this.resourcePatternResolver.getResources(pattern)__					MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)__					for (Resource resource : resources) {_						if (resource.isReadable()) {_							MetadataReader reader = readerFactory.getMetadataReader(resource)__							String className = reader.getClassMetadata().getClassName()__							if (matchesFilter(reader, readerFactory)) {_								scannedUnit.addManagedClassName(className)__								if (scannedUnit.getPersistenceUnitRootUrl() == null) {_									URL url = resource.getURL()__									if (ResourceUtils.isJarURL(url)) {_										scannedUnit.setPersistenceUnitRootUrl(ResourceUtils.extractJarFileURL(url))__									}_								}_							}_						}_					}_				}_				catch (IOException ex) {_					throw new PersistenceException("Failed to scan classpath for unlisted entity classes", ex)__				}_			}_		}_		if (this.mappingResources != null) {_			for (String mappingFileName : this.mappingResources) {_				scannedUnit.addMappingFileName(mappingFileName)__			}_		}_		return scannedUnit__	};perform,spring,based,scanning,for,entity,classes,see,set,packages,to,scan;private,spring,persistence,unit,info,build,default,persistence,unit,info,spring,persistence,unit,info,scanned,unit,new,spring,persistence,unit,info,scanned,unit,set,persistence,unit,name,this,default,persistence,unit,name,scanned,unit,set,exclude,unlisted,classes,true,if,this,packages,to,scan,null,for,string,pkg,this,packages,to,scan,try,string,pattern,resource,pattern,resolver,class,utils,convert,class,name,to,resource,path,pkg,resource,resources,this,resource,pattern,resolver,get,resources,pattern,metadata,reader,factory,reader,factory,new,caching,metadata,reader,factory,this,resource,pattern,resolver,for,resource,resource,resources,if,resource,is,readable,metadata,reader,reader,reader,factory,get,metadata,reader,resource,string,class,name,reader,get,class,metadata,get,class,name,if,matches,filter,reader,reader,factory,scanned,unit,add,managed,class,name,class,name,if,scanned,unit,get,persistence,unit,root,url,null,url,url,resource,get,url,if,resource,utils,is,jar,url,url,scanned,unit,set,persistence,unit,root,url,resource,utils,extract,jar,file,url,url,catch,ioexception,ex,throw,new,persistence,exception,failed,to,scan,classpath,for,unlisted,entity,classes,ex,if,this,mapping,resources,null,for,string,mapping,file,name,this,mapping,resources,scanned,unit,add,mapping,file,name,mapping,file,name,return,scanned,unit
DefaultPersistenceUnitManager -> private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo();1390250900;Perform Spring-based scanning for entity classes._@see #setPackagesToScan;private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() {_		SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()__		scannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName)__		scannedUnit.setExcludeUnlistedClasses(true)__		if (this.packagesToScan != null) {_			for (String pkg : this.packagesToScan) {_				try {_					String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +_							ClassUtils.convertClassNameToResourcePath(pkg) + ENTITY_CLASS_RESOURCE_PATTERN__					Resource[] resources = this.resourcePatternResolver.getResources(pattern)__					MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)__					for (Resource resource : resources) {_						if (resource.isReadable()) {_							MetadataReader reader = readerFactory.getMetadataReader(resource)__							String className = reader.getClassMetadata().getClassName()__							if (matchesFilter(reader, readerFactory)) {_								scannedUnit.addManagedClassName(className)__								if (scannedUnit.getPersistenceUnitRootUrl() == null) {_									URL url = resource.getURL()__									if (ResourceUtils.isJarURL(url)) {_										scannedUnit.setPersistenceUnitRootUrl(ResourceUtils.extractJarFileURL(url))__									}_								}_							}_						}_					}_				}_				catch (IOException ex) {_					throw new PersistenceException("Failed to scan classpath for unlisted entity classes", ex)__				}_			}_		}_		if (this.mappingResources != null) {_			for (String mappingFileName : this.mappingResources) {_				scannedUnit.addMappingFileName(mappingFileName)__			}_		}_		return scannedUnit__	};perform,spring,based,scanning,for,entity,classes,see,set,packages,to,scan;private,spring,persistence,unit,info,build,default,persistence,unit,info,spring,persistence,unit,info,scanned,unit,new,spring,persistence,unit,info,scanned,unit,set,persistence,unit,name,this,default,persistence,unit,name,scanned,unit,set,exclude,unlisted,classes,true,if,this,packages,to,scan,null,for,string,pkg,this,packages,to,scan,try,string,pattern,resource,pattern,resolver,class,utils,convert,class,name,to,resource,path,pkg,resource,resources,this,resource,pattern,resolver,get,resources,pattern,metadata,reader,factory,reader,factory,new,caching,metadata,reader,factory,this,resource,pattern,resolver,for,resource,resource,resources,if,resource,is,readable,metadata,reader,reader,reader,factory,get,metadata,reader,resource,string,class,name,reader,get,class,metadata,get,class,name,if,matches,filter,reader,reader,factory,scanned,unit,add,managed,class,name,class,name,if,scanned,unit,get,persistence,unit,root,url,null,url,url,resource,get,url,if,resource,utils,is,jar,url,url,scanned,unit,set,persistence,unit,root,url,resource,utils,extract,jar,file,url,url,catch,ioexception,ex,throw,new,persistence,exception,failed,to,scan,classpath,for,unlisted,entity,classes,ex,if,this,mapping,resources,null,for,string,mapping,file,name,this,mapping,resources,scanned,unit,add,mapping,file,name,mapping,file,name,return,scanned,unit
DefaultPersistenceUnitManager -> private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo();1390313076;Perform Spring-based scanning for entity classes._@see #setPackagesToScan;private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() {_		SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()__		scannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName)__		scannedUnit.setExcludeUnlistedClasses(true)___		if (this.packagesToScan != null) {_			for (String pkg : this.packagesToScan) {_				try {_					String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +_							ClassUtils.convertClassNameToResourcePath(pkg) + ENTITY_CLASS_RESOURCE_PATTERN__					Resource[] resources = this.resourcePatternResolver.getResources(pattern)__					MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)__					for (Resource resource : resources) {_						if (resource.isReadable()) {_							MetadataReader reader = readerFactory.getMetadataReader(resource)__							String className = reader.getClassMetadata().getClassName()__							if (matchesFilter(reader, readerFactory)) {_								scannedUnit.addManagedClassName(className)__								if (scannedUnit.getPersistenceUnitRootUrl() == null) {_									URL url = resource.getURL()__									if (ResourceUtils.isJarURL(url)) {_										scannedUnit.setPersistenceUnitRootUrl(ResourceUtils.extractJarFileURL(url))__									}_								}_							}_						}_					}_				}_				catch (IOException ex) {_					throw new PersistenceException("Failed to scan classpath for unlisted entity classes", ex)__				}_			}_		}__		if (this.mappingResources != null) {_			for (String mappingFileName : this.mappingResources) {_				scannedUnit.addMappingFileName(mappingFileName)__			}_		}_		else if (useOrmXmlForDefaultPersistenceUnit()) {_			scannedUnit.addMappingFileName(DEFAULT_ORM_XML_RESOURCE)__		}__		return scannedUnit__	};perform,spring,based,scanning,for,entity,classes,see,set,packages,to,scan;private,spring,persistence,unit,info,build,default,persistence,unit,info,spring,persistence,unit,info,scanned,unit,new,spring,persistence,unit,info,scanned,unit,set,persistence,unit,name,this,default,persistence,unit,name,scanned,unit,set,exclude,unlisted,classes,true,if,this,packages,to,scan,null,for,string,pkg,this,packages,to,scan,try,string,pattern,resource,pattern,resolver,class,utils,convert,class,name,to,resource,path,pkg,resource,resources,this,resource,pattern,resolver,get,resources,pattern,metadata,reader,factory,reader,factory,new,caching,metadata,reader,factory,this,resource,pattern,resolver,for,resource,resource,resources,if,resource,is,readable,metadata,reader,reader,reader,factory,get,metadata,reader,resource,string,class,name,reader,get,class,metadata,get,class,name,if,matches,filter,reader,reader,factory,scanned,unit,add,managed,class,name,class,name,if,scanned,unit,get,persistence,unit,root,url,null,url,url,resource,get,url,if,resource,utils,is,jar,url,url,scanned,unit,set,persistence,unit,root,url,resource,utils,extract,jar,file,url,url,catch,ioexception,ex,throw,new,persistence,exception,failed,to,scan,classpath,for,unlisted,entity,classes,ex,if,this,mapping,resources,null,for,string,mapping,file,name,this,mapping,resources,scanned,unit,add,mapping,file,name,mapping,file,name,else,if,use,orm,xml,for,default,persistence,unit,scanned,unit,add,mapping,file,name,return,scanned,unit
DefaultPersistenceUnitManager -> private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo();1400140571;Perform Spring-based scanning for entity classes._@see #setPackagesToScan;private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() {_		SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()__		scannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName)__		scannedUnit.setExcludeUnlistedClasses(true)___		if (this.packagesToScan != null) {_			for (String pkg : this.packagesToScan) {_				try {_					String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +_							ClassUtils.convertClassNameToResourcePath(pkg) + ENTITY_CLASS_RESOURCE_PATTERN__					Resource[] resources = this.resourcePatternResolver.getResources(pattern)__					MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)__					for (Resource resource : resources) {_						if (resource.isReadable()) {_							MetadataReader reader = readerFactory.getMetadataReader(resource)__							String className = reader.getClassMetadata().getClassName()__							if (matchesFilter(reader, readerFactory)) {_								scannedUnit.addManagedClassName(className)__								if (scannedUnit.getPersistenceUnitRootUrl() == null) {_									URL url = resource.getURL()__									if (ResourceUtils.isJarURL(url)) {_										scannedUnit.setPersistenceUnitRootUrl(ResourceUtils.extractJarFileURL(url))__									}_								}_							}_						}_					}_				}_				catch (IOException ex) {_					throw new PersistenceException("Failed to scan classpath for unlisted entity classes", ex)__				}_			}_		}__		if (this.mappingResources != null) {_			for (String mappingFileName : this.mappingResources) {_				scannedUnit.addMappingFileName(mappingFileName)__			}_		}_		else if (useOrmXmlForDefaultPersistenceUnit()) {_			scannedUnit.addMappingFileName(DEFAULT_ORM_XML_RESOURCE)__		}__		return scannedUnit__	};perform,spring,based,scanning,for,entity,classes,see,set,packages,to,scan;private,spring,persistence,unit,info,build,default,persistence,unit,info,spring,persistence,unit,info,scanned,unit,new,spring,persistence,unit,info,scanned,unit,set,persistence,unit,name,this,default,persistence,unit,name,scanned,unit,set,exclude,unlisted,classes,true,if,this,packages,to,scan,null,for,string,pkg,this,packages,to,scan,try,string,pattern,resource,pattern,resolver,class,utils,convert,class,name,to,resource,path,pkg,resource,resources,this,resource,pattern,resolver,get,resources,pattern,metadata,reader,factory,reader,factory,new,caching,metadata,reader,factory,this,resource,pattern,resolver,for,resource,resource,resources,if,resource,is,readable,metadata,reader,reader,reader,factory,get,metadata,reader,resource,string,class,name,reader,get,class,metadata,get,class,name,if,matches,filter,reader,reader,factory,scanned,unit,add,managed,class,name,class,name,if,scanned,unit,get,persistence,unit,root,url,null,url,url,resource,get,url,if,resource,utils,is,jar,url,url,scanned,unit,set,persistence,unit,root,url,resource,utils,extract,jar,file,url,url,catch,ioexception,ex,throw,new,persistence,exception,failed,to,scan,classpath,for,unlisted,entity,classes,ex,if,this,mapping,resources,null,for,string,mapping,file,name,this,mapping,resources,scanned,unit,add,mapping,file,name,mapping,file,name,else,if,use,orm,xml,for,default,persistence,unit,scanned,unit,add,mapping,file,name,return,scanned,unit
DefaultPersistenceUnitManager -> private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo();1403774750;Perform Spring-based scanning for entity classes._@see #setPackagesToScan;private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() {_		SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()__		scannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName)__		scannedUnit.setExcludeUnlistedClasses(true)___		if (this.packagesToScan != null) {_			for (String pkg : this.packagesToScan) {_				try {_					String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +_							ClassUtils.convertClassNameToResourcePath(pkg) + CLASS_RESOURCE_PATTERN__					Resource[] resources = this.resourcePatternResolver.getResources(pattern)__					MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)__					for (Resource resource : resources) {_						if (resource.isReadable()) {_							MetadataReader reader = readerFactory.getMetadataReader(resource)__							String className = reader.getClassMetadata().getClassName()__							if (matchesFilter(reader, readerFactory)) {_								scannedUnit.addManagedClassName(className)__								if (scannedUnit.getPersistenceUnitRootUrl() == null) {_									URL url = resource.getURL()__									if (ResourceUtils.isJarURL(url)) {_										scannedUnit.setPersistenceUnitRootUrl(ResourceUtils.extractJarFileURL(url))__									}_								}_							}_							else if (className.endsWith(PACKAGE_INFO_SUFFIX)) {_								scannedUnit.addManagedPackage(_										className.substring(0, className.length() - PACKAGE_INFO_SUFFIX.length()))__							}_						}_					}_				}_				catch (IOException ex) {_					throw new PersistenceException("Failed to scan classpath for unlisted entity classes", ex)__				}_			}_		}__		if (this.mappingResources != null) {_			for (String mappingFileName : this.mappingResources) {_				scannedUnit.addMappingFileName(mappingFileName)__			}_		}_		else if (useOrmXmlForDefaultPersistenceUnit()) {_			scannedUnit.addMappingFileName(DEFAULT_ORM_XML_RESOURCE)__		}__		return scannedUnit__	};perform,spring,based,scanning,for,entity,classes,see,set,packages,to,scan;private,spring,persistence,unit,info,build,default,persistence,unit,info,spring,persistence,unit,info,scanned,unit,new,spring,persistence,unit,info,scanned,unit,set,persistence,unit,name,this,default,persistence,unit,name,scanned,unit,set,exclude,unlisted,classes,true,if,this,packages,to,scan,null,for,string,pkg,this,packages,to,scan,try,string,pattern,resource,pattern,resolver,class,utils,convert,class,name,to,resource,path,pkg,resource,resources,this,resource,pattern,resolver,get,resources,pattern,metadata,reader,factory,reader,factory,new,caching,metadata,reader,factory,this,resource,pattern,resolver,for,resource,resource,resources,if,resource,is,readable,metadata,reader,reader,reader,factory,get,metadata,reader,resource,string,class,name,reader,get,class,metadata,get,class,name,if,matches,filter,reader,reader,factory,scanned,unit,add,managed,class,name,class,name,if,scanned,unit,get,persistence,unit,root,url,null,url,url,resource,get,url,if,resource,utils,is,jar,url,url,scanned,unit,set,persistence,unit,root,url,resource,utils,extract,jar,file,url,url,else,if,class,name,ends,with,scanned,unit,add,managed,package,class,name,substring,0,class,name,length,length,catch,ioexception,ex,throw,new,persistence,exception,failed,to,scan,classpath,for,unlisted,entity,classes,ex,if,this,mapping,resources,null,for,string,mapping,file,name,this,mapping,resources,scanned,unit,add,mapping,file,name,mapping,file,name,else,if,use,orm,xml,for,default,persistence,unit,scanned,unit,add,mapping,file,name,return,scanned,unit
DefaultPersistenceUnitManager -> private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo();1404056186;Perform Spring-based scanning for entity classes._@see #setPackagesToScan;private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() {_		SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()__		scannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName)__		scannedUnit.setExcludeUnlistedClasses(true)___		if (this.packagesToScan != null) {_			for (String pkg : this.packagesToScan) {_				try {_					String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +_							ClassUtils.convertClassNameToResourcePath(pkg) + CLASS_RESOURCE_PATTERN__					Resource[] resources = this.resourcePatternResolver.getResources(pattern)__					MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)__					for (Resource resource : resources) {_						if (resource.isReadable()) {_							MetadataReader reader = readerFactory.getMetadataReader(resource)__							String className = reader.getClassMetadata().getClassName()__							if (matchesFilter(reader, readerFactory)) {_								scannedUnit.addManagedClassName(className)__								if (scannedUnit.getPersistenceUnitRootUrl() == null) {_									URL url = resource.getURL()__									if (ResourceUtils.isJarURL(url)) {_										scannedUnit.setPersistenceUnitRootUrl(ResourceUtils.extractJarFileURL(url))__									}_								}_							}_							else if (className.endsWith(PACKAGE_INFO_SUFFIX)) {_								scannedUnit.addManagedPackage(_										className.substring(0, className.length() - PACKAGE_INFO_SUFFIX.length()))__							}_						}_					}_				}_				catch (IOException ex) {_					throw new PersistenceException("Failed to scan classpath for unlisted entity classes", ex)__				}_			}_		}__		if (this.mappingResources != null) {_			for (String mappingFileName : this.mappingResources) {_				scannedUnit.addMappingFileName(mappingFileName)__			}_		}_		else if (useOrmXmlForDefaultPersistenceUnit()) {_			scannedUnit.addMappingFileName(DEFAULT_ORM_XML_RESOURCE)__		}__		return scannedUnit__	};perform,spring,based,scanning,for,entity,classes,see,set,packages,to,scan;private,spring,persistence,unit,info,build,default,persistence,unit,info,spring,persistence,unit,info,scanned,unit,new,spring,persistence,unit,info,scanned,unit,set,persistence,unit,name,this,default,persistence,unit,name,scanned,unit,set,exclude,unlisted,classes,true,if,this,packages,to,scan,null,for,string,pkg,this,packages,to,scan,try,string,pattern,resource,pattern,resolver,class,utils,convert,class,name,to,resource,path,pkg,resource,resources,this,resource,pattern,resolver,get,resources,pattern,metadata,reader,factory,reader,factory,new,caching,metadata,reader,factory,this,resource,pattern,resolver,for,resource,resource,resources,if,resource,is,readable,metadata,reader,reader,reader,factory,get,metadata,reader,resource,string,class,name,reader,get,class,metadata,get,class,name,if,matches,filter,reader,reader,factory,scanned,unit,add,managed,class,name,class,name,if,scanned,unit,get,persistence,unit,root,url,null,url,url,resource,get,url,if,resource,utils,is,jar,url,url,scanned,unit,set,persistence,unit,root,url,resource,utils,extract,jar,file,url,url,else,if,class,name,ends,with,scanned,unit,add,managed,package,class,name,substring,0,class,name,length,length,catch,ioexception,ex,throw,new,persistence,exception,failed,to,scan,classpath,for,unlisted,entity,classes,ex,if,this,mapping,resources,null,for,string,mapping,file,name,this,mapping,resources,scanned,unit,add,mapping,file,name,mapping,file,name,else,if,use,orm,xml,for,default,persistence,unit,scanned,unit,add,mapping,file,name,return,scanned,unit
DefaultPersistenceUnitManager -> private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo();1447323728;Perform Spring-based scanning for entity classes._@see #setPackagesToScan;private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() {_		SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()__		scannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName)__		scannedUnit.setExcludeUnlistedClasses(true)___		if (this.packagesToScan != null) {_			for (String pkg : this.packagesToScan) {_				try {_					String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +_							ClassUtils.convertClassNameToResourcePath(pkg) + CLASS_RESOURCE_PATTERN__					Resource[] resources = this.resourcePatternResolver.getResources(pattern)__					MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)__					for (Resource resource : resources) {_						if (resource.isReadable()) {_							MetadataReader reader = readerFactory.getMetadataReader(resource)__							String className = reader.getClassMetadata().getClassName()__							if (matchesFilter(reader, readerFactory)) {_								scannedUnit.addManagedClassName(className)__								if (scannedUnit.getPersistenceUnitRootUrl() == null) {_									URL url = resource.getURL()__									if (ResourceUtils.isJarURL(url)) {_										scannedUnit.setPersistenceUnitRootUrl(ResourceUtils.extractJarFileURL(url))__									}_								}_							}_							else if (className.endsWith(PACKAGE_INFO_SUFFIX)) {_								scannedUnit.addManagedPackage(_										className.substring(0, className.length() - PACKAGE_INFO_SUFFIX.length()))__							}_						}_					}_				}_				catch (IOException ex) {_					throw new PersistenceException("Failed to scan classpath for unlisted entity classes", ex)__				}_			}_		}__		if (this.mappingResources != null) {_			for (String mappingFileName : this.mappingResources) {_				scannedUnit.addMappingFileName(mappingFileName)__			}_		}_		else if (useOrmXmlForDefaultPersistenceUnit()) {_			scannedUnit.addMappingFileName(DEFAULT_ORM_XML_RESOURCE)__		}__		return scannedUnit__	};perform,spring,based,scanning,for,entity,classes,see,set,packages,to,scan;private,spring,persistence,unit,info,build,default,persistence,unit,info,spring,persistence,unit,info,scanned,unit,new,spring,persistence,unit,info,scanned,unit,set,persistence,unit,name,this,default,persistence,unit,name,scanned,unit,set,exclude,unlisted,classes,true,if,this,packages,to,scan,null,for,string,pkg,this,packages,to,scan,try,string,pattern,resource,pattern,resolver,class,utils,convert,class,name,to,resource,path,pkg,resource,resources,this,resource,pattern,resolver,get,resources,pattern,metadata,reader,factory,reader,factory,new,caching,metadata,reader,factory,this,resource,pattern,resolver,for,resource,resource,resources,if,resource,is,readable,metadata,reader,reader,reader,factory,get,metadata,reader,resource,string,class,name,reader,get,class,metadata,get,class,name,if,matches,filter,reader,reader,factory,scanned,unit,add,managed,class,name,class,name,if,scanned,unit,get,persistence,unit,root,url,null,url,url,resource,get,url,if,resource,utils,is,jar,url,url,scanned,unit,set,persistence,unit,root,url,resource,utils,extract,jar,file,url,url,else,if,class,name,ends,with,scanned,unit,add,managed,package,class,name,substring,0,class,name,length,length,catch,ioexception,ex,throw,new,persistence,exception,failed,to,scan,classpath,for,unlisted,entity,classes,ex,if,this,mapping,resources,null,for,string,mapping,file,name,this,mapping,resources,scanned,unit,add,mapping,file,name,mapping,file,name,else,if,use,orm,xml,for,default,persistence,unit,scanned,unit,add,mapping,file,name,return,scanned,unit
DefaultPersistenceUnitManager -> private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo();1464299869;Perform Spring-based scanning for entity classes._@see #setPackagesToScan;private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() {_		SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()__		scannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName)__		scannedUnit.setExcludeUnlistedClasses(true)___		if (this.packagesToScan != null) {_			for (String pkg : this.packagesToScan) {_				try {_					String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +_							ClassUtils.convertClassNameToResourcePath(pkg) + CLASS_RESOURCE_PATTERN__					Resource[] resources = this.resourcePatternResolver.getResources(pattern)__					MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)__					for (Resource resource : resources) {_						if (resource.isReadable()) {_							MetadataReader reader = readerFactory.getMetadataReader(resource)__							String className = reader.getClassMetadata().getClassName()__							if (matchesFilter(reader, readerFactory)) {_								scannedUnit.addManagedClassName(className)__								if (scannedUnit.getPersistenceUnitRootUrl() == null) {_									URL url = resource.getURL()__									if (ResourceUtils.isJarURL(url)) {_										scannedUnit.setPersistenceUnitRootUrl(ResourceUtils.extractJarFileURL(url))__									}_								}_							}_							else if (className.endsWith(PACKAGE_INFO_SUFFIX)) {_								scannedUnit.addManagedPackage(_										className.substring(0, className.length() - PACKAGE_INFO_SUFFIX.length()))__							}_						}_					}_				}_				catch (IOException ex) {_					throw new PersistenceException("Failed to scan classpath for unlisted entity classes", ex)__				}_			}_		}__		if (this.mappingResources != null) {_			for (String mappingFileName : this.mappingResources) {_				scannedUnit.addMappingFileName(mappingFileName)__			}_		}_		else {_			Resource ormXml = getOrmXmlForDefaultPersistenceUnit()__			if (ormXml != null) {_				scannedUnit.addMappingFileName(DEFAULT_ORM_XML_RESOURCE)__				if (scannedUnit.getPersistenceUnitRootUrl() == null) {_					try {_						scannedUnit.setPersistenceUnitRootUrl(_								PersistenceUnitReader.determinePersistenceUnitRootUrl(ormXml))__					}_					catch (IOException ex) {_						logger.debug("Failed to determine persistence unit root URL from orm.xml location", ex)__					}_				}_			}_		}__		return scannedUnit__	};perform,spring,based,scanning,for,entity,classes,see,set,packages,to,scan;private,spring,persistence,unit,info,build,default,persistence,unit,info,spring,persistence,unit,info,scanned,unit,new,spring,persistence,unit,info,scanned,unit,set,persistence,unit,name,this,default,persistence,unit,name,scanned,unit,set,exclude,unlisted,classes,true,if,this,packages,to,scan,null,for,string,pkg,this,packages,to,scan,try,string,pattern,resource,pattern,resolver,class,utils,convert,class,name,to,resource,path,pkg,resource,resources,this,resource,pattern,resolver,get,resources,pattern,metadata,reader,factory,reader,factory,new,caching,metadata,reader,factory,this,resource,pattern,resolver,for,resource,resource,resources,if,resource,is,readable,metadata,reader,reader,reader,factory,get,metadata,reader,resource,string,class,name,reader,get,class,metadata,get,class,name,if,matches,filter,reader,reader,factory,scanned,unit,add,managed,class,name,class,name,if,scanned,unit,get,persistence,unit,root,url,null,url,url,resource,get,url,if,resource,utils,is,jar,url,url,scanned,unit,set,persistence,unit,root,url,resource,utils,extract,jar,file,url,url,else,if,class,name,ends,with,scanned,unit,add,managed,package,class,name,substring,0,class,name,length,length,catch,ioexception,ex,throw,new,persistence,exception,failed,to,scan,classpath,for,unlisted,entity,classes,ex,if,this,mapping,resources,null,for,string,mapping,file,name,this,mapping,resources,scanned,unit,add,mapping,file,name,mapping,file,name,else,resource,orm,xml,get,orm,xml,for,default,persistence,unit,if,orm,xml,null,scanned,unit,add,mapping,file,name,if,scanned,unit,get,persistence,unit,root,url,null,try,scanned,unit,set,persistence,unit,root,url,persistence,unit,reader,determine,persistence,unit,root,url,orm,xml,catch,ioexception,ex,logger,debug,failed,to,determine,persistence,unit,root,url,from,orm,xml,location,ex,return,scanned,unit
DefaultPersistenceUnitManager -> private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo();1467668243;Perform Spring-based scanning for entity classes._@see #setPackagesToScan;private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() {_		SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()__		scannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName)__		scannedUnit.setExcludeUnlistedClasses(true)___		if (this.packagesToScan != null) {_			for (String pkg : this.packagesToScan) {_				try {_					String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +_							ClassUtils.convertClassNameToResourcePath(pkg) + CLASS_RESOURCE_PATTERN__					Resource[] resources = this.resourcePatternResolver.getResources(pattern)__					MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)__					for (Resource resource : resources) {_						if (resource.isReadable()) {_							MetadataReader reader = readerFactory.getMetadataReader(resource)__							String className = reader.getClassMetadata().getClassName()__							if (matchesFilter(reader, readerFactory)) {_								scannedUnit.addManagedClassName(className)__								if (scannedUnit.getPersistenceUnitRootUrl() == null) {_									URL url = resource.getURL()__									if (ResourceUtils.isJarURL(url)) {_										scannedUnit.setPersistenceUnitRootUrl(ResourceUtils.extractJarFileURL(url))__									}_								}_							}_							else if (className.endsWith(PACKAGE_INFO_SUFFIX)) {_								scannedUnit.addManagedPackage(_										className.substring(0, className.length() - PACKAGE_INFO_SUFFIX.length()))__							}_						}_					}_				}_				catch (IOException ex) {_					throw new PersistenceException("Failed to scan classpath for unlisted entity classes", ex)__				}_			}_		}__		if (this.mappingResources != null) {_			for (String mappingFileName : this.mappingResources) {_				scannedUnit.addMappingFileName(mappingFileName)__			}_		}_		else {_			Resource ormXml = getOrmXmlForDefaultPersistenceUnit()__			if (ormXml != null) {_				scannedUnit.addMappingFileName(DEFAULT_ORM_XML_RESOURCE)__				if (scannedUnit.getPersistenceUnitRootUrl() == null) {_					try {_						scannedUnit.setPersistenceUnitRootUrl(_								PersistenceUnitReader.determinePersistenceUnitRootUrl(ormXml))__					}_					catch (IOException ex) {_						logger.debug("Failed to determine persistence unit root URL from orm.xml location", ex)__					}_				}_			}_		}__		return scannedUnit__	};perform,spring,based,scanning,for,entity,classes,see,set,packages,to,scan;private,spring,persistence,unit,info,build,default,persistence,unit,info,spring,persistence,unit,info,scanned,unit,new,spring,persistence,unit,info,scanned,unit,set,persistence,unit,name,this,default,persistence,unit,name,scanned,unit,set,exclude,unlisted,classes,true,if,this,packages,to,scan,null,for,string,pkg,this,packages,to,scan,try,string,pattern,resource,pattern,resolver,class,utils,convert,class,name,to,resource,path,pkg,resource,resources,this,resource,pattern,resolver,get,resources,pattern,metadata,reader,factory,reader,factory,new,caching,metadata,reader,factory,this,resource,pattern,resolver,for,resource,resource,resources,if,resource,is,readable,metadata,reader,reader,reader,factory,get,metadata,reader,resource,string,class,name,reader,get,class,metadata,get,class,name,if,matches,filter,reader,reader,factory,scanned,unit,add,managed,class,name,class,name,if,scanned,unit,get,persistence,unit,root,url,null,url,url,resource,get,url,if,resource,utils,is,jar,url,url,scanned,unit,set,persistence,unit,root,url,resource,utils,extract,jar,file,url,url,else,if,class,name,ends,with,scanned,unit,add,managed,package,class,name,substring,0,class,name,length,length,catch,ioexception,ex,throw,new,persistence,exception,failed,to,scan,classpath,for,unlisted,entity,classes,ex,if,this,mapping,resources,null,for,string,mapping,file,name,this,mapping,resources,scanned,unit,add,mapping,file,name,mapping,file,name,else,resource,orm,xml,get,orm,xml,for,default,persistence,unit,if,orm,xml,null,scanned,unit,add,mapping,file,name,if,scanned,unit,get,persistence,unit,root,url,null,try,scanned,unit,set,persistence,unit,root,url,persistence,unit,reader,determine,persistence,unit,root,url,orm,xml,catch,ioexception,ex,logger,debug,failed,to,determine,persistence,unit,root,url,from,orm,xml,location,ex,return,scanned,unit
DefaultPersistenceUnitManager -> private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo();1467730834;Perform Spring-based scanning for entity classes._@see #setPackagesToScan;private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() {_		SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()__		scannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName)__		scannedUnit.setExcludeUnlistedClasses(true)___		if (this.packagesToScan != null) {_			for (String pkg : this.packagesToScan) {_				try {_					String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +_							ClassUtils.convertClassNameToResourcePath(pkg) + CLASS_RESOURCE_PATTERN__					Resource[] resources = this.resourcePatternResolver.getResources(pattern)__					MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)__					for (Resource resource : resources) {_						if (resource.isReadable()) {_							MetadataReader reader = readerFactory.getMetadataReader(resource)__							String className = reader.getClassMetadata().getClassName()__							if (matchesFilter(reader, readerFactory)) {_								scannedUnit.addManagedClassName(className)__								if (scannedUnit.getPersistenceUnitRootUrl() == null) {_									URL url = resource.getURL()__									if (ResourceUtils.isJarURL(url)) {_										scannedUnit.setPersistenceUnitRootUrl(ResourceUtils.extractJarFileURL(url))__									}_								}_							}_							else if (className.endsWith(PACKAGE_INFO_SUFFIX)) {_								scannedUnit.addManagedPackage(_										className.substring(0, className.length() - PACKAGE_INFO_SUFFIX.length()))__							}_						}_					}_				}_				catch (IOException ex) {_					throw new PersistenceException("Failed to scan classpath for unlisted entity classes", ex)__				}_			}_		}__		if (this.mappingResources != null) {_			for (String mappingFileName : this.mappingResources) {_				scannedUnit.addMappingFileName(mappingFileName)__			}_		}_		else {_			Resource ormXml = getOrmXmlForDefaultPersistenceUnit()__			if (ormXml != null) {_				scannedUnit.addMappingFileName(DEFAULT_ORM_XML_RESOURCE)__				if (scannedUnit.getPersistenceUnitRootUrl() == null) {_					try {_						scannedUnit.setPersistenceUnitRootUrl(_								PersistenceUnitReader.determinePersistenceUnitRootUrl(ormXml))__					}_					catch (IOException ex) {_						logger.debug("Failed to determine persistence unit root URL from orm.xml location", ex)__					}_				}_			}_		}__		return scannedUnit__	};perform,spring,based,scanning,for,entity,classes,see,set,packages,to,scan;private,spring,persistence,unit,info,build,default,persistence,unit,info,spring,persistence,unit,info,scanned,unit,new,spring,persistence,unit,info,scanned,unit,set,persistence,unit,name,this,default,persistence,unit,name,scanned,unit,set,exclude,unlisted,classes,true,if,this,packages,to,scan,null,for,string,pkg,this,packages,to,scan,try,string,pattern,resource,pattern,resolver,class,utils,convert,class,name,to,resource,path,pkg,resource,resources,this,resource,pattern,resolver,get,resources,pattern,metadata,reader,factory,reader,factory,new,caching,metadata,reader,factory,this,resource,pattern,resolver,for,resource,resource,resources,if,resource,is,readable,metadata,reader,reader,reader,factory,get,metadata,reader,resource,string,class,name,reader,get,class,metadata,get,class,name,if,matches,filter,reader,reader,factory,scanned,unit,add,managed,class,name,class,name,if,scanned,unit,get,persistence,unit,root,url,null,url,url,resource,get,url,if,resource,utils,is,jar,url,url,scanned,unit,set,persistence,unit,root,url,resource,utils,extract,jar,file,url,url,else,if,class,name,ends,with,scanned,unit,add,managed,package,class,name,substring,0,class,name,length,length,catch,ioexception,ex,throw,new,persistence,exception,failed,to,scan,classpath,for,unlisted,entity,classes,ex,if,this,mapping,resources,null,for,string,mapping,file,name,this,mapping,resources,scanned,unit,add,mapping,file,name,mapping,file,name,else,resource,orm,xml,get,orm,xml,for,default,persistence,unit,if,orm,xml,null,scanned,unit,add,mapping,file,name,if,scanned,unit,get,persistence,unit,root,url,null,try,scanned,unit,set,persistence,unit,root,url,persistence,unit,reader,determine,persistence,unit,root,url,orm,xml,catch,ioexception,ex,logger,debug,failed,to,determine,persistence,unit,root,url,from,orm,xml,location,ex,return,scanned,unit
DefaultPersistenceUnitManager -> private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo();1471464767;Perform Spring-based scanning for entity classes._@see #setPackagesToScan;private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() {_		SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()__		scannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName)__		scannedUnit.setExcludeUnlistedClasses(true)___		if (this.packagesToScan != null) {_			for (String pkg : this.packagesToScan) {_				try {_					String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +_							ClassUtils.convertClassNameToResourcePath(pkg) + CLASS_RESOURCE_PATTERN__					Resource[] resources = this.resourcePatternResolver.getResources(pattern)__					MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)__					for (Resource resource : resources) {_						if (resource.isReadable()) {_							MetadataReader reader = readerFactory.getMetadataReader(resource)__							String className = reader.getClassMetadata().getClassName()__							if (matchesFilter(reader, readerFactory)) {_								scannedUnit.addManagedClassName(className)__								if (scannedUnit.getPersistenceUnitRootUrl() == null) {_									URL url = resource.getURL()__									if (ResourceUtils.isJarURL(url)) {_										scannedUnit.setPersistenceUnitRootUrl(ResourceUtils.extractJarFileURL(url))__									}_								}_							}_							else if (className.endsWith(PACKAGE_INFO_SUFFIX)) {_								scannedUnit.addManagedPackage(_										className.substring(0, className.length() - PACKAGE_INFO_SUFFIX.length()))__							}_						}_					}_				}_				catch (IOException ex) {_					throw new PersistenceException("Failed to scan classpath for unlisted entity classes", ex)__				}_			}_		}__		if (this.mappingResources != null) {_			for (String mappingFileName : this.mappingResources) {_				scannedUnit.addMappingFileName(mappingFileName)__			}_		}_		else {_			Resource ormXml = getOrmXmlForDefaultPersistenceUnit()__			if (ormXml != null) {_				scannedUnit.addMappingFileName(DEFAULT_ORM_XML_RESOURCE)__				if (scannedUnit.getPersistenceUnitRootUrl() == null) {_					try {_						scannedUnit.setPersistenceUnitRootUrl(_								PersistenceUnitReader.determinePersistenceUnitRootUrl(ormXml))__					}_					catch (IOException ex) {_						logger.debug("Failed to determine persistence unit root URL from orm.xml location", ex)__					}_				}_			}_		}__		return scannedUnit__	};perform,spring,based,scanning,for,entity,classes,see,set,packages,to,scan;private,spring,persistence,unit,info,build,default,persistence,unit,info,spring,persistence,unit,info,scanned,unit,new,spring,persistence,unit,info,scanned,unit,set,persistence,unit,name,this,default,persistence,unit,name,scanned,unit,set,exclude,unlisted,classes,true,if,this,packages,to,scan,null,for,string,pkg,this,packages,to,scan,try,string,pattern,resource,pattern,resolver,class,utils,convert,class,name,to,resource,path,pkg,resource,resources,this,resource,pattern,resolver,get,resources,pattern,metadata,reader,factory,reader,factory,new,caching,metadata,reader,factory,this,resource,pattern,resolver,for,resource,resource,resources,if,resource,is,readable,metadata,reader,reader,reader,factory,get,metadata,reader,resource,string,class,name,reader,get,class,metadata,get,class,name,if,matches,filter,reader,reader,factory,scanned,unit,add,managed,class,name,class,name,if,scanned,unit,get,persistence,unit,root,url,null,url,url,resource,get,url,if,resource,utils,is,jar,url,url,scanned,unit,set,persistence,unit,root,url,resource,utils,extract,jar,file,url,url,else,if,class,name,ends,with,scanned,unit,add,managed,package,class,name,substring,0,class,name,length,length,catch,ioexception,ex,throw,new,persistence,exception,failed,to,scan,classpath,for,unlisted,entity,classes,ex,if,this,mapping,resources,null,for,string,mapping,file,name,this,mapping,resources,scanned,unit,add,mapping,file,name,mapping,file,name,else,resource,orm,xml,get,orm,xml,for,default,persistence,unit,if,orm,xml,null,scanned,unit,add,mapping,file,name,if,scanned,unit,get,persistence,unit,root,url,null,try,scanned,unit,set,persistence,unit,root,url,persistence,unit,reader,determine,persistence,unit,root,url,orm,xml,catch,ioexception,ex,logger,debug,failed,to,determine,persistence,unit,root,url,from,orm,xml,location,ex,return,scanned,unit
DefaultPersistenceUnitManager -> private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo();1472736647;Perform Spring-based scanning for entity classes._@see #setPackagesToScan;private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() {_		SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()__		scannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName)__		scannedUnit.setExcludeUnlistedClasses(true)___		if (this.packagesToScan != null) {_			for (String pkg : this.packagesToScan) {_				if (this.componentsIndex != null) {_					addPackageFromIndex(scannedUnit, pkg)__				}_				else {_					scanPackage(scannedUnit, pkg)__				}_			}_		}__		if (this.mappingResources != null) {_			for (String mappingFileName : this.mappingResources) {_				scannedUnit.addMappingFileName(mappingFileName)__			}_		}_		else {_			Resource ormXml = getOrmXmlForDefaultPersistenceUnit()__			if (ormXml != null) {_				scannedUnit.addMappingFileName(DEFAULT_ORM_XML_RESOURCE)__				if (scannedUnit.getPersistenceUnitRootUrl() == null) {_					try {_						scannedUnit.setPersistenceUnitRootUrl(_								PersistenceUnitReader.determinePersistenceUnitRootUrl(ormXml))__					}_					catch (IOException ex) {_						logger.debug("Failed to determine persistence unit root URL from orm.xml location", ex)__					}_				}_			}_		}__		return scannedUnit__	};perform,spring,based,scanning,for,entity,classes,see,set,packages,to,scan;private,spring,persistence,unit,info,build,default,persistence,unit,info,spring,persistence,unit,info,scanned,unit,new,spring,persistence,unit,info,scanned,unit,set,persistence,unit,name,this,default,persistence,unit,name,scanned,unit,set,exclude,unlisted,classes,true,if,this,packages,to,scan,null,for,string,pkg,this,packages,to,scan,if,this,components,index,null,add,package,from,index,scanned,unit,pkg,else,scan,package,scanned,unit,pkg,if,this,mapping,resources,null,for,string,mapping,file,name,this,mapping,resources,scanned,unit,add,mapping,file,name,mapping,file,name,else,resource,orm,xml,get,orm,xml,for,default,persistence,unit,if,orm,xml,null,scanned,unit,add,mapping,file,name,if,scanned,unit,get,persistence,unit,root,url,null,try,scanned,unit,set,persistence,unit,root,url,persistence,unit,reader,determine,persistence,unit,root,url,orm,xml,catch,ioexception,ex,logger,debug,failed,to,determine,persistence,unit,root,url,from,orm,xml,location,ex,return,scanned,unit
DefaultPersistenceUnitManager -> private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo();1474895745;Perform Spring-based scanning for entity classes._@see #setPackagesToScan;private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() {_		SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()__		scannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName)__		scannedUnit.setExcludeUnlistedClasses(true)___		if (this.packagesToScan != null) {_			for (String pkg : this.packagesToScan) {_				if (this.componentsIndex != null) {_					addPackageFromIndex(scannedUnit, pkg)__				}_				else {_					scanPackage(scannedUnit, pkg)__				}_			}_		}__		if (this.mappingResources != null) {_			for (String mappingFileName : this.mappingResources) {_				scannedUnit.addMappingFileName(mappingFileName)__			}_		}_		else {_			Resource ormXml = getOrmXmlForDefaultPersistenceUnit()__			if (ormXml != null) {_				scannedUnit.addMappingFileName(DEFAULT_ORM_XML_RESOURCE)__				if (scannedUnit.getPersistenceUnitRootUrl() == null) {_					try {_						scannedUnit.setPersistenceUnitRootUrl(_								PersistenceUnitReader.determinePersistenceUnitRootUrl(ormXml))__					}_					catch (IOException ex) {_						logger.debug("Failed to determine persistence unit root URL from orm.xml location", ex)__					}_				}_			}_		}__		return scannedUnit__	};perform,spring,based,scanning,for,entity,classes,see,set,packages,to,scan;private,spring,persistence,unit,info,build,default,persistence,unit,info,spring,persistence,unit,info,scanned,unit,new,spring,persistence,unit,info,scanned,unit,set,persistence,unit,name,this,default,persistence,unit,name,scanned,unit,set,exclude,unlisted,classes,true,if,this,packages,to,scan,null,for,string,pkg,this,packages,to,scan,if,this,components,index,null,add,package,from,index,scanned,unit,pkg,else,scan,package,scanned,unit,pkg,if,this,mapping,resources,null,for,string,mapping,file,name,this,mapping,resources,scanned,unit,add,mapping,file,name,mapping,file,name,else,resource,orm,xml,get,orm,xml,for,default,persistence,unit,if,orm,xml,null,scanned,unit,add,mapping,file,name,if,scanned,unit,get,persistence,unit,root,url,null,try,scanned,unit,set,persistence,unit,root,url,persistence,unit,reader,determine,persistence,unit,root,url,orm,xml,catch,ioexception,ex,logger,debug,failed,to,determine,persistence,unit,root,url,from,orm,xml,location,ex,return,scanned,unit
DefaultPersistenceUnitManager -> private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo();1495868221;Perform Spring-based scanning for entity classes._@see #setPackagesToScan;private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() {_		SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()__		scannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName)__		scannedUnit.setExcludeUnlistedClasses(true)___		if (this.packagesToScan != null) {_			for (String pkg : this.packagesToScan) {_				if (this.componentsIndex != null) {_					addPackageFromIndex(scannedUnit, pkg)__				}_				else {_					scanPackage(scannedUnit, pkg)__				}_			}_		}__		if (this.mappingResources != null) {_			for (String mappingFileName : this.mappingResources) {_				scannedUnit.addMappingFileName(mappingFileName)__			}_		}_		else {_			Resource ormXml = getOrmXmlForDefaultPersistenceUnit()__			if (ormXml != null) {_				scannedUnit.addMappingFileName(DEFAULT_ORM_XML_RESOURCE)__				if (scannedUnit.getPersistenceUnitRootUrl() == null) {_					try {_						scannedUnit.setPersistenceUnitRootUrl(_								PersistenceUnitReader.determinePersistenceUnitRootUrl(ormXml))__					}_					catch (IOException ex) {_						logger.debug("Failed to determine persistence unit root URL from orm.xml location", ex)__					}_				}_			}_		}__		return scannedUnit__	};perform,spring,based,scanning,for,entity,classes,see,set,packages,to,scan;private,spring,persistence,unit,info,build,default,persistence,unit,info,spring,persistence,unit,info,scanned,unit,new,spring,persistence,unit,info,scanned,unit,set,persistence,unit,name,this,default,persistence,unit,name,scanned,unit,set,exclude,unlisted,classes,true,if,this,packages,to,scan,null,for,string,pkg,this,packages,to,scan,if,this,components,index,null,add,package,from,index,scanned,unit,pkg,else,scan,package,scanned,unit,pkg,if,this,mapping,resources,null,for,string,mapping,file,name,this,mapping,resources,scanned,unit,add,mapping,file,name,mapping,file,name,else,resource,orm,xml,get,orm,xml,for,default,persistence,unit,if,orm,xml,null,scanned,unit,add,mapping,file,name,if,scanned,unit,get,persistence,unit,root,url,null,try,scanned,unit,set,persistence,unit,root,url,persistence,unit,reader,determine,persistence,unit,root,url,orm,xml,catch,ioexception,ex,logger,debug,failed,to,determine,persistence,unit,root,url,from,orm,xml,location,ex,return,scanned,unit
DefaultPersistenceUnitManager -> private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo();1496259743;Perform Spring-based scanning for entity classes._@see #setPackagesToScan;private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() {_		SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()__		scannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName)__		scannedUnit.setExcludeUnlistedClasses(true)___		if (this.packagesToScan != null) {_			for (String pkg : this.packagesToScan) {_				if (this.componentsIndex != null) {_					addPackageFromIndex(scannedUnit, pkg)__				}_				else {_					scanPackage(scannedUnit, pkg)__				}_			}_		}__		if (this.mappingResources != null) {_			for (String mappingFileName : this.mappingResources) {_				scannedUnit.addMappingFileName(mappingFileName)__			}_		}_		else {_			Resource ormXml = getOrmXmlForDefaultPersistenceUnit()__			if (ormXml != null) {_				scannedUnit.addMappingFileName(DEFAULT_ORM_XML_RESOURCE)__				if (scannedUnit.getPersistenceUnitRootUrl() == null) {_					try {_						scannedUnit.setPersistenceUnitRootUrl(_								PersistenceUnitReader.determinePersistenceUnitRootUrl(ormXml))__					}_					catch (IOException ex) {_						logger.debug("Failed to determine persistence unit root URL from orm.xml location", ex)__					}_				}_			}_		}__		return scannedUnit__	};perform,spring,based,scanning,for,entity,classes,see,set,packages,to,scan;private,spring,persistence,unit,info,build,default,persistence,unit,info,spring,persistence,unit,info,scanned,unit,new,spring,persistence,unit,info,scanned,unit,set,persistence,unit,name,this,default,persistence,unit,name,scanned,unit,set,exclude,unlisted,classes,true,if,this,packages,to,scan,null,for,string,pkg,this,packages,to,scan,if,this,components,index,null,add,package,from,index,scanned,unit,pkg,else,scan,package,scanned,unit,pkg,if,this,mapping,resources,null,for,string,mapping,file,name,this,mapping,resources,scanned,unit,add,mapping,file,name,mapping,file,name,else,resource,orm,xml,get,orm,xml,for,default,persistence,unit,if,orm,xml,null,scanned,unit,add,mapping,file,name,if,scanned,unit,get,persistence,unit,root,url,null,try,scanned,unit,set,persistence,unit,root,url,persistence,unit,reader,determine,persistence,unit,root,url,orm,xml,catch,ioexception,ex,logger,debug,failed,to,determine,persistence,unit,root,url,from,orm,xml,location,ex,return,scanned,unit
DefaultPersistenceUnitManager -> private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo();1496837955;Perform Spring-based scanning for entity classes._@see #setPackagesToScan;private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() {_		SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()__		scannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName)__		scannedUnit.setExcludeUnlistedClasses(true)___		if (this.packagesToScan != null) {_			for (String pkg : this.packagesToScan) {_				if (this.componentsIndex != null) {_					addPackageFromIndex(scannedUnit, pkg)__				}_				else {_					scanPackage(scannedUnit, pkg)__				}_			}_		}__		if (this.mappingResources != null) {_			for (String mappingFileName : this.mappingResources) {_				scannedUnit.addMappingFileName(mappingFileName)__			}_		}_		else {_			Resource ormXml = getOrmXmlForDefaultPersistenceUnit()__			if (ormXml != null) {_				scannedUnit.addMappingFileName(DEFAULT_ORM_XML_RESOURCE)__				if (scannedUnit.getPersistenceUnitRootUrl() == null) {_					try {_						scannedUnit.setPersistenceUnitRootUrl(_								PersistenceUnitReader.determinePersistenceUnitRootUrl(ormXml))__					}_					catch (IOException ex) {_						logger.debug("Failed to determine persistence unit root URL from orm.xml location", ex)__					}_				}_			}_		}__		return scannedUnit__	};perform,spring,based,scanning,for,entity,classes,see,set,packages,to,scan;private,spring,persistence,unit,info,build,default,persistence,unit,info,spring,persistence,unit,info,scanned,unit,new,spring,persistence,unit,info,scanned,unit,set,persistence,unit,name,this,default,persistence,unit,name,scanned,unit,set,exclude,unlisted,classes,true,if,this,packages,to,scan,null,for,string,pkg,this,packages,to,scan,if,this,components,index,null,add,package,from,index,scanned,unit,pkg,else,scan,package,scanned,unit,pkg,if,this,mapping,resources,null,for,string,mapping,file,name,this,mapping,resources,scanned,unit,add,mapping,file,name,mapping,file,name,else,resource,orm,xml,get,orm,xml,for,default,persistence,unit,if,orm,xml,null,scanned,unit,add,mapping,file,name,if,scanned,unit,get,persistence,unit,root,url,null,try,scanned,unit,set,persistence,unit,root,url,persistence,unit,reader,determine,persistence,unit,root,url,orm,xml,catch,ioexception,ex,logger,debug,failed,to,determine,persistence,unit,root,url,from,orm,xml,location,ex,return,scanned,unit
DefaultPersistenceUnitManager -> private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo();1498780456;Perform Spring-based scanning for entity classes._@see #setPackagesToScan;private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() {_		SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()__		if (this.defaultPersistenceUnitName != null) {_			scannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName)__		}_		scannedUnit.setExcludeUnlistedClasses(true)___		if (this.packagesToScan != null) {_			for (String pkg : this.packagesToScan) {_				scanPackage(scannedUnit, pkg)__			}_		}__		if (this.mappingResources != null) {_			for (String mappingFileName : this.mappingResources) {_				scannedUnit.addMappingFileName(mappingFileName)__			}_		}_		else {_			Resource ormXml = getOrmXmlForDefaultPersistenceUnit()__			if (ormXml != null) {_				scannedUnit.addMappingFileName(DEFAULT_ORM_XML_RESOURCE)__				if (scannedUnit.getPersistenceUnitRootUrl() == null) {_					try {_						scannedUnit.setPersistenceUnitRootUrl(_								PersistenceUnitReader.determinePersistenceUnitRootUrl(ormXml))__					}_					catch (IOException ex) {_						logger.debug("Failed to determine persistence unit root URL from orm.xml location", ex)__					}_				}_			}_		}__		return scannedUnit__	};perform,spring,based,scanning,for,entity,classes,see,set,packages,to,scan;private,spring,persistence,unit,info,build,default,persistence,unit,info,spring,persistence,unit,info,scanned,unit,new,spring,persistence,unit,info,if,this,default,persistence,unit,name,null,scanned,unit,set,persistence,unit,name,this,default,persistence,unit,name,scanned,unit,set,exclude,unlisted,classes,true,if,this,packages,to,scan,null,for,string,pkg,this,packages,to,scan,scan,package,scanned,unit,pkg,if,this,mapping,resources,null,for,string,mapping,file,name,this,mapping,resources,scanned,unit,add,mapping,file,name,mapping,file,name,else,resource,orm,xml,get,orm,xml,for,default,persistence,unit,if,orm,xml,null,scanned,unit,add,mapping,file,name,if,scanned,unit,get,persistence,unit,root,url,null,try,scanned,unit,set,persistence,unit,root,url,persistence,unit,reader,determine,persistence,unit,root,url,orm,xml,catch,ioexception,ex,logger,debug,failed,to,determine,persistence,unit,root,url,from,orm,xml,location,ex,return,scanned,unit
DefaultPersistenceUnitManager -> private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo();1500448076;Perform Spring-based scanning for entity classes._@see #setPackagesToScan;private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() {_		SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()__		if (this.defaultPersistenceUnitName != null) {_			scannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName)__		}_		scannedUnit.setExcludeUnlistedClasses(true)___		if (this.packagesToScan != null) {_			for (String pkg : this.packagesToScan) {_				scanPackage(scannedUnit, pkg)__			}_		}__		if (this.mappingResources != null) {_			for (String mappingFileName : this.mappingResources) {_				scannedUnit.addMappingFileName(mappingFileName)__			}_		}_		else {_			Resource ormXml = getOrmXmlForDefaultPersistenceUnit()__			if (ormXml != null) {_				scannedUnit.addMappingFileName(DEFAULT_ORM_XML_RESOURCE)__				if (scannedUnit.getPersistenceUnitRootUrl() == null) {_					try {_						scannedUnit.setPersistenceUnitRootUrl(_								PersistenceUnitReader.determinePersistenceUnitRootUrl(ormXml))__					}_					catch (IOException ex) {_						logger.debug("Failed to determine persistence unit root URL from orm.xml location", ex)__					}_				}_			}_		}__		return scannedUnit__	};perform,spring,based,scanning,for,entity,classes,see,set,packages,to,scan;private,spring,persistence,unit,info,build,default,persistence,unit,info,spring,persistence,unit,info,scanned,unit,new,spring,persistence,unit,info,if,this,default,persistence,unit,name,null,scanned,unit,set,persistence,unit,name,this,default,persistence,unit,name,scanned,unit,set,exclude,unlisted,classes,true,if,this,packages,to,scan,null,for,string,pkg,this,packages,to,scan,scan,package,scanned,unit,pkg,if,this,mapping,resources,null,for,string,mapping,file,name,this,mapping,resources,scanned,unit,add,mapping,file,name,mapping,file,name,else,resource,orm,xml,get,orm,xml,for,default,persistence,unit,if,orm,xml,null,scanned,unit,add,mapping,file,name,if,scanned,unit,get,persistence,unit,root,url,null,try,scanned,unit,set,persistence,unit,root,url,persistence,unit,reader,determine,persistence,unit,root,url,orm,xml,catch,ioexception,ex,logger,debug,failed,to,determine,persistence,unit,root,url,from,orm,xml,location,ex,return,scanned,unit
DefaultPersistenceUnitManager -> private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo();1520528267;Perform Spring-based scanning for entity classes._@see #setPackagesToScan;private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() {_		SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()__		if (this.defaultPersistenceUnitName != null) {_			scannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName)__		}_		scannedUnit.setExcludeUnlistedClasses(true)___		if (this.packagesToScan != null) {_			for (String pkg : this.packagesToScan) {_				scanPackage(scannedUnit, pkg)__			}_		}__		if (this.mappingResources != null) {_			for (String mappingFileName : this.mappingResources) {_				scannedUnit.addMappingFileName(mappingFileName)__			}_		}_		else {_			Resource ormXml = getOrmXmlForDefaultPersistenceUnit()__			if (ormXml != null) {_				scannedUnit.addMappingFileName(DEFAULT_ORM_XML_RESOURCE)__				if (scannedUnit.getPersistenceUnitRootUrl() == null) {_					try {_						scannedUnit.setPersistenceUnitRootUrl(_								PersistenceUnitReader.determinePersistenceUnitRootUrl(ormXml))__					}_					catch (IOException ex) {_						logger.debug("Failed to determine persistence unit root URL from orm.xml location", ex)__					}_				}_			}_		}__		return scannedUnit__	};perform,spring,based,scanning,for,entity,classes,see,set,packages,to,scan;private,spring,persistence,unit,info,build,default,persistence,unit,info,spring,persistence,unit,info,scanned,unit,new,spring,persistence,unit,info,if,this,default,persistence,unit,name,null,scanned,unit,set,persistence,unit,name,this,default,persistence,unit,name,scanned,unit,set,exclude,unlisted,classes,true,if,this,packages,to,scan,null,for,string,pkg,this,packages,to,scan,scan,package,scanned,unit,pkg,if,this,mapping,resources,null,for,string,mapping,file,name,this,mapping,resources,scanned,unit,add,mapping,file,name,mapping,file,name,else,resource,orm,xml,get,orm,xml,for,default,persistence,unit,if,orm,xml,null,scanned,unit,add,mapping,file,name,if,scanned,unit,get,persistence,unit,root,url,null,try,scanned,unit,set,persistence,unit,root,url,persistence,unit,reader,determine,persistence,unit,root,url,orm,xml,catch,ioexception,ex,logger,debug,failed,to,determine,persistence,unit,root,url,from,orm,xml,location,ex,return,scanned,unit
DefaultPersistenceUnitManager -> private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo();1528313484;Perform Spring-based scanning for entity classes._@see #setPackagesToScan;private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() {_		SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()__		if (this.defaultPersistenceUnitName != null) {_			scannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName)__		}_		scannedUnit.setExcludeUnlistedClasses(true)___		if (this.packagesToScan != null) {_			for (String pkg : this.packagesToScan) {_				scanPackage(scannedUnit, pkg)__			}_		}__		if (this.mappingResources != null) {_			for (String mappingFileName : this.mappingResources) {_				scannedUnit.addMappingFileName(mappingFileName)__			}_		}_		else {_			Resource ormXml = getOrmXmlForDefaultPersistenceUnit()__			if (ormXml != null) {_				scannedUnit.addMappingFileName(DEFAULT_ORM_XML_RESOURCE)__				if (scannedUnit.getPersistenceUnitRootUrl() == null) {_					try {_						scannedUnit.setPersistenceUnitRootUrl(_								PersistenceUnitReader.determinePersistenceUnitRootUrl(ormXml))__					}_					catch (IOException ex) {_						logger.debug("Failed to determine persistence unit root URL from orm.xml location", ex)__					}_				}_			}_		}__		return scannedUnit__	};perform,spring,based,scanning,for,entity,classes,see,set,packages,to,scan;private,spring,persistence,unit,info,build,default,persistence,unit,info,spring,persistence,unit,info,scanned,unit,new,spring,persistence,unit,info,if,this,default,persistence,unit,name,null,scanned,unit,set,persistence,unit,name,this,default,persistence,unit,name,scanned,unit,set,exclude,unlisted,classes,true,if,this,packages,to,scan,null,for,string,pkg,this,packages,to,scan,scan,package,scanned,unit,pkg,if,this,mapping,resources,null,for,string,mapping,file,name,this,mapping,resources,scanned,unit,add,mapping,file,name,mapping,file,name,else,resource,orm,xml,get,orm,xml,for,default,persistence,unit,if,orm,xml,null,scanned,unit,add,mapping,file,name,if,scanned,unit,get,persistence,unit,root,url,null,try,scanned,unit,set,persistence,unit,root,url,persistence,unit,reader,determine,persistence,unit,root,url,orm,xml,catch,ioexception,ex,logger,debug,failed,to,determine,persistence,unit,root,url,from,orm,xml,location,ex,return,scanned,unit
DefaultPersistenceUnitManager -> private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo();1530174524;Perform Spring-based scanning for entity classes._@see #setPackagesToScan;private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() {_		SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()__		if (this.defaultPersistenceUnitName != null) {_			scannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName)__		}_		scannedUnit.setExcludeUnlistedClasses(true)___		if (this.packagesToScan != null) {_			for (String pkg : this.packagesToScan) {_				scanPackage(scannedUnit, pkg)__			}_		}__		if (this.mappingResources != null) {_			for (String mappingFileName : this.mappingResources) {_				scannedUnit.addMappingFileName(mappingFileName)__			}_		}_		else {_			Resource ormXml = getOrmXmlForDefaultPersistenceUnit()__			if (ormXml != null) {_				scannedUnit.addMappingFileName(DEFAULT_ORM_XML_RESOURCE)__				if (scannedUnit.getPersistenceUnitRootUrl() == null) {_					try {_						scannedUnit.setPersistenceUnitRootUrl(_								PersistenceUnitReader.determinePersistenceUnitRootUrl(ormXml))__					}_					catch (IOException ex) {_						logger.debug("Failed to determine persistence unit root URL from orm.xml location", ex)__					}_				}_			}_		}__		return scannedUnit__	};perform,spring,based,scanning,for,entity,classes,see,set,packages,to,scan;private,spring,persistence,unit,info,build,default,persistence,unit,info,spring,persistence,unit,info,scanned,unit,new,spring,persistence,unit,info,if,this,default,persistence,unit,name,null,scanned,unit,set,persistence,unit,name,this,default,persistence,unit,name,scanned,unit,set,exclude,unlisted,classes,true,if,this,packages,to,scan,null,for,string,pkg,this,packages,to,scan,scan,package,scanned,unit,pkg,if,this,mapping,resources,null,for,string,mapping,file,name,this,mapping,resources,scanned,unit,add,mapping,file,name,mapping,file,name,else,resource,orm,xml,get,orm,xml,for,default,persistence,unit,if,orm,xml,null,scanned,unit,add,mapping,file,name,if,scanned,unit,get,persistence,unit,root,url,null,try,scanned,unit,set,persistence,unit,root,url,persistence,unit,reader,determine,persistence,unit,root,url,orm,xml,catch,ioexception,ex,logger,debug,failed,to,determine,persistence,unit,root,url,from,orm,xml,location,ex,return,scanned,unit
DefaultPersistenceUnitManager -> private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo();1532091916;Perform Spring-based scanning for entity classes._@see #setPackagesToScan;private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() {_		SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()__		if (this.defaultPersistenceUnitName != null) {_			scannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName)__		}_		scannedUnit.setExcludeUnlistedClasses(true)___		if (this.packagesToScan != null) {_			for (String pkg : this.packagesToScan) {_				scanPackage(scannedUnit, pkg)__			}_		}__		if (this.mappingResources != null) {_			for (String mappingFileName : this.mappingResources) {_				scannedUnit.addMappingFileName(mappingFileName)__			}_		}_		else {_			Resource ormXml = getOrmXmlForDefaultPersistenceUnit()__			if (ormXml != null) {_				scannedUnit.addMappingFileName(DEFAULT_ORM_XML_RESOURCE)__				if (scannedUnit.getPersistenceUnitRootUrl() == null) {_					try {_						scannedUnit.setPersistenceUnitRootUrl(_								PersistenceUnitReader.determinePersistenceUnitRootUrl(ormXml))__					}_					catch (IOException ex) {_						logger.debug("Failed to determine persistence unit root URL from orm.xml location", ex)__					}_				}_			}_		}__		return scannedUnit__	};perform,spring,based,scanning,for,entity,classes,see,set,packages,to,scan;private,spring,persistence,unit,info,build,default,persistence,unit,info,spring,persistence,unit,info,scanned,unit,new,spring,persistence,unit,info,if,this,default,persistence,unit,name,null,scanned,unit,set,persistence,unit,name,this,default,persistence,unit,name,scanned,unit,set,exclude,unlisted,classes,true,if,this,packages,to,scan,null,for,string,pkg,this,packages,to,scan,scan,package,scanned,unit,pkg,if,this,mapping,resources,null,for,string,mapping,file,name,this,mapping,resources,scanned,unit,add,mapping,file,name,mapping,file,name,else,resource,orm,xml,get,orm,xml,for,default,persistence,unit,if,orm,xml,null,scanned,unit,add,mapping,file,name,if,scanned,unit,get,persistence,unit,root,url,null,try,scanned,unit,set,persistence,unit,root,url,persistence,unit,reader,determine,persistence,unit,root,url,orm,xml,catch,ioexception,ex,logger,debug,failed,to,determine,persistence,unit,root,url,from,orm,xml,location,ex,return,scanned,unit
DefaultPersistenceUnitManager -> public void setMappingResources(String... mappingResources);1328020251;Specify one or more mapping resources (equivalent to <code>&lt_mapping-file&gt_</code>_entries in <code>persistence.xml</code>) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding <code>persistence.xml</code>._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through <code>ClassLoader.getResource</code>._@see #setPackagesToScan;public void setMappingResources(String... mappingResources) {_		this.mappingResources = mappingResources__	};specify,one,or,more,mapping,resources,equivalent,to,code,lt,mapping,file,gt,code,entries,in,code,persistence,xml,code,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,code,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,code,see,set,packages,to,scan;public,void,set,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources
DefaultPersistenceUnitManager -> public void setMappingResources(String... mappingResources);1329142650;Specify one or more mapping resources (equivalent to <code>&lt_mapping-file&gt_</code>_entries in <code>persistence.xml</code>) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding <code>persistence.xml</code>._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through <code>ClassLoader.getResource</code>._@see #setPackagesToScan;public void setMappingResources(String... mappingResources) {_		this.mappingResources = mappingResources__	};specify,one,or,more,mapping,resources,equivalent,to,code,lt,mapping,file,gt,code,entries,in,code,persistence,xml,code,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,code,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,code,see,set,packages,to,scan;public,void,set,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources
DefaultPersistenceUnitManager -> public void setMappingResources(String... mappingResources);1347282851;Specify one or more mapping resources (equivalent to <code>&lt_mapping-file&gt_</code>_entries in <code>persistence.xml</code>) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding <code>persistence.xml</code>._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through <code>ClassLoader.getResource</code>._@see #setPackagesToScan;public void setMappingResources(String... mappingResources) {_		this.mappingResources = mappingResources__	};specify,one,or,more,mapping,resources,equivalent,to,code,lt,mapping,file,gt,code,entries,in,code,persistence,xml,code,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,code,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,code,see,set,packages,to,scan;public,void,set,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources
DefaultPersistenceUnitManager -> public void setMappingResources(String... mappingResources);1351648399;Specify one or more mapping resources (equivalent to <code>&lt_mapping-file&gt_</code>_entries in <code>persistence.xml</code>) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding <code>persistence.xml</code>._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through <code>ClassLoader.getResource</code>._@see #setPackagesToScan;public void setMappingResources(String... mappingResources) {_		this.mappingResources = mappingResources__	};specify,one,or,more,mapping,resources,equivalent,to,code,lt,mapping,file,gt,code,entries,in,code,persistence,xml,code,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,code,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,code,see,set,packages,to,scan;public,void,set,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources
DefaultPersistenceUnitManager -> public void setMappingResources(String... mappingResources);1356735495;Specify one or more mapping resources (equivalent to {@code &lt_mapping-file&gt_}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._@see #setPackagesToScan;public void setMappingResources(String... mappingResources) {_		this.mappingResources = mappingResources__	};specify,one,or,more,mapping,resources,equivalent,to,code,lt,mapping,file,gt,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,see,set,packages,to,scan;public,void,set,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources
DefaultPersistenceUnitManager -> public void setMappingResources(String... mappingResources);1357119239;Specify one or more mapping resources (equivalent to {@code &lt_mapping-file&gt_}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._@see #setPackagesToScan;public void setMappingResources(String... mappingResources) {_		this.mappingResources = mappingResources__	};specify,one,or,more,mapping,resources,equivalent,to,code,lt,mapping,file,gt,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,see,set,packages,to,scan;public,void,set,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources
DefaultPersistenceUnitManager -> public void setMappingResources(String... mappingResources);1363714444;Specify one or more mapping resources (equivalent to {@code &lt_mapping-file&gt_}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._@see #setPackagesToScan;public void setMappingResources(String... mappingResources) {_		this.mappingResources = mappingResources__	};specify,one,or,more,mapping,resources,equivalent,to,code,lt,mapping,file,gt,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,see,set,packages,to,scan;public,void,set,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources
DefaultPersistenceUnitManager -> public void setMappingResources(String... mappingResources);1368482696;Specify one or more mapping resources (equivalent to {@code &lt_mapping-file&gt_}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._@see #setPackagesToScan;public void setMappingResources(String... mappingResources) {_		this.mappingResources = mappingResources__	};specify,one,or,more,mapping,resources,equivalent,to,code,lt,mapping,file,gt,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,see,set,packages,to,scan;public,void,set,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources
DefaultPersistenceUnitManager -> public void setMappingResources(String... mappingResources);1375434510;Specify one or more mapping resources (equivalent to {@code &lt_mapping-file&gt_}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._@see #setPackagesToScan;public void setMappingResources(String... mappingResources) {_		this.mappingResources = mappingResources__	};specify,one,or,more,mapping,resources,equivalent,to,code,lt,mapping,file,gt,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,see,set,packages,to,scan;public,void,set,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources
DefaultPersistenceUnitManager -> public void setMappingResources(String... mappingResources);1375458214;Specify one or more mapping resources (equivalent to {@code &lt_mapping-file&gt_}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._@see #setPackagesToScan;public void setMappingResources(String... mappingResources) {_		this.mappingResources = mappingResources__	};specify,one,or,more,mapping,resources,equivalent,to,code,lt,mapping,file,gt,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,see,set,packages,to,scan;public,void,set,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources
DefaultPersistenceUnitManager -> public void setMappingResources(String... mappingResources);1389648334;Specify one or more mapping resources (equivalent to {@code &lt_mapping-file&gt_}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._@see #setPackagesToScan;public void setMappingResources(String... mappingResources) {_		this.mappingResources = mappingResources__	};specify,one,or,more,mapping,resources,equivalent,to,code,lt,mapping,file,gt,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,see,set,packages,to,scan;public,void,set,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources
DefaultPersistenceUnitManager -> public void setMappingResources(String... mappingResources);1390250900;Specify one or more mapping resources (equivalent to {@code &lt_mapping-file&gt_}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._@see #setPackagesToScan;public void setMappingResources(String... mappingResources) {_		this.mappingResources = mappingResources__	};specify,one,or,more,mapping,resources,equivalent,to,code,lt,mapping,file,gt,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,see,set,packages,to,scan;public,void,set,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources
DefaultPersistenceUnitManager -> public void setMappingResources(String... mappingResources);1390313076;Specify one or more mapping resources (equivalent to {@code &lt_mapping-file&gt_}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p>If no explicit mapping resources have been specified next to_{@link #setPackagesToScan packages to scan}, this manager looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p>Note that specifying an empty array/list here suppresses the default_{@code META-INF/orm.xml} check. On the other hand, explicitly specifying_{@code META-INF/orm.xml} here will register that file even if it happens_to be co-located with a {@code persistence.xml} file._@see #setDefaultPersistenceUnitName_@see #setPackagesToScan;public void setMappingResources(String... mappingResources) {_		this.mappingResources = mappingResources__	};specify,one,or,more,mapping,resources,equivalent,to,code,lt,mapping,file,gt,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,if,no,explicit,mapping,resources,have,been,specified,next,to,link,set,packages,to,scan,packages,to,scan,this,manager,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,note,that,specifying,an,empty,array,list,here,suppresses,the,default,code,meta,inf,orm,xml,check,on,the,other,hand,explicitly,specifying,code,meta,inf,orm,xml,here,will,register,that,file,even,if,it,happens,to,be,co,located,with,a,code,persistence,xml,file,see,set,default,persistence,unit,name,see,set,packages,to,scan;public,void,set,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources
DefaultPersistenceUnitManager -> public void setMappingResources(String... mappingResources);1400140571;Specify one or more mapping resources (equivalent to {@code &lt_mapping-file&gt_}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p>If no explicit mapping resources have been specified next to_{@link #setPackagesToScan packages to scan}, this manager looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p>Note that specifying an empty array/list here suppresses the default_{@code META-INF/orm.xml} check. On the other hand, explicitly specifying_{@code META-INF/orm.xml} here will register that file even if it happens_to be co-located with a {@code persistence.xml} file._@see #setDefaultPersistenceUnitName_@see #setPackagesToScan;public void setMappingResources(String... mappingResources) {_		this.mappingResources = mappingResources__	};specify,one,or,more,mapping,resources,equivalent,to,code,lt,mapping,file,gt,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,if,no,explicit,mapping,resources,have,been,specified,next,to,link,set,packages,to,scan,packages,to,scan,this,manager,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,note,that,specifying,an,empty,array,list,here,suppresses,the,default,code,meta,inf,orm,xml,check,on,the,other,hand,explicitly,specifying,code,meta,inf,orm,xml,here,will,register,that,file,even,if,it,happens,to,be,co,located,with,a,code,persistence,xml,file,see,set,default,persistence,unit,name,see,set,packages,to,scan;public,void,set,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources
DefaultPersistenceUnitManager -> public void setMappingResources(String... mappingResources);1403774750;Specify one or more mapping resources (equivalent to {@code &lt_mapping-file&gt_}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p>If no explicit mapping resources have been specified next to_{@link #setPackagesToScan packages to scan}, this manager looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p>Note that specifying an empty array/list here suppresses the default_{@code META-INF/orm.xml} check. On the other hand, explicitly specifying_{@code META-INF/orm.xml} here will register that file even if it happens_to be co-located with a {@code persistence.xml} file._@see #setDefaultPersistenceUnitName_@see #setPackagesToScan;public void setMappingResources(String... mappingResources) {_		this.mappingResources = mappingResources__	};specify,one,or,more,mapping,resources,equivalent,to,code,lt,mapping,file,gt,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,if,no,explicit,mapping,resources,have,been,specified,next,to,link,set,packages,to,scan,packages,to,scan,this,manager,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,note,that,specifying,an,empty,array,list,here,suppresses,the,default,code,meta,inf,orm,xml,check,on,the,other,hand,explicitly,specifying,code,meta,inf,orm,xml,here,will,register,that,file,even,if,it,happens,to,be,co,located,with,a,code,persistence,xml,file,see,set,default,persistence,unit,name,see,set,packages,to,scan;public,void,set,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources
DefaultPersistenceUnitManager -> public void setMappingResources(String... mappingResources);1404056186;Specify one or more mapping resources (equivalent to {@code &lt_mapping-file&gt_}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p>If no explicit mapping resources have been specified next to_{@link #setPackagesToScan packages to scan}, this manager looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p>Note that specifying an empty array/list here suppresses the default_{@code META-INF/orm.xml} check. On the other hand, explicitly specifying_{@code META-INF/orm.xml} here will register that file even if it happens_to be co-located with a {@code persistence.xml} file._@see #setDefaultPersistenceUnitName_@see #setPackagesToScan;public void setMappingResources(String... mappingResources) {_		this.mappingResources = mappingResources__	};specify,one,or,more,mapping,resources,equivalent,to,code,lt,mapping,file,gt,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,if,no,explicit,mapping,resources,have,been,specified,next,to,link,set,packages,to,scan,packages,to,scan,this,manager,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,note,that,specifying,an,empty,array,list,here,suppresses,the,default,code,meta,inf,orm,xml,check,on,the,other,hand,explicitly,specifying,code,meta,inf,orm,xml,here,will,register,that,file,even,if,it,happens,to,be,co,located,with,a,code,persistence,xml,file,see,set,default,persistence,unit,name,see,set,packages,to,scan;public,void,set,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources
DefaultPersistenceUnitManager -> public void setMappingResources(String... mappingResources);1447323728;Specify one or more mapping resources (equivalent to {@code <mapping-file>}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p>If no explicit mapping resources have been specified next to_{@link #setPackagesToScan packages to scan}, this manager looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p>Note that specifying an empty array/list here suppresses the default_{@code META-INF/orm.xml} check. On the other hand, explicitly specifying_{@code META-INF/orm.xml} here will register that file even if it happens_to be co-located with a {@code persistence.xml} file._@see #setDefaultPersistenceUnitName_@see #setPackagesToScan;public void setMappingResources(String... mappingResources) {_		this.mappingResources = mappingResources__	};specify,one,or,more,mapping,resources,equivalent,to,code,mapping,file,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,if,no,explicit,mapping,resources,have,been,specified,next,to,link,set,packages,to,scan,packages,to,scan,this,manager,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,note,that,specifying,an,empty,array,list,here,suppresses,the,default,code,meta,inf,orm,xml,check,on,the,other,hand,explicitly,specifying,code,meta,inf,orm,xml,here,will,register,that,file,even,if,it,happens,to,be,co,located,with,a,code,persistence,xml,file,see,set,default,persistence,unit,name,see,set,packages,to,scan;public,void,set,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources
DefaultPersistenceUnitManager -> public void setMappingResources(String... mappingResources);1464299869;Specify one or more mapping resources (equivalent to {@code <mapping-file>}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p>If no explicit mapping resources have been specified next to_{@link #setPackagesToScan packages to scan}, this manager looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p>Note that specifying an empty array/list here suppresses the default_{@code META-INF/orm.xml} check. On the other hand, explicitly specifying_{@code META-INF/orm.xml} here will register that file even if it happens_to be co-located with a {@code persistence.xml} file._@see #setDefaultPersistenceUnitName_@see #setPackagesToScan;public void setMappingResources(String... mappingResources) {_		this.mappingResources = mappingResources__	};specify,one,or,more,mapping,resources,equivalent,to,code,mapping,file,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,if,no,explicit,mapping,resources,have,been,specified,next,to,link,set,packages,to,scan,packages,to,scan,this,manager,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,note,that,specifying,an,empty,array,list,here,suppresses,the,default,code,meta,inf,orm,xml,check,on,the,other,hand,explicitly,specifying,code,meta,inf,orm,xml,here,will,register,that,file,even,if,it,happens,to,be,co,located,with,a,code,persistence,xml,file,see,set,default,persistence,unit,name,see,set,packages,to,scan;public,void,set,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources
DefaultPersistenceUnitManager -> public void setMappingResources(String... mappingResources);1467668243;Specify one or more mapping resources (equivalent to {@code <mapping-file>}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p>If no explicit mapping resources have been specified next to_{@link #setPackagesToScan packages to scan}, this manager looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p>Note that specifying an empty array/list here suppresses the default_{@code META-INF/orm.xml} check. On the other hand, explicitly specifying_{@code META-INF/orm.xml} here will register that file even if it happens_to be co-located with a {@code persistence.xml} file._@see #setDefaultPersistenceUnitName_@see #setPackagesToScan;public void setMappingResources(String... mappingResources) {_		this.mappingResources = mappingResources__	};specify,one,or,more,mapping,resources,equivalent,to,code,mapping,file,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,if,no,explicit,mapping,resources,have,been,specified,next,to,link,set,packages,to,scan,packages,to,scan,this,manager,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,note,that,specifying,an,empty,array,list,here,suppresses,the,default,code,meta,inf,orm,xml,check,on,the,other,hand,explicitly,specifying,code,meta,inf,orm,xml,here,will,register,that,file,even,if,it,happens,to,be,co,located,with,a,code,persistence,xml,file,see,set,default,persistence,unit,name,see,set,packages,to,scan;public,void,set,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources
DefaultPersistenceUnitManager -> public void setMappingResources(String... mappingResources);1467730834;Specify one or more mapping resources (equivalent to {@code <mapping-file>}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p>If no explicit mapping resources have been specified next to_{@link #setPackagesToScan packages to scan}, this manager looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p>Note that specifying an empty array/list here suppresses the default_{@code META-INF/orm.xml} check. On the other hand, explicitly specifying_{@code META-INF/orm.xml} here will register that file even if it happens_to be co-located with a {@code persistence.xml} file._@see #setDefaultPersistenceUnitName_@see #setPackagesToScan;public void setMappingResources(String... mappingResources) {_		this.mappingResources = mappingResources__	};specify,one,or,more,mapping,resources,equivalent,to,code,mapping,file,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,if,no,explicit,mapping,resources,have,been,specified,next,to,link,set,packages,to,scan,packages,to,scan,this,manager,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,note,that,specifying,an,empty,array,list,here,suppresses,the,default,code,meta,inf,orm,xml,check,on,the,other,hand,explicitly,specifying,code,meta,inf,orm,xml,here,will,register,that,file,even,if,it,happens,to,be,co,located,with,a,code,persistence,xml,file,see,set,default,persistence,unit,name,see,set,packages,to,scan;public,void,set,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources
DefaultPersistenceUnitManager -> public void setMappingResources(String... mappingResources);1471464767;Specify one or more mapping resources (equivalent to {@code <mapping-file>}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p>If no explicit mapping resources have been specified next to_{@link #setPackagesToScan packages to scan}, this manager looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p>Note that specifying an empty array/list here suppresses the default_{@code META-INF/orm.xml} check. On the other hand, explicitly specifying_{@code META-INF/orm.xml} here will register that file even if it happens_to be co-located with a {@code persistence.xml} file._@see #setDefaultPersistenceUnitName_@see #setPackagesToScan;public void setMappingResources(String... mappingResources) {_		this.mappingResources = mappingResources__	};specify,one,or,more,mapping,resources,equivalent,to,code,mapping,file,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,if,no,explicit,mapping,resources,have,been,specified,next,to,link,set,packages,to,scan,packages,to,scan,this,manager,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,note,that,specifying,an,empty,array,list,here,suppresses,the,default,code,meta,inf,orm,xml,check,on,the,other,hand,explicitly,specifying,code,meta,inf,orm,xml,here,will,register,that,file,even,if,it,happens,to,be,co,located,with,a,code,persistence,xml,file,see,set,default,persistence,unit,name,see,set,packages,to,scan;public,void,set,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources
DefaultPersistenceUnitManager -> public void setMappingResources(String... mappingResources);1472736647;Specify one or more mapping resources (equivalent to {@code <mapping-file>}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p>If no explicit mapping resources have been specified next to_{@link #setPackagesToScan packages to scan}, this manager looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p>Note that specifying an empty array/list here suppresses the default_{@code META-INF/orm.xml} check. On the other hand, explicitly specifying_{@code META-INF/orm.xml} here will register that file even if it happens_to be co-located with a {@code persistence.xml} file._@see #setDefaultPersistenceUnitName_@see #setPackagesToScan;public void setMappingResources(String... mappingResources) {_		this.mappingResources = mappingResources__	};specify,one,or,more,mapping,resources,equivalent,to,code,mapping,file,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,if,no,explicit,mapping,resources,have,been,specified,next,to,link,set,packages,to,scan,packages,to,scan,this,manager,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,note,that,specifying,an,empty,array,list,here,suppresses,the,default,code,meta,inf,orm,xml,check,on,the,other,hand,explicitly,specifying,code,meta,inf,orm,xml,here,will,register,that,file,even,if,it,happens,to,be,co,located,with,a,code,persistence,xml,file,see,set,default,persistence,unit,name,see,set,packages,to,scan;public,void,set,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources
DefaultPersistenceUnitManager -> public void setMappingResources(String... mappingResources);1474895745;Specify one or more mapping resources (equivalent to {@code <mapping-file>}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p>If no explicit mapping resources have been specified next to_{@link #setPackagesToScan packages to scan}, this manager looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p>Note that specifying an empty array/list here suppresses the default_{@code META-INF/orm.xml} check. On the other hand, explicitly specifying_{@code META-INF/orm.xml} here will register that file even if it happens_to be co-located with a {@code persistence.xml} file._@see #setDefaultPersistenceUnitName_@see #setPackagesToScan;public void setMappingResources(String... mappingResources) {_		this.mappingResources = mappingResources__	};specify,one,or,more,mapping,resources,equivalent,to,code,mapping,file,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,if,no,explicit,mapping,resources,have,been,specified,next,to,link,set,packages,to,scan,packages,to,scan,this,manager,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,note,that,specifying,an,empty,array,list,here,suppresses,the,default,code,meta,inf,orm,xml,check,on,the,other,hand,explicitly,specifying,code,meta,inf,orm,xml,here,will,register,that,file,even,if,it,happens,to,be,co,located,with,a,code,persistence,xml,file,see,set,default,persistence,unit,name,see,set,packages,to,scan;public,void,set,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources
DefaultPersistenceUnitManager -> public void setMappingResources(String... mappingResources);1495868221;Specify one or more mapping resources (equivalent to {@code <mapping-file>}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p>If no explicit mapping resources have been specified next to_{@link #setPackagesToScan packages to scan}, this manager looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p>Note that specifying an empty array/list here suppresses the default_{@code META-INF/orm.xml} check. On the other hand, explicitly specifying_{@code META-INF/orm.xml} here will register that file even if it happens_to be co-located with a {@code persistence.xml} file._@see #setDefaultPersistenceUnitName_@see #setPackagesToScan;public void setMappingResources(String... mappingResources) {_		this.mappingResources = mappingResources__	};specify,one,or,more,mapping,resources,equivalent,to,code,mapping,file,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,if,no,explicit,mapping,resources,have,been,specified,next,to,link,set,packages,to,scan,packages,to,scan,this,manager,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,note,that,specifying,an,empty,array,list,here,suppresses,the,default,code,meta,inf,orm,xml,check,on,the,other,hand,explicitly,specifying,code,meta,inf,orm,xml,here,will,register,that,file,even,if,it,happens,to,be,co,located,with,a,code,persistence,xml,file,see,set,default,persistence,unit,name,see,set,packages,to,scan;public,void,set,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources
DefaultPersistenceUnitManager -> public void setMappingResources(String... mappingResources);1496259743;Specify one or more mapping resources (equivalent to {@code <mapping-file>}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p>If no explicit mapping resources have been specified next to_{@link #setPackagesToScan packages to scan}, this manager looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p>Note that specifying an empty array/list here suppresses the default_{@code META-INF/orm.xml} check. On the other hand, explicitly specifying_{@code META-INF/orm.xml} here will register that file even if it happens_to be co-located with a {@code persistence.xml} file._@see #setDefaultPersistenceUnitName_@see #setPackagesToScan;public void setMappingResources(String... mappingResources) {_		this.mappingResources = mappingResources__	};specify,one,or,more,mapping,resources,equivalent,to,code,mapping,file,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,if,no,explicit,mapping,resources,have,been,specified,next,to,link,set,packages,to,scan,packages,to,scan,this,manager,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,note,that,specifying,an,empty,array,list,here,suppresses,the,default,code,meta,inf,orm,xml,check,on,the,other,hand,explicitly,specifying,code,meta,inf,orm,xml,here,will,register,that,file,even,if,it,happens,to,be,co,located,with,a,code,persistence,xml,file,see,set,default,persistence,unit,name,see,set,packages,to,scan;public,void,set,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources
DefaultPersistenceUnitManager -> public void setMappingResources(String... mappingResources);1496837955;Specify one or more mapping resources (equivalent to {@code <mapping-file>}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p>If no explicit mapping resources have been specified next to_{@link #setPackagesToScan packages to scan}, this manager looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p>Note that specifying an empty array/list here suppresses the default_{@code META-INF/orm.xml} check. On the other hand, explicitly specifying_{@code META-INF/orm.xml} here will register that file even if it happens_to be co-located with a {@code persistence.xml} file._@see #setDefaultPersistenceUnitName_@see #setPackagesToScan;public void setMappingResources(String... mappingResources) {_		this.mappingResources = mappingResources__	};specify,one,or,more,mapping,resources,equivalent,to,code,mapping,file,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,if,no,explicit,mapping,resources,have,been,specified,next,to,link,set,packages,to,scan,packages,to,scan,this,manager,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,note,that,specifying,an,empty,array,list,here,suppresses,the,default,code,meta,inf,orm,xml,check,on,the,other,hand,explicitly,specifying,code,meta,inf,orm,xml,here,will,register,that,file,even,if,it,happens,to,be,co,located,with,a,code,persistence,xml,file,see,set,default,persistence,unit,name,see,set,packages,to,scan;public,void,set,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources
DefaultPersistenceUnitManager -> public void setMappingResources(String... mappingResources);1498780456;Specify one or more mapping resources (equivalent to {@code <mapping-file>}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p>If no explicit mapping resources have been specified next to_{@link #setPackagesToScan packages to scan}, this manager looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p>Note that specifying an empty array/list here suppresses the default_{@code META-INF/orm.xml} check. On the other hand, explicitly specifying_{@code META-INF/orm.xml} here will register that file even if it happens_to be co-located with a {@code persistence.xml} file._@see #setDefaultPersistenceUnitName_@see #setPackagesToScan;public void setMappingResources(String... mappingResources) {_		this.mappingResources = mappingResources__	};specify,one,or,more,mapping,resources,equivalent,to,code,mapping,file,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,if,no,explicit,mapping,resources,have,been,specified,next,to,link,set,packages,to,scan,packages,to,scan,this,manager,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,note,that,specifying,an,empty,array,list,here,suppresses,the,default,code,meta,inf,orm,xml,check,on,the,other,hand,explicitly,specifying,code,meta,inf,orm,xml,here,will,register,that,file,even,if,it,happens,to,be,co,located,with,a,code,persistence,xml,file,see,set,default,persistence,unit,name,see,set,packages,to,scan;public,void,set,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources
DefaultPersistenceUnitManager -> public void setMappingResources(String... mappingResources);1500448076;Specify one or more mapping resources (equivalent to {@code <mapping-file>}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p>If no explicit mapping resources have been specified next to_{@link #setPackagesToScan packages to scan}, this manager looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p>Note that specifying an empty array/list here suppresses the default_{@code META-INF/orm.xml} check. On the other hand, explicitly specifying_{@code META-INF/orm.xml} here will register that file even if it happens_to be co-located with a {@code persistence.xml} file._@see #setDefaultPersistenceUnitName_@see #setPackagesToScan;public void setMappingResources(String... mappingResources) {_		this.mappingResources = mappingResources__	};specify,one,or,more,mapping,resources,equivalent,to,code,mapping,file,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,if,no,explicit,mapping,resources,have,been,specified,next,to,link,set,packages,to,scan,packages,to,scan,this,manager,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,note,that,specifying,an,empty,array,list,here,suppresses,the,default,code,meta,inf,orm,xml,check,on,the,other,hand,explicitly,specifying,code,meta,inf,orm,xml,here,will,register,that,file,even,if,it,happens,to,be,co,located,with,a,code,persistence,xml,file,see,set,default,persistence,unit,name,see,set,packages,to,scan;public,void,set,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources
DefaultPersistenceUnitManager -> public void setMappingResources(String... mappingResources);1520528267;Specify one or more mapping resources (equivalent to {@code <mapping-file>}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p>If no explicit mapping resources have been specified next to_{@link #setPackagesToScan packages to scan}, this manager looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p>Note that specifying an empty array/list here suppresses the default_{@code META-INF/orm.xml} check. On the other hand, explicitly specifying_{@code META-INF/orm.xml} here will register that file even if it happens_to be co-located with a {@code persistence.xml} file._@see #setDefaultPersistenceUnitName_@see #setPackagesToScan;public void setMappingResources(String... mappingResources) {_		this.mappingResources = mappingResources__	};specify,one,or,more,mapping,resources,equivalent,to,code,mapping,file,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,if,no,explicit,mapping,resources,have,been,specified,next,to,link,set,packages,to,scan,packages,to,scan,this,manager,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,note,that,specifying,an,empty,array,list,here,suppresses,the,default,code,meta,inf,orm,xml,check,on,the,other,hand,explicitly,specifying,code,meta,inf,orm,xml,here,will,register,that,file,even,if,it,happens,to,be,co,located,with,a,code,persistence,xml,file,see,set,default,persistence,unit,name,see,set,packages,to,scan;public,void,set,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources
DefaultPersistenceUnitManager -> public void setMappingResources(String... mappingResources);1528313484;Specify one or more mapping resources (equivalent to {@code <mapping-file>}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p>If no explicit mapping resources have been specified next to_{@link #setPackagesToScan packages to scan}, this manager looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p>Note that specifying an empty array/list here suppresses the default_{@code META-INF/orm.xml} check. On the other hand, explicitly specifying_{@code META-INF/orm.xml} here will register that file even if it happens_to be co-located with a {@code persistence.xml} file._@see #setDefaultPersistenceUnitName_@see #setPackagesToScan;public void setMappingResources(String... mappingResources) {_		this.mappingResources = mappingResources__	};specify,one,or,more,mapping,resources,equivalent,to,code,mapping,file,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,if,no,explicit,mapping,resources,have,been,specified,next,to,link,set,packages,to,scan,packages,to,scan,this,manager,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,note,that,specifying,an,empty,array,list,here,suppresses,the,default,code,meta,inf,orm,xml,check,on,the,other,hand,explicitly,specifying,code,meta,inf,orm,xml,here,will,register,that,file,even,if,it,happens,to,be,co,located,with,a,code,persistence,xml,file,see,set,default,persistence,unit,name,see,set,packages,to,scan;public,void,set,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources
DefaultPersistenceUnitManager -> public void setMappingResources(String... mappingResources);1530174524;Specify one or more mapping resources (equivalent to {@code <mapping-file>}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p>If no explicit mapping resources have been specified next to_{@link #setPackagesToScan packages to scan}, this manager looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p>Note that specifying an empty array/list here suppresses the default_{@code META-INF/orm.xml} check. On the other hand, explicitly specifying_{@code META-INF/orm.xml} here will register that file even if it happens_to be co-located with a {@code persistence.xml} file._@see #setDefaultPersistenceUnitName_@see #setPackagesToScan;public void setMappingResources(String... mappingResources) {_		this.mappingResources = mappingResources__	};specify,one,or,more,mapping,resources,equivalent,to,code,mapping,file,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,if,no,explicit,mapping,resources,have,been,specified,next,to,link,set,packages,to,scan,packages,to,scan,this,manager,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,note,that,specifying,an,empty,array,list,here,suppresses,the,default,code,meta,inf,orm,xml,check,on,the,other,hand,explicitly,specifying,code,meta,inf,orm,xml,here,will,register,that,file,even,if,it,happens,to,be,co,located,with,a,code,persistence,xml,file,see,set,default,persistence,unit,name,see,set,packages,to,scan;public,void,set,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources
DefaultPersistenceUnitManager -> public void setMappingResources(String... mappingResources);1532091916;Specify one or more mapping resources (equivalent to {@code <mapping-file>}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p>If no explicit mapping resources have been specified next to_{@link #setPackagesToScan packages to scan}, this manager looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p>Note that specifying an empty array/list here suppresses the default_{@code META-INF/orm.xml} check. On the other hand, explicitly specifying_{@code META-INF/orm.xml} here will register that file even if it happens_to be co-located with a {@code persistence.xml} file._@see #setDefaultPersistenceUnitName_@see #setPackagesToScan;public void setMappingResources(String... mappingResources) {_		this.mappingResources = mappingResources__	};specify,one,or,more,mapping,resources,equivalent,to,code,mapping,file,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,if,no,explicit,mapping,resources,have,been,specified,next,to,link,set,packages,to,scan,packages,to,scan,this,manager,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,note,that,specifying,an,empty,array,list,here,suppresses,the,default,code,meta,inf,orm,xml,check,on,the,other,hand,explicitly,specifying,code,meta,inf,orm,xml,here,will,register,that,file,even,if,it,happens,to,be,co,located,with,a,code,persistence,xml,file,see,set,default,persistence,unit,name,see,set,packages,to,scan;public,void,set,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources
DefaultPersistenceUnitManager -> @Nullable 	public DataSource getDefaultDataSource();1496837955;Return the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;@Nullable_	public DataSource getDefaultDataSource() {_		return this.defaultDataSource__	};return,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;nullable,public,data,source,get,default,data,source,return,this,default,data,source
DefaultPersistenceUnitManager -> @Nullable 	public DataSource getDefaultDataSource();1498780456;Return the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;@Nullable_	public DataSource getDefaultDataSource() {_		return this.defaultDataSource__	};return,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;nullable,public,data,source,get,default,data,source,return,this,default,data,source
DefaultPersistenceUnitManager -> @Nullable 	public DataSource getDefaultDataSource();1500448076;Return the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;@Nullable_	public DataSource getDefaultDataSource() {_		return this.defaultDataSource__	};return,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;nullable,public,data,source,get,default,data,source,return,this,default,data,source
DefaultPersistenceUnitManager -> @Nullable 	public DataSource getDefaultDataSource();1520528267;Return the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;@Nullable_	public DataSource getDefaultDataSource() {_		return this.defaultDataSource__	};return,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;nullable,public,data,source,get,default,data,source,return,this,default,data,source
DefaultPersistenceUnitManager -> @Nullable 	public DataSource getDefaultDataSource();1528313484;Return the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;@Nullable_	public DataSource getDefaultDataSource() {_		return this.defaultDataSource__	};return,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;nullable,public,data,source,get,default,data,source,return,this,default,data,source
DefaultPersistenceUnitManager -> @Nullable 	public DataSource getDefaultDataSource();1530174524;Return the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;@Nullable_	public DataSource getDefaultDataSource() {_		return this.defaultDataSource__	};return,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;nullable,public,data,source,get,default,data,source,return,this,default,data,source
DefaultPersistenceUnitManager -> @Nullable 	public DataSource getDefaultDataSource();1532091916;Return the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}.;@Nullable_	public DataSource getDefaultDataSource() {_		return this.defaultDataSource__	};return,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml;nullable,public,data,source,get,default,data,source,return,this,default,data,source
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1328020251;Set the default persistence unit root location, to be applied_if no unit-specific persistence unit root could be determined._<p>Default is "classpath:", that is, the root of the current class path_(nearest root directory). To be overridden if unit-specific resolution_does not work and the class path root is not appropriate either.;public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.defaultPersistenceUnitRootLocation = defaultPersistenceUnitRootLocation__	};set,the,default,persistence,unit,root,location,to,be,applied,if,no,unit,specific,persistence,unit,root,could,be,determined,p,default,is,classpath,that,is,the,root,of,the,current,class,path,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,class,path,root,is,not,appropriate,either;public,void,set,default,persistence,unit,root,location,string,default,persistence,unit,root,location,this,default,persistence,unit,root,location,default,persistence,unit,root,location
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1329142650;Set the default persistence unit root location, to be applied_if no unit-specific persistence unit root could be determined._<p>Default is "classpath:", that is, the root of the current class path_(nearest root directory). To be overridden if unit-specific resolution_does not work and the class path root is not appropriate either.;public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.defaultPersistenceUnitRootLocation = defaultPersistenceUnitRootLocation__	};set,the,default,persistence,unit,root,location,to,be,applied,if,no,unit,specific,persistence,unit,root,could,be,determined,p,default,is,classpath,that,is,the,root,of,the,current,class,path,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,class,path,root,is,not,appropriate,either;public,void,set,default,persistence,unit,root,location,string,default,persistence,unit,root,location,this,default,persistence,unit,root,location,default,persistence,unit,root,location
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1347282851;Set the default persistence unit root location, to be applied_if no unit-specific persistence unit root could be determined._<p>Default is "classpath:", that is, the root of the current class path_(nearest root directory). To be overridden if unit-specific resolution_does not work and the class path root is not appropriate either.;public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.defaultPersistenceUnitRootLocation = defaultPersistenceUnitRootLocation__	};set,the,default,persistence,unit,root,location,to,be,applied,if,no,unit,specific,persistence,unit,root,could,be,determined,p,default,is,classpath,that,is,the,root,of,the,current,class,path,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,class,path,root,is,not,appropriate,either;public,void,set,default,persistence,unit,root,location,string,default,persistence,unit,root,location,this,default,persistence,unit,root,location,default,persistence,unit,root,location
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1351648399;Set the default persistence unit root location, to be applied_if no unit-specific persistence unit root could be determined._<p>Default is "classpath:", that is, the root of the current class path_(nearest root directory). To be overridden if unit-specific resolution_does not work and the class path root is not appropriate either.;public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.defaultPersistenceUnitRootLocation = defaultPersistenceUnitRootLocation__	};set,the,default,persistence,unit,root,location,to,be,applied,if,no,unit,specific,persistence,unit,root,could,be,determined,p,default,is,classpath,that,is,the,root,of,the,current,class,path,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,class,path,root,is,not,appropriate,either;public,void,set,default,persistence,unit,root,location,string,default,persistence,unit,root,location,this,default,persistence,unit,root,location,default,persistence,unit,root,location
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1356735495;Set the default persistence unit root location, to be applied_if no unit-specific persistence unit root could be determined._<p>Default is "classpath:", that is, the root of the current class path_(nearest root directory). To be overridden if unit-specific resolution_does not work and the class path root is not appropriate either.;public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.defaultPersistenceUnitRootLocation = defaultPersistenceUnitRootLocation__	};set,the,default,persistence,unit,root,location,to,be,applied,if,no,unit,specific,persistence,unit,root,could,be,determined,p,default,is,classpath,that,is,the,root,of,the,current,class,path,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,class,path,root,is,not,appropriate,either;public,void,set,default,persistence,unit,root,location,string,default,persistence,unit,root,location,this,default,persistence,unit,root,location,default,persistence,unit,root,location
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1357119239;Set the default persistence unit root location, to be applied_if no unit-specific persistence unit root could be determined._<p>Default is "classpath:", that is, the root of the current class path_(nearest root directory). To be overridden if unit-specific resolution_does not work and the class path root is not appropriate either.;public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.defaultPersistenceUnitRootLocation = defaultPersistenceUnitRootLocation__	};set,the,default,persistence,unit,root,location,to,be,applied,if,no,unit,specific,persistence,unit,root,could,be,determined,p,default,is,classpath,that,is,the,root,of,the,current,class,path,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,class,path,root,is,not,appropriate,either;public,void,set,default,persistence,unit,root,location,string,default,persistence,unit,root,location,this,default,persistence,unit,root,location,default,persistence,unit,root,location
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1363714444;Set the default persistence unit root location, to be applied_if no unit-specific persistence unit root could be determined._<p>Default is "classpath:", that is, the root of the current class path_(nearest root directory). To be overridden if unit-specific resolution_does not work and the class path root is not appropriate either.;public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.defaultPersistenceUnitRootLocation = defaultPersistenceUnitRootLocation__	};set,the,default,persistence,unit,root,location,to,be,applied,if,no,unit,specific,persistence,unit,root,could,be,determined,p,default,is,classpath,that,is,the,root,of,the,current,class,path,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,class,path,root,is,not,appropriate,either;public,void,set,default,persistence,unit,root,location,string,default,persistence,unit,root,location,this,default,persistence,unit,root,location,default,persistence,unit,root,location
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1368482696;Set the default persistence unit root location, to be applied_if no unit-specific persistence unit root could be determined._<p>Default is "classpath:", that is, the root of the current class path_(nearest root directory). To be overridden if unit-specific resolution_does not work and the class path root is not appropriate either.;public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.defaultPersistenceUnitRootLocation = defaultPersistenceUnitRootLocation__	};set,the,default,persistence,unit,root,location,to,be,applied,if,no,unit,specific,persistence,unit,root,could,be,determined,p,default,is,classpath,that,is,the,root,of,the,current,class,path,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,class,path,root,is,not,appropriate,either;public,void,set,default,persistence,unit,root,location,string,default,persistence,unit,root,location,this,default,persistence,unit,root,location,default,persistence,unit,root,location
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1375434510;Set the default persistence unit root location, to be applied_if no unit-specific persistence unit root could be determined._<p>Default is "classpath:", that is, the root of the current class path_(nearest root directory). To be overridden if unit-specific resolution_does not work and the class path root is not appropriate either.;public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.defaultPersistenceUnitRootLocation = defaultPersistenceUnitRootLocation__	};set,the,default,persistence,unit,root,location,to,be,applied,if,no,unit,specific,persistence,unit,root,could,be,determined,p,default,is,classpath,that,is,the,root,of,the,current,class,path,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,class,path,root,is,not,appropriate,either;public,void,set,default,persistence,unit,root,location,string,default,persistence,unit,root,location,this,default,persistence,unit,root,location,default,persistence,unit,root,location
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1375458214;Set the default persistence unit root location, to be applied_if no unit-specific persistence unit root could be determined._<p>Default is "classpath:", that is, the root of the current class path_(nearest root directory). To be overridden if unit-specific resolution_does not work and the class path root is not appropriate either.;public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.defaultPersistenceUnitRootLocation = defaultPersistenceUnitRootLocation__	};set,the,default,persistence,unit,root,location,to,be,applied,if,no,unit,specific,persistence,unit,root,could,be,determined,p,default,is,classpath,that,is,the,root,of,the,current,class,path,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,class,path,root,is,not,appropriate,either;public,void,set,default,persistence,unit,root,location,string,default,persistence,unit,root,location,this,default,persistence,unit,root,location,default,persistence,unit,root,location
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1389648334;Set the default persistence unit root location, to be applied_if no unit-specific persistence unit root could be determined._<p>Default is "classpath:", that is, the root of the current class path_(nearest root directory). To be overridden if unit-specific resolution_does not work and the class path root is not appropriate either.;public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.defaultPersistenceUnitRootLocation = defaultPersistenceUnitRootLocation__	};set,the,default,persistence,unit,root,location,to,be,applied,if,no,unit,specific,persistence,unit,root,could,be,determined,p,default,is,classpath,that,is,the,root,of,the,current,class,path,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,class,path,root,is,not,appropriate,either;public,void,set,default,persistence,unit,root,location,string,default,persistence,unit,root,location,this,default,persistence,unit,root,location,default,persistence,unit,root,location
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1390250900;Set the default persistence unit root location, to be applied_if no unit-specific persistence unit root could be determined._<p>Default is "classpath:", that is, the root of the current class path_(nearest root directory). To be overridden if unit-specific resolution_does not work and the class path root is not appropriate either.;public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.defaultPersistenceUnitRootLocation = defaultPersistenceUnitRootLocation__	};set,the,default,persistence,unit,root,location,to,be,applied,if,no,unit,specific,persistence,unit,root,could,be,determined,p,default,is,classpath,that,is,the,root,of,the,current,class,path,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,class,path,root,is,not,appropriate,either;public,void,set,default,persistence,unit,root,location,string,default,persistence,unit,root,location,this,default,persistence,unit,root,location,default,persistence,unit,root,location
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1390313076;Set the default persistence unit root location, to be applied_if no unit-specific persistence unit root could be determined._<p>Default is "classpath:", that is, the root of the current classpath_(nearest root directory). To be overridden if unit-specific resolution_does not work and the classpath root is not appropriate either.;public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.defaultPersistenceUnitRootLocation = defaultPersistenceUnitRootLocation__	};set,the,default,persistence,unit,root,location,to,be,applied,if,no,unit,specific,persistence,unit,root,could,be,determined,p,default,is,classpath,that,is,the,root,of,the,current,classpath,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,classpath,root,is,not,appropriate,either;public,void,set,default,persistence,unit,root,location,string,default,persistence,unit,root,location,this,default,persistence,unit,root,location,default,persistence,unit,root,location
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1400140571;Set the default persistence unit root location, to be applied_if no unit-specific persistence unit root could be determined._<p>Default is "classpath:", that is, the root of the current classpath_(nearest root directory). To be overridden if unit-specific resolution_does not work and the classpath root is not appropriate either.;public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.defaultPersistenceUnitRootLocation = defaultPersistenceUnitRootLocation__	};set,the,default,persistence,unit,root,location,to,be,applied,if,no,unit,specific,persistence,unit,root,could,be,determined,p,default,is,classpath,that,is,the,root,of,the,current,classpath,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,classpath,root,is,not,appropriate,either;public,void,set,default,persistence,unit,root,location,string,default,persistence,unit,root,location,this,default,persistence,unit,root,location,default,persistence,unit,root,location
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1403774750;Set the default persistence unit root location, to be applied_if no unit-specific persistence unit root could be determined._<p>Default is "classpath:", that is, the root of the current classpath_(nearest root directory). To be overridden if unit-specific resolution_does not work and the classpath root is not appropriate either.;public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.defaultPersistenceUnitRootLocation = defaultPersistenceUnitRootLocation__	};set,the,default,persistence,unit,root,location,to,be,applied,if,no,unit,specific,persistence,unit,root,could,be,determined,p,default,is,classpath,that,is,the,root,of,the,current,classpath,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,classpath,root,is,not,appropriate,either;public,void,set,default,persistence,unit,root,location,string,default,persistence,unit,root,location,this,default,persistence,unit,root,location,default,persistence,unit,root,location
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1404056186;Set the default persistence unit root location, to be applied_if no unit-specific persistence unit root could be determined._<p>Default is "classpath:", that is, the root of the current classpath_(nearest root directory). To be overridden if unit-specific resolution_does not work and the classpath root is not appropriate either.;public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.defaultPersistenceUnitRootLocation = defaultPersistenceUnitRootLocation__	};set,the,default,persistence,unit,root,location,to,be,applied,if,no,unit,specific,persistence,unit,root,could,be,determined,p,default,is,classpath,that,is,the,root,of,the,current,classpath,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,classpath,root,is,not,appropriate,either;public,void,set,default,persistence,unit,root,location,string,default,persistence,unit,root,location,this,default,persistence,unit,root,location,default,persistence,unit,root,location
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1447323728;Set the default persistence unit root location, to be applied_if no unit-specific persistence unit root could be determined._<p>Default is "classpath:", that is, the root of the current classpath_(nearest root directory). To be overridden if unit-specific resolution_does not work and the classpath root is not appropriate either.;public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.defaultPersistenceUnitRootLocation = defaultPersistenceUnitRootLocation__	};set,the,default,persistence,unit,root,location,to,be,applied,if,no,unit,specific,persistence,unit,root,could,be,determined,p,default,is,classpath,that,is,the,root,of,the,current,classpath,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,classpath,root,is,not,appropriate,either;public,void,set,default,persistence,unit,root,location,string,default,persistence,unit,root,location,this,default,persistence,unit,root,location,default,persistence,unit,root,location
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1464299869;Set the default persistence unit root location, to be applied_if no unit-specific persistence unit root could be determined._<p>Default is "classpath:", that is, the root of the current classpath_(nearest root directory). To be overridden if unit-specific resolution_does not work and the classpath root is not appropriate either.;public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.defaultPersistenceUnitRootLocation = defaultPersistenceUnitRootLocation__	};set,the,default,persistence,unit,root,location,to,be,applied,if,no,unit,specific,persistence,unit,root,could,be,determined,p,default,is,classpath,that,is,the,root,of,the,current,classpath,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,classpath,root,is,not,appropriate,either;public,void,set,default,persistence,unit,root,location,string,default,persistence,unit,root,location,this,default,persistence,unit,root,location,default,persistence,unit,root,location
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1467668243;Set the default persistence unit root location, to be applied_if no unit-specific persistence unit root could be determined._<p>Default is "classpath:", that is, the root of the current classpath_(nearest root directory). To be overridden if unit-specific resolution_does not work and the classpath root is not appropriate either.;public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.defaultPersistenceUnitRootLocation = defaultPersistenceUnitRootLocation__	};set,the,default,persistence,unit,root,location,to,be,applied,if,no,unit,specific,persistence,unit,root,could,be,determined,p,default,is,classpath,that,is,the,root,of,the,current,classpath,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,classpath,root,is,not,appropriate,either;public,void,set,default,persistence,unit,root,location,string,default,persistence,unit,root,location,this,default,persistence,unit,root,location,default,persistence,unit,root,location
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1467730834;Set the default persistence unit root location, to be applied_if no unit-specific persistence unit root could be determined._<p>Default is "classpath:", that is, the root of the current classpath_(nearest root directory). To be overridden if unit-specific resolution_does not work and the classpath root is not appropriate either.;public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.defaultPersistenceUnitRootLocation = defaultPersistenceUnitRootLocation__	};set,the,default,persistence,unit,root,location,to,be,applied,if,no,unit,specific,persistence,unit,root,could,be,determined,p,default,is,classpath,that,is,the,root,of,the,current,classpath,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,classpath,root,is,not,appropriate,either;public,void,set,default,persistence,unit,root,location,string,default,persistence,unit,root,location,this,default,persistence,unit,root,location,default,persistence,unit,root,location
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1471464767;Set the default persistence unit root location, to be applied_if no unit-specific persistence unit root could be determined._<p>Default is "classpath:", that is, the root of the current classpath_(nearest root directory). To be overridden if unit-specific resolution_does not work and the classpath root is not appropriate either.;public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.defaultPersistenceUnitRootLocation = defaultPersistenceUnitRootLocation__	};set,the,default,persistence,unit,root,location,to,be,applied,if,no,unit,specific,persistence,unit,root,could,be,determined,p,default,is,classpath,that,is,the,root,of,the,current,classpath,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,classpath,root,is,not,appropriate,either;public,void,set,default,persistence,unit,root,location,string,default,persistence,unit,root,location,this,default,persistence,unit,root,location,default,persistence,unit,root,location
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1472736647;Set the default persistence unit root location, to be applied_if no unit-specific persistence unit root could be determined._<p>Default is "classpath:", that is, the root of the current classpath_(nearest root directory). To be overridden if unit-specific resolution_does not work and the classpath root is not appropriate either.;public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.defaultPersistenceUnitRootLocation = defaultPersistenceUnitRootLocation__	};set,the,default,persistence,unit,root,location,to,be,applied,if,no,unit,specific,persistence,unit,root,could,be,determined,p,default,is,classpath,that,is,the,root,of,the,current,classpath,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,classpath,root,is,not,appropriate,either;public,void,set,default,persistence,unit,root,location,string,default,persistence,unit,root,location,this,default,persistence,unit,root,location,default,persistence,unit,root,location
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1474895745;Set the default persistence unit root location, to be applied_if no unit-specific persistence unit root could be determined._<p>Default is "classpath:", that is, the root of the current classpath_(nearest root directory). To be overridden if unit-specific resolution_does not work and the classpath root is not appropriate either.;public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.defaultPersistenceUnitRootLocation = defaultPersistenceUnitRootLocation__	};set,the,default,persistence,unit,root,location,to,be,applied,if,no,unit,specific,persistence,unit,root,could,be,determined,p,default,is,classpath,that,is,the,root,of,the,current,classpath,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,classpath,root,is,not,appropriate,either;public,void,set,default,persistence,unit,root,location,string,default,persistence,unit,root,location,this,default,persistence,unit,root,location,default,persistence,unit,root,location
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1495868221;Set the default persistence unit root location, to be applied_if no unit-specific persistence unit root could be determined._<p>Default is "classpath:", that is, the root of the current classpath_(nearest root directory). To be overridden if unit-specific resolution_does not work and the classpath root is not appropriate either.;public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.defaultPersistenceUnitRootLocation = defaultPersistenceUnitRootLocation__	};set,the,default,persistence,unit,root,location,to,be,applied,if,no,unit,specific,persistence,unit,root,could,be,determined,p,default,is,classpath,that,is,the,root,of,the,current,classpath,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,classpath,root,is,not,appropriate,either;public,void,set,default,persistence,unit,root,location,string,default,persistence,unit,root,location,this,default,persistence,unit,root,location,default,persistence,unit,root,location
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1496259743;Set the default persistence unit root location, to be applied_if no unit-specific persistence unit root could be determined._<p>Default is "classpath:", that is, the root of the current classpath_(nearest root directory). To be overridden if unit-specific resolution_does not work and the classpath root is not appropriate either.;public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.defaultPersistenceUnitRootLocation = defaultPersistenceUnitRootLocation__	};set,the,default,persistence,unit,root,location,to,be,applied,if,no,unit,specific,persistence,unit,root,could,be,determined,p,default,is,classpath,that,is,the,root,of,the,current,classpath,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,classpath,root,is,not,appropriate,either;public,void,set,default,persistence,unit,root,location,string,default,persistence,unit,root,location,this,default,persistence,unit,root,location,default,persistence,unit,root,location
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1496837955;Set the default persistence unit root location, to be applied_if no unit-specific persistence unit root could be determined._<p>Default is "classpath:", that is, the root of the current classpath_(nearest root directory). To be overridden if unit-specific resolution_does not work and the classpath root is not appropriate either.;public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.defaultPersistenceUnitRootLocation = defaultPersistenceUnitRootLocation__	};set,the,default,persistence,unit,root,location,to,be,applied,if,no,unit,specific,persistence,unit,root,could,be,determined,p,default,is,classpath,that,is,the,root,of,the,current,classpath,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,classpath,root,is,not,appropriate,either;public,void,set,default,persistence,unit,root,location,string,default,persistence,unit,root,location,this,default,persistence,unit,root,location,default,persistence,unit,root,location
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1498780456;Set the default persistence unit root location, to be applied_if no unit-specific persistence unit root could be determined._<p>Default is "classpath:", that is, the root of the current classpath_(nearest root directory). To be overridden if unit-specific resolution_does not work and the classpath root is not appropriate either.;public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.defaultPersistenceUnitRootLocation = defaultPersistenceUnitRootLocation__	};set,the,default,persistence,unit,root,location,to,be,applied,if,no,unit,specific,persistence,unit,root,could,be,determined,p,default,is,classpath,that,is,the,root,of,the,current,classpath,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,classpath,root,is,not,appropriate,either;public,void,set,default,persistence,unit,root,location,string,default,persistence,unit,root,location,this,default,persistence,unit,root,location,default,persistence,unit,root,location
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1500448076;Set the default persistence unit root location, to be applied_if no unit-specific persistence unit root could be determined._<p>Default is "classpath:", that is, the root of the current classpath_(nearest root directory). To be overridden if unit-specific resolution_does not work and the classpath root is not appropriate either.;public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.defaultPersistenceUnitRootLocation = defaultPersistenceUnitRootLocation__	};set,the,default,persistence,unit,root,location,to,be,applied,if,no,unit,specific,persistence,unit,root,could,be,determined,p,default,is,classpath,that,is,the,root,of,the,current,classpath,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,classpath,root,is,not,appropriate,either;public,void,set,default,persistence,unit,root,location,string,default,persistence,unit,root,location,this,default,persistence,unit,root,location,default,persistence,unit,root,location
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1520528267;Set the default persistence unit root location, to be applied_if no unit-specific persistence unit root could be determined._<p>Default is "classpath:", that is, the root of the current classpath_(nearest root directory). To be overridden if unit-specific resolution_does not work and the classpath root is not appropriate either.;public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.defaultPersistenceUnitRootLocation = defaultPersistenceUnitRootLocation__	};set,the,default,persistence,unit,root,location,to,be,applied,if,no,unit,specific,persistence,unit,root,could,be,determined,p,default,is,classpath,that,is,the,root,of,the,current,classpath,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,classpath,root,is,not,appropriate,either;public,void,set,default,persistence,unit,root,location,string,default,persistence,unit,root,location,this,default,persistence,unit,root,location,default,persistence,unit,root,location
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1528313484;Set the default persistence unit root location, to be applied_if no unit-specific persistence unit root could be determined._<p>Default is "classpath:", that is, the root of the current classpath_(nearest root directory). To be overridden if unit-specific resolution_does not work and the classpath root is not appropriate either.;public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.defaultPersistenceUnitRootLocation = defaultPersistenceUnitRootLocation__	};set,the,default,persistence,unit,root,location,to,be,applied,if,no,unit,specific,persistence,unit,root,could,be,determined,p,default,is,classpath,that,is,the,root,of,the,current,classpath,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,classpath,root,is,not,appropriate,either;public,void,set,default,persistence,unit,root,location,string,default,persistence,unit,root,location,this,default,persistence,unit,root,location,default,persistence,unit,root,location
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1530174524;Set the default persistence unit root location, to be applied_if no unit-specific persistence unit root could be determined._<p>Default is "classpath:", that is, the root of the current classpath_(nearest root directory). To be overridden if unit-specific resolution_does not work and the classpath root is not appropriate either.;public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.defaultPersistenceUnitRootLocation = defaultPersistenceUnitRootLocation__	};set,the,default,persistence,unit,root,location,to,be,applied,if,no,unit,specific,persistence,unit,root,could,be,determined,p,default,is,classpath,that,is,the,root,of,the,current,classpath,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,classpath,root,is,not,appropriate,either;public,void,set,default,persistence,unit,root,location,string,default,persistence,unit,root,location,this,default,persistence,unit,root,location,default,persistence,unit,root,location
DefaultPersistenceUnitManager -> public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1532091916;Set the default persistence unit root location, to be applied_if no unit-specific persistence unit root could be determined._<p>Default is "classpath:", that is, the root of the current classpath_(nearest root directory). To be overridden if unit-specific resolution_does not work and the classpath root is not appropriate either.;public void setDefaultPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.defaultPersistenceUnitRootLocation = defaultPersistenceUnitRootLocation__	};set,the,default,persistence,unit,root,location,to,be,applied,if,no,unit,specific,persistence,unit,root,could,be,determined,p,default,is,classpath,that,is,the,root,of,the,current,classpath,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,classpath,root,is,not,appropriate,either;public,void,set,default,persistence,unit,root,location,string,default,persistence,unit,root,location,this,default,persistence,unit,root,location,default,persistence,unit,root,location
DefaultPersistenceUnitManager -> public DataSourceLookup getDataSourceLookup();1328020251;Return the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in <code>persistence.xml</code>_against Spring-managed DataSource instances.;public DataSourceLookup getDataSourceLookup() {_		return this.dataSourceLookup__	};return,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,code,against,spring,managed,data,source,instances;public,data,source,lookup,get,data,source,lookup,return,this,data,source,lookup
DefaultPersistenceUnitManager -> public DataSourceLookup getDataSourceLookup();1329142650;Return the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in <code>persistence.xml</code>_against Spring-managed DataSource instances.;public DataSourceLookup getDataSourceLookup() {_		return this.dataSourceLookup__	};return,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,code,against,spring,managed,data,source,instances;public,data,source,lookup,get,data,source,lookup,return,this,data,source,lookup
DefaultPersistenceUnitManager -> public DataSourceLookup getDataSourceLookup();1347282851;Return the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in <code>persistence.xml</code>_against Spring-managed DataSource instances.;public DataSourceLookup getDataSourceLookup() {_		return this.dataSourceLookup__	};return,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,code,against,spring,managed,data,source,instances;public,data,source,lookup,get,data,source,lookup,return,this,data,source,lookup
DefaultPersistenceUnitManager -> public DataSourceLookup getDataSourceLookup();1351648399;Return the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in <code>persistence.xml</code>_against Spring-managed DataSource instances.;public DataSourceLookup getDataSourceLookup() {_		return this.dataSourceLookup__	};return,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,code,against,spring,managed,data,source,instances;public,data,source,lookup,get,data,source,lookup,return,this,data,source,lookup
DefaultPersistenceUnitManager -> public DataSourceLookup getDataSourceLookup();1356735495;Return the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances.;public DataSourceLookup getDataSourceLookup() {_		return this.dataSourceLookup__	};return,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances;public,data,source,lookup,get,data,source,lookup,return,this,data,source,lookup
DefaultPersistenceUnitManager -> public DataSourceLookup getDataSourceLookup();1357119239;Return the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances.;public DataSourceLookup getDataSourceLookup() {_		return this.dataSourceLookup__	};return,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances;public,data,source,lookup,get,data,source,lookup,return,this,data,source,lookup
DefaultPersistenceUnitManager -> public DataSourceLookup getDataSourceLookup();1363714444;Return the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances.;public DataSourceLookup getDataSourceLookup() {_		return this.dataSourceLookup__	};return,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances;public,data,source,lookup,get,data,source,lookup,return,this,data,source,lookup
DefaultPersistenceUnitManager -> public DataSourceLookup getDataSourceLookup();1368482696;Return the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances.;public DataSourceLookup getDataSourceLookup() {_		return this.dataSourceLookup__	};return,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances;public,data,source,lookup,get,data,source,lookup,return,this,data,source,lookup
DefaultPersistenceUnitManager -> public DataSourceLookup getDataSourceLookup();1375434510;Return the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances.;public DataSourceLookup getDataSourceLookup() {_		return this.dataSourceLookup__	};return,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances;public,data,source,lookup,get,data,source,lookup,return,this,data,source,lookup
DefaultPersistenceUnitManager -> public DataSourceLookup getDataSourceLookup();1375458214;Return the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances.;public DataSourceLookup getDataSourceLookup() {_		return this.dataSourceLookup__	};return,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances;public,data,source,lookup,get,data,source,lookup,return,this,data,source,lookup
DefaultPersistenceUnitManager -> public DataSourceLookup getDataSourceLookup();1389648334;Return the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances.;public DataSourceLookup getDataSourceLookup() {_		return this.dataSourceLookup__	};return,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances;public,data,source,lookup,get,data,source,lookup,return,this,data,source,lookup
DefaultPersistenceUnitManager -> public DataSourceLookup getDataSourceLookup();1390250900;Return the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances.;public DataSourceLookup getDataSourceLookup() {_		return this.dataSourceLookup__	};return,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances;public,data,source,lookup,get,data,source,lookup,return,this,data,source,lookup
DefaultPersistenceUnitManager -> public DataSourceLookup getDataSourceLookup();1390313076;Return the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances.;public DataSourceLookup getDataSourceLookup() {_		return this.dataSourceLookup__	};return,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances;public,data,source,lookup,get,data,source,lookup,return,this,data,source,lookup
DefaultPersistenceUnitManager -> public DataSourceLookup getDataSourceLookup();1400140571;Return the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances.;public DataSourceLookup getDataSourceLookup() {_		return this.dataSourceLookup__	};return,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances;public,data,source,lookup,get,data,source,lookup,return,this,data,source,lookup
DefaultPersistenceUnitManager -> public DataSourceLookup getDataSourceLookup();1403774750;Return the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances.;public DataSourceLookup getDataSourceLookup() {_		return this.dataSourceLookup__	};return,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances;public,data,source,lookup,get,data,source,lookup,return,this,data,source,lookup
DefaultPersistenceUnitManager -> public DataSourceLookup getDataSourceLookup();1404056186;Return the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances.;public DataSourceLookup getDataSourceLookup() {_		return this.dataSourceLookup__	};return,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances;public,data,source,lookup,get,data,source,lookup,return,this,data,source,lookup
DefaultPersistenceUnitManager -> public DataSourceLookup getDataSourceLookup();1447323728;Return the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances.;public DataSourceLookup getDataSourceLookup() {_		return this.dataSourceLookup__	};return,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances;public,data,source,lookup,get,data,source,lookup,return,this,data,source,lookup
DefaultPersistenceUnitManager -> public DataSourceLookup getDataSourceLookup();1464299869;Return the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances.;public DataSourceLookup getDataSourceLookup() {_		return this.dataSourceLookup__	};return,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances;public,data,source,lookup,get,data,source,lookup,return,this,data,source,lookup
DefaultPersistenceUnitManager -> public DataSourceLookup getDataSourceLookup();1467668243;Return the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances.;public DataSourceLookup getDataSourceLookup() {_		return this.dataSourceLookup__	};return,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances;public,data,source,lookup,get,data,source,lookup,return,this,data,source,lookup
DefaultPersistenceUnitManager -> public DataSourceLookup getDataSourceLookup();1467730834;Return the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances.;public DataSourceLookup getDataSourceLookup() {_		return this.dataSourceLookup__	};return,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances;public,data,source,lookup,get,data,source,lookup,return,this,data,source,lookup
DefaultPersistenceUnitManager -> public DataSourceLookup getDataSourceLookup();1471464767;Return the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances.;public DataSourceLookup getDataSourceLookup() {_		return this.dataSourceLookup__	};return,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances;public,data,source,lookup,get,data,source,lookup,return,this,data,source,lookup
DefaultPersistenceUnitManager -> public DataSourceLookup getDataSourceLookup();1472736647;Return the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances.;public DataSourceLookup getDataSourceLookup() {_		return this.dataSourceLookup__	};return,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances;public,data,source,lookup,get,data,source,lookup,return,this,data,source,lookup
DefaultPersistenceUnitManager -> public DataSourceLookup getDataSourceLookup();1474895745;Return the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances.;public DataSourceLookup getDataSourceLookup() {_		return this.dataSourceLookup__	};return,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances;public,data,source,lookup,get,data,source,lookup,return,this,data,source,lookup
DefaultPersistenceUnitManager -> public DataSourceLookup getDataSourceLookup();1495868221;Return the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances.;public DataSourceLookup getDataSourceLookup() {_		return this.dataSourceLookup__	};return,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances;public,data,source,lookup,get,data,source,lookup,return,this,data,source,lookup
DefaultPersistenceUnitManager -> public DataSourceLookup getDataSourceLookup();1496259743;Return the JDBC DataSourceLookup that provides DataSources for the_persistence provider, resolving data source names in {@code persistence.xml}_against Spring-managed DataSource instances.;public DataSourceLookup getDataSourceLookup() {_		return this.dataSourceLookup__	};return,the,jdbc,data,source,lookup,that,provides,data,sources,for,the,persistence,provider,resolving,data,source,names,in,code,persistence,xml,against,spring,managed,data,source,instances;public,data,source,lookup,get,data,source,lookup,return,this,data,source,lookup
DefaultPersistenceUnitManager -> private Resource getOrmXmlForDefaultPersistenceUnit();1464299869;Determine JPA's default "META-INF/orm.xml" resource for use with Spring's default_persistence unit, if any._<p>Checks whether a "META-INF/orm.xml" file exists in the classpath and uses it_if it is not co-located with a "META-INF/persistence.xml" file.;private Resource getOrmXmlForDefaultPersistenceUnit() {_		Resource ormXml = this.resourcePatternResolver.getResource(_				this.defaultPersistenceUnitRootLocation + DEFAULT_ORM_XML_RESOURCE)__		if (ormXml.exists()) {_			try {_				Resource persistenceXml = ormXml.createRelative(PERSISTENCE_XML_FILENAME)__				if (!persistenceXml.exists()) {_					return ormXml__				}_			}_			catch (IOException ex) {_				_				return ormXml__			}_		}_		return null__	};determine,jpa,s,default,meta,inf,orm,xml,resource,for,use,with,spring,s,default,persistence,unit,if,any,p,checks,whether,a,meta,inf,orm,xml,file,exists,in,the,classpath,and,uses,it,if,it,is,not,co,located,with,a,meta,inf,persistence,xml,file;private,resource,get,orm,xml,for,default,persistence,unit,resource,orm,xml,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,if,orm,xml,exists,try,resource,persistence,xml,orm,xml,create,relative,if,persistence,xml,exists,return,orm,xml,catch,ioexception,ex,return,orm,xml,return,null
DefaultPersistenceUnitManager -> private Resource getOrmXmlForDefaultPersistenceUnit();1467668243;Determine JPA's default "META-INF/orm.xml" resource for use with Spring's default_persistence unit, if any._<p>Checks whether a "META-INF/orm.xml" file exists in the classpath and uses it_if it is not co-located with a "META-INF/persistence.xml" file.;private Resource getOrmXmlForDefaultPersistenceUnit() {_		Resource ormXml = this.resourcePatternResolver.getResource(_				this.defaultPersistenceUnitRootLocation + DEFAULT_ORM_XML_RESOURCE)__		if (ormXml.exists()) {_			try {_				Resource persistenceXml = ormXml.createRelative(PERSISTENCE_XML_FILENAME)__				if (!persistenceXml.exists()) {_					return ormXml__				}_			}_			catch (IOException ex) {_				_				return ormXml__			}_		}_		return null__	};determine,jpa,s,default,meta,inf,orm,xml,resource,for,use,with,spring,s,default,persistence,unit,if,any,p,checks,whether,a,meta,inf,orm,xml,file,exists,in,the,classpath,and,uses,it,if,it,is,not,co,located,with,a,meta,inf,persistence,xml,file;private,resource,get,orm,xml,for,default,persistence,unit,resource,orm,xml,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,if,orm,xml,exists,try,resource,persistence,xml,orm,xml,create,relative,if,persistence,xml,exists,return,orm,xml,catch,ioexception,ex,return,orm,xml,return,null
DefaultPersistenceUnitManager -> private Resource getOrmXmlForDefaultPersistenceUnit();1467730834;Determine JPA's default "META-INF/orm.xml" resource for use with Spring's default_persistence unit, if any._<p>Checks whether a "META-INF/orm.xml" file exists in the classpath and uses it_if it is not co-located with a "META-INF/persistence.xml" file.;private Resource getOrmXmlForDefaultPersistenceUnit() {_		Resource ormXml = this.resourcePatternResolver.getResource(_				this.defaultPersistenceUnitRootLocation + DEFAULT_ORM_XML_RESOURCE)__		if (ormXml.exists()) {_			try {_				Resource persistenceXml = ormXml.createRelative(PERSISTENCE_XML_FILENAME)__				if (!persistenceXml.exists()) {_					return ormXml__				}_			}_			catch (IOException ex) {_				_				return ormXml__			}_		}_		return null__	};determine,jpa,s,default,meta,inf,orm,xml,resource,for,use,with,spring,s,default,persistence,unit,if,any,p,checks,whether,a,meta,inf,orm,xml,file,exists,in,the,classpath,and,uses,it,if,it,is,not,co,located,with,a,meta,inf,persistence,xml,file;private,resource,get,orm,xml,for,default,persistence,unit,resource,orm,xml,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,if,orm,xml,exists,try,resource,persistence,xml,orm,xml,create,relative,if,persistence,xml,exists,return,orm,xml,catch,ioexception,ex,return,orm,xml,return,null
DefaultPersistenceUnitManager -> private Resource getOrmXmlForDefaultPersistenceUnit();1471464767;Determine JPA's default "META-INF/orm.xml" resource for use with Spring's default_persistence unit, if any._<p>Checks whether a "META-INF/orm.xml" file exists in the classpath and uses it_if it is not co-located with a "META-INF/persistence.xml" file.;private Resource getOrmXmlForDefaultPersistenceUnit() {_		Resource ormXml = this.resourcePatternResolver.getResource(_				this.defaultPersistenceUnitRootLocation + DEFAULT_ORM_XML_RESOURCE)__		if (ormXml.exists()) {_			try {_				Resource persistenceXml = ormXml.createRelative(PERSISTENCE_XML_FILENAME)__				if (!persistenceXml.exists()) {_					return ormXml__				}_			}_			catch (IOException ex) {_				_				return ormXml__			}_		}_		return null__	};determine,jpa,s,default,meta,inf,orm,xml,resource,for,use,with,spring,s,default,persistence,unit,if,any,p,checks,whether,a,meta,inf,orm,xml,file,exists,in,the,classpath,and,uses,it,if,it,is,not,co,located,with,a,meta,inf,persistence,xml,file;private,resource,get,orm,xml,for,default,persistence,unit,resource,orm,xml,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,if,orm,xml,exists,try,resource,persistence,xml,orm,xml,create,relative,if,persistence,xml,exists,return,orm,xml,catch,ioexception,ex,return,orm,xml,return,null
DefaultPersistenceUnitManager -> private Resource getOrmXmlForDefaultPersistenceUnit();1472736647;Determine JPA's default "META-INF/orm.xml" resource for use with Spring's default_persistence unit, if any._<p>Checks whether a "META-INF/orm.xml" file exists in the classpath and uses it_if it is not co-located with a "META-INF/persistence.xml" file.;private Resource getOrmXmlForDefaultPersistenceUnit() {_		Resource ormXml = this.resourcePatternResolver.getResource(_				this.defaultPersistenceUnitRootLocation + DEFAULT_ORM_XML_RESOURCE)__		if (ormXml.exists()) {_			try {_				Resource persistenceXml = ormXml.createRelative(PERSISTENCE_XML_FILENAME)__				if (!persistenceXml.exists()) {_					return ormXml__				}_			}_			catch (IOException ex) {_				_				return ormXml__			}_		}_		return null__	};determine,jpa,s,default,meta,inf,orm,xml,resource,for,use,with,spring,s,default,persistence,unit,if,any,p,checks,whether,a,meta,inf,orm,xml,file,exists,in,the,classpath,and,uses,it,if,it,is,not,co,located,with,a,meta,inf,persistence,xml,file;private,resource,get,orm,xml,for,default,persistence,unit,resource,orm,xml,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,if,orm,xml,exists,try,resource,persistence,xml,orm,xml,create,relative,if,persistence,xml,exists,return,orm,xml,catch,ioexception,ex,return,orm,xml,return,null
DefaultPersistenceUnitManager -> private Resource getOrmXmlForDefaultPersistenceUnit();1474895745;Determine JPA's default "META-INF/orm.xml" resource for use with Spring's default_persistence unit, if any._<p>Checks whether a "META-INF/orm.xml" file exists in the classpath and uses it_if it is not co-located with a "META-INF/persistence.xml" file.;private Resource getOrmXmlForDefaultPersistenceUnit() {_		Resource ormXml = this.resourcePatternResolver.getResource(_				this.defaultPersistenceUnitRootLocation + DEFAULT_ORM_XML_RESOURCE)__		if (ormXml.exists()) {_			try {_				Resource persistenceXml = ormXml.createRelative(PERSISTENCE_XML_FILENAME)__				if (!persistenceXml.exists()) {_					return ormXml__				}_			}_			catch (IOException ex) {_				_				return ormXml__			}_		}_		return null__	};determine,jpa,s,default,meta,inf,orm,xml,resource,for,use,with,spring,s,default,persistence,unit,if,any,p,checks,whether,a,meta,inf,orm,xml,file,exists,in,the,classpath,and,uses,it,if,it,is,not,co,located,with,a,meta,inf,persistence,xml,file;private,resource,get,orm,xml,for,default,persistence,unit,resource,orm,xml,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,if,orm,xml,exists,try,resource,persistence,xml,orm,xml,create,relative,if,persistence,xml,exists,return,orm,xml,catch,ioexception,ex,return,orm,xml,return,null
DefaultPersistenceUnitManager -> public LoadTimeWeaver getLoadTimeWeaver();1328020251;Return the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract.;public LoadTimeWeaver getLoadTimeWeaver() {_		return this.loadTimeWeaver__	};return,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract;public,load,time,weaver,get,load,time,weaver,return,this,load,time,weaver
DefaultPersistenceUnitManager -> public LoadTimeWeaver getLoadTimeWeaver();1329142650;Return the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract.;public LoadTimeWeaver getLoadTimeWeaver() {_		return this.loadTimeWeaver__	};return,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract;public,load,time,weaver,get,load,time,weaver,return,this,load,time,weaver
DefaultPersistenceUnitManager -> public LoadTimeWeaver getLoadTimeWeaver();1347282851;Return the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract.;public LoadTimeWeaver getLoadTimeWeaver() {_		return this.loadTimeWeaver__	};return,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract;public,load,time,weaver,get,load,time,weaver,return,this,load,time,weaver
DefaultPersistenceUnitManager -> public LoadTimeWeaver getLoadTimeWeaver();1351648399;Return the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract.;public LoadTimeWeaver getLoadTimeWeaver() {_		return this.loadTimeWeaver__	};return,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract;public,load,time,weaver,get,load,time,weaver,return,this,load,time,weaver
DefaultPersistenceUnitManager -> public LoadTimeWeaver getLoadTimeWeaver();1356735495;Return the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract.;public LoadTimeWeaver getLoadTimeWeaver() {_		return this.loadTimeWeaver__	};return,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract;public,load,time,weaver,get,load,time,weaver,return,this,load,time,weaver
DefaultPersistenceUnitManager -> public LoadTimeWeaver getLoadTimeWeaver();1357119239;Return the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract.;public LoadTimeWeaver getLoadTimeWeaver() {_		return this.loadTimeWeaver__	};return,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract;public,load,time,weaver,get,load,time,weaver,return,this,load,time,weaver
DefaultPersistenceUnitManager -> public LoadTimeWeaver getLoadTimeWeaver();1363714444;Return the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract.;public LoadTimeWeaver getLoadTimeWeaver() {_		return this.loadTimeWeaver__	};return,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract;public,load,time,weaver,get,load,time,weaver,return,this,load,time,weaver
DefaultPersistenceUnitManager -> public LoadTimeWeaver getLoadTimeWeaver();1368482696;Return the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract.;public LoadTimeWeaver getLoadTimeWeaver() {_		return this.loadTimeWeaver__	};return,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract;public,load,time,weaver,get,load,time,weaver,return,this,load,time,weaver
DefaultPersistenceUnitManager -> public LoadTimeWeaver getLoadTimeWeaver();1375434510;Return the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract.;public LoadTimeWeaver getLoadTimeWeaver() {_		return this.loadTimeWeaver__	};return,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract;public,load,time,weaver,get,load,time,weaver,return,this,load,time,weaver
DefaultPersistenceUnitManager -> public LoadTimeWeaver getLoadTimeWeaver();1375458214;Return the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract.;public LoadTimeWeaver getLoadTimeWeaver() {_		return this.loadTimeWeaver__	};return,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract;public,load,time,weaver,get,load,time,weaver,return,this,load,time,weaver
DefaultPersistenceUnitManager -> public LoadTimeWeaver getLoadTimeWeaver();1389648334;Return the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract.;public LoadTimeWeaver getLoadTimeWeaver() {_		return this.loadTimeWeaver__	};return,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract;public,load,time,weaver,get,load,time,weaver,return,this,load,time,weaver
DefaultPersistenceUnitManager -> public LoadTimeWeaver getLoadTimeWeaver();1390250900;Return the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract.;public LoadTimeWeaver getLoadTimeWeaver() {_		return this.loadTimeWeaver__	};return,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract;public,load,time,weaver,get,load,time,weaver,return,this,load,time,weaver
DefaultPersistenceUnitManager -> public LoadTimeWeaver getLoadTimeWeaver();1390313076;Return the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract.;public LoadTimeWeaver getLoadTimeWeaver() {_		return this.loadTimeWeaver__	};return,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract;public,load,time,weaver,get,load,time,weaver,return,this,load,time,weaver
DefaultPersistenceUnitManager -> public LoadTimeWeaver getLoadTimeWeaver();1400140571;Return the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract.;public LoadTimeWeaver getLoadTimeWeaver() {_		return this.loadTimeWeaver__	};return,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract;public,load,time,weaver,get,load,time,weaver,return,this,load,time,weaver
DefaultPersistenceUnitManager -> public LoadTimeWeaver getLoadTimeWeaver();1403774750;Return the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract.;public LoadTimeWeaver getLoadTimeWeaver() {_		return this.loadTimeWeaver__	};return,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract;public,load,time,weaver,get,load,time,weaver,return,this,load,time,weaver
DefaultPersistenceUnitManager -> public LoadTimeWeaver getLoadTimeWeaver();1404056186;Return the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract.;public LoadTimeWeaver getLoadTimeWeaver() {_		return this.loadTimeWeaver__	};return,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract;public,load,time,weaver,get,load,time,weaver,return,this,load,time,weaver
DefaultPersistenceUnitManager -> public LoadTimeWeaver getLoadTimeWeaver();1447323728;Return the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract.;public LoadTimeWeaver getLoadTimeWeaver() {_		return this.loadTimeWeaver__	};return,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract;public,load,time,weaver,get,load,time,weaver,return,this,load,time,weaver
DefaultPersistenceUnitManager -> public LoadTimeWeaver getLoadTimeWeaver();1464299869;Return the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract.;public LoadTimeWeaver getLoadTimeWeaver() {_		return this.loadTimeWeaver__	};return,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract;public,load,time,weaver,get,load,time,weaver,return,this,load,time,weaver
DefaultPersistenceUnitManager -> public LoadTimeWeaver getLoadTimeWeaver();1467668243;Return the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract.;public LoadTimeWeaver getLoadTimeWeaver() {_		return this.loadTimeWeaver__	};return,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract;public,load,time,weaver,get,load,time,weaver,return,this,load,time,weaver
DefaultPersistenceUnitManager -> public LoadTimeWeaver getLoadTimeWeaver();1467730834;Return the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract.;public LoadTimeWeaver getLoadTimeWeaver() {_		return this.loadTimeWeaver__	};return,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract;public,load,time,weaver,get,load,time,weaver,return,this,load,time,weaver
DefaultPersistenceUnitManager -> public LoadTimeWeaver getLoadTimeWeaver();1471464767;Return the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract.;public LoadTimeWeaver getLoadTimeWeaver() {_		return this.loadTimeWeaver__	};return,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract;public,load,time,weaver,get,load,time,weaver,return,this,load,time,weaver
DefaultPersistenceUnitManager -> public LoadTimeWeaver getLoadTimeWeaver();1472736647;Return the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract.;public LoadTimeWeaver getLoadTimeWeaver() {_		return this.loadTimeWeaver__	};return,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract;public,load,time,weaver,get,load,time,weaver,return,this,load,time,weaver
DefaultPersistenceUnitManager -> public LoadTimeWeaver getLoadTimeWeaver();1474895745;Return the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract.;public LoadTimeWeaver getLoadTimeWeaver() {_		return this.loadTimeWeaver__	};return,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract;public,load,time,weaver,get,load,time,weaver,return,this,load,time,weaver
DefaultPersistenceUnitManager -> public LoadTimeWeaver getLoadTimeWeaver();1495868221;Return the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract.;public LoadTimeWeaver getLoadTimeWeaver() {_		return this.loadTimeWeaver__	};return,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract;public,load,time,weaver,get,load,time,weaver,return,this,load,time,weaver
DefaultPersistenceUnitManager -> public LoadTimeWeaver getLoadTimeWeaver();1496259743;Return the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract.;public LoadTimeWeaver getLoadTimeWeaver() {_		return this.loadTimeWeaver__	};return,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract;public,load,time,weaver,get,load,time,weaver,return,this,load,time,weaver
DefaultPersistenceUnitManager -> public void setPackagesToScan(String... packagesToScan);1328020251;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with <code>persistence.xml</code>_markers in them. In case of Spring-based scanning, no <code>persistence.xml</code>_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner}).;public void setPackagesToScan(String... packagesToScan) {_		this.packagesToScan = packagesToScan__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,code,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,code,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner;public,void,set,packages,to,scan,string,packages,to,scan,this,packages,to,scan,packages,to,scan
DefaultPersistenceUnitManager -> public void setPackagesToScan(String... packagesToScan);1329142650;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with <code>persistence.xml</code>_markers in them. In case of Spring-based scanning, no <code>persistence.xml</code>_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner}).;public void setPackagesToScan(String... packagesToScan) {_		this.packagesToScan = packagesToScan__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,code,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,code,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner;public,void,set,packages,to,scan,string,packages,to,scan,this,packages,to,scan,packages,to,scan
DefaultPersistenceUnitManager -> public void setPackagesToScan(String... packagesToScan);1347282851;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with <code>persistence.xml</code>_markers in them. In case of Spring-based scanning, no <code>persistence.xml</code>_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner}).;public void setPackagesToScan(String... packagesToScan) {_		this.packagesToScan = packagesToScan__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,code,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,code,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner;public,void,set,packages,to,scan,string,packages,to,scan,this,packages,to,scan,packages,to,scan
DefaultPersistenceUnitManager -> public void setPackagesToScan(String... packagesToScan);1351648399;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with <code>persistence.xml</code>_markers in them. In case of Spring-based scanning, no <code>persistence.xml</code>_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner}).;public void setPackagesToScan(String... packagesToScan) {_		this.packagesToScan = packagesToScan__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,code,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,code,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner;public,void,set,packages,to,scan,string,packages,to,scan,this,packages,to,scan,packages,to,scan
DefaultPersistenceUnitManager -> public void setPackagesToScan(String... packagesToScan);1356735495;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner}).;public void setPackagesToScan(String... packagesToScan) {_		this.packagesToScan = packagesToScan__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner;public,void,set,packages,to,scan,string,packages,to,scan,this,packages,to,scan,packages,to,scan
DefaultPersistenceUnitManager -> public void setPackagesToScan(String... packagesToScan);1357119239;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner}).;public void setPackagesToScan(String... packagesToScan) {_		this.packagesToScan = packagesToScan__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner;public,void,set,packages,to,scan,string,packages,to,scan,this,packages,to,scan,packages,to,scan
DefaultPersistenceUnitManager -> public void setPackagesToScan(String... packagesToScan);1363714444;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner}).;public void setPackagesToScan(String... packagesToScan) {_		this.packagesToScan = packagesToScan__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner;public,void,set,packages,to,scan,string,packages,to,scan,this,packages,to,scan,packages,to,scan
DefaultPersistenceUnitManager -> public void setPackagesToScan(String... packagesToScan);1368482696;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner}).;public void setPackagesToScan(String... packagesToScan) {_		this.packagesToScan = packagesToScan__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner;public,void,set,packages,to,scan,string,packages,to,scan,this,packages,to,scan,packages,to,scan
DefaultPersistenceUnitManager -> public void setPackagesToScan(String... packagesToScan);1375434510;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner}).;public void setPackagesToScan(String... packagesToScan) {_		this.packagesToScan = packagesToScan__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner;public,void,set,packages,to,scan,string,packages,to,scan,this,packages,to,scan,packages,to,scan
DefaultPersistenceUnitManager -> public void setPackagesToScan(String... packagesToScan);1375458214;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner}).;public void setPackagesToScan(String... packagesToScan) {_		this.packagesToScan = packagesToScan__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner;public,void,set,packages,to,scan,string,packages,to,scan,this,packages,to,scan,packages,to,scan
DefaultPersistenceUnitManager -> public void setPackagesToScan(String... packagesToScan);1389648334;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner}).;public void setPackagesToScan(String... packagesToScan) {_		this.packagesToScan = packagesToScan__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner;public,void,set,packages,to,scan,string,packages,to,scan,this,packages,to,scan,packages,to,scan
DefaultPersistenceUnitManager -> public void setPackagesToScan(String... packagesToScan);1390250900;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner}).;public void setPackagesToScan(String... packagesToScan) {_		this.packagesToScan = packagesToScan__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner;public,void,set,packages,to,scan,string,packages,to,scan,this,packages,to,scan,packages,to,scan
DefaultPersistenceUnitManager -> public void setPackagesToScan(String... packagesToScan);1390313076;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p>Such package scanning defines a "default persistence unit" in Spring, which_may live next to regularly defined units originating from {@code persistence.xml}._Its name is determined by {@link #setDefaultPersistenceUnitName}: by default,_it's simply "default"._<p>If no explicit {@link #setMappingResources mapping resources} have been_specified in addition to these packages, this manager looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._@see #setDefaultPersistenceUnitName_@see #setMappingResources;public void setPackagesToScan(String... packagesToScan) {_		this.packagesToScan = packagesToScan__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,such,package,scanning,defines,a,default,persistence,unit,in,spring,which,may,live,next,to,regularly,defined,units,originating,from,code,persistence,xml,its,name,is,determined,by,link,set,default,persistence,unit,name,by,default,it,s,simply,default,p,if,no,explicit,link,set,mapping,resources,mapping,resources,have,been,specified,in,addition,to,these,packages,this,manager,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,see,set,default,persistence,unit,name,see,set,mapping,resources;public,void,set,packages,to,scan,string,packages,to,scan,this,packages,to,scan,packages,to,scan
DefaultPersistenceUnitManager -> public void setPackagesToScan(String... packagesToScan);1400140571;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p>Such package scanning defines a "default persistence unit" in Spring, which_may live next to regularly defined units originating from {@code persistence.xml}._Its name is determined by {@link #setDefaultPersistenceUnitName}: by default,_it's simply "default"._<p>If no explicit {@link #setMappingResources mapping resources} have been_specified in addition to these packages, this manager looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._@see #setDefaultPersistenceUnitName_@see #setMappingResources;public void setPackagesToScan(String... packagesToScan) {_		this.packagesToScan = packagesToScan__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,such,package,scanning,defines,a,default,persistence,unit,in,spring,which,may,live,next,to,regularly,defined,units,originating,from,code,persistence,xml,its,name,is,determined,by,link,set,default,persistence,unit,name,by,default,it,s,simply,default,p,if,no,explicit,link,set,mapping,resources,mapping,resources,have,been,specified,in,addition,to,these,packages,this,manager,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,see,set,default,persistence,unit,name,see,set,mapping,resources;public,void,set,packages,to,scan,string,packages,to,scan,this,packages,to,scan,packages,to,scan
DefaultPersistenceUnitManager -> public void setPackagesToScan(String... packagesToScan);1403774750;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p>Such package scanning defines a "default persistence unit" in Spring, which_may live next to regularly defined units originating from {@code persistence.xml}._Its name is determined by {@link #setDefaultPersistenceUnitName}: by default,_it's simply "default"._<p>If no explicit {@link #setMappingResources mapping resources} have been_specified in addition to these packages, this manager looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._@see #setDefaultPersistenceUnitName_@see #setMappingResources;public void setPackagesToScan(String... packagesToScan) {_		this.packagesToScan = packagesToScan__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,such,package,scanning,defines,a,default,persistence,unit,in,spring,which,may,live,next,to,regularly,defined,units,originating,from,code,persistence,xml,its,name,is,determined,by,link,set,default,persistence,unit,name,by,default,it,s,simply,default,p,if,no,explicit,link,set,mapping,resources,mapping,resources,have,been,specified,in,addition,to,these,packages,this,manager,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,see,set,default,persistence,unit,name,see,set,mapping,resources;public,void,set,packages,to,scan,string,packages,to,scan,this,packages,to,scan,packages,to,scan
DefaultPersistenceUnitManager -> public void setPackagesToScan(String... packagesToScan);1404056186;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p>Such package scanning defines a "default persistence unit" in Spring, which_may live next to regularly defined units originating from {@code persistence.xml}._Its name is determined by {@link #setDefaultPersistenceUnitName}: by default,_it's simply "default"._<p><p>Note: There may be limitations in comparison to regular JPA scanning.</b>_In particular, JPA providers may pick up annotated packages for provider-specific_annotations only when driven by {@code persistence.xml}. As of 4.1, Spring's_scan can detect annotated packages as well if supported by the given_{@link org.springframework.orm.jpa.JpaVendorAdapter} (e.g. for Hibernate)._<p>If no explicit {@link #setMappingResources mapping resources} have been_specified in addition to these packages, this manager looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._@see #setDefaultPersistenceUnitName_@see #setMappingResources;public void setPackagesToScan(String... packagesToScan) {_		this.packagesToScan = packagesToScan__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,such,package,scanning,defines,a,default,persistence,unit,in,spring,which,may,live,next,to,regularly,defined,units,originating,from,code,persistence,xml,its,name,is,determined,by,link,set,default,persistence,unit,name,by,default,it,s,simply,default,p,p,note,there,may,be,limitations,in,comparison,to,regular,jpa,scanning,b,in,particular,jpa,providers,may,pick,up,annotated,packages,for,provider,specific,annotations,only,when,driven,by,code,persistence,xml,as,of,4,1,spring,s,scan,can,detect,annotated,packages,as,well,if,supported,by,the,given,link,org,springframework,orm,jpa,jpa,vendor,adapter,e,g,for,hibernate,p,if,no,explicit,link,set,mapping,resources,mapping,resources,have,been,specified,in,addition,to,these,packages,this,manager,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,see,set,default,persistence,unit,name,see,set,mapping,resources;public,void,set,packages,to,scan,string,packages,to,scan,this,packages,to,scan,packages,to,scan
DefaultPersistenceUnitManager -> public void setPackagesToScan(String... packagesToScan);1447323728;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p>Such package scanning defines a "default persistence unit" in Spring, which_may live next to regularly defined units originating from {@code persistence.xml}._Its name is determined by {@link #setDefaultPersistenceUnitName}: by default,_it's simply "default"._<p><p>Note: There may be limitations in comparison to regular JPA scanning.</b>_In particular, JPA providers may pick up annotated packages for provider-specific_annotations only when driven by {@code persistence.xml}. As of 4.1, Spring's_scan can detect annotated packages as well if supported by the given_{@link org.springframework.orm.jpa.JpaVendorAdapter} (e.g. for Hibernate)._<p>If no explicit {@link #setMappingResources mapping resources} have been_specified in addition to these packages, this manager looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._@see #setDefaultPersistenceUnitName_@see #setMappingResources;public void setPackagesToScan(String... packagesToScan) {_		this.packagesToScan = packagesToScan__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,such,package,scanning,defines,a,default,persistence,unit,in,spring,which,may,live,next,to,regularly,defined,units,originating,from,code,persistence,xml,its,name,is,determined,by,link,set,default,persistence,unit,name,by,default,it,s,simply,default,p,p,note,there,may,be,limitations,in,comparison,to,regular,jpa,scanning,b,in,particular,jpa,providers,may,pick,up,annotated,packages,for,provider,specific,annotations,only,when,driven,by,code,persistence,xml,as,of,4,1,spring,s,scan,can,detect,annotated,packages,as,well,if,supported,by,the,given,link,org,springframework,orm,jpa,jpa,vendor,adapter,e,g,for,hibernate,p,if,no,explicit,link,set,mapping,resources,mapping,resources,have,been,specified,in,addition,to,these,packages,this,manager,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,see,set,default,persistence,unit,name,see,set,mapping,resources;public,void,set,packages,to,scan,string,packages,to,scan,this,packages,to,scan,packages,to,scan
DefaultPersistenceUnitManager -> public void setPackagesToScan(String... packagesToScan);1464299869;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p>Such package scanning defines a "default persistence unit" in Spring, which_may live next to regularly defined units originating from {@code persistence.xml}._Its name is determined by {@link #setDefaultPersistenceUnitName}: by default,_it's simply "default"._<p><p>Note: There may be limitations in comparison to regular JPA scanning.</b>_In particular, JPA providers may pick up annotated packages for provider-specific_annotations only when driven by {@code persistence.xml}. As of 4.1, Spring's_scan can detect annotated packages as well if supported by the given_{@link org.springframework.orm.jpa.JpaVendorAdapter} (e.g. for Hibernate)._<p>If no explicit {@link #setMappingResources mapping resources} have been_specified in addition to these packages, this manager looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._@see #setDefaultPersistenceUnitName_@see #setMappingResources;public void setPackagesToScan(String... packagesToScan) {_		this.packagesToScan = packagesToScan__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,such,package,scanning,defines,a,default,persistence,unit,in,spring,which,may,live,next,to,regularly,defined,units,originating,from,code,persistence,xml,its,name,is,determined,by,link,set,default,persistence,unit,name,by,default,it,s,simply,default,p,p,note,there,may,be,limitations,in,comparison,to,regular,jpa,scanning,b,in,particular,jpa,providers,may,pick,up,annotated,packages,for,provider,specific,annotations,only,when,driven,by,code,persistence,xml,as,of,4,1,spring,s,scan,can,detect,annotated,packages,as,well,if,supported,by,the,given,link,org,springframework,orm,jpa,jpa,vendor,adapter,e,g,for,hibernate,p,if,no,explicit,link,set,mapping,resources,mapping,resources,have,been,specified,in,addition,to,these,packages,this,manager,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,see,set,default,persistence,unit,name,see,set,mapping,resources;public,void,set,packages,to,scan,string,packages,to,scan,this,packages,to,scan,packages,to,scan
DefaultPersistenceUnitManager -> public void setPackagesToScan(String... packagesToScan);1467668243;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p>Such package scanning defines a "default persistence unit" in Spring, which_may live next to regularly defined units originating from {@code persistence.xml}._Its name is determined by {@link #setDefaultPersistenceUnitName}: by default,_it's simply "default"._<p><p>Note: There may be limitations in comparison to regular JPA scanning.</b>_In particular, JPA providers may pick up annotated packages for provider-specific_annotations only when driven by {@code persistence.xml}. As of 4.1, Spring's_scan can detect annotated packages as well if supported by the given_{@link org.springframework.orm.jpa.JpaVendorAdapter} (e.g. for Hibernate)._<p>If no explicit {@link #setMappingResources mapping resources} have been_specified in addition to these packages, this manager looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._@see #setDefaultPersistenceUnitName_@see #setMappingResources;public void setPackagesToScan(String... packagesToScan) {_		this.packagesToScan = packagesToScan__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,such,package,scanning,defines,a,default,persistence,unit,in,spring,which,may,live,next,to,regularly,defined,units,originating,from,code,persistence,xml,its,name,is,determined,by,link,set,default,persistence,unit,name,by,default,it,s,simply,default,p,p,note,there,may,be,limitations,in,comparison,to,regular,jpa,scanning,b,in,particular,jpa,providers,may,pick,up,annotated,packages,for,provider,specific,annotations,only,when,driven,by,code,persistence,xml,as,of,4,1,spring,s,scan,can,detect,annotated,packages,as,well,if,supported,by,the,given,link,org,springframework,orm,jpa,jpa,vendor,adapter,e,g,for,hibernate,p,if,no,explicit,link,set,mapping,resources,mapping,resources,have,been,specified,in,addition,to,these,packages,this,manager,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,see,set,default,persistence,unit,name,see,set,mapping,resources;public,void,set,packages,to,scan,string,packages,to,scan,this,packages,to,scan,packages,to,scan
DefaultPersistenceUnitManager -> public void setPackagesToScan(String... packagesToScan);1467730834;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p>Such package scanning defines a "default persistence unit" in Spring, which_may live next to regularly defined units originating from {@code persistence.xml}._Its name is determined by {@link #setDefaultPersistenceUnitName}: by default,_it's simply "default"._<p><p>Note: There may be limitations in comparison to regular JPA scanning.</b>_In particular, JPA providers may pick up annotated packages for provider-specific_annotations only when driven by {@code persistence.xml}. As of 4.1, Spring's_scan can detect annotated packages as well if supported by the given_{@link org.springframework.orm.jpa.JpaVendorAdapter} (e.g. for Hibernate)._<p>If no explicit {@link #setMappingResources mapping resources} have been_specified in addition to these packages, this manager looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._@see #setDefaultPersistenceUnitName_@see #setMappingResources;public void setPackagesToScan(String... packagesToScan) {_		this.packagesToScan = packagesToScan__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,such,package,scanning,defines,a,default,persistence,unit,in,spring,which,may,live,next,to,regularly,defined,units,originating,from,code,persistence,xml,its,name,is,determined,by,link,set,default,persistence,unit,name,by,default,it,s,simply,default,p,p,note,there,may,be,limitations,in,comparison,to,regular,jpa,scanning,b,in,particular,jpa,providers,may,pick,up,annotated,packages,for,provider,specific,annotations,only,when,driven,by,code,persistence,xml,as,of,4,1,spring,s,scan,can,detect,annotated,packages,as,well,if,supported,by,the,given,link,org,springframework,orm,jpa,jpa,vendor,adapter,e,g,for,hibernate,p,if,no,explicit,link,set,mapping,resources,mapping,resources,have,been,specified,in,addition,to,these,packages,this,manager,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,see,set,default,persistence,unit,name,see,set,mapping,resources;public,void,set,packages,to,scan,string,packages,to,scan,this,packages,to,scan,packages,to,scan
DefaultPersistenceUnitManager -> public void setPackagesToScan(String... packagesToScan);1471464767;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p>Such package scanning defines a "default persistence unit" in Spring, which_may live next to regularly defined units originating from {@code persistence.xml}._Its name is determined by {@link #setDefaultPersistenceUnitName}: by default,_it's simply "default"._<p><p>Note: There may be limitations in comparison to regular JPA scanning.</b>_In particular, JPA providers may pick up annotated packages for provider-specific_annotations only when driven by {@code persistence.xml}. As of 4.1, Spring's_scan can detect annotated packages as well if supported by the given_{@link org.springframework.orm.jpa.JpaVendorAdapter} (e.g. for Hibernate)._<p>If no explicit {@link #setMappingResources mapping resources} have been_specified in addition to these packages, this manager looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._@see #setDefaultPersistenceUnitName_@see #setMappingResources;public void setPackagesToScan(String... packagesToScan) {_		this.packagesToScan = packagesToScan__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,such,package,scanning,defines,a,default,persistence,unit,in,spring,which,may,live,next,to,regularly,defined,units,originating,from,code,persistence,xml,its,name,is,determined,by,link,set,default,persistence,unit,name,by,default,it,s,simply,default,p,p,note,there,may,be,limitations,in,comparison,to,regular,jpa,scanning,b,in,particular,jpa,providers,may,pick,up,annotated,packages,for,provider,specific,annotations,only,when,driven,by,code,persistence,xml,as,of,4,1,spring,s,scan,can,detect,annotated,packages,as,well,if,supported,by,the,given,link,org,springframework,orm,jpa,jpa,vendor,adapter,e,g,for,hibernate,p,if,no,explicit,link,set,mapping,resources,mapping,resources,have,been,specified,in,addition,to,these,packages,this,manager,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,see,set,default,persistence,unit,name,see,set,mapping,resources;public,void,set,packages,to,scan,string,packages,to,scan,this,packages,to,scan,packages,to,scan
DefaultPersistenceUnitManager -> public void setPackagesToScan(String... packagesToScan);1472736647;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p>Such package scanning defines a "default persistence unit" in Spring, which_may live next to regularly defined units originating from {@code persistence.xml}._Its name is determined by {@link #setDefaultPersistenceUnitName}: by default,_it's simply "default"._<p><p>Note: There may be limitations in comparison to regular JPA scanning.</b>_In particular, JPA providers may pick up annotated packages for provider-specific_annotations only when driven by {@code persistence.xml}. As of 4.1, Spring's_scan can detect annotated packages as well if supported by the given_{@link org.springframework.orm.jpa.JpaVendorAdapter} (e.g. for Hibernate)._<p>If no explicit {@link #setMappingResources mapping resources} have been_specified in addition to these packages, this manager looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._@see #setDefaultPersistenceUnitName_@see #setMappingResources;public void setPackagesToScan(String... packagesToScan) {_		this.packagesToScan = packagesToScan__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,such,package,scanning,defines,a,default,persistence,unit,in,spring,which,may,live,next,to,regularly,defined,units,originating,from,code,persistence,xml,its,name,is,determined,by,link,set,default,persistence,unit,name,by,default,it,s,simply,default,p,p,note,there,may,be,limitations,in,comparison,to,regular,jpa,scanning,b,in,particular,jpa,providers,may,pick,up,annotated,packages,for,provider,specific,annotations,only,when,driven,by,code,persistence,xml,as,of,4,1,spring,s,scan,can,detect,annotated,packages,as,well,if,supported,by,the,given,link,org,springframework,orm,jpa,jpa,vendor,adapter,e,g,for,hibernate,p,if,no,explicit,link,set,mapping,resources,mapping,resources,have,been,specified,in,addition,to,these,packages,this,manager,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,see,set,default,persistence,unit,name,see,set,mapping,resources;public,void,set,packages,to,scan,string,packages,to,scan,this,packages,to,scan,packages,to,scan
DefaultPersistenceUnitManager -> public void setPackagesToScan(String... packagesToScan);1474895745;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p>Such package scanning defines a "default persistence unit" in Spring, which_may live next to regularly defined units originating from {@code persistence.xml}._Its name is determined by {@link #setDefaultPersistenceUnitName}: by default,_it's simply "default"._<p><p>Note: There may be limitations in comparison to regular JPA scanning.</b>_In particular, JPA providers may pick up annotated packages for provider-specific_annotations only when driven by {@code persistence.xml}. As of 4.1, Spring's_scan can detect annotated packages as well if supported by the given_{@link org.springframework.orm.jpa.JpaVendorAdapter} (e.g. for Hibernate)._<p>If no explicit {@link #setMappingResources mapping resources} have been_specified in addition to these packages, this manager looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._@see #setDefaultPersistenceUnitName_@see #setMappingResources;public void setPackagesToScan(String... packagesToScan) {_		this.packagesToScan = packagesToScan__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,such,package,scanning,defines,a,default,persistence,unit,in,spring,which,may,live,next,to,regularly,defined,units,originating,from,code,persistence,xml,its,name,is,determined,by,link,set,default,persistence,unit,name,by,default,it,s,simply,default,p,p,note,there,may,be,limitations,in,comparison,to,regular,jpa,scanning,b,in,particular,jpa,providers,may,pick,up,annotated,packages,for,provider,specific,annotations,only,when,driven,by,code,persistence,xml,as,of,4,1,spring,s,scan,can,detect,annotated,packages,as,well,if,supported,by,the,given,link,org,springframework,orm,jpa,jpa,vendor,adapter,e,g,for,hibernate,p,if,no,explicit,link,set,mapping,resources,mapping,resources,have,been,specified,in,addition,to,these,packages,this,manager,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,see,set,default,persistence,unit,name,see,set,mapping,resources;public,void,set,packages,to,scan,string,packages,to,scan,this,packages,to,scan,packages,to,scan
DefaultPersistenceUnitManager -> public void setPackagesToScan(String... packagesToScan);1495868221;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p>Such package scanning defines a "default persistence unit" in Spring, which_may live next to regularly defined units originating from {@code persistence.xml}._Its name is determined by {@link #setDefaultPersistenceUnitName}: by default,_it's simply "default"._<p><p>Note: There may be limitations in comparison to regular JPA scanning.</b>_In particular, JPA providers may pick up annotated packages for provider-specific_annotations only when driven by {@code persistence.xml}. As of 4.1, Spring's_scan can detect annotated packages as well if supported by the given_{@link org.springframework.orm.jpa.JpaVendorAdapter} (e.g. for Hibernate)._<p>If no explicit {@link #setMappingResources mapping resources} have been_specified in addition to these packages, this manager looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._@see #setDefaultPersistenceUnitName_@see #setMappingResources;public void setPackagesToScan(String... packagesToScan) {_		this.packagesToScan = packagesToScan__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,such,package,scanning,defines,a,default,persistence,unit,in,spring,which,may,live,next,to,regularly,defined,units,originating,from,code,persistence,xml,its,name,is,determined,by,link,set,default,persistence,unit,name,by,default,it,s,simply,default,p,p,note,there,may,be,limitations,in,comparison,to,regular,jpa,scanning,b,in,particular,jpa,providers,may,pick,up,annotated,packages,for,provider,specific,annotations,only,when,driven,by,code,persistence,xml,as,of,4,1,spring,s,scan,can,detect,annotated,packages,as,well,if,supported,by,the,given,link,org,springframework,orm,jpa,jpa,vendor,adapter,e,g,for,hibernate,p,if,no,explicit,link,set,mapping,resources,mapping,resources,have,been,specified,in,addition,to,these,packages,this,manager,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,see,set,default,persistence,unit,name,see,set,mapping,resources;public,void,set,packages,to,scan,string,packages,to,scan,this,packages,to,scan,packages,to,scan
DefaultPersistenceUnitManager -> public void setPackagesToScan(String... packagesToScan);1496259743;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p>Such package scanning defines a "default persistence unit" in Spring, which_may live next to regularly defined units originating from {@code persistence.xml}._Its name is determined by {@link #setDefaultPersistenceUnitName}: by default,_it's simply "default"._<p><p>Note: There may be limitations in comparison to regular JPA scanning.</b>_In particular, JPA providers may pick up annotated packages for provider-specific_annotations only when driven by {@code persistence.xml}. As of 4.1, Spring's_scan can detect annotated packages as well if supported by the given_{@link org.springframework.orm.jpa.JpaVendorAdapter} (e.g. for Hibernate)._<p>If no explicit {@link #setMappingResources mapping resources} have been_specified in addition to these packages, this manager looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._@see #setDefaultPersistenceUnitName_@see #setMappingResources;public void setPackagesToScan(String... packagesToScan) {_		this.packagesToScan = packagesToScan__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,such,package,scanning,defines,a,default,persistence,unit,in,spring,which,may,live,next,to,regularly,defined,units,originating,from,code,persistence,xml,its,name,is,determined,by,link,set,default,persistence,unit,name,by,default,it,s,simply,default,p,p,note,there,may,be,limitations,in,comparison,to,regular,jpa,scanning,b,in,particular,jpa,providers,may,pick,up,annotated,packages,for,provider,specific,annotations,only,when,driven,by,code,persistence,xml,as,of,4,1,spring,s,scan,can,detect,annotated,packages,as,well,if,supported,by,the,given,link,org,springframework,orm,jpa,jpa,vendor,adapter,e,g,for,hibernate,p,if,no,explicit,link,set,mapping,resources,mapping,resources,have,been,specified,in,addition,to,these,packages,this,manager,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,see,set,default,persistence,unit,name,see,set,mapping,resources;public,void,set,packages,to,scan,string,packages,to,scan,this,packages,to,scan,packages,to,scan
DefaultPersistenceUnitManager -> public void setPackagesToScan(String... packagesToScan);1496837955;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p>Such package scanning defines a "default persistence unit" in Spring, which_may live next to regularly defined units originating from {@code persistence.xml}._Its name is determined by {@link #setDefaultPersistenceUnitName}: by default,_it's simply "default"._<p><p>Note: There may be limitations in comparison to regular JPA scanning.</b>_In particular, JPA providers may pick up annotated packages for provider-specific_annotations only when driven by {@code persistence.xml}. As of 4.1, Spring's_scan can detect annotated packages as well if supported by the given_{@link org.springframework.orm.jpa.JpaVendorAdapter} (e.g. for Hibernate)._<p>If no explicit {@link #setMappingResources mapping resources} have been_specified in addition to these packages, this manager looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._@see #setDefaultPersistenceUnitName_@see #setMappingResources;public void setPackagesToScan(String... packagesToScan) {_		this.packagesToScan = packagesToScan__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,such,package,scanning,defines,a,default,persistence,unit,in,spring,which,may,live,next,to,regularly,defined,units,originating,from,code,persistence,xml,its,name,is,determined,by,link,set,default,persistence,unit,name,by,default,it,s,simply,default,p,p,note,there,may,be,limitations,in,comparison,to,regular,jpa,scanning,b,in,particular,jpa,providers,may,pick,up,annotated,packages,for,provider,specific,annotations,only,when,driven,by,code,persistence,xml,as,of,4,1,spring,s,scan,can,detect,annotated,packages,as,well,if,supported,by,the,given,link,org,springframework,orm,jpa,jpa,vendor,adapter,e,g,for,hibernate,p,if,no,explicit,link,set,mapping,resources,mapping,resources,have,been,specified,in,addition,to,these,packages,this,manager,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,see,set,default,persistence,unit,name,see,set,mapping,resources;public,void,set,packages,to,scan,string,packages,to,scan,this,packages,to,scan,packages,to,scan
DefaultPersistenceUnitManager -> public void setPackagesToScan(String... packagesToScan);1498780456;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p>Such package scanning defines a "default persistence unit" in Spring, which_may live next to regularly defined units originating from {@code persistence.xml}._Its name is determined by {@link #setDefaultPersistenceUnitName}: by default,_it's simply "default"._<p><p>Note: There may be limitations in comparison to regular JPA scanning.</b>_In particular, JPA providers may pick up annotated packages for provider-specific_annotations only when driven by {@code persistence.xml}. As of 4.1, Spring's_scan can detect annotated packages as well if supported by the given_{@link org.springframework.orm.jpa.JpaVendorAdapter} (e.g. for Hibernate)._<p>If no explicit {@link #setMappingResources mapping resources} have been_specified in addition to these packages, this manager looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._@see #setDefaultPersistenceUnitName_@see #setMappingResources;public void setPackagesToScan(String... packagesToScan) {_		this.packagesToScan = packagesToScan__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,such,package,scanning,defines,a,default,persistence,unit,in,spring,which,may,live,next,to,regularly,defined,units,originating,from,code,persistence,xml,its,name,is,determined,by,link,set,default,persistence,unit,name,by,default,it,s,simply,default,p,p,note,there,may,be,limitations,in,comparison,to,regular,jpa,scanning,b,in,particular,jpa,providers,may,pick,up,annotated,packages,for,provider,specific,annotations,only,when,driven,by,code,persistence,xml,as,of,4,1,spring,s,scan,can,detect,annotated,packages,as,well,if,supported,by,the,given,link,org,springframework,orm,jpa,jpa,vendor,adapter,e,g,for,hibernate,p,if,no,explicit,link,set,mapping,resources,mapping,resources,have,been,specified,in,addition,to,these,packages,this,manager,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,see,set,default,persistence,unit,name,see,set,mapping,resources;public,void,set,packages,to,scan,string,packages,to,scan,this,packages,to,scan,packages,to,scan
DefaultPersistenceUnitManager -> public void setPackagesToScan(String... packagesToScan);1500448076;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p>Such package scanning defines a "default persistence unit" in Spring, which_may live next to regularly defined units originating from {@code persistence.xml}._Its name is determined by {@link #setDefaultPersistenceUnitName}: by default,_it's simply "default"._<p><p>Note: There may be limitations in comparison to regular JPA scanning.</b>_In particular, JPA providers may pick up annotated packages for provider-specific_annotations only when driven by {@code persistence.xml}. As of 4.1, Spring's_scan can detect annotated packages as well if supported by the given_{@link org.springframework.orm.jpa.JpaVendorAdapter} (e.g. for Hibernate)._<p>If no explicit {@link #setMappingResources mapping resources} have been_specified in addition to these packages, this manager looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._@see #setDefaultPersistenceUnitName_@see #setMappingResources;public void setPackagesToScan(String... packagesToScan) {_		this.packagesToScan = packagesToScan__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,such,package,scanning,defines,a,default,persistence,unit,in,spring,which,may,live,next,to,regularly,defined,units,originating,from,code,persistence,xml,its,name,is,determined,by,link,set,default,persistence,unit,name,by,default,it,s,simply,default,p,p,note,there,may,be,limitations,in,comparison,to,regular,jpa,scanning,b,in,particular,jpa,providers,may,pick,up,annotated,packages,for,provider,specific,annotations,only,when,driven,by,code,persistence,xml,as,of,4,1,spring,s,scan,can,detect,annotated,packages,as,well,if,supported,by,the,given,link,org,springframework,orm,jpa,jpa,vendor,adapter,e,g,for,hibernate,p,if,no,explicit,link,set,mapping,resources,mapping,resources,have,been,specified,in,addition,to,these,packages,this,manager,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,see,set,default,persistence,unit,name,see,set,mapping,resources;public,void,set,packages,to,scan,string,packages,to,scan,this,packages,to,scan,packages,to,scan
DefaultPersistenceUnitManager -> public void setPackagesToScan(String... packagesToScan);1520528267;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p>Such package scanning defines a "default persistence unit" in Spring, which_may live next to regularly defined units originating from {@code persistence.xml}._Its name is determined by {@link #setDefaultPersistenceUnitName}: by default,_it's simply "default"._<p><p>Note: There may be limitations in comparison to regular JPA scanning.</b>_In particular, JPA providers may pick up annotated packages for provider-specific_annotations only when driven by {@code persistence.xml}. As of 4.1, Spring's_scan can detect annotated packages as well if supported by the given_{@link org.springframework.orm.jpa.JpaVendorAdapter} (e.g. for Hibernate)._<p>If no explicit {@link #setMappingResources mapping resources} have been_specified in addition to these packages, this manager looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._@see #setDefaultPersistenceUnitName_@see #setMappingResources;public void setPackagesToScan(String... packagesToScan) {_		this.packagesToScan = packagesToScan__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,such,package,scanning,defines,a,default,persistence,unit,in,spring,which,may,live,next,to,regularly,defined,units,originating,from,code,persistence,xml,its,name,is,determined,by,link,set,default,persistence,unit,name,by,default,it,s,simply,default,p,p,note,there,may,be,limitations,in,comparison,to,regular,jpa,scanning,b,in,particular,jpa,providers,may,pick,up,annotated,packages,for,provider,specific,annotations,only,when,driven,by,code,persistence,xml,as,of,4,1,spring,s,scan,can,detect,annotated,packages,as,well,if,supported,by,the,given,link,org,springframework,orm,jpa,jpa,vendor,adapter,e,g,for,hibernate,p,if,no,explicit,link,set,mapping,resources,mapping,resources,have,been,specified,in,addition,to,these,packages,this,manager,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,see,set,default,persistence,unit,name,see,set,mapping,resources;public,void,set,packages,to,scan,string,packages,to,scan,this,packages,to,scan,packages,to,scan
DefaultPersistenceUnitManager -> public void setPackagesToScan(String... packagesToScan);1528313484;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p>Such package scanning defines a "default persistence unit" in Spring, which_may live next to regularly defined units originating from {@code persistence.xml}._Its name is determined by {@link #setDefaultPersistenceUnitName}: by default,_it's simply "default"._<p><p>Note: There may be limitations in comparison to regular JPA scanning.</b>_In particular, JPA providers may pick up annotated packages for provider-specific_annotations only when driven by {@code persistence.xml}. As of 4.1, Spring's_scan can detect annotated packages as well if supported by the given_{@link org.springframework.orm.jpa.JpaVendorAdapter} (e.g. for Hibernate)._<p>If no explicit {@link #setMappingResources mapping resources} have been_specified in addition to these packages, this manager looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._@see #setDefaultPersistenceUnitName_@see #setMappingResources;public void setPackagesToScan(String... packagesToScan) {_		this.packagesToScan = packagesToScan__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,such,package,scanning,defines,a,default,persistence,unit,in,spring,which,may,live,next,to,regularly,defined,units,originating,from,code,persistence,xml,its,name,is,determined,by,link,set,default,persistence,unit,name,by,default,it,s,simply,default,p,p,note,there,may,be,limitations,in,comparison,to,regular,jpa,scanning,b,in,particular,jpa,providers,may,pick,up,annotated,packages,for,provider,specific,annotations,only,when,driven,by,code,persistence,xml,as,of,4,1,spring,s,scan,can,detect,annotated,packages,as,well,if,supported,by,the,given,link,org,springframework,orm,jpa,jpa,vendor,adapter,e,g,for,hibernate,p,if,no,explicit,link,set,mapping,resources,mapping,resources,have,been,specified,in,addition,to,these,packages,this,manager,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,see,set,default,persistence,unit,name,see,set,mapping,resources;public,void,set,packages,to,scan,string,packages,to,scan,this,packages,to,scan,packages,to,scan
DefaultPersistenceUnitManager -> public void setPackagesToScan(String... packagesToScan);1530174524;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p>Such package scanning defines a "default persistence unit" in Spring, which_may live next to regularly defined units originating from {@code persistence.xml}._Its name is determined by {@link #setDefaultPersistenceUnitName}: by default,_it's simply "default"._<p><b>Note: There may be limitations in comparison to regular JPA scanning.</b>_In particular, JPA providers may pick up annotated packages for provider-specific_annotations only when driven by {@code persistence.xml}. As of 4.1, Spring's_scan can detect annotated packages as well if supported by the given_{@link org.springframework.orm.jpa.JpaVendorAdapter} (e.g. for Hibernate)._<p>If no explicit {@link #setMappingResources mapping resources} have been_specified in addition to these packages, this manager looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._@see #setDefaultPersistenceUnitName_@see #setMappingResources;public void setPackagesToScan(String... packagesToScan) {_		this.packagesToScan = packagesToScan__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,such,package,scanning,defines,a,default,persistence,unit,in,spring,which,may,live,next,to,regularly,defined,units,originating,from,code,persistence,xml,its,name,is,determined,by,link,set,default,persistence,unit,name,by,default,it,s,simply,default,p,b,note,there,may,be,limitations,in,comparison,to,regular,jpa,scanning,b,in,particular,jpa,providers,may,pick,up,annotated,packages,for,provider,specific,annotations,only,when,driven,by,code,persistence,xml,as,of,4,1,spring,s,scan,can,detect,annotated,packages,as,well,if,supported,by,the,given,link,org,springframework,orm,jpa,jpa,vendor,adapter,e,g,for,hibernate,p,if,no,explicit,link,set,mapping,resources,mapping,resources,have,been,specified,in,addition,to,these,packages,this,manager,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,see,set,default,persistence,unit,name,see,set,mapping,resources;public,void,set,packages,to,scan,string,packages,to,scan,this,packages,to,scan,packages,to,scan
DefaultPersistenceUnitManager -> public void setPackagesToScan(String... packagesToScan);1532091916;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p>Such package scanning defines a "default persistence unit" in Spring, which_may live next to regularly defined units originating from {@code persistence.xml}._Its name is determined by {@link #setDefaultPersistenceUnitName}: by default,_it's simply "default"._<p><b>Note: There may be limitations in comparison to regular JPA scanning.</b>_In particular, JPA providers may pick up annotated packages for provider-specific_annotations only when driven by {@code persistence.xml}. As of 4.1, Spring's_scan can detect annotated packages as well if supported by the given_{@link org.springframework.orm.jpa.JpaVendorAdapter} (e.g. for Hibernate)._<p>If no explicit {@link #setMappingResources mapping resources} have been_specified in addition to these packages, this manager looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._@see #setDefaultPersistenceUnitName_@see #setMappingResources;public void setPackagesToScan(String... packagesToScan) {_		this.packagesToScan = packagesToScan__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,such,package,scanning,defines,a,default,persistence,unit,in,spring,which,may,live,next,to,regularly,defined,units,originating,from,code,persistence,xml,its,name,is,determined,by,link,set,default,persistence,unit,name,by,default,it,s,simply,default,p,b,note,there,may,be,limitations,in,comparison,to,regular,jpa,scanning,b,in,particular,jpa,providers,may,pick,up,annotated,packages,for,provider,specific,annotations,only,when,driven,by,code,persistence,xml,as,of,4,1,spring,s,scan,can,detect,annotated,packages,as,well,if,supported,by,the,given,link,org,springframework,orm,jpa,jpa,vendor,adapter,e,g,for,hibernate,p,if,no,explicit,link,set,mapping,resources,mapping,resources,have,been,specified,in,addition,to,these,packages,this,manager,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,see,set,default,persistence,unit,name,see,set,mapping,resources;public,void,set,packages,to,scan,string,packages,to,scan,this,packages,to,scan,packages,to,scan
DefaultPersistenceUnitManager -> protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui);1328020251;Hook method allowing subclasses to customize each PersistenceUnitInfo._<p>The default implementation delegates to all registered PersistenceUnitPostProcessors._It is usually preferable to register further entity classes, jar files etc there_rather than in a subclass of this manager, to be able to reuse the post-processors._@param pui the chosen PersistenceUnitInfo, as read from <code>persistence.xml</code>._Passed in as MutablePersistenceUnitInfo._@see #setPersistenceUnitPostProcessors;protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui) {_		PersistenceUnitPostProcessor[] postProcessors = getPersistenceUnitPostProcessors()__		if (postProcessors != null) {_			for (PersistenceUnitPostProcessor postProcessor : postProcessors) {_				postProcessor.postProcessPersistenceUnitInfo(pui)__			}_		}_	};hook,method,allowing,subclasses,to,customize,each,persistence,unit,info,p,the,default,implementation,delegates,to,all,registered,persistence,unit,post,processors,it,is,usually,preferable,to,register,further,entity,classes,jar,files,etc,there,rather,than,in,a,subclass,of,this,manager,to,be,able,to,reuse,the,post,processors,param,pui,the,chosen,persistence,unit,info,as,read,from,code,persistence,xml,code,passed,in,as,mutable,persistence,unit,info,see,set,persistence,unit,post,processors;protected,void,post,process,persistence,unit,info,mutable,persistence,unit,info,pui,persistence,unit,post,processor,post,processors,get,persistence,unit,post,processors,if,post,processors,null,for,persistence,unit,post,processor,post,processor,post,processors,post,processor,post,process,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui);1329142650;Hook method allowing subclasses to customize each PersistenceUnitInfo._<p>The default implementation delegates to all registered PersistenceUnitPostProcessors._It is usually preferable to register further entity classes, jar files etc there_rather than in a subclass of this manager, to be able to reuse the post-processors._@param pui the chosen PersistenceUnitInfo, as read from <code>persistence.xml</code>._Passed in as MutablePersistenceUnitInfo._@see #setPersistenceUnitPostProcessors;protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui) {_		PersistenceUnitPostProcessor[] postProcessors = getPersistenceUnitPostProcessors()__		if (postProcessors != null) {_			for (PersistenceUnitPostProcessor postProcessor : postProcessors) {_				postProcessor.postProcessPersistenceUnitInfo(pui)__			}_		}_	};hook,method,allowing,subclasses,to,customize,each,persistence,unit,info,p,the,default,implementation,delegates,to,all,registered,persistence,unit,post,processors,it,is,usually,preferable,to,register,further,entity,classes,jar,files,etc,there,rather,than,in,a,subclass,of,this,manager,to,be,able,to,reuse,the,post,processors,param,pui,the,chosen,persistence,unit,info,as,read,from,code,persistence,xml,code,passed,in,as,mutable,persistence,unit,info,see,set,persistence,unit,post,processors;protected,void,post,process,persistence,unit,info,mutable,persistence,unit,info,pui,persistence,unit,post,processor,post,processors,get,persistence,unit,post,processors,if,post,processors,null,for,persistence,unit,post,processor,post,processor,post,processors,post,processor,post,process,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui);1347282851;Hook method allowing subclasses to customize each PersistenceUnitInfo._<p>The default implementation delegates to all registered PersistenceUnitPostProcessors._It is usually preferable to register further entity classes, jar files etc there_rather than in a subclass of this manager, to be able to reuse the post-processors._@param pui the chosen PersistenceUnitInfo, as read from <code>persistence.xml</code>._Passed in as MutablePersistenceUnitInfo._@see #setPersistenceUnitPostProcessors;protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui) {_		PersistenceUnitPostProcessor[] postProcessors = getPersistenceUnitPostProcessors()__		if (postProcessors != null) {_			for (PersistenceUnitPostProcessor postProcessor : postProcessors) {_				postProcessor.postProcessPersistenceUnitInfo(pui)__			}_		}_	};hook,method,allowing,subclasses,to,customize,each,persistence,unit,info,p,the,default,implementation,delegates,to,all,registered,persistence,unit,post,processors,it,is,usually,preferable,to,register,further,entity,classes,jar,files,etc,there,rather,than,in,a,subclass,of,this,manager,to,be,able,to,reuse,the,post,processors,param,pui,the,chosen,persistence,unit,info,as,read,from,code,persistence,xml,code,passed,in,as,mutable,persistence,unit,info,see,set,persistence,unit,post,processors;protected,void,post,process,persistence,unit,info,mutable,persistence,unit,info,pui,persistence,unit,post,processor,post,processors,get,persistence,unit,post,processors,if,post,processors,null,for,persistence,unit,post,processor,post,processor,post,processors,post,processor,post,process,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui);1351648399;Hook method allowing subclasses to customize each PersistenceUnitInfo._<p>The default implementation delegates to all registered PersistenceUnitPostProcessors._It is usually preferable to register further entity classes, jar files etc there_rather than in a subclass of this manager, to be able to reuse the post-processors._@param pui the chosen PersistenceUnitInfo, as read from <code>persistence.xml</code>._Passed in as MutablePersistenceUnitInfo._@see #setPersistenceUnitPostProcessors;protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui) {_		PersistenceUnitPostProcessor[] postProcessors = getPersistenceUnitPostProcessors()__		if (postProcessors != null) {_			for (PersistenceUnitPostProcessor postProcessor : postProcessors) {_				postProcessor.postProcessPersistenceUnitInfo(pui)__			}_		}_	};hook,method,allowing,subclasses,to,customize,each,persistence,unit,info,p,the,default,implementation,delegates,to,all,registered,persistence,unit,post,processors,it,is,usually,preferable,to,register,further,entity,classes,jar,files,etc,there,rather,than,in,a,subclass,of,this,manager,to,be,able,to,reuse,the,post,processors,param,pui,the,chosen,persistence,unit,info,as,read,from,code,persistence,xml,code,passed,in,as,mutable,persistence,unit,info,see,set,persistence,unit,post,processors;protected,void,post,process,persistence,unit,info,mutable,persistence,unit,info,pui,persistence,unit,post,processor,post,processors,get,persistence,unit,post,processors,if,post,processors,null,for,persistence,unit,post,processor,post,processor,post,processors,post,processor,post,process,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui);1356735495;Hook method allowing subclasses to customize each PersistenceUnitInfo._<p>The default implementation delegates to all registered PersistenceUnitPostProcessors._It is usually preferable to register further entity classes, jar files etc there_rather than in a subclass of this manager, to be able to reuse the post-processors._@param pui the chosen PersistenceUnitInfo, as read from {@code persistence.xml}._Passed in as MutablePersistenceUnitInfo._@see #setPersistenceUnitPostProcessors;protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui) {_		PersistenceUnitPostProcessor[] postProcessors = getPersistenceUnitPostProcessors()__		if (postProcessors != null) {_			for (PersistenceUnitPostProcessor postProcessor : postProcessors) {_				postProcessor.postProcessPersistenceUnitInfo(pui)__			}_		}_	};hook,method,allowing,subclasses,to,customize,each,persistence,unit,info,p,the,default,implementation,delegates,to,all,registered,persistence,unit,post,processors,it,is,usually,preferable,to,register,further,entity,classes,jar,files,etc,there,rather,than,in,a,subclass,of,this,manager,to,be,able,to,reuse,the,post,processors,param,pui,the,chosen,persistence,unit,info,as,read,from,code,persistence,xml,passed,in,as,mutable,persistence,unit,info,see,set,persistence,unit,post,processors;protected,void,post,process,persistence,unit,info,mutable,persistence,unit,info,pui,persistence,unit,post,processor,post,processors,get,persistence,unit,post,processors,if,post,processors,null,for,persistence,unit,post,processor,post,processor,post,processors,post,processor,post,process,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui);1357119239;Hook method allowing subclasses to customize each PersistenceUnitInfo._<p>The default implementation delegates to all registered PersistenceUnitPostProcessors._It is usually preferable to register further entity classes, jar files etc there_rather than in a subclass of this manager, to be able to reuse the post-processors._@param pui the chosen PersistenceUnitInfo, as read from {@code persistence.xml}._Passed in as MutablePersistenceUnitInfo._@see #setPersistenceUnitPostProcessors;protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui) {_		PersistenceUnitPostProcessor[] postProcessors = getPersistenceUnitPostProcessors()__		if (postProcessors != null) {_			for (PersistenceUnitPostProcessor postProcessor : postProcessors) {_				postProcessor.postProcessPersistenceUnitInfo(pui)__			}_		}_	};hook,method,allowing,subclasses,to,customize,each,persistence,unit,info,p,the,default,implementation,delegates,to,all,registered,persistence,unit,post,processors,it,is,usually,preferable,to,register,further,entity,classes,jar,files,etc,there,rather,than,in,a,subclass,of,this,manager,to,be,able,to,reuse,the,post,processors,param,pui,the,chosen,persistence,unit,info,as,read,from,code,persistence,xml,passed,in,as,mutable,persistence,unit,info,see,set,persistence,unit,post,processors;protected,void,post,process,persistence,unit,info,mutable,persistence,unit,info,pui,persistence,unit,post,processor,post,processors,get,persistence,unit,post,processors,if,post,processors,null,for,persistence,unit,post,processor,post,processor,post,processors,post,processor,post,process,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui);1363714444;Hook method allowing subclasses to customize each PersistenceUnitInfo._<p>The default implementation delegates to all registered PersistenceUnitPostProcessors._It is usually preferable to register further entity classes, jar files etc there_rather than in a subclass of this manager, to be able to reuse the post-processors._@param pui the chosen PersistenceUnitInfo, as read from {@code persistence.xml}._Passed in as MutablePersistenceUnitInfo._@see #setPersistenceUnitPostProcessors;protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui) {_		PersistenceUnitPostProcessor[] postProcessors = getPersistenceUnitPostProcessors()__		if (postProcessors != null) {_			for (PersistenceUnitPostProcessor postProcessor : postProcessors) {_				postProcessor.postProcessPersistenceUnitInfo(pui)__			}_		}_	};hook,method,allowing,subclasses,to,customize,each,persistence,unit,info,p,the,default,implementation,delegates,to,all,registered,persistence,unit,post,processors,it,is,usually,preferable,to,register,further,entity,classes,jar,files,etc,there,rather,than,in,a,subclass,of,this,manager,to,be,able,to,reuse,the,post,processors,param,pui,the,chosen,persistence,unit,info,as,read,from,code,persistence,xml,passed,in,as,mutable,persistence,unit,info,see,set,persistence,unit,post,processors;protected,void,post,process,persistence,unit,info,mutable,persistence,unit,info,pui,persistence,unit,post,processor,post,processors,get,persistence,unit,post,processors,if,post,processors,null,for,persistence,unit,post,processor,post,processor,post,processors,post,processor,post,process,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui);1368482696;Hook method allowing subclasses to customize each PersistenceUnitInfo._<p>The default implementation delegates to all registered PersistenceUnitPostProcessors._It is usually preferable to register further entity classes, jar files etc there_rather than in a subclass of this manager, to be able to reuse the post-processors._@param pui the chosen PersistenceUnitInfo, as read from {@code persistence.xml}._Passed in as MutablePersistenceUnitInfo._@see #setPersistenceUnitPostProcessors;protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui) {_		PersistenceUnitPostProcessor[] postProcessors = getPersistenceUnitPostProcessors()__		if (postProcessors != null) {_			for (PersistenceUnitPostProcessor postProcessor : postProcessors) {_				postProcessor.postProcessPersistenceUnitInfo(pui)__			}_		}_	};hook,method,allowing,subclasses,to,customize,each,persistence,unit,info,p,the,default,implementation,delegates,to,all,registered,persistence,unit,post,processors,it,is,usually,preferable,to,register,further,entity,classes,jar,files,etc,there,rather,than,in,a,subclass,of,this,manager,to,be,able,to,reuse,the,post,processors,param,pui,the,chosen,persistence,unit,info,as,read,from,code,persistence,xml,passed,in,as,mutable,persistence,unit,info,see,set,persistence,unit,post,processors;protected,void,post,process,persistence,unit,info,mutable,persistence,unit,info,pui,persistence,unit,post,processor,post,processors,get,persistence,unit,post,processors,if,post,processors,null,for,persistence,unit,post,processor,post,processor,post,processors,post,processor,post,process,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui);1375434510;Hook method allowing subclasses to customize each PersistenceUnitInfo._<p>The default implementation delegates to all registered PersistenceUnitPostProcessors._It is usually preferable to register further entity classes, jar files etc there_rather than in a subclass of this manager, to be able to reuse the post-processors._@param pui the chosen PersistenceUnitInfo, as read from {@code persistence.xml}._Passed in as MutablePersistenceUnitInfo._@see #setPersistenceUnitPostProcessors;protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui) {_		PersistenceUnitPostProcessor[] postProcessors = getPersistenceUnitPostProcessors()__		if (postProcessors != null) {_			for (PersistenceUnitPostProcessor postProcessor : postProcessors) {_				postProcessor.postProcessPersistenceUnitInfo(pui)__			}_		}_	};hook,method,allowing,subclasses,to,customize,each,persistence,unit,info,p,the,default,implementation,delegates,to,all,registered,persistence,unit,post,processors,it,is,usually,preferable,to,register,further,entity,classes,jar,files,etc,there,rather,than,in,a,subclass,of,this,manager,to,be,able,to,reuse,the,post,processors,param,pui,the,chosen,persistence,unit,info,as,read,from,code,persistence,xml,passed,in,as,mutable,persistence,unit,info,see,set,persistence,unit,post,processors;protected,void,post,process,persistence,unit,info,mutable,persistence,unit,info,pui,persistence,unit,post,processor,post,processors,get,persistence,unit,post,processors,if,post,processors,null,for,persistence,unit,post,processor,post,processor,post,processors,post,processor,post,process,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui);1375458214;Hook method allowing subclasses to customize each PersistenceUnitInfo._<p>The default implementation delegates to all registered PersistenceUnitPostProcessors._It is usually preferable to register further entity classes, jar files etc there_rather than in a subclass of this manager, to be able to reuse the post-processors._@param pui the chosen PersistenceUnitInfo, as read from {@code persistence.xml}._Passed in as MutablePersistenceUnitInfo._@see #setPersistenceUnitPostProcessors;protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui) {_		PersistenceUnitPostProcessor[] postProcessors = getPersistenceUnitPostProcessors()__		if (postProcessors != null) {_			for (PersistenceUnitPostProcessor postProcessor : postProcessors) {_				postProcessor.postProcessPersistenceUnitInfo(pui)__			}_		}_	};hook,method,allowing,subclasses,to,customize,each,persistence,unit,info,p,the,default,implementation,delegates,to,all,registered,persistence,unit,post,processors,it,is,usually,preferable,to,register,further,entity,classes,jar,files,etc,there,rather,than,in,a,subclass,of,this,manager,to,be,able,to,reuse,the,post,processors,param,pui,the,chosen,persistence,unit,info,as,read,from,code,persistence,xml,passed,in,as,mutable,persistence,unit,info,see,set,persistence,unit,post,processors;protected,void,post,process,persistence,unit,info,mutable,persistence,unit,info,pui,persistence,unit,post,processor,post,processors,get,persistence,unit,post,processors,if,post,processors,null,for,persistence,unit,post,processor,post,processor,post,processors,post,processor,post,process,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui);1389648334;Hook method allowing subclasses to customize each PersistenceUnitInfo._<p>The default implementation delegates to all registered PersistenceUnitPostProcessors._It is usually preferable to register further entity classes, jar files etc there_rather than in a subclass of this manager, to be able to reuse the post-processors._@param pui the chosen PersistenceUnitInfo, as read from {@code persistence.xml}._Passed in as MutablePersistenceUnitInfo._@see #setPersistenceUnitPostProcessors;protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui) {_		PersistenceUnitPostProcessor[] postProcessors = getPersistenceUnitPostProcessors()__		if (postProcessors != null) {_			for (PersistenceUnitPostProcessor postProcessor : postProcessors) {_				postProcessor.postProcessPersistenceUnitInfo(pui)__			}_		}_	};hook,method,allowing,subclasses,to,customize,each,persistence,unit,info,p,the,default,implementation,delegates,to,all,registered,persistence,unit,post,processors,it,is,usually,preferable,to,register,further,entity,classes,jar,files,etc,there,rather,than,in,a,subclass,of,this,manager,to,be,able,to,reuse,the,post,processors,param,pui,the,chosen,persistence,unit,info,as,read,from,code,persistence,xml,passed,in,as,mutable,persistence,unit,info,see,set,persistence,unit,post,processors;protected,void,post,process,persistence,unit,info,mutable,persistence,unit,info,pui,persistence,unit,post,processor,post,processors,get,persistence,unit,post,processors,if,post,processors,null,for,persistence,unit,post,processor,post,processor,post,processors,post,processor,post,process,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui);1390250900;Hook method allowing subclasses to customize each PersistenceUnitInfo._<p>The default implementation delegates to all registered PersistenceUnitPostProcessors._It is usually preferable to register further entity classes, jar files etc there_rather than in a subclass of this manager, to be able to reuse the post-processors._@param pui the chosen PersistenceUnitInfo, as read from {@code persistence.xml}._Passed in as MutablePersistenceUnitInfo._@see #setPersistenceUnitPostProcessors;protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui) {_		PersistenceUnitPostProcessor[] postProcessors = getPersistenceUnitPostProcessors()__		if (postProcessors != null) {_			for (PersistenceUnitPostProcessor postProcessor : postProcessors) {_				postProcessor.postProcessPersistenceUnitInfo(pui)__			}_		}_	};hook,method,allowing,subclasses,to,customize,each,persistence,unit,info,p,the,default,implementation,delegates,to,all,registered,persistence,unit,post,processors,it,is,usually,preferable,to,register,further,entity,classes,jar,files,etc,there,rather,than,in,a,subclass,of,this,manager,to,be,able,to,reuse,the,post,processors,param,pui,the,chosen,persistence,unit,info,as,read,from,code,persistence,xml,passed,in,as,mutable,persistence,unit,info,see,set,persistence,unit,post,processors;protected,void,post,process,persistence,unit,info,mutable,persistence,unit,info,pui,persistence,unit,post,processor,post,processors,get,persistence,unit,post,processors,if,post,processors,null,for,persistence,unit,post,processor,post,processor,post,processors,post,processor,post,process,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui);1390313076;Hook method allowing subclasses to customize each PersistenceUnitInfo._<p>The default implementation delegates to all registered PersistenceUnitPostProcessors._It is usually preferable to register further entity classes, jar files etc there_rather than in a subclass of this manager, to be able to reuse the post-processors._@param pui the chosen PersistenceUnitInfo, as read from {@code persistence.xml}._Passed in as MutablePersistenceUnitInfo._@see #setPersistenceUnitPostProcessors;protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui) {_		PersistenceUnitPostProcessor[] postProcessors = getPersistenceUnitPostProcessors()__		if (postProcessors != null) {_			for (PersistenceUnitPostProcessor postProcessor : postProcessors) {_				postProcessor.postProcessPersistenceUnitInfo(pui)__			}_		}_	};hook,method,allowing,subclasses,to,customize,each,persistence,unit,info,p,the,default,implementation,delegates,to,all,registered,persistence,unit,post,processors,it,is,usually,preferable,to,register,further,entity,classes,jar,files,etc,there,rather,than,in,a,subclass,of,this,manager,to,be,able,to,reuse,the,post,processors,param,pui,the,chosen,persistence,unit,info,as,read,from,code,persistence,xml,passed,in,as,mutable,persistence,unit,info,see,set,persistence,unit,post,processors;protected,void,post,process,persistence,unit,info,mutable,persistence,unit,info,pui,persistence,unit,post,processor,post,processors,get,persistence,unit,post,processors,if,post,processors,null,for,persistence,unit,post,processor,post,processor,post,processors,post,processor,post,process,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui);1400140571;Hook method allowing subclasses to customize each PersistenceUnitInfo._<p>The default implementation delegates to all registered PersistenceUnitPostProcessors._It is usually preferable to register further entity classes, jar files etc there_rather than in a subclass of this manager, to be able to reuse the post-processors._@param pui the chosen PersistenceUnitInfo, as read from {@code persistence.xml}._Passed in as MutablePersistenceUnitInfo._@see #setPersistenceUnitPostProcessors;protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui) {_		PersistenceUnitPostProcessor[] postProcessors = getPersistenceUnitPostProcessors()__		if (postProcessors != null) {_			for (PersistenceUnitPostProcessor postProcessor : postProcessors) {_				postProcessor.postProcessPersistenceUnitInfo(pui)__			}_		}_	};hook,method,allowing,subclasses,to,customize,each,persistence,unit,info,p,the,default,implementation,delegates,to,all,registered,persistence,unit,post,processors,it,is,usually,preferable,to,register,further,entity,classes,jar,files,etc,there,rather,than,in,a,subclass,of,this,manager,to,be,able,to,reuse,the,post,processors,param,pui,the,chosen,persistence,unit,info,as,read,from,code,persistence,xml,passed,in,as,mutable,persistence,unit,info,see,set,persistence,unit,post,processors;protected,void,post,process,persistence,unit,info,mutable,persistence,unit,info,pui,persistence,unit,post,processor,post,processors,get,persistence,unit,post,processors,if,post,processors,null,for,persistence,unit,post,processor,post,processor,post,processors,post,processor,post,process,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui);1403774750;Hook method allowing subclasses to customize each PersistenceUnitInfo._<p>The default implementation delegates to all registered PersistenceUnitPostProcessors._It is usually preferable to register further entity classes, jar files etc there_rather than in a subclass of this manager, to be able to reuse the post-processors._@param pui the chosen PersistenceUnitInfo, as read from {@code persistence.xml}._Passed in as MutablePersistenceUnitInfo._@see #setPersistenceUnitPostProcessors;protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui) {_		PersistenceUnitPostProcessor[] postProcessors = getPersistenceUnitPostProcessors()__		if (postProcessors != null) {_			for (PersistenceUnitPostProcessor postProcessor : postProcessors) {_				postProcessor.postProcessPersistenceUnitInfo(pui)__			}_		}_	};hook,method,allowing,subclasses,to,customize,each,persistence,unit,info,p,the,default,implementation,delegates,to,all,registered,persistence,unit,post,processors,it,is,usually,preferable,to,register,further,entity,classes,jar,files,etc,there,rather,than,in,a,subclass,of,this,manager,to,be,able,to,reuse,the,post,processors,param,pui,the,chosen,persistence,unit,info,as,read,from,code,persistence,xml,passed,in,as,mutable,persistence,unit,info,see,set,persistence,unit,post,processors;protected,void,post,process,persistence,unit,info,mutable,persistence,unit,info,pui,persistence,unit,post,processor,post,processors,get,persistence,unit,post,processors,if,post,processors,null,for,persistence,unit,post,processor,post,processor,post,processors,post,processor,post,process,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui);1404056186;Hook method allowing subclasses to customize each PersistenceUnitInfo._<p>The default implementation delegates to all registered PersistenceUnitPostProcessors._It is usually preferable to register further entity classes, jar files etc there_rather than in a subclass of this manager, to be able to reuse the post-processors._@param pui the chosen PersistenceUnitInfo, as read from {@code persistence.xml}._Passed in as MutablePersistenceUnitInfo._@see #setPersistenceUnitPostProcessors;protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui) {_		PersistenceUnitPostProcessor[] postProcessors = getPersistenceUnitPostProcessors()__		if (postProcessors != null) {_			for (PersistenceUnitPostProcessor postProcessor : postProcessors) {_				postProcessor.postProcessPersistenceUnitInfo(pui)__			}_		}_	};hook,method,allowing,subclasses,to,customize,each,persistence,unit,info,p,the,default,implementation,delegates,to,all,registered,persistence,unit,post,processors,it,is,usually,preferable,to,register,further,entity,classes,jar,files,etc,there,rather,than,in,a,subclass,of,this,manager,to,be,able,to,reuse,the,post,processors,param,pui,the,chosen,persistence,unit,info,as,read,from,code,persistence,xml,passed,in,as,mutable,persistence,unit,info,see,set,persistence,unit,post,processors;protected,void,post,process,persistence,unit,info,mutable,persistence,unit,info,pui,persistence,unit,post,processor,post,processors,get,persistence,unit,post,processors,if,post,processors,null,for,persistence,unit,post,processor,post,processor,post,processors,post,processor,post,process,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui);1447323728;Hook method allowing subclasses to customize each PersistenceUnitInfo._<p>The default implementation delegates to all registered PersistenceUnitPostProcessors._It is usually preferable to register further entity classes, jar files etc there_rather than in a subclass of this manager, to be able to reuse the post-processors._@param pui the chosen PersistenceUnitInfo, as read from {@code persistence.xml}._Passed in as MutablePersistenceUnitInfo._@see #setPersistenceUnitPostProcessors;protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui) {_		PersistenceUnitPostProcessor[] postProcessors = getPersistenceUnitPostProcessors()__		if (postProcessors != null) {_			for (PersistenceUnitPostProcessor postProcessor : postProcessors) {_				postProcessor.postProcessPersistenceUnitInfo(pui)__			}_		}_	};hook,method,allowing,subclasses,to,customize,each,persistence,unit,info,p,the,default,implementation,delegates,to,all,registered,persistence,unit,post,processors,it,is,usually,preferable,to,register,further,entity,classes,jar,files,etc,there,rather,than,in,a,subclass,of,this,manager,to,be,able,to,reuse,the,post,processors,param,pui,the,chosen,persistence,unit,info,as,read,from,code,persistence,xml,passed,in,as,mutable,persistence,unit,info,see,set,persistence,unit,post,processors;protected,void,post,process,persistence,unit,info,mutable,persistence,unit,info,pui,persistence,unit,post,processor,post,processors,get,persistence,unit,post,processors,if,post,processors,null,for,persistence,unit,post,processor,post,processor,post,processors,post,processor,post,process,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui);1464299869;Hook method allowing subclasses to customize each PersistenceUnitInfo._<p>The default implementation delegates to all registered PersistenceUnitPostProcessors._It is usually preferable to register further entity classes, jar files etc there_rather than in a subclass of this manager, to be able to reuse the post-processors._@param pui the chosen PersistenceUnitInfo, as read from {@code persistence.xml}._Passed in as MutablePersistenceUnitInfo._@see #setPersistenceUnitPostProcessors;protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui) {_		PersistenceUnitPostProcessor[] postProcessors = getPersistenceUnitPostProcessors()__		if (postProcessors != null) {_			for (PersistenceUnitPostProcessor postProcessor : postProcessors) {_				postProcessor.postProcessPersistenceUnitInfo(pui)__			}_		}_	};hook,method,allowing,subclasses,to,customize,each,persistence,unit,info,p,the,default,implementation,delegates,to,all,registered,persistence,unit,post,processors,it,is,usually,preferable,to,register,further,entity,classes,jar,files,etc,there,rather,than,in,a,subclass,of,this,manager,to,be,able,to,reuse,the,post,processors,param,pui,the,chosen,persistence,unit,info,as,read,from,code,persistence,xml,passed,in,as,mutable,persistence,unit,info,see,set,persistence,unit,post,processors;protected,void,post,process,persistence,unit,info,mutable,persistence,unit,info,pui,persistence,unit,post,processor,post,processors,get,persistence,unit,post,processors,if,post,processors,null,for,persistence,unit,post,processor,post,processor,post,processors,post,processor,post,process,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui);1467668243;Hook method allowing subclasses to customize each PersistenceUnitInfo._<p>The default implementation delegates to all registered PersistenceUnitPostProcessors._It is usually preferable to register further entity classes, jar files etc there_rather than in a subclass of this manager, to be able to reuse the post-processors._@param pui the chosen PersistenceUnitInfo, as read from {@code persistence.xml}._Passed in as MutablePersistenceUnitInfo._@see #setPersistenceUnitPostProcessors;protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui) {_		PersistenceUnitPostProcessor[] postProcessors = getPersistenceUnitPostProcessors()__		if (postProcessors != null) {_			for (PersistenceUnitPostProcessor postProcessor : postProcessors) {_				postProcessor.postProcessPersistenceUnitInfo(pui)__			}_		}_	};hook,method,allowing,subclasses,to,customize,each,persistence,unit,info,p,the,default,implementation,delegates,to,all,registered,persistence,unit,post,processors,it,is,usually,preferable,to,register,further,entity,classes,jar,files,etc,there,rather,than,in,a,subclass,of,this,manager,to,be,able,to,reuse,the,post,processors,param,pui,the,chosen,persistence,unit,info,as,read,from,code,persistence,xml,passed,in,as,mutable,persistence,unit,info,see,set,persistence,unit,post,processors;protected,void,post,process,persistence,unit,info,mutable,persistence,unit,info,pui,persistence,unit,post,processor,post,processors,get,persistence,unit,post,processors,if,post,processors,null,for,persistence,unit,post,processor,post,processor,post,processors,post,processor,post,process,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui);1467730834;Hook method allowing subclasses to customize each PersistenceUnitInfo._<p>The default implementation delegates to all registered PersistenceUnitPostProcessors._It is usually preferable to register further entity classes, jar files etc there_rather than in a subclass of this manager, to be able to reuse the post-processors._@param pui the chosen PersistenceUnitInfo, as read from {@code persistence.xml}._Passed in as MutablePersistenceUnitInfo._@see #setPersistenceUnitPostProcessors;protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui) {_		PersistenceUnitPostProcessor[] postProcessors = getPersistenceUnitPostProcessors()__		if (postProcessors != null) {_			for (PersistenceUnitPostProcessor postProcessor : postProcessors) {_				postProcessor.postProcessPersistenceUnitInfo(pui)__			}_		}_	};hook,method,allowing,subclasses,to,customize,each,persistence,unit,info,p,the,default,implementation,delegates,to,all,registered,persistence,unit,post,processors,it,is,usually,preferable,to,register,further,entity,classes,jar,files,etc,there,rather,than,in,a,subclass,of,this,manager,to,be,able,to,reuse,the,post,processors,param,pui,the,chosen,persistence,unit,info,as,read,from,code,persistence,xml,passed,in,as,mutable,persistence,unit,info,see,set,persistence,unit,post,processors;protected,void,post,process,persistence,unit,info,mutable,persistence,unit,info,pui,persistence,unit,post,processor,post,processors,get,persistence,unit,post,processors,if,post,processors,null,for,persistence,unit,post,processor,post,processor,post,processors,post,processor,post,process,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui);1471464767;Hook method allowing subclasses to customize each PersistenceUnitInfo._<p>The default implementation delegates to all registered PersistenceUnitPostProcessors._It is usually preferable to register further entity classes, jar files etc there_rather than in a subclass of this manager, to be able to reuse the post-processors._@param pui the chosen PersistenceUnitInfo, as read from {@code persistence.xml}._Passed in as MutablePersistenceUnitInfo._@see #setPersistenceUnitPostProcessors;protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui) {_		PersistenceUnitPostProcessor[] postProcessors = getPersistenceUnitPostProcessors()__		if (postProcessors != null) {_			for (PersistenceUnitPostProcessor postProcessor : postProcessors) {_				postProcessor.postProcessPersistenceUnitInfo(pui)__			}_		}_	};hook,method,allowing,subclasses,to,customize,each,persistence,unit,info,p,the,default,implementation,delegates,to,all,registered,persistence,unit,post,processors,it,is,usually,preferable,to,register,further,entity,classes,jar,files,etc,there,rather,than,in,a,subclass,of,this,manager,to,be,able,to,reuse,the,post,processors,param,pui,the,chosen,persistence,unit,info,as,read,from,code,persistence,xml,passed,in,as,mutable,persistence,unit,info,see,set,persistence,unit,post,processors;protected,void,post,process,persistence,unit,info,mutable,persistence,unit,info,pui,persistence,unit,post,processor,post,processors,get,persistence,unit,post,processors,if,post,processors,null,for,persistence,unit,post,processor,post,processor,post,processors,post,processor,post,process,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui);1472736647;Hook method allowing subclasses to customize each PersistenceUnitInfo._<p>The default implementation delegates to all registered PersistenceUnitPostProcessors._It is usually preferable to register further entity classes, jar files etc there_rather than in a subclass of this manager, to be able to reuse the post-processors._@param pui the chosen PersistenceUnitInfo, as read from {@code persistence.xml}._Passed in as MutablePersistenceUnitInfo._@see #setPersistenceUnitPostProcessors;protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui) {_		PersistenceUnitPostProcessor[] postProcessors = getPersistenceUnitPostProcessors()__		if (postProcessors != null) {_			for (PersistenceUnitPostProcessor postProcessor : postProcessors) {_				postProcessor.postProcessPersistenceUnitInfo(pui)__			}_		}_	};hook,method,allowing,subclasses,to,customize,each,persistence,unit,info,p,the,default,implementation,delegates,to,all,registered,persistence,unit,post,processors,it,is,usually,preferable,to,register,further,entity,classes,jar,files,etc,there,rather,than,in,a,subclass,of,this,manager,to,be,able,to,reuse,the,post,processors,param,pui,the,chosen,persistence,unit,info,as,read,from,code,persistence,xml,passed,in,as,mutable,persistence,unit,info,see,set,persistence,unit,post,processors;protected,void,post,process,persistence,unit,info,mutable,persistence,unit,info,pui,persistence,unit,post,processor,post,processors,get,persistence,unit,post,processors,if,post,processors,null,for,persistence,unit,post,processor,post,processor,post,processors,post,processor,post,process,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui);1474895745;Hook method allowing subclasses to customize each PersistenceUnitInfo._<p>The default implementation delegates to all registered PersistenceUnitPostProcessors._It is usually preferable to register further entity classes, jar files etc there_rather than in a subclass of this manager, to be able to reuse the post-processors._@param pui the chosen PersistenceUnitInfo, as read from {@code persistence.xml}._Passed in as MutablePersistenceUnitInfo._@see #setPersistenceUnitPostProcessors;protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui) {_		PersistenceUnitPostProcessor[] postProcessors = getPersistenceUnitPostProcessors()__		if (postProcessors != null) {_			for (PersistenceUnitPostProcessor postProcessor : postProcessors) {_				postProcessor.postProcessPersistenceUnitInfo(pui)__			}_		}_	};hook,method,allowing,subclasses,to,customize,each,persistence,unit,info,p,the,default,implementation,delegates,to,all,registered,persistence,unit,post,processors,it,is,usually,preferable,to,register,further,entity,classes,jar,files,etc,there,rather,than,in,a,subclass,of,this,manager,to,be,able,to,reuse,the,post,processors,param,pui,the,chosen,persistence,unit,info,as,read,from,code,persistence,xml,passed,in,as,mutable,persistence,unit,info,see,set,persistence,unit,post,processors;protected,void,post,process,persistence,unit,info,mutable,persistence,unit,info,pui,persistence,unit,post,processor,post,processors,get,persistence,unit,post,processors,if,post,processors,null,for,persistence,unit,post,processor,post,processor,post,processors,post,processor,post,process,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui);1495868221;Hook method allowing subclasses to customize each PersistenceUnitInfo._<p>The default implementation delegates to all registered PersistenceUnitPostProcessors._It is usually preferable to register further entity classes, jar files etc there_rather than in a subclass of this manager, to be able to reuse the post-processors._@param pui the chosen PersistenceUnitInfo, as read from {@code persistence.xml}._Passed in as MutablePersistenceUnitInfo._@see #setPersistenceUnitPostProcessors;protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui) {_		PersistenceUnitPostProcessor[] postProcessors = getPersistenceUnitPostProcessors()__		if (postProcessors != null) {_			for (PersistenceUnitPostProcessor postProcessor : postProcessors) {_				postProcessor.postProcessPersistenceUnitInfo(pui)__			}_		}_	};hook,method,allowing,subclasses,to,customize,each,persistence,unit,info,p,the,default,implementation,delegates,to,all,registered,persistence,unit,post,processors,it,is,usually,preferable,to,register,further,entity,classes,jar,files,etc,there,rather,than,in,a,subclass,of,this,manager,to,be,able,to,reuse,the,post,processors,param,pui,the,chosen,persistence,unit,info,as,read,from,code,persistence,xml,passed,in,as,mutable,persistence,unit,info,see,set,persistence,unit,post,processors;protected,void,post,process,persistence,unit,info,mutable,persistence,unit,info,pui,persistence,unit,post,processor,post,processors,get,persistence,unit,post,processors,if,post,processors,null,for,persistence,unit,post,processor,post,processor,post,processors,post,processor,post,process,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui);1496259743;Hook method allowing subclasses to customize each PersistenceUnitInfo._<p>The default implementation delegates to all registered PersistenceUnitPostProcessors._It is usually preferable to register further entity classes, jar files etc there_rather than in a subclass of this manager, to be able to reuse the post-processors._@param pui the chosen PersistenceUnitInfo, as read from {@code persistence.xml}._Passed in as MutablePersistenceUnitInfo._@see #setPersistenceUnitPostProcessors;protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui) {_		PersistenceUnitPostProcessor[] postProcessors = getPersistenceUnitPostProcessors()__		if (postProcessors != null) {_			for (PersistenceUnitPostProcessor postProcessor : postProcessors) {_				postProcessor.postProcessPersistenceUnitInfo(pui)__			}_		}_	};hook,method,allowing,subclasses,to,customize,each,persistence,unit,info,p,the,default,implementation,delegates,to,all,registered,persistence,unit,post,processors,it,is,usually,preferable,to,register,further,entity,classes,jar,files,etc,there,rather,than,in,a,subclass,of,this,manager,to,be,able,to,reuse,the,post,processors,param,pui,the,chosen,persistence,unit,info,as,read,from,code,persistence,xml,passed,in,as,mutable,persistence,unit,info,see,set,persistence,unit,post,processors;protected,void,post,process,persistence,unit,info,mutable,persistence,unit,info,pui,persistence,unit,post,processor,post,processors,get,persistence,unit,post,processors,if,post,processors,null,for,persistence,unit,post,processor,post,processor,post,processors,post,processor,post,process,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui);1496837955;Hook method allowing subclasses to customize each PersistenceUnitInfo._<p>The default implementation delegates to all registered PersistenceUnitPostProcessors._It is usually preferable to register further entity classes, jar files etc there_rather than in a subclass of this manager, to be able to reuse the post-processors._@param pui the chosen PersistenceUnitInfo, as read from {@code persistence.xml}._Passed in as MutablePersistenceUnitInfo._@see #setPersistenceUnitPostProcessors;protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui) {_		PersistenceUnitPostProcessor[] postProcessors = getPersistenceUnitPostProcessors()__		if (postProcessors != null) {_			for (PersistenceUnitPostProcessor postProcessor : postProcessors) {_				postProcessor.postProcessPersistenceUnitInfo(pui)__			}_		}_	};hook,method,allowing,subclasses,to,customize,each,persistence,unit,info,p,the,default,implementation,delegates,to,all,registered,persistence,unit,post,processors,it,is,usually,preferable,to,register,further,entity,classes,jar,files,etc,there,rather,than,in,a,subclass,of,this,manager,to,be,able,to,reuse,the,post,processors,param,pui,the,chosen,persistence,unit,info,as,read,from,code,persistence,xml,passed,in,as,mutable,persistence,unit,info,see,set,persistence,unit,post,processors;protected,void,post,process,persistence,unit,info,mutable,persistence,unit,info,pui,persistence,unit,post,processor,post,processors,get,persistence,unit,post,processors,if,post,processors,null,for,persistence,unit,post,processor,post,processor,post,processors,post,processor,post,process,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui);1498780456;Hook method allowing subclasses to customize each PersistenceUnitInfo._<p>The default implementation delegates to all registered PersistenceUnitPostProcessors._It is usually preferable to register further entity classes, jar files etc there_rather than in a subclass of this manager, to be able to reuse the post-processors._@param pui the chosen PersistenceUnitInfo, as read from {@code persistence.xml}._Passed in as MutablePersistenceUnitInfo._@see #setPersistenceUnitPostProcessors;protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui) {_		PersistenceUnitPostProcessor[] postProcessors = getPersistenceUnitPostProcessors()__		if (postProcessors != null) {_			for (PersistenceUnitPostProcessor postProcessor : postProcessors) {_				postProcessor.postProcessPersistenceUnitInfo(pui)__			}_		}_	};hook,method,allowing,subclasses,to,customize,each,persistence,unit,info,p,the,default,implementation,delegates,to,all,registered,persistence,unit,post,processors,it,is,usually,preferable,to,register,further,entity,classes,jar,files,etc,there,rather,than,in,a,subclass,of,this,manager,to,be,able,to,reuse,the,post,processors,param,pui,the,chosen,persistence,unit,info,as,read,from,code,persistence,xml,passed,in,as,mutable,persistence,unit,info,see,set,persistence,unit,post,processors;protected,void,post,process,persistence,unit,info,mutable,persistence,unit,info,pui,persistence,unit,post,processor,post,processors,get,persistence,unit,post,processors,if,post,processors,null,for,persistence,unit,post,processor,post,processor,post,processors,post,processor,post,process,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui);1500448076;Hook method allowing subclasses to customize each PersistenceUnitInfo._<p>The default implementation delegates to all registered PersistenceUnitPostProcessors._It is usually preferable to register further entity classes, jar files etc there_rather than in a subclass of this manager, to be able to reuse the post-processors._@param pui the chosen PersistenceUnitInfo, as read from {@code persistence.xml}._Passed in as MutablePersistenceUnitInfo._@see #setPersistenceUnitPostProcessors;protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui) {_		PersistenceUnitPostProcessor[] postProcessors = getPersistenceUnitPostProcessors()__		if (postProcessors != null) {_			for (PersistenceUnitPostProcessor postProcessor : postProcessors) {_				postProcessor.postProcessPersistenceUnitInfo(pui)__			}_		}_	};hook,method,allowing,subclasses,to,customize,each,persistence,unit,info,p,the,default,implementation,delegates,to,all,registered,persistence,unit,post,processors,it,is,usually,preferable,to,register,further,entity,classes,jar,files,etc,there,rather,than,in,a,subclass,of,this,manager,to,be,able,to,reuse,the,post,processors,param,pui,the,chosen,persistence,unit,info,as,read,from,code,persistence,xml,passed,in,as,mutable,persistence,unit,info,see,set,persistence,unit,post,processors;protected,void,post,process,persistence,unit,info,mutable,persistence,unit,info,pui,persistence,unit,post,processor,post,processors,get,persistence,unit,post,processors,if,post,processors,null,for,persistence,unit,post,processor,post,processor,post,processors,post,processor,post,process,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui);1520528267;Hook method allowing subclasses to customize each PersistenceUnitInfo._<p>The default implementation delegates to all registered PersistenceUnitPostProcessors._It is usually preferable to register further entity classes, jar files etc there_rather than in a subclass of this manager, to be able to reuse the post-processors._@param pui the chosen PersistenceUnitInfo, as read from {@code persistence.xml}._Passed in as MutablePersistenceUnitInfo._@see #setPersistenceUnitPostProcessors;protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui) {_		PersistenceUnitPostProcessor[] postProcessors = getPersistenceUnitPostProcessors()__		if (postProcessors != null) {_			for (PersistenceUnitPostProcessor postProcessor : postProcessors) {_				postProcessor.postProcessPersistenceUnitInfo(pui)__			}_		}_	};hook,method,allowing,subclasses,to,customize,each,persistence,unit,info,p,the,default,implementation,delegates,to,all,registered,persistence,unit,post,processors,it,is,usually,preferable,to,register,further,entity,classes,jar,files,etc,there,rather,than,in,a,subclass,of,this,manager,to,be,able,to,reuse,the,post,processors,param,pui,the,chosen,persistence,unit,info,as,read,from,code,persistence,xml,passed,in,as,mutable,persistence,unit,info,see,set,persistence,unit,post,processors;protected,void,post,process,persistence,unit,info,mutable,persistence,unit,info,pui,persistence,unit,post,processor,post,processors,get,persistence,unit,post,processors,if,post,processors,null,for,persistence,unit,post,processor,post,processor,post,processors,post,processor,post,process,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui);1528313484;Hook method allowing subclasses to customize each PersistenceUnitInfo._<p>The default implementation delegates to all registered PersistenceUnitPostProcessors._It is usually preferable to register further entity classes, jar files etc there_rather than in a subclass of this manager, to be able to reuse the post-processors._@param pui the chosen PersistenceUnitInfo, as read from {@code persistence.xml}._Passed in as MutablePersistenceUnitInfo._@see #setPersistenceUnitPostProcessors;protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui) {_		PersistenceUnitPostProcessor[] postProcessors = getPersistenceUnitPostProcessors()__		if (postProcessors != null) {_			for (PersistenceUnitPostProcessor postProcessor : postProcessors) {_				postProcessor.postProcessPersistenceUnitInfo(pui)__			}_		}_	};hook,method,allowing,subclasses,to,customize,each,persistence,unit,info,p,the,default,implementation,delegates,to,all,registered,persistence,unit,post,processors,it,is,usually,preferable,to,register,further,entity,classes,jar,files,etc,there,rather,than,in,a,subclass,of,this,manager,to,be,able,to,reuse,the,post,processors,param,pui,the,chosen,persistence,unit,info,as,read,from,code,persistence,xml,passed,in,as,mutable,persistence,unit,info,see,set,persistence,unit,post,processors;protected,void,post,process,persistence,unit,info,mutable,persistence,unit,info,pui,persistence,unit,post,processor,post,processors,get,persistence,unit,post,processors,if,post,processors,null,for,persistence,unit,post,processor,post,processor,post,processors,post,processor,post,process,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui);1530174524;Hook method allowing subclasses to customize each PersistenceUnitInfo._<p>The default implementation delegates to all registered PersistenceUnitPostProcessors._It is usually preferable to register further entity classes, jar files etc there_rather than in a subclass of this manager, to be able to reuse the post-processors._@param pui the chosen PersistenceUnitInfo, as read from {@code persistence.xml}._Passed in as MutablePersistenceUnitInfo._@see #setPersistenceUnitPostProcessors;protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui) {_		PersistenceUnitPostProcessor[] postProcessors = getPersistenceUnitPostProcessors()__		if (postProcessors != null) {_			for (PersistenceUnitPostProcessor postProcessor : postProcessors) {_				postProcessor.postProcessPersistenceUnitInfo(pui)__			}_		}_	};hook,method,allowing,subclasses,to,customize,each,persistence,unit,info,p,the,default,implementation,delegates,to,all,registered,persistence,unit,post,processors,it,is,usually,preferable,to,register,further,entity,classes,jar,files,etc,there,rather,than,in,a,subclass,of,this,manager,to,be,able,to,reuse,the,post,processors,param,pui,the,chosen,persistence,unit,info,as,read,from,code,persistence,xml,passed,in,as,mutable,persistence,unit,info,see,set,persistence,unit,post,processors;protected,void,post,process,persistence,unit,info,mutable,persistence,unit,info,pui,persistence,unit,post,processor,post,processors,get,persistence,unit,post,processors,if,post,processors,null,for,persistence,unit,post,processor,post,processor,post,processors,post,processor,post,process,persistence,unit,info,pui
DefaultPersistenceUnitManager -> protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui);1532091916;Hook method allowing subclasses to customize each PersistenceUnitInfo._<p>The default implementation delegates to all registered PersistenceUnitPostProcessors._It is usually preferable to register further entity classes, jar files etc there_rather than in a subclass of this manager, to be able to reuse the post-processors._@param pui the chosen PersistenceUnitInfo, as read from {@code persistence.xml}._Passed in as MutablePersistenceUnitInfo._@see #setPersistenceUnitPostProcessors;protected void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui) {_		PersistenceUnitPostProcessor[] postProcessors = getPersistenceUnitPostProcessors()__		if (postProcessors != null) {_			for (PersistenceUnitPostProcessor postProcessor : postProcessors) {_				postProcessor.postProcessPersistenceUnitInfo(pui)__			}_		}_	};hook,method,allowing,subclasses,to,customize,each,persistence,unit,info,p,the,default,implementation,delegates,to,all,registered,persistence,unit,post,processors,it,is,usually,preferable,to,register,further,entity,classes,jar,files,etc,there,rather,than,in,a,subclass,of,this,manager,to,be,able,to,reuse,the,post,processors,param,pui,the,chosen,persistence,unit,info,as,read,from,code,persistence,xml,passed,in,as,mutable,persistence,unit,info,see,set,persistence,unit,post,processors;protected,void,post,process,persistence,unit,info,mutable,persistence,unit,info,pui,persistence,unit,post,processor,post,processors,get,persistence,unit,post,processors,if,post,processors,null,for,persistence,unit,post,processor,post,processor,post,processors,post,processor,post,process,persistence,unit,info,pui
DefaultPersistenceUnitManager -> public void setDefaultDataSource(DataSource defaultDataSource);1328020251;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database if none has been specified in_<code>persistence.xml</code>._<p>In JPA speak, a DataSource passed in here will be uses as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource();public void setDefaultDataSource(DataSource defaultDataSource) {_		this.defaultDataSource = defaultDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,code,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source;public,void,set,default,data,source,data,source,default,data,source,this,default,data,source,default,data,source
DefaultPersistenceUnitManager -> public void setDefaultDataSource(DataSource defaultDataSource);1329142650;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database if none has been specified in_<code>persistence.xml</code>._<p>In JPA speak, a DataSource passed in here will be uses as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource();public void setDefaultDataSource(DataSource defaultDataSource) {_		this.defaultDataSource = defaultDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,code,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source;public,void,set,default,data,source,data,source,default,data,source,this,default,data,source,default,data,source
DefaultPersistenceUnitManager -> public void setDefaultDataSource(DataSource defaultDataSource);1347282851;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database if none has been specified in_<code>persistence.xml</code>._<p>In JPA speak, a DataSource passed in here will be uses as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource();public void setDefaultDataSource(DataSource defaultDataSource) {_		this.defaultDataSource = defaultDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,code,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source;public,void,set,default,data,source,data,source,default,data,source,this,default,data,source,default,data,source
DefaultPersistenceUnitManager -> public void setDefaultDataSource(DataSource defaultDataSource);1351648399;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in <code>persistence.xml</code>._This variant indicates no special transaction setup, i.e. typical resource-local._<p>In JPA speak, a DataSource passed in here will be uses as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource();public void setDefaultDataSource(DataSource defaultDataSource) {_		this.defaultDataSource = defaultDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,code,this,variant,indicates,no,special,transaction,setup,i,e,typical,resource,local,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source;public,void,set,default,data,source,data,source,default,data,source,this,default,data,source,default,data,source
DefaultPersistenceUnitManager -> public void setDefaultDataSource(DataSource defaultDataSource);1356735495;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates no special transaction setup, i.e. typical resource-local._<p>In JPA speak, a DataSource passed in here will be uses as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource();public void setDefaultDataSource(DataSource defaultDataSource) {_		this.defaultDataSource = defaultDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,no,special,transaction,setup,i,e,typical,resource,local,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source;public,void,set,default,data,source,data,source,default,data,source,this,default,data,source,default,data,source
DefaultPersistenceUnitManager -> public void setDefaultDataSource(DataSource defaultDataSource);1357119239;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates no special transaction setup, i.e. typical resource-local._<p>In JPA speak, a DataSource passed in here will be uses as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource();public void setDefaultDataSource(DataSource defaultDataSource) {_		this.defaultDataSource = defaultDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,no,special,transaction,setup,i,e,typical,resource,local,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source;public,void,set,default,data,source,data,source,default,data,source,this,default,data,source,default,data,source
DefaultPersistenceUnitManager -> public void setDefaultDataSource(DataSource defaultDataSource);1363714444;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates no special transaction setup, i.e. typical resource-local._<p>In JPA speak, a DataSource passed in here will be uses as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource();public void setDefaultDataSource(DataSource defaultDataSource) {_		this.defaultDataSource = defaultDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,no,special,transaction,setup,i,e,typical,resource,local,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source;public,void,set,default,data,source,data,source,default,data,source,this,default,data,source,default,data,source
DefaultPersistenceUnitManager -> public void setDefaultDataSource(DataSource defaultDataSource);1368482696;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates no special transaction setup, i.e. typical resource-local._<p>In JPA speak, a DataSource passed in here will be uses as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource();public void setDefaultDataSource(DataSource defaultDataSource) {_		this.defaultDataSource = defaultDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,no,special,transaction,setup,i,e,typical,resource,local,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source;public,void,set,default,data,source,data,source,default,data,source,this,default,data,source,default,data,source
DefaultPersistenceUnitManager -> public void setDefaultDataSource(DataSource defaultDataSource);1375434510;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates no special transaction setup, i.e. typical resource-local._<p>In JPA speak, a DataSource passed in here will be uses as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource();public void setDefaultDataSource(DataSource defaultDataSource) {_		this.defaultDataSource = defaultDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,no,special,transaction,setup,i,e,typical,resource,local,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source;public,void,set,default,data,source,data,source,default,data,source,this,default,data,source,default,data,source
DefaultPersistenceUnitManager -> public void setDefaultDataSource(DataSource defaultDataSource);1375458214;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates no special transaction setup, i.e. typical resource-local._<p>In JPA speak, a DataSource passed in here will be uses as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource();public void setDefaultDataSource(DataSource defaultDataSource) {_		this.defaultDataSource = defaultDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,no,special,transaction,setup,i,e,typical,resource,local,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source;public,void,set,default,data,source,data,source,default,data,source,this,default,data,source,default,data,source
DefaultPersistenceUnitManager -> public void setDefaultDataSource(DataSource defaultDataSource);1389648334;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates no special transaction setup, i.e. typical resource-local._<p>In JPA speak, a DataSource passed in here will be uses as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource();public void setDefaultDataSource(DataSource defaultDataSource) {_		this.defaultDataSource = defaultDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,no,special,transaction,setup,i,e,typical,resource,local,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source;public,void,set,default,data,source,data,source,default,data,source,this,default,data,source,default,data,source
DefaultPersistenceUnitManager -> public void setDefaultDataSource(DataSource defaultDataSource);1390250900;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates no special transaction setup, i.e. typical resource-local._<p>In JPA speak, a DataSource passed in here will be uses as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource();public void setDefaultDataSource(DataSource defaultDataSource) {_		this.defaultDataSource = defaultDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,no,special,transaction,setup,i,e,typical,resource,local,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source;public,void,set,default,data,source,data,source,default,data,source,this,default,data,source,default,data,source
DefaultPersistenceUnitManager -> public void setDefaultDataSource(DataSource defaultDataSource);1390313076;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates no special transaction setup, i.e. typical resource-local._<p>In JPA speak, a DataSource passed in here will be uses as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource();public void setDefaultDataSource(DataSource defaultDataSource) {_		this.defaultDataSource = defaultDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,no,special,transaction,setup,i,e,typical,resource,local,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source;public,void,set,default,data,source,data,source,default,data,source,this,default,data,source,default,data,source
DefaultPersistenceUnitManager -> public void setDefaultDataSource(DataSource defaultDataSource);1400140571;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates no special transaction setup, i.e. typical resource-local._<p>In JPA speak, a DataSource passed in here will be uses as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource();public void setDefaultDataSource(DataSource defaultDataSource) {_		this.defaultDataSource = defaultDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,no,special,transaction,setup,i,e,typical,resource,local,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source;public,void,set,default,data,source,data,source,default,data,source,this,default,data,source,default,data,source
DefaultPersistenceUnitManager -> public void setDefaultDataSource(DataSource defaultDataSource);1403774750;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates no special transaction setup, i.e. typical resource-local._<p>In JPA speak, a DataSource passed in here will be uses as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource();public void setDefaultDataSource(DataSource defaultDataSource) {_		this.defaultDataSource = defaultDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,no,special,transaction,setup,i,e,typical,resource,local,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source;public,void,set,default,data,source,data,source,default,data,source,this,default,data,source,default,data,source
DefaultPersistenceUnitManager -> public void setDefaultDataSource(DataSource defaultDataSource);1404056186;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates no special transaction setup, i.e. typical resource-local._<p>In JPA speak, a DataSource passed in here will be uses as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource();public void setDefaultDataSource(DataSource defaultDataSource) {_		this.defaultDataSource = defaultDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,no,special,transaction,setup,i,e,typical,resource,local,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source;public,void,set,default,data,source,data,source,default,data,source,this,default,data,source,default,data,source
DefaultPersistenceUnitManager -> public void setDefaultDataSource(DataSource defaultDataSource);1447323728;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates no special transaction setup, i.e. typical resource-local._<p>In JPA speak, a DataSource passed in here will be uses as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource();public void setDefaultDataSource(DataSource defaultDataSource) {_		this.defaultDataSource = defaultDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,no,special,transaction,setup,i,e,typical,resource,local,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source;public,void,set,default,data,source,data,source,default,data,source,this,default,data,source,default,data,source
DefaultPersistenceUnitManager -> public void setDefaultDataSource(DataSource defaultDataSource);1464299869;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates no special transaction setup, i.e. typical resource-local._<p>In JPA speak, a DataSource passed in here will be uses as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource();public void setDefaultDataSource(DataSource defaultDataSource) {_		this.defaultDataSource = defaultDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,no,special,transaction,setup,i,e,typical,resource,local,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source;public,void,set,default,data,source,data,source,default,data,source,this,default,data,source,default,data,source
DefaultPersistenceUnitManager -> public void setDefaultDataSource(DataSource defaultDataSource);1467668243;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates no special transaction setup, i.e. typical resource-local._<p>In JPA speak, a DataSource passed in here will be uses as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource();public void setDefaultDataSource(DataSource defaultDataSource) {_		this.defaultDataSource = defaultDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,no,special,transaction,setup,i,e,typical,resource,local,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source;public,void,set,default,data,source,data,source,default,data,source,this,default,data,source,default,data,source
DefaultPersistenceUnitManager -> public void setDefaultDataSource(DataSource defaultDataSource);1467730834;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates no special transaction setup, i.e. typical resource-local._<p>In JPA speak, a DataSource passed in here will be uses as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource();public void setDefaultDataSource(DataSource defaultDataSource) {_		this.defaultDataSource = defaultDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,no,special,transaction,setup,i,e,typical,resource,local,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source;public,void,set,default,data,source,data,source,default,data,source,this,default,data,source,default,data,source
DefaultPersistenceUnitManager -> public void setDefaultDataSource(DataSource defaultDataSource);1471464767;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates no special transaction setup, i.e. typical resource-local._<p>In JPA speak, a DataSource passed in here will be uses as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource();public void setDefaultDataSource(DataSource defaultDataSource) {_		this.defaultDataSource = defaultDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,no,special,transaction,setup,i,e,typical,resource,local,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source;public,void,set,default,data,source,data,source,default,data,source,this,default,data,source,default,data,source
DefaultPersistenceUnitManager -> public void setDefaultDataSource(DataSource defaultDataSource);1472736647;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates no special transaction setup, i.e. typical resource-local._<p>In JPA speak, a DataSource passed in here will be uses as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource();public void setDefaultDataSource(DataSource defaultDataSource) {_		this.defaultDataSource = defaultDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,no,special,transaction,setup,i,e,typical,resource,local,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source;public,void,set,default,data,source,data,source,default,data,source,this,default,data,source,default,data,source
DefaultPersistenceUnitManager -> public void setDefaultDataSource(DataSource defaultDataSource);1474895745;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates no special transaction setup, i.e. typical resource-local._<p>In JPA speak, a DataSource passed in here will be uses as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource();public void setDefaultDataSource(DataSource defaultDataSource) {_		this.defaultDataSource = defaultDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,no,special,transaction,setup,i,e,typical,resource,local,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source;public,void,set,default,data,source,data,source,default,data,source,this,default,data,source,default,data,source
DefaultPersistenceUnitManager -> public void setDefaultDataSource(DataSource defaultDataSource);1495868221;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates no special transaction setup, i.e. typical resource-local._<p>In JPA speak, a DataSource passed in here will be uses as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource();public void setDefaultDataSource(DataSource defaultDataSource) {_		this.defaultDataSource = defaultDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,no,special,transaction,setup,i,e,typical,resource,local,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source;public,void,set,default,data,source,data,source,default,data,source,this,default,data,source,default,data,source
DefaultPersistenceUnitManager -> public void setDefaultDataSource(DataSource defaultDataSource);1496259743;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates no special transaction setup, i.e. typical resource-local._<p>In JPA speak, a DataSource passed in here will be uses as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource();public void setDefaultDataSource(DataSource defaultDataSource) {_		this.defaultDataSource = defaultDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,no,special,transaction,setup,i,e,typical,resource,local,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source;public,void,set,default,data,source,data,source,default,data,source,this,default,data,source,default,data,source
DefaultPersistenceUnitManager -> public void setDefaultDataSource(DataSource defaultDataSource);1496837955;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates no special transaction setup, i.e. typical resource-local._<p>In JPA speak, a DataSource passed in here will be uses as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource();public void setDefaultDataSource(DataSource defaultDataSource) {_		this.defaultDataSource = defaultDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,no,special,transaction,setup,i,e,typical,resource,local,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source;public,void,set,default,data,source,data,source,default,data,source,this,default,data,source,default,data,source
DefaultPersistenceUnitManager -> public void setDefaultDataSource(DataSource defaultDataSource);1498780456;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates no special transaction setup, i.e. typical resource-local._<p>In JPA speak, a DataSource passed in here will be uses as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource();public void setDefaultDataSource(DataSource defaultDataSource) {_		this.defaultDataSource = defaultDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,no,special,transaction,setup,i,e,typical,resource,local,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source;public,void,set,default,data,source,data,source,default,data,source,this,default,data,source,default,data,source
DefaultPersistenceUnitManager -> @Nullable 	public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors();1496837955;Return the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager.;@Nullable_	public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors() {_		return this.persistenceUnitPostProcessors__	};return,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager;nullable,public,persistence,unit,post,processor,get,persistence,unit,post,processors,return,this,persistence,unit,post,processors
DefaultPersistenceUnitManager -> @Nullable 	public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors();1498780456;Return the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager.;@Nullable_	public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors() {_		return this.persistenceUnitPostProcessors__	};return,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager;nullable,public,persistence,unit,post,processor,get,persistence,unit,post,processors,return,this,persistence,unit,post,processors
DefaultPersistenceUnitManager -> @Nullable 	public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors();1500448076;Return the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager.;@Nullable_	public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors() {_		return this.persistenceUnitPostProcessors__	};return,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager;nullable,public,persistence,unit,post,processor,get,persistence,unit,post,processors,return,this,persistence,unit,post,processors
DefaultPersistenceUnitManager -> @Nullable 	public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors();1520528267;Return the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager.;@Nullable_	public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors() {_		return this.persistenceUnitPostProcessors__	};return,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager;nullable,public,persistence,unit,post,processor,get,persistence,unit,post,processors,return,this,persistence,unit,post,processors
DefaultPersistenceUnitManager -> @Nullable 	public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors();1528313484;Return the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager.;@Nullable_	public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors() {_		return this.persistenceUnitPostProcessors__	};return,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager;nullable,public,persistence,unit,post,processor,get,persistence,unit,post,processors,return,this,persistence,unit,post,processors
DefaultPersistenceUnitManager -> @Nullable 	public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors();1530174524;Return the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager.;@Nullable_	public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors() {_		return this.persistenceUnitPostProcessors__	};return,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager;nullable,public,persistence,unit,post,processor,get,persistence,unit,post,processors,return,this,persistence,unit,post,processors
DefaultPersistenceUnitManager -> @Nullable 	public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors();1532091916;Return the PersistenceUnitPostProcessors to be applied to each_PersistenceUnitInfo that has been parsed by this manager.;@Nullable_	public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors() {_		return this.persistenceUnitPostProcessors__	};return,the,persistence,unit,post,processors,to,be,applied,to,each,persistence,unit,info,that,has,been,parsed,by,this,manager;nullable,public,persistence,unit,post,processor,get,persistence,unit,post,processors,return,this,persistence,unit,post,processors
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocations(String... persistenceXmlLocations);1328020251;Specify multiple locations of <code>persistence.xml</code> files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml"._@param persistenceXmlLocations an array of Spring resource Strings_identifying the location of the <code>persistence.xml</code> files to read;public void setPersistenceXmlLocations(String... persistenceXmlLocations) {_		this.persistenceXmlLocations = persistenceXmlLocations__	};specify,multiple,locations,of,code,persistence,xml,code,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml,param,persistence,xml,locations,an,array,of,spring,resource,strings,identifying,the,location,of,the,code,persistence,xml,code,files,to,read;public,void,set,persistence,xml,locations,string,persistence,xml,locations,this,persistence,xml,locations,persistence,xml,locations
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocations(String... persistenceXmlLocations);1329142650;Specify multiple locations of <code>persistence.xml</code> files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml"._@param persistenceXmlLocations an array of Spring resource Strings_identifying the location of the <code>persistence.xml</code> files to read;public void setPersistenceXmlLocations(String... persistenceXmlLocations) {_		this.persistenceXmlLocations = persistenceXmlLocations__	};specify,multiple,locations,of,code,persistence,xml,code,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml,param,persistence,xml,locations,an,array,of,spring,resource,strings,identifying,the,location,of,the,code,persistence,xml,code,files,to,read;public,void,set,persistence,xml,locations,string,persistence,xml,locations,this,persistence,xml,locations,persistence,xml,locations
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocations(String... persistenceXmlLocations);1347282851;Specify multiple locations of <code>persistence.xml</code> files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml"._@param persistenceXmlLocations an array of Spring resource Strings_identifying the location of the <code>persistence.xml</code> files to read;public void setPersistenceXmlLocations(String... persistenceXmlLocations) {_		this.persistenceXmlLocations = persistenceXmlLocations__	};specify,multiple,locations,of,code,persistence,xml,code,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml,param,persistence,xml,locations,an,array,of,spring,resource,strings,identifying,the,location,of,the,code,persistence,xml,code,files,to,read;public,void,set,persistence,xml,locations,string,persistence,xml,locations,this,persistence,xml,locations,persistence,xml,locations
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocations(String... persistenceXmlLocations);1351648399;Specify multiple locations of <code>persistence.xml</code> files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml"._@param persistenceXmlLocations an array of Spring resource Strings_identifying the location of the <code>persistence.xml</code> files to read;public void setPersistenceXmlLocations(String... persistenceXmlLocations) {_		this.persistenceXmlLocations = persistenceXmlLocations__	};specify,multiple,locations,of,code,persistence,xml,code,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml,param,persistence,xml,locations,an,array,of,spring,resource,strings,identifying,the,location,of,the,code,persistence,xml,code,files,to,read;public,void,set,persistence,xml,locations,string,persistence,xml,locations,this,persistence,xml,locations,persistence,xml,locations
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocations(String... persistenceXmlLocations);1356735495;Specify multiple locations of {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml"._@param persistenceXmlLocations an array of Spring resource Strings_identifying the location of the {@code persistence.xml} files to read;public void setPersistenceXmlLocations(String... persistenceXmlLocations) {_		this.persistenceXmlLocations = persistenceXmlLocations__	};specify,multiple,locations,of,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml,param,persistence,xml,locations,an,array,of,spring,resource,strings,identifying,the,location,of,the,code,persistence,xml,files,to,read;public,void,set,persistence,xml,locations,string,persistence,xml,locations,this,persistence,xml,locations,persistence,xml,locations
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocations(String... persistenceXmlLocations);1357119239;Specify multiple locations of {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml"._@param persistenceXmlLocations an array of Spring resource Strings_identifying the location of the {@code persistence.xml} files to read;public void setPersistenceXmlLocations(String... persistenceXmlLocations) {_		this.persistenceXmlLocations = persistenceXmlLocations__	};specify,multiple,locations,of,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml,param,persistence,xml,locations,an,array,of,spring,resource,strings,identifying,the,location,of,the,code,persistence,xml,files,to,read;public,void,set,persistence,xml,locations,string,persistence,xml,locations,this,persistence,xml,locations,persistence,xml,locations
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocations(String... persistenceXmlLocations);1363714444;Specify multiple locations of {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml"._@param persistenceXmlLocations an array of Spring resource Strings_identifying the location of the {@code persistence.xml} files to read;public void setPersistenceXmlLocations(String... persistenceXmlLocations) {_		this.persistenceXmlLocations = persistenceXmlLocations__	};specify,multiple,locations,of,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml,param,persistence,xml,locations,an,array,of,spring,resource,strings,identifying,the,location,of,the,code,persistence,xml,files,to,read;public,void,set,persistence,xml,locations,string,persistence,xml,locations,this,persistence,xml,locations,persistence,xml,locations
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocations(String... persistenceXmlLocations);1368482696;Specify multiple locations of {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml"._@param persistenceXmlLocations an array of Spring resource Strings_identifying the location of the {@code persistence.xml} files to read;public void setPersistenceXmlLocations(String... persistenceXmlLocations) {_		this.persistenceXmlLocations = persistenceXmlLocations__	};specify,multiple,locations,of,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml,param,persistence,xml,locations,an,array,of,spring,resource,strings,identifying,the,location,of,the,code,persistence,xml,files,to,read;public,void,set,persistence,xml,locations,string,persistence,xml,locations,this,persistence,xml,locations,persistence,xml,locations
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocations(String... persistenceXmlLocations);1375434510;Specify multiple locations of {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml"._@param persistenceXmlLocations an array of Spring resource Strings_identifying the location of the {@code persistence.xml} files to read;public void setPersistenceXmlLocations(String... persistenceXmlLocations) {_		this.persistenceXmlLocations = persistenceXmlLocations__	};specify,multiple,locations,of,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml,param,persistence,xml,locations,an,array,of,spring,resource,strings,identifying,the,location,of,the,code,persistence,xml,files,to,read;public,void,set,persistence,xml,locations,string,persistence,xml,locations,this,persistence,xml,locations,persistence,xml,locations
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocations(String... persistenceXmlLocations);1375458214;Specify multiple locations of {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml"._@param persistenceXmlLocations an array of Spring resource Strings_identifying the location of the {@code persistence.xml} files to read;public void setPersistenceXmlLocations(String... persistenceXmlLocations) {_		this.persistenceXmlLocations = persistenceXmlLocations__	};specify,multiple,locations,of,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml,param,persistence,xml,locations,an,array,of,spring,resource,strings,identifying,the,location,of,the,code,persistence,xml,files,to,read;public,void,set,persistence,xml,locations,string,persistence,xml,locations,this,persistence,xml,locations,persistence,xml,locations
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocations(String... persistenceXmlLocations);1389648334;Specify multiple locations of {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml"._@param persistenceXmlLocations an array of Spring resource Strings_identifying the location of the {@code persistence.xml} files to read;public void setPersistenceXmlLocations(String... persistenceXmlLocations) {_		this.persistenceXmlLocations = persistenceXmlLocations__	};specify,multiple,locations,of,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml,param,persistence,xml,locations,an,array,of,spring,resource,strings,identifying,the,location,of,the,code,persistence,xml,files,to,read;public,void,set,persistence,xml,locations,string,persistence,xml,locations,this,persistence,xml,locations,persistence,xml,locations
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocations(String... persistenceXmlLocations);1390250900;Specify multiple locations of {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml"._@param persistenceXmlLocations an array of Spring resource Strings_identifying the location of the {@code persistence.xml} files to read;public void setPersistenceXmlLocations(String... persistenceXmlLocations) {_		this.persistenceXmlLocations = persistenceXmlLocations__	};specify,multiple,locations,of,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml,param,persistence,xml,locations,an,array,of,spring,resource,strings,identifying,the,location,of,the,code,persistence,xml,files,to,read;public,void,set,persistence,xml,locations,string,persistence,xml,locations,this,persistence,xml,locations,persistence,xml,locations
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocations(String... persistenceXmlLocations);1390313076;Specify multiple locations of {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml"._@param persistenceXmlLocations an array of Spring resource Strings_identifying the location of the {@code persistence.xml} files to read;public void setPersistenceXmlLocations(String... persistenceXmlLocations) {_		this.persistenceXmlLocations = persistenceXmlLocations__	};specify,multiple,locations,of,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml,param,persistence,xml,locations,an,array,of,spring,resource,strings,identifying,the,location,of,the,code,persistence,xml,files,to,read;public,void,set,persistence,xml,locations,string,persistence,xml,locations,this,persistence,xml,locations,persistence,xml,locations
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocations(String... persistenceXmlLocations);1400140571;Specify multiple locations of {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml"._@param persistenceXmlLocations an array of Spring resource Strings_identifying the location of the {@code persistence.xml} files to read;public void setPersistenceXmlLocations(String... persistenceXmlLocations) {_		this.persistenceXmlLocations = persistenceXmlLocations__	};specify,multiple,locations,of,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml,param,persistence,xml,locations,an,array,of,spring,resource,strings,identifying,the,location,of,the,code,persistence,xml,files,to,read;public,void,set,persistence,xml,locations,string,persistence,xml,locations,this,persistence,xml,locations,persistence,xml,locations
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocations(String... persistenceXmlLocations);1403774750;Specify multiple locations of {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml"._@param persistenceXmlLocations an array of Spring resource Strings_identifying the location of the {@code persistence.xml} files to read;public void setPersistenceXmlLocations(String... persistenceXmlLocations) {_		this.persistenceXmlLocations = persistenceXmlLocations__	};specify,multiple,locations,of,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml,param,persistence,xml,locations,an,array,of,spring,resource,strings,identifying,the,location,of,the,code,persistence,xml,files,to,read;public,void,set,persistence,xml,locations,string,persistence,xml,locations,this,persistence,xml,locations,persistence,xml,locations
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocations(String... persistenceXmlLocations);1404056186;Specify multiple locations of {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml"._@param persistenceXmlLocations an array of Spring resource Strings_identifying the location of the {@code persistence.xml} files to read;public void setPersistenceXmlLocations(String... persistenceXmlLocations) {_		this.persistenceXmlLocations = persistenceXmlLocations__	};specify,multiple,locations,of,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml,param,persistence,xml,locations,an,array,of,spring,resource,strings,identifying,the,location,of,the,code,persistence,xml,files,to,read;public,void,set,persistence,xml,locations,string,persistence,xml,locations,this,persistence,xml,locations,persistence,xml,locations
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocations(String... persistenceXmlLocations);1447323728;Specify multiple locations of {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml"._@param persistenceXmlLocations an array of Spring resource Strings_identifying the location of the {@code persistence.xml} files to read;public void setPersistenceXmlLocations(String... persistenceXmlLocations) {_		this.persistenceXmlLocations = persistenceXmlLocations__	};specify,multiple,locations,of,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml,param,persistence,xml,locations,an,array,of,spring,resource,strings,identifying,the,location,of,the,code,persistence,xml,files,to,read;public,void,set,persistence,xml,locations,string,persistence,xml,locations,this,persistence,xml,locations,persistence,xml,locations
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocations(String... persistenceXmlLocations);1464299869;Specify multiple locations of {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml"._@param persistenceXmlLocations an array of Spring resource Strings_identifying the location of the {@code persistence.xml} files to read;public void setPersistenceXmlLocations(String... persistenceXmlLocations) {_		this.persistenceXmlLocations = persistenceXmlLocations__	};specify,multiple,locations,of,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml,param,persistence,xml,locations,an,array,of,spring,resource,strings,identifying,the,location,of,the,code,persistence,xml,files,to,read;public,void,set,persistence,xml,locations,string,persistence,xml,locations,this,persistence,xml,locations,persistence,xml,locations
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocations(String... persistenceXmlLocations);1467668243;Specify multiple locations of {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml"._@param persistenceXmlLocations an array of Spring resource Strings_identifying the location of the {@code persistence.xml} files to read;public void setPersistenceXmlLocations(String... persistenceXmlLocations) {_		this.persistenceXmlLocations = persistenceXmlLocations__	};specify,multiple,locations,of,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml,param,persistence,xml,locations,an,array,of,spring,resource,strings,identifying,the,location,of,the,code,persistence,xml,files,to,read;public,void,set,persistence,xml,locations,string,persistence,xml,locations,this,persistence,xml,locations,persistence,xml,locations
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocations(String... persistenceXmlLocations);1467730834;Specify multiple locations of {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml"._@param persistenceXmlLocations an array of Spring resource Strings_identifying the location of the {@code persistence.xml} files to read;public void setPersistenceXmlLocations(String... persistenceXmlLocations) {_		this.persistenceXmlLocations = persistenceXmlLocations__	};specify,multiple,locations,of,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml,param,persistence,xml,locations,an,array,of,spring,resource,strings,identifying,the,location,of,the,code,persistence,xml,files,to,read;public,void,set,persistence,xml,locations,string,persistence,xml,locations,this,persistence,xml,locations,persistence,xml,locations
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocations(String... persistenceXmlLocations);1471464767;Specify multiple locations of {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml"._@param persistenceXmlLocations an array of Spring resource Strings_identifying the location of the {@code persistence.xml} files to read;public void setPersistenceXmlLocations(String... persistenceXmlLocations) {_		this.persistenceXmlLocations = persistenceXmlLocations__	};specify,multiple,locations,of,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml,param,persistence,xml,locations,an,array,of,spring,resource,strings,identifying,the,location,of,the,code,persistence,xml,files,to,read;public,void,set,persistence,xml,locations,string,persistence,xml,locations,this,persistence,xml,locations,persistence,xml,locations
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocations(String... persistenceXmlLocations);1472736647;Specify multiple locations of {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml"._@param persistenceXmlLocations an array of Spring resource Strings_identifying the location of the {@code persistence.xml} files to read;public void setPersistenceXmlLocations(String... persistenceXmlLocations) {_		this.persistenceXmlLocations = persistenceXmlLocations__	};specify,multiple,locations,of,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml,param,persistence,xml,locations,an,array,of,spring,resource,strings,identifying,the,location,of,the,code,persistence,xml,files,to,read;public,void,set,persistence,xml,locations,string,persistence,xml,locations,this,persistence,xml,locations,persistence,xml,locations
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocations(String... persistenceXmlLocations);1474895745;Specify multiple locations of {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml"._@param persistenceXmlLocations an array of Spring resource Strings_identifying the location of the {@code persistence.xml} files to read;public void setPersistenceXmlLocations(String... persistenceXmlLocations) {_		this.persistenceXmlLocations = persistenceXmlLocations__	};specify,multiple,locations,of,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml,param,persistence,xml,locations,an,array,of,spring,resource,strings,identifying,the,location,of,the,code,persistence,xml,files,to,read;public,void,set,persistence,xml,locations,string,persistence,xml,locations,this,persistence,xml,locations,persistence,xml,locations
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocations(String... persistenceXmlLocations);1495868221;Specify multiple locations of {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml"._@param persistenceXmlLocations an array of Spring resource Strings_identifying the location of the {@code persistence.xml} files to read;public void setPersistenceXmlLocations(String... persistenceXmlLocations) {_		this.persistenceXmlLocations = persistenceXmlLocations__	};specify,multiple,locations,of,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml,param,persistence,xml,locations,an,array,of,spring,resource,strings,identifying,the,location,of,the,code,persistence,xml,files,to,read;public,void,set,persistence,xml,locations,string,persistence,xml,locations,this,persistence,xml,locations,persistence,xml,locations
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocations(String... persistenceXmlLocations);1496259743;Specify multiple locations of {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml"._@param persistenceXmlLocations an array of Spring resource Strings_identifying the location of the {@code persistence.xml} files to read;public void setPersistenceXmlLocations(String... persistenceXmlLocations) {_		this.persistenceXmlLocations = persistenceXmlLocations__	};specify,multiple,locations,of,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml,param,persistence,xml,locations,an,array,of,spring,resource,strings,identifying,the,location,of,the,code,persistence,xml,files,to,read;public,void,set,persistence,xml,locations,string,persistence,xml,locations,this,persistence,xml,locations,persistence,xml,locations
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocations(String... persistenceXmlLocations);1496837955;Specify multiple locations of {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml"._@param persistenceXmlLocations an array of Spring resource Strings_identifying the location of the {@code persistence.xml} files to read;public void setPersistenceXmlLocations(String... persistenceXmlLocations) {_		this.persistenceXmlLocations = persistenceXmlLocations__	};specify,multiple,locations,of,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml,param,persistence,xml,locations,an,array,of,spring,resource,strings,identifying,the,location,of,the,code,persistence,xml,files,to,read;public,void,set,persistence,xml,locations,string,persistence,xml,locations,this,persistence,xml,locations,persistence,xml,locations
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocations(String... persistenceXmlLocations);1498780456;Specify multiple locations of {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml"._@param persistenceXmlLocations an array of Spring resource Strings_identifying the location of the {@code persistence.xml} files to read;public void setPersistenceXmlLocations(String... persistenceXmlLocations) {_		this.persistenceXmlLocations = persistenceXmlLocations__	};specify,multiple,locations,of,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml,param,persistence,xml,locations,an,array,of,spring,resource,strings,identifying,the,location,of,the,code,persistence,xml,files,to,read;public,void,set,persistence,xml,locations,string,persistence,xml,locations,this,persistence,xml,locations,persistence,xml,locations
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocations(String... persistenceXmlLocations);1500448076;Specify multiple locations of {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml"._@param persistenceXmlLocations an array of Spring resource Strings_identifying the location of the {@code persistence.xml} files to read;public void setPersistenceXmlLocations(String... persistenceXmlLocations) {_		this.persistenceXmlLocations = persistenceXmlLocations__	};specify,multiple,locations,of,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml,param,persistence,xml,locations,an,array,of,spring,resource,strings,identifying,the,location,of,the,code,persistence,xml,files,to,read;public,void,set,persistence,xml,locations,string,persistence,xml,locations,this,persistence,xml,locations,persistence,xml,locations
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocations(String... persistenceXmlLocations);1520528267;Specify multiple locations of {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml"._@param persistenceXmlLocations an array of Spring resource Strings_identifying the location of the {@code persistence.xml} files to read;public void setPersistenceXmlLocations(String... persistenceXmlLocations) {_		this.persistenceXmlLocations = persistenceXmlLocations__	};specify,multiple,locations,of,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml,param,persistence,xml,locations,an,array,of,spring,resource,strings,identifying,the,location,of,the,code,persistence,xml,files,to,read;public,void,set,persistence,xml,locations,string,persistence,xml,locations,this,persistence,xml,locations,persistence,xml,locations
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocations(String... persistenceXmlLocations);1528313484;Specify multiple locations of {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml"._@param persistenceXmlLocations an array of Spring resource Strings_identifying the location of the {@code persistence.xml} files to read;public void setPersistenceXmlLocations(String... persistenceXmlLocations) {_		this.persistenceXmlLocations = persistenceXmlLocations__	};specify,multiple,locations,of,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml,param,persistence,xml,locations,an,array,of,spring,resource,strings,identifying,the,location,of,the,code,persistence,xml,files,to,read;public,void,set,persistence,xml,locations,string,persistence,xml,locations,this,persistence,xml,locations,persistence,xml,locations
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocations(String... persistenceXmlLocations);1530174524;Specify multiple locations of {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml"._@param persistenceXmlLocations an array of Spring resource Strings_identifying the location of the {@code persistence.xml} files to read;public void setPersistenceXmlLocations(String... persistenceXmlLocations) {_		this.persistenceXmlLocations = persistenceXmlLocations__	};specify,multiple,locations,of,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml,param,persistence,xml,locations,an,array,of,spring,resource,strings,identifying,the,location,of,the,code,persistence,xml,files,to,read;public,void,set,persistence,xml,locations,string,persistence,xml,locations,this,persistence,xml,locations,persistence,xml,locations
DefaultPersistenceUnitManager -> public void setPersistenceXmlLocations(String... persistenceXmlLocations);1532091916;Specify multiple locations of {@code persistence.xml} files to load._These can be specified as Spring resource locations and/or location patterns._<p>Default is "classpath*:META-INF/persistence.xml"._@param persistenceXmlLocations an array of Spring resource Strings_identifying the location of the {@code persistence.xml} files to read;public void setPersistenceXmlLocations(String... persistenceXmlLocations) {_		this.persistenceXmlLocations = persistenceXmlLocations__	};specify,multiple,locations,of,code,persistence,xml,files,to,load,these,can,be,specified,as,spring,resource,locations,and,or,location,patterns,p,default,is,classpath,meta,inf,persistence,xml,param,persistence,xml,locations,an,array,of,spring,resource,strings,identifying,the,location,of,the,code,persistence,xml,files,to,read;public,void,set,persistence,xml,locations,string,persistence,xml,locations,this,persistence,xml,locations,persistence,xml,locations
DefaultPersistenceUnitManager -> private URL determineDefaultPersistenceUnitRootUrl();1328020251;Try to determine the persistence unit root URL based on the given_"defaultPersistenceUnitRootLocation"._@return the persistence unit root URL to pass to the JPA PersistenceProvider_@see #setDefaultPersistenceUnitRootLocation;private URL determineDefaultPersistenceUnitRootUrl() {_		if (this.defaultPersistenceUnitRootLocation == null) {_			return null__		}_		try {_			Resource res = this.resourcePatternResolver.getResource(this.defaultPersistenceUnitRootLocation)__			return res.getURL()__		}_		catch (IOException ex) {_			throw new PersistenceException("Unable to resolve persistence unit root URL", ex)__		}_	};try,to,determine,the,persistence,unit,root,url,based,on,the,given,default,persistence,unit,root,location,return,the,persistence,unit,root,url,to,pass,to,the,jpa,persistence,provider,see,set,default,persistence,unit,root,location;private,url,determine,default,persistence,unit,root,url,if,this,default,persistence,unit,root,location,null,return,null,try,resource,res,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,return,res,get,url,catch,ioexception,ex,throw,new,persistence,exception,unable,to,resolve,persistence,unit,root,url,ex
DefaultPersistenceUnitManager -> private URL determineDefaultPersistenceUnitRootUrl();1329142650;Try to determine the persistence unit root URL based on the given_"defaultPersistenceUnitRootLocation"._@return the persistence unit root URL to pass to the JPA PersistenceProvider_@see #setDefaultPersistenceUnitRootLocation;private URL determineDefaultPersistenceUnitRootUrl() {_		if (this.defaultPersistenceUnitRootLocation == null) {_			return null__		}_		try {_			Resource res = this.resourcePatternResolver.getResource(this.defaultPersistenceUnitRootLocation)__			return res.getURL()__		}_		catch (IOException ex) {_			throw new PersistenceException("Unable to resolve persistence unit root URL", ex)__		}_	};try,to,determine,the,persistence,unit,root,url,based,on,the,given,default,persistence,unit,root,location,return,the,persistence,unit,root,url,to,pass,to,the,jpa,persistence,provider,see,set,default,persistence,unit,root,location;private,url,determine,default,persistence,unit,root,url,if,this,default,persistence,unit,root,location,null,return,null,try,resource,res,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,return,res,get,url,catch,ioexception,ex,throw,new,persistence,exception,unable,to,resolve,persistence,unit,root,url,ex
DefaultPersistenceUnitManager -> private URL determineDefaultPersistenceUnitRootUrl();1347282851;Try to determine the persistence unit root URL based on the given_"defaultPersistenceUnitRootLocation"._@return the persistence unit root URL to pass to the JPA PersistenceProvider_@see #setDefaultPersistenceUnitRootLocation;private URL determineDefaultPersistenceUnitRootUrl() {_		if (this.defaultPersistenceUnitRootLocation == null) {_			return null__		}_		try {_			Resource res = this.resourcePatternResolver.getResource(this.defaultPersistenceUnitRootLocation)__			return res.getURL()__		}_		catch (IOException ex) {_			throw new PersistenceException("Unable to resolve persistence unit root URL", ex)__		}_	};try,to,determine,the,persistence,unit,root,url,based,on,the,given,default,persistence,unit,root,location,return,the,persistence,unit,root,url,to,pass,to,the,jpa,persistence,provider,see,set,default,persistence,unit,root,location;private,url,determine,default,persistence,unit,root,url,if,this,default,persistence,unit,root,location,null,return,null,try,resource,res,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,return,res,get,url,catch,ioexception,ex,throw,new,persistence,exception,unable,to,resolve,persistence,unit,root,url,ex
DefaultPersistenceUnitManager -> private URL determineDefaultPersistenceUnitRootUrl();1351648399;Try to determine the persistence unit root URL based on the given_"defaultPersistenceUnitRootLocation"._@return the persistence unit root URL to pass to the JPA PersistenceProvider_@see #setDefaultPersistenceUnitRootLocation;private URL determineDefaultPersistenceUnitRootUrl() {_		if (this.defaultPersistenceUnitRootLocation == null) {_			return null__		}_		try {_			Resource res = this.resourcePatternResolver.getResource(this.defaultPersistenceUnitRootLocation)__			return res.getURL()__		}_		catch (IOException ex) {_			throw new PersistenceException("Unable to resolve persistence unit root URL", ex)__		}_	};try,to,determine,the,persistence,unit,root,url,based,on,the,given,default,persistence,unit,root,location,return,the,persistence,unit,root,url,to,pass,to,the,jpa,persistence,provider,see,set,default,persistence,unit,root,location;private,url,determine,default,persistence,unit,root,url,if,this,default,persistence,unit,root,location,null,return,null,try,resource,res,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,return,res,get,url,catch,ioexception,ex,throw,new,persistence,exception,unable,to,resolve,persistence,unit,root,url,ex
DefaultPersistenceUnitManager -> private URL determineDefaultPersistenceUnitRootUrl();1356735495;Try to determine the persistence unit root URL based on the given_"defaultPersistenceUnitRootLocation"._@return the persistence unit root URL to pass to the JPA PersistenceProvider_@see #setDefaultPersistenceUnitRootLocation;private URL determineDefaultPersistenceUnitRootUrl() {_		if (this.defaultPersistenceUnitRootLocation == null) {_			return null__		}_		try {_			Resource res = this.resourcePatternResolver.getResource(this.defaultPersistenceUnitRootLocation)__			return res.getURL()__		}_		catch (IOException ex) {_			throw new PersistenceException("Unable to resolve persistence unit root URL", ex)__		}_	};try,to,determine,the,persistence,unit,root,url,based,on,the,given,default,persistence,unit,root,location,return,the,persistence,unit,root,url,to,pass,to,the,jpa,persistence,provider,see,set,default,persistence,unit,root,location;private,url,determine,default,persistence,unit,root,url,if,this,default,persistence,unit,root,location,null,return,null,try,resource,res,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,return,res,get,url,catch,ioexception,ex,throw,new,persistence,exception,unable,to,resolve,persistence,unit,root,url,ex
DefaultPersistenceUnitManager -> private URL determineDefaultPersistenceUnitRootUrl();1357119239;Try to determine the persistence unit root URL based on the given_"defaultPersistenceUnitRootLocation"._@return the persistence unit root URL to pass to the JPA PersistenceProvider_@see #setDefaultPersistenceUnitRootLocation;private URL determineDefaultPersistenceUnitRootUrl() {_		if (this.defaultPersistenceUnitRootLocation == null) {_			return null__		}_		try {_			Resource res = this.resourcePatternResolver.getResource(this.defaultPersistenceUnitRootLocation)__			return res.getURL()__		}_		catch (IOException ex) {_			throw new PersistenceException("Unable to resolve persistence unit root URL", ex)__		}_	};try,to,determine,the,persistence,unit,root,url,based,on,the,given,default,persistence,unit,root,location,return,the,persistence,unit,root,url,to,pass,to,the,jpa,persistence,provider,see,set,default,persistence,unit,root,location;private,url,determine,default,persistence,unit,root,url,if,this,default,persistence,unit,root,location,null,return,null,try,resource,res,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,return,res,get,url,catch,ioexception,ex,throw,new,persistence,exception,unable,to,resolve,persistence,unit,root,url,ex
DefaultPersistenceUnitManager -> private URL determineDefaultPersistenceUnitRootUrl();1363714444;Try to determine the persistence unit root URL based on the given_"defaultPersistenceUnitRootLocation"._@return the persistence unit root URL to pass to the JPA PersistenceProvider_@see #setDefaultPersistenceUnitRootLocation;private URL determineDefaultPersistenceUnitRootUrl() {_		if (this.defaultPersistenceUnitRootLocation == null) {_			return null__		}_		try {_			Resource res = this.resourcePatternResolver.getResource(this.defaultPersistenceUnitRootLocation)__			return res.getURL()__		}_		catch (IOException ex) {_			throw new PersistenceException("Unable to resolve persistence unit root URL", ex)__		}_	};try,to,determine,the,persistence,unit,root,url,based,on,the,given,default,persistence,unit,root,location,return,the,persistence,unit,root,url,to,pass,to,the,jpa,persistence,provider,see,set,default,persistence,unit,root,location;private,url,determine,default,persistence,unit,root,url,if,this,default,persistence,unit,root,location,null,return,null,try,resource,res,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,return,res,get,url,catch,ioexception,ex,throw,new,persistence,exception,unable,to,resolve,persistence,unit,root,url,ex
DefaultPersistenceUnitManager -> private URL determineDefaultPersistenceUnitRootUrl();1368482696;Try to determine the persistence unit root URL based on the given_"defaultPersistenceUnitRootLocation"._@return the persistence unit root URL to pass to the JPA PersistenceProvider_@see #setDefaultPersistenceUnitRootLocation;private URL determineDefaultPersistenceUnitRootUrl() {_		if (this.defaultPersistenceUnitRootLocation == null) {_			return null__		}_		try {_			Resource res = this.resourcePatternResolver.getResource(this.defaultPersistenceUnitRootLocation)__			return res.getURL()__		}_		catch (IOException ex) {_			throw new PersistenceException("Unable to resolve persistence unit root URL", ex)__		}_	};try,to,determine,the,persistence,unit,root,url,based,on,the,given,default,persistence,unit,root,location,return,the,persistence,unit,root,url,to,pass,to,the,jpa,persistence,provider,see,set,default,persistence,unit,root,location;private,url,determine,default,persistence,unit,root,url,if,this,default,persistence,unit,root,location,null,return,null,try,resource,res,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,return,res,get,url,catch,ioexception,ex,throw,new,persistence,exception,unable,to,resolve,persistence,unit,root,url,ex
DefaultPersistenceUnitManager -> private URL determineDefaultPersistenceUnitRootUrl();1375434510;Try to determine the persistence unit root URL based on the given_"defaultPersistenceUnitRootLocation"._@return the persistence unit root URL to pass to the JPA PersistenceProvider_@see #setDefaultPersistenceUnitRootLocation;private URL determineDefaultPersistenceUnitRootUrl() {_		if (this.defaultPersistenceUnitRootLocation == null) {_			return null__		}_		try {_			Resource res = this.resourcePatternResolver.getResource(this.defaultPersistenceUnitRootLocation)__			return res.getURL()__		}_		catch (IOException ex) {_			throw new PersistenceException("Unable to resolve persistence unit root URL", ex)__		}_	};try,to,determine,the,persistence,unit,root,url,based,on,the,given,default,persistence,unit,root,location,return,the,persistence,unit,root,url,to,pass,to,the,jpa,persistence,provider,see,set,default,persistence,unit,root,location;private,url,determine,default,persistence,unit,root,url,if,this,default,persistence,unit,root,location,null,return,null,try,resource,res,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,return,res,get,url,catch,ioexception,ex,throw,new,persistence,exception,unable,to,resolve,persistence,unit,root,url,ex
DefaultPersistenceUnitManager -> private URL determineDefaultPersistenceUnitRootUrl();1375458214;Try to determine the persistence unit root URL based on the given_"defaultPersistenceUnitRootLocation"._@return the persistence unit root URL to pass to the JPA PersistenceProvider_@see #setDefaultPersistenceUnitRootLocation;private URL determineDefaultPersistenceUnitRootUrl() {_		if (this.defaultPersistenceUnitRootLocation == null) {_			return null__		}_		try {_			Resource res = this.resourcePatternResolver.getResource(this.defaultPersistenceUnitRootLocation)__			return res.getURL()__		}_		catch (IOException ex) {_			throw new PersistenceException("Unable to resolve persistence unit root URL", ex)__		}_	};try,to,determine,the,persistence,unit,root,url,based,on,the,given,default,persistence,unit,root,location,return,the,persistence,unit,root,url,to,pass,to,the,jpa,persistence,provider,see,set,default,persistence,unit,root,location;private,url,determine,default,persistence,unit,root,url,if,this,default,persistence,unit,root,location,null,return,null,try,resource,res,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,return,res,get,url,catch,ioexception,ex,throw,new,persistence,exception,unable,to,resolve,persistence,unit,root,url,ex
DefaultPersistenceUnitManager -> private URL determineDefaultPersistenceUnitRootUrl();1389648334;Try to determine the persistence unit root URL based on the given_"defaultPersistenceUnitRootLocation"._@return the persistence unit root URL to pass to the JPA PersistenceProvider_@see #setDefaultPersistenceUnitRootLocation;private URL determineDefaultPersistenceUnitRootUrl() {_		if (this.defaultPersistenceUnitRootLocation == null) {_			return null__		}_		try {_			Resource res = this.resourcePatternResolver.getResource(this.defaultPersistenceUnitRootLocation)__			return res.getURL()__		}_		catch (IOException ex) {_			throw new PersistenceException("Unable to resolve persistence unit root URL", ex)__		}_	};try,to,determine,the,persistence,unit,root,url,based,on,the,given,default,persistence,unit,root,location,return,the,persistence,unit,root,url,to,pass,to,the,jpa,persistence,provider,see,set,default,persistence,unit,root,location;private,url,determine,default,persistence,unit,root,url,if,this,default,persistence,unit,root,location,null,return,null,try,resource,res,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,return,res,get,url,catch,ioexception,ex,throw,new,persistence,exception,unable,to,resolve,persistence,unit,root,url,ex
DefaultPersistenceUnitManager -> private URL determineDefaultPersistenceUnitRootUrl();1390250900;Try to determine the persistence unit root URL based on the given_"defaultPersistenceUnitRootLocation"._@return the persistence unit root URL to pass to the JPA PersistenceProvider_@see #setDefaultPersistenceUnitRootLocation;private URL determineDefaultPersistenceUnitRootUrl() {_		if (this.defaultPersistenceUnitRootLocation == null) {_			return null__		}_		try {_			Resource res = this.resourcePatternResolver.getResource(this.defaultPersistenceUnitRootLocation)__			return res.getURL()__		}_		catch (IOException ex) {_			throw new PersistenceException("Unable to resolve persistence unit root URL", ex)__		}_	};try,to,determine,the,persistence,unit,root,url,based,on,the,given,default,persistence,unit,root,location,return,the,persistence,unit,root,url,to,pass,to,the,jpa,persistence,provider,see,set,default,persistence,unit,root,location;private,url,determine,default,persistence,unit,root,url,if,this,default,persistence,unit,root,location,null,return,null,try,resource,res,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,return,res,get,url,catch,ioexception,ex,throw,new,persistence,exception,unable,to,resolve,persistence,unit,root,url,ex
DefaultPersistenceUnitManager -> private URL determineDefaultPersistenceUnitRootUrl();1390313076;Try to determine the persistence unit root URL based on the given_"defaultPersistenceUnitRootLocation"._@return the persistence unit root URL to pass to the JPA PersistenceProvider_@see #setDefaultPersistenceUnitRootLocation;private URL determineDefaultPersistenceUnitRootUrl() {_		if (this.defaultPersistenceUnitRootLocation == null) {_			return null__		}_		try {_			Resource res = this.resourcePatternResolver.getResource(this.defaultPersistenceUnitRootLocation)__			return res.getURL()__		}_		catch (IOException ex) {_			throw new PersistenceException("Unable to resolve persistence unit root URL", ex)__		}_	};try,to,determine,the,persistence,unit,root,url,based,on,the,given,default,persistence,unit,root,location,return,the,persistence,unit,root,url,to,pass,to,the,jpa,persistence,provider,see,set,default,persistence,unit,root,location;private,url,determine,default,persistence,unit,root,url,if,this,default,persistence,unit,root,location,null,return,null,try,resource,res,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,return,res,get,url,catch,ioexception,ex,throw,new,persistence,exception,unable,to,resolve,persistence,unit,root,url,ex
DefaultPersistenceUnitManager -> private URL determineDefaultPersistenceUnitRootUrl();1400140571;Try to determine the persistence unit root URL based on the given_"defaultPersistenceUnitRootLocation"._@return the persistence unit root URL to pass to the JPA PersistenceProvider_@see #setDefaultPersistenceUnitRootLocation;private URL determineDefaultPersistenceUnitRootUrl() {_		if (this.defaultPersistenceUnitRootLocation == null) {_			return null__		}_		try {_			Resource res = this.resourcePatternResolver.getResource(this.defaultPersistenceUnitRootLocation)__			return res.getURL()__		}_		catch (IOException ex) {_			throw new PersistenceException("Unable to resolve persistence unit root URL", ex)__		}_	};try,to,determine,the,persistence,unit,root,url,based,on,the,given,default,persistence,unit,root,location,return,the,persistence,unit,root,url,to,pass,to,the,jpa,persistence,provider,see,set,default,persistence,unit,root,location;private,url,determine,default,persistence,unit,root,url,if,this,default,persistence,unit,root,location,null,return,null,try,resource,res,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,return,res,get,url,catch,ioexception,ex,throw,new,persistence,exception,unable,to,resolve,persistence,unit,root,url,ex
DefaultPersistenceUnitManager -> private URL determineDefaultPersistenceUnitRootUrl();1403774750;Try to determine the persistence unit root URL based on the given_"defaultPersistenceUnitRootLocation"._@return the persistence unit root URL to pass to the JPA PersistenceProvider_@see #setDefaultPersistenceUnitRootLocation;private URL determineDefaultPersistenceUnitRootUrl() {_		if (this.defaultPersistenceUnitRootLocation == null) {_			return null__		}_		try {_			Resource res = this.resourcePatternResolver.getResource(this.defaultPersistenceUnitRootLocation)__			return res.getURL()__		}_		catch (IOException ex) {_			throw new PersistenceException("Unable to resolve persistence unit root URL", ex)__		}_	};try,to,determine,the,persistence,unit,root,url,based,on,the,given,default,persistence,unit,root,location,return,the,persistence,unit,root,url,to,pass,to,the,jpa,persistence,provider,see,set,default,persistence,unit,root,location;private,url,determine,default,persistence,unit,root,url,if,this,default,persistence,unit,root,location,null,return,null,try,resource,res,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,return,res,get,url,catch,ioexception,ex,throw,new,persistence,exception,unable,to,resolve,persistence,unit,root,url,ex
DefaultPersistenceUnitManager -> private URL determineDefaultPersistenceUnitRootUrl();1404056186;Try to determine the persistence unit root URL based on the given_"defaultPersistenceUnitRootLocation"._@return the persistence unit root URL to pass to the JPA PersistenceProvider_@see #setDefaultPersistenceUnitRootLocation;private URL determineDefaultPersistenceUnitRootUrl() {_		if (this.defaultPersistenceUnitRootLocation == null) {_			return null__		}_		try {_			Resource res = this.resourcePatternResolver.getResource(this.defaultPersistenceUnitRootLocation)__			return res.getURL()__		}_		catch (IOException ex) {_			throw new PersistenceException("Unable to resolve persistence unit root URL", ex)__		}_	};try,to,determine,the,persistence,unit,root,url,based,on,the,given,default,persistence,unit,root,location,return,the,persistence,unit,root,url,to,pass,to,the,jpa,persistence,provider,see,set,default,persistence,unit,root,location;private,url,determine,default,persistence,unit,root,url,if,this,default,persistence,unit,root,location,null,return,null,try,resource,res,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,return,res,get,url,catch,ioexception,ex,throw,new,persistence,exception,unable,to,resolve,persistence,unit,root,url,ex
DefaultPersistenceUnitManager -> private URL determineDefaultPersistenceUnitRootUrl();1447323728;Try to determine the persistence unit root URL based on the given_"defaultPersistenceUnitRootLocation"._@return the persistence unit root URL to pass to the JPA PersistenceProvider_@see #setDefaultPersistenceUnitRootLocation;private URL determineDefaultPersistenceUnitRootUrl() {_		if (this.defaultPersistenceUnitRootLocation == null) {_			return null__		}_		try {_			Resource res = this.resourcePatternResolver.getResource(this.defaultPersistenceUnitRootLocation)__			return res.getURL()__		}_		catch (IOException ex) {_			throw new PersistenceException("Unable to resolve persistence unit root URL", ex)__		}_	};try,to,determine,the,persistence,unit,root,url,based,on,the,given,default,persistence,unit,root,location,return,the,persistence,unit,root,url,to,pass,to,the,jpa,persistence,provider,see,set,default,persistence,unit,root,location;private,url,determine,default,persistence,unit,root,url,if,this,default,persistence,unit,root,location,null,return,null,try,resource,res,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,return,res,get,url,catch,ioexception,ex,throw,new,persistence,exception,unable,to,resolve,persistence,unit,root,url,ex
DefaultPersistenceUnitManager -> private URL determineDefaultPersistenceUnitRootUrl();1464299869;Try to determine the persistence unit root URL based on the given_"defaultPersistenceUnitRootLocation"._@return the persistence unit root URL to pass to the JPA PersistenceProvider_@see #setDefaultPersistenceUnitRootLocation;private URL determineDefaultPersistenceUnitRootUrl() {_		if (this.defaultPersistenceUnitRootLocation == null) {_			return null__		}_		try {_			Resource res = this.resourcePatternResolver.getResource(this.defaultPersistenceUnitRootLocation)__			return res.getURL()__		}_		catch (IOException ex) {_			throw new PersistenceException("Unable to resolve persistence unit root URL", ex)__		}_	};try,to,determine,the,persistence,unit,root,url,based,on,the,given,default,persistence,unit,root,location,return,the,persistence,unit,root,url,to,pass,to,the,jpa,persistence,provider,see,set,default,persistence,unit,root,location;private,url,determine,default,persistence,unit,root,url,if,this,default,persistence,unit,root,location,null,return,null,try,resource,res,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,return,res,get,url,catch,ioexception,ex,throw,new,persistence,exception,unable,to,resolve,persistence,unit,root,url,ex
DefaultPersistenceUnitManager -> private URL determineDefaultPersistenceUnitRootUrl();1467668243;Try to determine the persistence unit root URL based on the given_"defaultPersistenceUnitRootLocation"._@return the persistence unit root URL to pass to the JPA PersistenceProvider_@see #setDefaultPersistenceUnitRootLocation;private URL determineDefaultPersistenceUnitRootUrl() {_		if (this.defaultPersistenceUnitRootLocation == null) {_			return null__		}_		try {_			Resource res = this.resourcePatternResolver.getResource(this.defaultPersistenceUnitRootLocation)__			return res.getURL()__		}_		catch (IOException ex) {_			throw new PersistenceException("Unable to resolve persistence unit root URL", ex)__		}_	};try,to,determine,the,persistence,unit,root,url,based,on,the,given,default,persistence,unit,root,location,return,the,persistence,unit,root,url,to,pass,to,the,jpa,persistence,provider,see,set,default,persistence,unit,root,location;private,url,determine,default,persistence,unit,root,url,if,this,default,persistence,unit,root,location,null,return,null,try,resource,res,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,return,res,get,url,catch,ioexception,ex,throw,new,persistence,exception,unable,to,resolve,persistence,unit,root,url,ex
DefaultPersistenceUnitManager -> private URL determineDefaultPersistenceUnitRootUrl();1467730834;Try to determine the persistence unit root URL based on the given_"defaultPersistenceUnitRootLocation"._@return the persistence unit root URL to pass to the JPA PersistenceProvider_@see #setDefaultPersistenceUnitRootLocation;private URL determineDefaultPersistenceUnitRootUrl() {_		if (this.defaultPersistenceUnitRootLocation == null) {_			return null__		}_		try {_			Resource res = this.resourcePatternResolver.getResource(this.defaultPersistenceUnitRootLocation)__			return res.getURL()__		}_		catch (IOException ex) {_			throw new PersistenceException("Unable to resolve persistence unit root URL", ex)__		}_	};try,to,determine,the,persistence,unit,root,url,based,on,the,given,default,persistence,unit,root,location,return,the,persistence,unit,root,url,to,pass,to,the,jpa,persistence,provider,see,set,default,persistence,unit,root,location;private,url,determine,default,persistence,unit,root,url,if,this,default,persistence,unit,root,location,null,return,null,try,resource,res,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,return,res,get,url,catch,ioexception,ex,throw,new,persistence,exception,unable,to,resolve,persistence,unit,root,url,ex
DefaultPersistenceUnitManager -> private URL determineDefaultPersistenceUnitRootUrl();1471464767;Try to determine the persistence unit root URL based on the given_"defaultPersistenceUnitRootLocation"._@return the persistence unit root URL to pass to the JPA PersistenceProvider_@see #setDefaultPersistenceUnitRootLocation;private URL determineDefaultPersistenceUnitRootUrl() {_		if (this.defaultPersistenceUnitRootLocation == null) {_			return null__		}_		try {_			Resource res = this.resourcePatternResolver.getResource(this.defaultPersistenceUnitRootLocation)__			return res.getURL()__		}_		catch (IOException ex) {_			throw new PersistenceException("Unable to resolve persistence unit root URL", ex)__		}_	};try,to,determine,the,persistence,unit,root,url,based,on,the,given,default,persistence,unit,root,location,return,the,persistence,unit,root,url,to,pass,to,the,jpa,persistence,provider,see,set,default,persistence,unit,root,location;private,url,determine,default,persistence,unit,root,url,if,this,default,persistence,unit,root,location,null,return,null,try,resource,res,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,return,res,get,url,catch,ioexception,ex,throw,new,persistence,exception,unable,to,resolve,persistence,unit,root,url,ex
DefaultPersistenceUnitManager -> private URL determineDefaultPersistenceUnitRootUrl();1472736647;Try to determine the persistence unit root URL based on the given_"defaultPersistenceUnitRootLocation"._@return the persistence unit root URL to pass to the JPA PersistenceProvider_@see #setDefaultPersistenceUnitRootLocation;private URL determineDefaultPersistenceUnitRootUrl() {_		if (this.defaultPersistenceUnitRootLocation == null) {_			return null__		}_		try {_			Resource res = this.resourcePatternResolver.getResource(this.defaultPersistenceUnitRootLocation)__			return res.getURL()__		}_		catch (IOException ex) {_			throw new PersistenceException("Unable to resolve persistence unit root URL", ex)__		}_	};try,to,determine,the,persistence,unit,root,url,based,on,the,given,default,persistence,unit,root,location,return,the,persistence,unit,root,url,to,pass,to,the,jpa,persistence,provider,see,set,default,persistence,unit,root,location;private,url,determine,default,persistence,unit,root,url,if,this,default,persistence,unit,root,location,null,return,null,try,resource,res,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,return,res,get,url,catch,ioexception,ex,throw,new,persistence,exception,unable,to,resolve,persistence,unit,root,url,ex
DefaultPersistenceUnitManager -> private URL determineDefaultPersistenceUnitRootUrl();1474895745;Try to determine the persistence unit root URL based on the given_"defaultPersistenceUnitRootLocation"._@return the persistence unit root URL to pass to the JPA PersistenceProvider_@see #setDefaultPersistenceUnitRootLocation;private URL determineDefaultPersistenceUnitRootUrl() {_		if (this.defaultPersistenceUnitRootLocation == null) {_			return null__		}_		try {_			URL url = this.resourcePatternResolver.getResource(this.defaultPersistenceUnitRootLocation).getURL()__			return (ResourceUtils.isJarURL(url) ? ResourceUtils.extractJarFileURL(url) : url)__		}_		catch (IOException ex) {_			throw new PersistenceException("Unable to resolve persistence unit root URL", ex)__		}_	};try,to,determine,the,persistence,unit,root,url,based,on,the,given,default,persistence,unit,root,location,return,the,persistence,unit,root,url,to,pass,to,the,jpa,persistence,provider,see,set,default,persistence,unit,root,location;private,url,determine,default,persistence,unit,root,url,if,this,default,persistence,unit,root,location,null,return,null,try,url,url,this,resource,pattern,resolver,get,resource,this,default,persistence,unit,root,location,get,url,return,resource,utils,is,jar,url,url,resource,utils,extract,jar,file,url,url,url,catch,ioexception,ex,throw,new,persistence,exception,unable,to,resolve,persistence,unit,root,url,ex
DefaultPersistenceUnitManager -> private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1328020251;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		for (TypeFilter filter : entityTypeFilters) {_			if (filter.match(reader, readerFactory)) {_				return true__			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,for,type,filter,filter,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
DefaultPersistenceUnitManager -> private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1329142650;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		for (TypeFilter filter : entityTypeFilters) {_			if (filter.match(reader, readerFactory)) {_				return true__			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,for,type,filter,filter,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
DefaultPersistenceUnitManager -> private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1347282851;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		for (TypeFilter filter : entityTypeFilters) {_			if (filter.match(reader, readerFactory)) {_				return true__			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,for,type,filter,filter,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
DefaultPersistenceUnitManager -> private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1351648399;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		for (TypeFilter filter : entityTypeFilters) {_			if (filter.match(reader, readerFactory)) {_				return true__			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,for,type,filter,filter,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
DefaultPersistenceUnitManager -> private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1356735495;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		for (TypeFilter filter : entityTypeFilters) {_			if (filter.match(reader, readerFactory)) {_				return true__			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,for,type,filter,filter,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
DefaultPersistenceUnitManager -> private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1357119239;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		for (TypeFilter filter : entityTypeFilters) {_			if (filter.match(reader, readerFactory)) {_				return true__			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,for,type,filter,filter,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
DefaultPersistenceUnitManager -> private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1363714444;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		for (TypeFilter filter : entityTypeFilters) {_			if (filter.match(reader, readerFactory)) {_				return true__			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,for,type,filter,filter,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
DefaultPersistenceUnitManager -> private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1368482696;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		for (TypeFilter filter : entityTypeFilters) {_			if (filter.match(reader, readerFactory)) {_				return true__			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,for,type,filter,filter,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
DefaultPersistenceUnitManager -> private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1375434510;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		for (TypeFilter filter : entityTypeFilters) {_			if (filter.match(reader, readerFactory)) {_				return true__			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,for,type,filter,filter,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
DefaultPersistenceUnitManager -> private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1375458214;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		for (TypeFilter filter : entityTypeFilters) {_			if (filter.match(reader, readerFactory)) {_				return true__			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,for,type,filter,filter,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
DefaultPersistenceUnitManager -> private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1389648334;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		for (TypeFilter filter : entityTypeFilters) {_			if (filter.match(reader, readerFactory)) {_				return true__			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,for,type,filter,filter,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
DefaultPersistenceUnitManager -> private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1390250900;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		for (TypeFilter filter : entityTypeFilters) {_			if (filter.match(reader, readerFactory)) {_				return true__			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,for,type,filter,filter,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
DefaultPersistenceUnitManager -> private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1390313076;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		for (TypeFilter filter : entityTypeFilters) {_			if (filter.match(reader, readerFactory)) {_				return true__			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,for,type,filter,filter,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
DefaultPersistenceUnitManager -> private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1400140571;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		for (TypeFilter filter : entityTypeFilters) {_			if (filter.match(reader, readerFactory)) {_				return true__			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,for,type,filter,filter,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
DefaultPersistenceUnitManager -> private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1403774750;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		for (TypeFilter filter : entityTypeFilters) {_			if (filter.match(reader, readerFactory)) {_				return true__			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,for,type,filter,filter,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
DefaultPersistenceUnitManager -> private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1404056186;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		for (TypeFilter filter : entityTypeFilters) {_			if (filter.match(reader, readerFactory)) {_				return true__			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,for,type,filter,filter,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
DefaultPersistenceUnitManager -> private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1447323728;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		for (TypeFilter filter : entityTypeFilters) {_			if (filter.match(reader, readerFactory)) {_				return true__			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,for,type,filter,filter,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
DefaultPersistenceUnitManager -> private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1464299869;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		for (TypeFilter filter : entityTypeFilters) {_			if (filter.match(reader, readerFactory)) {_				return true__			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,for,type,filter,filter,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
DefaultPersistenceUnitManager -> private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1467668243;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		for (TypeFilter filter : entityTypeFilters) {_			if (filter.match(reader, readerFactory)) {_				return true__			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,for,type,filter,filter,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
DefaultPersistenceUnitManager -> private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1467730834;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		for (TypeFilter filter : entityTypeFilters) {_			if (filter.match(reader, readerFactory)) {_				return true__			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,for,type,filter,filter,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
DefaultPersistenceUnitManager -> private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1471464767;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		for (TypeFilter filter : entityTypeFilters) {_			if (filter.match(reader, readerFactory)) {_				return true__			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,for,type,filter,filter,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
DefaultPersistenceUnitManager -> private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1472736647;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		for (TypeFilter filter : entityTypeFilters) {_			if (filter.match(reader, readerFactory)) {_				return true__			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,for,type,filter,filter,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
DefaultPersistenceUnitManager -> private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1474895745;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		for (TypeFilter filter : entityTypeFilters) {_			if (filter.match(reader, readerFactory)) {_				return true__			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,for,type,filter,filter,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
DefaultPersistenceUnitManager -> private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1495868221;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		for (TypeFilter filter : entityTypeFilters) {_			if (filter.match(reader, readerFactory)) {_				return true__			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,for,type,filter,filter,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
DefaultPersistenceUnitManager -> private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1496259743;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		for (TypeFilter filter : entityTypeFilters) {_			if (filter.match(reader, readerFactory)) {_				return true__			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,for,type,filter,filter,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
DefaultPersistenceUnitManager -> private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1496837955;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		for (TypeFilter filter : entityTypeFilters) {_			if (filter.match(reader, readerFactory)) {_				return true__			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,for,type,filter,filter,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
DefaultPersistenceUnitManager -> private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1498780456;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		for (TypeFilter filter : entityTypeFilters) {_			if (filter.match(reader, readerFactory)) {_				return true__			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,for,type,filter,filter,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
DefaultPersistenceUnitManager -> private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1500448076;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		for (TypeFilter filter : entityTypeFilters) {_			if (filter.match(reader, readerFactory)) {_				return true__			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,for,type,filter,filter,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
DefaultPersistenceUnitManager -> private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1520528267;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		for (TypeFilter filter : entityTypeFilters) {_			if (filter.match(reader, readerFactory)) {_				return true__			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,for,type,filter,filter,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
DefaultPersistenceUnitManager -> private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1528313484;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		for (TypeFilter filter : entityTypeFilters) {_			if (filter.match(reader, readerFactory)) {_				return true__			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,for,type,filter,filter,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
DefaultPersistenceUnitManager -> private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1530174524;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		for (TypeFilter filter : entityTypeFilters) {_			if (filter.match(reader, readerFactory)) {_				return true__			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,for,type,filter,filter,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
DefaultPersistenceUnitManager -> private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1532091916;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		for (TypeFilter filter : entityTypeFilters) {_			if (filter.match(reader, readerFactory)) {_				return true__			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,for,type,filter,filter,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
DefaultPersistenceUnitManager -> public void setDefaultJtaDataSource(DataSource defaultJtaDataSource);1351648399;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in <code>persistence.xml</code>._This variant indicates that JTA is supposed to be used as transaction type._<p>In JPA speak, a DataSource passed in here will be uses as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource();public void setDefaultJtaDataSource(DataSource defaultJtaDataSource) {_		this.defaultJtaDataSource = defaultJtaDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,code,this,variant,indicates,that,jta,is,supposed,to,be,used,as,transaction,type,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source;public,void,set,default,jta,data,source,data,source,default,jta,data,source,this,default,jta,data,source,default,jta,data,source
DefaultPersistenceUnitManager -> public void setDefaultJtaDataSource(DataSource defaultJtaDataSource);1356735495;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates that JTA is supposed to be used as transaction type._<p>In JPA speak, a DataSource passed in here will be uses as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource();public void setDefaultJtaDataSource(DataSource defaultJtaDataSource) {_		this.defaultJtaDataSource = defaultJtaDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,that,jta,is,supposed,to,be,used,as,transaction,type,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source;public,void,set,default,jta,data,source,data,source,default,jta,data,source,this,default,jta,data,source,default,jta,data,source
DefaultPersistenceUnitManager -> public void setDefaultJtaDataSource(DataSource defaultJtaDataSource);1357119239;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates that JTA is supposed to be used as transaction type._<p>In JPA speak, a DataSource passed in here will be uses as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource();public void setDefaultJtaDataSource(DataSource defaultJtaDataSource) {_		this.defaultJtaDataSource = defaultJtaDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,that,jta,is,supposed,to,be,used,as,transaction,type,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source;public,void,set,default,jta,data,source,data,source,default,jta,data,source,this,default,jta,data,source,default,jta,data,source
DefaultPersistenceUnitManager -> public void setDefaultJtaDataSource(DataSource defaultJtaDataSource);1363714444;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates that JTA is supposed to be used as transaction type._<p>In JPA speak, a DataSource passed in here will be uses as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource();public void setDefaultJtaDataSource(DataSource defaultJtaDataSource) {_		this.defaultJtaDataSource = defaultJtaDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,that,jta,is,supposed,to,be,used,as,transaction,type,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source;public,void,set,default,jta,data,source,data,source,default,jta,data,source,this,default,jta,data,source,default,jta,data,source
DefaultPersistenceUnitManager -> public void setDefaultJtaDataSource(DataSource defaultJtaDataSource);1368482696;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates that JTA is supposed to be used as transaction type._<p>In JPA speak, a DataSource passed in here will be uses as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource();public void setDefaultJtaDataSource(DataSource defaultJtaDataSource) {_		this.defaultJtaDataSource = defaultJtaDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,that,jta,is,supposed,to,be,used,as,transaction,type,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source;public,void,set,default,jta,data,source,data,source,default,jta,data,source,this,default,jta,data,source,default,jta,data,source
DefaultPersistenceUnitManager -> public void setDefaultJtaDataSource(DataSource defaultJtaDataSource);1375434510;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates that JTA is supposed to be used as transaction type._<p>In JPA speak, a DataSource passed in here will be uses as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource();public void setDefaultJtaDataSource(DataSource defaultJtaDataSource) {_		this.defaultJtaDataSource = defaultJtaDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,that,jta,is,supposed,to,be,used,as,transaction,type,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source;public,void,set,default,jta,data,source,data,source,default,jta,data,source,this,default,jta,data,source,default,jta,data,source
DefaultPersistenceUnitManager -> public void setDefaultJtaDataSource(DataSource defaultJtaDataSource);1375458214;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates that JTA is supposed to be used as transaction type._<p>In JPA speak, a DataSource passed in here will be uses as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource();public void setDefaultJtaDataSource(DataSource defaultJtaDataSource) {_		this.defaultJtaDataSource = defaultJtaDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,that,jta,is,supposed,to,be,used,as,transaction,type,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source;public,void,set,default,jta,data,source,data,source,default,jta,data,source,this,default,jta,data,source,default,jta,data,source
DefaultPersistenceUnitManager -> public void setDefaultJtaDataSource(DataSource defaultJtaDataSource);1389648334;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates that JTA is supposed to be used as transaction type._<p>In JPA speak, a DataSource passed in here will be uses as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource();public void setDefaultJtaDataSource(DataSource defaultJtaDataSource) {_		this.defaultJtaDataSource = defaultJtaDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,that,jta,is,supposed,to,be,used,as,transaction,type,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source;public,void,set,default,jta,data,source,data,source,default,jta,data,source,this,default,jta,data,source,default,jta,data,source
DefaultPersistenceUnitManager -> public void setDefaultJtaDataSource(DataSource defaultJtaDataSource);1390250900;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates that JTA is supposed to be used as transaction type._<p>In JPA speak, a DataSource passed in here will be uses as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource();public void setDefaultJtaDataSource(DataSource defaultJtaDataSource) {_		this.defaultJtaDataSource = defaultJtaDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,that,jta,is,supposed,to,be,used,as,transaction,type,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source;public,void,set,default,jta,data,source,data,source,default,jta,data,source,this,default,jta,data,source,default,jta,data,source
DefaultPersistenceUnitManager -> public void setDefaultJtaDataSource(DataSource defaultJtaDataSource);1390313076;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates that JTA is supposed to be used as transaction type._<p>In JPA speak, a DataSource passed in here will be uses as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource();public void setDefaultJtaDataSource(DataSource defaultJtaDataSource) {_		this.defaultJtaDataSource = defaultJtaDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,that,jta,is,supposed,to,be,used,as,transaction,type,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source;public,void,set,default,jta,data,source,data,source,default,jta,data,source,this,default,jta,data,source,default,jta,data,source
DefaultPersistenceUnitManager -> public void setDefaultJtaDataSource(DataSource defaultJtaDataSource);1400140571;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates that JTA is supposed to be used as transaction type._<p>In JPA speak, a DataSource passed in here will be uses as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource();public void setDefaultJtaDataSource(DataSource defaultJtaDataSource) {_		this.defaultJtaDataSource = defaultJtaDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,that,jta,is,supposed,to,be,used,as,transaction,type,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source;public,void,set,default,jta,data,source,data,source,default,jta,data,source,this,default,jta,data,source,default,jta,data,source
DefaultPersistenceUnitManager -> public void setDefaultJtaDataSource(DataSource defaultJtaDataSource);1403774750;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates that JTA is supposed to be used as transaction type._<p>In JPA speak, a DataSource passed in here will be uses as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource();public void setDefaultJtaDataSource(DataSource defaultJtaDataSource) {_		this.defaultJtaDataSource = defaultJtaDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,that,jta,is,supposed,to,be,used,as,transaction,type,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source;public,void,set,default,jta,data,source,data,source,default,jta,data,source,this,default,jta,data,source,default,jta,data,source
DefaultPersistenceUnitManager -> public void setDefaultJtaDataSource(DataSource defaultJtaDataSource);1404056186;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates that JTA is supposed to be used as transaction type._<p>In JPA speak, a DataSource passed in here will be uses as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource();public void setDefaultJtaDataSource(DataSource defaultJtaDataSource) {_		this.defaultJtaDataSource = defaultJtaDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,that,jta,is,supposed,to,be,used,as,transaction,type,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source;public,void,set,default,jta,data,source,data,source,default,jta,data,source,this,default,jta,data,source,default,jta,data,source
DefaultPersistenceUnitManager -> public void setDefaultJtaDataSource(DataSource defaultJtaDataSource);1447323728;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates that JTA is supposed to be used as transaction type._<p>In JPA speak, a DataSource passed in here will be uses as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource();public void setDefaultJtaDataSource(DataSource defaultJtaDataSource) {_		this.defaultJtaDataSource = defaultJtaDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,that,jta,is,supposed,to,be,used,as,transaction,type,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source;public,void,set,default,jta,data,source,data,source,default,jta,data,source,this,default,jta,data,source,default,jta,data,source
DefaultPersistenceUnitManager -> public void setDefaultJtaDataSource(DataSource defaultJtaDataSource);1464299869;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates that JTA is supposed to be used as transaction type._<p>In JPA speak, a DataSource passed in here will be uses as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource();public void setDefaultJtaDataSource(DataSource defaultJtaDataSource) {_		this.defaultJtaDataSource = defaultJtaDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,that,jta,is,supposed,to,be,used,as,transaction,type,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source;public,void,set,default,jta,data,source,data,source,default,jta,data,source,this,default,jta,data,source,default,jta,data,source
DefaultPersistenceUnitManager -> public void setDefaultJtaDataSource(DataSource defaultJtaDataSource);1467668243;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates that JTA is supposed to be used as transaction type._<p>In JPA speak, a DataSource passed in here will be uses as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource();public void setDefaultJtaDataSource(DataSource defaultJtaDataSource) {_		this.defaultJtaDataSource = defaultJtaDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,that,jta,is,supposed,to,be,used,as,transaction,type,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source;public,void,set,default,jta,data,source,data,source,default,jta,data,source,this,default,jta,data,source,default,jta,data,source
DefaultPersistenceUnitManager -> public void setDefaultJtaDataSource(DataSource defaultJtaDataSource);1467730834;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates that JTA is supposed to be used as transaction type._<p>In JPA speak, a DataSource passed in here will be uses as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource();public void setDefaultJtaDataSource(DataSource defaultJtaDataSource) {_		this.defaultJtaDataSource = defaultJtaDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,that,jta,is,supposed,to,be,used,as,transaction,type,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source;public,void,set,default,jta,data,source,data,source,default,jta,data,source,this,default,jta,data,source,default,jta,data,source
DefaultPersistenceUnitManager -> public void setDefaultJtaDataSource(DataSource defaultJtaDataSource);1471464767;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates that JTA is supposed to be used as transaction type._<p>In JPA speak, a DataSource passed in here will be uses as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource();public void setDefaultJtaDataSource(DataSource defaultJtaDataSource) {_		this.defaultJtaDataSource = defaultJtaDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,that,jta,is,supposed,to,be,used,as,transaction,type,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source;public,void,set,default,jta,data,source,data,source,default,jta,data,source,this,default,jta,data,source,default,jta,data,source
DefaultPersistenceUnitManager -> public void setDefaultJtaDataSource(DataSource defaultJtaDataSource);1472736647;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates that JTA is supposed to be used as transaction type._<p>In JPA speak, a DataSource passed in here will be uses as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource();public void setDefaultJtaDataSource(DataSource defaultJtaDataSource) {_		this.defaultJtaDataSource = defaultJtaDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,that,jta,is,supposed,to,be,used,as,transaction,type,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source;public,void,set,default,jta,data,source,data,source,default,jta,data,source,this,default,jta,data,source,default,jta,data,source
DefaultPersistenceUnitManager -> public void setDefaultJtaDataSource(DataSource defaultJtaDataSource);1474895745;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates that JTA is supposed to be used as transaction type._<p>In JPA speak, a DataSource passed in here will be uses as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource();public void setDefaultJtaDataSource(DataSource defaultJtaDataSource) {_		this.defaultJtaDataSource = defaultJtaDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,that,jta,is,supposed,to,be,used,as,transaction,type,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source;public,void,set,default,jta,data,source,data,source,default,jta,data,source,this,default,jta,data,source,default,jta,data,source
DefaultPersistenceUnitManager -> public void setDefaultJtaDataSource(DataSource defaultJtaDataSource);1495868221;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates that JTA is supposed to be used as transaction type._<p>In JPA speak, a DataSource passed in here will be uses as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource();public void setDefaultJtaDataSource(DataSource defaultJtaDataSource) {_		this.defaultJtaDataSource = defaultJtaDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,that,jta,is,supposed,to,be,used,as,transaction,type,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source;public,void,set,default,jta,data,source,data,source,default,jta,data,source,this,default,jta,data,source,default,jta,data,source
DefaultPersistenceUnitManager -> public void setDefaultJtaDataSource(DataSource defaultJtaDataSource);1496259743;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates that JTA is supposed to be used as transaction type._<p>In JPA speak, a DataSource passed in here will be uses as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource();public void setDefaultJtaDataSource(DataSource defaultJtaDataSource) {_		this.defaultJtaDataSource = defaultJtaDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,that,jta,is,supposed,to,be,used,as,transaction,type,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source;public,void,set,default,jta,data,source,data,source,default,jta,data,source,this,default,jta,data,source,default,jta,data,source
DefaultPersistenceUnitManager -> public void setDefaultJtaDataSource(DataSource defaultJtaDataSource);1496837955;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates that JTA is supposed to be used as transaction type._<p>In JPA speak, a DataSource passed in here will be uses as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource();public void setDefaultJtaDataSource(DataSource defaultJtaDataSource) {_		this.defaultJtaDataSource = defaultJtaDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,that,jta,is,supposed,to,be,used,as,transaction,type,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source;public,void,set,default,jta,data,source,data,source,default,jta,data,source,this,default,jta,data,source,default,jta,data,source
DefaultPersistenceUnitManager -> public void setDefaultJtaDataSource(DataSource defaultJtaDataSource);1498780456;Specify the JDBC DataSource that the JPA persistence provider is supposed to use_for accessing the database if none has been specified in {@code persistence.xml}._This variant indicates that JTA is supposed to be used as transaction type._<p>In JPA speak, a DataSource passed in here will be uses as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, provided that_none has been registered before._@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource();public void setDefaultJtaDataSource(DataSource defaultJtaDataSource) {_		this.defaultJtaDataSource = defaultJtaDataSource__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,if,none,has,been,specified,in,code,persistence,xml,this,variant,indicates,that,jta,is,supposed,to,be,used,as,transaction,type,p,in,jpa,speak,a,data,source,passed,in,here,will,be,uses,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,provided,that,none,has,been,registered,before,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source;public,void,set,default,jta,data,source,data,source,default,jta,data,source,this,default,jta,data,source,default,jta,data,source
