# id;timestamp;commentText;codeText;commentWords;codeWords
HibernateJpaDialect -> public void setJdbcExceptionTranslator(SQLExceptionTranslator jdbcExceptionTranslator);1531144356;Set the JDBC exception translator for Hibernate exception translation purposes._<p>Applied to any detected {@link java.sql.SQLException} root cause of a Hibernate_{@link JDBCException}, overriding Hibernate's own {@code SQLException} translation_(which is based on a Hibernate Dialect for a specific target database)._@since 5.1_@see java.sql.SQLException_@see org.hibernate.JDBCException_@see org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator_@see org.springframework.jdbc.support.SQLStateSQLExceptionTranslator;public void setJdbcExceptionTranslator(SQLExceptionTranslator jdbcExceptionTranslator) {_		this.jdbcExceptionTranslator = jdbcExceptionTranslator__	};set,the,jdbc,exception,translator,for,hibernate,exception,translation,purposes,p,applied,to,any,detected,link,java,sql,sqlexception,root,cause,of,a,hibernate,link,jdbcexception,overriding,hibernate,s,own,code,sqlexception,translation,which,is,based,on,a,hibernate,dialect,for,a,specific,target,database,since,5,1,see,java,sql,sqlexception,see,org,hibernate,jdbcexception,see,org,springframework,jdbc,support,sqlerror,code,sqlexception,translator,see,org,springframework,jdbc,support,sqlstate,sqlexception,translator;public,void,set,jdbc,exception,translator,sqlexception,translator,jdbc,exception,translator,this,jdbc,exception,translator,jdbc,exception,translator
HibernateJpaDialect -> public void setJdbcExceptionTranslator(SQLExceptionTranslator jdbcExceptionTranslator);1535712004;Set the JDBC exception translator for Hibernate exception translation purposes._<p>Applied to any detected {@link java.sql.SQLException} root cause of a Hibernate_{@link JDBCException}, overriding Hibernate's own {@code SQLException} translation_(which is based on a Hibernate Dialect for a specific target database)._@since 5.1_@see java.sql.SQLException_@see org.hibernate.JDBCException_@see org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator_@see org.springframework.jdbc.support.SQLStateSQLExceptionTranslator;public void setJdbcExceptionTranslator(SQLExceptionTranslator jdbcExceptionTranslator) {_		this.jdbcExceptionTranslator = jdbcExceptionTranslator__	};set,the,jdbc,exception,translator,for,hibernate,exception,translation,purposes,p,applied,to,any,detected,link,java,sql,sqlexception,root,cause,of,a,hibernate,link,jdbcexception,overriding,hibernate,s,own,code,sqlexception,translation,which,is,based,on,a,hibernate,dialect,for,a,specific,target,database,since,5,1,see,java,sql,sqlexception,see,org,hibernate,jdbcexception,see,org,springframework,jdbc,support,sqlerror,code,sqlexception,translator,see,org,springframework,jdbc,support,sqlstate,sqlexception,translator;public,void,set,jdbc,exception,translator,sqlexception,translator,jdbc,exception,translator,this,jdbc,exception,translator,jdbc,exception,translator
HibernateJpaDialect -> public void setPrepareConnection(boolean prepareConnection);1407596982;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>Default is "true" on Hibernate EntityManager 4.x (with its 'on-close'_connection release mode, and "false" on Hibernate EntityManager 3.6 (due to_the 'after-transaction' release mode there). <b>Note that Hibernate 4.2+ is_strongly recommended in order to make isolation levels work efficiently.</b>_<p>If you turn this flag off, JPA transaction management will not support_per-transaction isolation levels anymore. It will not call_{@code Connection.setReadOnly(true)} for read-only transactions anymore either._If this flag is turned off, no cleanup of a JDBC Connection is required after_a transaction, since no Connection settings will get modified._@see java.sql.Connection#setTransactionIsolation_@see java.sql.Connection#setReadOnly;public void setPrepareConnection(boolean prepareConnection) {_		this.prepareConnection = prepareConnection__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,default,is,true,on,hibernate,entity,manager,4,x,with,its,on,close,connection,release,mode,and,false,on,hibernate,entity,manager,3,6,due,to,the,after,transaction,release,mode,there,b,note,that,hibernate,4,2,is,strongly,recommended,in,order,to,make,isolation,levels,work,efficiently,b,p,if,you,turn,this,flag,off,jpa,transaction,management,will,not,support,per,transaction,isolation,levels,anymore,it,will,not,call,code,connection,set,read,only,true,for,read,only,transactions,anymore,either,if,this,flag,is,turned,off,no,cleanup,of,a,jdbc,connection,is,required,after,a,transaction,since,no,connection,settings,will,get,modified,see,java,sql,connection,set,transaction,isolation,see,java,sql,connection,set,read,only;public,void,set,prepare,connection,boolean,prepare,connection,this,prepare,connection,prepare,connection
HibernateJpaDialect -> public void setPrepareConnection(boolean prepareConnection);1409586468;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>Default is "true" on Hibernate EntityManager 4.x (with its 'on-close'_connection release mode, and "false" on Hibernate EntityManager 3.6 (due to_the 'after-transaction' release mode there). <b>Note that Hibernate 4.2+ is_strongly recommended in order to make isolation levels work efficiently.</b>_<p>If you turn this flag off, JPA transaction management will not support_per-transaction isolation levels anymore. It will not call_{@code Connection.setReadOnly(true)} for read-only transactions anymore either._If this flag is turned off, no cleanup of a JDBC Connection is required after_a transaction, since no Connection settings will get modified._@see java.sql.Connection#setTransactionIsolation_@see java.sql.Connection#setReadOnly;public void setPrepareConnection(boolean prepareConnection) {_		this.prepareConnection = prepareConnection__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,default,is,true,on,hibernate,entity,manager,4,x,with,its,on,close,connection,release,mode,and,false,on,hibernate,entity,manager,3,6,due,to,the,after,transaction,release,mode,there,b,note,that,hibernate,4,2,is,strongly,recommended,in,order,to,make,isolation,levels,work,efficiently,b,p,if,you,turn,this,flag,off,jpa,transaction,management,will,not,support,per,transaction,isolation,levels,anymore,it,will,not,call,code,connection,set,read,only,true,for,read,only,transactions,anymore,either,if,this,flag,is,turned,off,no,cleanup,of,a,jdbc,connection,is,required,after,a,transaction,since,no,connection,settings,will,get,modified,see,java,sql,connection,set,transaction,isolation,see,java,sql,connection,set,read,only;public,void,set,prepare,connection,boolean,prepare,connection,this,prepare,connection,prepare,connection
HibernateJpaDialect -> public void setPrepareConnection(boolean prepareConnection);1413910143;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>Default is "true" on Hibernate EntityManager 4.x (with its 'on-close'_connection release mode, and "false" on Hibernate EntityManager 3.6 (due to_the 'after-transaction' release mode there). <b>Note that Hibernate 4.2+ is_strongly recommended in order to make isolation levels work efficiently.</b>_<p>If you turn this flag off, JPA transaction management will not support_per-transaction isolation levels anymore. It will not call_{@code Connection.setReadOnly(true)} for read-only transactions anymore either._If this flag is turned off, no cleanup of a JDBC Connection is required after_a transaction, since no Connection settings will get modified._@see java.sql.Connection#setTransactionIsolation_@see java.sql.Connection#setReadOnly;public void setPrepareConnection(boolean prepareConnection) {_		this.prepareConnection = prepareConnection__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,default,is,true,on,hibernate,entity,manager,4,x,with,its,on,close,connection,release,mode,and,false,on,hibernate,entity,manager,3,6,due,to,the,after,transaction,release,mode,there,b,note,that,hibernate,4,2,is,strongly,recommended,in,order,to,make,isolation,levels,work,efficiently,b,p,if,you,turn,this,flag,off,jpa,transaction,management,will,not,support,per,transaction,isolation,levels,anymore,it,will,not,call,code,connection,set,read,only,true,for,read,only,transactions,anymore,either,if,this,flag,is,turned,off,no,cleanup,of,a,jdbc,connection,is,required,after,a,transaction,since,no,connection,settings,will,get,modified,see,java,sql,connection,set,transaction,isolation,see,java,sql,connection,set,read,only;public,void,set,prepare,connection,boolean,prepare,connection,this,prepare,connection,prepare,connection
HibernateJpaDialect -> public void setPrepareConnection(boolean prepareConnection);1426108178;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>Default is "true" on Hibernate EntityManager 4.x (with its 'on-close'_connection release mode, and "false" on Hibernate EntityManager 3.6 (due to_the 'after-transaction' release mode there). <b>Note that Hibernate 4.2+ is_strongly recommended in order to make isolation levels work efficiently.</b>_<p>If you turn this flag off, JPA transaction management will not support_per-transaction isolation levels anymore. It will not call_{@code Connection.setReadOnly(true)} for read-only transactions anymore either._If this flag is turned off, no cleanup of a JDBC Connection is required after_a transaction, since no Connection settings will get modified._<p><b>NOTE:</b> The default behavior in terms of read-only handling changed_in Spring 4.1, propagating the read-only status to the JDBC Connection now,_analogous to other Spring transaction managers. This may have the effect_that you're running into read-only enforcement now where previously write_access has accidentally been tolerated: Please revise your transaction_declarations accordingly, removing invalid read-only markers if necessary._@since 4.1_@see java.sql.Connection#setTransactionIsolation_@see java.sql.Connection#setReadOnly;public void setPrepareConnection(boolean prepareConnection) {_		this.prepareConnection = prepareConnection__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,default,is,true,on,hibernate,entity,manager,4,x,with,its,on,close,connection,release,mode,and,false,on,hibernate,entity,manager,3,6,due,to,the,after,transaction,release,mode,there,b,note,that,hibernate,4,2,is,strongly,recommended,in,order,to,make,isolation,levels,work,efficiently,b,p,if,you,turn,this,flag,off,jpa,transaction,management,will,not,support,per,transaction,isolation,levels,anymore,it,will,not,call,code,connection,set,read,only,true,for,read,only,transactions,anymore,either,if,this,flag,is,turned,off,no,cleanup,of,a,jdbc,connection,is,required,after,a,transaction,since,no,connection,settings,will,get,modified,p,b,note,b,the,default,behavior,in,terms,of,read,only,handling,changed,in,spring,4,1,propagating,the,read,only,status,to,the,jdbc,connection,now,analogous,to,other,spring,transaction,managers,this,may,have,the,effect,that,you,re,running,into,read,only,enforcement,now,where,previously,write,access,has,accidentally,been,tolerated,please,revise,your,transaction,declarations,accordingly,removing,invalid,read,only,markers,if,necessary,since,4,1,see,java,sql,connection,set,transaction,isolation,see,java,sql,connection,set,read,only;public,void,set,prepare,connection,boolean,prepare,connection,this,prepare,connection,prepare,connection
HibernateJpaDialect -> public void setPrepareConnection(boolean prepareConnection);1437514747;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>Default is "true" on Hibernate EntityManager 4.x (with its 'on-close'_connection release mode, and "false" on Hibernate EntityManager 3.6 (due to_the 'after-transaction' release mode there). <b>Note that Hibernate 4.2+ is_strongly recommended in order to make isolation levels work efficiently.</b>_<p>If you turn this flag off, JPA transaction management will not support_per-transaction isolation levels anymore. It will not call_{@code Connection.setReadOnly(true)} for read-only transactions anymore either._If this flag is turned off, no cleanup of a JDBC Connection is required after_a transaction, since no Connection settings will get modified._<p><b>NOTE:</b> The default behavior in terms of read-only handling changed_in Spring 4.1, propagating the read-only status to the JDBC Connection now,_analogous to other Spring transaction managers. This may have the effect_that you're running into read-only enforcement now where previously write_access has accidentally been tolerated: Please revise your transaction_declarations accordingly, removing invalid read-only markers if necessary._@since 4.1_@see java.sql.Connection#setTransactionIsolation_@see java.sql.Connection#setReadOnly;public void setPrepareConnection(boolean prepareConnection) {_		this.prepareConnection = prepareConnection__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,default,is,true,on,hibernate,entity,manager,4,x,with,its,on,close,connection,release,mode,and,false,on,hibernate,entity,manager,3,6,due,to,the,after,transaction,release,mode,there,b,note,that,hibernate,4,2,is,strongly,recommended,in,order,to,make,isolation,levels,work,efficiently,b,p,if,you,turn,this,flag,off,jpa,transaction,management,will,not,support,per,transaction,isolation,levels,anymore,it,will,not,call,code,connection,set,read,only,true,for,read,only,transactions,anymore,either,if,this,flag,is,turned,off,no,cleanup,of,a,jdbc,connection,is,required,after,a,transaction,since,no,connection,settings,will,get,modified,p,b,note,b,the,default,behavior,in,terms,of,read,only,handling,changed,in,spring,4,1,propagating,the,read,only,status,to,the,jdbc,connection,now,analogous,to,other,spring,transaction,managers,this,may,have,the,effect,that,you,re,running,into,read,only,enforcement,now,where,previously,write,access,has,accidentally,been,tolerated,please,revise,your,transaction,declarations,accordingly,removing,invalid,read,only,markers,if,necessary,since,4,1,see,java,sql,connection,set,transaction,isolation,see,java,sql,connection,set,read,only;public,void,set,prepare,connection,boolean,prepare,connection,this,prepare,connection,prepare,connection
HibernateJpaDialect -> public void setPrepareConnection(boolean prepareConnection);1440686501;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>Default is "true" on Hibernate EntityManager 4.x (with its 'on-close'_connection release mode, and "false" on Hibernate EntityManager 3.6 (due to_the 'after-transaction' release mode there). <b>Note that Hibernate 4.2+ is_strongly recommended in order to make isolation levels work efficiently.</b>_<p>If you turn this flag off, JPA transaction management will not support_per-transaction isolation levels anymore. It will not call_{@code Connection.setReadOnly(true)} for read-only transactions anymore either._If this flag is turned off, no cleanup of a JDBC Connection is required after_a transaction, since no Connection settings will get modified._<p><b>NOTE:</b> The default behavior in terms of read-only handling changed_in Spring 4.1, propagating the read-only status to the JDBC Connection now,_analogous to other Spring transaction managers. This may have the effect_that you're running into read-only enforcement now where previously write_access has accidentally been tolerated: Please revise your transaction_declarations accordingly, removing invalid read-only markers if necessary._@since 4.1_@see java.sql.Connection#setTransactionIsolation_@see java.sql.Connection#setReadOnly;public void setPrepareConnection(boolean prepareConnection) {_		this.prepareConnection = prepareConnection__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,default,is,true,on,hibernate,entity,manager,4,x,with,its,on,close,connection,release,mode,and,false,on,hibernate,entity,manager,3,6,due,to,the,after,transaction,release,mode,there,b,note,that,hibernate,4,2,is,strongly,recommended,in,order,to,make,isolation,levels,work,efficiently,b,p,if,you,turn,this,flag,off,jpa,transaction,management,will,not,support,per,transaction,isolation,levels,anymore,it,will,not,call,code,connection,set,read,only,true,for,read,only,transactions,anymore,either,if,this,flag,is,turned,off,no,cleanup,of,a,jdbc,connection,is,required,after,a,transaction,since,no,connection,settings,will,get,modified,p,b,note,b,the,default,behavior,in,terms,of,read,only,handling,changed,in,spring,4,1,propagating,the,read,only,status,to,the,jdbc,connection,now,analogous,to,other,spring,transaction,managers,this,may,have,the,effect,that,you,re,running,into,read,only,enforcement,now,where,previously,write,access,has,accidentally,been,tolerated,please,revise,your,transaction,declarations,accordingly,removing,invalid,read,only,markers,if,necessary,since,4,1,see,java,sql,connection,set,transaction,isolation,see,java,sql,connection,set,read,only;public,void,set,prepare,connection,boolean,prepare,connection,this,prepare,connection,prepare,connection
HibernateJpaDialect -> public void setPrepareConnection(boolean prepareConnection);1444241178;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>Default is "true" on Hibernate EntityManager 4.x (with its 'on-close'_connection release mode, and "false" on Hibernate EntityManager 3.6 (due to_the 'after-transaction' release mode there). <b>Note that Hibernate 4.2+ is_strongly recommended in order to make isolation levels work efficiently.</b>_<p>If you turn this flag off, JPA transaction management will not support_per-transaction isolation levels anymore. It will not call_{@code Connection.setReadOnly(true)} for read-only transactions anymore either._If this flag is turned off, no cleanup of a JDBC Connection is required after_a transaction, since no Connection settings will get modified._<p><b>NOTE:</b> The default behavior in terms of read-only handling changed_in Spring 4.1, propagating the read-only status to the JDBC Connection now,_analogous to other Spring transaction managers. This may have the effect_that you're running into read-only enforcement now where previously write_access has accidentally been tolerated: Please revise your transaction_declarations accordingly, removing invalid read-only markers if necessary._@since 4.1_@see java.sql.Connection#setTransactionIsolation_@see java.sql.Connection#setReadOnly;public void setPrepareConnection(boolean prepareConnection) {_		this.prepareConnection = prepareConnection__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,default,is,true,on,hibernate,entity,manager,4,x,with,its,on,close,connection,release,mode,and,false,on,hibernate,entity,manager,3,6,due,to,the,after,transaction,release,mode,there,b,note,that,hibernate,4,2,is,strongly,recommended,in,order,to,make,isolation,levels,work,efficiently,b,p,if,you,turn,this,flag,off,jpa,transaction,management,will,not,support,per,transaction,isolation,levels,anymore,it,will,not,call,code,connection,set,read,only,true,for,read,only,transactions,anymore,either,if,this,flag,is,turned,off,no,cleanup,of,a,jdbc,connection,is,required,after,a,transaction,since,no,connection,settings,will,get,modified,p,b,note,b,the,default,behavior,in,terms,of,read,only,handling,changed,in,spring,4,1,propagating,the,read,only,status,to,the,jdbc,connection,now,analogous,to,other,spring,transaction,managers,this,may,have,the,effect,that,you,re,running,into,read,only,enforcement,now,where,previously,write,access,has,accidentally,been,tolerated,please,revise,your,transaction,declarations,accordingly,removing,invalid,read,only,markers,if,necessary,since,4,1,see,java,sql,connection,set,transaction,isolation,see,java,sql,connection,set,read,only;public,void,set,prepare,connection,boolean,prepare,connection,this,prepare,connection,prepare,connection
HibernateJpaDialect -> public void setPrepareConnection(boolean prepareConnection);1464903331;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>Default is "true" on Hibernate EntityManager 4.x (with its 'on-close'_connection release mode, and "false" on Hibernate EntityManager 3.6 (due to_the 'after-transaction' release mode there). <b>Note that Hibernate 4.2+ is_strongly recommended in order to make isolation levels work efficiently.</b>_<p>If you turn this flag off, JPA transaction management will not support_per-transaction isolation levels anymore. It will not call_{@code Connection.setReadOnly(true)} for read-only transactions anymore either._If this flag is turned off, no cleanup of a JDBC Connection is required after_a transaction, since no Connection settings will get modified._<p><b>NOTE:</b> The default behavior in terms of read-only handling changed_in Spring 4.1, propagating the read-only status to the JDBC Connection now,_analogous to other Spring transaction managers. This may have the effect_that you're running into read-only enforcement now where previously write_access has accidentally been tolerated: Please revise your transaction_declarations accordingly, removing invalid read-only markers if necessary._@since 4.1_@see java.sql.Connection#setTransactionIsolation_@see java.sql.Connection#setReadOnly;public void setPrepareConnection(boolean prepareConnection) {_		this.prepareConnection = prepareConnection__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,default,is,true,on,hibernate,entity,manager,4,x,with,its,on,close,connection,release,mode,and,false,on,hibernate,entity,manager,3,6,due,to,the,after,transaction,release,mode,there,b,note,that,hibernate,4,2,is,strongly,recommended,in,order,to,make,isolation,levels,work,efficiently,b,p,if,you,turn,this,flag,off,jpa,transaction,management,will,not,support,per,transaction,isolation,levels,anymore,it,will,not,call,code,connection,set,read,only,true,for,read,only,transactions,anymore,either,if,this,flag,is,turned,off,no,cleanup,of,a,jdbc,connection,is,required,after,a,transaction,since,no,connection,settings,will,get,modified,p,b,note,b,the,default,behavior,in,terms,of,read,only,handling,changed,in,spring,4,1,propagating,the,read,only,status,to,the,jdbc,connection,now,analogous,to,other,spring,transaction,managers,this,may,have,the,effect,that,you,re,running,into,read,only,enforcement,now,where,previously,write,access,has,accidentally,been,tolerated,please,revise,your,transaction,declarations,accordingly,removing,invalid,read,only,markers,if,necessary,since,4,1,see,java,sql,connection,set,transaction,isolation,see,java,sql,connection,set,read,only;public,void,set,prepare,connection,boolean,prepare,connection,this,prepare,connection,prepare,connection
HibernateJpaDialect -> public void setPrepareConnection(boolean prepareConnection);1466699049;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>Default is "true" on Hibernate EntityManager 4.x (with its 'on-close'_connection release mode, and "false" on Hibernate EntityManager 3.6 (due to_the 'after-transaction' release mode there). <b>Note that Hibernate 4.2+ is_strongly recommended in order to make isolation levels work efficiently.</b>_<p>If you turn this flag off, JPA transaction management will not support_per-transaction isolation levels anymore. It will not call_{@code Connection.setReadOnly(true)} for read-only transactions anymore either._If this flag is turned off, no cleanup of a JDBC Connection is required after_a transaction, since no Connection settings will get modified._<p><b>NOTE:</b> The default behavior in terms of read-only handling changed_in Spring 4.1, propagating the read-only status to the JDBC Connection now,_analogous to other Spring transaction managers. This may have the effect_that you're running into read-only enforcement now where previously write_access has accidentally been tolerated: Please revise your transaction_declarations accordingly, removing invalid read-only markers if necessary._@since 4.1_@see java.sql.Connection#setTransactionIsolation_@see java.sql.Connection#setReadOnly;public void setPrepareConnection(boolean prepareConnection) {_		this.prepareConnection = prepareConnection__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,default,is,true,on,hibernate,entity,manager,4,x,with,its,on,close,connection,release,mode,and,false,on,hibernate,entity,manager,3,6,due,to,the,after,transaction,release,mode,there,b,note,that,hibernate,4,2,is,strongly,recommended,in,order,to,make,isolation,levels,work,efficiently,b,p,if,you,turn,this,flag,off,jpa,transaction,management,will,not,support,per,transaction,isolation,levels,anymore,it,will,not,call,code,connection,set,read,only,true,for,read,only,transactions,anymore,either,if,this,flag,is,turned,off,no,cleanup,of,a,jdbc,connection,is,required,after,a,transaction,since,no,connection,settings,will,get,modified,p,b,note,b,the,default,behavior,in,terms,of,read,only,handling,changed,in,spring,4,1,propagating,the,read,only,status,to,the,jdbc,connection,now,analogous,to,other,spring,transaction,managers,this,may,have,the,effect,that,you,re,running,into,read,only,enforcement,now,where,previously,write,access,has,accidentally,been,tolerated,please,revise,your,transaction,declarations,accordingly,removing,invalid,read,only,markers,if,necessary,since,4,1,see,java,sql,connection,set,transaction,isolation,see,java,sql,connection,set,read,only;public,void,set,prepare,connection,boolean,prepare,connection,this,prepare,connection,prepare,connection
HibernateJpaDialect -> public void setPrepareConnection(boolean prepareConnection);1466764651;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>Default is "true" on Hibernate EntityManager 4.x (with its 'on-close'_connection release mode, and "false" on Hibernate EntityManager 3.6 (due to_the 'after-transaction' release mode there). <b>Note that Hibernate 4.2+ is_strongly recommended in order to make isolation levels work efficiently.</b>_<p>If you turn this flag off, JPA transaction management will not support_per-transaction isolation levels anymore. It will not call_{@code Connection.setReadOnly(true)} for read-only transactions anymore either._If this flag is turned off, no cleanup of a JDBC Connection is required after_a transaction, since no Connection settings will get modified._<p><b>NOTE:</b> The default behavior in terms of read-only handling changed_in Spring 4.1, propagating the read-only status to the JDBC Connection now,_analogous to other Spring transaction managers. This may have the effect_that you're running into read-only enforcement now where previously write_access has accidentally been tolerated: Please revise your transaction_declarations accordingly, removing invalid read-only markers if necessary._@since 4.1_@see java.sql.Connection#setTransactionIsolation_@see java.sql.Connection#setReadOnly;public void setPrepareConnection(boolean prepareConnection) {_		this.prepareConnection = prepareConnection__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,default,is,true,on,hibernate,entity,manager,4,x,with,its,on,close,connection,release,mode,and,false,on,hibernate,entity,manager,3,6,due,to,the,after,transaction,release,mode,there,b,note,that,hibernate,4,2,is,strongly,recommended,in,order,to,make,isolation,levels,work,efficiently,b,p,if,you,turn,this,flag,off,jpa,transaction,management,will,not,support,per,transaction,isolation,levels,anymore,it,will,not,call,code,connection,set,read,only,true,for,read,only,transactions,anymore,either,if,this,flag,is,turned,off,no,cleanup,of,a,jdbc,connection,is,required,after,a,transaction,since,no,connection,settings,will,get,modified,p,b,note,b,the,default,behavior,in,terms,of,read,only,handling,changed,in,spring,4,1,propagating,the,read,only,status,to,the,jdbc,connection,now,analogous,to,other,spring,transaction,managers,this,may,have,the,effect,that,you,re,running,into,read,only,enforcement,now,where,previously,write,access,has,accidentally,been,tolerated,please,revise,your,transaction,declarations,accordingly,removing,invalid,read,only,markers,if,necessary,since,4,1,see,java,sql,connection,set,transaction,isolation,see,java,sql,connection,set,read,only;public,void,set,prepare,connection,boolean,prepare,connection,this,prepare,connection,prepare,connection
HibernateJpaDialect -> public void setPrepareConnection(boolean prepareConnection);1467668243;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>Default is "true" on Hibernate EntityManager 4.x (with its 'on-close'_connection release mode._<p>If you turn this flag off, JPA transaction management will not support_per-transaction isolation levels anymore. It will not call_{@code Connection.setReadOnly(true)} for read-only transactions anymore either._If this flag is turned off, no cleanup of a JDBC Connection is required after_a transaction, since no Connection settings will get modified._<p><b>NOTE:</b> The default behavior in terms of read-only handling changed_in Spring 4.1, propagating the read-only status to the JDBC Connection now,_analogous to other Spring transaction managers. This may have the effect_that you're running into read-only enforcement now where previously write_access has accidentally been tolerated: Please revise your transaction_declarations accordingly, removing invalid read-only markers if necessary._@since 4.1_@see java.sql.Connection#setTransactionIsolation_@see java.sql.Connection#setReadOnly;public void setPrepareConnection(boolean prepareConnection) {_		this.prepareConnection = prepareConnection__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,default,is,true,on,hibernate,entity,manager,4,x,with,its,on,close,connection,release,mode,p,if,you,turn,this,flag,off,jpa,transaction,management,will,not,support,per,transaction,isolation,levels,anymore,it,will,not,call,code,connection,set,read,only,true,for,read,only,transactions,anymore,either,if,this,flag,is,turned,off,no,cleanup,of,a,jdbc,connection,is,required,after,a,transaction,since,no,connection,settings,will,get,modified,p,b,note,b,the,default,behavior,in,terms,of,read,only,handling,changed,in,spring,4,1,propagating,the,read,only,status,to,the,jdbc,connection,now,analogous,to,other,spring,transaction,managers,this,may,have,the,effect,that,you,re,running,into,read,only,enforcement,now,where,previously,write,access,has,accidentally,been,tolerated,please,revise,your,transaction,declarations,accordingly,removing,invalid,read,only,markers,if,necessary,since,4,1,see,java,sql,connection,set,transaction,isolation,see,java,sql,connection,set,read,only;public,void,set,prepare,connection,boolean,prepare,connection,this,prepare,connection,prepare,connection
HibernateJpaDialect -> public void setPrepareConnection(boolean prepareConnection);1467677340;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>Default is "true" on Hibernate EntityManager 4.x (with its 'on-close'_connection release mode._<p>If you turn this flag off, JPA transaction management will not support_per-transaction isolation levels anymore. It will not call_{@code Connection.setReadOnly(true)} for read-only transactions anymore either._If this flag is turned off, no cleanup of a JDBC Connection is required after_a transaction, since no Connection settings will get modified._<p><b>NOTE:</b> The default behavior in terms of read-only handling changed_in Spring 4.1, propagating the read-only status to the JDBC Connection now,_analogous to other Spring transaction managers. This may have the effect_that you're running into read-only enforcement now where previously write_access has accidentally been tolerated: Please revise your transaction_declarations accordingly, removing invalid read-only markers if necessary._@since 4.1_@see java.sql.Connection#setTransactionIsolation_@see java.sql.Connection#setReadOnly;public void setPrepareConnection(boolean prepareConnection) {_		this.prepareConnection = prepareConnection__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,default,is,true,on,hibernate,entity,manager,4,x,with,its,on,close,connection,release,mode,p,if,you,turn,this,flag,off,jpa,transaction,management,will,not,support,per,transaction,isolation,levels,anymore,it,will,not,call,code,connection,set,read,only,true,for,read,only,transactions,anymore,either,if,this,flag,is,turned,off,no,cleanup,of,a,jdbc,connection,is,required,after,a,transaction,since,no,connection,settings,will,get,modified,p,b,note,b,the,default,behavior,in,terms,of,read,only,handling,changed,in,spring,4,1,propagating,the,read,only,status,to,the,jdbc,connection,now,analogous,to,other,spring,transaction,managers,this,may,have,the,effect,that,you,re,running,into,read,only,enforcement,now,where,previously,write,access,has,accidentally,been,tolerated,please,revise,your,transaction,declarations,accordingly,removing,invalid,read,only,markers,if,necessary,since,4,1,see,java,sql,connection,set,transaction,isolation,see,java,sql,connection,set,read,only;public,void,set,prepare,connection,boolean,prepare,connection,this,prepare,connection,prepare,connection
HibernateJpaDialect -> public void setPrepareConnection(boolean prepareConnection);1485810955;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>Default is "true" on Hibernate EntityManager 4.x (with its 'on-close'_connection release mode._<p>If you turn this flag off, JPA transaction management will not support_per-transaction isolation levels anymore. It will not call_{@code Connection.setReadOnly(true)} for read-only transactions anymore either._If this flag is turned off, no cleanup of a JDBC Connection is required after_a transaction, since no Connection settings will get modified._<p><b>NOTE:</b> The default behavior in terms of read-only handling changed_in Spring 4.1, propagating the read-only status to the JDBC Connection now,_analogous to other Spring transaction managers. This may have the effect_that you're running into read-only enforcement now where previously write_access has accidentally been tolerated: Please revise your transaction_declarations accordingly, removing invalid read-only markers if necessary._@since 4.1_@see java.sql.Connection#setTransactionIsolation_@see java.sql.Connection#setReadOnly;public void setPrepareConnection(boolean prepareConnection) {_		this.prepareConnection = prepareConnection__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,default,is,true,on,hibernate,entity,manager,4,x,with,its,on,close,connection,release,mode,p,if,you,turn,this,flag,off,jpa,transaction,management,will,not,support,per,transaction,isolation,levels,anymore,it,will,not,call,code,connection,set,read,only,true,for,read,only,transactions,anymore,either,if,this,flag,is,turned,off,no,cleanup,of,a,jdbc,connection,is,required,after,a,transaction,since,no,connection,settings,will,get,modified,p,b,note,b,the,default,behavior,in,terms,of,read,only,handling,changed,in,spring,4,1,propagating,the,read,only,status,to,the,jdbc,connection,now,analogous,to,other,spring,transaction,managers,this,may,have,the,effect,that,you,re,running,into,read,only,enforcement,now,where,previously,write,access,has,accidentally,been,tolerated,please,revise,your,transaction,declarations,accordingly,removing,invalid,read,only,markers,if,necessary,since,4,1,see,java,sql,connection,set,transaction,isolation,see,java,sql,connection,set,read,only;public,void,set,prepare,connection,boolean,prepare,connection,this,prepare,connection,prepare,connection
HibernateJpaDialect -> public void setPrepareConnection(boolean prepareConnection);1495868221;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>Default is "true" on Hibernate EntityManager 4.x (with its 'on-close'_connection release mode._<p>If you turn this flag off, JPA transaction management will not support_per-transaction isolation levels anymore. It will not call_{@code Connection.setReadOnly(true)} for read-only transactions anymore either._If this flag is turned off, no cleanup of a JDBC Connection is required after_a transaction, since no Connection settings will get modified._<p><b>NOTE:</b> The default behavior in terms of read-only handling changed_in Spring 4.1, propagating the read-only status to the JDBC Connection now,_analogous to other Spring transaction managers. This may have the effect_that you're running into read-only enforcement now where previously write_access has accidentally been tolerated: Please revise your transaction_declarations accordingly, removing invalid read-only markers if necessary._@since 4.1_@see java.sql.Connection#setTransactionIsolation_@see java.sql.Connection#setReadOnly;public void setPrepareConnection(boolean prepareConnection) {_		this.prepareConnection = prepareConnection__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,default,is,true,on,hibernate,entity,manager,4,x,with,its,on,close,connection,release,mode,p,if,you,turn,this,flag,off,jpa,transaction,management,will,not,support,per,transaction,isolation,levels,anymore,it,will,not,call,code,connection,set,read,only,true,for,read,only,transactions,anymore,either,if,this,flag,is,turned,off,no,cleanup,of,a,jdbc,connection,is,required,after,a,transaction,since,no,connection,settings,will,get,modified,p,b,note,b,the,default,behavior,in,terms,of,read,only,handling,changed,in,spring,4,1,propagating,the,read,only,status,to,the,jdbc,connection,now,analogous,to,other,spring,transaction,managers,this,may,have,the,effect,that,you,re,running,into,read,only,enforcement,now,where,previously,write,access,has,accidentally,been,tolerated,please,revise,your,transaction,declarations,accordingly,removing,invalid,read,only,markers,if,necessary,since,4,1,see,java,sql,connection,set,transaction,isolation,see,java,sql,connection,set,read,only;public,void,set,prepare,connection,boolean,prepare,connection,this,prepare,connection,prepare,connection
HibernateJpaDialect -> public void setPrepareConnection(boolean prepareConnection);1496242568;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>Default is "true" on Hibernate EntityManager 4.x (with its 'on-close'_connection release mode._<p>If you turn this flag off, JPA transaction management will not support_per-transaction isolation levels anymore. It will not call_{@code Connection.setReadOnly(true)} for read-only transactions anymore either._If this flag is turned off, no cleanup of a JDBC Connection is required after_a transaction, since no Connection settings will get modified._<p><b>NOTE:</b> The default behavior in terms of read-only handling changed_in Spring 4.1, propagating the read-only status to the JDBC Connection now,_analogous to other Spring transaction managers. This may have the effect_that you're running into read-only enforcement now where previously write_access has accidentally been tolerated: Please revise your transaction_declarations accordingly, removing invalid read-only markers if necessary._@since 4.1_@see java.sql.Connection#setTransactionIsolation_@see java.sql.Connection#setReadOnly;public void setPrepareConnection(boolean prepareConnection) {_		this.prepareConnection = prepareConnection__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,default,is,true,on,hibernate,entity,manager,4,x,with,its,on,close,connection,release,mode,p,if,you,turn,this,flag,off,jpa,transaction,management,will,not,support,per,transaction,isolation,levels,anymore,it,will,not,call,code,connection,set,read,only,true,for,read,only,transactions,anymore,either,if,this,flag,is,turned,off,no,cleanup,of,a,jdbc,connection,is,required,after,a,transaction,since,no,connection,settings,will,get,modified,p,b,note,b,the,default,behavior,in,terms,of,read,only,handling,changed,in,spring,4,1,propagating,the,read,only,status,to,the,jdbc,connection,now,analogous,to,other,spring,transaction,managers,this,may,have,the,effect,that,you,re,running,into,read,only,enforcement,now,where,previously,write,access,has,accidentally,been,tolerated,please,revise,your,transaction,declarations,accordingly,removing,invalid,read,only,markers,if,necessary,since,4,1,see,java,sql,connection,set,transaction,isolation,see,java,sql,connection,set,read,only;public,void,set,prepare,connection,boolean,prepare,connection,this,prepare,connection,prepare,connection
HibernateJpaDialect -> public void setPrepareConnection(boolean prepareConnection);1496259743;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>Default is "true" on Hibernate EntityManager 4.x (with its 'on-close'_connection release mode._<p>If you turn this flag off, JPA transaction management will not support_per-transaction isolation levels anymore. It will not call_{@code Connection.setReadOnly(true)} for read-only transactions anymore either._If this flag is turned off, no cleanup of a JDBC Connection is required after_a transaction, since no Connection settings will get modified._<p><b>NOTE:</b> The default behavior in terms of read-only handling changed_in Spring 4.1, propagating the read-only status to the JDBC Connection now,_analogous to other Spring transaction managers. This may have the effect_that you're running into read-only enforcement now where previously write_access has accidentally been tolerated: Please revise your transaction_declarations accordingly, removing invalid read-only markers if necessary._@since 4.1_@see java.sql.Connection#setTransactionIsolation_@see java.sql.Connection#setReadOnly;public void setPrepareConnection(boolean prepareConnection) {_		this.prepareConnection = prepareConnection__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,default,is,true,on,hibernate,entity,manager,4,x,with,its,on,close,connection,release,mode,p,if,you,turn,this,flag,off,jpa,transaction,management,will,not,support,per,transaction,isolation,levels,anymore,it,will,not,call,code,connection,set,read,only,true,for,read,only,transactions,anymore,either,if,this,flag,is,turned,off,no,cleanup,of,a,jdbc,connection,is,required,after,a,transaction,since,no,connection,settings,will,get,modified,p,b,note,b,the,default,behavior,in,terms,of,read,only,handling,changed,in,spring,4,1,propagating,the,read,only,status,to,the,jdbc,connection,now,analogous,to,other,spring,transaction,managers,this,may,have,the,effect,that,you,re,running,into,read,only,enforcement,now,where,previously,write,access,has,accidentally,been,tolerated,please,revise,your,transaction,declarations,accordingly,removing,invalid,read,only,markers,if,necessary,since,4,1,see,java,sql,connection,set,transaction,isolation,see,java,sql,connection,set,read,only;public,void,set,prepare,connection,boolean,prepare,connection,this,prepare,connection,prepare,connection
HibernateJpaDialect -> public void setPrepareConnection(boolean prepareConnection);1496837955;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>Default is "true" on Hibernate EntityManager 4.x (with its 'on-close'_connection release mode._<p>If you turn this flag off, JPA transaction management will not support_per-transaction isolation levels anymore. It will not call_{@code Connection.setReadOnly(true)} for read-only transactions anymore either._If this flag is turned off, no cleanup of a JDBC Connection is required after_a transaction, since no Connection settings will get modified._<p><b>NOTE:</b> The default behavior in terms of read-only handling changed_in Spring 4.1, propagating the read-only status to the JDBC Connection now,_analogous to other Spring transaction managers. This may have the effect_that you're running into read-only enforcement now where previously write_access has accidentally been tolerated: Please revise your transaction_declarations accordingly, removing invalid read-only markers if necessary._@since 4.1_@see java.sql.Connection#setTransactionIsolation_@see java.sql.Connection#setReadOnly;public void setPrepareConnection(boolean prepareConnection) {_		this.prepareConnection = prepareConnection__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,default,is,true,on,hibernate,entity,manager,4,x,with,its,on,close,connection,release,mode,p,if,you,turn,this,flag,off,jpa,transaction,management,will,not,support,per,transaction,isolation,levels,anymore,it,will,not,call,code,connection,set,read,only,true,for,read,only,transactions,anymore,either,if,this,flag,is,turned,off,no,cleanup,of,a,jdbc,connection,is,required,after,a,transaction,since,no,connection,settings,will,get,modified,p,b,note,b,the,default,behavior,in,terms,of,read,only,handling,changed,in,spring,4,1,propagating,the,read,only,status,to,the,jdbc,connection,now,analogous,to,other,spring,transaction,managers,this,may,have,the,effect,that,you,re,running,into,read,only,enforcement,now,where,previously,write,access,has,accidentally,been,tolerated,please,revise,your,transaction,declarations,accordingly,removing,invalid,read,only,markers,if,necessary,since,4,1,see,java,sql,connection,set,transaction,isolation,see,java,sql,connection,set,read,only;public,void,set,prepare,connection,boolean,prepare,connection,this,prepare,connection,prepare,connection
HibernateJpaDialect -> public void setPrepareConnection(boolean prepareConnection);1498780456;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>Default is "true" on Hibernate EntityManager 4.x (with its 'on-close'_connection release mode._<p>If you turn this flag off, JPA transaction management will not support_per-transaction isolation levels anymore. It will not call_{@code Connection.setReadOnly(true)} for read-only transactions anymore either._If this flag is turned off, no cleanup of a JDBC Connection is required after_a transaction, since no Connection settings will get modified._<p><b>NOTE:</b> The default behavior in terms of read-only handling changed_in Spring 4.1, propagating the read-only status to the JDBC Connection now,_analogous to other Spring transaction managers. This may have the effect_that you're running into read-only enforcement now where previously write_access has accidentally been tolerated: Please revise your transaction_declarations accordingly, removing invalid read-only markers if necessary._@since 4.1_@see java.sql.Connection#setTransactionIsolation_@see java.sql.Connection#setReadOnly;public void setPrepareConnection(boolean prepareConnection) {_		this.prepareConnection = prepareConnection__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,default,is,true,on,hibernate,entity,manager,4,x,with,its,on,close,connection,release,mode,p,if,you,turn,this,flag,off,jpa,transaction,management,will,not,support,per,transaction,isolation,levels,anymore,it,will,not,call,code,connection,set,read,only,true,for,read,only,transactions,anymore,either,if,this,flag,is,turned,off,no,cleanup,of,a,jdbc,connection,is,required,after,a,transaction,since,no,connection,settings,will,get,modified,p,b,note,b,the,default,behavior,in,terms,of,read,only,handling,changed,in,spring,4,1,propagating,the,read,only,status,to,the,jdbc,connection,now,analogous,to,other,spring,transaction,managers,this,may,have,the,effect,that,you,re,running,into,read,only,enforcement,now,where,previously,write,access,has,accidentally,been,tolerated,please,revise,your,transaction,declarations,accordingly,removing,invalid,read,only,markers,if,necessary,since,4,1,see,java,sql,connection,set,transaction,isolation,see,java,sql,connection,set,read,only;public,void,set,prepare,connection,boolean,prepare,connection,this,prepare,connection,prepare,connection
HibernateJpaDialect -> public void setPrepareConnection(boolean prepareConnection);1500495740;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>Default is "true" on Hibernate EntityManager 4.x (with its 'on-close'_connection release mode._<p>If you turn this flag off, JPA transaction management will not support_per-transaction isolation levels anymore. It will not call_{@code Connection.setReadOnly(true)} for read-only transactions anymore either._If this flag is turned off, no cleanup of a JDBC Connection is required after_a transaction, since no Connection settings will get modified._<p><b>NOTE:</b> The default behavior in terms of read-only handling changed_in Spring 4.1, propagating the read-only status to the JDBC Connection now,_analogous to other Spring transaction managers. This may have the effect_that you're running into read-only enforcement now where previously write_access has accidentally been tolerated: Please revise your transaction_declarations accordingly, removing invalid read-only markers if necessary._@since 4.1_@see java.sql.Connection#setTransactionIsolation_@see java.sql.Connection#setReadOnly;public void setPrepareConnection(boolean prepareConnection) {_		this.prepareConnection = prepareConnection__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,default,is,true,on,hibernate,entity,manager,4,x,with,its,on,close,connection,release,mode,p,if,you,turn,this,flag,off,jpa,transaction,management,will,not,support,per,transaction,isolation,levels,anymore,it,will,not,call,code,connection,set,read,only,true,for,read,only,transactions,anymore,either,if,this,flag,is,turned,off,no,cleanup,of,a,jdbc,connection,is,required,after,a,transaction,since,no,connection,settings,will,get,modified,p,b,note,b,the,default,behavior,in,terms,of,read,only,handling,changed,in,spring,4,1,propagating,the,read,only,status,to,the,jdbc,connection,now,analogous,to,other,spring,transaction,managers,this,may,have,the,effect,that,you,re,running,into,read,only,enforcement,now,where,previously,write,access,has,accidentally,been,tolerated,please,revise,your,transaction,declarations,accordingly,removing,invalid,read,only,markers,if,necessary,since,4,1,see,java,sql,connection,set,transaction,isolation,see,java,sql,connection,set,read,only;public,void,set,prepare,connection,boolean,prepare,connection,this,prepare,connection,prepare,connection
HibernateJpaDialect -> public void setPrepareConnection(boolean prepareConnection);1502974979;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>Default is "true" on Hibernate EntityManager 4.x (with its 'on-close'_connection release mode._<p>If you turn this flag off, JPA transaction management will not support_per-transaction isolation levels anymore. It will not call_{@code Connection.setReadOnly(true)} for read-only transactions anymore either._If this flag is turned off, no cleanup of a JDBC Connection is required after_a transaction, since no Connection settings will get modified._<p><b>NOTE:</b> The default behavior in terms of read-only handling changed_in Spring 4.1, propagating the read-only status to the JDBC Connection now,_analogous to other Spring transaction managers. This may have the effect_that you're running into read-only enforcement now where previously write_access has accidentally been tolerated: Please revise your transaction_declarations accordingly, removing invalid read-only markers if necessary._@since 4.1_@see java.sql.Connection#setTransactionIsolation_@see java.sql.Connection#setReadOnly;public void setPrepareConnection(boolean prepareConnection) {_		this.prepareConnection = prepareConnection__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,default,is,true,on,hibernate,entity,manager,4,x,with,its,on,close,connection,release,mode,p,if,you,turn,this,flag,off,jpa,transaction,management,will,not,support,per,transaction,isolation,levels,anymore,it,will,not,call,code,connection,set,read,only,true,for,read,only,transactions,anymore,either,if,this,flag,is,turned,off,no,cleanup,of,a,jdbc,connection,is,required,after,a,transaction,since,no,connection,settings,will,get,modified,p,b,note,b,the,default,behavior,in,terms,of,read,only,handling,changed,in,spring,4,1,propagating,the,read,only,status,to,the,jdbc,connection,now,analogous,to,other,spring,transaction,managers,this,may,have,the,effect,that,you,re,running,into,read,only,enforcement,now,where,previously,write,access,has,accidentally,been,tolerated,please,revise,your,transaction,declarations,accordingly,removing,invalid,read,only,markers,if,necessary,since,4,1,see,java,sql,connection,set,transaction,isolation,see,java,sql,connection,set,read,only;public,void,set,prepare,connection,boolean,prepare,connection,this,prepare,connection,prepare,connection
HibernateJpaDialect -> public void setPrepareConnection(boolean prepareConnection);1530174524;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>Default is "true" on Hibernate EntityManager 4.x (with its 'on-close'_connection release mode._<p>If you turn this flag off, JPA transaction management will not support_per-transaction isolation levels anymore. It will not call_{@code Connection.setReadOnly(true)} for read-only transactions anymore either._If this flag is turned off, no cleanup of a JDBC Connection is required after_a transaction, since no Connection settings will get modified._<p><b>NOTE:</b> The default behavior in terms of read-only handling changed_in Spring 4.1, propagating the read-only status to the JDBC Connection now,_analogous to other Spring transaction managers. This may have the effect_that you're running into read-only enforcement now where previously write_access has accidentally been tolerated: Please revise your transaction_declarations accordingly, removing invalid read-only markers if necessary._@since 4.1_@see java.sql.Connection#setTransactionIsolation_@see java.sql.Connection#setReadOnly;public void setPrepareConnection(boolean prepareConnection) {_		this.prepareConnection = prepareConnection__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,default,is,true,on,hibernate,entity,manager,4,x,with,its,on,close,connection,release,mode,p,if,you,turn,this,flag,off,jpa,transaction,management,will,not,support,per,transaction,isolation,levels,anymore,it,will,not,call,code,connection,set,read,only,true,for,read,only,transactions,anymore,either,if,this,flag,is,turned,off,no,cleanup,of,a,jdbc,connection,is,required,after,a,transaction,since,no,connection,settings,will,get,modified,p,b,note,b,the,default,behavior,in,terms,of,read,only,handling,changed,in,spring,4,1,propagating,the,read,only,status,to,the,jdbc,connection,now,analogous,to,other,spring,transaction,managers,this,may,have,the,effect,that,you,re,running,into,read,only,enforcement,now,where,previously,write,access,has,accidentally,been,tolerated,please,revise,your,transaction,declarations,accordingly,removing,invalid,read,only,markers,if,necessary,since,4,1,see,java,sql,connection,set,transaction,isolation,see,java,sql,connection,set,read,only;public,void,set,prepare,connection,boolean,prepare,connection,this,prepare,connection,prepare,connection
HibernateJpaDialect -> public void setPrepareConnection(boolean prepareConnection);1530791615;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>Default is "true" on Hibernate EntityManager 4.x (with its 'on-close'_connection release mode._<p>If you turn this flag off, JPA transaction management will not support_per-transaction isolation levels anymore. It will not call_{@code Connection.setReadOnly(true)} for read-only transactions anymore either._If this flag is turned off, no cleanup of a JDBC Connection is required after_a transaction, since no Connection settings will get modified._<p><b>NOTE:</b> The default behavior in terms of read-only handling changed_in Spring 4.1, propagating the read-only status to the JDBC Connection now,_analogous to other Spring transaction managers. This may have the effect_that you're running into read-only enforcement now where previously write_access has accidentally been tolerated: Please revise your transaction_declarations accordingly, removing invalid read-only markers if necessary._@since 4.1_@see java.sql.Connection#setTransactionIsolation_@see java.sql.Connection#setReadOnly;public void setPrepareConnection(boolean prepareConnection) {_		this.prepareConnection = prepareConnection__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,default,is,true,on,hibernate,entity,manager,4,x,with,its,on,close,connection,release,mode,p,if,you,turn,this,flag,off,jpa,transaction,management,will,not,support,per,transaction,isolation,levels,anymore,it,will,not,call,code,connection,set,read,only,true,for,read,only,transactions,anymore,either,if,this,flag,is,turned,off,no,cleanup,of,a,jdbc,connection,is,required,after,a,transaction,since,no,connection,settings,will,get,modified,p,b,note,b,the,default,behavior,in,terms,of,read,only,handling,changed,in,spring,4,1,propagating,the,read,only,status,to,the,jdbc,connection,now,analogous,to,other,spring,transaction,managers,this,may,have,the,effect,that,you,re,running,into,read,only,enforcement,now,where,previously,write,access,has,accidentally,been,tolerated,please,revise,your,transaction,declarations,accordingly,removing,invalid,read,only,markers,if,necessary,since,4,1,see,java,sql,connection,set,transaction,isolation,see,java,sql,connection,set,read,only;public,void,set,prepare,connection,boolean,prepare,connection,this,prepare,connection,prepare,connection
HibernateJpaDialect -> public void setPrepareConnection(boolean prepareConnection);1531144356;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>Default is "true" on Hibernate EntityManager 4.x (with its 'on-close'_connection release mode._<p>If you turn this flag off, JPA transaction management will not support_per-transaction isolation levels anymore. It will not call_{@code Connection.setReadOnly(true)} for read-only transactions anymore either._If this flag is turned off, no cleanup of a JDBC Connection is required after_a transaction, since no Connection settings will get modified._<p><b>NOTE:</b> The default behavior in terms of read-only handling changed_in Spring 4.1, propagating the read-only status to the JDBC Connection now,_analogous to other Spring transaction managers. This may have the effect_that you're running into read-only enforcement now where previously write_access has accidentally been tolerated: Please revise your transaction_declarations accordingly, removing invalid read-only markers if necessary._@since 4.1_@see java.sql.Connection#setTransactionIsolation_@see java.sql.Connection#setReadOnly;public void setPrepareConnection(boolean prepareConnection) {_		this.prepareConnection = prepareConnection__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,default,is,true,on,hibernate,entity,manager,4,x,with,its,on,close,connection,release,mode,p,if,you,turn,this,flag,off,jpa,transaction,management,will,not,support,per,transaction,isolation,levels,anymore,it,will,not,call,code,connection,set,read,only,true,for,read,only,transactions,anymore,either,if,this,flag,is,turned,off,no,cleanup,of,a,jdbc,connection,is,required,after,a,transaction,since,no,connection,settings,will,get,modified,p,b,note,b,the,default,behavior,in,terms,of,read,only,handling,changed,in,spring,4,1,propagating,the,read,only,status,to,the,jdbc,connection,now,analogous,to,other,spring,transaction,managers,this,may,have,the,effect,that,you,re,running,into,read,only,enforcement,now,where,previously,write,access,has,accidentally,been,tolerated,please,revise,your,transaction,declarations,accordingly,removing,invalid,read,only,markers,if,necessary,since,4,1,see,java,sql,connection,set,transaction,isolation,see,java,sql,connection,set,read,only;public,void,set,prepare,connection,boolean,prepare,connection,this,prepare,connection,prepare,connection
HibernateJpaDialect -> public void setPrepareConnection(boolean prepareConnection);1535712004;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>Default is "true". If you turn this flag off, JPA transaction management_will not support per-transaction isolation levels anymore. It will not call_{@code Connection.setReadOnly(true)} for read-only transactions anymore either._If this flag is turned off, no cleanup of a JDBC Connection is required after_a transaction, since no Connection settings will get modified._<p><b>NOTE:</b> The default behavior in terms of read-only handling changed_in Spring 4.1, propagating the read-only status to the JDBC Connection now,_analogous to other Spring transaction managers. This may have the effect_that you're running into read-only enforcement now where previously write_access has accidentally been tolerated: Please revise your transaction_declarations accordingly, removing invalid read-only markers if necessary._@since 4.1_@see java.sql.Connection#setTransactionIsolation_@see java.sql.Connection#setReadOnly;public void setPrepareConnection(boolean prepareConnection) {_		this.prepareConnection = prepareConnection__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,default,is,true,if,you,turn,this,flag,off,jpa,transaction,management,will,not,support,per,transaction,isolation,levels,anymore,it,will,not,call,code,connection,set,read,only,true,for,read,only,transactions,anymore,either,if,this,flag,is,turned,off,no,cleanup,of,a,jdbc,connection,is,required,after,a,transaction,since,no,connection,settings,will,get,modified,p,b,note,b,the,default,behavior,in,terms,of,read,only,handling,changed,in,spring,4,1,propagating,the,read,only,status,to,the,jdbc,connection,now,analogous,to,other,spring,transaction,managers,this,may,have,the,effect,that,you,re,running,into,read,only,enforcement,now,where,previously,write,access,has,accidentally,been,tolerated,please,revise,your,transaction,declarations,accordingly,removing,invalid,read,only,markers,if,necessary,since,4,1,see,java,sql,connection,set,transaction,isolation,see,java,sql,connection,set,read,only;public,void,set,prepare,connection,boolean,prepare,connection,this,prepare,connection,prepare,connection
HibernateJpaDialect -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1377018639;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._@param ex HibernateException that occurred_@return the corresponding DataAccessException instance;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		if (ex instanceof JDBCConnectionException) {_			return new DataAccessResourceFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof SQLGrammarException) {_			SQLGrammarException jdbcEx = (SQLGrammarException) ex__			return new InvalidDataAccessResourceUsageException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof QueryTimeoutException) {_			QueryTimeoutException jdbcEx = (QueryTimeoutException) ex__			return new org.springframework.dao.QueryTimeoutException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof LockAcquisitionException) {_			LockAcquisitionException jdbcEx = (LockAcquisitionException) ex__			return new CannotAcquireLockException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof PessimisticLockException) {_			PessimisticLockException jdbcEx = (PessimisticLockException) ex__			return new PessimisticLockingFailureException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof ConstraintViolationException) {_			ConstraintViolationException jdbcEx = (ConstraintViolationException) ex__			return new DataIntegrityViolationException(ex.getMessage()  + "_ SQL [" + jdbcEx.getSQL() +_					"]_ constraint [" + jdbcEx.getConstraintName() + "]", ex)__		}_		if (ex instanceof DataException) {_			DataException jdbcEx = (DataException) ex__			return new DataIntegrityViolationException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		__		if (ex instanceof QueryException) {_			return new InvalidDataAccessResourceUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueObjectException) {_			return new DuplicateKeyException(ex.getMessage(), ex)__		}_		if (ex instanceof PropertyValueException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof PersistentObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof TransientObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof ObjectDeletedException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof UnresolvableObjectException) {_			UnresolvableObjectException hibEx = (UnresolvableObjectException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof WrongClassException) {_			WrongClassException hibEx = (WrongClassException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof StaleObjectStateException) {_			StaleObjectStateException hibEx = (StaleObjectStateException) ex__			return new ObjectOptimisticLockingFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex)__		}_		if (ex instanceof StaleStateException) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (optimisticLockExceptionClass.isInstance(ex)) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (pessimisticLockExceptionClass != null && pessimisticLockExceptionClass.isInstance(ex)) {_			if (ex.getCause() instanceof LockAcquisitionException) {_				return new CannotAcquireLockException(ex.getMessage(), ex.getCause())__			}_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}__		_		return new JpaSystemException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,param,ex,hibernate,exception,that,occurred,return,the,corresponding,data,access,exception,instance;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,if,ex,instanceof,jdbcconnection,exception,return,new,data,access,resource,failure,exception,ex,get,message,ex,if,ex,instanceof,sqlgrammar,exception,sqlgrammar,exception,jdbc,ex,sqlgrammar,exception,ex,return,new,invalid,data,access,resource,usage,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,timeout,exception,query,timeout,exception,jdbc,ex,query,timeout,exception,ex,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,lock,acquisition,exception,lock,acquisition,exception,jdbc,ex,lock,acquisition,exception,ex,return,new,cannot,acquire,lock,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,pessimistic,lock,exception,pessimistic,lock,exception,jdbc,ex,pessimistic,lock,exception,ex,return,new,pessimistic,locking,failure,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,constraint,violation,exception,constraint,violation,exception,jdbc,ex,constraint,violation,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,constraint,jdbc,ex,get,constraint,name,ex,if,ex,instanceof,data,exception,data,exception,jdbc,ex,data,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,exception,return,new,invalid,data,access,resource,usage,exception,ex,get,message,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,object,exception,return,new,duplicate,key,exception,ex,get,message,ex,if,ex,instanceof,property,value,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,persistent,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,transient,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,object,deleted,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,unresolvable,object,exception,unresolvable,object,exception,hib,ex,unresolvable,object,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,wrong,class,exception,wrong,class,exception,hib,ex,wrong,class,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,stale,object,state,exception,stale,object,state,exception,hib,ex,stale,object,state,exception,ex,return,new,object,optimistic,locking,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,if,ex,instanceof,stale,state,exception,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,optimistic,lock,exception,class,is,instance,ex,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,pessimistic,lock,exception,class,null,pessimistic,lock,exception,class,is,instance,ex,if,ex,get,cause,instanceof,lock,acquisition,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,get,cause,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,return,new,jpa,system,exception,ex
HibernateJpaDialect -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1387295218;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._@param ex HibernateException that occurred_@return the corresponding DataAccessException instance;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		if (ex instanceof JDBCConnectionException) {_			return new DataAccessResourceFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof SQLGrammarException) {_			SQLGrammarException jdbcEx = (SQLGrammarException) ex__			return new InvalidDataAccessResourceUsageException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof QueryTimeoutException) {_			QueryTimeoutException jdbcEx = (QueryTimeoutException) ex__			return new org.springframework.dao.QueryTimeoutException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof LockAcquisitionException) {_			LockAcquisitionException jdbcEx = (LockAcquisitionException) ex__			return new CannotAcquireLockException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof PessimisticLockException) {_			PessimisticLockException jdbcEx = (PessimisticLockException) ex__			return new PessimisticLockingFailureException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof ConstraintViolationException) {_			ConstraintViolationException jdbcEx = (ConstraintViolationException) ex__			return new DataIntegrityViolationException(ex.getMessage()  + "_ SQL [" + jdbcEx.getSQL() +_					"]_ constraint [" + jdbcEx.getConstraintName() + "]", ex)__		}_		if (ex instanceof DataException) {_			DataException jdbcEx = (DataException) ex__			return new DataIntegrityViolationException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		__		if (ex instanceof QueryException) {_			return new InvalidDataAccessResourceUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueObjectException) {_			return new DuplicateKeyException(ex.getMessage(), ex)__		}_		if (ex instanceof PropertyValueException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof PersistentObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof TransientObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof ObjectDeletedException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof UnresolvableObjectException) {_			UnresolvableObjectException hibEx = (UnresolvableObjectException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof WrongClassException) {_			WrongClassException hibEx = (WrongClassException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof StaleObjectStateException) {_			StaleObjectStateException hibEx = (StaleObjectStateException) ex__			return new ObjectOptimisticLockingFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex)__		}_		if (ex instanceof StaleStateException) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (optimisticLockExceptionClass.isInstance(ex)) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (pessimisticLockExceptionClass != null && pessimisticLockExceptionClass.isInstance(ex)) {_			if (ex.getCause() instanceof LockAcquisitionException) {_				return new CannotAcquireLockException(ex.getMessage(), ex.getCause())__			}_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}__		_		return new JpaSystemException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,param,ex,hibernate,exception,that,occurred,return,the,corresponding,data,access,exception,instance;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,if,ex,instanceof,jdbcconnection,exception,return,new,data,access,resource,failure,exception,ex,get,message,ex,if,ex,instanceof,sqlgrammar,exception,sqlgrammar,exception,jdbc,ex,sqlgrammar,exception,ex,return,new,invalid,data,access,resource,usage,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,timeout,exception,query,timeout,exception,jdbc,ex,query,timeout,exception,ex,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,lock,acquisition,exception,lock,acquisition,exception,jdbc,ex,lock,acquisition,exception,ex,return,new,cannot,acquire,lock,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,pessimistic,lock,exception,pessimistic,lock,exception,jdbc,ex,pessimistic,lock,exception,ex,return,new,pessimistic,locking,failure,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,constraint,violation,exception,constraint,violation,exception,jdbc,ex,constraint,violation,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,constraint,jdbc,ex,get,constraint,name,ex,if,ex,instanceof,data,exception,data,exception,jdbc,ex,data,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,exception,return,new,invalid,data,access,resource,usage,exception,ex,get,message,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,object,exception,return,new,duplicate,key,exception,ex,get,message,ex,if,ex,instanceof,property,value,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,persistent,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,transient,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,object,deleted,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,unresolvable,object,exception,unresolvable,object,exception,hib,ex,unresolvable,object,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,wrong,class,exception,wrong,class,exception,hib,ex,wrong,class,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,stale,object,state,exception,stale,object,state,exception,hib,ex,stale,object,state,exception,ex,return,new,object,optimistic,locking,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,if,ex,instanceof,stale,state,exception,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,optimistic,lock,exception,class,is,instance,ex,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,pessimistic,lock,exception,class,null,pessimistic,lock,exception,class,is,instance,ex,if,ex,get,cause,instanceof,lock,acquisition,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,get,cause,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,return,new,jpa,system,exception,ex
HibernateJpaDialect -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1407596982;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._@param ex HibernateException that occurred_@return the corresponding DataAccessException instance;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		if (ex instanceof JDBCConnectionException) {_			return new DataAccessResourceFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof SQLGrammarException) {_			SQLGrammarException jdbcEx = (SQLGrammarException) ex__			return new InvalidDataAccessResourceUsageException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof QueryTimeoutException) {_			QueryTimeoutException jdbcEx = (QueryTimeoutException) ex__			return new org.springframework.dao.QueryTimeoutException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof LockAcquisitionException) {_			LockAcquisitionException jdbcEx = (LockAcquisitionException) ex__			return new CannotAcquireLockException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof PessimisticLockException) {_			PessimisticLockException jdbcEx = (PessimisticLockException) ex__			return new PessimisticLockingFailureException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof ConstraintViolationException) {_			ConstraintViolationException jdbcEx = (ConstraintViolationException) ex__			return new DataIntegrityViolationException(ex.getMessage()  + "_ SQL [" + jdbcEx.getSQL() +_					"]_ constraint [" + jdbcEx.getConstraintName() + "]", ex)__		}_		if (ex instanceof DataException) {_			DataException jdbcEx = (DataException) ex__			return new DataIntegrityViolationException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		__		if (ex instanceof QueryException) {_			return new InvalidDataAccessResourceUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueObjectException) {_			return new DuplicateKeyException(ex.getMessage(), ex)__		}_		if (ex instanceof PropertyValueException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof PersistentObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof TransientObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof ObjectDeletedException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof UnresolvableObjectException) {_			UnresolvableObjectException hibEx = (UnresolvableObjectException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof WrongClassException) {_			WrongClassException hibEx = (WrongClassException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof StaleObjectStateException) {_			StaleObjectStateException hibEx = (StaleObjectStateException) ex__			return new ObjectOptimisticLockingFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex)__		}_		if (ex instanceof StaleStateException) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (optimisticLockExceptionClass.isInstance(ex)) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (pessimisticLockExceptionClass != null && pessimisticLockExceptionClass.isInstance(ex)) {_			if (ex.getCause() instanceof LockAcquisitionException) {_				return new CannotAcquireLockException(ex.getMessage(), ex.getCause())__			}_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}__		_		return new JpaSystemException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,param,ex,hibernate,exception,that,occurred,return,the,corresponding,data,access,exception,instance;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,if,ex,instanceof,jdbcconnection,exception,return,new,data,access,resource,failure,exception,ex,get,message,ex,if,ex,instanceof,sqlgrammar,exception,sqlgrammar,exception,jdbc,ex,sqlgrammar,exception,ex,return,new,invalid,data,access,resource,usage,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,timeout,exception,query,timeout,exception,jdbc,ex,query,timeout,exception,ex,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,lock,acquisition,exception,lock,acquisition,exception,jdbc,ex,lock,acquisition,exception,ex,return,new,cannot,acquire,lock,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,pessimistic,lock,exception,pessimistic,lock,exception,jdbc,ex,pessimistic,lock,exception,ex,return,new,pessimistic,locking,failure,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,constraint,violation,exception,constraint,violation,exception,jdbc,ex,constraint,violation,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,constraint,jdbc,ex,get,constraint,name,ex,if,ex,instanceof,data,exception,data,exception,jdbc,ex,data,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,exception,return,new,invalid,data,access,resource,usage,exception,ex,get,message,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,object,exception,return,new,duplicate,key,exception,ex,get,message,ex,if,ex,instanceof,property,value,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,persistent,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,transient,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,object,deleted,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,unresolvable,object,exception,unresolvable,object,exception,hib,ex,unresolvable,object,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,wrong,class,exception,wrong,class,exception,hib,ex,wrong,class,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,stale,object,state,exception,stale,object,state,exception,hib,ex,stale,object,state,exception,ex,return,new,object,optimistic,locking,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,if,ex,instanceof,stale,state,exception,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,optimistic,lock,exception,class,is,instance,ex,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,pessimistic,lock,exception,class,null,pessimistic,lock,exception,class,is,instance,ex,if,ex,get,cause,instanceof,lock,acquisition,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,get,cause,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,return,new,jpa,system,exception,ex
HibernateJpaDialect -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1409586468;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._@param ex HibernateException that occurred_@return the corresponding DataAccessException instance;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		if (ex instanceof JDBCConnectionException) {_			return new DataAccessResourceFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof SQLGrammarException) {_			SQLGrammarException jdbcEx = (SQLGrammarException) ex__			return new InvalidDataAccessResourceUsageException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof QueryTimeoutException) {_			QueryTimeoutException jdbcEx = (QueryTimeoutException) ex__			return new org.springframework.dao.QueryTimeoutException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof LockAcquisitionException) {_			LockAcquisitionException jdbcEx = (LockAcquisitionException) ex__			return new CannotAcquireLockException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof PessimisticLockException) {_			PessimisticLockException jdbcEx = (PessimisticLockException) ex__			return new PessimisticLockingFailureException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof ConstraintViolationException) {_			ConstraintViolationException jdbcEx = (ConstraintViolationException) ex__			return new DataIntegrityViolationException(ex.getMessage()  + "_ SQL [" + jdbcEx.getSQL() +_					"]_ constraint [" + jdbcEx.getConstraintName() + "]", ex)__		}_		if (ex instanceof DataException) {_			DataException jdbcEx = (DataException) ex__			return new DataIntegrityViolationException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		__		if (ex instanceof QueryException) {_			return new InvalidDataAccessResourceUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueObjectException) {_			return new DuplicateKeyException(ex.getMessage(), ex)__		}_		if (ex instanceof PropertyValueException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof PersistentObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof TransientObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof ObjectDeletedException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof UnresolvableObjectException) {_			UnresolvableObjectException hibEx = (UnresolvableObjectException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof WrongClassException) {_			WrongClassException hibEx = (WrongClassException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof StaleObjectStateException) {_			StaleObjectStateException hibEx = (StaleObjectStateException) ex__			return new ObjectOptimisticLockingFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex)__		}_		if (ex instanceof StaleStateException) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (optimisticLockExceptionClass.isInstance(ex)) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (pessimisticLockExceptionClass != null && pessimisticLockExceptionClass.isInstance(ex)) {_			if (ex.getCause() instanceof LockAcquisitionException) {_				return new CannotAcquireLockException(ex.getMessage(), ex.getCause())__			}_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}__		_		return new JpaSystemException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,param,ex,hibernate,exception,that,occurred,return,the,corresponding,data,access,exception,instance;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,if,ex,instanceof,jdbcconnection,exception,return,new,data,access,resource,failure,exception,ex,get,message,ex,if,ex,instanceof,sqlgrammar,exception,sqlgrammar,exception,jdbc,ex,sqlgrammar,exception,ex,return,new,invalid,data,access,resource,usage,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,timeout,exception,query,timeout,exception,jdbc,ex,query,timeout,exception,ex,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,lock,acquisition,exception,lock,acquisition,exception,jdbc,ex,lock,acquisition,exception,ex,return,new,cannot,acquire,lock,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,pessimistic,lock,exception,pessimistic,lock,exception,jdbc,ex,pessimistic,lock,exception,ex,return,new,pessimistic,locking,failure,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,constraint,violation,exception,constraint,violation,exception,jdbc,ex,constraint,violation,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,constraint,jdbc,ex,get,constraint,name,ex,if,ex,instanceof,data,exception,data,exception,jdbc,ex,data,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,exception,return,new,invalid,data,access,resource,usage,exception,ex,get,message,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,object,exception,return,new,duplicate,key,exception,ex,get,message,ex,if,ex,instanceof,property,value,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,persistent,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,transient,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,object,deleted,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,unresolvable,object,exception,unresolvable,object,exception,hib,ex,unresolvable,object,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,wrong,class,exception,wrong,class,exception,hib,ex,wrong,class,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,stale,object,state,exception,stale,object,state,exception,hib,ex,stale,object,state,exception,ex,return,new,object,optimistic,locking,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,if,ex,instanceof,stale,state,exception,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,optimistic,lock,exception,class,is,instance,ex,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,pessimistic,lock,exception,class,null,pessimistic,lock,exception,class,is,instance,ex,if,ex,get,cause,instanceof,lock,acquisition,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,get,cause,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,return,new,jpa,system,exception,ex
HibernateJpaDialect -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1413910143;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._@param ex HibernateException that occurred_@return the corresponding DataAccessException instance;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		if (ex instanceof JDBCConnectionException) {_			return new DataAccessResourceFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof SQLGrammarException) {_			SQLGrammarException jdbcEx = (SQLGrammarException) ex__			return new InvalidDataAccessResourceUsageException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof QueryTimeoutException) {_			QueryTimeoutException jdbcEx = (QueryTimeoutException) ex__			return new org.springframework.dao.QueryTimeoutException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof LockAcquisitionException) {_			LockAcquisitionException jdbcEx = (LockAcquisitionException) ex__			return new CannotAcquireLockException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof PessimisticLockException) {_			PessimisticLockException jdbcEx = (PessimisticLockException) ex__			return new PessimisticLockingFailureException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof ConstraintViolationException) {_			ConstraintViolationException jdbcEx = (ConstraintViolationException) ex__			return new DataIntegrityViolationException(ex.getMessage()  + "_ SQL [" + jdbcEx.getSQL() +_					"]_ constraint [" + jdbcEx.getConstraintName() + "]", ex)__		}_		if (ex instanceof DataException) {_			DataException jdbcEx = (DataException) ex__			return new DataIntegrityViolationException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		__		if (ex instanceof QueryException) {_			return new InvalidDataAccessResourceUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueObjectException) {_			return new DuplicateKeyException(ex.getMessage(), ex)__		}_		if (ex instanceof PropertyValueException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof PersistentObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof TransientObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof ObjectDeletedException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof UnresolvableObjectException) {_			UnresolvableObjectException hibEx = (UnresolvableObjectException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof WrongClassException) {_			WrongClassException hibEx = (WrongClassException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof StaleObjectStateException) {_			StaleObjectStateException hibEx = (StaleObjectStateException) ex__			return new ObjectOptimisticLockingFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex)__		}_		if (ex instanceof StaleStateException) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (optimisticLockExceptionClass.isInstance(ex)) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (pessimisticLockExceptionClass != null && pessimisticLockExceptionClass.isInstance(ex)) {_			if (ex.getCause() instanceof LockAcquisitionException) {_				return new CannotAcquireLockException(ex.getMessage(), ex.getCause())__			}_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}__		_		return new JpaSystemException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,param,ex,hibernate,exception,that,occurred,return,the,corresponding,data,access,exception,instance;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,if,ex,instanceof,jdbcconnection,exception,return,new,data,access,resource,failure,exception,ex,get,message,ex,if,ex,instanceof,sqlgrammar,exception,sqlgrammar,exception,jdbc,ex,sqlgrammar,exception,ex,return,new,invalid,data,access,resource,usage,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,timeout,exception,query,timeout,exception,jdbc,ex,query,timeout,exception,ex,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,lock,acquisition,exception,lock,acquisition,exception,jdbc,ex,lock,acquisition,exception,ex,return,new,cannot,acquire,lock,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,pessimistic,lock,exception,pessimistic,lock,exception,jdbc,ex,pessimistic,lock,exception,ex,return,new,pessimistic,locking,failure,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,constraint,violation,exception,constraint,violation,exception,jdbc,ex,constraint,violation,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,constraint,jdbc,ex,get,constraint,name,ex,if,ex,instanceof,data,exception,data,exception,jdbc,ex,data,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,exception,return,new,invalid,data,access,resource,usage,exception,ex,get,message,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,object,exception,return,new,duplicate,key,exception,ex,get,message,ex,if,ex,instanceof,property,value,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,persistent,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,transient,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,object,deleted,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,unresolvable,object,exception,unresolvable,object,exception,hib,ex,unresolvable,object,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,wrong,class,exception,wrong,class,exception,hib,ex,wrong,class,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,stale,object,state,exception,stale,object,state,exception,hib,ex,stale,object,state,exception,ex,return,new,object,optimistic,locking,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,if,ex,instanceof,stale,state,exception,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,optimistic,lock,exception,class,is,instance,ex,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,pessimistic,lock,exception,class,null,pessimistic,lock,exception,class,is,instance,ex,if,ex,get,cause,instanceof,lock,acquisition,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,get,cause,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,return,new,jpa,system,exception,ex
HibernateJpaDialect -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1426108178;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._@param ex HibernateException that occurred_@return the corresponding DataAccessException instance;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		if (ex instanceof JDBCConnectionException) {_			return new DataAccessResourceFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof SQLGrammarException) {_			SQLGrammarException jdbcEx = (SQLGrammarException) ex__			return new InvalidDataAccessResourceUsageException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof QueryTimeoutException) {_			QueryTimeoutException jdbcEx = (QueryTimeoutException) ex__			return new org.springframework.dao.QueryTimeoutException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof LockAcquisitionException) {_			LockAcquisitionException jdbcEx = (LockAcquisitionException) ex__			return new CannotAcquireLockException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof PessimisticLockException) {_			PessimisticLockException jdbcEx = (PessimisticLockException) ex__			return new PessimisticLockingFailureException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof ConstraintViolationException) {_			ConstraintViolationException jdbcEx = (ConstraintViolationException) ex__			return new DataIntegrityViolationException(ex.getMessage()  + "_ SQL [" + jdbcEx.getSQL() +_					"]_ constraint [" + jdbcEx.getConstraintName() + "]", ex)__		}_		if (ex instanceof DataException) {_			DataException jdbcEx = (DataException) ex__			return new DataIntegrityViolationException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		__		if (ex instanceof QueryException) {_			return new InvalidDataAccessResourceUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueObjectException) {_			return new DuplicateKeyException(ex.getMessage(), ex)__		}_		if (ex instanceof PropertyValueException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof PersistentObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof TransientObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof ObjectDeletedException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof UnresolvableObjectException) {_			UnresolvableObjectException hibEx = (UnresolvableObjectException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof WrongClassException) {_			WrongClassException hibEx = (WrongClassException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof StaleObjectStateException) {_			StaleObjectStateException hibEx = (StaleObjectStateException) ex__			return new ObjectOptimisticLockingFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex)__		}_		if (ex instanceof StaleStateException) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (optimisticLockExceptionClass.isInstance(ex)) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (pessimisticLockExceptionClass != null && pessimisticLockExceptionClass.isInstance(ex)) {_			if (ex.getCause() instanceof LockAcquisitionException) {_				return new CannotAcquireLockException(ex.getMessage(), ex.getCause())__			}_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}__		_		return new JpaSystemException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,param,ex,hibernate,exception,that,occurred,return,the,corresponding,data,access,exception,instance;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,if,ex,instanceof,jdbcconnection,exception,return,new,data,access,resource,failure,exception,ex,get,message,ex,if,ex,instanceof,sqlgrammar,exception,sqlgrammar,exception,jdbc,ex,sqlgrammar,exception,ex,return,new,invalid,data,access,resource,usage,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,timeout,exception,query,timeout,exception,jdbc,ex,query,timeout,exception,ex,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,lock,acquisition,exception,lock,acquisition,exception,jdbc,ex,lock,acquisition,exception,ex,return,new,cannot,acquire,lock,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,pessimistic,lock,exception,pessimistic,lock,exception,jdbc,ex,pessimistic,lock,exception,ex,return,new,pessimistic,locking,failure,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,constraint,violation,exception,constraint,violation,exception,jdbc,ex,constraint,violation,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,constraint,jdbc,ex,get,constraint,name,ex,if,ex,instanceof,data,exception,data,exception,jdbc,ex,data,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,exception,return,new,invalid,data,access,resource,usage,exception,ex,get,message,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,object,exception,return,new,duplicate,key,exception,ex,get,message,ex,if,ex,instanceof,property,value,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,persistent,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,transient,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,object,deleted,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,unresolvable,object,exception,unresolvable,object,exception,hib,ex,unresolvable,object,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,wrong,class,exception,wrong,class,exception,hib,ex,wrong,class,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,stale,object,state,exception,stale,object,state,exception,hib,ex,stale,object,state,exception,ex,return,new,object,optimistic,locking,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,if,ex,instanceof,stale,state,exception,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,optimistic,lock,exception,class,is,instance,ex,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,pessimistic,lock,exception,class,null,pessimistic,lock,exception,class,is,instance,ex,if,ex,get,cause,instanceof,lock,acquisition,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,get,cause,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,return,new,jpa,system,exception,ex
HibernateJpaDialect -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1437514747;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._@param ex HibernateException that occurred_@return the corresponding DataAccessException instance;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		if (ex instanceof JDBCConnectionException) {_			return new DataAccessResourceFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof SQLGrammarException) {_			SQLGrammarException jdbcEx = (SQLGrammarException) ex__			return new InvalidDataAccessResourceUsageException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof QueryTimeoutException) {_			QueryTimeoutException jdbcEx = (QueryTimeoutException) ex__			return new org.springframework.dao.QueryTimeoutException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof LockAcquisitionException) {_			LockAcquisitionException jdbcEx = (LockAcquisitionException) ex__			return new CannotAcquireLockException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof PessimisticLockException) {_			PessimisticLockException jdbcEx = (PessimisticLockException) ex__			return new PessimisticLockingFailureException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof ConstraintViolationException) {_			ConstraintViolationException jdbcEx = (ConstraintViolationException) ex__			return new DataIntegrityViolationException(ex.getMessage()  + "_ SQL [" + jdbcEx.getSQL() +_					"]_ constraint [" + jdbcEx.getConstraintName() + "]", ex)__		}_		if (ex instanceof DataException) {_			DataException jdbcEx = (DataException) ex__			return new DataIntegrityViolationException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		__		if (ex instanceof QueryException) {_			return new InvalidDataAccessResourceUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueObjectException) {_			return new DuplicateKeyException(ex.getMessage(), ex)__		}_		if (ex instanceof PropertyValueException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof PersistentObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof TransientObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof ObjectDeletedException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof UnresolvableObjectException) {_			UnresolvableObjectException hibEx = (UnresolvableObjectException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof WrongClassException) {_			WrongClassException hibEx = (WrongClassException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof StaleObjectStateException) {_			StaleObjectStateException hibEx = (StaleObjectStateException) ex__			return new ObjectOptimisticLockingFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex)__		}_		if (ex instanceof StaleStateException) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (optimisticLockExceptionClass.isInstance(ex)) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (pessimisticLockExceptionClass != null && pessimisticLockExceptionClass.isInstance(ex)) {_			if (ex.getCause() instanceof LockAcquisitionException) {_				return new CannotAcquireLockException(ex.getMessage(), ex.getCause())__			}_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}__		_		return new JpaSystemException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,param,ex,hibernate,exception,that,occurred,return,the,corresponding,data,access,exception,instance;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,if,ex,instanceof,jdbcconnection,exception,return,new,data,access,resource,failure,exception,ex,get,message,ex,if,ex,instanceof,sqlgrammar,exception,sqlgrammar,exception,jdbc,ex,sqlgrammar,exception,ex,return,new,invalid,data,access,resource,usage,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,timeout,exception,query,timeout,exception,jdbc,ex,query,timeout,exception,ex,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,lock,acquisition,exception,lock,acquisition,exception,jdbc,ex,lock,acquisition,exception,ex,return,new,cannot,acquire,lock,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,pessimistic,lock,exception,pessimistic,lock,exception,jdbc,ex,pessimistic,lock,exception,ex,return,new,pessimistic,locking,failure,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,constraint,violation,exception,constraint,violation,exception,jdbc,ex,constraint,violation,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,constraint,jdbc,ex,get,constraint,name,ex,if,ex,instanceof,data,exception,data,exception,jdbc,ex,data,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,exception,return,new,invalid,data,access,resource,usage,exception,ex,get,message,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,object,exception,return,new,duplicate,key,exception,ex,get,message,ex,if,ex,instanceof,property,value,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,persistent,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,transient,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,object,deleted,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,unresolvable,object,exception,unresolvable,object,exception,hib,ex,unresolvable,object,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,wrong,class,exception,wrong,class,exception,hib,ex,wrong,class,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,stale,object,state,exception,stale,object,state,exception,hib,ex,stale,object,state,exception,ex,return,new,object,optimistic,locking,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,if,ex,instanceof,stale,state,exception,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,optimistic,lock,exception,class,is,instance,ex,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,pessimistic,lock,exception,class,null,pessimistic,lock,exception,class,is,instance,ex,if,ex,get,cause,instanceof,lock,acquisition,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,get,cause,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,return,new,jpa,system,exception,ex
HibernateJpaDialect -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1440686501;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._@param ex HibernateException that occurred_@return the corresponding DataAccessException instance;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		if (ex instanceof JDBCConnectionException) {_			return new DataAccessResourceFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof SQLGrammarException) {_			SQLGrammarException jdbcEx = (SQLGrammarException) ex__			return new InvalidDataAccessResourceUsageException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof QueryTimeoutException) {_			QueryTimeoutException jdbcEx = (QueryTimeoutException) ex__			return new org.springframework.dao.QueryTimeoutException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof LockAcquisitionException) {_			LockAcquisitionException jdbcEx = (LockAcquisitionException) ex__			return new CannotAcquireLockException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof PessimisticLockException) {_			PessimisticLockException jdbcEx = (PessimisticLockException) ex__			return new PessimisticLockingFailureException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof ConstraintViolationException) {_			ConstraintViolationException jdbcEx = (ConstraintViolationException) ex__			return new DataIntegrityViolationException(ex.getMessage()  + "_ SQL [" + jdbcEx.getSQL() +_					"]_ constraint [" + jdbcEx.getConstraintName() + "]", ex)__		}_		if (ex instanceof DataException) {_			DataException jdbcEx = (DataException) ex__			return new DataIntegrityViolationException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		__		if (ex instanceof QueryException) {_			return new InvalidDataAccessResourceUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueObjectException) {_			return new DuplicateKeyException(ex.getMessage(), ex)__		}_		if (ex instanceof PropertyValueException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof PersistentObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof TransientObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof ObjectDeletedException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof UnresolvableObjectException) {_			UnresolvableObjectException hibEx = (UnresolvableObjectException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof WrongClassException) {_			WrongClassException hibEx = (WrongClassException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof StaleObjectStateException) {_			StaleObjectStateException hibEx = (StaleObjectStateException) ex__			return new ObjectOptimisticLockingFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex)__		}_		if (ex instanceof StaleStateException) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (optimisticLockExceptionClass.isInstance(ex)) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (pessimisticLockExceptionClass != null && pessimisticLockExceptionClass.isInstance(ex)) {_			if (ex.getCause() instanceof LockAcquisitionException) {_				return new CannotAcquireLockException(ex.getMessage(), ex.getCause())__			}_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}__		_		return new JpaSystemException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,param,ex,hibernate,exception,that,occurred,return,the,corresponding,data,access,exception,instance;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,if,ex,instanceof,jdbcconnection,exception,return,new,data,access,resource,failure,exception,ex,get,message,ex,if,ex,instanceof,sqlgrammar,exception,sqlgrammar,exception,jdbc,ex,sqlgrammar,exception,ex,return,new,invalid,data,access,resource,usage,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,timeout,exception,query,timeout,exception,jdbc,ex,query,timeout,exception,ex,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,lock,acquisition,exception,lock,acquisition,exception,jdbc,ex,lock,acquisition,exception,ex,return,new,cannot,acquire,lock,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,pessimistic,lock,exception,pessimistic,lock,exception,jdbc,ex,pessimistic,lock,exception,ex,return,new,pessimistic,locking,failure,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,constraint,violation,exception,constraint,violation,exception,jdbc,ex,constraint,violation,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,constraint,jdbc,ex,get,constraint,name,ex,if,ex,instanceof,data,exception,data,exception,jdbc,ex,data,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,exception,return,new,invalid,data,access,resource,usage,exception,ex,get,message,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,object,exception,return,new,duplicate,key,exception,ex,get,message,ex,if,ex,instanceof,property,value,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,persistent,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,transient,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,object,deleted,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,unresolvable,object,exception,unresolvable,object,exception,hib,ex,unresolvable,object,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,wrong,class,exception,wrong,class,exception,hib,ex,wrong,class,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,stale,object,state,exception,stale,object,state,exception,hib,ex,stale,object,state,exception,ex,return,new,object,optimistic,locking,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,if,ex,instanceof,stale,state,exception,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,optimistic,lock,exception,class,is,instance,ex,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,pessimistic,lock,exception,class,null,pessimistic,lock,exception,class,is,instance,ex,if,ex,get,cause,instanceof,lock,acquisition,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,get,cause,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,return,new,jpa,system,exception,ex
HibernateJpaDialect -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1444241178;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._@param ex HibernateException that occurred_@return the corresponding DataAccessException instance;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		if (ex instanceof JDBCConnectionException) {_			return new DataAccessResourceFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof SQLGrammarException) {_			SQLGrammarException jdbcEx = (SQLGrammarException) ex__			return new InvalidDataAccessResourceUsageException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof QueryTimeoutException) {_			QueryTimeoutException jdbcEx = (QueryTimeoutException) ex__			return new org.springframework.dao.QueryTimeoutException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof LockAcquisitionException) {_			LockAcquisitionException jdbcEx = (LockAcquisitionException) ex__			return new CannotAcquireLockException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof PessimisticLockException) {_			PessimisticLockException jdbcEx = (PessimisticLockException) ex__			return new PessimisticLockingFailureException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof ConstraintViolationException) {_			ConstraintViolationException jdbcEx = (ConstraintViolationException) ex__			return new DataIntegrityViolationException(ex.getMessage()  + "_ SQL [" + jdbcEx.getSQL() +_					"]_ constraint [" + jdbcEx.getConstraintName() + "]", ex)__		}_		if (ex instanceof DataException) {_			DataException jdbcEx = (DataException) ex__			return new DataIntegrityViolationException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		__		if (ex instanceof QueryException) {_			return new InvalidDataAccessResourceUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueObjectException) {_			return new DuplicateKeyException(ex.getMessage(), ex)__		}_		if (ex instanceof PropertyValueException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof PersistentObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof TransientObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof ObjectDeletedException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof UnresolvableObjectException) {_			UnresolvableObjectException hibEx = (UnresolvableObjectException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof WrongClassException) {_			WrongClassException hibEx = (WrongClassException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof StaleObjectStateException) {_			StaleObjectStateException hibEx = (StaleObjectStateException) ex__			return new ObjectOptimisticLockingFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex)__		}_		if (ex instanceof StaleStateException) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (optimisticLockExceptionClass.isInstance(ex)) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (pessimisticLockExceptionClass != null && pessimisticLockExceptionClass.isInstance(ex)) {_			if (ex.getCause() instanceof LockAcquisitionException) {_				return new CannotAcquireLockException(ex.getMessage(), ex.getCause())__			}_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}__		_		return new JpaSystemException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,param,ex,hibernate,exception,that,occurred,return,the,corresponding,data,access,exception,instance;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,if,ex,instanceof,jdbcconnection,exception,return,new,data,access,resource,failure,exception,ex,get,message,ex,if,ex,instanceof,sqlgrammar,exception,sqlgrammar,exception,jdbc,ex,sqlgrammar,exception,ex,return,new,invalid,data,access,resource,usage,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,timeout,exception,query,timeout,exception,jdbc,ex,query,timeout,exception,ex,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,lock,acquisition,exception,lock,acquisition,exception,jdbc,ex,lock,acquisition,exception,ex,return,new,cannot,acquire,lock,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,pessimistic,lock,exception,pessimistic,lock,exception,jdbc,ex,pessimistic,lock,exception,ex,return,new,pessimistic,locking,failure,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,constraint,violation,exception,constraint,violation,exception,jdbc,ex,constraint,violation,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,constraint,jdbc,ex,get,constraint,name,ex,if,ex,instanceof,data,exception,data,exception,jdbc,ex,data,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,exception,return,new,invalid,data,access,resource,usage,exception,ex,get,message,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,object,exception,return,new,duplicate,key,exception,ex,get,message,ex,if,ex,instanceof,property,value,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,persistent,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,transient,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,object,deleted,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,unresolvable,object,exception,unresolvable,object,exception,hib,ex,unresolvable,object,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,wrong,class,exception,wrong,class,exception,hib,ex,wrong,class,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,stale,object,state,exception,stale,object,state,exception,hib,ex,stale,object,state,exception,ex,return,new,object,optimistic,locking,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,if,ex,instanceof,stale,state,exception,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,optimistic,lock,exception,class,is,instance,ex,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,pessimistic,lock,exception,class,null,pessimistic,lock,exception,class,is,instance,ex,if,ex,get,cause,instanceof,lock,acquisition,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,get,cause,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,return,new,jpa,system,exception,ex
HibernateJpaDialect -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1464903331;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._@param ex HibernateException that occurred_@return the corresponding DataAccessException instance;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		if (ex instanceof JDBCConnectionException) {_			return new DataAccessResourceFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof SQLGrammarException) {_			SQLGrammarException jdbcEx = (SQLGrammarException) ex__			return new InvalidDataAccessResourceUsageException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof QueryTimeoutException) {_			QueryTimeoutException jdbcEx = (QueryTimeoutException) ex__			return new org.springframework.dao.QueryTimeoutException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof LockAcquisitionException) {_			LockAcquisitionException jdbcEx = (LockAcquisitionException) ex__			return new CannotAcquireLockException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof PessimisticLockException) {_			PessimisticLockException jdbcEx = (PessimisticLockException) ex__			return new PessimisticLockingFailureException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof ConstraintViolationException) {_			ConstraintViolationException jdbcEx = (ConstraintViolationException) ex__			return new DataIntegrityViolationException(ex.getMessage()  + "_ SQL [" + jdbcEx.getSQL() +_					"]_ constraint [" + jdbcEx.getConstraintName() + "]", ex)__		}_		if (ex instanceof DataException) {_			DataException jdbcEx = (DataException) ex__			return new DataIntegrityViolationException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		__		if (ex instanceof QueryException) {_			return new InvalidDataAccessResourceUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueObjectException) {_			return new DuplicateKeyException(ex.getMessage(), ex)__		}_		if (ex instanceof PropertyValueException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof PersistentObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof TransientObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof ObjectDeletedException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof UnresolvableObjectException) {_			UnresolvableObjectException hibEx = (UnresolvableObjectException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof WrongClassException) {_			WrongClassException hibEx = (WrongClassException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof StaleObjectStateException) {_			StaleObjectStateException hibEx = (StaleObjectStateException) ex__			return new ObjectOptimisticLockingFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex)__		}_		if (ex instanceof StaleStateException) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (optimisticLockExceptionClass.isInstance(ex)) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (pessimisticLockExceptionClass != null && pessimisticLockExceptionClass.isInstance(ex)) {_			if (ex.getCause() instanceof LockAcquisitionException) {_				return new CannotAcquireLockException(ex.getMessage(), ex.getCause())__			}_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}__		_		return new JpaSystemException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,param,ex,hibernate,exception,that,occurred,return,the,corresponding,data,access,exception,instance;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,if,ex,instanceof,jdbcconnection,exception,return,new,data,access,resource,failure,exception,ex,get,message,ex,if,ex,instanceof,sqlgrammar,exception,sqlgrammar,exception,jdbc,ex,sqlgrammar,exception,ex,return,new,invalid,data,access,resource,usage,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,timeout,exception,query,timeout,exception,jdbc,ex,query,timeout,exception,ex,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,lock,acquisition,exception,lock,acquisition,exception,jdbc,ex,lock,acquisition,exception,ex,return,new,cannot,acquire,lock,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,pessimistic,lock,exception,pessimistic,lock,exception,jdbc,ex,pessimistic,lock,exception,ex,return,new,pessimistic,locking,failure,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,constraint,violation,exception,constraint,violation,exception,jdbc,ex,constraint,violation,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,constraint,jdbc,ex,get,constraint,name,ex,if,ex,instanceof,data,exception,data,exception,jdbc,ex,data,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,exception,return,new,invalid,data,access,resource,usage,exception,ex,get,message,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,object,exception,return,new,duplicate,key,exception,ex,get,message,ex,if,ex,instanceof,property,value,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,persistent,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,transient,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,object,deleted,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,unresolvable,object,exception,unresolvable,object,exception,hib,ex,unresolvable,object,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,wrong,class,exception,wrong,class,exception,hib,ex,wrong,class,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,stale,object,state,exception,stale,object,state,exception,hib,ex,stale,object,state,exception,ex,return,new,object,optimistic,locking,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,if,ex,instanceof,stale,state,exception,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,optimistic,lock,exception,class,is,instance,ex,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,pessimistic,lock,exception,class,null,pessimistic,lock,exception,class,is,instance,ex,if,ex,get,cause,instanceof,lock,acquisition,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,get,cause,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,return,new,jpa,system,exception,ex
HibernateJpaDialect -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1466699049;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._@param ex HibernateException that occurred_@return the corresponding DataAccessException instance;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		if (ex instanceof JDBCConnectionException) {_			return new DataAccessResourceFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof SQLGrammarException) {_			SQLGrammarException jdbcEx = (SQLGrammarException) ex__			return new InvalidDataAccessResourceUsageException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof QueryTimeoutException) {_			QueryTimeoutException jdbcEx = (QueryTimeoutException) ex__			return new org.springframework.dao.QueryTimeoutException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof LockAcquisitionException) {_			LockAcquisitionException jdbcEx = (LockAcquisitionException) ex__			return new CannotAcquireLockException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof PessimisticLockException) {_			PessimisticLockException jdbcEx = (PessimisticLockException) ex__			return new PessimisticLockingFailureException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof ConstraintViolationException) {_			ConstraintViolationException jdbcEx = (ConstraintViolationException) ex__			return new DataIntegrityViolationException(ex.getMessage()  + "_ SQL [" + jdbcEx.getSQL() +_					"]_ constraint [" + jdbcEx.getConstraintName() + "]", ex)__		}_		if (ex instanceof DataException) {_			DataException jdbcEx = (DataException) ex__			return new DataIntegrityViolationException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		__		if (ex instanceof QueryException) {_			return new InvalidDataAccessResourceUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueObjectException) {_			return new DuplicateKeyException(ex.getMessage(), ex)__		}_		if (ex instanceof PropertyValueException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof PersistentObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof TransientObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof ObjectDeletedException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof UnresolvableObjectException) {_			UnresolvableObjectException hibEx = (UnresolvableObjectException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof WrongClassException) {_			WrongClassException hibEx = (WrongClassException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof StaleObjectStateException) {_			StaleObjectStateException hibEx = (StaleObjectStateException) ex__			return new ObjectOptimisticLockingFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex)__		}_		if (ex instanceof StaleStateException) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (optimisticLockExceptionClass.isInstance(ex)) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (pessimisticLockExceptionClass != null && pessimisticLockExceptionClass.isInstance(ex)) {_			if (ex.getCause() instanceof LockAcquisitionException) {_				return new CannotAcquireLockException(ex.getMessage(), ex.getCause())__			}_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}__		_		return new JpaSystemException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,param,ex,hibernate,exception,that,occurred,return,the,corresponding,data,access,exception,instance;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,if,ex,instanceof,jdbcconnection,exception,return,new,data,access,resource,failure,exception,ex,get,message,ex,if,ex,instanceof,sqlgrammar,exception,sqlgrammar,exception,jdbc,ex,sqlgrammar,exception,ex,return,new,invalid,data,access,resource,usage,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,timeout,exception,query,timeout,exception,jdbc,ex,query,timeout,exception,ex,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,lock,acquisition,exception,lock,acquisition,exception,jdbc,ex,lock,acquisition,exception,ex,return,new,cannot,acquire,lock,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,pessimistic,lock,exception,pessimistic,lock,exception,jdbc,ex,pessimistic,lock,exception,ex,return,new,pessimistic,locking,failure,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,constraint,violation,exception,constraint,violation,exception,jdbc,ex,constraint,violation,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,constraint,jdbc,ex,get,constraint,name,ex,if,ex,instanceof,data,exception,data,exception,jdbc,ex,data,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,exception,return,new,invalid,data,access,resource,usage,exception,ex,get,message,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,object,exception,return,new,duplicate,key,exception,ex,get,message,ex,if,ex,instanceof,property,value,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,persistent,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,transient,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,object,deleted,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,unresolvable,object,exception,unresolvable,object,exception,hib,ex,unresolvable,object,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,wrong,class,exception,wrong,class,exception,hib,ex,wrong,class,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,stale,object,state,exception,stale,object,state,exception,hib,ex,stale,object,state,exception,ex,return,new,object,optimistic,locking,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,if,ex,instanceof,stale,state,exception,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,optimistic,lock,exception,class,is,instance,ex,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,pessimistic,lock,exception,class,null,pessimistic,lock,exception,class,is,instance,ex,if,ex,get,cause,instanceof,lock,acquisition,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,get,cause,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,return,new,jpa,system,exception,ex
HibernateJpaDialect -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1466764651;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._@param ex HibernateException that occurred_@return the corresponding DataAccessException instance;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		if (ex instanceof JDBCConnectionException) {_			return new DataAccessResourceFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof SQLGrammarException) {_			SQLGrammarException jdbcEx = (SQLGrammarException) ex__			return new InvalidDataAccessResourceUsageException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof QueryTimeoutException) {_			QueryTimeoutException jdbcEx = (QueryTimeoutException) ex__			return new org.springframework.dao.QueryTimeoutException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof LockAcquisitionException) {_			LockAcquisitionException jdbcEx = (LockAcquisitionException) ex__			return new CannotAcquireLockException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof PessimisticLockException) {_			PessimisticLockException jdbcEx = (PessimisticLockException) ex__			return new PessimisticLockingFailureException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof ConstraintViolationException) {_			ConstraintViolationException jdbcEx = (ConstraintViolationException) ex__			return new DataIntegrityViolationException(ex.getMessage()  + "_ SQL [" + jdbcEx.getSQL() +_					"]_ constraint [" + jdbcEx.getConstraintName() + "]", ex)__		}_		if (ex instanceof DataException) {_			DataException jdbcEx = (DataException) ex__			return new DataIntegrityViolationException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		__		if (ex instanceof QueryException) {_			return new InvalidDataAccessResourceUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueObjectException) {_			return new DuplicateKeyException(ex.getMessage(), ex)__		}_		if (ex instanceof PropertyValueException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof PersistentObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof TransientObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof ObjectDeletedException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof UnresolvableObjectException) {_			UnresolvableObjectException hibEx = (UnresolvableObjectException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof WrongClassException) {_			WrongClassException hibEx = (WrongClassException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof StaleObjectStateException) {_			StaleObjectStateException hibEx = (StaleObjectStateException) ex__			return new ObjectOptimisticLockingFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex)__		}_		if (ex instanceof StaleStateException) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (optimisticLockExceptionClass.isInstance(ex)) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (pessimisticLockExceptionClass != null && pessimisticLockExceptionClass.isInstance(ex)) {_			if (ex.getCause() instanceof LockAcquisitionException) {_				return new CannotAcquireLockException(ex.getMessage(), ex.getCause())__			}_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}__		_		return new JpaSystemException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,param,ex,hibernate,exception,that,occurred,return,the,corresponding,data,access,exception,instance;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,if,ex,instanceof,jdbcconnection,exception,return,new,data,access,resource,failure,exception,ex,get,message,ex,if,ex,instanceof,sqlgrammar,exception,sqlgrammar,exception,jdbc,ex,sqlgrammar,exception,ex,return,new,invalid,data,access,resource,usage,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,timeout,exception,query,timeout,exception,jdbc,ex,query,timeout,exception,ex,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,lock,acquisition,exception,lock,acquisition,exception,jdbc,ex,lock,acquisition,exception,ex,return,new,cannot,acquire,lock,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,pessimistic,lock,exception,pessimistic,lock,exception,jdbc,ex,pessimistic,lock,exception,ex,return,new,pessimistic,locking,failure,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,constraint,violation,exception,constraint,violation,exception,jdbc,ex,constraint,violation,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,constraint,jdbc,ex,get,constraint,name,ex,if,ex,instanceof,data,exception,data,exception,jdbc,ex,data,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,exception,return,new,invalid,data,access,resource,usage,exception,ex,get,message,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,object,exception,return,new,duplicate,key,exception,ex,get,message,ex,if,ex,instanceof,property,value,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,persistent,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,transient,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,object,deleted,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,unresolvable,object,exception,unresolvable,object,exception,hib,ex,unresolvable,object,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,wrong,class,exception,wrong,class,exception,hib,ex,wrong,class,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,stale,object,state,exception,stale,object,state,exception,hib,ex,stale,object,state,exception,ex,return,new,object,optimistic,locking,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,if,ex,instanceof,stale,state,exception,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,optimistic,lock,exception,class,is,instance,ex,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,pessimistic,lock,exception,class,null,pessimistic,lock,exception,class,is,instance,ex,if,ex,get,cause,instanceof,lock,acquisition,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,get,cause,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,return,new,jpa,system,exception,ex
HibernateJpaDialect -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1467668243;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._@param ex HibernateException that occurred_@return the corresponding DataAccessException instance;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		if (ex instanceof JDBCConnectionException) {_			return new DataAccessResourceFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof SQLGrammarException) {_			SQLGrammarException jdbcEx = (SQLGrammarException) ex__			return new InvalidDataAccessResourceUsageException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof QueryTimeoutException) {_			QueryTimeoutException jdbcEx = (QueryTimeoutException) ex__			return new org.springframework.dao.QueryTimeoutException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof LockAcquisitionException) {_			LockAcquisitionException jdbcEx = (LockAcquisitionException) ex__			return new CannotAcquireLockException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof PessimisticLockException) {_			PessimisticLockException jdbcEx = (PessimisticLockException) ex__			return new PessimisticLockingFailureException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof ConstraintViolationException) {_			ConstraintViolationException jdbcEx = (ConstraintViolationException) ex__			return new DataIntegrityViolationException(ex.getMessage()  + "_ SQL [" + jdbcEx.getSQL() +_					"]_ constraint [" + jdbcEx.getConstraintName() + "]", ex)__		}_		if (ex instanceof DataException) {_			DataException jdbcEx = (DataException) ex__			return new DataIntegrityViolationException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		__		if (ex instanceof QueryException) {_			return new InvalidDataAccessResourceUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueObjectException) {_			return new DuplicateKeyException(ex.getMessage(), ex)__		}_		if (ex instanceof PropertyValueException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof PersistentObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof TransientObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof ObjectDeletedException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof UnresolvableObjectException) {_			UnresolvableObjectException hibEx = (UnresolvableObjectException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof WrongClassException) {_			WrongClassException hibEx = (WrongClassException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof StaleObjectStateException) {_			StaleObjectStateException hibEx = (StaleObjectStateException) ex__			return new ObjectOptimisticLockingFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex)__		}_		if (ex instanceof StaleStateException) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof OptimisticEntityLockException) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof PessimisticEntityLockException) {_			if (ex.getCause() instanceof LockAcquisitionException) {_				return new CannotAcquireLockException(ex.getMessage(), ex.getCause())__			}_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}__		_		return new JpaSystemException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,param,ex,hibernate,exception,that,occurred,return,the,corresponding,data,access,exception,instance;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,if,ex,instanceof,jdbcconnection,exception,return,new,data,access,resource,failure,exception,ex,get,message,ex,if,ex,instanceof,sqlgrammar,exception,sqlgrammar,exception,jdbc,ex,sqlgrammar,exception,ex,return,new,invalid,data,access,resource,usage,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,timeout,exception,query,timeout,exception,jdbc,ex,query,timeout,exception,ex,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,lock,acquisition,exception,lock,acquisition,exception,jdbc,ex,lock,acquisition,exception,ex,return,new,cannot,acquire,lock,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,pessimistic,lock,exception,pessimistic,lock,exception,jdbc,ex,pessimistic,lock,exception,ex,return,new,pessimistic,locking,failure,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,constraint,violation,exception,constraint,violation,exception,jdbc,ex,constraint,violation,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,constraint,jdbc,ex,get,constraint,name,ex,if,ex,instanceof,data,exception,data,exception,jdbc,ex,data,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,exception,return,new,invalid,data,access,resource,usage,exception,ex,get,message,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,object,exception,return,new,duplicate,key,exception,ex,get,message,ex,if,ex,instanceof,property,value,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,persistent,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,transient,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,object,deleted,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,unresolvable,object,exception,unresolvable,object,exception,hib,ex,unresolvable,object,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,wrong,class,exception,wrong,class,exception,hib,ex,wrong,class,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,stale,object,state,exception,stale,object,state,exception,hib,ex,stale,object,state,exception,ex,return,new,object,optimistic,locking,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,if,ex,instanceof,stale,state,exception,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,optimistic,entity,lock,exception,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,pessimistic,entity,lock,exception,if,ex,get,cause,instanceof,lock,acquisition,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,get,cause,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,return,new,jpa,system,exception,ex
HibernateJpaDialect -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1467677340;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._@param ex HibernateException that occurred_@return the corresponding DataAccessException instance;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		if (ex instanceof JDBCConnectionException) {_			return new DataAccessResourceFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof SQLGrammarException) {_			SQLGrammarException jdbcEx = (SQLGrammarException) ex__			return new InvalidDataAccessResourceUsageException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof QueryTimeoutException) {_			QueryTimeoutException jdbcEx = (QueryTimeoutException) ex__			return new org.springframework.dao.QueryTimeoutException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof LockAcquisitionException) {_			LockAcquisitionException jdbcEx = (LockAcquisitionException) ex__			return new CannotAcquireLockException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof PessimisticLockException) {_			PessimisticLockException jdbcEx = (PessimisticLockException) ex__			return new PessimisticLockingFailureException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof ConstraintViolationException) {_			ConstraintViolationException jdbcEx = (ConstraintViolationException) ex__			return new DataIntegrityViolationException(ex.getMessage()  + "_ SQL [" + jdbcEx.getSQL() +_					"]_ constraint [" + jdbcEx.getConstraintName() + "]", ex)__		}_		if (ex instanceof DataException) {_			DataException jdbcEx = (DataException) ex__			return new DataIntegrityViolationException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		__		if (ex instanceof QueryException) {_			return new InvalidDataAccessResourceUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueObjectException) {_			return new DuplicateKeyException(ex.getMessage(), ex)__		}_		if (ex instanceof PropertyValueException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof PersistentObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof TransientObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof ObjectDeletedException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof UnresolvableObjectException) {_			UnresolvableObjectException hibEx = (UnresolvableObjectException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof WrongClassException) {_			WrongClassException hibEx = (WrongClassException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof StaleObjectStateException) {_			StaleObjectStateException hibEx = (StaleObjectStateException) ex__			return new ObjectOptimisticLockingFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex)__		}_		if (ex instanceof StaleStateException) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof OptimisticEntityLockException) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof PessimisticEntityLockException) {_			if (ex.getCause() instanceof LockAcquisitionException) {_				return new CannotAcquireLockException(ex.getMessage(), ex.getCause())__			}_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}__		_		return new JpaSystemException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,param,ex,hibernate,exception,that,occurred,return,the,corresponding,data,access,exception,instance;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,if,ex,instanceof,jdbcconnection,exception,return,new,data,access,resource,failure,exception,ex,get,message,ex,if,ex,instanceof,sqlgrammar,exception,sqlgrammar,exception,jdbc,ex,sqlgrammar,exception,ex,return,new,invalid,data,access,resource,usage,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,timeout,exception,query,timeout,exception,jdbc,ex,query,timeout,exception,ex,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,lock,acquisition,exception,lock,acquisition,exception,jdbc,ex,lock,acquisition,exception,ex,return,new,cannot,acquire,lock,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,pessimistic,lock,exception,pessimistic,lock,exception,jdbc,ex,pessimistic,lock,exception,ex,return,new,pessimistic,locking,failure,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,constraint,violation,exception,constraint,violation,exception,jdbc,ex,constraint,violation,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,constraint,jdbc,ex,get,constraint,name,ex,if,ex,instanceof,data,exception,data,exception,jdbc,ex,data,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,exception,return,new,invalid,data,access,resource,usage,exception,ex,get,message,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,object,exception,return,new,duplicate,key,exception,ex,get,message,ex,if,ex,instanceof,property,value,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,persistent,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,transient,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,object,deleted,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,unresolvable,object,exception,unresolvable,object,exception,hib,ex,unresolvable,object,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,wrong,class,exception,wrong,class,exception,hib,ex,wrong,class,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,stale,object,state,exception,stale,object,state,exception,hib,ex,stale,object,state,exception,ex,return,new,object,optimistic,locking,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,if,ex,instanceof,stale,state,exception,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,optimistic,entity,lock,exception,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,pessimistic,entity,lock,exception,if,ex,get,cause,instanceof,lock,acquisition,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,get,cause,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,return,new,jpa,system,exception,ex
HibernateJpaDialect -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1485810955;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._@param ex HibernateException that occurred_@return the corresponding DataAccessException instance;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		if (ex instanceof JDBCConnectionException) {_			return new DataAccessResourceFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof SQLGrammarException) {_			SQLGrammarException jdbcEx = (SQLGrammarException) ex__			return new InvalidDataAccessResourceUsageException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof QueryTimeoutException) {_			QueryTimeoutException jdbcEx = (QueryTimeoutException) ex__			return new org.springframework.dao.QueryTimeoutException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof LockAcquisitionException) {_			LockAcquisitionException jdbcEx = (LockAcquisitionException) ex__			return new CannotAcquireLockException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof PessimisticLockException) {_			PessimisticLockException jdbcEx = (PessimisticLockException) ex__			return new PessimisticLockingFailureException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof ConstraintViolationException) {_			ConstraintViolationException jdbcEx = (ConstraintViolationException) ex__			return new DataIntegrityViolationException(ex.getMessage()  + "_ SQL [" + jdbcEx.getSQL() +_					"]_ constraint [" + jdbcEx.getConstraintName() + "]", ex)__		}_		if (ex instanceof DataException) {_			DataException jdbcEx = (DataException) ex__			return new DataIntegrityViolationException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		__		if (ex instanceof QueryException) {_			return new InvalidDataAccessResourceUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueObjectException) {_			return new DuplicateKeyException(ex.getMessage(), ex)__		}_		if (ex instanceof PropertyValueException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof PersistentObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof TransientObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof ObjectDeletedException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof UnresolvableObjectException) {_			UnresolvableObjectException hibEx = (UnresolvableObjectException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof WrongClassException) {_			WrongClassException hibEx = (WrongClassException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof StaleObjectStateException) {_			StaleObjectStateException hibEx = (StaleObjectStateException) ex__			return new ObjectOptimisticLockingFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex)__		}_		if (ex instanceof StaleStateException) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof OptimisticEntityLockException) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof PessimisticEntityLockException) {_			if (ex.getCause() instanceof LockAcquisitionException) {_				return new CannotAcquireLockException(ex.getMessage(), ex.getCause())__			}_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}__		_		return new JpaSystemException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,param,ex,hibernate,exception,that,occurred,return,the,corresponding,data,access,exception,instance;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,if,ex,instanceof,jdbcconnection,exception,return,new,data,access,resource,failure,exception,ex,get,message,ex,if,ex,instanceof,sqlgrammar,exception,sqlgrammar,exception,jdbc,ex,sqlgrammar,exception,ex,return,new,invalid,data,access,resource,usage,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,timeout,exception,query,timeout,exception,jdbc,ex,query,timeout,exception,ex,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,lock,acquisition,exception,lock,acquisition,exception,jdbc,ex,lock,acquisition,exception,ex,return,new,cannot,acquire,lock,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,pessimistic,lock,exception,pessimistic,lock,exception,jdbc,ex,pessimistic,lock,exception,ex,return,new,pessimistic,locking,failure,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,constraint,violation,exception,constraint,violation,exception,jdbc,ex,constraint,violation,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,constraint,jdbc,ex,get,constraint,name,ex,if,ex,instanceof,data,exception,data,exception,jdbc,ex,data,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,exception,return,new,invalid,data,access,resource,usage,exception,ex,get,message,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,object,exception,return,new,duplicate,key,exception,ex,get,message,ex,if,ex,instanceof,property,value,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,persistent,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,transient,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,object,deleted,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,unresolvable,object,exception,unresolvable,object,exception,hib,ex,unresolvable,object,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,wrong,class,exception,wrong,class,exception,hib,ex,wrong,class,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,stale,object,state,exception,stale,object,state,exception,hib,ex,stale,object,state,exception,ex,return,new,object,optimistic,locking,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,if,ex,instanceof,stale,state,exception,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,optimistic,entity,lock,exception,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,pessimistic,entity,lock,exception,if,ex,get,cause,instanceof,lock,acquisition,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,get,cause,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,return,new,jpa,system,exception,ex
HibernateJpaDialect -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1495868221;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._@param ex HibernateException that occurred_@return the corresponding DataAccessException instance;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		if (ex instanceof JDBCConnectionException) {_			return new DataAccessResourceFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof SQLGrammarException) {_			SQLGrammarException jdbcEx = (SQLGrammarException) ex__			return new InvalidDataAccessResourceUsageException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof QueryTimeoutException) {_			QueryTimeoutException jdbcEx = (QueryTimeoutException) ex__			return new org.springframework.dao.QueryTimeoutException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof LockAcquisitionException) {_			LockAcquisitionException jdbcEx = (LockAcquisitionException) ex__			return new CannotAcquireLockException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof PessimisticLockException) {_			PessimisticLockException jdbcEx = (PessimisticLockException) ex__			return new PessimisticLockingFailureException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof ConstraintViolationException) {_			ConstraintViolationException jdbcEx = (ConstraintViolationException) ex__			return new DataIntegrityViolationException(ex.getMessage()  + "_ SQL [" + jdbcEx.getSQL() +_					"]_ constraint [" + jdbcEx.getConstraintName() + "]", ex)__		}_		if (ex instanceof DataException) {_			DataException jdbcEx = (DataException) ex__			return new DataIntegrityViolationException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		__		if (ex instanceof QueryException) {_			return new InvalidDataAccessResourceUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueObjectException) {_			return new DuplicateKeyException(ex.getMessage(), ex)__		}_		if (ex instanceof PropertyValueException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof PersistentObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof TransientObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof ObjectDeletedException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof UnresolvableObjectException) {_			UnresolvableObjectException hibEx = (UnresolvableObjectException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof WrongClassException) {_			WrongClassException hibEx = (WrongClassException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof StaleObjectStateException) {_			StaleObjectStateException hibEx = (StaleObjectStateException) ex__			return new ObjectOptimisticLockingFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex)__		}_		if (ex instanceof StaleStateException) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof OptimisticEntityLockException) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof PessimisticEntityLockException) {_			if (ex.getCause() instanceof LockAcquisitionException) {_				return new CannotAcquireLockException(ex.getMessage(), ex.getCause())__			}_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}__		_		return new JpaSystemException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,param,ex,hibernate,exception,that,occurred,return,the,corresponding,data,access,exception,instance;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,if,ex,instanceof,jdbcconnection,exception,return,new,data,access,resource,failure,exception,ex,get,message,ex,if,ex,instanceof,sqlgrammar,exception,sqlgrammar,exception,jdbc,ex,sqlgrammar,exception,ex,return,new,invalid,data,access,resource,usage,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,timeout,exception,query,timeout,exception,jdbc,ex,query,timeout,exception,ex,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,lock,acquisition,exception,lock,acquisition,exception,jdbc,ex,lock,acquisition,exception,ex,return,new,cannot,acquire,lock,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,pessimistic,lock,exception,pessimistic,lock,exception,jdbc,ex,pessimistic,lock,exception,ex,return,new,pessimistic,locking,failure,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,constraint,violation,exception,constraint,violation,exception,jdbc,ex,constraint,violation,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,constraint,jdbc,ex,get,constraint,name,ex,if,ex,instanceof,data,exception,data,exception,jdbc,ex,data,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,exception,return,new,invalid,data,access,resource,usage,exception,ex,get,message,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,object,exception,return,new,duplicate,key,exception,ex,get,message,ex,if,ex,instanceof,property,value,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,persistent,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,transient,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,object,deleted,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,unresolvable,object,exception,unresolvable,object,exception,hib,ex,unresolvable,object,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,wrong,class,exception,wrong,class,exception,hib,ex,wrong,class,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,stale,object,state,exception,stale,object,state,exception,hib,ex,stale,object,state,exception,ex,return,new,object,optimistic,locking,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,if,ex,instanceof,stale,state,exception,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,optimistic,entity,lock,exception,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,pessimistic,entity,lock,exception,if,ex,get,cause,instanceof,lock,acquisition,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,get,cause,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,return,new,jpa,system,exception,ex
HibernateJpaDialect -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1496242568;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._@param ex HibernateException that occurred_@return the corresponding DataAccessException instance;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		if (ex instanceof JDBCConnectionException) {_			return new DataAccessResourceFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof SQLGrammarException) {_			SQLGrammarException jdbcEx = (SQLGrammarException) ex__			return new InvalidDataAccessResourceUsageException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof QueryTimeoutException) {_			QueryTimeoutException jdbcEx = (QueryTimeoutException) ex__			return new org.springframework.dao.QueryTimeoutException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof LockAcquisitionException) {_			LockAcquisitionException jdbcEx = (LockAcquisitionException) ex__			return new CannotAcquireLockException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof PessimisticLockException) {_			PessimisticLockException jdbcEx = (PessimisticLockException) ex__			return new PessimisticLockingFailureException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof ConstraintViolationException) {_			ConstraintViolationException jdbcEx = (ConstraintViolationException) ex__			return new DataIntegrityViolationException(ex.getMessage()  + "_ SQL [" + jdbcEx.getSQL() +_					"]_ constraint [" + jdbcEx.getConstraintName() + "]", ex)__		}_		if (ex instanceof DataException) {_			DataException jdbcEx = (DataException) ex__			return new DataIntegrityViolationException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		__		if (ex instanceof QueryException) {_			return new InvalidDataAccessResourceUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueObjectException) {_			return new DuplicateKeyException(ex.getMessage(), ex)__		}_		if (ex instanceof PropertyValueException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof PersistentObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof TransientObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof ObjectDeletedException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof UnresolvableObjectException) {_			UnresolvableObjectException hibEx = (UnresolvableObjectException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof WrongClassException) {_			WrongClassException hibEx = (WrongClassException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof StaleObjectStateException) {_			StaleObjectStateException hibEx = (StaleObjectStateException) ex__			return new ObjectOptimisticLockingFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex)__		}_		if (ex instanceof StaleStateException) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof OptimisticEntityLockException) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof PessimisticEntityLockException) {_			if (ex.getCause() instanceof LockAcquisitionException) {_				return new CannotAcquireLockException(ex.getMessage(), ex.getCause())__			}_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}__		_		return new JpaSystemException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,param,ex,hibernate,exception,that,occurred,return,the,corresponding,data,access,exception,instance;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,if,ex,instanceof,jdbcconnection,exception,return,new,data,access,resource,failure,exception,ex,get,message,ex,if,ex,instanceof,sqlgrammar,exception,sqlgrammar,exception,jdbc,ex,sqlgrammar,exception,ex,return,new,invalid,data,access,resource,usage,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,timeout,exception,query,timeout,exception,jdbc,ex,query,timeout,exception,ex,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,lock,acquisition,exception,lock,acquisition,exception,jdbc,ex,lock,acquisition,exception,ex,return,new,cannot,acquire,lock,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,pessimistic,lock,exception,pessimistic,lock,exception,jdbc,ex,pessimistic,lock,exception,ex,return,new,pessimistic,locking,failure,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,constraint,violation,exception,constraint,violation,exception,jdbc,ex,constraint,violation,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,constraint,jdbc,ex,get,constraint,name,ex,if,ex,instanceof,data,exception,data,exception,jdbc,ex,data,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,exception,return,new,invalid,data,access,resource,usage,exception,ex,get,message,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,object,exception,return,new,duplicate,key,exception,ex,get,message,ex,if,ex,instanceof,property,value,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,persistent,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,transient,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,object,deleted,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,unresolvable,object,exception,unresolvable,object,exception,hib,ex,unresolvable,object,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,wrong,class,exception,wrong,class,exception,hib,ex,wrong,class,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,stale,object,state,exception,stale,object,state,exception,hib,ex,stale,object,state,exception,ex,return,new,object,optimistic,locking,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,if,ex,instanceof,stale,state,exception,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,optimistic,entity,lock,exception,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,pessimistic,entity,lock,exception,if,ex,get,cause,instanceof,lock,acquisition,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,get,cause,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,return,new,jpa,system,exception,ex
HibernateJpaDialect -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1496259743;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._@param ex HibernateException that occurred_@return the corresponding DataAccessException instance;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		if (ex instanceof JDBCConnectionException) {_			return new DataAccessResourceFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof SQLGrammarException) {_			SQLGrammarException jdbcEx = (SQLGrammarException) ex__			return new InvalidDataAccessResourceUsageException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof QueryTimeoutException) {_			QueryTimeoutException jdbcEx = (QueryTimeoutException) ex__			return new org.springframework.dao.QueryTimeoutException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof LockAcquisitionException) {_			LockAcquisitionException jdbcEx = (LockAcquisitionException) ex__			return new CannotAcquireLockException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof PessimisticLockException) {_			PessimisticLockException jdbcEx = (PessimisticLockException) ex__			return new PessimisticLockingFailureException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof ConstraintViolationException) {_			ConstraintViolationException jdbcEx = (ConstraintViolationException) ex__			return new DataIntegrityViolationException(ex.getMessage()  + "_ SQL [" + jdbcEx.getSQL() +_					"]_ constraint [" + jdbcEx.getConstraintName() + "]", ex)__		}_		if (ex instanceof DataException) {_			DataException jdbcEx = (DataException) ex__			return new DataIntegrityViolationException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		__		if (ex instanceof QueryException) {_			return new InvalidDataAccessResourceUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueObjectException) {_			return new DuplicateKeyException(ex.getMessage(), ex)__		}_		if (ex instanceof PropertyValueException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof PersistentObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof TransientObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof ObjectDeletedException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof UnresolvableObjectException) {_			UnresolvableObjectException hibEx = (UnresolvableObjectException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof WrongClassException) {_			WrongClassException hibEx = (WrongClassException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof StaleObjectStateException) {_			StaleObjectStateException hibEx = (StaleObjectStateException) ex__			return new ObjectOptimisticLockingFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex)__		}_		if (ex instanceof StaleStateException) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof OptimisticEntityLockException) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof PessimisticEntityLockException) {_			if (ex.getCause() instanceof LockAcquisitionException) {_				return new CannotAcquireLockException(ex.getMessage(), ex.getCause())__			}_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}__		_		return new JpaSystemException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,param,ex,hibernate,exception,that,occurred,return,the,corresponding,data,access,exception,instance;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,if,ex,instanceof,jdbcconnection,exception,return,new,data,access,resource,failure,exception,ex,get,message,ex,if,ex,instanceof,sqlgrammar,exception,sqlgrammar,exception,jdbc,ex,sqlgrammar,exception,ex,return,new,invalid,data,access,resource,usage,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,timeout,exception,query,timeout,exception,jdbc,ex,query,timeout,exception,ex,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,lock,acquisition,exception,lock,acquisition,exception,jdbc,ex,lock,acquisition,exception,ex,return,new,cannot,acquire,lock,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,pessimistic,lock,exception,pessimistic,lock,exception,jdbc,ex,pessimistic,lock,exception,ex,return,new,pessimistic,locking,failure,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,constraint,violation,exception,constraint,violation,exception,jdbc,ex,constraint,violation,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,constraint,jdbc,ex,get,constraint,name,ex,if,ex,instanceof,data,exception,data,exception,jdbc,ex,data,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,exception,return,new,invalid,data,access,resource,usage,exception,ex,get,message,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,object,exception,return,new,duplicate,key,exception,ex,get,message,ex,if,ex,instanceof,property,value,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,persistent,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,transient,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,object,deleted,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,unresolvable,object,exception,unresolvable,object,exception,hib,ex,unresolvable,object,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,wrong,class,exception,wrong,class,exception,hib,ex,wrong,class,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,stale,object,state,exception,stale,object,state,exception,hib,ex,stale,object,state,exception,ex,return,new,object,optimistic,locking,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,if,ex,instanceof,stale,state,exception,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,optimistic,entity,lock,exception,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,pessimistic,entity,lock,exception,if,ex,get,cause,instanceof,lock,acquisition,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,get,cause,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,return,new,jpa,system,exception,ex
HibernateJpaDialect -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1496837955;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._@param ex HibernateException that occurred_@return the corresponding DataAccessException instance;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		if (ex instanceof JDBCConnectionException) {_			return new DataAccessResourceFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof SQLGrammarException) {_			SQLGrammarException jdbcEx = (SQLGrammarException) ex__			return new InvalidDataAccessResourceUsageException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof QueryTimeoutException) {_			QueryTimeoutException jdbcEx = (QueryTimeoutException) ex__			return new org.springframework.dao.QueryTimeoutException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof LockAcquisitionException) {_			LockAcquisitionException jdbcEx = (LockAcquisitionException) ex__			return new CannotAcquireLockException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof PessimisticLockException) {_			PessimisticLockException jdbcEx = (PessimisticLockException) ex__			return new PessimisticLockingFailureException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof ConstraintViolationException) {_			ConstraintViolationException jdbcEx = (ConstraintViolationException) ex__			return new DataIntegrityViolationException(ex.getMessage()  + "_ SQL [" + jdbcEx.getSQL() +_					"]_ constraint [" + jdbcEx.getConstraintName() + "]", ex)__		}_		if (ex instanceof DataException) {_			DataException jdbcEx = (DataException) ex__			return new DataIntegrityViolationException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		__		if (ex instanceof QueryException) {_			return new InvalidDataAccessResourceUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueObjectException) {_			return new DuplicateKeyException(ex.getMessage(), ex)__		}_		if (ex instanceof PropertyValueException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof PersistentObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof TransientObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof ObjectDeletedException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof UnresolvableObjectException) {_			UnresolvableObjectException hibEx = (UnresolvableObjectException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof WrongClassException) {_			WrongClassException hibEx = (WrongClassException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof StaleObjectStateException) {_			StaleObjectStateException hibEx = (StaleObjectStateException) ex__			return new ObjectOptimisticLockingFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex)__		}_		if (ex instanceof StaleStateException) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof OptimisticEntityLockException) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof PessimisticEntityLockException) {_			if (ex.getCause() instanceof LockAcquisitionException) {_				return new CannotAcquireLockException(ex.getMessage(), ex.getCause())__			}_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}__		_		return new JpaSystemException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,param,ex,hibernate,exception,that,occurred,return,the,corresponding,data,access,exception,instance;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,if,ex,instanceof,jdbcconnection,exception,return,new,data,access,resource,failure,exception,ex,get,message,ex,if,ex,instanceof,sqlgrammar,exception,sqlgrammar,exception,jdbc,ex,sqlgrammar,exception,ex,return,new,invalid,data,access,resource,usage,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,timeout,exception,query,timeout,exception,jdbc,ex,query,timeout,exception,ex,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,lock,acquisition,exception,lock,acquisition,exception,jdbc,ex,lock,acquisition,exception,ex,return,new,cannot,acquire,lock,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,pessimistic,lock,exception,pessimistic,lock,exception,jdbc,ex,pessimistic,lock,exception,ex,return,new,pessimistic,locking,failure,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,constraint,violation,exception,constraint,violation,exception,jdbc,ex,constraint,violation,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,constraint,jdbc,ex,get,constraint,name,ex,if,ex,instanceof,data,exception,data,exception,jdbc,ex,data,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,exception,return,new,invalid,data,access,resource,usage,exception,ex,get,message,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,object,exception,return,new,duplicate,key,exception,ex,get,message,ex,if,ex,instanceof,property,value,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,persistent,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,transient,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,object,deleted,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,unresolvable,object,exception,unresolvable,object,exception,hib,ex,unresolvable,object,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,wrong,class,exception,wrong,class,exception,hib,ex,wrong,class,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,stale,object,state,exception,stale,object,state,exception,hib,ex,stale,object,state,exception,ex,return,new,object,optimistic,locking,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,if,ex,instanceof,stale,state,exception,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,optimistic,entity,lock,exception,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,pessimistic,entity,lock,exception,if,ex,get,cause,instanceof,lock,acquisition,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,get,cause,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,return,new,jpa,system,exception,ex
HibernateJpaDialect -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1498780456;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._@param ex HibernateException that occurred_@return the corresponding DataAccessException instance;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		if (ex instanceof JDBCConnectionException) {_			return new DataAccessResourceFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof SQLGrammarException) {_			SQLGrammarException jdbcEx = (SQLGrammarException) ex__			return new InvalidDataAccessResourceUsageException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof QueryTimeoutException) {_			QueryTimeoutException jdbcEx = (QueryTimeoutException) ex__			return new org.springframework.dao.QueryTimeoutException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof LockAcquisitionException) {_			LockAcquisitionException jdbcEx = (LockAcquisitionException) ex__			return new CannotAcquireLockException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof PessimisticLockException) {_			PessimisticLockException jdbcEx = (PessimisticLockException) ex__			return new PessimisticLockingFailureException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof ConstraintViolationException) {_			ConstraintViolationException jdbcEx = (ConstraintViolationException) ex__			return new DataIntegrityViolationException(ex.getMessage()  + "_ SQL [" + jdbcEx.getSQL() +_					"]_ constraint [" + jdbcEx.getConstraintName() + "]", ex)__		}_		if (ex instanceof DataException) {_			DataException jdbcEx = (DataException) ex__			return new DataIntegrityViolationException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		__		if (ex instanceof QueryException) {_			return new InvalidDataAccessResourceUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueObjectException) {_			return new DuplicateKeyException(ex.getMessage(), ex)__		}_		if (ex instanceof PropertyValueException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof PersistentObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof TransientObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof ObjectDeletedException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof UnresolvableObjectException) {_			UnresolvableObjectException hibEx = (UnresolvableObjectException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof WrongClassException) {_			WrongClassException hibEx = (WrongClassException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof StaleObjectStateException) {_			StaleObjectStateException hibEx = (StaleObjectStateException) ex__			return new ObjectOptimisticLockingFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex)__		}_		if (ex instanceof StaleStateException) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof OptimisticEntityLockException) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof PessimisticEntityLockException) {_			if (ex.getCause() instanceof LockAcquisitionException) {_				return new CannotAcquireLockException(ex.getMessage(), ex.getCause())__			}_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}__		_		return new JpaSystemException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,param,ex,hibernate,exception,that,occurred,return,the,corresponding,data,access,exception,instance;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,if,ex,instanceof,jdbcconnection,exception,return,new,data,access,resource,failure,exception,ex,get,message,ex,if,ex,instanceof,sqlgrammar,exception,sqlgrammar,exception,jdbc,ex,sqlgrammar,exception,ex,return,new,invalid,data,access,resource,usage,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,timeout,exception,query,timeout,exception,jdbc,ex,query,timeout,exception,ex,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,lock,acquisition,exception,lock,acquisition,exception,jdbc,ex,lock,acquisition,exception,ex,return,new,cannot,acquire,lock,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,pessimistic,lock,exception,pessimistic,lock,exception,jdbc,ex,pessimistic,lock,exception,ex,return,new,pessimistic,locking,failure,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,constraint,violation,exception,constraint,violation,exception,jdbc,ex,constraint,violation,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,constraint,jdbc,ex,get,constraint,name,ex,if,ex,instanceof,data,exception,data,exception,jdbc,ex,data,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,exception,return,new,invalid,data,access,resource,usage,exception,ex,get,message,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,object,exception,return,new,duplicate,key,exception,ex,get,message,ex,if,ex,instanceof,property,value,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,persistent,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,transient,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,object,deleted,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,unresolvable,object,exception,unresolvable,object,exception,hib,ex,unresolvable,object,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,wrong,class,exception,wrong,class,exception,hib,ex,wrong,class,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,stale,object,state,exception,stale,object,state,exception,hib,ex,stale,object,state,exception,ex,return,new,object,optimistic,locking,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,if,ex,instanceof,stale,state,exception,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,optimistic,entity,lock,exception,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,pessimistic,entity,lock,exception,if,ex,get,cause,instanceof,lock,acquisition,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,get,cause,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,return,new,jpa,system,exception,ex
HibernateJpaDialect -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1500495740;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._@param ex HibernateException that occurred_@return the corresponding DataAccessException instance;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		if (ex instanceof JDBCConnectionException) {_			return new DataAccessResourceFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof SQLGrammarException) {_			SQLGrammarException jdbcEx = (SQLGrammarException) ex__			return new InvalidDataAccessResourceUsageException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof QueryTimeoutException) {_			QueryTimeoutException jdbcEx = (QueryTimeoutException) ex__			return new org.springframework.dao.QueryTimeoutException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof LockAcquisitionException) {_			LockAcquisitionException jdbcEx = (LockAcquisitionException) ex__			return new CannotAcquireLockException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof PessimisticLockException) {_			PessimisticLockException jdbcEx = (PessimisticLockException) ex__			return new PessimisticLockingFailureException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof ConstraintViolationException) {_			ConstraintViolationException jdbcEx = (ConstraintViolationException) ex__			return new DataIntegrityViolationException(ex.getMessage()  + "_ SQL [" + jdbcEx.getSQL() +_					"]_ constraint [" + jdbcEx.getConstraintName() + "]", ex)__		}_		if (ex instanceof DataException) {_			DataException jdbcEx = (DataException) ex__			return new DataIntegrityViolationException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		__		if (ex instanceof QueryException) {_			return new InvalidDataAccessResourceUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueObjectException) {_			return new DuplicateKeyException(ex.getMessage(), ex)__		}_		if (ex instanceof PropertyValueException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof PersistentObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof TransientObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof ObjectDeletedException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof UnresolvableObjectException) {_			UnresolvableObjectException hibEx = (UnresolvableObjectException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof WrongClassException) {_			WrongClassException hibEx = (WrongClassException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof StaleObjectStateException) {_			StaleObjectStateException hibEx = (StaleObjectStateException) ex__			return new ObjectOptimisticLockingFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex)__		}_		if (ex instanceof StaleStateException) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof OptimisticEntityLockException) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof PessimisticEntityLockException) {_			if (ex.getCause() instanceof LockAcquisitionException) {_				return new CannotAcquireLockException(ex.getMessage(), ex.getCause())__			}_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}__		_		return new JpaSystemException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,param,ex,hibernate,exception,that,occurred,return,the,corresponding,data,access,exception,instance;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,if,ex,instanceof,jdbcconnection,exception,return,new,data,access,resource,failure,exception,ex,get,message,ex,if,ex,instanceof,sqlgrammar,exception,sqlgrammar,exception,jdbc,ex,sqlgrammar,exception,ex,return,new,invalid,data,access,resource,usage,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,timeout,exception,query,timeout,exception,jdbc,ex,query,timeout,exception,ex,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,lock,acquisition,exception,lock,acquisition,exception,jdbc,ex,lock,acquisition,exception,ex,return,new,cannot,acquire,lock,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,pessimistic,lock,exception,pessimistic,lock,exception,jdbc,ex,pessimistic,lock,exception,ex,return,new,pessimistic,locking,failure,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,constraint,violation,exception,constraint,violation,exception,jdbc,ex,constraint,violation,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,constraint,jdbc,ex,get,constraint,name,ex,if,ex,instanceof,data,exception,data,exception,jdbc,ex,data,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,exception,return,new,invalid,data,access,resource,usage,exception,ex,get,message,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,object,exception,return,new,duplicate,key,exception,ex,get,message,ex,if,ex,instanceof,property,value,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,persistent,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,transient,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,object,deleted,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,unresolvable,object,exception,unresolvable,object,exception,hib,ex,unresolvable,object,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,wrong,class,exception,wrong,class,exception,hib,ex,wrong,class,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,stale,object,state,exception,stale,object,state,exception,hib,ex,stale,object,state,exception,ex,return,new,object,optimistic,locking,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,if,ex,instanceof,stale,state,exception,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,optimistic,entity,lock,exception,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,pessimistic,entity,lock,exception,if,ex,get,cause,instanceof,lock,acquisition,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,get,cause,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,return,new,jpa,system,exception,ex
HibernateJpaDialect -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1502974979;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._@param ex HibernateException that occurred_@return the corresponding DataAccessException instance;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		if (ex instanceof JDBCConnectionException) {_			return new DataAccessResourceFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof SQLGrammarException) {_			SQLGrammarException jdbcEx = (SQLGrammarException) ex__			return new InvalidDataAccessResourceUsageException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof QueryTimeoutException) {_			QueryTimeoutException jdbcEx = (QueryTimeoutException) ex__			return new org.springframework.dao.QueryTimeoutException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof LockAcquisitionException) {_			LockAcquisitionException jdbcEx = (LockAcquisitionException) ex__			return new CannotAcquireLockException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof PessimisticLockException) {_			PessimisticLockException jdbcEx = (PessimisticLockException) ex__			return new PessimisticLockingFailureException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof ConstraintViolationException) {_			ConstraintViolationException jdbcEx = (ConstraintViolationException) ex__			return new DataIntegrityViolationException(ex.getMessage()  + "_ SQL [" + jdbcEx.getSQL() +_					"]_ constraint [" + jdbcEx.getConstraintName() + "]", ex)__		}_		if (ex instanceof DataException) {_			DataException jdbcEx = (DataException) ex__			return new DataIntegrityViolationException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		__		if (ex instanceof QueryException) {_			return new InvalidDataAccessResourceUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueObjectException) {_			return new DuplicateKeyException(ex.getMessage(), ex)__		}_		if (ex instanceof PropertyValueException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof PersistentObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof TransientObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof ObjectDeletedException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof UnresolvableObjectException) {_			UnresolvableObjectException hibEx = (UnresolvableObjectException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof WrongClassException) {_			WrongClassException hibEx = (WrongClassException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof StaleObjectStateException) {_			StaleObjectStateException hibEx = (StaleObjectStateException) ex__			return new ObjectOptimisticLockingFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex)__		}_		if (ex instanceof StaleStateException) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof OptimisticEntityLockException) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof PessimisticEntityLockException) {_			if (ex.getCause() instanceof LockAcquisitionException) {_				return new CannotAcquireLockException(ex.getMessage(), ex.getCause())__			}_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}__		_		return new JpaSystemException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,param,ex,hibernate,exception,that,occurred,return,the,corresponding,data,access,exception,instance;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,if,ex,instanceof,jdbcconnection,exception,return,new,data,access,resource,failure,exception,ex,get,message,ex,if,ex,instanceof,sqlgrammar,exception,sqlgrammar,exception,jdbc,ex,sqlgrammar,exception,ex,return,new,invalid,data,access,resource,usage,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,timeout,exception,query,timeout,exception,jdbc,ex,query,timeout,exception,ex,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,lock,acquisition,exception,lock,acquisition,exception,jdbc,ex,lock,acquisition,exception,ex,return,new,cannot,acquire,lock,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,pessimistic,lock,exception,pessimistic,lock,exception,jdbc,ex,pessimistic,lock,exception,ex,return,new,pessimistic,locking,failure,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,constraint,violation,exception,constraint,violation,exception,jdbc,ex,constraint,violation,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,constraint,jdbc,ex,get,constraint,name,ex,if,ex,instanceof,data,exception,data,exception,jdbc,ex,data,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,exception,return,new,invalid,data,access,resource,usage,exception,ex,get,message,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,object,exception,return,new,duplicate,key,exception,ex,get,message,ex,if,ex,instanceof,property,value,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,persistent,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,transient,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,object,deleted,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,unresolvable,object,exception,unresolvable,object,exception,hib,ex,unresolvable,object,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,wrong,class,exception,wrong,class,exception,hib,ex,wrong,class,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,stale,object,state,exception,stale,object,state,exception,hib,ex,stale,object,state,exception,ex,return,new,object,optimistic,locking,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,if,ex,instanceof,stale,state,exception,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,optimistic,entity,lock,exception,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,pessimistic,entity,lock,exception,if,ex,get,cause,instanceof,lock,acquisition,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,get,cause,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,return,new,jpa,system,exception,ex
HibernateJpaDialect -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1530174524;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._@param ex the HibernateException that occurred_@return the corresponding DataAccessException instance;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		if (ex instanceof JDBCConnectionException) {_			return new DataAccessResourceFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof SQLGrammarException) {_			SQLGrammarException jdbcEx = (SQLGrammarException) ex__			return new InvalidDataAccessResourceUsageException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof QueryTimeoutException) {_			QueryTimeoutException jdbcEx = (QueryTimeoutException) ex__			return new org.springframework.dao.QueryTimeoutException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof LockAcquisitionException) {_			LockAcquisitionException jdbcEx = (LockAcquisitionException) ex__			return new CannotAcquireLockException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof PessimisticLockException) {_			PessimisticLockException jdbcEx = (PessimisticLockException) ex__			return new PessimisticLockingFailureException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof ConstraintViolationException) {_			ConstraintViolationException jdbcEx = (ConstraintViolationException) ex__			return new DataIntegrityViolationException(ex.getMessage()  + "_ SQL [" + jdbcEx.getSQL() +_					"]_ constraint [" + jdbcEx.getConstraintName() + "]", ex)__		}_		if (ex instanceof DataException) {_			DataException jdbcEx = (DataException) ex__			return new DataIntegrityViolationException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		__		if (ex instanceof QueryException) {_			return new InvalidDataAccessResourceUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueObjectException) {_			return new DuplicateKeyException(ex.getMessage(), ex)__		}_		if (ex instanceof PropertyValueException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof PersistentObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof TransientObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof ObjectDeletedException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof UnresolvableObjectException) {_			UnresolvableObjectException hibEx = (UnresolvableObjectException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof WrongClassException) {_			WrongClassException hibEx = (WrongClassException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof StaleObjectStateException) {_			StaleObjectStateException hibEx = (StaleObjectStateException) ex__			return new ObjectOptimisticLockingFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex)__		}_		if (ex instanceof StaleStateException) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof OptimisticEntityLockException) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof PessimisticEntityLockException) {_			if (ex.getCause() instanceof LockAcquisitionException) {_				return new CannotAcquireLockException(ex.getMessage(), ex.getCause())__			}_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}__		_		return new JpaSystemException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,param,ex,the,hibernate,exception,that,occurred,return,the,corresponding,data,access,exception,instance;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,if,ex,instanceof,jdbcconnection,exception,return,new,data,access,resource,failure,exception,ex,get,message,ex,if,ex,instanceof,sqlgrammar,exception,sqlgrammar,exception,jdbc,ex,sqlgrammar,exception,ex,return,new,invalid,data,access,resource,usage,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,timeout,exception,query,timeout,exception,jdbc,ex,query,timeout,exception,ex,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,lock,acquisition,exception,lock,acquisition,exception,jdbc,ex,lock,acquisition,exception,ex,return,new,cannot,acquire,lock,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,pessimistic,lock,exception,pessimistic,lock,exception,jdbc,ex,pessimistic,lock,exception,ex,return,new,pessimistic,locking,failure,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,constraint,violation,exception,constraint,violation,exception,jdbc,ex,constraint,violation,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,constraint,jdbc,ex,get,constraint,name,ex,if,ex,instanceof,data,exception,data,exception,jdbc,ex,data,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,exception,return,new,invalid,data,access,resource,usage,exception,ex,get,message,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,object,exception,return,new,duplicate,key,exception,ex,get,message,ex,if,ex,instanceof,property,value,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,persistent,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,transient,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,object,deleted,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,unresolvable,object,exception,unresolvable,object,exception,hib,ex,unresolvable,object,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,wrong,class,exception,wrong,class,exception,hib,ex,wrong,class,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,stale,object,state,exception,stale,object,state,exception,hib,ex,stale,object,state,exception,ex,return,new,object,optimistic,locking,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,if,ex,instanceof,stale,state,exception,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,optimistic,entity,lock,exception,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,pessimistic,entity,lock,exception,if,ex,get,cause,instanceof,lock,acquisition,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,get,cause,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,return,new,jpa,system,exception,ex
HibernateJpaDialect -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1530791615;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._@param ex the HibernateException that occurred_@return the corresponding DataAccessException instance;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		if (ex instanceof JDBCConnectionException) {_			return new DataAccessResourceFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof SQLGrammarException) {_			SQLGrammarException jdbcEx = (SQLGrammarException) ex__			return new InvalidDataAccessResourceUsageException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof QueryTimeoutException) {_			QueryTimeoutException jdbcEx = (QueryTimeoutException) ex__			return new org.springframework.dao.QueryTimeoutException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof LockAcquisitionException) {_			LockAcquisitionException jdbcEx = (LockAcquisitionException) ex__			return new CannotAcquireLockException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof PessimisticLockException) {_			PessimisticLockException jdbcEx = (PessimisticLockException) ex__			return new PessimisticLockingFailureException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof ConstraintViolationException) {_			ConstraintViolationException jdbcEx = (ConstraintViolationException) ex__			return new DataIntegrityViolationException(ex.getMessage()  + "_ SQL [" + jdbcEx.getSQL() +_					"]_ constraint [" + jdbcEx.getConstraintName() + "]", ex)__		}_		if (ex instanceof DataException) {_			DataException jdbcEx = (DataException) ex__			return new DataIntegrityViolationException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		__		if (ex instanceof QueryException) {_			return new InvalidDataAccessResourceUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueObjectException) {_			return new DuplicateKeyException(ex.getMessage(), ex)__		}_		if (ex instanceof PropertyValueException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof PersistentObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof TransientObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof ObjectDeletedException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof UnresolvableObjectException) {_			UnresolvableObjectException hibEx = (UnresolvableObjectException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof WrongClassException) {_			WrongClassException hibEx = (WrongClassException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof StaleObjectStateException) {_			StaleObjectStateException hibEx = (StaleObjectStateException) ex__			return new ObjectOptimisticLockingFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex)__		}_		if (ex instanceof StaleStateException) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof OptimisticEntityLockException) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof PessimisticEntityLockException) {_			if (ex.getCause() instanceof LockAcquisitionException) {_				return new CannotAcquireLockException(ex.getMessage(), ex.getCause())__			}_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}__		_		return new JpaSystemException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,param,ex,the,hibernate,exception,that,occurred,return,the,corresponding,data,access,exception,instance;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,if,ex,instanceof,jdbcconnection,exception,return,new,data,access,resource,failure,exception,ex,get,message,ex,if,ex,instanceof,sqlgrammar,exception,sqlgrammar,exception,jdbc,ex,sqlgrammar,exception,ex,return,new,invalid,data,access,resource,usage,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,timeout,exception,query,timeout,exception,jdbc,ex,query,timeout,exception,ex,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,lock,acquisition,exception,lock,acquisition,exception,jdbc,ex,lock,acquisition,exception,ex,return,new,cannot,acquire,lock,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,pessimistic,lock,exception,pessimistic,lock,exception,jdbc,ex,pessimistic,lock,exception,ex,return,new,pessimistic,locking,failure,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,constraint,violation,exception,constraint,violation,exception,jdbc,ex,constraint,violation,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,constraint,jdbc,ex,get,constraint,name,ex,if,ex,instanceof,data,exception,data,exception,jdbc,ex,data,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,exception,return,new,invalid,data,access,resource,usage,exception,ex,get,message,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,object,exception,return,new,duplicate,key,exception,ex,get,message,ex,if,ex,instanceof,property,value,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,persistent,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,transient,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,object,deleted,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,unresolvable,object,exception,unresolvable,object,exception,hib,ex,unresolvable,object,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,wrong,class,exception,wrong,class,exception,hib,ex,wrong,class,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,stale,object,state,exception,stale,object,state,exception,hib,ex,stale,object,state,exception,ex,return,new,object,optimistic,locking,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,if,ex,instanceof,stale,state,exception,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,optimistic,entity,lock,exception,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,pessimistic,entity,lock,exception,if,ex,get,cause,instanceof,lock,acquisition,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,get,cause,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,return,new,jpa,system,exception,ex
HibernateJpaDialect -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1531144356;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._@param ex the HibernateException that occurred_@return the corresponding DataAccessException instance;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		if (this.jdbcExceptionTranslator != null && ex instanceof JDBCException) {_			JDBCException jdbcEx = (JDBCException) ex__			DataAccessException dae = this.jdbcExceptionTranslator.translate(_					"Hibernate operation: " + jdbcEx.getMessage(), jdbcEx.getSQL(), jdbcEx.getSQLException())__			if (dae != null) {_				throw dae__			}_		}__		if (ex instanceof JDBCConnectionException) {_			return new DataAccessResourceFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof SQLGrammarException) {_			SQLGrammarException jdbcEx = (SQLGrammarException) ex__			return new InvalidDataAccessResourceUsageException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof QueryTimeoutException) {_			QueryTimeoutException jdbcEx = (QueryTimeoutException) ex__			return new org.springframework.dao.QueryTimeoutException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof LockAcquisitionException) {_			LockAcquisitionException jdbcEx = (LockAcquisitionException) ex__			return new CannotAcquireLockException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof PessimisticLockException) {_			PessimisticLockException jdbcEx = (PessimisticLockException) ex__			return new PessimisticLockingFailureException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof ConstraintViolationException) {_			ConstraintViolationException jdbcEx = (ConstraintViolationException) ex__			return new DataIntegrityViolationException(ex.getMessage()  + "_ SQL [" + jdbcEx.getSQL() +_					"]_ constraint [" + jdbcEx.getConstraintName() + "]", ex)__		}_		if (ex instanceof DataException) {_			DataException jdbcEx = (DataException) ex__			return new DataIntegrityViolationException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		__		if (ex instanceof QueryException) {_			return new InvalidDataAccessResourceUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueObjectException) {_			return new DuplicateKeyException(ex.getMessage(), ex)__		}_		if (ex instanceof PropertyValueException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof PersistentObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof TransientObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof ObjectDeletedException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof UnresolvableObjectException) {_			UnresolvableObjectException hibEx = (UnresolvableObjectException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof WrongClassException) {_			WrongClassException hibEx = (WrongClassException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof StaleObjectStateException) {_			StaleObjectStateException hibEx = (StaleObjectStateException) ex__			return new ObjectOptimisticLockingFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex)__		}_		if (ex instanceof StaleStateException) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof OptimisticEntityLockException) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof PessimisticEntityLockException) {_			if (ex.getCause() instanceof LockAcquisitionException) {_				return new CannotAcquireLockException(ex.getMessage(), ex.getCause())__			}_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}__		_		return new JpaSystemException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,param,ex,the,hibernate,exception,that,occurred,return,the,corresponding,data,access,exception,instance;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,if,this,jdbc,exception,translator,null,ex,instanceof,jdbcexception,jdbcexception,jdbc,ex,jdbcexception,ex,data,access,exception,dae,this,jdbc,exception,translator,translate,hibernate,operation,jdbc,ex,get,message,jdbc,ex,get,sql,jdbc,ex,get,sqlexception,if,dae,null,throw,dae,if,ex,instanceof,jdbcconnection,exception,return,new,data,access,resource,failure,exception,ex,get,message,ex,if,ex,instanceof,sqlgrammar,exception,sqlgrammar,exception,jdbc,ex,sqlgrammar,exception,ex,return,new,invalid,data,access,resource,usage,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,timeout,exception,query,timeout,exception,jdbc,ex,query,timeout,exception,ex,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,lock,acquisition,exception,lock,acquisition,exception,jdbc,ex,lock,acquisition,exception,ex,return,new,cannot,acquire,lock,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,pessimistic,lock,exception,pessimistic,lock,exception,jdbc,ex,pessimistic,lock,exception,ex,return,new,pessimistic,locking,failure,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,constraint,violation,exception,constraint,violation,exception,jdbc,ex,constraint,violation,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,constraint,jdbc,ex,get,constraint,name,ex,if,ex,instanceof,data,exception,data,exception,jdbc,ex,data,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,exception,return,new,invalid,data,access,resource,usage,exception,ex,get,message,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,object,exception,return,new,duplicate,key,exception,ex,get,message,ex,if,ex,instanceof,property,value,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,persistent,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,transient,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,object,deleted,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,unresolvable,object,exception,unresolvable,object,exception,hib,ex,unresolvable,object,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,wrong,class,exception,wrong,class,exception,hib,ex,wrong,class,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,stale,object,state,exception,stale,object,state,exception,hib,ex,stale,object,state,exception,ex,return,new,object,optimistic,locking,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,if,ex,instanceof,stale,state,exception,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,optimistic,entity,lock,exception,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,pessimistic,entity,lock,exception,if,ex,get,cause,instanceof,lock,acquisition,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,get,cause,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,return,new,jpa,system,exception,ex
HibernateJpaDialect -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1535712004;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._@param ex the HibernateException that occurred_@return the corresponding DataAccessException instance;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		if (this.jdbcExceptionTranslator != null && ex instanceof JDBCException) {_			JDBCException jdbcEx = (JDBCException) ex__			DataAccessException dae = this.jdbcExceptionTranslator.translate(_					"Hibernate operation: " + jdbcEx.getMessage(), jdbcEx.getSQL(), jdbcEx.getSQLException())__			if (dae != null) {_				throw dae__			}_		}__		if (ex instanceof JDBCConnectionException) {_			return new DataAccessResourceFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof SQLGrammarException) {_			SQLGrammarException jdbcEx = (SQLGrammarException) ex__			return new InvalidDataAccessResourceUsageException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof QueryTimeoutException) {_			QueryTimeoutException jdbcEx = (QueryTimeoutException) ex__			return new org.springframework.dao.QueryTimeoutException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof LockAcquisitionException) {_			LockAcquisitionException jdbcEx = (LockAcquisitionException) ex__			return new CannotAcquireLockException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof PessimisticLockException) {_			PessimisticLockException jdbcEx = (PessimisticLockException) ex__			return new PessimisticLockingFailureException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof ConstraintViolationException) {_			ConstraintViolationException jdbcEx = (ConstraintViolationException) ex__			return new DataIntegrityViolationException(ex.getMessage()  + "_ SQL [" + jdbcEx.getSQL() +_					"]_ constraint [" + jdbcEx.getConstraintName() + "]", ex)__		}_		if (ex instanceof DataException) {_			DataException jdbcEx = (DataException) ex__			return new DataIntegrityViolationException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		__		if (ex instanceof QueryException) {_			return new InvalidDataAccessResourceUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueObjectException) {_			return new DuplicateKeyException(ex.getMessage(), ex)__		}_		if (ex instanceof PropertyValueException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof PersistentObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof TransientObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof ObjectDeletedException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof UnresolvableObjectException) {_			UnresolvableObjectException hibEx = (UnresolvableObjectException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof WrongClassException) {_			WrongClassException hibEx = (WrongClassException) ex__			return new ObjectRetrievalFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex.getMessage(), ex)__		}_		if (ex instanceof StaleObjectStateException) {_			StaleObjectStateException hibEx = (StaleObjectStateException) ex__			return new ObjectOptimisticLockingFailureException(hibEx.getEntityName(), hibEx.getIdentifier(), ex)__		}_		if (ex instanceof StaleStateException) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof OptimisticEntityLockException) {_			return new ObjectOptimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof PessimisticEntityLockException) {_			if (ex.getCause() instanceof LockAcquisitionException) {_				return new CannotAcquireLockException(ex.getMessage(), ex.getCause())__			}_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}__		_		return new JpaSystemException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,param,ex,the,hibernate,exception,that,occurred,return,the,corresponding,data,access,exception,instance;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,if,this,jdbc,exception,translator,null,ex,instanceof,jdbcexception,jdbcexception,jdbc,ex,jdbcexception,ex,data,access,exception,dae,this,jdbc,exception,translator,translate,hibernate,operation,jdbc,ex,get,message,jdbc,ex,get,sql,jdbc,ex,get,sqlexception,if,dae,null,throw,dae,if,ex,instanceof,jdbcconnection,exception,return,new,data,access,resource,failure,exception,ex,get,message,ex,if,ex,instanceof,sqlgrammar,exception,sqlgrammar,exception,jdbc,ex,sqlgrammar,exception,ex,return,new,invalid,data,access,resource,usage,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,timeout,exception,query,timeout,exception,jdbc,ex,query,timeout,exception,ex,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,lock,acquisition,exception,lock,acquisition,exception,jdbc,ex,lock,acquisition,exception,ex,return,new,cannot,acquire,lock,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,pessimistic,lock,exception,pessimistic,lock,exception,jdbc,ex,pessimistic,lock,exception,ex,return,new,pessimistic,locking,failure,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,constraint,violation,exception,constraint,violation,exception,jdbc,ex,constraint,violation,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,constraint,jdbc,ex,get,constraint,name,ex,if,ex,instanceof,data,exception,data,exception,jdbc,ex,data,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,exception,return,new,invalid,data,access,resource,usage,exception,ex,get,message,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,object,exception,return,new,duplicate,key,exception,ex,get,message,ex,if,ex,instanceof,property,value,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,persistent,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,transient,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,object,deleted,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,unresolvable,object,exception,unresolvable,object,exception,hib,ex,unresolvable,object,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,wrong,class,exception,wrong,class,exception,hib,ex,wrong,class,exception,ex,return,new,object,retrieval,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,get,message,ex,if,ex,instanceof,stale,object,state,exception,stale,object,state,exception,hib,ex,stale,object,state,exception,ex,return,new,object,optimistic,locking,failure,exception,hib,ex,get,entity,name,hib,ex,get,identifier,ex,if,ex,instanceof,stale,state,exception,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,optimistic,entity,lock,exception,return,new,object,optimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,pessimistic,entity,lock,exception,if,ex,get,cause,instanceof,lock,acquisition,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,get,cause,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,return,new,jpa,system,exception,ex
