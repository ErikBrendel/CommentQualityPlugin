commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Specify the target database to operate on, as a value of the {@code Database} enum:  * DB2, DERBY, H2, HANA, HSQL, INFORMIX, MYSQL, ORACLE, POSTGRESQL, SQL_SERVER, SYBASE  * <p><b>NOTE:</b> This setting will override your JPA provider's default algorithm.  * Custom vendor properties may still fine-tune the database dialect. However,  * there may nevertheless be conflicts: For example, specify either this setting  * or Hibernate's "hibernate.dialect_resolvers" property, not both.  */ ;/**  * Specify the target database to operate on, as a value of the {@code Database} enum:  * DB2, DERBY, H2, HANA, HSQL, INFORMIX, MYSQL, ORACLE, POSTGRESQL, SQL_SERVER, SYBASE  * <p><b>NOTE:</b> This setting will override your JPA provider's default algorithm.  * Custom vendor properties may still fine-tune the database dialect. However,  * there may nevertheless be conflicts: For example, specify either this setting  * or Hibernate's "hibernate.dialect_resolvers" property, not both.  */ public void setDatabase(Database database) {     this.database = database. }
true;protected;0;3;/**  * Return the target database to operate on.  */ ;/**  * Return the target database to operate on.  */ protected Database getDatabase() {     return this.database. }
true;public;1;3;/**  * Specify the name of the target database to operate on.  * The supported values are vendor-dependent platform identifiers.  */ ;/**  * Specify the name of the target database to operate on.  * The supported values are vendor-dependent platform identifiers.  */ public void setDatabasePlatform(@Nullable String databasePlatform) {     this.databasePlatform = databasePlatform. }
true;protected;0;4;/**  * Return the name of the target database to operate on.  */ ;/**  * Return the name of the target database to operate on.  */ @Nullable protected String getDatabasePlatform() {     return this.databasePlatform. }
true;public;1;3;/**  * Set whether to generate DDL after the EntityManagerFactory has been initialized,  * creating/updating all relevant tables.  * <p>Note that the exact semantics of this flag depend on the underlying  * persistence provider. For any more advanced needs, specify the appropriate  * vendor-specific settings as "jpaProperties".  * <p><b>NOTE: Do not set this flag to 'true' while also setting JPA 2.1's  * {@code javax.persistence.schema-generation.database.action} property.</b>  * These two schema generation mechanisms - standard JPA versus provider-native -  * are mutually exclusive, e.g. with Hibernate 5.  * @see org.springframework.orm.jpa.AbstractEntityManagerFactoryBean#setJpaProperties  */ ;/**  * Set whether to generate DDL after the EntityManagerFactory has been initialized,  * creating/updating all relevant tables.  * <p>Note that the exact semantics of this flag depend on the underlying  * persistence provider. For any more advanced needs, specify the appropriate  * vendor-specific settings as "jpaProperties".  * <p><b>NOTE: Do not set this flag to 'true' while also setting JPA 2.1's  * {@code javax.persistence.schema-generation.database.action} property.</b>  * These two schema generation mechanisms - standard JPA versus provider-native -  * are mutually exclusive, e.g. with Hibernate 5.  * @see org.springframework.orm.jpa.AbstractEntityManagerFactoryBean#setJpaProperties  */ public void setGenerateDdl(boolean generateDdl) {     this.generateDdl = generateDdl. }
true;protected;0;3;/**  * Return whether to generate DDL after the EntityManagerFactory has been initialized  * creating/updating all relevant tables.  */ ;/**  * Return whether to generate DDL after the EntityManagerFactory has been initialized  * creating/updating all relevant tables.  */ protected boolean isGenerateDdl() {     return this.generateDdl. }
true;public;1;3;/**  * Set whether to show SQL in the log (or in the console).  * <p>For more specific logging configuration, specify the appropriate  * vendor-specific settings as "jpaProperties".  * @see org.springframework.orm.jpa.AbstractEntityManagerFactoryBean#setJpaProperties  */ ;/**  * Set whether to show SQL in the log (or in the console).  * <p>For more specific logging configuration, specify the appropriate  * vendor-specific settings as "jpaProperties".  * @see org.springframework.orm.jpa.AbstractEntityManagerFactoryBean#setJpaProperties  */ public void setShowSql(boolean showSql) {     this.showSql = showSql. }
true;protected;0;3;/**  * Return whether to show SQL in the log (or in the console).  */ ;/**  * Return whether to show SQL in the log (or in the console).  */ protected boolean isShowSql() {     return this.showSql. }
false;public;0;5;;@Override @Nullable public String getPersistenceProviderRootPackage() {     return null. }
false;public;1;4;;@Override public Map<String, ?> getJpaPropertyMap(PersistenceUnitInfo pui) {     return getJpaPropertyMap(). }
false;public;0;4;;@Override public Map<String, ?> getJpaPropertyMap() {     return Collections.emptyMap(). }
false;public;0;5;;@Override @Nullable public JpaDialect getJpaDialect() {     return null. }
false;public;0;4;;@Override public Class<? extends EntityManagerFactory> getEntityManagerFactoryInterface() {     return EntityManagerFactory.class. }
false;public;0;4;;@Override public Class<? extends EntityManager> getEntityManagerInterface() {     return EntityManager.class. }
false;public;1;3;;@Override public void postProcessEntityManagerFactory(EntityManagerFactory emf) { }
