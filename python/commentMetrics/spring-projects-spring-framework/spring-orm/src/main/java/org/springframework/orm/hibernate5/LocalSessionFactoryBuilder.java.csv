# id;timestamp;commentText;codeText;commentWords;codeWords
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ResourceLoader resourceLoader, MetadataSources metadataSources);1495868221;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param resourceLoader the ResourceLoader to load application classes from_@param metadataSources the Hibernate MetadataSources service to use (e.g. reusing an existing one)_@since 4.3;public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ResourceLoader resourceLoader, MetadataSources metadataSources) {_		super(metadataSources)___		getProperties().put(AvailableSettings.CURRENT_SESSION_CONTEXT_CLASS, SpringSessionContext.class.getName())__		if (dataSource != null) {_			getProperties().put(AvailableSettings.DATASOURCE, dataSource)__		}__		_		try {_			_			AvailableSettings.class.getField("CONNECTION_HANDLING")__			getProperties().put("hibernate.connection.handling_mode", "DELAYED_ACQUISITION_AND_HOLD")__		}_		catch (NoSuchFieldException ex) {_			_			try {_				AvailableSettings.class.getField("ACQUIRE_CONNECTIONS")__				getProperties().put("hibernate.connection.release_mode", "ON_CLOSE")__			}_			catch (NoSuchFieldException ex2) {_				_			}_		}__		getProperties().put(AvailableSettings.CLASSLOADERS, Collections.singleton(resourceLoader.getClassLoader()))__		this.resourcePatternResolver = ResourcePatternUtils.getResourcePatternResolver(resourceLoader)__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,resource,loader,the,resource,loader,to,load,application,classes,from,param,metadata,sources,the,hibernate,metadata,sources,service,to,use,e,g,reusing,an,existing,one,since,4,3;public,local,session,factory,builder,nullable,data,source,data,source,resource,loader,resource,loader,metadata,sources,metadata,sources,super,metadata,sources,get,properties,put,available,settings,spring,session,context,class,get,name,if,data,source,null,get,properties,put,available,settings,datasource,data,source,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex2,get,properties,put,available,settings,classloaders,collections,singleton,resource,loader,get,class,loader,this,resource,pattern,resolver,resource,pattern,utils,get,resource,pattern,resolver,resource,loader
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ResourceLoader resourceLoader, MetadataSources metadataSources);1496837955;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param resourceLoader the ResourceLoader to load application classes from_@param metadataSources the Hibernate MetadataSources service to use (e.g. reusing an existing one)_@since 4.3;public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ResourceLoader resourceLoader, MetadataSources metadataSources) {_		super(metadataSources)___		getProperties().put(AvailableSettings.CURRENT_SESSION_CONTEXT_CLASS, SpringSessionContext.class.getName())__		if (dataSource != null) {_			getProperties().put(AvailableSettings.DATASOURCE, dataSource)__		}__		_		try {_			_			AvailableSettings.class.getField("CONNECTION_HANDLING")__			getProperties().put("hibernate.connection.handling_mode", "DELAYED_ACQUISITION_AND_HOLD")__		}_		catch (NoSuchFieldException ex) {_			_			try {_				AvailableSettings.class.getField("ACQUIRE_CONNECTIONS")__				getProperties().put("hibernate.connection.release_mode", "ON_CLOSE")__			}_			catch (NoSuchFieldException ex2) {_				_			}_		}__		getProperties().put(AvailableSettings.CLASSLOADERS, Collections.singleton(resourceLoader.getClassLoader()))__		this.resourcePatternResolver = ResourcePatternUtils.getResourcePatternResolver(resourceLoader)__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,resource,loader,the,resource,loader,to,load,application,classes,from,param,metadata,sources,the,hibernate,metadata,sources,service,to,use,e,g,reusing,an,existing,one,since,4,3;public,local,session,factory,builder,nullable,data,source,data,source,resource,loader,resource,loader,metadata,sources,metadata,sources,super,metadata,sources,get,properties,put,available,settings,spring,session,context,class,get,name,if,data,source,null,get,properties,put,available,settings,datasource,data,source,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex2,get,properties,put,available,settings,classloaders,collections,singleton,resource,loader,get,class,loader,this,resource,pattern,resolver,resource,pattern,utils,get,resource,pattern,resolver,resource,loader
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ResourceLoader resourceLoader, MetadataSources metadataSources);1497341397;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param resourceLoader the ResourceLoader to load application classes from_@param metadataSources the Hibernate MetadataSources service to use (e.g. reusing an existing one)_@since 4.3;public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ResourceLoader resourceLoader, MetadataSources metadataSources) {_		super(metadataSources)___		getProperties().put(AvailableSettings.CURRENT_SESSION_CONTEXT_CLASS, SpringSessionContext.class.getName())__		if (dataSource != null) {_			getProperties().put(AvailableSettings.DATASOURCE, dataSource)__		}__		_		try {_			_			AvailableSettings.class.getField("CONNECTION_HANDLING")__			getProperties().put("hibernate.connection.handling_mode", "DELAYED_ACQUISITION_AND_HOLD")__		}_		catch (NoSuchFieldException ex) {_			_			try {_				AvailableSettings.class.getField("ACQUIRE_CONNECTIONS")__				getProperties().put("hibernate.connection.release_mode", "ON_CLOSE")__			}_			catch (NoSuchFieldException ex2) {_				_			}_		}__		getProperties().put(AvailableSettings.CLASSLOADERS, Collections.singleton(resourceLoader.getClassLoader()))__		this.resourcePatternResolver = ResourcePatternUtils.getResourcePatternResolver(resourceLoader)__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,resource,loader,the,resource,loader,to,load,application,classes,from,param,metadata,sources,the,hibernate,metadata,sources,service,to,use,e,g,reusing,an,existing,one,since,4,3;public,local,session,factory,builder,nullable,data,source,data,source,resource,loader,resource,loader,metadata,sources,metadata,sources,super,metadata,sources,get,properties,put,available,settings,spring,session,context,class,get,name,if,data,source,null,get,properties,put,available,settings,datasource,data,source,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex2,get,properties,put,available,settings,classloaders,collections,singleton,resource,loader,get,class,loader,this,resource,pattern,resolver,resource,pattern,utils,get,resource,pattern,resolver,resource,loader
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ResourceLoader resourceLoader, MetadataSources metadataSources);1498780456;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param resourceLoader the ResourceLoader to load application classes from_@param metadataSources the Hibernate MetadataSources service to use (e.g. reusing an existing one)_@since 4.3;public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ResourceLoader resourceLoader, MetadataSources metadataSources) {_		super(metadataSources)___		getProperties().put(AvailableSettings.CURRENT_SESSION_CONTEXT_CLASS, SpringSessionContext.class.getName())__		if (dataSource != null) {_			getProperties().put(AvailableSettings.DATASOURCE, dataSource)__		}__		_		try {_			_			AvailableSettings.class.getField("CONNECTION_HANDLING")__			getProperties().put("hibernate.connection.handling_mode", "DELAYED_ACQUISITION_AND_HOLD")__		}_		catch (NoSuchFieldException ex) {_			_			try {_				AvailableSettings.class.getField("ACQUIRE_CONNECTIONS")__				getProperties().put("hibernate.connection.release_mode", "ON_CLOSE")__			}_			catch (NoSuchFieldException ex2) {_				_			}_		}__		getProperties().put(AvailableSettings.CLASSLOADERS, Collections.singleton(resourceLoader.getClassLoader()))__		this.resourcePatternResolver = ResourcePatternUtils.getResourcePatternResolver(resourceLoader)__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,resource,loader,the,resource,loader,to,load,application,classes,from,param,metadata,sources,the,hibernate,metadata,sources,service,to,use,e,g,reusing,an,existing,one,since,4,3;public,local,session,factory,builder,nullable,data,source,data,source,resource,loader,resource,loader,metadata,sources,metadata,sources,super,metadata,sources,get,properties,put,available,settings,spring,session,context,class,get,name,if,data,source,null,get,properties,put,available,settings,datasource,data,source,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex2,get,properties,put,available,settings,classloaders,collections,singleton,resource,loader,get,class,loader,this,resource,pattern,resolver,resource,pattern,utils,get,resource,pattern,resolver,resource,loader
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ResourceLoader resourceLoader, MetadataSources metadataSources);1518264213;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param resourceLoader the ResourceLoader to load application classes from_@param metadataSources the Hibernate MetadataSources service to use (e.g. reusing an existing one)_@since 4.3;public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ResourceLoader resourceLoader, MetadataSources metadataSources) {_		super(metadataSources)___		getProperties().put(AvailableSettings.CURRENT_SESSION_CONTEXT_CLASS, SpringSessionContext.class.getName())__		if (dataSource != null) {_			getProperties().put(AvailableSettings.DATASOURCE, dataSource)__		}__		_		try {_			_			AvailableSettings.class.getField("CONNECTION_HANDLING")__			getProperties().put("hibernate.connection.handling_mode", "DELAYED_ACQUISITION_AND_HOLD")__		}_		catch (NoSuchFieldException ex) {_			_			try {_				AvailableSettings.class.getField("ACQUIRE_CONNECTIONS")__				getProperties().put("hibernate.connection.release_mode", "ON_CLOSE")__			}_			catch (NoSuchFieldException ex2) {_				_			}_		}__		getProperties().put(AvailableSettings.CLASSLOADERS, Collections.singleton(resourceLoader.getClassLoader()))__		this.resourcePatternResolver = ResourcePatternUtils.getResourcePatternResolver(resourceLoader)__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,resource,loader,the,resource,loader,to,load,application,classes,from,param,metadata,sources,the,hibernate,metadata,sources,service,to,use,e,g,reusing,an,existing,one,since,4,3;public,local,session,factory,builder,nullable,data,source,data,source,resource,loader,resource,loader,metadata,sources,metadata,sources,super,metadata,sources,get,properties,put,available,settings,spring,session,context,class,get,name,if,data,source,null,get,properties,put,available,settings,datasource,data,source,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex2,get,properties,put,available,settings,classloaders,collections,singleton,resource,loader,get,class,loader,this,resource,pattern,resolver,resource,pattern,utils,get,resource,pattern,resolver,resource,loader
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ResourceLoader resourceLoader, MetadataSources metadataSources);1519860149;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param resourceLoader the ResourceLoader to load application classes from_@param metadataSources the Hibernate MetadataSources service to use (e.g. reusing an existing one)_@since 4.3;public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ResourceLoader resourceLoader, MetadataSources metadataSources) {_		super(metadataSources)___		getProperties().put(AvailableSettings.CURRENT_SESSION_CONTEXT_CLASS, SpringSessionContext.class.getName())__		if (dataSource != null) {_			getProperties().put(AvailableSettings.DATASOURCE, dataSource)__		}__		_		try {_			_			AvailableSettings.class.getField("CONNECTION_HANDLING")__			getProperties().put("hibernate.connection.handling_mode", "DELAYED_ACQUISITION_AND_HOLD")__		}_		catch (NoSuchFieldException ex) {_			_			try {_				AvailableSettings.class.getField("ACQUIRE_CONNECTIONS")__				getProperties().put("hibernate.connection.release_mode", "ON_CLOSE")__			}_			catch (NoSuchFieldException ex2) {_				_			}_		}__		getProperties().put(AvailableSettings.CLASSLOADERS, Collections.singleton(resourceLoader.getClassLoader()))__		this.resourcePatternResolver = ResourcePatternUtils.getResourcePatternResolver(resourceLoader)__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,resource,loader,the,resource,loader,to,load,application,classes,from,param,metadata,sources,the,hibernate,metadata,sources,service,to,use,e,g,reusing,an,existing,one,since,4,3;public,local,session,factory,builder,nullable,data,source,data,source,resource,loader,resource,loader,metadata,sources,metadata,sources,super,metadata,sources,get,properties,put,available,settings,spring,session,context,class,get,name,if,data,source,null,get,properties,put,available,settings,datasource,data,source,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex2,get,properties,put,available,settings,classloaders,collections,singleton,resource,loader,get,class,loader,this,resource,pattern,resolver,resource,pattern,utils,get,resource,pattern,resolver,resource,loader
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ResourceLoader resourceLoader, MetadataSources metadataSources);1520373974;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param resourceLoader the ResourceLoader to load application classes from_@param metadataSources the Hibernate MetadataSources service to use (e.g. reusing an existing one)_@since 4.3;public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ResourceLoader resourceLoader, MetadataSources metadataSources) {_		super(metadataSources)___		getProperties().put(AvailableSettings.CURRENT_SESSION_CONTEXT_CLASS, SpringSessionContext.class.getName())__		if (dataSource != null) {_			getProperties().put(AvailableSettings.DATASOURCE, dataSource)__		}__		_		try {_			_			AvailableSettings.class.getField("CONNECTION_HANDLING")__			getProperties().put("hibernate.connection.handling_mode", "DELAYED_ACQUISITION_AND_HOLD")__		}_		catch (NoSuchFieldException ex) {_			_			try {_				AvailableSettings.class.getField("ACQUIRE_CONNECTIONS")__				getProperties().put("hibernate.connection.release_mode", "ON_CLOSE")__			}_			catch (NoSuchFieldException ex2) {_				_			}_		}__		getProperties().put(AvailableSettings.CLASSLOADERS, Collections.singleton(resourceLoader.getClassLoader()))__		this.resourcePatternResolver = ResourcePatternUtils.getResourcePatternResolver(resourceLoader)__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,resource,loader,the,resource,loader,to,load,application,classes,from,param,metadata,sources,the,hibernate,metadata,sources,service,to,use,e,g,reusing,an,existing,one,since,4,3;public,local,session,factory,builder,nullable,data,source,data,source,resource,loader,resource,loader,metadata,sources,metadata,sources,super,metadata,sources,get,properties,put,available,settings,spring,session,context,class,get,name,if,data,source,null,get,properties,put,available,settings,datasource,data,source,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex2,get,properties,put,available,settings,classloaders,collections,singleton,resource,loader,get,class,loader,this,resource,pattern,resolver,resource,pattern,utils,get,resource,pattern,resolver,resource,loader
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(DataSource dataSource, ClassLoader classLoader);1467668243;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param classLoader the ClassLoader to load application classes from;public LocalSessionFactoryBuilder(DataSource dataSource, ClassLoader classLoader) {_		this(dataSource, new PathMatchingResourcePatternResolver(classLoader))__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,class,loader,the,class,loader,to,load,application,classes,from;public,local,session,factory,builder,data,source,data,source,class,loader,class,loader,this,data,source,new,path,matching,resource,pattern,resolver,class,loader
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(DataSource dataSource, ClassLoader classLoader);1467730834;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param classLoader the ClassLoader to load application classes from;public LocalSessionFactoryBuilder(DataSource dataSource, ClassLoader classLoader) {_		this(dataSource, new PathMatchingResourcePatternResolver(classLoader))__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,class,loader,the,class,loader,to,load,application,classes,from;public,local,session,factory,builder,data,source,data,source,class,loader,class,loader,this,data,source,new,path,matching,resource,pattern,resolver,class,loader
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(DataSource dataSource, ClassLoader classLoader);1468941907;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param classLoader the ClassLoader to load application classes from;public LocalSessionFactoryBuilder(DataSource dataSource, ClassLoader classLoader) {_		this(dataSource, new PathMatchingResourcePatternResolver(classLoader))__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,class,loader,the,class,loader,to,load,application,classes,from;public,local,session,factory,builder,data,source,data,source,class,loader,class,loader,this,data,source,new,path,matching,resource,pattern,resolver,class,loader
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(DataSource dataSource, ClassLoader classLoader);1470272834;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param classLoader the ClassLoader to load application classes from;public LocalSessionFactoryBuilder(DataSource dataSource, ClassLoader classLoader) {_		this(dataSource, new PathMatchingResourcePatternResolver(classLoader))__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,class,loader,the,class,loader,to,load,application,classes,from;public,local,session,factory,builder,data,source,data,source,class,loader,class,loader,this,data,source,new,path,matching,resource,pattern,resolver,class,loader
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(DataSource dataSource, ClassLoader classLoader);1470660485;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param classLoader the ClassLoader to load application classes from;public LocalSessionFactoryBuilder(DataSource dataSource, ClassLoader classLoader) {_		this(dataSource, new PathMatchingResourcePatternResolver(classLoader))__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,class,loader,the,class,loader,to,load,application,classes,from;public,local,session,factory,builder,data,source,data,source,class,loader,class,loader,this,data,source,new,path,matching,resource,pattern,resolver,class,loader
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setBeanContainer(ConfigurableListableBeanFactory beanFactory);1530724999;Set a Hibernate {@link org.hibernate.resource.beans.container.spi.BeanContainer}_for the given Spring {@link ConfigurableListableBeanFactory}._<p>Note: Bean container integration requires Hibernate 5.3 or higher._It enables autowiring of Hibernate attribute converters and entity listeners._@since 5.1_@see AvailableSettings#BEAN_CONTAINER;public LocalSessionFactoryBuilder setBeanContainer(ConfigurableListableBeanFactory beanFactory) {_		getProperties().put(AvailableSettings.BEAN_CONTAINER, new SpringBeanContainer(beanFactory))__		return this__	};set,a,hibernate,link,org,hibernate,resource,beans,container,spi,bean,container,for,the,given,spring,link,configurable,listable,bean,factory,p,note,bean,container,integration,requires,hibernate,5,3,or,higher,it,enables,autowiring,of,hibernate,attribute,converters,and,entity,listeners,since,5,1,see,available,settings;public,local,session,factory,builder,set,bean,container,configurable,listable,bean,factory,bean,factory,get,properties,put,available,settings,new,spring,bean,container,bean,factory,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setBeanContainer(ConfigurableListableBeanFactory beanFactory);1530802115;Set a Hibernate {@link org.hibernate.resource.beans.container.spi.BeanContainer}_for the given Spring {@link ConfigurableListableBeanFactory}._<p>Note: Bean container integration requires Hibernate 5.3 or higher._It enables autowiring of Hibernate attribute converters and entity listeners._@since 5.1_@see SpringBeanContainer_@see AvailableSettings#BEAN_CONTAINER;public LocalSessionFactoryBuilder setBeanContainer(ConfigurableListableBeanFactory beanFactory) {_		getProperties().put(AvailableSettings.BEAN_CONTAINER, new SpringBeanContainer(beanFactory))__		return this__	};set,a,hibernate,link,org,hibernate,resource,beans,container,spi,bean,container,for,the,given,spring,link,configurable,listable,bean,factory,p,note,bean,container,integration,requires,hibernate,5,3,or,higher,it,enables,autowiring,of,hibernate,attribute,converters,and,entity,listeners,since,5,1,see,spring,bean,container,see,available,settings;public,local,session,factory,builder,set,bean,container,configurable,listable,bean,factory,bean,factory,get,properties,put,available,settings,new,spring,bean,container,bean,factory,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setBeanContainer(ConfigurableListableBeanFactory beanFactory);1531739026;Set a Hibernate {@link org.hibernate.resource.beans.container.spi.BeanContainer}_for the given Spring {@link ConfigurableListableBeanFactory}._<p>Note: Bean container integration requires Hibernate 5.3 or higher._It enables autowiring of Hibernate attribute converters and entity listeners._@since 5.1_@see SpringBeanContainer_@see AvailableSettings#BEAN_CONTAINER;public LocalSessionFactoryBuilder setBeanContainer(ConfigurableListableBeanFactory beanFactory) {_		getProperties().put(AvailableSettings.BEAN_CONTAINER, new SpringBeanContainer(beanFactory))__		return this__	};set,a,hibernate,link,org,hibernate,resource,beans,container,spi,bean,container,for,the,given,spring,link,configurable,listable,bean,factory,p,note,bean,container,integration,requires,hibernate,5,3,or,higher,it,enables,autowiring,of,hibernate,attribute,converters,and,entity,listeners,since,5,1,see,spring,bean,container,see,available,settings;public,local,session,factory,builder,set,bean,container,configurable,listable,bean,factory,bean,factory,get,properties,put,available,settings,new,spring,bean,container,bean,factory,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(DataSource dataSource, ResourceLoader resourceLoader, MetadataSources metadataSources);1467668243;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param resourceLoader the ResourceLoader to load application classes from_@param metadataSources the Hibernate MetadataSources service to use (e.g. reusing an existing one)_@since 4.3;public LocalSessionFactoryBuilder(DataSource dataSource, ResourceLoader resourceLoader, MetadataSources metadataSources) {_		super(metadataSources)___		getProperties().put(Environment.CURRENT_SESSION_CONTEXT_CLASS, SpringSessionContext.class.getName())__		if (dataSource != null) {_			getProperties().put(Environment.DATASOURCE, dataSource)__		}__		_		getProperties().put("hibernate.connection.handling_mode", "DELAYED_ACQUISITION_AND_HOLD")___		getProperties().put(AvailableSettings.CLASSLOADERS, Collections.singleton(resourceLoader.getClassLoader()))__		this.resourcePatternResolver = ResourcePatternUtils.getResourcePatternResolver(resourceLoader)__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,resource,loader,the,resource,loader,to,load,application,classes,from,param,metadata,sources,the,hibernate,metadata,sources,service,to,use,e,g,reusing,an,existing,one,since,4,3;public,local,session,factory,builder,data,source,data,source,resource,loader,resource,loader,metadata,sources,metadata,sources,super,metadata,sources,get,properties,put,environment,spring,session,context,class,get,name,if,data,source,null,get,properties,put,environment,datasource,data,source,get,properties,put,hibernate,connection,get,properties,put,available,settings,classloaders,collections,singleton,resource,loader,get,class,loader,this,resource,pattern,resolver,resource,pattern,utils,get,resource,pattern,resolver,resource,loader
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(DataSource dataSource, ResourceLoader resourceLoader, MetadataSources metadataSources);1467730834;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param resourceLoader the ResourceLoader to load application classes from_@param metadataSources the Hibernate MetadataSources service to use (e.g. reusing an existing one)_@since 4.3;public LocalSessionFactoryBuilder(DataSource dataSource, ResourceLoader resourceLoader, MetadataSources metadataSources) {_		super(metadataSources)___		getProperties().put(Environment.CURRENT_SESSION_CONTEXT_CLASS, SpringSessionContext.class.getName())__		if (dataSource != null) {_			getProperties().put(Environment.DATASOURCE, dataSource)__		}__		_		getProperties().put("hibernate.connection.handling_mode", "DELAYED_ACQUISITION_AND_HOLD")___		getProperties().put(AvailableSettings.CLASSLOADERS, Collections.singleton(resourceLoader.getClassLoader()))__		this.resourcePatternResolver = ResourcePatternUtils.getResourcePatternResolver(resourceLoader)__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,resource,loader,the,resource,loader,to,load,application,classes,from,param,metadata,sources,the,hibernate,metadata,sources,service,to,use,e,g,reusing,an,existing,one,since,4,3;public,local,session,factory,builder,data,source,data,source,resource,loader,resource,loader,metadata,sources,metadata,sources,super,metadata,sources,get,properties,put,environment,spring,session,context,class,get,name,if,data,source,null,get,properties,put,environment,datasource,data,source,get,properties,put,hibernate,connection,get,properties,put,available,settings,classloaders,collections,singleton,resource,loader,get,class,loader,this,resource,pattern,resolver,resource,pattern,utils,get,resource,pattern,resolver,resource,loader
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(DataSource dataSource, ResourceLoader resourceLoader, MetadataSources metadataSources);1468941907;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param resourceLoader the ResourceLoader to load application classes from_@param metadataSources the Hibernate MetadataSources service to use (e.g. reusing an existing one)_@since 4.3;public LocalSessionFactoryBuilder(DataSource dataSource, ResourceLoader resourceLoader, MetadataSources metadataSources) {_		super(metadataSources)___		getProperties().put(Environment.CURRENT_SESSION_CONTEXT_CLASS, SpringSessionContext.class.getName())__		if (dataSource != null) {_			getProperties().put(Environment.DATASOURCE, dataSource)__		}__		_		getProperties().put("hibernate.connection.handling_mode", "DELAYED_ACQUISITION_AND_HOLD")___		getProperties().put(AvailableSettings.CLASSLOADERS, Collections.singleton(resourceLoader.getClassLoader()))__		this.resourcePatternResolver = ResourcePatternUtils.getResourcePatternResolver(resourceLoader)__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,resource,loader,the,resource,loader,to,load,application,classes,from,param,metadata,sources,the,hibernate,metadata,sources,service,to,use,e,g,reusing,an,existing,one,since,4,3;public,local,session,factory,builder,data,source,data,source,resource,loader,resource,loader,metadata,sources,metadata,sources,super,metadata,sources,get,properties,put,environment,spring,session,context,class,get,name,if,data,source,null,get,properties,put,environment,datasource,data,source,get,properties,put,hibernate,connection,get,properties,put,available,settings,classloaders,collections,singleton,resource,loader,get,class,loader,this,resource,pattern,resolver,resource,pattern,utils,get,resource,pattern,resolver,resource,loader
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(DataSource dataSource, ResourceLoader resourceLoader, MetadataSources metadataSources);1470272834;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param resourceLoader the ResourceLoader to load application classes from_@param metadataSources the Hibernate MetadataSources service to use (e.g. reusing an existing one)_@since 4.3;public LocalSessionFactoryBuilder(DataSource dataSource, ResourceLoader resourceLoader, MetadataSources metadataSources) {_		super(metadataSources)___		getProperties().put(Environment.CURRENT_SESSION_CONTEXT_CLASS, SpringSessionContext.class.getName())__		if (dataSource != null) {_			getProperties().put(Environment.DATASOURCE, dataSource)__		}__		_		try {_			_			AvailableSettings.class.getField("CONNECTION_HANDLING")__			getProperties().put("hibernate.connection.handling_mode", "DELAYED_ACQUISITION_AND_HOLD")__		}_		catch (NoSuchFieldException ex) {_			_			try {_				AvailableSettings.class.getField("ACQUIRE_CONNECTIONS")__				getProperties().put("hibernate.connection.release_mode", "ON_CLOSE")__			}_			catch (NoSuchFieldException ex2) {_				_			}_		}__		getProperties().put(AvailableSettings.CLASSLOADERS, Collections.singleton(resourceLoader.getClassLoader()))__		this.resourcePatternResolver = ResourcePatternUtils.getResourcePatternResolver(resourceLoader)__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,resource,loader,the,resource,loader,to,load,application,classes,from,param,metadata,sources,the,hibernate,metadata,sources,service,to,use,e,g,reusing,an,existing,one,since,4,3;public,local,session,factory,builder,data,source,data,source,resource,loader,resource,loader,metadata,sources,metadata,sources,super,metadata,sources,get,properties,put,environment,spring,session,context,class,get,name,if,data,source,null,get,properties,put,environment,datasource,data,source,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex2,get,properties,put,available,settings,classloaders,collections,singleton,resource,loader,get,class,loader,this,resource,pattern,resolver,resource,pattern,utils,get,resource,pattern,resolver,resource,loader
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(DataSource dataSource, ResourceLoader resourceLoader, MetadataSources metadataSources);1470660485;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param resourceLoader the ResourceLoader to load application classes from_@param metadataSources the Hibernate MetadataSources service to use (e.g. reusing an existing one)_@since 4.3;public LocalSessionFactoryBuilder(DataSource dataSource, ResourceLoader resourceLoader, MetadataSources metadataSources) {_		super(metadataSources)___		getProperties().put(AvailableSettings.CURRENT_SESSION_CONTEXT_CLASS, SpringSessionContext.class.getName())__		if (dataSource != null) {_			getProperties().put(AvailableSettings.DATASOURCE, dataSource)__		}__		_		try {_			_			AvailableSettings.class.getField("CONNECTION_HANDLING")__			getProperties().put("hibernate.connection.handling_mode", "DELAYED_ACQUISITION_AND_HOLD")__		}_		catch (NoSuchFieldException ex) {_			_			try {_				AvailableSettings.class.getField("ACQUIRE_CONNECTIONS")__				getProperties().put("hibernate.connection.release_mode", "ON_CLOSE")__			}_			catch (NoSuchFieldException ex2) {_				_			}_		}__		getProperties().put(AvailableSettings.CLASSLOADERS, Collections.singleton(resourceLoader.getClassLoader()))__		this.resourcePatternResolver = ResourcePatternUtils.getResourcePatternResolver(resourceLoader)__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,resource,loader,the,resource,loader,to,load,application,classes,from,param,metadata,sources,the,hibernate,metadata,sources,service,to,use,e,g,reusing,an,existing,one,since,4,3;public,local,session,factory,builder,data,source,data,source,resource,loader,resource,loader,metadata,sources,metadata,sources,super,metadata,sources,get,properties,put,available,settings,spring,session,context,class,get,name,if,data,source,null,get,properties,put,available,settings,datasource,data,source,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex2,get,properties,put,available,settings,classloaders,collections,singleton,resource,loader,get,class,loader,this,resource,pattern,resolver,resource,pattern,utils,get,resource,pattern,resolver,resource,loader
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder addAnnotatedClasses(Class<?>... annotatedClasses);1467668243;Add the given annotated classes in a batch._@see #addAnnotatedClass_@see #scanPackages;public LocalSessionFactoryBuilder addAnnotatedClasses(Class<?>... annotatedClasses) {_		for (Class<?> annotatedClass : annotatedClasses) {_			addAnnotatedClass(annotatedClass)__		}_		return this__	};add,the,given,annotated,classes,in,a,batch,see,add,annotated,class,see,scan,packages;public,local,session,factory,builder,add,annotated,classes,class,annotated,classes,for,class,annotated,class,annotated,classes,add,annotated,class,annotated,class,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder addAnnotatedClasses(Class<?>... annotatedClasses);1467730834;Add the given annotated classes in a batch._@see #addAnnotatedClass_@see #scanPackages;public LocalSessionFactoryBuilder addAnnotatedClasses(Class<?>... annotatedClasses) {_		for (Class<?> annotatedClass : annotatedClasses) {_			addAnnotatedClass(annotatedClass)__		}_		return this__	};add,the,given,annotated,classes,in,a,batch,see,add,annotated,class,see,scan,packages;public,local,session,factory,builder,add,annotated,classes,class,annotated,classes,for,class,annotated,class,annotated,classes,add,annotated,class,annotated,class,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder addAnnotatedClasses(Class<?>... annotatedClasses);1468941907;Add the given annotated classes in a batch._@see #addAnnotatedClass_@see #scanPackages;public LocalSessionFactoryBuilder addAnnotatedClasses(Class<?>... annotatedClasses) {_		for (Class<?> annotatedClass : annotatedClasses) {_			addAnnotatedClass(annotatedClass)__		}_		return this__	};add,the,given,annotated,classes,in,a,batch,see,add,annotated,class,see,scan,packages;public,local,session,factory,builder,add,annotated,classes,class,annotated,classes,for,class,annotated,class,annotated,classes,add,annotated,class,annotated,class,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder addAnnotatedClasses(Class<?>... annotatedClasses);1470272834;Add the given annotated classes in a batch._@see #addAnnotatedClass_@see #scanPackages;public LocalSessionFactoryBuilder addAnnotatedClasses(Class<?>... annotatedClasses) {_		for (Class<?> annotatedClass : annotatedClasses) {_			addAnnotatedClass(annotatedClass)__		}_		return this__	};add,the,given,annotated,classes,in,a,batch,see,add,annotated,class,see,scan,packages;public,local,session,factory,builder,add,annotated,classes,class,annotated,classes,for,class,annotated,class,annotated,classes,add,annotated,class,annotated,class,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder addAnnotatedClasses(Class<?>... annotatedClasses);1470660485;Add the given annotated classes in a batch._@see #addAnnotatedClass_@see #scanPackages;public LocalSessionFactoryBuilder addAnnotatedClasses(Class<?>... annotatedClasses) {_		for (Class<?> annotatedClass : annotatedClasses) {_			addAnnotatedClass(annotatedClass)__		}_		return this__	};add,the,given,annotated,classes,in,a,batch,see,add,annotated,class,see,scan,packages;public,local,session,factory,builder,add,annotated,classes,class,annotated,classes,for,class,annotated,class,annotated,classes,add,annotated,class,annotated,class,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder addAnnotatedClasses(Class<?>... annotatedClasses);1495868221;Add the given annotated classes in a batch._@see #addAnnotatedClass_@see #scanPackages;public LocalSessionFactoryBuilder addAnnotatedClasses(Class<?>... annotatedClasses) {_		for (Class<?> annotatedClass : annotatedClasses) {_			addAnnotatedClass(annotatedClass)__		}_		return this__	};add,the,given,annotated,classes,in,a,batch,see,add,annotated,class,see,scan,packages;public,local,session,factory,builder,add,annotated,classes,class,annotated,classes,for,class,annotated,class,annotated,classes,add,annotated,class,annotated,class,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder addAnnotatedClasses(Class<?>... annotatedClasses);1496837955;Add the given annotated classes in a batch._@see #addAnnotatedClass_@see #scanPackages;public LocalSessionFactoryBuilder addAnnotatedClasses(Class<?>... annotatedClasses) {_		for (Class<?> annotatedClass : annotatedClasses) {_			addAnnotatedClass(annotatedClass)__		}_		return this__	};add,the,given,annotated,classes,in,a,batch,see,add,annotated,class,see,scan,packages;public,local,session,factory,builder,add,annotated,classes,class,annotated,classes,for,class,annotated,class,annotated,classes,add,annotated,class,annotated,class,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder addAnnotatedClasses(Class<?>... annotatedClasses);1497341397;Add the given annotated classes in a batch._@see #addAnnotatedClass_@see #scanPackages;public LocalSessionFactoryBuilder addAnnotatedClasses(Class<?>... annotatedClasses) {_		for (Class<?> annotatedClass : annotatedClasses) {_			addAnnotatedClass(annotatedClass)__		}_		return this__	};add,the,given,annotated,classes,in,a,batch,see,add,annotated,class,see,scan,packages;public,local,session,factory,builder,add,annotated,classes,class,annotated,classes,for,class,annotated,class,annotated,classes,add,annotated,class,annotated,class,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder addAnnotatedClasses(Class<?>... annotatedClasses);1498780456;Add the given annotated classes in a batch._@see #addAnnotatedClass_@see #scanPackages;public LocalSessionFactoryBuilder addAnnotatedClasses(Class<?>... annotatedClasses) {_		for (Class<?> annotatedClass : annotatedClasses) {_			addAnnotatedClass(annotatedClass)__		}_		return this__	};add,the,given,annotated,classes,in,a,batch,see,add,annotated,class,see,scan,packages;public,local,session,factory,builder,add,annotated,classes,class,annotated,classes,for,class,annotated,class,annotated,classes,add,annotated,class,annotated,class,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder addAnnotatedClasses(Class<?>... annotatedClasses);1518264213;Add the given annotated classes in a batch._@see #addAnnotatedClass_@see #scanPackages;public LocalSessionFactoryBuilder addAnnotatedClasses(Class<?>... annotatedClasses) {_		for (Class<?> annotatedClass : annotatedClasses) {_			addAnnotatedClass(annotatedClass)__		}_		return this__	};add,the,given,annotated,classes,in,a,batch,see,add,annotated,class,see,scan,packages;public,local,session,factory,builder,add,annotated,classes,class,annotated,classes,for,class,annotated,class,annotated,classes,add,annotated,class,annotated,class,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder addAnnotatedClasses(Class<?>... annotatedClasses);1519860149;Add the given annotated classes in a batch._@see #addAnnotatedClass_@see #scanPackages;public LocalSessionFactoryBuilder addAnnotatedClasses(Class<?>... annotatedClasses) {_		for (Class<?> annotatedClass : annotatedClasses) {_			addAnnotatedClass(annotatedClass)__		}_		return this__	};add,the,given,annotated,classes,in,a,batch,see,add,annotated,class,see,scan,packages;public,local,session,factory,builder,add,annotated,classes,class,annotated,classes,for,class,annotated,class,annotated,classes,add,annotated,class,annotated,class,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder addAnnotatedClasses(Class<?>... annotatedClasses);1520373974;Add the given annotated classes in a batch._@see #addAnnotatedClass_@see #scanPackages;public LocalSessionFactoryBuilder addAnnotatedClasses(Class<?>... annotatedClasses) {_		for (Class<?> annotatedClass : annotatedClasses) {_			addAnnotatedClass(annotatedClass)__		}_		return this__	};add,the,given,annotated,classes,in,a,batch,see,add,annotated,class,see,scan,packages;public,local,session,factory,builder,add,annotated,classes,class,annotated,classes,for,class,annotated,class,annotated,classes,add,annotated,class,annotated,class,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder addAnnotatedClasses(Class<?>... annotatedClasses);1530188116;Add the given annotated classes in a batch._@see #addAnnotatedClass_@see #scanPackages;public LocalSessionFactoryBuilder addAnnotatedClasses(Class<?>... annotatedClasses) {_		for (Class<?> annotatedClass : annotatedClasses) {_			addAnnotatedClass(annotatedClass)__		}_		return this__	};add,the,given,annotated,classes,in,a,batch,see,add,annotated,class,see,scan,packages;public,local,session,factory,builder,add,annotated,classes,class,annotated,classes,for,class,annotated,class,annotated,classes,add,annotated,class,annotated,class,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder addAnnotatedClasses(Class<?>... annotatedClasses);1530724999;Add the given annotated classes in a batch._@see #addAnnotatedClass_@see #scanPackages;public LocalSessionFactoryBuilder addAnnotatedClasses(Class<?>... annotatedClasses) {_		for (Class<?> annotatedClass : annotatedClasses) {_			addAnnotatedClass(annotatedClass)__		}_		return this__	};add,the,given,annotated,classes,in,a,batch,see,add,annotated,class,see,scan,packages;public,local,session,factory,builder,add,annotated,classes,class,annotated,classes,for,class,annotated,class,annotated,classes,add,annotated,class,annotated,class,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder addAnnotatedClasses(Class<?>... annotatedClasses);1530802115;Add the given annotated classes in a batch._@see #addAnnotatedClass_@see #scanPackages;public LocalSessionFactoryBuilder addAnnotatedClasses(Class<?>... annotatedClasses) {_		for (Class<?> annotatedClass : annotatedClasses) {_			addAnnotatedClass(annotatedClass)__		}_		return this__	};add,the,given,annotated,classes,in,a,batch,see,add,annotated,class,see,scan,packages;public,local,session,factory,builder,add,annotated,classes,class,annotated,classes,for,class,annotated,class,annotated,classes,add,annotated,class,annotated,class,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder addAnnotatedClasses(Class<?>... annotatedClasses);1531739026;Add the given annotated classes in a batch._@see #addAnnotatedClass_@see #scanPackages;public LocalSessionFactoryBuilder addAnnotatedClasses(Class<?>... annotatedClasses) {_		for (Class<?> annotatedClass : annotatedClasses) {_			addAnnotatedClass(annotatedClass)__		}_		return this__	};add,the,given,annotated,classes,in,a,batch,see,add,annotated,class,see,scan,packages;public,local,session,factory,builder,add,annotated,classes,class,annotated,classes,for,class,annotated,class,annotated,classes,add,annotated,class,annotated,class,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(@Nullable DataSource dataSource);1495868221;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null});public LocalSessionFactoryBuilder(@Nullable DataSource dataSource) {_		this(dataSource, new PathMatchingResourcePatternResolver())__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null;public,local,session,factory,builder,nullable,data,source,data,source,this,data,source,new,path,matching,resource,pattern,resolver
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(@Nullable DataSource dataSource);1496837955;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null});public LocalSessionFactoryBuilder(@Nullable DataSource dataSource) {_		this(dataSource, new PathMatchingResourcePatternResolver())__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null;public,local,session,factory,builder,nullable,data,source,data,source,this,data,source,new,path,matching,resource,pattern,resolver
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(@Nullable DataSource dataSource);1497341397;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null});public LocalSessionFactoryBuilder(@Nullable DataSource dataSource) {_		this(dataSource, new PathMatchingResourcePatternResolver())__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null;public,local,session,factory,builder,nullable,data,source,data,source,this,data,source,new,path,matching,resource,pattern,resolver
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(@Nullable DataSource dataSource);1498780456;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null});public LocalSessionFactoryBuilder(@Nullable DataSource dataSource) {_		this(dataSource, new PathMatchingResourcePatternResolver())__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null;public,local,session,factory,builder,nullable,data,source,data,source,this,data,source,new,path,matching,resource,pattern,resolver
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(@Nullable DataSource dataSource);1518264213;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null});public LocalSessionFactoryBuilder(@Nullable DataSource dataSource) {_		this(dataSource, new PathMatchingResourcePatternResolver())__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null;public,local,session,factory,builder,nullable,data,source,data,source,this,data,source,new,path,matching,resource,pattern,resolver
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(@Nullable DataSource dataSource);1519860149;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null});public LocalSessionFactoryBuilder(@Nullable DataSource dataSource) {_		this(dataSource, new PathMatchingResourcePatternResolver())__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null;public,local,session,factory,builder,nullable,data,source,data,source,this,data,source,new,path,matching,resource,pattern,resolver
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(@Nullable DataSource dataSource);1520373974;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null});public LocalSessionFactoryBuilder(@Nullable DataSource dataSource) {_		this(dataSource, new PathMatchingResourcePatternResolver())__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null;public,local,session,factory,builder,nullable,data,source,data,source,this,data,source,new,path,matching,resource,pattern,resolver
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(@Nullable DataSource dataSource);1530188116;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null});public LocalSessionFactoryBuilder(@Nullable DataSource dataSource) {_		this(dataSource, new PathMatchingResourcePatternResolver())__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null;public,local,session,factory,builder,nullable,data,source,data,source,this,data,source,new,path,matching,resource,pattern,resolver
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(@Nullable DataSource dataSource);1530724999;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null});public LocalSessionFactoryBuilder(@Nullable DataSource dataSource) {_		this(dataSource, new PathMatchingResourcePatternResolver())__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null;public,local,session,factory,builder,nullable,data,source,data,source,this,data,source,new,path,matching,resource,pattern,resolver
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(@Nullable DataSource dataSource);1530802115;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null});public LocalSessionFactoryBuilder(@Nullable DataSource dataSource) {_		this(dataSource, new PathMatchingResourcePatternResolver())__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null;public,local,session,factory,builder,nullable,data,source,data,source,this,data,source,new,path,matching,resource,pattern,resolver
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(@Nullable DataSource dataSource);1531739026;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null});public LocalSessionFactoryBuilder(@Nullable DataSource dataSource) {_		this(dataSource, new PathMatchingResourcePatternResolver())__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null;public,local,session,factory,builder,nullable,data,source,data,source,this,data,source,new,path,matching,resource,pattern,resolver
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(DataSource dataSource);1467668243;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null});public LocalSessionFactoryBuilder(DataSource dataSource) {_		this(dataSource, new PathMatchingResourcePatternResolver())__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null;public,local,session,factory,builder,data,source,data,source,this,data,source,new,path,matching,resource,pattern,resolver
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(DataSource dataSource);1467730834;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null});public LocalSessionFactoryBuilder(DataSource dataSource) {_		this(dataSource, new PathMatchingResourcePatternResolver())__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null;public,local,session,factory,builder,data,source,data,source,this,data,source,new,path,matching,resource,pattern,resolver
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(DataSource dataSource);1468941907;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null});public LocalSessionFactoryBuilder(DataSource dataSource) {_		this(dataSource, new PathMatchingResourcePatternResolver())__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null;public,local,session,factory,builder,data,source,data,source,this,data,source,new,path,matching,resource,pattern,resolver
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(DataSource dataSource);1470272834;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null});public LocalSessionFactoryBuilder(DataSource dataSource) {_		this(dataSource, new PathMatchingResourcePatternResolver())__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null;public,local,session,factory,builder,data,source,data,source,this,data,source,new,path,matching,resource,pattern,resolver
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(DataSource dataSource);1470660485;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null});public LocalSessionFactoryBuilder(DataSource dataSource) {_		this(dataSource, new PathMatchingResourcePatternResolver())__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null;public,local,session,factory,builder,data,source,data,source,this,data,source,new,path,matching,resource,pattern,resolver
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setEntityTypeFilters(TypeFilter... entityTypeFilters);1467668243;Specify custom type filters for Spring-based scanning for entity classes._<p>Default is to search all specified packages for classes annotated with_{@code @javax.persistence.Entity}, {@code @javax.persistence.Embeddable}_or {@code @javax.persistence.MappedSuperclass}._@see #scanPackages;public LocalSessionFactoryBuilder setEntityTypeFilters(TypeFilter... entityTypeFilters) {_		this.entityTypeFilters = entityTypeFilters__		return this__	};specify,custom,type,filters,for,spring,based,scanning,for,entity,classes,p,default,is,to,search,all,specified,packages,for,classes,annotated,with,code,javax,persistence,entity,code,javax,persistence,embeddable,or,code,javax,persistence,mapped,superclass,see,scan,packages;public,local,session,factory,builder,set,entity,type,filters,type,filter,entity,type,filters,this,entity,type,filters,entity,type,filters,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setEntityTypeFilters(TypeFilter... entityTypeFilters);1467730834;Specify custom type filters for Spring-based scanning for entity classes._<p>Default is to search all specified packages for classes annotated with_{@code @javax.persistence.Entity}, {@code @javax.persistence.Embeddable}_or {@code @javax.persistence.MappedSuperclass}._@see #scanPackages;public LocalSessionFactoryBuilder setEntityTypeFilters(TypeFilter... entityTypeFilters) {_		this.entityTypeFilters = entityTypeFilters__		return this__	};specify,custom,type,filters,for,spring,based,scanning,for,entity,classes,p,default,is,to,search,all,specified,packages,for,classes,annotated,with,code,javax,persistence,entity,code,javax,persistence,embeddable,or,code,javax,persistence,mapped,superclass,see,scan,packages;public,local,session,factory,builder,set,entity,type,filters,type,filter,entity,type,filters,this,entity,type,filters,entity,type,filters,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setEntityTypeFilters(TypeFilter... entityTypeFilters);1468941907;Specify custom type filters for Spring-based scanning for entity classes._<p>Default is to search all specified packages for classes annotated with_{@code @javax.persistence.Entity}, {@code @javax.persistence.Embeddable}_or {@code @javax.persistence.MappedSuperclass}._@see #scanPackages;public LocalSessionFactoryBuilder setEntityTypeFilters(TypeFilter... entityTypeFilters) {_		this.entityTypeFilters = entityTypeFilters__		return this__	};specify,custom,type,filters,for,spring,based,scanning,for,entity,classes,p,default,is,to,search,all,specified,packages,for,classes,annotated,with,code,javax,persistence,entity,code,javax,persistence,embeddable,or,code,javax,persistence,mapped,superclass,see,scan,packages;public,local,session,factory,builder,set,entity,type,filters,type,filter,entity,type,filters,this,entity,type,filters,entity,type,filters,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setEntityTypeFilters(TypeFilter... entityTypeFilters);1470272834;Specify custom type filters for Spring-based scanning for entity classes._<p>Default is to search all specified packages for classes annotated with_{@code @javax.persistence.Entity}, {@code @javax.persistence.Embeddable}_or {@code @javax.persistence.MappedSuperclass}._@see #scanPackages;public LocalSessionFactoryBuilder setEntityTypeFilters(TypeFilter... entityTypeFilters) {_		this.entityTypeFilters = entityTypeFilters__		return this__	};specify,custom,type,filters,for,spring,based,scanning,for,entity,classes,p,default,is,to,search,all,specified,packages,for,classes,annotated,with,code,javax,persistence,entity,code,javax,persistence,embeddable,or,code,javax,persistence,mapped,superclass,see,scan,packages;public,local,session,factory,builder,set,entity,type,filters,type,filter,entity,type,filters,this,entity,type,filters,entity,type,filters,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setEntityTypeFilters(TypeFilter... entityTypeFilters);1470660485;Specify custom type filters for Spring-based scanning for entity classes._<p>Default is to search all specified packages for classes annotated with_{@code @javax.persistence.Entity}, {@code @javax.persistence.Embeddable}_or {@code @javax.persistence.MappedSuperclass}._@see #scanPackages;public LocalSessionFactoryBuilder setEntityTypeFilters(TypeFilter... entityTypeFilters) {_		this.entityTypeFilters = entityTypeFilters__		return this__	};specify,custom,type,filters,for,spring,based,scanning,for,entity,classes,p,default,is,to,search,all,specified,packages,for,classes,annotated,with,code,javax,persistence,entity,code,javax,persistence,embeddable,or,code,javax,persistence,mapped,superclass,see,scan,packages;public,local,session,factory,builder,set,entity,type,filters,type,filter,entity,type,filters,this,entity,type,filters,entity,type,filters,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setEntityTypeFilters(TypeFilter... entityTypeFilters);1495868221;Specify custom type filters for Spring-based scanning for entity classes._<p>Default is to search all specified packages for classes annotated with_{@code @javax.persistence.Entity}, {@code @javax.persistence.Embeddable}_or {@code @javax.persistence.MappedSuperclass}._@see #scanPackages;public LocalSessionFactoryBuilder setEntityTypeFilters(TypeFilter... entityTypeFilters) {_		this.entityTypeFilters = entityTypeFilters__		return this__	};specify,custom,type,filters,for,spring,based,scanning,for,entity,classes,p,default,is,to,search,all,specified,packages,for,classes,annotated,with,code,javax,persistence,entity,code,javax,persistence,embeddable,or,code,javax,persistence,mapped,superclass,see,scan,packages;public,local,session,factory,builder,set,entity,type,filters,type,filter,entity,type,filters,this,entity,type,filters,entity,type,filters,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setEntityTypeFilters(TypeFilter... entityTypeFilters);1496837955;Specify custom type filters for Spring-based scanning for entity classes._<p>Default is to search all specified packages for classes annotated with_{@code @javax.persistence.Entity}, {@code @javax.persistence.Embeddable}_or {@code @javax.persistence.MappedSuperclass}._@see #scanPackages;public LocalSessionFactoryBuilder setEntityTypeFilters(TypeFilter... entityTypeFilters) {_		this.entityTypeFilters = entityTypeFilters__		return this__	};specify,custom,type,filters,for,spring,based,scanning,for,entity,classes,p,default,is,to,search,all,specified,packages,for,classes,annotated,with,code,javax,persistence,entity,code,javax,persistence,embeddable,or,code,javax,persistence,mapped,superclass,see,scan,packages;public,local,session,factory,builder,set,entity,type,filters,type,filter,entity,type,filters,this,entity,type,filters,entity,type,filters,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setEntityTypeFilters(TypeFilter... entityTypeFilters);1497341397;Specify custom type filters for Spring-based scanning for entity classes._<p>Default is to search all specified packages for classes annotated with_{@code @javax.persistence.Entity}, {@code @javax.persistence.Embeddable}_or {@code @javax.persistence.MappedSuperclass}._@see #scanPackages;public LocalSessionFactoryBuilder setEntityTypeFilters(TypeFilter... entityTypeFilters) {_		this.entityTypeFilters = entityTypeFilters__		return this__	};specify,custom,type,filters,for,spring,based,scanning,for,entity,classes,p,default,is,to,search,all,specified,packages,for,classes,annotated,with,code,javax,persistence,entity,code,javax,persistence,embeddable,or,code,javax,persistence,mapped,superclass,see,scan,packages;public,local,session,factory,builder,set,entity,type,filters,type,filter,entity,type,filters,this,entity,type,filters,entity,type,filters,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setEntityTypeFilters(TypeFilter... entityTypeFilters);1498780456;Specify custom type filters for Spring-based scanning for entity classes._<p>Default is to search all specified packages for classes annotated with_{@code @javax.persistence.Entity}, {@code @javax.persistence.Embeddable}_or {@code @javax.persistence.MappedSuperclass}._@see #scanPackages;public LocalSessionFactoryBuilder setEntityTypeFilters(TypeFilter... entityTypeFilters) {_		this.entityTypeFilters = entityTypeFilters__		return this__	};specify,custom,type,filters,for,spring,based,scanning,for,entity,classes,p,default,is,to,search,all,specified,packages,for,classes,annotated,with,code,javax,persistence,entity,code,javax,persistence,embeddable,or,code,javax,persistence,mapped,superclass,see,scan,packages;public,local,session,factory,builder,set,entity,type,filters,type,filter,entity,type,filters,this,entity,type,filters,entity,type,filters,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setEntityTypeFilters(TypeFilter... entityTypeFilters);1518264213;Specify custom type filters for Spring-based scanning for entity classes._<p>Default is to search all specified packages for classes annotated with_{@code @javax.persistence.Entity}, {@code @javax.persistence.Embeddable}_or {@code @javax.persistence.MappedSuperclass}._@see #scanPackages;public LocalSessionFactoryBuilder setEntityTypeFilters(TypeFilter... entityTypeFilters) {_		this.entityTypeFilters = entityTypeFilters__		return this__	};specify,custom,type,filters,for,spring,based,scanning,for,entity,classes,p,default,is,to,search,all,specified,packages,for,classes,annotated,with,code,javax,persistence,entity,code,javax,persistence,embeddable,or,code,javax,persistence,mapped,superclass,see,scan,packages;public,local,session,factory,builder,set,entity,type,filters,type,filter,entity,type,filters,this,entity,type,filters,entity,type,filters,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setEntityTypeFilters(TypeFilter... entityTypeFilters);1519860149;Specify custom type filters for Spring-based scanning for entity classes._<p>Default is to search all specified packages for classes annotated with_{@code @javax.persistence.Entity}, {@code @javax.persistence.Embeddable}_or {@code @javax.persistence.MappedSuperclass}._@see #scanPackages;public LocalSessionFactoryBuilder setEntityTypeFilters(TypeFilter... entityTypeFilters) {_		this.entityTypeFilters = entityTypeFilters__		return this__	};specify,custom,type,filters,for,spring,based,scanning,for,entity,classes,p,default,is,to,search,all,specified,packages,for,classes,annotated,with,code,javax,persistence,entity,code,javax,persistence,embeddable,or,code,javax,persistence,mapped,superclass,see,scan,packages;public,local,session,factory,builder,set,entity,type,filters,type,filter,entity,type,filters,this,entity,type,filters,entity,type,filters,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setEntityTypeFilters(TypeFilter... entityTypeFilters);1520373974;Specify custom type filters for Spring-based scanning for entity classes._<p>Default is to search all specified packages for classes annotated with_{@code @javax.persistence.Entity}, {@code @javax.persistence.Embeddable}_or {@code @javax.persistence.MappedSuperclass}._@see #scanPackages;public LocalSessionFactoryBuilder setEntityTypeFilters(TypeFilter... entityTypeFilters) {_		this.entityTypeFilters = entityTypeFilters__		return this__	};specify,custom,type,filters,for,spring,based,scanning,for,entity,classes,p,default,is,to,search,all,specified,packages,for,classes,annotated,with,code,javax,persistence,entity,code,javax,persistence,embeddable,or,code,javax,persistence,mapped,superclass,see,scan,packages;public,local,session,factory,builder,set,entity,type,filters,type,filter,entity,type,filters,this,entity,type,filters,entity,type,filters,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setEntityTypeFilters(TypeFilter... entityTypeFilters);1530188116;Specify custom type filters for Spring-based scanning for entity classes._<p>Default is to search all specified packages for classes annotated with_{@code @javax.persistence.Entity}, {@code @javax.persistence.Embeddable}_or {@code @javax.persistence.MappedSuperclass}._@see #scanPackages;public LocalSessionFactoryBuilder setEntityTypeFilters(TypeFilter... entityTypeFilters) {_		this.entityTypeFilters = entityTypeFilters__		return this__	};specify,custom,type,filters,for,spring,based,scanning,for,entity,classes,p,default,is,to,search,all,specified,packages,for,classes,annotated,with,code,javax,persistence,entity,code,javax,persistence,embeddable,or,code,javax,persistence,mapped,superclass,see,scan,packages;public,local,session,factory,builder,set,entity,type,filters,type,filter,entity,type,filters,this,entity,type,filters,entity,type,filters,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setEntityTypeFilters(TypeFilter... entityTypeFilters);1530724999;Specify custom type filters for Spring-based scanning for entity classes._<p>Default is to search all specified packages for classes annotated with_{@code @javax.persistence.Entity}, {@code @javax.persistence.Embeddable}_or {@code @javax.persistence.MappedSuperclass}._@see #scanPackages;public LocalSessionFactoryBuilder setEntityTypeFilters(TypeFilter... entityTypeFilters) {_		this.entityTypeFilters = entityTypeFilters__		return this__	};specify,custom,type,filters,for,spring,based,scanning,for,entity,classes,p,default,is,to,search,all,specified,packages,for,classes,annotated,with,code,javax,persistence,entity,code,javax,persistence,embeddable,or,code,javax,persistence,mapped,superclass,see,scan,packages;public,local,session,factory,builder,set,entity,type,filters,type,filter,entity,type,filters,this,entity,type,filters,entity,type,filters,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setEntityTypeFilters(TypeFilter... entityTypeFilters);1530802115;Specify custom type filters for Spring-based scanning for entity classes._<p>Default is to search all specified packages for classes annotated with_{@code @javax.persistence.Entity}, {@code @javax.persistence.Embeddable}_or {@code @javax.persistence.MappedSuperclass}._@see #scanPackages;public LocalSessionFactoryBuilder setEntityTypeFilters(TypeFilter... entityTypeFilters) {_		this.entityTypeFilters = entityTypeFilters__		return this__	};specify,custom,type,filters,for,spring,based,scanning,for,entity,classes,p,default,is,to,search,all,specified,packages,for,classes,annotated,with,code,javax,persistence,entity,code,javax,persistence,embeddable,or,code,javax,persistence,mapped,superclass,see,scan,packages;public,local,session,factory,builder,set,entity,type,filters,type,filter,entity,type,filters,this,entity,type,filters,entity,type,filters,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setEntityTypeFilters(TypeFilter... entityTypeFilters);1531739026;Specify custom type filters for Spring-based scanning for entity classes._<p>Default is to search all specified packages for classes annotated with_{@code @javax.persistence.Entity}, {@code @javax.persistence.Embeddable}_or {@code @javax.persistence.MappedSuperclass}._@see #scanPackages;public LocalSessionFactoryBuilder setEntityTypeFilters(TypeFilter... entityTypeFilters) {_		this.entityTypeFilters = entityTypeFilters__		return this__	};specify,custom,type,filters,for,spring,based,scanning,for,entity,classes,p,default,is,to,search,all,specified,packages,for,classes,annotated,with,code,javax,persistence,entity,code,javax,persistence,embeddable,or,code,javax,persistence,mapped,superclass,see,scan,packages;public,local,session,factory,builder,set,entity,type,filters,type,filter,entity,type,filters,this,entity,type,filters,entity,type,filters,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ResourceLoader resourceLoader);1495868221;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param resourceLoader the ResourceLoader to load application classes from;public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ResourceLoader resourceLoader) {_		this(dataSource, resourceLoader, new MetadataSources(_				new BootstrapServiceRegistryBuilder().applyClassLoader(resourceLoader.getClassLoader()).build()))__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,resource,loader,the,resource,loader,to,load,application,classes,from;public,local,session,factory,builder,nullable,data,source,data,source,resource,loader,resource,loader,this,data,source,resource,loader,new,metadata,sources,new,bootstrap,service,registry,builder,apply,class,loader,resource,loader,get,class,loader,build
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ResourceLoader resourceLoader);1496837955;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param resourceLoader the ResourceLoader to load application classes from;public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ResourceLoader resourceLoader) {_		this(dataSource, resourceLoader, new MetadataSources(_				new BootstrapServiceRegistryBuilder().applyClassLoader(resourceLoader.getClassLoader()).build()))__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,resource,loader,the,resource,loader,to,load,application,classes,from;public,local,session,factory,builder,nullable,data,source,data,source,resource,loader,resource,loader,this,data,source,resource,loader,new,metadata,sources,new,bootstrap,service,registry,builder,apply,class,loader,resource,loader,get,class,loader,build
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ResourceLoader resourceLoader);1497341397;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param resourceLoader the ResourceLoader to load application classes from;public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ResourceLoader resourceLoader) {_		this(dataSource, resourceLoader, new MetadataSources(_				new BootstrapServiceRegistryBuilder().applyClassLoader(resourceLoader.getClassLoader()).build()))__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,resource,loader,the,resource,loader,to,load,application,classes,from;public,local,session,factory,builder,nullable,data,source,data,source,resource,loader,resource,loader,this,data,source,resource,loader,new,metadata,sources,new,bootstrap,service,registry,builder,apply,class,loader,resource,loader,get,class,loader,build
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ResourceLoader resourceLoader);1498780456;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param resourceLoader the ResourceLoader to load application classes from;public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ResourceLoader resourceLoader) {_		this(dataSource, resourceLoader, new MetadataSources(_				new BootstrapServiceRegistryBuilder().applyClassLoader(resourceLoader.getClassLoader()).build()))__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,resource,loader,the,resource,loader,to,load,application,classes,from;public,local,session,factory,builder,nullable,data,source,data,source,resource,loader,resource,loader,this,data,source,resource,loader,new,metadata,sources,new,bootstrap,service,registry,builder,apply,class,loader,resource,loader,get,class,loader,build
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ResourceLoader resourceLoader);1518264213;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param resourceLoader the ResourceLoader to load application classes from;public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ResourceLoader resourceLoader) {_		this(dataSource, resourceLoader, new MetadataSources(_				new BootstrapServiceRegistryBuilder().applyClassLoader(resourceLoader.getClassLoader()).build()))__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,resource,loader,the,resource,loader,to,load,application,classes,from;public,local,session,factory,builder,nullable,data,source,data,source,resource,loader,resource,loader,this,data,source,resource,loader,new,metadata,sources,new,bootstrap,service,registry,builder,apply,class,loader,resource,loader,get,class,loader,build
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ResourceLoader resourceLoader);1519860149;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param resourceLoader the ResourceLoader to load application classes from;public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ResourceLoader resourceLoader) {_		this(dataSource, resourceLoader, new MetadataSources(_				new BootstrapServiceRegistryBuilder().applyClassLoader(resourceLoader.getClassLoader()).build()))__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,resource,loader,the,resource,loader,to,load,application,classes,from;public,local,session,factory,builder,nullable,data,source,data,source,resource,loader,resource,loader,this,data,source,resource,loader,new,metadata,sources,new,bootstrap,service,registry,builder,apply,class,loader,resource,loader,get,class,loader,build
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ResourceLoader resourceLoader);1520373974;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param resourceLoader the ResourceLoader to load application classes from;public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ResourceLoader resourceLoader) {_		this(dataSource, resourceLoader, new MetadataSources(_				new BootstrapServiceRegistryBuilder().applyClassLoader(resourceLoader.getClassLoader()).build()))__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,resource,loader,the,resource,loader,to,load,application,classes,from;public,local,session,factory,builder,nullable,data,source,data,source,resource,loader,resource,loader,this,data,source,resource,loader,new,metadata,sources,new,bootstrap,service,registry,builder,apply,class,loader,resource,loader,get,class,loader,build
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ResourceLoader resourceLoader);1530188116;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param resourceLoader the ResourceLoader to load application classes from;public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ResourceLoader resourceLoader) {_		this(dataSource, resourceLoader, new MetadataSources(_				new BootstrapServiceRegistryBuilder().applyClassLoader(resourceLoader.getClassLoader()).build()))__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,resource,loader,the,resource,loader,to,load,application,classes,from;public,local,session,factory,builder,nullable,data,source,data,source,resource,loader,resource,loader,this,data,source,resource,loader,new,metadata,sources,new,bootstrap,service,registry,builder,apply,class,loader,resource,loader,get,class,loader,build
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ResourceLoader resourceLoader);1530724999;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param resourceLoader the ResourceLoader to load application classes from;public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ResourceLoader resourceLoader) {_		this(dataSource, resourceLoader, new MetadataSources(_				new BootstrapServiceRegistryBuilder().applyClassLoader(resourceLoader.getClassLoader()).build()))__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,resource,loader,the,resource,loader,to,load,application,classes,from;public,local,session,factory,builder,nullable,data,source,data,source,resource,loader,resource,loader,this,data,source,resource,loader,new,metadata,sources,new,bootstrap,service,registry,builder,apply,class,loader,resource,loader,get,class,loader,build
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ResourceLoader resourceLoader);1530802115;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param resourceLoader the ResourceLoader to load application classes from;public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ResourceLoader resourceLoader) {_		this(dataSource, resourceLoader, new MetadataSources(_				new BootstrapServiceRegistryBuilder().applyClassLoader(resourceLoader.getClassLoader()).build()))__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,resource,loader,the,resource,loader,to,load,application,classes,from;public,local,session,factory,builder,nullable,data,source,data,source,resource,loader,resource,loader,this,data,source,resource,loader,new,metadata,sources,new,bootstrap,service,registry,builder,apply,class,loader,resource,loader,get,class,loader,build
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ResourceLoader resourceLoader);1531739026;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param resourceLoader the ResourceLoader to load application classes from;public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ResourceLoader resourceLoader) {_		this(dataSource, resourceLoader, new MetadataSources(_				new BootstrapServiceRegistryBuilder().applyClassLoader(resourceLoader.getClassLoader()).build()))__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,resource,loader,the,resource,loader,to,load,application,classes,from;public,local,session,factory,builder,nullable,data,source,data,source,resource,loader,resource,loader,this,data,source,resource,loader,new,metadata,sources,new,bootstrap,service,registry,builder,apply,class,loader,resource,loader,get,class,loader,build
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(DataSource dataSource, ResourceLoader resourceLoader);1467668243;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param resourceLoader the ResourceLoader to load application classes from;public LocalSessionFactoryBuilder(DataSource dataSource, ResourceLoader resourceLoader) {_		this(dataSource, resourceLoader, new MetadataSources(_				new BootstrapServiceRegistryBuilder().applyClassLoader(resourceLoader.getClassLoader()).build()))__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,resource,loader,the,resource,loader,to,load,application,classes,from;public,local,session,factory,builder,data,source,data,source,resource,loader,resource,loader,this,data,source,resource,loader,new,metadata,sources,new,bootstrap,service,registry,builder,apply,class,loader,resource,loader,get,class,loader,build
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(DataSource dataSource, ResourceLoader resourceLoader);1467730834;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param resourceLoader the ResourceLoader to load application classes from;public LocalSessionFactoryBuilder(DataSource dataSource, ResourceLoader resourceLoader) {_		this(dataSource, resourceLoader, new MetadataSources(_				new BootstrapServiceRegistryBuilder().applyClassLoader(resourceLoader.getClassLoader()).build()))__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,resource,loader,the,resource,loader,to,load,application,classes,from;public,local,session,factory,builder,data,source,data,source,resource,loader,resource,loader,this,data,source,resource,loader,new,metadata,sources,new,bootstrap,service,registry,builder,apply,class,loader,resource,loader,get,class,loader,build
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(DataSource dataSource, ResourceLoader resourceLoader);1468941907;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param resourceLoader the ResourceLoader to load application classes from;public LocalSessionFactoryBuilder(DataSource dataSource, ResourceLoader resourceLoader) {_		this(dataSource, resourceLoader, new MetadataSources(_				new BootstrapServiceRegistryBuilder().applyClassLoader(resourceLoader.getClassLoader()).build()))__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,resource,loader,the,resource,loader,to,load,application,classes,from;public,local,session,factory,builder,data,source,data,source,resource,loader,resource,loader,this,data,source,resource,loader,new,metadata,sources,new,bootstrap,service,registry,builder,apply,class,loader,resource,loader,get,class,loader,build
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(DataSource dataSource, ResourceLoader resourceLoader);1470272834;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param resourceLoader the ResourceLoader to load application classes from;public LocalSessionFactoryBuilder(DataSource dataSource, ResourceLoader resourceLoader) {_		this(dataSource, resourceLoader, new MetadataSources(_				new BootstrapServiceRegistryBuilder().applyClassLoader(resourceLoader.getClassLoader()).build()))__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,resource,loader,the,resource,loader,to,load,application,classes,from;public,local,session,factory,builder,data,source,data,source,resource,loader,resource,loader,this,data,source,resource,loader,new,metadata,sources,new,bootstrap,service,registry,builder,apply,class,loader,resource,loader,get,class,loader,build
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(DataSource dataSource, ResourceLoader resourceLoader);1470660485;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param resourceLoader the ResourceLoader to load application classes from;public LocalSessionFactoryBuilder(DataSource dataSource, ResourceLoader resourceLoader) {_		this(dataSource, resourceLoader, new MetadataSources(_				new BootstrapServiceRegistryBuilder().applyClassLoader(resourceLoader.getClassLoader()).build()))__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,resource,loader,the,resource,loader,to,load,application,classes,from;public,local,session,factory,builder,data,source,data,source,resource,loader,resource,loader,this,data,source,resource,loader,new,metadata,sources,new,bootstrap,service,registry,builder,apply,class,loader,resource,loader,get,class,loader,build
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setMultiTenantConnectionProvider(MultiTenantConnectionProvider multiTenantConnectionProvider);1467668243;Set a {@link MultiTenantConnectionProvider} to be passed on to the SessionFactory._@since 4.3_@see AvailableSettings#MULTI_TENANT_CONNECTION_PROVIDER;public LocalSessionFactoryBuilder setMultiTenantConnectionProvider(MultiTenantConnectionProvider multiTenantConnectionProvider) {_		getProperties().put(AvailableSettings.MULTI_TENANT_CONNECTION_PROVIDER, multiTenantConnectionProvider)__		return this__	};set,a,link,multi,tenant,connection,provider,to,be,passed,on,to,the,session,factory,since,4,3,see,available,settings;public,local,session,factory,builder,set,multi,tenant,connection,provider,multi,tenant,connection,provider,multi,tenant,connection,provider,get,properties,put,available,settings,multi,tenant,connection,provider,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setMultiTenantConnectionProvider(MultiTenantConnectionProvider multiTenantConnectionProvider);1467730834;Set a {@link MultiTenantConnectionProvider} to be passed on to the SessionFactory._@since 4.3_@see AvailableSettings#MULTI_TENANT_CONNECTION_PROVIDER;public LocalSessionFactoryBuilder setMultiTenantConnectionProvider(MultiTenantConnectionProvider multiTenantConnectionProvider) {_		getProperties().put(AvailableSettings.MULTI_TENANT_CONNECTION_PROVIDER, multiTenantConnectionProvider)__		return this__	};set,a,link,multi,tenant,connection,provider,to,be,passed,on,to,the,session,factory,since,4,3,see,available,settings;public,local,session,factory,builder,set,multi,tenant,connection,provider,multi,tenant,connection,provider,multi,tenant,connection,provider,get,properties,put,available,settings,multi,tenant,connection,provider,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setMultiTenantConnectionProvider(MultiTenantConnectionProvider multiTenantConnectionProvider);1468941907;Set a {@link MultiTenantConnectionProvider} to be passed on to the SessionFactory._@since 4.3_@see AvailableSettings#MULTI_TENANT_CONNECTION_PROVIDER;public LocalSessionFactoryBuilder setMultiTenantConnectionProvider(MultiTenantConnectionProvider multiTenantConnectionProvider) {_		getProperties().put(AvailableSettings.MULTI_TENANT_CONNECTION_PROVIDER, multiTenantConnectionProvider)__		return this__	};set,a,link,multi,tenant,connection,provider,to,be,passed,on,to,the,session,factory,since,4,3,see,available,settings;public,local,session,factory,builder,set,multi,tenant,connection,provider,multi,tenant,connection,provider,multi,tenant,connection,provider,get,properties,put,available,settings,multi,tenant,connection,provider,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setMultiTenantConnectionProvider(MultiTenantConnectionProvider multiTenantConnectionProvider);1470272834;Set a {@link MultiTenantConnectionProvider} to be passed on to the SessionFactory._@since 4.3_@see AvailableSettings#MULTI_TENANT_CONNECTION_PROVIDER;public LocalSessionFactoryBuilder setMultiTenantConnectionProvider(MultiTenantConnectionProvider multiTenantConnectionProvider) {_		getProperties().put(AvailableSettings.MULTI_TENANT_CONNECTION_PROVIDER, multiTenantConnectionProvider)__		return this__	};set,a,link,multi,tenant,connection,provider,to,be,passed,on,to,the,session,factory,since,4,3,see,available,settings;public,local,session,factory,builder,set,multi,tenant,connection,provider,multi,tenant,connection,provider,multi,tenant,connection,provider,get,properties,put,available,settings,multi,tenant,connection,provider,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setMultiTenantConnectionProvider(MultiTenantConnectionProvider multiTenantConnectionProvider);1470660485;Set a {@link MultiTenantConnectionProvider} to be passed on to the SessionFactory._@since 4.3_@see AvailableSettings#MULTI_TENANT_CONNECTION_PROVIDER;public LocalSessionFactoryBuilder setMultiTenantConnectionProvider(MultiTenantConnectionProvider multiTenantConnectionProvider) {_		getProperties().put(AvailableSettings.MULTI_TENANT_CONNECTION_PROVIDER, multiTenantConnectionProvider)__		return this__	};set,a,link,multi,tenant,connection,provider,to,be,passed,on,to,the,session,factory,since,4,3,see,available,settings;public,local,session,factory,builder,set,multi,tenant,connection,provider,multi,tenant,connection,provider,multi,tenant,connection,provider,get,properties,put,available,settings,multi,tenant,connection,provider,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setMultiTenantConnectionProvider(MultiTenantConnectionProvider multiTenantConnectionProvider);1495868221;Set a {@link MultiTenantConnectionProvider} to be passed on to the SessionFactory._@since 4.3_@see AvailableSettings#MULTI_TENANT_CONNECTION_PROVIDER;public LocalSessionFactoryBuilder setMultiTenantConnectionProvider(MultiTenantConnectionProvider multiTenantConnectionProvider) {_		getProperties().put(AvailableSettings.MULTI_TENANT_CONNECTION_PROVIDER, multiTenantConnectionProvider)__		return this__	};set,a,link,multi,tenant,connection,provider,to,be,passed,on,to,the,session,factory,since,4,3,see,available,settings;public,local,session,factory,builder,set,multi,tenant,connection,provider,multi,tenant,connection,provider,multi,tenant,connection,provider,get,properties,put,available,settings,multi,tenant,connection,provider,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setMultiTenantConnectionProvider(MultiTenantConnectionProvider multiTenantConnectionProvider);1496837955;Set a {@link MultiTenantConnectionProvider} to be passed on to the SessionFactory._@since 4.3_@see AvailableSettings#MULTI_TENANT_CONNECTION_PROVIDER;public LocalSessionFactoryBuilder setMultiTenantConnectionProvider(MultiTenantConnectionProvider multiTenantConnectionProvider) {_		getProperties().put(AvailableSettings.MULTI_TENANT_CONNECTION_PROVIDER, multiTenantConnectionProvider)__		return this__	};set,a,link,multi,tenant,connection,provider,to,be,passed,on,to,the,session,factory,since,4,3,see,available,settings;public,local,session,factory,builder,set,multi,tenant,connection,provider,multi,tenant,connection,provider,multi,tenant,connection,provider,get,properties,put,available,settings,multi,tenant,connection,provider,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setMultiTenantConnectionProvider(MultiTenantConnectionProvider multiTenantConnectionProvider);1497341397;Set a {@link MultiTenantConnectionProvider} to be passed on to the SessionFactory._@since 4.3_@see AvailableSettings#MULTI_TENANT_CONNECTION_PROVIDER;public LocalSessionFactoryBuilder setMultiTenantConnectionProvider(MultiTenantConnectionProvider multiTenantConnectionProvider) {_		getProperties().put(AvailableSettings.MULTI_TENANT_CONNECTION_PROVIDER, multiTenantConnectionProvider)__		return this__	};set,a,link,multi,tenant,connection,provider,to,be,passed,on,to,the,session,factory,since,4,3,see,available,settings;public,local,session,factory,builder,set,multi,tenant,connection,provider,multi,tenant,connection,provider,multi,tenant,connection,provider,get,properties,put,available,settings,multi,tenant,connection,provider,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setMultiTenantConnectionProvider(MultiTenantConnectionProvider multiTenantConnectionProvider);1498780456;Set a {@link MultiTenantConnectionProvider} to be passed on to the SessionFactory._@since 4.3_@see AvailableSettings#MULTI_TENANT_CONNECTION_PROVIDER;public LocalSessionFactoryBuilder setMultiTenantConnectionProvider(MultiTenantConnectionProvider multiTenantConnectionProvider) {_		getProperties().put(AvailableSettings.MULTI_TENANT_CONNECTION_PROVIDER, multiTenantConnectionProvider)__		return this__	};set,a,link,multi,tenant,connection,provider,to,be,passed,on,to,the,session,factory,since,4,3,see,available,settings;public,local,session,factory,builder,set,multi,tenant,connection,provider,multi,tenant,connection,provider,multi,tenant,connection,provider,get,properties,put,available,settings,multi,tenant,connection,provider,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setMultiTenantConnectionProvider(MultiTenantConnectionProvider multiTenantConnectionProvider);1518264213;Set a {@link MultiTenantConnectionProvider} to be passed on to the SessionFactory._@since 4.3_@see AvailableSettings#MULTI_TENANT_CONNECTION_PROVIDER;public LocalSessionFactoryBuilder setMultiTenantConnectionProvider(MultiTenantConnectionProvider multiTenantConnectionProvider) {_		getProperties().put(AvailableSettings.MULTI_TENANT_CONNECTION_PROVIDER, multiTenantConnectionProvider)__		return this__	};set,a,link,multi,tenant,connection,provider,to,be,passed,on,to,the,session,factory,since,4,3,see,available,settings;public,local,session,factory,builder,set,multi,tenant,connection,provider,multi,tenant,connection,provider,multi,tenant,connection,provider,get,properties,put,available,settings,multi,tenant,connection,provider,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setMultiTenantConnectionProvider(MultiTenantConnectionProvider multiTenantConnectionProvider);1519860149;Set a {@link MultiTenantConnectionProvider} to be passed on to the SessionFactory._@since 4.3_@see AvailableSettings#MULTI_TENANT_CONNECTION_PROVIDER;public LocalSessionFactoryBuilder setMultiTenantConnectionProvider(MultiTenantConnectionProvider multiTenantConnectionProvider) {_		getProperties().put(AvailableSettings.MULTI_TENANT_CONNECTION_PROVIDER, multiTenantConnectionProvider)__		return this__	};set,a,link,multi,tenant,connection,provider,to,be,passed,on,to,the,session,factory,since,4,3,see,available,settings;public,local,session,factory,builder,set,multi,tenant,connection,provider,multi,tenant,connection,provider,multi,tenant,connection,provider,get,properties,put,available,settings,multi,tenant,connection,provider,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setMultiTenantConnectionProvider(MultiTenantConnectionProvider multiTenantConnectionProvider);1520373974;Set a {@link MultiTenantConnectionProvider} to be passed on to the SessionFactory._@since 4.3_@see AvailableSettings#MULTI_TENANT_CONNECTION_PROVIDER;public LocalSessionFactoryBuilder setMultiTenantConnectionProvider(MultiTenantConnectionProvider multiTenantConnectionProvider) {_		getProperties().put(AvailableSettings.MULTI_TENANT_CONNECTION_PROVIDER, multiTenantConnectionProvider)__		return this__	};set,a,link,multi,tenant,connection,provider,to,be,passed,on,to,the,session,factory,since,4,3,see,available,settings;public,local,session,factory,builder,set,multi,tenant,connection,provider,multi,tenant,connection,provider,multi,tenant,connection,provider,get,properties,put,available,settings,multi,tenant,connection,provider,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setMultiTenantConnectionProvider(MultiTenantConnectionProvider multiTenantConnectionProvider);1530188116;Set a {@link MultiTenantConnectionProvider} to be passed on to the SessionFactory._@since 4.3_@see AvailableSettings#MULTI_TENANT_CONNECTION_PROVIDER;public LocalSessionFactoryBuilder setMultiTenantConnectionProvider(MultiTenantConnectionProvider multiTenantConnectionProvider) {_		getProperties().put(AvailableSettings.MULTI_TENANT_CONNECTION_PROVIDER, multiTenantConnectionProvider)__		return this__	};set,a,link,multi,tenant,connection,provider,to,be,passed,on,to,the,session,factory,since,4,3,see,available,settings;public,local,session,factory,builder,set,multi,tenant,connection,provider,multi,tenant,connection,provider,multi,tenant,connection,provider,get,properties,put,available,settings,multi,tenant,connection,provider,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setMultiTenantConnectionProvider(MultiTenantConnectionProvider multiTenantConnectionProvider);1530724999;Set a {@link MultiTenantConnectionProvider} to be passed on to the SessionFactory._@since 4.3_@see AvailableSettings#MULTI_TENANT_CONNECTION_PROVIDER;public LocalSessionFactoryBuilder setMultiTenantConnectionProvider(MultiTenantConnectionProvider multiTenantConnectionProvider) {_		getProperties().put(AvailableSettings.MULTI_TENANT_CONNECTION_PROVIDER, multiTenantConnectionProvider)__		return this__	};set,a,link,multi,tenant,connection,provider,to,be,passed,on,to,the,session,factory,since,4,3,see,available,settings;public,local,session,factory,builder,set,multi,tenant,connection,provider,multi,tenant,connection,provider,multi,tenant,connection,provider,get,properties,put,available,settings,multi,tenant,connection,provider,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setMultiTenantConnectionProvider(MultiTenantConnectionProvider multiTenantConnectionProvider);1530802115;Set a {@link MultiTenantConnectionProvider} to be passed on to the SessionFactory._@since 4.3_@see AvailableSettings#MULTI_TENANT_CONNECTION_PROVIDER;public LocalSessionFactoryBuilder setMultiTenantConnectionProvider(MultiTenantConnectionProvider multiTenantConnectionProvider) {_		getProperties().put(AvailableSettings.MULTI_TENANT_CONNECTION_PROVIDER, multiTenantConnectionProvider)__		return this__	};set,a,link,multi,tenant,connection,provider,to,be,passed,on,to,the,session,factory,since,4,3,see,available,settings;public,local,session,factory,builder,set,multi,tenant,connection,provider,multi,tenant,connection,provider,multi,tenant,connection,provider,get,properties,put,available,settings,multi,tenant,connection,provider,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setMultiTenantConnectionProvider(MultiTenantConnectionProvider multiTenantConnectionProvider);1531739026;Set a {@link MultiTenantConnectionProvider} to be passed on to the SessionFactory._@since 4.3_@see AvailableSettings#MULTI_TENANT_CONNECTION_PROVIDER;public LocalSessionFactoryBuilder setMultiTenantConnectionProvider(MultiTenantConnectionProvider multiTenantConnectionProvider) {_		getProperties().put(AvailableSettings.MULTI_TENANT_CONNECTION_PROVIDER, multiTenantConnectionProvider)__		return this__	};set,a,link,multi,tenant,connection,provider,to,be,passed,on,to,the,session,factory,since,4,3,see,available,settings;public,local,session,factory,builder,set,multi,tenant,connection,provider,multi,tenant,connection,provider,multi,tenant,connection,provider,get,properties,put,available,settings,multi,tenant,connection,provider,return,this
LocalSessionFactoryBuilder -> public SessionFactory buildSessionFactory(AsyncTaskExecutor bootstrapExecutor);1467668243;Build the Hibernate {@code SessionFactory} through background bootstrapping,_using the given executor for a parallel initialization phase_(e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor})._<p>{@code SessionFactory} initialization will then switch into background_bootstrap mode, with a {@code SessionFactory} proxy immediately returned for_injection purposes instead of waiting for Hibernate's bootstrapping to complete._However, note that the first actual call to a {@code SessionFactory} method will_then block until Hibernate's bootstrapping completed, if not ready by then._For maximum benefit, make sure to avoid early {@code SessionFactory} calls_in init methods of related beans, even for metadata introspection purposes._@since 4.3_@see #buildSessionFactory();public SessionFactory buildSessionFactory(AsyncTaskExecutor bootstrapExecutor) {_		Assert.notNull(bootstrapExecutor, "AsyncTaskExecutor must not be null")__		return (SessionFactory) Proxy.newProxyInstance(this.resourcePatternResolver.getClassLoader(),_				new Class<?>[] {SessionFactoryImplementor.class, InfrastructureProxy.class},_				new BootstrapSessionFactoryInvocationHandler(bootstrapExecutor))__	};build,the,hibernate,code,session,factory,through,background,bootstrapping,using,the,given,executor,for,a,parallel,initialization,phase,e,g,a,link,org,springframework,core,task,simple,async,task,executor,p,code,session,factory,initialization,will,then,switch,into,background,bootstrap,mode,with,a,code,session,factory,proxy,immediately,returned,for,injection,purposes,instead,of,waiting,for,hibernate,s,bootstrapping,to,complete,however,note,that,the,first,actual,call,to,a,code,session,factory,method,will,then,block,until,hibernate,s,bootstrapping,completed,if,not,ready,by,then,for,maximum,benefit,make,sure,to,avoid,early,code,session,factory,calls,in,init,methods,of,related,beans,even,for,metadata,introspection,purposes,since,4,3,see,build,session,factory;public,session,factory,build,session,factory,async,task,executor,bootstrap,executor,assert,not,null,bootstrap,executor,async,task,executor,must,not,be,null,return,session,factory,proxy,new,proxy,instance,this,resource,pattern,resolver,get,class,loader,new,class,session,factory,implementor,class,infrastructure,proxy,class,new,bootstrap,session,factory,invocation,handler,bootstrap,executor
LocalSessionFactoryBuilder -> public SessionFactory buildSessionFactory(AsyncTaskExecutor bootstrapExecutor);1467730834;Build the Hibernate {@code SessionFactory} through background bootstrapping,_using the given executor for a parallel initialization phase_(e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor})._<p>{@code SessionFactory} initialization will then switch into background_bootstrap mode, with a {@code SessionFactory} proxy immediately returned for_injection purposes instead of waiting for Hibernate's bootstrapping to complete._However, note that the first actual call to a {@code SessionFactory} method will_then block until Hibernate's bootstrapping completed, if not ready by then._For maximum benefit, make sure to avoid early {@code SessionFactory} calls_in init methods of related beans, even for metadata introspection purposes._@since 4.3_@see #buildSessionFactory();public SessionFactory buildSessionFactory(AsyncTaskExecutor bootstrapExecutor) {_		Assert.notNull(bootstrapExecutor, "AsyncTaskExecutor must not be null")__		return (SessionFactory) Proxy.newProxyInstance(this.resourcePatternResolver.getClassLoader(),_				new Class<?>[] {SessionFactoryImplementor.class, InfrastructureProxy.class},_				new BootstrapSessionFactoryInvocationHandler(bootstrapExecutor))__	};build,the,hibernate,code,session,factory,through,background,bootstrapping,using,the,given,executor,for,a,parallel,initialization,phase,e,g,a,link,org,springframework,core,task,simple,async,task,executor,p,code,session,factory,initialization,will,then,switch,into,background,bootstrap,mode,with,a,code,session,factory,proxy,immediately,returned,for,injection,purposes,instead,of,waiting,for,hibernate,s,bootstrapping,to,complete,however,note,that,the,first,actual,call,to,a,code,session,factory,method,will,then,block,until,hibernate,s,bootstrapping,completed,if,not,ready,by,then,for,maximum,benefit,make,sure,to,avoid,early,code,session,factory,calls,in,init,methods,of,related,beans,even,for,metadata,introspection,purposes,since,4,3,see,build,session,factory;public,session,factory,build,session,factory,async,task,executor,bootstrap,executor,assert,not,null,bootstrap,executor,async,task,executor,must,not,be,null,return,session,factory,proxy,new,proxy,instance,this,resource,pattern,resolver,get,class,loader,new,class,session,factory,implementor,class,infrastructure,proxy,class,new,bootstrap,session,factory,invocation,handler,bootstrap,executor
LocalSessionFactoryBuilder -> public SessionFactory buildSessionFactory(AsyncTaskExecutor bootstrapExecutor);1468941907;Build the Hibernate {@code SessionFactory} through background bootstrapping,_using the given executor for a parallel initialization phase_(e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor})._<p>{@code SessionFactory} initialization will then switch into background_bootstrap mode, with a {@code SessionFactory} proxy immediately returned for_injection purposes instead of waiting for Hibernate's bootstrapping to complete._However, note that the first actual call to a {@code SessionFactory} method will_then block until Hibernate's bootstrapping completed, if not ready by then._For maximum benefit, make sure to avoid early {@code SessionFactory} calls_in init methods of related beans, even for metadata introspection purposes._@since 4.3_@see #buildSessionFactory();public SessionFactory buildSessionFactory(AsyncTaskExecutor bootstrapExecutor) {_		Assert.notNull(bootstrapExecutor, "AsyncTaskExecutor must not be null")__		return (SessionFactory) Proxy.newProxyInstance(this.resourcePatternResolver.getClassLoader(),_				new Class<?>[] {SessionFactoryImplementor.class, InfrastructureProxy.class},_				new BootstrapSessionFactoryInvocationHandler(bootstrapExecutor))__	};build,the,hibernate,code,session,factory,through,background,bootstrapping,using,the,given,executor,for,a,parallel,initialization,phase,e,g,a,link,org,springframework,core,task,simple,async,task,executor,p,code,session,factory,initialization,will,then,switch,into,background,bootstrap,mode,with,a,code,session,factory,proxy,immediately,returned,for,injection,purposes,instead,of,waiting,for,hibernate,s,bootstrapping,to,complete,however,note,that,the,first,actual,call,to,a,code,session,factory,method,will,then,block,until,hibernate,s,bootstrapping,completed,if,not,ready,by,then,for,maximum,benefit,make,sure,to,avoid,early,code,session,factory,calls,in,init,methods,of,related,beans,even,for,metadata,introspection,purposes,since,4,3,see,build,session,factory;public,session,factory,build,session,factory,async,task,executor,bootstrap,executor,assert,not,null,bootstrap,executor,async,task,executor,must,not,be,null,return,session,factory,proxy,new,proxy,instance,this,resource,pattern,resolver,get,class,loader,new,class,session,factory,implementor,class,infrastructure,proxy,class,new,bootstrap,session,factory,invocation,handler,bootstrap,executor
LocalSessionFactoryBuilder -> public SessionFactory buildSessionFactory(AsyncTaskExecutor bootstrapExecutor);1470272834;Build the Hibernate {@code SessionFactory} through background bootstrapping,_using the given executor for a parallel initialization phase_(e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor})._<p>{@code SessionFactory} initialization will then switch into background_bootstrap mode, with a {@code SessionFactory} proxy immediately returned for_injection purposes instead of waiting for Hibernate's bootstrapping to complete._However, note that the first actual call to a {@code SessionFactory} method will_then block until Hibernate's bootstrapping completed, if not ready by then._For maximum benefit, make sure to avoid early {@code SessionFactory} calls_in init methods of related beans, even for metadata introspection purposes._@since 4.3_@see #buildSessionFactory();public SessionFactory buildSessionFactory(AsyncTaskExecutor bootstrapExecutor) {_		Assert.notNull(bootstrapExecutor, "AsyncTaskExecutor must not be null")__		return (SessionFactory) Proxy.newProxyInstance(this.resourcePatternResolver.getClassLoader(),_				new Class<?>[] {SessionFactoryImplementor.class, InfrastructureProxy.class},_				new BootstrapSessionFactoryInvocationHandler(bootstrapExecutor))__	};build,the,hibernate,code,session,factory,through,background,bootstrapping,using,the,given,executor,for,a,parallel,initialization,phase,e,g,a,link,org,springframework,core,task,simple,async,task,executor,p,code,session,factory,initialization,will,then,switch,into,background,bootstrap,mode,with,a,code,session,factory,proxy,immediately,returned,for,injection,purposes,instead,of,waiting,for,hibernate,s,bootstrapping,to,complete,however,note,that,the,first,actual,call,to,a,code,session,factory,method,will,then,block,until,hibernate,s,bootstrapping,completed,if,not,ready,by,then,for,maximum,benefit,make,sure,to,avoid,early,code,session,factory,calls,in,init,methods,of,related,beans,even,for,metadata,introspection,purposes,since,4,3,see,build,session,factory;public,session,factory,build,session,factory,async,task,executor,bootstrap,executor,assert,not,null,bootstrap,executor,async,task,executor,must,not,be,null,return,session,factory,proxy,new,proxy,instance,this,resource,pattern,resolver,get,class,loader,new,class,session,factory,implementor,class,infrastructure,proxy,class,new,bootstrap,session,factory,invocation,handler,bootstrap,executor
LocalSessionFactoryBuilder -> public SessionFactory buildSessionFactory(AsyncTaskExecutor bootstrapExecutor);1470660485;Build the Hibernate {@code SessionFactory} through background bootstrapping,_using the given executor for a parallel initialization phase_(e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor})._<p>{@code SessionFactory} initialization will then switch into background_bootstrap mode, with a {@code SessionFactory} proxy immediately returned for_injection purposes instead of waiting for Hibernate's bootstrapping to complete._However, note that the first actual call to a {@code SessionFactory} method will_then block until Hibernate's bootstrapping completed, if not ready by then._For maximum benefit, make sure to avoid early {@code SessionFactory} calls_in init methods of related beans, even for metadata introspection purposes._@since 4.3_@see #buildSessionFactory();public SessionFactory buildSessionFactory(AsyncTaskExecutor bootstrapExecutor) {_		Assert.notNull(bootstrapExecutor, "AsyncTaskExecutor must not be null")__		return (SessionFactory) Proxy.newProxyInstance(this.resourcePatternResolver.getClassLoader(),_				new Class<?>[] {SessionFactoryImplementor.class, InfrastructureProxy.class},_				new BootstrapSessionFactoryInvocationHandler(bootstrapExecutor))__	};build,the,hibernate,code,session,factory,through,background,bootstrapping,using,the,given,executor,for,a,parallel,initialization,phase,e,g,a,link,org,springframework,core,task,simple,async,task,executor,p,code,session,factory,initialization,will,then,switch,into,background,bootstrap,mode,with,a,code,session,factory,proxy,immediately,returned,for,injection,purposes,instead,of,waiting,for,hibernate,s,bootstrapping,to,complete,however,note,that,the,first,actual,call,to,a,code,session,factory,method,will,then,block,until,hibernate,s,bootstrapping,completed,if,not,ready,by,then,for,maximum,benefit,make,sure,to,avoid,early,code,session,factory,calls,in,init,methods,of,related,beans,even,for,metadata,introspection,purposes,since,4,3,see,build,session,factory;public,session,factory,build,session,factory,async,task,executor,bootstrap,executor,assert,not,null,bootstrap,executor,async,task,executor,must,not,be,null,return,session,factory,proxy,new,proxy,instance,this,resource,pattern,resolver,get,class,loader,new,class,session,factory,implementor,class,infrastructure,proxy,class,new,bootstrap,session,factory,invocation,handler,bootstrap,executor
LocalSessionFactoryBuilder -> public SessionFactory buildSessionFactory(AsyncTaskExecutor bootstrapExecutor);1495868221;Build the Hibernate {@code SessionFactory} through background bootstrapping,_using the given executor for a parallel initialization phase_(e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor})._<p>{@code SessionFactory} initialization will then switch into background_bootstrap mode, with a {@code SessionFactory} proxy immediately returned for_injection purposes instead of waiting for Hibernate's bootstrapping to complete._However, note that the first actual call to a {@code SessionFactory} method will_then block until Hibernate's bootstrapping completed, if not ready by then._For maximum benefit, make sure to avoid early {@code SessionFactory} calls_in init methods of related beans, even for metadata introspection purposes._@since 4.3_@see #buildSessionFactory();public SessionFactory buildSessionFactory(AsyncTaskExecutor bootstrapExecutor) {_		Assert.notNull(bootstrapExecutor, "AsyncTaskExecutor must not be null")__		return (SessionFactory) Proxy.newProxyInstance(this.resourcePatternResolver.getClassLoader(),_				new Class<?>[] {SessionFactoryImplementor.class, InfrastructureProxy.class},_				new BootstrapSessionFactoryInvocationHandler(bootstrapExecutor))__	};build,the,hibernate,code,session,factory,through,background,bootstrapping,using,the,given,executor,for,a,parallel,initialization,phase,e,g,a,link,org,springframework,core,task,simple,async,task,executor,p,code,session,factory,initialization,will,then,switch,into,background,bootstrap,mode,with,a,code,session,factory,proxy,immediately,returned,for,injection,purposes,instead,of,waiting,for,hibernate,s,bootstrapping,to,complete,however,note,that,the,first,actual,call,to,a,code,session,factory,method,will,then,block,until,hibernate,s,bootstrapping,completed,if,not,ready,by,then,for,maximum,benefit,make,sure,to,avoid,early,code,session,factory,calls,in,init,methods,of,related,beans,even,for,metadata,introspection,purposes,since,4,3,see,build,session,factory;public,session,factory,build,session,factory,async,task,executor,bootstrap,executor,assert,not,null,bootstrap,executor,async,task,executor,must,not,be,null,return,session,factory,proxy,new,proxy,instance,this,resource,pattern,resolver,get,class,loader,new,class,session,factory,implementor,class,infrastructure,proxy,class,new,bootstrap,session,factory,invocation,handler,bootstrap,executor
LocalSessionFactoryBuilder -> public SessionFactory buildSessionFactory(AsyncTaskExecutor bootstrapExecutor);1496837955;Build the Hibernate {@code SessionFactory} through background bootstrapping,_using the given executor for a parallel initialization phase_(e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor})._<p>{@code SessionFactory} initialization will then switch into background_bootstrap mode, with a {@code SessionFactory} proxy immediately returned for_injection purposes instead of waiting for Hibernate's bootstrapping to complete._However, note that the first actual call to a {@code SessionFactory} method will_then block until Hibernate's bootstrapping completed, if not ready by then._For maximum benefit, make sure to avoid early {@code SessionFactory} calls_in init methods of related beans, even for metadata introspection purposes._@since 4.3_@see #buildSessionFactory();public SessionFactory buildSessionFactory(AsyncTaskExecutor bootstrapExecutor) {_		Assert.notNull(bootstrapExecutor, "AsyncTaskExecutor must not be null")__		return (SessionFactory) Proxy.newProxyInstance(this.resourcePatternResolver.getClassLoader(),_				new Class<?>[] {SessionFactoryImplementor.class, InfrastructureProxy.class},_				new BootstrapSessionFactoryInvocationHandler(bootstrapExecutor))__	};build,the,hibernate,code,session,factory,through,background,bootstrapping,using,the,given,executor,for,a,parallel,initialization,phase,e,g,a,link,org,springframework,core,task,simple,async,task,executor,p,code,session,factory,initialization,will,then,switch,into,background,bootstrap,mode,with,a,code,session,factory,proxy,immediately,returned,for,injection,purposes,instead,of,waiting,for,hibernate,s,bootstrapping,to,complete,however,note,that,the,first,actual,call,to,a,code,session,factory,method,will,then,block,until,hibernate,s,bootstrapping,completed,if,not,ready,by,then,for,maximum,benefit,make,sure,to,avoid,early,code,session,factory,calls,in,init,methods,of,related,beans,even,for,metadata,introspection,purposes,since,4,3,see,build,session,factory;public,session,factory,build,session,factory,async,task,executor,bootstrap,executor,assert,not,null,bootstrap,executor,async,task,executor,must,not,be,null,return,session,factory,proxy,new,proxy,instance,this,resource,pattern,resolver,get,class,loader,new,class,session,factory,implementor,class,infrastructure,proxy,class,new,bootstrap,session,factory,invocation,handler,bootstrap,executor
LocalSessionFactoryBuilder -> public SessionFactory buildSessionFactory(AsyncTaskExecutor bootstrapExecutor);1497341397;Build the Hibernate {@code SessionFactory} through background bootstrapping,_using the given executor for a parallel initialization phase_(e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor})._<p>{@code SessionFactory} initialization will then switch into background_bootstrap mode, with a {@code SessionFactory} proxy immediately returned for_injection purposes instead of waiting for Hibernate's bootstrapping to complete._However, note that the first actual call to a {@code SessionFactory} method will_then block until Hibernate's bootstrapping completed, if not ready by then._For maximum benefit, make sure to avoid early {@code SessionFactory} calls_in init methods of related beans, even for metadata introspection purposes._@since 4.3_@see #buildSessionFactory();public SessionFactory buildSessionFactory(AsyncTaskExecutor bootstrapExecutor) {_		Assert.notNull(bootstrapExecutor, "AsyncTaskExecutor must not be null")__		return (SessionFactory) Proxy.newProxyInstance(this.resourcePatternResolver.getClassLoader(),_				new Class<?>[] {SessionFactoryImplementor.class, InfrastructureProxy.class},_				new BootstrapSessionFactoryInvocationHandler(bootstrapExecutor))__	};build,the,hibernate,code,session,factory,through,background,bootstrapping,using,the,given,executor,for,a,parallel,initialization,phase,e,g,a,link,org,springframework,core,task,simple,async,task,executor,p,code,session,factory,initialization,will,then,switch,into,background,bootstrap,mode,with,a,code,session,factory,proxy,immediately,returned,for,injection,purposes,instead,of,waiting,for,hibernate,s,bootstrapping,to,complete,however,note,that,the,first,actual,call,to,a,code,session,factory,method,will,then,block,until,hibernate,s,bootstrapping,completed,if,not,ready,by,then,for,maximum,benefit,make,sure,to,avoid,early,code,session,factory,calls,in,init,methods,of,related,beans,even,for,metadata,introspection,purposes,since,4,3,see,build,session,factory;public,session,factory,build,session,factory,async,task,executor,bootstrap,executor,assert,not,null,bootstrap,executor,async,task,executor,must,not,be,null,return,session,factory,proxy,new,proxy,instance,this,resource,pattern,resolver,get,class,loader,new,class,session,factory,implementor,class,infrastructure,proxy,class,new,bootstrap,session,factory,invocation,handler,bootstrap,executor
LocalSessionFactoryBuilder -> public SessionFactory buildSessionFactory(AsyncTaskExecutor bootstrapExecutor);1498780456;Build the Hibernate {@code SessionFactory} through background bootstrapping,_using the given executor for a parallel initialization phase_(e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor})._<p>{@code SessionFactory} initialization will then switch into background_bootstrap mode, with a {@code SessionFactory} proxy immediately returned for_injection purposes instead of waiting for Hibernate's bootstrapping to complete._However, note that the first actual call to a {@code SessionFactory} method will_then block until Hibernate's bootstrapping completed, if not ready by then._For maximum benefit, make sure to avoid early {@code SessionFactory} calls_in init methods of related beans, even for metadata introspection purposes._@since 4.3_@see #buildSessionFactory();public SessionFactory buildSessionFactory(AsyncTaskExecutor bootstrapExecutor) {_		Assert.notNull(bootstrapExecutor, "AsyncTaskExecutor must not be null")__		return (SessionFactory) Proxy.newProxyInstance(this.resourcePatternResolver.getClassLoader(),_				new Class<?>[] {SessionFactoryImplementor.class, InfrastructureProxy.class},_				new BootstrapSessionFactoryInvocationHandler(bootstrapExecutor))__	};build,the,hibernate,code,session,factory,through,background,bootstrapping,using,the,given,executor,for,a,parallel,initialization,phase,e,g,a,link,org,springframework,core,task,simple,async,task,executor,p,code,session,factory,initialization,will,then,switch,into,background,bootstrap,mode,with,a,code,session,factory,proxy,immediately,returned,for,injection,purposes,instead,of,waiting,for,hibernate,s,bootstrapping,to,complete,however,note,that,the,first,actual,call,to,a,code,session,factory,method,will,then,block,until,hibernate,s,bootstrapping,completed,if,not,ready,by,then,for,maximum,benefit,make,sure,to,avoid,early,code,session,factory,calls,in,init,methods,of,related,beans,even,for,metadata,introspection,purposes,since,4,3,see,build,session,factory;public,session,factory,build,session,factory,async,task,executor,bootstrap,executor,assert,not,null,bootstrap,executor,async,task,executor,must,not,be,null,return,session,factory,proxy,new,proxy,instance,this,resource,pattern,resolver,get,class,loader,new,class,session,factory,implementor,class,infrastructure,proxy,class,new,bootstrap,session,factory,invocation,handler,bootstrap,executor
LocalSessionFactoryBuilder -> public SessionFactory buildSessionFactory(AsyncTaskExecutor bootstrapExecutor);1518264213;Build the Hibernate {@code SessionFactory} through background bootstrapping,_using the given executor for a parallel initialization phase_(e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor})._<p>{@code SessionFactory} initialization will then switch into background_bootstrap mode, with a {@code SessionFactory} proxy immediately returned for_injection purposes instead of waiting for Hibernate's bootstrapping to complete._However, note that the first actual call to a {@code SessionFactory} method will_then block until Hibernate's bootstrapping completed, if not ready by then._For maximum benefit, make sure to avoid early {@code SessionFactory} calls_in init methods of related beans, even for metadata introspection purposes._@since 4.3_@see #buildSessionFactory();public SessionFactory buildSessionFactory(AsyncTaskExecutor bootstrapExecutor) {_		Assert.notNull(bootstrapExecutor, "AsyncTaskExecutor must not be null")__		return (SessionFactory) Proxy.newProxyInstance(this.resourcePatternResolver.getClassLoader(),_				new Class<?>[] {SessionFactoryImplementor.class, InfrastructureProxy.class},_				new BootstrapSessionFactoryInvocationHandler(bootstrapExecutor))__	};build,the,hibernate,code,session,factory,through,background,bootstrapping,using,the,given,executor,for,a,parallel,initialization,phase,e,g,a,link,org,springframework,core,task,simple,async,task,executor,p,code,session,factory,initialization,will,then,switch,into,background,bootstrap,mode,with,a,code,session,factory,proxy,immediately,returned,for,injection,purposes,instead,of,waiting,for,hibernate,s,bootstrapping,to,complete,however,note,that,the,first,actual,call,to,a,code,session,factory,method,will,then,block,until,hibernate,s,bootstrapping,completed,if,not,ready,by,then,for,maximum,benefit,make,sure,to,avoid,early,code,session,factory,calls,in,init,methods,of,related,beans,even,for,metadata,introspection,purposes,since,4,3,see,build,session,factory;public,session,factory,build,session,factory,async,task,executor,bootstrap,executor,assert,not,null,bootstrap,executor,async,task,executor,must,not,be,null,return,session,factory,proxy,new,proxy,instance,this,resource,pattern,resolver,get,class,loader,new,class,session,factory,implementor,class,infrastructure,proxy,class,new,bootstrap,session,factory,invocation,handler,bootstrap,executor
LocalSessionFactoryBuilder -> public SessionFactory buildSessionFactory(AsyncTaskExecutor bootstrapExecutor);1519860149;Build the Hibernate {@code SessionFactory} through background bootstrapping,_using the given executor for a parallel initialization phase_(e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor})._<p>{@code SessionFactory} initialization will then switch into background_bootstrap mode, with a {@code SessionFactory} proxy immediately returned for_injection purposes instead of waiting for Hibernate's bootstrapping to complete._However, note that the first actual call to a {@code SessionFactory} method will_then block until Hibernate's bootstrapping completed, if not ready by then._For maximum benefit, make sure to avoid early {@code SessionFactory} calls_in init methods of related beans, even for metadata introspection purposes._@since 4.3_@see #buildSessionFactory();public SessionFactory buildSessionFactory(AsyncTaskExecutor bootstrapExecutor) {_		Assert.notNull(bootstrapExecutor, "AsyncTaskExecutor must not be null")__		return (SessionFactory) Proxy.newProxyInstance(this.resourcePatternResolver.getClassLoader(),_				new Class<?>[] {SessionFactoryImplementor.class, InfrastructureProxy.class},_				new BootstrapSessionFactoryInvocationHandler(bootstrapExecutor))__	};build,the,hibernate,code,session,factory,through,background,bootstrapping,using,the,given,executor,for,a,parallel,initialization,phase,e,g,a,link,org,springframework,core,task,simple,async,task,executor,p,code,session,factory,initialization,will,then,switch,into,background,bootstrap,mode,with,a,code,session,factory,proxy,immediately,returned,for,injection,purposes,instead,of,waiting,for,hibernate,s,bootstrapping,to,complete,however,note,that,the,first,actual,call,to,a,code,session,factory,method,will,then,block,until,hibernate,s,bootstrapping,completed,if,not,ready,by,then,for,maximum,benefit,make,sure,to,avoid,early,code,session,factory,calls,in,init,methods,of,related,beans,even,for,metadata,introspection,purposes,since,4,3,see,build,session,factory;public,session,factory,build,session,factory,async,task,executor,bootstrap,executor,assert,not,null,bootstrap,executor,async,task,executor,must,not,be,null,return,session,factory,proxy,new,proxy,instance,this,resource,pattern,resolver,get,class,loader,new,class,session,factory,implementor,class,infrastructure,proxy,class,new,bootstrap,session,factory,invocation,handler,bootstrap,executor
LocalSessionFactoryBuilder -> public SessionFactory buildSessionFactory(AsyncTaskExecutor bootstrapExecutor);1520373974;Build the Hibernate {@code SessionFactory} through background bootstrapping,_using the given executor for a parallel initialization phase_(e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor})._<p>{@code SessionFactory} initialization will then switch into background_bootstrap mode, with a {@code SessionFactory} proxy immediately returned for_injection purposes instead of waiting for Hibernate's bootstrapping to complete._However, note that the first actual call to a {@code SessionFactory} method will_then block until Hibernate's bootstrapping completed, if not ready by then._For maximum benefit, make sure to avoid early {@code SessionFactory} calls_in init methods of related beans, even for metadata introspection purposes._@since 4.3_@see #buildSessionFactory();public SessionFactory buildSessionFactory(AsyncTaskExecutor bootstrapExecutor) {_		Assert.notNull(bootstrapExecutor, "AsyncTaskExecutor must not be null")__		return (SessionFactory) Proxy.newProxyInstance(this.resourcePatternResolver.getClassLoader(),_				new Class<?>[] {SessionFactoryImplementor.class, InfrastructureProxy.class},_				new BootstrapSessionFactoryInvocationHandler(bootstrapExecutor))__	};build,the,hibernate,code,session,factory,through,background,bootstrapping,using,the,given,executor,for,a,parallel,initialization,phase,e,g,a,link,org,springframework,core,task,simple,async,task,executor,p,code,session,factory,initialization,will,then,switch,into,background,bootstrap,mode,with,a,code,session,factory,proxy,immediately,returned,for,injection,purposes,instead,of,waiting,for,hibernate,s,bootstrapping,to,complete,however,note,that,the,first,actual,call,to,a,code,session,factory,method,will,then,block,until,hibernate,s,bootstrapping,completed,if,not,ready,by,then,for,maximum,benefit,make,sure,to,avoid,early,code,session,factory,calls,in,init,methods,of,related,beans,even,for,metadata,introspection,purposes,since,4,3,see,build,session,factory;public,session,factory,build,session,factory,async,task,executor,bootstrap,executor,assert,not,null,bootstrap,executor,async,task,executor,must,not,be,null,return,session,factory,proxy,new,proxy,instance,this,resource,pattern,resolver,get,class,loader,new,class,session,factory,implementor,class,infrastructure,proxy,class,new,bootstrap,session,factory,invocation,handler,bootstrap,executor
LocalSessionFactoryBuilder -> public SessionFactory buildSessionFactory(AsyncTaskExecutor bootstrapExecutor);1530188116;Build the Hibernate {@code SessionFactory} through background bootstrapping,_using the given executor for a parallel initialization phase_(e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor})._<p>{@code SessionFactory} initialization will then switch into background_bootstrap mode, with a {@code SessionFactory} proxy immediately returned for_injection purposes instead of waiting for Hibernate's bootstrapping to complete._However, note that the first actual call to a {@code SessionFactory} method will_then block until Hibernate's bootstrapping completed, if not ready by then._For maximum benefit, make sure to avoid early {@code SessionFactory} calls_in init methods of related beans, even for metadata introspection purposes._@since 4.3_@see #buildSessionFactory();public SessionFactory buildSessionFactory(AsyncTaskExecutor bootstrapExecutor) {_		Assert.notNull(bootstrapExecutor, "AsyncTaskExecutor must not be null")__		return (SessionFactory) Proxy.newProxyInstance(this.resourcePatternResolver.getClassLoader(),_				new Class<?>[] {SessionFactoryImplementor.class, InfrastructureProxy.class},_				new BootstrapSessionFactoryInvocationHandler(bootstrapExecutor))__	};build,the,hibernate,code,session,factory,through,background,bootstrapping,using,the,given,executor,for,a,parallel,initialization,phase,e,g,a,link,org,springframework,core,task,simple,async,task,executor,p,code,session,factory,initialization,will,then,switch,into,background,bootstrap,mode,with,a,code,session,factory,proxy,immediately,returned,for,injection,purposes,instead,of,waiting,for,hibernate,s,bootstrapping,to,complete,however,note,that,the,first,actual,call,to,a,code,session,factory,method,will,then,block,until,hibernate,s,bootstrapping,completed,if,not,ready,by,then,for,maximum,benefit,make,sure,to,avoid,early,code,session,factory,calls,in,init,methods,of,related,beans,even,for,metadata,introspection,purposes,since,4,3,see,build,session,factory;public,session,factory,build,session,factory,async,task,executor,bootstrap,executor,assert,not,null,bootstrap,executor,async,task,executor,must,not,be,null,return,session,factory,proxy,new,proxy,instance,this,resource,pattern,resolver,get,class,loader,new,class,session,factory,implementor,class,infrastructure,proxy,class,new,bootstrap,session,factory,invocation,handler,bootstrap,executor
LocalSessionFactoryBuilder -> public SessionFactory buildSessionFactory(AsyncTaskExecutor bootstrapExecutor);1530724999;Build the Hibernate {@code SessionFactory} through background bootstrapping,_using the given executor for a parallel initialization phase_(e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor})._<p>{@code SessionFactory} initialization will then switch into background_bootstrap mode, with a {@code SessionFactory} proxy immediately returned for_injection purposes instead of waiting for Hibernate's bootstrapping to complete._However, note that the first actual call to a {@code SessionFactory} method will_then block until Hibernate's bootstrapping completed, if not ready by then._For maximum benefit, make sure to avoid early {@code SessionFactory} calls_in init methods of related beans, even for metadata introspection purposes._@since 4.3_@see #buildSessionFactory();public SessionFactory buildSessionFactory(AsyncTaskExecutor bootstrapExecutor) {_		Assert.notNull(bootstrapExecutor, "AsyncTaskExecutor must not be null")__		return (SessionFactory) Proxy.newProxyInstance(this.resourcePatternResolver.getClassLoader(),_				new Class<?>[] {SessionFactoryImplementor.class, InfrastructureProxy.class},_				new BootstrapSessionFactoryInvocationHandler(bootstrapExecutor))__	};build,the,hibernate,code,session,factory,through,background,bootstrapping,using,the,given,executor,for,a,parallel,initialization,phase,e,g,a,link,org,springframework,core,task,simple,async,task,executor,p,code,session,factory,initialization,will,then,switch,into,background,bootstrap,mode,with,a,code,session,factory,proxy,immediately,returned,for,injection,purposes,instead,of,waiting,for,hibernate,s,bootstrapping,to,complete,however,note,that,the,first,actual,call,to,a,code,session,factory,method,will,then,block,until,hibernate,s,bootstrapping,completed,if,not,ready,by,then,for,maximum,benefit,make,sure,to,avoid,early,code,session,factory,calls,in,init,methods,of,related,beans,even,for,metadata,introspection,purposes,since,4,3,see,build,session,factory;public,session,factory,build,session,factory,async,task,executor,bootstrap,executor,assert,not,null,bootstrap,executor,async,task,executor,must,not,be,null,return,session,factory,proxy,new,proxy,instance,this,resource,pattern,resolver,get,class,loader,new,class,session,factory,implementor,class,infrastructure,proxy,class,new,bootstrap,session,factory,invocation,handler,bootstrap,executor
LocalSessionFactoryBuilder -> public SessionFactory buildSessionFactory(AsyncTaskExecutor bootstrapExecutor);1530802115;Build the Hibernate {@code SessionFactory} through background bootstrapping,_using the given executor for a parallel initialization phase_(e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor})._<p>{@code SessionFactory} initialization will then switch into background_bootstrap mode, with a {@code SessionFactory} proxy immediately returned for_injection purposes instead of waiting for Hibernate's bootstrapping to complete._However, note that the first actual call to a {@code SessionFactory} method will_then block until Hibernate's bootstrapping completed, if not ready by then._For maximum benefit, make sure to avoid early {@code SessionFactory} calls_in init methods of related beans, even for metadata introspection purposes._@since 4.3_@see #buildSessionFactory();public SessionFactory buildSessionFactory(AsyncTaskExecutor bootstrapExecutor) {_		Assert.notNull(bootstrapExecutor, "AsyncTaskExecutor must not be null")__		return (SessionFactory) Proxy.newProxyInstance(this.resourcePatternResolver.getClassLoader(),_				new Class<?>[] {SessionFactoryImplementor.class, InfrastructureProxy.class},_				new BootstrapSessionFactoryInvocationHandler(bootstrapExecutor))__	};build,the,hibernate,code,session,factory,through,background,bootstrapping,using,the,given,executor,for,a,parallel,initialization,phase,e,g,a,link,org,springframework,core,task,simple,async,task,executor,p,code,session,factory,initialization,will,then,switch,into,background,bootstrap,mode,with,a,code,session,factory,proxy,immediately,returned,for,injection,purposes,instead,of,waiting,for,hibernate,s,bootstrapping,to,complete,however,note,that,the,first,actual,call,to,a,code,session,factory,method,will,then,block,until,hibernate,s,bootstrapping,completed,if,not,ready,by,then,for,maximum,benefit,make,sure,to,avoid,early,code,session,factory,calls,in,init,methods,of,related,beans,even,for,metadata,introspection,purposes,since,4,3,see,build,session,factory;public,session,factory,build,session,factory,async,task,executor,bootstrap,executor,assert,not,null,bootstrap,executor,async,task,executor,must,not,be,null,return,session,factory,proxy,new,proxy,instance,this,resource,pattern,resolver,get,class,loader,new,class,session,factory,implementor,class,infrastructure,proxy,class,new,bootstrap,session,factory,invocation,handler,bootstrap,executor
LocalSessionFactoryBuilder -> public SessionFactory buildSessionFactory(AsyncTaskExecutor bootstrapExecutor);1531739026;Build the Hibernate {@code SessionFactory} through background bootstrapping,_using the given executor for a parallel initialization phase_(e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor})._<p>{@code SessionFactory} initialization will then switch into background_bootstrap mode, with a {@code SessionFactory} proxy immediately returned for_injection purposes instead of waiting for Hibernate's bootstrapping to complete._However, note that the first actual call to a {@code SessionFactory} method will_then block until Hibernate's bootstrapping completed, if not ready by then._For maximum benefit, make sure to avoid early {@code SessionFactory} calls_in init methods of related beans, even for metadata introspection purposes._@since 4.3_@see #buildSessionFactory();public SessionFactory buildSessionFactory(AsyncTaskExecutor bootstrapExecutor) {_		Assert.notNull(bootstrapExecutor, "AsyncTaskExecutor must not be null")__		return (SessionFactory) Proxy.newProxyInstance(this.resourcePatternResolver.getClassLoader(),_				new Class<?>[] {SessionFactoryImplementor.class, InfrastructureProxy.class},_				new BootstrapSessionFactoryInvocationHandler(bootstrapExecutor))__	};build,the,hibernate,code,session,factory,through,background,bootstrapping,using,the,given,executor,for,a,parallel,initialization,phase,e,g,a,link,org,springframework,core,task,simple,async,task,executor,p,code,session,factory,initialization,will,then,switch,into,background,bootstrap,mode,with,a,code,session,factory,proxy,immediately,returned,for,injection,purposes,instead,of,waiting,for,hibernate,s,bootstrapping,to,complete,however,note,that,the,first,actual,call,to,a,code,session,factory,method,will,then,block,until,hibernate,s,bootstrapping,completed,if,not,ready,by,then,for,maximum,benefit,make,sure,to,avoid,early,code,session,factory,calls,in,init,methods,of,related,beans,even,for,metadata,introspection,purposes,since,4,3,see,build,session,factory;public,session,factory,build,session,factory,async,task,executor,bootstrap,executor,assert,not,null,bootstrap,executor,async,task,executor,must,not,be,null,return,session,factory,proxy,new,proxy,instance,this,resource,pattern,resolver,get,class,loader,new,class,session,factory,implementor,class,infrastructure,proxy,class,new,bootstrap,session,factory,invocation,handler,bootstrap,executor
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ClassLoader classLoader);1495868221;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param classLoader the ClassLoader to load application classes from;public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ClassLoader classLoader) {_		this(dataSource, new PathMatchingResourcePatternResolver(classLoader))__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,class,loader,the,class,loader,to,load,application,classes,from;public,local,session,factory,builder,nullable,data,source,data,source,class,loader,class,loader,this,data,source,new,path,matching,resource,pattern,resolver,class,loader
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ClassLoader classLoader);1496837955;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param classLoader the ClassLoader to load application classes from;public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ClassLoader classLoader) {_		this(dataSource, new PathMatchingResourcePatternResolver(classLoader))__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,class,loader,the,class,loader,to,load,application,classes,from;public,local,session,factory,builder,nullable,data,source,data,source,class,loader,class,loader,this,data,source,new,path,matching,resource,pattern,resolver,class,loader
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ClassLoader classLoader);1497341397;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param classLoader the ClassLoader to load application classes from;public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ClassLoader classLoader) {_		this(dataSource, new PathMatchingResourcePatternResolver(classLoader))__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,class,loader,the,class,loader,to,load,application,classes,from;public,local,session,factory,builder,nullable,data,source,data,source,class,loader,class,loader,this,data,source,new,path,matching,resource,pattern,resolver,class,loader
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ClassLoader classLoader);1498780456;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param classLoader the ClassLoader to load application classes from;public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ClassLoader classLoader) {_		this(dataSource, new PathMatchingResourcePatternResolver(classLoader))__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,class,loader,the,class,loader,to,load,application,classes,from;public,local,session,factory,builder,nullable,data,source,data,source,class,loader,class,loader,this,data,source,new,path,matching,resource,pattern,resolver,class,loader
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ClassLoader classLoader);1518264213;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param classLoader the ClassLoader to load application classes from;public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ClassLoader classLoader) {_		this(dataSource, new PathMatchingResourcePatternResolver(classLoader))__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,class,loader,the,class,loader,to,load,application,classes,from;public,local,session,factory,builder,nullable,data,source,data,source,class,loader,class,loader,this,data,source,new,path,matching,resource,pattern,resolver,class,loader
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ClassLoader classLoader);1519860149;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param classLoader the ClassLoader to load application classes from;public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ClassLoader classLoader) {_		this(dataSource, new PathMatchingResourcePatternResolver(classLoader))__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,class,loader,the,class,loader,to,load,application,classes,from;public,local,session,factory,builder,nullable,data,source,data,source,class,loader,class,loader,this,data,source,new,path,matching,resource,pattern,resolver,class,loader
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ClassLoader classLoader);1520373974;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param classLoader the ClassLoader to load application classes from;public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ClassLoader classLoader) {_		this(dataSource, new PathMatchingResourcePatternResolver(classLoader))__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,class,loader,the,class,loader,to,load,application,classes,from;public,local,session,factory,builder,nullable,data,source,data,source,class,loader,class,loader,this,data,source,new,path,matching,resource,pattern,resolver,class,loader
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ClassLoader classLoader);1530188116;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param classLoader the ClassLoader to load application classes from;public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ClassLoader classLoader) {_		this(dataSource, new PathMatchingResourcePatternResolver(classLoader))__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,class,loader,the,class,loader,to,load,application,classes,from;public,local,session,factory,builder,nullable,data,source,data,source,class,loader,class,loader,this,data,source,new,path,matching,resource,pattern,resolver,class,loader
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ClassLoader classLoader);1530724999;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param classLoader the ClassLoader to load application classes from;public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ClassLoader classLoader) {_		this(dataSource, new PathMatchingResourcePatternResolver(classLoader))__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,class,loader,the,class,loader,to,load,application,classes,from;public,local,session,factory,builder,nullable,data,source,data,source,class,loader,class,loader,this,data,source,new,path,matching,resource,pattern,resolver,class,loader
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ClassLoader classLoader);1530802115;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param classLoader the ClassLoader to load application classes from;public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ClassLoader classLoader) {_		this(dataSource, new PathMatchingResourcePatternResolver(classLoader))__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,class,loader,the,class,loader,to,load,application,classes,from;public,local,session,factory,builder,nullable,data,source,data,source,class,loader,class,loader,this,data,source,new,path,matching,resource,pattern,resolver,class,loader
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ClassLoader classLoader);1531739026;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param classLoader the ClassLoader to load application classes from;public LocalSessionFactoryBuilder(@Nullable DataSource dataSource, ClassLoader classLoader) {_		this(dataSource, new PathMatchingResourcePatternResolver(classLoader))__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,class,loader,the,class,loader,to,load,application,classes,from;public,local,session,factory,builder,nullable,data,source,data,source,class,loader,class,loader,this,data,source,new,path,matching,resource,pattern,resolver,class,loader
LocalSessionFactoryBuilder -> private boolean matchesEntityTypeFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1467668243;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesEntityTypeFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		if (this.entityTypeFilters != null) {_			for (TypeFilter filter : this.entityTypeFilters) {_				if (filter.match(reader, readerFactory)) {_					return true__				}_			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,entity,type,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,if,this,entity,type,filters,null,for,type,filter,filter,this,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
LocalSessionFactoryBuilder -> private boolean matchesEntityTypeFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1467730834;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesEntityTypeFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		if (this.entityTypeFilters != null) {_			for (TypeFilter filter : this.entityTypeFilters) {_				if (filter.match(reader, readerFactory)) {_					return true__				}_			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,entity,type,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,if,this,entity,type,filters,null,for,type,filter,filter,this,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
LocalSessionFactoryBuilder -> private boolean matchesEntityTypeFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1468941907;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesEntityTypeFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		if (this.entityTypeFilters != null) {_			for (TypeFilter filter : this.entityTypeFilters) {_				if (filter.match(reader, readerFactory)) {_					return true__				}_			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,entity,type,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,if,this,entity,type,filters,null,for,type,filter,filter,this,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
LocalSessionFactoryBuilder -> private boolean matchesEntityTypeFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1470272834;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesEntityTypeFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		if (this.entityTypeFilters != null) {_			for (TypeFilter filter : this.entityTypeFilters) {_				if (filter.match(reader, readerFactory)) {_					return true__				}_			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,entity,type,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,if,this,entity,type,filters,null,for,type,filter,filter,this,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
LocalSessionFactoryBuilder -> private boolean matchesEntityTypeFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1470660485;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesEntityTypeFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		if (this.entityTypeFilters != null) {_			for (TypeFilter filter : this.entityTypeFilters) {_				if (filter.match(reader, readerFactory)) {_					return true__				}_			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,entity,type,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,if,this,entity,type,filters,null,for,type,filter,filter,this,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
LocalSessionFactoryBuilder -> private boolean matchesEntityTypeFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1495868221;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesEntityTypeFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		if (this.entityTypeFilters != null) {_			for (TypeFilter filter : this.entityTypeFilters) {_				if (filter.match(reader, readerFactory)) {_					return true__				}_			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,entity,type,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,if,this,entity,type,filters,null,for,type,filter,filter,this,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
LocalSessionFactoryBuilder -> private boolean matchesEntityTypeFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1496837955;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesEntityTypeFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		if (this.entityTypeFilters != null) {_			for (TypeFilter filter : this.entityTypeFilters) {_				if (filter.match(reader, readerFactory)) {_					return true__				}_			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,entity,type,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,if,this,entity,type,filters,null,for,type,filter,filter,this,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
LocalSessionFactoryBuilder -> private boolean matchesEntityTypeFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1497341397;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesEntityTypeFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		if (this.entityTypeFilters != null) {_			for (TypeFilter filter : this.entityTypeFilters) {_				if (filter.match(reader, readerFactory)) {_					return true__				}_			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,entity,type,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,if,this,entity,type,filters,null,for,type,filter,filter,this,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
LocalSessionFactoryBuilder -> private boolean matchesEntityTypeFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1498780456;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesEntityTypeFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		if (this.entityTypeFilters != null) {_			for (TypeFilter filter : this.entityTypeFilters) {_				if (filter.match(reader, readerFactory)) {_					return true__				}_			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,entity,type,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,if,this,entity,type,filters,null,for,type,filter,filter,this,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
LocalSessionFactoryBuilder -> private boolean matchesEntityTypeFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1518264213;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesEntityTypeFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		if (this.entityTypeFilters != null) {_			for (TypeFilter filter : this.entityTypeFilters) {_				if (filter.match(reader, readerFactory)) {_					return true__				}_			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,entity,type,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,if,this,entity,type,filters,null,for,type,filter,filter,this,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
LocalSessionFactoryBuilder -> private boolean matchesEntityTypeFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1519860149;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesEntityTypeFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		if (this.entityTypeFilters != null) {_			for (TypeFilter filter : this.entityTypeFilters) {_				if (filter.match(reader, readerFactory)) {_					return true__				}_			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,entity,type,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,if,this,entity,type,filters,null,for,type,filter,filter,this,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
LocalSessionFactoryBuilder -> private boolean matchesEntityTypeFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1520373974;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesEntityTypeFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		if (this.entityTypeFilters != null) {_			for (TypeFilter filter : this.entityTypeFilters) {_				if (filter.match(reader, readerFactory)) {_					return true__				}_			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,entity,type,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,if,this,entity,type,filters,null,for,type,filter,filter,this,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
LocalSessionFactoryBuilder -> private boolean matchesEntityTypeFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1530188116;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesEntityTypeFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		if (this.entityTypeFilters != null) {_			for (TypeFilter filter : this.entityTypeFilters) {_				if (filter.match(reader, readerFactory)) {_					return true__				}_			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,entity,type,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,if,this,entity,type,filters,null,for,type,filter,filter,this,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
LocalSessionFactoryBuilder -> private boolean matchesEntityTypeFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1530724999;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesEntityTypeFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		if (this.entityTypeFilters != null) {_			for (TypeFilter filter : this.entityTypeFilters) {_				if (filter.match(reader, readerFactory)) {_					return true__				}_			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,entity,type,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,if,this,entity,type,filters,null,for,type,filter,filter,this,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
LocalSessionFactoryBuilder -> private boolean matchesEntityTypeFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1530802115;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesEntityTypeFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		if (this.entityTypeFilters != null) {_			for (TypeFilter filter : this.entityTypeFilters) {_				if (filter.match(reader, readerFactory)) {_					return true__				}_			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,entity,type,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,if,this,entity,type,filters,null,for,type,filter,filter,this,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
LocalSessionFactoryBuilder -> private boolean matchesEntityTypeFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException;1531739026;Check whether any of the configured entity type filters matches_the current class descriptor contained in the metadata reader.;private boolean matchesEntityTypeFilter(MetadataReader reader, MetadataReaderFactory readerFactory) throws IOException {_		if (this.entityTypeFilters != null) {_			for (TypeFilter filter : this.entityTypeFilters) {_				if (filter.match(reader, readerFactory)) {_					return true__				}_			}_		}_		return false__	};check,whether,any,of,the,configured,entity,type,filters,matches,the,current,class,descriptor,contained,in,the,metadata,reader;private,boolean,matches,entity,type,filter,metadata,reader,reader,metadata,reader,factory,reader,factory,throws,ioexception,if,this,entity,type,filters,null,for,type,filter,filter,this,entity,type,filters,if,filter,match,reader,reader,factory,return,true,return,false
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setJtaTransactionManager(Object jtaTransactionManager);1467668243;Set the Spring {@link JtaTransactionManager} or the JTA {@link TransactionManager}_to be used with Hibernate, if any. Allows for using a Spring-managed transaction_manager for Hibernate 5's session and cache synchronization, with the_"hibernate.transaction.jta.platform" automatically set to it._<p>A passed-in Spring {@link JtaTransactionManager} needs to contain a JTA_{@link TransactionManager} reference to be usable here, except for the WebSphere_case where we'll automatically set {@code WebSphereExtendedJtaPlatform} accordingly._<p>Note: If this is set, the Hibernate settings should not contain a JTA platform_setting to avoid meaningless double configuration.;public LocalSessionFactoryBuilder setJtaTransactionManager(Object jtaTransactionManager) {_		Assert.notNull(jtaTransactionManager, "Transaction manager reference must not be null")___		if (jtaTransactionManager instanceof JtaTransactionManager) {_			boolean webspherePresent = ClassUtils.isPresent("com.ibm.wsspi.uow.UOWManager", getClass().getClassLoader())__			if (webspherePresent) {_				getProperties().put(AvailableSettings.JTA_PLATFORM,_						"org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform")__			}_			else {_				JtaTransactionManager jtaTm = (JtaTransactionManager) jtaTransactionManager__				if (jtaTm.getTransactionManager() == null) {_					throw new IllegalArgumentException(_							"Can only apply JtaTransactionManager which has a TransactionManager reference set")__				}_				getProperties().put(AvailableSettings.JTA_PLATFORM,_						new ConfigurableJtaPlatform(jtaTm.getTransactionManager(), jtaTm.getUserTransaction(),_								jtaTm.getTransactionSynchronizationRegistry()))__			}_		}_		else if (jtaTransactionManager instanceof TransactionManager) {_			getProperties().put(AvailableSettings.JTA_PLATFORM,_					new ConfigurableJtaPlatform((TransactionManager) jtaTransactionManager, null, null))__		}_		else {_			throw new IllegalArgumentException(_					"Unknown transaction manager type: " + jtaTransactionManager.getClass().getName())__		}__		_		getProperties().put("hibernate.connection.handling_mode", "DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT")___		return this__	};set,the,spring,link,jta,transaction,manager,or,the,jta,link,transaction,manager,to,be,used,with,hibernate,if,any,allows,for,using,a,spring,managed,transaction,manager,for,hibernate,5,s,session,and,cache,synchronization,with,the,hibernate,transaction,jta,platform,automatically,set,to,it,p,a,passed,in,spring,link,jta,transaction,manager,needs,to,contain,a,jta,link,transaction,manager,reference,to,be,usable,here,except,for,the,web,sphere,case,where,we,ll,automatically,set,code,web,sphere,extended,jta,platform,accordingly,p,note,if,this,is,set,the,hibernate,settings,should,not,contain,a,jta,platform,setting,to,avoid,meaningless,double,configuration;public,local,session,factory,builder,set,jta,transaction,manager,object,jta,transaction,manager,assert,not,null,jta,transaction,manager,transaction,manager,reference,must,not,be,null,if,jta,transaction,manager,instanceof,jta,transaction,manager,boolean,websphere,present,class,utils,is,present,com,ibm,wsspi,uow,uowmanager,get,class,get,class,loader,if,websphere,present,get,properties,put,available,settings,org,hibernate,engine,transaction,jta,platform,internal,web,sphere,extended,jta,platform,else,jta,transaction,manager,jta,tm,jta,transaction,manager,jta,transaction,manager,if,jta,tm,get,transaction,manager,null,throw,new,illegal,argument,exception,can,only,apply,jta,transaction,manager,which,has,a,transaction,manager,reference,set,get,properties,put,available,settings,new,configurable,jta,platform,jta,tm,get,transaction,manager,jta,tm,get,user,transaction,jta,tm,get,transaction,synchronization,registry,else,if,jta,transaction,manager,instanceof,transaction,manager,get,properties,put,available,settings,new,configurable,jta,platform,transaction,manager,jta,transaction,manager,null,null,else,throw,new,illegal,argument,exception,unknown,transaction,manager,type,jta,transaction,manager,get,class,get,name,get,properties,put,hibernate,connection,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setJtaTransactionManager(Object jtaTransactionManager);1467730834;Set the Spring {@link JtaTransactionManager} or the JTA {@link TransactionManager}_to be used with Hibernate, if any. Allows for using a Spring-managed transaction_manager for Hibernate 5's session and cache synchronization, with the_"hibernate.transaction.jta.platform" automatically set to it._<p>A passed-in Spring {@link JtaTransactionManager} needs to contain a JTA_{@link TransactionManager} reference to be usable here, except for the WebSphere_case where we'll automatically set {@code WebSphereExtendedJtaPlatform} accordingly._<p>Note: If this is set, the Hibernate settings should not contain a JTA platform_setting to avoid meaningless double configuration.;public LocalSessionFactoryBuilder setJtaTransactionManager(Object jtaTransactionManager) {_		Assert.notNull(jtaTransactionManager, "Transaction manager reference must not be null")___		if (jtaTransactionManager instanceof JtaTransactionManager) {_			boolean webspherePresent = ClassUtils.isPresent("com.ibm.wsspi.uow.UOWManager", getClass().getClassLoader())__			if (webspherePresent) {_				getProperties().put(AvailableSettings.JTA_PLATFORM,_						"org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform")__			}_			else {_				JtaTransactionManager jtaTm = (JtaTransactionManager) jtaTransactionManager__				if (jtaTm.getTransactionManager() == null) {_					throw new IllegalArgumentException(_							"Can only apply JtaTransactionManager which has a TransactionManager reference set")__				}_				getProperties().put(AvailableSettings.JTA_PLATFORM,_						new ConfigurableJtaPlatform(jtaTm.getTransactionManager(), jtaTm.getUserTransaction(),_								jtaTm.getTransactionSynchronizationRegistry()))__			}_		}_		else if (jtaTransactionManager instanceof TransactionManager) {_			getProperties().put(AvailableSettings.JTA_PLATFORM,_					new ConfigurableJtaPlatform((TransactionManager) jtaTransactionManager, null, null))__		}_		else {_			throw new IllegalArgumentException(_					"Unknown transaction manager type: " + jtaTransactionManager.getClass().getName())__		}__		_		getProperties().put("hibernate.connection.handling_mode", "DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT")___		return this__	};set,the,spring,link,jta,transaction,manager,or,the,jta,link,transaction,manager,to,be,used,with,hibernate,if,any,allows,for,using,a,spring,managed,transaction,manager,for,hibernate,5,s,session,and,cache,synchronization,with,the,hibernate,transaction,jta,platform,automatically,set,to,it,p,a,passed,in,spring,link,jta,transaction,manager,needs,to,contain,a,jta,link,transaction,manager,reference,to,be,usable,here,except,for,the,web,sphere,case,where,we,ll,automatically,set,code,web,sphere,extended,jta,platform,accordingly,p,note,if,this,is,set,the,hibernate,settings,should,not,contain,a,jta,platform,setting,to,avoid,meaningless,double,configuration;public,local,session,factory,builder,set,jta,transaction,manager,object,jta,transaction,manager,assert,not,null,jta,transaction,manager,transaction,manager,reference,must,not,be,null,if,jta,transaction,manager,instanceof,jta,transaction,manager,boolean,websphere,present,class,utils,is,present,com,ibm,wsspi,uow,uowmanager,get,class,get,class,loader,if,websphere,present,get,properties,put,available,settings,org,hibernate,engine,transaction,jta,platform,internal,web,sphere,extended,jta,platform,else,jta,transaction,manager,jta,tm,jta,transaction,manager,jta,transaction,manager,if,jta,tm,get,transaction,manager,null,throw,new,illegal,argument,exception,can,only,apply,jta,transaction,manager,which,has,a,transaction,manager,reference,set,get,properties,put,available,settings,new,configurable,jta,platform,jta,tm,get,transaction,manager,jta,tm,get,user,transaction,jta,tm,get,transaction,synchronization,registry,else,if,jta,transaction,manager,instanceof,transaction,manager,get,properties,put,available,settings,new,configurable,jta,platform,transaction,manager,jta,transaction,manager,null,null,else,throw,new,illegal,argument,exception,unknown,transaction,manager,type,jta,transaction,manager,get,class,get,name,get,properties,put,hibernate,connection,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setJtaTransactionManager(Object jtaTransactionManager);1468941907;Set the Spring {@link JtaTransactionManager} or the JTA {@link TransactionManager}_to be used with Hibernate, if any. Allows for using a Spring-managed transaction_manager for Hibernate 5's session and cache synchronization, with the_"hibernate.transaction.jta.platform" automatically set to it._<p>A passed-in Spring {@link JtaTransactionManager} needs to contain a JTA_{@link TransactionManager} reference to be usable here, except for the WebSphere_case where we'll automatically set {@code WebSphereExtendedJtaPlatform} accordingly._<p>Note: If this is set, the Hibernate settings should not contain a JTA platform_setting to avoid meaningless double configuration.;public LocalSessionFactoryBuilder setJtaTransactionManager(Object jtaTransactionManager) {_		Assert.notNull(jtaTransactionManager, "Transaction manager reference must not be null")___		if (jtaTransactionManager instanceof JtaTransactionManager) {_			boolean webspherePresent = ClassUtils.isPresent("com.ibm.wsspi.uow.UOWManager", getClass().getClassLoader())__			if (webspherePresent) {_				getProperties().put(AvailableSettings.JTA_PLATFORM,_						"org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform")__			}_			else {_				JtaTransactionManager jtaTm = (JtaTransactionManager) jtaTransactionManager__				if (jtaTm.getTransactionManager() == null) {_					throw new IllegalArgumentException(_							"Can only apply JtaTransactionManager which has a TransactionManager reference set")__				}_				getProperties().put(AvailableSettings.JTA_PLATFORM,_						new ConfigurableJtaPlatform(jtaTm.getTransactionManager(), jtaTm.getUserTransaction(),_								jtaTm.getTransactionSynchronizationRegistry()))__			}_		}_		else if (jtaTransactionManager instanceof TransactionManager) {_			getProperties().put(AvailableSettings.JTA_PLATFORM,_					new ConfigurableJtaPlatform((TransactionManager) jtaTransactionManager, null, null))__		}_		else {_			throw new IllegalArgumentException(_					"Unknown transaction manager type: " + jtaTransactionManager.getClass().getName())__		}__		_		getProperties().put("hibernate.connection.handling_mode", "DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT")___		return this__	};set,the,spring,link,jta,transaction,manager,or,the,jta,link,transaction,manager,to,be,used,with,hibernate,if,any,allows,for,using,a,spring,managed,transaction,manager,for,hibernate,5,s,session,and,cache,synchronization,with,the,hibernate,transaction,jta,platform,automatically,set,to,it,p,a,passed,in,spring,link,jta,transaction,manager,needs,to,contain,a,jta,link,transaction,manager,reference,to,be,usable,here,except,for,the,web,sphere,case,where,we,ll,automatically,set,code,web,sphere,extended,jta,platform,accordingly,p,note,if,this,is,set,the,hibernate,settings,should,not,contain,a,jta,platform,setting,to,avoid,meaningless,double,configuration;public,local,session,factory,builder,set,jta,transaction,manager,object,jta,transaction,manager,assert,not,null,jta,transaction,manager,transaction,manager,reference,must,not,be,null,if,jta,transaction,manager,instanceof,jta,transaction,manager,boolean,websphere,present,class,utils,is,present,com,ibm,wsspi,uow,uowmanager,get,class,get,class,loader,if,websphere,present,get,properties,put,available,settings,org,hibernate,engine,transaction,jta,platform,internal,web,sphere,extended,jta,platform,else,jta,transaction,manager,jta,tm,jta,transaction,manager,jta,transaction,manager,if,jta,tm,get,transaction,manager,null,throw,new,illegal,argument,exception,can,only,apply,jta,transaction,manager,which,has,a,transaction,manager,reference,set,get,properties,put,available,settings,new,configurable,jta,platform,jta,tm,get,transaction,manager,jta,tm,get,user,transaction,jta,tm,get,transaction,synchronization,registry,else,if,jta,transaction,manager,instanceof,transaction,manager,get,properties,put,available,settings,new,configurable,jta,platform,transaction,manager,jta,transaction,manager,null,null,else,throw,new,illegal,argument,exception,unknown,transaction,manager,type,jta,transaction,manager,get,class,get,name,get,properties,put,hibernate,connection,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setJtaTransactionManager(Object jtaTransactionManager);1470272834;Set the Spring {@link JtaTransactionManager} or the JTA {@link TransactionManager}_to be used with Hibernate, if any. Allows for using a Spring-managed transaction_manager for Hibernate 5's session and cache synchronization, with the_"hibernate.transaction.jta.platform" automatically set to it._<p>A passed-in Spring {@link JtaTransactionManager} needs to contain a JTA_{@link TransactionManager} reference to be usable here, except for the WebSphere_case where we'll automatically set {@code WebSphereExtendedJtaPlatform} accordingly._<p>Note: If this is set, the Hibernate settings should not contain a JTA platform_setting to avoid meaningless double configuration.;public LocalSessionFactoryBuilder setJtaTransactionManager(Object jtaTransactionManager) {_		Assert.notNull(jtaTransactionManager, "Transaction manager reference must not be null")___		if (jtaTransactionManager instanceof JtaTransactionManager) {_			boolean webspherePresent = ClassUtils.isPresent("com.ibm.wsspi.uow.UOWManager", getClass().getClassLoader())__			if (webspherePresent) {_				getProperties().put(AvailableSettings.JTA_PLATFORM,_						"org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform")__			}_			else {_				JtaTransactionManager jtaTm = (JtaTransactionManager) jtaTransactionManager__				if (jtaTm.getTransactionManager() == null) {_					throw new IllegalArgumentException(_							"Can only apply JtaTransactionManager which has a TransactionManager reference set")__				}_				getProperties().put(AvailableSettings.JTA_PLATFORM,_						new ConfigurableJtaPlatform(jtaTm.getTransactionManager(), jtaTm.getUserTransaction(),_								jtaTm.getTransactionSynchronizationRegistry()))__			}_		}_		else if (jtaTransactionManager instanceof TransactionManager) {_			getProperties().put(AvailableSettings.JTA_PLATFORM,_					new ConfigurableJtaPlatform((TransactionManager) jtaTransactionManager, null, null))__		}_		else {_			throw new IllegalArgumentException(_					"Unknown transaction manager type: " + jtaTransactionManager.getClass().getName())__		}__		_		try {_			_			AvailableSettings.class.getField("CONNECTION_HANDLING")__			getProperties().put("hibernate.connection.handling_mode", "DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT")__		}_		catch (NoSuchFieldException ex) {_			_			try {_				AvailableSettings.class.getField("ACQUIRE_CONNECTIONS")__				getProperties().put("hibernate.connection.release_mode", "AFTER_STATEMENT")__			}_			catch (NoSuchFieldException ex2) {_				_			}_		}__		return this__	};set,the,spring,link,jta,transaction,manager,or,the,jta,link,transaction,manager,to,be,used,with,hibernate,if,any,allows,for,using,a,spring,managed,transaction,manager,for,hibernate,5,s,session,and,cache,synchronization,with,the,hibernate,transaction,jta,platform,automatically,set,to,it,p,a,passed,in,spring,link,jta,transaction,manager,needs,to,contain,a,jta,link,transaction,manager,reference,to,be,usable,here,except,for,the,web,sphere,case,where,we,ll,automatically,set,code,web,sphere,extended,jta,platform,accordingly,p,note,if,this,is,set,the,hibernate,settings,should,not,contain,a,jta,platform,setting,to,avoid,meaningless,double,configuration;public,local,session,factory,builder,set,jta,transaction,manager,object,jta,transaction,manager,assert,not,null,jta,transaction,manager,transaction,manager,reference,must,not,be,null,if,jta,transaction,manager,instanceof,jta,transaction,manager,boolean,websphere,present,class,utils,is,present,com,ibm,wsspi,uow,uowmanager,get,class,get,class,loader,if,websphere,present,get,properties,put,available,settings,org,hibernate,engine,transaction,jta,platform,internal,web,sphere,extended,jta,platform,else,jta,transaction,manager,jta,tm,jta,transaction,manager,jta,transaction,manager,if,jta,tm,get,transaction,manager,null,throw,new,illegal,argument,exception,can,only,apply,jta,transaction,manager,which,has,a,transaction,manager,reference,set,get,properties,put,available,settings,new,configurable,jta,platform,jta,tm,get,transaction,manager,jta,tm,get,user,transaction,jta,tm,get,transaction,synchronization,registry,else,if,jta,transaction,manager,instanceof,transaction,manager,get,properties,put,available,settings,new,configurable,jta,platform,transaction,manager,jta,transaction,manager,null,null,else,throw,new,illegal,argument,exception,unknown,transaction,manager,type,jta,transaction,manager,get,class,get,name,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex2,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setJtaTransactionManager(Object jtaTransactionManager);1470660485;Set the Spring {@link JtaTransactionManager} or the JTA {@link TransactionManager}_to be used with Hibernate, if any. Allows for using a Spring-managed transaction_manager for Hibernate 5's session and cache synchronization, with the_"hibernate.transaction.jta.platform" automatically set to it._<p>A passed-in Spring {@link JtaTransactionManager} needs to contain a JTA_{@link TransactionManager} reference to be usable here, except for the WebSphere_case where we'll automatically set {@code WebSphereExtendedJtaPlatform} accordingly._<p>Note: If this is set, the Hibernate settings should not contain a JTA platform_setting to avoid meaningless double configuration.;public LocalSessionFactoryBuilder setJtaTransactionManager(Object jtaTransactionManager) {_		Assert.notNull(jtaTransactionManager, "Transaction manager reference must not be null")___		if (jtaTransactionManager instanceof JtaTransactionManager) {_			boolean webspherePresent = ClassUtils.isPresent("com.ibm.wsspi.uow.UOWManager", getClass().getClassLoader())__			if (webspherePresent) {_				getProperties().put(AvailableSettings.JTA_PLATFORM,_						"org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform")__			}_			else {_				JtaTransactionManager jtaTm = (JtaTransactionManager) jtaTransactionManager__				if (jtaTm.getTransactionManager() == null) {_					throw new IllegalArgumentException(_							"Can only apply JtaTransactionManager which has a TransactionManager reference set")__				}_				getProperties().put(AvailableSettings.JTA_PLATFORM,_						new ConfigurableJtaPlatform(jtaTm.getTransactionManager(), jtaTm.getUserTransaction(),_								jtaTm.getTransactionSynchronizationRegistry()))__			}_		}_		else if (jtaTransactionManager instanceof TransactionManager) {_			getProperties().put(AvailableSettings.JTA_PLATFORM,_					new ConfigurableJtaPlatform((TransactionManager) jtaTransactionManager, null, null))__		}_		else {_			throw new IllegalArgumentException(_					"Unknown transaction manager type: " + jtaTransactionManager.getClass().getName())__		}__		_		try {_			_			AvailableSettings.class.getField("CONNECTION_HANDLING")__			getProperties().put("hibernate.connection.handling_mode", "DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT")__		}_		catch (NoSuchFieldException ex) {_			_			try {_				AvailableSettings.class.getField("ACQUIRE_CONNECTIONS")__				getProperties().put("hibernate.connection.release_mode", "AFTER_STATEMENT")__			}_			catch (NoSuchFieldException ex2) {_				_			}_		}__		return this__	};set,the,spring,link,jta,transaction,manager,or,the,jta,link,transaction,manager,to,be,used,with,hibernate,if,any,allows,for,using,a,spring,managed,transaction,manager,for,hibernate,5,s,session,and,cache,synchronization,with,the,hibernate,transaction,jta,platform,automatically,set,to,it,p,a,passed,in,spring,link,jta,transaction,manager,needs,to,contain,a,jta,link,transaction,manager,reference,to,be,usable,here,except,for,the,web,sphere,case,where,we,ll,automatically,set,code,web,sphere,extended,jta,platform,accordingly,p,note,if,this,is,set,the,hibernate,settings,should,not,contain,a,jta,platform,setting,to,avoid,meaningless,double,configuration;public,local,session,factory,builder,set,jta,transaction,manager,object,jta,transaction,manager,assert,not,null,jta,transaction,manager,transaction,manager,reference,must,not,be,null,if,jta,transaction,manager,instanceof,jta,transaction,manager,boolean,websphere,present,class,utils,is,present,com,ibm,wsspi,uow,uowmanager,get,class,get,class,loader,if,websphere,present,get,properties,put,available,settings,org,hibernate,engine,transaction,jta,platform,internal,web,sphere,extended,jta,platform,else,jta,transaction,manager,jta,tm,jta,transaction,manager,jta,transaction,manager,if,jta,tm,get,transaction,manager,null,throw,new,illegal,argument,exception,can,only,apply,jta,transaction,manager,which,has,a,transaction,manager,reference,set,get,properties,put,available,settings,new,configurable,jta,platform,jta,tm,get,transaction,manager,jta,tm,get,user,transaction,jta,tm,get,transaction,synchronization,registry,else,if,jta,transaction,manager,instanceof,transaction,manager,get,properties,put,available,settings,new,configurable,jta,platform,transaction,manager,jta,transaction,manager,null,null,else,throw,new,illegal,argument,exception,unknown,transaction,manager,type,jta,transaction,manager,get,class,get,name,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex2,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setJtaTransactionManager(Object jtaTransactionManager);1495868221;Set the Spring {@link JtaTransactionManager} or the JTA {@link TransactionManager}_to be used with Hibernate, if any. Allows for using a Spring-managed transaction_manager for Hibernate 5's session and cache synchronization, with the_"hibernate.transaction.jta.platform" automatically set to it._<p>A passed-in Spring {@link JtaTransactionManager} needs to contain a JTA_{@link TransactionManager} reference to be usable here, except for the WebSphere_case where we'll automatically set {@code WebSphereExtendedJtaPlatform} accordingly._<p>Note: If this is set, the Hibernate settings should not contain a JTA platform_setting to avoid meaningless double configuration.;public LocalSessionFactoryBuilder setJtaTransactionManager(Object jtaTransactionManager) {_		Assert.notNull(jtaTransactionManager, "Transaction manager reference must not be null")___		if (jtaTransactionManager instanceof JtaTransactionManager) {_			boolean webspherePresent = ClassUtils.isPresent("com.ibm.wsspi.uow.UOWManager", getClass().getClassLoader())__			if (webspherePresent) {_				getProperties().put(AvailableSettings.JTA_PLATFORM,_						"org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform")__			}_			else {_				JtaTransactionManager jtaTm = (JtaTransactionManager) jtaTransactionManager__				if (jtaTm.getTransactionManager() == null) {_					throw new IllegalArgumentException(_							"Can only apply JtaTransactionManager which has a TransactionManager reference set")__				}_				getProperties().put(AvailableSettings.JTA_PLATFORM,_						new ConfigurableJtaPlatform(jtaTm.getTransactionManager(), jtaTm.getUserTransaction(),_								jtaTm.getTransactionSynchronizationRegistry()))__			}_		}_		else if (jtaTransactionManager instanceof TransactionManager) {_			getProperties().put(AvailableSettings.JTA_PLATFORM,_					new ConfigurableJtaPlatform((TransactionManager) jtaTransactionManager, null, null))__		}_		else {_			throw new IllegalArgumentException(_					"Unknown transaction manager type: " + jtaTransactionManager.getClass().getName())__		}__		_		try {_			_			AvailableSettings.class.getField("CONNECTION_HANDLING")__			getProperties().put("hibernate.connection.handling_mode", "DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT")__		}_		catch (NoSuchFieldException ex) {_			_			try {_				AvailableSettings.class.getField("ACQUIRE_CONNECTIONS")__				getProperties().put("hibernate.connection.release_mode", "AFTER_STATEMENT")__			}_			catch (NoSuchFieldException ex2) {_				_			}_		}__		return this__	};set,the,spring,link,jta,transaction,manager,or,the,jta,link,transaction,manager,to,be,used,with,hibernate,if,any,allows,for,using,a,spring,managed,transaction,manager,for,hibernate,5,s,session,and,cache,synchronization,with,the,hibernate,transaction,jta,platform,automatically,set,to,it,p,a,passed,in,spring,link,jta,transaction,manager,needs,to,contain,a,jta,link,transaction,manager,reference,to,be,usable,here,except,for,the,web,sphere,case,where,we,ll,automatically,set,code,web,sphere,extended,jta,platform,accordingly,p,note,if,this,is,set,the,hibernate,settings,should,not,contain,a,jta,platform,setting,to,avoid,meaningless,double,configuration;public,local,session,factory,builder,set,jta,transaction,manager,object,jta,transaction,manager,assert,not,null,jta,transaction,manager,transaction,manager,reference,must,not,be,null,if,jta,transaction,manager,instanceof,jta,transaction,manager,boolean,websphere,present,class,utils,is,present,com,ibm,wsspi,uow,uowmanager,get,class,get,class,loader,if,websphere,present,get,properties,put,available,settings,org,hibernate,engine,transaction,jta,platform,internal,web,sphere,extended,jta,platform,else,jta,transaction,manager,jta,tm,jta,transaction,manager,jta,transaction,manager,if,jta,tm,get,transaction,manager,null,throw,new,illegal,argument,exception,can,only,apply,jta,transaction,manager,which,has,a,transaction,manager,reference,set,get,properties,put,available,settings,new,configurable,jta,platform,jta,tm,get,transaction,manager,jta,tm,get,user,transaction,jta,tm,get,transaction,synchronization,registry,else,if,jta,transaction,manager,instanceof,transaction,manager,get,properties,put,available,settings,new,configurable,jta,platform,transaction,manager,jta,transaction,manager,null,null,else,throw,new,illegal,argument,exception,unknown,transaction,manager,type,jta,transaction,manager,get,class,get,name,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex2,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setJtaTransactionManager(Object jtaTransactionManager);1496837955;Set the Spring {@link JtaTransactionManager} or the JTA {@link TransactionManager}_to be used with Hibernate, if any. Allows for using a Spring-managed transaction_manager for Hibernate 5's session and cache synchronization, with the_"hibernate.transaction.jta.platform" automatically set to it._<p>A passed-in Spring {@link JtaTransactionManager} needs to contain a JTA_{@link TransactionManager} reference to be usable here, except for the WebSphere_case where we'll automatically set {@code WebSphereExtendedJtaPlatform} accordingly._<p>Note: If this is set, the Hibernate settings should not contain a JTA platform_setting to avoid meaningless double configuration.;public LocalSessionFactoryBuilder setJtaTransactionManager(Object jtaTransactionManager) {_		Assert.notNull(jtaTransactionManager, "Transaction manager reference must not be null")___		if (jtaTransactionManager instanceof JtaTransactionManager) {_			boolean webspherePresent = ClassUtils.isPresent("com.ibm.wsspi.uow.UOWManager", getClass().getClassLoader())__			if (webspherePresent) {_				getProperties().put(AvailableSettings.JTA_PLATFORM,_						"org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform")__			}_			else {_				JtaTransactionManager jtaTm = (JtaTransactionManager) jtaTransactionManager__				if (jtaTm.getTransactionManager() == null) {_					throw new IllegalArgumentException(_							"Can only apply JtaTransactionManager which has a TransactionManager reference set")__				}_				getProperties().put(AvailableSettings.JTA_PLATFORM,_						new ConfigurableJtaPlatform(jtaTm.getTransactionManager(), jtaTm.getUserTransaction(),_								jtaTm.getTransactionSynchronizationRegistry()))__			}_		}_		else if (jtaTransactionManager instanceof TransactionManager) {_			getProperties().put(AvailableSettings.JTA_PLATFORM,_					new ConfigurableJtaPlatform((TransactionManager) jtaTransactionManager, null, null))__		}_		else {_			throw new IllegalArgumentException(_					"Unknown transaction manager type: " + jtaTransactionManager.getClass().getName())__		}__		_		try {_			_			AvailableSettings.class.getField("CONNECTION_HANDLING")__			getProperties().put("hibernate.connection.handling_mode", "DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT")__		}_		catch (NoSuchFieldException ex) {_			_			try {_				AvailableSettings.class.getField("ACQUIRE_CONNECTIONS")__				getProperties().put("hibernate.connection.release_mode", "AFTER_STATEMENT")__			}_			catch (NoSuchFieldException ex2) {_				_			}_		}__		return this__	};set,the,spring,link,jta,transaction,manager,or,the,jta,link,transaction,manager,to,be,used,with,hibernate,if,any,allows,for,using,a,spring,managed,transaction,manager,for,hibernate,5,s,session,and,cache,synchronization,with,the,hibernate,transaction,jta,platform,automatically,set,to,it,p,a,passed,in,spring,link,jta,transaction,manager,needs,to,contain,a,jta,link,transaction,manager,reference,to,be,usable,here,except,for,the,web,sphere,case,where,we,ll,automatically,set,code,web,sphere,extended,jta,platform,accordingly,p,note,if,this,is,set,the,hibernate,settings,should,not,contain,a,jta,platform,setting,to,avoid,meaningless,double,configuration;public,local,session,factory,builder,set,jta,transaction,manager,object,jta,transaction,manager,assert,not,null,jta,transaction,manager,transaction,manager,reference,must,not,be,null,if,jta,transaction,manager,instanceof,jta,transaction,manager,boolean,websphere,present,class,utils,is,present,com,ibm,wsspi,uow,uowmanager,get,class,get,class,loader,if,websphere,present,get,properties,put,available,settings,org,hibernate,engine,transaction,jta,platform,internal,web,sphere,extended,jta,platform,else,jta,transaction,manager,jta,tm,jta,transaction,manager,jta,transaction,manager,if,jta,tm,get,transaction,manager,null,throw,new,illegal,argument,exception,can,only,apply,jta,transaction,manager,which,has,a,transaction,manager,reference,set,get,properties,put,available,settings,new,configurable,jta,platform,jta,tm,get,transaction,manager,jta,tm,get,user,transaction,jta,tm,get,transaction,synchronization,registry,else,if,jta,transaction,manager,instanceof,transaction,manager,get,properties,put,available,settings,new,configurable,jta,platform,transaction,manager,jta,transaction,manager,null,null,else,throw,new,illegal,argument,exception,unknown,transaction,manager,type,jta,transaction,manager,get,class,get,name,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex2,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setJtaTransactionManager(Object jtaTransactionManager);1497341397;Set the Spring {@link JtaTransactionManager} or the JTA {@link TransactionManager}_to be used with Hibernate, if any. Allows for using a Spring-managed transaction_manager for Hibernate 5's session and cache synchronization, with the_"hibernate.transaction.jta.platform" automatically set to it._<p>A passed-in Spring {@link JtaTransactionManager} needs to contain a JTA_{@link TransactionManager} reference to be usable here, except for the WebSphere_case where we'll automatically set {@code WebSphereExtendedJtaPlatform} accordingly._<p>Note: If this is set, the Hibernate settings should not contain a JTA platform_setting to avoid meaningless double configuration.;public LocalSessionFactoryBuilder setJtaTransactionManager(Object jtaTransactionManager) {_		Assert.notNull(jtaTransactionManager, "Transaction manager reference must not be null")___		if (jtaTransactionManager instanceof JtaTransactionManager) {_			boolean webspherePresent = ClassUtils.isPresent("com.ibm.wsspi.uow.UOWManager", getClass().getClassLoader())__			if (webspherePresent) {_				getProperties().put(AvailableSettings.JTA_PLATFORM,_						"org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform")__			}_			else {_				JtaTransactionManager jtaTm = (JtaTransactionManager) jtaTransactionManager__				if (jtaTm.getTransactionManager() == null) {_					throw new IllegalArgumentException(_							"Can only apply JtaTransactionManager which has a TransactionManager reference set")__				}_				getProperties().put(AvailableSettings.JTA_PLATFORM,_						new ConfigurableJtaPlatform(jtaTm.getTransactionManager(), jtaTm.getUserTransaction(),_								jtaTm.getTransactionSynchronizationRegistry()))__			}_		}_		else if (jtaTransactionManager instanceof TransactionManager) {_			getProperties().put(AvailableSettings.JTA_PLATFORM,_					new ConfigurableJtaPlatform((TransactionManager) jtaTransactionManager, null, null))__		}_		else {_			throw new IllegalArgumentException(_					"Unknown transaction manager type: " + jtaTransactionManager.getClass().getName())__		}__		_		try {_			_			AvailableSettings.class.getField("CONNECTION_HANDLING")__			getProperties().put("hibernate.connection.handling_mode", "DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT")__		}_		catch (NoSuchFieldException ex) {_			_			try {_				AvailableSettings.class.getField("ACQUIRE_CONNECTIONS")__				getProperties().put("hibernate.connection.release_mode", "AFTER_STATEMENT")__			}_			catch (NoSuchFieldException ex2) {_				_			}_		}__		return this__	};set,the,spring,link,jta,transaction,manager,or,the,jta,link,transaction,manager,to,be,used,with,hibernate,if,any,allows,for,using,a,spring,managed,transaction,manager,for,hibernate,5,s,session,and,cache,synchronization,with,the,hibernate,transaction,jta,platform,automatically,set,to,it,p,a,passed,in,spring,link,jta,transaction,manager,needs,to,contain,a,jta,link,transaction,manager,reference,to,be,usable,here,except,for,the,web,sphere,case,where,we,ll,automatically,set,code,web,sphere,extended,jta,platform,accordingly,p,note,if,this,is,set,the,hibernate,settings,should,not,contain,a,jta,platform,setting,to,avoid,meaningless,double,configuration;public,local,session,factory,builder,set,jta,transaction,manager,object,jta,transaction,manager,assert,not,null,jta,transaction,manager,transaction,manager,reference,must,not,be,null,if,jta,transaction,manager,instanceof,jta,transaction,manager,boolean,websphere,present,class,utils,is,present,com,ibm,wsspi,uow,uowmanager,get,class,get,class,loader,if,websphere,present,get,properties,put,available,settings,org,hibernate,engine,transaction,jta,platform,internal,web,sphere,extended,jta,platform,else,jta,transaction,manager,jta,tm,jta,transaction,manager,jta,transaction,manager,if,jta,tm,get,transaction,manager,null,throw,new,illegal,argument,exception,can,only,apply,jta,transaction,manager,which,has,a,transaction,manager,reference,set,get,properties,put,available,settings,new,configurable,jta,platform,jta,tm,get,transaction,manager,jta,tm,get,user,transaction,jta,tm,get,transaction,synchronization,registry,else,if,jta,transaction,manager,instanceof,transaction,manager,get,properties,put,available,settings,new,configurable,jta,platform,transaction,manager,jta,transaction,manager,null,null,else,throw,new,illegal,argument,exception,unknown,transaction,manager,type,jta,transaction,manager,get,class,get,name,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex2,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setJtaTransactionManager(Object jtaTransactionManager);1498780456;Set the Spring {@link JtaTransactionManager} or the JTA {@link TransactionManager}_to be used with Hibernate, if any. Allows for using a Spring-managed transaction_manager for Hibernate 5's session and cache synchronization, with the_"hibernate.transaction.jta.platform" automatically set to it._<p>A passed-in Spring {@link JtaTransactionManager} needs to contain a JTA_{@link TransactionManager} reference to be usable here, except for the WebSphere_case where we'll automatically set {@code WebSphereExtendedJtaPlatform} accordingly._<p>Note: If this is set, the Hibernate settings should not contain a JTA platform_setting to avoid meaningless double configuration.;public LocalSessionFactoryBuilder setJtaTransactionManager(Object jtaTransactionManager) {_		Assert.notNull(jtaTransactionManager, "Transaction manager reference must not be null")___		if (jtaTransactionManager instanceof JtaTransactionManager) {_			boolean webspherePresent = ClassUtils.isPresent("com.ibm.wsspi.uow.UOWManager", getClass().getClassLoader())__			if (webspherePresent) {_				getProperties().put(AvailableSettings.JTA_PLATFORM,_						"org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform")__			}_			else {_				JtaTransactionManager jtaTm = (JtaTransactionManager) jtaTransactionManager__				if (jtaTm.getTransactionManager() == null) {_					throw new IllegalArgumentException(_							"Can only apply JtaTransactionManager which has a TransactionManager reference set")__				}_				getProperties().put(AvailableSettings.JTA_PLATFORM,_						new ConfigurableJtaPlatform(jtaTm.getTransactionManager(), jtaTm.getUserTransaction(),_								jtaTm.getTransactionSynchronizationRegistry()))__			}_		}_		else if (jtaTransactionManager instanceof TransactionManager) {_			getProperties().put(AvailableSettings.JTA_PLATFORM,_					new ConfigurableJtaPlatform((TransactionManager) jtaTransactionManager, null, null))__		}_		else {_			throw new IllegalArgumentException(_					"Unknown transaction manager type: " + jtaTransactionManager.getClass().getName())__		}__		_		try {_			_			AvailableSettings.class.getField("CONNECTION_HANDLING")__			getProperties().put("hibernate.connection.handling_mode", "DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT")__		}_		catch (NoSuchFieldException ex) {_			_			try {_				AvailableSettings.class.getField("ACQUIRE_CONNECTIONS")__				getProperties().put("hibernate.connection.release_mode", "AFTER_STATEMENT")__			}_			catch (NoSuchFieldException ex2) {_				_			}_		}__		return this__	};set,the,spring,link,jta,transaction,manager,or,the,jta,link,transaction,manager,to,be,used,with,hibernate,if,any,allows,for,using,a,spring,managed,transaction,manager,for,hibernate,5,s,session,and,cache,synchronization,with,the,hibernate,transaction,jta,platform,automatically,set,to,it,p,a,passed,in,spring,link,jta,transaction,manager,needs,to,contain,a,jta,link,transaction,manager,reference,to,be,usable,here,except,for,the,web,sphere,case,where,we,ll,automatically,set,code,web,sphere,extended,jta,platform,accordingly,p,note,if,this,is,set,the,hibernate,settings,should,not,contain,a,jta,platform,setting,to,avoid,meaningless,double,configuration;public,local,session,factory,builder,set,jta,transaction,manager,object,jta,transaction,manager,assert,not,null,jta,transaction,manager,transaction,manager,reference,must,not,be,null,if,jta,transaction,manager,instanceof,jta,transaction,manager,boolean,websphere,present,class,utils,is,present,com,ibm,wsspi,uow,uowmanager,get,class,get,class,loader,if,websphere,present,get,properties,put,available,settings,org,hibernate,engine,transaction,jta,platform,internal,web,sphere,extended,jta,platform,else,jta,transaction,manager,jta,tm,jta,transaction,manager,jta,transaction,manager,if,jta,tm,get,transaction,manager,null,throw,new,illegal,argument,exception,can,only,apply,jta,transaction,manager,which,has,a,transaction,manager,reference,set,get,properties,put,available,settings,new,configurable,jta,platform,jta,tm,get,transaction,manager,jta,tm,get,user,transaction,jta,tm,get,transaction,synchronization,registry,else,if,jta,transaction,manager,instanceof,transaction,manager,get,properties,put,available,settings,new,configurable,jta,platform,transaction,manager,jta,transaction,manager,null,null,else,throw,new,illegal,argument,exception,unknown,transaction,manager,type,jta,transaction,manager,get,class,get,name,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex2,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setJtaTransactionManager(Object jtaTransactionManager);1518264213;Set the Spring {@link JtaTransactionManager} or the JTA {@link TransactionManager}_to be used with Hibernate, if any. Allows for using a Spring-managed transaction_manager for Hibernate 5's session and cache synchronization, with the_"hibernate.transaction.jta.platform" automatically set to it._<p>A passed-in Spring {@link JtaTransactionManager} needs to contain a JTA_{@link TransactionManager} reference to be usable here, except for the WebSphere_case where we'll automatically set {@code WebSphereExtendedJtaPlatform} accordingly._<p>Note: If this is set, the Hibernate settings should not contain a JTA platform_setting to avoid meaningless double configuration.;public LocalSessionFactoryBuilder setJtaTransactionManager(Object jtaTransactionManager) {_		Assert.notNull(jtaTransactionManager, "Transaction manager reference must not be null")___		if (jtaTransactionManager instanceof JtaTransactionManager) {_			boolean webspherePresent = ClassUtils.isPresent("com.ibm.wsspi.uow.UOWManager", getClass().getClassLoader())__			if (webspherePresent) {_				getProperties().put(AvailableSettings.JTA_PLATFORM,_						"org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform")__			}_			else {_				JtaTransactionManager jtaTm = (JtaTransactionManager) jtaTransactionManager__				if (jtaTm.getTransactionManager() == null) {_					throw new IllegalArgumentException(_							"Can only apply JtaTransactionManager which has a TransactionManager reference set")__				}_				getProperties().put(AvailableSettings.JTA_PLATFORM,_						new ConfigurableJtaPlatform(jtaTm.getTransactionManager(), jtaTm.getUserTransaction(),_								jtaTm.getTransactionSynchronizationRegistry()))__			}_		}_		else if (jtaTransactionManager instanceof TransactionManager) {_			getProperties().put(AvailableSettings.JTA_PLATFORM,_					new ConfigurableJtaPlatform((TransactionManager) jtaTransactionManager, null, null))__		}_		else {_			throw new IllegalArgumentException(_					"Unknown transaction manager type: " + jtaTransactionManager.getClass().getName())__		}__		_		try {_			_			AvailableSettings.class.getField("CONNECTION_HANDLING")__			getProperties().put("hibernate.connection.handling_mode", "DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT")__		}_		catch (NoSuchFieldException ex) {_			_			try {_				AvailableSettings.class.getField("ACQUIRE_CONNECTIONS")__				getProperties().put("hibernate.connection.release_mode", "AFTER_STATEMENT")__			}_			catch (NoSuchFieldException ex2) {_				_			}_		}__		return this__	};set,the,spring,link,jta,transaction,manager,or,the,jta,link,transaction,manager,to,be,used,with,hibernate,if,any,allows,for,using,a,spring,managed,transaction,manager,for,hibernate,5,s,session,and,cache,synchronization,with,the,hibernate,transaction,jta,platform,automatically,set,to,it,p,a,passed,in,spring,link,jta,transaction,manager,needs,to,contain,a,jta,link,transaction,manager,reference,to,be,usable,here,except,for,the,web,sphere,case,where,we,ll,automatically,set,code,web,sphere,extended,jta,platform,accordingly,p,note,if,this,is,set,the,hibernate,settings,should,not,contain,a,jta,platform,setting,to,avoid,meaningless,double,configuration;public,local,session,factory,builder,set,jta,transaction,manager,object,jta,transaction,manager,assert,not,null,jta,transaction,manager,transaction,manager,reference,must,not,be,null,if,jta,transaction,manager,instanceof,jta,transaction,manager,boolean,websphere,present,class,utils,is,present,com,ibm,wsspi,uow,uowmanager,get,class,get,class,loader,if,websphere,present,get,properties,put,available,settings,org,hibernate,engine,transaction,jta,platform,internal,web,sphere,extended,jta,platform,else,jta,transaction,manager,jta,tm,jta,transaction,manager,jta,transaction,manager,if,jta,tm,get,transaction,manager,null,throw,new,illegal,argument,exception,can,only,apply,jta,transaction,manager,which,has,a,transaction,manager,reference,set,get,properties,put,available,settings,new,configurable,jta,platform,jta,tm,get,transaction,manager,jta,tm,get,user,transaction,jta,tm,get,transaction,synchronization,registry,else,if,jta,transaction,manager,instanceof,transaction,manager,get,properties,put,available,settings,new,configurable,jta,platform,transaction,manager,jta,transaction,manager,null,null,else,throw,new,illegal,argument,exception,unknown,transaction,manager,type,jta,transaction,manager,get,class,get,name,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex2,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setJtaTransactionManager(Object jtaTransactionManager);1519860149;Set the Spring {@link JtaTransactionManager} or the JTA {@link TransactionManager}_to be used with Hibernate, if any. Allows for using a Spring-managed transaction_manager for Hibernate 5's session and cache synchronization, with the_"hibernate.transaction.jta.platform" automatically set to it._<p>A passed-in Spring {@link JtaTransactionManager} needs to contain a JTA_{@link TransactionManager} reference to be usable here, except for the WebSphere_case where we'll automatically set {@code WebSphereExtendedJtaPlatform} accordingly._<p>Note: If this is set, the Hibernate settings should not contain a JTA platform_setting to avoid meaningless double configuration.;public LocalSessionFactoryBuilder setJtaTransactionManager(Object jtaTransactionManager) {_		Assert.notNull(jtaTransactionManager, "Transaction manager reference must not be null")___		if (jtaTransactionManager instanceof JtaTransactionManager) {_			boolean webspherePresent = ClassUtils.isPresent("com.ibm.wsspi.uow.UOWManager", getClass().getClassLoader())__			if (webspherePresent) {_				getProperties().put(AvailableSettings.JTA_PLATFORM,_						"org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform")__			}_			else {_				JtaTransactionManager jtaTm = (JtaTransactionManager) jtaTransactionManager__				if (jtaTm.getTransactionManager() == null) {_					throw new IllegalArgumentException(_							"Can only apply JtaTransactionManager which has a TransactionManager reference set")__				}_				getProperties().put(AvailableSettings.JTA_PLATFORM,_						new ConfigurableJtaPlatform(jtaTm.getTransactionManager(), jtaTm.getUserTransaction(),_								jtaTm.getTransactionSynchronizationRegistry()))__			}_		}_		else if (jtaTransactionManager instanceof TransactionManager) {_			getProperties().put(AvailableSettings.JTA_PLATFORM,_					new ConfigurableJtaPlatform((TransactionManager) jtaTransactionManager, null, null))__		}_		else {_			throw new IllegalArgumentException(_					"Unknown transaction manager type: " + jtaTransactionManager.getClass().getName())__		}__		_		try {_			_			AvailableSettings.class.getField("CONNECTION_HANDLING")__			getProperties().put("hibernate.connection.handling_mode", "DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT")__		}_		catch (NoSuchFieldException ex) {_			_			try {_				AvailableSettings.class.getField("ACQUIRE_CONNECTIONS")__				getProperties().put("hibernate.connection.release_mode", "AFTER_STATEMENT")__			}_			catch (NoSuchFieldException ex2) {_				_			}_		}__		return this__	};set,the,spring,link,jta,transaction,manager,or,the,jta,link,transaction,manager,to,be,used,with,hibernate,if,any,allows,for,using,a,spring,managed,transaction,manager,for,hibernate,5,s,session,and,cache,synchronization,with,the,hibernate,transaction,jta,platform,automatically,set,to,it,p,a,passed,in,spring,link,jta,transaction,manager,needs,to,contain,a,jta,link,transaction,manager,reference,to,be,usable,here,except,for,the,web,sphere,case,where,we,ll,automatically,set,code,web,sphere,extended,jta,platform,accordingly,p,note,if,this,is,set,the,hibernate,settings,should,not,contain,a,jta,platform,setting,to,avoid,meaningless,double,configuration;public,local,session,factory,builder,set,jta,transaction,manager,object,jta,transaction,manager,assert,not,null,jta,transaction,manager,transaction,manager,reference,must,not,be,null,if,jta,transaction,manager,instanceof,jta,transaction,manager,boolean,websphere,present,class,utils,is,present,com,ibm,wsspi,uow,uowmanager,get,class,get,class,loader,if,websphere,present,get,properties,put,available,settings,org,hibernate,engine,transaction,jta,platform,internal,web,sphere,extended,jta,platform,else,jta,transaction,manager,jta,tm,jta,transaction,manager,jta,transaction,manager,if,jta,tm,get,transaction,manager,null,throw,new,illegal,argument,exception,can,only,apply,jta,transaction,manager,which,has,a,transaction,manager,reference,set,get,properties,put,available,settings,new,configurable,jta,platform,jta,tm,get,transaction,manager,jta,tm,get,user,transaction,jta,tm,get,transaction,synchronization,registry,else,if,jta,transaction,manager,instanceof,transaction,manager,get,properties,put,available,settings,new,configurable,jta,platform,transaction,manager,jta,transaction,manager,null,null,else,throw,new,illegal,argument,exception,unknown,transaction,manager,type,jta,transaction,manager,get,class,get,name,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex2,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setJtaTransactionManager(Object jtaTransactionManager);1520373974;Set the Spring {@link JtaTransactionManager} or the JTA {@link TransactionManager}_to be used with Hibernate, if any. Allows for using a Spring-managed transaction_manager for Hibernate 5's session and cache synchronization, with the_"hibernate.transaction.jta.platform" automatically set to it._<p>A passed-in Spring {@link JtaTransactionManager} needs to contain a JTA_{@link TransactionManager} reference to be usable here, except for the WebSphere_case where we'll automatically set {@code WebSphereExtendedJtaPlatform} accordingly._<p>Note: If this is set, the Hibernate settings should not contain a JTA platform_setting to avoid meaningless double configuration.;public LocalSessionFactoryBuilder setJtaTransactionManager(Object jtaTransactionManager) {_		Assert.notNull(jtaTransactionManager, "Transaction manager reference must not be null")___		if (jtaTransactionManager instanceof JtaTransactionManager) {_			boolean webspherePresent = ClassUtils.isPresent("com.ibm.wsspi.uow.UOWManager", getClass().getClassLoader())__			if (webspherePresent) {_				getProperties().put(AvailableSettings.JTA_PLATFORM,_						"org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform")__			}_			else {_				JtaTransactionManager jtaTm = (JtaTransactionManager) jtaTransactionManager__				if (jtaTm.getTransactionManager() == null) {_					throw new IllegalArgumentException(_							"Can only apply JtaTransactionManager which has a TransactionManager reference set")__				}_				getProperties().put(AvailableSettings.JTA_PLATFORM,_						new ConfigurableJtaPlatform(jtaTm.getTransactionManager(), jtaTm.getUserTransaction(),_								jtaTm.getTransactionSynchronizationRegistry()))__			}_		}_		else if (jtaTransactionManager instanceof TransactionManager) {_			getProperties().put(AvailableSettings.JTA_PLATFORM,_					new ConfigurableJtaPlatform((TransactionManager) jtaTransactionManager, null, null))__		}_		else {_			throw new IllegalArgumentException(_					"Unknown transaction manager type: " + jtaTransactionManager.getClass().getName())__		}__		_		try {_			_			AvailableSettings.class.getField("CONNECTION_HANDLING")__			getProperties().put("hibernate.connection.handling_mode", "DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT")__		}_		catch (NoSuchFieldException ex) {_			_			try {_				AvailableSettings.class.getField("ACQUIRE_CONNECTIONS")__				getProperties().put("hibernate.connection.release_mode", "AFTER_STATEMENT")__			}_			catch (NoSuchFieldException ex2) {_				_			}_		}__		return this__	};set,the,spring,link,jta,transaction,manager,or,the,jta,link,transaction,manager,to,be,used,with,hibernate,if,any,allows,for,using,a,spring,managed,transaction,manager,for,hibernate,5,s,session,and,cache,synchronization,with,the,hibernate,transaction,jta,platform,automatically,set,to,it,p,a,passed,in,spring,link,jta,transaction,manager,needs,to,contain,a,jta,link,transaction,manager,reference,to,be,usable,here,except,for,the,web,sphere,case,where,we,ll,automatically,set,code,web,sphere,extended,jta,platform,accordingly,p,note,if,this,is,set,the,hibernate,settings,should,not,contain,a,jta,platform,setting,to,avoid,meaningless,double,configuration;public,local,session,factory,builder,set,jta,transaction,manager,object,jta,transaction,manager,assert,not,null,jta,transaction,manager,transaction,manager,reference,must,not,be,null,if,jta,transaction,manager,instanceof,jta,transaction,manager,boolean,websphere,present,class,utils,is,present,com,ibm,wsspi,uow,uowmanager,get,class,get,class,loader,if,websphere,present,get,properties,put,available,settings,org,hibernate,engine,transaction,jta,platform,internal,web,sphere,extended,jta,platform,else,jta,transaction,manager,jta,tm,jta,transaction,manager,jta,transaction,manager,if,jta,tm,get,transaction,manager,null,throw,new,illegal,argument,exception,can,only,apply,jta,transaction,manager,which,has,a,transaction,manager,reference,set,get,properties,put,available,settings,new,configurable,jta,platform,jta,tm,get,transaction,manager,jta,tm,get,user,transaction,jta,tm,get,transaction,synchronization,registry,else,if,jta,transaction,manager,instanceof,transaction,manager,get,properties,put,available,settings,new,configurable,jta,platform,transaction,manager,jta,transaction,manager,null,null,else,throw,new,illegal,argument,exception,unknown,transaction,manager,type,jta,transaction,manager,get,class,get,name,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex2,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setJtaTransactionManager(Object jtaTransactionManager);1530188116;Set the Spring {@link JtaTransactionManager} or the JTA {@link TransactionManager}_to be used with Hibernate, if any. Allows for using a Spring-managed transaction_manager for Hibernate 5's session and cache synchronization, with the_"hibernate.transaction.jta.platform" automatically set to it._<p>A passed-in Spring {@link JtaTransactionManager} needs to contain a JTA_{@link TransactionManager} reference to be usable here, except for the WebSphere_case where we'll automatically set {@code WebSphereExtendedJtaPlatform} accordingly._<p>Note: If this is set, the Hibernate settings should not contain a JTA platform_setting to avoid meaningless double configuration.;public LocalSessionFactoryBuilder setJtaTransactionManager(Object jtaTransactionManager) {_		Assert.notNull(jtaTransactionManager, "Transaction manager reference must not be null")___		if (jtaTransactionManager instanceof JtaTransactionManager) {_			boolean webspherePresent = ClassUtils.isPresent("com.ibm.wsspi.uow.UOWManager", getClass().getClassLoader())__			if (webspherePresent) {_				getProperties().put(AvailableSettings.JTA_PLATFORM,_						"org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform")__			}_			else {_				JtaTransactionManager jtaTm = (JtaTransactionManager) jtaTransactionManager__				if (jtaTm.getTransactionManager() == null) {_					throw new IllegalArgumentException(_							"Can only apply JtaTransactionManager which has a TransactionManager reference set")__				}_				getProperties().put(AvailableSettings.JTA_PLATFORM,_						new ConfigurableJtaPlatform(jtaTm.getTransactionManager(), jtaTm.getUserTransaction(),_								jtaTm.getTransactionSynchronizationRegistry()))__			}_		}_		else if (jtaTransactionManager instanceof TransactionManager) {_			getProperties().put(AvailableSettings.JTA_PLATFORM,_					new ConfigurableJtaPlatform((TransactionManager) jtaTransactionManager, null, null))__		}_		else {_			throw new IllegalArgumentException(_					"Unknown transaction manager type: " + jtaTransactionManager.getClass().getName())__		}__		_		try {_			_			AvailableSettings.class.getField("CONNECTION_HANDLING")__			getProperties().put("hibernate.connection.handling_mode", "DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT")__		}_		catch (NoSuchFieldException ex) {_			_			try {_				AvailableSettings.class.getField("ACQUIRE_CONNECTIONS")__				getProperties().put("hibernate.connection.release_mode", "AFTER_STATEMENT")__			}_			catch (NoSuchFieldException ex2) {_				_			}_		}__		return this__	};set,the,spring,link,jta,transaction,manager,or,the,jta,link,transaction,manager,to,be,used,with,hibernate,if,any,allows,for,using,a,spring,managed,transaction,manager,for,hibernate,5,s,session,and,cache,synchronization,with,the,hibernate,transaction,jta,platform,automatically,set,to,it,p,a,passed,in,spring,link,jta,transaction,manager,needs,to,contain,a,jta,link,transaction,manager,reference,to,be,usable,here,except,for,the,web,sphere,case,where,we,ll,automatically,set,code,web,sphere,extended,jta,platform,accordingly,p,note,if,this,is,set,the,hibernate,settings,should,not,contain,a,jta,platform,setting,to,avoid,meaningless,double,configuration;public,local,session,factory,builder,set,jta,transaction,manager,object,jta,transaction,manager,assert,not,null,jta,transaction,manager,transaction,manager,reference,must,not,be,null,if,jta,transaction,manager,instanceof,jta,transaction,manager,boolean,websphere,present,class,utils,is,present,com,ibm,wsspi,uow,uowmanager,get,class,get,class,loader,if,websphere,present,get,properties,put,available,settings,org,hibernate,engine,transaction,jta,platform,internal,web,sphere,extended,jta,platform,else,jta,transaction,manager,jta,tm,jta,transaction,manager,jta,transaction,manager,if,jta,tm,get,transaction,manager,null,throw,new,illegal,argument,exception,can,only,apply,jta,transaction,manager,which,has,a,transaction,manager,reference,set,get,properties,put,available,settings,new,configurable,jta,platform,jta,tm,get,transaction,manager,jta,tm,get,user,transaction,jta,tm,get,transaction,synchronization,registry,else,if,jta,transaction,manager,instanceof,transaction,manager,get,properties,put,available,settings,new,configurable,jta,platform,transaction,manager,jta,transaction,manager,null,null,else,throw,new,illegal,argument,exception,unknown,transaction,manager,type,jta,transaction,manager,get,class,get,name,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex2,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setJtaTransactionManager(Object jtaTransactionManager);1530724999;Set the Spring {@link JtaTransactionManager} or the JTA {@link TransactionManager}_to be used with Hibernate, if any. Allows for using a Spring-managed transaction_manager for Hibernate 5's session and cache synchronization, with the_"hibernate.transaction.jta.platform" automatically set to it._<p>A passed-in Spring {@link JtaTransactionManager} needs to contain a JTA_{@link TransactionManager} reference to be usable here, except for the WebSphere_case where we'll automatically set {@code WebSphereExtendedJtaPlatform} accordingly._<p>Note: If this is set, the Hibernate settings should not contain a JTA platform_setting to avoid meaningless double configuration.;public LocalSessionFactoryBuilder setJtaTransactionManager(Object jtaTransactionManager) {_		Assert.notNull(jtaTransactionManager, "Transaction manager reference must not be null")___		if (jtaTransactionManager instanceof JtaTransactionManager) {_			boolean webspherePresent = ClassUtils.isPresent("com.ibm.wsspi.uow.UOWManager", getClass().getClassLoader())__			if (webspherePresent) {_				getProperties().put(AvailableSettings.JTA_PLATFORM,_						"org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform")__			}_			else {_				JtaTransactionManager jtaTm = (JtaTransactionManager) jtaTransactionManager__				if (jtaTm.getTransactionManager() == null) {_					throw new IllegalArgumentException(_							"Can only apply JtaTransactionManager which has a TransactionManager reference set")__				}_				getProperties().put(AvailableSettings.JTA_PLATFORM,_						new ConfigurableJtaPlatform(jtaTm.getTransactionManager(), jtaTm.getUserTransaction(),_								jtaTm.getTransactionSynchronizationRegistry()))__			}_		}_		else if (jtaTransactionManager instanceof TransactionManager) {_			getProperties().put(AvailableSettings.JTA_PLATFORM,_					new ConfigurableJtaPlatform((TransactionManager) jtaTransactionManager, null, null))__		}_		else {_			throw new IllegalArgumentException(_					"Unknown transaction manager type: " + jtaTransactionManager.getClass().getName())__		}__		_		try {_			_			AvailableSettings.class.getField("CONNECTION_HANDLING")__			getProperties().put("hibernate.connection.handling_mode", "DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT")__		}_		catch (NoSuchFieldException ex) {_			_			try {_				AvailableSettings.class.getField("ACQUIRE_CONNECTIONS")__				getProperties().put("hibernate.connection.release_mode", "AFTER_STATEMENT")__			}_			catch (NoSuchFieldException ex2) {_				_			}_		}__		return this__	};set,the,spring,link,jta,transaction,manager,or,the,jta,link,transaction,manager,to,be,used,with,hibernate,if,any,allows,for,using,a,spring,managed,transaction,manager,for,hibernate,5,s,session,and,cache,synchronization,with,the,hibernate,transaction,jta,platform,automatically,set,to,it,p,a,passed,in,spring,link,jta,transaction,manager,needs,to,contain,a,jta,link,transaction,manager,reference,to,be,usable,here,except,for,the,web,sphere,case,where,we,ll,automatically,set,code,web,sphere,extended,jta,platform,accordingly,p,note,if,this,is,set,the,hibernate,settings,should,not,contain,a,jta,platform,setting,to,avoid,meaningless,double,configuration;public,local,session,factory,builder,set,jta,transaction,manager,object,jta,transaction,manager,assert,not,null,jta,transaction,manager,transaction,manager,reference,must,not,be,null,if,jta,transaction,manager,instanceof,jta,transaction,manager,boolean,websphere,present,class,utils,is,present,com,ibm,wsspi,uow,uowmanager,get,class,get,class,loader,if,websphere,present,get,properties,put,available,settings,org,hibernate,engine,transaction,jta,platform,internal,web,sphere,extended,jta,platform,else,jta,transaction,manager,jta,tm,jta,transaction,manager,jta,transaction,manager,if,jta,tm,get,transaction,manager,null,throw,new,illegal,argument,exception,can,only,apply,jta,transaction,manager,which,has,a,transaction,manager,reference,set,get,properties,put,available,settings,new,configurable,jta,platform,jta,tm,get,transaction,manager,jta,tm,get,user,transaction,jta,tm,get,transaction,synchronization,registry,else,if,jta,transaction,manager,instanceof,transaction,manager,get,properties,put,available,settings,new,configurable,jta,platform,transaction,manager,jta,transaction,manager,null,null,else,throw,new,illegal,argument,exception,unknown,transaction,manager,type,jta,transaction,manager,get,class,get,name,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex2,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setJtaTransactionManager(Object jtaTransactionManager);1530802115;Set the Spring {@link JtaTransactionManager} or the JTA {@link TransactionManager}_to be used with Hibernate, if any. Allows for using a Spring-managed transaction_manager for Hibernate 5's session and cache synchronization, with the_"hibernate.transaction.jta.platform" automatically set to it._<p>A passed-in Spring {@link JtaTransactionManager} needs to contain a JTA_{@link TransactionManager} reference to be usable here, except for the WebSphere_case where we'll automatically set {@code WebSphereExtendedJtaPlatform} accordingly._<p>Note: If this is set, the Hibernate settings should not contain a JTA platform_setting to avoid meaningless double configuration.;public LocalSessionFactoryBuilder setJtaTransactionManager(Object jtaTransactionManager) {_		Assert.notNull(jtaTransactionManager, "Transaction manager reference must not be null")___		if (jtaTransactionManager instanceof JtaTransactionManager) {_			boolean webspherePresent = ClassUtils.isPresent("com.ibm.wsspi.uow.UOWManager", getClass().getClassLoader())__			if (webspherePresent) {_				getProperties().put(AvailableSettings.JTA_PLATFORM,_						"org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform")__			}_			else {_				JtaTransactionManager jtaTm = (JtaTransactionManager) jtaTransactionManager__				if (jtaTm.getTransactionManager() == null) {_					throw new IllegalArgumentException(_							"Can only apply JtaTransactionManager which has a TransactionManager reference set")__				}_				getProperties().put(AvailableSettings.JTA_PLATFORM,_						new ConfigurableJtaPlatform(jtaTm.getTransactionManager(), jtaTm.getUserTransaction(),_								jtaTm.getTransactionSynchronizationRegistry()))__			}_		}_		else if (jtaTransactionManager instanceof TransactionManager) {_			getProperties().put(AvailableSettings.JTA_PLATFORM,_					new ConfigurableJtaPlatform((TransactionManager) jtaTransactionManager, null, null))__		}_		else {_			throw new IllegalArgumentException(_					"Unknown transaction manager type: " + jtaTransactionManager.getClass().getName())__		}__		_		try {_			_			AvailableSettings.class.getField("CONNECTION_HANDLING")__			getProperties().put("hibernate.connection.handling_mode", "DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT")__		}_		catch (NoSuchFieldException ex) {_			_			try {_				AvailableSettings.class.getField("ACQUIRE_CONNECTIONS")__				getProperties().put("hibernate.connection.release_mode", "AFTER_STATEMENT")__			}_			catch (NoSuchFieldException ex2) {_				_			}_		}__		return this__	};set,the,spring,link,jta,transaction,manager,or,the,jta,link,transaction,manager,to,be,used,with,hibernate,if,any,allows,for,using,a,spring,managed,transaction,manager,for,hibernate,5,s,session,and,cache,synchronization,with,the,hibernate,transaction,jta,platform,automatically,set,to,it,p,a,passed,in,spring,link,jta,transaction,manager,needs,to,contain,a,jta,link,transaction,manager,reference,to,be,usable,here,except,for,the,web,sphere,case,where,we,ll,automatically,set,code,web,sphere,extended,jta,platform,accordingly,p,note,if,this,is,set,the,hibernate,settings,should,not,contain,a,jta,platform,setting,to,avoid,meaningless,double,configuration;public,local,session,factory,builder,set,jta,transaction,manager,object,jta,transaction,manager,assert,not,null,jta,transaction,manager,transaction,manager,reference,must,not,be,null,if,jta,transaction,manager,instanceof,jta,transaction,manager,boolean,websphere,present,class,utils,is,present,com,ibm,wsspi,uow,uowmanager,get,class,get,class,loader,if,websphere,present,get,properties,put,available,settings,org,hibernate,engine,transaction,jta,platform,internal,web,sphere,extended,jta,platform,else,jta,transaction,manager,jta,tm,jta,transaction,manager,jta,transaction,manager,if,jta,tm,get,transaction,manager,null,throw,new,illegal,argument,exception,can,only,apply,jta,transaction,manager,which,has,a,transaction,manager,reference,set,get,properties,put,available,settings,new,configurable,jta,platform,jta,tm,get,transaction,manager,jta,tm,get,user,transaction,jta,tm,get,transaction,synchronization,registry,else,if,jta,transaction,manager,instanceof,transaction,manager,get,properties,put,available,settings,new,configurable,jta,platform,transaction,manager,jta,transaction,manager,null,null,else,throw,new,illegal,argument,exception,unknown,transaction,manager,type,jta,transaction,manager,get,class,get,name,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex2,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder setJtaTransactionManager(Object jtaTransactionManager);1531739026;Set the Spring {@link JtaTransactionManager} or the JTA {@link TransactionManager}_to be used with Hibernate, if any. Allows for using a Spring-managed transaction_manager for Hibernate 5's session and cache synchronization, with the_"hibernate.transaction.jta.platform" automatically set to it._<p>A passed-in Spring {@link JtaTransactionManager} needs to contain a JTA_{@link TransactionManager} reference to be usable here, except for the WebSphere_case where we'll automatically set {@code WebSphereExtendedJtaPlatform} accordingly._<p>Note: If this is set, the Hibernate settings should not contain a JTA platform_setting to avoid meaningless double configuration.;public LocalSessionFactoryBuilder setJtaTransactionManager(Object jtaTransactionManager) {_		Assert.notNull(jtaTransactionManager, "Transaction manager reference must not be null")___		if (jtaTransactionManager instanceof JtaTransactionManager) {_			boolean webspherePresent = ClassUtils.isPresent("com.ibm.wsspi.uow.UOWManager", getClass().getClassLoader())__			if (webspherePresent) {_				getProperties().put(AvailableSettings.JTA_PLATFORM,_						"org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform")__			}_			else {_				JtaTransactionManager jtaTm = (JtaTransactionManager) jtaTransactionManager__				if (jtaTm.getTransactionManager() == null) {_					throw new IllegalArgumentException(_							"Can only apply JtaTransactionManager which has a TransactionManager reference set")__				}_				getProperties().put(AvailableSettings.JTA_PLATFORM,_						new ConfigurableJtaPlatform(jtaTm.getTransactionManager(), jtaTm.getUserTransaction(),_								jtaTm.getTransactionSynchronizationRegistry()))__			}_		}_		else if (jtaTransactionManager instanceof TransactionManager) {_			getProperties().put(AvailableSettings.JTA_PLATFORM,_					new ConfigurableJtaPlatform((TransactionManager) jtaTransactionManager, null, null))__		}_		else {_			throw new IllegalArgumentException(_					"Unknown transaction manager type: " + jtaTransactionManager.getClass().getName())__		}__		_		try {_			_			AvailableSettings.class.getField("CONNECTION_HANDLING")__			getProperties().put("hibernate.connection.handling_mode", "DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT")__		}_		catch (NoSuchFieldException ex) {_			_			try {_				AvailableSettings.class.getField("ACQUIRE_CONNECTIONS")__				getProperties().put("hibernate.connection.release_mode", "AFTER_STATEMENT")__			}_			catch (NoSuchFieldException ex2) {_				_			}_		}__		return this__	};set,the,spring,link,jta,transaction,manager,or,the,jta,link,transaction,manager,to,be,used,with,hibernate,if,any,allows,for,using,a,spring,managed,transaction,manager,for,hibernate,5,s,session,and,cache,synchronization,with,the,hibernate,transaction,jta,platform,automatically,set,to,it,p,a,passed,in,spring,link,jta,transaction,manager,needs,to,contain,a,jta,link,transaction,manager,reference,to,be,usable,here,except,for,the,web,sphere,case,where,we,ll,automatically,set,code,web,sphere,extended,jta,platform,accordingly,p,note,if,this,is,set,the,hibernate,settings,should,not,contain,a,jta,platform,setting,to,avoid,meaningless,double,configuration;public,local,session,factory,builder,set,jta,transaction,manager,object,jta,transaction,manager,assert,not,null,jta,transaction,manager,transaction,manager,reference,must,not,be,null,if,jta,transaction,manager,instanceof,jta,transaction,manager,boolean,websphere,present,class,utils,is,present,com,ibm,wsspi,uow,uowmanager,get,class,get,class,loader,if,websphere,present,get,properties,put,available,settings,org,hibernate,engine,transaction,jta,platform,internal,web,sphere,extended,jta,platform,else,jta,transaction,manager,jta,tm,jta,transaction,manager,jta,transaction,manager,if,jta,tm,get,transaction,manager,null,throw,new,illegal,argument,exception,can,only,apply,jta,transaction,manager,which,has,a,transaction,manager,reference,set,get,properties,put,available,settings,new,configurable,jta,platform,jta,tm,get,transaction,manager,jta,tm,get,user,transaction,jta,tm,get,transaction,synchronization,registry,else,if,jta,transaction,manager,instanceof,transaction,manager,get,properties,put,available,settings,new,configurable,jta,platform,transaction,manager,jta,transaction,manager,null,null,else,throw,new,illegal,argument,exception,unknown,transaction,manager,type,jta,transaction,manager,get,class,get,name,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex2,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder addPackages(String... annotatedPackages);1467668243;Add the given annotated packages in a batch._@see #addPackage_@see #scanPackages;public LocalSessionFactoryBuilder addPackages(String... annotatedPackages) {_		for (String annotatedPackage : annotatedPackages) {_			addPackage(annotatedPackage)__		}_		return this__	};add,the,given,annotated,packages,in,a,batch,see,add,package,see,scan,packages;public,local,session,factory,builder,add,packages,string,annotated,packages,for,string,annotated,package,annotated,packages,add,package,annotated,package,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder addPackages(String... annotatedPackages);1467730834;Add the given annotated packages in a batch._@see #addPackage_@see #scanPackages;public LocalSessionFactoryBuilder addPackages(String... annotatedPackages) {_		for (String annotatedPackage : annotatedPackages) {_			addPackage(annotatedPackage)__		}_		return this__	};add,the,given,annotated,packages,in,a,batch,see,add,package,see,scan,packages;public,local,session,factory,builder,add,packages,string,annotated,packages,for,string,annotated,package,annotated,packages,add,package,annotated,package,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder addPackages(String... annotatedPackages);1468941907;Add the given annotated packages in a batch._@see #addPackage_@see #scanPackages;public LocalSessionFactoryBuilder addPackages(String... annotatedPackages) {_		for (String annotatedPackage : annotatedPackages) {_			addPackage(annotatedPackage)__		}_		return this__	};add,the,given,annotated,packages,in,a,batch,see,add,package,see,scan,packages;public,local,session,factory,builder,add,packages,string,annotated,packages,for,string,annotated,package,annotated,packages,add,package,annotated,package,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder addPackages(String... annotatedPackages);1470272834;Add the given annotated packages in a batch._@see #addPackage_@see #scanPackages;public LocalSessionFactoryBuilder addPackages(String... annotatedPackages) {_		for (String annotatedPackage : annotatedPackages) {_			addPackage(annotatedPackage)__		}_		return this__	};add,the,given,annotated,packages,in,a,batch,see,add,package,see,scan,packages;public,local,session,factory,builder,add,packages,string,annotated,packages,for,string,annotated,package,annotated,packages,add,package,annotated,package,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder addPackages(String... annotatedPackages);1470660485;Add the given annotated packages in a batch._@see #addPackage_@see #scanPackages;public LocalSessionFactoryBuilder addPackages(String... annotatedPackages) {_		for (String annotatedPackage : annotatedPackages) {_			addPackage(annotatedPackage)__		}_		return this__	};add,the,given,annotated,packages,in,a,batch,see,add,package,see,scan,packages;public,local,session,factory,builder,add,packages,string,annotated,packages,for,string,annotated,package,annotated,packages,add,package,annotated,package,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder addPackages(String... annotatedPackages);1495868221;Add the given annotated packages in a batch._@see #addPackage_@see #scanPackages;public LocalSessionFactoryBuilder addPackages(String... annotatedPackages) {_		for (String annotatedPackage : annotatedPackages) {_			addPackage(annotatedPackage)__		}_		return this__	};add,the,given,annotated,packages,in,a,batch,see,add,package,see,scan,packages;public,local,session,factory,builder,add,packages,string,annotated,packages,for,string,annotated,package,annotated,packages,add,package,annotated,package,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder addPackages(String... annotatedPackages);1496837955;Add the given annotated packages in a batch._@see #addPackage_@see #scanPackages;public LocalSessionFactoryBuilder addPackages(String... annotatedPackages) {_		for (String annotatedPackage : annotatedPackages) {_			addPackage(annotatedPackage)__		}_		return this__	};add,the,given,annotated,packages,in,a,batch,see,add,package,see,scan,packages;public,local,session,factory,builder,add,packages,string,annotated,packages,for,string,annotated,package,annotated,packages,add,package,annotated,package,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder addPackages(String... annotatedPackages);1497341397;Add the given annotated packages in a batch._@see #addPackage_@see #scanPackages;public LocalSessionFactoryBuilder addPackages(String... annotatedPackages) {_		for (String annotatedPackage : annotatedPackages) {_			addPackage(annotatedPackage)__		}_		return this__	};add,the,given,annotated,packages,in,a,batch,see,add,package,see,scan,packages;public,local,session,factory,builder,add,packages,string,annotated,packages,for,string,annotated,package,annotated,packages,add,package,annotated,package,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder addPackages(String... annotatedPackages);1498780456;Add the given annotated packages in a batch._@see #addPackage_@see #scanPackages;public LocalSessionFactoryBuilder addPackages(String... annotatedPackages) {_		for (String annotatedPackage : annotatedPackages) {_			addPackage(annotatedPackage)__		}_		return this__	};add,the,given,annotated,packages,in,a,batch,see,add,package,see,scan,packages;public,local,session,factory,builder,add,packages,string,annotated,packages,for,string,annotated,package,annotated,packages,add,package,annotated,package,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder addPackages(String... annotatedPackages);1518264213;Add the given annotated packages in a batch._@see #addPackage_@see #scanPackages;public LocalSessionFactoryBuilder addPackages(String... annotatedPackages) {_		for (String annotatedPackage : annotatedPackages) {_			addPackage(annotatedPackage)__		}_		return this__	};add,the,given,annotated,packages,in,a,batch,see,add,package,see,scan,packages;public,local,session,factory,builder,add,packages,string,annotated,packages,for,string,annotated,package,annotated,packages,add,package,annotated,package,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder addPackages(String... annotatedPackages);1519860149;Add the given annotated packages in a batch._@see #addPackage_@see #scanPackages;public LocalSessionFactoryBuilder addPackages(String... annotatedPackages) {_		for (String annotatedPackage : annotatedPackages) {_			addPackage(annotatedPackage)__		}_		return this__	};add,the,given,annotated,packages,in,a,batch,see,add,package,see,scan,packages;public,local,session,factory,builder,add,packages,string,annotated,packages,for,string,annotated,package,annotated,packages,add,package,annotated,package,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder addPackages(String... annotatedPackages);1520373974;Add the given annotated packages in a batch._@see #addPackage_@see #scanPackages;public LocalSessionFactoryBuilder addPackages(String... annotatedPackages) {_		for (String annotatedPackage : annotatedPackages) {_			addPackage(annotatedPackage)__		}_		return this__	};add,the,given,annotated,packages,in,a,batch,see,add,package,see,scan,packages;public,local,session,factory,builder,add,packages,string,annotated,packages,for,string,annotated,package,annotated,packages,add,package,annotated,package,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder addPackages(String... annotatedPackages);1530188116;Add the given annotated packages in a batch._@see #addPackage_@see #scanPackages;public LocalSessionFactoryBuilder addPackages(String... annotatedPackages) {_		for (String annotatedPackage : annotatedPackages) {_			addPackage(annotatedPackage)__		}_		return this__	};add,the,given,annotated,packages,in,a,batch,see,add,package,see,scan,packages;public,local,session,factory,builder,add,packages,string,annotated,packages,for,string,annotated,package,annotated,packages,add,package,annotated,package,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder addPackages(String... annotatedPackages);1530724999;Add the given annotated packages in a batch._@see #addPackage_@see #scanPackages;public LocalSessionFactoryBuilder addPackages(String... annotatedPackages) {_		for (String annotatedPackage : annotatedPackages) {_			addPackage(annotatedPackage)__		}_		return this__	};add,the,given,annotated,packages,in,a,batch,see,add,package,see,scan,packages;public,local,session,factory,builder,add,packages,string,annotated,packages,for,string,annotated,package,annotated,packages,add,package,annotated,package,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder addPackages(String... annotatedPackages);1530802115;Add the given annotated packages in a batch._@see #addPackage_@see #scanPackages;public LocalSessionFactoryBuilder addPackages(String... annotatedPackages) {_		for (String annotatedPackage : annotatedPackages) {_			addPackage(annotatedPackage)__		}_		return this__	};add,the,given,annotated,packages,in,a,batch,see,add,package,see,scan,packages;public,local,session,factory,builder,add,packages,string,annotated,packages,for,string,annotated,package,annotated,packages,add,package,annotated,package,return,this
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder addPackages(String... annotatedPackages);1531739026;Add the given annotated packages in a batch._@see #addPackage_@see #scanPackages;public LocalSessionFactoryBuilder addPackages(String... annotatedPackages) {_		for (String annotatedPackage : annotatedPackages) {_			addPackage(annotatedPackage)__		}_		return this__	};add,the,given,annotated,packages,in,a,batch,see,add,package,see,scan,packages;public,local,session,factory,builder,add,packages,string,annotated,packages,for,string,annotated,package,annotated,packages,add,package,annotated,package,return,this
LocalSessionFactoryBuilder -> @SuppressWarnings("unchecked") 	public LocalSessionFactoryBuilder scanPackages(String... packagesToScan) throws HibernateException;1467668243;Perform Spring-based scanning for entity classes, registering them_as annotated classes with this {@code Configuration}._@param packagesToScan one or more Java package names_@throws HibernateException if scanning fails for any reason;@SuppressWarnings("unchecked")_	public LocalSessionFactoryBuilder scanPackages(String... packagesToScan) throws HibernateException {_		Set<String> entityClassNames = new TreeSet<String>()__		Set<String> converterClassNames = new TreeSet<String>()__		Set<String> packageNames = new TreeSet<String>()__		try {_			for (String pkg : packagesToScan) {_				String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +_						ClassUtils.convertClassNameToResourcePath(pkg) + RESOURCE_PATTERN__				Resource[] resources = this.resourcePatternResolver.getResources(pattern)__				MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)__				for (Resource resource : resources) {_					if (resource.isReadable()) {_						MetadataReader reader = readerFactory.getMetadataReader(resource)__						String className = reader.getClassMetadata().getClassName()__						if (matchesEntityTypeFilter(reader, readerFactory)) {_							entityClassNames.add(className)__						}_						else if (CONVERTER_TYPE_FILTER.match(reader, readerFactory)) {_							converterClassNames.add(className)__						}_						else if (className.endsWith(PACKAGE_INFO_SUFFIX)) {_							packageNames.add(className.substring(0, className.length() - PACKAGE_INFO_SUFFIX.length()))__						}_					}_				}_			}_		}_		catch (IOException ex) {_			throw new MappingException("Failed to scan classpath for unlisted classes", ex)__		}_		try {_			ClassLoader cl = this.resourcePatternResolver.getClassLoader()__			for (String className : entityClassNames) {_				addAnnotatedClass(cl.loadClass(className))__			}_			for (String className : converterClassNames) {_				addAttributeConverter((Class<? extends AttributeConverter<?, ?>>) cl.loadClass(className))__			}_			for (String packageName : packageNames) {_				addPackage(packageName)__			}_		}_		catch (ClassNotFoundException ex) {_			throw new MappingException("Failed to load annotated classes from classpath", ex)__		}_		return this__	};perform,spring,based,scanning,for,entity,classes,registering,them,as,annotated,classes,with,this,code,configuration,param,packages,to,scan,one,or,more,java,package,names,throws,hibernate,exception,if,scanning,fails,for,any,reason;suppress,warnings,unchecked,public,local,session,factory,builder,scan,packages,string,packages,to,scan,throws,hibernate,exception,set,string,entity,class,names,new,tree,set,string,set,string,converter,class,names,new,tree,set,string,set,string,package,names,new,tree,set,string,try,for,string,pkg,packages,to,scan,string,pattern,resource,pattern,resolver,class,utils,convert,class,name,to,resource,path,pkg,resource,resources,this,resource,pattern,resolver,get,resources,pattern,metadata,reader,factory,reader,factory,new,caching,metadata,reader,factory,this,resource,pattern,resolver,for,resource,resource,resources,if,resource,is,readable,metadata,reader,reader,reader,factory,get,metadata,reader,resource,string,class,name,reader,get,class,metadata,get,class,name,if,matches,entity,type,filter,reader,reader,factory,entity,class,names,add,class,name,else,if,match,reader,reader,factory,converter,class,names,add,class,name,else,if,class,name,ends,with,package,names,add,class,name,substring,0,class,name,length,length,catch,ioexception,ex,throw,new,mapping,exception,failed,to,scan,classpath,for,unlisted,classes,ex,try,class,loader,cl,this,resource,pattern,resolver,get,class,loader,for,string,class,name,entity,class,names,add,annotated,class,cl,load,class,class,name,for,string,class,name,converter,class,names,add,attribute,converter,class,extends,attribute,converter,cl,load,class,class,name,for,string,package,name,package,names,add,package,package,name,catch,class,not,found,exception,ex,throw,new,mapping,exception,failed,to,load,annotated,classes,from,classpath,ex,return,this
LocalSessionFactoryBuilder -> @SuppressWarnings("unchecked") 	public LocalSessionFactoryBuilder scanPackages(String... packagesToScan) throws HibernateException;1467730834;Perform Spring-based scanning for entity classes, registering them_as annotated classes with this {@code Configuration}._@param packagesToScan one or more Java package names_@throws HibernateException if scanning fails for any reason;@SuppressWarnings("unchecked")_	public LocalSessionFactoryBuilder scanPackages(String... packagesToScan) throws HibernateException {_		Set<String> entityClassNames = new TreeSet<>()__		Set<String> converterClassNames = new TreeSet<>()__		Set<String> packageNames = new TreeSet<>()__		try {_			for (String pkg : packagesToScan) {_				String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +_						ClassUtils.convertClassNameToResourcePath(pkg) + RESOURCE_PATTERN__				Resource[] resources = this.resourcePatternResolver.getResources(pattern)__				MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)__				for (Resource resource : resources) {_					if (resource.isReadable()) {_						MetadataReader reader = readerFactory.getMetadataReader(resource)__						String className = reader.getClassMetadata().getClassName()__						if (matchesEntityTypeFilter(reader, readerFactory)) {_							entityClassNames.add(className)__						}_						else if (CONVERTER_TYPE_FILTER.match(reader, readerFactory)) {_							converterClassNames.add(className)__						}_						else if (className.endsWith(PACKAGE_INFO_SUFFIX)) {_							packageNames.add(className.substring(0, className.length() - PACKAGE_INFO_SUFFIX.length()))__						}_					}_				}_			}_		}_		catch (IOException ex) {_			throw new MappingException("Failed to scan classpath for unlisted classes", ex)__		}_		try {_			ClassLoader cl = this.resourcePatternResolver.getClassLoader()__			for (String className : entityClassNames) {_				addAnnotatedClass(cl.loadClass(className))__			}_			for (String className : converterClassNames) {_				addAttributeConverter((Class<? extends AttributeConverter<?, ?>>) cl.loadClass(className))__			}_			for (String packageName : packageNames) {_				addPackage(packageName)__			}_		}_		catch (ClassNotFoundException ex) {_			throw new MappingException("Failed to load annotated classes from classpath", ex)__		}_		return this__	};perform,spring,based,scanning,for,entity,classes,registering,them,as,annotated,classes,with,this,code,configuration,param,packages,to,scan,one,or,more,java,package,names,throws,hibernate,exception,if,scanning,fails,for,any,reason;suppress,warnings,unchecked,public,local,session,factory,builder,scan,packages,string,packages,to,scan,throws,hibernate,exception,set,string,entity,class,names,new,tree,set,set,string,converter,class,names,new,tree,set,set,string,package,names,new,tree,set,try,for,string,pkg,packages,to,scan,string,pattern,resource,pattern,resolver,class,utils,convert,class,name,to,resource,path,pkg,resource,resources,this,resource,pattern,resolver,get,resources,pattern,metadata,reader,factory,reader,factory,new,caching,metadata,reader,factory,this,resource,pattern,resolver,for,resource,resource,resources,if,resource,is,readable,metadata,reader,reader,reader,factory,get,metadata,reader,resource,string,class,name,reader,get,class,metadata,get,class,name,if,matches,entity,type,filter,reader,reader,factory,entity,class,names,add,class,name,else,if,match,reader,reader,factory,converter,class,names,add,class,name,else,if,class,name,ends,with,package,names,add,class,name,substring,0,class,name,length,length,catch,ioexception,ex,throw,new,mapping,exception,failed,to,scan,classpath,for,unlisted,classes,ex,try,class,loader,cl,this,resource,pattern,resolver,get,class,loader,for,string,class,name,entity,class,names,add,annotated,class,cl,load,class,class,name,for,string,class,name,converter,class,names,add,attribute,converter,class,extends,attribute,converter,cl,load,class,class,name,for,string,package,name,package,names,add,package,package,name,catch,class,not,found,exception,ex,throw,new,mapping,exception,failed,to,load,annotated,classes,from,classpath,ex,return,this
LocalSessionFactoryBuilder -> @SuppressWarnings("unchecked") 	public LocalSessionFactoryBuilder scanPackages(String... packagesToScan) throws HibernateException;1468941907;Perform Spring-based scanning for entity classes, registering them_as annotated classes with this {@code Configuration}._@param packagesToScan one or more Java package names_@throws HibernateException if scanning fails for any reason;@SuppressWarnings("unchecked")_	public LocalSessionFactoryBuilder scanPackages(String... packagesToScan) throws HibernateException {_		Set<String> entityClassNames = new TreeSet<>()__		Set<String> converterClassNames = new TreeSet<>()__		Set<String> packageNames = new TreeSet<>()__		try {_			for (String pkg : packagesToScan) {_				String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +_						ClassUtils.convertClassNameToResourcePath(pkg) + RESOURCE_PATTERN__				Resource[] resources = this.resourcePatternResolver.getResources(pattern)__				MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)__				for (Resource resource : resources) {_					if (resource.isReadable()) {_						MetadataReader reader = readerFactory.getMetadataReader(resource)__						String className = reader.getClassMetadata().getClassName()__						if (matchesEntityTypeFilter(reader, readerFactory)) {_							entityClassNames.add(className)__						}_						else if (CONVERTER_TYPE_FILTER.match(reader, readerFactory)) {_							converterClassNames.add(className)__						}_						else if (className.endsWith(PACKAGE_INFO_SUFFIX)) {_							packageNames.add(className.substring(0, className.length() - PACKAGE_INFO_SUFFIX.length()))__						}_					}_				}_			}_		}_		catch (IOException ex) {_			throw new MappingException("Failed to scan classpath for unlisted classes", ex)__		}_		try {_			ClassLoader cl = this.resourcePatternResolver.getClassLoader()__			for (String className : entityClassNames) {_				addAnnotatedClass(cl.loadClass(className))__			}_			for (String className : converterClassNames) {_				addAttributeConverter((Class<? extends AttributeConverter<?, ?>>) cl.loadClass(className))__			}_			for (String packageName : packageNames) {_				addPackage(packageName)__			}_		}_		catch (ClassNotFoundException ex) {_			throw new MappingException("Failed to load annotated classes from classpath", ex)__		}_		return this__	};perform,spring,based,scanning,for,entity,classes,registering,them,as,annotated,classes,with,this,code,configuration,param,packages,to,scan,one,or,more,java,package,names,throws,hibernate,exception,if,scanning,fails,for,any,reason;suppress,warnings,unchecked,public,local,session,factory,builder,scan,packages,string,packages,to,scan,throws,hibernate,exception,set,string,entity,class,names,new,tree,set,set,string,converter,class,names,new,tree,set,set,string,package,names,new,tree,set,try,for,string,pkg,packages,to,scan,string,pattern,resource,pattern,resolver,class,utils,convert,class,name,to,resource,path,pkg,resource,resources,this,resource,pattern,resolver,get,resources,pattern,metadata,reader,factory,reader,factory,new,caching,metadata,reader,factory,this,resource,pattern,resolver,for,resource,resource,resources,if,resource,is,readable,metadata,reader,reader,reader,factory,get,metadata,reader,resource,string,class,name,reader,get,class,metadata,get,class,name,if,matches,entity,type,filter,reader,reader,factory,entity,class,names,add,class,name,else,if,match,reader,reader,factory,converter,class,names,add,class,name,else,if,class,name,ends,with,package,names,add,class,name,substring,0,class,name,length,length,catch,ioexception,ex,throw,new,mapping,exception,failed,to,scan,classpath,for,unlisted,classes,ex,try,class,loader,cl,this,resource,pattern,resolver,get,class,loader,for,string,class,name,entity,class,names,add,annotated,class,cl,load,class,class,name,for,string,class,name,converter,class,names,add,attribute,converter,class,extends,attribute,converter,cl,load,class,class,name,for,string,package,name,package,names,add,package,package,name,catch,class,not,found,exception,ex,throw,new,mapping,exception,failed,to,load,annotated,classes,from,classpath,ex,return,this
LocalSessionFactoryBuilder -> @SuppressWarnings("unchecked") 	public LocalSessionFactoryBuilder scanPackages(String... packagesToScan) throws HibernateException;1470272834;Perform Spring-based scanning for entity classes, registering them_as annotated classes with this {@code Configuration}._@param packagesToScan one or more Java package names_@throws HibernateException if scanning fails for any reason;@SuppressWarnings("unchecked")_	public LocalSessionFactoryBuilder scanPackages(String... packagesToScan) throws HibernateException {_		Set<String> entityClassNames = new TreeSet<>()__		Set<String> converterClassNames = new TreeSet<>()__		Set<String> packageNames = new TreeSet<>()__		try {_			for (String pkg : packagesToScan) {_				String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +_						ClassUtils.convertClassNameToResourcePath(pkg) + RESOURCE_PATTERN__				Resource[] resources = this.resourcePatternResolver.getResources(pattern)__				MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)__				for (Resource resource : resources) {_					if (resource.isReadable()) {_						MetadataReader reader = readerFactory.getMetadataReader(resource)__						String className = reader.getClassMetadata().getClassName()__						if (matchesEntityTypeFilter(reader, readerFactory)) {_							entityClassNames.add(className)__						}_						else if (CONVERTER_TYPE_FILTER.match(reader, readerFactory)) {_							converterClassNames.add(className)__						}_						else if (className.endsWith(PACKAGE_INFO_SUFFIX)) {_							packageNames.add(className.substring(0, className.length() - PACKAGE_INFO_SUFFIX.length()))__						}_					}_				}_			}_		}_		catch (IOException ex) {_			throw new MappingException("Failed to scan classpath for unlisted classes", ex)__		}_		try {_			ClassLoader cl = this.resourcePatternResolver.getClassLoader()__			for (String className : entityClassNames) {_				addAnnotatedClass(cl.loadClass(className))__			}_			for (String className : converterClassNames) {_				addAttributeConverter((Class<? extends AttributeConverter<?, ?>>) cl.loadClass(className))__			}_			for (String packageName : packageNames) {_				addPackage(packageName)__			}_		}_		catch (ClassNotFoundException ex) {_			throw new MappingException("Failed to load annotated classes from classpath", ex)__		}_		return this__	};perform,spring,based,scanning,for,entity,classes,registering,them,as,annotated,classes,with,this,code,configuration,param,packages,to,scan,one,or,more,java,package,names,throws,hibernate,exception,if,scanning,fails,for,any,reason;suppress,warnings,unchecked,public,local,session,factory,builder,scan,packages,string,packages,to,scan,throws,hibernate,exception,set,string,entity,class,names,new,tree,set,set,string,converter,class,names,new,tree,set,set,string,package,names,new,tree,set,try,for,string,pkg,packages,to,scan,string,pattern,resource,pattern,resolver,class,utils,convert,class,name,to,resource,path,pkg,resource,resources,this,resource,pattern,resolver,get,resources,pattern,metadata,reader,factory,reader,factory,new,caching,metadata,reader,factory,this,resource,pattern,resolver,for,resource,resource,resources,if,resource,is,readable,metadata,reader,reader,reader,factory,get,metadata,reader,resource,string,class,name,reader,get,class,metadata,get,class,name,if,matches,entity,type,filter,reader,reader,factory,entity,class,names,add,class,name,else,if,match,reader,reader,factory,converter,class,names,add,class,name,else,if,class,name,ends,with,package,names,add,class,name,substring,0,class,name,length,length,catch,ioexception,ex,throw,new,mapping,exception,failed,to,scan,classpath,for,unlisted,classes,ex,try,class,loader,cl,this,resource,pattern,resolver,get,class,loader,for,string,class,name,entity,class,names,add,annotated,class,cl,load,class,class,name,for,string,class,name,converter,class,names,add,attribute,converter,class,extends,attribute,converter,cl,load,class,class,name,for,string,package,name,package,names,add,package,package,name,catch,class,not,found,exception,ex,throw,new,mapping,exception,failed,to,load,annotated,classes,from,classpath,ex,return,this
LocalSessionFactoryBuilder -> @SuppressWarnings("unchecked") 	public LocalSessionFactoryBuilder scanPackages(String... packagesToScan) throws HibernateException;1470660485;Perform Spring-based scanning for entity classes, registering them_as annotated classes with this {@code Configuration}._@param packagesToScan one or more Java package names_@throws HibernateException if scanning fails for any reason;@SuppressWarnings("unchecked")_	public LocalSessionFactoryBuilder scanPackages(String... packagesToScan) throws HibernateException {_		Set<String> entityClassNames = new TreeSet<>()__		Set<String> converterClassNames = new TreeSet<>()__		Set<String> packageNames = new TreeSet<>()__		try {_			for (String pkg : packagesToScan) {_				String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +_						ClassUtils.convertClassNameToResourcePath(pkg) + RESOURCE_PATTERN__				Resource[] resources = this.resourcePatternResolver.getResources(pattern)__				MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)__				for (Resource resource : resources) {_					if (resource.isReadable()) {_						MetadataReader reader = readerFactory.getMetadataReader(resource)__						String className = reader.getClassMetadata().getClassName()__						if (matchesEntityTypeFilter(reader, readerFactory)) {_							entityClassNames.add(className)__						}_						else if (CONVERTER_TYPE_FILTER.match(reader, readerFactory)) {_							converterClassNames.add(className)__						}_						else if (className.endsWith(PACKAGE_INFO_SUFFIX)) {_							packageNames.add(className.substring(0, className.length() - PACKAGE_INFO_SUFFIX.length()))__						}_					}_				}_			}_		}_		catch (IOException ex) {_			throw new MappingException("Failed to scan classpath for unlisted classes", ex)__		}_		try {_			ClassLoader cl = this.resourcePatternResolver.getClassLoader()__			for (String className : entityClassNames) {_				addAnnotatedClass(cl.loadClass(className))__			}_			for (String className : converterClassNames) {_				addAttributeConverter((Class<? extends AttributeConverter<?, ?>>) cl.loadClass(className))__			}_			for (String packageName : packageNames) {_				addPackage(packageName)__			}_		}_		catch (ClassNotFoundException ex) {_			throw new MappingException("Failed to load annotated classes from classpath", ex)__		}_		return this__	};perform,spring,based,scanning,for,entity,classes,registering,them,as,annotated,classes,with,this,code,configuration,param,packages,to,scan,one,or,more,java,package,names,throws,hibernate,exception,if,scanning,fails,for,any,reason;suppress,warnings,unchecked,public,local,session,factory,builder,scan,packages,string,packages,to,scan,throws,hibernate,exception,set,string,entity,class,names,new,tree,set,set,string,converter,class,names,new,tree,set,set,string,package,names,new,tree,set,try,for,string,pkg,packages,to,scan,string,pattern,resource,pattern,resolver,class,utils,convert,class,name,to,resource,path,pkg,resource,resources,this,resource,pattern,resolver,get,resources,pattern,metadata,reader,factory,reader,factory,new,caching,metadata,reader,factory,this,resource,pattern,resolver,for,resource,resource,resources,if,resource,is,readable,metadata,reader,reader,reader,factory,get,metadata,reader,resource,string,class,name,reader,get,class,metadata,get,class,name,if,matches,entity,type,filter,reader,reader,factory,entity,class,names,add,class,name,else,if,match,reader,reader,factory,converter,class,names,add,class,name,else,if,class,name,ends,with,package,names,add,class,name,substring,0,class,name,length,length,catch,ioexception,ex,throw,new,mapping,exception,failed,to,scan,classpath,for,unlisted,classes,ex,try,class,loader,cl,this,resource,pattern,resolver,get,class,loader,for,string,class,name,entity,class,names,add,annotated,class,cl,load,class,class,name,for,string,class,name,converter,class,names,add,attribute,converter,class,extends,attribute,converter,cl,load,class,class,name,for,string,package,name,package,names,add,package,package,name,catch,class,not,found,exception,ex,throw,new,mapping,exception,failed,to,load,annotated,classes,from,classpath,ex,return,this
LocalSessionFactoryBuilder -> @SuppressWarnings("unchecked") 	public LocalSessionFactoryBuilder scanPackages(String... packagesToScan) throws HibernateException;1495868221;Perform Spring-based scanning for entity classes, registering them_as annotated classes with this {@code Configuration}._@param packagesToScan one or more Java package names_@throws HibernateException if scanning fails for any reason;@SuppressWarnings("unchecked")_	public LocalSessionFactoryBuilder scanPackages(String... packagesToScan) throws HibernateException {_		Set<String> entityClassNames = new TreeSet<>()__		Set<String> converterClassNames = new TreeSet<>()__		Set<String> packageNames = new TreeSet<>()__		try {_			for (String pkg : packagesToScan) {_				String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +_						ClassUtils.convertClassNameToResourcePath(pkg) + RESOURCE_PATTERN__				Resource[] resources = this.resourcePatternResolver.getResources(pattern)__				MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)__				for (Resource resource : resources) {_					if (resource.isReadable()) {_						MetadataReader reader = readerFactory.getMetadataReader(resource)__						String className = reader.getClassMetadata().getClassName()__						if (matchesEntityTypeFilter(reader, readerFactory)) {_							entityClassNames.add(className)__						}_						else if (CONVERTER_TYPE_FILTER.match(reader, readerFactory)) {_							converterClassNames.add(className)__						}_						else if (className.endsWith(PACKAGE_INFO_SUFFIX)) {_							packageNames.add(className.substring(0, className.length() - PACKAGE_INFO_SUFFIX.length()))__						}_					}_				}_			}_		}_		catch (IOException ex) {_			throw new MappingException("Failed to scan classpath for unlisted classes", ex)__		}_		try {_			ClassLoader cl = this.resourcePatternResolver.getClassLoader()__			for (String className : entityClassNames) {_				addAnnotatedClass(cl.loadClass(className))__			}_			for (String className : converterClassNames) {_				addAttributeConverter((Class<? extends AttributeConverter<?, ?>>) cl.loadClass(className))__			}_			for (String packageName : packageNames) {_				addPackage(packageName)__			}_		}_		catch (ClassNotFoundException ex) {_			throw new MappingException("Failed to load annotated classes from classpath", ex)__		}_		return this__	};perform,spring,based,scanning,for,entity,classes,registering,them,as,annotated,classes,with,this,code,configuration,param,packages,to,scan,one,or,more,java,package,names,throws,hibernate,exception,if,scanning,fails,for,any,reason;suppress,warnings,unchecked,public,local,session,factory,builder,scan,packages,string,packages,to,scan,throws,hibernate,exception,set,string,entity,class,names,new,tree,set,set,string,converter,class,names,new,tree,set,set,string,package,names,new,tree,set,try,for,string,pkg,packages,to,scan,string,pattern,resource,pattern,resolver,class,utils,convert,class,name,to,resource,path,pkg,resource,resources,this,resource,pattern,resolver,get,resources,pattern,metadata,reader,factory,reader,factory,new,caching,metadata,reader,factory,this,resource,pattern,resolver,for,resource,resource,resources,if,resource,is,readable,metadata,reader,reader,reader,factory,get,metadata,reader,resource,string,class,name,reader,get,class,metadata,get,class,name,if,matches,entity,type,filter,reader,reader,factory,entity,class,names,add,class,name,else,if,match,reader,reader,factory,converter,class,names,add,class,name,else,if,class,name,ends,with,package,names,add,class,name,substring,0,class,name,length,length,catch,ioexception,ex,throw,new,mapping,exception,failed,to,scan,classpath,for,unlisted,classes,ex,try,class,loader,cl,this,resource,pattern,resolver,get,class,loader,for,string,class,name,entity,class,names,add,annotated,class,cl,load,class,class,name,for,string,class,name,converter,class,names,add,attribute,converter,class,extends,attribute,converter,cl,load,class,class,name,for,string,package,name,package,names,add,package,package,name,catch,class,not,found,exception,ex,throw,new,mapping,exception,failed,to,load,annotated,classes,from,classpath,ex,return,this
LocalSessionFactoryBuilder -> @SuppressWarnings("unchecked") 	public LocalSessionFactoryBuilder scanPackages(String... packagesToScan) throws HibernateException;1496837955;Perform Spring-based scanning for entity classes, registering them_as annotated classes with this {@code Configuration}._@param packagesToScan one or more Java package names_@throws HibernateException if scanning fails for any reason;@SuppressWarnings("unchecked")_	public LocalSessionFactoryBuilder scanPackages(String... packagesToScan) throws HibernateException {_		Set<String> entityClassNames = new TreeSet<>()__		Set<String> converterClassNames = new TreeSet<>()__		Set<String> packageNames = new TreeSet<>()__		try {_			for (String pkg : packagesToScan) {_				String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +_						ClassUtils.convertClassNameToResourcePath(pkg) + RESOURCE_PATTERN__				Resource[] resources = this.resourcePatternResolver.getResources(pattern)__				MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)__				for (Resource resource : resources) {_					if (resource.isReadable()) {_						MetadataReader reader = readerFactory.getMetadataReader(resource)__						String className = reader.getClassMetadata().getClassName()__						if (matchesEntityTypeFilter(reader, readerFactory)) {_							entityClassNames.add(className)__						}_						else if (CONVERTER_TYPE_FILTER.match(reader, readerFactory)) {_							converterClassNames.add(className)__						}_						else if (className.endsWith(PACKAGE_INFO_SUFFIX)) {_							packageNames.add(className.substring(0, className.length() - PACKAGE_INFO_SUFFIX.length()))__						}_					}_				}_			}_		}_		catch (IOException ex) {_			throw new MappingException("Failed to scan classpath for unlisted classes", ex)__		}_		try {_			ClassLoader cl = this.resourcePatternResolver.getClassLoader()__			for (String className : entityClassNames) {_				addAnnotatedClass(ClassUtils.forName(className, cl))__			}_			for (String className : converterClassNames) {_				addAttributeConverter((Class<? extends AttributeConverter<?, ?>>) ClassUtils.forName(className, cl))__			}_			for (String packageName : packageNames) {_				addPackage(packageName)__			}_		}_		catch (ClassNotFoundException ex) {_			throw new MappingException("Failed to load annotated classes from classpath", ex)__		}_		return this__	};perform,spring,based,scanning,for,entity,classes,registering,them,as,annotated,classes,with,this,code,configuration,param,packages,to,scan,one,or,more,java,package,names,throws,hibernate,exception,if,scanning,fails,for,any,reason;suppress,warnings,unchecked,public,local,session,factory,builder,scan,packages,string,packages,to,scan,throws,hibernate,exception,set,string,entity,class,names,new,tree,set,set,string,converter,class,names,new,tree,set,set,string,package,names,new,tree,set,try,for,string,pkg,packages,to,scan,string,pattern,resource,pattern,resolver,class,utils,convert,class,name,to,resource,path,pkg,resource,resources,this,resource,pattern,resolver,get,resources,pattern,metadata,reader,factory,reader,factory,new,caching,metadata,reader,factory,this,resource,pattern,resolver,for,resource,resource,resources,if,resource,is,readable,metadata,reader,reader,reader,factory,get,metadata,reader,resource,string,class,name,reader,get,class,metadata,get,class,name,if,matches,entity,type,filter,reader,reader,factory,entity,class,names,add,class,name,else,if,match,reader,reader,factory,converter,class,names,add,class,name,else,if,class,name,ends,with,package,names,add,class,name,substring,0,class,name,length,length,catch,ioexception,ex,throw,new,mapping,exception,failed,to,scan,classpath,for,unlisted,classes,ex,try,class,loader,cl,this,resource,pattern,resolver,get,class,loader,for,string,class,name,entity,class,names,add,annotated,class,class,utils,for,name,class,name,cl,for,string,class,name,converter,class,names,add,attribute,converter,class,extends,attribute,converter,class,utils,for,name,class,name,cl,for,string,package,name,package,names,add,package,package,name,catch,class,not,found,exception,ex,throw,new,mapping,exception,failed,to,load,annotated,classes,from,classpath,ex,return,this
LocalSessionFactoryBuilder -> @SuppressWarnings("unchecked") 	public LocalSessionFactoryBuilder scanPackages(String... packagesToScan) throws HibernateException;1497341397;Perform Spring-based scanning for entity classes, registering them_as annotated classes with this {@code Configuration}._@param packagesToScan one or more Java package names_@throws HibernateException if scanning fails for any reason;@SuppressWarnings("unchecked")_	public LocalSessionFactoryBuilder scanPackages(String... packagesToScan) throws HibernateException {_		Set<String> entityClassNames = new TreeSet<>()__		Set<String> converterClassNames = new TreeSet<>()__		Set<String> packageNames = new TreeSet<>()__		try {_			for (String pkg : packagesToScan) {_				String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +_						ClassUtils.convertClassNameToResourcePath(pkg) + RESOURCE_PATTERN__				Resource[] resources = this.resourcePatternResolver.getResources(pattern)__				MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)__				for (Resource resource : resources) {_					if (resource.isReadable()) {_						MetadataReader reader = readerFactory.getMetadataReader(resource)__						String className = reader.getClassMetadata().getClassName()__						if (matchesEntityTypeFilter(reader, readerFactory)) {_							entityClassNames.add(className)__						}_						else if (CONVERTER_TYPE_FILTER.match(reader, readerFactory)) {_							converterClassNames.add(className)__						}_						else if (className.endsWith(PACKAGE_INFO_SUFFIX)) {_							packageNames.add(className.substring(0, className.length() - PACKAGE_INFO_SUFFIX.length()))__						}_					}_				}_			}_		}_		catch (IOException ex) {_			throw new MappingException("Failed to scan classpath for unlisted classes", ex)__		}_		try {_			ClassLoader cl = this.resourcePatternResolver.getClassLoader()__			for (String className : entityClassNames) {_				addAnnotatedClass(ClassUtils.forName(className, cl))__			}_			for (String className : converterClassNames) {_				addAttributeConverter((Class<? extends AttributeConverter<?, ?>>) ClassUtils.forName(className, cl))__			}_			for (String packageName : packageNames) {_				addPackage(packageName)__			}_		}_		catch (ClassNotFoundException ex) {_			throw new MappingException("Failed to load annotated classes from classpath", ex)__		}_		return this__	};perform,spring,based,scanning,for,entity,classes,registering,them,as,annotated,classes,with,this,code,configuration,param,packages,to,scan,one,or,more,java,package,names,throws,hibernate,exception,if,scanning,fails,for,any,reason;suppress,warnings,unchecked,public,local,session,factory,builder,scan,packages,string,packages,to,scan,throws,hibernate,exception,set,string,entity,class,names,new,tree,set,set,string,converter,class,names,new,tree,set,set,string,package,names,new,tree,set,try,for,string,pkg,packages,to,scan,string,pattern,resource,pattern,resolver,class,utils,convert,class,name,to,resource,path,pkg,resource,resources,this,resource,pattern,resolver,get,resources,pattern,metadata,reader,factory,reader,factory,new,caching,metadata,reader,factory,this,resource,pattern,resolver,for,resource,resource,resources,if,resource,is,readable,metadata,reader,reader,reader,factory,get,metadata,reader,resource,string,class,name,reader,get,class,metadata,get,class,name,if,matches,entity,type,filter,reader,reader,factory,entity,class,names,add,class,name,else,if,match,reader,reader,factory,converter,class,names,add,class,name,else,if,class,name,ends,with,package,names,add,class,name,substring,0,class,name,length,length,catch,ioexception,ex,throw,new,mapping,exception,failed,to,scan,classpath,for,unlisted,classes,ex,try,class,loader,cl,this,resource,pattern,resolver,get,class,loader,for,string,class,name,entity,class,names,add,annotated,class,class,utils,for,name,class,name,cl,for,string,class,name,converter,class,names,add,attribute,converter,class,extends,attribute,converter,class,utils,for,name,class,name,cl,for,string,package,name,package,names,add,package,package,name,catch,class,not,found,exception,ex,throw,new,mapping,exception,failed,to,load,annotated,classes,from,classpath,ex,return,this
LocalSessionFactoryBuilder -> @SuppressWarnings("unchecked") 	public LocalSessionFactoryBuilder scanPackages(String... packagesToScan) throws HibernateException;1498780456;Perform Spring-based scanning for entity classes, registering them_as annotated classes with this {@code Configuration}._@param packagesToScan one or more Java package names_@throws HibernateException if scanning fails for any reason;@SuppressWarnings("unchecked")_	public LocalSessionFactoryBuilder scanPackages(String... packagesToScan) throws HibernateException {_		Set<String> entityClassNames = new TreeSet<>()__		Set<String> converterClassNames = new TreeSet<>()__		Set<String> packageNames = new TreeSet<>()__		try {_			for (String pkg : packagesToScan) {_				String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +_						ClassUtils.convertClassNameToResourcePath(pkg) + RESOURCE_PATTERN__				Resource[] resources = this.resourcePatternResolver.getResources(pattern)__				MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)__				for (Resource resource : resources) {_					if (resource.isReadable()) {_						MetadataReader reader = readerFactory.getMetadataReader(resource)__						String className = reader.getClassMetadata().getClassName()__						if (matchesEntityTypeFilter(reader, readerFactory)) {_							entityClassNames.add(className)__						}_						else if (CONVERTER_TYPE_FILTER.match(reader, readerFactory)) {_							converterClassNames.add(className)__						}_						else if (className.endsWith(PACKAGE_INFO_SUFFIX)) {_							packageNames.add(className.substring(0, className.length() - PACKAGE_INFO_SUFFIX.length()))__						}_					}_				}_			}_		}_		catch (IOException ex) {_			throw new MappingException("Failed to scan classpath for unlisted classes", ex)__		}_		try {_			ClassLoader cl = this.resourcePatternResolver.getClassLoader()__			for (String className : entityClassNames) {_				addAnnotatedClass(ClassUtils.forName(className, cl))__			}_			for (String className : converterClassNames) {_				addAttributeConverter((Class<? extends AttributeConverter<?, ?>>) ClassUtils.forName(className, cl))__			}_			for (String packageName : packageNames) {_				addPackage(packageName)__			}_		}_		catch (ClassNotFoundException ex) {_			throw new MappingException("Failed to load annotated classes from classpath", ex)__		}_		return this__	};perform,spring,based,scanning,for,entity,classes,registering,them,as,annotated,classes,with,this,code,configuration,param,packages,to,scan,one,or,more,java,package,names,throws,hibernate,exception,if,scanning,fails,for,any,reason;suppress,warnings,unchecked,public,local,session,factory,builder,scan,packages,string,packages,to,scan,throws,hibernate,exception,set,string,entity,class,names,new,tree,set,set,string,converter,class,names,new,tree,set,set,string,package,names,new,tree,set,try,for,string,pkg,packages,to,scan,string,pattern,resource,pattern,resolver,class,utils,convert,class,name,to,resource,path,pkg,resource,resources,this,resource,pattern,resolver,get,resources,pattern,metadata,reader,factory,reader,factory,new,caching,metadata,reader,factory,this,resource,pattern,resolver,for,resource,resource,resources,if,resource,is,readable,metadata,reader,reader,reader,factory,get,metadata,reader,resource,string,class,name,reader,get,class,metadata,get,class,name,if,matches,entity,type,filter,reader,reader,factory,entity,class,names,add,class,name,else,if,match,reader,reader,factory,converter,class,names,add,class,name,else,if,class,name,ends,with,package,names,add,class,name,substring,0,class,name,length,length,catch,ioexception,ex,throw,new,mapping,exception,failed,to,scan,classpath,for,unlisted,classes,ex,try,class,loader,cl,this,resource,pattern,resolver,get,class,loader,for,string,class,name,entity,class,names,add,annotated,class,class,utils,for,name,class,name,cl,for,string,class,name,converter,class,names,add,attribute,converter,class,extends,attribute,converter,class,utils,for,name,class,name,cl,for,string,package,name,package,names,add,package,package,name,catch,class,not,found,exception,ex,throw,new,mapping,exception,failed,to,load,annotated,classes,from,classpath,ex,return,this
LocalSessionFactoryBuilder -> @SuppressWarnings("unchecked") 	public LocalSessionFactoryBuilder scanPackages(String... packagesToScan) throws HibernateException;1518264213;Perform Spring-based scanning for entity classes, registering them_as annotated classes with this {@code Configuration}._@param packagesToScan one or more Java package names_@throws HibernateException if scanning fails for any reason;@SuppressWarnings("unchecked")_	public LocalSessionFactoryBuilder scanPackages(String... packagesToScan) throws HibernateException {_		Set<String> entityClassNames = new TreeSet<>()__		Set<String> converterClassNames = new TreeSet<>()__		Set<String> packageNames = new TreeSet<>()__		try {_			for (String pkg : packagesToScan) {_				String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +_						ClassUtils.convertClassNameToResourcePath(pkg) + RESOURCE_PATTERN__				Resource[] resources = this.resourcePatternResolver.getResources(pattern)__				MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)__				for (Resource resource : resources) {_					if (resource.isReadable()) {_						MetadataReader reader = readerFactory.getMetadataReader(resource)__						String className = reader.getClassMetadata().getClassName()__						if (matchesEntityTypeFilter(reader, readerFactory)) {_							entityClassNames.add(className)__						}_						else if (CONVERTER_TYPE_FILTER.match(reader, readerFactory)) {_							converterClassNames.add(className)__						}_						else if (className.endsWith(PACKAGE_INFO_SUFFIX)) {_							packageNames.add(className.substring(0, className.length() - PACKAGE_INFO_SUFFIX.length()))__						}_					}_				}_			}_		}_		catch (IOException ex) {_			throw new MappingException("Failed to scan classpath for unlisted classes", ex)__		}_		try {_			ClassLoader cl = this.resourcePatternResolver.getClassLoader()__			for (String className : entityClassNames) {_				addAnnotatedClass(ClassUtils.forName(className, cl))__			}_			for (String className : converterClassNames) {_				addAttributeConverter((Class<? extends AttributeConverter<?, ?>>) ClassUtils.forName(className, cl))__			}_			for (String packageName : packageNames) {_				addPackage(packageName)__			}_		}_		catch (ClassNotFoundException ex) {_			throw new MappingException("Failed to load annotated classes from classpath", ex)__		}_		return this__	};perform,spring,based,scanning,for,entity,classes,registering,them,as,annotated,classes,with,this,code,configuration,param,packages,to,scan,one,or,more,java,package,names,throws,hibernate,exception,if,scanning,fails,for,any,reason;suppress,warnings,unchecked,public,local,session,factory,builder,scan,packages,string,packages,to,scan,throws,hibernate,exception,set,string,entity,class,names,new,tree,set,set,string,converter,class,names,new,tree,set,set,string,package,names,new,tree,set,try,for,string,pkg,packages,to,scan,string,pattern,resource,pattern,resolver,class,utils,convert,class,name,to,resource,path,pkg,resource,resources,this,resource,pattern,resolver,get,resources,pattern,metadata,reader,factory,reader,factory,new,caching,metadata,reader,factory,this,resource,pattern,resolver,for,resource,resource,resources,if,resource,is,readable,metadata,reader,reader,reader,factory,get,metadata,reader,resource,string,class,name,reader,get,class,metadata,get,class,name,if,matches,entity,type,filter,reader,reader,factory,entity,class,names,add,class,name,else,if,match,reader,reader,factory,converter,class,names,add,class,name,else,if,class,name,ends,with,package,names,add,class,name,substring,0,class,name,length,length,catch,ioexception,ex,throw,new,mapping,exception,failed,to,scan,classpath,for,unlisted,classes,ex,try,class,loader,cl,this,resource,pattern,resolver,get,class,loader,for,string,class,name,entity,class,names,add,annotated,class,class,utils,for,name,class,name,cl,for,string,class,name,converter,class,names,add,attribute,converter,class,extends,attribute,converter,class,utils,for,name,class,name,cl,for,string,package,name,package,names,add,package,package,name,catch,class,not,found,exception,ex,throw,new,mapping,exception,failed,to,load,annotated,classes,from,classpath,ex,return,this
LocalSessionFactoryBuilder -> @SuppressWarnings("unchecked") 	public LocalSessionFactoryBuilder scanPackages(String... packagesToScan) throws HibernateException;1519860149;Perform Spring-based scanning for entity classes, registering them_as annotated classes with this {@code Configuration}._@param packagesToScan one or more Java package names_@throws HibernateException if scanning fails for any reason;@SuppressWarnings("unchecked")_	public LocalSessionFactoryBuilder scanPackages(String... packagesToScan) throws HibernateException {_		Set<String> entityClassNames = new TreeSet<>()__		Set<String> converterClassNames = new TreeSet<>()__		Set<String> packageNames = new TreeSet<>()__		try {_			for (String pkg : packagesToScan) {_				String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +_						ClassUtils.convertClassNameToResourcePath(pkg) + RESOURCE_PATTERN__				Resource[] resources = this.resourcePatternResolver.getResources(pattern)__				MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)__				for (Resource resource : resources) {_					if (resource.isReadable()) {_						MetadataReader reader = readerFactory.getMetadataReader(resource)__						String className = reader.getClassMetadata().getClassName()__						if (matchesEntityTypeFilter(reader, readerFactory)) {_							entityClassNames.add(className)__						}_						else if (CONVERTER_TYPE_FILTER.match(reader, readerFactory)) {_							converterClassNames.add(className)__						}_						else if (className.endsWith(PACKAGE_INFO_SUFFIX)) {_							packageNames.add(className.substring(0, className.length() - PACKAGE_INFO_SUFFIX.length()))__						}_					}_				}_			}_		}_		catch (IOException ex) {_			throw new MappingException("Failed to scan classpath for unlisted classes", ex)__		}_		try {_			ClassLoader cl = this.resourcePatternResolver.getClassLoader()__			for (String className : entityClassNames) {_				addAnnotatedClass(ClassUtils.forName(className, cl))__			}_			for (String className : converterClassNames) {_				addAttributeConverter((Class<? extends AttributeConverter<?, ?>>) ClassUtils.forName(className, cl))__			}_			for (String packageName : packageNames) {_				addPackage(packageName)__			}_		}_		catch (ClassNotFoundException ex) {_			throw new MappingException("Failed to load annotated classes from classpath", ex)__		}_		return this__	};perform,spring,based,scanning,for,entity,classes,registering,them,as,annotated,classes,with,this,code,configuration,param,packages,to,scan,one,or,more,java,package,names,throws,hibernate,exception,if,scanning,fails,for,any,reason;suppress,warnings,unchecked,public,local,session,factory,builder,scan,packages,string,packages,to,scan,throws,hibernate,exception,set,string,entity,class,names,new,tree,set,set,string,converter,class,names,new,tree,set,set,string,package,names,new,tree,set,try,for,string,pkg,packages,to,scan,string,pattern,resource,pattern,resolver,class,utils,convert,class,name,to,resource,path,pkg,resource,resources,this,resource,pattern,resolver,get,resources,pattern,metadata,reader,factory,reader,factory,new,caching,metadata,reader,factory,this,resource,pattern,resolver,for,resource,resource,resources,if,resource,is,readable,metadata,reader,reader,reader,factory,get,metadata,reader,resource,string,class,name,reader,get,class,metadata,get,class,name,if,matches,entity,type,filter,reader,reader,factory,entity,class,names,add,class,name,else,if,match,reader,reader,factory,converter,class,names,add,class,name,else,if,class,name,ends,with,package,names,add,class,name,substring,0,class,name,length,length,catch,ioexception,ex,throw,new,mapping,exception,failed,to,scan,classpath,for,unlisted,classes,ex,try,class,loader,cl,this,resource,pattern,resolver,get,class,loader,for,string,class,name,entity,class,names,add,annotated,class,class,utils,for,name,class,name,cl,for,string,class,name,converter,class,names,add,attribute,converter,class,extends,attribute,converter,class,utils,for,name,class,name,cl,for,string,package,name,package,names,add,package,package,name,catch,class,not,found,exception,ex,throw,new,mapping,exception,failed,to,load,annotated,classes,from,classpath,ex,return,this
LocalSessionFactoryBuilder -> @SuppressWarnings("unchecked") 	public LocalSessionFactoryBuilder scanPackages(String... packagesToScan) throws HibernateException;1520373974;Perform Spring-based scanning for entity classes, registering them_as annotated classes with this {@code Configuration}._@param packagesToScan one or more Java package names_@throws HibernateException if scanning fails for any reason;@SuppressWarnings("unchecked")_	public LocalSessionFactoryBuilder scanPackages(String... packagesToScan) throws HibernateException {_		Set<String> entityClassNames = new TreeSet<>()__		Set<String> converterClassNames = new TreeSet<>()__		Set<String> packageNames = new TreeSet<>()__		try {_			for (String pkg : packagesToScan) {_				String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +_						ClassUtils.convertClassNameToResourcePath(pkg) + RESOURCE_PATTERN__				Resource[] resources = this.resourcePatternResolver.getResources(pattern)__				MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)__				for (Resource resource : resources) {_					if (resource.isReadable()) {_						MetadataReader reader = readerFactory.getMetadataReader(resource)__						String className = reader.getClassMetadata().getClassName()__						if (matchesEntityTypeFilter(reader, readerFactory)) {_							entityClassNames.add(className)__						}_						else if (CONVERTER_TYPE_FILTER.match(reader, readerFactory)) {_							converterClassNames.add(className)__						}_						else if (className.endsWith(PACKAGE_INFO_SUFFIX)) {_							packageNames.add(className.substring(0, className.length() - PACKAGE_INFO_SUFFIX.length()))__						}_					}_				}_			}_		}_		catch (IOException ex) {_			throw new MappingException("Failed to scan classpath for unlisted classes", ex)__		}_		try {_			ClassLoader cl = this.resourcePatternResolver.getClassLoader()__			for (String className : entityClassNames) {_				addAnnotatedClass(ClassUtils.forName(className, cl))__			}_			for (String className : converterClassNames) {_				addAttributeConverter((Class<? extends AttributeConverter<?, ?>>) ClassUtils.forName(className, cl))__			}_			for (String packageName : packageNames) {_				addPackage(packageName)__			}_		}_		catch (ClassNotFoundException ex) {_			throw new MappingException("Failed to load annotated classes from classpath", ex)__		}_		return this__	};perform,spring,based,scanning,for,entity,classes,registering,them,as,annotated,classes,with,this,code,configuration,param,packages,to,scan,one,or,more,java,package,names,throws,hibernate,exception,if,scanning,fails,for,any,reason;suppress,warnings,unchecked,public,local,session,factory,builder,scan,packages,string,packages,to,scan,throws,hibernate,exception,set,string,entity,class,names,new,tree,set,set,string,converter,class,names,new,tree,set,set,string,package,names,new,tree,set,try,for,string,pkg,packages,to,scan,string,pattern,resource,pattern,resolver,class,utils,convert,class,name,to,resource,path,pkg,resource,resources,this,resource,pattern,resolver,get,resources,pattern,metadata,reader,factory,reader,factory,new,caching,metadata,reader,factory,this,resource,pattern,resolver,for,resource,resource,resources,if,resource,is,readable,metadata,reader,reader,reader,factory,get,metadata,reader,resource,string,class,name,reader,get,class,metadata,get,class,name,if,matches,entity,type,filter,reader,reader,factory,entity,class,names,add,class,name,else,if,match,reader,reader,factory,converter,class,names,add,class,name,else,if,class,name,ends,with,package,names,add,class,name,substring,0,class,name,length,length,catch,ioexception,ex,throw,new,mapping,exception,failed,to,scan,classpath,for,unlisted,classes,ex,try,class,loader,cl,this,resource,pattern,resolver,get,class,loader,for,string,class,name,entity,class,names,add,annotated,class,class,utils,for,name,class,name,cl,for,string,class,name,converter,class,names,add,attribute,converter,class,extends,attribute,converter,class,utils,for,name,class,name,cl,for,string,package,name,package,names,add,package,package,name,catch,class,not,found,exception,ex,throw,new,mapping,exception,failed,to,load,annotated,classes,from,classpath,ex,return,this
LocalSessionFactoryBuilder -> @SuppressWarnings("unchecked") 	public LocalSessionFactoryBuilder scanPackages(String... packagesToScan) throws HibernateException;1530188116;Perform Spring-based scanning for entity classes, registering them_as annotated classes with this {@code Configuration}._@param packagesToScan one or more Java package names_@throws HibernateException if scanning fails for any reason;@SuppressWarnings("unchecked")_	public LocalSessionFactoryBuilder scanPackages(String... packagesToScan) throws HibernateException {_		Set<String> entityClassNames = new TreeSet<>()__		Set<String> converterClassNames = new TreeSet<>()__		Set<String> packageNames = new TreeSet<>()__		try {_			for (String pkg : packagesToScan) {_				String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +_						ClassUtils.convertClassNameToResourcePath(pkg) + RESOURCE_PATTERN__				Resource[] resources = this.resourcePatternResolver.getResources(pattern)__				MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)__				for (Resource resource : resources) {_					if (resource.isReadable()) {_						MetadataReader reader = readerFactory.getMetadataReader(resource)__						String className = reader.getClassMetadata().getClassName()__						if (matchesEntityTypeFilter(reader, readerFactory)) {_							entityClassNames.add(className)__						}_						else if (CONVERTER_TYPE_FILTER.match(reader, readerFactory)) {_							converterClassNames.add(className)__						}_						else if (className.endsWith(PACKAGE_INFO_SUFFIX)) {_							packageNames.add(className.substring(0, className.length() - PACKAGE_INFO_SUFFIX.length()))__						}_					}_				}_			}_		}_		catch (IOException ex) {_			throw new MappingException("Failed to scan classpath for unlisted classes", ex)__		}_		try {_			ClassLoader cl = this.resourcePatternResolver.getClassLoader()__			for (String className : entityClassNames) {_				addAnnotatedClass(ClassUtils.forName(className, cl))__			}_			for (String className : converterClassNames) {_				addAttributeConverter((Class<? extends AttributeConverter<?, ?>>) ClassUtils.forName(className, cl))__			}_			for (String packageName : packageNames) {_				addPackage(packageName)__			}_		}_		catch (ClassNotFoundException ex) {_			throw new MappingException("Failed to load annotated classes from classpath", ex)__		}_		return this__	};perform,spring,based,scanning,for,entity,classes,registering,them,as,annotated,classes,with,this,code,configuration,param,packages,to,scan,one,or,more,java,package,names,throws,hibernate,exception,if,scanning,fails,for,any,reason;suppress,warnings,unchecked,public,local,session,factory,builder,scan,packages,string,packages,to,scan,throws,hibernate,exception,set,string,entity,class,names,new,tree,set,set,string,converter,class,names,new,tree,set,set,string,package,names,new,tree,set,try,for,string,pkg,packages,to,scan,string,pattern,resource,pattern,resolver,class,utils,convert,class,name,to,resource,path,pkg,resource,resources,this,resource,pattern,resolver,get,resources,pattern,metadata,reader,factory,reader,factory,new,caching,metadata,reader,factory,this,resource,pattern,resolver,for,resource,resource,resources,if,resource,is,readable,metadata,reader,reader,reader,factory,get,metadata,reader,resource,string,class,name,reader,get,class,metadata,get,class,name,if,matches,entity,type,filter,reader,reader,factory,entity,class,names,add,class,name,else,if,match,reader,reader,factory,converter,class,names,add,class,name,else,if,class,name,ends,with,package,names,add,class,name,substring,0,class,name,length,length,catch,ioexception,ex,throw,new,mapping,exception,failed,to,scan,classpath,for,unlisted,classes,ex,try,class,loader,cl,this,resource,pattern,resolver,get,class,loader,for,string,class,name,entity,class,names,add,annotated,class,class,utils,for,name,class,name,cl,for,string,class,name,converter,class,names,add,attribute,converter,class,extends,attribute,converter,class,utils,for,name,class,name,cl,for,string,package,name,package,names,add,package,package,name,catch,class,not,found,exception,ex,throw,new,mapping,exception,failed,to,load,annotated,classes,from,classpath,ex,return,this
LocalSessionFactoryBuilder -> @SuppressWarnings("unchecked") 	public LocalSessionFactoryBuilder scanPackages(String... packagesToScan) throws HibernateException;1530724999;Perform Spring-based scanning for entity classes, registering them_as annotated classes with this {@code Configuration}._@param packagesToScan one or more Java package names_@throws HibernateException if scanning fails for any reason;@SuppressWarnings("unchecked")_	public LocalSessionFactoryBuilder scanPackages(String... packagesToScan) throws HibernateException {_		Set<String> entityClassNames = new TreeSet<>()__		Set<String> converterClassNames = new TreeSet<>()__		Set<String> packageNames = new TreeSet<>()__		try {_			for (String pkg : packagesToScan) {_				String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +_						ClassUtils.convertClassNameToResourcePath(pkg) + RESOURCE_PATTERN__				Resource[] resources = this.resourcePatternResolver.getResources(pattern)__				MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)__				for (Resource resource : resources) {_					if (resource.isReadable()) {_						MetadataReader reader = readerFactory.getMetadataReader(resource)__						String className = reader.getClassMetadata().getClassName()__						if (matchesEntityTypeFilter(reader, readerFactory)) {_							entityClassNames.add(className)__						}_						else if (CONVERTER_TYPE_FILTER.match(reader, readerFactory)) {_							converterClassNames.add(className)__						}_						else if (className.endsWith(PACKAGE_INFO_SUFFIX)) {_							packageNames.add(className.substring(0, className.length() - PACKAGE_INFO_SUFFIX.length()))__						}_					}_				}_			}_		}_		catch (IOException ex) {_			throw new MappingException("Failed to scan classpath for unlisted classes", ex)__		}_		try {_			ClassLoader cl = this.resourcePatternResolver.getClassLoader()__			for (String className : entityClassNames) {_				addAnnotatedClass(ClassUtils.forName(className, cl))__			}_			for (String className : converterClassNames) {_				addAttributeConverter((Class<? extends AttributeConverter<?, ?>>) ClassUtils.forName(className, cl))__			}_			for (String packageName : packageNames) {_				addPackage(packageName)__			}_		}_		catch (ClassNotFoundException ex) {_			throw new MappingException("Failed to load annotated classes from classpath", ex)__		}_		return this__	};perform,spring,based,scanning,for,entity,classes,registering,them,as,annotated,classes,with,this,code,configuration,param,packages,to,scan,one,or,more,java,package,names,throws,hibernate,exception,if,scanning,fails,for,any,reason;suppress,warnings,unchecked,public,local,session,factory,builder,scan,packages,string,packages,to,scan,throws,hibernate,exception,set,string,entity,class,names,new,tree,set,set,string,converter,class,names,new,tree,set,set,string,package,names,new,tree,set,try,for,string,pkg,packages,to,scan,string,pattern,resource,pattern,resolver,class,utils,convert,class,name,to,resource,path,pkg,resource,resources,this,resource,pattern,resolver,get,resources,pattern,metadata,reader,factory,reader,factory,new,caching,metadata,reader,factory,this,resource,pattern,resolver,for,resource,resource,resources,if,resource,is,readable,metadata,reader,reader,reader,factory,get,metadata,reader,resource,string,class,name,reader,get,class,metadata,get,class,name,if,matches,entity,type,filter,reader,reader,factory,entity,class,names,add,class,name,else,if,match,reader,reader,factory,converter,class,names,add,class,name,else,if,class,name,ends,with,package,names,add,class,name,substring,0,class,name,length,length,catch,ioexception,ex,throw,new,mapping,exception,failed,to,scan,classpath,for,unlisted,classes,ex,try,class,loader,cl,this,resource,pattern,resolver,get,class,loader,for,string,class,name,entity,class,names,add,annotated,class,class,utils,for,name,class,name,cl,for,string,class,name,converter,class,names,add,attribute,converter,class,extends,attribute,converter,class,utils,for,name,class,name,cl,for,string,package,name,package,names,add,package,package,name,catch,class,not,found,exception,ex,throw,new,mapping,exception,failed,to,load,annotated,classes,from,classpath,ex,return,this
LocalSessionFactoryBuilder -> @SuppressWarnings("unchecked") 	public LocalSessionFactoryBuilder scanPackages(String... packagesToScan) throws HibernateException;1530802115;Perform Spring-based scanning for entity classes, registering them_as annotated classes with this {@code Configuration}._@param packagesToScan one or more Java package names_@throws HibernateException if scanning fails for any reason;@SuppressWarnings("unchecked")_	public LocalSessionFactoryBuilder scanPackages(String... packagesToScan) throws HibernateException {_		Set<String> entityClassNames = new TreeSet<>()__		Set<String> converterClassNames = new TreeSet<>()__		Set<String> packageNames = new TreeSet<>()__		try {_			for (String pkg : packagesToScan) {_				String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +_						ClassUtils.convertClassNameToResourcePath(pkg) + RESOURCE_PATTERN__				Resource[] resources = this.resourcePatternResolver.getResources(pattern)__				MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)__				for (Resource resource : resources) {_					if (resource.isReadable()) {_						MetadataReader reader = readerFactory.getMetadataReader(resource)__						String className = reader.getClassMetadata().getClassName()__						if (matchesEntityTypeFilter(reader, readerFactory)) {_							entityClassNames.add(className)__						}_						else if (CONVERTER_TYPE_FILTER.match(reader, readerFactory)) {_							converterClassNames.add(className)__						}_						else if (className.endsWith(PACKAGE_INFO_SUFFIX)) {_							packageNames.add(className.substring(0, className.length() - PACKAGE_INFO_SUFFIX.length()))__						}_					}_				}_			}_		}_		catch (IOException ex) {_			throw new MappingException("Failed to scan classpath for unlisted classes", ex)__		}_		try {_			ClassLoader cl = this.resourcePatternResolver.getClassLoader()__			for (String className : entityClassNames) {_				addAnnotatedClass(ClassUtils.forName(className, cl))__			}_			for (String className : converterClassNames) {_				addAttributeConverter((Class<? extends AttributeConverter<?, ?>>) ClassUtils.forName(className, cl))__			}_			for (String packageName : packageNames) {_				addPackage(packageName)__			}_		}_		catch (ClassNotFoundException ex) {_			throw new MappingException("Failed to load annotated classes from classpath", ex)__		}_		return this__	};perform,spring,based,scanning,for,entity,classes,registering,them,as,annotated,classes,with,this,code,configuration,param,packages,to,scan,one,or,more,java,package,names,throws,hibernate,exception,if,scanning,fails,for,any,reason;suppress,warnings,unchecked,public,local,session,factory,builder,scan,packages,string,packages,to,scan,throws,hibernate,exception,set,string,entity,class,names,new,tree,set,set,string,converter,class,names,new,tree,set,set,string,package,names,new,tree,set,try,for,string,pkg,packages,to,scan,string,pattern,resource,pattern,resolver,class,utils,convert,class,name,to,resource,path,pkg,resource,resources,this,resource,pattern,resolver,get,resources,pattern,metadata,reader,factory,reader,factory,new,caching,metadata,reader,factory,this,resource,pattern,resolver,for,resource,resource,resources,if,resource,is,readable,metadata,reader,reader,reader,factory,get,metadata,reader,resource,string,class,name,reader,get,class,metadata,get,class,name,if,matches,entity,type,filter,reader,reader,factory,entity,class,names,add,class,name,else,if,match,reader,reader,factory,converter,class,names,add,class,name,else,if,class,name,ends,with,package,names,add,class,name,substring,0,class,name,length,length,catch,ioexception,ex,throw,new,mapping,exception,failed,to,scan,classpath,for,unlisted,classes,ex,try,class,loader,cl,this,resource,pattern,resolver,get,class,loader,for,string,class,name,entity,class,names,add,annotated,class,class,utils,for,name,class,name,cl,for,string,class,name,converter,class,names,add,attribute,converter,class,extends,attribute,converter,class,utils,for,name,class,name,cl,for,string,package,name,package,names,add,package,package,name,catch,class,not,found,exception,ex,throw,new,mapping,exception,failed,to,load,annotated,classes,from,classpath,ex,return,this
LocalSessionFactoryBuilder -> @SuppressWarnings("unchecked") 	public LocalSessionFactoryBuilder scanPackages(String... packagesToScan) throws HibernateException;1531739026;Perform Spring-based scanning for entity classes, registering them_as annotated classes with this {@code Configuration}._@param packagesToScan one or more Java package names_@throws HibernateException if scanning fails for any reason;@SuppressWarnings("unchecked")_	public LocalSessionFactoryBuilder scanPackages(String... packagesToScan) throws HibernateException {_		Set<String> entityClassNames = new TreeSet<>()__		Set<String> converterClassNames = new TreeSet<>()__		Set<String> packageNames = new TreeSet<>()__		try {_			for (String pkg : packagesToScan) {_				String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +_						ClassUtils.convertClassNameToResourcePath(pkg) + RESOURCE_PATTERN__				Resource[] resources = this.resourcePatternResolver.getResources(pattern)__				MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)__				for (Resource resource : resources) {_					if (resource.isReadable()) {_						MetadataReader reader = readerFactory.getMetadataReader(resource)__						String className = reader.getClassMetadata().getClassName()__						if (matchesEntityTypeFilter(reader, readerFactory)) {_							entityClassNames.add(className)__						}_						else if (CONVERTER_TYPE_FILTER.match(reader, readerFactory)) {_							converterClassNames.add(className)__						}_						else if (className.endsWith(PACKAGE_INFO_SUFFIX)) {_							packageNames.add(className.substring(0, className.length() - PACKAGE_INFO_SUFFIX.length()))__						}_					}_				}_			}_		}_		catch (IOException ex) {_			throw new MappingException("Failed to scan classpath for unlisted classes", ex)__		}_		try {_			ClassLoader cl = this.resourcePatternResolver.getClassLoader()__			for (String className : entityClassNames) {_				addAnnotatedClass(ClassUtils.forName(className, cl))__			}_			for (String className : converterClassNames) {_				addAttributeConverter((Class<? extends AttributeConverter<?, ?>>) ClassUtils.forName(className, cl))__			}_			for (String packageName : packageNames) {_				addPackage(packageName)__			}_		}_		catch (ClassNotFoundException ex) {_			throw new MappingException("Failed to load annotated classes from classpath", ex)__		}_		return this__	};perform,spring,based,scanning,for,entity,classes,registering,them,as,annotated,classes,with,this,code,configuration,param,packages,to,scan,one,or,more,java,package,names,throws,hibernate,exception,if,scanning,fails,for,any,reason;suppress,warnings,unchecked,public,local,session,factory,builder,scan,packages,string,packages,to,scan,throws,hibernate,exception,set,string,entity,class,names,new,tree,set,set,string,converter,class,names,new,tree,set,set,string,package,names,new,tree,set,try,for,string,pkg,packages,to,scan,string,pattern,resource,pattern,resolver,class,utils,convert,class,name,to,resource,path,pkg,resource,resources,this,resource,pattern,resolver,get,resources,pattern,metadata,reader,factory,reader,factory,new,caching,metadata,reader,factory,this,resource,pattern,resolver,for,resource,resource,resources,if,resource,is,readable,metadata,reader,reader,reader,factory,get,metadata,reader,resource,string,class,name,reader,get,class,metadata,get,class,name,if,matches,entity,type,filter,reader,reader,factory,entity,class,names,add,class,name,else,if,match,reader,reader,factory,converter,class,names,add,class,name,else,if,class,name,ends,with,package,names,add,class,name,substring,0,class,name,length,length,catch,ioexception,ex,throw,new,mapping,exception,failed,to,scan,classpath,for,unlisted,classes,ex,try,class,loader,cl,this,resource,pattern,resolver,get,class,loader,for,string,class,name,entity,class,names,add,annotated,class,class,utils,for,name,class,name,cl,for,string,class,name,converter,class,names,add,attribute,converter,class,extends,attribute,converter,class,utils,for,name,class,name,cl,for,string,package,name,package,names,add,package,package,name,catch,class,not,found,exception,ex,throw,new,mapping,exception,failed,to,load,annotated,classes,from,classpath,ex,return,this
LocalSessionFactoryBuilder -> @Override 	public void setCurrentTenantIdentifierResolver(CurrentTenantIdentifierResolver currentTenantIdentifierResolver);1468941907;Overridden to reliably pass a {@link CurrentTenantIdentifierResolver} to the SessionFactory._@since 4.3.2_@see AvailableSettings#MULTI_TENANT_IDENTIFIER_RESOLVER;@Override_	public void setCurrentTenantIdentifierResolver(CurrentTenantIdentifierResolver currentTenantIdentifierResolver) {_		getProperties().put(AvailableSettings.MULTI_TENANT_IDENTIFIER_RESOLVER, currentTenantIdentifierResolver)__		super.setCurrentTenantIdentifierResolver(currentTenantIdentifierResolver)__	};overridden,to,reliably,pass,a,link,current,tenant,identifier,resolver,to,the,session,factory,since,4,3,2,see,available,settings;override,public,void,set,current,tenant,identifier,resolver,current,tenant,identifier,resolver,current,tenant,identifier,resolver,get,properties,put,available,settings,current,tenant,identifier,resolver,super,set,current,tenant,identifier,resolver,current,tenant,identifier,resolver
LocalSessionFactoryBuilder -> @Override 	public void setCurrentTenantIdentifierResolver(CurrentTenantIdentifierResolver currentTenantIdentifierResolver);1470272834;Overridden to reliably pass a {@link CurrentTenantIdentifierResolver} to the SessionFactory._@since 4.3.2_@see AvailableSettings#MULTI_TENANT_IDENTIFIER_RESOLVER;@Override_	public void setCurrentTenantIdentifierResolver(CurrentTenantIdentifierResolver currentTenantIdentifierResolver) {_		getProperties().put(AvailableSettings.MULTI_TENANT_IDENTIFIER_RESOLVER, currentTenantIdentifierResolver)__		super.setCurrentTenantIdentifierResolver(currentTenantIdentifierResolver)__	};overridden,to,reliably,pass,a,link,current,tenant,identifier,resolver,to,the,session,factory,since,4,3,2,see,available,settings;override,public,void,set,current,tenant,identifier,resolver,current,tenant,identifier,resolver,current,tenant,identifier,resolver,get,properties,put,available,settings,current,tenant,identifier,resolver,super,set,current,tenant,identifier,resolver,current,tenant,identifier,resolver
LocalSessionFactoryBuilder -> @Override 	public void setCurrentTenantIdentifierResolver(CurrentTenantIdentifierResolver currentTenantIdentifierResolver);1470660485;Overridden to reliably pass a {@link CurrentTenantIdentifierResolver} to the SessionFactory._@since 4.3.2_@see AvailableSettings#MULTI_TENANT_IDENTIFIER_RESOLVER;@Override_	public void setCurrentTenantIdentifierResolver(CurrentTenantIdentifierResolver currentTenantIdentifierResolver) {_		getProperties().put(AvailableSettings.MULTI_TENANT_IDENTIFIER_RESOLVER, currentTenantIdentifierResolver)__		super.setCurrentTenantIdentifierResolver(currentTenantIdentifierResolver)__	};overridden,to,reliably,pass,a,link,current,tenant,identifier,resolver,to,the,session,factory,since,4,3,2,see,available,settings;override,public,void,set,current,tenant,identifier,resolver,current,tenant,identifier,resolver,current,tenant,identifier,resolver,get,properties,put,available,settings,current,tenant,identifier,resolver,super,set,current,tenant,identifier,resolver,current,tenant,identifier,resolver
LocalSessionFactoryBuilder -> @Override 	public void setCurrentTenantIdentifierResolver(CurrentTenantIdentifierResolver currentTenantIdentifierResolver);1495868221;Overridden to reliably pass a {@link CurrentTenantIdentifierResolver} to the SessionFactory._@since 4.3.2_@see AvailableSettings#MULTI_TENANT_IDENTIFIER_RESOLVER;@Override_	public void setCurrentTenantIdentifierResolver(CurrentTenantIdentifierResolver currentTenantIdentifierResolver) {_		getProperties().put(AvailableSettings.MULTI_TENANT_IDENTIFIER_RESOLVER, currentTenantIdentifierResolver)__		super.setCurrentTenantIdentifierResolver(currentTenantIdentifierResolver)__	};overridden,to,reliably,pass,a,link,current,tenant,identifier,resolver,to,the,session,factory,since,4,3,2,see,available,settings;override,public,void,set,current,tenant,identifier,resolver,current,tenant,identifier,resolver,current,tenant,identifier,resolver,get,properties,put,available,settings,current,tenant,identifier,resolver,super,set,current,tenant,identifier,resolver,current,tenant,identifier,resolver
LocalSessionFactoryBuilder -> @Override 	public void setCurrentTenantIdentifierResolver(CurrentTenantIdentifierResolver currentTenantIdentifierResolver);1496837955;Overridden to reliably pass a {@link CurrentTenantIdentifierResolver} to the SessionFactory._@since 4.3.2_@see AvailableSettings#MULTI_TENANT_IDENTIFIER_RESOLVER;@Override_	public void setCurrentTenantIdentifierResolver(CurrentTenantIdentifierResolver currentTenantIdentifierResolver) {_		getProperties().put(AvailableSettings.MULTI_TENANT_IDENTIFIER_RESOLVER, currentTenantIdentifierResolver)__		super.setCurrentTenantIdentifierResolver(currentTenantIdentifierResolver)__	};overridden,to,reliably,pass,a,link,current,tenant,identifier,resolver,to,the,session,factory,since,4,3,2,see,available,settings;override,public,void,set,current,tenant,identifier,resolver,current,tenant,identifier,resolver,current,tenant,identifier,resolver,get,properties,put,available,settings,current,tenant,identifier,resolver,super,set,current,tenant,identifier,resolver,current,tenant,identifier,resolver
LocalSessionFactoryBuilder -> @Override 	public void setCurrentTenantIdentifierResolver(CurrentTenantIdentifierResolver currentTenantIdentifierResolver);1497341397;Overridden to reliably pass a {@link CurrentTenantIdentifierResolver} to the SessionFactory._@since 4.3.2_@see AvailableSettings#MULTI_TENANT_IDENTIFIER_RESOLVER;@Override_	public void setCurrentTenantIdentifierResolver(CurrentTenantIdentifierResolver currentTenantIdentifierResolver) {_		getProperties().put(AvailableSettings.MULTI_TENANT_IDENTIFIER_RESOLVER, currentTenantIdentifierResolver)__		super.setCurrentTenantIdentifierResolver(currentTenantIdentifierResolver)__	};overridden,to,reliably,pass,a,link,current,tenant,identifier,resolver,to,the,session,factory,since,4,3,2,see,available,settings;override,public,void,set,current,tenant,identifier,resolver,current,tenant,identifier,resolver,current,tenant,identifier,resolver,get,properties,put,available,settings,current,tenant,identifier,resolver,super,set,current,tenant,identifier,resolver,current,tenant,identifier,resolver
LocalSessionFactoryBuilder -> @Override 	public void setCurrentTenantIdentifierResolver(CurrentTenantIdentifierResolver currentTenantIdentifierResolver);1498780456;Overridden to reliably pass a {@link CurrentTenantIdentifierResolver} to the SessionFactory._@since 4.3.2_@see AvailableSettings#MULTI_TENANT_IDENTIFIER_RESOLVER;@Override_	public void setCurrentTenantIdentifierResolver(CurrentTenantIdentifierResolver currentTenantIdentifierResolver) {_		getProperties().put(AvailableSettings.MULTI_TENANT_IDENTIFIER_RESOLVER, currentTenantIdentifierResolver)__		super.setCurrentTenantIdentifierResolver(currentTenantIdentifierResolver)__	};overridden,to,reliably,pass,a,link,current,tenant,identifier,resolver,to,the,session,factory,since,4,3,2,see,available,settings;override,public,void,set,current,tenant,identifier,resolver,current,tenant,identifier,resolver,current,tenant,identifier,resolver,get,properties,put,available,settings,current,tenant,identifier,resolver,super,set,current,tenant,identifier,resolver,current,tenant,identifier,resolver
LocalSessionFactoryBuilder -> @Override 	public void setCurrentTenantIdentifierResolver(CurrentTenantIdentifierResolver currentTenantIdentifierResolver);1518264213;Overridden to reliably pass a {@link CurrentTenantIdentifierResolver} to the SessionFactory._@since 4.3.2_@see AvailableSettings#MULTI_TENANT_IDENTIFIER_RESOLVER;@Override_	public void setCurrentTenantIdentifierResolver(CurrentTenantIdentifierResolver currentTenantIdentifierResolver) {_		getProperties().put(AvailableSettings.MULTI_TENANT_IDENTIFIER_RESOLVER, currentTenantIdentifierResolver)__		super.setCurrentTenantIdentifierResolver(currentTenantIdentifierResolver)__	};overridden,to,reliably,pass,a,link,current,tenant,identifier,resolver,to,the,session,factory,since,4,3,2,see,available,settings;override,public,void,set,current,tenant,identifier,resolver,current,tenant,identifier,resolver,current,tenant,identifier,resolver,get,properties,put,available,settings,current,tenant,identifier,resolver,super,set,current,tenant,identifier,resolver,current,tenant,identifier,resolver
LocalSessionFactoryBuilder -> @Override 	public void setCurrentTenantIdentifierResolver(CurrentTenantIdentifierResolver currentTenantIdentifierResolver);1519860149;Overridden to reliably pass a {@link CurrentTenantIdentifierResolver} to the SessionFactory._@since 4.3.2_@see AvailableSettings#MULTI_TENANT_IDENTIFIER_RESOLVER;@Override_	public void setCurrentTenantIdentifierResolver(CurrentTenantIdentifierResolver currentTenantIdentifierResolver) {_		getProperties().put(AvailableSettings.MULTI_TENANT_IDENTIFIER_RESOLVER, currentTenantIdentifierResolver)__		super.setCurrentTenantIdentifierResolver(currentTenantIdentifierResolver)__	};overridden,to,reliably,pass,a,link,current,tenant,identifier,resolver,to,the,session,factory,since,4,3,2,see,available,settings;override,public,void,set,current,tenant,identifier,resolver,current,tenant,identifier,resolver,current,tenant,identifier,resolver,get,properties,put,available,settings,current,tenant,identifier,resolver,super,set,current,tenant,identifier,resolver,current,tenant,identifier,resolver
LocalSessionFactoryBuilder -> @Override 	public void setCurrentTenantIdentifierResolver(CurrentTenantIdentifierResolver currentTenantIdentifierResolver);1520373974;Overridden to reliably pass a {@link CurrentTenantIdentifierResolver} to the SessionFactory._@since 4.3.2_@see AvailableSettings#MULTI_TENANT_IDENTIFIER_RESOLVER;@Override_	public void setCurrentTenantIdentifierResolver(CurrentTenantIdentifierResolver currentTenantIdentifierResolver) {_		getProperties().put(AvailableSettings.MULTI_TENANT_IDENTIFIER_RESOLVER, currentTenantIdentifierResolver)__		super.setCurrentTenantIdentifierResolver(currentTenantIdentifierResolver)__	};overridden,to,reliably,pass,a,link,current,tenant,identifier,resolver,to,the,session,factory,since,4,3,2,see,available,settings;override,public,void,set,current,tenant,identifier,resolver,current,tenant,identifier,resolver,current,tenant,identifier,resolver,get,properties,put,available,settings,current,tenant,identifier,resolver,super,set,current,tenant,identifier,resolver,current,tenant,identifier,resolver
LocalSessionFactoryBuilder -> @Override 	public void setCurrentTenantIdentifierResolver(CurrentTenantIdentifierResolver currentTenantIdentifierResolver);1530188116;Overridden to reliably pass a {@link CurrentTenantIdentifierResolver} to the SessionFactory._@since 4.3.2_@see AvailableSettings#MULTI_TENANT_IDENTIFIER_RESOLVER;@Override_	public void setCurrentTenantIdentifierResolver(CurrentTenantIdentifierResolver currentTenantIdentifierResolver) {_		getProperties().put(AvailableSettings.MULTI_TENANT_IDENTIFIER_RESOLVER, currentTenantIdentifierResolver)__		super.setCurrentTenantIdentifierResolver(currentTenantIdentifierResolver)__	};overridden,to,reliably,pass,a,link,current,tenant,identifier,resolver,to,the,session,factory,since,4,3,2,see,available,settings;override,public,void,set,current,tenant,identifier,resolver,current,tenant,identifier,resolver,current,tenant,identifier,resolver,get,properties,put,available,settings,current,tenant,identifier,resolver,super,set,current,tenant,identifier,resolver,current,tenant,identifier,resolver
LocalSessionFactoryBuilder -> @Override 	public void setCurrentTenantIdentifierResolver(CurrentTenantIdentifierResolver currentTenantIdentifierResolver);1530724999;Overridden to reliably pass a {@link CurrentTenantIdentifierResolver} to the SessionFactory._@since 4.3.2_@see AvailableSettings#MULTI_TENANT_IDENTIFIER_RESOLVER;@Override_	public void setCurrentTenantIdentifierResolver(CurrentTenantIdentifierResolver currentTenantIdentifierResolver) {_		getProperties().put(AvailableSettings.MULTI_TENANT_IDENTIFIER_RESOLVER, currentTenantIdentifierResolver)__		super.setCurrentTenantIdentifierResolver(currentTenantIdentifierResolver)__	};overridden,to,reliably,pass,a,link,current,tenant,identifier,resolver,to,the,session,factory,since,4,3,2,see,available,settings;override,public,void,set,current,tenant,identifier,resolver,current,tenant,identifier,resolver,current,tenant,identifier,resolver,get,properties,put,available,settings,current,tenant,identifier,resolver,super,set,current,tenant,identifier,resolver,current,tenant,identifier,resolver
LocalSessionFactoryBuilder -> @Override 	public void setCurrentTenantIdentifierResolver(CurrentTenantIdentifierResolver currentTenantIdentifierResolver);1530802115;Overridden to reliably pass a {@link CurrentTenantIdentifierResolver} to the SessionFactory._@since 4.3.2_@see AvailableSettings#MULTI_TENANT_IDENTIFIER_RESOLVER;@Override_	public void setCurrentTenantIdentifierResolver(CurrentTenantIdentifierResolver currentTenantIdentifierResolver) {_		getProperties().put(AvailableSettings.MULTI_TENANT_IDENTIFIER_RESOLVER, currentTenantIdentifierResolver)__		super.setCurrentTenantIdentifierResolver(currentTenantIdentifierResolver)__	};overridden,to,reliably,pass,a,link,current,tenant,identifier,resolver,to,the,session,factory,since,4,3,2,see,available,settings;override,public,void,set,current,tenant,identifier,resolver,current,tenant,identifier,resolver,current,tenant,identifier,resolver,get,properties,put,available,settings,current,tenant,identifier,resolver,super,set,current,tenant,identifier,resolver,current,tenant,identifier,resolver
LocalSessionFactoryBuilder -> @Override 	public void setCurrentTenantIdentifierResolver(CurrentTenantIdentifierResolver currentTenantIdentifierResolver);1531739026;Overridden to reliably pass a {@link CurrentTenantIdentifierResolver} to the SessionFactory._@since 4.3.2_@see AvailableSettings#MULTI_TENANT_IDENTIFIER_RESOLVER;@Override_	public void setCurrentTenantIdentifierResolver(CurrentTenantIdentifierResolver currentTenantIdentifierResolver) {_		getProperties().put(AvailableSettings.MULTI_TENANT_IDENTIFIER_RESOLVER, currentTenantIdentifierResolver)__		super.setCurrentTenantIdentifierResolver(currentTenantIdentifierResolver)__	};overridden,to,reliably,pass,a,link,current,tenant,identifier,resolver,to,the,session,factory,since,4,3,2,see,available,settings;override,public,void,set,current,tenant,identifier,resolver,current,tenant,identifier,resolver,current,tenant,identifier,resolver,get,properties,put,available,settings,current,tenant,identifier,resolver,super,set,current,tenant,identifier,resolver,current,tenant,identifier,resolver
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder( 			@Nullable DataSource dataSource, ResourceLoader resourceLoader, MetadataSources metadataSources);1530188116;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param resourceLoader the ResourceLoader to load application classes from_@param metadataSources the Hibernate MetadataSources service to use (e.g. reusing an existing one)_@since 4.3;public LocalSessionFactoryBuilder(_			@Nullable DataSource dataSource, ResourceLoader resourceLoader, MetadataSources metadataSources) {__		super(metadataSources)___		getProperties().put(AvailableSettings.CURRENT_SESSION_CONTEXT_CLASS, SpringSessionContext.class.getName())__		if (dataSource != null) {_			getProperties().put(AvailableSettings.DATASOURCE, dataSource)__		}__		_		try {_			_			AvailableSettings.class.getField("CONNECTION_HANDLING")__			getProperties().put("hibernate.connection.handling_mode", "DELAYED_ACQUISITION_AND_HOLD")__		}_		catch (NoSuchFieldException ex) {_			_			try {_				AvailableSettings.class.getField("ACQUIRE_CONNECTIONS")__				getProperties().put("hibernate.connection.release_mode", "ON_CLOSE")__			}_			catch (NoSuchFieldException ex2) {_				_			}_		}__		getProperties().put(AvailableSettings.CLASSLOADERS, Collections.singleton(resourceLoader.getClassLoader()))__		this.resourcePatternResolver = ResourcePatternUtils.getResourcePatternResolver(resourceLoader)__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,resource,loader,the,resource,loader,to,load,application,classes,from,param,metadata,sources,the,hibernate,metadata,sources,service,to,use,e,g,reusing,an,existing,one,since,4,3;public,local,session,factory,builder,nullable,data,source,data,source,resource,loader,resource,loader,metadata,sources,metadata,sources,super,metadata,sources,get,properties,put,available,settings,spring,session,context,class,get,name,if,data,source,null,get,properties,put,available,settings,datasource,data,source,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex2,get,properties,put,available,settings,classloaders,collections,singleton,resource,loader,get,class,loader,this,resource,pattern,resolver,resource,pattern,utils,get,resource,pattern,resolver,resource,loader
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder( 			@Nullable DataSource dataSource, ResourceLoader resourceLoader, MetadataSources metadataSources);1530724999;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param resourceLoader the ResourceLoader to load application classes from_@param metadataSources the Hibernate MetadataSources service to use (e.g. reusing an existing one)_@since 4.3;public LocalSessionFactoryBuilder(_			@Nullable DataSource dataSource, ResourceLoader resourceLoader, MetadataSources metadataSources) {__		super(metadataSources)___		getProperties().put(AvailableSettings.CURRENT_SESSION_CONTEXT_CLASS, SpringSessionContext.class.getName())__		if (dataSource != null) {_			getProperties().put(AvailableSettings.DATASOURCE, dataSource)__		}__		_		try {_			_			AvailableSettings.class.getField("CONNECTION_HANDLING")__			getProperties().put("hibernate.connection.handling_mode", "DELAYED_ACQUISITION_AND_HOLD")__		}_		catch (NoSuchFieldException ex) {_			_			try {_				AvailableSettings.class.getField("ACQUIRE_CONNECTIONS")__				getProperties().put("hibernate.connection.release_mode", "ON_CLOSE")__			}_			catch (NoSuchFieldException ex2) {_				_			}_		}__		getProperties().put(AvailableSettings.CLASSLOADERS, Collections.singleton(resourceLoader.getClassLoader()))__		this.resourcePatternResolver = ResourcePatternUtils.getResourcePatternResolver(resourceLoader)__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,resource,loader,the,resource,loader,to,load,application,classes,from,param,metadata,sources,the,hibernate,metadata,sources,service,to,use,e,g,reusing,an,existing,one,since,4,3;public,local,session,factory,builder,nullable,data,source,data,source,resource,loader,resource,loader,metadata,sources,metadata,sources,super,metadata,sources,get,properties,put,available,settings,spring,session,context,class,get,name,if,data,source,null,get,properties,put,available,settings,datasource,data,source,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex2,get,properties,put,available,settings,classloaders,collections,singleton,resource,loader,get,class,loader,this,resource,pattern,resolver,resource,pattern,utils,get,resource,pattern,resolver,resource,loader
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder( 			@Nullable DataSource dataSource, ResourceLoader resourceLoader, MetadataSources metadataSources);1530802115;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param resourceLoader the ResourceLoader to load application classes from_@param metadataSources the Hibernate MetadataSources service to use (e.g. reusing an existing one)_@since 4.3;public LocalSessionFactoryBuilder(_			@Nullable DataSource dataSource, ResourceLoader resourceLoader, MetadataSources metadataSources) {__		super(metadataSources)___		getProperties().put(AvailableSettings.CURRENT_SESSION_CONTEXT_CLASS, SpringSessionContext.class.getName())__		if (dataSource != null) {_			getProperties().put(AvailableSettings.DATASOURCE, dataSource)__		}__		_		try {_			_			AvailableSettings.class.getField("CONNECTION_HANDLING")__			getProperties().put("hibernate.connection.handling_mode", "DELAYED_ACQUISITION_AND_HOLD")__		}_		catch (NoSuchFieldException ex) {_			_			try {_				AvailableSettings.class.getField("ACQUIRE_CONNECTIONS")__				getProperties().put("hibernate.connection.release_mode", "ON_CLOSE")__			}_			catch (NoSuchFieldException ex2) {_				_			}_		}__		getProperties().put(AvailableSettings.CLASSLOADERS, Collections.singleton(resourceLoader.getClassLoader()))__		this.resourcePatternResolver = ResourcePatternUtils.getResourcePatternResolver(resourceLoader)__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,resource,loader,the,resource,loader,to,load,application,classes,from,param,metadata,sources,the,hibernate,metadata,sources,service,to,use,e,g,reusing,an,existing,one,since,4,3;public,local,session,factory,builder,nullable,data,source,data,source,resource,loader,resource,loader,metadata,sources,metadata,sources,super,metadata,sources,get,properties,put,available,settings,spring,session,context,class,get,name,if,data,source,null,get,properties,put,available,settings,datasource,data,source,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex2,get,properties,put,available,settings,classloaders,collections,singleton,resource,loader,get,class,loader,this,resource,pattern,resolver,resource,pattern,utils,get,resource,pattern,resolver,resource,loader
LocalSessionFactoryBuilder -> public LocalSessionFactoryBuilder( 			@Nullable DataSource dataSource, ResourceLoader resourceLoader, MetadataSources metadataSources);1531739026;Create a new LocalSessionFactoryBuilder for the given DataSource._@param dataSource the JDBC DataSource that the resulting Hibernate SessionFactory should be using_(may be {@code null})_@param resourceLoader the ResourceLoader to load application classes from_@param metadataSources the Hibernate MetadataSources service to use (e.g. reusing an existing one)_@since 4.3;public LocalSessionFactoryBuilder(_			@Nullable DataSource dataSource, ResourceLoader resourceLoader, MetadataSources metadataSources) {__		super(metadataSources)___		getProperties().put(AvailableSettings.CURRENT_SESSION_CONTEXT_CLASS, SpringSessionContext.class.getName())__		if (dataSource != null) {_			getProperties().put(AvailableSettings.DATASOURCE, dataSource)__		}__		_		try {_			_			AvailableSettings.class.getField("CONNECTION_HANDLING")__			getProperties().put("hibernate.connection.handling_mode", "DELAYED_ACQUISITION_AND_HOLD")__		}_		catch (NoSuchFieldException ex) {_			_			try {_				AvailableSettings.class.getField("ACQUIRE_CONNECTIONS")__				getProperties().put("hibernate.connection.release_mode", "ON_CLOSE")__			}_			catch (NoSuchFieldException ex2) {_				_			}_		}__		getProperties().put(AvailableSettings.CLASSLOADERS, Collections.singleton(resourceLoader.getClassLoader()))__		this.resourcePatternResolver = ResourcePatternUtils.getResourcePatternResolver(resourceLoader)__	};create,a,new,local,session,factory,builder,for,the,given,data,source,param,data,source,the,jdbc,data,source,that,the,resulting,hibernate,session,factory,should,be,using,may,be,code,null,param,resource,loader,the,resource,loader,to,load,application,classes,from,param,metadata,sources,the,hibernate,metadata,sources,service,to,use,e,g,reusing,an,existing,one,since,4,3;public,local,session,factory,builder,nullable,data,source,data,source,resource,loader,resource,loader,metadata,sources,metadata,sources,super,metadata,sources,get,properties,put,available,settings,spring,session,context,class,get,name,if,data,source,null,get,properties,put,available,settings,datasource,data,source,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex,try,available,settings,class,get,field,get,properties,put,hibernate,connection,catch,no,such,field,exception,ex2,get,properties,put,available,settings,classloaders,collections,singleton,resource,loader,get,class,loader,this,resource,pattern,resolver,resource,pattern,utils,get,resource,pattern,resolver,resource,loader
