# id;timestamp;commentText;codeText;commentWords;codeWords
DefaultJpaDialect -> public void cleanupTransaction(Object transactionData);1328020251;This implementation does nothing, since the default <code>beginTransaction</code>_implementation does not require any cleanup._@see #beginTransaction;public void cleanupTransaction(Object transactionData) {_	};this,implementation,does,nothing,since,the,default,code,begin,transaction,code,implementation,does,not,require,any,cleanup,see,begin,transaction;public,void,cleanup,transaction,object,transaction,data
DefaultJpaDialect -> public void cleanupTransaction(Object transactionData);1357119239;This implementation does nothing, since the default {@code beginTransaction}_implementation does not require any cleanup._@see #beginTransaction;public void cleanupTransaction(Object transactionData) {_	};this,implementation,does,nothing,since,the,default,code,begin,transaction,implementation,does,not,require,any,cleanup,see,begin,transaction;public,void,cleanup,transaction,object,transaction,data
DefaultJpaDialect -> public void cleanupTransaction(Object transactionData);1364559513;This implementation does nothing, since the default {@code beginTransaction}_implementation does not require any cleanup._@see #beginTransaction;public void cleanupTransaction(Object transactionData) {_	};this,implementation,does,nothing,since,the,default,code,begin,transaction,implementation,does,not,require,any,cleanup,see,begin,transaction;public,void,cleanup,transaction,object,transaction,data
DefaultJpaDialect -> public ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly) 			throws PersistenceException, SQLException;1328020251;This implementation always returns <code>null</code>,_indicating that no JDBC Connection can be provided.;public ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly)_			throws PersistenceException, SQLException {__		return null__	};this,implementation,always,returns,code,null,code,indicating,that,no,jdbc,connection,can,be,provided;public,connection,handle,get,jdbc,connection,entity,manager,entity,manager,boolean,read,only,throws,persistence,exception,sqlexception,return,null
DefaultJpaDialect -> public ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly) 			throws PersistenceException, SQLException;1357119239;This implementation always returns {@code null},_indicating that no JDBC Connection can be provided.;public ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly)_			throws PersistenceException, SQLException {__		return null__	};this,implementation,always,returns,code,null,indicating,that,no,jdbc,connection,can,be,provided;public,connection,handle,get,jdbc,connection,entity,manager,entity,manager,boolean,read,only,throws,persistence,exception,sqlexception,return,null
DefaultJpaDialect -> public ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly) 			throws PersistenceException, SQLException;1364559513;This implementation always returns {@code null},_indicating that no JDBC Connection can be provided.;public ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly)_			throws PersistenceException, SQLException {__		return null__	};this,implementation,always,returns,code,null,indicating,that,no,jdbc,connection,can,be,provided;public,connection,handle,get,jdbc,connection,entity,manager,entity,manager,boolean,read,only,throws,persistence,exception,sqlexception,return,null
DefaultJpaDialect -> @Override 	public void cleanupTransaction(Object transactionData);1356735495;This implementation does nothing, since the default {@code beginTransaction}_implementation does not require any cleanup._@see #beginTransaction;@Override_	public void cleanupTransaction(Object transactionData) {_	};this,implementation,does,nothing,since,the,default,code,begin,transaction,implementation,does,not,require,any,cleanup,see,begin,transaction;override,public,void,cleanup,transaction,object,transaction,data
DefaultJpaDialect -> @Override 	public void cleanupTransaction(Object transactionData);1368482696;This implementation does nothing, since the default {@code beginTransaction}_implementation does not require any cleanup._@see #beginTransaction;@Override_	public void cleanupTransaction(Object transactionData) {_	};this,implementation,does,nothing,since,the,default,code,begin,transaction,implementation,does,not,require,any,cleanup,see,begin,transaction;override,public,void,cleanup,transaction,object,transaction,data
DefaultJpaDialect -> @Override 	public void cleanupTransaction(Object transactionData);1404419076;This implementation does nothing, since the default {@code beginTransaction}_implementation does not require any cleanup._@see #beginTransaction;@Override_	public void cleanupTransaction(Object transactionData) {_	};this,implementation,does,nothing,since,the,default,code,begin,transaction,implementation,does,not,require,any,cleanup,see,begin,transaction;override,public,void,cleanup,transaction,object,transaction,data
DefaultJpaDialect -> @Override 	public void cleanupTransaction(Object transactionData);1471508221;This implementation does nothing, since the default {@code beginTransaction}_implementation does not require any cleanup._@see #beginTransaction;@Override_	public void cleanupTransaction(Object transactionData) {_	};this,implementation,does,nothing,since,the,default,code,begin,transaction,implementation,does,not,require,any,cleanup,see,begin,transaction;override,public,void,cleanup,transaction,object,transaction,data
DefaultJpaDialect -> @Override 	public DataAccessException translateExceptionIfPossible(RuntimeException ex);1356735495;This implementation delegates to EntityManagerFactoryUtils._@see EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible;@Override_	public DataAccessException translateExceptionIfPossible(RuntimeException ex) {_		return EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex)__	};this,implementation,delegates,to,entity,manager,factory,utils,see,entity,manager,factory,utils,convert,jpa,access,exception,if,possible;override,public,data,access,exception,translate,exception,if,possible,runtime,exception,ex,return,entity,manager,factory,utils,convert,jpa,access,exception,if,possible,ex
DefaultJpaDialect -> @Override 	public DataAccessException translateExceptionIfPossible(RuntimeException ex);1368482696;This implementation delegates to EntityManagerFactoryUtils._@see EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible;@Override_	public DataAccessException translateExceptionIfPossible(RuntimeException ex) {_		return EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex)__	};this,implementation,delegates,to,entity,manager,factory,utils,see,entity,manager,factory,utils,convert,jpa,access,exception,if,possible;override,public,data,access,exception,translate,exception,if,possible,runtime,exception,ex,return,entity,manager,factory,utils,convert,jpa,access,exception,if,possible,ex
DefaultJpaDialect -> @Override 	public DataAccessException translateExceptionIfPossible(RuntimeException ex);1404419076;This implementation delegates to EntityManagerFactoryUtils._@see EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible;@Override_	public DataAccessException translateExceptionIfPossible(RuntimeException ex) {_		return EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex)__	};this,implementation,delegates,to,entity,manager,factory,utils,see,entity,manager,factory,utils,convert,jpa,access,exception,if,possible;override,public,data,access,exception,translate,exception,if,possible,runtime,exception,ex,return,entity,manager,factory,utils,convert,jpa,access,exception,if,possible,ex
DefaultJpaDialect -> @Override 	public DataAccessException translateExceptionIfPossible(RuntimeException ex);1471508221;This implementation delegates to EntityManagerFactoryUtils._@see EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible;@Override_	public DataAccessException translateExceptionIfPossible(RuntimeException ex) {_		return EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex)__	};this,implementation,delegates,to,entity,manager,factory,utils,see,entity,manager,factory,utils,convert,jpa,access,exception,if,possible;override,public,data,access,exception,translate,exception,if,possible,runtime,exception,ex,return,entity,manager,factory,utils,convert,jpa,access,exception,if,possible,ex
DefaultJpaDialect -> @Override 	public DataAccessException translateExceptionIfPossible(RuntimeException ex);1496242568;This implementation delegates to EntityManagerFactoryUtils._@see EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible;@Override_	public DataAccessException translateExceptionIfPossible(RuntimeException ex) {_		return EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex)__	};this,implementation,delegates,to,entity,manager,factory,utils,see,entity,manager,factory,utils,convert,jpa,access,exception,if,possible;override,public,data,access,exception,translate,exception,if,possible,runtime,exception,ex,return,entity,manager,factory,utils,convert,jpa,access,exception,if,possible,ex
DefaultJpaDialect -> @Override 	public DataAccessException translateExceptionIfPossible(RuntimeException ex);1500495740;This implementation delegates to EntityManagerFactoryUtils._@see EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible;@Override_	public DataAccessException translateExceptionIfPossible(RuntimeException ex) {_		return EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex)__	};this,implementation,delegates,to,entity,manager,factory,utils,see,entity,manager,factory,utils,convert,jpa,access,exception,if,possible;override,public,data,access,exception,translate,exception,if,possible,runtime,exception,ex,return,entity,manager,factory,utils,convert,jpa,access,exception,if,possible,ex
DefaultJpaDialect -> public Object beginTransaction(EntityManager entityManager, TransactionDefinition definition) 			throws PersistenceException, SQLException, TransactionException;1328020251;This implementation invokes the standard JPA <code>Transaction.begin</code>_method. Throws an InvalidIsolationLevelException if a non-default isolation_level is set._<p>This implementation does not return any transaction data Object, since there_is no state to be kept for a standard JPA transaction. Hence, subclasses do not_have to care about the return value (<code>null</code>) of this implementation_and are free to return their own transaction data Object._@see javax.persistence.EntityTransaction#begin_@see org.springframework.transaction.InvalidIsolationLevelException_@see #cleanupTransaction;public Object beginTransaction(EntityManager entityManager, TransactionDefinition definition)_			throws PersistenceException, SQLException, TransactionException {__		if (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) {_			throw new InvalidIsolationLevelException(_					"Standard JPA does not support custom isolation levels - " +_					"use a special JpaDialect for your JPA implementation")__		}_		entityManager.getTransaction().begin()__		return null__	};this,implementation,invokes,the,standard,jpa,code,transaction,begin,code,method,throws,an,invalid,isolation,level,exception,if,a,non,default,isolation,level,is,set,p,this,implementation,does,not,return,any,transaction,data,object,since,there,is,no,state,to,be,kept,for,a,standard,jpa,transaction,hence,subclasses,do,not,have,to,care,about,the,return,value,code,null,code,of,this,implementation,and,are,free,to,return,their,own,transaction,data,object,see,javax,persistence,entity,transaction,begin,see,org,springframework,transaction,invalid,isolation,level,exception,see,cleanup,transaction;public,object,begin,transaction,entity,manager,entity,manager,transaction,definition,definition,throws,persistence,exception,sqlexception,transaction,exception,if,definition,get,isolation,level,transaction,definition,throw,new,invalid,isolation,level,exception,standard,jpa,does,not,support,custom,isolation,levels,use,a,special,jpa,dialect,for,your,jpa,implementation,entity,manager,get,transaction,begin,return,null
DefaultJpaDialect -> public Object beginTransaction(EntityManager entityManager, TransactionDefinition definition) 			throws PersistenceException, SQLException, TransactionException;1357119239;This implementation invokes the standard JPA {@code Transaction.begin}_method. Throws an InvalidIsolationLevelException if a non-default isolation_level is set._<p>This implementation does not return any transaction data Object, since there_is no state to be kept for a standard JPA transaction. Hence, subclasses do not_have to care about the return value ({@code null}) of this implementation_and are free to return their own transaction data Object._@see javax.persistence.EntityTransaction#begin_@see org.springframework.transaction.InvalidIsolationLevelException_@see #cleanupTransaction;public Object beginTransaction(EntityManager entityManager, TransactionDefinition definition)_			throws PersistenceException, SQLException, TransactionException {__		if (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) {_			throw new InvalidIsolationLevelException(_					"Standard JPA does not support custom isolation levels - " +_					"use a special JpaDialect for your JPA implementation")__		}_		entityManager.getTransaction().begin()__		return null__	};this,implementation,invokes,the,standard,jpa,code,transaction,begin,method,throws,an,invalid,isolation,level,exception,if,a,non,default,isolation,level,is,set,p,this,implementation,does,not,return,any,transaction,data,object,since,there,is,no,state,to,be,kept,for,a,standard,jpa,transaction,hence,subclasses,do,not,have,to,care,about,the,return,value,code,null,of,this,implementation,and,are,free,to,return,their,own,transaction,data,object,see,javax,persistence,entity,transaction,begin,see,org,springframework,transaction,invalid,isolation,level,exception,see,cleanup,transaction;public,object,begin,transaction,entity,manager,entity,manager,transaction,definition,definition,throws,persistence,exception,sqlexception,transaction,exception,if,definition,get,isolation,level,transaction,definition,throw,new,invalid,isolation,level,exception,standard,jpa,does,not,support,custom,isolation,levels,use,a,special,jpa,dialect,for,your,jpa,implementation,entity,manager,get,transaction,begin,return,null
DefaultJpaDialect -> public Object beginTransaction(EntityManager entityManager, TransactionDefinition definition) 			throws PersistenceException, SQLException, TransactionException;1364559513;This implementation invokes the standard JPA {@code Transaction.begin}_method. Throws an InvalidIsolationLevelException if a non-default isolation_level is set._<p>This implementation does not return any transaction data Object, since there_is no state to be kept for a standard JPA transaction. Hence, subclasses do not_have to care about the return value ({@code null}) of this implementation_and are free to return their own transaction data Object._@see javax.persistence.EntityTransaction#begin_@see org.springframework.transaction.InvalidIsolationLevelException_@see #cleanupTransaction;public Object beginTransaction(EntityManager entityManager, TransactionDefinition definition)_			throws PersistenceException, SQLException, TransactionException {__		if (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) {_			throw new InvalidIsolationLevelException(_					"Standard JPA does not support custom isolation levels - " +_					"use a special JpaDialect for your JPA implementation")__		}_		entityManager.getTransaction().begin()__		return null__	};this,implementation,invokes,the,standard,jpa,code,transaction,begin,method,throws,an,invalid,isolation,level,exception,if,a,non,default,isolation,level,is,set,p,this,implementation,does,not,return,any,transaction,data,object,since,there,is,no,state,to,be,kept,for,a,standard,jpa,transaction,hence,subclasses,do,not,have,to,care,about,the,return,value,code,null,of,this,implementation,and,are,free,to,return,their,own,transaction,data,object,see,javax,persistence,entity,transaction,begin,see,org,springframework,transaction,invalid,isolation,level,exception,see,cleanup,transaction;public,object,begin,transaction,entity,manager,entity,manager,transaction,definition,definition,throws,persistence,exception,sqlexception,transaction,exception,if,definition,get,isolation,level,transaction,definition,throw,new,invalid,isolation,level,exception,standard,jpa,does,not,support,custom,isolation,levels,use,a,special,jpa,dialect,for,your,jpa,implementation,entity,manager,get,transaction,begin,return,null
DefaultJpaDialect -> public void releaseJdbcConnection(ConnectionHandle conHandle, EntityManager em) 			throws PersistenceException, SQLException;1328020251;This implementation does nothing, assuming that the Connection_will implicitly be closed with the EntityManager._<p>If the JPA implementation returns a Connection handle that it expects_the application to close after use, the dialect implementation needs to invoke_<code>Connection.close()</code> (or some other method with similar effect) here._@see java.sql.Connection#close();public void releaseJdbcConnection(ConnectionHandle conHandle, EntityManager em)_			throws PersistenceException, SQLException {_	};this,implementation,does,nothing,assuming,that,the,connection,will,implicitly,be,closed,with,the,entity,manager,p,if,the,jpa,implementation,returns,a,connection,handle,that,it,expects,the,application,to,close,after,use,the,dialect,implementation,needs,to,invoke,code,connection,close,code,or,some,other,method,with,similar,effect,here,see,java,sql,connection,close;public,void,release,jdbc,connection,connection,handle,con,handle,entity,manager,em,throws,persistence,exception,sqlexception
DefaultJpaDialect -> public void releaseJdbcConnection(ConnectionHandle conHandle, EntityManager em) 			throws PersistenceException, SQLException;1357119239;This implementation does nothing, assuming that the Connection_will implicitly be closed with the EntityManager._<p>If the JPA implementation returns a Connection handle that it expects_the application to close after use, the dialect implementation needs to invoke_{@code Connection.close()} (or some other method with similar effect) here._@see java.sql.Connection#close();public void releaseJdbcConnection(ConnectionHandle conHandle, EntityManager em)_			throws PersistenceException, SQLException {_	};this,implementation,does,nothing,assuming,that,the,connection,will,implicitly,be,closed,with,the,entity,manager,p,if,the,jpa,implementation,returns,a,connection,handle,that,it,expects,the,application,to,close,after,use,the,dialect,implementation,needs,to,invoke,code,connection,close,or,some,other,method,with,similar,effect,here,see,java,sql,connection,close;public,void,release,jdbc,connection,connection,handle,con,handle,entity,manager,em,throws,persistence,exception,sqlexception
DefaultJpaDialect -> public void releaseJdbcConnection(ConnectionHandle conHandle, EntityManager em) 			throws PersistenceException, SQLException;1364559513;This implementation does nothing, assuming that the Connection_will implicitly be closed with the EntityManager._<p>If the JPA implementation returns a Connection handle that it expects_the application to close after use, the dialect implementation needs to invoke_{@code Connection.close()} (or some other method with similar effect) here._@see java.sql.Connection#close();public void releaseJdbcConnection(ConnectionHandle conHandle, EntityManager em)_			throws PersistenceException, SQLException {_	};this,implementation,does,nothing,assuming,that,the,connection,will,implicitly,be,closed,with,the,entity,manager,p,if,the,jpa,implementation,returns,a,connection,handle,that,it,expects,the,application,to,close,after,use,the,dialect,implementation,needs,to,invoke,code,connection,close,or,some,other,method,with,similar,effect,here,see,java,sql,connection,close;public,void,release,jdbc,connection,connection,handle,con,handle,entity,manager,em,throws,persistence,exception,sqlexception
DefaultJpaDialect -> @Override 	public void cleanupTransaction(@Nullable Object transactionData);1496242568;This implementation does nothing, since the default {@code beginTransaction}_implementation does not require any cleanup._@see #beginTransaction;@Override_	public void cleanupTransaction(@Nullable Object transactionData) {_	};this,implementation,does,nothing,since,the,default,code,begin,transaction,implementation,does,not,require,any,cleanup,see,begin,transaction;override,public,void,cleanup,transaction,nullable,object,transaction,data
DefaultJpaDialect -> @Override 	public void cleanupTransaction(@Nullable Object transactionData);1500495740;This implementation does nothing, since the default {@code beginTransaction}_implementation does not require any cleanup._@see #beginTransaction;@Override_	public void cleanupTransaction(@Nullable Object transactionData) {_	};this,implementation,does,nothing,since,the,default,code,begin,transaction,implementation,does,not,require,any,cleanup,see,begin,transaction;override,public,void,cleanup,transaction,nullable,object,transaction,data
DefaultJpaDialect -> @Override 	public void cleanupTransaction(@Nullable Object transactionData);1502974979;This implementation does nothing, since the default {@code beginTransaction}_implementation does not require any cleanup._@see #beginTransaction;@Override_	public void cleanupTransaction(@Nullable Object transactionData) {_	};this,implementation,does,nothing,since,the,default,code,begin,transaction,implementation,does,not,require,any,cleanup,see,begin,transaction;override,public,void,cleanup,transaction,nullable,object,transaction,data
DefaultJpaDialect -> @Override 	public ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly) 			throws PersistenceException, SQLException;1356735495;This implementation always returns {@code null},_indicating that no JDBC Connection can be provided.;@Override_	public ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly)_			throws PersistenceException, SQLException {__		return null__	};this,implementation,always,returns,code,null,indicating,that,no,jdbc,connection,can,be,provided;override,public,connection,handle,get,jdbc,connection,entity,manager,entity,manager,boolean,read,only,throws,persistence,exception,sqlexception,return,null
DefaultJpaDialect -> @Override 	public ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly) 			throws PersistenceException, SQLException;1368482696;This implementation always returns {@code null},_indicating that no JDBC Connection can be provided.;@Override_	public ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly)_			throws PersistenceException, SQLException {__		return null__	};this,implementation,always,returns,code,null,indicating,that,no,jdbc,connection,can,be,provided;override,public,connection,handle,get,jdbc,connection,entity,manager,entity,manager,boolean,read,only,throws,persistence,exception,sqlexception,return,null
DefaultJpaDialect -> @Override 	public ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly) 			throws PersistenceException, SQLException;1404419076;This implementation always returns {@code null},_indicating that no JDBC Connection can be provided.;@Override_	public ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly)_			throws PersistenceException, SQLException {__		return null__	};this,implementation,always,returns,code,null,indicating,that,no,jdbc,connection,can,be,provided;override,public,connection,handle,get,jdbc,connection,entity,manager,entity,manager,boolean,read,only,throws,persistence,exception,sqlexception,return,null
DefaultJpaDialect -> @Override 	public ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly) 			throws PersistenceException, SQLException;1471508221;This implementation always returns {@code null},_indicating that no JDBC Connection can be provided.;@Override_	public ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly)_			throws PersistenceException, SQLException {__		return null__	};this,implementation,always,returns,code,null,indicating,that,no,jdbc,connection,can,be,provided;override,public,connection,handle,get,jdbc,connection,entity,manager,entity,manager,boolean,read,only,throws,persistence,exception,sqlexception,return,null
DefaultJpaDialect -> @Override 	public ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly) 			throws PersistenceException, SQLException;1496242568;This implementation always returns {@code null},_indicating that no JDBC Connection can be provided.;@Override_	public ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly)_			throws PersistenceException, SQLException {__		return null__	};this,implementation,always,returns,code,null,indicating,that,no,jdbc,connection,can,be,provided;override,public,connection,handle,get,jdbc,connection,entity,manager,entity,manager,boolean,read,only,throws,persistence,exception,sqlexception,return,null
DefaultJpaDialect -> @Override 	public ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly) 			throws PersistenceException, SQLException;1500495740;This implementation always returns {@code null},_indicating that no JDBC Connection can be provided.;@Override_	public ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly)_			throws PersistenceException, SQLException {__		return null__	};this,implementation,always,returns,code,null,indicating,that,no,jdbc,connection,can,be,provided;override,public,connection,handle,get,jdbc,connection,entity,manager,entity,manager,boolean,read,only,throws,persistence,exception,sqlexception,return,null
DefaultJpaDialect -> public DataAccessException translateExceptionIfPossible(RuntimeException ex);1328020251;This implementation delegates to EntityManagerFactoryUtils._@see EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible;public DataAccessException translateExceptionIfPossible(RuntimeException ex) {_		return EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex)__	};this,implementation,delegates,to,entity,manager,factory,utils,see,entity,manager,factory,utils,convert,jpa,access,exception,if,possible;public,data,access,exception,translate,exception,if,possible,runtime,exception,ex,return,entity,manager,factory,utils,convert,jpa,access,exception,if,possible,ex
DefaultJpaDialect -> public DataAccessException translateExceptionIfPossible(RuntimeException ex);1357119239;This implementation delegates to EntityManagerFactoryUtils._@see EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible;public DataAccessException translateExceptionIfPossible(RuntimeException ex) {_		return EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex)__	};this,implementation,delegates,to,entity,manager,factory,utils,see,entity,manager,factory,utils,convert,jpa,access,exception,if,possible;public,data,access,exception,translate,exception,if,possible,runtime,exception,ex,return,entity,manager,factory,utils,convert,jpa,access,exception,if,possible,ex
DefaultJpaDialect -> public DataAccessException translateExceptionIfPossible(RuntimeException ex);1364559513;This implementation delegates to EntityManagerFactoryUtils._@see EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible;public DataAccessException translateExceptionIfPossible(RuntimeException ex) {_		return EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex)__	};this,implementation,delegates,to,entity,manager,factory,utils,see,entity,manager,factory,utils,convert,jpa,access,exception,if,possible;public,data,access,exception,translate,exception,if,possible,runtime,exception,ex,return,entity,manager,factory,utils,convert,jpa,access,exception,if,possible,ex
DefaultJpaDialect -> @Override 	public Object beginTransaction(EntityManager entityManager, TransactionDefinition definition) 			throws PersistenceException, SQLException, TransactionException;1356735495;This implementation invokes the standard JPA {@code Transaction.begin}_method. Throws an InvalidIsolationLevelException if a non-default isolation_level is set._<p>This implementation does not return any transaction data Object, since there_is no state to be kept for a standard JPA transaction. Hence, subclasses do not_have to care about the return value ({@code null}) of this implementation_and are free to return their own transaction data Object._@see javax.persistence.EntityTransaction#begin_@see org.springframework.transaction.InvalidIsolationLevelException_@see #cleanupTransaction;@Override_	public Object beginTransaction(EntityManager entityManager, TransactionDefinition definition)_			throws PersistenceException, SQLException, TransactionException {__		if (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) {_			throw new InvalidIsolationLevelException(_					"Standard JPA does not support custom isolation levels - " +_					"use a special JpaDialect for your JPA implementation")__		}_		entityManager.getTransaction().begin()__		return null__	};this,implementation,invokes,the,standard,jpa,code,transaction,begin,method,throws,an,invalid,isolation,level,exception,if,a,non,default,isolation,level,is,set,p,this,implementation,does,not,return,any,transaction,data,object,since,there,is,no,state,to,be,kept,for,a,standard,jpa,transaction,hence,subclasses,do,not,have,to,care,about,the,return,value,code,null,of,this,implementation,and,are,free,to,return,their,own,transaction,data,object,see,javax,persistence,entity,transaction,begin,see,org,springframework,transaction,invalid,isolation,level,exception,see,cleanup,transaction;override,public,object,begin,transaction,entity,manager,entity,manager,transaction,definition,definition,throws,persistence,exception,sqlexception,transaction,exception,if,definition,get,isolation,level,transaction,definition,throw,new,invalid,isolation,level,exception,standard,jpa,does,not,support,custom,isolation,levels,use,a,special,jpa,dialect,for,your,jpa,implementation,entity,manager,get,transaction,begin,return,null
DefaultJpaDialect -> @Override 	public Object beginTransaction(EntityManager entityManager, TransactionDefinition definition) 			throws PersistenceException, SQLException, TransactionException;1368482696;This implementation invokes the standard JPA {@code Transaction.begin}_method. Throws an InvalidIsolationLevelException if a non-default isolation_level is set._<p>This implementation does not return any transaction data Object, since there_is no state to be kept for a standard JPA transaction. Hence, subclasses do not_have to care about the return value ({@code null}) of this implementation_and are free to return their own transaction data Object._@see javax.persistence.EntityTransaction#begin_@see org.springframework.transaction.InvalidIsolationLevelException_@see #cleanupTransaction;@Override_	public Object beginTransaction(EntityManager entityManager, TransactionDefinition definition)_			throws PersistenceException, SQLException, TransactionException {__		if (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) {_			throw new InvalidIsolationLevelException(_					"Standard JPA does not support custom isolation levels - " +_					"use a special JpaDialect for your JPA implementation")__		}_		entityManager.getTransaction().begin()__		return null__	};this,implementation,invokes,the,standard,jpa,code,transaction,begin,method,throws,an,invalid,isolation,level,exception,if,a,non,default,isolation,level,is,set,p,this,implementation,does,not,return,any,transaction,data,object,since,there,is,no,state,to,be,kept,for,a,standard,jpa,transaction,hence,subclasses,do,not,have,to,care,about,the,return,value,code,null,of,this,implementation,and,are,free,to,return,their,own,transaction,data,object,see,javax,persistence,entity,transaction,begin,see,org,springframework,transaction,invalid,isolation,level,exception,see,cleanup,transaction;override,public,object,begin,transaction,entity,manager,entity,manager,transaction,definition,definition,throws,persistence,exception,sqlexception,transaction,exception,if,definition,get,isolation,level,transaction,definition,throw,new,invalid,isolation,level,exception,standard,jpa,does,not,support,custom,isolation,levels,use,a,special,jpa,dialect,for,your,jpa,implementation,entity,manager,get,transaction,begin,return,null
DefaultJpaDialect -> @Override 	public Object beginTransaction(EntityManager entityManager, TransactionDefinition definition) 			throws PersistenceException, SQLException, TransactionException;1404419076;This implementation invokes the standard JPA {@code Transaction.begin}_method. Throws an InvalidIsolationLevelException if a non-default isolation_level is set._<p>This implementation does not return any transaction data Object, since there_is no state to be kept for a standard JPA transaction. Hence, subclasses do not_have to care about the return value ({@code null}) of this implementation_and are free to return their own transaction data Object._@see javax.persistence.EntityTransaction#begin_@see org.springframework.transaction.InvalidIsolationLevelException_@see #cleanupTransaction;@Override_	public Object beginTransaction(EntityManager entityManager, TransactionDefinition definition)_			throws PersistenceException, SQLException, TransactionException {__		if (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) {_			throw new InvalidIsolationLevelException(getClass().getSimpleName() +_					" does not support custom isolation levels due to limitations in standard JPA. " +_					"Specific arrangements may be implemented in custom JpaDialect variants.")__		}_		entityManager.getTransaction().begin()__		return null__	};this,implementation,invokes,the,standard,jpa,code,transaction,begin,method,throws,an,invalid,isolation,level,exception,if,a,non,default,isolation,level,is,set,p,this,implementation,does,not,return,any,transaction,data,object,since,there,is,no,state,to,be,kept,for,a,standard,jpa,transaction,hence,subclasses,do,not,have,to,care,about,the,return,value,code,null,of,this,implementation,and,are,free,to,return,their,own,transaction,data,object,see,javax,persistence,entity,transaction,begin,see,org,springframework,transaction,invalid,isolation,level,exception,see,cleanup,transaction;override,public,object,begin,transaction,entity,manager,entity,manager,transaction,definition,definition,throws,persistence,exception,sqlexception,transaction,exception,if,definition,get,isolation,level,transaction,definition,throw,new,invalid,isolation,level,exception,get,class,get,simple,name,does,not,support,custom,isolation,levels,due,to,limitations,in,standard,jpa,specific,arrangements,may,be,implemented,in,custom,jpa,dialect,variants,entity,manager,get,transaction,begin,return,null
DefaultJpaDialect -> @Override 	public Object beginTransaction(EntityManager entityManager, TransactionDefinition definition) 			throws PersistenceException, SQLException, TransactionException;1471508221;This implementation invokes the standard JPA {@code Transaction.begin}_method. Throws an InvalidIsolationLevelException if a non-default isolation_level is set._<p>This implementation does not return any transaction data Object, since there_is no state to be kept for a standard JPA transaction. Hence, subclasses do not_have to care about the return value ({@code null}) of this implementation_and are free to return their own transaction data Object._@see javax.persistence.EntityTransaction#begin_@see org.springframework.transaction.InvalidIsolationLevelException_@see #cleanupTransaction;@Override_	public Object beginTransaction(EntityManager entityManager, TransactionDefinition definition)_			throws PersistenceException, SQLException, TransactionException {__		if (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) {_			throw new InvalidIsolationLevelException(getClass().getSimpleName() +_					" does not support custom isolation levels due to limitations in standard JPA. " +_					"Specific arrangements may be implemented in custom JpaDialect variants.")__		}_		entityManager.getTransaction().begin()__		return null__	};this,implementation,invokes,the,standard,jpa,code,transaction,begin,method,throws,an,invalid,isolation,level,exception,if,a,non,default,isolation,level,is,set,p,this,implementation,does,not,return,any,transaction,data,object,since,there,is,no,state,to,be,kept,for,a,standard,jpa,transaction,hence,subclasses,do,not,have,to,care,about,the,return,value,code,null,of,this,implementation,and,are,free,to,return,their,own,transaction,data,object,see,javax,persistence,entity,transaction,begin,see,org,springframework,transaction,invalid,isolation,level,exception,see,cleanup,transaction;override,public,object,begin,transaction,entity,manager,entity,manager,transaction,definition,definition,throws,persistence,exception,sqlexception,transaction,exception,if,definition,get,isolation,level,transaction,definition,throw,new,invalid,isolation,level,exception,get,class,get,simple,name,does,not,support,custom,isolation,levels,due,to,limitations,in,standard,jpa,specific,arrangements,may,be,implemented,in,custom,jpa,dialect,variants,entity,manager,get,transaction,begin,return,null
DefaultJpaDialect -> @Override 	public Object beginTransaction(EntityManager entityManager, TransactionDefinition definition) 			throws PersistenceException, SQLException, TransactionException;1496242568;This implementation invokes the standard JPA {@code Transaction.begin}_method. Throws an InvalidIsolationLevelException if a non-default isolation_level is set._<p>This implementation does not return any transaction data Object, since there_is no state to be kept for a standard JPA transaction. Hence, subclasses do not_have to care about the return value ({@code null}) of this implementation_and are free to return their own transaction data Object._@see javax.persistence.EntityTransaction#begin_@see org.springframework.transaction.InvalidIsolationLevelException_@see #cleanupTransaction;@Override_	public Object beginTransaction(EntityManager entityManager, TransactionDefinition definition)_			throws PersistenceException, SQLException, TransactionException {__		if (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) {_			throw new InvalidIsolationLevelException(getClass().getSimpleName() +_					" does not support custom isolation levels due to limitations in standard JPA. " +_					"Specific arrangements may be implemented in custom JpaDialect variants.")__		}_		entityManager.getTransaction().begin()__		return null__	};this,implementation,invokes,the,standard,jpa,code,transaction,begin,method,throws,an,invalid,isolation,level,exception,if,a,non,default,isolation,level,is,set,p,this,implementation,does,not,return,any,transaction,data,object,since,there,is,no,state,to,be,kept,for,a,standard,jpa,transaction,hence,subclasses,do,not,have,to,care,about,the,return,value,code,null,of,this,implementation,and,are,free,to,return,their,own,transaction,data,object,see,javax,persistence,entity,transaction,begin,see,org,springframework,transaction,invalid,isolation,level,exception,see,cleanup,transaction;override,public,object,begin,transaction,entity,manager,entity,manager,transaction,definition,definition,throws,persistence,exception,sqlexception,transaction,exception,if,definition,get,isolation,level,transaction,definition,throw,new,invalid,isolation,level,exception,get,class,get,simple,name,does,not,support,custom,isolation,levels,due,to,limitations,in,standard,jpa,specific,arrangements,may,be,implemented,in,custom,jpa,dialect,variants,entity,manager,get,transaction,begin,return,null
DefaultJpaDialect -> @Override 	public Object beginTransaction(EntityManager entityManager, TransactionDefinition definition) 			throws PersistenceException, SQLException, TransactionException;1500495740;This implementation invokes the standard JPA {@code Transaction.begin}_method. Throws an InvalidIsolationLevelException if a non-default isolation_level is set._<p>This implementation does not return any transaction data Object, since there_is no state to be kept for a standard JPA transaction. Hence, subclasses do not_have to care about the return value ({@code null}) of this implementation_and are free to return their own transaction data Object._@see javax.persistence.EntityTransaction#begin_@see org.springframework.transaction.InvalidIsolationLevelException_@see #cleanupTransaction;@Override_	public Object beginTransaction(EntityManager entityManager, TransactionDefinition definition)_			throws PersistenceException, SQLException, TransactionException {__		if (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) {_			throw new InvalidIsolationLevelException(getClass().getSimpleName() +_					" does not support custom isolation levels due to limitations in standard JPA. " +_					"Specific arrangements may be implemented in custom JpaDialect variants.")__		}_		entityManager.getTransaction().begin()__		return null__	};this,implementation,invokes,the,standard,jpa,code,transaction,begin,method,throws,an,invalid,isolation,level,exception,if,a,non,default,isolation,level,is,set,p,this,implementation,does,not,return,any,transaction,data,object,since,there,is,no,state,to,be,kept,for,a,standard,jpa,transaction,hence,subclasses,do,not,have,to,care,about,the,return,value,code,null,of,this,implementation,and,are,free,to,return,their,own,transaction,data,object,see,javax,persistence,entity,transaction,begin,see,org,springframework,transaction,invalid,isolation,level,exception,see,cleanup,transaction;override,public,object,begin,transaction,entity,manager,entity,manager,transaction,definition,definition,throws,persistence,exception,sqlexception,transaction,exception,if,definition,get,isolation,level,transaction,definition,throw,new,invalid,isolation,level,exception,get,class,get,simple,name,does,not,support,custom,isolation,levels,due,to,limitations,in,standard,jpa,specific,arrangements,may,be,implemented,in,custom,jpa,dialect,variants,entity,manager,get,transaction,begin,return,null
DefaultJpaDialect -> @Override 	public void releaseJdbcConnection(ConnectionHandle conHandle, EntityManager em) 			throws PersistenceException, SQLException;1356735495;This implementation does nothing, assuming that the Connection_will implicitly be closed with the EntityManager._<p>If the JPA implementation returns a Connection handle that it expects_the application to close after use, the dialect implementation needs to invoke_{@code Connection.close()} (or some other method with similar effect) here._@see java.sql.Connection#close();@Override_	public void releaseJdbcConnection(ConnectionHandle conHandle, EntityManager em)_			throws PersistenceException, SQLException {_	};this,implementation,does,nothing,assuming,that,the,connection,will,implicitly,be,closed,with,the,entity,manager,p,if,the,jpa,implementation,returns,a,connection,handle,that,it,expects,the,application,to,close,after,use,the,dialect,implementation,needs,to,invoke,code,connection,close,or,some,other,method,with,similar,effect,here,see,java,sql,connection,close;override,public,void,release,jdbc,connection,connection,handle,con,handle,entity,manager,em,throws,persistence,exception,sqlexception
DefaultJpaDialect -> @Override 	public void releaseJdbcConnection(ConnectionHandle conHandle, EntityManager em) 			throws PersistenceException, SQLException;1368482696;This implementation does nothing, assuming that the Connection_will implicitly be closed with the EntityManager._<p>If the JPA implementation returns a Connection handle that it expects_the application to close after use, the dialect implementation needs to invoke_{@code Connection.close()} (or some other method with similar effect) here._@see java.sql.Connection#close();@Override_	public void releaseJdbcConnection(ConnectionHandle conHandle, EntityManager em)_			throws PersistenceException, SQLException {_	};this,implementation,does,nothing,assuming,that,the,connection,will,implicitly,be,closed,with,the,entity,manager,p,if,the,jpa,implementation,returns,a,connection,handle,that,it,expects,the,application,to,close,after,use,the,dialect,implementation,needs,to,invoke,code,connection,close,or,some,other,method,with,similar,effect,here,see,java,sql,connection,close;override,public,void,release,jdbc,connection,connection,handle,con,handle,entity,manager,em,throws,persistence,exception,sqlexception
DefaultJpaDialect -> @Override 	public void releaseJdbcConnection(ConnectionHandle conHandle, EntityManager em) 			throws PersistenceException, SQLException;1404419076;This implementation does nothing, assuming that the Connection_will implicitly be closed with the EntityManager._<p>If the JPA implementation returns a Connection handle that it expects_the application to close after use, the dialect implementation needs to invoke_{@code Connection.close()} (or some other method with similar effect) here._@see java.sql.Connection#close();@Override_	public void releaseJdbcConnection(ConnectionHandle conHandle, EntityManager em)_			throws PersistenceException, SQLException {_	};this,implementation,does,nothing,assuming,that,the,connection,will,implicitly,be,closed,with,the,entity,manager,p,if,the,jpa,implementation,returns,a,connection,handle,that,it,expects,the,application,to,close,after,use,the,dialect,implementation,needs,to,invoke,code,connection,close,or,some,other,method,with,similar,effect,here,see,java,sql,connection,close;override,public,void,release,jdbc,connection,connection,handle,con,handle,entity,manager,em,throws,persistence,exception,sqlexception
DefaultJpaDialect -> @Override 	public void releaseJdbcConnection(ConnectionHandle conHandle, EntityManager em) 			throws PersistenceException, SQLException;1471508221;This implementation does nothing, assuming that the Connection_will implicitly be closed with the EntityManager._<p>If the JPA implementation returns a Connection handle that it expects_the application to close after use, the dialect implementation needs to invoke_{@code Connection.close()} (or some other method with similar effect) here._@see java.sql.Connection#close();@Override_	public void releaseJdbcConnection(ConnectionHandle conHandle, EntityManager em)_			throws PersistenceException, SQLException {_	};this,implementation,does,nothing,assuming,that,the,connection,will,implicitly,be,closed,with,the,entity,manager,p,if,the,jpa,implementation,returns,a,connection,handle,that,it,expects,the,application,to,close,after,use,the,dialect,implementation,needs,to,invoke,code,connection,close,or,some,other,method,with,similar,effect,here,see,java,sql,connection,close;override,public,void,release,jdbc,connection,connection,handle,con,handle,entity,manager,em,throws,persistence,exception,sqlexception
DefaultJpaDialect -> @Override 	public void releaseJdbcConnection(ConnectionHandle conHandle, EntityManager em) 			throws PersistenceException, SQLException;1496242568;This implementation does nothing, assuming that the Connection_will implicitly be closed with the EntityManager._<p>If the JPA implementation returns a Connection handle that it expects_the application to close after use, the dialect implementation needs to invoke_{@code Connection.close()} (or some other method with similar effect) here._@see java.sql.Connection#close();@Override_	public void releaseJdbcConnection(ConnectionHandle conHandle, EntityManager em)_			throws PersistenceException, SQLException {_	};this,implementation,does,nothing,assuming,that,the,connection,will,implicitly,be,closed,with,the,entity,manager,p,if,the,jpa,implementation,returns,a,connection,handle,that,it,expects,the,application,to,close,after,use,the,dialect,implementation,needs,to,invoke,code,connection,close,or,some,other,method,with,similar,effect,here,see,java,sql,connection,close;override,public,void,release,jdbc,connection,connection,handle,con,handle,entity,manager,em,throws,persistence,exception,sqlexception
DefaultJpaDialect -> @Override 	public void releaseJdbcConnection(ConnectionHandle conHandle, EntityManager em) 			throws PersistenceException, SQLException;1500495740;This implementation does nothing, assuming that the Connection_will implicitly be closed with the EntityManager._<p>If the JPA implementation returns a Connection handle that it expects_the application to close after use, the dialect implementation needs to invoke_{@code Connection.close()} (or some other method with similar effect) here._@see java.sql.Connection#close();@Override_	public void releaseJdbcConnection(ConnectionHandle conHandle, EntityManager em)_			throws PersistenceException, SQLException {_	};this,implementation,does,nothing,assuming,that,the,connection,will,implicitly,be,closed,with,the,entity,manager,p,if,the,jpa,implementation,returns,a,connection,handle,that,it,expects,the,application,to,close,after,use,the,dialect,implementation,needs,to,invoke,code,connection,close,or,some,other,method,with,similar,effect,here,see,java,sql,connection,close;override,public,void,release,jdbc,connection,connection,handle,con,handle,entity,manager,em,throws,persistence,exception,sqlexception
DefaultJpaDialect -> @Override 	public void releaseJdbcConnection(ConnectionHandle conHandle, EntityManager em) 			throws PersistenceException, SQLException;1502974979;This implementation does nothing, assuming that the Connection_will implicitly be closed with the EntityManager._<p>If the JPA implementation returns a Connection handle that it expects_the application to close after use, the dialect implementation needs to invoke_{@code Connection.close()} (or some other method with similar effect) here._@see java.sql.Connection#close();@Override_	public void releaseJdbcConnection(ConnectionHandle conHandle, EntityManager em)_			throws PersistenceException, SQLException {_	};this,implementation,does,nothing,assuming,that,the,connection,will,implicitly,be,closed,with,the,entity,manager,p,if,the,jpa,implementation,returns,a,connection,handle,that,it,expects,the,application,to,close,after,use,the,dialect,implementation,needs,to,invoke,code,connection,close,or,some,other,method,with,similar,effect,here,see,java,sql,connection,close;override,public,void,release,jdbc,connection,connection,handle,con,handle,entity,manager,em,throws,persistence,exception,sqlexception
