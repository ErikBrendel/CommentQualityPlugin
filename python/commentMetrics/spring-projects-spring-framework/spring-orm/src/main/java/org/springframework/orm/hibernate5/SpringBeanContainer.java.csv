commented;modifiers;parameterAmount;loc;comment;code
false;public;3;18;;@Override @SuppressWarnings("unchecked") public <B> ContainedBean<B> getBean(Class<B> beanType, LifecycleOptions lifecycleOptions, BeanInstanceProducer fallbackProducer) {     SpringContainedBean<?> bean.     if (lifecycleOptions.canUseCachedReferences()) {         bean = this.beanCache.get(beanType).         if (bean == null) {             bean = createBean(beanType, lifecycleOptions, fallbackProducer).             this.beanCache.put(beanType, bean).         }     } else {         bean = createBean(beanType, lifecycleOptions, fallbackProducer).     }     return (SpringContainedBean<B>) bean. }
false;public;4;18;;@Override @SuppressWarnings("unchecked") public <B> ContainedBean<B> getBean(String name, Class<B> beanType, LifecycleOptions lifecycleOptions, BeanInstanceProducer fallbackProducer) {     SpringContainedBean<?> bean.     if (lifecycleOptions.canUseCachedReferences()) {         bean = this.beanCache.get(name).         if (bean == null) {             bean = createBean(name, beanType, lifecycleOptions, fallbackProducer).             this.beanCache.put(name, bean).         }     } else {         bean = createBean(name, beanType, lifecycleOptions, fallbackProducer).     }     return (SpringContainedBean<B>) bean. }
false;public;0;5;;@Override public void stop() {     this.beanCache.values().forEach(SpringContainedBean::destroyIfNecessary).     this.beanCache.clear(). }
false;private;3;21;;private SpringContainedBean<?> createBean(Class<?> beanType, LifecycleOptions lifecycleOptions, BeanInstanceProducer fallbackProducer) {     try {         if (lifecycleOptions.useJpaCompliantCreation()) {             return new SpringContainedBean<>(this.beanFactory.createBean(beanType, AutowireCapableBeanFactory.AUTOWIRE_CONSTRUCTOR, false), this.beanFactory::destroyBean).         } else {             return new SpringContainedBean<>(this.beanFactory.getBean(beanType)).         }     } catch (BeansException ex) {         if (logger.isDebugEnabled()) {             logger.debug("Falling back to Hibernate's default producer after bean creation failure for " + beanType + ": " + ex).         }         return new SpringContainedBean<>(fallbackProducer.produceBeanInstance(beanType)).     } }
false;private;4;23;;private SpringContainedBean<?> createBean(String name, Class<?> beanType, LifecycleOptions lifecycleOptions, BeanInstanceProducer fallbackProducer) {     try {         if (lifecycleOptions.useJpaCompliantCreation()) {             Object bean = this.beanFactory.autowire(beanType, AutowireCapableBeanFactory.AUTOWIRE_CONSTRUCTOR, false).             this.beanFactory.autowireBeanProperties(bean, AutowireCapableBeanFactory.AUTOWIRE_NO, false).             this.beanFactory.applyBeanPropertyValues(bean, name).             bean = this.beanFactory.initializeBean(bean, name).             return new SpringContainedBean<>(bean, beanInstance -> this.beanFactory.destroyBean(name, beanInstance)).         } else {             return new SpringContainedBean<>(this.beanFactory.getBean(name, beanType)).         }     } catch (BeansException ex) {         if (logger.isDebugEnabled()) {             logger.debug("Falling back to Hibernate's default producer after bean creation failure for " + beanType + ": " + ex).         }         return new SpringContainedBean<>(fallbackProducer.produceBeanInstance(name, beanType)).     } }
false;public;0;4;;@Override public B getBeanInstance() {     return this.beanInstance. }
false;public;0;5;;public void destroyIfNecessary() {     if (this.destructionCallback != null) {         this.destructionCallback.accept(this.beanInstance).     } }
