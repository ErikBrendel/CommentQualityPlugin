commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the JDBC exception translator for Hibernate exception translation purposes.  * <p>Applied to any detected {@link java.sql.SQLException} root cause of a Hibernate  * {@link JDBCException}, overriding Hibernate's own {@code SQLException} translation  * (which is based on a Hibernate Dialect for a specific target database).  * @since 5.1  * @see java.sql.SQLException  * @see org.hibernate.JDBCException  * @see org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator  * @see org.springframework.jdbc.support.SQLStateSQLExceptionTranslator  */ ;/**  * Set the JDBC exception translator for Hibernate exception translation purposes.  * <p>Applied to any detected {@link java.sql.SQLException} root cause of a Hibernate  * {@link JDBCException}, overriding Hibernate's own {@code SQLException} translation  * (which is based on a Hibernate Dialect for a specific target database).  * @since 5.1  * @see java.sql.SQLException  * @see org.hibernate.JDBCException  * @see org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator  * @see org.springframework.jdbc.support.SQLStateSQLExceptionTranslator  */ public void setJdbcExceptionTranslator(SQLExceptionTranslator jdbcExceptionTranslator) {     this.jdbcExceptionTranslator = jdbcExceptionTranslator. }
false;public;1;14;;@Override @Nullable public DataAccessException translateExceptionIfPossible(RuntimeException ex) {     if (ex instanceof HibernateException) {         return convertHibernateAccessException((HibernateException) ex).     }     if (ex instanceof PersistenceException) {         if (ex.getCause() instanceof HibernateException) {             return convertHibernateAccessException((HibernateException) ex.getCause()).         }         return EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex).     }     return null. }
true;protected;1;11;/**  * Convert the given HibernateException to an appropriate exception from the  * {@code org.springframework.dao} hierarchy.  * <p>Will automatically apply a specified SQLExceptionTranslator to a  * Hibernate JDBCException, otherwise rely on Hibernate's default translation.  * @param ex the HibernateException that occurred  * @return a corresponding DataAccessException  * @see SessionFactoryUtils#convertHibernateAccessException  */ ;/**  * Convert the given HibernateException to an appropriate exception from the  * {@code org.springframework.dao} hierarchy.  * <p>Will automatically apply a specified SQLExceptionTranslator to a  * Hibernate JDBCException, otherwise rely on Hibernate's default translation.  * @param ex the HibernateException that occurred  * @return a corresponding DataAccessException  * @see SessionFactoryUtils#convertHibernateAccessException  */ protected DataAccessException convertHibernateAccessException(HibernateException ex) {     if (this.jdbcExceptionTranslator != null && ex instanceof JDBCException) {         JDBCException jdbcEx = (JDBCException) ex.         DataAccessException dae = this.jdbcExceptionTranslator.translate("Hibernate operation: " + jdbcEx.getMessage(), jdbcEx.getSQL(), jdbcEx.getSQLException()).         if (dae != null) {             throw dae.         }     }     return SessionFactoryUtils.convertHibernateAccessException(ex). }
